package helife.tree;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TreeUtil {
	public static Tree getTreeFrom(List<Record> records) {
		
		//存储各层节点List
		Map<Integer, List<Tree>> map = new HashMap<Integer, List<Tree>>();
		
		//显示顺序字符串的单位长度
		int unitLen = 2;
		
		//遍历数据源List生成各层树(层与层之间嵌套)
		for(int i=0; i<records.size(); i++) {
			Record r = records.get(i);
			Tree t = new Tree();
			t.setId(r.getId());
			t.setTxt(r.getTxt());
			t.setCheck(r.getCheck());
			
			//取得此节点深度
			String seq = r.getDispSeq();
			List<String> sections = getSections(seq, unitLen);
			int depth = sections.size();
			
			//第一层父节点为虚拟根,不用特别指定
			if(1 == depth ) {
				
				//该层第一个节点
				if(null == map.get(depth)) {
					
					//初始化该层节点List并加入该节点
					List<Tree> lt = new ArrayList<Tree>();
					lt.add(t);
					map.put(depth, lt);
					
				//该层非第一个节点
				} else {
					//取得该层节点List并加入该节点
					map.get(depth).add(t);
				}
				
			//非第一层节点(须查找父节点)
			} else {
				
				//该层第一个节点
				if(null == map.get(depth)) {
					
					//初始化该层节点List并加入该节点
					List<Tree> lr = new ArrayList<Tree>();
					lr.add(t);
					map.put(depth, lr);
					
					//查找父节点并此节点添加到父节点的child List
					Tree parent = getParent(map, depth - 1);
					List<Tree> tmp = parent.getItems();
					if(null == tmp) {
						tmp = new ArrayList<Tree>();
						tmp.add(t);
						parent.setItems(tmp);
					} else {
						parent.getItems().add(t);
					}
				
				//该层非第一个节点
				} else {
					//取得该层节点List并加入该节点
					map.get(depth).add(t);
					
					//查找父节点并此节点添加到父节点的child List
					Tree parent = getParent(map, depth - 1);
					List<Tree> tmp = parent.getItems();
					if(null == tmp) {
						tmp = new ArrayList<Tree>();
						tmp.add(t);
						parent.setItems(tmp);
					} else {
						parent.getItems().add(t);
					}
					
				}
			}
		}
		
		//取得第一层树
		List<Tree> items = map.get(1);
		
		//生成树
		Tree tree = new Tree();
		tree.setId("000");
		tree.setTxt("远东社内网");
		tree.setCheck(0);
		tree.setItems(items);
		
		return tree;
	}
	
	private static List<String> getSections(String seq, int unitLen) {
		List<String> sections = new ArrayList<String>();
		
		int maxLen = seq.length() / unitLen;
		int index = 0;		
		for(int i=0; i<maxLen; i++) {
			String s = seq.substring(index, index + unitLen);
			if("00".equals(s)) {
				break;				
			} else {
				sections.add(s);
				index = index + unitLen;
			}
		}
		
		return sections;
	}

	//找父节点
	private static Tree getParent(Map<Integer, List<Tree>> map, int grade) {
		List<Tree> lt = map.get(grade);
		return lt.get(lt.size() - 1);
	}

	
	public static void setRecords(List<Record> records, Tree tree, int depth, int index) {
		
		Record r = new Record();
		r.setId(tree.getId());
		r.setTxt(tree.getTxt());
		r.setCheck(tree.getCheck());
		r.setDispSeq(getSeq(depth, index));
		records.add(r);	
		
		List<Tree> list = tree.getItems();
		if(null != list) {
			depth++;
			for(int i = 0; i < list.size(); i++) {
				setRecords(records, list.get(i), depth, i);
			}
		}
		
	}
	
	private static String getSeq(int depth, int index) {
		String seq = "";
		String seq_p = "";
		if(0 == depth) {
			seq = "0000000000";
		} else {
			String last = String.valueOf(index + 1);
			if(last.length() < 2) {
				last = "0" + last;
			}
			seq_p = getSeq(depth - 1, 0);
			int index2 = (depth - 1) * 2 - 1;
			if(index2 < 0) {
				index2 = 0;
			}
			String head = seq_p.substring(0, index2);
			String tail = seq_p.substring(index2 + 2);
			seq = head + last + tail;
			
		}
		
		return seq;
	}
}
