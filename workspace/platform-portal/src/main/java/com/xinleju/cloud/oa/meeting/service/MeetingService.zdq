package com.xinleju.cloud.oa.meeting.service;

import java.util.List;
import java.util.Map;

import com.xinleju.cloud.oa.meeting.dto.MeetingDto;
import com.xinleju.cloud.oa.meeting.entity.Meeting;
import com.xinleju.platform.base.service.BaseService;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.base.utils.SecurityUserBeanInfo;
import com.xinleju.platform.sys.base.dto.BaseSupplierDto;

/**
 * @author wangw
 * 
 * 
 */

public interface MeetingService extends  BaseService <String,Meeting>{
	/**
	 * 待发会议列表
	 * @param paramater
	 * @return
	 */
	List getWaitSendPage(Map map);
	/**
	 * 待开会议列表
	 * @param paramater
	 * @return
	 */

	List getWaitBeginPage(Map map);
	/**
	 * 待开会议列表
	 * @param paramater
	 * @return
	 */

	List getOpenPage(Map map); 
	
	/**
	 * 铲鲟全部会议
	 * @param paramater
	 * @return
	 */

	List getAllMeetingPage(Map map); 
	 /**
		 * 模糊查询会议列表
		 * @param ids
		 * @param paramater
		 * @return
		 */
	public Page getMeetingByPage(Map map)throws Exception;
	
	
	 /**
	 * 获取potal页面的会议列表
	 * @param ids
	 * @param paramater
	 * @return
	 */
	public Page getPotalPage(Map map)throws Exception;
	
	
	
	 /**
	 * 重写保存方法
	 * @param ids
	 * @param paramater
	 * @return
	 */
	public int saveMeetingAndUser(String userInfo, String saveJson)throws Exception;


	/**
	 * 测试发短信
	 * @param map
	 * @return
	 * @throws Exception
	 */
	String sendMsg()throws Exception;
	
	/**
	 * 重写保存方法
	 * @param ids
	 * @param paramater
	 * @return
	 */
	public int updateMeeingStatusOfNoticeMsg(String userInfo, Map updateJson)throws Exception;
	
	
	 /**
	 * 重写保存方法
	 * @param ids
	 * @param paramater
	 * @return
	 */
	public int updateMeetingStatusByTimer(String userInfo, Map map)throws Exception;
	
	
	/**
	 * 根据条件查询会议记录
	 * @param userInfo
	 * @param map
	 * @return
	 */
	public List<Meeting> getAllMeetingByParameter(String userInfo, Map map);
	
	
	/**
	 * 获取会议纪要人参加的会议主题列表
	 * @param userInfo
	 * @param map
	 * @return
	 */
	public List<MeetingDto> getAllMeetingByRecordUser(String userInfo, Map map);
	
	
	/**
	 * 
	 * @param id
	 * @return
	 * 根据供方档案id 查询供方档案和供方账号
	 */
	public MeetingDto getMeetingAndAgendaById(String id)throws Exception;
	
	/**
	 * 获取回复记录中该人员最新的一条回复记录
	 * @param userInfo
	 * @param paramaterJson
	 * @return
	 */
	String operationMeeting(String userInfo, Map paramaterJson);

	/**
	 *
	 * @param meeting
	 * @return
     */
    Integer saveBean(String userInfo,MeetingDto meeting);

    Integer deleteBean(MeetingDto meetingDto);
	/**
	 * @param securityUserBeanInfo
	 * @param id
	 * @return
	 */
	Map getStartFlowInfo(SecurityUserBeanInfo securityUserBeanInfo, String id)throws Exception;
	/**
	 * @param map
	 * @return
	 */
	public int updateStatus(String userInfo,Map map) throws Exception;
	
	
	
	/**
	 * 根据时间，定时轮训会议状态，修改会议状态，改为进行中或者已结束
	 * @param ids
	 * @param paramater
	 * @return
	 */
	public int updateMeetingStatusByTask(String userInfo, Map updateJson)throws Exception;
	
	
	 /**
	 * 查询手机列表
	 * @param ids
	 * @param paramater
	 * @return
	 */
	public Page getMobileMeetingByPage(Map map)throws Exception;
	
	/**
	 * 录入会议纪要时获取到会议的部分信息
	 * @param id
	 * @return
	 * 根据供方档案id 查询供方档案和供方账号
	 */
	public MeetingDto getMeetingSummInfoById(String id)throws Exception;
}
