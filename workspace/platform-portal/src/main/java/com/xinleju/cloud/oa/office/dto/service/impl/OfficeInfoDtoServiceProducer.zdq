package com.xinleju.cloud.oa.office.dto.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.IDGenerator;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.base.utils.PageBeanInfo;
import com.xinleju.platform.base.utils.SecurityUserBeanInfo;
import com.xinleju.cloud.oa.content.dto.ContentChildTreeData;
import com.xinleju.cloud.oa.office.dto.OfficeInfoDto;
import com.xinleju.cloud.oa.office.dto.service.OfficeInfoDtoServiceCustomer;
import com.xinleju.cloud.oa.office.entity.OfficeInfo;
import com.xinleju.cloud.oa.office.service.OfficeInfoService;
import com.xinleju.cloud.oa.sys.utils.UserType;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * @author wangw
 *
 *
 */

public class OfficeInfoDtoServiceProducer implements OfficeInfoDtoServiceCustomer{
	private static Logger log = Logger.getLogger(OfficeInfoDtoServiceProducer.class);
	@Autowired
	private OfficeInfoService officeInfoService;

	public String save(String userInfo, String saveJson){
		// TODO Auto-generated method stub
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   OfficeInfo officeInfo=JacksonUtils.fromJson(saveJson, OfficeInfo.class);
//		   officeInfoService.save(officeInfo);
		   officeInfoService.saveInfoAndRecord(officeInfo);
		   info.setResult(JacksonUtils.toJson(officeInfo));
		   info.setSucess(true);
		   info.setMsg("保存对象成功!");
		} catch (Exception e) {
		 log.error("保存对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("保存对象失败!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList){
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			if (StringUtils.isNotBlank(saveJsonList)) {
				Map map = JacksonUtils.fromJson(saveJsonList, HashMap.class);
				List<OfficeInfoDto> OfficeInfoMap  = (List<OfficeInfoDto>)map.get("saveData");
				List<OfficeInfo> listOfficeInfo = new ArrayList<OfficeInfo>();
				if(OfficeInfoMap.size() > 0){
					for (OfficeInfoDto officeInfoDto : OfficeInfoMap) {
						String saveJson= JacksonUtils.toJson(officeInfoDto);
						OfficeInfo officeInfo=JacksonUtils.fromJson(saveJson, OfficeInfo.class);
						listOfficeInfo.add(officeInfo);
					}
					
					officeInfoService.saveBatch(listOfficeInfo);
				}
				info.setResult("保存成功");
				info.setSucess(true);
				info.setMsg("保存对象成功!");
			} else {
				info.setResult("参数为空");
				info.setSucess(false);
				info.setMsg("保存对象失败!");
			}
		} catch (Exception e) {
			log.error("保存对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("保存对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   OfficeInfo officeInfo=JacksonUtils.fromJson(updateJson, OfficeInfo.class);
//			   int result=   officeInfoService.update(officeInfo);
			   int result=   officeInfoService.update(officeInfo);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   OfficeInfo officeInfo=JacksonUtils.fromJson(deleteJson, OfficeInfo.class);
			   int result= officeInfoService.deleteObjectById(officeInfo.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= officeInfoService.deleteAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	 {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			OfficeInfo officeInfo=JacksonUtils.fromJson(getJson, OfficeInfo.class);
			OfficeInfo	result = officeInfoService.getObjectById(officeInfo.getId());
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				Page page=officeInfoService.getPage(map, (Integer)map.get("start"),  (Integer)map.get("limit"));
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=officeInfoService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				List list=officeInfoService.queryList(map);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=officeInfoService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo,
			String deleteJsonList) {
		// TODO Auto-generated method stub
		return null;
	}

	/**
	 * 查询目录分类 Tree
	 * @param paramater
	 * @return
	 */
	@Override
	public String getOfficeInfoTreeById(String userInfo, String id) {
		//实例返回结果集对象
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try{
			   Map map=JacksonUtils.fromJson(id, HashMap.class);
			   String ids = (String)map.get("id");
			   List<OfficeInfoDto> OfficeInfoDtoTreeList = officeInfoService.getOfficeInfoTreeById(ids);
			   List<OfficeInfoDto> officeInfoDtoList = new ArrayList<OfficeInfoDto>();
			 //组装二级结构
			   if(OfficeInfoDtoTreeList.size() > 0){
				   for (OfficeInfoDto officeInfoTreeDto : OfficeInfoDtoTreeList) {
					   List<OfficeInfoDto> contentChildList = officeInfoService.getOfficeInfoListByHouseId(officeInfoTreeDto.getStockHouseId());
					   if(contentChildList.size() > 0){
						   for (OfficeInfoDto officeInfoDto : contentChildList) {
							   officeInfoDtoList.add(officeInfoDto);
						   }
					   }
				   }
			   }
			   
			   OfficeInfoDtoTreeList.addAll(officeInfoDtoList);
			   info.setResult(JacksonUtils.toJson(OfficeInfoDtoTreeList));
			   info.setSucess(true);
			   info.setMsg("获取知识目录结构树成功!");
		   }catch(Exception e){
			   log.error("获取知识目录结构树失败!"+e.getMessage());
			   info.setSucess(false);
			   info.setMsg("获取知识目录结构树失败!");
			   info.setExceptionMsg(e.getMessage());
		   }
		   return JacksonUtils.toJson(info);
	}

	/* (non-Javadoc)
	 * @see com.xinleju.cloud.oa.office.dto.service.OfficeInfoDtoServiceCustomer#getOfficeInfopage(java.lang.String, java.lang.String)
	 */
	@Override
	public String getOfficeInfopage(String userJson, String paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				Page page=officeInfoService.getOfficeInfopage(map);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=officeInfoService.getOfficeInfopage(new HashMap());
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
	/**
	 * 调整库存，并记录历史
	 * @param userJson
	 * @param paramaterJson
	 * @return
	 */
	@Override
	public String updateCount(String userJson, String paramaterJson) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			Map<String,Object> map=JacksonUtils.fromJson(paramaterJson, HashMap.class);
			//TODO
			Integer result=officeInfoService.updateCount(map);
			
			if(result!=null && result>0){
				info.setResult(JacksonUtils.toJson(result));
				info.setSucess(true);
				info.setMsg("调整库存成功!");
			}else{
				info.setSucess(false);
				info.setMsg("调整库存失败!");
			}
		} catch (Exception e) {
			 log.error("调整库存失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("调整库存失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	/* (non-Javadoc)
	 * @see com.xinleju.cloud.oa.office.dto.service.OfficeInfoDtoServiceCustomer#getOfficeInfopageByCurrentUser(java.lang.String, java.lang.String)
	 */
	@Override
	public String getOfficeInfopageByCurrentUser(String userJson,
			String paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		Map map=JacksonUtils.fromJson(paramater, HashMap.class);
		SecurityUserBeanInfo user=JacksonUtils.fromJson(userJson, SecurityUserBeanInfo.class);
		  Boolean isAdministrators = user.getSecurityUserDto().getType().equals(UserType.ORDINARY.getCode())?false:true;
		  String accountId = user.getSecurityDirectCompanyDto().getId();
		   if(isAdministrators){//判断是否管理员
		   }else{
		    map.put("accoutId", accountId);
		   }
		try {
			if(StringUtils.isNotBlank(paramater)){
				Page page=officeInfoService.getOfficeInfopage(map);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=officeInfoService.getOfficeInfopage(new HashMap());
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}


}
