package com.xinleju.cloud.oa.servey.dto.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.cloud.oa.servey.dto.ServeyQuestionDto;
import com.xinleju.cloud.oa.servey.dto.service.ServeyQuestionDtoServiceCustomer;
import com.xinleju.cloud.oa.servey.entity.ServeyParty;
import com.xinleju.cloud.oa.servey.entity.ServeyQuestion;
import com.xinleju.cloud.oa.servey.service.ServeyPartyService;
import com.xinleju.cloud.oa.servey.service.ServeyQuestionService;
import com.xinleju.cloud.oa.servey.service.ServeyResponseAnswerService;
import com.xinleju.cloud.oa.servey.service.ServeyResponseService;
import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * @author admin
 * 
 *
 */
 
public class ServeyQuestionDtoServiceProducer implements ServeyQuestionDtoServiceCustomer{
	private static Logger log = Logger.getLogger(ServeyQuestionDtoServiceProducer.class);
	@Autowired
	private ServeyQuestionService serveyQuestionService;
	@Autowired
	private ServeyPartyService serveyPartyService;
	@Autowired
	private ServeyResponseService serveyResponseService;
	@Autowired
	private ServeyResponseAnswerService serveyResponseAnswerService;

	public String save(String userInfo, String saveJson){
		// TODO Auto-generated method stub
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   ServeyQuestion serveyQuestion=JacksonUtils.fromJson(saveJson, ServeyQuestion.class);
		   serveyQuestionService.save(serveyQuestion);
		   info.setResult(JacksonUtils.toJson(serveyQuestion));
		   info.setSucess(true);
		   info.setMsg("保存对象成功!");
		} catch (Exception e) {
		 log.error("保存对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("保存对象失败!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   ServeyQuestion serveyQuestion=JacksonUtils.fromJson(updateJson, ServeyQuestion.class);
			   int result=   serveyQuestionService.update(serveyQuestion);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   ServeyQuestion serveyQuestion=JacksonUtils.fromJson(deleteJson, ServeyQuestion.class);
			   int result= serveyQuestionService.deleteObjectById(serveyQuestion.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= serveyQuestionService.deleteAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	 {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			ServeyQuestion serveyQuestion=JacksonUtils.fromJson(getJson, ServeyQuestion.class);
			ServeyQuestionDto result = serveyQuestionService.getServeyQuestionById(serveyQuestion.getId());
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
//				map.put("sidx", "questionNum");
//				Page page=serveyQuestionService.getPage(map, (Integer)map.get("start"),  (Integer)map.get("limit"));
				Page page=serveyQuestionService.getServeyQuestionPage(map);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=serveyQuestionService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				List list=serveyQuestionService.queryList(map);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=serveyQuestionService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   ServeyQuestion serveyQuestion=JacksonUtils.fromJson(deleteJson, ServeyQuestion.class);
			   int result= serveyQuestionService.deletePseudoObjectById(serveyQuestion.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= serveyQuestionService.deletePseudoAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	
	public String listToString(List list, char separator) {    
		StringBuilder sb = new StringBuilder();    
		for (int i = 0; i < list.size(); i++) {        
			sb.append(list.get(i)).append(separator);    
			}    
		return sb.toString().substring(0,sb.toString().length()-1);
	}
	
	
	@Override
	public String queryQuestionListByParameter(String userJson, String parameter) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		char ch = ',';
		try {
			if(StringUtils.isNotBlank(parameter)){
				Map map=JacksonUtils.fromJson(parameter, HashMap.class);
				List<ServeyQuestion> list=serveyQuestionService.queryList(map);
				//遍历问卷中的每个问题，根据问题id去，问题反馈表中查询，有多人对此问题做过反馈
				for (ServeyQuestion serveyQuestion : list) {
					//获取该问卷下面的参与人数，实际上就是问卷下面每道题的参与人数
					List<ServeyParty> listServey = serveyPartyService.queryList(map);
					//定义参与人数变量
					int countPartys =  0;
					//定义该问题已经回复的人员数
					int countReployQuestions = 0;
					if(listServey.size() > 0){
						countPartys = listServey.size();
						serveyQuestion.setCountPartys(countPartys);
					}
					//根据问题类型和问题id，获取该问题有多少人做过回复，问题反馈表是只要有一个人回复，问卷反馈表中就有记录，答案表中是只有对哪道题做过回复，对应这道题的类型不为空，是做过回复
					Map<String,Object> qusetionMap = new HashMap<String, Object>();
					qusetionMap.put("serveyId", serveyQuestion.getServeyId());
					qusetionMap.put("questionId", serveyQuestion.getId());
					countReployQuestions = serveyResponseAnswerService.getCountResponseAnswerByQuestionId(qusetionMap);
					serveyQuestion.setCountReployQuestions(countReployQuestions);
				}
				
			}else{
				List list=serveyQuestionService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCountResponseAnswerByQuestionId(String userJson,
			String parameter) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(parameter)){
				Map map=JacksonUtils.fromJson(parameter, HashMap.class);
				List<ServeyQuestionDto> serveyQuestionDtoList = new ArrayList<ServeyQuestionDto>();
				List<ServeyQuestion> list=serveyQuestionService.queryList(map);
				map.remove("sidx");
				//遍历问卷中的每个问题，根据问题id去，问题反馈表中查询，有多人对此问题做过反馈
				for (ServeyQuestion serveyQuestion : list) {
					ServeyQuestionDto serveyQuestionDto = new ServeyQuestionDto();
					//获取该问卷下面的参与人数，实际上就是问卷下面每道题的参与人数
					map.put("type", "PARTY");
					List<ServeyParty> listServey = serveyPartyService.queryList(map);
					//定义参与人数变量
					int countPartys =  0;
					//定义该问题已经回复的人员数
					int countReployQuestions = 0;
					if(listServey.size() > 0){
						countPartys = listServey.size();
						serveyQuestion.setCountPartys(countPartys);
					}
					//根据问题类型和问题id，获取该问题有多少人做过回复，问题反馈表是只要有一个人回复，问卷反馈表中就有记录，答案表中是只有对哪道题做过回复，对应这道题的类型不为空，是做过回复
					Map<String,Object> qusetionMap = new HashMap<String, Object>();
					qusetionMap.put("serveyId", serveyQuestion.getServeyId());
					qusetionMap.put("questionId", serveyQuestion.getId());
					if("SINGLE_SELECT".equals(serveyQuestion.getQuestionTypeCode())){
						qusetionMap.put("optionId", serveyQuestion.getQuestionTypeCode());
					}
					if("QA".equals(serveyQuestion.getQuestionTypeCode())){
						qusetionMap.put("textResponse", serveyQuestion.getQuestionTypeCode());
					}
					if("MULTI_SELECT".equals(serveyQuestion.getQuestionTypeCode())){
						qusetionMap.put("optionId", serveyQuestion.getQuestionTypeCode());
					}
					countReployQuestions = serveyResponseAnswerService.getCountResponseAnswerByQuestionId(qusetionMap);
					serveyQuestion.setCountReployQuestions(countReployQuestions);
					
					BeanUtils.copyProperties(serveyQuestion,serveyQuestionDto);
					Map<String,Object> optionCountMap = new LinkedHashMap<String, Object>();
					List<Map<String, Object>> optionCountList = serveyResponseAnswerService.getCountAnswerByQuestionId(qusetionMap);
					for(int i = 0; i < optionCountList.size(); i++){
						Object obj = optionCountList.get(i).get("description");
						String description = null;
						if(obj != null){
							description = String.valueOf(obj)+"_"+optionCountList.get(i).get("id");;
						}
						optionCountMap.put(description, optionCountList.get(i).get("count"));
					}
					serveyQuestionDto.setOptionCountMap(optionCountMap);
					
					Map<String,Map<String,Object>> subQuestionCountMap = new LinkedHashMap<String,Map<String,Object>>();
					List<Map<String, Object>>  subQuestionCountList = serveyResponseAnswerService.getCountSubAnswerByQuestionId(qusetionMap);
					for(int  i = 0; i < subQuestionCountList.size();i++){
						
						Object obj = subQuestionCountList.get(i).get("questionContent");
						Object descriptionobj = subQuestionCountList.get(i).get("description");
						String description = null;
						if(descriptionobj != null){
							description = String.valueOf(descriptionobj) + "_" + subQuestionCountList.get(i).get("optionId");
						}
						String questionContent = null;
						if(obj != null){
							questionContent = String.valueOf(obj) + "_" + subQuestionCountList.get(i).get("id");
						}
						
						if(subQuestionCountMap.get(description) != null){
							subQuestionCountMap.get(description).put(questionContent, subQuestionCountList.get(i).get("count"));
						}else{
							Map<String,Object> objMap = new LinkedHashMap<String, Object>();
							objMap.put(questionContent, subQuestionCountList.get(i).get("count"));
							subQuestionCountMap.put(description, objMap);
						}
						
					}
					serveyQuestionDto.setSubQuestionCountMap(subQuestionCountMap);
					serveyQuestionDtoList.add(serveyQuestionDto);
				}
				info.setResult(JacksonUtils.toJson(serveyQuestionDtoList));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=serveyQuestionService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getResponseAnswerByQuestionId(String userJson,
			String parameter) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(parameter)){
				Map map=JacksonUtils.fromJson(parameter, HashMap.class);
				List<ServeyQuestion> list=serveyQuestionService.queryList(map);
				//遍历问卷中的每个问题，根据问题id去，问题反馈表中查询，有多人对此问题做过反馈
				for (ServeyQuestion serveyQuestion : list) {
					//获取该问卷下面的参与人数，实际上就是问卷下面每道题的参与人数
					List<ServeyParty> listServey = serveyPartyService.queryList(map);
					//定义参与人数变量
					int countPartys =  0;
					//定义该问题已经回复的人员数
					int countReployQuestions = 0;
					if(listServey.size() > 0){
						countPartys = listServey.size();
						serveyQuestion.setCountPartys(countPartys);
					}
					//根据问题类型和问题id，获取该问题有多少人做过回复，问题反馈表是只要有一个人回复，问卷反馈表中就有记录，答案表中是只有对哪道题做过回复，对应这道题的类型不为空，是做过回复
					Map<String,Object> qusetionMap = new HashMap<String, Object>();
					qusetionMap.put("serveyId", serveyQuestion.getServeyId());
					qusetionMap.put("questionId", serveyQuestion.getId());
					countReployQuestions = serveyResponseAnswerService.getCountResponseAnswerByQuestionId(qusetionMap);
					serveyQuestion.setCountReployQuestions(countReployQuestions);
				}
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=serveyQuestionService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}


}
