package com.xinleju.cloud.oa.sys.quick.service.impl;

import java.beans.BeanInfo;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.xinleju.cloud.oa.sys.quick.dao.EntryDao;
import com.xinleju.cloud.oa.sys.quick.dto.EntryDto;
import com.xinleju.cloud.oa.sys.quick.entity.Entry;
import com.xinleju.cloud.oa.sys.quick.service.EntryService;
import com.xinleju.cloud.oa.sys.utils.SortType;
import com.xinleju.cloud.oa.sys.utils.StatusType;
import com.xinleju.platform.base.service.impl.BaseServiceImpl;
import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.IDGenerator;
import com.xinleju.platform.sys.res.dto.service.OperationDtoServiceCustomer;
import com.xinleju.platform.sys.res.dto.service.ResourceDtoServiceCustomer;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * @author admin
 * 
 * 
 */

@Service
public class EntryServiceImpl extends  BaseServiceImpl<String,Entry> implements EntryService{
	

	@Autowired
	private EntryDao entryDao;
	//菜单注册服务
    @Autowired
    private ResourceDtoServiceCustomer resourceDtoServiceCustomer;
  //功能点注册
    @Autowired
    private OperationDtoServiceCustomer operationDtoServiceCustomer;


	@Override
	public List<EntryDto> queryTreeList(Map<String,Object> map) throws Exception {
		 List<EntryDto> list=new ArrayList<>();
		   Long level=0l;
		   Long num=1l;
		   List<Entry> baseEntryList = entryDao.queryTreeList(map);
		   if(baseEntryList!=null&&baseEntryList.size()>0){
		    	for (int i=0;i<baseEntryList.size();i++) {
		    		Entry entry = baseEntryList.get(i);
		    		EntryDto entryDto=JacksonUtils.fromJson(JacksonUtils.toJson(entry), EntryDto.class);
		    		entryDto.setLevel(level);
		    		entryDto.setLft(num);
		    		entryDto.setIsLeaf(false);
		    		entryDto.setExpanded(true);
		    		entryDto.setLoaded(true);
		    		list.add(entryDto);
		    		Map<String, Object> typeList = getbaseProjectTypeList(entry.getId(),list,level,num);
		    		num= (Long) typeList.get("num");
		    		entryDto.setRgt(num);
		    		String isleaf = (String)typeList.get("isleaf");
		    		if("1".equals(isleaf)){
		    			entryDto.setIsLeaf(true);
					}else{
						entryDto.setIsLeaf(false);
					}
				}
		    }
		   return list;
	}
	public Map<String,Object> getbaseProjectTypeList(String id,List<EntryDto> list,Long level,Long num)throws Exception {
		  Map<String,Object> map=new HashMap<String, Object>();
		  Map<String,Object> resultmap=new HashMap<String, Object>();
		  map.put("parentId", id);
		  List<Entry> baseEntryList = entryDao.queryTreeList(map);
		  if(baseEntryList!=null&&baseEntryList.size()>0){
			  ++level;
			  for (int i=0;i<baseEntryList.size();i++) {
		    	  Entry entry = baseEntryList.get(i);
				  ++num;
				  EntryDto entryDto=JacksonUtils.fromJson(JacksonUtils.toJson(entry), EntryDto.class);
				  entryDto.setLft(num);
				  entryDto.setLevel(level);
				  entryDto.setIsLeaf(true);
				  entryDto.setExpanded(true);
				  entryDto.setLoaded(true);
				  list.add(entryDto);
				  Map<String, Object> projectTypeList = getbaseProjectTypeList(entry.getId(),list,level,num);
				  num= (Long) projectTypeList.get("num");
				  entryDto.setRgt(num);
			}
			  ++num;
		  }else{
			  resultmap.put("isleaf", "1");
			  ++num;
		  }
		  resultmap.put("num", num);
		  resultmap.put("list", list);
		  return resultmap;
	  }
	
	public static void transMapToBean(Map<String, Object> map, Object obj) throws Exception {  
		  
		BeanInfo beanInfo = Introspector.getBeanInfo(obj.getClass());  
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();  
  
        for (PropertyDescriptor property : propertyDescriptors) {  
            String key = property.getName();  
            if (map.containsKey(key)) {  
                Object value = map.get(key);  
                // 得到property对应的setter方法 
                Method setter = property.getWriteMethod();  
                setter.invoke(obj, value);  
            }  
        }  
    }  
	/**
	 * author:liyong
	 * describe: 修改父节点状态
	 * param:object
	 */
	public void  updateParentStatus(Entry object){
		 String parentId = object.getParentId();
		 Entry entry = entryDao.getObjectById(parentId);
		 if(entry!=null){
		 	updateParentStatus(entry);
		 	entry.setStatus(Integer.parseInt(StatusType.StatusOpen.getCode()));
		 	entryDao.update(entry);
		 }
	}
	/**
	 * author:liyong
	 * describe: 修改子节点所有状态
	 * param:object
	 */
	public void updateChirdStatus(String userinfo,Entry object)throws Exception {
		 Map<String,Object> param=new HashMap<>();
		 param.put("parentId", object.getId());
		 List<Entry> projectList = entryDao.queryList(param);
		 if(projectList!=null&&projectList.size()>0){
			 for (Entry entry : projectList) {
				 updateChirdStatus(userinfo,entry);
				 entry.setStatus(Integer.parseInt(StatusType.StatusClosed.getCode()));
				 entryDao.update(entry);
				 updateMenuStatus(userinfo,entry);
			 }
		 }
	}
	
	/**
	 * author:liyong
	 * describe: 修改子节点所有状态
	 * param:object
	 */
	public void updateChirdStatus(Entry object)throws Exception {
		 Map<String,Object> param=new HashMap<>();
		 param.put("parentId", object.getId());
		 List<Entry> projectList = entryDao.queryList(param);
		 if(projectList!=null&&projectList.size()>0){
			 for (Entry entry : projectList) {
				 updateChirdStatus(entry);
				 entry.setStatus(Integer.parseInt(StatusType.StatusClosed.getCode()));
				 entryDao.update(entry);
			 }
		 }
	}
	
	/**
	 * author:liyong
	 * describe: 更改状态
	 * param:object
	 */
	@Transactional
	@Override
	public int updateStatus(String userinfo,Entry entryBean) throws Exception {
		String status = entryBean.getStatus().toString();
		if(StatusType.StatusOpen.getCode().equals(status)){//启用状态改为禁用
			entryBean.setStatus(Integer.parseInt(StatusType.StatusClosed.getCode()));
			//对子集全部启用禁用 
			this.updateChirdStatus(userinfo,entryBean);
			entryDao.update(entryBean);
			updateMenuStatus(userinfo,entryBean);
		}else if(StatusType.StatusClosed.getCode().equals(status)){//禁用状态改为启用
			//对父集全部启用启用
			this.updateParentStatus(entryBean);
			entryBean.setStatus(Integer.parseInt(StatusType.StatusOpen.getCode()));
			entryDao.update(entryBean);
			updateMenuStatus(userinfo,entryBean);
		}
		return 1;
	}
	
	/**
	 * 修改菜单状态
	 */
	public void updateMenuStatus(String userinfo,Entry entryBean) throws Exception{
		if(!"0".equals(entryBean.getParentId())){//是否为父节点
        	if(0==entryBean.getIsInner()){//为外部链接
                //再删除注册的菜单，如果菜单删除不成功则此数据无法删除
                String menuResult = resourceDtoServiceCustomer.getObjectById(userinfo, "{\"id\":\"" + entryBean.getResourceId() + "\"}");
                DubboServiceResultInfo menuResultInfo = JacksonUtils.fromJson(menuResult, DubboServiceResultInfo.class);
                if (!menuResultInfo.isSucess()) {
                    throw new Exception("数据修改失败！");
                }

                String menuObj = menuResultInfo.getResult();
                Map<String, Object> menuMap = JacksonUtils.fromJson(menuObj, HashMap.class);
                String delMenuResult = null;
                if (menuMap != null) {
                	menuMap.put("status", entryBean.getStatus());
                    delMenuResult = resourceDtoServiceCustomer.update(userinfo, JacksonUtils.toJson(menuMap));
                }
                if (delMenuResult != null) {
                    DubboServiceResultInfo delMenuResultInfo = JacksonUtils.fromJson(delMenuResult, DubboServiceResultInfo.class);
                    if (!delMenuResultInfo.isSucess()) {
                        throw new Exception("菜单修改失败！");
                    }
                }
        	}
        }
	}
	
	/**
	 * author:liyong
	 * describe: 模糊查询方法
	 * param:object
	 */
	@Override
	public List<Entry> queryFuzzySearch(Map<String, Object> map) throws Exception {
		return entryDao.fuzzySearch(map);
	}
	
	/**
	 * author:liyong
	 * describe: 修改数据并且修改关联父子级状态
	 * param:object
	 */
	@Transactional
	@Override
	public int updateBatchStatus(Entry entry) throws Exception {
		entryDao.update(entry);
		if(StatusType.StatusOpen.getCode().equals(entry.getStatus().toString())){
			this.updateParentStatus(entry);
		}else if(StatusType.StatusClosed.getCode().equals(entry.getStatus().toString())){
			this.updateChirdStatus(entry);
		}
		return 1;
	}
	@Override
	public List<Map<String, Object>> getRulerSortNum(Map<String, Object> paramater) throws Exception {
		return entryDao.getRulerSortNum(paramater);
	}
	@Override
	public int updateSort(Entry object, Map<String, Object> map)throws Exception {
		String  sortType= String.valueOf(map.get("sortType"));
		Integer sort1 = object.getSort();
		String parentId = object.getParentId();
		List<Entry> rulerList = entryDao.getEntryListByParentId(parentId);
		if(SortType.SHIFTUP.getCode().equals(sortType)){
			for (int i = 0; i < rulerList.size(); i++) {
				Integer sort2 = rulerList.get(i).getSort();
				if(sort2==sort1&&i!=0){
					Integer sort3 = rulerList.get(i-1).getSort();
					rulerList.get(i-1).setSort(sort2);
					rulerList.get(i).setSort(sort3);
					entryDao.update(rulerList.get(i-1));
					entryDao.update(rulerList.get(i));
					break;
				}
			}
		}else if(SortType.SHIFTDOWN.getCode().equals(sortType)){
		  for (int i = 0; i < rulerList.size(); i++) {
				Integer sort2 = rulerList.get(i).getSort();
				if(sort2==sort1&&i!=rulerList.size()-1){
					Integer sort3 = rulerList.get(i+1).getSort();
					rulerList.get(i+1).setSort(sort2);
					rulerList.get(i).setSort(sort3);
					entryDao.update(rulerList.get(i+1));
					entryDao.update(rulerList.get(i));	
					break;
				}
		}
		}else if(SortType.STICK.getCode().equals(sortType)){
			int len = rulerList.size()-1;
			Integer num =  sort1;
			int isGo = 0;
			for (int i = len; i >0 ; i--) {
				if(rulerList.get(i).getSort()==sort1){
					isGo = i;
					rulerList.get(i).setSort(rulerList.get(0).getSort());
					entryDao.update(rulerList.get(i));
				}
				if(isGo>0){
					rulerList.get(i).setSort(num);
					num = rulerList.get(i-1).getSort();
					rulerList.get(i-1).setSort(rulerList.get(i).getSort());
					entryDao.update(rulerList.get(i-1));
				}
			}
		}else if(SortType.TOBOTTOM.getCode().equals(sortType)){
			int len = rulerList.size()-1;
			Integer num =  sort1;
			int isGo = -1;
			for (int i = 0; i <len ; i++) {
				if(rulerList.get(i).getSort()==sort1){
					isGo = i;
					rulerList.get(i).setSort(rulerList.get(len).getSort());
					entryDao.update(rulerList.get(i));
				}
				if(isGo>-1){
					rulerList.get(i).setSort(num);
					num = rulerList.get(i+1).getSort();
					rulerList.get(i+1).setSort(rulerList.get(i).getSort());
					entryDao.update(rulerList.get(i+1));
				}
			}
		}
		return 1;
	}
	
	/**
	 * 保存快速入口
	 */
	@Override
	public String saveEntryAndAuthor(String userJson, Map<String,Object> newMap)throws Exception {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		Entry entry = JacksonUtils.fromJson(JacksonUtils.toJson(newMap), Entry.class);
	    Entry oldEntry = entryDao.getObjectById((String)newMap.get("id"));
	    
        String resourceId = null;
        //保存修改快速入口
        if (oldEntry == null) {
        	if(!"0".equals(entry.getParentId())){//是否为父节点
            	if(0==entry.getIsInner()){//为外部链接
            		resourceId = IDGenerator.getUUID();
            		entry.setResourceId(resourceId);
            	}
            }
        	entryDao.save(entry);
        } else {
        	@SuppressWarnings("unchecked")
        	Map<String,Object> oldMap=JacksonUtils.fromJson(JacksonUtils.toJson(oldEntry), HashMap.class);
        	oldMap.putAll(newMap);
        	String updateJson= JacksonUtils.toJson(oldMap);
        	entryDao.update(JacksonUtils.fromJson(updateJson, Entry.class));
        }
        //推送菜单
        if(!"0".equals(entry.getParentId())){//是否为父节点
        	if(0==entry.getIsInner()){//为外部链接
        		//注册菜单
        		this.registerMenu(userJson, entry);
        	}
        }
        return JacksonUtils.toJson(info);
	}
	
	/**
     * 向系统中动态注册菜单
     *
     * @param userInfo
     * @param saveJson
     * @return
     * @throws Exception
     */
    private String registerMenu(String userInfo, Entry entry){
    	String menuResult = resourceDtoServiceCustomer.getObjectById(userInfo, "{\"id\":\"" + entry.getResourceId() + "\"}");
        Map<String, Object> menuResultMap = JacksonUtils.fromJson(menuResult, HashMap.class);
        String menuStr = (String) menuResultMap.get("result");
        Map<String, Object> oldMenuMap = JacksonUtils.fromJson(menuStr, HashMap.class);
        String registerMenuResult = null;
        Map<String, Object> resourceMap = new HashMap<String, Object>();
    	resourceMap.put("id", entry.getResourceId());//编码
    	resourceMap.put("code", entry.getCode()+"_MENU");//菜单编码
    	resourceMap.put("name", entry.getName());//菜单名称
    	resourceMap.put("url", entry.getUrl());//菜单url
    	resourceMap.put("appId", "9d6cba61c4b24a5699c339a49471a0e7");//应用Id
    	resourceMap.put("parentId", "23087b7b97324c93afd817a5c400b8ea");//上级菜单ID
    	resourceMap.put("status", 1);//状态
    	resourceMap.put("icon", entry.getLinkIcon());//菜单图标
    	resourceMap.put("sort", entry.getSort());//排序
    	resourceMap.put("openmode", 0);//打开方式
    	resourceMap.put("remark", "");//说明
    	resourceMap.put("isoutmenu", 0);//是否外部链接
        if (oldMenuMap != null) {
            oldMenuMap.putAll(resourceMap);
            registerMenuResult = resourceDtoServiceCustomer.update(userInfo, JacksonUtils.toJson(oldMenuMap));
        } else {
            registerMenuResult = resourceDtoServiceCustomer.save(userInfo, JacksonUtils.toJson(resourceMap));
        }
        
        //为新注册的菜单注册一个查询按钮
        Map<String, Object> operationMap = new HashMap<String, Object>();
        operationMap.put("name", "查询");
        operationMap.put("code", entry.getCode() + "_QUERY");
        operationMap.put("appId", "9d6cba61c4b24a5699c339a49471a0e7");
        operationMap.put("resourceId", entry.getResourceId());
        operationMap.put("type", "1");
        registOperation(userInfo, operationMap);

        DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(registerMenuResult, DubboServiceResultInfo.class);
        if (!dubboServiceResultInfo.isSucess()) {
            throw new RuntimeException("菜单注册失败！");
        }

        return registerMenuResult;
    }
    
    /**
     * 向系统中动态注册操作按钮
     *
     * @param userInfo
     * @param saveJson
     * @return
     * @throws Exception
     */
    private String registOperation(String userInfo, Map<String, Object> operationMap) {

        String operationResult = operationDtoServiceCustomer.queryList(userInfo, JacksonUtils.toJson(operationMap));
        Map<String, Object> operationResultMap = JacksonUtils.fromJson(operationResult, HashMap.class);

        String oldoperationStr = (String) operationResultMap.get("result");
        List<Map<String, Object>> list = JacksonUtils.fromJson(oldoperationStr, ArrayList.class, HashMap.class);
        Map<String, Object> oldoperationResultMap = null;//
        if (list != null && list.size() > 0) {
            oldoperationResultMap = list.get(0);
        }

        String registerOperationResult = null;
        if (oldoperationResultMap != null) {
            oldoperationResultMap.putAll(operationMap);
            registerOperationResult = operationDtoServiceCustomer.update(userInfo, JacksonUtils.toJson(oldoperationResultMap));
        } else {
            operationMap.put("id", IDGenerator.getUUID());
            registerOperationResult = operationDtoServiceCustomer.save(userInfo, JacksonUtils.toJson(operationMap));
        }

        DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(registerOperationResult, DubboServiceResultInfo.class);
        if (!dubboServiceResultInfo.isSucess()) {
            throw new RuntimeException("按钮注册失败！");
        }
        return registerOperationResult;
    }
    
	@Override
	public int deleteEntryAllObjectByIds(String userInfo, List<String> ids)throws Exception {
		int deleteCount = 0;
        if (ids != null && ids.size() > 0) {
            for (String id : ids) {
            	Entry entry = this.getObjectById(id);
            	if(!"0".equals(entry.getParentId())){//是否为父节点
                	if(0==entry.getIsInner()){//为外部链接
                		//先删除注册的按钮，如果按钮删除不成功则此数据无法删除
                        Map<String, Object> pMap = new HashMap<String, Object>();
                        pMap.put("resourceId", entry.getResourceId());
                		String operationResult = operationDtoServiceCustomer.queryList(userInfo, JacksonUtils.toJson(pMap));
                        Map<String, Object> operationResultMap = JacksonUtils.fromJson(operationResult, HashMap.class);

                        String oldoperationStr = (String) operationResultMap.get("result");
                        List<Map<String, Object>> list = JacksonUtils.fromJson(oldoperationStr, ArrayList.class, HashMap.class);
                        Map<String, Object> oldoperationResultMap = null;//
                        if (list != null && list.size() > 0) {
                            oldoperationResultMap = list.get(0);
                        }

                        String delOperationResult = null;
                        if (oldoperationResultMap != null) {
                            delOperationResult = operationDtoServiceCustomer.deletePseudoObjectById(userInfo, "{\"id\":\"" + oldoperationResultMap.get("id") + "\"}");
                        }
                        if (delOperationResult != null) {
                            DubboServiceResultInfo delOperationResultInfo = JacksonUtils.fromJson(delOperationResult, DubboServiceResultInfo.class);
                            if (!delOperationResultInfo.isSucess()) {
                                throw new Exception("按钮删除失败！");
                            }
                        }

                        //再删除注册的菜单，如果菜单删除不成功则此数据无法删除
                        String menuResult = resourceDtoServiceCustomer.getObjectById(userInfo, "{\"id\":\"" + entry.getResourceId() + "\"}");
                        DubboServiceResultInfo menuResultInfo = JacksonUtils.fromJson(menuResult, DubboServiceResultInfo.class);
                        if (!menuResultInfo.isSucess()) {
                            throw new Exception("数据删除失败！");
                        }

                        String menuObj = menuResultInfo.getResult();
                        Map<String, Object> menuMap = JacksonUtils.fromJson(menuObj, HashMap.class);
                        String delMenuResult = null;
                        if (menuMap != null) {
                            delMenuResult = resourceDtoServiceCustomer.deletePseudoObjectById(userInfo, "{\"id\":\"" + entry.getResourceId() + "\"}");
                        }
                        if (delMenuResult != null) {
                            DubboServiceResultInfo delMenuResultInfo = JacksonUtils.fromJson(delMenuResult, DubboServiceResultInfo.class);
                            if (!delMenuResultInfo.isSucess()) {
                                throw new Exception("菜单删除失败！");
                            }
                        }
                	}
                }
                deleteCount += this.deletePseudoObjectById(id);

            }
        }
        return deleteCount;
	}

}
