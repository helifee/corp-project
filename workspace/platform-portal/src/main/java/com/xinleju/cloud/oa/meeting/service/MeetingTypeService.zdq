package com.xinleju.cloud.oa.meeting.service;

import java.util.List;
import java.util.Map;

import com.xinleju.platform.base.service.BaseService;
import com.xinleju.cloud.oa.content.dto.ContentChildTreeData;
import com.xinleju.cloud.oa.meeting.dto.MeetingTypeDto;
import com.xinleju.cloud.oa.meeting.entity.MeetingType;

/**
 * @author wangw
 * 
 * 
 */

public interface MeetingTypeService extends  BaseService <String,MeetingType>{

	/**
	 * 查询树形结构数据
	 * @param status
	 * @param level
	 * @return
	 */
	
	public List<MeetingTypeDto> queryMeetingType(String status)throws Exception;
	
	/**
	 * 
	 * @param object
	 * @return
	 * @throws Exception
	 * 伪删除
	 */
	public int deletePseudoMeetingTypeById(String id)throws Exception;
	
	/**
	 * 
	 * @param object
	 * @return
	 * @throws Exception
	 * 启用禁用
	 */
	public int updateStatus(MeetingType object) throws Exception;
	
	/**
	 * 
	 * @param object
	 * @return
	 * @throws Exception
	 * 如果是启用则要判断该级下面的子级是否都要启用
	 */
	public int updateChildStatusByParentIdNew(MeetingType object) throws Exception;
	
	
	
	/**
	 * 添加的时候后台设置排序号
	 * @param status
	 * @param level
	 * @return
	 */
	
	public int saveMeetingType(MeetingType object)throws Exception;
	
	/**
	 * 获取会议别表的树形结构
	 * @param status
	 * @return
	 * @throws Exception
	 */
	public List<ContentChildTreeData> getMeetingTypeTree(String parm)throws Exception; 
	
	
	/**
	 * 
	 * @param object
	 * @return
	 * @throws Exception
	 * 在修改页面修改父类别状态后，子类的状态也要改变
	 */
	public int updateMeetingType(MeetingType object) throws Exception;
	/**
	 * 判断子id是否是某个id的子id
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public int judgeChildIdByTargetId(Map map) throws Exception;
	
	/**
	 * 判断会议类别是否存在
	 * @param status
	 * @param level
	 * @return
	 */
	
	public int judgeRepeatObject(MeetingType object)throws Exception;
	
	/**
	 * 批量设置流程模板
	 */
	public Integer updateBatchFlow(Map map)throws Exception;
}
