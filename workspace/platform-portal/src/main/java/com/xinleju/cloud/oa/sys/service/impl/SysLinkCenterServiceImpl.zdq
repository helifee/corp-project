package com.xinleju.cloud.oa.sys.service.impl;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.platform.base.service.impl.BaseServiceImpl;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.cloud.oa.sys.dao.SysLinkCenterDao;
import com.xinleju.cloud.oa.sys.dto.SysLinkCenterDto;
import com.xinleju.cloud.oa.sys.entity.SysCommonTools;
import com.xinleju.cloud.oa.sys.entity.SysLinkCenter;
import com.xinleju.cloud.oa.sys.service.SysLinkCenterService;
import com.xinleju.cloud.oa.sys.utils.SortType;
import com.xinleju.cloud.oa.sys.utils.StatusType;

/**
 * @author admin
 * 
 * 
 */

@Service
public class SysLinkCenterServiceImpl extends
		BaseServiceImpl<String, SysLinkCenter> implements SysLinkCenterService {

	@Autowired
	private SysLinkCenterDao sysLinkCenterDao;

	@Override
	public int saveLinkCenter(SysLinkCenter sysLinkCenter)
			throws Exception {
			String type = sysLinkCenter.getType();
			String state = sysLinkCenter.getState();
			Integer Typecount=0;
			if("1".equals(type)&&("1").equals(state)){
			Typecount=sysLinkCenterDao.getCountByTypeStatus();
			}
			if(Typecount==1||Typecount>1){
					return 6;
		   }else{
			String code = sysLinkCenter.getCode();
			Map<String,Object> codeParam=new HashMap<String, Object>();
			codeParam.put("code",code);
			Integer count=sysLinkCenterDao.getLinkCenterListCount(codeParam);
			if(count>0){
				return 5;
			}
			String parentId = sysLinkCenter.getParentId();
			String maxSort = sysLinkCenterDao.getMaxSort(parentId);
			String sort = null;
			if (parentId == null||"".equals(parentId)) {
				if (maxSort == null) {
					sort = "$0001";
				} else {
					String[] s = maxSort.split("\\$");
					int oldNumber = Integer.parseInt(s[1]);
					int newNumber = (oldNumber + 1);
					sort ="$"+String.format("%04d", newNumber);
				}
				sysLinkCenter.setPrefixId(sysLinkCenter.getId());
			} else {
				SysLinkCenter objectById = sysLinkCenterDao.getObjectById(parentId);
				String prefixId = objectById.getPrefixId();
				String parentSort = objectById.getSort();
				if (maxSort == null) {
					sort = parentSort + "-" + "0001";
				} else {
					int oldNumber = Integer.parseInt(maxSort.substring(6));
					int newNumber = (oldNumber + 1);
					sort = parentSort + "-" + String.format("%04d", newNumber);
				}
				sysLinkCenter.setPrefixId(prefixId+"-"+sysLinkCenter.getId());
			}
			sysLinkCenter.setSort(sort);
			sysLinkCenter.setCreateDate(new Timestamp(new Date().getTime()));
			sysLinkCenter.setUpdateDate(new Timestamp(new Date().getTime()));
			return sysLinkCenterDao.save(sysLinkCenter);
			}
		
	}

	@Override
	public int updateSort(SysLinkCenter centerobject, Map<String, Object> map)
			throws Exception {
		List<SysLinkCenter> sysLinkCenterList = sysLinkCenterDao
				.getLinkCenter(centerobject.getParentId());
		String sortType = String.valueOf(map.get("sortType"));
		String sort1 = centerobject.getSort();
		if (SortType.SHIFTUP.getCode().equals(sortType)) {
			for (int i = 0; i < sysLinkCenterList.size(); i++) {
				String sort2 = sysLinkCenterList.get(i).getSort();
				if (sort2.equals(sort1) && i != 0) {
					String sort3 = sysLinkCenterList.get(i - 1).getSort();
					sysLinkCenterList.get(i - 1).setSort(sort2);
					sysLinkCenterList.get(i).setSort(sort3);
					sysLinkCenterDao.update(sysLinkCenterList.get(i - 1));
					sysLinkCenterDao.update(sysLinkCenterList.get(i));
					Map<String, Object> params1 = new HashMap<String, Object>();
					params1.put("oldSort", sort2);
					params1.put("newSort", sort3);
					params1.put("prefixId", sysLinkCenterList.get(i)
							.getPrefixId());
					sysLinkCenterDao.updateAllNodes(params1);
					Map<String, Object> params2 = new HashMap<String, Object>();
					params2.put("oldSort", sort3);
					params2.put("newSort", sort2);
					params2.put("prefixId", sysLinkCenterList.get(i - 1)
							.getPrefixId());
					sysLinkCenterDao.updateAllNodes(params2);
					break;
				}
			}
		} else if (SortType.SHIFTDOWN.getCode().equals(sortType)) {
			for (int i = 0; i < sysLinkCenterList.size(); i++) {
				String sort2 = sysLinkCenterList.get(i).getSort();
				if (sort2.equals(sort1)) {
					if (i != sysLinkCenterList.size() - 1) {
						String sort3 = sysLinkCenterList.get(i + 1).getSort();
						String PrefixId1 = sysLinkCenterList.get(i)
								.getPrefixId();
						String PrefixId2 = sysLinkCenterList.get(i + 1)
								.getPrefixId();
						sysLinkCenterList.get(i + 1).setSort(sort2);
						sysLinkCenterList.get(i).setSort(sort3);
						sysLinkCenterDao.update(sysLinkCenterList.get(i + 1));
						sysLinkCenterDao.update(sysLinkCenterList.get(i));
						Map<String, Object> params1 = new HashMap<String, Object>();
						params1.put("oldSort", sort2);
						params1.put("newSort", sort3);
						params1.put("prefixId", PrefixId1);
						sysLinkCenterDao.updateAllNodes(params1);
						Map<String, Object> params2 = new HashMap<String, Object>();
						params2.put("oldSort", sort3);
						params2.put("newSort", sort2);
						params2.put("prefixId", PrefixId2);
						sysLinkCenterDao.updateAllNodes(params2);
						break;
					}
				}
			}
		}
		return 0;
	}

	@Override
	public int updateStatus(SysLinkCenter sysLinkCenter) throws Exception {
		String type = sysLinkCenter.getType();
		String status = sysLinkCenter.getState();
		Integer Typecount=0;
		if("1".equals(type)&&("0").equals(status)){
		Typecount=sysLinkCenterDao.getCountByTypeStatus();
		}
		if((Typecount==1||Typecount>1)&&"0".equals(status)){
				return 6;
	   }else{
		
		int i = 0;
		if (StatusType.StatusOpen.getCode().equals(status)) {// 启用状态改为禁用 子级全部急用
			List<SysLinkCenter> sysLinkCenterList = sysLinkCenterDao
					.getLinkCenter(sysLinkCenter.getId());
			if (sysLinkCenterList != null && sysLinkCenterList.size() > 0) {
				for (SysLinkCenter linkCenter : sysLinkCenterList) {
					linkCenter.setState(StatusType.StatusClosed.getCode());
					linkCenter.setUpdateDate(new Timestamp(System
							.currentTimeMillis()));
					sysLinkCenterDao.update(linkCenter);
				}
			}
			sysLinkCenter.setState(StatusType.StatusClosed.getCode());
			sysLinkCenter.setUpdateDate(new Timestamp(System
					.currentTimeMillis()));
			i = sysLinkCenterDao.update(sysLinkCenter);
		} else if (StatusType.StatusClosed.getCode().equals(status)) {// 禁用状态改为启用
																		// 父级全部启用
			SysLinkCenter parentLinkCenter = sysLinkCenterDao
					.getObjectById(sysLinkCenter.getParentId());
			if (parentLinkCenter != null) {
				parentLinkCenter.setState(StatusType.StatusOpen.getCode());
				parentLinkCenter.setUpdateDate(new Timestamp(System
						.currentTimeMillis()));
				sysLinkCenterDao.update(parentLinkCenter);
			}
			sysLinkCenter.setState(StatusType.StatusOpen.getCode());
			sysLinkCenter.setUpdateDate(new Timestamp(System
					.currentTimeMillis()));
			i = sysLinkCenterDao.update(sysLinkCenter);
		}
		return i;
	   }
	}

	@Override
	public List queryListGroup(Map map) throws Exception {
		List<List<SysLinkCenter>> list = new ArrayList<List<SysLinkCenter>>();
		String rollId = "";
		List<SysLinkCenter> linkCenterList = sysLinkCenterDao.queryList(new HashMap<String,Object>());
		Map<String,List<SysLinkCenter>> groupMap = linkCenterList.parallelStream().filter(ele->ele.getParentId()!=null&&!"".equals(ele.getParentId())).collect(Collectors.groupingBy(SysLinkCenter::getParentId));
		Map<String,List<SysLinkCenter>> parentMap = linkCenterList.parallelStream().filter(ele->ele.getParentId()==null||"".equals(ele.getParentId())).collect(Collectors.groupingBy(SysLinkCenter::getId));
		groupMap.forEach((k,v)->{
			List<SysLinkCenter> parentList = parentMap.get(k);
			parentList.addAll(v);
			list.add(parentList);
		});

		return list;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.xinleju.cloud.oa.sys.service.SysLinkCenterService#getLinkCenterList
	 * (java.util.Map)
	 */
	@Override
	public Page getLinkCenterList(Map map) throws Exception {
		Page page = new Page();
		/*List<Map<String, Object>> returnList = sysLinkCenterDao
				.getLinkCenterListAll(map);*/
		List<SysLinkCenter> returnList = sysLinkCenterDao
				.getLinkCenterListAll(map);
		/*
		 * for (Map<String, Object> sysLinkCenter : list) {
		 * returnList.add(sysLinkCenter); String queryId=(String)
		 * sysLinkCenter.get("id"); List<Map<String, Object>>
		 * chirdList=sysLinkCenterDao.getLinkCenterList(queryId);
		 * if(chirdList!=null &&chirdList.size()>0){
		 * returnList.addAll(chirdList); } }
		 */
		Integer i = sysLinkCenterDao.getLinkCenterListCount(map);
		page.setTotal(i);
		page.setList(returnList);
		page.setLimit((Integer) map.get("limit"));
		page.setStart((Integer) map.get("start"));
		return page;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.xinleju.cloud.oa.sys.service.SysLinkCenterService#updateSysLinkCenter
	 * (com.xinleju.cloud.oa.sys.entity.SysLinkCenter)
	 */
	@Override
	public int updateSysLinkCenter(SysLinkCenter sysLinkCenter)
			throws Exception {
		String type = sysLinkCenter.getType();
		Integer Typecount=0;
		if("1".equals(type)){
		Typecount=sysLinkCenterDao.getCountByTypeStatus();
		}
		if(Typecount==1||Typecount>1){
				return 6;
	   }else{
		String parentId = sysLinkCenter.getParentId();
		String id = sysLinkCenter.getId();
		SysLinkCenter oldLinkCenter = sysLinkCenterDao.getObjectById(id);
		Map<String,Object> codeParam=new HashMap<String, Object>();
		String code = sysLinkCenter.getCode();
		codeParam.put("code",code);
		Integer count=sysLinkCenterDao.getLinkCenterListCount(codeParam);
		if(count>1){
			return 5;
		}else if(count==1&&(!oldLinkCenter.getCode().equals(code))){
			return 5;
		}else{
		String sort = null;
		String prefix=null;
		String oldParent = oldLinkCenter.getParentId();
		 if(!oldParent.equals(parentId)){
				String maxSort = sysLinkCenterDao.getMaxSort(parentId);
				if (parentId == null||"".equals(parentId)){
					if (maxSort == null) {
						sort = "$0001";
					} else {
						String[] s = maxSort.split("\\$");
						int oldNumber = Integer.parseInt(s[1]);
						int newNumber = (oldNumber + 1);
						sort ="$"+String.format("%04d", newNumber);
					}
					prefix=sysLinkCenter.getId();
				} else {
					SysLinkCenter objectById = sysLinkCenterDao.getObjectById(parentId);
					String prefixId = objectById.getPrefixId();
					String parentSort = objectById.getSort();
					if (maxSort == null) {
						sort = parentSort + "-" + "0001";
					} else {
						int oldNumber = Integer.parseInt(maxSort.substring(6));
						int newNumber = (oldNumber + 1);
						sort = parentSort + "-" + String.format("%04d", newNumber);
					}
					prefix=prefixId+"-"+sysLinkCenter.getId();
				}
				sysLinkCenter.setSort(sort);
				sysLinkCenter.setPrefixId(prefix);
			}
		
		int j = sysLinkCenterDao.update(sysLinkCenter);
		String state = sysLinkCenter.getState();
		if (StatusType.StatusOpen.getCode().equals(state)) {
			sysLinkCenter.setState(StatusType.StatusClosed.getCode());
		} else {
			sysLinkCenter.setState(StatusType.StatusOpen.getCode());
		}
		this.updateStatus(sysLinkCenter);
		return j;
		}
	   }
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.xinleju.cloud.oa.sys.service.SysLinkCenterService#deletePseudoAndChird
	 * (java.lang.String)
	 */
	@Override
	public int deletePseudoAndChird(String id) throws Exception {
		List<String> ids = new ArrayList<String>();
		List<SysLinkCenter> sysLinkCenterList = sysLinkCenterDao
				.getLinkCenter(id);
		for (SysLinkCenter sysLinkCenter : sysLinkCenterList) {
			ids.add(sysLinkCenter.getId());
		}
		ids.add(id);
		sysLinkCenterDao.deletePseudoAllObjectByIds(ids);
		return 0;
	}

	/* (non-Javadoc)
	 * @see com.xinleju.cloud.oa.sys.service.SysLinkCenterService#getQRcode()
	 */
	@Override
	public SysLinkCenter getQRcode() throws Exception {
		return sysLinkCenterDao.getQRcode();
	}

}
