package com.xinleju.cloud.oa.meeting.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.platform.base.service.impl.BaseServiceImpl;
import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.IDGenerator;
import com.xinleju.platform.flow.dto.SysNoticeMsgDto;
import com.xinleju.platform.flow.dto.service.SysNoticeMsgDtoServiceCustomer;
import com.xinleju.platform.sys.notice.dto.service.SysNoticePhoneMsgDtoServiceCustomer;
import com.xinleju.platform.sys.org.dto.service.UserDtoServiceCustomer;
import com.xinleju.platform.tools.data.JacksonUtils;
import com.xinleju.cloud.oa.meeting.dao.MeetingDao;
import com.xinleju.cloud.oa.meeting.dao.MeetingPartnerDao;
import com.xinleju.cloud.oa.meeting.dao.MeetingReplyDao;
import com.xinleju.cloud.oa.meeting.dto.MeetingReplyDto;
import com.xinleju.cloud.oa.meeting.entity.Meeting;
import com.xinleju.cloud.oa.meeting.entity.MeetingReply;
import com.xinleju.cloud.oa.meeting.service.MeetingReplyService;

/**
 * @author wangw
 * 
 * 
 */

@Service
public class MeetingReplyServiceImpl extends  BaseServiceImpl<String,MeetingReply> implements MeetingReplyService{
	//定义一个线程安全的字符串集合
	private StringBuffer contents = new StringBuffer();

	@Autowired
	private MeetingDao meetingDao;
	@Autowired
	private MeetingReplyDao meetingReplyDao;
	@Autowired
	private MeetingPartnerDao meetingPartnerDao;
	@Autowired
	private SysNoticePhoneMsgDtoServiceCustomer sysNoticePhoneMsgDtoServiceCustomer;
	@Autowired
	private SysNoticeMsgDtoServiceCustomer sysNoticeMsgDtoServiceCustomer;
	@Autowired
	private UserDtoServiceCustomer userDtoServiceCustomer;
	
	

	@Override
	public MeetingReplyDto queryMeetingReployByNew(String userInfo,Map map) throws Exception {
		// TODO Auto-generated method stub
		MeetingReplyDto meetingReplyDto = new MeetingReplyDto();
		MeetingReply MeetingReply = meetingReplyDao.queryMeetingReployByNew(map);
		if(MeetingReply != null){
			BeanUtils.copyProperties(MeetingReply, meetingReplyDto);
		}
		return meetingReplyDto;
	}

	/*@Override
	public MeetingReplyDto getUserInfoByMeetingId(String userInfo, Map map)
			throws Exception {
		// TODO Auto-generated method stub
		MeetingReplyDto meetingReplyDto = new MeetingReplyDto();
		List<String> listpartner = meetingPartnerDao.getUserInfoByMeetingId(map);
		//获取参加人员的信息
		map.put("joinFlag", "1");
		List<String> listreploy = meetingReplyDao.getUserInfoByMeetingId(map);
		//List newList = new ArrayList(new HashSet(list));
		//获取不参加人员的信息
		map.put("joinFlag", "0");
		List<String> nolistreploy = meetingReplyDao.getUserInfoByMeetingId(map);
		map.remove("joinFlag");
		//获取全部回复人员信息
		List<String> allreploy = meetingReplyDao.getUserInfoByMeetingId(map);
		
		List<String> noreploy = new ArrayList<String>();
		char ch = ',';
		if(listpartner.size() > 0){
			for (String reploy : listpartner) {
				if(!allreploy.contains(reploy)){
					noreploy.add(reploy);
				}
			}
		}
		if(listpartner.size() > 0){
			String listpartnerName = listToString(listpartner,ch);
			meetingReplyDto.setNoAttendUser(listpartnerName);
		}
		if(listreploy.size() > 0){
			String listreployName = listToString(listreploy,ch);
			meetingReplyDto.setAttendUser(listreployName);
		}
		if(noreploy.size() > 0){
			String noreployName = listToString(noreploy,ch);
			meetingReplyDto.setNoReployUser(noreployName);
		}
		meetingReplyDto.setReployRecord(null);
		
		return meetingReplyDto;
	}*/
	
	
	
	@Override
	public MeetingReplyDto getUserInfoByMeetingId(String userInfo, Map map)
			throws Exception {
		// TODO Auto-generated method stub
		MeetingReplyDto meetingReplyDto = new MeetingReplyDto();
		//获取该会议信息
		Meeting meeting = meetingDao.getObjectById(map.get("meetingId").toString());
		map.remove("userId");
		//查询本条会议除抄送人和其他可阅读者和创建人之外的人员
		List<String> userIdentifiyList = new ArrayList<String>();
		userIdentifiyList.add("4");
		userIdentifiyList.add("5");
		userIdentifiyList.add("6");
		map.put("userIdentifiy", userIdentifiyList.toArray());
		List<String> listpartner = meetingPartnerDao.getUserInfoByMeetingId(map);
		//获取参加人员的信息
		List<String> reploylist = new ArrayList<String>();
		//获取未参加人员信息
		List<String> noReploylist = new ArrayList<String>();
		//获取全部回复人员信息
		List<String> allreploy = new ArrayList<String>();
		//获取未回复人员信息
		List<String> noreploy = new ArrayList<String>();
		
		//定义回复人员回复内容，即回复记录
		List<String> reployRecord = new ArrayList<String>();
		
		//定义回复人员的id，回复包括参加不参加两种状态
		List<String> reployUserIds= new ArrayList<String>();
		
		List<MeetingReply> meetingReployList = meetingReplyDao.queryListMeetingReploy(map);
		if(meetingReployList.size() > 0){
			for (MeetingReply meetingReply : meetingReployList) {
				String newBegintime = meetingReply.getReplyDate().substring(0,meetingReply.getReplyDate().length()-5);
				meetingReply.setReplyDate(newBegintime);
				if("1".equals(meetingReply.getJoinFlag())){
					if(!reploylist.contains(meetingReply.getUserName()) && !noReploylist.contains(meetingReply.getUserName())){
						reploylist.add(meetingReply.getUserName());
					}
					String reployInfo = meetingReply.getUserName() +" 准备参加会议  确认时间  :"+meetingReply.getReplyDate()+"<br/>";
					reployRecord.add(reployInfo);
					if(!reployUserIds.contains(meetingReply.getUserId())){
						reployUserIds.add(meetingReply.getUserId());
					}
					
				}else if("0".equals(meetingReply.getJoinFlag())){
					if(!noReploylist.contains(meetingReply.getUserName()) && !reploylist.contains(meetingReply.getUserName())){
						noReploylist.add(meetingReply.getUserName());
					}
					String reployInfo = meetingReply.getUserName() +" 不准备参加会议  确认时间  :"+meetingReply.getReplyDate()+"<br/>";
					reployRecord.add(reployInfo);
					if(!reployUserIds.contains(meetingReply.getUserId())){
						reployUserIds.add(meetingReply.getUserId());
					}
				}else if("2".equals(meetingReply.getJoinFlag())){
					if(!noReploylist.contains(meetingReply.getUserName()) && !reploylist.contains(meetingReply.getUserName())){
						noReploylist.add(meetingReply.getUserName());
					}
					String reployInfo = "<span style='color:red'>"+meetingReply.getUserName() +" 变更了会议  确认时间  :"+meetingReply.getReplyDate()+"</span><br/>";
					reployRecord.add(reployInfo);
					if(!reployUserIds.contains(meetingReply.getUserId())){
						reployUserIds.add(meetingReply.getUserId());
					}
				}else if("3".equals(meetingReply.getJoinFlag())){
					if(!noReploylist.contains(meetingReply.getUserName()) && !reploylist.contains(meetingReply.getUserName())){
						noReploylist.add(meetingReply.getUserName());
					}
					String reployInfo = meetingReply.getUserName() +" 取消了会议  确认时间  :"+meetingReply.getReplyDate()+"<br/>";
					reployRecord.add(reployInfo);
					if(!reployUserIds.contains(meetingReply.getUserId())){
						reployUserIds.add(meetingReply.getUserId());
					}
				}
				if(!allreploy.contains(meetingReply.getUserName())){
					allreploy.add(meetingReply.getUserName());
				}
			}
		}
		if(reployUserIds.size() > 0){
			for (String userId : reployUserIds) {
				Map<String,Object> mapUserInfo = new HashMap<String, Object>();
				mapUserInfo.put("userId", userId);
				mapUserInfo.put("meetingId", map.get("meetingId").toString());
				MeetingReply meetingReplyNew = meetingReplyDao.queryMeetingReployByNew(map);
				if("1".equals(meetingReplyNew.getJoinFlag()) && noReploylist.contains(meetingReplyNew.getUserName())){
					noReploylist.remove(meetingReplyNew.getUserName());
				}else if("0".equals(meetingReplyNew.getJoinFlag()) && reploylist.contains(meetingReplyNew.getUserName())){
					reploylist.remove(meetingReplyNew.getUserName());
				}
			}
			
		}
		char ch = ',';
		if(listpartner.size() > 0){
			for (String reploy : listpartner) {
				if(!allreploy.contains(reploy)){
					noreploy.add(reploy);
				}
			}
		}
		if(reploylist.size() > 0){
			String reploylistName = listToString(reploylist,ch);
			meetingReplyDto.setAttendUser(reploylistName);
		}
		if(noReploylist.size() > 0){
			String noReploylistName = listToString(noReploylist,ch);
			meetingReplyDto.setNoAttendUser(noReploylistName);
		}
		if(noreploy.size()  >0){
			/*if(noreploy.contains(meeting.getCreatePersonName())){
				noreploy.remove(meeting.getCreatePersonName());
				if(noreploy.size()  >0){
					String noreployName = listToString(noreploy,ch);
					meetingReplyDto.setNoReployUser(noreployName);
				}
			}*/
			if(noreploy.size()  >0){
				String noreployName = listToString(noreploy,ch);
				meetingReplyDto.setNoReployUser(noreployName);
			}
		}
		//获取父类会议的回复信息
		String oldReployRecord = null;
		if(meeting.getChangeMeetingId() != null && !"".equals(meeting.getChangeMeetingId())){
			map.remove("userIdentifiy");
			if(contents != null && !"".equals(contents)){
				contents.setLength(0);
			}
			//调用方法往全局变量中写入数据
			getReployInfoByParentMeetingId(meeting.getChangeMeetingId());
			oldReployRecord = contents.toString();
			
		}
		String lastReploy = null;
		if(reployRecord.size() > 0){
			String reployRecordInfo = listToString(reployRecord,ch);
			lastReploy = reployRecordInfo.replaceAll("[',']","");
			
		}
		if(lastReploy != null){
			if(oldReployRecord != null){
				lastReploy = lastReploy+"<br/>"+oldReployRecord;
			}
			meetingReplyDto.setReployRecord(lastReploy);
		}else{
			meetingReplyDto.setReployRecord(oldReployRecord);
		}
		return meetingReplyDto;
	}
	
	
	/**
	 * 根据会议变更的父级id，查询出该会议下面的所有回复记录
	 * @param userInfo
	 * @param map
	 * @return
	 * @throws Exception
	 *//*
	public MeetingReplyDto getReployInfoByParentMeetingId(String userInfo, Map map)
			throws Exception {
		// TODO Auto-generated method stub
		MeetingReplyDto meetingReplyDto = new MeetingReplyDto();
		//定义回复人员回复内容，即回复记录
		List<String> reployRecord = new ArrayList<String>();
		List<MeetingReply> meetingReployList = meetingReplyDao.queryListMeetingReploy(map);
		if(meetingReployList.size() > 0){
			for (MeetingReply meetingReply : meetingReployList) {
				if("1".equals(meetingReply.getJoinFlag())){
					String reployInfo = meetingReply.getUserName() +" 准备参加会议  确认时间  :"+meetingReply.getReplyDate()+"\r\n";
					reployRecord.add(reployInfo);
				}else if("0".equals(meetingReply.getJoinFlag())){
					String reployInfo = meetingReply.getUserName() +" 不准备参加会议  确认时间  :"+meetingReply.getReplyDate()+"\r\n";
					reployRecord.add(reployInfo);
				}else if("2".equals(meetingReply.getJoinFlag())){
					String reployInfo = meetingReply.getUserName() +" 变更了该会议  确认时间  :"+meetingReply.getReplyDate()+"\r\n";
					String aaa = "<font color='red'></font>";
					reployRecord.add(reployInfo);
				}
			}
		}
		char ch = ',';
		if(reployRecord.size() > 0){
			String reployRecordInfo = listToString(reployRecord,ch);
			String lastReploy = reployRecordInfo.replaceAll("[',']","");
			meetingReplyDto.setReployRecord(lastReploy);
		}
		return meetingReplyDto;
	}*/
	
	
	/**
	 * 根据会议变更的父级id，查询出该会议下面的所有回复记录
	 * @param userInfo
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public synchronized void getReployInfoByParentMeetingId(String metingId)
			throws Exception {
		// TODO Auto-generated method stub
		//定义回复人员回复内容，即回复记录
		List<String> reployRecord = new ArrayList<String>();
		Map<String, String> map = new HashMap<String, String>();
		map.put("meetingId", metingId);
		List<MeetingReply> meetingReployList = meetingReplyDao.queryListMeetingReploy(map);
		if(meetingReployList.size() > 0){
			for (MeetingReply meetingReply : meetingReployList) {
				String newBegintime = meetingReply.getReplyDate().substring(0,meetingReply.getReplyDate().length()-5);
				meetingReply.setReplyDate(newBegintime);
				if("1".equals(meetingReply.getJoinFlag())){
					String reployInfo = meetingReply.getUserName() +" 准备参加会议  确认时间  :"+meetingReply.getReplyDate()+"<br/>";
					reployRecord.add(reployInfo);
				}else if("0".equals(meetingReply.getJoinFlag())){
					String reployInfo = meetingReply.getUserName() +" 不准备参加会议  确认时间  :"+meetingReply.getReplyDate()+"<br/>";
					reployRecord.add(reployInfo);
				}else if("2".equals(meetingReply.getJoinFlag())){
					String reployInfo = "<span style='color:red'>"+meetingReply.getUserName() +" 变更了该会议  确认时间  :"+meetingReply.getReplyDate()+"</span><br/>";
					reployRecord.add(reployInfo);
				}
			}
		}
		char ch = ',';
		if(reployRecord.size() > 0){
			String reployRecordInfo = listToString(reployRecord,ch);
			String lastReploy = reployRecordInfo.replaceAll("[',']","");
			contents.append(lastReploy);
		}
		//根据meetingId 获取会议信息
		Meeting meeting = meetingDao.getObjectById(metingId);
		if(meeting != null && meeting.getChangeMeetingId() != null && !"".equals(meeting.getChangeMeetingId())){
			getReployInfoByParentMeetingId(meeting.getChangeMeetingId());
		} 
	}
	
	public String listToString(List list, char separator) {    
		StringBuilder sb = new StringBuilder();    
		for (int i = 0; i < list.size(); i++) {        
			sb.append(list.get(i)).append(separator);    
			}    
		return sb.toString().substring(0,sb.toString().length()-1);
	}

	@Override
	public int reminderMeeting(String userInfo, String parm) throws Exception {
		// TODO Auto-generated method stub
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("meetingId", parm);
		//获取参加会议的全部人员id
		List<String> listpartner = meetingPartnerDao.getUserInfoByMeetingId(map);
		//获取已经做出回复的人员id
		List<String> listreploy = meetingReplyDao.queryUseerIdByMeetingId(map);
		
		//获取未回复人员信息
		List<String> noreploy = new ArrayList<String>();
		if(listreploy.size() > 0){
			for (String reploy : listpartner) {
				if(!listreploy.contains(reploy)){
					noreploy.add(reploy);
				}
			}
		}
		//获取人员id后，给未回复人员发送待阅通知
		//获取会议信息
		String alluserIds = JacksonUtils.toJson(listreploy);
		Meeting meeting = meetingDao.getObjectById(map.get("meetingId").toString());
		saveSysNoticeMsg(userInfo,meeting,alluserIds,"reminder");
		
		return listreploy.size();
	}
	
	public void saveSysNoticeMsg(String userInfo,Meeting meeting,String userIds,String flag){
		if(userIds != null && !"".equals(userIds)){
			//根据userId获取用户信息
			Map<String,String> mapIds = new HashMap<String,String>();
			mapIds.put("ids", userIds);
			String dubboResultInfo=userDtoServiceCustomer.getUserInfoByUserIds(userInfo, JacksonUtils.toJson(mapIds));
		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		    
		    List<String> listPhones = new ArrayList<String>();
		    
		    if(dubboServiceResultInfo.isSucess()){
		    	String resultInfo= dubboServiceResultInfo.getResult();
				List<Map> list=JacksonUtils.fromJson(resultInfo, ArrayList.class,Map.class);
				if(list.size()>0){
					for (Map map : list) {
						if(map.get("mobile").toString() != null && !"".equals(map.get("mobile").toString())){
							listPhones.add(map.get("mobile").toString());
						}
						SysNoticeMsgDto sysNoticeMsgDto = new SysNoticeMsgDto();
						String noticeId = IDGenerator.getUUID();
						sysNoticeMsgDto.setId(noticeId);
						//sysNoticeMsgDto.setCode("");
						sysNoticeMsgDto.setTitle(meeting.getTitle());
						sysNoticeMsgDto.setLoginName(map.get("loginName").toString());
						sysNoticeMsgDto.setUserId(map.get("id").toString());
						sysNoticeMsgDto.setUserName(map.get("name").toString());
						sysNoticeMsgDto.setMsgType(false);
						//如果是催办获取取消会议则都发，则发待阅
						if(flag.equals("reminder") || flag.equals("cancel")){
							//如果是催办，则发待阅
							sysNoticeMsgDto.setOpType("DY");
						}else if(flag.equals("create")){
							//会议刚创建，则全部给与会人员发待办
							sysNoticeMsgDto.setOpType("DB");
						}
						sysNoticeMsgDto.setSource("FQ");
						sysNoticeMsgDto.setAppCode("flow");
						sysNoticeMsgDto.setBusinessId(meeting.getId());
						//暂时传空IP
						sysNoticeMsgDto.setIpAddress("");
						
						SimpleDateFormat dateFormater = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
						Date date=new Date();
						Timestamp timestamp = Timestamp.valueOf(dateFormater.format(date));
						
						sysNoticeMsgDto.setSendDate(timestamp);
						sysNoticeMsgDto.setExtendInfo("meeting");
						sysNoticeMsgDto.setUrl("/meeting/meeting/meeting_view.html?id="+meeting.getId()+"&update=false"+"&act=view");
						sysNoticeMsgDto.setIsOpen(true);
						String sysNoticeMsgJson= JacksonUtils.toJson(sysNoticeMsgDto);
						sysNoticeMsgDtoServiceCustomer.save(userInfo, sysNoticeMsgJson);
					}
				}
		    }
		    //推送完流程之后，给与会人员发送短信
		    if(listPhones.size() > 0){
		    	String phones = StringUtils.join(listPhones.toArray(),",");
		    	 Map<String, String> map = new HashMap<String, String>();
				 map.put("msg", meeting.getTitle()+",请您准时参加！");
				 map.put("phones", phones);
				 String paramaterJson = JacksonUtils.toJson(map);
				 sysNoticePhoneMsgDtoServiceCustomer.sendMsg(userInfo, paramaterJson);
		    }
		}
	}

}
