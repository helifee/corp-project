package com.xinleju.cloud.oa.content.service.impl;

import java.util.*;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.xinleju.cloud.oa.content.dao.ContentChildDao;
import com.xinleju.cloud.oa.content.dao.ContentRowAttributeDao;
import com.xinleju.cloud.oa.content.dao.ContentTypeDao;
import com.xinleju.cloud.oa.content.entity.*;
import com.xinleju.cloud.oa.content.service.ContentDictionaryItemService;
import com.xinleju.cloud.oa.content.service.ContentDictionaryService;
import com.xinleju.cloud.oa.content.util.ContentEnum;
import com.xinleju.cloud.oa.util.XssUtil;
import com.xinleju.platform.base.datasource.DataSourceContextHolder;
import com.xinleju.platform.base.utils.*;
import com.xinleju.platform.out.app.org.service.OrgnazationOutServiceCustomer;
import com.xinleju.platform.sys.org.dto.OrgnazationDto;
import com.xinleju.platform.sys.res.dto.UserAuthDataOrgList;
import com.xinleju.platform.tools.data.JacksonUtils;
import com.xinleju.platform.univ.attachment.dto.service.AttachmentDtoServiceCustomer;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.DateFormatUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.platform.base.service.impl.BaseServiceImpl;
import com.xinleju.cloud.oa.content.dao.ContentRowTypeDao;
import com.xinleju.cloud.oa.content.service.ContentRowTypeService;

/**
 * @author admin
 */

@Service
public class ContentRowTypeServiceImpl extends BaseServiceImpl<String, ContentRowType> implements ContentRowTypeService {


    @Autowired
    private ContentRowTypeDao contentRowTypeDao;

    @Autowired
    private ContentTypeDao contentTypeDao;

    @Autowired
    private ContentChildDao contentChildDao;

    @Autowired
    private ContentRowAttributeDao contentRowAttributeDao;

    @Autowired
    private OrgnazationOutServiceCustomer orgnazationOutServiceCustomer;
    @Autowired
    private AttachmentDtoServiceCustomer attachmentDtoServiceCustomer;

    @Autowired
    private ContentDictionaryService contentDictionaryService;
    @Autowired
    private ContentDictionaryItemService contentDictionaryItemService;

    @Override
    public int queryTypeCount(String parament) {
        return contentRowTypeDao.queryTypeCount(parament);
    }



    @Override
    public int deleteContentRowTypeByContentTypeId(String contentTypeId) {
        // TODO Auto-generated method stub
        int result = 0;
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("contentTypeId", contentTypeId);
        List<ContentRowType> ContentRowTypeList = contentRowTypeDao.queryList(map);
        if (ContentRowTypeList.size() > 0) {
            List<String> list = new ArrayList<String>();
            for (ContentRowType contentRowType : ContentRowTypeList) {
                list.add(contentRowType.getId());
            }
            result = contentRowTypeDao.deleteAllObjectByIds(list);
        }
        return result;
    }

    @Override
    public Page getContentRowTypeByPage(Map map) throws Exception {
        Page page = contentRowTypeDao.getObjectsByPage(map);
        List<ContentRowType> list = page.getList();
        List<Map<String, Object>> maps = new ArrayList<Map<String, Object>>();
        if (list != null && !list.isEmpty()) {
            ContentType contentType = contentTypeDao.getObjectById(list.get(0).getContentTypeId());
            Map<String,Object> childParamMap = new HashMap<String,Object>();
            childParamMap.put("contentTypeId",list.get(0).getContentTypeId());
            List<ContentChild> contentChildList = contentChildDao.queryList(childParamMap);
            Map<String,Object> childMap = new HashMap<String,Object>();
            for (ContentChild child:contentChildList) {
                childMap.put(child.getId(),child);
            }
            for (ContentRowType contentRowType : list) {
                ContentChild contentChild = (ContentChild) childMap.get(contentRowType.getContentChildId());//contentChildDao.getObjectById(contentRowType.getContentChildId());
                Map<String, Object> mapObj = new HashMap<String, Object>();
                if (org.apache.commons.lang.StringUtils.isNotBlank(contentRowType.getAttributeValue())) {
                    Map<String, Object> contentRowTypeMap = JacksonUtils.fromJson(JacksonUtils.toJson(contentRowType), Map.class);
                    String attrStr = contentRowType.getAttributeValue();
                    mapObj = JacksonUtils.fromJson(attrStr, Map.class);
                    mapObj.putAll(contentRowTypeMap);
                    mapObj.put("docContent", contentRowType.getDocContent() == null ? "" : contentRowType.getDocContent());
                    mapObj.put("flCode",contentRowType.getFlCode());
                } else {
                    mapObj = JacksonUtils.fromJson(JacksonUtils.toJson(contentRowType), Map.class);
                }

                if (contentChild != null) {
                    contentRowType.setContentChildName(contentChild.getName());
                    mapObj.put("contentChildName", contentChild.getName());
                }

                if (contentType != null) {
                    contentRowType.setContentTypeName(contentType.getName());
                    contentRowType.setApprovalProcess(contentType.getApprovalProcess());
                    contentRowType.setBusinessObjectCode(contentType.getBusinessObject());
                    mapObj.put("contentTypeName", contentType.getName());
                    mapObj.put("approvalProcess", contentType.getApprovalProcess());
                    mapObj.put("businessObjectCode", contentType.getBusinessObject());
                }

                maps.add(mapObj);
            }
        }
        page.setList(maps);
        return page;
    }

    /**
     * 分页查询
     *
     * @param map
     * @return
     * @throws Exception
     */
    private Page getObjsByPage(Map map) throws Exception {
        SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
        String userJson = JacksonUtils.toJson(userBeanInfo);
        Map<String,String> dataAuthMap = new HashMap<> ();
        dataAuthMap.put ("appCode","OA");
        dataAuthMap.put("userIds",userBeanInfo.getSecurityUserDto ().getId ());
        dataAuthMap.put ("itemCode", Objects.equals (map.get ("contentType"),"NEWS")?"newsSearch":"docSearch");
        String authResultJson = orgnazationOutServiceCustomer.getUserDataAuthCoAndDeptListByItemCode(userJson,JacksonUtils.toJson (dataAuthMap));
        DubboServiceResultInfo authResultInfo = JacksonUtils.fromJson (authResultJson,DubboServiceResultInfo.class);
        if(authResultInfo.isSucess ()){
            Map<String,UserAuthDataOrgList> authDataMap = JacksonUtils.fromJson (authResultInfo.getResult (),Map.class);
            map.put ("dataAuth",authDataMap.get (userBeanInfo.getSecurityUserDto ().getId ()));
        }
        Page page = contentRowTypeDao.getObjectsByPage(map);
        return page;
    }

    /**
     * 组装新闻列表查询条件
     * @param paramMap
     * @param contentType
     * @return
     */
    private Map<String,Object> getContentRowParams(Map<String,Object> paramMap,ContentType contentType){
        String companyId = (String) paramMap.get("companyId");//知识条目所属公司ID
        Integer limit = (Integer) paramMap.get("limit");//查询数据一页行数
        Boolean displaySwitchCompany = contentType.getDisplaySwitchCompany();//是否显示选择公司

        //获取已读新闻/文档ID集合
        List<String> newsHaveReadIdList = (List<String>) paramMap.get("haveReadIds");

        //知识大类ID
        String contentTypeId = contentType.getId();

        Map<String, Object> contentRowParam = new HashMap<String, Object>();
        //获取当前登录人新闻/文档查看的数据权限
        String dataAuthSearch = contentType.getDataAuthSearch();
        if("newsSearch".equals(dataAuthSearch)||"docSearch".equals(dataAuthSearch)){
            contentRowParam.put("dataAuth", paramMap.get("dataAuth"));
        }else{
            contentRowParam.put("createPersonId", paramMap.get("currentUserId"));
        }
        contentRowParam.put("contentTypeId", contentTypeId);//根据当前大类id过滤数据
        contentRowParam.put("status", "PUBLISHED");//查找已发布新闻or文档
        String url = "contentRowType_doc_view.html";
        if (ContentEnum.NEWS.equals(ContentEnum.valueOf(contentType.getContentType()))) {
            url = "contentRowType_staticPage.html";
            //判断是否图片新闻
            if(ContentEnum.PIC_NEWS.equals(ContentEnum.valueOf(contentType.getNewsType()))){
                contentRowParam.put("start", 0);
                contentRowParam.put("limit", 6);
            }else{
                contentRowParam.put("start", 0);
                contentRowParam.put("limit", limit);
            }
            contentRowParam.put("contentType","NEWS");

        } else if (ContentEnum.DOCUMENT.equals(ContentEnum.valueOf(contentType.getContentType()))) {
            contentRowParam.put("start", 0);
            contentRowParam.put("limit", limit);
            contentRowParam.put("contentType","DOCUMENT");
        }
        //判断所属公司id是否存在，存在则加入查询条件
        if(displaySwitchCompany && StringUtils.isNotBlank(companyId)){
            contentRowParam.put("belongCompanyId",companyId);
        }

        //未读数据条件
        contentRowParam.put("readIdList",newsHaveReadIdList);

        //默认按发布时间倒叙
        Map<String, String> sortFieldsMap = new LinkedHashMap<String, String>();
        sortFieldsMap.put("stick","desc");
        if(newsHaveReadIdList.size()>0){
            sortFieldsMap.put("customSortNum","desc");
        }

        sortFieldsMap.put("publishDate","desc");

        contentRowParam.put("sortFields", JacksonUtils.toJson(sortFieldsMap));

        List<String> groupByFieldsList = new ArrayList<String>();
        groupByFieldsList.add("relationId");
        groupByFieldsList.add("status");
        contentRowParam.put("groupByFields",JacksonUtils.toJson(groupByFieldsList));

        contentRowParam.put("url",url);
        return contentRowParam;
    }

    public String getContentRowDataForPortal(Map<String,Object> paramMap) throws Exception{
        List<ContentRowType> resultList = new LinkedList<ContentRowType>();
        String code = (String) paramMap.get("contentTypeCode");
        Integer start = (Integer) paramMap.get("start");//查询数据开始行
        Integer limit = (Integer) paramMap.get("limit");//查询数据一页行数


        Map<String,Object> contentTypeParam = new HashMap<String,Object>();
        contentTypeParam.put("code",code);

        //获取知识大类
        List<ContentType> contentTypeList = contentTypeDao.queryList(contentTypeParam);
        ContentType contentType = null;
        if(contentTypeList!=null&&contentTypeList.size()>0){
            contentType = contentTypeList.get(0);
        }

        StringBuffer buffer = new StringBuffer();
        if (contentType != null) {
            Boolean displayPortal = contentType.getDisplayPortal();//是否首页显示
            Boolean displayPortalCompany = contentType.getDisplayPortalCompany();//是否显示公司
            Boolean displaySwitchCompany = contentType.getDisplaySwitchCompany();//是否显示选择公司
            Integer newIconDays = contentType.getNewIconDays();
            newIconDays = newIconDays==null?0:newIconDays;



            //查询置顶数据条件
            Map<String,Object> contentRowParam = getContentRowParams(paramMap,contentType);
            String url = (String) contentRowParam.get("url");
            contentRowParam.remove("url");

            //先查置顶数据
            //contentRowParam.put("isStick",true);
            contentRowParam.put("newIconDays",newIconDays);
            //获取分页信息,查找指定数据
            //获取未读置顶数据
            Page page = this.getObjsByPage(contentRowParam);
            List<ContentRowType> contentRowTypeList = page.getList();

            List<ContentRowType> unHaveReadList = contentRowTypeList;

            //图片新闻处理方式
            if (ContentEnum.NEWS.equals(ContentEnum.valueOf(contentType.getContentType())) &&
                    ContentEnum.PIC_NEWS.equals(ContentEnum.valueOf(contentType.getNewsType()))) {
                buffer.append("<div id=\""+contentType.getCode()+"_picNewsContainer\" class=\"carousel slide\" data-ride=\"carousel\" > \n");
                StringBuffer olBuffer = new StringBuffer();
                olBuffer.append("<ol class=\"carousel-indicators\"> \n");

                StringBuffer listBoxBuffer = new StringBuffer();
                listBoxBuffer.append("<div class=\"carousel-inner\" role=\"listbox\"> \n");
                int i = 0;
                List<String> contentRowIdList = new ArrayList<String>();
                for (ContentRowType contentRowType:unHaveReadList) {
                    String tempUrl = "content/contentRowType/" + url + "?from=portal&id=" + contentRowType.getId();

                    if (i == 0) {
                        olBuffer.append("<li data-target=\"#"+contentType.getCode()+"_picNewsContainer\" data-slide-to=\""+i+"\" class=\"active\"></li> \n");
                        listBoxBuffer.append("<div class=\"item active\"> \n");
                    }else{
                        olBuffer.append("<li data-target=\"#"+contentType.getCode()+"_picNewsContainer\" data-slide-to=\""+i+"\" ></li> \n");
                        listBoxBuffer.append("<div class=\"item\"> \n");
                    }

                    String imgUrl="";
                    Map<String, Object> postMap = new HashMap ();
                    postMap.put ("businessId", Arrays.asList (new String[]{contentRowType.getId ()}));
                    postMap.put ("appId", "1");
                    postMap.put ("categoryId", "2");
                    String resultJson = attachmentDtoServiceCustomer.queryListByObject (JacksonUtils.toJson (LoginUtils.getSecurityUserBeanInfo ()), JacksonUtils.toJson (postMap));
                    DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson (resultJson, DubboServiceResultInfo.class);
                    List<AttachmentDto> attachmentDtos = JacksonUtils.fromJson (dubboServiceResultInfo.getResult (), List.class, AttachmentDto.class);
                    if(attachmentDtos!=null&&!attachmentDtos.isEmpty ()){
                        AttachmentDto attachmentDto = attachmentDtos.get (0);
                        imgUrl =  attachmentDto.getUrl ();
                    }

                    listBoxBuffer.append("<a data-href=\""+tempUrl+"\" target=\"_blank\"><img src=\""+imgUrl+"\"/></a> \n");
                    listBoxBuffer.append("<div class=\"carousel-caption\" title=\""+contentRowType.getTitle()+"\">"+contentRowType.getTitle()+"</div> \n");
                    listBoxBuffer.append("</div> \n");

                    i++;

                    contentRowIdList.add(contentRowType.getId());
                }

                olBuffer.append("</ol>");
                listBoxBuffer.append("</div> \n");

                buffer.append(olBuffer.toString());
                buffer.append(listBoxBuffer.toString());
                buffer.append("</div>");

                buffer.append("<script type=\"text/javascript\"> \n");
                buffer.append(" $(function(){ \n" +
                        "   var imgs = $('#"+contentType.getCode()+"_picNewsContainer').find('img') \n" +
                        "   //for(var i=0;i<imgs.length;i++){ \n" +
                        "   ///    $(imgs[i]).attr('src','/platform-app/common/img/newspic02.png');" +
                        "   //} \n" +
                        "   var links = $('#" + contentType.getCode() + "_picNewsContainer').find('a');\n" +

                        "   $.each(links,function(){\n" +
                        //"       debugger;\n" +
                        "       $(this).attr('href',hostUrl + $(this).attr('data-href'));\n" +
                        "   });\n" +
                        "   var contentRowTypeIdArr = " + JacksonUtils.toJson(contentRowIdList) +";\n"+
                        "   $.each(contentRowTypeIdArr,function(i,contentRowTypeId){ \n" +
                        "       var imgUrl = '';" +
                        //      "       $.xljUtils.queryAttachmentUrlList('1', contentRowTypeId, '2', function (okFlag, data) {\n" +
                        //"           console.info(data);\n" +
                        //    "           if (okFlag) {\n" +
                        //   "               if (data.result != null && data.result.length > 0) {\n" +
                        //  "                   imgUrl = data.result[0].url+'/'+data.result[0].path;\n" +
                        "                   var container = $('#"+contentType.getCode()+"_picNewsContainer').parents('.groupnews_container');\n" +
                        "                   $(imgs[i]).height(container.height()-container.find('.news_title:visible').height());\n" +
                        "                   $(imgs[i]).width($('#"+contentType.getCode()+"_picNewsContainer').width());\n" +
                        // "               }\n" +
                        // "           }\n" +
                        //  "       },true);" +
                        "       $('.carousel').carousel();"  +
                        "   });" +

                        "}); \n");
                buffer.append("</script> \n");

                return buffer.toString();
            }

            //判断是否显示切换公司    data-treeParam="{'rootDelFlag':'0','rootStatus' :'1','orgDelFlag':'0','orgStatus':'1','type':'company'}" data-selectNodeType="{'type':'company','msg':'请选择公司'}" data-treeUrl="hostUrl + '/sys/org/root/getOrgTreeByType'+'?time='+Math.random()"
            Map<String,String> treeParam = new HashMap<> ();
            treeParam.put ("rootDelFlag","0");
            treeParam.put ("rootStatus","1");
            treeParam.put ("orgDelFlag","0");
            treeParam.put ("orgStatus","1");
            treeParam.put("type","company");
            treeParam.put("rootSelect","1");//根节点可选
            String treeParamJson = JacksonUtils.toJson (treeParam);
            Map<String,String> selectNodeType = new HashMap<> ();
            selectNodeType.put("type","company");
            selectNodeType.put("msg","请选择公司");
            String selectNodeTypeJson = JacksonUtils.toJson (selectNodeType);
            String treeUrl = "sys/org/root/getOrgTreeByType";
            String changCompanyJs = "";
            if (displaySwitchCompany) {
                changCompanyJs = "var moreComponentObj = $('#"+contentType.getCode()+"').parent('.component-content').siblings('.component-tools').find('.pull-right').find('a.more-component');\n"+
                        "if(moreComponentObj.length==0){"+
                        "   $('#"+contentType.getCode()+"').parent('.component-content').siblings('.component-tools').find('.pull-right')" +
                        "       .append('<a class=\"single-selector more-component\" href=\"javascript:void(0);\" style=\"float: right; margin-right: 10px; color: rgb(51, 51, 51);\" data-treeParam="+treeParamJson+" data-selectNodeType="+selectNodeTypeJson+" data-treeUrl= '+hostUrl+'"+treeUrl+" data-saveCallback=\"changeCompanyCallback\">更换公司</a>');\n" +
                        "   $('#"+contentType.getCode()+"').parents('.groupnews_container').xljSingleSelectorUtil();\n" +
                        "}";
            }
            //if(displayPortalCompany){
            buffer.append("<ul class=\"rules_list\" id=\"" + contentType.getCode() + "\">");
            /*}else{
                buffer.append("<ul class=\"news_list\" id=\"" + contentType.getCode() + "\">");
            }*/

            final String tempUrl = url;
            final Integer tempNewIconDays = newIconDays;
            if(unHaveReadList==null||unHaveReadList.size()==0){
                buffer.append("<li>暂无数据！</li>");
            }else{
                unHaveReadList.stream().forEach(contentRowType->{
                    String newsUrl = "content/contentRowType/" + tempUrl + "?from=portal&id=" + contentRowType.getId();
                    String citySpan = "";
                    String iEle = "";
                    if(displayPortalCompany){
                        citySpan = "<span class=\"city\" title=\""+contentRowType.getBelongCompanyName()+"\">"+contentRowType.getBelongCompanyName()+"</span>";
                        citySpan += "<label>|&nbsp;</label>";
                    }else{
                        iEle = "<i></i>";
                    }

                    Date publishDate = contentRowType.getPublishDate();
                    String publishDateStr = publishDate != null ? DateFormatUtils.format(publishDate, "yyyy-MM-dd") : "";
                    String publishDateSpan = "<span class=\"date\">"+publishDateStr+"</span>";
                    Date currentDate = new Date();
                    long publishTime = publishDate.getTime();
                    long currentTime = currentDate.getTime();
                    if (tempNewIconDays > 0 && tempNewIconDays*24*60*60*1000L>=((currentTime-publishTime))) {
                        String newSpan = "<span class=\"newicon\">New</span>\n";
                        buffer.append("<li >"+citySpan+"<a target=\"_blank\" id=\""+contentRowType.getId()+"\" data-href=\""+newsUrl+"\" title=\"" + contentRowType.getTitle() + "\">"+iEle+contentRowType.getTitle()+"</a>"+newSpan+publishDateSpan+"</li>");
                    }else{
                        buffer.append("<li >"+citySpan+"<a target=\"_blank\" id=\"" + contentRowType.getId() + "\" data-href=\""+newsUrl+"\" title=\""+contentRowType.getTitle()+"\">"+iEle+contentRowType.getTitle()+"</a>"+publishDateSpan+"</li>");
                    }
                });
            }


            buffer.append("</ul>");
            buffer.append("<script type=\"text/javascript\">\n" +
                    "$(function(){\n" +
                    "   var links = $('#" + contentType.getCode() + "').find('a');\n" +
                    "   $.each(links,function(){\n" +
                    "       $(this).attr('href',hostUrl + $(this).attr('data-href'));\n" +
                    "       $(this).on('click',function(){\n" +
                    "           recordNewsReadForPerson(this);" +
                    /*"           if(window.localStorage){\n" +
                    "               var newsIds = window.localStorage.getItem('newsIconDisplay');\n" +
                    "               newsIds = !newsIds||newsIds==''?[]:newsIds.split(',');\n" +
                    "               if($.inArray($(this).attr('id'),newsIds)==-1){\n" +
                    "               newsIds.push($(this).attr('id')); \n" +
                    "               }\n" +
                    "               window.localStorage.setItem('newsIconDisplay',newsIds);\n" +
                    "               clearNewsIcon();\n" +*/
                    //"           }\n" +
                    "       });\n" +
                    "   });\n" + changCompanyJs +
                    //"   $('#" + contentType.getCode() + "').xljSingleSelectorUtil();\n" +
                    "});\n" +
                    "" +
                    "</script>");
        }

        return buffer.toString();
    }

    @Override
    public String getContentRowData(Map map) throws Exception {
        String code = (String) map.get("contentTypeCode");
        map.put("code", code);
        map.remove("contentTypeCode");
        String companyId = (String) map.get("companyId");
        map.remove("companyId");
        //根据大类编码获取唯一大类实体
        List<ContentType> list = contentTypeDao.queryList(map);
        ContentType contentType = null;
        if (list != null && list.size() > 0) {
            contentType = list.get(0);
        }

        StringBuffer buffer = new StringBuffer();
        if (contentType != null) {


            Boolean displayPortal = contentType.getDisplayPortal();//是否首页显示
            Boolean displayPortalCompany = contentType.getDisplayPortalCompany();//是否显示公司
            Boolean displaySwitchCompany = contentType.getDisplaySwitchCompany();//是否显示选择公司
            Integer newIconDays = contentType.getNewIconDays();
            newIconDays = newIconDays==null?0:newIconDays;

            String contentTypeId = contentType.getId();
            Map<String, Object> contentRowParam = new HashMap<String, Object>();
            String dataAuthSearch = contentType.getDataAuthSearch();
            if("newsSearch".equals(dataAuthSearch)||"docSearch".equals(dataAuthSearch)){
                contentRowParam.put("dataAuth", map.get("dataAuth"));
            }else{
                contentRowParam.put("createPersonId", map.get("currentUserId"));
            }

            contentRowParam.put("contentTypeId", contentTypeId);
            String url = "contentRowType_doc_view.html";
            contentRowParam.put("status", "PUBLISHED");//查找已发布新闻or文档
            if (ContentEnum.NEWS.equals(ContentEnum.valueOf(contentType.getContentType()))) {
                url = "contentRowType_staticPage.html";
                //判断是否图片新闻
                if(ContentEnum.PIC_NEWS.equals(ContentEnum.valueOf(contentType.getNewsType()))){
                    contentRowParam.put("start", 0);
                    contentRowParam.put("limit", 6);
                }else{
                    contentRowParam.put("start", 0);
                    contentRowParam.put("limit", 6);
                }
                contentRowParam.put("contentType","NEWS");

            } else if (ContentEnum.DOCUMENT.equals(ContentEnum.valueOf(contentType.getContentType()))) {
                contentRowParam.put("start", 0);
                contentRowParam.put("limit", 6);
                contentRowParam.put("contentType","DOCUMENT");
            }

            if(displaySwitchCompany && StringUtils.isNotBlank(companyId)){
                contentRowParam.put("belongCompanyId",companyId);
            }

            //默认按发布时间倒叙
            Map<String, String> sortFieldsMap = new LinkedHashMap<String, String>();
            sortFieldsMap.put("stick","desc");
            sortFieldsMap.put("publishDate","desc");
            contentRowParam.put("sortFields", JacksonUtils.toJson(sortFieldsMap));

            List<String> groupByFieldsList = new ArrayList<String>();
            groupByFieldsList.add("relationId");
            groupByFieldsList.add("status");
            contentRowParam.put("groupByFields",JacksonUtils.toJson(groupByFieldsList));
            //获取分页信息
            Page page = this.getObjsByPage(contentRowParam);
            List<ContentRowType> contentRowTypeList = page.getList();


            //图片新闻处理方式
            if (ContentEnum.NEWS.equals(ContentEnum.valueOf(contentType.getContentType())) &&
                    ContentEnum.PIC_NEWS.equals(ContentEnum.valueOf(contentType.getNewsType()))) {
                buffer.append("<div id=\""+contentType.getCode()+"_picNewsContainer\" class=\"carousel slide\" data-ride=\"carousel\" > \n");
                StringBuffer olBuffer = new StringBuffer();
                olBuffer.append("<ol class=\"carousel-indicators\"> \n");

                StringBuffer listBoxBuffer = new StringBuffer();
                listBoxBuffer.append("<div class=\"carousel-inner\" role=\"listbox\"> \n");
                int i = 0;
                List<String> contentRowIdList = new ArrayList<String>();
                for (ContentRowType contentRowType:contentRowTypeList) {
                    String tempUrl = "content/contentRowType/" + url + "?from=portal&id=" + contentRowType.getId();

                    if (i == 0) {
                        olBuffer.append("<li data-target=\"#"+contentType.getCode()+"_picNewsContainer\" data-slide-to=\""+i+"\" class=\"active\"></li> \n");
                        listBoxBuffer.append("<div class=\"item active\"> \n");
                    }else{
                        olBuffer.append("<li data-target=\"#"+contentType.getCode()+"_picNewsContainer\" data-slide-to=\""+i+"\" ></li> \n");
                        listBoxBuffer.append("<div class=\"item\"> \n");
                    }

                 String imgUrl="";
                    Map<String, Object> postMap = new HashMap ();
                    postMap.put ("businessId", Arrays.asList (new String[]{contentRowType.getId ()}));
                    postMap.put ("appId", "1");
                    postMap.put ("categoryId", "2");
                    String resultJson = attachmentDtoServiceCustomer.queryListByObject (JacksonUtils.toJson (LoginUtils.getSecurityUserBeanInfo ()), JacksonUtils.toJson (postMap));
                    DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson (resultJson, DubboServiceResultInfo.class);
                    List<AttachmentDto> attachmentDtos = JacksonUtils.fromJson (dubboServiceResultInfo.getResult (), List.class, AttachmentDto.class);
                    if(attachmentDtos!=null&&!attachmentDtos.isEmpty ()){
                        AttachmentDto attachmentDto = attachmentDtos.get (0);
                        imgUrl =  attachmentDto.getUrl ();
                    }

                    listBoxBuffer.append("<a data-href=\""+tempUrl+"\" target=\"_blank\"><img src=\""+imgUrl+"\"/></a> \n");
                    listBoxBuffer.append("<div class=\"carousel-caption\" title=\""+contentRowType.getTitle()+"\">"+contentRowType.getTitle()+"</div> \n");
                    listBoxBuffer.append("</div> \n");

                    i++;

                    contentRowIdList.add(contentRowType.getId());
                }

                olBuffer.append("</ol>");
                listBoxBuffer.append("</div> \n");

                buffer.append(olBuffer.toString());
                buffer.append(listBoxBuffer.toString());
                buffer.append("</div>");

                buffer.append("<script type=\"text/javascript\"> \n");
                buffer.append(" $(function(){ \n" +
                        "   var imgs = $('#"+contentType.getCode()+"_picNewsContainer').find('img') \n" +
                        "   //for(var i=0;i<imgs.length;i++){ \n" +
                        "   ///    $(imgs[i]).attr('src','/platform-app/common/img/newspic02.png');" +
                        "   //} \n" +
                        "   var links = $('#" + contentType.getCode() + "_picNewsContainer').find('a');\n" +

                        "   $.each(links,function(){\n" +
                        //"       debugger;\n" +
                        "       $(this).attr('href',hostUrl + $(this).attr('data-href'));\n" +
                        "   });\n" +
                        "   var contentRowTypeIdArr = " + JacksonUtils.toJson(contentRowIdList) +";\n"+
                        "   $.each(contentRowTypeIdArr,function(i,contentRowTypeId){ \n" +
                        "       var imgUrl = '';" +
                  //      "       $.xljUtils.queryAttachmentUrlList('1', contentRowTypeId, '2', function (okFlag, data) {\n" +
                        //"           console.info(data);\n" +
                    //    "           if (okFlag) {\n" +
                     //   "               if (data.result != null && data.result.length > 0) {\n" +
                      //  "                   imgUrl = data.result[0].url+'/'+data.result[0].path;\n" +
                       "                   var container = $('#"+contentType.getCode()+"_picNewsContainer').parents('.groupnews_container');\n" +
                        "                   $(imgs[i]).height(container.height()-container.find('.news_title:visible').height());\n" +
                        "                   $(imgs[i]).width($('#"+contentType.getCode()+"_picNewsContainer').width());\n" +
                       // "               }\n" +
                       // "           }\n" +
                      //  "       },true);" +
                        "       $('.carousel').carousel();"  +
                        "   });" +

                        "}); \n");
                buffer.append("</script> \n");

                return buffer.toString();
            }

            /*if(contentRowTypeList==null||contentRowTypeList.size()==0){
                return "暂无数据展示！";
            }*/
            //判断是否显示切换公司    data-treeParam="{'rootDelFlag':'0','rootStatus' :'1','orgDelFlag':'0','orgStatus':'1','type':'company'}" data-selectNodeType="{'type':'company','msg':'请选择公司'}" data-treeUrl="hostUrl + '/sys/org/root/getOrgTreeByType'+'?time='+Math.random()"
            Map<String,String> treeParam = new HashMap<> ();
            treeParam.put ("rootDelFlag","0");
            treeParam.put ("rootStatus","1");
            treeParam.put ("orgDelFlag","0");
            treeParam.put ("orgStatus","1");
            treeParam.put("type","company");
            treeParam.put("rootSelect","1");//根节点可选
            String treeParamJson = JacksonUtils.toJson (treeParam);
            Map<String,String> selectNodeType = new HashMap<> ();
            selectNodeType.put("type","company");
            selectNodeType.put("msg","请选择公司");
            String selectNodeTypeJson = JacksonUtils.toJson (selectNodeType);
            String treeUrl = "sys/org/root/getOrgTreeByType";
            String changCompanyJs = "";
            if (displaySwitchCompany) {
                changCompanyJs = "var moreComponentObj = $('#"+contentType.getCode()+"').parent('.component-content').siblings('.component-tools').find('.pull-right').find('a.more-component');\n"+
                        "if(moreComponentObj.length==0){"+
                        "   $('#"+contentType.getCode()+"').parent('.component-content').siblings('.component-tools').find('.pull-right')" +
                        "       .append('<a class=\"single-selector more-component\" href=\"javascript:void(0);\" style=\"float: right; margin-right: 10px; color: rgb(51, 51, 51);\" data-treeParam="+treeParamJson+" data-selectNodeType="+selectNodeTypeJson+" data-treeUrl= '+hostUrl+'"+treeUrl+" data-saveCallback=\"changeCompanyCallback\">更换公司</a>');\n" +
                        "   $('#"+contentType.getCode()+"').parents('.groupnews_container').xljSingleSelectorUtil();\n" +
                        "}";
            }
            //if(displayPortalCompany){
                buffer.append("<ul class=\"rules_list\" id=\"" + contentType.getCode() + "\">");
            /*}else{
                buffer.append("<ul class=\"news_list\" id=\"" + contentType.getCode() + "\">");
            }*/

            final String tempUrl = url;
            final Integer tempNewIconDays = newIconDays;
            if(contentRowTypeList==null||contentRowTypeList.size()==0){
                buffer.append("<li>暂无数据！</li>");
            }else{
                contentRowTypeList.stream().forEach(contentRowType->{
                    String newsUrl = "content/contentRowType/" + tempUrl + "?from=portal&id=" + contentRowType.getId();
                    String citySpan = "";
                    String iEle = "";
                    if(displayPortalCompany){
                        citySpan = "<span class=\"city\" title=\""+contentRowType.getBelongCompanyName()+"\">"+contentRowType.getBelongCompanyName()+"</span>";
                        citySpan += "<label>|&nbsp;</label>";
                    }else{
                        iEle = "<i></i>";
                    }

                    Date publishDate = contentRowType.getPublishDate();
                    String publishDateStr = publishDate != null ? DateFormatUtils.format(publishDate, "yyyy-MM-dd") : "";
                    String publishDateSpan = "<span class=\"date\">"+publishDateStr+"</span>";
                    Date currentDate = new Date();
                    long publishTime = publishDate.getTime();
                    long currentTime = currentDate.getTime();
                    if (tempNewIconDays > 0 && tempNewIconDays>=((currentTime-publishTime)/1000/60/60/24)) {
                        String newSpan = "<span class=\"newicon\">New</span>\n";
                        buffer.append("<li >"+citySpan+"<a target=\"_blank\" id=\""+contentRowType.getId()+"\" data-href=\""+newsUrl+"\" title=\"" + contentRowType.getTitle() + "\">"+iEle+contentRowType.getTitle()+"</a>"+newSpan+publishDateSpan+"</li>");
                    }else{
                        buffer.append("<li >"+citySpan+"<a target=\"_blank\" id=\"" + contentRowType.getId() + "\" data-href=\""+newsUrl+"\" title=\""+contentRowType.getTitle()+"\">"+iEle+contentRowType.getTitle()+"</a>"+publishDateSpan+"</li>");
                    }
                });
            }


            buffer.append("</ul>");
            buffer.append("<script type=\"text/javascript\">\n" +
                    "$(function(){\n" +
                    "   var links = $('#" + contentType.getCode() + "').find('a');\n" +
                    "   $.each(links,function(){\n" +
                    "       $(this).attr('href',hostUrl + $(this).attr('data-href'));\n" +
                    "       $(this).on('click',function(){\n" +
                    "           recordNewsReadForPerson(this);" +
                    /*"           if(window.localStorage){\n" +
                    "               var newsIds = window.localStorage.getItem('newsIconDisplay');\n" +
                    "               newsIds = !newsIds||newsIds==''?[]:newsIds.split(',');\n" +
                    "               if($.inArray($(this).attr('id'),newsIds)==-1){\n" +
                    "               newsIds.push($(this).attr('id')); \n" +
                    "               }\n" +
                    "               window.localStorage.setItem('newsIconDisplay',newsIds);\n" +
                    "               clearNewsIcon();\n" +*/
                    //"           }\n" +
                    "       });\n" +
                    "   });\n" + changCompanyJs +
                    //"   $('#" + contentType.getCode() + "').xljSingleSelectorUtil();\n" +
                    "});\n" +
                    "" +
                    "</script>");
        }else {
            return "暂无数据展示！";
        }

        return buffer.toString();
    }

    /**
     * 更新状态
     *
     * @param updateJson state: publish 发布，unPublish 取消发布，stick 置顶 ,unStick 取消置顶, up 上移，down 下移 ,collect 收藏,trans 分类转移
     *                   status:草稿：DRAFT、审批中：APPROVALING、已审批未发布：APPROVED、已发布：PUBLISHED、作废：INVALID
     * @return
     */
    @Override
    public String updateState(String updateJson) {
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        Map<String, Object> paramMap = JacksonUtils.fromJson(updateJson, HashMap.class);
        final String state = String.valueOf(paramMap.get("state"));
        final String ids = String.valueOf(paramMap.get("ids"));
        Integer hours = 24;
        if (state.equals("stick")) {
            hours = Integer.valueOf(String.valueOf(paramMap.get("param")));
        }
        String contentChildId = null;
        if (state.equals("trans")) {
            contentChildId = String.valueOf(paramMap.get("param"));
        }
        String type = null;
        if (state.equals("unPublish")) {
            type = String.valueOf(paramMap.get("param"));
        }
        String[] idsArray = ids.split(",");
        for (String id : idsArray) {
            ContentRowType oldContentRowType = contentRowTypeDao.getObjectById(id);

//            oldContentRowType.setAttributeValue(jo.replaceAll("\\\\'","'").replaceAll("\\\\\\\\", "\\\\"));
           // String json =  JacksonUtils.toJson (oldContentRowType);
            //oldContentRowType = JacksonUtils.fromJson(json,ContentRowType.class);
            //oldContentRowType.setAttributeValue(jo.replaceAll("\\\\", "\\\\\\\\").replaceAll("\r\n", "\\\\r\\\\n"));
            if (oldContentRowType != null) {
                switch (state) {
                    case "publish":
                        oldContentRowType.setStatus("PUBLISHED");
                        oldContentRowType.setPublishDate(new Date());

                        String jo = JacksonUtils.toJson(oldContentRowType);
                        Map<String,Object> oldContentRowTypeMap = JacksonUtils.fromJson(jo,Map.class);
                        oldContentRowTypeMap.remove("attributeValue");
                        String attrValueStr = JacksonUtils.toJson(oldContentRowTypeMap);
                        oldContentRowType.setAttributeValue(attrValueStr.replaceAll("\\\\","\\\\\\\\"));

                        contentRowTypeDao.update(oldContentRowType);
                        info.setSucess(true);
                        info.setMsg("发布成功！");
                        break;
                    case "unPublish":
                        if (Objects.equals(type, "PUBLISHED")) {
                            oldContentRowType.setStatus("APPROVED");//大类发起审批流程
                        } else {
                            oldContentRowType.setStatus("DRAFT");//大类未走审批流程
                        }

                        String jo1 = JacksonUtils.toJson(oldContentRowType);
                        Map<String,Object> oldContentRowTypeMap1 = JacksonUtils.fromJson(jo1,Map.class);
                        oldContentRowTypeMap1.remove("attributeValue");
                        String attrValueStr1 = JacksonUtils.toJson(oldContentRowTypeMap1);
                        oldContentRowType.setAttributeValue(attrValueStr1.replaceAll("\\\\","\\\\\\\\"));

                        contentRowTypeDao.update(oldContentRowType);
                        info.setSucess(true);
                        info.setMsg("取消发布成功！");
                        break;
                    case "stick":
                        oldContentRowType.setStick(Boolean.TRUE);
                        oldContentRowType.setStickCycle(hours);
                        oldContentRowType.setStickInvalidTime(new Date(System.currentTimeMillis() + hours * 60 * 60 * 1000));

                        String jo2 = JacksonUtils.toJson(oldContentRowType);
                        Map<String,Object> oldContentRowTypeMap2 = JacksonUtils.fromJson(jo2,Map.class);
                        oldContentRowTypeMap2.remove("attributeValue");
                        String attrValueStr2 = JacksonUtils.toJson(oldContentRowTypeMap2);
                        oldContentRowType.setAttributeValue(attrValueStr2.replaceAll("\\\\","\\\\\\\\"));

                        contentRowTypeDao.update(oldContentRowType);
                        info.setSucess(true);
                        info.setMsg("置顶成功！");
                        break;
                    case "unStick":
                        oldContentRowType.setStick(Boolean.FALSE);

                        String jo3 = JacksonUtils.toJson(oldContentRowType);
                        Map<String,Object> oldContentRowTypeMap3 = JacksonUtils.fromJson(jo3,Map.class);
                        oldContentRowTypeMap3.remove("attributeValue");
                        String attrValueStr3 = JacksonUtils.toJson(oldContentRowTypeMap3);
                        oldContentRowType.setAttributeValue(attrValueStr3.replaceAll("\\\\","\\\\\\\\"));

                        contentRowTypeDao.update(oldContentRowType);
                        info.setSucess(true);
                        info.setMsg("取消置顶成功！");
                        break;
                    case "up":
                        Map paramUp = new HashMap();
                        paramUp.put("sortNum", oldContentRowType.getSortNum());
                        paramUp.put("contentTypeId", oldContentRowType.getContentTypeId());
                        paramUp.put("contentChildId", oldContentRowType.getContentChildId());
                        ContentRowType pre = contentRowTypeDao.selectMaxSortContentRowType(paramUp);
                        if (pre != null) {
                            if (Objects.equals(pre.getStick(), Boolean.TRUE) && Objects.equals(oldContentRowType.getStick(), Boolean.FALSE)) {
                                //上一个是置顶元素 当前是普通元素
                                info.setResult(id);
                                info.setCode(ErrorInfoCode.PARAMETER_ERROR.getValue());
                                info.setMsg("不能移动到置顶数据前面！");
                                info.setSucess(false);
                            } else {
                                paramUp.clear();
                                paramUp.put("id", oldContentRowType.getId());
                                paramUp.put("sortNum", pre.getSortNum());
                                contentRowTypeDao.switchOrder(paramUp);
                                paramUp.clear();
                                paramUp.put("id", pre.getId());
                                paramUp.put("sortNum", oldContentRowType.getSortNum());
                                contentRowTypeDao.switchOrder(paramUp);
                                info.setResult(id);
                                info.setMsg("数据移动成功！");
                                info.setSucess(true);
                            }
                        } else {
                            info.setResult(id);
                            info.setCode(ErrorInfoCode.PARAMETER_ERROR.getValue());
                            info.setMsg("已到顶部！");
                            info.setSucess(false);
                        }
                        break;
                    case "down":
                        Map paramDown = new HashMap();
                        paramDown.put("sortNum", oldContentRowType.getSortNum());
                        paramDown.put("contentTypeId", oldContentRowType.getContentTypeId());
                        paramDown.put("contentChildId", oldContentRowType.getContentChildId());
                        ContentRowType next = contentRowTypeDao.selectMinSortContentRowType(paramDown);
                        if (next != null) {
                            if (Objects.equals(next.getStick(), Boolean.FALSE) && Objects.equals(oldContentRowType.getStick(), Boolean.TRUE)) {
                                //下一个是普通元素 当前是置顶元素
                                info.setResult(id);
                                info.setCode(ErrorInfoCode.PARAMETER_ERROR.getValue());
                                info.setMsg("不能移动到普通数据后面！");
                                info.setSucess(false);
                            } else {
                                paramDown.clear();
                                paramDown.put("id", oldContentRowType.getId());
                                paramDown.put("sortNum", next.getSortNum());
                                contentRowTypeDao.switchOrder(paramDown);
                                paramDown.clear();
                                paramDown.put("id", next.getId());
                                paramDown.put("sortNum", oldContentRowType.getSortNum());
                                contentRowTypeDao.switchOrder(paramDown);
                                info.setResult(id);
                                info.setMsg("数据移动成功！");
                                info.setSucess(true);
                            }
                        } else {
                            info.setResult(id);
                            info.setCode(ErrorInfoCode.PARAMETER_ERROR.getValue());
                            info.setMsg("已到底部！");
                            info.setSucess(false);
                        }
                        break;
                    case "collect":
                        break;
                    case "trans":
                        oldContentRowType.setContentChildId(contentChildId);
                        ContentChild contentChild = contentChildDao.getObjectById (contentChildId);
                        oldContentRowType.setContentTypeId (contentChild.getContentTypeId ());
                        Map paramTrans = new HashMap();
                        paramTrans.put("sortNum", 0);
                        paramTrans.put("contentTypeId", contentChild.getContentTypeId ());
                        paramTrans.put("contentChildId", contentChildId);
                        ContentRowType contentRowTypePre = contentRowTypeDao.selectMaxSortContentRowType(paramTrans);
                        Integer sort = 1;
                        if (contentRowTypePre != null) {
                            sort = contentRowTypePre.getSortNum() + 1;
                        }
                        oldContentRowType.setSortNum(sort);
                        Map param = JacksonUtils.fromJson (oldContentRowType.getAttributeValue (),Map.class);
                        param.put ("contentTypeId",contentChild.getContentTypeId ());
                        param.put ("contentChildId",contentChildId);
                        param.put("contentChildName",contentChild.getName ());

                        //oldContentRowType.setAttributeValue (JacksonUtils.toJson (param));
                        String jo4 = JacksonUtils.toJson(oldContentRowType);
                        Map<String,Object> oldContentRowTypeMap4 = JacksonUtils.fromJson(jo4,Map.class);
                        oldContentRowTypeMap4.remove("attributeValue");
                        String attrValueStr4 = JacksonUtils.toJson(oldContentRowTypeMap4);
                        oldContentRowType.setAttributeValue(attrValueStr4.replaceAll("\\\\","\\\\\\\\"));

                        int resultInt =  contentRowTypeDao.update(oldContentRowType);
                        info.setSucess(true);
                        info.setMsg("分类转移成功！");
                        break;
                }
            } else {
                info.setResult(id);
                info.setCode(ErrorInfoCode.NULL_ERROR.getValue());
                info.setMsg("未找有效的数据！");
                info.setSucess(false);
                return JacksonUtils.toJson(info);
            }
        }
        return JacksonUtils.toJson(info);
    }

    /**
     * 新增
     *
     * @param contentRowType
     * @return
     */
    @Override
    public Integer saveBean(ContentRowType contentRowType) {
        Map paramUp = new HashMap();
        paramUp.put("sortNum", contentRowType.getSortNum());
        paramUp.put("contentTypeId", contentRowType.getContentTypeId());
        paramUp.put("contentChildId", contentRowType.getContentChildId());
        ContentRowType pre = contentRowTypeDao.selectMaxSortContentRowType(paramUp);
        Integer sort = 1;
        if (pre != null) {
            sort = pre.getSortNum() + 1;
        }
        contentRowType.setSortNum(sort);
        if (contentRowType.getStatus() == null) {
            contentRowType.setStatus("DRAFT");//草稿状态
        }
        if (contentRowType.getMinorVersion() == null) {
            contentRowType.setMinorVersion(0);
        }
        if (contentRowType.getBigVersion() == null) {
            contentRowType.setBigVersion(1);
        }

        Map<String,Object> contentRowTypeMap = JacksonUtils.fromJson(JacksonUtils.toJson(contentRowType), Map.class);
        contentRowTypeMap.remove("attributeValue");
        //contentRowTypeMap.remove("docContent");
        contentRowType.setAttributeValue(JacksonUtils.toJson(contentRowTypeMap).replaceAll("\\\\", "\\\\\\\\"));
        return contentRowTypeDao.save(contentRowType);

    }

    @Override
    public ContentRowType getObjectById(String id) throws Exception {
        ContentRowType contentRowType = contentRowTypeDao.getObjectById(id);
        String attrStr = contentRowType.getAttributeValue();
        contentRowType.setAttributeValue(attrStr.replaceAll("\\\\", "\\\\\\\\").replaceAll("\r\n", "\\\\r\\\\n"));
        ContentChild contentChild = contentChildDao.getObjectById(contentRowType.getContentChildId());
        ContentType contentType = contentTypeDao.getObjectById(contentRowType.getContentTypeId());
        if (contentChild != null) {
            contentRowType.setContentChildName(contentChild.getName());
        }
        if (contentType != null) {
            contentRowType.setContentTypeName(contentType.getName());
            contentRowType.setApprovalProcess(contentType.getApprovalProcess());
            contentRowType.setBusinessObjectCode(contentType.getBusinessObject());
        }
        return contentRowType;
    }

    /**
     * 计算点击量
     *
     * @param id
     * @return
     */
    @Override
    public synchronized Integer updateHits(String id) {
        ContentRowType contentRowType = contentRowTypeDao.getObjectById(id);
        if (contentRowType != null) {
            String contentRowTypeJson = JacksonUtils.toJson(contentRowType);

            Integer hitNum = contentRowType.getHitNum() == null ? 1 : contentRowType.getHitNum() + 1;
            contentRowType.setHitNum(hitNum);

            Map<String,Object> conrentRowTypeMap = JacksonUtils.fromJson(contentRowTypeJson,Map.class);
            conrentRowTypeMap.remove("attributeValue");
            contentRowType.setAttributeValue(JacksonUtils.toJson(conrentRowTypeMap).replaceAll("\\\\","\\\\\\\\"));

            return contentRowTypeDao.update(contentRowType);
        }
        return -1;
    }

    /**
     * 定时取消置顶状态
     *
     * @return
     */
    @Override
    public Integer updateContentRowTypeStickTimeOutTask() {

        return contentRowTypeDao.updateStickTimeOut();
    }

    /**
     * 获取同分类文档列表
     *
     * @param map
     * @return
     */
    @Override
    public List<ContentRowType> querySameList(Map map) {
        return contentRowTypeDao.querySameList(map);
    }

    /**
     * 获取版本文档列表
     *
     * @param map
     * @return
     */
    @Override
    public List<HashMap<String, Object>> queryVersionList(Map map) {
      /*  String id = String.valueOf(map.get("contentRowTypeId"));
        List<HashMap<String,Object>> list= new ArrayList<HashMap<String,Object>>();
        ContentRowType contentRowType = contentRowTypeDao.getObjectById(id);
        if(StringUtils.isNotBlank(contentRowType.getRelationId())){
            getRelationBean(contentRowType.getRelationId(),list);
        }
        return list;*/
        List<ContentRowType> relationBeans = contentRowTypeDao.querContentRowTypeList(map);
        List<HashMap<String, Object>> list = new ArrayList<HashMap<String, Object>>();
        if (relationBeans != null && !relationBeans.isEmpty()) {
            for (ContentRowType relationBean : relationBeans) {
                HashMap<String, Object> viewMap = new HashMap<String, Object>();
                viewMap.put("id", relationBean.getId());
                viewMap.put("contentTypeId", relationBean.getContentTypeId());
                viewMap.put("contentChildId", relationBean.getContentChildId());
                viewMap.put("title", relationBean.getTitle());
                viewMap.put("createPersonName", relationBean.getCreatePersonName());
                viewMap.put("createDate", relationBean.getCreateDate());
                viewMap.put("version", relationBean.getBigVersion() + "." + relationBean.getMinorVersion());
                list.add(viewMap);
            }
        }

        return list;
    }

    private void getRelationBean(String id, List list) {
        ContentRowType relationBean = contentRowTypeDao.getObjectById(id);
        HashMap<String, Object> viewMap = new HashMap<String, Object>();
        viewMap.put("id", relationBean.getId());
        viewMap.put("contentTypeId", relationBean.getContentTypeId());
        viewMap.put("contentChildId", relationBean.getContentChildId());
        viewMap.put("title", relationBean.getTitle());
        viewMap.put("createPersonName", relationBean.getCreatePersonName());
        viewMap.put("createDate", relationBean.getCreateDate());
        viewMap.put("version", relationBean.getBigVersion() + "." + relationBean.getMinorVersion());
        list.add(viewMap);
        if (StringUtils.isNotBlank(relationBean.getRelationId())) {
            getRelationBean(relationBean.getRelationId(), list);
        }
    }

    @Override
    public Map<String, Object> queryVariableForFlow(Map map) {
        String contentRowTypeId = (String) map.get("businessId");
        //map.get("businessObjectCode");
        //map.get("flCode");
        //获取知识对象
        ContentRowType contentRowType = this.contentRowTypeDao.getObjectById(contentRowTypeId);
        String attributeValue = contentRowType.getAttributeValue();
        Map<String, Object> attrValMap = JacksonUtils.fromJson(attributeValue, Map.class);
        //获取知识对象key/value json串
        attrValMap = attrValMap == null ? new HashMap<String, Object>() : attrValMap;
        Map<String, Object> oldAttrValMap = new HashMap<String,Object>();
        oldAttrValMap.putAll(attrValMap);
        String contentTypeId = contentRowType.getContentTypeId();

        //定义知识属性查询参数
        Map<String, Object> paramMap = new HashMap<String, Object>();
        paramMap.put("contentTypeId", contentTypeId);
        //获取知识属性列表
        List<ContentRowAttribute> contentRowAttributeList = this.contentRowAttributeDao.queryList(paramMap);

        ContentType contentType = this.contentTypeDao.getObjectById(contentTypeId);
        String docContentType = null;
        if(contentType!=null){
            docContentType = contentType.getContentType();
        }
        //业务表单所有字段键值对
        Map<String, Object> flowBusinessDataMap = new HashMap<String, Object>();

        Map<String, Object> phoneFlowBusinessDataMap = new HashMap<String, Object>();
        List<Map<String,Object>> phoneKeyValMapList = new ArrayList<Map<String,Object>>();


        for (ContentRowAttribute contentRowAttribute : contentRowAttributeList) {
            Boolean processVariable = contentRowAttribute.getProcessVariable();
            String fieldCode = contentRowAttribute.getFieldCode();
            //判断用于流程的属性
            if (processVariable==null|| !processVariable) {
                attrValMap.remove(fieldCode);
            }else{
                String formType = contentRowAttribute.getFormType();
                if(!"hidden".equals(formType)){
                    String fieldVal = String.valueOf(attrValMap.get(fieldCode)==null?"":attrValMap.get(fieldCode));

                    if(formType.equals("select")||formType.equals("checkbox")||formType.equals("radio")){
                        try {
                            Map<String,Object> dicParam = new HashMap<String,Object>();
                            dicParam.put("code",fieldCode);
                            List<ContentDictionary> dictionaryList = contentDictionaryService.queryList(dicParam);
                            if(dictionaryList!=null&&dictionaryList.size() > 0){
                                ContentDictionary contentDictionary = dictionaryList.get(0);
                                String dictionarId = contentDictionary.getId();
                                Map<String, Object> mapItem = new HashMap<String, Object>();
                                mapItem.put("dictionaryId", dictionarId);
                                mapItem.put("val",fieldVal);
                                List<ContentDictionaryItem> listItem = contentDictionaryItemService.queryList(mapItem);
                                if(listItem!=null&&listItem.size()>0){
                                    fieldVal = listItem.get(0).getName();
                                }
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }

                    Map<String,Object> phoneKeyValMap = new HashMap<String,Object>();
                    phoneKeyValMap.put("name",contentRowAttribute.getViewName());
                    phoneKeyValMap.put("value","null".equals(fieldVal)?"":fieldVal);
                    phoneKeyValMap.put("sort",contentRowAttribute.getSortNum());
                    phoneKeyValMapList.add(phoneKeyValMap);
                }
            }
        }
        flowBusinessDataMap.putAll(attrValMap);

        if(ContentEnum.NEWS.equals(ContentEnum.valueOf(docContentType))){
            Map<String,Object> phoneKeyValMap = new HashMap<String,Object>();
            phoneKeyValMap.put("name","NEWS_FLOW");
            phoneKeyValMap.put("value",true);
            phoneKeyValMap.put("sort",100000);
            phoneKeyValMapList.add(phoneKeyValMap);
        }else{
            Map<String,Object> phoneKeyValMap1 = new HashMap<String,Object>();
            phoneKeyValMap1.put("name","docContent");
            phoneKeyValMap1.put("value",oldAttrValMap.get("docContent"));
            phoneKeyValMap1.put("sort",100000);
            phoneKeyValMapList.add(phoneKeyValMap1);

            Map<String,Object> phoneKeyValMap = new HashMap<String,Object>();
            phoneKeyValMap.put("name","DOCUMENT_FLOW");
            phoneKeyValMap.put("value",true);
            phoneKeyValMap.put("sort",100001);
            phoneKeyValMapList.add(phoneKeyValMap);
        }
        phoneFlowBusinessDataMap.put("dataList",phoneKeyValMapList);


        Map<String, Object> flowVariableMap = new HashMap<String, Object>();
        flowVariableMap.put("flow_phone_data", phoneFlowBusinessDataMap);
        flowVariableMap.put("flow_business_data", flowBusinessDataMap);

        attrValMap.put("flow_business_company_id", contentRowType.getBelongCompanyId());
        attrValMap.put("flow_business_company_name", contentRowType.getBelongCompanyName());
        attrValMap.put("flow_business_dept_id", contentRowType.getBelongDeptId());
        attrValMap.put("flow_business_dept_name", contentRowType.getBelongDeptName());
        attrValMap.put("start_user_id", contentRowType.getCreatePersonId());
        attrValMap.put("start_user_name", contentRowType.getCreatePersonName());
        flowVariableMap.put("flow_business_variable_data", attrValMap);


        return flowVariableMap;
    }

    /**
     * 编码唯一校验
     *
     * @param contentRowType
     * @return
     */
    @Override
    public Integer checkUniqueCode(ContentRowType contentRowType) {
        List<ContentRowType> existBean = this.contentRowTypeDao.checkUniqueCode(contentRowType);
        return (existBean != null && !existBean.isEmpty ()) ? 1 : 0;
    }

    @Override
    public List queryContentRowTypeList(Map map) {
        Map<String,List<OrgnazationDto>> authMap = (Map<String,List<OrgnazationDto>>)map.get("dataAuth");
        if(authMap!=null&&!authMap.isEmpty ()){
            List<OrgnazationDto> deptList = JacksonUtils.fromJson (JacksonUtils.toJson (authMap.get("deptList")),List.class,OrgnazationDto.class);
            if(deptList.isEmpty ()){
                map.put ("createPersonId", LoginUtils.getSecurityUserBeanInfo ().getSecurityUserDto ().getId ());
            }else{
                StringBuffer deptIds =  new StringBuffer ();
                for(OrgnazationDto dept:deptList){
                    deptIds.append ("\"").append (dept.getId ()).append ("\",");
                }
                map.put("deptFields",deptIds.substring (0,deptIds.lastIndexOf (",")));
            }
        }
        List<ContentRowType> list = this.contentRowTypeDao.querContentRowTypeList(map);
        if (list != null && !list.isEmpty()) {
         /* list.parallelStream ().forEach (e->{
                DataSourceContextHolder.setDataSourceType (LoginUtils.getSecurityUserBeanInfo ().getTendCode ());
                DataSourceContextHolder.getDataSourceType ();
                ContentType contentType = this.contentTypeDao.getObjectById(e.getContentTypeId());
                if (contentType != null) {
                    e.setContentTypeName(contentType.getName());
                    e.setContentType(contentType.getContentType());
                }
                ContentChild contentChild = this.contentChildDao.getObjectById(e.getContentChildId());
                if (contentChild != null) {
                    e.setContentChildName(contentChild.getName());
                }
            });*/
            for (ContentRowType contentRowType : list) {
                        ContentType contentType = this.contentTypeDao.getObjectById(contentRowType.getContentTypeId());
                            if (contentType != null) {
                                contentRowType.setContentTypeName(contentType.getName());
                                contentRowType.setContentType(contentType.getContentType());
                            }
                            ContentChild contentChild = this.contentChildDao.getObjectById(contentRowType.getContentChildId());
                            if (contentChild != null) {
                                contentRowType.setContentChildName(contentChild.getName());
                            }
            }
        }
        return list;
    }

    @Override
    public Page queryListForMobile(Map<String, Object> paramMap) {
        String contentTypeCodes = (String) paramMap.get("contentTypeCodes");
        Map<String,Object> contentTypeParams = new HashMap<String,Object>();
        contentTypeParams.put("contentType","NEWS");
        List<ContentType> contentTypeList = contentTypeDao.queryList(contentTypeParams);
        Map<String,Object> contentTypeAuthSearchMap = new HashMap<String,Object>();
        String tempContentTypeCodes = "";
        for (ContentType contentType:contentTypeList) {
            if(StringUtils.isBlank(contentTypeCodes)){
                tempContentTypeCodes += contentType.getCode() + ',';
                contentTypeAuthSearchMap.put(contentType.getCode(),contentType.getDataAuthSearch());
            }else{
                if(contentTypeCodes.contains(contentType.getCode())){
                    contentTypeAuthSearchMap.put(contentType.getCode(),contentType.getDataAuthSearch());
                }
            }
        }

        if(tempContentTypeCodes.endsWith(",")){
            contentTypeCodes = tempContentTypeCodes.substring(0,tempContentTypeCodes.lastIndexOf(","));
        }


        if(StringUtils.isNotBlank(contentTypeCodes)){
            if(contentTypeAuthSearchMap.size()==0){
                contentTypeAuthSearchMap.put(contentTypeCodes.split(",")[0],"newsSearch");
            }
            paramMap.put("contentTypeCodeList",Arrays.asList(contentTypeCodes.split(",")));
            paramMap.put("contentTypeAuthSearchMap",contentTypeAuthSearchMap);
        }else{
            Page page = new Page();
            page.setLimit((Integer) paramMap.get("limit"));
            page.setStart((Integer) paramMap.get("start"));
            page.setList(null);

            Integer total = 0;
            page.setTotal(total);
            return page;
        }

        //拼接数据权限字符串
        Map<String,List<OrgnazationDto>> authMap = (Map<String,List<OrgnazationDto>>)paramMap.get("dataAuth");
        paramMap.remove("dataAuth");
        if(authMap!=null&&!authMap.isEmpty ()){
            //List<OrgnazationDto> companyList = JacksonUtils.fromJson (JacksonUtils.toJson (authMap.get("companyList")),List.class,OrgnazationDto.class);
            List<OrgnazationDto> deptList = JacksonUtils.fromJson (JacksonUtils.toJson (authMap.get("deptList")),List.class,OrgnazationDto.class);
            //if(companyList.isEmpty ()&&deptList.isEmpty ()){
            StringBuffer deptIds =  new StringBuffer ();
            for(OrgnazationDto dept:deptList){
                deptIds.append ("\"").append (dept.getId ()).append ("\",");
            }
            String deptIdStr = deptIds.toString();
            if(deptIdStr.endsWith(",")){
                paramMap.put("deptFields",deptIdStr.substring (0,deptIds.lastIndexOf (",")));
            }else{
                paramMap.put("deptFields","\"null\"");

            }

        }


        List<Map<String,Object>> list = this.contentRowTypeDao.queryListForMobile(paramMap);
        Page page = new Page();
        page.setLimit((Integer) paramMap.get("limit"));
        page.setStart((Integer) paramMap.get("start"));
        page.setList(list);

        Integer total = this.contentRowTypeDao.queryListForMobileCount(paramMap);
        page.setTotal(total);
        return page;
    }

    @Override
    public Map<String, Object> queryObjectInfoById(String contentRowTypeId) throws Exception {
        if (contentRowTypeId == null) {
            throw new RuntimeException("知识条目ID不能为空！");
        }
        Map<String,Object> paramMap = new HashMap<String,Object>();
        paramMap.put("id",contentRowTypeId);

        return this.contentRowTypeDao.queryObjectInfoById(paramMap);
    }
}
