package com.xinleju.cloud.oa.content.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.platform.base.service.impl.BaseServiceImpl;
import com.xinleju.platform.base.utils.MessageResult;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.tools.data.JacksonUtils;
import com.xinleju.cloud.oa.content.dao.ContentDictionaryItemDao;
import com.xinleju.cloud.oa.content.entity.ContentDictionaryItem;
import com.xinleju.cloud.oa.content.service.ContentDictionaryItemService;
import com.xinleju.cloud.oa.content.util.DataType;

/**
 * @author admin
 */

@Service
public class ContentDictionaryItemServiceImpl extends BaseServiceImpl<String, ContentDictionaryItem> implements ContentDictionaryItemService {


    @Autowired
    private ContentDictionaryItemDao contentDictionaryItemDao;

    @Override
    public List queryListDictionaryItem(String userInfo, String paramater) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public void deleteAllObjectByDictionaryId(String strId) throws Exception {
        contentDictionaryItemDao.deleteAllObjectByDictionaryId(strId);
    }

    @Override
    public List<ContentDictionaryItem> saveAllDictionaryItem(Map<String, Object> dictionaryParam) throws Exception {
        Map<String, Object> map = new HashMap<String, Object>();
        String dictionaryId = (String) dictionaryParam.get("dictionaryId");
        String itemJson = (String) dictionaryParam.get("dictionaryItemList");
        List<ContentDictionaryItem> list = JacksonUtils.fromJson(itemJson,List.class,ContentDictionaryItem.class);

        List<ContentDictionaryItem> saveList = new ArrayList<ContentDictionaryItem>();
        if (list != null) {
            for (ContentDictionaryItem dictionaryItem:list) {
                dictionaryItem.setDictionaryId(dictionaryId);
                ContentDictionaryItem oldDictionaryItem = this.getObjectById(dictionaryItem.getId());
                if (oldDictionaryItem != null) {
                    //BeanUtils.copyProperties(oldDictionaryItem,dictionaryItem);
                    oldDictionaryItem.setDictionaryId(dictionaryItem.getDictionaryId());
                    oldDictionaryItem.setName(dictionaryItem.getName());
                    oldDictionaryItem.setVal(dictionaryItem.getVal());
                    oldDictionaryItem.setSort(dictionaryItem.getSort());
                    this.update(oldDictionaryItem);
                    saveList.add(oldDictionaryItem);
                }else{
                    this.save(dictionaryItem);
                    saveList.add(dictionaryItem);
                }
            }
        }

        return saveList;
    }

    @Override
    public Page getDictionaryItemByPage(Map<String, Object> map) throws Exception {
        Page page = new Page();
        List<Map<String, Object>> list = contentDictionaryItemDao.getPageData(map);
        Integer count = contentDictionaryItemDao.getPageDataCount(map);
        page.setLimit((Integer) map.get("limit"));
        page.setList(list);
        page.setStart((Integer) map.get("start"));
        page.setTotal(count);
        return page;
    }


}
