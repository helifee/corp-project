package com.xinleju.cloud.oa.meeting.dto.service.impl;

import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.xinleju.cloud.oa.meeting.entity.Meeting;
import com.xinleju.cloud.oa.meeting.service.MeetingService;
import com.xinleju.platform.base.utils.ErrorInfoCode;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.base.utils.SecurityUserBeanInfo;
import com.xinleju.cloud.oa.meeting.dto.MeetingSummaryDto;
import com.xinleju.cloud.oa.meeting.dto.service.MeetingSummaryDtoServiceCustomer;
import com.xinleju.cloud.oa.meeting.entity.MeetingSummary;
import com.xinleju.cloud.oa.meeting.service.MeetingSummaryService;
import com.xinleju.cloud.oa.meeting.utils.MeetingStatusType;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * @author admin
 * 
 *
 */
 
public class MeetingSummaryDtoServiceProducer implements MeetingSummaryDtoServiceCustomer{
	private static Logger log = Logger.getLogger(MeetingSummaryDtoServiceProducer.class);
	@Autowired
	private MeetingSummaryService meetingSummaryService;
	@Autowired
	private MeetingService meetingService;

	public String save(String userInfo, String saveJson){
		// TODO Auto-generated method stub
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   MeetingSummaryDto meetingSummaryDto=JacksonUtils.fromJson(saveJson, MeetingSummaryDto.class);
		   SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//设置日期格式
			String currentTime = df.format(new Date());// new Date()为获取当前系统时间
			meetingSummaryDto.setPlanBeginDate(currentTime);
			meetingSummaryDto.setActualBeginDate(currentTime);
			if(meetingSummaryDto.getPlanBeginTime() == null || "".equals(meetingSummaryDto.getPlanBeginTime())){
				meetingSummaryDto.setPlanBeginTime(currentTime);
			}
			if(meetingSummaryDto.getActualBeginTime() == null || "".equals(meetingSummaryDto.getActualBeginTime())){
				meetingSummaryDto.setActualBeginTime(currentTime);
			}
			if(meetingSummaryDto.getEntryDate() == null || "".equals(meetingSummaryDto.getEntryDate())){
				meetingSummaryDto.setEntryDate(currentTime);
			}
			MeetingSummary meetingSummary = new MeetingSummary();
			BeanUtils.copyProperties(meetingSummaryDto, meetingSummary);
			
			if(meetingSummaryDto.getConclusion() != null && !"".equals(meetingSummaryDto.getConclusion()) && "sj".equals(meetingSummaryDto.getConclusion())){
				meetingSummary.setStatus(MeetingStatusType.COMPLETEMINUTES.getCode());
				meetingSummary.setFlowStatus(MeetingStatusType.FINISHED.getCode());
			}else{
				meetingSummary.setFlowStatus(MeetingStatusType.DRAFT.getCode());
				//直接发起流程审批，会议状态为审批中
				meetingSummary.setStatus(MeetingStatusType.DRAFT.getCode());
			} 
			
		   meetingSummaryService.saveMeetingSummary(userInfo,meetingSummary);
		   info.setResult(JacksonUtils.toJson(meetingSummary));
		   info.setSucess(true);
		   info.setMsg("保存对象成功!");
		} catch (Exception e) {
		 log.error("保存对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("保存对象失败!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   MeetingSummaryDto meetingSummaryDto=JacksonUtils.fromJson(updateJson, MeetingSummaryDto.class);
			   
			   MeetingSummary meetingSummary = new MeetingSummary();
				BeanUtils.copyProperties(meetingSummaryDto, meetingSummary);
				
				if(meetingSummaryDto.getConclusion() != null && !"".equals(meetingSummaryDto.getConclusion()) && "sj".equals(meetingSummaryDto.getConclusion())){
					meetingSummary.setStatus(MeetingStatusType.COMPLETEMINUTES.getCode());
					meetingSummary.setFlowStatus(MeetingStatusType.FINISHED.getCode());
				}
			   
			   int result=   meetingSummaryService.update(meetingSummary);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   MeetingSummary meetingSummary=JacksonUtils.fromJson(deleteJson, MeetingSummary.class);
			   int result= meetingSummaryService.deleteObjectById(meetingSummary.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= meetingSummaryService.deleteAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	 {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			MeetingSummary meetingSummary=JacksonUtils.fromJson(getJson, MeetingSummary.class);
			MeetingSummary	result = meetingSummaryService.getObjectById(meetingSummary.getId());
			if(result.getPlanBeginTime ()!=null){
				String newPlanBeginTime = result.getPlanBeginTime().substring(0,result.getPlanBeginTime().length()-5);
				result.setPlanBeginTime(newPlanBeginTime);
			}
			if(result.getActualBeginTime()!=null){
				String newActualBeginTime = result.getActualBeginTime().substring(0,result.getActualBeginTime().length()-5);
				result.setActualBeginTime(newActualBeginTime);
			}
			Meeting meeting = meetingService.getObjectById(result.getMeetingId());
			if(meeting!=null){
				result.setMeetingTypeId(meeting.getMeetingTypeId());
			}
			String newEntryDate = result.getEntryDate().substring(0,result.getEntryDate().length()-5);
			result.setEntryDate(newEntryDate);
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				SecurityUserBeanInfo userBeanInfo=JacksonUtils.fromJson(userInfo, SecurityUserBeanInfo.class);
				map.put("userId", userBeanInfo.getSecurityUserDto().getId());
				Page page=meetingSummaryService.getMeetingSummaryByPage(map);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=meetingSummaryService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				List list=meetingSummaryService.queryList(map);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=meetingSummaryService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   MeetingSummary meetingSummary=JacksonUtils.fromJson(deleteJson, MeetingSummary.class);
			   int result= meetingSummaryService.deletePseudoObjectById(meetingSummary.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= meetingSummaryService.deletePseudoAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}
	@Override
	public String getStartFlowInfo(String userJson, String id) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		SecurityUserBeanInfo securityUserBeanInfo=JacksonUtils.fromJson(userJson, SecurityUserBeanInfo.class);
		try {
			Map map = meetingSummaryService.getStartFlowInfo(securityUserBeanInfo,id);
			info.setResult(JacksonUtils.toJson(map));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}


	/* (non-Javadoc)
	 * @see com.xinleju.cloud.oa.meeting.dto.service.MeetingDtoServiceCustomer#updateStatus(java.lang.String, java.lang.String)
	 */
	@Override
	public String updateStatus(String userJson, String paramater) {
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
					Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				   try {
					   int result=   meetingSummaryService.updateStatus(userJson,map);
					   info.setResult(JacksonUtils.toJson(result));
					   info.setSucess(true);
					   info.setMsg("更新对象成功!");
					} catch (Exception e) {
					 log.error("更新对象失败!"+e.getMessage());
					 info.setSucess(false);
					 info.setMsg("更新对象失败!");
					 info.setExceptionMsg(e.getMessage());
					}
				   return JacksonUtils.toJson(info);
	}

	/**
	 * 暂存数据
	 * @param userJson
	 * @param saveJson
	 * @return
     */
	@Override
	public String saveTemporary(String userJson, String saveJson) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			MeetingSummaryDto meetingSummaryDto=JacksonUtils.fromJson(saveJson, MeetingSummaryDto.class);
			//格式化入库的时间格式
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//设置日期格式
			String currentTime = df.format(new Date());// new Date()为获取当前系统时间
			if(meetingSummaryDto.getPlanBeginTime() == null || "".equals(meetingSummaryDto.getPlanBeginTime())){
				meetingSummaryDto.setPlanBeginTime(null);
			}
			if(meetingSummaryDto.getActualBeginTime() == null || "".equals(meetingSummaryDto.getActualBeginTime())){
				meetingSummaryDto.setActualBeginTime(null);
			}
			if(meetingSummaryDto.getEntryDate() == null || "".equals(meetingSummaryDto.getEntryDate())){
				meetingSummaryDto.setEntryDate(currentTime);
			}
			//先清空暂存数据在保存数据
			meetingSummaryService.deleteObjectById(meetingSummaryDto.getId());
			MeetingSummary meetingSummary = new MeetingSummary();
			BeanUtils.copyProperties(meetingSummaryDto, meetingSummary);
			if(meetingSummaryDto.getConclusion() != null && !"".equals(meetingSummaryDto.getConclusion()) && "sj".equals(meetingSummaryDto.getConclusion())){
				meetingSummary.setStatus(MeetingStatusType.COMPLETEMINUTES.getCode());
				meetingSummary.setFlowStatus(MeetingStatusType.FINISHED.getCode());
			}else{
				meetingSummary.setFlowStatus(MeetingStatusType.DRAFT.getCode());
				//直接发起流程审批，会议状态为审批中
				meetingSummary.setStatus(MeetingStatusType.DRAFT.getCode());
			} 
			meetingSummaryService.saveMeetingSummary(userJson,meetingSummary);
			info.setResult(JacksonUtils.toJson(meetingSummary));
			info.setSucess(true);
			info.setMsg("暂存对象成功!");
		} catch (Exception e) {
			log.error("暂存对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("暂存对象失败!");
			info.setExceptionMsg(e.getMessage());
			info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return JacksonUtils.toJson(info);
	}

}
