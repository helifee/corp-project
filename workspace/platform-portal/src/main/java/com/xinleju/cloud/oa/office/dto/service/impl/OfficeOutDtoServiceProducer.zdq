package com.xinleju.cloud.oa.office.dto.service.impl;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.base.utils.SecurityUserBeanInfo;
import com.xinleju.cloud.oa.office.dto.OfficeOutDto;
import com.xinleju.cloud.oa.office.dto.service.OfficeOutDtoServiceCustomer;
import com.xinleju.cloud.oa.office.entity.OfficeOut;
import com.xinleju.cloud.oa.office.service.OfficeOutService;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * @author admin
 * 
 *
 */
 
public class OfficeOutDtoServiceProducer implements OfficeOutDtoServiceCustomer{
	private static Logger log = Logger.getLogger(OfficeOutDtoServiceProducer.class);
	@Autowired
	private OfficeOutService officeOutService;

	public String save(String userInfo, String saveJson){
		// TODO Auto-generated method stub
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   OfficeOut officeInfoOut=JacksonUtils.fromJson(saveJson, OfficeOut.class);
		   officeOutService.save(officeInfoOut);
		   info.setResult(JacksonUtils.toJson(officeInfoOut));
		   info.setSucess(true);
		   info.setMsg("保存对象成功!");
		} catch (Exception e) {
		 log.error("保存对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("保存对象失败!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList){
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			  List<OfficeOut> list=JacksonUtils.fromJson(saveJsonList,ArrayList.class, OfficeOut.class);
			   officeOutService.saveBatch(list);
			   info.setResult(JacksonUtils.toJson(list));
			   info.setSucess(true);
			   info.setMsg("保存对象成功!");
			} catch (Exception e) {
			 log.error("保存对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("保存对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   OfficeOutDto officeInfoOut=JacksonUtils.fromJson(updateJson, OfficeOutDto.class);
			   int result=   officeOutService.updateOfficeOutDto(officeInfoOut);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   OfficeOut officeInfoOut=JacksonUtils.fromJson(deleteJson, OfficeOut.class);
			   int result= officeOutService.deleteObjectById(officeInfoOut.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= officeOutService.deleteAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	 {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			OfficeOut officeInfoOut=JacksonUtils.fromJson(getJson, OfficeOut.class);
			OfficeOut	result = officeOutService.getObjectById(officeInfoOut.getId());
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				Page page=officeOutService.getPage(map, (Integer)map.get("start"),  (Integer)map.get("limit"));
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=officeOutService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				List list=officeOutService.queryList(map);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=officeOutService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   OfficeOut officeInfoOut=JacksonUtils.fromJson(deleteJson, OfficeOut.class);
			   int result= officeOutService.deletePseudoObjectById(officeInfoOut.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= officeOutService.deletePseudoAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	/* (non-Javadoc)
	 * @see com.xinleju.cloud.oa.office.dto.service.OfficeOutDtoServiceCustomer#getOfficeOutpage(java.lang.String, java.lang.String)
	 */
	@Override
	public String getOfficeOutpage(String userJson, String paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		Map map=JacksonUtils.fromJson(paramater, HashMap.class);
		try {
			if(StringUtils.isNotBlank(paramater)){
				Page page=officeOutService.getOfficeOutpage(map);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=officeOutService.getOfficeOutpage(map);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	/* (non-Javadoc)
	 * @see com.xinleju.cloud.oa.office.dto.service.OfficeOutDtoServiceCustomer#getOfficeOut(java.lang.String, java.lang.String)
	 */
	@Override
	public String getOfficeOut(String userJson, String getJson) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			OfficeOutDto officeOutDto=JacksonUtils.fromJson(getJson, OfficeOutDto.class);
			OfficeOutDto	result = officeOutService.getOfficeOutDto(officeOutDto.getId());
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	/* (non-Javadoc)
	 * @see com.xinleju.cloud.oa.office.dto.service.OfficeOutDtoServiceCustomer#saveOfficeOutDto(java.lang.String, java.lang.String)
	 */
	@Override
	public String saveOfficeOutDto(String userJson, String saveJson) {
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   OfficeOutDto officeInfoOut=JacksonUtils.fromJson(saveJson, OfficeOutDto.class);
			   officeOutService.saveOfficeOutDto(officeInfoOut);
			   info.setResult(JacksonUtils.toJson(officeInfoOut));
			   info.setSucess(true);
			   info.setMsg("保存对象成功!");
			} catch (Exception e) {
			 log.error("保存对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("保存对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	/* (non-Javadoc)
	 * @see com.xinleju.cloud.oa.office.dto.service.OfficeOutDtoServiceCustomer#updateStockCount(java.lang.String, java.lang.String)
	 */
	@Override
	public String updateCount(String userJson, String paramater) {
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
			Map map=JacksonUtils.fromJson(paramater, HashMap.class);
		   try {
			   int result=   officeOutService.updateCount(map);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	/* (non-Javadoc)
	 * @see com.xinleju.cloud.oa.office.dto.service.OfficeOutDtoServiceCustomer#getStartFlowInfo(java.lang.String, java.lang.String)
	 */
	@Override
	public String getStartFlowInfo(String userJson, String id) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		SecurityUserBeanInfo securityUserBeanInfo=JacksonUtils.fromJson(userJson, SecurityUserBeanInfo.class);
		try {
			Map map = officeOutService.getStartFlowInfo(securityUserBeanInfo,id);
			info.setResult(JacksonUtils.toJson(map));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	/* (non-Javadoc)
	 * @see com.xinleju.cloud.oa.office.dto.service.OfficeOutDtoServiceCustomer#updateCountOver(java.lang.String, java.lang.String)
	 */
	@Override
	public String updateCountOver(String userJson, String paramater) {
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
					Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				   try {
					   int result=   officeOutService.updateCountOver(map);
					   if(result==5){
						   info.setSucess(false);
						   info.setMsg("库存不足，审结失败!");
					   }else{
						   info.setResult(JacksonUtils.toJson(result));
						   info.setSucess(true);
						   info.setMsg("更新对象成功!");
					   }
					} catch (Exception e) {
					 log.error("更新对象失败!"+e.getMessage());
					 info.setSucess(false);
					 info.setMsg("更新对象失败!");
					 info.setExceptionMsg(e.getMessage());
					}
				   return JacksonUtils.toJson(info);
	}



}
