package com.xinleju.cloud.oa.servey.dto.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.ErrorInfoCode;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.cloud.oa.meeting.dto.MeetingDto;
import com.xinleju.cloud.oa.servey.dto.ServeyResponseAnswerDto;
import com.xinleju.cloud.oa.servey.dto.ServeyResponseDto;
import com.xinleju.cloud.oa.servey.dto.service.ServeyResponseDtoServiceCustomer;
import com.xinleju.cloud.oa.servey.entity.ServeyResponse;
import com.xinleju.cloud.oa.servey.entity.ServeyResponseAnswer;
import com.xinleju.cloud.oa.servey.service.ServeyResponseAnswerService;
import com.xinleju.cloud.oa.servey.service.ServeyResponseService;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * @author admin
 * 
 *
 */
 
public class ServeyResponseDtoServiceProducer implements ServeyResponseDtoServiceCustomer{
	private static Logger log = Logger.getLogger(ServeyResponseDtoServiceProducer.class);
	@Autowired
	private ServeyResponseService serveyResponseService;
	@Autowired
	private ServeyResponseAnswerService serveyResponseAnswerService;

	public String save(String userInfo, String saveJson){
		// TODO Auto-generated method stub
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   ServeyResponseDto serveyResponseDto=JacksonUtils.fromJson(saveJson, ServeyResponseDto.class);
		 //先清空暂存数据在保存数据
		   int deleteSucess = serveyResponseService.deleteBean(serveyResponseDto);
		   serveyResponseService.saveServeyResponse(userInfo, serveyResponseDto);
		   info.setResult(JacksonUtils.toJson(serveyResponseDto));
		   info.setSucess(true);
		   info.setMsg("保存对象成功!");
		} catch (Exception e) {
		 log.error("保存对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("保存对象失败!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   ServeyResponse serveyResponse=JacksonUtils.fromJson(updateJson, ServeyResponse.class);
			   int result=   serveyResponseService.update(serveyResponse);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   ServeyResponse serveyResponse=JacksonUtils.fromJson(deleteJson, ServeyResponse.class);
			   int result= serveyResponseService.deleteObjectById(serveyResponse.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= serveyResponseService.deleteAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	 {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			ServeyResponse serveyResponse=JacksonUtils.fromJson(getJson, ServeyResponse.class);
			ServeyResponse	result = serveyResponseService.getObjectById(serveyResponse.getId());
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				//Page page=serveyResponseService.getPage(map, (Integer)map.get("start"),  (Integer)map.get("limit"));
				Page page=serveyResponseService.getServeyResponseByPage(map);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=serveyResponseService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				List list=serveyResponseService.queryList(map);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=serveyResponseService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   ServeyResponse serveyResponse=JacksonUtils.fromJson(deleteJson, ServeyResponse.class);
			   int result= serveyResponseService.deletePseudoObjectById(serveyResponse.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= serveyResponseService.deletePseudoAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}
	
	/**
	 * 暂存数据
	 * @param userJson
	 * @param saveJson
	 * @return
     */
	@Override
	public String saveTemporary(String userJson, String saveJson) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			ServeyResponseDto serveyResponseDto = JacksonUtils.fromJson(saveJson,
					ServeyResponseDto.class);
		    //先清空暂存数据在保存数据
			serveyResponseService.deleteBean(serveyResponseDto);
			serveyResponseService.saveBean(userJson,serveyResponseDto);
			info.setResult(JacksonUtils.toJson(serveyResponseDto));
			info.setSucess(true);
			info.setMsg("暂存对象成功!");
		} catch (Exception e) {
			log.error("暂存对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("暂存对象失败!");
			info.setExceptionMsg(e.getMessage());
			info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryListByParameter(String userJson, String parameter) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(parameter)){
				Map map=JacksonUtils.fromJson(parameter, HashMap.class);
				List<ServeyResponseDto> listDto = new ArrayList<ServeyResponseDto>();
				List<ServeyResponse> list=serveyResponseService.queryList(map);
				if(list.size() > 0){
					for (ServeyResponse serveyResponse : list) {
						ServeyResponseDto serveyResponseDto = new ServeyResponseDto();
						BeanUtils.copyProperties(serveyResponse, serveyResponseDto);
						String responseId = serveyResponse.getId();
						Map<String,Object> mapAn = new HashMap<String, Object>();
						mapAn.put("serveyResponseId", serveyResponse.getId());
						List<ServeyResponseAnswer> listAn = serveyResponseAnswerService.queryList(mapAn);
						List<ServeyResponseAnswerDto> listAnDto = new ArrayList<ServeyResponseAnswerDto>();
						if(listAn.size() > 0){
							for (ServeyResponseAnswer serveyResponseAnswer : listAn) {
								ServeyResponseAnswerDto serveyResponseAnswerDto = new ServeyResponseAnswerDto();
								BeanUtils.copyProperties(serveyResponseAnswer, serveyResponseAnswerDto);
								listAnDto.add(serveyResponseAnswerDto);
							}
						}
						if(listAn.size() > 0){
							serveyResponseDto.setList(listAnDto);;
						}
						listDto.add(serveyResponseDto);
					}
				}
				info.setResult(JacksonUtils.toJson(listDto));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=serveyResponseService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
}
