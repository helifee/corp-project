/*
package com.juzhouyun.cloud.base.dao.impl;

import java.io.Serializable;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.log4j.Logger;
import org.mybatis.spring.SqlSessionTemplate;
import org.mybatis.spring.support.SqlSessionDaoSupport;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Repository;

import com.juzhouyun.cloud.base.annotation.Description;
import com.juzhouyun.cloud.base.dao.BaseDao;
import com.juzhouyun.cloud.base.datasource.DataSourceContextHolder;
import com.juzhouyun.cloud.base.utils.Page;
import com.juzhouyun.cloud.base.utils.SQLGenerator;
import com.juzhouyun.cloud.base.utils.SQLMapperName;

import javax.annotation.Resource;

*/
/**
 * @author yzp 
 *
 * @param <K>
 * @param <T>
 *//*

@Repository
@Description(instruction="基础Dao类")
public abstract class BaseDaoImpl<K extends Serializable,T>   extends SqlSessionDaoSupport implements BaseDao<K ,T>{
	private static Logger log = Logger.getLogger(BaseDaoImpl.class);
    private Class      entityClass;  //实体类

    @Resource
	public void setSqlSessionFactory(SqlSessionFactory sqlSessionFactory) {
		// TODO Auto-generated method stub
		super.setSqlSessionFactory(sqlSessionFactory);
	}
	public BaseDaoImpl() {
		// TODO Auto-generated constructor stub
		Type genType = this.getClass().getGenericSuperclass();// 得到泛型父类
		Type[] params = ((ParameterizedType) genType).getActualTypeArguments(); //获取泛型参数
		entityClass=(Class)params[1];
	}

	@Override
	@Description(instruction="保存对象基础类")
	public int save(T object) throws DataAccessException {
		SQLGenerator<K> sqlg=new SQLGenerator<K>(entityClass);
		String saveSql=sqlg.getSaveSQL(object);
		return this.getSqlSession().insert(entityClass.getName()+"."+SQLMapperName.INSERT.getSqlId(), saveSql);
	}

	*/
/* (non-Javadoc)
	 * @see BaseDao#save(java.lang.String, java.lang.Object)
	 *//*

	@Override
	@Description(instruction="根据mapper映射statementNameId，以及参数实体对象 执行保存对象")
	public int save(String statementName, T object) throws DataAccessException {
		// TODO Auto-generated method stub
		return this.getSqlSession().insert(statementName, object);
	}

	@Override
	@Description(instruction="根据mapper映射statementNameId，以及参数Map对象 执行保存对象")
	public int save(String statementName, Map<String, Object> paramaters)
			throws DataAccessException {
		// TODO Auto-generated method stub
		return this.getSqlSession().insert(statementName, paramaters);
	}

	@Override
	@Description(instruction="批量保存业务对象")
	public int saveBatch(List<T> objectList) throws DataAccessException{
		// TODO Auto-generated method stub
		int i=0;
		for(T object:objectList){
			i=i+ this.save(object);
		}
		return i;
	}

	@Override
	@Description(instruction="批量修改业务对象")
	public int updateBatch(List<T> objectList) throws DataAccessException {
		// TODO Auto-generated method stub
		int i=0;
		for(T object:objectList){
			i=i+this.update(object);
		}
		return i;
	}

	@Override
	@Description(instruction="修改业务对象")
	public int update(T object) throws DataAccessException {
		// TODO Auto-generated method stub
		SQLGenerator<K> sqlg=new SQLGenerator<K>(entityClass);
		String updateSql=sqlg.getUpdateSQL(object);
		return this.getSqlSession().update(entityClass.getName()+"."+SQLMapperName.UPDATE.getSqlId(), updateSql);
	}

	@Override
	@Description(instruction="根据mapper映射statementNameId，以及参数实体对象 执行修改对象")
	public int update(String statementName, T object)
			throws DataAccessException {
		// TODO Auto-generated method stub
		return this.getSqlSession().update(statementName, object);
	}
	@Override
	@Description(instruction="根据mapper映射statementNameId，以及参数mapper对象 执行修改对象")
	public int update(String statementName, Map<String, Object> paramaters)
			throws DataAccessException {
		// TODO Auto-generated method stub
		return this.getSqlSession().update(statementName, paramaters);
	}


	@Override
	@Description(instruction="根据id删除对象")
	public int deleteObjectById(K id) throws DataAccessException {
		// TODO Auto-generated method stub
		SQLGenerator<K> sqlg=new SQLGenerator<K>(entityClass);
		String deleteSql=sqlg.deleteByKey(id);
		return this.getSqlSession().delete(entityClass.getName()+"."+SQLMapperName.DELET.getSqlId(), deleteSql);
	}



	@Override
	@Description(instruction="根据ids 批量删除实体对象")
	public int deleteAllObjectByIds(List<K> ids) throws DataAccessException {
		// TODO Auto-generated method stub
		SQLGenerator<K> sqlg=new SQLGenerator<K>(entityClass);
		String deleteSql=sqlg.deleteByKeys(ids);
		System.out.println(deleteSql);
		return this.getSqlSession().delete(entityClass.getName()+"."+SQLMapperName.DELETBATCHBYID.getSqlId(), deleteSql);
	}

	@Override
	@Description(instruction="根据mapper映射statementNameId，以及参数实体对象 执行删除对象")
	public int delete(String statementName, T object)
			throws DataAccessException {
		// TODO Auto-generated method stub
		return this.getSqlSession().delete(statementName, object);
	}

	@Override
	@Description(instruction="根据mapper映射statementNameId，以及参数mapper对象 执行删除对象")
	public int delete(String statementName, Map<String, Object> paramaters)
			throws DataAccessException {
		// TODO Auto-generated method stub
		return this.getSqlSession().delete(statementName, paramaters);
	}

	@Override
	@Description(instruction="根据mapper映射statementNameId，以及参数mapper对象 执行删除对象")
	public T getObjectById(K id) throws DataAccessException {
		// TODO Auto-generated method stub
		SQLGenerator<K> sqlg=new SQLGenerator<K>(entityClass);
		String getSql=sqlg.getSQL(id);
		return this.getSqlSession().selectOne(entityClass.getName()+"."+SQLMapperName.GET.getSqlId(), getSql);
	}

	@Override
	@Description(instruction="根据mapper映射statementNameId，以及参数对象 执行获取对象")
	public T getObject(String statementName, T object)
			throws DataAccessException {
		// TODO Auto-generated method stub
		return  this.getSqlSession().selectOne(statementName, object);
	}

	@Override
	@Description(instruction="根据mapper映射statementNameId，以及参数mapper 执行获取对象")
	public T getObject(String statementName, Map<String, Object> paramater)
			throws DataAccessException {
		// TODO Auto-generated method stub
		return  this.getSqlSession().selectOne(statementName, paramater);
	}

	@Override
	@Description(instruction="根据获取实体对象分页")
	public Page getPage(Map<String, Object> paramater, Integer start,
			Integer limit) throws DataAccessException {
		// TODO Auto-generated method stub
		Page page=new Page();
		SQLGenerator<K> sqlg=new SQLGenerator<K>(entityClass);
		if(limit==null){
			limit=page.getLimit();
		}
		if(start==null){
			start=page.getStart();
		}
		String getSql=sqlg.getPageSQL(paramater, start, limit,null);
		List<T> list=this.getSqlSession().selectList(entityClass.getName()+"."+SQLMapperName.QUERYPAGELIST.getSqlId(), getSql);
		String getCountSql=sqlg.getCount(paramater);
		int total=this.getSqlSession().selectOne(entityClass.getName()+"."+SQLMapperName.QUERYCOUNT.getSqlId(), getCountSql);
		page.setList(list);
		page.setLimit(limit);
		page.setStart(start);
		page.setTotal(total);
		return page;
	}
	
	@Override
	@Description(instruction="根据获取实体对象分页")
	public Page getPage(Map<String, Object> paramater, Integer start,
			Integer limit,String sort) throws DataAccessException {
		// TODO Auto-generated method stub
		Page page=new Page();
		SQLGenerator<K> sqlg=new SQLGenerator<K>(entityClass);
		if(limit==null){
			limit=page.getLimit();
		}
		if(start==null){
			start=page.getStart();
		}
		String getSql=sqlg.getPageSQL(paramater, start, limit,sort);
		List<T> list=this.getSqlSession().selectList(entityClass.getName()+"."+SQLMapperName.QUERYPAGELIST.getSqlId(), getSql);
		String getCountSql=sqlg.getCount(paramater);
		int total=this.getSqlSession().selectOne(entityClass.getName()+"."+SQLMapperName.QUERYCOUNT.getSqlId(), getCountSql);
		page.setList(list);
		page.setLimit(limit);
		page.setStart(start);
		page.setTotal(total);
		return page;
	}

	@Override
	@Description(instruction="根据mapper映射statementNameId,根据获取实体对象列表")
	public List<T> queryList(String statementName, Map<String, Object> paramater)
			throws DataAccessException {
		// TODO Auto-generated method stub
		return this.getSqlSession().selectList(statementName, paramater);
	}

	@Override
	@Description(instruction="根据mapper映射statementNameId,参数map获取对象列表")
	public List<T> queryList(Map<String, Object> paramater)  throws DataAccessException {
		// TODO Auto-generated method stub
		SQLGenerator<K> sqlg=new SQLGenerator<K>(entityClass);
		String getListSql=sqlg.queryListSQL(paramater,null);
		System.out.println(DataSourceContextHolder.getDataSourceType());
		return this.getSqlSession().selectList(entityClass.getName()+"."+SQLMapperName.QUERYLIST.getSqlId(), getListSql);
	}

	@Override
	public List<T> queryList(Map<String, Object> paramater, String sort)
			throws DataAccessException {
		// TODO Auto-generated method stub
		SQLGenerator<K> sqlg=new SQLGenerator<K>(entityClass);
		String getListSql=sqlg.queryListSQL(paramater,sort);
		System.out.println(DataSourceContextHolder.getDataSourceType());
		return this.getSqlSession().selectList(entityClass.getName()+"."+SQLMapperName.QUERYLIST.getSqlId(), getListSql);
	}

	@Override
	@Description(instruction="根据参数map 获取符合条件总数")
	public int getCount(Map<String, Object> paramater)
			throws DataAccessException {
		// TODO Auto-generated method stub
		SQLGenerator<K> sqlg=new SQLGenerator<K>(entityClass);
		String getCountSql=sqlg.getCount(paramater);
		int total=this.getSqlSession().selectOne(entityClass.getName()+"."+SQLMapperName.QUERYCOUNT.getSqlId(), getCountSql);
		return total;
	}

	@Override
	@Description(instruction="根据mapper映射statementNameId,参数map符合条件总数")
	public int getCount(String statementName, Map<String, Object> paramater)
			throws DataAccessException {
		// TODO Auto-generated method stub
		return this.getSqlSession().selectOne(statementName, paramater);
	}
	
	

	@Override
	public int deletePseudoObjectById(K id) throws DataAccessException {
		// TODO Auto-generated method stub
		SQLGenerator<K> sqlg=new SQLGenerator<K>(entityClass);
		String updateSql=sqlg.pseudoDeletionByKey(id);
		return this.getSqlSession().update(entityClass.getName()+"."+SQLMapperName.PseudoDELET.getSqlId(), updateSql);
	}

	@Override
	public int deletePseudoAllObjectByIds(List<K> ids)
			throws DataAccessException {
		// TODO Auto-generated method stub
		SQLGenerator<K> sqlg=new SQLGenerator<K>(entityClass);
		int i=0;
		for(K id:ids){
			String updateSql=sqlg.pseudoDeletionByKey(id);
			i=this.getSqlSession().update(entityClass.getName()+"."+SQLMapperName.PseudoDELETBATCHBYID.getSqlId(), updateSql);
		}
		return i;
	}




}
*/
