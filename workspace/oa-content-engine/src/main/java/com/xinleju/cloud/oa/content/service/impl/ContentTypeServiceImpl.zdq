package com.xinleju.cloud.oa.content.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.xinleju.cloud.oa.content.dto.*;
import com.xinleju.platform.portal.dto.service.ComponentCategoryDtoServiceCustomer;
import com.xinleju.platform.portal.dto.service.ComponentDtoServiceCustomer;
import com.xinleju.platform.sys.res.dto.service.OperationDtoServiceCustomer;
import com.xinleju.platform.sys.res.dto.service.ResourceDtoServiceCustomer;
import org.apache.log4j.Logger;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.platform.base.service.impl.BaseServiceImpl;
import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.IDGenerator;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.tools.data.JacksonUtils;
import com.xinleju.cloud.oa.content.dao.ContentAuthorDao;
import com.xinleju.cloud.oa.content.dao.ContentChildDao;
import com.xinleju.cloud.oa.content.dao.ContentRowAttributeDao;
import com.xinleju.cloud.oa.content.dao.ContentRowTypeDao;
import com.xinleju.cloud.oa.content.dao.ContentTypeDao;
import com.xinleju.cloud.oa.content.entity.ContentAuthor;
import com.xinleju.cloud.oa.content.entity.ContentRowAttribute;
import com.xinleju.cloud.oa.content.entity.ContentType;
import com.xinleju.cloud.oa.content.service.ContentAuthorService;
import com.xinleju.cloud.oa.content.service.ContentChildService;
import com.xinleju.cloud.oa.content.service.ContentRowAttributeService;
import com.xinleju.cloud.oa.content.service.ContentRowTypeService;
import com.xinleju.cloud.oa.content.service.ContentTypeService;

/**
 * @author admin
 */

@Service
public class ContentTypeServiceImpl extends BaseServiceImpl<String, ContentType> implements ContentTypeService {

    private static Logger log = Logger.getLogger(ContentTypeServiceImpl.class);
    private Class entityClass;  //实体类

    @Autowired
    private ContentTypeDao contentTypeDao;

    @Autowired
    private ContentAuthorDao contentAuthorDao;

    @Autowired
    private ContentRowAttributeDao contentRowAttributeDao;

    @Autowired
    private ContentChildDao contentChildDao;

    @Autowired
    private ContentRowTypeDao contentRowTypeDao;
    @Autowired
    private ContentAuthorService contentAuthorService;
    @Autowired
    private ContentRowAttributeService contentRowAttributeService;
    @Autowired
    private ContentChildService contentChildService;
    @Autowired
    private ContentRowTypeService contentRowTypeService;

    //菜单注册服务
    @Autowired
    private ResourceDtoServiceCustomer resourceDtoServiceCustomer;

    //功能点注册
    @Autowired
    private OperationDtoServiceCustomer operationDtoServiceCustomer;

    //组件注册
    @Autowired
    private ComponentCategoryDtoServiceCustomer componentCategoryDtoServiceCustomer;

    @Autowired
    private ComponentDtoServiceCustomer componentDtoServiceCustomer;


    /**
     * 查询知识管理大类总数
     *
     * @return
     */
    public int getCountFolders() {
        return contentTypeDao.getCountFolders();
    }

    @Override
    public List<ContentTypeTreeData> getContentTypeTree() {
        // TODO Auto-generated method stub
        return contentTypeDao.getContentTypeTree();
    }


    @Override
    public Long queryTotalFileSize(ContentType contentType) {
        contentTypeDao.queryTotalFileSize(contentType);
        return null;
    }

    /**
     * 同步保存大类表以及权限表和属性表
     *
     * @param userInfo
     * @param saveJson
     * @return
     */
    @Override
    public String saveContentTypeAndAuthor(String userInfo, String saveJson) throws Exception{
        //String user = 	userDtoServiceCustomer.getObjectById(null, "13103df55c8848cd9b920c548fc300e7");
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        ContentTypeAndAuthorDto contentTypeAnDAuthorDto = JacksonUtils.fromJson(saveJson, ContentTypeAndAuthorDto.class);
        //然后保存该知识大类对象
        ContentType contentType = new ContentType();
        BeanUtils.copyProperties(contentTypeAnDAuthorDto, contentType);
        contentType.setId(contentTypeAnDAuthorDto.getId());
        contentType.setCountCapacity(Long.parseLong(contentTypeAnDAuthorDto.getCountCapacity()));
        contentType.setFileSize(Long.parseLong(contentTypeAnDAuthorDto.getFileSize()));
        ContentType oldContentType = contentTypeDao.getObjectById(contentType.getId());
        if(oldContentType==null){
            contentTypeDao.save(contentType);
        }else{
            BeanUtils.copyProperties(contentType, oldContentType);
            contentTypeDao.update(oldContentType);
        }

        //更新时先删除知识大类所具备的权限
        Map<String,Object> authorParamMap = new HashMap<String,Object>();
        authorParamMap.put("typeId",contentType.getId());
        List<ContentAuthor> oldList = contentAuthorDao.queryList(authorParamMap);
        if(oldList!=null&&oldList.size()>0){
            for (ContentAuthor contentAuthor : oldList) {
                contentAuthorDao.deleteObjectById(contentAuthor.getId());
            }
        }

        //首先保存该知识大类所具备的权限
        List<ContentAuthorDto> list = contentTypeAnDAuthorDto.getList();
        if (list != null && list.size() > 0) {
            for (ContentAuthorDto contentAuthorDto : list) {
                ContentAuthor contentAuthor = new ContentAuthor();
                BeanUtils.copyProperties(contentAuthorDto, contentAuthor);

                contentAuthor.setId(IDGenerator.getUUID());
                contentAuthor.setTypeId(contentTypeAnDAuthorDto.getId());
                contentAuthorDao.save(contentAuthor);
            }
        }

        //每个知识大类新建的时候，都会有默认的21条基本数据属性，所以要往 数据属性表插入21条数据
        Map<String, Object> paramater = new HashMap<String, Object>();
        paramater.put("contentTypeId", "0");
        List<ContentRowAttribute> contentRowAttributelist = contentRowAttributeDao.queryList(paramater);

        //新建时默认插入21条基本属性
        if(oldContentType==null){
            //批量保存的参数list
            List<ContentRowAttribute> batchList = new ArrayList<ContentRowAttribute>();
            if (contentRowAttributelist.size() > 0) {
                for (ContentRowAttribute contentRowAttribute : contentRowAttributelist) {
                    contentRowAttribute.setId(IDGenerator.getUUID());
                    contentRowAttribute.setContentTypeId(contentType.getId());
                    batchList.add(contentRowAttribute);
                }
                //然后把知识大类的数据属性批量保存
                contentRowAttributeDao.saveBatch(batchList);
            }
        }

        //注册组件
        String componentJson = contentTypeAnDAuthorDto.getComponentJson();
        if(componentJson!=null&&!"".equals(componentJson)){
            this.registerComponent(userInfo,componentJson);
        }

        //注册菜单
        String menuJson = contentTypeAnDAuthorDto.getMenuJson();
        this.registerMenu(userInfo,menuJson);

        return JacksonUtils.toJson(info);
    }

    @Override
    public int deleteContentTypeAndAuthor(String userInfo, String deleteJson) {
        int result = 0;
        ContentType contentType = JacksonUtils.fromJson(deleteJson,
                ContentType.class);
        // 先删除知识大类信息
        contentTypeDao.deleteObjectById(contentType.getId());
        // 然后删除知识大类下面的知识目录信息
        contentChildService.deleteContentChildByParentId(contentType.getId());
        // 然后删除与知识大类关联的数据属性信息表
        contentRowAttributeService.deleteContentRowAttributeByContentTypeId(contentType.getId());
        // 然后删除该知识大类下面的新闻信息
        contentRowTypeService.deleteContentRowTypeByContentTypeId(contentType.getId());
        // 然后删除该知识大类所具备的权限
        result = contentAuthorService.deleteContentAuthorByTypeId(contentType.getId());

        return result;
    }

    @Override
    public Page getContentTypeByPage(Map map) throws Exception {
        // TODO Auto-generated method stub
        Page page = new Page();
        List<Map<String, Object>> list = contentTypeDao.getContentTypePage(map);
        Integer count = contentTypeDao.getContentTypeCount(map);
        page.setLimit((Integer) map.get("limit"));
        page.setList(list);
        page.setStart((Integer) map.get("start"));
        page.setTotal(count);
        return page;
    }

    @Override
    public int deletePseudoAllObjectByIds(String userInfo,List<String> ids) throws Exception {
        int deleteCount = 0;
        if (ids != null && ids.size() > 0) {
            for (String id:ids) {

                //先删除注册的按钮，如果按钮删除不成功则此数据无法删除
                String operationResult = operationDtoServiceCustomer.getObjectById(userInfo,"{\"id\":\""+id+"\"}");
                DubboServiceResultInfo operationResultInfo = JacksonUtils.fromJson(operationResult, DubboServiceResultInfo.class);
                if(!operationResultInfo.isSucess()){
                    throw new Exception("数据删除失败！");
                }

                String operationObj = operationResultInfo.getResult();
                Map<String,Object> operationMap = JacksonUtils.fromJson(operationObj,HashMap.class);
                String delOperationResult = null;
                if(operationMap!=null){
                    delOperationResult = operationDtoServiceCustomer.deletePseudoObjectById(userInfo,"{\"id\":\""+id+"\"}");
                }
                if(delOperationResult!=null){
                    DubboServiceResultInfo delOperationResultInfo = JacksonUtils.fromJson(delOperationResult, DubboServiceResultInfo.class);
                    if(!delOperationResultInfo.isSucess()){
                        throw new Exception("按钮删除失败！");
                    }
                }

                //再删除注册的菜单，如果菜单删除不成功则此数据无法删除
                String menuResult = resourceDtoServiceCustomer.getObjectById(userInfo,"{\"id\":\""+id+"\"}");
                DubboServiceResultInfo menuResultInfo = JacksonUtils.fromJson(menuResult, DubboServiceResultInfo.class);
                if(!menuResultInfo.isSucess()){
                    throw new Exception("数据删除失败！");
                }

                String menuObj = menuResultInfo.getResult();
                Map<String,Object> menuMap = JacksonUtils.fromJson(menuObj,HashMap.class);
                String delMenuResult = null;
                if(menuMap!=null){
                    delMenuResult = resourceDtoServiceCustomer.deletePseudoObjectById(userInfo,"{\"id\":\""+id+"\"}");
                }
                if(delMenuResult!=null){
                    DubboServiceResultInfo delMenuResultInfo = JacksonUtils.fromJson(delMenuResult, DubboServiceResultInfo.class);
                    if(!delMenuResultInfo.isSucess()){
                        throw new Exception("菜单删除失败！");
                    }
                }

                //删除注册的组件，如果组件删除不成功则此数据无法删除
                String componentResult = resourceDtoServiceCustomer.getObjectById(userInfo,"{\"id\":\""+id+"\"}");
                DubboServiceResultInfo componentResultInfo = JacksonUtils.fromJson(componentResult, DubboServiceResultInfo.class);
                if(!menuResultInfo.isSucess()){
                    throw new Exception("数据删除失败！");
                }

                //删除组件
                String componentObj = menuResultInfo.getResult();
                Map<String,Object> componentMap = JacksonUtils.fromJson(componentObj,HashMap.class);
                String delComponentResult = null;
                if(menuMap!=null){
                    delComponentResult = componentDtoServiceCustomer.deletePseudoObjectById(userInfo,"{\"id\":\""+id+"\"}");
                }
                if(delComponentResult!=null){
                    DubboServiceResultInfo delComponentResultInfo = JacksonUtils.fromJson(delComponentResult, DubboServiceResultInfo.class);
                    if(!delComponentResultInfo.isSucess()){
                        throw new Exception("组件删除失败！");
                    }
                }


                deleteCount += this.deletePseudoObjectById(id);

            }
        }
        return deleteCount;
    }

    /**
     * 向系统中动态注册菜单
     * @param userInfo
     * @param saveJson
     * @return
     * @throws Exception
     */
    private String registerMenu(String userInfo, String saveJson) throws Exception{
        Map<String,Object> menuMap = JacksonUtils.fromJson(saveJson,HashMap.class);

        String menuResult = resourceDtoServiceCustomer.getObjectById(userInfo,"{\"id\":\""+(String)menuMap.get("id")+"\"}");
        Map<String,Object> menuResultMap = JacksonUtils.fromJson(menuResult,HashMap.class);
        String menuStr = (String) menuResultMap.get("result");
        Map<String,Object> oldMenuMap = JacksonUtils.fromJson(menuStr,HashMap.class);
        String registerMenuResult = null;
        if(oldMenuMap!=null){
            oldMenuMap.putAll(menuMap);
            saveJson = JacksonUtils.toJson(oldMenuMap);
            registerMenuResult = resourceDtoServiceCustomer.update(userInfo,saveJson);
        }else{
            registerMenuResult = resourceDtoServiceCustomer.save(userInfo,saveJson);
        }

        DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(registerMenuResult, DubboServiceResultInfo.class);
        if(!dubboServiceResultInfo.isSucess()){
            throw new Exception("菜单注册失败！");
        }

        //为新注册的菜单注册一个查询按钮
        Map<String,Object> operationMap = new HashMap<String,Object>();
        operationMap.put("id",menuMap.get("id"));
        operationMap.put("name","查询");
        operationMap.put("code",(String)menuMap.get("code")+"_QUERY");
        operationMap.put("appId",menuMap.get("appId"));
        operationMap.put("resourceId",menuMap.get("id"));
        operationMap.put("type","1");
        saveJson = JacksonUtils.toJson(operationMap);
        registOperation(userInfo,saveJson);

        return registerMenuResult;
    }

    /**
     * 向系统中动态注册操作按钮
     * @param userInfo
     * @param saveJson
     * @return
     * @throws Exception
     */
    private String registOperation(String userInfo,String saveJson) throws Exception{
        Map<String,Object> operationMap = JacksonUtils.fromJson(saveJson,HashMap.class);

        String operationResult = operationDtoServiceCustomer.getObjectById(userInfo,"{\"id\":\""+(String)operationMap.get("id")+"\"}");
        Map<String,Object> operationResultMap = JacksonUtils.fromJson(operationResult,HashMap.class);
        String oldoperationStr = (String) operationResultMap.get("result");
        Map<String,Object> oldoperationResultMap = JacksonUtils.fromJson(oldoperationStr,HashMap.class);
        String registerOperationResult = null;
        if(oldoperationResultMap!=null){
            oldoperationResultMap.putAll(operationMap);
            saveJson = JacksonUtils.toJson(oldoperationResultMap);
            registerOperationResult = operationDtoServiceCustomer.update(userInfo,saveJson);
        }else{
            registerOperationResult = operationDtoServiceCustomer.save(userInfo,saveJson);
        }

        DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(registerOperationResult, DubboServiceResultInfo.class);
        if(!dubboServiceResultInfo.isSucess()){
            throw new Exception("按钮注册失败！");
        }
        return registerOperationResult;
    }

    /**
     *
     * @param userInfo
     * @param saveJson
     * @return
     * @throws Exception
     */
    private String registerComponent(String userInfo,String saveJson) throws Exception {
        Map<String,Object> componentMap = JacksonUtils.fromJson(saveJson,HashMap.class);

        //查看是否有OA类型的组件分类，没有的话创建一个
        Map<String,Object> paramMap = new HashMap<String, Object>();
        paramMap.put("categoryCode","OA");
        String categoryJson = JacksonUtils.toJson(paramMap);
        String categoryResult = this.componentCategoryDtoServiceCustomer.queryList(userInfo,categoryJson);
        Map<String,Object> result = JacksonUtils.fromJson(categoryResult,HashMap.class);
        String listStr = (String) result.get("result");
        List<Map<String,Object>> categoryList = JacksonUtils.fromJson(listStr,ArrayList.class,HashMap.class);
        String categoryId = null;
        if(categoryList==null||categoryList.size()==0){
            Map<String,Object> categoryMap = new HashMap<String,Object>();
            categoryId = IDGenerator.getUUID();
            categoryMap.put("id",categoryId);
            categoryMap.put("categoryCode","OA");
            categoryMap.put("categoryName","协同办公");
            categoryMap.put("categoryDesc","协同办公应用组件分类");
            this.componentCategoryDtoServiceCustomer.save(userInfo,JacksonUtils.toJson(categoryMap));
        }else{
            categoryId = (String) categoryList.get(0).get("id");
        }
        componentMap.put("categoryId",categoryId);


        //根据新组件内容查找已存在组件
        String componentResultJson = this.componentDtoServiceCustomer.getObjectById(userInfo,saveJson);
        Map<String,Object> oldComponentResult = JacksonUtils.fromJson(componentResultJson,HashMap.class);
        String oldComponentStr = (String) oldComponentResult.get("result");
        Map<String,Object> oldComponent = JacksonUtils.fromJson(oldComponentStr,HashMap.class);
        String registerComponentResult = null;
        if(oldComponent!=null){
            oldComponent.putAll(componentMap);
            saveJson = JacksonUtils.toJson(oldComponent);
            registerComponentResult = componentDtoServiceCustomer.update(userInfo,saveJson);
        }else{
            saveJson = JacksonUtils.toJson(componentMap);
            registerComponentResult = componentDtoServiceCustomer.save(userInfo,saveJson);
        }
        DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(registerComponentResult, DubboServiceResultInfo.class);
        if(!dubboServiceResultInfo.isSucess()){
            throw new Exception("组件注册失败！");
        }


        return registerComponentResult;
    }
}
