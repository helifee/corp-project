package com.xinleju.cloud.oa.content.dto.service.impl;

import java.lang.reflect.Field;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.LoginUtils;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.base.utils.SecurityUserBeanInfo;
import com.xinleju.platform.base.utils.SecurityUserDto;
import com.xinleju.cloud.oa.content.dto.ContentRowTypeDto;
import com.xinleju.cloud.oa.content.dto.service.ContentRowTypeDtoServiceCustomer;
import com.xinleju.cloud.oa.content.entity.ContentAuthor;
import com.xinleju.cloud.oa.content.entity.ContentRowAttribute;
import com.xinleju.cloud.oa.content.entity.ContentRowType;
import com.xinleju.cloud.oa.content.entity.ContentType;
import com.xinleju.cloud.oa.content.service.ContentRowAttributeService;
import com.xinleju.cloud.oa.content.service.ContentRowTypeService;
import com.xinleju.cloud.oa.util.SortUtil;
import com.xinleju.platform.tools.data.JacksonUtils;
import com.xinleju.platform.univ.search.dto.SearchIndexDto;
import com.xinleju.platform.univ.search.dto.service.SearchIndexDtoServiceCustomer;

/**
 * @author admin
 */

public class ContentRowTypeDtoServiceProducer implements ContentRowTypeDtoServiceCustomer {
    private static Logger log = Logger.getLogger(ContentRowTypeDtoServiceProducer.class);
    @Autowired
    private ContentRowTypeService contentRowTypeService;
    @Autowired
    private ContentRowAttributeService contentRowAttributeService;

    //@Autowired
    private SearchIndexDtoServiceCustomer searchIndexDtoServiceCustomer;

    public String save(String userInfo, String saveJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            Map mapSave = JacksonUtils.fromJson(saveJson,HashMap.class);
            String strs  = (String)mapSave.get("availabField");
            Map mapfield = new HashMap();
            String[] arrs = strs.split(",");
            for(String arr:arrs){
                String[] param  = arr.split("#");
                if(param.length==2){
                    mapfield.put(param[0],param[1]);
                }
            }
            mapSave.putAll(mapfield);
            ContentRowType contentRowType = JacksonUtils.fromJson(JacksonUtils.toJson(mapSave), ContentRowType.class);

            SecurityUserBeanInfo contentRowTypeDto = JacksonUtils.fromJson(userInfo, SecurityUserBeanInfo.class);
            SecurityUserDto securityUserDto = contentRowTypeDto.getSecurityUserDto();
            String loginname = securityUserDto.getLoginName();





            //用户信息赋值

            contentRowType.setTendId(contentRowTypeDto.getTendId());
            contentRowType.setCreatePersonId(contentRowTypeDto.getSecurityUserDto().getId());
            contentRowType.setCreatePersonName(contentRowTypeDto.getSecurityUserDto().getLoginName());
            contentRowType.setCreateCompanyId(contentRowTypeDto.getSecurityUserDto().getBelongOrgId());
            contentRowType.setCreateCompanyName(contentRowTypeDto.getSecurityUserDto().getBelongOrgName());
            contentRowType.setCreateOrgId(contentRowTypeDto.getSecurityUserDto().getBelongOrgId());
            contentRowType.setCreateOrgName(contentRowTypeDto.getSecurityUserDto().getBelongOrgName());


            SimpleDateFormat dateFormater = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            Date date = new Date();
            Timestamp timestamp = Timestamp.valueOf(dateFormater.format(date));
            contentRowType.setCreateDate(timestamp);
            contentRowType.setCreatePersonName(loginname);
            contentRowTypeService.save(contentRowType);
            SecurityUserBeanInfo userInfo1 = LoginUtils.getSecurityUserBeanInfo();
            // 创建全文检索的索引，此处应该重写保存方法，暂时先写在这里
            SearchIndexDto dto = new SearchIndexDto();
            dto.setEsDocId(contentRowType.getId());
            dto.setEsDocIndex(userInfo1.getTendId());
            dto.setCreatePersonName(loginname);
            dto.setCreateDate(timestamp);
            String url = null;
            if ("1".equals(contentRowType.getDocumenttype())) {
                dto.setEsDocType("news");
                //新闻可以修改
                url = "platform-app/content/contentRowType/contentRowType_edit.html?contentTypeId=" + contentRowType.getContentTypeId() + "&type=view&sourceType=docNews";
            } else {
                dto.setEsDocType("knowledge");
                //文档是查看页面，不能修改
                url = "platform-app/content/contentRowType/contentDocument_view.html?ids=" + contentRowType.getId() + "";
            }

            Map map = JacksonUtils.fromJson(saveJson, HashMap.class);
            map.put("url", url);
            dto.setContent(JacksonUtils.toJson(map));

            searchIndexDtoServiceCustomer.save(userInfo, JacksonUtils.toJson(dto));


            info.setResult(JacksonUtils.toJson(contentRowType));
            info.setSucess(true);
            info.setMsg("保存对象成功!");
        } catch (Exception e) {
            log.error("保存对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("保存对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String saveBatch(String userInfo, String saveJsonList) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public String updateBatch(String userInfo, String updateJsonList) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public String update(String userInfo, String updateJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            ContentRowType contentRowType = JacksonUtils.fromJson(updateJson, ContentRowType.class);
            int result = contentRowTypeService.update(contentRowType);
            info.setResult(JacksonUtils.toJson(result));
            info.setSucess(true);
            info.setMsg("更新对象成功!");
        } catch (Exception e) {
            log.error("更新对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("更新对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String deleteObjectById(String userInfo, String deleteJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            ContentRowType contentRowType = JacksonUtils.fromJson(deleteJson, ContentRowType.class);
            int result = contentRowTypeService.deleteObjectById(contentRowType.getId());
            info.setResult(JacksonUtils.toJson(result));
            info.setSucess(true);
            info.setMsg("删除对象成功!");
        } catch (Exception e) {
            log.error("更新对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("删除更新对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String deleteAllObjectByIds(String userInfo, String deleteJsonList) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            if (StringUtils.isNotBlank(deleteJsonList)) {
                Map map = JacksonUtils.fromJson(deleteJsonList, HashMap.class);
                List<String> list = Arrays.asList(map.get("id").toString().split(","));
                int result = contentRowTypeService.deleteAllObjectByIds(list);
                info.setResult(JacksonUtils.toJson(result));
                info.setSucess(true);
                info.setMsg("删除对象成功!");
            }
        } catch (Exception e) {
            log.error("删除对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("删除更新对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String getObjectById(String userInfo, String getJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            ContentRowType contentRowType = JacksonUtils.fromJson(getJson, ContentRowType.class);
            ContentRowType result = contentRowTypeService.getObjectById(contentRowType.getId());
            info.setResult(JacksonUtils.toJson(result));
            info.setSucess(true);
            info.setMsg("获取对象成功!");
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String getPage(String userInfo, String paramater) {
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            if (StringUtils.isNotBlank(paramater)) {
                Map map = JacksonUtils.fromJson(paramater, HashMap.class);
                Page page = contentRowTypeService.getContentRowTypeByPage(map);
                info.setResult(JacksonUtils.toJson(page));
                info.setSucess(true);
                info.setMsg("获取分页对象成功!");
            } else {
                Page page = contentRowTypeService.getPage(new HashMap(), null, null);
                info.setResult(JacksonUtils.toJson(page));
                info.setSucess(true);
                info.setMsg("获取分页对象成功!");
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取分页对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取分页对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String queryList(String userInfo, String paramater) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            if (StringUtils.isNotBlank(paramater)) {
                Map map = JacksonUtils.fromJson(paramater, HashMap.class);
                List list = contentRowTypeService.queryList(map);
                SortUtil.sortList(list, "createtime", true);
                info.setResult(JacksonUtils.toJson(list));
                info.setSucess(true);
                info.setMsg("获取列表对象成功!");
            } else {
                List list = contentRowTypeService.queryList(null);
                info.setResult(JacksonUtils.toJson(list));
                info.setSucess(true);
                info.setMsg("获取列表对象成功!");
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取列表对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取列表对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String getCount(String userInfo, String paramater) {
        // TODO Auto-generated method stub
        return null;
    }


    @Override
    public String deletePseudoObjectById(String userInfo, String deleteJson) {
        // TODO Auto-generated method stub
        return null;
    }


    @Override
    public String deletePseudoAllObjectByIds(String userInfo, String deleteJsonList) {
        // TODO Auto-generated method stub
        return null;
    }

    /**
     * 获取新闻、文档总记录数
     *
     * @param userInfo
     * @param ids
     * @return
     */
    public String queryTypeCount(String userInfo, String ids) {
        //实例返回结果集对象
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        Map map = JacksonUtils.fromJson(ids, HashMap.class);
        String id = (String) map.get("contentType");
        try {
            int queryTypeCount = contentRowTypeService.queryTypeCount(id);
            //返回结果集
            info.setResult(JacksonUtils.toJson(queryTypeCount));
            //返回结果状态
            info.setSucess(true);
            //返回查询状态
            info.setMsg("获取文件数量成功!");
        } catch (Exception e) {
            log.error("获取文件数量失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取文件数量失败!");
            info.setExceptionMsg(e.getMessage());
        }
        //返回结果集
        return JacksonUtils.toJson(info);
    }

    /**
     * 根据知识存储Id获取知识存储信息
     *
     * @param getJson
     * @return
     */
    public String getContentRowType(String userInfo, String getJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        //把知识目录中的属性赋值到中间bean：contentTypeAnDAuthorDto，此bean中保存有知识大类基本信息和权限
        ContentRowTypeDto contentRowTypeDto = new ContentRowTypeDto();
        try {
            ContentRowType contentRowType = JacksonUtils.fromJson(getJson, ContentRowType.class);
            ContentRowType result = contentRowTypeService.getObjectById(contentRowType.getId());

            //然后通过知识大类类型id，获取这个知识大类下面的数据项的基本信息
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("contentTypeId", result.getContentTypeId());
            List<ContentRowAttribute> list = contentRowAttributeService.queryList(map);
            if (list.size() > 0) {

            }
            info.setResult(JacksonUtils.toJson(contentRowTypeDto));
            info.setSucess(true);
            info.setMsg("获取对象成功!");
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String getAvailabContentRowType(String userInfo, String id) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        Map<String, Object> map = new HashMap<String, Object>();
        try {
            ContentRowType contentRowType = JacksonUtils.fromJson(id, ContentRowType.class);
            ContentRowType result = contentRowTypeService.getObjectById(contentRowType.getId());

            Field[] fields = ContentRowType.class.getDeclaredFields();
            Field field = null;


            if (!"".equals(result.getAvailabField())) {
                String availabField = result.getAvailabField();
                String[] arrayField = availabField.split(",");
                for (int i = 0; i < fields.length; i++) {
                    field = fields[i];
                    field.setAccessible(true);//修改访问权限
                    if (arrayField.length > 0) {
                        for (String aivifield : arrayField) {
                            if (aivifield.split("#")[0].equals(field.getName())) {
                                map.put(aivifield.split("#")[0], aivifield.split("#")[1] + "#" + field.get(result));
                            }
                        }
                    }
                }
            }
            info.setResult(JacksonUtils.toJson(map));
            info.setSucess(true);
            info.setMsg("获取对象成功!");
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String getContentRowData(String userInfo, String contentTypeCodeJson) {
        //实例返回结果集对象
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        Map map = JacksonUtils.fromJson(contentTypeCodeJson, HashMap.class);
        //String contentTypeCode = (String) map.get("contentTypeCode");
        try {
            String contentRowHtml = contentRowTypeService.getContentRowData(map);
            //返回结果集
            info.setResult(contentRowHtml);
            //返回结果状态
            info.setSucess(true);
            //返回查询状态
            info.setMsg("获取文件数量成功!");
        } catch (Exception e) {
            log.error("获取文件数量失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取文件数量失败!");
            info.setExceptionMsg(e.getMessage());
        }
        //返回结果集
        return JacksonUtils.toJson(info);
    }
}
