package com.xinleju.cloud.oa.sys.quick.service.impl;

import java.beans.BeanInfo;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.xinleju.cloud.oa.sys.quick.dao.EntryDao;
import com.xinleju.cloud.oa.sys.quick.dto.EntryDto;
import com.xinleju.cloud.oa.sys.quick.entity.Entry;
import com.xinleju.cloud.oa.sys.quick.service.EntryService;
import com.xinleju.cloud.oa.sys.utils.SortType;
import com.xinleju.cloud.oa.sys.utils.StatusType;
import com.xinleju.platform.base.service.impl.BaseServiceImpl;

/**
 * @author admin
 * 
 * 
 */

@Service
public class EntryServiceImpl extends  BaseServiceImpl<String,Entry> implements EntryService{
	

	@Autowired
	private EntryDao entryDao;

	@Override
	public List<EntryDto> queryTreeList(Map<String,Object> map) throws Exception {
		 List<EntryDto> list=new ArrayList<>();
		   Long level=0l;
		   Long num=1l;
		   List<Map<String, Object>> baseEntryList = entryDao.queryTreeList(map);
		   if(baseEntryList!=null&&baseEntryList.size()>0){
		    	for (Map<String, Object> entryMap : baseEntryList) {
		    		EntryDto entryDto=new EntryDto();
		    		transMapToBean(entryMap,entryDto);
		    		entryDto.setLevel(level);
		    		entryDto.setLft(num);
		    		entryDto.setIsLeaf(false);
		    		entryDto.setExpanded(true);
		    		entryDto.setLoaded(true);
		    		list.add(entryDto);
		    		Map<String, Object> typeList = getbaseProjectTypeList(entryMap.get("id").toString(),list,level,num);
		    		num= (Long) typeList.get("num");
		    		entryDto.setRgt(num);
		    		String isleaf = (String)typeList.get("isleaf");
		    		if("1".equals(isleaf)){
		    			entryDto.setIsLeaf(true);
					}else{
						entryDto.setIsLeaf(false);
					}
				}
		    }
		   return list;
	}
	public Map<String,Object> getbaseProjectTypeList(String id,List<EntryDto> list,Long level,Long num)throws Exception {
		  Map<String,Object> map=new HashMap<String, Object>();
		  Map<String,Object> resultmap=new HashMap<String, Object>();
		  map.put("parentId", id);
		  List<Map<String, Object>> baseEntryList = entryDao.queryTreeList(map);
		  if(baseEntryList!=null&&baseEntryList.size()>0){
			  ++level;
			  for (Map<String, Object> entryMap : baseEntryList) {
				  ++num;
				  EntryDto entryDto=new EntryDto();
				  transMapToBean(entryMap,entryDto);
				  entryDto.setLft(num);
				  entryDto.setLevel(level);
				  entryDto.setIsLeaf(true);
				  entryDto.setExpanded(true);
				  entryDto.setLoaded(true);
				  list.add(entryDto);
				  Map<String, Object> projectTypeList = getbaseProjectTypeList(entryMap.get("id").toString(),list,level,num);
				  num= (Long) projectTypeList.get("num");
				  entryDto.setRgt(num);
			}
			  ++num;
		  }else{
			  resultmap.put("isleaf", "1");
			  ++num;
		  }
		  resultmap.put("num", num);
		  resultmap.put("list", list);
		  return resultmap;
	  }
	
	public static void transMapToBean(Map<String, Object> map, Object obj) throws Exception {  
		  
		BeanInfo beanInfo = Introspector.getBeanInfo(obj.getClass());  
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();  
  
        for (PropertyDescriptor property : propertyDescriptors) {  
            String key = property.getName();  
            if (map.containsKey(key)) {  
                Object value = map.get(key);  
                // 得到property对应的setter方法  
                Method setter = property.getWriteMethod();  
                setter.invoke(obj, value);  
            }  
        }  
    }  
	/**
	 * author:liyong
	 * describe: 修改父节点状态
	 * param:object
	 */
	public void  updateParentStatus(Entry object){
		 String parentId = object.getParentId();
		 Entry entry = entryDao.getObjectById(parentId);
		 if(entry!=null){
		 	updateParentStatus(entry);
		 	entry.setStatus(Integer.parseInt(StatusType.StatusOpen.getCode()));
		 	entryDao.update(entry);
		 }
	}
	/**
	 * author:liyong
	 * describe: 修改子节点所有状态
	 * param:object
	 */
	public void updateChirdStatus(Entry object){
		 Map<String,Object> param=new HashMap<>();
		 param.put("parentId", object.getId());
		 List<Entry> projectList = entryDao.queryList(param);
		 if(projectList!=null&&projectList.size()>0){
			 for (Entry entry : projectList) {
				 updateChirdStatus(entry);
				 entry.setStatus(Integer.parseInt(StatusType.StatusClosed.getCode()));
				 entryDao.update(entry);
			 }
		 }
	}
	
	/**
	 * author:liyong
	 * describe: 更改状态
	 * param:object
	 */
	@Transactional
	@Override
	public int updateStatus(Entry entryBean) {
		String status = entryBean.getStatus().toString();
		if(StatusType.StatusOpen.getCode().equals(status)){//启用状态改为禁用
			//对子集全部启用禁用 
			this.updateChirdStatus(entryBean);
			entryBean.setStatus(Integer.parseInt(StatusType.StatusClosed.getCode()));
			entryDao.update(entryBean);
		}else if(StatusType.StatusClosed.getCode().equals(status)){//禁用状态改为启用
			//对父集全部启用启用
			this.updateParentStatus(entryBean);
			entryBean.setStatus(Integer.parseInt(StatusType.StatusOpen.getCode()));
			entryDao.update(entryBean);
		}
		return 1;
	}
	
	/**
	 * author:liyong
	 * describe: 模糊查询方法
	 * param:object
	 */
	@Override
	public List<Map<String, Object>> queryFuzzySearch(Map<String, Object> map) throws Exception {
		return entryDao.fuzzySearch(map);
	}
	
	/**
	 * author:liyong
	 * describe: 修改数据并且修改关联父子级状态
	 * param:object
	 */
	@Transactional
	@Override
	public int updateBatchStatus(Entry entry) throws Exception {
		entryDao.update(entry);
		if(StatusType.StatusOpen.getCode().equals(entry.getStatus().toString())){
			this.updateParentStatus(entry);
		}else if(StatusType.StatusClosed.getCode().equals(entry.getStatus().toString())){
			this.updateChirdStatus(entry);
		}
		return 1;
	}
	@Override
	public List<Map<String, Object>> getRulerSortNum(Map<String, Object> paramater) throws Exception {
		return entryDao.getRulerSortNum(paramater);
	}
	@Override
	public int updateSort(Entry object, Map<String, Object> map)throws Exception {
		String  sortType= String.valueOf(map.get("sortType"));
		Integer sort1 = object.getSort();
		String parentId = object.getParentId();
		List<Entry> rulerList = entryDao.getEntryListByParentId(parentId);
		if(SortType.SHIFTUP.getCode().equals(sortType)){
			for (int i = 0; i < rulerList.size(); i++) {
				Integer sort2 = rulerList.get(i).getSort();
				if(sort2==sort1&&i!=0){
					Integer sort3 = rulerList.get(i-1).getSort();
					rulerList.get(i-1).setSort(sort2);
					rulerList.get(i).setSort(sort3);
					entryDao.update(rulerList.get(i-1));
					entryDao.update(rulerList.get(i));
					break;
				}
			}
		}else if(SortType.SHIFTDOWN.getCode().equals(sortType)){
		  for (int i = 0; i < rulerList.size(); i++) {
				Integer sort2 = rulerList.get(i).getSort();
				if(sort2==sort1&&i!=rulerList.size()-1){
					Integer sort3 = rulerList.get(i+1).getSort();
					rulerList.get(i+1).setSort(sort2);
					rulerList.get(i).setSort(sort3);
					entryDao.update(rulerList.get(i+1));
					entryDao.update(rulerList.get(i));	
					break;
				}
		}
		}else if(SortType.STICK.getCode().equals(sortType)){
			int len = rulerList.size()-1;
			Integer num =  sort1;
			int isGo = 0;
			for (int i = len; i >0 ; i--) {
				if(rulerList.get(i).getSort()==sort1){
					isGo = i;
					rulerList.get(i).setSort(rulerList.get(0).getSort());
					entryDao.update(rulerList.get(i));
				}
				if(isGo>0){
					rulerList.get(i).setSort(num);
					num = rulerList.get(i-1).getSort();
					rulerList.get(i-1).setSort(rulerList.get(i).getSort());
					entryDao.update(rulerList.get(i-1));
				}
			}
		}else if(SortType.TOBOTTOM.getCode().equals(sortType)){
			int len = rulerList.size()-1;
			Integer num =  sort1;
			int isGo = -1;
			for (int i = 0; i <len ; i++) {
				if(rulerList.get(i).getSort()==sort1){
					isGo = i;
					rulerList.get(i).setSort(rulerList.get(len).getSort());
					entryDao.update(rulerList.get(i));
				}
				if(isGo>-1){
					rulerList.get(i).setSort(num);
					num = rulerList.get(i+1).getSort();
					rulerList.get(i+1).setSort(rulerList.get(i).getSort());
					entryDao.update(rulerList.get(i+1));
				}
			}
		}
		return 1;
	}

}
