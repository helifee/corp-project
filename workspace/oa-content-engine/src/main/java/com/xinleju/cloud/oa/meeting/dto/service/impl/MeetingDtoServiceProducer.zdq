package com.xinleju.cloud.oa.meeting.dto.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.alibaba.druid.support.json.JSONUtils;
import com.rabbitmq.tools.json.JSONUtil;
import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.IDGenerator;
import com.xinleju.platform.base.utils.LoginUtils;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.base.utils.SecurityUserBeanInfo;
import com.xinleju.platform.base.utils.SecurityUserDto;
import com.xinleju.cloud.oa.content.dto.ContentRowTypeDto;
import com.xinleju.cloud.oa.content.entity.ContentRowType;
import com.xinleju.cloud.oa.content.service.ContentRowTypeService;
import com.xinleju.cloud.oa.meeting.dto.MeetingDto;
import com.xinleju.cloud.oa.meeting.dto.MeetingReplyDto;
import com.xinleju.cloud.oa.meeting.dto.service.MeetingDtoServiceCustomer;
import com.xinleju.cloud.oa.meeting.entity.Meeting;
import com.xinleju.cloud.oa.meeting.service.MeetingService;
import com.xinleju.cloud.oa.office.dto.OfficeRecordDto;
import com.xinleju.platform.out.app.notice.service.MailAndPhoneServiceCustomer;
import com.xinleju.platform.sys.org.dto.UserDto;
import com.xinleju.platform.sys.org.dto.service.UserDtoServiceCustomer;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * @author wangw
 *
 *
 */

public class MeetingDtoServiceProducer implements MeetingDtoServiceCustomer{
	private static Logger log = Logger.getLogger(MeetingDtoServiceProducer.class);
	@Autowired
	private MeetingService meetingService;

	@Autowired
	private ContentRowTypeService contentRowTypeService;

	@Autowired
	private MailAndPhoneServiceCustomer mailAndPhoneServiceCustomer;

	@Autowired
	private UserDtoServiceCustomer userDtoServiceCustomer;

	public String save(String userInfo, String saveJson){
		// TODO Auto-generated method stub
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   //Meeting meeting=JacksonUtils.fromJson(saveJson, Meeting.class);
		   int saveresult = meetingService.saveMeetingAndUser(userInfo, saveJson);

		   //保存成功后给与会人员发送短信
		  /* if(saveresult > 0){
			   MeetingDto meetingDto=JacksonUtils.fromJson(saveJson, MeetingDto.class);
			   String[] userids = meetingDto.getAttendees().split(",");
			   StringBuilder phone = new StringBuilder();

			   for (int i = 0; i < userids.length; i++) {
				 //根据userId获取用户信息，拿到用户手机号
				   String userId = userids[i];
				   String dubboResultInfo = userDtoServiceCustomer.getObjectById(userInfo, "{\"id\":\""+userId+"\"}");
				   DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
					if(dubboServiceResultInfo.isSucess()){
						String resultInfo= dubboServiceResultInfo.getResult();
						UserDto userDto=JacksonUtils.fromJson(resultInfo, UserDto.class);
						String mobile = userDto.getMobile();
						phone.append(mobile);
						if(i == userids.length -1){
						}else{
							phone.append(",");
						}
					}
			   }
			   Map<String, String> map = new HashMap<String, String>();
			   map.put("msg", meetingDto.getTitle()+",请您准时参加！");
			   map.put("phones", phone.toString());
			   String paramaterJson = JacksonUtils.toJson(map);
			   mailAndPhoneServiceCustomer.sendPhoneMsg(userInfo, paramaterJson);
		   }
*/
		   info.setResult(JacksonUtils.toJson(saveresult));
		   info.setSucess(true);
		   info.setMsg("保存对象成功!");
		} catch (Exception e) {
		 log.error("保存对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("保存对象失败!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   Meeting meeting=JacksonUtils.fromJson(updateJson, Meeting.class);
			   int result=   meetingService.update(meeting);

			 //保存成功后给与会人员发送短信
			   if(result > 0){
				   MeetingDto meetingDto=JacksonUtils.fromJson(updateJson, MeetingDto.class);
				   String[] userids = meetingDto.getAttendees().split(",");
				   StringBuilder phone = new StringBuilder();

				   for (int i = 0; i < userids.length; i++) {
					 //根据userId获取用户信息，拿到用户手机号
					   String userId = userids[i];
					   String dubboResultInfo = userDtoServiceCustomer.getObjectById(null, "{\"id\":\""+userId+"\"}");
					   DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
						if(dubboServiceResultInfo.isSucess()){
							String resultInfo= dubboServiceResultInfo.getResult();
							UserDto userDto=JacksonUtils.fromJson(resultInfo, UserDto.class);
							String mobile = userDto.getMobile();
							phone.append(mobile);
							if(i == userids.length -1){
							}else{
								phone.append(",");
							}
						}
				   }
				   Map<String, String> map = new HashMap<String, String>();
				   map.put("msg", meetingDto.getTitle()+",请您准时参加！");
				   map.put("phones", phone.toString());
				   String paramaterJson = JacksonUtils.toJson(map);
				   mailAndPhoneServiceCustomer.sendPhoneMsg(null, paramaterJson);
			   }


			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   Meeting meeting=JacksonUtils.fromJson(deleteJson, Meeting.class);
			   int result= meetingService.deleteObjectById(meeting.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= meetingService.deleteAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	 {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			Meeting meeting=JacksonUtils.fromJson(getJson, Meeting.class);
			Meeting	result = meetingService.getObjectById(meeting.getId());
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//设置日期格式
				String currentTime = df.format(new Date());// new Date()为获取当前系统时间
				map.put("currentTime", currentTime);
				Page page=meetingService.getMeetingByPage(map);
				/*// 需要遍历Map，根据会议时间设定会议状态
				String MeetingDtoTem = JacksonUtils.toJson(page.getList());
				List<Meeting> meetingList=JacksonUtils.fromJson(MeetingDtoTem, ArrayList.class,Meeting.class);
				List<Meeting> meetingArrayList = new ArrayList<Meeting>();
				*//**
				 * 定义时间状态：
				 * 未开始：1
				 * 进行中：2
				 * 已完成：3
				 *//*
				for (Meeting meeting : meetingList) {
                     String beginData = meeting.getBeginDate();//开始时间
                     String endData = meeting.getEndDate();//结束时间
                     if(java.sql.Date.valueOf(beginData).after(java.sql.Date.valueOf(currentTime))){
                    	 meeting.setStatus("1");
                     }else if(java.sql.Date.valueOf(beginData).before(java.sql.Date.valueOf(currentTime)) && java.sql.Date.valueOf(currentTime).after(java.sql.Date.valueOf(endData))){
                    	 meeting.setStatus("2");
                     }else if(java.sql.Date.valueOf(endData).after(java.sql.Date.valueOf(currentTime))){
                    	 meeting.setStatus("3");
                     }
                     meetingArrayList.add(meeting);
				}
				page.setList(meetingArrayList);*/
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=meetingService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				List list=meetingService.queryList(map);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=meetingService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo,
			String deleteJsonList) {
		// TODO Auto-generated method stub
		return null;
	}

	/**
	 * 会议管理列表
	 * @param paramater
	 * @return
	 */
	@Override
	public String meetingManagerList(String userInfo, String paramaterJson) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramaterJson)){
				Map map=JacksonUtils.fromJson(paramaterJson, HashMap.class);
				int status = Integer.parseInt(map.get("status")+"");
				List list = null; 
				if(status == 1){
					list = meetingService.getWaitSendPage(map);
				}else if(status == 2){
					list = meetingService.getWaitBeginPage(map);
				}else if(status == 3){
					list = meetingService.getOpenPage(map);
				}else{
					list = meetingService.getOpenPage(map);
				}
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=meetingService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String archiveMeeting(String userInfo, String paramaterJson,Map<String,Object> map) {
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		 List<Meeting> meetingList = new ArrayList<Meeting>();
		 List<ContentRowType> contentRowTypeList = new ArrayList<ContentRowType>();
		 SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		 String user = JacksonUtils.toJson(userInfo);
		   try {
			   if (StringUtils.isNotBlank(paramaterJson)) {
				   List<String> list=Arrays.asList(paramaterJson.split(","));
				   for (String meetingId : list) {
					   Meeting meeting = meetingService.getObjectById(meetingId);
					   //已归档代表4
					   meeting.setStatus("4");
					   meeting.setPigeonholeUserId(userBeanInfo.getSecurityUserDto().getId());
					   if(map.get("PigeonholePath") != null && !"".equals(map.get("PigeonholePath"))){
						   meeting.setPigeonholePath(map.get("PigeonholePath").toString());
					   }
					   SimpleDateFormat dateFormater = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
					   Date date=new Date();
					   Timestamp timestamp = Timestamp.valueOf(dateFormater.format(date));
					   meeting.setPigeonholeDate(timestamp.toString());
					   meetingList.add(meeting);
					   //拼装会议文档内容
					   ContentRowType contentRowType = new ContentRowType();
					   contentRowType.setId(IDGenerator.getUUID());
					   contentRowType.setTitle(meeting.getMtTitle());
					   contentRowType.setContent2(meeting.getMtPlan());
					   contentRowType.setCreatePersonName(meeting.getCreatePersonName());
					   contentRowType.setCreateDate(meeting.getCreateDate());
					   contentRowType.setContentChildId(map.get("contentChildId").toString());
					   contentRowTypeList.add(contentRowType);
				   }
				   //批量更新会议内容
				   int updateMeeting = meetingService.updateBatch(meetingList);
				   if(updateMeeting > 0){
					   //如果有会议更新，则需把该会议部分内容同步到文档中心，做会议归档记录
					   contentRowTypeService.saveBatch(contentRowTypeList);
				   }
				   info.setResult(JacksonUtils.toJson(updateMeeting));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}
	/**
	 * author:wangw
	 * 上传会议纪要后，修改数据状态
	 */
	@Override
	public String uploadMeetingSummary(String userInfo, String id) {
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if(StringUtils.isNotBlank(id)) {
				   Meeting meeting = meetingService.getObjectById(id);
				   //5代表已经上传会议纪要
				   meeting.setStatus("5");
				   //批量更新会议内容
				   int updateMeeting = meetingService.update(meeting);
				   info.setResult(JacksonUtils.toJson(updateMeeting));
				   info.setSucess(true);
				   info.setMsg("更新对象成功!");
				}
			} catch (Exception e) {
				 log.error("更新对象失败!"+e.getMessage());
				 info.setSucess(false);
				 info.setMsg("更新更新对象失败!");
				 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}


	public static void main(String[] args) {
		String qw = "131212";
		String dss = "45454";
		StringBuilder phone = new StringBuilder();
		phone.append(dss);
		phone.append(",");
		phone.append(qw);

		System.out.println(phone.toString());
	}

	@Override
	public String updateMeeingStatusOfNoticeMsg(String userInfo,
			Map paramaterJson) {
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   int result= meetingService.updateMeeingStatusOfNoticeMsg(userInfo,paramaterJson);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getAllMeetingByParameter(String userInfo, Map map) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(map.size() > 0){
				List<Meeting> list = meetingService.getAllMeetingByParameter(userInfo, map);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=meetingService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
}
