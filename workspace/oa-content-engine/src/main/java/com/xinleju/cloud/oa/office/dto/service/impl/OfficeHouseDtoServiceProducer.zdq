package com.xinleju.cloud.oa.office.dto.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.cloud.oa.content.dto.ContentChildTreeData;
import com.xinleju.cloud.oa.office.dto.OfficeHouseDto;
import com.xinleju.cloud.oa.office.dto.service.OfficeHouseDtoServiceCustomer;
import com.xinleju.cloud.oa.office.entity.OfficeHouse;
import com.xinleju.cloud.oa.office.service.OfficeHouseService;
import com.xinleju.cloud.oa.sys.utils.UserType;
import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.ErrorInfoCode;
import com.xinleju.platform.base.utils.LoginUtils;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.base.utils.SecurityOrganizationDto;
import com.xinleju.platform.base.utils.SecurityUserBeanInfo;
import com.xinleju.platform.sys.org.dto.service.OrgnazationDtoServiceCustomer;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * @author wangw
 *
 *
 */

public class OfficeHouseDtoServiceProducer implements OfficeHouseDtoServiceCustomer{
	private static Logger log = Logger.getLogger(OfficeHouseDtoServiceProducer.class);
	@Autowired
	private OfficeHouseService officeHouseService;
	@Autowired
	private OrgnazationDtoServiceCustomer orgnazationDtoServiceCustomer;
	
	public String save(String userInfo, String saveJson){
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   OfficeHouse officeHouse=JacksonUtils.fromJson(saveJson, OfficeHouse.class);
		   officeHouse.setDelflag(false);
		   Map<String, Object> map = new HashMap<String,Object>();
		   map.put("parentId",officeHouse.getParentNodeId());
		   Integer sortNum = getRulerSortNum(userInfo,map);
		   officeHouse.setSortNumber(sortNum);
		   officeHouseService.save(officeHouse);
		   info.setResult(JacksonUtils.toJson(officeHouse));
		   info.setSucess(true);
		   info.setMsg("保存对象成功!");
		} catch (Exception e) {
//			e.printStackTrace();
		 log.error("保存对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("保存对象失败!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public int getRulerSortNum(String userinfo, Map<String,Object> paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		int sort = 0;
		try {
			List<Map<String, Object>> list = officeHouseService.getSortNum(paramater);
			sort = list.size()>0?Integer.valueOf(list.get(0).get("SORT").toString())+1:1;
			info.setResult(String.valueOf(sort));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return sort;
	}
	
	@Override
	public String saveBatch(String userInfo, String saveJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   OfficeHouse officeHouse=JacksonUtils.fromJson(updateJson, OfficeHouse.class);
			   int result=   officeHouseService.update(officeHouse);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   OfficeHouse officeHouse=JacksonUtils.fromJson(deleteJson, OfficeHouse.class);
			   int result= officeHouseService.deleteObjectById(officeHouse.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= officeHouseService.deleteAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	 {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			OfficeHouse officeHouse=JacksonUtils.fromJson(getJson, OfficeHouse.class);
			OfficeHouse	result = officeHouseService.getObjectById(officeHouse.getId());
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				Page page=officeHouseService.getPage(map, (Integer)map.get("start"),  (Integer)map.get("limit"));
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=officeHouseService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				List list=officeHouseService.queryList(map);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=officeHouseService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo,String deleteJsonList) {
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   if (StringUtils.isNotBlank(deleteJsonList)) {
			   @SuppressWarnings("unchecked")
			   Map<String,Object> map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
			   List<String> list=Arrays.asList(map.get("id").toString().split(","));
			   int result= officeHouseService.deletePseudoAllObjectByIds(list);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			}else{
				 info.setResult(ErrorInfoCode.PARAMETER_ERROR.getValue());
				 info.setSucess(false);
				 info.setMsg("请求参数为空!");
			}
		} catch (Exception e) {
//			e.printStackTrace();
		 log.error("删除对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("删除更新对象失败!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String queryListOfficeHouse(String userInfo, String id) {
// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(id)) {
				   Map map=JacksonUtils.fromJson(id, HashMap.class);
				   String ids = (String)map.get("id");
				   List<OfficeHouse> houseList = officeHouseService.queryListOfficeHouse(ids);
				   info.setResult(JacksonUtils.toJson(houseList));
				   info.setSucess(true);
				   info.setMsg("获取用品分类树成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

/*	@Override
	public String getOfficeHouseTreeById2(String userInfo, String id) {
		// TODO Auto-generated method stub
		//实例返回结果集对象
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try{
		   //获取用户对象
		   SecurityUserBeanInfo user=LoginUtils.getSecurityUserBeanInfo();
		   //公司
		   List<SecurityOrganizationDto> comList = new ArrayList<SecurityOrganizationDto>();
		   
		   Map map=JacksonUtils.fromJson(id, HashMap.class);
		   String ids = (String)map.get("parentNodeId");
		   if("null".equals(ids)){
			   map = new HashMap();
		   }
		   List<OfficeHouse> officeHouseList = officeHouseService.getOfficeHouseTreeById(ids);
		   List<ContentChildTreeData> officeHouseResultList = new ArrayList<ContentChildTreeData>();
		   //如果二级栏目表中没有数据，要查询一级大类的数据返回
		   //List<ContentType> contentTypeList = 
		   Boolean isAdministrators = user.getSecurityUserDto().getType().equals(UserType.ORDINARY.getCode())?false:true;
		   if(isAdministrators){//判断是否管理员
			   comList.add(user.getSecurityDirectCompanyDto());
		   }else{
			   Map oMap = new HashMap();
			   oMap.put("delflag", false);
			   String oJson = orgnazationDtoServiceCustomer.queryListCompany(userInfo, JacksonUtils.toJson(oMap));
			   DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(oJson, DubboServiceResultInfo.class);
			   if(dubboServiceResultInfo.isSucess()){
				   String resultInfo= dubboServiceResultInfo.getResult();
				   List<Map<String,Object>> olist=JacksonUtils.fromJson(resultInfo, ArrayList.class);
				   if(olist.size()>0){
					   for(Map<String,Object> fmap : olist){
						   SecurityOrganizationDto securityDirectCompanyDto = new SecurityOrganizationDto();
						   securityDirectCompanyDto.setId((String)fmap.get("value"));
						   securityDirectCompanyDto.setName((String)fmap.get("label"));
						   comList.add(securityDirectCompanyDto);
						   break;
					   }   
				   }
			   }
 		   }
		   for(SecurityOrganizationDto bean:comList){//挂接组织机构
			   ContentChildTreeData contentChildTreeData = new ContentChildTreeData();
			   contentChildTreeData.setName(bean.getName());
			   contentChildTreeData.setParentName("");
			   
			   contentChildTreeData.setpId("");
			   contentChildTreeData.setId(bean.getId());
			   contentChildTreeData.setParentId("");
			   
			   contentChildTreeData.setOwnedCompany(bean.getId());
			   officeHouseResultList.add(contentChildTreeData);
		   }
		   for(SecurityOrganizationDto securityOrganization:comList){//挂接组织机构
			   //组装二级结构
			   if(officeHouseList.size() > 0){
				   for (OfficeHouse officeHouse : officeHouseList) {
					   List<OfficeHouse> officeHouseChildList = officeHouseService.queryOfficeHouseByParentId(officeHouse.getParentNodeId());
					   if(officeHouseChildList.size() > 0){
						   for (OfficeHouse officeHouseTemp : officeHouseChildList) {
							   ContentChildTreeData contentChildTreeData = new ContentChildTreeData();
							   contentChildTreeData.setName(officeHouseTemp.getTypeName());
							   contentChildTreeData.setParentName(officeHouse.getTypeName());
							   
							   contentChildTreeData.setpId(officeHouseTemp.getId());
							   contentChildTreeData.setId(securityOrganization.getId()+"@"+officeHouseTemp.getId());
							   contentChildTreeData.setParentId(officeHouseTemp.getParentNodeId().equals("0")?
									   securityOrganization.getId():securityOrganization.getId()+"@"+officeHouseTemp.getParentNodeId());
							   
							   contentChildTreeData.setOwnedCompany(securityOrganization.getId());
							   officeHouseResultList.add(contentChildTreeData);
						   }
					   }
				   }
			   }
			   //添加完子节点之后，再把根节点数据加入
			   map.put("parentNodeId", "0");
			   List<OfficeHouse> deflOfficeHouse = officeHouseService.queryList(map);
			   if(deflOfficeHouse.size() > 0 ){
				   OfficeHouse officeHousePath = officeHouseService.queryList(map).get(0);
				   
				   ContentChildTreeData contentChildTreeDataPath = new ContentChildTreeData();
				   contentChildTreeDataPath.setpId("0");
				   contentChildTreeDataPath.setName(officeHousePath.getTypeName());
				   contentChildTreeDataPath.setParentName(officeHousePath.getTypeName());
				   contentChildTreeDataPath.setId(officeHousePath.getId());
				   contentChildTreeDataPath.setParentId("0");
				   officeHouseResultList.add(contentChildTreeDataPath);
			   }
			  
		   }
		   info.setResult(JacksonUtils.toJson(officeHouseResultList));
		   info.setSucess(true);
		   info.setMsg("获取知识目录结构树成功!");
	   }catch(Exception e){
		   log.error("获取知识目录结构树失败!"+e.getMessage());
		   info.setSucess(false);
		   info.setMsg("获取知识目录结构树失败!");
		   info.setExceptionMsg(e.getMessage());
	   }
	   return JacksonUtils.toJson(info);
	}
*/
	@Override
	public String getOfficeHouseTreeById(String userInfo, String id) {
		// TODO Auto-generated method stub
		//实例返回结果集对象
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try{
		   //获取用户对象
		   SecurityUserBeanInfo user=LoginUtils.getSecurityUserBeanInfo();
		   //公司
		   List<SecurityOrganizationDto> comList = new ArrayList<SecurityOrganizationDto>();
		   
		   Map<String,Object> pMap = new HashMap<String,Object>();
	   	   pMap.put("delflag", false);
		   List<OfficeHouse> officeHouseList = officeHouseService.queryList(pMap);
		   
		   List<ContentChildTreeData> officeHouseResultList = new ArrayList<ContentChildTreeData>();
		   
		   Boolean isAdministrators = user.getSecurityUserDto().getType().equals(UserType.ORDINARY.getCode())?false:true;
		   if(isAdministrators){//判断是否管理员
			   comList.add(user.getSecurityDirectCompanyDto());
		   }else{
			   Map oMap = new HashMap();
			   oMap.put("delflag", false);
			   String oJson = orgnazationDtoServiceCustomer.queryListCompany(userInfo, JacksonUtils.toJson(oMap));
			   DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(oJson, DubboServiceResultInfo.class);
			   if(dubboServiceResultInfo.isSucess()){
				   String resultInfo= dubboServiceResultInfo.getResult();
				   List<Map<String,Object>> olist=JacksonUtils.fromJson(resultInfo, ArrayList.class);
				   if(olist.size()>0){
					   for(Map<String,Object> fmap : olist){
						   SecurityOrganizationDto securityDirectCompanyDto = new SecurityOrganizationDto();
						   securityDirectCompanyDto.setId((String)fmap.get("value"));
						   securityDirectCompanyDto.setName((String)fmap.get("label"));
						   comList.add(securityDirectCompanyDto);
						   //break;
					   }   
				   }
			   }
 		   }
		   for(SecurityOrganizationDto securityOrganization:comList){//挂接组织机构
			   ContentChildTreeData contentChildTreeData = new ContentChildTreeData();
			   contentChildTreeData.setName(securityOrganization.getName());
			   contentChildTreeData.setParentName("");
			   
			   contentChildTreeData.setpId("");
			   contentChildTreeData.setId(securityOrganization.getId());
			   contentChildTreeData.setParentId("");
			   
			   contentChildTreeData.setOwnedCompany(securityOrganization.getId());
			   officeHouseResultList.add(contentChildTreeData);
			   
			   if(officeHouseList.size() > 0){
				   for (OfficeHouse officeHouseTemp : officeHouseList) {
					   ContentChildTreeData bean = new ContentChildTreeData();
					   bean.setName(officeHouseTemp.getTypeName());
					   bean.setParentName("");
					   
					   bean.setpId(officeHouseTemp.getId());
					   bean.setId(securityOrganization.getId()+"@"+officeHouseTemp.getId());
					   bean.setParentId(officeHouseTemp.getParentNodeId().equals("0")?
					   securityOrganization.getId():securityOrganization.getId()+"@"+officeHouseTemp.getParentNodeId());
					   
					   bean.setOwnedCompany(securityOrganization.getId());
					   officeHouseResultList.add(bean);
				   }
			   }
			   //添加完子节点之后，再把根节点数据加入
			  /* map.put("parentNodeId", "0");
			   List<OfficeHouse> deflOfficeHouse = officeHouseService.queryList(map);
			   if(deflOfficeHouse.size() > 0 ){
				   OfficeHouse officeHousePath = officeHouseService.queryList(map).get(0);
				   
				   ContentChildTreeData contentChildTreeDataPath = new ContentChildTreeData();
				   contentChildTreeDataPath.setpId("0");
				   contentChildTreeDataPath.setName(officeHousePath.getTypeName());
				   contentChildTreeDataPath.setParentName(officeHousePath.getTypeName());
				   contentChildTreeDataPath.setId(officeHousePath.getId());
				   contentChildTreeDataPath.setParentId("0");
				   officeHouseResultList.add(contentChildTreeDataPath);
			   }*/
			  
		   }
		   info.setResult(JacksonUtils.toJson(officeHouseResultList));
		   info.setSucess(true);
		   info.setMsg("获取知识目录结构树成功!");
	   }catch(Exception e){
		   log.error("获取知识目录结构树失败!"+e.getMessage());
		   info.setSucess(false);
		   info.setMsg("获取知识目录结构树失败!");
		   info.setExceptionMsg(e.getMessage());
	   }
	   return JacksonUtils.toJson(info);
	}
	
	/* (non-Javadoc)
	 * @see com.xinleju.cloud.oa.office.dto.service.OfficeHouseDtoServiceCustomer#getOfficeHousepage(java.lang.String, java.lang.String)
	 */
	@Override
	public String getOfficeHousepage(String userJson, String paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map<String,Object> map=JacksonUtils.fromJson(paramater, HashMap.class);
				Page page=officeHouseService.getOfficeHousepage(map);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=officeHouseService.getOfficeHousepage(new HashMap<String,Object>());
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryTreeList(String userJson, String paramaterJson) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			@SuppressWarnings("unchecked")
			Map<String,Object> map=JacksonUtils.fromJson(paramaterJson, HashMap.class);
			List<OfficeHouseDto> list=officeHouseService.queryTreeList(map);
			if(list!=null&&!list.isEmpty()){
		    	info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取树对象成功!");
		    }else{
		    	info.setResult(ErrorInfoCode.NULL_ERROR.getValue());
				info.setSucess(false);
				info.setMsg("树对象为空!");
		    }
		} catch (Exception e) {
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String updateStatus(String userJson, String id) {
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   OfficeHouseDto entryDto=JacksonUtils.fromJson(id, OfficeHouseDto.class);
		   OfficeHouse	entryBean = officeHouseService.getObjectById(entryDto.getId());
		   int result=   officeHouseService.updateStatus(entryBean);
		   info.setResult(JacksonUtils.toJson(result));
		   info.setSucess(true);
		   info.setMsg("更新状态成功!");
		} catch (Exception e) {
		 log.error("更新状态失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("更新状态失败!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String updateSort(String userJson, String updateJson,Map<String, Object> map) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   OfficeHouse ruler=JacksonUtils.fromJson(updateJson, OfficeHouse.class);
			   OfficeHouse object= officeHouseService.getObjectById(ruler.getId());
			   int result=   officeHouseService.updateSort(object,map);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String updateEntity(String userJson, String updateJson) {
	  DubboServiceResultInfo info=new DubboServiceResultInfo();
	  try {
		   OfficeHouse entry=JacksonUtils.fromJson(updateJson, OfficeHouse.class);
		   int result=   officeHouseService.updateBatchStatus(entry);
		   info.setResult(JacksonUtils.toJson(result));
		   info.setSucess(true);
		   info.setMsg("更新对象成功!");
		} catch (Exception e) {
		 log.error("更新对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("更新对象失败!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String getOfficeHouseTree(String userJson, String id) {
		//实例返回结果集对象
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try{
		   Map map=JacksonUtils.fromJson(id, HashMap.class);
		   String ids = (String)map.get("parentNodeId");
		   if("null".equals(ids)){
			   map = new HashMap();
		   }
		   List<OfficeHouse> officeHouseList = officeHouseService.getOfficeHouseTreeById(ids);
		   List<ContentChildTreeData> officeHouseResultList = new ArrayList<ContentChildTreeData>();
		   //如果二级栏目表中没有数据，要查询一级大类的数据返回
		   //组装二级结构
		   if(officeHouseList.size() > 0){
			   for (OfficeHouse officeHouse : officeHouseList) {
				   List<OfficeHouse> officeHouseChildList = officeHouseService.queryOfficeHouseByParentId(officeHouse.getParentNodeId());
				   if(officeHouseChildList.size() > 0){
					   for (OfficeHouse officeHouseTemp : officeHouseChildList) {
						   ContentChildTreeData contentChildTreeData = new ContentChildTreeData();
						   contentChildTreeData.setpId(officeHouseTemp.getParentNodeId());
						   contentChildTreeData.setName(officeHouseTemp.getTypeName());
						   contentChildTreeData.setParentName(officeHouse.getTypeName());
						   contentChildTreeData.setId(officeHouseTemp.getId());
						   contentChildTreeData.setParentId(officeHouseTemp.getParentNodeId());
						   officeHouseResultList.add(contentChildTreeData);
					   }
				   }
			   }
		   }
		   info.setResult(JacksonUtils.toJson(officeHouseResultList));
		   info.setSucess(true);
		   info.setMsg("获取知识目录结构树成功!");
	   }catch(Exception e){
		   log.error("获取知识目录结构树失败!"+e.getMessage());
		   info.setSucess(false);
		   info.setMsg("获取知识目录结构树失败!");
		   info.setExceptionMsg(e.getMessage());
	   }
	   return JacksonUtils.toJson(info);
	}
	

}