package com.xinleju.cloud.oa.content.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.platform.base.service.impl.BaseServiceImpl;
import com.xinleju.platform.base.utils.MessageResult;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.tools.data.JacksonUtils;
import com.xinleju.cloud.oa.content.dao.ContentDictionaryItemDao;
import com.xinleju.cloud.oa.content.entity.ContentDictionaryItem;
import com.xinleju.cloud.oa.content.service.ContentDictionaryItemService;
import com.xinleju.cloud.oa.content.util.DataType;

/**
 * @author admin
 * 
 * 
 */

@Service
public class ContentDictionaryItemServiceImpl extends  BaseServiceImpl<String,ContentDictionaryItem> implements ContentDictionaryItemService{
	

	@Autowired
	private ContentDictionaryItemDao contentDictionaryItemDao;

	@Override
	public List queryListDictionaryItem(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void deleteAllObjectByDictionaryId(String strId) throws Exception{
		contentDictionaryItemDao.deleteAllObjectByDictionaryId(strId);
	}

	@Override
	public void saveAllDictionaryItem(List<Map<String, Object>> dictionaryItemList) throws Exception {
		Map<String,Object> map = new HashMap<String,Object>();
		if(dictionaryItemList.size()>0){
			map.put("parentDictionaryId", dictionaryItemList.get(0).get("parentDictionaryId"));
			List<ContentDictionaryItem> itemList = contentDictionaryItemDao.queryList(map);
			if(itemList.size()==0){
				for(int i=0;i<dictionaryItemList.size();i++){
					contentDictionaryItemDao.save(JacksonUtils.fromJson(JacksonUtils.toJson(dictionaryItemList.get(i)), ContentDictionaryItem.class));//新增RulerList对象
				}
			}else{
				for(int i=0;i<dictionaryItemList.size();i++){
					if(DataType.DATA_ADD.getCode()==dictionaryItemList.get(i).get("dataType")){
						contentDictionaryItemDao.save(JacksonUtils.fromJson(JacksonUtils.toJson(dictionaryItemList.get(i)),ContentDictionaryItem.class));//新增方法
					}else if(DataType.DATA_UPDATE.getCode()==dictionaryItemList.get(i).get("dataType")){
						//匹配数据库已存在对象
						for(int j=0;j<itemList.size();j++){
							if(itemList.get(j).getId().equals(dictionaryItemList.get(i).get("id"))){
								@SuppressWarnings("unchecked")
								Map<String,Object> newMap = JacksonUtils.fromJson(JacksonUtils.toJson(dictionaryItemList.get(i)), HashMap.class);
								@SuppressWarnings("unchecked")
								Map<String,Object> oldMap = JacksonUtils.fromJson(JacksonUtils.toJson(itemList.get(j)), HashMap.class);
								oldMap.putAll(newMap);
								contentDictionaryItemDao.update(JacksonUtils.fromJson(JacksonUtils.toJson(oldMap), ContentDictionaryItem.class));//修改方法
							}
						}
					}else if(DataType.DATA_DELETE.getCode()==dictionaryItemList.get(i).get("dataType")){
						contentDictionaryItemDao.deleteObjectById((String)dictionaryItemList.get(i).get("id"));//删除方法
					}
				}
			}
		}
	}

	@Override
	public Page getDictionaryItemByPage(Map<String, Object> map)throws Exception {
		Page page=new Page();
		List<Map<String,Object>> list = contentDictionaryItemDao.getPageData(map);
		Integer count = contentDictionaryItemDao.getPageDataCount(map);
		page.setLimit((Integer) map.get("limit") );
		page.setList(list);
		page.setStart((Integer) map.get("start"));
		page.setTotal(count);
		return page;
	}
	

}
