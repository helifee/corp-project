package com.xinleju.cloud.oa.content.dto.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.cloud.oa.content.dto.ContentChildTreeData;
import com.xinleju.cloud.oa.content.dto.ContentDictionaryTreeDto;
import com.xinleju.cloud.oa.content.dto.service.ContentDictionaryDtoServiceCustomer;
import com.xinleju.cloud.oa.content.entity.ContentDictionary;
import com.xinleju.cloud.oa.content.entity.ContentType;
import com.xinleju.cloud.oa.content.service.ContentDictionaryItemService;
import com.xinleju.cloud.oa.content.service.ContentDictionaryService;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * @author admin
 * 
 *
 */
 
public class ContentDictionaryDtoServiceProducer implements ContentDictionaryDtoServiceCustomer{
	private static Logger log = Logger.getLogger(ContentDictionaryDtoServiceProducer.class);
	@Autowired
	private ContentDictionaryService contentDictionaryService;
	@Autowired
	private ContentDictionaryItemService contentDictionaryItemService;

	public String save(String userInfo, String saveJson){
		// TODO Auto-generated method stub
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   ContentDictionary contentDictionary=JacksonUtils.fromJson(saveJson, ContentDictionary.class);
		   contentDictionaryService.save(contentDictionary);
		   info.setResult(JacksonUtils.toJson(contentDictionary));
		   info.setSucess(true);
		   info.setMsg("保存对象成功!");
		} catch (Exception e) {
		 log.error("保存对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("保存对象失败!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   ContentDictionary contentDictionary=JacksonUtils.fromJson(updateJson, ContentDictionary.class);
			   int result=   contentDictionaryService.update(contentDictionary);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   ContentDictionary contentDictionary=JacksonUtils.fromJson(deleteJson, ContentDictionary.class);
			   int result= contentDictionaryService.deleteObjectById(contentDictionary.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result = 0;
				   if(list.size()>0){
					   result= contentDictionaryService.deleteAllObjectByIds(list);
					   for(String strId :list){
						   contentDictionaryItemService.deleteAllObjectByDictionaryId(strId);
					   }
				   }
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	 {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			ContentDictionary contentDictionary=JacksonUtils.fromJson(getJson, ContentDictionary.class);
			ContentDictionary	result = contentDictionaryService.getObjectById(contentDictionary.getId());
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				Page page=contentDictionaryService.getPage(map, (Integer)map.get("start"),  (Integer)map.get("limit"));
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=contentDictionaryService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				List list=contentDictionaryService.queryList(map);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=contentDictionaryService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   ContentDictionary contentDictionary=JacksonUtils.fromJson(deleteJson, ContentDictionary.class);
			   int result= contentDictionaryService.deletePseudoObjectById(contentDictionary.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= contentDictionaryService.deletePseudoAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getContentDictionaryTreeById(String userInfo, String id) {
		//实例返回结果集对象
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try{
			   @SuppressWarnings("unchecked")
			Map<String, Object> map=JacksonUtils.fromJson(id, HashMap.class);
			   String ids = (String)map.get("id");
			   if("null".equals(ids)){
				   map = new HashMap<String, Object>();
				   map.put("sidx", "createDate");
			   }
			   List<ContentDictionary> contentDictionaryList = contentDictionaryService.queryList(map);
			   List<ContentDictionaryTreeDto> contentDictionaryResultList = new ArrayList<ContentDictionaryTreeDto>();
			   //如果二级栏目表中没有数据，要查询一级大类的数据返回
			   //List<ContentType> contentTypeList = 
			 //组装二级结构
			   //如果二级目录没有数据，直接查询大类表，返回大类数据
			   if(contentDictionaryList.size() > 0){
				   for (ContentDictionary contentDictionary : contentDictionaryList) {
					   ContentDictionaryTreeDto contentDictionaryTreeDto = new ContentDictionaryTreeDto();
					   contentDictionaryTreeDto.setId(contentDictionary.getId());
					   contentDictionaryTreeDto.setName(contentDictionary.getName());
					   contentDictionaryTreeDto.setParentName(contentDictionary.getName());
					   contentDictionaryTreeDto.setParentId(contentDictionary.getId());
					   contentDictionaryTreeDto.setpId("0");
					   contentDictionaryResultList.add(contentDictionaryTreeDto);
				   }
				}
			   info.setResult(JacksonUtils.toJson(contentDictionaryResultList));
			   info.setSucess(true);
			   info.setMsg("获取数据字典树成功!");
		   }catch(Exception e){
			   log.error("获取数据字典树失败!"+e.getMessage());
			   info.setSucess(false);
			   info.setMsg("获取数据字典树失败!");
			   info.setExceptionMsg(e.getMessage());
		   }
		   return JacksonUtils.toJson(info);
	}

	
}
