package com.xinleju.cloud.oa.content.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.xinleju.cloud.oa.content.dao.ContentTypeDao;
import com.xinleju.cloud.oa.content.entity.ContentType;
import com.xinleju.platform.tools.data.JacksonUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.platform.base.service.impl.BaseServiceImpl;
import com.xinleju.cloud.oa.content.dao.ContentChildDao;
import com.xinleju.cloud.oa.content.dto.ContentChildTreeData;
import com.xinleju.cloud.oa.content.entity.ContentChild;
import com.xinleju.cloud.oa.content.service.ContentChildService;

/**
 * @author admin
 */

@Service
public class ContentChildServiceImpl extends BaseServiceImpl<String, ContentChild> implements ContentChildService {


    @Autowired
    private ContentChildDao contentChildDao;

    @Autowired
    private ContentTypeDao contentTypeDao;

    /**
     * 查询目录分类 Tree
     *
     * @param id
     * @return
     */
    @Override
    public List<ContentChildTreeData> getContentList(String id) {
        // TODO Auto-generated method stub
        return contentChildDao.getContentList(id);
    }

    @Override
    public List<ContentChildTreeData> getContentChildTreeById(String id) {
        // TODO Auto-generated method stub
        return contentChildDao.getContentChildTreeById(id);
    }

    @Override
    public int deleteContentChildByParentId(String parentId) {
        // TODO Auto-generated method stub
        int result = 0;
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("parentId", parentId);
        List<ContentChild> contentChildList = contentChildDao.queryList(map);
        if (contentChildList.size() > 0) {
            List<String> list = new ArrayList<String>();
            for (ContentChild contentChild : contentChildList) {
                list.add(contentChild.getId());
            }
            result = contentChildDao.deleteAllObjectByIds(list);
        }
        return result;
    }

    @Override
    public List<Map<String, Object>> queryTreeList(Map<String, Object> paramMap) throws Exception {
        String contentTypeId = null;
        if(paramMap!=null){
            contentTypeId = (String) paramMap.get("contentTypeId");
        }
        Map<String,Object> queryMap = new HashMap<String,Object>();
        queryMap.put("delflag",false);
        if(contentTypeId!=null){
            queryMap.put("contentTypeId",contentTypeId);

        }
        //按条件查询知识大类
        List<ContentType> contentTypeList = contentTypeDao.queryList(queryMap);
        List<Map<String,Object>> treeList = new ArrayList<Map<String,Object>>();
        for (ContentType contentType:contentTypeList) {
            Map<String,Object> treeMap = new HashMap<String,Object>();
            treeMap.put("id",contentType.getId());
            treeMap.put("pid",null);
            treeMap.put("name",contentType.getName());
            String contentTypeJson = JacksonUtils.toJson(contentType);
            Map<String,Object> contentTypeMap = JacksonUtils.fromJson(contentTypeJson,HashMap.class);
            contentTypeMap.put("contentTypeId",contentType.getId());
            contentTypeMap.remove("id");

            contentTypeMap.put("contentTypeName",contentType.getName());
            contentTypeMap.remove("name");
            treeMap.putAll(contentTypeMap);
            treeList.add(treeMap);

            //根据知识大类id查找目录
            Map<String,Object> childParamMap = new HashMap<String,Object>();
            childParamMap.put("parentId",contentType.getId());
            childParamMap.put("delflag",false);
            List<ContentChild> contentChildList = this.queryList(childParamMap);
            for (ContentChild contentChild:contentChildList) {
                Map<String,Object> childTreeMap = new HashMap<String,Object>();
                childTreeMap.put("id",contentChild.getId());
                childTreeMap.put("name",contentChild.getName());
                childTreeMap.put("pid",contentChild.getParentId());
                childTreeMap.put("pName",contentChild.getParentName());

                String contentChildJson = JacksonUtils.toJson(contentType);
                Map<String,Object> contentChildMap = JacksonUtils.fromJson(contentChildJson,HashMap.class);
                contentChildMap.put("contentChildId",contentChild.getId());
                contentChildMap.remove("id");

                contentChildMap.put("contentChildName",contentChild.getName());
                contentChildMap.remove("name");
                childTreeMap.putAll(contentChildMap);
                treeList.add(childTreeMap);
            }

        }
        return treeList;
    }

}
