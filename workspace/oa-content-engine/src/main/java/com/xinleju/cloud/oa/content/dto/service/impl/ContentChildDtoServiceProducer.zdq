package com.xinleju.cloud.oa.content.dto.service.impl;

import com.xinleju.cloud.oa.content.dto.ContentChildTreeData;
import com.xinleju.cloud.oa.content.dto.service.ContentChildDtoServiceCustomer;
import com.xinleju.cloud.oa.content.entity.ContentChild;
import com.xinleju.cloud.oa.content.entity.ContentType;
import com.xinleju.cloud.oa.content.service.ContentChildService;
import com.xinleju.cloud.oa.content.service.ContentTypeService;
import com.xinleju.cloud.oa.util.SortUtil;
import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.tools.data.JacksonUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.*;

/**
 * @author admin
 *
 *
 */

public class ContentChildDtoServiceProducer implements ContentChildDtoServiceCustomer{
	private static Logger log = Logger.getLogger(ContentChildDtoServiceProducer.class);
	@Autowired
	private ContentChildService contentChildService;
	
	@Autowired
	private ContentTypeService contentTypeService;

	public String save(String userInfo, String saveJson){
		// TODO Auto-generated method stub
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   ContentChild contentChild=JacksonUtils.fromJson(saveJson, ContentChild.class);
		   contentChildService.save(contentChild);
		   info.setResult(JacksonUtils.toJson(contentChild));
		   info.setSucess(true);
		   info.setMsg("保存对象成功!");
		} catch (Exception e) {
			 log.error("保存对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("保存对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   ContentChild contentChild=JacksonUtils.fromJson(updateJson, ContentChild.class);
			   int result=   contentChildService.update(contentChild);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   ContentChild contentChild=JacksonUtils.fromJson(deleteJson, ContentChild.class);
			   int result= contentChildService.deleteObjectById(contentChild.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= contentChildService.deleteAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	 {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			ContentChild contentChild=JacksonUtils.fromJson(getJson, ContentChild.class);
			ContentChild	result = contentChildService.getObjectById(contentChild.getId());
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				Page page=contentChildService.getPage(map, (Integer)map.get("start"),  (Integer)map.get("limit"));
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=contentChildService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				List list=contentChildService.queryList(map);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=contentChildService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson) {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public String deletePseudoAllObjectByIds(String userInfo, String deleteJsonList) {
		// TODO Auto-generated method stub
		return null;
	}

	/**
	 * 查询目录分类 Tree
	 * @param paramater
	 * @return
	 */
	public String getContentList(String userInfo,String id){
		//实例返回结果集对象
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try{
		   Map map=JacksonUtils.fromJson(id, HashMap.class);
		   String ids = (String)map.get("id");
		   List<ContentChildTreeData> contentList = contentChildService.getContentList(ids);
		   info.setResult(JacksonUtils.toJson(contentList));
		   info.setSucess(true);
		   info.setMsg("获取知识目录结构树成功!");
	   }catch(Exception e){
		   log.error("获取知识目录结构树失败!"+e.getMessage());
		   info.setSucess(false);
		   info.setMsg("获取知识目录结构树失败!");
		   info.setExceptionMsg(e.getMessage());
	   }
	   return JacksonUtils.toJson(info);
	}


	/**
	 * 查询目录分类 Tree
	 * @param paramater
	 * @return
	 *//*
	public String getContentChildTreeById(String userInfo,String id){
		//实例返回结果集对象
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try{
		   Map map=JacksonUtils.fromJson(id, HashMap.class);
		   String ids = (String)map.get("id");
		   List<ContentChildTreeData> contentList = contentChildService.getContentChildTreeById(ids);
		   List<ContentChildTreeData> contentResultList = new ArrayList<ContentChildTreeData>();
		   //如果二级栏目表中没有数据，要查询一级大类的数据返回
		   //List<ContentType> contentTypeList = 
		 //组装二级结构
		   if(contentList.size() > 0){
			   for (ContentChildTreeData contentTreeData : contentList) {
				   contentTreeData.setpId("0");
				   List<ContentChildTreeData> contentChildList = contentChildService.getContentList(contentTreeData.getParentId());
				   if(contentChildList.size() > 0){
					   for (ContentChildTreeData contentChildTreeData : contentChildList) {
						   contentChildTreeData.setpId(contentChildTreeData.getParentId());
						   contentResultList.add(contentChildTreeData);
					   }
				   }
			   }
		   }else{
			   //如果二级目录没有数据，直接查询大类表，返回大类数据
			   Map<String, Object> paramater = new HashMap<String, Object>();
			   List<ContentType> contentTypeList = contentTypeService.queryList(paramater);
			   if(contentTypeList.size() > 0){
				   for (ContentType contentType : contentTypeList) {
					   ContentChildTreeData contentChildTreeData = new ContentChildTreeData();
					   contentChildTreeData.setId(contentType.getId());
					   contentChildTreeData.setParentName(contentType.getName());
					   contentChildTreeData.setpId("0");
					   contentResultList.add(contentChildTreeData);
					   List<ContentChildTreeData> contentChildList = contentChildService.getContentList(contentType.getId());
					   contentList.addAll(contentChildList);
				}
			   }
		   }
		   contentList.addAll(contentResultList);
		   info.setResult(JacksonUtils.toJson(contentList));
		   info.setSucess(true);
		   info.setMsg("获取知识目录结构树成功!");
	   }catch(Exception e){
		   log.error("获取知识目录结构树失败!"+e.getMessage());
		   info.setSucess(false);
		   info.setMsg("获取知识目录结构树失败!");
		   info.setExceptionMsg(e.getMessage());
	   }
	   return JacksonUtils.toJson(info);
	}
*/
	
	
	
	/**
	 * 查询目录分类 Tree
	 * @param id userInfo
	 * @return
	 */
	public String getContentChildTreeById(String userInfo,String id){
		//实例返回结果集对象
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try{
		   Map map=JacksonUtils.fromJson(id, HashMap.class);
		   String ids = (String)map.get("id");
		   if("null".equals(ids)){
			   map = new HashMap();
		   }
		   List<ContentType> contentTypeList = contentTypeService.queryList(map);
		   List<ContentChildTreeData> contentResultList = new ArrayList<ContentChildTreeData>();
		   //如果二级栏目表中没有数据，要查询一级大类的数据返回
		   //List<ContentType> contentTypeList = 
		 //组装二级结构
		   //如果二级目录没有数据，直接查询大类表，返回大类数据
		   if(contentTypeList.size() > 0){
			   for (ContentType contentType : contentTypeList) {
				   ContentChildTreeData contentChildTreeData = new ContentChildTreeData();
				   contentChildTreeData.setId(contentType.getId());
				   contentChildTreeData.setName(contentType.getName());
				   contentChildTreeData.setParentName(contentType.getName());
				   contentChildTreeData.setParentId(contentType.getId());
				   contentChildTreeData.setpId("0");
				   contentChildTreeData.setContentChildId(null);
				   contentChildTreeData.setContentChildName(null);
				   contentChildTreeData.setContentTypeId(contentType.getId());
				   contentChildTreeData.setContentTypeName(contentType.getName());
				   contentChildTreeData.setContentTypeCode(contentType.getCode());
				   contentResultList.add(contentChildTreeData);
				   List<ContentChildTreeData> contentChildList = contentChildService.getContentList(contentType.getId());
				   if(contentChildList.size() > 0){
					   contentChildTreeData.setParent(true);
					   for (ContentChildTreeData contentChildTree : contentChildList) {
						   contentChildTree.setpId(contentChildTree.getParentId());
						   contentChildTree.setContentTypeCode(contentType.getCode());
						   contentChildTree.setParent(false);
					}
					   contentResultList.addAll(contentChildList);
				   }
			   }
			}
		   info.setResult(JacksonUtils.toJson(contentResultList));
		   info.setSucess(true);
		   info.setMsg("获取知识目录结构树成功!");
	   }catch(Exception e){
		   log.error("获取知识目录结构树失败!"+e.getMessage());
		   info.setSucess(false);
		   info.setMsg("获取知识目录结构树失败!");
		   info.setExceptionMsg(e.getMessage());
	   }
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String getContentParentTreeById(String userInfo, String id) {
		//实例返回结果集对象
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try{
			   Map map=JacksonUtils.fromJson(id, HashMap.class);
			   String ids = (String)map.get("id");
			   if("null".equals(ids)){
				   map = new HashMap();
			   }
			   List<ContentType> contentTypeList = contentTypeService.queryList(map);
			   List<ContentChildTreeData> contentResultList = new ArrayList<ContentChildTreeData>();
			   
			   if(contentTypeList.size() > 0){
				   for (ContentType contentType : contentTypeList) {
					   ContentChildTreeData contentChildTreeData = new ContentChildTreeData();
					   contentChildTreeData.setId(contentType.getId());
					   contentChildTreeData.setName(contentType.getName());
					   contentChildTreeData.setParentName(contentType.getName());
					   contentChildTreeData.setParentId(contentType.getId());
					   contentChildTreeData.setpId("0");
					   contentResultList.add(contentChildTreeData);
				   }
				}
			   info.setResult(JacksonUtils.toJson(contentResultList));
			   info.setSucess(true);
			   info.setMsg("获取知识目录结构树成功!");
		   }catch(Exception e){
			   log.error("获取知识目录结构树失败!"+e.getMessage());
			   info.setSucess(false);
			   info.setMsg("获取知识目录结构树失败!");
			   info.setExceptionMsg(e.getMessage());
		   }
		   return JacksonUtils.toJson(info);
	}

    @Override
    public String getContentChildByContentTypeId(String userInfo, String id) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            if (StringUtils.isNotBlank(id)) {
                Map map = JacksonUtils.fromJson(id, HashMap.class);
                List<ContentChild> list = contentChildService.queryList(map);
                SortUtil.sortList(list, "createDate", true);
                info.setResult(JacksonUtils.toJson(list));
                info.setSucess(true);
                info.setMsg("获取列表对象成功!");
            } else {
                info.setResult(null);
                info.setSucess(false);
                info.setMsg("获取列表对象失败，大类id为空!");
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取列表对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取列表对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String queryTreeList(String userInfo, String queryJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            if (StringUtils.isNotBlank(queryJson)) {
                Map map = JacksonUtils.fromJson(queryJson, HashMap.class);
                List list = contentChildService.queryTreeList(map);
                info.setResult(JacksonUtils.toJson(list));
                info.setSucess(true);
                info.setMsg("获取知识目录树对象成功!");
            } else {
                List list = contentChildService.queryList(null);
                info.setResult(JacksonUtils.toJson(list));
                info.setSucess(true);
                info.setMsg("获取知识目录树对象成功!");
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取知识目录树对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取知识目录树对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }
}
