package com.xinleju.cloud.oa.content.dto.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.xinleju.cloud.oa.content.dto.ContentTypeAndAuthorDto;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.cloud.oa.content.dto.ContentAuthorDto;
import com.xinleju.cloud.oa.content.dto.ContentTypeTreeData;
import com.xinleju.cloud.oa.content.dto.service.ContentTypeDtoServiceCustomer;
import com.xinleju.cloud.oa.content.entity.ContentAuthor;
import com.xinleju.cloud.oa.content.entity.ContentType;
import com.xinleju.cloud.oa.content.enumVo.DocumentType;
import com.xinleju.cloud.oa.content.service.ContentAuthorService;
import com.xinleju.cloud.oa.content.service.ContentTypeService;
import com.xinleju.cloud.oa.util.SortUtil;
import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * @author admin
 */

public class ContentTypeDtoServiceProducer implements ContentTypeDtoServiceCustomer {
    private static Logger log = Logger.getLogger(ContentTypeDtoServiceProducer.class);
    @Autowired
    private ContentTypeService contentTypeService;
    @Autowired
    private ContentAuthorService contentAuthorService;

    public String save(String userInfo, String saveJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            ContentType contentType = JacksonUtils.fromJson(saveJson, ContentType.class);
            contentTypeService.save(contentType);
            info.setResult(JacksonUtils.toJson(contentType));
            info.setSucess(true);
            info.setMsg("保存对象成功!");
        } catch (Exception e) {
            log.error("保存对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("保存对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String saveBatch(String userInfo, String saveJsonList) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public String updateBatch(String userInfo, String updateJsonList) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public String update(String userInfo, String updateJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            ContentType contentType = JacksonUtils.fromJson(updateJson, ContentType.class);
            int result = contentTypeService.update(contentType);
            info.setResult(JacksonUtils.toJson(result));
            info.setSucess(true);
            info.setMsg("更新对象成功!");
        } catch (Exception e) {
            log.error("更新对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("更新对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String deleteObjectById(String userInfo, String deleteJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            ContentType contentType = JacksonUtils.fromJson(deleteJson, ContentType.class);
            int result = contentTypeService.deleteObjectById(contentType.getId());
            info.setResult(JacksonUtils.toJson(result));
            info.setSucess(true);
            info.setMsg("删除对象成功!");
        } catch (Exception e) {
            log.error("更新对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("删除更新对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String deleteAllObjectByIds(String userInfo, String deleteJsonList) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            if (StringUtils.isNotBlank(deleteJsonList)) {
                Map map = JacksonUtils.fromJson(deleteJsonList, HashMap.class);
                List<String> list = Arrays.asList(map.get("id").toString().split(","));
                int result = contentTypeService.deleteAllObjectByIds(list);
                info.setResult(JacksonUtils.toJson(result));
                info.setSucess(true);
                info.setMsg("删除对象成功!");
            }
        } catch (Exception e) {
            log.error("删除对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("删除更新对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String getObjectById(String userInfo, String getJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            ContentType contentType = JacksonUtils.fromJson(getJson, ContentType.class);
            ContentType result = contentTypeService.getObjectById(contentType.getId());
            /*if (result != null && !"".equals(result.getContentType())) {
                if ("1".equals(result.getContentType())) {
                    result.setContentType("新闻");
                } else if ("2".equals(result.getContentType())) {
                    result.setContentType("文档");
                }
            }*/
            info.setResult(JacksonUtils.toJson(result));
            info.setSucess(true);
            info.setMsg("获取对象成功!");
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String getPage(String userInfo, String paramater) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            if (StringUtils.isNotBlank(paramater)) {
                Map<String, Object> map = JacksonUtils.fromJson(paramater, HashMap.class);
                Page page = contentTypeService.getContentTypeByPage(map);
                info.setResult(JacksonUtils.toJson(page));
                info.setSucess(true);
                info.setMsg("获取分页对象成功!");
            } else {
                Page page = contentTypeService.getPage(new HashMap(), null, null);
                info.setResult(JacksonUtils.toJson(page));
                info.setSucess(true);
                info.setMsg("获取分页对象成功!");
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取分页对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取分页对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String queryList(String userInfo, String paramater) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            if (StringUtils.isNotBlank(paramater)) {
                Map map = JacksonUtils.fromJson(paramater, HashMap.class);
                List<ContentType> list = contentTypeService.queryList(map);
                if (list.size() > 0) {
                    for (ContentType contentType : list) {
                        if (!"".equals(contentType.getContentType())) {
                            contentType.setContentType(DocumentType.getType(Integer.parseInt(contentType.getContentType())));
                        }
                    }
                }
                SortUtil.sortList(list, "viewSort", true);
                info.setResult(JacksonUtils.toJson(list));
                info.setSucess(true);
                info.setMsg("获取列表对象成功!");
            } else {
                List<ContentType> list = contentTypeService.queryList(null);
                if (list.size() > 0) {
                    for (ContentType contentType : list) {
                        if (!"".equals(contentType.getContentType())) {
                            contentType.setContentType(DocumentType.getType(Integer.parseInt(contentType.getContentType())));
                        }
                    }
                }
                SortUtil.sortList(list, "viewSort", true);
                info.setResult(JacksonUtils.toJson(list));
                info.setSucess(true);
                info.setMsg("获取列表对象成功!");
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取列表对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取列表对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String getCount(String userInfo, String paramater) {
        // TODO Auto-generated method stub
        return null;
    }

    /**
     * 查询知识管理大类总数
     *
     * @return
     */
    @Override
    public String countFolders(String userInfo, String saveJson) {
        //实例返回结果集对象
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            //查询文件目录总数
            int countFloder = contentTypeService.getCountFolders();
            //返回结果集
            info.setResult(JacksonUtils.toJson(countFloder));
            //返回结果状态
            info.setSucess(true);
            //返回查询状态
            info.setMsg("获取文件目录总数成功!");
        } catch (Exception e) {
            log.error("获取文件目录总数失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取文件目录总数失败!");
            info.setExceptionMsg(e.getMessage());
        }
        //返回结果集
        return JacksonUtils.toJson(info);
    }

    @Override
    public String deletePseudoObjectById(String userInfo, String deleteJson) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public String deletePseudoAllObjectByIds(String userInfo, String deleteJsonList) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            if (StringUtils.isNotBlank(deleteJsonList)) {
                Map map = JacksonUtils.fromJson(deleteJsonList, HashMap.class);
                List<String> list = Arrays.asList(map.get("id").toString().split(","));
                int result = contentTypeService.deletePseudoAllObjectByIds(userInfo,list);
                info.setResult(JacksonUtils.toJson(result));
                info.setSucess(true);
                info.setMsg("删除对象成功!");
            }
        } catch (Exception e) {
            log.error("删除对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("删除更新对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String getContentTypeTree(String userInfo, String paramater) {
        //实例返回结果集对象
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            List<ContentTypeTreeData> contentList = contentTypeService.getContentTypeTree();
            info.setResult(JacksonUtils.toJson(contentList));
            info.setSucess(true);
            info.setMsg("获取知识目录结构树成功!");
        } catch (Exception e) {
            log.error("获取知识目录结构树失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取知识目录结构树失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String saveContentTypeAndAuthor(String userInfo, String saveJson) {
        //实例返回结果集对象
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            ContentTypeAndAuthorDto contentTypeAndAuthorDto = JacksonUtils.fromJson(saveJson, ContentTypeAndAuthorDto.class);

            contentTypeService.saveContentTypeAndAuthor(userInfo, saveJson);
            info.setResult(JacksonUtils.toJson(contentTypeAndAuthorDto));
            info.setSucess(true);
            info.setMsg("保存知识目录和权限信息成功!");
        } catch (Exception e) {
            log.error("保存知识目录和权限信息失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("保存知识目录和权限信息失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }


    @Override
    public String getContentTypeAndAuthor(String userInfo, String getJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        //把知识目录中的属性赋值到中间bean：ContentTypeAndAuthorDto，此bean中保存有知识大类基本信息和权限
        ContentTypeAndAuthorDto contentTypeAndAuthorDto = new ContentTypeAndAuthorDto();
        try {
            ContentType contentType = JacksonUtils.fromJson(getJson, ContentType.class);
            ContentType result = contentTypeService.getObjectById(contentType.getId());


            BeanUtils.copyProperties(result, contentTypeAndAuthorDto);
            // 数据库属性类型往 dto类型转换时，只转换String类型的，其他类型的要手动转换
            contentTypeAndAuthorDto.setCountCapacity(String.valueOf(result.getCountCapacity()));
            contentTypeAndAuthorDto.setFileSize(String.valueOf(result.getFileSize()));
            //然后通过知识大类类型id，获取这个知识大类下面的权限
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("typeId", contentType.getId());
            List<ContentAuthor> list = contentAuthorService.queryList(map);
            List<ContentAuthorDto> listDto = new ArrayList<ContentAuthorDto>();
            if (list.size() > 0) {
                for (ContentAuthor contentAuthor : list) {
                    ContentAuthorDto contentAuthorDto = new ContentAuthorDto();
                    BeanUtils.copyProperties(contentAuthor, contentAuthorDto);
                    listDto.add(contentAuthorDto);
                }
            }
            contentTypeAndAuthorDto.setList(listDto);

            info.setResult(JacksonUtils.toJson(contentTypeAndAuthorDto));
            info.setSucess(true);
            info.setMsg("获取对象成功!");
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String validateFuJianSize(String userInfo, String paramater) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            ContentType contentType = JacksonUtils.fromJson(paramater, ContentType.class);
            Long totalFileSie = contentTypeService.queryTotalFileSize(contentType);
            info.setResult(JacksonUtils.toJson(totalFileSie));
            info.setSucess(true);
            info.setMsg("获取知识目录结构树成功!");
        } catch (Exception e) {
            log.error("获取知识目录结构树失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取知识目录结构树失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public int deleteContentTypeAndAuthor(String userInfo, String deleteJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            ContentType contentType = JacksonUtils.fromJson(deleteJson, ContentType.class);
            contentTypeService.deleteContentTypeAndAuthor(userInfo, deleteJson);
            info.setResult(JacksonUtils.toJson(contentType));
            info.setSucess(true);
            info.setMsg("删除对象成功!");
        } catch (Exception e) {
            log.error("更新对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("删除更新对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return 0;
    }

}
