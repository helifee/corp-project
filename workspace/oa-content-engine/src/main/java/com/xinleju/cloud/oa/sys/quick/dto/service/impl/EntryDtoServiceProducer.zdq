package com.xinleju.cloud.oa.sys.quick.dto.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.cloud.oa.sys.quick.dto.EntryDto;
import com.xinleju.cloud.oa.sys.quick.dto.service.EntryDtoServiceCustomer;
import com.xinleju.cloud.oa.sys.quick.entity.Entry;
import com.xinleju.cloud.oa.sys.quick.service.EntryService;
import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.ErrorInfoCode;
import com.xinleju.platform.base.utils.LoginUtils;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.base.utils.SecurityUserBeanInfo;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * @author admin
 * 
 *
 */
 
public class EntryDtoServiceProducer implements EntryDtoServiceCustomer{
	private static Logger log = Logger.getLogger(EntryDtoServiceProducer.class);
	@Autowired
	private EntryService entryService;

	public String save(String userInfo, String saveJson){
		
		SimpleDateFormat dateFormater = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date date=new Date();
		Timestamp timestamp = Timestamp.valueOf(dateFormater.format(date));
		
		
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   //获取用户对象
		   SecurityUserBeanInfo user=LoginUtils.getSecurityUserBeanInfo();
		   Entry entry=JacksonUtils.fromJson(saveJson, Entry.class);
		   Map<String, Object> map = new HashMap<String,Object>();
		   map.put("parentId",entry.getParentId());
		   Integer sortNum = getRulerSortNum(userInfo,map);
		   entry.setSort(sortNum);
		   //用户信息赋值
		   entry.setCreateDate(timestamp);
		   entry.setTendId(user.getTendId());
		   entry.setCreatePersonId(user.getSecurityUserDto().getId());
		   entry.setCreatePersonName(user.getSecurityUserDto().getLoginName());
		   entry.setCreateCompanyId(user.getSecurityUserDto().getBelongOrgId());
		   entry.setCreateCompanyName(user.getSecurityUserDto().getBelongOrgName());
		   entry.setCreateOrgId(user.getSecurityUserDto().getBelongOrgId());
		   entry.setCreateOrgName(user.getSecurityUserDto().getBelongOrgName());
		   
		   entryService.save(entry);
		   info.setResult(JacksonUtils.toJson(entry));
		   info.setSucess(true);
		   info.setMsg("保存对象成功!");
		} catch (Exception e) {
		 log.error("保存对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("保存对象失败!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public int getRulerSortNum(String userinfo, Map<String,Object> paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		int sort = 0;
		try {
			List<Map<String, Object>> list = entryService.getRulerSortNum(paramater);
			sort = list.size()>0?Integer.valueOf(list.get(0).get("SORT").toString())+1:1;
			info.setResult(String.valueOf(sort));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return sort;
	}
	
	@Override
	public String saveBatch(String userInfo, String saveJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		SimpleDateFormat dateFormater = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date date=new Date();
		Timestamp timestamp = Timestamp.valueOf(dateFormater.format(date));
		
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
		   //获取用户对象
		   SecurityUserBeanInfo user=LoginUtils.getSecurityUserBeanInfo();
		   Entry entry=JacksonUtils.fromJson(updateJson, Entry.class);
		   
		   //用户信息赋值
		   entry.setUpdateDate(timestamp);
		   entry.setUpdatePersonId(user.getSecurityUserDto().getId());
		   entry.setUpdatePersonName(user.getSecurityUserDto().getLoginName());
		   
		   int result=   entryService.update(entry);
		   info.setResult(JacksonUtils.toJson(result));
		   info.setSucess(true);
		   info.setMsg("更新对象成功!");
		} catch (Exception e) {
			log.error("更新对象失败!"+e.getMessage());
			info.setSucess(false);
			info.setMsg("更新对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   Entry entry=JacksonUtils.fromJson(deleteJson, Entry.class);
			   int result= entryService.deleteObjectById(entry.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   @SuppressWarnings("unchecked")
				   Map<String,Object> map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= entryService.deleteAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}else{
					info.setResult(ErrorInfoCode.PARAMETER_ERROR.getValue());
					info.setSucess(false);
					info.setMsg("请求参数为空!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	 {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			Entry entry=JacksonUtils.fromJson(getJson, Entry.class);
			Entry	result = entryService.getObjectById(entry.getId());
			if(result!=null){
				info.setResult(JacksonUtils.toJson(result));
			    info.setSucess(true);
			    info.setMsg("获取对象成功!");
			}else{
				info.setResult(ErrorInfoCode.NULL_ERROR.getValue());
				info.setSucess(false);
				info.setMsg("对象数据为空!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				@SuppressWarnings("unchecked")
				Map<String,Object> map=JacksonUtils.fromJson(paramater, HashMap.class);
				Page page=entryService.getPage(map, (Integer)map.get("start"),  (Integer)map.get("limit"));
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=entryService.getPage(new HashMap<String,Object>(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			List<Entry> list = new ArrayList<Entry>();
			if(StringUtils.isNotBlank(paramater)){
				@SuppressWarnings("unchecked")
				Map<String,Object> map=JacksonUtils.fromJson(paramater, HashMap.class);
				list=entryService.queryList(map);
			}else{
				list=entryService.queryList(null);
			}
			if(list!=null&&!list.isEmpty()){
				info.setResult(JacksonUtils.toJson(list));
				info.setSucess(true);
				info.setMsg("获取列表对象成功!");
			}else{
				info.setResult(ErrorInfoCode.NULL_ERROR.getValue());
				info.setSucess(true);
				info.setMsg("列表对象为空!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   Entry entry=JacksonUtils.fromJson(deleteJson, Entry.class);
			   int result= entryService.deletePseudoObjectById(entry.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   @SuppressWarnings("unchecked")
				   Map<String,Object> map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= entryService.deletePseudoAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}else{
					 info.setResult(ErrorInfoCode.PARAMETER_ERROR.getValue());
					 info.setSucess(false);
					 info.setMsg("请求参数为空!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String queryTreeList(String object, String paramaterJson) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			@SuppressWarnings("unchecked")
			Map<String,Object> map=JacksonUtils.fromJson(paramaterJson, HashMap.class);
			List<EntryDto> list=entryService.queryTreeList(map);
			if(list!=null&&!list.isEmpty()){
		    	info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取树对象成功!");
		    }else{
		    	info.setResult(ErrorInfoCode.NULL_ERROR.getValue());
				info.setSucess(false);
				info.setMsg("树对象为空!");
		    }
		} catch (Exception e) {
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
	
	@Override
	public String updateStatus(String userinfo, String id) {
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   EntryDto entryDto=JacksonUtils.fromJson(id, EntryDto.class);
			   Entry	entryBean = entryService.getObjectById(entryDto.getId());
			   int result=   entryService.updateStatus(entryBean);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新状态成功!");
			} catch (Exception e) {
			 log.error("更新状态失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新状态失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String fuzzySearch(Object object, String paramaterJson) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			@SuppressWarnings("unchecked")
			Map<String,Object> map=JacksonUtils.fromJson(paramaterJson, HashMap.class);
			List<Map<String, Object>> list=entryService.queryFuzzySearch(map);
			if(list!=null&&!list.isEmpty()){
			   info.setResult(JacksonUtils.toJson(list));
			   info.setSucess(true);
			   info.setMsg("模糊查询对象成功!");
		    }else{
			   info.setResult(ErrorInfoCode.NULL_ERROR.getValue());
			   info.setSucess(false);
			   info.setMsg("对象数据为空!"); 
		    }
		} catch (Exception e) {
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String updateBatchStatus(Object object, String updateJson) {
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   Entry entry=JacksonUtils.fromJson(updateJson, Entry.class);
			   int result=   entryService.updateBatchStatus(entry);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	public String updateSort(String userJson, String updateJson,Map<String, Object> map) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   Entry ruler=JacksonUtils.fromJson(updateJson, Entry.class);
			   Entry object= entryService.getObjectById(ruler.getId());
			   int result=   entryService.updateSort(object,map);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}
}
