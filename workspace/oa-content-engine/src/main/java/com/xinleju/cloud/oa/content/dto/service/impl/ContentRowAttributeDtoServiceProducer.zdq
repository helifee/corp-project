package com.xinleju.cloud.oa.content.dto.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.alibaba.dubbo.common.json.JSONObject;
import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.IDGenerator;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.cloud.oa.content.dto.ContentAuthorDto;
import com.xinleju.cloud.oa.content.dto.service.ContentRowAttributeDtoServiceCustomer;
import com.xinleju.cloud.oa.content.entity.ContentAuthor;
import com.xinleju.cloud.oa.content.entity.ContentRowAttribute;
import com.xinleju.cloud.oa.content.entity.ContentType;
import com.xinleju.cloud.oa.content.service.ContentRowAttributeService;
import com.xinleju.cloud.oa.util.SortUtil;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * @author admin
 *
 *
 */

public class ContentRowAttributeDtoServiceProducer implements ContentRowAttributeDtoServiceCustomer{
	private static Logger log = Logger.getLogger(ContentRowAttributeDtoServiceProducer.class);
	@Autowired
	private ContentRowAttributeService contentRowAttributeService;

    @Override
	public String save(String userInfo, String saveJson){
		// TODO Auto-generated method stub
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   ContentRowAttribute contentRowAttribute=JacksonUtils.fromJson(saveJson, ContentRowAttribute.class);
           contentRowAttribute.setDelflag(false);
           contentRowAttribute.setIsExtend("1");
		   contentRowAttributeService.saveAndUpdateContentRowAttribute(contentRowAttribute,"add");
		   info.setResult(JacksonUtils.toJson(contentRowAttribute));
		   info.setSucess(true);
		   info.setMsg("保存对象成功!");
		} catch (Exception e) {
		 log.error("保存对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("保存对象失败!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   ContentRowAttribute contentRowAttribute=JacksonUtils.fromJson(updateJson, ContentRowAttribute.class);
			   int result=   contentRowAttributeService.saveAndUpdateContentRowAttribute(contentRowAttribute,"update");
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   ContentRowAttribute contentRowAttribute=JacksonUtils.fromJson(deleteJson, ContentRowAttribute.class);
			   int result= contentRowAttributeService.deleteObjectById(contentRowAttribute.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= contentRowAttributeService.deleteAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	 {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			ContentRowAttribute contentRowAttribute=JacksonUtils.fromJson(getJson, ContentRowAttribute.class);
			ContentRowAttribute	result = contentRowAttributeService.getObjectById(contentRowAttribute.getId());
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		List<ContentRowAttribute> list_Exend_Object;
		try {
			if(StringUtils.isNotBlank(paramater)){
				
				Map<String,Object> map=JacksonUtils.fromJson(paramater, HashMap.class);
				Page page=contentRowAttributeService.getContentRowAttributeByPage(map);
				
				list_Exend_Object = page.getList();
				SortUtil.sortList(list_Exend_Object, "sortDesc", false);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=contentRowAttributeService.getPage(new HashMap(), null, null);
				list_Exend_Object = page.getList();
				SortUtil.sortList(list_Exend_Object, "sortDesc", false);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				
				List list=contentRowAttributeService.queryList(map);
				SortUtil.sortList(list, "sortDesc", false);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=contentRowAttributeService.queryList(null);
				SortUtil.sortList(list, "sortDesc", false);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo, String deleteJsonList) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String queryContentRowAttributeList(String userInfo,
			String contentTypeId) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(contentTypeId)){
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("contentTypeId", contentTypeId);
				List<ContentRowAttribute> list=contentRowAttributeService.queryList(map);
				
//				if(list.size() > 0){
//					JSONObject jsonObj = new JSONObject();
//					for (ContentRowAttribute c : list) {
//						//判断该属性是否为自定义属性，如果为自定义属性则组合成json
//						if(c.getIsExtend().equals("1")){
//							jsonObj.put(c.getFiledName(), c.getViewName());
//						}
//					}
//				}
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=contentRowAttributeService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPageInfo(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Page page= new Page();
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				List<ContentRowAttribute> contentRowAttributeList = contentRowAttributeService.queryList(map);
				page.setList(contentRowAttributeList);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=contentRowAttributeService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String updateBatchAttribute(String userInfo, String paramater) {
		// TODO Auto-generated method stub
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   int updateResult = 0;
	   try {
		   Map map=JacksonUtils.fromJson(paramater, HashMap.class);
		   List<ContentRowAttribute> contentRowAttributelist = new ArrayList<ContentRowAttribute>();
		   String ids = (String) map.get("ids");
		   if(!"".equals(ids)){
				 String[] idArray = ids.split(",");
				 if(idArray.length > 0){
					 for (int i = 0; i < idArray.length; i++) {
						String id = idArray[i];
						ContentRowAttribute contentRowAttribute = contentRowAttributeService.getObjectById(id);
						contentRowAttribute.setIsView(String.valueOf(map.get("isView")));
						contentRowAttributelist.add(contentRowAttribute);
					}
				 }
			}
		   if(contentRowAttributelist.size() > 0){
			   updateResult=   contentRowAttributeService.updateBatch(contentRowAttributelist);
		   }
		   info.setResult(JacksonUtils.toJson(updateResult));
		   info.setSucess(true);
		   info.setMsg("更新对象成功!");
		} catch (Exception e) {
		 log.error("更新对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("更新对象失败!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteBatchAttribute(String ids, Map paramater) {
		
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		   int daleteResult = 0;
		   try {
			   if(!"".equals(ids)){
				   daleteResult = contentRowAttributeService.deleteBatchAttribute(ids, paramater);
				}
			   info.setResult(JacksonUtils.toJson(daleteResult));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
		
		
	}



}
