package com.xinleju.cloud.oa.office.service.impl;

import java.beans.BeanInfo;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.platform.base.service.impl.BaseServiceImpl;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.cloud.oa.office.dao.OfficeHouseDao;
import com.xinleju.cloud.oa.office.dto.OfficeHouseDto;
import com.xinleju.cloud.oa.office.entity.OfficeHouse;
import com.xinleju.cloud.oa.office.service.OfficeHouseService;
import com.xinleju.cloud.oa.sys.quick.entity.Entry;
import com.xinleju.cloud.oa.sys.utils.SortType;
import com.xinleju.cloud.oa.sys.utils.StatusType;

/**
 * @author wangw
 * 
 * 
 */

@Service
public class OfficeHouseServiceImpl extends  BaseServiceImpl<String,OfficeHouse> implements OfficeHouseService{
	

	@Autowired
	private OfficeHouseDao officeHouseDao;
	@Override
	public List<OfficeHouse> queryListOfficeHouse(String program) throws Exception{
		// TODO Auto-generated method stub
		return officeHouseDao.queryListOfficeHouse(program);
	}

	@Override
	public List<OfficeHouse> getOfficeHouseTreeById(String program) throws Exception{
		// TODO Auto-generated method stub
		return officeHouseDao.getOfficeHouseTreeById(program);
	}

	@Override
	public List<OfficeHouse> queryOfficeHouseByParentId(String program)throws Exception {
		// TODO Auto-generated method stub
		return officeHouseDao.queryOfficeHouseByParentId(program);
	}

	/* (non-Javadoc)
	 * @see com.xinleju.cloud.oa.office.service.OfficeHouseService#getOfficeHousepage(java.util.Map)
	 */
	@Override
	public Page getOfficeHousepage(Map<String,Object> map)throws Exception {
	  Page p=new Page();
	  List<Map<String,Object>> list=officeHouseDao.getOfficeHousepage(map);
	  Integer total=officeHouseDao.getOfficeHousepageCount();
	  p.setLimit((Integer) map.get("limit"));
	  p.setList(list);
	  p.setStart((Integer) map.get("start"));
	  p.setTotal(total);
	  return p;
	}

	/* (non-Javadoc)
	 * @see com.xinleju.cloud.oa.office.service.OfficeHouseService#saveOfficeHouse(com.xinleju.cloud.oa.office.entity.OfficeHouse)
	 */
	@Override
	public List<OfficeHouseDto> queryTreeList(Map<String, Object> map)throws Exception {
	   List<OfficeHouseDto> list=new ArrayList<OfficeHouseDto>();
	   Long level=0l;
	   Long num=1l;
	   List<Map<String, Object>> baseList = officeHouseDao.queryTreeList(map);
	   if(baseList!=null&&baseList.size()>0){
	    	for (Map<String, Object> entryMap : baseList) {
	    		OfficeHouseDto entryDto=new OfficeHouseDto();
	    		transMapToBean(entryMap,entryDto);
	    		entryDto.setLevel(level);
	    		entryDto.setLft(num);
	    		entryDto.setIsLeaf(false);
	    		entryDto.setExpanded(true);
	    		entryDto.setLoaded(true);
	    		list.add(entryDto);
	    		Map<String, Object> typeList = getbaseProjectTypeList(entryMap.get("id").toString(),list,level,num);
	    		num= (Long) typeList.get("num");
	    		entryDto.setRgt(num);
	    		String isleaf = (String)typeList.get("isleaf");
	    		if("1".equals(isleaf)){
	    			entryDto.setIsLeaf(true);
				}else{
					entryDto.setIsLeaf(false);
				}
			}
	    }
	   return list;
	}
	public Map<String,Object> getbaseProjectTypeList(String id,List<OfficeHouseDto> list,Long level,Long num)throws Exception {
		  Map<String,Object> map=new HashMap<String, Object>();
		  Map<String,Object> resultmap=new HashMap<String, Object>();
		  map.put("parentId", id);
		  List<Map<String, Object>> baseEntryList = officeHouseDao.queryTreeList(map);
		  if(baseEntryList!=null&&baseEntryList.size()>0){
			  ++level;
			  for (Map<String, Object> entryMap : baseEntryList) {
				  ++num;
				  OfficeHouseDto entryDto=new OfficeHouseDto();
				  transMapToBean(entryMap,entryDto);
				  entryDto.setLft(num);
				  entryDto.setLevel(level);
				  entryDto.setIsLeaf(true);
				  entryDto.setExpanded(true);
				  entryDto.setLoaded(true);
				  list.add(entryDto);
				  Map<String, Object> projectTypeList = getbaseProjectTypeList(entryMap.get("id").toString(),list,level,num);
				  num= (Long) projectTypeList.get("num");
				  entryDto.setRgt(num);
			}
			  ++num;
		  }else{
			  resultmap.put("isleaf", "1");
			  ++num;
		  }
		  resultmap.put("num", num);
		  resultmap.put("list", list);
		  return resultmap;
	  }
	public static void transMapToBean(Map<String, Object> map, Object obj) throws Exception {  
		  
		BeanInfo beanInfo = Introspector.getBeanInfo(obj.getClass());  
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();  
  
        for (PropertyDescriptor property : propertyDescriptors) {  
            String key = property.getName();  
            if (map.containsKey(key)) {  
                Object value = map.get(key);  
                // 得到property对应的setter方法  
                Method setter = property.getWriteMethod();  
                setter.invoke(obj, value);  
            }  
        }  
    }

	@Override
	public int updateStatus(OfficeHouse entryBean) throws Exception {
		String status = entryBean.getState().toString();
		if(StatusType.StatusOpen.getCode().equals(status)){//启用状态改为禁用
			//对子集全部启用禁用 
			this.updateChirdStatus(entryBean);
			entryBean.setState(StatusType.StatusClosed.getCode());
			officeHouseDao.update(entryBean);
		}else if(StatusType.StatusClosed.getCode().equals(status)){//禁用状态改为启用
			//对父集全部启用启用
			this.updateParentStatus(entryBean);
			entryBean.setState(StatusType.StatusOpen.getCode());
			officeHouseDao.update(entryBean);
		}
		return 1;
	}
	/**
	 * author:liyong
	 * describe: 修改子节点所有状态
	 * param:object
	 */
	public void updateChirdStatus(OfficeHouse object){
		 Map<String,Object> param=new HashMap<>();
		 param.put("parentNodeId", object.getId());
		 List<OfficeHouse> projectList = officeHouseDao.queryList(param);
		 if(projectList!=null&&projectList.size()>0){
			 for (OfficeHouse entry : projectList) {
				 updateChirdStatus(entry);
				 entry.setState(StatusType.StatusClosed.getCode());
				 officeHouseDao.update(entry);
			 }
		 }
	}
	/**
	 * author:liuf
	 * describe: 修改父节点状态
	 * param:object
	 */
	public void  updateParentStatus(OfficeHouse object){
		 String parentId = object.getParentNodeId();
		 OfficeHouse entry = officeHouseDao.getObjectById(parentId);
		 if(entry!=null){
		 	updateParentStatus(entry);
		 	entry.setState(StatusType.StatusOpen.getCode());
		 	officeHouseDao.update(entry);
		 }
	}

	@Override
	public int updateSort(OfficeHouse object, Map<String, Object> map)throws Exception {
		String  sortType= String.valueOf(map.get("sortType"));
		Integer sort1 = object.getSortNumber();
		String parentId = object.getParentNodeId();
		List<OfficeHouse> rulerList = officeHouseDao.getEntryListByParentId(parentId);
		if(SortType.SHIFTUP.getCode().equals(sortType)){
			for (int i = 0; i < rulerList.size(); i++) {
				Integer sort2 = rulerList.get(i).getSortNumber();
				if(sort2==sort1&&i!=0){
					Integer sort3 = rulerList.get(i-1).getSortNumber();
					rulerList.get(i-1).setSortNumber(sort2);
					rulerList.get(i).setSortNumber(sort3);
					officeHouseDao.update(rulerList.get(i-1));
					officeHouseDao.update(rulerList.get(i));
					break;
				}
			}
		}else if(SortType.SHIFTDOWN.getCode().equals(sortType)){
		  for (int i = 0; i < rulerList.size(); i++) {
				Integer sort2 = rulerList.get(i).getSortNumber();
				if(sort2==sort1&&i!=rulerList.size()-1){
					Integer sort3 = rulerList.get(i+1).getSortNumber();
					rulerList.get(i+1).setSortNumber(sort2);
					rulerList.get(i).setSortNumber(sort3);
					officeHouseDao.update(rulerList.get(i+1));
					officeHouseDao.update(rulerList.get(i));	
					break;
				}
		}
		}else if(SortType.STICK.getCode().equals(sortType)){
			int len = rulerList.size()-1;
			Integer num =  sort1;
			int isGo = 0;
			for (int i = len; i >0 ; i--) {
				if(rulerList.get(i).getSortNumber()==sort1){
					isGo = i;
					rulerList.get(i).setSortNumber(rulerList.get(0).getSortNumber());
					officeHouseDao.update(rulerList.get(i));
				}
				if(isGo>0){
					rulerList.get(i).setSortNumber(num);
					num = rulerList.get(i-1).getSortNumber();
					rulerList.get(i-1).setSortNumber(rulerList.get(i).getSortNumber());
					officeHouseDao.update(rulerList.get(i-1));
				}
			}
		}else if(SortType.TOBOTTOM.getCode().equals(sortType)){
			int len = rulerList.size()-1;
			Integer num =  sort1;
			int isGo = -1;
			for (int i = 0; i <len ; i++) {
				if(rulerList.get(i).getSortNumber()==sort1){
					isGo = i;
					rulerList.get(i).setSortNumber(rulerList.get(len).getSortNumber());
					officeHouseDao.update(rulerList.get(i));
				}
				if(isGo>-1){
					rulerList.get(i).setSortNumber(num);
					num = rulerList.get(i+1).getSortNumber();
					rulerList.get(i+1).setSortNumber(rulerList.get(i).getSortNumber());
					officeHouseDao.update(rulerList.get(i+1));
				}
			}
		}
		return 1;
	}

	@Override
	public List<Map<String, Object>> getSortNum(Map<String, Object> paramater)throws Exception {
		return officeHouseDao.getSortNum(paramater);
	}

	@Override
	public int updateBatchStatus(OfficeHouse entry) throws Exception {
		officeHouseDao.update(entry);
		if(StatusType.StatusOpen.getCode().equals(entry.getState().toString())){
			this.updateParentStatus(entry);
		}else if(StatusType.StatusClosed.getCode().equals(entry.getState().toString())){
			this.updateChirdStatus(entry);
		}
		return 1;
	}
}