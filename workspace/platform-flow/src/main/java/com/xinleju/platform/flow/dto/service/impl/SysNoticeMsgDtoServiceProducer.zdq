package com.xinleju.platform.flow.dto.service.impl;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.alibaba.druid.support.json.JSONUtils;
import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.IDGenerator;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.flow.dto.MobileApproveDto;
import com.xinleju.platform.flow.dto.SysNoticeMsgDto;
import com.xinleju.platform.flow.dto.SysNoticeMsgStatDto;
import com.xinleju.platform.flow.dto.service.SysNoticeMsgDtoServiceCustomer;
import com.xinleju.platform.flow.entity.SysNoticeMsg;
import com.xinleju.platform.flow.exception.FlowException;
import com.xinleju.platform.flow.service.MobileApproveService;
import com.xinleju.platform.flow.service.SysNoticeMsgService;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * @author admin
 * 
 *
 */
 
public class SysNoticeMsgDtoServiceProducer implements SysNoticeMsgDtoServiceCustomer{
	
	private static Logger log = Logger.getLogger(SysNoticeMsgDtoServiceProducer.class);
	@Autowired
	private SysNoticeMsgService msgService;

	@Autowired
	private MobileApproveService mobileApproveService;
	
	public String save(String userInfo, String saveJson){
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   SysNoticeMsg msg=JacksonUtils.fromJson(saveJson, SysNoticeMsg.class);
		   Timestamp sendDate = msg.getSendDate();
		   if(sendDate == null){
			   Timestamp timestamp = new Timestamp(System.currentTimeMillis()); 
			   msg.setSendDate(timestamp);
		   }
		   //msgService.save(msg);
		   if(msg.getId() == null){
			   msg.setId(IDGenerator.getUUID());
		   }
		   log.debug("\n\n saveAndNotifyOthers() will be called... msg="+JacksonUtils.toJson(msg));
		   msgService.saveAndNotifyOthers(msg);
		   info.setResult(JacksonUtils.toJson(msg));
		   info.setSucess(true);
		   info.setMsg("保存对象成功!");
		} catch (Exception e) {
		 log.error("保存对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("保存对象失败!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList) {
		return null;
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList) {
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   SysNoticeMsg msg=JacksonUtils.fromJson(updateJson, SysNoticeMsg.class);
			   int result=   msgService.update(msg);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson) {
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   SysNoticeMsg msg=JacksonUtils.fromJson(deleteJson, SysNoticeMsg.class);
			   int result= msgService.deleteObjectById(msg.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList) {
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= msgService.deleteAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			SysNoticeMsg msg=JacksonUtils.fromJson(getJson, SysNoticeMsg.class);
			SysNoticeMsg	result = msgService.getObjectById(msg.getId());
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				Page page=msgService.getPage(map, (Integer)map.get("start"),  (Integer)map.get("limit"));
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=msgService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				List list=msgService.queryList(map);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=msgService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		return null;
	}
	
	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson) {
		
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   SysNoticeMsg msg=JacksonUtils.fromJson(deleteJson, SysNoticeMsg.class);
			   int result= msgService.deletePseudoObjectById(msg.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo, String deleteJsonList) {
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= msgService.deletePseudoAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String queryTwoSumData(String userInfo, String paramater){
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map<String, String> map=JacksonUtils.fromJson(paramater, HashMap.class);
				List<SysNoticeMsgDto> list=msgService.queryTwoSumData(map);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=msgService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryHaveDoneList(String userInfo, String paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map<String, String> map=JacksonUtils.fromJson(paramater, HashMap.class);
				List<SysNoticeMsg> list=msgService.queryHaveDoneList(map);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=msgService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryDBDYList(String userJson, String paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map<String, String> map=JacksonUtils.fromJson(paramater, HashMap.class);
				List<SysNoticeMsg> list=msgService.queryDBDYList(map);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=msgService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String updateStatusOfNoticeMsg(String userJson, String paramater) {
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   if(StringUtils.isNotBlank(paramater)){
				Map<String, Object> map=JacksonUtils.fromJson(paramater, HashMap.class);
				int result = msgService.updateStatusOfNoticeMsg(map);
				info.setResult("修改了"+result+"条消息");
			    info.setSucess(true);
			    info.setMsg("修改消息的状态操作成功!");
			}
		} catch (Exception e) {
		 log.error("修改消息的状态操作失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("修改消息的状态操作失败!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String searchDataByKeyword(String userJson, String paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map<String, String> map=JacksonUtils.fromJson(paramater, HashMap.class);
				List<SysNoticeMsg> list=msgService.searchDataByKeyword(map);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=msgService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String setMessageOpened(String userJson, String messageId) {
		msgService.setMessageOpened(messageId);
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		info.setSucess(true);
		info.setMsg("消息状态修改成功");
		return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteOpTypeDataByParamMap(String userJson, String paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if(StringUtils.isNotBlank(paramater)){
					Map<String, Object> map=JacksonUtils.fromJson(paramater, HashMap.class);
					int result = msgService.deleteOpTypeDataByParamMap(map);
					info.setResult("逻辑删除了"+result+"条消息");
				    info.setSucess(true);
				    info.setMsg("修改消息的状态操作成功!");
				}
			} catch (Exception e) {
			 log.error("修改消息的状态操作失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("修改消息的状态操作失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String pageQueryByParamMap(String userJson, String paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map<String, Object> map=JacksonUtils.fromJson(paramater, HashMap.class);//start  limit
				Page page = msgService.pageQueryByParamMap(map, (Integer)map.get("start"),  (Integer)map.get("limit"));
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=msgService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryMobileApproveByParamMap(String userJson, String paramater) {
		System.out.println("Producer... queryMobileApproveByParamMap >>> paramater="+paramater);
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map<String, Object> paramMap = JacksonUtils.fromJson(paramater, HashMap.class);
				MobileApproveDto mobileApprove = mobileApproveService.queryMobileApproveByParamMap(paramMap);
				info.setResult(JacksonUtils.toJson(mobileApprove));
			    info.setSucess(true);
			    info.setMsg("获取对象成功!");
			}
		} catch (Exception e) {
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 throw new FlowException(e);
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String updateStatusOfNoticeMsgByCurrentUser(String userJson, String paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if(StringUtils.isNotBlank(paramater)){
					Map<String, Object> map=JacksonUtils.fromJson(paramater, HashMap.class);
					int result = msgService.updateStatusOfNoticeMsgByCurrentUser(map);
					info.setResult("修改了"+result+"条消息");
				    info.setSucess(true);
				    info.setMsg("修改消息的状态操作成功!");
				}
			} catch (Exception e) {
			 log.error("修改消息的状态操作失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("修改消息的状态操作失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String queryTotalStatData(String userJson, String paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			Map<String, String> map = JacksonUtils.fromJson(paramater, HashMap.class);
			map.put("msgType", "1");
			SysNoticeMsgDto msgDto = msgService.queryTotalStatData(map);
			SysNoticeMsgStatDto statDto = new SysNoticeMsgStatDto();
			statDto.setToDoSum(msgDto.getToDoSum());
			statDto.setToReadSum(msgDto.getToReadSum());
			statDto.setToDoSum24Hours(msgDto.getToDoSum24Hours());
			info.setResult(JacksonUtils.toJson(statDto));
		    info.setSucess(true);
		    info.setMsg("获取列表对象成功!");
			
		} catch (Exception e) {
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryFirstTypeStatData(String userJson, String paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			Map<String, String> map = JacksonUtils.fromJson(paramater, HashMap.class);
			SysNoticeMsgStatDto statDto = msgService.queryFirstTypeStatData(map);
			info.setResult(JacksonUtils.toJson(statDto));
		    info.setSucess(true);
		    info.setMsg("获取列表对象成功!");
			
		} catch (Exception e) {
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	//执行给微信平台发送消息的操作
	@Override
	public String sendWeixinMsg(String userJson, String updateJson) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
		   int resultSum = msgService.doSendWeixinMsgAction();
		   info.setResult("一共发送了"+resultSum+"条微信消息");
		   info.setSucess(true);
		   info.setMsg("保存对象成功!");
		} catch (Exception e) {
			 log.error("保存对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("保存对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

}
