package com.xinleju.platform.flow.service.impl;

import java.net.URLEncoder;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.message.BasicHeader;
import org.apache.http.protocol.HTTP;
import org.apache.http.util.EntityUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.platform.base.service.impl.BaseServiceImpl;
import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.IDGenerator;
import com.xinleju.platform.base.utils.LoginUtils;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.base.utils.SecurityUserBeanInfo;
import com.xinleju.platform.flow.dao.SysNoticeMsgDao;
import com.xinleju.platform.flow.dto.SysNoticeMsgDto;
import com.xinleju.platform.flow.dto.SysNoticeMsgStatDto;
import com.xinleju.platform.flow.dto.UserDto;
import com.xinleju.platform.flow.entity.MsgSendRecord;
import com.xinleju.platform.flow.entity.SysNoticeMsg;
import com.xinleju.platform.flow.service.MsgSendRecordService;
import com.xinleju.platform.flow.service.SysNoticeMsgService;
import com.xinleju.platform.flow.utils.ConfigurationUtil;
import com.xinleju.platform.flow.utils.DateUtils;
import com.xinleju.platform.sys.org.dto.service.UserDtoServiceCustomer;
import com.xinleju.platform.tools.data.JacksonUtils;
import com.xinleju.platform.weixin.message.Article;
import com.xinleju.platform.weixin.message.Articles;
import com.xinleju.platform.weixin.message.NewsMessage;
import com.xinleju.platform.weixin.pojo.Token;
import com.xinleju.platform.weixin.pojo.WeixinUser;
import com.xinleju.platform.weixin.pojo.WeixinUserResponse;
import com.xinleju.platform.weixin.utils.CommonUtil;
import com.xinleju.platform.weixin.utils.ParamesAPI;

import net.sf.json.JSONObject;
/**
 * 消息服务
 * 
 */

@Service
public class SysNoticeMsgServiceImpl extends  BaseServiceImpl<String,SysNoticeMsg> implements SysNoticeMsgService{
	
	private static Logger log = Logger.getLogger(SysNoticeMsgServiceImpl.class);

	@Autowired
	private SysNoticeMsgDao msgDao;
	
	@Autowired
	private MsgSendRecordService msgSendRecordService;
	
	@Autowired
	private UserDtoServiceCustomer userDtoServiceCustomer;

	@Override
	public List<SysNoticeMsgDto> queryTwoSumData(Map<String, String> paramMap) {
		return msgDao.queryTwoSumData(paramMap);
	}

	@Override
	public List<SysNoticeMsg> queryHaveDoneList(Map<String, String> paramMap) {
		
		return msgDao.queryHaveDoneList(paramMap);
	}

	@Override
	public boolean completeMessage(String msgId, String status) {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("opType", status);
		paramMap.put("msgId", msgId);
		paramMap.put("dealDate", new Timestamp(System.currentTimeMillis()));
		int result = msgDao.update(SysNoticeMsg.class.getName() + ".completeMessage", paramMap);
		log.debug("\n\n 001 completeMessage() is done,completeMessage() paramMap="+JacksonUtils.toJson(paramMap)+"; result="+result);
		return true;
	}

	@Override
	public boolean setMessageOpened(String messageId) {
		msgDao.setMessageOpened(messageId);
		return true;
	}

	@Override
	public List<SysNoticeMsg> queryDBDYList(Map<String, String> paramMap) {
		List<SysNoticeMsg> list = msgDao.queryDBDYList(paramMap);
		return list;
	}

	@Override
	public int updateStatusOfNoticeMsg(Map<String, Object> paramMap) throws Exception {
		paramMap = processParamUserId(paramMap);
		return msgDao.updateStatusOfNoticeMsg(paramMap);
	}

	@Override
	public List<SysNoticeMsg> searchDataByKeyword(Map<String, String> paramMap) {
		return msgDao.searchDataByKeyword(paramMap);
	}

	@Override
	public SysNoticeMsg newFlowMsg(UserDto user, String msgType, String msgTitle, String url, String mobileUrl, String mobileParam) {
		SysNoticeMsg msg = new SysNoticeMsg();
		msg.setId(IDGenerator.getUUID());
		msg.setCode(msg.getId());
		msg.setTitle(msgTitle);
		msg.setAppCode("flow");
//		msg.setBusinessId(instance.getBusinessId());
		msg.setMsgType(true);
		msg.setSendDate(new Timestamp(System.currentTimeMillis()));
		msg.setUserId(user.getId());
		msg.setUserName(user.getName());
		//2017-07-18由于目前newFlowMsg()中的loginName是空的,所以需要调用UserDtoServiceCustomer来补齐数据
		String loginName = user.getLoginName(); 
		if(loginName== null || "null".equals(loginName) || "".equals(loginName)){
			loginName = queryLoginNameByUserId(msg.getUserId());
		}
		System.out.println("newFlowMsg() >>> loginName="+loginName);
		msg.setLoginName(loginName);
		msg.setOpType(msgType);
		if(url != null && url.indexOf("msgId")<0){
			msg.setUrl(url + "&msgId=" + msg.getId());	
		}else{
			msg.setUrl(url);
		}
		
		//打开页面带上消息Id
		if(mobileUrl!=null && mobileUrl.indexOf("?msgId=")<0){
			//如果移动端的mobileUrl不包含 ?msgId="+msg.getId()+"&users=&isback=N&opCode=NA&tabIdx=0";
			mobileUrl = mobileUrl+"?msgId="+msg.getId()+"&users=&isback=N&opCode=NA&tabIdx=0";
		}
		msg.setMobibleUrl(mobileUrl);
		//补充firstType/secondType/thirdType的内容
		//opType;//消息操作类型, DB：待办 ，DY
		if("DB".equals(msg.getOpType()) || "DY".equals(msg.getOpType()) ){
			msg.setFirstType("TASKTODO");
		}
		
		msg.setMobibleParam(mobileParam);
		return msg;
	}

	/**
	 * 根据userId 查询对应的用户信息,返回用户的loginName
	 * @param userId
	 * @return
	 */
	private String queryLoginNameByUserId(String userId) {
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userJson = JacksonUtils.toJson(userBeanInfo);
		System.out.println("queryLoginNameByUserId 001 --- >> userJson="+userJson);
		String queryJson = "{\"id\":\""+userId+"\"}"; 
		System.out.println("queryLoginNameByUserId 002 --- >> queryJson="+queryJson);
		String dubboResultInfo = userDtoServiceCustomer.getObjectById(userJson, queryJson);
		DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		if(dubboServiceResultInfo.isSucess()){
			String resultInfo = dubboServiceResultInfo.getResult();
			UserDto userDto = JacksonUtils.fromJson(resultInfo, UserDto.class);
	        return userDto.getLoginName();
		}
		return null;
	}

	@Override
	public int deleteOpTypeDataByParamMap(Map<String, Object> paramMap) {
		paramMap = processParamUserId(paramMap);
		return msgDao.deleteOpTypeDataByParamMap(paramMap);
	}
	private Map<String, Object> processParamUserId(Map<String, Object> map) {
		String userId = (String)map.get("userId"); 
		if(userId!=null && !"-1".equals(userId) && !"".equals(userId)){
			log.debug("\n\nbusiObjectId="+userId);
			String[] itemIds = userId.split(",");
			map.put("userId", itemIds);
		}else{
			map.remove("userId");
		}
		return map;
	}

	@Override
	public Page pageQueryByParamMap(Map<String, Object> map, Integer start, Integer limit) throws Exception {
		return msgDao.pageQueryByParamMap(map, start, limit);
	}

	@Override
	public int updateStatusOfNoticeMsgByCurrentUser(Map<String, Object> paramMap) {
		return msgDao.updateStatusOfNoticeMsgByCurrentUser(paramMap);
	}

	@Override
	public void saveAndNotifyOthers(SysNoticeMsg msg) throws Exception {
		this.save(msg);
		try {
			String opType = msg.getOpType();
			Timestamp sendDate = msg.getSendDate();
			String sendTimeText = "";
			DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");   
	        try {   
	        	sendTimeText = sdf.format(sendDate);      
	        } catch (Exception e) {   
	            e.printStackTrace();   
	        }
			if("DB".equals(opType) || "DY".equals(opType)){
				String content = URLEncoder.encode(msg.getTitle(), "UTF-8");
				String urlText = "platform-app/"+msg.getMobibleUrl();
				if(urlText!=null && urlText.indexOf("?msgId")<0){
					urlText = urlText+"?msgId="+msg.getId()+"&users=&isback=N&opCode=NA&tabIdx=0";
				}
				String msgStr = "{\"sendTime\":\""+sendTimeText+"\", \"fromUser\":\"system\",\"firstType\":\""+msg.getFirstType()+"\",\"secondType\":\""+msg.getSecondType()+"\",\"thirdType\":\""+msg.getThirdType()+"\","
						+ " \"msgContent\":\""+content+"\","+ "\"mobileMsgUrl\":\""+urlText+"\",\"pcMsgUrl\":\""+"platform-app/"+msg.getUrl()+"\",\"toUser\":[\""+msg.getUserId()+"\"],\"token\":\"xyre\"}";
				System.out.println("\n\n saveAndNotifyOthers msgStr="+msgStr);
				httpPostWithJSON(msgStr);
				System.out.println("------------------ httpPostWithJSON() is done.......");
			}
		} catch (Exception e) {
			log.error("同步消息到IM接口调用失败!!!!"+ e.getLocalizedMessage());
			e.printStackTrace();
		}
	}
	
	private static final String APPLICATION_JSON = "application/json";
    
	private static final String CONTENT_TYPE_TEXT_JSON = "text/json";
	
	public static JSONObject httpPostWithJSON(String json) throws Exception {
		String sendUrl = ConfigurationUtil.getValue("imServer.sendMessage");
		System.out.println("001 sendUrl="+sendUrl);
        CloseableHttpClient httpClient = HttpClientBuilder.create().build();
        HttpPost httpPost = new HttpPost(sendUrl);
        httpPost.addHeader(HTTP.CONTENT_TYPE, APPLICATION_JSON);
        
        StringEntity se = new StringEntity(json);
        se.setContentType(CONTENT_TYPE_TEXT_JSON);
        se.setContentEncoding(new BasicHeader(HTTP.CONTENT_TYPE, APPLICATION_JSON));
        httpPost.setEntity(se);
        HttpResponse res = httpClient.execute(httpPost);
        if(res.getStatusLine().getStatusCode() == HttpStatus.SC_OK){
        	String result = EntityUtils.toString(res.getEntity()); // 返回json格式字符串
        	log.debug("result>>> result="+result);
        	System.out.println("002 result="+result);
        }
        log.debug("result>>> StatusCode="+res.getStatusLine().getStatusCode());
        System.out.println("003 StatusCode="+res.getStatusLine().getStatusCode());
	    return null;
	}
	
	public static void main(String[] args){
		try {
			SysNoticeMsg msg = new SysNoticeMsg();
			msg.setTitle("【新表单-成本流程借用-D】-测试一部-纪-测试公司-测试一部员工1-张道强测试060502");
			msg.setUserId("595784def9e142d8b560e1a649c8f084");
			msg.setFirstType("TASKTODO");
			msg.setId("4a84fe9ed87f4b6581768ede366e9aa9");
			msg.setUrl("flow/runtime/approve/approve.html?instanceId=06ac10dc5c4b4b5caecbfed5d9619192&requestSource=DB&taskId=b68d23ef5d9942d0be06bd77c86159d6&taskType=2&approveType=SH&businessId=934a8206bece45dbbe7fc6b3eb45e23a&pcUrl=http://192.168.3.84:8080/platform-app/sysManager/customFormInstance/customFormInstance_flow.html&time=1495594164186&msgId=0078f322c869439cad2cde655c4b187e");
			msg.setMobibleUrl("/mobile/approve/approve_detail.html?msgId="+msg.getId()+"&users=&isback=N&opCode=NA&tabIdx=0");
			String content = URLEncoder.encode(msg.getTitle(), "UTF-8");
			String msgStr = "{\"fromUser\":\"system\",\"firstType\":\""+msg.getFirstType()+"\",\"secondType\":\""+msg.getSecondType()+"\",\"thirdType\":\""+msg.getThirdType()+"\","
					+ " \"msgContent\":\""+content+"\","+ "\"mobileMsgUrl\":\""+msg.getMobibleUrl()+"\",\"pcMsgUrl\":\""+msg.getUrl()+"\",\"toUser\":[\""+msg.getUserId()+"\"],\"token\":\"xyre\"}";
			System.out.println("\n\n saveAndNotifyOthers msgStr="+msgStr);
			httpPostWithJSON(msgStr);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	@Override
	public void batchSaveAndNotifyOthers(List<SysNoticeMsg> messages) throws Exception {
		for(SysNoticeMsg msg : messages){
			saveAndNotifyOthers(msg);
		}
	}

	@Override
	public SysNoticeMsgDto queryTotalStatData(Map<String, String> paramMap) {
		List<SysNoticeMsgDto> msgList = msgDao.queryTwoSumData(paramMap);
		SysNoticeMsgDto msgDto = msgList.get(0);//得到总的待办和待阅的数据
        
		//查询超过24小时未处理的待办消息
		List<SysNoticeMsgDto> msg24List = msgDao.queryMsgDto24Hours(paramMap);
		//此处还需要增加节假日的过滤条件
		msgDto.setToDoSum24Hours(msg24List.size()+"");
		return msgDto;
	}

	@Override
	public SysNoticeMsgStatDto queryFirstTypeStatData(Map<String, String> map) {
		return msgDao.queryFirstTypeStatData(map);
	}

	@Override
	public int doSendWeixinMsgAction() throws Exception {
		// 调用接口获取凭证
		Token token = CommonUtil.getToken(ParamesAPI.corpId, ParamesAPI.corpsecret);
		NewsMessage newsMessage = new NewsMessage();
		newsMessage.setMsgtype("news");
		newsMessage.setAgentid(ParamesAPI.mobiletodoAgentId);
		
		String mobileToDoServer = ConfigurationUtil.getValue("mobileToDoServer");
		System.out.println("001--mobileToDoServer="+mobileToDoServer);
		//第1部分: 先处理所有用户的待办任务消息
		String opType = "DB";
		Map<String, Object> queryMap = new HashMap<String, Object>();
		queryMap.put("opType", opType);
		//查询所有用户的待办/待阅的数据汇总, 入参是opType='DB'/'DY', 返回值是userId和toDoSum的List
		List<SysNoticeMsgDto> userToDoList = msgDao.queryAllUserToDoList(queryMap);
		System.out.println("001 doSendWeixinMsgAction userToDoList.size="+userToDoList.size());
		String dataType = "TO_DO";
		//userToDoList 还要过滤掉那些没有关注过微信公众号的用户信息
		List<SysNoticeMsgDto> focusTodoUserList = getFocusTodoUserList(userToDoList);
		for(SysNoticeMsgDto msgDto : focusTodoUserList){//开始遍历userToDoList的数据, 进行逐个发送消息
			sendSingleWeixinMsgByUserId(mobileToDoServer, msgDto, dataType, token, newsMessage);
		}
		
		//第2部分: 再处理所有用户的待阅任务消息
		return 0;
	}

	/**
	 * 把userToDoList中剔除掉那些没有关注过微信公众号的用户信息
	 * @param userToDoList
	 * @return
	 */
	private List<SysNoticeMsgDto> getFocusTodoUserList(List<SysNoticeMsgDto> userToDoList) {
		List<SysNoticeMsgDto> resultUserList = new ArrayList<SysNoticeMsgDto>();
		WeixinUserResponse userResponse = CommonUtil.getAttentionUserResponse();
		if(userResponse.getErrcode()==0){
			List<WeixinUser> weixinUserList =userResponse.getUserlist();
			for(SysNoticeMsgDto msgDto : userToDoList){
				String msgLoginName = msgDto.getLoginName();
				for(WeixinUser weixinUser : weixinUserList){
					String userid = weixinUser.getUserid();
					if(userid!=null && userid.equals(msgLoginName)){
						resultUserList.add(msgDto);
						continue;
					}
				}
			} 
		}
		System.out.println("getFocusTodoUserList() resultUserList="+JacksonUtils.toJson(resultUserList));
		return resultUserList;
	}

	private void sendSingleWeixinMsgByUserId(String mobileToDoServer, SysNoticeMsgDto userMsgDto, String dataType, Token token, NewsMessage newsMessage) throws Exception {
		String userId = userMsgDto.getUserId();
		String loginName = userMsgDto.getLoginName();
		//第一步：查询某个用户userId的待办记录
		Map<String, Object> queryMap = new HashMap<String, Object>();
		queryMap.put("userId", userId);
		queryMap.put("dataType", dataType);
		//入参：msgDTO [dataType userId ] start=0, limit=100  //返回该用户对应的消息列表;
		List<SysNoticeMsgDto> toDoList = msgDao.doQueryByParamMap(queryMap, 0, 100);
		
		System.out.println("002 查询某个用户userId的待办记录  toDoList="+JacksonUtils.toJson(toDoList));
		
		//第二步：加工处理所返回来的待办记录，即过滤掉已经发送过微信消息的消息Id
		//将查询结果的数据封装在List和Map对象中，
		List<String> tempMsgIdList = new ArrayList<String>();
		Map<String, SysNoticeMsgDto> msgObjectMap = new HashMap<String, SysNoticeMsgDto>();
		for(SysNoticeMsgDto msgDto : toDoList){
			tempMsgIdList.add(msgDto.getId());
			msgObjectMap.put(msgDto.getId(), msgDto);
		}
		//下一行执行的是消息Id的过滤逻辑>>>> 查询出已发送的消息记录,然后把这些数据过滤掉
		List<String> msgIdList = getMsgIdListByFilterOutSentData(userId, tempMsgIdList);//查询未发送过的消息记录ID
		System.out.println("003 ---消息Id的过滤逻辑---- msgIdList="+JacksonUtils.toJson(toDoList));

		//第三步：遍历真正需要发送消息Id，执行发送操作，同时记录已发送的消息记录；
		//下一行进行给微信平台发消息>>>>
		System.out.println(Thread.currentThread().getName() +" >> msgIdList.size()="+msgIdList.size());
		int gonum =1;  StringBuffer sbf;
		for (String msgId : msgIdList) {
			System.out.println(Thread.currentThread().getName() +" ---->>start="+gonum+"-------");
			SysNoticeMsgDto msg = msgObjectMap.get(msgId);
			Articles articles = new Articles();
			List<Article> articleList = new ArrayList<Article>();
			sbf = new StringBuffer(); 
			
			sbf.append("流程标题：").append(msg.getTitle()).append("\n\n")
			.append("发起时间：").append(msg.getSendDate()).append("\n\n")
			.append("DB".equals(msg.getOpType()) ? "待审批数共：" : "待阅数共：")
			.append(userMsgDto.getToDoSum()).append("条");
            String mobileUrl = msg.getMobibleUrl();
            if(mobileUrl!=null && !mobileUrl.startsWith("http")){
            	mobileUrl = mobileToDoServer+mobileUrl;
            }
			String urlText = mobileUrl+"&userId="+userId+"&loginName="+loginName;
			articleList.add(new Article("DB".equals(msg.getOpType())?"待审批消息":"待阅消息", sbf.toString(), urlText));
			System.out.println(">>> urlText="+urlText);
			articles.setArticles(articleList);
			newsMessage.setNews(articles);
			newsMessage.setTouser(loginName);
			JSONObject jsonObject = CommonUtil.SendNewsMsg(token.getAccessToken(), newsMessage);
			System.out.println("保存发送结果数据 ："+gonum+">>="+JacksonUtils.toJson(jsonObject));
			
			// 插入已经发送记录
			MsgSendRecord msgSendRecord = new MsgSendRecord();
			msgSendRecord.setId(IDGenerator.getUUID());
			msgSendRecord.setMsgId(msgId);
			msgSendRecord.setUserId(userId);
			msgSendRecord.setLoginName(loginName);
			msgSendRecord.setOpType(msg.getOpType());
			msgSendRecord.setMsgTitle(msg.getTitle());
			msgSendRecord.setAppCode(msg.getAppCode());
			msgSendRecord.setSendDate(DateUtils.formatDateTime(new Date()));
			msgSendRecord.setErrCode(jsonObject.getInt("errcode")+"");
			msgSendRecord.setErrMsg(jsonObject.getString("errmsg"));
			msgSendRecord.setDelflag(false);
			msgSendRecordService.save(msgSendRecord);
			System.out.println(Thread.currentThread().getName() +" ======= end="+gonum+"=======");
			gonum++;
		}
	}

	//入参：此次待发送的消息Id的列表；返回值是剔除掉已经发送过的消息ID，已防止重复发送
	private List<String> getMsgIdListByFilterOutSentData(String userId, List<String> tempMsgIdList) {
		System.out.println("getMsgIdListByFilterOutSentData >>> 001 tempMsgIdList="+JacksonUtils.toJson(tempMsgIdList));
		//内部逻辑是先查询出已发送的消息ID列表，然后将其从msgList减去这些已查询到的消息Id的
		Map<String, Object> queryMap = new HashMap<String, Object>();
		queryMap.put("userId", userId);
		//获取已经给微信平台发送完消息的消息Id的列表
	    List<String> sentMsgIdList = msgSendRecordService.queryMsgIdList(queryMap);
	    System.out.println("getMsgIdListByFilterOutSentData >>> 002 sentMsgIdList="+JacksonUtils.toJson(sentMsgIdList));
	    if(sentMsgIdList!=null && sentMsgIdList.size()>0){
	    	tempMsgIdList.removeAll(sentMsgIdList);
	    }
	    System.out.println("getMsgIdListByFilterOutSentData >>> 003 tempMsgIdList="+JacksonUtils.toJson(tempMsgIdList));
		return tempMsgIdList;
	}
}
