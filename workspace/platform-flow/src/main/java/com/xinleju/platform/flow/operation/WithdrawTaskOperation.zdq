package com.xinleju.platform.flow.operation;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;

import com.xinleju.platform.flow.dto.ApprovalSubmitDto;
import com.xinleju.platform.flow.dto.InstanceTaskDto;
import com.xinleju.platform.flow.enumeration.ACStatus;
import com.xinleju.platform.flow.enumeration.FlAcType;
import com.xinleju.platform.flow.enumeration.InstanceOperateType;
import com.xinleju.platform.flow.enumeration.PostStatus;
import com.xinleju.platform.flow.enumeration.TaskStatus;
import com.xinleju.platform.flow.exception.FlowException;
import com.xinleju.platform.flow.model.ACUnit;
import com.xinleju.platform.flow.model.ApproverUnit;
import com.xinleju.platform.flow.model.InstanceUnit;
import com.xinleju.platform.flow.model.PostUnit;
import com.xinleju.platform.flow.model.TaskUnit;

/**
 * 审批人撤回任务操作
 * 
 * @author daoqi
 *
 */
public class WithdrawTaskOperation extends DefaultOperation implements Operation{

	public WithdrawTaskOperation() {
		super(OperationType.WITHDRAW_TASK);
	}

	/**
	 * 已检查过能否撤回
	 */
	@Override
	public String action(InstanceUnit instanceUnit, ApprovalSubmitDto approvalDto) throws Exception {
		
		//查找当前撤回人的操作结果
		super.setCurrentLocation(instanceUnit, approvalDto);
		
		//记录流转日志
		super.saveTransition(currentApprover, approvalDto.getOperationName());
		
		if(OperationType.RETURN.getCode().equals(currentApprover.getTask().getTaskResult())) {
			delateACFromReturn(instanceUnit.getAcList());
		} else {
			
			//1、查询的运行中的任务回退，并撤回对应消息
			List<InstanceTaskDto> toWithdrawTasks = approvalDto.getToWithdrawTasks();
			withdrawTaskAndMsg(instanceUnit, toWithdrawTasks);
		}
		
		//2、撤回操作本人任务变成运行中，并重发待办消息
		turnOn(currentApprover);
		
		//3、恢复跳过的审批人的任务
		//竞争时跳过的审批人，在撤回任务时不给审批的资格，还由撤回任务人（原审批人审批）!!!
		
		//4、重新计算流程当前审批人
		super.setCurrentApprovers(instanceUnit);
		
		super.save(instanceUnit);
		
		super.handleMessages(instanceUnit, approvalDto);
		
		//5、记录撤回任务操作日志
		try {
			service.getInstanceLogService().saveLogData(instanceUnit.getId(), currentAc.getAcId(), 
					currentApprover.getId(), currentApprover.getTask().getTaskId(), 
					InstanceOperateType.DRAW_BACK_TASK.getValue(), currentApprover.getApproverId(), null, null);
		} catch (Exception e) {
			throw new FlowException("记录流程日志异常：", e);
		}
		
		return "success";
	}

	private void delateACFromReturn(List<ACUnit> acList) {
		for(ACUnit acUnit :acList) {
			if("1".equals(acUnit.getFromReturn())) {
				acUnit.setDbAction(2);
			}
		}
	}

	/**
	 * 1、匹配待还原的任务并撤回消息
	 * 2、同时还原岗位及环节的状态
	 * 
	 * @param instanceUnit
	 * @param toWithdrawTasks
	 */
	private void withdrawTaskAndMsg(InstanceUnit instanceUnit, List<InstanceTaskDto> toWithdrawTasks) {
		List<String> toWithdrawTaskIds = new ArrayList<String>();
		for(InstanceTaskDto task : toWithdrawTasks) {
			toWithdrawTaskIds.add(task.getId());
		}
		
		for(ACUnit acUnit : instanceUnit.getAcList()) {
			List<PostUnit> posts = acUnit.getPosts();
			if(CollectionUtils.isEmpty(posts)) {
				continue;
			}
			
			int notRunPostCount = 0;
			for(PostUnit post : posts) {
				int delApproverCount = 0;
				List<ApproverUnit> approvers = post.getApprovers();
				if(CollectionUtils.isEmpty(approvers)) {
					continue;
				}
				for(ApproverUnit approver : approvers) {
					TaskUnit task = approver.getTask();
					if(task == null) {
						continue;
					}

					if(toWithdrawTaskIds.contains(task.getTaskId())) {
						
						//处理转办、协办、沟通发起人产生的后续人员撤回（作删除处理）
						if(StringUtils.isNotEmpty(task.getFromId())) {
							task.setDbAction(2);
							approver.setDbAction(2);
							
							//处理正常的审批人撤回(置为未运行)
						} else {
							task.setDbAction(2);	//删除任务内部会同时删除消息
							delApproverCount++;
						}
					}
				}
				if(delApproverCount == approvers.size()) {
					post.setPostStatus(PostStatus.NOT_RUNNING.getValue());
					notRunPostCount++;
				}
			}
			
			if(notRunPostCount == posts.size()) {
				acUnit.setAcStatus(ACStatus.NOT_RUNNING.getValue());
			}
		}
	}

	@Override
	protected void turnOn(ApproverUnit approver) throws Exception {
		TaskUnit task = approver.getTask();
		task.setTaskStatus(TaskStatus.RUNNING.getValue());
		task.setEndTime(null);
		task.setTaskResult(null);
		task.setTaskResultName(null);
		task.setTaskComments(null);
		
		if(PostStatus.FINISHED.getValue().equals(currentPost.getPostStatus())) {
			currentPost.setPostStatus(PostStatus.RUNNING.getValue());
			currentPost.setLeftPerson(currentPost.getLeftPerson() + 1);
			currentAc.setLeftPost(currentAc.getLeftPost() + 1);
		} else {
			
		}
		
		if(ACStatus.FINISHED.getValue().equals(currentAc.getAcStatus())) {
			currentAc.setAcStatus(ACStatus.RUNNING.getValue());
			
			//下一环节是聚合环节，其到达数+1
			List<ACUnit> nextList = currentAc.getNextAcs();
			if(CollectionUtils.isNotEmpty(nextList) && nextList.size() == 1) {
				ACUnit next = nextList.get(0);
				if(FlAcType.JOIN.getAcType().equals(next.getAcType())) {
					
					next.setLeftPost(next.getLeftPost() + 1);
				}
			}
		}
		
		//已办变待办
		service.getMsgService().completeMessage(task.getMsgId(), "DB");
	}
}
