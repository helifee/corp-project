<mxEditor   defaultEdge="connector">
    <ui>
            <add as="graph" element="graph"/>
            <add as="toolbar" element="toolbar"/>
    </ui>
    <include name="/platform-app/flow/editor/config/toolbar-actions.xml" />
    <include name="/platform-app/flow/editor/config/toolbar-common.xml" />
    <add as="onInit">
        function(){

            var editor = this;
            var parent = editor.graph.getDefaultParent();
             var model = editor.graph.model;
             mxGraph.prototype.isCellResizable=function(cell){
               return false;
            }

            mxGraph.prototype.isCellEditable=function(cell){
                var nodeType=cell.getAttribute('nodeType');
                if(nodeType=='start'|| nodeType=='end'){
                      return false;
                }else{
                     return true;
                }
            }
	        mxGraph.prototype.isLabelMovable = function(cell){
	           if(cell.isEdge ){
	                return   false;
	            }else{
	                return true;
	            }
	
	        }
        mxGraph.prototype.isValidConnection = function(source,target){
             var  innum=0 ;
             var  outnum=0;

              if(target=='' ){
                  innum=0;
              }

              if(target.isVertex()){
                    var  edges=target.edges;
                    if(edges == null ){
                          innum=0;
                    }
                    mxUtils.forEach(edges,function(edge){
                      if(edge.target.isVertex()){
                          if(edge.target.id ==target.id ){
                              innum++;
                         }
                      }
                    });
              }


                <!--var num=outnum;-->
                var nodeType=target.getAttribute('nodeType');
                if( innum*1 >0 ){
                        if(nodeType=='start' ||nodeType=='end'|| nodeType=='task' ){
                             return false;
                        }else{
                             return true;
                        }
                }else{
                    return true;
                }



                var outnum=0;
                if(source=='' ){
                   outnum=0;
                }
                if(source.isVertex()){
                       var  edges=source.edges;
                        if(edges == null ){
                            outnum=0;
                        }
                        mxUtils.forEach(edges,function(edge){
                            if(edge.source.isVertex()){
                                if(edge.source.id ==source.id ){
                                outnum++;
                                }
                            }
                        });
                        var nodeType=source.getAttribute('nodeType');
                        if(nodeType=='end'){
                           return false;
                        }

                        if( outnum*1 >0 ){
                            if(nodeType=='start' || nodeType=='task' ){
                               return false;
                            }else{
                               return  true;
                            }
                        }else{
                           return  true;
                        }
                }

        }




           mxGraph.prototype.isCellCloneable=function(cell){
                    var nodeType=cell.getAttribute('nodeType');
                    if(nodeType=='start'||nodeType=='end'){
                         return false;
                    }else{
                       return true;
                    }
            }


           editor.graph.setAllowDanglingEdges(false);
           editor.graph.setAllowLoops(false);
           editor.graph.setMultigraph(false);



        }
     </add>

 
    <mxGraph as="graph">
        <mxGraphModel as="model">
            <add as="valueForCellChanged"><![CDATA[
			function(cell, value)
			{
				var previous = null;
				if (isNaN(value.nodeType))
				{
					previous = cell.getAttribute('label');
					cell.setAttribute('label', value);
				}
				else
				{
					previous = cell.value;
					cell.value = value;
				}
				return previous;
			}
		]]></add>

            <root>

            </root>
        </mxGraphModel>
        <add as="convertValueToString">
            function(cell)
            {
                return cell.getAttribute('label');
            }
        </add>


        <mxStylesheet as="stylesheet">
            <add as="defaultVertex" extend="text">
                <add as="shape" value="circle"/>
                <add as="fontSize" value="11"/>
                <add as="align" value="center"/>
                <add as="verticalAlign" value="middle"/>
                <add as="perimeter" value="ellipsePerimeter"/>
                <!--<add as="shadow" value="1"/>-->
                <add as="strokeColor" value="#3897EC" />
                <add as="fillColor" value="#3897EC"/>
                <add as="gradientColor" value="white"/>
            </add>
            <add as="defaultEdge">
                <add as="shape" value="connector"/>
                <add as="fontSize" value="10"/>
                <add as="align" value="center"/>
                <add as="verticalAlign" value="middle"/>
                <add as="rounded" value="1"/>
                <add as="labelBackgroundColor" value="white"/>
                <add as="strokeColor" value="#3897EC"/>
                <add as="strokeWidth" value="1.4"/>
                <add as="edgeStyle" value="elbowEdgeStyle"/>
                <add as="endArrow" value="classic"/>
            </add>
            <add as="start">
                <add as="shape" value="ellipse"/>
                <add as="perimeter" value="ellipsePerimeter"/>
                <add as="strokeColor" value="#CDEB8B"/>
                <add as="fillColor" value="#CDEB8B"/>
            </add>
            <add as="end">
                <add as="shape" value="ellipse"/>
                <add as="perimeter" value="ellipsePerimeter"/>
                <add as="strokeColor" value="#ff0000"/>
                <add as="fillColor" value="#ff0000"/>
            </add>
            <add as="symbol">
                <add as="shape" value="image"/>
                <add as="perimeter" value="rectanglePerimeter"/>
                <add as="labelBackgroundColor" value="white"/>
                <add as="fontSize" value="10"/>
                <add as="align" value="center"/>
                <add as="verticalAlign" value="top"/>
                <add as="verticalLabelPosition" value="bottom"/>
            </add>
            <add as="verticalConnector">
                <add as="elbow" value="vertical"/>
            </add>
            <add as="straightConnector">
                <add as="shape" value="connector"/>
                <add as="endArrow" value="classic"/>
                <add as="edgeStyle">null</add>
            </add>
            <add as="arrowConnector">
                <add as="shape" value="arrow"/>
                <add as="fillColor" value="#C3D9FF"/>
                <add as="endSize" value="20"/>
                <remove as="edgeStyle"/>
            </add>

        </mxStylesheet>

    </mxGraph>
    <mxDefaultToolbar as="toolbar" >
        <include name="/platform-app/flow/editor/config/toolbar.xml" />
    </mxDefaultToolbar>





</mxEditor>