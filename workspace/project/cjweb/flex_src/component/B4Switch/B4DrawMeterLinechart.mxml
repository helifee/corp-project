<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import component.common.*;
			import component.common.LineGraphic;
			
			import flash.utils.Dictionary;
			
			import mx.charts.AxisRenderer;
			import mx.charts.CategoryAxis;
			import mx.charts.LineChart;
			import mx.charts.LinearAxis;
			import mx.charts.chartClasses.Series;
			import mx.charts.series.LineSeries;
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.containers.HBox;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			
			import spark.components.BorderContainer;
			import spark.effects.Rotate;
			
			private var xOffset:Number=0;
			private var dict:Dictionary = new Dictionary();
			private var linechart:LineChart;
			private var hDate:CategoryAxis;
			private var axRend4Horizontal:AxisRenderer;
			private var axRend4Vertical:AxisRenderer;
			
			private var bcMeterContainer:BorderContainer;
			private var linegrap:LineGraphic;
			//字典表
			private var dictLineGraphics:Dictionary=new Dictionary();
			//表计名称列表数组
			private var _arrMeterName:Array;
			public function get arrMeterName():Array{
				return _arrMeterName;
			}
			public function set arrMeterName(value:Array):void{
				if(value!=_arrMeterName){
					_arrMeterName=value;
					this.invalidateProperties();
				}
			}
			//			//表计组名称数组
			private var _arrGroupName:Array;
			public function get arrGroupName():Array{
				return _arrGroupName;
			}
			public function set arrGroupName(value:Array):void{
				if(value!=_arrGroupName){
					_arrGroupName=value;
					this.invalidateProperties();
				}
			}
			
			//表计源数据
			private var _arrMeterLineChartData:ArrayCollection;
			public function get arrMeterLineChartData():ArrayCollection{
				return _arrMeterLineChartData;
			}
			public function set arrMeterLineChartData(value:ArrayCollection):void{
				if(value!=_arrMeterLineChartData){
					_arrMeterLineChartData=value;
					this.invalidateProperties();
				}
			}
			//纵轴单位描述
			private var _strUnit:String;
			public function get strUnit():String{
				return _strUnit;
			}
			public function set strUnit(value:String):void{
				if(value!=_strUnit){
					_strUnit=value;
					this.invalidateProperties();
				}
			}
			[Bindable]private var vUsage:LinearAxis;
			private var arrLineSeries:Array;
			//水平坐标的数据源对应列名
			[Bindable]private var _HorizontalField:String;
			public function get HorizontalField():String{
				return _HorizontalField;
			}
			public function set HorizontalField(value:String):void{
				if(value!=_HorizontalField){
					_HorizontalField=value;
					this.invalidateProperties();
				}
			}
			
			protected function ConnectLineGrap(linegrap1:LineGraphic, linegrap2:LineGraphic):void
			{
				
				var myShape:Shape=new Shape();
				var ui:UIComponent =new UIComponent(); //flex 中没有UIcomponent将无法显示
				myShape.graphics.lineStyle(1);
				myShape.graphics.moveTo(linegrap1.middleLinePos+linegrap1.x,linegrap1.y+linegrap1.height-5);
				myShape.graphics.lineTo(linegrap1.middleLinePos+linegrap1.x+5,linegrap1.y+linegrap1.height-5);
				myShape.graphics.lineTo(linegrap2.middleLinePos+linegrap2.x+5,linegrap2.y+5);
				myShape.graphics.lineTo(linegrap2.middleLinePos+linegrap2.x,linegrap2.y+5);
				ui.addChild(myShape);
				this.addElement(ui);//UI添加到舞台
			}
			
			//右边
			private var linearrowTemp:LineArrow;
			private var mTemp:Meter;
			private var _CompArrayTemp:Array
			private var lsTemp:LineSeries;
			public function Creategraphic(arrMeterName:Array,iFirDemension:int):LineGraphic
			{
				//表计属性
				var leftLineArrows:Array = new Array();
				var rightLineArrows:Array = new Array();
				//左边表计
				var linearrow2:LineArrow = new LineArrow();
				var m2:Meter =new Meter();
				m2.addEventListener(MouseEvent.CLICK,showLineChartOrHide);
				var m2_1:Transformer =new Transformer();
				var _CompArray2:Array = new Array();
				_CompArray2.push(m2_1);
				_CompArray2.push(m2);
				//左边图表
				//动态生成曲线对象
				lsTemp = new LineSeries();
				lsTemp.horizontalAxis=hDate;
				lsTemp.yField="Group"+(iFirDemension+1).toString();
				lsTemp.displayName=_arrGroupName[iFirDemension];
				lsTemp.setStyle("form","curve");
				lsTemp.visible=false;
				arrLineSeries.push(lsTemp);
				//组表计与曲线对应
				dictLineGraphics[m2]=lsTemp;
				
				linearrow2.CompArray = _CompArray2;
				leftLineArrows.push(linearrow2);
				//右边
				for(var i:int=0;i<arrMeterName.length;i++){
					//表计
					linearrowTemp = new LineArrow();
					mTemp =new Meter();
					mTemp.addEventListener(MouseEvent.CLICK,showLineChartOrHide);
					_CompArrayTemp = new Array();
					_CompArrayTemp.push(mTemp);
					linearrowTemp.CompArray = _CompArrayTemp;
					linearrowTemp.lineName = arrMeterName[i];
					rightLineArrows.push(linearrowTemp);
					
					//图表
					//动态生成曲线对象
					lsTemp = new LineSeries();
					lsTemp.horizontalAxis=hDate;
					lsTemp.yField="Unit"+(iFirDemension+1).toString()+(i+1).toString();
					lsTemp.displayName=arrMeterName[i];
					lsTemp.setStyle("form","curve");
					lsTemp.visible=false;
					arrLineSeries.push(lsTemp);
					
					//单个表计与曲线对应
					dictLineGraphics[mTemp]=lsTemp;
					
				}
				//表计
				var linegrap:LineGraphic = new LineGraphic();
				linegrap.LeftLineArrows = leftLineArrows;
				linegrap.RightLineArrows = rightLineArrows;
				return linegrap;
				
			}
			
			private var LineGraphics:Array;
			private var linegrapTemp:LineGraphic;
			
			override protected function createChildren():void{
				
				//------------
				//图表属性
				linechart=new LineChart();
				linechart.dataProvider=_arrMeterLineChartData;
				arrLineSeries=new Array();
				//横坐标
				hDate=new CategoryAxis();
				hDate.categoryField=_HorizontalField;
				linechart.horizontalAxis=hDate;
				axRend4Horizontal=new AxisRenderer();
				axRend4Horizontal.placement="bottom";
				axRend4Horizontal.axis=hDate;
				var arrRend4Horizontal:Array=new Array();
				arrRend4Horizontal.push(axRend4Horizontal);
				linechart.horizontalAxisRenderers=arrRend4Horizontal;
				//-------------
				
				LineGraphics = new Array();
				
				//总曲线
				lsTemp = new LineSeries();
				lsTemp.horizontalAxis=hDate;
				lsTemp.yField="Sum";
				lsTemp.displayName="总量";
				vUsage=new LinearAxis();
				vUsage.title=_strUnit;
				lsTemp.verticalAxis=vUsage;
				lsTemp.setStyle("form","curve");
				lsTemp.visible=true;
				arrLineSeries.push(lsTemp);
				
				for(var i:int=0;i<_arrMeterName.length;i++){
					linegrapTemp = Creategraphic(_arrMeterName[i],i);
					LineGraphics.push(linegrapTemp);
				}
				var startX:Number =0;
				var startY:Number=0;
				var linegrapwidth:Number = 250;
				var linegrapheight:Number = 200;
				var lastlinegrap:LineGraphic = null;
				
				
				for each(var linegrap:LineGraphic in LineGraphics)
				{
					this.addElement(linegrap);
					linegrap.x=startX;
					linegrap.y=startY;
					linegrap.width=linegrapwidth;
					linegrap.height=linegrapheight;
					startY = startY+linegrapheight+50;
					if(lastlinegrap!=null)
					{
						ConnectLineGrap(lastlinegrap,linegrap);
					}
					lastlinegrap = linegrap;
					xOffset+=linegrapheight+50;
				}
				
				
				//-------
				//图表
				//纵坐标
				axRend4Vertical=new AxisRenderer();
				axRend4Vertical.placement="left";
				axRend4Vertical.setStyle("fontSize",13);
				axRend4Vertical.axis=vUsage;
				var arrRend4Vertical:Array=new Array();
				arrRend4Vertical.push(axRend4Vertical);
				linechart.verticalAxisRenderers=arrRend4Vertical;
				linechart.series=arrLineSeries;
				linechart.width=1100;
				linechart.showDataTips=true;
				
				this.addElement(linechart);
				//-------
			}
			
			//控制曲线的显示与否
			public function showLineChartOrHide(event:MouseEvent):void{
				LineSeries(dictLineGraphics[event.target]).visible=LineSeries(dictLineGraphics[event.target]).visible==true?false:true;
				Meter(event.target)._alphaNum=Meter(event.target)._alphaNum==0.2?0:0.2;
				Meter(event.target).invalidateDisplayList();
			}
			private var ro:Rotate;
			override protected function commitProperties():void{
				super.commitProperties();
				this.rotation=90;
				linechart.rotation=-90;
			}
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void{
				super.updateDisplayList(unscaledWidth,unscaledHeight);
				this.x=xOffset+300; 
				linechart.x=250; 
				linechart.y=xOffset+300; 
				linechart.height=280;
				
			}
			
		]]>
	</fx:Script>
</s:Group>
