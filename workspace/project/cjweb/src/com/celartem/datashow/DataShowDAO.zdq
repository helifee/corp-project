package com.celartem.datashow;

import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.CallableStatementCallback;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.celartem.common.SystemConstant;
import com.celartem.datashow.bean.BuildingDetailInfo;
import com.celartem.datashow.bean.BuildingInfo;
import com.celartem.datashow.bean.Device;
import com.celartem.datashow.bean.MeterDetailInfo;

/**
 * 数据展示DAO
 * 
 * @author zhangdaoqiang
 *
 */
@Repository
public class DataShowDAO {
	
	@Resource
	private JdbcTemplate jdbcTemplate;	//jdbc操作
	
	/**
	 * 用于flash展示,查询建筑物名称和类型
	 *  
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public List<BuildingInfo> getBuildingInfo() {
		
		String procedure = "call sp_getbuilding(?)";
		
		List<BuildingInfo> buildingList = (List<BuildingInfo>) jdbcTemplate.execute(procedure,
				new CallableStatementCallback(){

					public Object doInCallableStatement(CallableStatement cs)
							throws SQLException, DataAccessException {
						
						cs.registerOutParameter(1,
								oracle.jdbc.driver.OracleTypes.CURSOR);
						cs.execute();
						ResultSet rs = (ResultSet) cs.getObject(1);
						List<BuildingInfo> result = null;
						
						if (rs != null) {
							result = new ArrayList<BuildingInfo>();
							while (rs.next()) {
								
								//取得查询值
								BuildingInfo info = new BuildingInfo();
								info.setId(rs.getInt("id"));				//建筑物ID
								info.setName(rs.getString("name"));			//建筑物名称
								info.setType(rs.getInt("type"));			//用能类型
								info.setMap_x(rs.getDouble("map_x"));		//横坐标位置
								info.setMap_y(rs.getDouble("map_y"));		//纵坐标位置
								
								result.add(info);
							}
						}
						rs.close();
						return result;
					}
				});
		
		return buildingList;
	}
	
	/**
	 * 用于flash展示,查询分布在建筑不之外的表计的名称和类型c
	 * 
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public List<Device> getMeterInfo() {
		
		String procedure = "call sp_getmeter(?)";
		
		List<Device> meterList = (List<Device>) jdbcTemplate.execute(procedure,
				new CallableStatementCallback(){

					public Object doInCallableStatement(CallableStatement cs)
							throws SQLException, DataAccessException {
						
						cs.registerOutParameter(1,
								oracle.jdbc.driver.OracleTypes.CURSOR);
						cs.execute();
						ResultSet rs = (ResultSet) cs.getObject(1);
						List<Device> result = null;
						
						if (rs != null) {
							result = new ArrayList<Device>();
							while (rs.next()) {
								
								//取得查询值
								Device info = new Device();
								info.setId(rs.getInt("id"));				//表计ID
								info.setName(rs.getString("name"));			//表计名称
								info.setType(rs.getInt("type"));			//表计类型
								info.setMap_x(rs.getDouble("map_x"));		//横坐标位置
								info.setMap_y(rs.getDouble("map_y"));		//纵坐标位置
								
								result.add(info);
							}
						}
						rs.close();
						return result;
					}
				});
		
		return meterList;
	}
	
	/**
	 * 查询flash中建筑物详细信息
	 * 
	 * @param bid
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public List<BuildingDetailInfo> getBuildingDetail(final String date, final int bid) {
		
		String procedure = "call sp_getbuildingdetail(?,?,?)";
		
		List<BuildingDetailInfo> detailList = (List<BuildingDetailInfo>) jdbcTemplate.execute(procedure, 
				new CallableStatementCallback() {

					public Object doInCallableStatement(CallableStatement cs)
							throws SQLException, DataAccessException {
						
						//set parameter
						cs.setInt(1, bid);		//建筑物ID
						cs.setString(2, date);	//查询日期
						
						cs.registerOutParameter(3,
								oracle.jdbc.driver.OracleTypes.CURSOR);
						cs.execute();
						ResultSet rs = (ResultSet) cs.getObject(3);
						List<BuildingDetailInfo> result = null;
						
						if (rs != null) {
							result = new ArrayList();
							while(rs.next()) {
								
								BuildingDetailInfo info = new BuildingDetailInfo();
								info.setDataType(rs.getInt("datetype"));			//数据类型
								info.setElectric(rs.getDouble("eleusage"));			//用电量
//								info.setHeat(rs.getDouble(""));						//用热量 TODO(暂时未定)
//								info.setCool(rs.getDouble(""));						//用冷量 TODO(暂时未定)
								info.setHotWater(rs.getDouble("waterhotusage"));	//热水量
								info.setColdWater(rs.getDouble("watercoldusage"));	//冷水量
								
								result.add(info);
							}
						}
						rs.close();
						return result;
					}
				});
		
		return detailList;
	}
	
	/**
	 * 查询flash中表计详细信息
	 * 
	 * @param meterType : 表计类型(电表, 热水表, 冷水表, 热量表)
	 * @param mid ： 表计ID
	 * @return ： 表计详细信息
	 */
	public MeterDetailInfo getMeterDetail(final String date, final String meterType, final int mid) {
		
		String procedure = "";
		
		if(String.valueOf(SystemConstant.MeterType.ELEMETER.ordinal() + 1).equals(meterType)) {
			procedure = "call sp_getelemeterdetail(?,?,?)";	//电表
			
		} else if(String.valueOf(SystemConstant.MeterType.HEATMETER.ordinal() + 1).equals(meterType)) {
			procedure = "call sp_getwhmeterdetail(?,?,?)";	//热水表
			
		} else if(String.valueOf(SystemConstant.MeterType.COLDMETER.ordinal() + 1).equals(meterType)) {
			procedure = "call sp_getwcmeterdetail(?,?,?)";	//冷水表
			
		} else if(String.valueOf(SystemConstant.MeterType.HOTMETER.ordinal() + 1).equals(meterType)) {
			procedure = "call sp_gethmeterdetail(?,?,?)";	//热量表
		}
		
		MeterDetailInfo detailInfo = (MeterDetailInfo) jdbcTemplate.execute(procedure, 
				new CallableStatementCallback() {

					public Object doInCallableStatement(CallableStatement cs)
							throws SQLException, DataAccessException {
						
						//set parameter
						cs.setInt(1, mid);		//表计ID
						cs.setString(2, date);	//查询日期
						
						
						cs.registerOutParameter(3,
								oracle.jdbc.driver.OracleTypes.CURSOR);
						cs.execute();
						ResultSet rs = (ResultSet) cs.getObject(3);
						MeterDetailInfo result = null;
						
						if (rs != null) {
							while(rs.next()) {
								
								result = new MeterDetailInfo();
								result.setTodayAmount(rs.getDouble("usage1"));		//当日量
								result.setYesterdayAmount(rs.getDouble("usage2"));	//昨日量
								result.setMaxAmount(rs.getDouble("MAX"));			//历史最大值
								result.setMinAmount(rs.getDouble("MIN"));			//历史最小值
								result.setAvgAmount(rs.getDouble("AVG"));			//历史平均值
							}
							
						}
						rs.close();
						return result;
					}
				});
		
		return detailInfo;
	}

	/**
	 * @param jdbcTemplate the jdbcTemplate to set
	 */
	public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}
}
