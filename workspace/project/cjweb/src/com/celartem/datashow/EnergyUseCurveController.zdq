package com.celartem.datashow;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.celartem.common.SystemConstant;
import com.celartem.common.Utils;
import com.celartem.datashow.bean.EnergyCurveInfo;
import com.celartem.datashow.bean.PieChartInfo;

/**
 * Flex B1调用类
 * 
 * @author zhangdaoqiang
 *
 */
public class EnergyUseCurveController {
	
	private EnergyUseCurveService energyUseCurveService;

	/**
	 * 取得用能曲线点的数据
	 * 
	 * @param did : 部门ID
	 * @param sdate ： 开始日期
	 * @param edate ： 结束日期
	 * @param precision ： 统计维度
	 * @return
	 * @throws ParseException 
	 */
	public List<Map<String, Object>> getLinechartData(String did, 
			String sdate, String edate, String precision) throws ParseException {
		
		//Flex端需求的数据结构
		List<Map<String, Object>> retList = new ArrayList<Map<String, Object>>();
		
		//service传来的数据结构
		Map<String, List<EnergyCurveInfo>> svcRet = this.energyUseCurveService.getLinechartData(did, sdate, edate, precision);
		
		Date start = Utils.convert(sdate);
		Date end = Utils.convert(edate);
		Calendar s = Calendar.getInstance();
		Calendar e = Calendar.getInstance();
		s.setTime(start);
		e.setTime(end);
		if(SystemConstant.StatPrecision.DAY.getValue().equals(precision)) {
			for(Calendar c = s; !c.after(e); c.add(Calendar.DAY_OF_MONTH, 1)) {
				String key = Utils.convert(c.getTime());
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("date", key);													//日期
				map.put("rate", Utils.getValue(svcRet.get("rate"), key));				//入住率
				map.put("eleusage", Utils.getValue(svcRet.get("ele"), key));			//用电量
//				map.put("heatusage", Utils.getValue(svcRet.get("heat"), key));			//用热量 TODO
//				map.put("coolusage", Utils.getValue(svcRet.get("cool"), key));			//用冷量 TODO
				map.put("hotwaterusage", Utils.getValue(svcRet.get("hotwater"), key));	//热水量
				map.put("coolwaterusage", Utils.getValue(svcRet.get("coldwater"), key));//冷水量
				
				retList.add(map);
			}
		} else if(SystemConstant.StatPrecision.WEEK.getValue().equals(precision)) {
			// TODO
		} else if(SystemConstant.StatPrecision.MONTH.getValue().equals(precision)) {
			// TODO
		} else if(SystemConstant.StatPrecision.YEAR.getValue().equals(precision)) {
			// TODO
		} 
		
		return retList;
	}
	
	/**
	 * 取得占比分析数据
	 * 
	 * @param sdate : 开始日期
	 * @param edate ： 结束日期
	 * @param did ： 部门ID
	 * @return
	 */
	public PieChartInfo getPiechartData(String did,
			String sdate, String edate) {
		
		PieChartInfo pieInfo = new PieChartInfo();
		
		//service传来的数据结构
		Map<String, List<EnergyCurveInfo>> svcRet = this.energyUseCurveService.getPiechartData(did, sdate, edate);
		
		//设置返回值
		pieInfo.setEleList(convert(svcRet.get("ele")));
//		pieInfo.setHeatList(convert(svcRet.get("heat")));
//		pieInfo.setCoolList(convert(svcRet.get("cool")));
		pieInfo.setColdWaterList(convert(svcRet.get("coldwater")));
		pieInfo.setHotWaterList(convert(svcRet.get("hotwater")));
		
		return pieInfo;
	}
	
	/**
	 * List<EnergyCurveInfo> --> List<Map<String, Object>>
	 * 
	 * @param srcList
	 * @return
	 */
	private List<Map<String, Object>> convert(List<EnergyCurveInfo> srcList) {
		
		List<Map<String, Object>> retList = null;
		
		if(null != srcList) {
			retList = new ArrayList<Map<String, Object>>();
			Iterator<EnergyCurveInfo> iter = srcList.iterator();
			while(iter.hasNext()) {
				EnergyCurveInfo info = iter.next();
				Map<String, Object> map = new HashMap<String, Object>();
				
				if(info.getValue()>0){
					map.put("name", info.getName());
					map.put("value", String.valueOf(info.getValue()));
					retList.add(map);
				}
			}
		}
		
		return retList;
	}

	/**
	 * @param energyUseCurveService the energyUseCurveService to set
	 */
	public void setEnergyUseCurveService(EnergyUseCurveService energyUseCurveService) {
		this.energyUseCurveService = energyUseCurveService;
	}
}
