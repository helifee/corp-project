package com.celartem.datashow;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.celartem.common.CommonDAO;
import com.celartem.common.Department;
import com.celartem.common.SystemConstant;
import com.celartem.common.Utils;
import com.celartem.datashow.bean.BuildingDetailInfo;
import com.celartem.datashow.bean.BuildingInfo;
import com.celartem.datashow.bean.Device;
import com.celartem.datashow.bean.MeterDetailInfo;

/**
 * 数据展示Service
 * 
 * @author zhangdaoqiang
 *
 */
@Service
public class DataShowService {
	
	@Autowired
	private DataShowDAO dataShowDAO;
	
	@Autowired
	private CommonDAO commonDAO; 
	
	/**
	 * 取得各部门信息
	 * 
	 * @return
	 */
	public List<Department> getDepartmentInfo() {
		return this.commonDAO.getDepartment();
	}
	
	/**
	 * 取得建筑物与表计的基本信息
	 * 
	 * @return
	 */
	public List<Map<String, Object>> getBaseInfo() {
		
		List<Map<String, Object>> infoList = new ArrayList<Map<String, Object>>();
		
		//取得建筑物信息
		List<BuildingInfo> buildingList = this.dataShowDAO.getBuildingInfo();
		
		Iterator<BuildingInfo> iter = buildingList.iterator();
		while(iter.hasNext()) {
			BuildingInfo info = iter.next();
			Map<String, Object> building = new HashMap<String, Object>();
			
			building.put("elementType", SystemConstant.DisplayType.BUILDING);		//建筑类别(非DB字段)
			building.put("id", info.getId());				//建筑物ID
			building.put("name", info.getName());			//建筑物名称
			building.put("type", convert(info.getType()));	//用能类型
			building.put("x", info.getMap_x());				//横坐标位置
			building.put("y", info.getMap_y());				//纵坐标位置
			building.put("color", "0xFFFFFF");				//建筑物颜色 TODO
			
			infoList.add(building);
		}
		
		//取得表计信息
		List<Device> meterList = this.dataShowDAO.getMeterInfo();
		Iterator<Device> iter2 = meterList.iterator();
		while(iter2.hasNext()) {
			Device info = iter2.next();
			Map<String, Object> meter = new HashMap<String, Object>();
			
			meter.put("elementType", SystemConstant.DisplayType.METER);			//表计
			meter.put("id", info.getId());					//表计ID
			meter.put("name", info.getName());				//表计名称
			meter.put("type", convert2(info.getType()));	//表计类型
			meter.put("x", info.getMap_x());				//横坐标位置
			meter.put("y", info.getMap_y());				//纵坐标位置
			meter.put("color", "0xFFFFFF");					//表计颜色 TODO
			
			infoList.add(meter);
		}
		
		return infoList;
	}
	
	/**
	 * 取得建筑物详细信息
	 * 
	 * @param elementType ：建筑物区分
	 * @param id ： 建筑物ID
	 * @return
	 */
	public List<Map<String, Object>> getBuildingDetail(int id) {
		
		List<Map<String, Object>> detailList = new ArrayList<Map<String, Object>>();
		
		//取得详细信息
		List<BuildingDetailInfo> list = this.dataShowDAO.getBuildingDetail(Utils.getDate(), id);
		
		Iterator<BuildingDetailInfo> iter = list.iterator();
		while(iter.hasNext()) {
			
			BuildingDetailInfo info = iter.next();
			Map<String, Object> building = new HashMap<String, Object>();
			
			building.put("descript", getDescription(info.getDataType()));	//描述
			building.put("electric", info.getElectric());					//用电量
			building.put("heat", info.getHeat());							//用热量
			building.put("cool", info.getCool());							//用冷量
			building.put("hotwater", info.getHotWater());					//热水量
			building.put("coldwater", info.getColdWater());					//冷水量
			
			detailList.add(building);
		}
		
		return detailList;
	}
	
	/**
	 * 取得表计详细信息
	 * 
	 * @param elementType ：表计区分
	 * @param id ： 表计ID
	 * @param type ：表计类型
	 * @return
	 */
	public List<Map<String, Object>> getMeterDetail(String type, int id) {
		
		List<Map<String, Object>> detailList = new ArrayList<Map<String, Object>>();
		
		MeterDetailInfo info = this.dataShowDAO.getMeterDetail(Utils.getDate(), type, id);
		if(null == info) {
			return null;
		}
		
		for(int i=1; i<=5; i++) {
			
			Map<String, Object> meter = new HashMap<String, Object>();
			meter.put("descript", getDescription(i));
			
			double value = 0;
			switch(i) {
				case 1:	value = info.getTodayAmount();		//当日量
						break;
				case 2: value = info.getYesterdayAmount();	//昨日量
						break;
				case 3: value = info.getMaxAmount();		//历史最大量
						break;
				case 4: value = info.getMinAmount();		//历史最小量
						break;
				case 5: value = info.getAvgAmount();		//历史平均量
						break;
			}
			
			meter.put("value", value);
			
			detailList.add(meter);
		}
		
		return detailList;
		
	}
	
	/**
	 * 建筑物类型格式转化
	 * 1-->1供电
	 * 2-->2供水
	 * 3-->3供热
	 * 4-->4耗能
	 * 
	 * @param type ： 输入类型
	 * @return
	 */
	private String convert(int type) {
		
		String ret;
		
		switch(type) {
			case 1:	ret = 1 + SystemConstant.DOT 
							+ SystemConstant.BuildingType.ELECTRICITY.toString();	//供电
					break;
			case 2: ret = 2 + SystemConstant.DOT
							+ SystemConstant.BuildingType.WATER.toString();			//供水
					break;
			case 3: ret = 3 + SystemConstant.DOT 
							+ SystemConstant.BuildingType.HEAT.toString();			//供热
					break;
			case 4: ret = 4 + SystemConstant.DOT 
							+ SystemConstant.BuildingType.ENERGY.toString();		//耗能
					break;
			default: ret = "";
		}
		return ret;
	}
	
	/**
	 * 表计类型格式转化
	 * 1-->1电表 
	 * 2-->2热表
	 * 3-->3冷水表
	 * 4-->4热水表
	 * 
	 * @param type ： 输入类型
	 * @return
	 */
	private String convert2(int type) {
		
		String ret;
		
		switch(type) {
			case 1:	ret = 1 + SystemConstant.DOT 
							+ SystemConstant.MeterType.ELEMETER.toString();		//电表
					break;
			case 2: ret = 2 + SystemConstant.DOT
							+ SystemConstant.MeterType.HEATMETER.toString();	//热表
					break;
			case 3: ret = 3 + SystemConstant.DOT 
							+ SystemConstant.MeterType.COLDMETER.toString();	//冷水表
					break;
			case 4: ret = 4 + SystemConstant.DOT 
							+ SystemConstant.MeterType.HOTMETER.toString();		//热水表
					break;
			default: ret = "";
		}
		return ret;
	}
	
	/**
	 * 根据类型取得详细信息的描述
	 * 
	 * @param type ：数据类型
	 * @return
	 */
	private String getDescription(int type) {
		String ret;
		
		switch(type) {
			case 1:	ret = SystemConstant.DetailDecription.AMOUNT_TODAY.toString();		//当日量
					break;
			case 2: ret = SystemConstant.DetailDecription.AMOUNT_YESTERDAY.toString();	//昨日量
					break;
			case 3: ret = SystemConstant.DetailDecription.AMOUNT_MAX.toString();		//历史最大量
					break;
			case 4: ret = SystemConstant.DetailDecription.AMOUNT_MIN.toString();		//历史最小量
					break;
			case 5: ret = SystemConstant.DetailDecription.AMOUNT_AVG.toString();		//历史平均量
					break;
			default: ret = "";
		}
		
		return ret;
	}

	/**
	 * @param dataShowDAO the dataShowDAO to set
	 */
	public void setDataShowDAO(DataShowDAO dataShowDAO) {
		this.dataShowDAO = dataShowDAO;
	}

	/**
	 * @param commonDAO the commonDAO to set
	 */
	public void setCommonDAO(CommonDAO commonDAO) {
		this.commonDAO = commonDAO;
	}
}
