package com.celartem.datashow;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Repository;

import com.celartem.datashow.bean.PoBranchInfo;
import com.celartem.datashow.bean.PoDot;
import com.celartem.datashow.bean.PoPowerRoomRate;

/**
 * 供能建筑Dao
 * 
 * @author zhangdaoqiang
 *
 */
@Repository
public class EngSuplyDAO {

	/**
	 * 根据建筑id获得各个支路用电信息，包括
	 * 支路id，支路名称，每条支路上表计id，表计名称
	 * 
	 * @param conn
	 * @param bid
	 * @return
	 * @throws SQLException 
	 */
	public List<PoBranchInfo> getBranchInfoEle(Connection conn, int bid) throws SQLException {
		
		String call = "call sp_getelefeederinfo(?,?)";
		
		CallableStatement cs = conn.prepareCall(call);
		cs.setInt(1, bid);
		cs.registerOutParameter(2, oracle.jdbc.driver.OracleTypes.CURSOR);
		
		cs.execute();
		ResultSet rs = (ResultSet) cs.getObject(2);
		
		List<PoBranchInfo> branchList = null;
		
		if(rs != null) {
			branchList = new ArrayList<PoBranchInfo>();
			
			while(rs.next()) {
				PoBranchInfo branch = new PoBranchInfo();
				branch.setFid(rs.getInt("fid"));
				branch.setFname(rs.getString("fname"));
				branch.setFromId(rs.getInt("from_fid"));
				branch.setMid(rs.getInt("mid"));
				branch.setMname(rs.getString("mname"));
				
				branchList.add(branch);
			}
			
			rs.close();
		}
		
		return branchList;
	}
	
//	private List<Line> getResultFromRS(ResultSet rs) throws SQLException {
//		
//		List<Line> infoList = null;
//		
//		if(rs != null) {
//			
//			infoList = new ArrayList<Line>();
//			
//			while(rs.next()) {
//				
//				//判断此支路是否已存在
//				Line thisLine = new Line(rs.getInt("fid"));
//				int index = infoList.indexOf(thisLine);
//				
//				//不存在
//				if(index == -1) {
//					thisLine.setBchName(rs.getString("fname"));	//支路名称
//					
//					//
//					int fromId = rs.getInt("from_fid");
//					thisLine.setPreId(rs.getInt("from_fid"));	//父支路ID
//					if(fromId == 0) {
//						thisLine.setDirection(true);	//进线
//						
//					} else {
//						thisLine.setDirection(false);	//出线
//					}
//					
//					Device meter = new Device();
//					meter.setId(rs.getInt("mid"));
//					meter.setName(rs.getString("mname"));
//					
//					List<Device> deviceList = new ArrayList<Device>();
//					deviceList.add(meter);
//					thisLine.setDevices(deviceList);
//					
//					infoList.add(thisLine);
//					
//				} else {
//					
//					thisLine = infoList.get(index);
//					
//					Device meter = new Device();
//					meter.setId(rs.getInt("mid"));
//					meter.setName(rs.getString("mname"));
//					
//					List<Device> deviceList = thisLine.getDevices();
//					if(deviceList == null) {
//						deviceList = new ArrayList<Device>();
//						deviceList.add(meter);
//						infoList.add(thisLine);
//					} else {
//						deviceList.add(meter);
//					}
//				}
//			}
//			rs.close();
//		}
//		
//		return infoList;
//	}
	
	/**
	 * 根据建筑id获得各个支路用水信息，包括
	 * 支路id，支路名称，每条支路上表计id，表计名称
	 * 
	 * @param conn
	 * @param bid
	 * @param type
	 * @return
	 * @throws SQLException 
	 */
	public List<PoBranchInfo> getBranchInfoWater(Connection conn, int bid, String type) throws SQLException {
		
		String call = "call sp_getwaterfeederinfo(?,?,?)";

		CallableStatement cs = conn.prepareCall(call);
		cs.setInt(1, bid);
		cs.setString(2, type);
		cs.registerOutParameter(3, oracle.jdbc.driver.OracleTypes.CURSOR);
		
		cs.execute();
		ResultSet rs = (ResultSet) cs.getObject(3);
		List<PoBranchInfo> branchList = null;
		
		if(rs != null) {
			branchList = new ArrayList<PoBranchInfo>();
			
			while(rs.next()) {
				PoBranchInfo branch = new PoBranchInfo();
				branch.setFid(rs.getInt("fid"));
				branch.setFname(rs.getString("fname"));
				branch.setFromId(rs.getInt("from_fid"));
				branch.setMid(rs.getInt("mid"));
				branch.setMname(rs.getString("mname"));
				
				branchList.add(branch);
			}
			
			rs.close();
		}
		
		return branchList;
	}
	
	/**
	 * 取得电表用量
	 * 
	 * @param conn
	 * @param type
	 * @param mid
	 * @param sdate
	 * @param edate
	 * @param precision
	 * @return
	 * @throws SQLException 
	 */
	public List<PoDot> getMeterAmountEle(Connection conn, 
			int mid, String sdate, String edate, String precision) throws SQLException {
		
		String call = "call sp_getelebymid(?,?,?,?,?)";

		CallableStatement cs = conn.prepareCall(call);
		cs.setInt(1, mid);
		cs.setString(2, sdate);
		cs.setString(3, edate);
		cs.setString(4, precision);
		cs.registerOutParameter(5, oracle.jdbc.driver.OracleTypes.CURSOR);
		
		cs.execute();
		ResultSet rs = (ResultSet) cs.getObject(5);
		
		List<PoDot> dotList = null;
		if(rs != null) {
			dotList = new ArrayList<PoDot>();
			while(rs.next()) {
				PoDot dot = new PoDot();
				dot.setX(rs.getString("day"));		//日期
				dot.setY(rs.getDouble("usage"));	//用量
				dotList.add(dot);
			}
			rs.close();
		}
		
		return dotList;
	}
	
	/**
	 * 取得电表用量
	 * 
	 * @param conn
	 * @param type
	 * @param mid
	 * @param sdate
	 * @param edate
	 * @param precision
	 * @return
	 * @throws SQLException 
	 */
	public List<PoDot> getMeterAmountWater(Connection conn, 
			int mid, String sdate, String edate, String precision, String type) throws SQLException {
		
		String call = "call sp_getwaterbymid(?,?,?,?,?,?)";

		CallableStatement cs = conn.prepareCall(call);
		cs.setInt(1, mid);
		cs.setString(2, sdate);
		cs.setString(3, edate);
		cs.setString(4, precision);
		cs.setString(5, type);
		cs.registerOutParameter(6, oracle.jdbc.driver.OracleTypes.CURSOR);
		
		cs.execute();
		ResultSet rs = (ResultSet) cs.getObject(6);
		
		List<PoDot> dotList = null;
		if(rs != null) {
			dotList = new ArrayList<PoDot>();
			while(rs.next()) {
				PoDot dot = new PoDot();
				dot.setX(rs.getString("day"));		//日期
				dot.setY(rs.getDouble("usage"));	//用量
				dotList.add(dot);
			}
		}
		
		return dotList;
	}
	
	/**
	 * 取得配电室所有相关支路数据（进出支路）
	 * 
	 * @param conn
	 * @param bid
	 * @param sdate
	 * @param edate
	 * @return
	 * @throws SQLException
	 */
	public List<PoPowerRoomRate> getPowerRoomRate(Connection conn, 
			int bid, String sdate, String edate) throws SQLException {
		
		String call = "call sp_getpeidianfeeder(?,?,?,?)";

		CallableStatement cs = conn.prepareCall(call);
		cs.setInt(1, bid);
		cs.setString(2, sdate);
		cs.setString(3, edate);
		cs.registerOutParameter(4, oracle.jdbc.driver.OracleTypes.CURSOR);
		
		cs.execute();
		ResultSet rs = (ResultSet) cs.getObject(4);
		
		List<PoPowerRoomRate> List = null;
		if(rs != null) {
			List = new ArrayList<PoPowerRoomRate>();
			while(rs.next()) {
				PoPowerRoomRate data = new PoPowerRoomRate();
				data.setFid(rs.getInt("fid"));
				data.setFname(rs.getString("fname"));
				data.setFromFid(rs.getInt("from_fid"));
				data.setServBuildName(rs.getString("bname"));
				data.setAmount(rs.getDouble("usage"));
				List.add(data);
			}
		}
		
		return List;
	}
}
