package com.sitech.oa.pars;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

public class BCPConn extends OAConnection {
	private static BCPConn instance;
	private PreparedStatement psSource,psBusi,psMapping,psSql,psTable,psSqlMapping,psFileSeq,psSqlSeq,psSqlTableSeq,psModuleSeq,
								psFindTableId,psGetModelBean;;
	
	public static BCPConn getIntance(){
		if(instance==null){
			instance=new BCPConn();
		}
		return instance;
	}
	public BCPConn(){
		super();
		try{
			psSource=conn.prepareStatement("insert into dSourceFIleInfo(source_file_id,file_name,file_path,update_time)" +
			"values (dSourceFileSeq.nextval,?,?,?)");
			psBusi=conn.prepareStatement("insert into dBusiModuleInfo(module_id, module_type, module_name, source_file_id, file_line_num,module_comment)" +
			"values (dBusiModuleSeq.nextval,?,?,?,?,' ')");
			psMapping=conn.prepareStatement("insert into dFunMappingInfo(call_fun_id,fun_id)values(?,?)");
			psSql=conn.prepareStatement("insert into dSqlInfo(atom_func_id,module_id,sql_type,sql_statement)values(dSqlSeq.nextval,?,?,?)");
			psTable=conn.prepareStatement("insert into dSqlTableInfo(table_id,table_name)values(dSqlTableSeq.nextval,?)");
			psSqlMapping=conn.prepareStatement("insert into dTableMapping(table_id,atom_func_id)values(?,?)");
			
			psGetModelBean=conn.prepareStatement("select a.module_id,a.module_type,a.module_name,b.FILE_PATH||file_name from dBusiModuleInfo a, dSourceFIleInfo b where a.source_file_id=b.source_file_id");
			
			psFileSeq=conn.prepareStatement("select dSourceFileSeq.currval from dual");
			psSqlSeq=conn.prepareStatement("select dSqlSeq.currval from dual");
			psSqlTableSeq=conn.prepareStatement("select dSqlTableSeq.currval from dual");
			psModuleSeq=conn.prepareStatement("select dBusiModuleSeq.currval from dual");
			psFindTableId=conn.prepareStatement("select table_id from dSqlTableInfo where table_name=?");
			
		}catch(SQLException e){
			e.printStackTrace();
		}
	}
	public long insertFile(String path,String name,long time){
		long result=-1;
		try{
			psSource.setString(1, name);
			psSource.setString(2, path);
			psSource.setLong(3, time);
			psSource.executeUpdate();
			ResultSet s=psFileSeq.executeQuery();
			if(s.next()){
				result=s.getLong(1);
			}
			s.close();
		}catch(SQLException e){e.printStackTrace();}
		return result;
	}
	public long insertBusi(String type,String name,long id,int lineNum){
		long result=-1;
		try{
			psBusi.setString(1, type);
			psBusi.setString(2, name);
			psBusi.setLong(3, id);
			psBusi.setInt(4,lineNum);
			psBusi.executeUpdate();
			ResultSet s=psModuleSeq.executeQuery();
			if(s.next()){
				result=s.getLong(1);
			}
			s.close();
		}catch(SQLException e){
			e.printStackTrace();
		}
		return result;
	}
	public long insertSql(long moduleId,String type,String statement ){
		long result=-1;
		try{
			psSql.setLong(1, moduleId);
			psSql.setString(2, type);
			psSql.setString(3, statement);
			psSql.executeUpdate();
			ResultSet s=psSqlSeq.executeQuery();
			if(s.next()){
				result=s.getLong(1);
			}
			s.close();
		}catch(SQLException e){
			e.printStackTrace();
		}
		return result;
	}
	public long insertTable(String tableName){
		long result=-1;
		try{
			psTable.setString(1, tableName);
			psTable.executeUpdate();
			ResultSet s=psSqlTableSeq.executeQuery();
			if(s.next()){
				result=s.getLong(1);
			}
			s.close();
		}catch(SQLException e){
			e.printStackTrace();
		}
		return result;
	}
	public long insertTableMapping(long sqlId,long tableId){
		long result=-1;
		try{
			psSqlMapping.setLong(1, tableId);
			psSqlMapping.setLong(2, sqlId);
			psSqlMapping.executeUpdate();
			ResultSet s=psSqlTableSeq.executeQuery();
			if(s.next()){
				result=s.getLong(1);
			}
			s.close();
			
		}catch(SQLException e){
			e.printStackTrace();
		}
		return result;
	}
	public long findTableName(String tableName){
		long result=-1;
		try{
			psFindTableId.setString(1, tableName);
			ResultSet s=psFindTableId.executeQuery();
			if(s.next()){
				result=s.getLong(1);
			}
			s.close();
		}catch(SQLException e){
			e.printStackTrace();
		}
		return result;
	}
	public void insertModuleMapping(long funId,long callFunId){
		try{
			psMapping.setLong(1, callFunId);
			psMapping.setLong(2, funId);
			psMapping.executeUpdate();
		}catch(SQLException e){
			e.printStackTrace();
		}
	}
	
	public Map getModuleMap(){
		Map map=new HashMap();
		try{
			ResultSet s=psGetModelBean.executeQuery();
			while(s.next()){
				ModuleBean bean=new ModuleBean();
				bean.setModuleId(s.getLong(1));
				bean.setType(s.getString(2));
				bean.setName(s.getString(3));
				bean.setPathName(s.getString(4));
				//map.put(bean.getName()+"_"+bean.getPathName(), bean);
				map.put(bean.getName(), bean);
			}
			s.close();
		}catch(SQLException e){
			e.printStackTrace();
		}
		return map;
	}
	
	public void start(){
		//try{this.conn.setAutoCommit(false);}catch(SQLException e){}
	}
	public void commit(){
		try{this.conn.commit();}catch(SQLException e){}
	}
	public void close(){
		try {psSource.close();} catch (SQLException e) {}
		try {psBusi.close();} catch (SQLException e) {}
		try {psMapping.close();} catch (SQLException e) {}
		try {psSql.close();}catch(SQLException e){}
		try {psSqlSeq.close();}catch(SQLException e){}
		try {psTable.close();}catch(SQLException e){}
		try {psSqlTableSeq.close();}catch(SQLException e){}
		try {psSqlMapping.close();}catch(SQLException e){}
		try {psModuleSeq.close();}catch(SQLException e){}
		try {psFindTableId.close();}catch(SQLException e){}
		try {psGetModelBean.close();}catch(SQLException e){}
		super.close();

	}
}
