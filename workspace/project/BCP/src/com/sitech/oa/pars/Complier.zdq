package com.sitech.oa.pars;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import com.sitech.oa.pars.node.FunctionDec;
import com.sitech.oa.pars.node.ParseDown;

public class Complier {
	protected Scanner scaner;
	protected String fileName;
	protected String filePath;
	protected List parseResult;
	public String filterType;
	public Complier(){}
	public Complier(String path,String name,String filterType){
		this.fileName=name;
		this.filePath=path;
		this.filterType=filterType;
		String fileName=path+name;
		FileInputStream fis=null;

		StringBuffer buffer=new StringBuffer();
		try{
			fis=new FileInputStream(fileName);
			BufferedReader br=new BufferedReader(new InputStreamReader(fis));

			String line=null;
			while((line=br.readLine())!=null){
				buffer.append(line+'\r');
			}
			scaner=new Scanner(buffer.toString());
			readDefaultHeadFile(scaner);
			parseResult=new ParseDown(scaner,filterType,scaner,fileName).getFunDec();
			scaner=null;
			buffer=null;
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			try {fis.close();fis=null;
			} catch (IOException e){}
		}
	}
	//读写默认头文件
	protected void readDefaultHeadFile(Scanner mainScanner){
		String[] temps=((String)Config.defaultHeadFileMap.get(filterType+"DefaultHeadFileMap")).split(";");
		for(int i=0;i<temps.length;i+=1){
			PreReadHead head=new PreReadHead(temps[i],filterType,mainScanner);
			head.pathFile=temps[i];
			List list=head.innerRead();
			if(list!=null){
				scaner.upDateFunctionDec(list);
			}
			head=null;
			list=null;
		}
	}
	public void iteratorCall(int opt,String type){
		SYNTree v=new SYNTree();
		v.fileName=this.fileName;
		v.filePath=this.filePath;
		for(int i=0;i<parseResult.size();i+=1){
			FunctionDec f=(FunctionDec)parseResult.get(i);
			if(f.body!=null){
				v.visitFunction(f.function);
				v.visitBody(f.body);
			}
		}
		v.print(opt,type);
		parseResult.clear();
		parseResult=null;
		v=null;
	}
	public void getFunDec(){
		FunCallTree tree=new FunCallTree();
		for(int i=0;i<parseResult.size();i+=1){
			FunctionDec f=(FunctionDec)parseResult.get(i);
			tree.visitFunctionDec(f);
		}

		Set set=tree.getFunMap().keySet();
		Iterator it=set.iterator();
		while(it.hasNext()){
			String funName=(String)it.next();
			FUNC fun=(FUNC)tree.getFunMap().get(funName);
			System.out.println(fun.functionName+"   "+fun.callList);
		}
		
	}
	public static void main(String[] args){
		
		Complier c=new Complier("D:/temp/","test.cpp","busi");
		c.getFunDec();
	}
}
