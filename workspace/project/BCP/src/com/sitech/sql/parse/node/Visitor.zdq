package com.sitech.sql.parse.node;

import java.util.Iterator;




public class Visitor {
	public void visitNodeToken(NodeToken token){
		System.out.println(token.tokenString);
	}
	public void visitNodeList(NodeList n){
		for (Iterator it = n.elements(); it.hasNext();) {
			((Node) it.next()).accept(this);
		}
	}
	public void visitSql(Sql s){
		if(s.select!=null){
			s.select.accept(this);
		}else if(s.update!=null){
			s.update.accept(this);
		}else if(s.delete!=null){
			s.delete.accept(this);
		}else if(s.insert!=null){
			s.insert.accept(this);
		}
	}




	public void visitSinSelect(SinSelect s){
		s.expTable.accept(this);
	}
	

	
	public void visitSelect(Select s){
		s.selectList.accept(this);
	}
	public void visitColumn(Column c){
		
	}
	
	public void visitColumns(Columns c){
		
	}

	public void visitColumnExp(ColumnExp c){
		
	}
	public void visitScalarExp(ScalarExp s){
		
	}
	public void visitColumnRef(ColumnRef c){
		
	}
	public void visitFunctionCall(FunctionCall f){
		
	}
	public void visitVar(Var v){
		
	}
	public void visitParamList(ParamList p){
		
	}
	public void visitParam(Param p){
		
	}
	public void visitOpop(Opop op){
		
	}

	//-------------±í----------------
	public void visitExpTable(ExpTable t){
		t.tableColumns.accept(this);
	}
	public void visitTableColumns(TableColumns t){
		t.tableRefList.accept(this);
	}
	public void visitTableRef(TableRef t){
		t.tableExp.accept(this);
	}
	public void visitTableExp(TableExp t){
		if(t.tableExp!=null){
			t.tableExp.accept(this);
		}else if(t.select!=null){
			t.select.accept(this);
		}else if(t.tableid!=null){
			t.tableid.accept(this);
		}
	}
	public void visitTableid(TableID id){
		id.tableName.accept(this);
	}
	//-----Ìõ¼þ-----------
	public void visitWhereExp(WhereExp w){
		
	}
	public void visitWhereColumns(WhereColumns w){
		
	}
	public void visitBooleanExp(BooleanExp b){
		
	}
	public void visitRelation(Relation c){
		
	}
	
	public void visitBetween(Between b){
		
	}
	public void visitCheck(Check c){
		
	}
	//-------------insert-------------
	public void visitInsert(Insert i){
		i.tableNameToken.accept(this);
	}
	
	public void visitInsertColumns(InsertColumn i){
		
	}
	
	public void visitValues(Values i){
			
	}
	//--------------update-------------
	public void visitUpdate(Update u){
		u.tableNameToken.accept(this);
	}
	public void visitUpdateColumn(UpdateColumn u){
		
	}
	//---------delete-----------
	public void visitDelete(Delete d){
		d.tableNameToken.accept(this);
	}
	
	//--------case when-------
	public void visitCaseExp(CaseExp c){
		
	}
	public void visitWhenThenExp(WhenThenExp w){
		
	}
	public void visitElseExp(ElseExp e){
		
	}
	
	
}
