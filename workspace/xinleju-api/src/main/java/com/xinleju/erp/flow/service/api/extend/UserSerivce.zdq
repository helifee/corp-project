package com.xinleju.erp.flow.service.api.extend;

import java.util.List;
import java.util.Map;

import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.flow.flowutils.bean.PageBean;
import com.xinleju.erp.flow.service.api.extend.dto.DataAuthDTO;
import com.xinleju.erp.flow.service.api.extend.dto.FuncDTO;
import com.xinleju.erp.flow.service.api.extend.dto.OpDTO;
import com.xinleju.erp.flow.service.api.extend.dto.RoleDTO;
import com.xinleju.erp.flow.service.api.extend.dto.ScopeDTO;
import com.xinleju.erp.flow.service.api.extend.dto.UserDTO;

public interface UserSerivce {
	
	 /**
     * 获取用户列表
     * 
     * @param orgnId
     *            组织机构 ID
     * @param name
     *            用户姓名或者登录名
     * @param start
     *            从start开始
     * @param limit
     *            查多少条
     * @param includeAllSubOrgns
     *            是否包含所有子孙的
     * @param extParm
     *            扩展参数（暂时未使用）
     * @return
     */
	public FlowResult<PageBean<UserDTO>> getUserList(String orgnId,String name,Integer start, Integer limit,Boolean includeAllSubOrgns,Map<String, Object> extParm);
	
	/**
	 * 根据公司ID获取公司下用户
	 * @param companyId
	 * @return
	 */
	public FlowResult<List<UserDTO>> getUserListByCompanyId(String companyId);
	
	/**
	 * 根据部门ID获取部门下用户
	 * @param deptId
	 * @return
	 */
	public FlowResult<List<UserDTO>> getUserListByDeptId(String deptId);
	/**
	 * 根据部门ID获取部门下用户
	 * @param deptIds
	 * @return
	 */
	public FlowResult<List<UserDTO>> getUserListByDeptIds(String[] deptIds) ;
	
	/**
	 * 根据岗位ID获取用户
	 * @param postId
	 * @return
	 */
	public FlowResult<List<UserDTO>> getUserListByPostId(String postId);
	
	
	/**
	 * 根据岗位ID获取部门下岗位
	 * @param postId
	 * @return
	 */
	public FlowResult<List<UserDTO>> getUserListByPostIds(String[] postIds) ;
	
	/**
	 * 根据项目ID获取项目下用户
	 * @param projectId
	 * @return
	 */
	public FlowResult<List<UserDTO>> getUserListByProjectId(Long projectId);
	
	/**
	 * 根据分期ID获取分期下用户
	 * @param companyId
	 * @return
	 */
	public FlowResult<List<UserDTO>> getUserListByProjectBranchId(Long companyId);
	
	/**
	 * 根据标准角色ID获取标准角色下用户
	 * @param standardRoleId
	 * @return
	 */
	public FlowResult<List<UserDTO>> getUserListByStandardRoleId(Long standardRoleId);
	
	/**
	 * 根据标准角色ID获取标准角色下用户
	 * @param standardRoleId
	 * @return
	 */
	public FlowResult<List<UserDTO>> getUserListByStandardRoleIds(String[] standardRoleIds);
	
	/**
	 * 根据公司ID和标准角色ID获取用户
	 * @param companyId
	 * @param standardRoleId
	 * @return
	 */
	public FlowResult<List<UserDTO>> getUserListByCompanyIdAndStandardRoleId(String companyId,String standardRoleId);
	
	/**
	 * 根据部门ID和标准角色ID获取用户
	 * @param deptId
	 * @param standardRoleId
	 * @return
	 */
	public FlowResult<List<UserDTO>> getUserListByDeptIdAndStandardRoleId(String deptId,String standardRoleId);
	
	/**
	 * 根据项目ID和标准角色ID获取用户
	 * @param projectBranchId
	 * @param standardRoleId
	 * @return
	 */
	public FlowResult<List<UserDTO>> getUserListByProjectBranchIdAndStandardRoleId(String projectBranchId,String standardRoleId);
	
	/**
	 * 根据用户ID获取用户
	 * @param userId
	 * @return
	 */
	public FlowResult<UserDTO> getUserByUserId(String userId);
	
	/**
	 * 根据用户ID获取用户
	 * @param userIds
	 * @return
	 */
	public FlowResult<List<UserDTO>> getUserListByUserIds(String[] userIds);
	
	/**
	 * 根据用户登录名获取用户
	 * @param userLoginName
	 * @return
	 */
	public FlowResult<UserDTO> getUserByUserLoginName(String userLoginName);
	
	/**
	 * 根据用户登录名获取用户
	 * @param userLoginName
	 * @return
	 */
	public FlowResult<List<UserDTO>> getUserListByLoginNames(String[] userLoginNames);
	
	/**
	 * 根据登录ID获取标准角色
	 * @param userId
	 * @return
	 */
	public FlowResult<List<RoleDTO>> getStandardRolesByUserId(String userId);
	
	/**
	 * 根据标准角色Id获取标准角色
	 * @param standardRoleId
	 * @return
	 */
	
	public FlowResult<RoleDTO> getStandardRolesById(String standardRoleId);
	/**
	 * 获取所有标准角色
	 * @return
	 */
	public FlowResult<List<RoleDTO>> getAllStandardRoles();
	
	/**
	 * 获取标准角色根节点
	 * @return
	 */
	public FlowResult<List<RoleDTO>> getRootStandardRoles();
	
	/**
	 * 根据父节点ID获取标准角色
	 * @param parentId
	 * @return
	 */
	public FlowResult<List<RoleDTO>> getSubStandardRoles(String parentId);
	
	/**
	 * 获取按钮
	 * @param standardRoleId
	 * @param moduleCode
	 * @param funcCode
	 * @return
	 */
	public FlowResult<List<OpDTO>> getOpAuthByStandardRoleId(String standardRoleId, String moduleCode, String funcCode);
	
	/**
	 * 获取菜单
	 * @param standardRoleId
	 * @param moduleCode
	 * @return
	 */
	public FlowResult<List<FuncDTO>> getFuncAuthByStandardRoleId(String standardRoleId, String moduleCode);
	
	 /**
     * 获取用户按钮权限
     * 
     * @author hongbin
     * @param loginName
     *            用户登录名
     * @param moduleCode
     *            模块编码
     * @param funcCode
     *            功能编码
     * @return
     */
	public FlowResult<List<OpDTO>> getOpAuth(String loginName, String moduleCode, String funcCode);
	
	
	 /**
     * 
     * 查询某个APP所有的按钮权限配置
     * @param moduleCode
     *            模块编码
     * @return
     */
   public  FlowResult<List<OpDTO>> getOpAuthByModuleCode(String moduleCode);
	 /**
     * 
     * 获取用户功能权限
     * 
     * @param loginName
     *            用户登录名
     * @param moduleCode
     *            模块编码
     * @return
     */
	public FlowResult<List<FuncDTO>> getFuncAuth(String loginName, String moduleCode);
	
	 /**
     * 获取用户数据授权
     * 
     * @param loginName
     *            用户登录名
     * @return
     */
	public  FlowResult<DataAuthDTO> getDataAuth(String loginName);
	
	/**
	 * 获取用户数据授权
	 * @param loginName
	 * @param moduleCode
	 * @return
	 */
	public FlowResult<DataAuthDTO> getDataAuth(String loginName,String moduleCode) ;

	/**
	 * 获取数据权限
	 * @param moduleCode
	 * @param authUserLoginName
	 * @param ctrId
	 * @param fieldId
	 * @return
	 */
	public FlowResult<List<ScopeDTO>> getAuthScope(String moduleCode,String authUserLoginName,String ctrId,String fieldId);
    
	  /**
     * 
     * 查询某个APP所有的模块权限配置
     * @param moduleCode
     *            模块编码
     * @return
     */
   public  FlowResult<List<FuncDTO>> getFuncAuthByModuleCode(String moduleCode);

   
   /**
	 * 根据名字模糊查询用户
	 * @param realName
	 * @return
	 */
	public FlowResult<List<UserDTO>> getUserByRealName(String realName);
	
	/**
	 * 新增/修改用户
	 * @param userDto
	 */
	public void saveOrUpdateUser(UserDTO userDto);
	
}
