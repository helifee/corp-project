package com.xinleju.erp.sm.cache.api;

import java.util.List;
import java.util.Map;

import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.flow.flowutils.bean.PageBean;
import com.xinleju.erp.sm.extend.dto.FinaData;
import com.xinleju.erp.sm.extend.dto.FinaQueryParams;
import com.xinleju.erp.sm.extend.dto.FinaResult;

/**
 * 会计平台-费用系统获得数据接口
 * 
 * @author walden
 * 
 */
public interface SyncFinaExData {
	/**
	 * 获得合同
	 * <p>
	 * finaQueryParams.corpId 参数为必须；
	 * <p>
	 * finaQueryParams.payUnitIdList 参数为付款单位列表；
	 * 
	 * @param finaQueryParams
	 * @return
	 */
	public FlowResult<PageBean<FinaData>> getContract(FinaQueryParams finaQueryParams);

	/**
	 * 获得付款银行
	 * <p>
	 * finaQueryParams.corpId 参数为必须；
	 * <p>
	 * finaQueryParams.payUnitIdList 参数为付款单位列表；
	 * 
	 * @param finaQueryParams
	 * @return
	 */
	public FlowResult<PageBean<FinaData>> getPayingBank(FinaQueryParams finaQueryParams);

	/**
	 * 获得款项名称
	 * <p>
	 * 查询所有数据，不做分页查询
	 * <p>
	 * finaQueryParams.payUnitIdList 参数为付款单位列表；
	 * 
	 * @param finaQueryParams
	 * @return
	 */
	public FlowResult<PageBean<FinaData>> getFundName(FinaQueryParams finaQueryParams);

	/**
	 * 获得费用科目
	 * <p>
	 * 查询所有数据，不做分页查询
	 * <p>
	 * finaQueryParams.payUnitIdList 参数为付款单位列表；
	 * 
	 * @param finaQueryParams
	 * @return
	 */
	public FlowResult<PageBean<FinaData>> getFeeAccount(FinaQueryParams finaQueryParams);

	/**
	 * 根据财务查询参数finaQueryParams查询费用系统的单据
	 * <p>
	 * 做分页查询
	 * <p>
	 * 查询单据finaQueryParams.currentPage和finaQueryParams.pageSize参数是必须的；
	 * <p>
	 * finaQueryParams.billType 单据类型参数必须；finaQueryParams.corpId 单据类型参数必须；
	 * finaQueryParams.payUnitIdList 参数为付款单位为必须；
	 * 
	 * @param finaQueryParams
	 * @return
	 */
	public FlowResult<PageBean<FinaData>> getFinaData(FinaQueryParams finaQueryParams,String condition);
	
	
	/**
	 * 获取所有的属性
	 * type的取值为:领借款,日常报销,合同付款
	 * 假如传参数为领借款,那么返回类型为Map<String,Map<String,List<String>>>
	 * 最外层map中key值为所传参数领借款和明细,value为所封装的属性集合
	 * 里层map中为封装属性集合,key为属性编码,value为list,次序依次为属性编码、名称、类型
	 * @return
	 */
	public Map<String,Map<String,List<String>>> getAllAttr(String type);
	
	/**
	 * 凭证回调接口
	 * @param result
	 * @return
	 */
	public FlowResult<String> rewriteResult(FinaResult result);

	/**
	 * 查询所有预算科目及部门
	 * Map<String,List<Map<String,Object>>>
	 * key为部门或者预算科目,value为部门list或者预算科目list
	 * @return
	 */
	public FlowResult<PageBean<FinaData>> findDeptAndSub(FinaQueryParams param);
	/**
	 * 查询所有预算科目
	 * Map<String,List<Map<String,Object>>>
	 * @return
	 */
	public FlowResult<PageBean<FinaData>> findSub(FinaQueryParams param);
}