package com.xinleju.erp.flow.service.api.extend.dto;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

public class DataAuthDTO implements Serializable {

    private static final long serialVersionUID = -8051388403914411121L;

    private Map<CtrlDTO, Map<FieldDTO, List<ScopeDTO>>> detail;

    /**
     * 
     * @param ctrlCode
     *            业务对象编码
     * @return 某个业务对象的所有维度的范围授权
     */
    public Map<FieldDTO, List<ScopeDTO>> get(String ctrlCode) {

        for (Entry<CtrlDTO, Map<FieldDTO, List<ScopeDTO>>> x : detail.entrySet()) {
            if (x.getKey().getCode() != null && x.getKey().getCode().equals(ctrlCode)) {
                return x.getValue();
            }
        }
        return new HashMap<FieldDTO, List<ScopeDTO>>();
    }

    /**
     * 
     * @param ctrlCode
     *            业务对象编码
     * @param fieldCode
     *            维度编码
     * @return 某个业务对象的某个维度的范围授权
     */
    public List<ScopeDTO> get(String ctrlCode, String fieldCode) {

        Map<FieldDTO, List<ScopeDTO>> oneMap = null;

        for (Entry<CtrlDTO, Map<FieldDTO, List<ScopeDTO>>> x : detail.entrySet()) {
            if (x.getKey().getCode() != null && x.getKey().getCode().equals(ctrlCode)) {
                oneMap = x.getValue();
            }
        }
        List<ScopeDTO> result = new ArrayList<ScopeDTO>();
        if (oneMap != null) {
            for (Entry<FieldDTO, List<ScopeDTO>> x : oneMap.entrySet()) {
                if (x.getKey().getCode() != null && x.getKey().getCode().equals(fieldCode)) {
                    result = x.getValue();
                }
            }
        }

        return result;
    }
    
    public List<ScopeDTO> getById(Long ctrlId, Long fieldId) {

        Map<FieldDTO, List<ScopeDTO>> oneMap = null;

        for (Entry<CtrlDTO, Map<FieldDTO, List<ScopeDTO>>> x : detail.entrySet()) {
            if (x.getKey().getId() != null && x.getKey().getId().equals(ctrlId)) {
                oneMap = x.getValue();
            }
        }
        List<ScopeDTO> result = new ArrayList<ScopeDTO>();
        if (oneMap != null) {
            for (Entry<FieldDTO, List<ScopeDTO>> x : oneMap.entrySet()) {
                if (x.getKey().getId() != null && x.getKey().getId().equals(fieldId)) {
                    result = x.getValue();
                }
            }
        }

        return result;
    }

    public Map<CtrlDTO, Map<FieldDTO, List<ScopeDTO>>> getDetail() {
        return detail;
    }

    public void setDetail(Map<CtrlDTO, Map<FieldDTO, List<ScopeDTO>>> detail) {
        this.detail = detail;
    }

}
