package com.xinleju.erp.sm.cache.api;

import java.util.List;
import java.util.Map;

import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.flow.flowutils.bean.PageBean;
import com.xinleju.erp.sm.extend.dto.FinaData;
import com.xinleju.erp.sm.extend.dto.FinaQueryParams;
import com.xinleju.erp.sm.extend.dto.FinaResult;

/**
 * 会计平台-成本系统获得数据接口
 * 
 * @author wangf
 * 
 */
public interface SyncFinaCoData {

	/**
	 * 根据财务查询参数finaQueryParams查询成本系统的单据
	 * <p>
	 * 做分页查询
	 * <p>
	 * 查询单据finaQueryParams.currentPage和finaQueryParams.pageSize参数是必须的；
	 * <p>
	 * finaQueryParams.billType 单据类型参数必须；finaQueryParams.corpId 公司ID参数必须；
	 * finaQueryParams.projectIdList 参数为项目分期ID为必须；
	 * 
	 * <p> 
	 * finaQueryParams.auditDateBegin 审核日期参数可选；finaQueryParams.auditDateEnd 审核日期参数可选；
	 * 
	 * @param finaQueryParams
	 * @return
	 */
	public FlowResult<PageBean<FinaData>> getFinaData(FinaQueryParams finaQueryParams,String condition);
	
	
	/**
	 * 获取所有的属性
	 * type的取值为:领借款,日常报销,合同付款
	 * 假如传参数为领借款,那么返回类型为Map<String,Map<String,List<String>>>
	 * 最外层map中key值为所传参数领借款和明细,value为所封装的属性集合
	 * 里层map中为封装属性集合,key为属性编码,value为list,次序依次为属性编码、名称、类型
	 * @return
	 */
	public Map<String,Map<String,List<String>>> getAllAttr(String type);

	/**
	 * 查询所有预算科目
	 * Map<String,List<Map<String,Object>>>
	 * key为公司ID,value为预算科目list
	 * @return
	 */
	public FlowResult<PageBean<FinaData>> findSub(FinaQueryParams param);
	
	/**
	 * 将凭证成功后将财务结果回写给业务系统
	 * 
	 * @param finaResult
	 * @return
	 */
	public FlowResult<String> rewriteFinaResult(FinaResult finaResult);

	/**
	 * 查询所有合同
	 * Map<String,List<Map<String,Object>>>
	 * key为所传参数,value为预算科目list
	 * @return
	 */
	FlowResult<PageBean<FinaData>> findContract(FinaQueryParams param);

	/**
	 * 更新是否同步到财务接口状态
	 * FinaData finaData
	 * key:success,同步到财务接口成功的合同id集合
	 * key:error,同步到财务接口失败的合同id集合
	 */
	void updateContractFiType(FinaData finaData);

	/**
	 * 查询公司付款银行
	 * Map<String,List<Map<String,Object>>>
	 * key为所传参数,value为合同list
	 * @return
	 */
	FlowResult<PageBean<FinaData>> findBank(FinaQueryParams param);
	
}