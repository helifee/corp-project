package com.xinleju.erp.flow.service.api.extend;

import java.util.List;
import java.util.Map;

import com.xinleju.erp.flow.flowutils.bean.AiBean;
import com.xinleju.erp.flow.flowutils.bean.CategoryDTO;
import com.xinleju.erp.flow.flowutils.bean.FileDto;
import com.xinleju.erp.flow.flowutils.bean.FlowDTO;
import com.xinleju.erp.flow.flowutils.bean.FlowInstanceDto;
import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.flow.flowutils.bean.MsgDTO;
import com.xinleju.erp.flow.flowutils.bean.PageBean;
import com.xinleju.erp.flow.flowutils.bean.SimpleResult;
import com.xinleju.erp.flow.flowutils.bean.ToDoBean;
import com.xinleju.erp.flow.service.api.extend.dto.CompanyDTO;
import com.xinleju.erp.flow.service.api.extend.dto.DataAuthDTO;
import com.xinleju.erp.flow.service.api.extend.dto.DeptDTO;
import com.xinleju.erp.flow.service.api.extend.dto.FlowInsDTO;
import com.xinleju.erp.flow.service.api.extend.dto.FuncDTO;
import com.xinleju.erp.flow.service.api.extend.dto.GroupDTO;
import com.xinleju.erp.flow.service.api.extend.dto.OpDTO;
import com.xinleju.erp.flow.service.api.extend.dto.OrgnDTO;
import com.xinleju.erp.flow.service.api.extend.dto.RoleDTO;
import com.xinleju.erp.flow.service.api.extend.dto.ScopeDTO;
import com.xinleju.erp.flow.service.api.extend.dto.UserDTO;
import com.xinleju.erp.sm.extend.dto.MailDTO;
import com.xinleju.erp.sm.extend.dto.SmDTO;

/**
 * 
 * <p>
 * 基础接口类
 * </p>
 * <p>
 * </p>
 * 
 * @author 孙朝辉
 * @version $Id$
 * @since
 * @see
 */
public interface BaseAPI {
    
    /**
     * 更新流程数据
     * <p></p>
     * <p></p>
     * 
     * @author 孙朝辉
     * @param bizId 业务对象实例ID,主键
     * @param soCode 业务对象ID
     * @param data 流程数据
     * @return
     */
    FlowResult<Boolean> updateFlowData(String bizId,String soCode, Map<String,Object> data);
    
    /**
     * 
     * <p>获取工作流根目录列表</p>
     * <p></p>
     * @author 孙朝辉
     * @return
     */
    FlowResult<List<CategoryDTO>> getRootCategories();
    /**
	 * 获取父节点
	 * @param childId
	 * @return
	 */
	public FlowResult<OrgnDTO>  getParentOrgnByChildId(Long childId);

    
    /**
     * 
     * <p>获取子目录列表</p>
     * <p></p>
     * @param parentId 父ID
     * @author 孙朝辉
     * @return
     */
    FlowResult<List<CategoryDTO>> getSubCategories(String parentId);
    
    /**
     * 
     * <p>获取某个目录下的流程列表</p>
     * <p></p>
     * @author 孙朝辉
     * @param categoryId  目录ID
     * @param extParm  预留扩展属性
     * @return
     */
    FlowResult<PageBean<FlowDTO>> getFlows(String categoryId,Integer start,Integer limit, Map<String, Object> extParm);
    
    /**
     * 
     * <p>获取某个目录下的流程列表</p>
     * <p></p>
     * @author 钟俊
     * @param flowCodes  流程编码集合
     * @return
     */
    FlowResult<Map<String, String>> getFlowNamesMapByFlowCodes(String... flowCodes);
    

    
    /**
     * 
     * <p>作废流程</p>
     * <p></p>
     * @author 钟俊
     * @param bizId 业务id
     * @param sodId 业务对象id
     * @param userId 操作人id
     * @return
     */
    FlowResult<Boolean> undo(String bizId, Long sodId, Long userId);
    
    /**
     * 
     * <p>作废流程</p>
     * <p></p>
     * @author 孙朝辉
     * @param bizId 业务id
     * @param flowCode 流程编码
     * @param userId 操作人id
     * @return
     */
    FlowResult<Boolean> undo(String bizId,String flowCode, Long userId);
    

    /**
     * <p>结束流程</p>
     * @author 孙朝辉
     * @param bizId 业务id
     * @param sodId 业务对象id
     * @param userId 操作人id
     * @return
     */
    FlowResult<Boolean> finishFi(String bizId, Long sodId, Long userId);
    
    /**
     * <p>取当前审批人</p>
     * @author 孙朝辉
     * @param bizId 业务id
     * @param sodId 业务对象id
     * @return
     */
    FlowResult<Map<String, String>> getCurrentFlowUsers(String[] flowCodes,String[] bizIds);
    
    
    /**
     * <p>取当前审批人</p>
     * @author 孙朝辉
     * @param bizId 业务id
     * @param sodId 业务对象id
     * @return
     */
    public FlowResult<List<FlowInstanceDto>> getEndFlowUsers(String flowCodes,String bizIds);
    
    
    /**
     * 
     * @param category
     * @param bizIds
     * @return
     */
    public FlowResult<List<FileDto>> getFileList(String category,String bizIds);
    
    /**
     * <p>结束流程</p>
     * @author 孙朝辉
     * @param bizId 业务id
     * @param flowCode 流程编码
     * @param userId 操作人id
     * @return
     */
    FlowResult<Boolean> finishFi(String bizId,String flowCode, Long userId);
    
    /**
     * <p>打回流程</p>
     * @author 孙朝辉
     * @param bizId 业务id
     * @param sodId 业务对象id
     * @param userId 操作人id
     * @return
     */
    FlowResult<Boolean> giveBackFi(String bizId, Long sodId, Long userId);
    
    /**
     * <p>打回流程</p>
     * @author 孙朝辉
     * @param bizId 业务id
     * @param flowCode 流程编码
     * @param userId 操作人id
     * @return
     */
    FlowResult<Boolean> giveBackFi(String bizId,String flowCode, Long userId);
    
    /**
     * <p>结束分支</p>
     * @author 孙朝辉
     * @param bizId 业务id
     * @param flowCode 流程编码
     * @param endTag 分支标识
     * @param userId 操作人id
     * @return
     */
    FlowResult<Boolean> finishFiBranch(String bizId,String flowCode, String endTag, Long userId);
    
   
    /**
     * @param bizId 业务ID
     * @param flowCode  流程
     * @param userId    操作人
     * @param spGwId    岗位
     * @param userNote  建议
     * @return
     */
    FlowResult<Boolean>  autoCommitFlow(String bizId,String flowCode, Long userId,Long spGwId,String userNote);
    
    /**
     * 根据业务id+流程编程号获取最新的流程实例
     * @author jun
     * @param flowCode 流程编程号
     * @param bizId 业务id
     * @return
     */
    FlowResult<FlowInsDTO> getFlowInsByFlowCodeAndBizId(String flowCode, String bizId);
    
    
    /**
     * 根据业务id+流程编程号获取最新的流程实例
     * @author jun
     * @param flowCode 流程编程号
     * @param bizId 业务ids[可以是虚拟的业务ID，因为同一个业务不能多次发起流程]
     * @return
     */
    FlowResult<List<FlowInsDTO>> getFlowInsByFlowCodeAndBizIds(String flowCode, List<String> bizIds);
    

    /**
     * 是否可以使用流程模板
     * @param flowCode 流程模板编码
     * @param userId 用户id
     * @return
     */
    FlowResult<Boolean> canUseFlow(String flowCode, Long userId);
    
    /**
     * 
     *〈简述〉
     *〈详细描述〉
     * @author jun
     * @param fiId
     * @return
     */
    FlowResult<List<AiBean>> getAiList( Long fiId);
    
    /**
     * 发送消息接口
     * 
     * @param module
     *            模块编码
     * @param msgId
     *            消息ID,模块内自行维护，且模块内唯一
     * @param title
     *            消息标题
     * @param url
     *            访问链接 (相对地址)
     * @param typedDate
     *            消息操作时间，对应为 待办发送时间，已办发送时间，阅读时间，格式为 yyyy-MM-dd HH:mm:ss
     * @param opType
     *            消息类别，取值为: DB(待办) WD(待阅) YB(已办) YD(已读) RM(删除)，一个需要人工处理的消息，发DB消息；只读不需处理的消息，发 DY消息            
     * @param msgType
     *            消息类型,取值为 通知、待办
     *            0:待办 1:通知需要人工处理
     * @param loginName
     *            登录名，发送目标用户
     * @param extParm
     *            预留字段
     * @return
     */
    FlowResult<Boolean> sendMsg(String module, String msgId, String title, String url, String typedDate, String opType, String msgType, String loginName, Map<String, Object> extParm);

    /**
     * 收藏
     * 
     * @param module
     *            模块编码
     * @param storeType
     *            取值为：F: 快捷功能、D：数据文档
     * @param contentType
     *            业务系统自行定义,当storeType为数据文档时有效，表示收藏的数据文档的类别,譬如"流程"、"消息"
     * @param contentId
     *            收藏内容的ID,在 "module"和"contentType"中唯一
     * @param title
     *            标题
     * @param URL
     *            URL
     * @return
     */
    FlowResult<Boolean> store(String module, String storeType, String contentType, String contentId, String title, String url);

    /**
     * 删除收藏
     * 
     * @param module
     *            模块编码
     * @param storeType
     *            取值为：F: 快捷功能、D：数据文档
     * @param contentType
     *            业务系统自行定义,当storeType为数据文档时有效，表示收藏的数据文档的类别,譬如"流程"、"消息"
     * @param contentId
     *            收藏内容的ID,在 "module"和"contentType"中唯一
     * @return
     */
    FlowResult<Boolean> unstore(String module, String storeType, String contentType, String contentId);
    /**
     * 
     * @param module
     *            模块编码
     * @param contentType
     *            收藏类别
     * @param contentId
     *            收藏内容的ID,在 "module"和"contentType"中唯一
     * @return 是否收藏 1:是 0:否
     */
    FlowResult<Boolean> isStored(String module, String storeType,String contentType, String contentId);

    /**
     * 获取用户数据授权
     * 
     * @param loginName
     *            用户登录名
     * @return
     */
    FlowResult<DataAuthDTO> getDataAuth(String loginName);

    /**
     * 
     * 获取用户功能权限
     * 
     * @param loginName
     *            用户登录名
     * @param moduleCode
     *            模块编码
     * @return
     */
    FlowResult<List<FuncDTO>> getFuncAuth(String loginName, String moduleCode); 
    

    /**
     * 获取用户按钮权限
     * 
     * @author hongbin
     * @param loginName
     *            用户登录名
     * @param moduleCode
     *            模块编码
     * @param funcCode
     *            功能编码
     * @return
     */
    FlowResult<List<OpDTO>> getOpAuth(String loginName, String moduleCode, String funcCode);
    
    
    

    /**
     * 
     * 判断流程是否已经
     * @param flowCode
     * @param bizId
     * @return
     */
    FlowResult<Boolean> getNotSubmitFiByFlowCodeAndBizId(String flowCode,String bizId);

    /**
     * 获取下一个编码
     * 
     * @param defineCode
     *            规则定义编码
     * @return
     */
    FlowResult<String> getMaxBizCode(String defineCode);

    /**
     * 获取下一个编码
     * 
     * @param defineId
     *            规则定义ID
     * @return
     */
    FlowResult<String> getNextBizCode(String defineCode);

    /**
     * 获取组织机构根列表
     * 
     * @param includeTypes
     *            包含节点类型（company:公司  department:部门  group:团队 ）
     * @return
     */
    FlowResult<List<OrgnDTO>> findRootOrgns(String[] includeTypes);

    /**
     * 获取孩子组织机构列表
     * 
     * @param parentId
     *            父ID
     * @param includeTypes
     *           包含节点类型（company:公司  department:部门  group:团队 ）
     * @return
     */
    FlowResult<List<OrgnDTO>> findSubOrgns(String parentId, String[] includeTypes);

    /**
     * 获取用户列表
     * 
     * @param peId
     *            组织机构 ID
     * @param name
     *            用户姓名或者登录名
     * @param start
     *            从start开始
     * @param limit
     *            查多少条
     * @param includeAllSubOrgns
     *            是否包含所有子孙的
     * @param extParm
     *            扩展参数（暂时未使用）
     * @return
     */
    FlowResult<PageBean<UserDTO>> getUserList(String peId, String name, Integer start, Integer limit, Boolean includeAllSubOrgns, Map<String, Object> extParm);
    
    
    
    /**
     * 
     * 获取公司，角色下的人员
     * @param compayId
     * @param roleId
     * @return
     */
    FlowResult<List<UserDTO>> getUserListByCompanyIdAndRoleId1(String compayId, String roleId);

    /**
     * 获取用户详细信息
     * 
     * @param userId
     *            用户ID
     * @return
     */
    FlowResult<UserDTO> getUserById(String userId);
    
    /**
     * 根据用户登录名获取用户
     * @param loginName用户登录名
     * @return
     */
    FlowResult<UserDTO> getUserByLoginName(String loginName);
    
    
    /**
     * 根据姓名模糊查询用户
     * @param realName姓名
     * @return
     */
    FlowResult<List<UserDTO>> getUserByRealName(String realName);
    
    /**
     * 根据部门id获取部门
     * @param deptId
     * @return
     */
    FlowResult<DeptDTO> getDeptById(String deptId);
    
    
    /**
     * 根据用户名获取用户部门
     * @param loginName
     * @return
     */
    FlowResult<List<DeptDTO>> getUserDepts(String loginName);
    

    /**
     * 
     * 获取标准角色根
     * 
     * @return
     */
    FlowResult<List<RoleDTO>> getRootStandardRoles();
    
    /**
     * 
     * 获取标准角色根
     * 
     * @return
     */
    FlowResult<List<RoleDTO>> getRootStandardRoles(Boolean includeDisabled);

    /**
     * 根据ID获取子标准角色
     * 
     * @param parentId
     *            父角色ID
     * @return
     */
    FlowResult<List<RoleDTO>> getSubStandardRoles(String parentId);

    /**
     * 根据ID获取子标准角色
     * 
     * @param parentId
     *            父角色ID
     * @return
     */
    FlowResult<List<RoleDTO>> getSubStandardRoles(String parentId, Boolean includeDisabled);

    /**
     * 
     * 根据登录名获取主角色
     * 
     * @param longinName
     *            用户登录名
     * @return
     */
    FlowResult<RoleDTO> getMainRole(String longinName);

    /**
     * 根据用户ID获取主角色
     * 
     * @param userId
     *            用户ID
     * @return
     */
    FlowResult<RoleDTO> getMainRole(Long userId);

    /**
     * 根据公司ID，以及标准角色ID查找角色
     * 
     * @param standardRoleId
     *            标准角色ID
     * @param companyId
     *            公司ID
     * @return
     */
    FlowResult<RoleDTO> getRoleByCompanyId(String standardRoleId, String companyId);

    /**
     * 根据团队ID,以及标准角色ID查找角色
     * 
     * @param standardRoleId
     *            标准角色ID
     * @param teamId
     *            团队ID
     * @return
     */
    FlowResult<RoleDTO> getRoleByTeamId(String standardRoleId, String teamId);

    /**
     * 根据角色ID,以及标准角色ID查找角色
     * 
     * @param standardRoleId
     *            标准角色ID
     * @param roleId
     *            角色ID
     * @return
     */
    FlowResult<RoleDTO> getRoleByRoleId(String standardRoleId, String roleId);

    /**
     * 获得公司列表
     * @param includeDisabled 是否包含禁用（true表示包含，false表示不包含）
     * @return
     */
    FlowResult<List<CompanyDTO>> getAllCompany(Boolean includeDisabled);
    
    
    /**
     * 获得公司Tree列表
     * @param includeDisabled
     * @return
     */
    FlowResult<List<CompanyDTO>> getAllCompanyLevel1(Boolean includeDisabled);
    
    
    /**
     * 根据Id获取公司信息
     * @param id 公司ID
     * @return
     */
    FlowResult<CompanyDTO> getCompanyById(String id);
    /**
     * 同步团队信息
     * @author jun
     * @param groupDTO 团队信息（code:团队编码,name:团队名称,shortName:团队名称缩写,note:团队备注,refObjectId:关联对象id（如：项目的id）,parentObjectId:团队的父级对象id（如：项目分期的项目id或项目所在的公司id））
     * @return
     */
    FlowResult<SimpleResult> initGroupPartyStruct(GroupDTO groupDTO);
    
    /**
     * 获取消息信息
     * @author jun
     * @param msgDTO 消息信息（）
     * @param start 数据查询的开始位置
     * @param limit 每页数据条数
     * @return 获取消息信息
     */
    FlowResult<PageBean<MsgDTO>> getMsgList(MsgDTO msgDTO, Integer start, Integer limit);
    
    /**
     * 获取消息条数
     * @author jun
     * @param msgDTO msgDTO 消息信息（）
     * @return 获取消息信息数量
     */
    FlowResult<Integer> getMsgCount(MsgDTO msgDTO);
    
    /**
     * 获取操作页面数据
     * @author jun
     * @param wiId
     * @return
     */
    FlowResult<ToDoBean> getToDoBeanByWiId(Long wiId, String category);
    
    
    /**
     * 获取操作页面数据
     * @author jun
     * @param wiId
     * @return
     */
    FlowResult<ToDoBean> getToDoBeanByTaskId(String taskId, String category);
    
    
    /**
     * 流程业务查看
     * @param flowCode
     * @param bizId
     * @return
     */
    FlowResult<ToDoBean> getToDoBeanByflowCodeAndbizId(String flowCode, String bizId);
    /**
     * 
     * 流程提交任务
     * @param opUserId
     * @param taskId
     * @param userNote
     * @param opCode
     * @param opName
     * @param opRoleId
     * @param dealUsersIds
     * @param backToTaskId
     * @param backSkip
     * @param flowInsName
     * @return
     */
    public FlowResult<SimpleResult> completeTask(Long opUserId, String taskId,
			String userNote, String opCode, String opName,
			String dealUsersIds, String backStepId,String backTaskId, boolean backSkip,
			String flowInsName);
    
    
	/**流程发起
	 * @param spGwId
	 * @param startUserId
	 * @param userNote
	 * @param flowCode
	 * @param bizId
	 * @return
	 */
	public FlowResult<SimpleResult> startFlowTask(String spGwId, String startUserId, String userNote,String flowCode,String bizId);
    
    /**
     * 根据流程实例ID获取流程活动的所有节点，包括已处理和未处理的
     * @param fiId
     * @param category
     * @return
     */
    FlowResult<ToDoBean> getTodoBeanByWiId4Mobile(Long fiId, String category);
    
    
    /**
     * @param msgDTO 参数
     * @param start  开始数据
     * @param limit  每页记录条数
     * @return
     */
    FlowResult<PageBean<Object[]>> getGroupLoginNameMsgDTO(MsgDTO msgDTO,Integer start, Integer limit);
    /**
     * 完成单前工作
     * @author jun
     * @param opUserId 当前操作人（必传）
     * @param wiId 任务id （必传）
     * @param userNote 用户意见 
     * @param opCode 操作按钮的编码（必传）
     * @param opName 操作那妞的名称 （必传）
     * @param opRoleId 发起岗位id （发起流程时必填）
     * @param dealUsersIds 任务发送到的指定用户（用于转办只能传入一个用户id、协办可以传入多个多个用户用id隔开）（转发、协办时必填）
     * @param backToWpId 退回到的工作组id （退回时必填）
     * @param backSkip 退回后流程是不是要跳过中间节点
     * @param flowInsName 流程实例名称（用于流程发起时传入流程名称）（流程发起时必填）
     * @return
     */
    FlowResult<SimpleResult> completeWork(Long opUserId,Long wiId, String userNote, String opCode, String opName, Long opRoleId, String dealUsersIds, Long backToWpId, String backSkip, String flowInsName);
    
    /**
     * 根据登录名和流程ID获取部门ID（PartyENtity Id）
     * @param loginName
     * @param wiId
     * @return
     */
    FlowResult<Long> getDeptOrgnIdByLoginNameAndWiId(String loginName,Long wiId);
    
    /**
     * 根据数据极权里的范围id取分期的项目id
     * @param scopeId
     * @return
     */
    FlowResult<List<String>> getProjectBranchByScopeId(String authUserLoginName,String scopeId,String type);
    
  /**
     * 发邮件
     * @param mc
     * @return
     */
    FlowResult<Boolean> saveMail(MailDTO mc);
    
    /**
     * 发短信
     * @param sc
     * @return
     */
    FlowResult<Boolean> saveSm(SmDTO sc);
    
    /**
     * 向日志表插入日志的接口
     * @param userId 登录人的用户id
     * @param moduleCode 模块编码 PT/MD/QU等系统标识code
     * @param funcName  功能名称 用户管理，功能管理，角色管理等
     * @param url  操作地址url路径
     * @param loginfo  日志内容
     * @param errorMsg 若出错，错误信息
     * @param returnMsg 返回的信息
     * @param sign 操作标识：1查询2新增3修改4删除 多项用1,3,4来存
     * @param type 日志类型：1登录日志2菜单日志3接口日志4其它日志
     * @return 保存成功/失败
     */
    FlowResult<Boolean> saveLog(Long userId,String moduleCode,String funcName,
    		String url,String loginfo,String errorMsg,String returnMsg,String sign,Long type);
    
    
    /**
     * 向日志表插入日志的接口
     * @param ipAddress  用户IP
     * @param userId 登录人的用户id
     * @param loginName 登录名称
     * @param moduleCode 模块编码 PT/MD/QU等系统标识code
     * @param funcName  功能名称 用户管理，功能管理，角色管理等
     * @param url  操作地址url路径
     * @param loginfo  日志内容
     * @param errorMsg 若出错，错误信息
     * @param returnMsg 返回的信息
     * @param sign 操作标识：1查询2新增3修改4删除 多项用1,3,4来存
     * @param type 日志类型：1登录日志2菜单日志3接口日志4其它日志
     * @return 保存成功/失败
     */
    FlowResult<Boolean> saveLog(String ipAddress,Long userId,String loginName,String moduleCode,String funcName,
    		String url,String loginfo,String errorMsg,String returnMsg,String sign,Long type);
    
    
    /**
     * @param loginName 登录人
     * @param start   开始
     * @param limit   记录条数
     * @return
     */
     FlowResult<PageBean<MsgDTO>> getMsgCreationList(String loginName, Integer start, Integer limit);
     
     /**
      * @param loginName 登录人
      * @param start   开始
      * @param limit   记录条数
      * @return
      */
     public FlowResult<PageBean<MsgDTO>> getMsgNewCreationList(String loginName,
 			Integer start, Integer limit);
    

     /**
      * 
      * 查询某个APP所有的模块权限配置
      * @param moduleCode
      *            模块编码
      * @return
      */
     FlowResult<List<FuncDTO>> getFuncAuthByModuleCode(String moduleCode);
     /**
      * 
      * 查询某个APP所有的按钮权限配置
      * @param moduleCode
      *            模块编码
      * @return
      */
     FlowResult<List<OpDTO>> getOpAuthByModuleCode(String moduleCode);
     
     
     
    /**
     * 获取当前流程AI
     * @param bizId
     * @param flowCode
     * @return
     */
     FlowResult<List<String>> getFiCurrentAi(String bizId,String flowCode);
     
     
     /**驳回到指定环节
     * @param wiId 当前环节
     * @param opCode  驳回编码
     * @param opName  驳回名称
     * @param userNote  意见
     * @param backToWpId  
     * @param backSkip
     * @param flowInsName
     * @param userDto
     * @return
     */
    FlowResult<Boolean>   rejectWi(Long wiId,String opCode,String opName,String userNote,Long backToWpId,String backSkip,String flowInsName,UserDTO userDto);
     
    //判断oa推送后的消息状态 传wiid 返回 YB,DB等
    FlowResult<String>  getOpTypeByWiId(String wiid);
    
    //查询附件个数
    FlowResult<Integer>  getFileCount(String moduleCode,String ownid);
    
    /**获取校稿节点的附件数
     * @param chkDraftBefore 校稿前
     * @param chkDraftAfter  校稿后
     * @return
     */
    FlowResult<Integer> getChkDraftFileCount(String[] chkDraftBefore , String[] chkDraftAfter);
    
    /**判断是否存在校稿环节(费用系统)
     * @param flowCode 流程编码
     * @return true 存在	false 不存在
     */
    FlowResult<Boolean> isExistsChkDraftNode(String flowCode);
    
    /**是否存在运行中的校稿环节(计划系统)
     * @param flowCode 流程编码
     * @param bizId 业务ID
     * @return true 存在	false 不存在
     */
    public FlowResult<Boolean> isExistsRunningProofreadStep(String bizId, String flowCode,Long currLoginName);

	FlowResult<List<CompanyDTO>> getAllCompanyLevel(Boolean includeDisabled);

	FlowResult<List<UserDTO>> getUserListByCompanyIdAndRoleId(Long compayId,
			Long roleId);

	/**
	 * 查询用户权限项
	 * @param moduleCode
	 * @param authUserLoginName
	 * @param ctrId
	 * @param fieldId
	 * @return
	 */
	public FlowResult<List<ScopeDTO>> getAuthScope(String moduleCode,String authUserLoginName,Long ctrId,Long fieldId);

	/**
     * chc add 获取当前用户拥有岗位集合
     * @param loginName
     * @return
     */
	public List<RoleDTO> getPostsByCurrentUser(String loginName);
	
	/**
     * 插入或者更新菜单
     * @author sy
     * @param id 菜单Id，为空插入菜单，不为空，修改菜单
     * @param code  菜单code
     * @param name 菜单名称
     * @param url 菜单url
     * @param mobileUrl 菜单手机url
     * @param appCode 菜单对应的系统code
     * @param parentCode 菜单对应的上级菜单code 为空添加一级菜单
     * @param openmode 菜单打开方式，1是内部打开，0是外部打开
     * @param remark 备注
     * @return 菜单Id
     */
    public FlowResult<String>  saveOrUpdateMenu(String id,String code,String name ,String url ,String mobileUrl,String appCode,String parentCode,String openmode,String remark);
    
    
    /**
     * 插入按钮
     * @author sy
     * @param name,code,funcModuleId,buttonurl,
     * @return 按钮Id
     */
    public FlowResult<List<String>>  saveOpDTO(List<OpDTO> opDtoList);
}
