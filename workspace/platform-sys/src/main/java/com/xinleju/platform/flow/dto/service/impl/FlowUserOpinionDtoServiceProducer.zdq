package com.xinleju.platform.flow.dto.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.LoginUtils;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.base.utils.SecurityUserBeanInfo;
import com.xinleju.platform.flow.dto.service.FlowUserOpinionDtoServiceCustomer;
import com.xinleju.platform.flow.entity.FlowUserOpinion;
import com.xinleju.platform.flow.service.FlowUserOpinionService;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * @author 
 * 
 *
 */

public class FlowUserOpinionDtoServiceProducer implements FlowUserOpinionDtoServiceCustomer{
	private static Logger log = Logger.getLogger(FlowUserOpinionDtoServiceProducer.class);
	@Autowired
	private FlowUserOpinionService flowUserOpinionService;

	public String save(String userInfo, String saveJson){
		
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			FlowUserOpinion flowUserOpinion=JacksonUtils.fromJson(saveJson, FlowUserOpinion.class);
			flowUserOpinionService.save(flowUserOpinion);
			info.setResult(JacksonUtils.toJson(flowUserOpinion));
			info.setSucess(true);
			info.setMsg("保存对象成功!");
		} catch (Exception e) {
			log.error("保存对象失败!"+e.getMessage());
			info.setSucess(false);
			info.setMsg("保存对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList)
	{
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			List<FlowUserOpinion> list=JacksonUtils.fromJson(saveJsonList,ArrayList.class, FlowUserOpinion.class);
			flowUserOpinionService.saveBatch(list);
			info.setResult(JacksonUtils.toJson(list));
			info.setSucess(true);
			info.setMsg("保存对象成功!");
		} catch (Exception e) {
			log.error("保存对象失败!"+e.getMessage());
			info.setSucess(false);
			info.setMsg("保存对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
	{
		
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			FlowUserOpinion flowUserOpinion=JacksonUtils.fromJson(updateJson, FlowUserOpinion.class);
			int result=   flowUserOpinionService.update(flowUserOpinion);
			info.setResult(JacksonUtils.toJson(result));
			info.setSucess(true);
			info.setMsg("更新对象成功!");
		} catch (Exception e) {
			log.error("更新对象失败!"+e.getMessage());
			info.setSucess(false);
			info.setMsg("更新对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			FlowUserOpinion flowUserOpinion=JacksonUtils.fromJson(deleteJson, FlowUserOpinion.class);
			int result= flowUserOpinionService.deleteObjectById(flowUserOpinion.getId());
			info.setResult(JacksonUtils.toJson(result));
			info.setSucess(true);
			info.setMsg("删除对象成功!");
		} catch (Exception e) {
			log.error("更新对象失败!"+e.getMessage());
			info.setSucess(false);
			info.setMsg("删除更新对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
	{
		
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if (StringUtils.isNotBlank(deleteJsonList)) {
				Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				List<String> list=Arrays.asList(map.get("id").toString().split(","));
				int result= flowUserOpinionService.deleteAllObjectByIds(list);
				info.setResult(JacksonUtils.toJson(result));
				info.setSucess(true);
				info.setMsg("删除对象成功!");
			}
		} catch (Exception e) {
			log.error("删除对象失败!"+e.getMessage());
			info.setSucess(false);
			info.setMsg("删除更新对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	{
		
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			FlowUserOpinion flowUserOpinion=JacksonUtils.fromJson(getJson, FlowUserOpinion.class);
			FlowUserOpinion	result = flowUserOpinionService.getObjectById(flowUserOpinion.getId());
			info.setResult(JacksonUtils.toJson(result));
			info.setSucess(true);
			info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			log.error("获取对象失败!"+e.getMessage());
			info.setSucess(false);
			info.setMsg("获取对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				Page page=flowUserOpinionService.getPage(map, (Integer)map.get("start"),  (Integer)map.get("limit"));
				info.setResult(JacksonUtils.toJson(page));
				info.setSucess(true);
				info.setMsg("获取分页对象成功!");
			}else{
				Page page=flowUserOpinionService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
				info.setSucess(true);
				info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			log.error("获取分页对象失败!"+e.getMessage());
			info.setSucess(false);
			info.setMsg("获取分页对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				List list=flowUserOpinionService.queryList(map);
				info.setResult(JacksonUtils.toJson(list));
				info.setSucess(true);
				info.setMsg("获取列表对象成功!");
			}else{
				List list=flowUserOpinionService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
				info.setSucess(true);
				info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			log.error("获取列表对象失败!"+e.getMessage());
			info.setSucess(false);
			info.setMsg("获取列表对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		
		return null;
	}

	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson)
	{
		
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			FlowUserOpinion flowUserOpinion=JacksonUtils.fromJson(deleteJson, FlowUserOpinion.class);
			int result= flowUserOpinionService.deletePseudoObjectById(flowUserOpinion.getId());
			info.setResult(JacksonUtils.toJson(result));
			info.setSucess(true);
			info.setMsg("删除对象成功!");
		} catch (Exception e) {
			log.error("更新对象失败!"+e.getMessage());
			info.setSucess(false);
			info.setMsg("删除更新对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo, String deleteJsonList)
	{
		
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if (StringUtils.isNotBlank(deleteJsonList)) {
				Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				List<String> list=Arrays.asList(map.get("id").toString().split(","));
				int result= flowUserOpinionService.deletePseudoAllObjectByIds(list);
				info.setResult(JacksonUtils.toJson(result));
				info.setSucess(true);
				info.setMsg("删除对象成功!");
			}
		} catch (Exception e) {
			log.error("删除对象失败!"+e.getMessage());
			info.setSucess(false);
			info.setMsg("删除更新对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String saveUserOpinIons(String userInfo, String saveJson) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			List<FlowUserOpinion> list=JacksonUtils.fromJson(saveJson, ArrayList.class,FlowUserOpinion.class);
			int result= flowUserOpinionService.saveUserOpinIons(list);
			info.setResult(JacksonUtils.toJson(result));
			info.setSucess(true);
			info.setMsg("保存对象成功!");
		} catch (Exception e) {
			log.error("保存对象失败!"+e.getMessage());
			info.setSucess(false);
			info.setMsg("保存对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryUserOpinion(String userInfo, String paramJson) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			Map<String, Object> param = JacksonUtils.fromJson(paramJson,HashMap.class);
			SecurityUserBeanInfo loginUser = LoginUtils.getSecurityUserBeanInfo();
			param.put("userId", loginUser.getSecurityUserDto().getId());
			List<FlowUserOpinion> result = flowUserOpinionService.queryUserOpinion(param);
			info.setResult(JacksonUtils.toJson(result));
			info.setSucess(true);
			info.setMsg("获取对象成功!");
		} catch (Exception e) {
			log.error("获取对象失败!"+e.getMessage());
			info.setSucess(false);
			info.setMsg("获取对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}


}
