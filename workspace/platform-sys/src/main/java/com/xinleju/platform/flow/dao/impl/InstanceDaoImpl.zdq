package com.xinleju.platform.flow.dao.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.xinleju.platform.base.dao.impl.BaseDaoImpl;
import com.xinleju.platform.flow.dao.InstanceDao;
import com.xinleju.platform.flow.dto.ApprovalList;
import com.xinleju.platform.flow.dto.InstanceAcDto;
import com.xinleju.platform.flow.dto.InstanceDto;
import com.xinleju.platform.flow.entity.Instance;
import com.xinleju.platform.flow.model.OverdueAc;

/**
 * @author admin
 * 
 * 
 */
@Repository
public class InstanceDaoImpl extends BaseDaoImpl<String,Instance> implements InstanceDao{

	public InstanceDaoImpl() {
		super();
	}

	@Override
	public List<Instance> queryInstanceByFlIdAndBusinessId(String flId, String businessId) {
		Map<String, String> parameters = new HashMap<String, String>();
		parameters.put("flId", flId);
		parameters.put("businessId", businessId);
		return getSqlSession().selectList(Instance.class.getName() + ".queryInstanceByFlIdAndBusinessId", parameters);
	}

	@Override
	public List<ApprovalList> queryApprovalList(String instanceId, String status) {
		Map<String, String> parameters = new HashMap<String, String>();
		parameters.put("instanceId", instanceId);
		parameters.put("status", status);
		return getSqlSession().selectList(Instance.class.getName() + ".queryApprovalList", parameters);
	}

	@Override
	public List<ApprovalList> queryApprovalListExternal(String flCode, String businessId, String appCode) {
		Map<String, String> parameters = new HashMap<String, String>();
		parameters.put("flCode", flCode);
		parameters.put("businessId", businessId);
		parameters.put("appCode", appCode);
		return getSqlSession().selectList(Instance.class.getName() + ".queryApprovalListExternal", parameters);
	}

	@Override
	public boolean changeStatus(String instanceId, String status) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("instanceId", instanceId);
		params.put("status", status);
		getSqlSession().update(Instance.class.getName() + ".changeStatus", params);
		return true;
	}

	//查询分类的List
	@Override
	public List<InstanceDto> queryInstanceListByParam(Map<String, Object> paramMap) {
		String appId = (String)paramMap.get("appId");
		/*if(appId == null || "-1".equals(appId) ){
			return new ArrayList();
		}*/
		paramMap = processApproveId(paramMap);
		
		return getSqlSession().selectList(Instance.class.getName()+".queryInstanceListByParam", paramMap);
	}
	//查询分类的Count
	@Override
	public Integer queryInstanceCountByParam(Map<String, Object> paramMap) {
		String appId = (String)paramMap.get("appId");
	/*	if(appId == null || "-1".equals(appId) ){
			return 0;
		}*/
		paramMap = processApproveId(paramMap);
		return getSqlSession().selectOne(Instance.class.getName()+".queryInstanceCountByParam", paramMap);
	}
	
	private Map<String, Object> processApproveId(Map<String, Object> map) {
		Object approverId = map.get("approverId"); 
		if(approverId==null){
			map.remove("approverId");
		}else{
			if(approverId instanceof String){
				String approverIdText = (String)approverId;
				if(!"-1".equals(approverIdText) && !"".equals(approverIdText)){
					System.out.println("\n\n approverIdText="+approverIdText);
					map.put("approverId", approverIdText.split(","));
				}
			}
		}
		
		return map;
	}

	@Override
	public List<InstanceDto> getRelateInstances(String instanceId) {
		Map<String, String> parameters = new HashMap<String, String>();
		parameters.put("instanceId", instanceId);
		return getSqlSession().selectList(Instance.class.getName() + ".getRelateInstances", parameters);

	}

	@Override
	public List<OverdueAc> queryOverdueAc() {
		return getSqlSession().selectList(Instance.class.getName() + ".queryOverdueAc");
	}

	@Override
	public List<InstanceDto> personalQueryListByParam(Map<String, Object> paramMap) {
		String method = Instance.class.getName()+".personalQueryListByParam";
		return getSqlSession().selectList(method, paramMap);
	}
	//@Override
	//public List<InstanceDto> personalQueryList(Map<String, String> paramMap) {
	//	return getSqlSession().selectList(Instance.class.getName()+".personalQueryList", paramMap);
	//}

	@Override
	public Integer personalQueryCountByParam(Map<String, Object> paramMap) {
		String method = Instance.class.getName()+".personalQueryCountByParam";
		return getSqlSession().selectOne(method, paramMap);
	}

	/* 优化修改为分页查询
	 * @Override
	public List queryListByApprover(Map<String, String> paramMap) {
		String participantId = paramMap.get("participantId");
		String postId = paramMap.get("postId");
		if(participantId == null || "-1".equals(participantId)
				|| postId == null || "-1".equals(postId)  ){
			return new ArrayList();
		}
		return getSqlSession().selectList(Instance.class.getName()+".queryListByApprover", paramMap);
	}*/
	@Override
	public List<InstanceDto> queryListByApproverParam(Map<String, Object> paramMap) {
		String participantId = (String)paramMap.get("participantId");
		String postId =  (String)paramMap.get("postId");
		if(participantId == null || "-1".equals(participantId)
				|| postId == null || "-1".equals(postId)  ){
			return new ArrayList();
		}
		String method = Instance.class.getName()+".queryListByApproverParam";
		return getSqlSession().selectList(method, paramMap);
	}

	@Override
	public Integer queryListCountByApproveParam(Map<String, Object> paramMap) {
		String participantId = (String)paramMap.get("participantId");
		String postId =  (String)paramMap.get("postId");
		if(participantId == null || "-1".equals(participantId)
				|| postId == null || "-1".equals(postId)  ){
			return 0;
		}
		String method = Instance.class.getName()+".queryListCountByApproveParam";
		return getSqlSession().selectOne(method, paramMap);
	}
	/**
	 * 获取节点审批类型
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public String queryApprovalTypeId(Map<String, Object> map)throws Exception{
		return getSqlSession().selectOne(Instance.class.getName()+".selectApprovalTypeId", map);
	}

	@Override
	public List<Instance> queryListByInstanceIds(List<String> instanceIds) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("instanceIds", instanceIds);
		return getSqlSession().selectList(Instance.class.getName() + ".queryListByInstanceIds", params);
	}

	@Override
	public List<Instance> queryListByFlCodeAndBusinessIds(String flCode, List<String> businessIds) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("flCode", flCode);
		params.put("businessIds", businessIds);
		return getSqlSession().selectList(Instance.class.getName() + ".queryListByFlCodeAndBusinessIds", params);
	}

	@Override
	public List<InstanceAcDto> queryCurrentNodeOf(String instanceId) {
		Map<String, String> params = new HashMap<String, String>();
		params.put("instanceId", instanceId);
		return getSqlSession().selectList(Instance.class.getName() + ".queryCurrentNodeOf", params);
	}

	@Override
	public List<String> queryFlowRelationUserIds(String instanceId) {
		return getSqlSession().selectList(Instance.class.getName() + ".queryFlowRelationUserIds", instanceId);
	}

	@Override
	public List<String> getMsgIdsByInstanceId(String instanceId) {
		return getSqlSession().selectList(Instance.class.getName() + ".getMsgIdsByInstanceId", instanceId);
	}
	
	@Override
	public List<Map<String, String>> scanFlowOf(List<String> names) {
		return getSqlSession().selectList(Instance.class.getName() + ".scanFlowOf", names);
	}

	@Override
	public List<Map<String, String>> monitor1(String instanceId) {
		return getSqlSession().selectList(Instance.class.getName() + ".monitor1", instanceId);
	}
	
	@Override
	public List<Map<String, String>> monitor2(String instanceId) {
		return getSqlSession().selectList(Instance.class.getName() + ".monitor2", instanceId);
	}
	
	@Override
	public List<Map<String, String>> monitor3(String instanceId) {
		return getSqlSession().selectList(Instance.class.getName() + ".monitor3", instanceId);
	}
	
	@Override
	public List<Map<String, String>> monitor4(String instanceId) {
		return getSqlSession().selectList(Instance.class.getName() + ".monitor4", instanceId);
	}
	
	@Override
	public List<Map<String, String>> monitor5(String instanceId) {
		return getSqlSession().selectList(Instance.class.getName() + ".monitor5", instanceId);
	}
	
	@Override
	public List<Map<String, String>> monitor6(String instanceId) {
		return getSqlSession().selectList(Instance.class.getName() + ".monitor6", instanceId);
	}
	
	@Override
	public List<Map<String, String>> monitor7(String instanceId) {
		return getSqlSession().selectList(Instance.class.getName() + ".monitor7", instanceId);
	}
	
	@Override
	public List<Map<String, String>> monitor8(String instanceId) {
		return getSqlSession().selectList(Instance.class.getName() + ".monitor8", instanceId);
	}
	
	@Override
	public List<Map<String, String>> monitor9(String instanceId) {
		return getSqlSession().selectList(Instance.class.getName() + ".monitor9", instanceId);
	}
}
