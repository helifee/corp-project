package com.xinleju.platform.sys.res.dto.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.IDGenerator;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.sys.org.dto.PostDto;
import com.xinleju.platform.sys.org.dto.StandardRoleDto;
import com.xinleju.platform.sys.org.service.PostService;
import com.xinleju.platform.sys.org.service.StandardRoleService;
import com.xinleju.platform.sys.res.dto.service.FuncPermissionDtoServiceCustomer;
import com.xinleju.platform.sys.res.entity.FuncPermission;
import com.xinleju.platform.sys.res.service.FuncPermissionService;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * @author admin
 * 
 *
 */
 
public class FuncPermissionDtoServiceProducer implements FuncPermissionDtoServiceCustomer{
	private static Logger log = Logger.getLogger(FuncPermissionDtoServiceProducer.class);
	@Autowired
	private FuncPermissionService funcPermissionService;
	
	@Autowired
	private StandardRoleService standardRoleService;
	
	@Autowired
	private PostService postService;

	public String save(String userInfo, String saveJson){
		// TODO Auto-generated method stub
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   FuncPermission funcPermission=JacksonUtils.fromJson(saveJson, FuncPermission.class);
		   funcPermissionService.save(funcPermission);
		   info.setResult(JacksonUtils.toJson(funcPermission));
		   info.setSucess(true);
		   info.setMsg("保存对象成功!");
		} catch (Exception e) {
		 log.error("保存对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("保存对象失败!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			if (StringUtils.isNotBlank(saveJsonList)) {
				Map map = JacksonUtils.fromJson(saveJsonList, HashMap.class);
				Map mapAuthData  = (HashMap) map.get("saveData");
				Map<String,Object> mapCon = new HashMap<String,Object>();
				mapCon.put("sidx","id");
				mapCon.put("sord","desc");
				List<FuncPermission> listFuncPermission = funcPermissionService
						.queryList(mapCon);
				if (mapAuthData != null) {
					List<String> listFuncPermissionIds = new ArrayList<String>();
					Set<String> set = mapAuthData.keySet();
					for (String key : set) {
						String[] keyIds = key.split("#");
						String[] operationIds = keyIds[0].split("/");
						String operationId = operationIds[operationIds.length-1];
						String roleId = keyIds[1];
						if(!roleId.equals("roleId")){
							if("1".equals(mapAuthData.get(key))){
								FuncPermission funcPermission = new FuncPermission();
								funcPermission.setId(IDGenerator.getUUID());
								funcPermission.setOperationId(operationId);
								funcPermission.setRoleId(roleId);
								funcPermissionService.save(funcPermission);
							}else{
								for(FuncPermission f :listFuncPermission){
									if(f.getRoleId().equals(roleId) && f.getOperationId().equals(operationId)){
										listFuncPermissionIds.add(f.getId());
									}
								}
							}
						}
						
					}
					if (listFuncPermissionIds.size() > 0) {
						funcPermissionService.deleteAllObjectByIds(listFuncPermissionIds);
					}
				}
				
				info.setResult("保存成功");
				info.setSucess(true);
				info.setMsg("保存对象成功!");
			} else {
				info.setResult("参数为空");
				info.setSucess(false);
				info.setMsg("保存对象失败!");
			}
		} catch (Exception e) {
			log.error("保存对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("保存对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
	
	@Override
	public String saveBatchFunToRole(String userInfo, String saveJsonList){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			if (StringUtils.isNotBlank(saveJsonList)) {
				Map map = JacksonUtils.fromJson(saveJsonList, HashMap.class);
				Map mapAuthData  = (HashMap) map.get("saveData");
				Map<String,Object> mapCon = new HashMap<String,Object>();
				mapCon.put("sidx","id");
				mapCon.put("sord","desc");
				List<FuncPermission> listFuncPermission = funcPermissionService
						.queryList(mapCon);
				if (mapAuthData != null) {
					List<String> listFuncPermissionIds = new ArrayList<String>();
					Set<String> set = mapAuthData.keySet();
					for (String key : set) {
						String[] keyIds = key.split("#");
						String[] roleIds = keyIds[0].split("/");
						String roleId = roleIds[roleIds.length-1];
						String operationId = keyIds[1];
						if(!operationId.equals("operationId")){
							if("1".equals(mapAuthData.get(key))){
								FuncPermission funcPermission = new FuncPermission();
								funcPermission.setId(IDGenerator.getUUID());
								funcPermission.setOperationId(operationId);
								funcPermission.setRoleId(roleId);
								funcPermissionService.save(funcPermission);
							}else{
								for(FuncPermission f :listFuncPermission){
									if(f.getRoleId().equals(roleId) && f.getOperationId().equals(operationId)){
										listFuncPermissionIds.add(f.getId());
									}
								}
							}
						}
						
					}
					if (listFuncPermissionIds.size() > 0) {
						funcPermissionService.deleteAllObjectByIds(listFuncPermissionIds);
					}
				}
				
				info.setResult("保存成功");
				info.setSucess(true);
				info.setMsg("保存对象成功!");
			} else {
				info.setResult("参数为空");
				info.setSucess(false);
				info.setMsg("保存对象失败!");
			}
		} catch (Exception e) {
			log.error("保存对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("保存对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
	
	@Override
	public String queryAuthDataByappIdsAndroleIds(String userInfo, String paramer){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			if (StringUtils.isNotBlank(paramer)) {
				Map map = JacksonUtils.fromJson(paramer, HashMap.class);
				List<Map<String,Object>> resultList = funcPermissionService.queryAuthDataByappIdsAndroleIds(map);
				info.setResult(JacksonUtils.toJson(resultList));
				info.setSucess(true);
				info.setMsg("保存对象成功!");
			} else {
				info.setResult("参数为空");
				info.setSucess(false);
				info.setMsg("保存对象失败!");
			}
		} catch (Exception e) {
			log.error("查询对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("查询对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
	
	@Override
	public String queryListByObjectType(String userInfo, String paramer){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			if (StringUtils.isNotBlank(paramer)) {
				List<Map<String,Object>> resultList = new ArrayList<Map<String,Object>>();
				Map<String,Object> resultMap = new HashMap<String,Object>();
				Map map = JacksonUtils.fromJson(paramer, HashMap.class);
				//对象类型
				String objTypeShow = (String)map.get("objTypeShow");
				//对象ID
				String id = (String)map.get("id");
				if(objTypeShow.equals("standardPost")){
					resultMap.put(id, "标准岗位自有权限");
				}else if(objTypeShow.equals("role")){
					resultMap.put(id, "角色自有权限");
				}else if(objTypeShow.equals("post")){
					resultMap.put(id, "岗位自有权限");
					Map<String,Object> mapc = new HashMap<String,Object>();
					mapc.put("postId", id);
					//根据岗位获取通用角色
					List<StandardRoleDto> currencyRoleDtoList =  standardRoleService.queryCurrencyRoleListByPostId(mapc);
					//根据岗位获取标准岗位
					List<StandardRoleDto> standardPostDtoList =  standardRoleService.queryStandardPostListByPostId(mapc);
					//岗位对应的标准岗位ID
					if(null != standardPostDtoList && standardPostDtoList.size()>0){
						for(StandardRoleDto srDto:standardPostDtoList){
							resultMap.put(srDto.getId(), "继承标准岗位【"+srDto.getName()+"】权限");
						}
					}
					
					//岗位对应的通用角色ID
					if(null != currencyRoleDtoList && currencyRoleDtoList.size()>0){
						for(StandardRoleDto srDto:currencyRoleDtoList){
							resultMap.put(srDto.getId(), "继承角色【"+srDto.getName()+"】权限");
						}
					}
				}else if(objTypeShow.equals("user")){
					Map<String,Object> mapc = new HashMap<String,Object>();
					mapc.put("userId", id);
					//获取用户的角色
					List<StandardRoleDto> standardRoleDtoList =  standardRoleService.queryRoleListByUserId(mapc);
					
					//获取用户的通用角色
					List<StandardRoleDto> currencyRoleDtoList =  standardRoleService.queryCurrencyRoleListByUserId(mapc);
					
					//获取用户的岗位
					List<PostDto> postDtoList = postService.queryAuthPostListByUserId(mapc);
					resultMap.put(id, "人员自有权限");
					//用户的标准岗位ID
					if(null != standardRoleDtoList && standardRoleDtoList.size()>0){
						for(StandardRoleDto srDto:standardRoleDtoList){
							resultMap.put(srDto.getId(), "继承标准岗位【"+srDto.getName()+"】权限");
						}
					}
					
					//用户的岗位ID
					if(null != postDtoList && postDtoList.size()>0){
						for(PostDto srDto:postDtoList){
							resultMap.put(srDto.getId(), "继承岗位【"+srDto.getName()+"】权限");
						}
					}
					
					//用户的通用角色ID
					if(null != currencyRoleDtoList && currencyRoleDtoList.size()>0){
						for(StandardRoleDto srDto:currencyRoleDtoList){
							resultMap.put(srDto.getId(), "继承角色【"+srDto.getName()+"】权限");
						}
					}
				}
				
				
				resultList.add(resultMap);
//				List<Map<String,Object>> resultList = funcPermissionService.queryAuthDataByappIdsAndroleIds(map);
				info.setResult(JacksonUtils.toJson(resultMap));
				info.setSucess(true);
				info.setMsg("保存对象成功!");
			} else {
				info.setResult("参数为空");
				info.setSucess(false);
				info.setMsg("保存对象失败!");
			}
		} catch (Exception e) {
			log.error("查询对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("查询对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
	
	

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   FuncPermission funcPermission=JacksonUtils.fromJson(updateJson, FuncPermission.class);
			   int result=   funcPermissionService.update(funcPermission);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   FuncPermission funcPermission=JacksonUtils.fromJson(deleteJson, FuncPermission.class);
			   int result= funcPermissionService.deleteObjectById(funcPermission.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= funcPermissionService.deleteAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	 {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			FuncPermission funcPermission=JacksonUtils.fromJson(getJson, FuncPermission.class);
			FuncPermission	result = funcPermissionService.getObjectById(funcPermission.getId());
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				Page page=funcPermissionService.getPage(map, (Integer)map.get("start"),  (Integer)map.get("limit"));
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=funcPermissionService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				List list=funcPermissionService.queryList(map);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=funcPermissionService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo,
			String deleteJsonList) {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public String querySystemListByRole(String userinfo, String paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				List<Map<String,Object>> list=funcPermissionService.querySystemListByRole(map);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=funcPermissionService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
	
	@Override
	public String queryAuthorizationListByAppIds(String userinfo, String paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				List<Map<String,Object>> list=funcPermissionService.queryAuthorizationListByAppIds(map);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=funcPermissionService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
	
	@Override
	public String queryAuthorizationListAllRoles(String userinfo, String paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
//				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				List<Map<String,Object>> list=funcPermissionService.queryAuthorizationListAllRoles();
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=funcPermissionService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
	
	@Override
	public String queryAuthorizationListAllCurrencyRoles(String userinfo, String paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
//				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				List<Map<String,Object>> list=funcPermissionService.queryAuthorizationListAllCurrencyRoles();
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=funcPermissionService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
	
	@Override
	public String queryAuthorizationListAllPost(String userinfo, String paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
//				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				List<Map<String,Object>> list=funcPermissionService.queryAuthorizationListAllPost();
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=funcPermissionService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
	
	@Override
	public String queryAuthorizationListAllUser(String userinfo, String paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
//				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				List<Map<String,Object>> list=funcPermissionService.queryAuthorizationListAllUser();
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=funcPermissionService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
	
	@Override
	public String queryAuthDataByOperationIds(String userInfo, String paramer){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			if (StringUtils.isNotBlank(paramer)) {
				Map map = JacksonUtils.fromJson(paramer, HashMap.class);
				List<Map<String,Object>> resultList = funcPermissionService.queryAuthDataByOperationIds(map);
				info.setResult(JacksonUtils.toJson(resultList));
				info.setSucess(true);
				info.setMsg("保存对象成功!");
			} else {
				info.setResult("参数为空");
				info.setSucess(false);
				info.setMsg("保存对象失败!");
			}
		} catch (Exception e) {
			log.error("查询对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("查询对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
	
	
}
