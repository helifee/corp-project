package com.xinleju.platform.sys.org.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;


import com.xinleju.platform.base.annotation.Column;
import com.xinleju.platform.base.service.impl.BaseServiceImpl;
import com.xinleju.platform.base.utils.IDGenerator;
import com.xinleju.platform.flow.dto.AcDto;
import com.xinleju.platform.sys.org.dao.PostUserDao;
import com.xinleju.platform.sys.org.dto.FlowAcPostDto;
import com.xinleju.platform.sys.org.dto.FlowPostParticipantDto;
import com.xinleju.platform.sys.org.entity.PostUser;
import com.xinleju.platform.sys.org.service.PostUserService;
import com.xinleju.platform.sys.org.vo.CommonRolePostUserVo;
import com.xinleju.platform.sys.org.vo.OrgnazationPostUserVo;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * @author admin
 * 
 * 
 */

@Service
public class PostUserServiceImpl extends  BaseServiceImpl<String,PostUser> implements PostUserService{
	

	@Autowired
	private PostUserDao postUserDao;
	
	/**
	 * 批量保存post_user和role_user
	 * @param objectList
	 */
	@Override
	public Integer savePostUserAndRoleUser( List<Map<String, Object>> list) throws Exception{
		return postUserDao.savePostUserAndRoleUser( list);
	}
	@Override
	public Integer delPostUserAndRoleUser( String userId) throws Exception{
		return postUserDao.delPostUserAndRoleUser(userId);
	}
	/**
	 * 设置主岗
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public Integer setDefaultPost(Map<String,Object> map) throws Exception{
		return postUserDao.setDefaultPost(map);
	}
	/*
	 *  获取流程中审批人 
	 *  (non-Javadoc)
	 * @see com.xinleju.platform.sys.org.service.PostUserService#getFlowPostData(java.util.Map, java.util.List)
	 */
	@Override
	public List<FlowAcPostDto> getFlowPostData(Map<String, Object> bussinesInfo,
			List<AcDto> flowAcInfo) throws Exception {
		//participantType="组织机构类型: 1: ,2: 岗位,3:角色,4:相对参与人 ，5:通用角色	
	    //participantScope="角色参与者计算范围: 11:指定人员，12:表单人员 ;21:指定岗位，22:表单岗位 ;31:指定角色（逻辑表示），311:集团，312：本公司，313：本部部门，
        //314：本项目，315:本分期 ，316:指定机构  ，317:表单机构,40 发起人,41：发起人直接领导，42：发起人部门领导，43：发起人一级部门领导，44：上一环节审批人顶级部门领导" ，51：通用角色值
		// TODO Auto-generated method stub
		List<FlowAcPostDto> flowAcPostDtos=new ArrayList<FlowAcPostDto>();
		//获取发起人; //start_user_id
		String start_user_id=(String) bussinesInfo.get("start_user_id");
		//项目; //flow_business_project_id
		String flow_business_project_id=(String) bussinesInfo.get("flow_business_project_id");
		//项目分期; //flow_business_project_branch_id
		String flow_business_project_branch_id=(String) bussinesInfo.get("flow_business_project_branch_id");
		//公司; //flow_business_company_id
		String flow_business_company_id=(String) bussinesInfo.get("flow_business_company_id");
		//部门; //flow_business_dept_id
		String flow_business_dept_id=(String) bussinesInfo.get("flow_business_dept_id");
		List<FlowPostParticipantDto> flowPostParticipantDtoDefualt=null;
		//处理环节
		for(AcDto acDto:flowAcInfo){
			FlowAcPostDto flowAcPostDto=new FlowAcPostDto();
			flowAcPostDto.setId(acDto.getId());
			String pareticipant=acDto.getParticipant();
			
			if(StringUtils.isEmpty(pareticipant)) {
				continue;
			}
			
			String actype=acDto.getAcType();
			if(flowPostParticipantDtoDefualt==null){
				List<FlowPostParticipantDto> flowPostParticipantDtos=new  ArrayList<FlowPostParticipantDto>();
				Map paramMap=new HashMap();
				paramMap.put("person_id", start_user_id);
				List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowUserOrgnazationPostUserVos(paramMap);
				OrgnazationPostUserVo  userDefualt=null;
				OrgnazationPostUserVo  userCompany=null;
				OrgnazationPostUserVo  userDept =null;
				OrgnazationPostUserVo  userBranch =null;
				OrgnazationPostUserVo  userGroup =null;
				for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
					if(vo.getIsDefault()!=null){
						userDefualt=vo;
					}
					if("branch".equals(vo.getOrgType())){
						userBranch=vo;
					}
					if("group".equals(vo.getOrgType())){
						userGroup=vo;
					}
									
					if("dept".equals(vo.getOrgType())){
						userDept=vo;		
					}
					if("company".equals(vo.getOrgType())){
						userCompany=vo;
					}				
				}
				if(userBranch!=null){
					FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(userBranch), FlowPostParticipantDto.class);
					flowPostParticipantDtos.add(flowPostParticipantDto);
				}else if(userGroup!=null){
					FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(userGroup), FlowPostParticipantDto.class);
					flowPostParticipantDtos.add(flowPostParticipantDto);
				}else if(userDept!=null){
					FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(userDept), FlowPostParticipantDto.class);
					flowPostParticipantDtos.add(flowPostParticipantDto);
				}else if(userCompany!=null){
					FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(userCompany), FlowPostParticipantDto.class);
					flowPostParticipantDtos.add(flowPostParticipantDto);
				}else if(userDefualt!=null){
					FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(userDefualt), FlowPostParticipantDto.class);
					flowPostParticipantDtos.add(flowPostParticipantDto);
				}
				flowAcPostDto.setFlowPostParticipantDtos(flowPostParticipantDtos);
				flowPostParticipantDtoDefualt=flowPostParticipantDtos;
				flowAcPostDtos.add(flowAcPostDto);
				continue;
			}
			
			
			
			//获取数据paramValue
			List<FlowPostParticipantDto> flowPostParticipantDtos=new  ArrayList<FlowPostParticipantDto>();
			if(StringUtils.isNotBlank(pareticipant) && !"[]".equals(pareticipant)){
				List<Map> list = JacksonUtils.fromJson(pareticipant, ArrayList.class,HashMap.class);
				for(Map map:list){
					String participantId=(String) map.get("participantId");
					String participantType=(String) map.get("participantType");
					String participantScope=(String) map.get("participantScope");
					if("1".equals(participantType)){
						if("11".equals(participantScope)){
							//指定人员
							String participant=(String) map.get("participantId");
							String paramValue=(String) map.get("paramValue");
							Map paramMap=new HashMap();
							paramMap.put("person_id", participant);
							paramMap.put("post_id", paramValue);
							List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowUserDefualtOrgnazationPostUserVos(paramMap);
							for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
								FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
								flowPostParticipantDtos.add(flowPostParticipantDto);
							}
						}else if("12".equals(participantScope)){
							//表单人员
							//TODO: 
							String key=(String) map.get("paramValue");
							if(StringUtils.isNotBlank(key)){
								String relationPersonIds=(String) bussinesInfo.get(key);
								if(StringUtils.isNotBlank(relationPersonIds)){
									String[] personIds=relationPersonIds.split(",");
									for(String p:personIds){
										Map paramMap=new HashMap();
										paramMap.put("person_id", p);
										List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowUserDefualtOrgnazationPostUserVos(paramMap);
										for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
											FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
											flowPostParticipantDtos.add(flowPostParticipantDto);
										}
										
									}
								}
							}
						}
					}
	                if("2".equals(participantType)){
	                	if("21".equals(participantScope)){
							//指定人员
							String paramValue=(String) map.get("participantId");
							Map paramMap=new HashMap();
							paramMap.put("post_id", paramValue);
							List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowPostUserOrgnazationPostUserVos(paramMap);
							for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
								FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
								flowPostParticipantDtos.add(flowPostParticipantDto);
							}
						}else if("22".equals(participantScope)){
							//表单岗位
							//TODO:
							String key=(String) map.get("paramValue");
							if(StringUtils.isNotBlank(key)){
								String relationPostIds=(String) bussinesInfo.get(key);
								if(StringUtils.isNotBlank(relationPostIds)){
									String[] postIds=relationPostIds.split(",");
									for(String p:postIds){
										Map paramMap=new HashMap();
										paramMap.put("post_id", p);
										List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowPostUserOrgnazationPostUserVos(paramMap);
										for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
											FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
											flowPostParticipantDtos.add(flowPostParticipantDto);
										}
									}
								}
							}
						}
					}
                    if("3".equals(participantType)){
						if("311".equals(participantScope)){
							Map paramMap=new HashMap();
							paramMap.put("role_id", participantId);
							List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowJTOrgnazationPostUserVos(paramMap);
							System.out.println("===="+JacksonUtils.toJson(orgnazationPostUserVos));
							for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
								FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
								flowPostParticipantDtos.add(flowPostParticipantDto);
							}
						}else if("312".equals(participantScope)){
							Map paramMap=new HashMap();
							paramMap.put("role_id", participantId);
							paramMap.put("company_id", flow_business_company_id);
							List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowCompanyOrgnazationPostUserVos(paramMap);
							System.out.println("===="+JacksonUtils.toJson(orgnazationPostUserVos));
							for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
								FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
								flowPostParticipantDtos.add(flowPostParticipantDto);
							}
						}else if("313".equals(participantScope)){
							Map paramMap=new HashMap();
							paramMap.put("role_id", participantId);
							paramMap.put("dept_id", flow_business_dept_id);
							List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowDeptOrgnazationPostUserVos(paramMap);
							String orgId=null;
							for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
							        if(orgId!=null && !orgId.equals(vo.getOrgId()))break;
									FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
									flowPostParticipantDtos.add(flowPostParticipantDto);
									orgId=vo.getOrgId();
							}
						}else if("314".equals(participantScope) || "315".equals(participantScope) ){
							String project_id=null;
							if("314".equals(participantScope)){
								project_id=flow_business_project_id;
							}else if("315".equals(participantScope)){
								project_id=flow_business_project_branch_id;
							}
							Map paramMap=new HashMap();
							paramMap.put("role_id", participantId);
							paramMap.put("project_id", project_id);
							List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowPjectOrgnazationPostUserVos(paramMap);
							for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
								FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
								flowPostParticipantDtos.add(flowPostParticipantDto);
							}
						}else if("316".equals(participantScope)){
							//指定组织
							String paramValue=(String) map.get("paramValue");
							Map paramMap=new HashMap();
							paramMap.put("role_id", participantId);
							paramMap.put("org_id", paramValue);
							List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowDirectOrgnazationPostUserVos(paramMap);
							for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
								FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
								flowPostParticipantDtos.add(flowPostParticipantDto);
							}
						}else if("317".equals(participantScope)){
							//表单传递组织
							//TODO:
						}
					}
					
                    if("4".equals(participantType)){
                    	if("40".equals(participantScope)){
							for(FlowPostParticipantDto flowPostParticipantDto: flowPostParticipantDtoDefualt){
								flowPostParticipantDtos.add(flowPostParticipantDto);
							}
						}else if("41".equals(participantScope)){
							Map paramMap=new HashMap();
							paramMap.put("start_id", start_user_id);
							List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowStartUserOrgnazationPostUserVos(paramMap);
							for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
								FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
								flowPostParticipantDtos.add(flowPostParticipantDto);
							}
						}else if("42".equals(participantScope)){
							Map paramMap=new HashMap();
							paramMap.put("start_id", start_user_id);
							List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowStartUserDeptOrgnazationPostUserVos(paramMap);
							for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
								FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
								flowPostParticipantDtos.add(flowPostParticipantDto);
							}
						}else if("43".equals(participantScope)){
							Map paramMap=new HashMap();
							paramMap.put("start_id", start_user_id);
							String  leaderId=	postUserDao.getFlowStartUserDeptOrgnazationLeaderId(paramMap);
							if(StringUtils.isNotBlank(leaderId)){
							    paramMap=new HashMap();
								paramMap.put("post_id", leaderId);
								List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowPostUserOrgnazationPostUserVos(paramMap);
								for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
									FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
									flowPostParticipantDtos.add(flowPostParticipantDto);
								}
							}
						}
					}
                    
                    
                    if("5".equals(participantType)){
                    	if("51".equals(participantScope)){
                    		List<String> commonRoleScopeIds=new ArrayList<String>();
                    		if(StringUtils.isNotBlank(flow_business_project_id)){
                    			commonRoleScopeIds.add(flow_business_project_id);
                    		}
                    		if(StringUtils.isNotBlank(flow_business_project_branch_id)){
                    			commonRoleScopeIds.add(flow_business_project_branch_id);
                    		}
                    		if(StringUtils.isNotBlank(flow_business_company_id)){
                    			commonRoleScopeIds.add(flow_business_company_id);
                    		}
                    		if(StringUtils.isNotBlank(flow_business_dept_id)){
                    			commonRoleScopeIds.add(flow_business_dept_id);
                    		}
                    		String paramValue=(String) map.get("paramValue");
							Map paramMap=new HashMap();
							paramMap.put("commonRoleId", participantId);
							paramMap.put("start_user_id", start_user_id);
							if(commonRoleScopeIds!=null && commonRoleScopeIds.size()>0){
								paramMap.put("commonRoleScopeIds", commonRoleScopeIds);
							}
			
							List<CommonRolePostUserVo> commonRolePostUserVos=	postUserDao.getFlowCommonRolePostUserVos(paramMap);
							List<String> userIds=new ArrayList<String>();
							List<String> userRelationPostIds=new ArrayList<String>();
							List<String> postIds=new ArrayList<String>();
							for(CommonRolePostUserVo vo:commonRolePostUserVos){
								if(StringUtils.isNotEmpty(vo.getUserId())){
									userIds.add(vo.getUserId());
									userRelationPostIds.add(vo.getPostId());
									continue;
								}
								if(StringUtils.isNotEmpty(vo.getPostId())){
									postIds.add(vo.getPostId());
								}
							}
							//获取用户下的岗位人员
							if(userIds!=null && userIds.size()>0){
								Map userparamMap=new HashMap();
								userparamMap.put("userIds", userIds);
								userparamMap.put("userRelationPostIds", userRelationPostIds);
								List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowCommonRolePostUser_UserVos(userparamMap);
								for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
									FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
									flowPostParticipantDtos.add(flowPostParticipantDto);
								}
							}
							
							//获取 岗位下的人员 
							
							if(postIds!=null && postIds.size()>0){
								Map postparamMap=new HashMap();
								postparamMap.put("postIds", postIds);
								List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowCommonRolePostUser_PostVos(postparamMap);
								for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
									FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
									flowPostParticipantDtos.add(flowPostParticipantDto);
								}
							}
							
						}
					}
                    
				}
				flowAcPostDto.setFlowPostParticipantDtos(flowPostParticipantDtos);
			}else{	
				flowAcPostDto.setFlowPostParticipantDtos(flowPostParticipantDtos);
			}
			flowAcPostDtos.add(flowAcPostDto);
		}		
	
		return flowAcPostDtos;
	}
	@Override
	public List<FlowAcPostDto> getFlowPostDataNew(Map<String, Object> bussinesInfo,
			List<AcDto> flowAcInfo) throws Exception {
		//participantType="组织机构类型: 1: ,2: 岗位,3:角色,4:相对参与人 ，5:通用角色	
	    //participantScope="角色参与者计算范围: 11:指定人员，12:表单人员 ;21:指定岗位，22:表单岗位 ;31:指定角色（逻辑表示），311:集团，312：本公司，313：本部部门，
        //314：本项目，315:本分期 ，316:指定机构  ，317:表单机构,40 发起人,41：发起人直接领导，42：发起人部门领导，43：发起人一级部门领导，44：上一环节审批人顶级部门领导" ，51：通用角色值
		// TODO Auto-generated method stub
		List<FlowAcPostDto> flowAcPostDtos=new ArrayList<FlowAcPostDto>();
		//获取发起人; //start_user_id
		String start_user_id=(String) bussinesInfo.get("start_user_id");
		//项目; //flow_business_project_id
		String flow_business_project_id=(String) bussinesInfo.get("flow_business_project_id");
		//项目分期; //flow_business_project_branch_id
		String flow_business_project_branch_id=(String) bussinesInfo.get("flow_business_project_branch_id");
		//公司; //flow_business_company_id
		String flow_business_company_id=(String) bussinesInfo.get("flow_business_company_id");
		//部门; //flow_business_dept_id
		String flow_business_dept_id=(String) bussinesInfo.get("flow_business_dept_id");
		List<FlowPostParticipantDto> flowPostParticipantDtoDefualt=null;
		//处理环节
		for(AcDto acDto:flowAcInfo){
			FlowAcPostDto flowAcPostDto=new FlowAcPostDto();
			flowAcPostDto.setId(acDto.getId());
			String pareticipant=acDto.getParticipant();
			if (StringUtils.isNotBlank(pareticipant) && !"[]".equals(pareticipant)) {
				List<Map<String, String>> list = JacksonUtils.fromJson(pareticipant, ArrayList.class, HashMap.class);
				for (Map<String, String> map : list) {
					String participantType = (String) map.get("participantType");
					String participantScope = (String) map.get("participantScope");
					if ("4".equals(participantType)) {
						List<FlowPostParticipantDto> flowPostParticipantDtos = new ArrayList<FlowPostParticipantDto>();
						if ("40".equals(participantScope)) {
							Map<String, Object> paramMap = new HashMap<String, Object>();
							paramMap.put("person_id", start_user_id);
							List<OrgnazationPostUserVo> orgnazationPostUserVos = postUserDao.getFlowUserOrgnazationPostUserVos(paramMap);
							OrgnazationPostUserVo userDefualt = null;
							OrgnazationPostUserVo userCompany = null;
							OrgnazationPostUserVo userDept = null;
							OrgnazationPostUserVo userBranch = null;
							OrgnazationPostUserVo userGroup = null;
							for (OrgnazationPostUserVo vo : orgnazationPostUserVos) {
								if (vo.getIsDefault() != null) {
									userDefualt = vo;
								}
								if ("branch".equals(vo.getOrgType())) {
									userBranch = vo;
								}
								if ("group".equals(vo.getOrgType())) {
									userGroup = vo;
								}

								if ("dept".equals(vo.getOrgType())) {
									userDept = vo;
								}
								if ("company".equals(vo.getOrgType())) {
									userCompany = vo;
								}
							}
							if (userBranch != null) {
								FlowPostParticipantDto flowPostParticipantDto = JacksonUtils
										.fromJson(JacksonUtils.toJson(userBranch), FlowPostParticipantDto.class);
								flowPostParticipantDtos.add(flowPostParticipantDto);
							} else if (userGroup != null) {
								FlowPostParticipantDto flowPostParticipantDto = JacksonUtils
										.fromJson(JacksonUtils.toJson(userGroup), FlowPostParticipantDto.class);
								flowPostParticipantDtos.add(flowPostParticipantDto);
							} else if (userDept != null) {
								FlowPostParticipantDto flowPostParticipantDto = JacksonUtils
										.fromJson(JacksonUtils.toJson(userDept), FlowPostParticipantDto.class);
								flowPostParticipantDtos.add(flowPostParticipantDto);
							} else if (userCompany != null) {
								FlowPostParticipantDto flowPostParticipantDto = JacksonUtils
										.fromJson(JacksonUtils.toJson(userCompany), FlowPostParticipantDto.class);
								flowPostParticipantDtos.add(flowPostParticipantDto);
							} else if (userDefualt != null) {
								FlowPostParticipantDto flowPostParticipantDto = JacksonUtils
										.fromJson(JacksonUtils.toJson(userDefualt), FlowPostParticipantDto.class);
								flowPostParticipantDtos.add(flowPostParticipantDto);
							}
							flowAcPostDto.setFlowPostParticipantDtos(flowPostParticipantDtos);
						} else if ("41".equals(participantScope)) {
							Map paramMap = new HashMap();
							paramMap.put("start_id", start_user_id);
							List<OrgnazationPostUserVo> orgnazationPostUserVos = postUserDao.getFlowStartUserOrgnazationPostUserVos(paramMap);
							for (OrgnazationPostUserVo vo : orgnazationPostUserVos) {
								FlowPostParticipantDto flowPostParticipantDto = JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
								flowPostParticipantDtos.add(flowPostParticipantDto);
							}
						} else if ("42".equals(participantScope)) {
							Map paramMap = new HashMap();
							paramMap.put("start_id", start_user_id);
							List<OrgnazationPostUserVo> orgnazationPostUserVos = postUserDao
									.getFlowStartUserDeptOrgnazationPostUserVos(paramMap);
							for (OrgnazationPostUserVo vo : orgnazationPostUserVos) {
								FlowPostParticipantDto flowPostParticipantDto = JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
								flowPostParticipantDtos.add(flowPostParticipantDto);
							}
						} else if ("43".equals(participantScope)) {
							Map paramMap = new HashMap();
							paramMap.put("start_id", start_user_id);
							String leaderId = postUserDao.getFlowStartUserDeptOrgnazationLeaderId(paramMap);
							if (StringUtils.isNotBlank(leaderId)) {
								paramMap = new HashMap();
								paramMap.put("post_id", leaderId);
								List<OrgnazationPostUserVo> orgnazationPostUserVos = postUserDao
										.getFlowPostUserOrgnazationPostUserVos(paramMap);
								for (OrgnazationPostUserVo vo : orgnazationPostUserVos) {
									FlowPostParticipantDto flowPostParticipantDto = JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
									flowPostParticipantDtos.add(flowPostParticipantDto);
								}
							}
						}
						flowPostParticipantDtoDefualt = flowPostParticipantDtos;
						flowAcPostDto.setFlowPostParticipantDtos(flowPostParticipantDtos);
						flowAcPostDtos.add(flowAcPostDto);
					}
				}
			}
	  }
	 if(flowPostParticipantDtoDefualt==null){
		for(AcDto acDto:flowAcInfo){
			FlowAcPostDto flowAcPostDto=new FlowAcPostDto();
			flowAcPostDto.setId(acDto.getId());
			String pareticipant=acDto.getParticipant();
			String actype=acDto.getAcType();
			//获取数据paramValue
			List<FlowPostParticipantDto> flowPostParticipantDtos=new  ArrayList<FlowPostParticipantDto>();
			if(StringUtils.isNotBlank(pareticipant) && !"[]".equals(pareticipant)){
				List<Map> list = JacksonUtils.fromJson(pareticipant, ArrayList.class,HashMap.class);
				for(Map map:list){
					String participantId=(String) map.get("participantId");
					String participantType=(String) map.get("participantType");
					String participantScope=(String) map.get("participantScope");
					if("1".equals(participantType)){
						if("11".equals(participantScope)){
							//指定人员
							String participant=(String) map.get("participantId");
							String paramValue=(String) map.get("paramValue");
							Map paramMap=new HashMap();
							paramMap.put("person_id", participant);
							paramMap.put("post_id", paramValue);
							List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowUserDefualtOrgnazationPostUserVos(paramMap);
							for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
								FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
								flowPostParticipantDtos.add(flowPostParticipantDto);
							}
						}else if("12".equals(participantScope)){
							//表单人员
							//TODO: 
							String key=(String) map.get("paramValue");
							if(StringUtils.isNotBlank(key)){
								String relationPersonIds=(String) bussinesInfo.get(key);
								if(StringUtils.isNotBlank(relationPersonIds)){
									String[] personIds=relationPersonIds.split(",");
									for(String p:personIds){
										Map paramMap=new HashMap();
										paramMap.put("person_id", p);
										List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowUserDefualtOrgnazationPostUserVos(paramMap);
										for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
											FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
											flowPostParticipantDtos.add(flowPostParticipantDto);
										}
										
									}
								}
							}
						}
					}
	                if("2".equals(participantType)){
	                	if("21".equals(participantScope)){
							//指定人员
							String paramValue=(String) map.get("participantId");
							Map paramMap=new HashMap();
							paramMap.put("post_id", paramValue);
							List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowPostUserOrgnazationPostUserVos(paramMap);
							for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
								FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
								flowPostParticipantDtos.add(flowPostParticipantDto);
							}
						}else if("22".equals(participantScope)){
							//表单岗位
							//TODO:
							String key=(String) map.get("paramValue");
							if(StringUtils.isNotBlank(key)){
								String relationPostIds=(String) bussinesInfo.get(key);
								if(StringUtils.isNotBlank(relationPostIds)){
									String[] postIds=relationPostIds.split(",");
									for(String p:postIds){
										Map paramMap=new HashMap();
										paramMap.put("post_id", p);
										List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowPostUserOrgnazationPostUserVos(paramMap);
										for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
											FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
											flowPostParticipantDtos.add(flowPostParticipantDto);
										}
									}
								}
							}
						}
					}
                    if("3".equals(participantType)){
						if("311".equals(participantScope)){
							Map paramMap=new HashMap();
							paramMap.put("role_id", participantId);
							List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowJTOrgnazationPostUserVos(paramMap);
							System.out.println("===="+JacksonUtils.toJson(orgnazationPostUserVos));
							for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
								FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
								flowPostParticipantDtos.add(flowPostParticipantDto);
							}
						}else if("312".equals(participantScope)){
							Map paramMap=new HashMap();
							paramMap.put("role_id", participantId);
							paramMap.put("company_id", flow_business_company_id);
							List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowCompanyOrgnazationPostUserVos(paramMap);
							System.out.println("===="+JacksonUtils.toJson(orgnazationPostUserVos));
							for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
								FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
								flowPostParticipantDtos.add(flowPostParticipantDto);
							}
						}else if("313".equals(participantScope)){
							Map paramMap=new HashMap();
							paramMap.put("role_id", participantId);
							paramMap.put("dept_id", flow_business_dept_id);
							List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowDeptOrgnazationPostUserVos(paramMap);
							String orgId=null;
							for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
							        if(orgId!=null && !orgId.equals(vo.getOrgId()))break;
									FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
									flowPostParticipantDtos.add(flowPostParticipantDto);
									orgId=vo.getOrgId();
							}
						}else if("314".equals(participantScope) || "315".equals(participantScope) ){
							String project_id=null;
							if("314".equals(participantScope)){
								project_id=flow_business_project_id;
							}else if("315".equals(participantScope)){
								project_id=flow_business_project_branch_id;
							}
							Map paramMap=new HashMap();
							paramMap.put("role_id", participantId);
							paramMap.put("project_id", project_id);
							List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowPjectOrgnazationPostUserVos(paramMap);
							for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
								FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
								flowPostParticipantDtos.add(flowPostParticipantDto);
							}
						}else if("316".equals(participantScope)){
							//指定组织
							String paramValue=(String) map.get("paramValue");
							Map paramMap=new HashMap();
							paramMap.put("role_id", participantId);
							paramMap.put("org_id", paramValue);
							List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowDirectOrgnazationPostUserVos(paramMap);
							for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
								FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
								flowPostParticipantDtos.add(flowPostParticipantDto);
							}
						}else if("317".equals(participantScope)){
							//表单传递组织
							//TODO:
						}
					}
                    if("5".equals(participantType)){
                    	if("51".equals(participantScope)){
                    		List<String> commonRoleScopeIds=new ArrayList<String>();
                    		if(StringUtils.isNotBlank(flow_business_project_id)){
                    			commonRoleScopeIds.add(flow_business_project_id);
                    		}
                    		if(StringUtils.isNotBlank(flow_business_project_branch_id)){
                    			commonRoleScopeIds.add(flow_business_project_branch_id);
                    		}
                    		if(StringUtils.isNotBlank(flow_business_company_id)){
                    			commonRoleScopeIds.add(flow_business_company_id);
                    		}
                    		if(StringUtils.isNotBlank(flow_business_dept_id)){
                    			commonRoleScopeIds.add(flow_business_dept_id);
                    		}
                    		String paramValue=(String) map.get("paramValue");
							Map paramMap=new HashMap();
							paramMap.put("commonRoleId", participantId);
							paramMap.put("start_user_id", start_user_id);
							if(commonRoleScopeIds!=null && commonRoleScopeIds.size()>0){
								paramMap.put("commonRoleScopeIds", commonRoleScopeIds);
							}
			
							List<CommonRolePostUserVo> commonRolePostUserVos=	postUserDao.getFlowCommonRolePostUserVos(paramMap);
							List<String> userIds=new ArrayList<String>();
							List<String> userRelationPostIds=new ArrayList<String>();
							List<String> postIds=new ArrayList<String>();
							for(CommonRolePostUserVo vo:commonRolePostUserVos){
								if(StringUtils.isNotEmpty(vo.getUserId())){
									userIds.add(vo.getUserId());
									userRelationPostIds.add(vo.getPostId());
									continue;
								}
								if(StringUtils.isNotEmpty(vo.getPostId())){
									postIds.add(vo.getPostId());
								}
							}
							//获取用户下的岗位人员
							if(userIds!=null && userIds.size()>0){
								Map userparamMap=new HashMap();
								userparamMap.put("userIds", userIds);
								userparamMap.put("userRelationPostIds", userRelationPostIds);
								List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowCommonRolePostUser_UserVos(userparamMap);
								for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
									FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
									flowPostParticipantDtos.add(flowPostParticipantDto);
								}
							}
							
							//获取 岗位下的人员 
							
							if(postIds!=null && postIds.size()>0){
								Map postparamMap=new HashMap();
								postparamMap.put("postIds", postIds);
								List<OrgnazationPostUserVo> orgnazationPostUserVos=	postUserDao.getFlowCommonRolePostUser_PostVos(postparamMap);
								for(OrgnazationPostUserVo vo:orgnazationPostUserVos){
									FlowPostParticipantDto flowPostParticipantDto=JacksonUtils.fromJson(JacksonUtils.toJson(vo), FlowPostParticipantDto.class);
									flowPostParticipantDtos.add(flowPostParticipantDto);
								}
							}
							
						}
					}
                    
				}
				flowAcPostDto.setFlowPostParticipantDtos(flowPostParticipantDtos);
			}else{	
				flowAcPostDto.setFlowPostParticipantDtos(flowPostParticipantDtos);
			}
			flowAcPostDtos.add(flowAcPostDto);
		}		
	}
		return flowAcPostDtos;
	}
	//批量保存post_user和role_user
	@Override
	public Integer savePostUserBatch(Map<String,Object> param) throws Exception {
		try {
			//先删除之前的再添加新增
			String userId=param.get("userId").toString();
			postUserDao.delPostUserAndRoleUser(userId);
			List<Map<String,Object>> list=(List<Map<String,Object>>)param.get("list");
			//查询是否存在主岗
			Integer isdefault=postUserDao.selectDefault(param);
			boolean ifDefault=isdefault!=null&&isdefault>0?true:false;//ture有主岗，false无主岗
			Integer newFrist=null;
			for (int i = 0; i < list.size(); i++) {
				Map<String,Object> map=list.get(i);
				if(!map.containsKey("id")||map.get("id")==null||StringUtils.isBlank(map.get("id").toString())){
					map.put("id", IDGenerator.getUUID());
					newFrist=i;
				}
				if(map.get("isDefault")!=null&&"1".equals(map.get("isDefault").toString())){
					ifDefault=true;
				}
			}
			if(!ifDefault){//页面第一个选中的设为主岗
				if(newFrist!=null){
					Map<String,Object> map=list.get(newFrist);
					map.put("isDefault", 1);
				}
			}
			postUserDao.savePostUserAndRoleUser(list);
			return 1;
		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
	}

}
