package com.xinleju.platform.sys.org.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.xinleju.platform.base.annotation.Description;
import com.xinleju.platform.base.service.impl.BaseServiceImpl;
import com.xinleju.platform.base.utils.LoginUtils;
import com.xinleju.platform.base.utils.SecurityUserBeanInfo;
import com.xinleju.platform.sys.org.dao.UserDao;
import com.xinleju.platform.sys.org.dto.OrgnazationDto;
import com.xinleju.platform.sys.org.dto.OrgnazationNodeDto;
import com.xinleju.platform.sys.org.dto.UserDto;
import com.xinleju.platform.sys.org.entity.Orgnazation;
import com.xinleju.platform.sys.org.entity.User;
import com.xinleju.platform.sys.org.service.OrgnazationService;
import com.xinleju.platform.sys.org.service.UserService;
import com.xinleju.platform.sys.org.utils.EncryptionUtils;
import com.xinleju.platform.sys.security.dto.AuthenticationDto;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * @author sy
 * 
 * 
 */

@Service
public class UserServiceImpl extends  BaseServiceImpl<String,User> implements UserService{
	

	@Autowired
	private UserDao userDao;
	
	@Autowired
	private OrgnazationService orgnazationService;
	

	/**
	 * 根据组织结构查询所有人
	 * @param parentId
	 * @return
	 */
	@Override
	public List<UserDto> queryUserListByOrgId(Map<String, Object> paramater)  throws Exception{
		return userDao.queryUserListByOrgId(paramater);
	}

	@Override
	@Description(instruction = "根据岗位查询用户列表")
	public List<UserDto> queryUserListByPostId(Map<String, Object> paramater) throws Exception {
		// TODO Auto-generated method stub
		return userDao.queryUserListByPostId(paramater);
	}
	
	@Override
	@Description(instruction = "根据角色查询用户列表")
	public List<UserDto> queryUserListByRoleId(Map<String, Object> paramater) throws Exception {
		// TODO Auto-generated method stub
		return userDao.queryUserListByRoleId(paramater);
	}
	@Override
	public List<UserDto> queryRoleUserByRoleId(Map<String, Object> paramater) throws Exception {
		return userDao.queryRoleUserByRoleId(paramater);
	}
	
	@Override
	public List<OrgnazationNodeDto> queryAllUserList(Map<String,Object> map) throws Exception {
		return userDao.queryAllUserList(map);
		
	}
	
	@Override
	public List<UserDto> queryAllUserListReturnUser(Map<String,Object> map) throws Exception {
		return userDao.queryAllUserListReturnUser(map);
		
	}
	@Override
	public List<Map<String,String>> queryUsersByIds(Map map)throws Exception{
		return userDao.queryUsersByIds(map);
	}
	/**
	 * 根据IDs获取人员DTO
	 * @param paramater
	 * @return
	 */
	@Override
	public List<UserDto> getUserByUserIds(Map map)throws Exception{
		String ids = (String)map.get("userIds");
		String[] idsList = ids.split(",");
		Map mapCon = new HashMap<String,Object>();
		mapCon.put("ids", idsList);
		return userDao.getUserByUserIds(mapCon);
	}
	
	/**
	 * 根据人员姓名获取人员DTO
	 * @param paramater
	 * @return
	 */
	@Override
	public List<UserDto> getUserByUserName(Map map)throws Exception{
		return userDao.getUserByUserName(map);
	}
	
	/**
	 * 根据loginNames获取人员DTO
	 * @param paramater
	 * @return
	 */
	@Override
	public List<UserDto> getUserByUserLoginNames(Map map)throws Exception{
		String loginNames = (String)map.get("loginNames");
		String[] loginNamesList = loginNames.split(",");
		Map mapCon = new HashMap<String,Object>();
		mapCon.put("loginNames", loginNamesList);
		return userDao.getUserByUserLoginNames(mapCon);
	}
	/**
	 * 批量保存用户排序号
	 * @param paramater
	 * @return
	 */
	public Integer saveUsersSort(Map map)throws Exception{
		return userDao.saveUsersSort(map);
	}
	/**
	 * 获取用户详情
	 * @param paramater
	 * @return
	 */
	public UserDto selectUserInfoById(Map map)throws Exception{
		return userDao.selectUserInfoById(map);
	}
	/**
	 * 校验登录名是否重复
	 * @param paramater
	 * @return
	 */
	public Integer checkLoginName(Map map)throws Exception{
		return userDao.checkLoginName(map);
	}

	@Override
	public AuthenticationDto getOrgInfoByUserIdOrOrgId(Map map) throws Exception {
		AuthenticationDto authenticationDto = new AuthenticationDto();
		if(null != map.get("userId") && !"".equals((String)map.get("userId"))){
			User user = userDao.getObjectById((String)map.get("userId"));
			map.put("orgId", user.getBelongOrgId());
		}else{
			if(null == map.get("orgId") || "".equals((String)map.get("orgId"))){
				return authenticationDto;
			}
		}
		
		//当前用户的所属组织
		//获取当前用户的组织机构
		List<OrgnazationDto> orgnazationDtoList = orgnazationService.queryAuthOrgListByOrgId(map);
		
		if(null != orgnazationDtoList && orgnazationDtoList.size()>0){
			
			//直属组织
			OrgnazationDto orgnazationDto= orgnazationDtoList.get(orgnazationDtoList.size()-1);
			//顶级组织
			OrgnazationDto topOrgnazationDto= orgnazationDtoList.get(0);
			//公司
			List<OrgnazationDto> companyList = new ArrayList<OrgnazationDto>();
			//部门
			List<OrgnazationDto> deptList = new ArrayList<OrgnazationDto>();
			for(OrgnazationDto orgDto:orgnazationDtoList){
				if(orgDto.getType().equals("company") || orgDto.getType().equals("zb")){
					companyList.add(orgDto);
				}
				if(orgDto.getType().equals("dept")){
					deptList.add(orgDto);
				}
			}
			//设置当前用户所在组织的类型
			authenticationDto.setOrganizationType(orgnazationDto.getType());
			//设置当前用户所在的组织，分期、项目、部门、顶级部门、公司、顶级公司
			if(orgnazationDto.getType().equals("branch")){
				//设置分期
				authenticationDto.setBranchDto(orgnazationDto);
				//设置项目
				authenticationDto.setGroupDto(orgnazationDtoList.get(orgnazationDtoList.size()-2));
				//设置直属公司
				authenticationDto.setDirectCompanyDto(companyList.get(companyList.size()-1));
				//设置顶级公司
				authenticationDto.setTopCompanyDto(companyList.get(0));
				//顶级公司也可以如下设置
				//authenticationDto.setTopCompanyDto(topOrgnazationDto);
			}else if(orgnazationDto.getType().equals("group")){
				//设置项目
				authenticationDto.setGroupDto(orgnazationDto);
				//设置直属公司
				authenticationDto.setDirectCompanyDto(companyList.get(companyList.size()-1));
				//设置顶级公司
				authenticationDto.setTopCompanyDto(companyList.get(0));
			}else if(orgnazationDto.getType().equals("dept")){
				//设置直属部门
				authenticationDto.setDirectDeptDto(orgnazationDto);
				//设置顶级部门
				authenticationDto.setTopDeptDto(deptList.get(0));
				//设置直属公司
				authenticationDto.setDirectCompanyDto(companyList.get(companyList.size()-1));
				//设置顶级公司
				authenticationDto.setTopCompanyDto(companyList.get(0));
			}else if(orgnazationDto.getType().equals("company")){
				//设置直属公司
				authenticationDto.setDirectCompanyDto(orgnazationDto);
				//设置顶级公司
				authenticationDto.setTopCompanyDto(topOrgnazationDto);
			}else if(orgnazationDto.getType().equals("zb")){
				//设置直属公司
				authenticationDto.setDirectCompanyDto(orgnazationDto);
				//设置顶级公司
				authenticationDto.setTopCompanyDto(topOrgnazationDto);
			}
		}
		return authenticationDto;
	}
	
	/**
	 *  根据岗位Id获取userDto
	 * @return
	 */
	@Override
	public Map<String, Object> getUserListByPostIds(Map<String, Object> paramater) throws Exception {
		String[] postIds = paramater.get("postIds").toString().split(",");
		Map<String,Object> res=new HashMap<String,Object>();
		for (int i = 0; i < postIds.length; i++) {
			Map<String,Object> mapCon=new HashMap<String,Object>();
			mapCon.put("postId", postIds[i]);
			List<UserDto> listUserDto = this.queryUserListByPostId(mapCon);
			res.put(postIds[i],listUserDto);
		}
		return res;
	}
	
	/**
	 * 获取指定组织下的人员
	 * @return
	 */
	@Override
	public Map<String,Object> getUserListByOrgId(Map<String, Object> param) throws Exception {
		String[] orgIds=param.get("orgIds").toString().split(",");
		Boolean isLeaf=(Boolean)param.get("isLeaf");
		//查询出来所有组织机构
		List<Orgnazation> list_org  = orgnazationService.queryAllOrgListReturnOrg();

		Map<String,Object> map = new HashMap<String,Object>();
		//查询出来所有人
		List<UserDto> list_user  = this.queryAllUserListReturnUser(map);
		
		Map<String,Object> res=new HashMap<String,Object>();
		if(isLeaf){//包含下级
			for (int i = 0; i < orgIds.length; i++) {
				Orgnazation orgnazation =  orgnazationService.getObjectById(orgIds[i]);
				//包含下级组织机构的list
				List<Orgnazation> list_result = new ArrayList<Orgnazation>();
				//返回的人员List
				List<UserDto> listUserDto = new ArrayList<UserDto>();
				if(null!=orgnazation){
					list_result.add(orgnazation);
					list_result = getOrgList(list_result,orgnazation,list_org);
				}
				for(Orgnazation o:list_result){
					for(UserDto u:list_user){
						if(u.getBelongOrgId().equals(o.getId())){
							listUserDto.add(u);
						}
					}
				}
				res.put(orgIds[i],listUserDto);
			}
		}else{//不包含下级
			for (int i = 0; i < orgIds.length; i++) {
				//返回的人员List
				List<UserDto> listUserDto = new ArrayList<UserDto>();
				for(UserDto u:list_user){
					if(u.getBelongOrgId().equals(orgIds[i])){
						listUserDto.add(u);
					}
				}
				res.put(orgIds[i],listUserDto);
			}
		}
		return res;
	}
	
	/**
	 * 递归查询组织结构子节点
	 * @param orgnazationNodeDto
	 * @return
	 */
	public List<Orgnazation> getOrgList(List<Orgnazation> list_result , Orgnazation orgnazation,List<Orgnazation> list_org) throws Exception{
		List<Orgnazation> list1  = queryOrgChildNodeReturnOrg(orgnazation.getId(),list_org);
		list_result.addAll(list1);
		if(list1!=null && list1.size()>0){
			for(Orgnazation orgnazation1:list1){
				getOrgList(list_result,orgnazation1,list_org);
			}
		}else{
			return list_result;
		}
		return list_result;
	}

	//查询组织结构子节点（代替从数据库中进行查询）
	public List<Orgnazation> queryOrgChildNodeReturnOrg(String parentId,List<Orgnazation> list_org){
		List<Orgnazation> listOrgChildNode = new ArrayList<Orgnazation>();
		for(Orgnazation orgNodeDto:list_org){
			if(parentId.equals(orgNodeDto.getParentId())){
				listOrgChildNode.add(orgNodeDto);
			}
		}
		return listOrgChildNode;
	}
	
	/**
	 * 根据角色id获取用户
	 * @return
	 */
	public Map<String, Object> getUserListByRoleIds(Map<String, Object> paramater) throws Exception {
		String[] roleIds = paramater.get("roleIds").toString().split(",");
		Map<String,Object> res=new HashMap<String,Object>();
		for (int i = 0; i < roleIds.length; i++) {
			Map<String,Object> mapCon=new HashMap<String,Object>();
			mapCon.put("roleId", roleIds[i]);
			List<UserDto> listUserDto = this.queryUserListByRoleId(mapCon);
			res.put(roleIds[i],listUserDto);
		}
		return res;
	}
	/**
	 *根据搜索条件查询用户及其岗位
	 * @param userInfo
	 * @return
	 */
	@Override
	public List<Map<String, Object>> queryUserAndPostsByUname(Map<String, Object> paramater) throws Exception {
		return userDao.queryUserAndPostsByUname(paramater);
	}

	@Override
	public String resetPassword(String sign ,String password,String loginName) throws Exception {
		try {
			//重置全部用户密码
			if(sign.equals("1")){
				Map map = new HashMap<>();
				map.put("sidx", "id");
				map.put("sord", "desc");
				List<User> userList = userDao.queryList(map);
				for(User user : userList){
					user.setPassword(EncryptionUtils.getEncryptInfo(user.getLoginName(),password));
					userDao.update(user);
				}
			}else if(sign.equals("0")){
				//重置单个用户密码
				Map map = new HashMap<>();
				map.put("loginName", loginName);
				
				List<User> userList = userDao.queryList(map);
				for(User user : userList){
					user.setPassword(EncryptionUtils.getEncryptInfo(user.getLoginName(),password));
					userDao.update(user);
				}
			}

			return "重置成功";
		} catch (Exception e) {
			return "重置失败";
		}
	}
	/**
	 * 获取多个人员岗位id
	 * @param paramater
	 * @return
	 */
	@Override
	public List<String> selectPuIds(Map<String, Object> paramater)throws Exception{
		return userDao.selectPuIds(paramater);
	}
	/**
	 * 获取多个人员
	 * @param paramater
	 * @return
	 */
	@Override
	public List<Map<String, String>> queryPostUsersByIds(Map<String, Object> paramater)throws Exception{
		return userDao.queryPostUsersByIds(paramater);
	}
}
