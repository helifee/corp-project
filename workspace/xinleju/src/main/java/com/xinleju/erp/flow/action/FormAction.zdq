package com.xinleju.erp.flow.action;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;

import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.base.app.config.App;
import com.xinleju.erp.base.app.exception.AppException;
import com.xinleju.erp.base.utils.StringHelper;
import com.xinleju.erp.flow.dao.impl.WpDAO;
import com.xinleju.erp.flow.flowutils.bean.BizDataDTO;
import com.xinleju.erp.flow.flowutils.bean.FiBean;
import com.xinleju.erp.flow.flowutils.bean.FiInfoBean;
import com.xinleju.erp.flow.flowutils.bean.FiStepsBean;
import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.flow.flowutils.bean.GvBean;
import com.xinleju.erp.flow.flowutils.bean.Gvs;
import com.xinleju.erp.flow.flowutils.bean.OpRelationInsBean;
import com.xinleju.erp.flow.flowutils.bean.SimpleResult;
import com.xinleju.erp.flow.flowutils.bean.StartFiResult;
import com.xinleju.erp.flow.flowutils.bean.StepsHistoryAndOpRelactionBean;
import com.xinleju.erp.flow.flowutils.bean.WiBean;
import com.xinleju.erp.flow.flowutils.bean.WithdrawResult;
import com.xinleju.erp.flow.flowutils.bean.WpBean;
import com.xinleju.erp.flow.flowutils.utils.OpType;
import com.xinleju.erp.flow.flowutils.utils.WsConstant;
import com.xinleju.erp.flow.frameapi.domain.User;
import com.xinleju.erp.flow.models.Fi;
import com.xinleju.erp.flow.models.RelationFi;
import com.xinleju.erp.flow.models.RelationHref;
import com.xinleju.erp.flow.models.Upload;
import com.xinleju.erp.flow.models.UserReadLog;
import com.xinleju.erp.flow.models.Wi;
import com.xinleju.erp.flow.models.Wp;
import com.xinleju.erp.flow.service.FileService;
import com.xinleju.erp.flow.service.FlowService;
import com.xinleju.erp.flow.service.FormFlowService;
import com.xinleju.erp.flow.service.GvsService;
import com.xinleju.erp.flow.service.IRelationFiService;
import com.xinleju.erp.flow.service.IRelationHrefService;
import com.xinleju.erp.flow.service.IUserNoteService;
import com.xinleju.erp.flow.service.IUserReadService;
import com.xinleju.erp.flow.service.api.FiStatusChangeService;
import com.xinleju.erp.flow.service.api.FlowServerService;
import com.xinleju.erp.flow.service.api.OrgnAPIService;
import com.xinleju.erp.flow.service.api.SmBizDataService;
import com.xinleju.erp.flow.service.api.SmObjectService;
import com.xinleju.erp.flow.service.api.extend.BaseAPI;
import com.xinleju.erp.flow.service.api.extend.dto.RoleDTO;
import com.xinleju.erp.flow.service.api.extend.dto.UserDTO;
import com.xinleju.erp.flow.service.api.utils.ApiMsgUtils;
import com.xinleju.erp.flow.service.api.utils.ApiUtils;
import com.xinleju.erp.flow.utils.FlowConstant;
import com.xinleju.erp.flow.utils.FlowExceptionUtils;
import com.xinleju.erp.flow.utils.HttpRequestDeviceUtils;
import com.xinleju.erp.flow.utils.LoginInfoUtils;
import com.xinleju.erp.form.utils.DbType;
import com.xinleju.erp.frame.dao.FlowAuthDao;
import com.xinleju.erp.frame.dao.UserDao;
import com.xinleju.erp.frame.models.PartyType;
import com.xinleju.erp.frame.models.ServiceObjectDefine;
import com.xinleju.erp.frame.service.UserService;
import com.xinleju.erp.frame.utils.ExceptionUtils;
import com.xinleju.erp.thirdpart.oa.xinyuan.impl.OaMsgServiceImpl;

/**
 * 
 * 版权：(C) 版权所有 2000-2014 上海天好电子商务有限公司苏州分公司
 * 流程操作入口
 * @author   zhongjun
 * @version  $Id$
 * @since
 * @see
 */
public class FormAction extends BaseAction{
    
    private static Logger log = Logger.getLogger(FormAction.class);
    
    /**
     * 流程编码
     */
    private String flowCode;
    /**
     * 业务对象id
     */
    private Long sodId;
    
    /**
     * 业务id
     */
    private String bizId;
    /**
     * 业务版本
     */
    private String bizVersion;

	/**
     * 相关链接集合
     */
    private List<RelationHref> relationHrefList;
    
    /**
     * 相关流集合
     */
    private List<RelationFi> relationFiList;
    
    /**
     * 流程操作扩展接口
     */
    @Autowired
    private FormFlowService formFlowService;
    
    /**
     * 流程操作接口
     */
    @Autowired
    private FlowServerService flowServerService;
    
    /**
     * 流程Service
     */
    @Autowired
    private FlowService flowService;
    
    /**
     * 人员Service
     */
    @Autowired
    private OrgnAPIService orgnAPIService;
    
    /**
     * 流程实例全局变量操作接口
     */
    @Autowired
    private GvsService gvsService;
    
    /**
     * 自定义审批常用语操作接口
     */
    @Autowired
    private IUserNoteService iUserNoteService;
    
    /**
     * 阅读记录操作接口
     */
    @Autowired
    private IUserReadService iUserReadService;
    
    /**
     * 流程状态改变接口
     */
    @Autowired
    private FiStatusChangeService fiStatusChangeService;
    
    /**
     * 用户操作接口
     */
    @Autowired
    private UserDao userDao;
    
    @Autowired
    private WpDAO wpDao;
    
    private boolean isFiComplite = false;
    
    @Autowired
    private FileService fileService;
    
    @Autowired
    private BaseAPI BaseAPIService;
    
    /**
     * 相关链接
     */
    @Autowired
    private IRelationHrefService relationHrefService;
    
    /**
     * 相关流程
     */
    @Autowired
    private IRelationFiService relationFiService;
    
    @Autowired
	private UserService userService;
    
    @Autowired
    private FlowAuthDao flowAuthDao;

    @Autowired
    private OaMsgServiceImpl oaMsgServiceImpl;
    
    /**
     * 启动流程
     * @author jun
     * @return
     */
    public void start() {
        FlowResult<StartFiResult> sfr = new FlowResult<StartFiResult>();
        //当前操作人的IdName对象
        UserDTO userDto = LoginInfoUtils.getLoginInfo(request).getUserDTO();
        Long userId = userDto.getId();
        Gvs gvs = Gvs.create();
        List<BizDataDTO> bizDataDTOList = new ArrayList<BizDataDTO>();
        if ((StringUtils.isBlank(flowCode) && (null == sodId || sodId.intValue() == 0)) || StringUtils.isBlank(bizId)){
        	sfr.faliure();
        	sfr.getDebugInfo().addErrDesc("流程启动参数(flowCode与sodId)或bizId丢失！");
        }
        
    	if (StringUtils.isBlank(flowCode) && (null != sodId && sodId.intValue() != 0)){
    		flowCode = formFlowService.getDefaultFlowCodeBySodIdAndBizId(sodId);
    		if (StringUtils.isBlank(flowCode)){
    			sfr.faliure();
            	sfr.getDebugInfo().addErrDesc("sodId所对应的流程模板中没有设置默认流程模板！");
    		}
    	}
        try {
        	//分支条件使用 ，调用外部参数
        	System.out.println("流程参数方法耗时：=======");
        	Date param=new Date();
        	Map<String, Object> map = App.getBean(SmObjectService.class).queryDetail(flowCode, bizId);
        	System.out.println("流程参数方法耗时：======="+(new Date().getTime()-param.getTime()));
        	if (null != map && map.size() > 0){
            	for (Map.Entry<String, Object> e:  map.entrySet()){
            		GvBean gb = new GvBean( e.getKey(),e.getValue(),"");
            		gvs.add(gb);
            	}	
        	}
        	//获取手机端表单数据  ，业务表单保存起来
        	System.out.println("手机端方法耗时：=======");
        	Date date=new Date();
        	bizDataDTOList.addAll(App.getBean(SmBizDataService.class).queryBizData(flowCode, bizId, bizVersion));
        	System.out.println("手机端方法耗时：======="+(new Date().getTime()-date.getTime()));
        } catch (Exception e) {
        	sfr.faliure();
        	sfr.getDebugInfo().addErrDesc(FlowExceptionUtils.getExceptionMsg(e));
        }
        if (sfr.isSuccess()){
        	//是否真实提交，还是未提交，只是打开发起页面
            Fi fi = formFlowService.getNotSubmitFiByFlowCodeAndBizId(flowCode, bizId);
            if (null != fi){
            	System.out.println("流程计算人方法耗时：=======");
            	Date part=new Date();
            	fi.setStartUserName(userDto.getRealName());
            	String fiName = flowService.fixFiName(fi, gvs.getValueMap());
                sfr = flowServerService.restartFi(fi.getId(), fiName, userId, gvs.toJSONString(), JSONObject.toJSONString(bizDataDTOList, SerializerFeature.WriteClassName), "", null);
       		 /**
            	if(fi.getRelatedFiIds()!=null){
            		 sfr = flowServerService.restartFi(fi.getId(), fi.getFiName(), userId, gvs.toJSONString(), JSONObject.toJSONString(bizDataDTOList, SerializerFeature.WriteClassName), "", null);
            	}else{
            		flowServerService.deleteFi(fi.getId());
	            	sfr = flowServerService.startFi(flowCode, bizId,bizVersion,null, userId, gvs.toJSONString(), JSONObject.toJSONString(bizDataDTOList, SerializerFeature.WriteClassName), null);
            	}
            	**/
            
             	System.out.println("流程计算人方法耗时：======="+(new Date().getTime()-part.getTime()));
            } else {
                fi = formFlowService.getNotSubmitBackedFiByFlowCodeAndBizId(flowCode, bizId);
                if (null != fi){
                	//退回重新发起
                    sfr = flowServerService.restartBackedFi(fi, userId, gvs.toJSONString(), JSONObject.toJSONString(bizDataDTOList, SerializerFeature.WriteClassName), null);
                } else {
                	//第一次提交，未被退回
                    Long fiId = formFlowService.getFiIdByFlowCodeAndBizId(flowCode, bizId);
                    if(!isFiComplite){
                    	Fi oldFi=formFlowService.getFiByFiId(fiId);
                    	if(oldFi!=null && oldFi.getIsTerminate()!=null && oldFi.getTerminateCode()!=null){
	                    	if(oldFi.getIsTerminate()==1 && WsConstant.FLOW_TERMINATE_CODE_ZF.equals(oldFi.getTerminateCode())){
	                    		isFiComplite=true;
	                    	}
                    	}
                    }
                    if (null != fiId && fiId > 0 && !isFiComplite){
                        WiBean wb = flowServerService.getStartWiBean(fiId).getResult();
                        redirect("Form!dealIndex.do?fiId=" + fiId + "&spWiId=" + ((null != wb && null != wb.getParticipant() && null != wb.getParticipant().getUserId() && wb.getParticipant().getUserId().intValue() == LoginInfoUtils.getLoginInfoUserDtoId(request)) ? wb.getWiId() : null));
                    } else {
                    	//第一次提交，isFiComplite标识等于true, 重新发起流程
                        if ( isFiComplite ) {
                        	Fi relatedFi = getCommonService().getById(Fi.class, fiId);
                        	sfr = flowServerService.startFi(flowCode, bizId, bizVersion,null, relatedFi.getStartUserId(), gvs.toJSONString(), JSONObject.toJSONString(bizDataDTOList, SerializerFeature.WriteClassName), null);
                        	
                        	fi = formFlowService.getNotSubmitFiByFlowCodeAndBizId(flowCode, bizId);
                        	String relatedFiIds = (relatedFi.getRelatedFiIds() == null || relatedFi.getRelatedFiIds().length() == 0 ? "" : relatedFi.getRelatedFiIds() + ",");
                        	relatedFiIds += relatedFi.getId();
                        	
                        	fi.setRelatedFiIds(relatedFiIds);
                        	getCommonService().update(fi);
                        } else {
                        	//最普通的流程发起
                        	System.out.println("流程计算人方法耗时：=======");
                        	Date part=new Date();
                        	sfr = flowServerService.startFi(flowCode, bizId,bizVersion,null, userId, gvs.toJSONString(), JSONObject.toJSONString(bizDataDTOList, SerializerFeature.WriteClassName), null);
                        	System.out.println("流程计算人方法耗时：======="+(new Date().getTime()-part.getTime()));
                        }
                    }
                }
            }
            if (!sfr.isSuccess()){
                throw new AppException(FlowExceptionUtils.getExceptionMsg(sfr.getDebugInfo()));
            } else if (null == sfr.getResult() || null == sfr.getResult().getStartWiId()){
                throw new AppException(ApiMsgUtils.MSG_FI_START_WI_NOT_FOUND);
            } else {
                redirect("Form!dealIndex.do?spWiId=" + sfr.getResult().getStartWiId());
            }
        } else {
        	throw new AppException(null != sfr.getDebugInfo()  ? FlowExceptionUtils.getExceptionMsg(sfr.getDebugInfo()) : "流程启动失败！");
        }
    }
    
    /**
     * 审批操作主页面
     * @author jun
     * @return
     */
    public String dealIndex(){
    	
        //当前操作人的IdName对象
        UserDTO userDto = LoginInfoUtils.getLoginInfo(request).getUserDTO();
        Long spWiId = getParameterLong("spWiId");
        Long fiId = getParameterLong("fiId");
        Map<String, List<OpRelationInsBean>> opRelationInsBeanListMap = new HashMap<String, List<OpRelationInsBean>>();
        //TODO发起角色(下拉框的岗位)
        List<RoleDTO> urs=LoginInfoUtils.getLoginInfo(request).getRoleDtoList();
        List<RoleDTO> urs_new=new ArrayList<RoleDTO>();
        //过滤虚拟授权
        if(urs!=null&&urs.size()>0){
        	for(RoleDTO rd:urs){
        		/**
        		if(!rd.getNamefix().contains("虚拟授权")){
        			urs_new.add(rd);
        		}
        		**/
        		if(!PartyType.TYPE_SYSTEM.equals(rd.getTypeCode())){
        			urs_new.add(rd);
        		}
        	}
        }
        request.setAttribute("userRoles", urs_new);  //自己拥有的岗位
        // 审批信息
        Fi fi = null;
        Wi wi = null;
        // 当前审批工作按钮查询
        int isDb = FlowConstant.INT_FALSE;
        // 是否是审批流程开始的节点
        int isStartWp = FlowConstant.INT_FALSE;
        if (spWiId != null) {
            wi = formFlowService.getWi(spWiId);
            if (wi != null) {
                boolean isMine = wi.getParticipant().longValue() == userDto.getId() || flowAuthDao.isFlowAuth(userDto.getId(), wi.getParticipant(), wi.getStartTime());
                // 未读时置为已读
                if (1 != wi.getIsRead()) {
                    flowServerService.markWiIsRead(spWiId);  //已阅
                }
                // 催办的直接置为已办
                if (wi.getStatus() == WsConstant.STATUS_RUNNING && isMine && WsConstant.WiType.CB.getCode().equals(wi.getWiType())) {
                    flowServerService.completeWi(spWiId, userDto.getId(), "", formFlowService.getOpName(OpType.YD, OpType.YD_NAME, "", null, false), "", null);
                }
                //将催办wi设置为催办对应待办的wp
                if (WsConstant.WiType.CB.getCode().equals(wi.getWiType()) && null != wi.getAssignWiId()) {
                    wi = formFlowService.getWi(wi.getAssignWiId());
                    spWiId = wi.getId(); 
                }
            }
        }
        if ((null == spWiId || spWiId == 0) && (null != fiId && fiId > 0) && formFlowService.isJbrByFiIdAndUserId(fiId, userDto.getId())){
        	wi = formFlowService.getStartWiByFiId(fiId);
        	spWiId = wi.getId();
        }
        if (null == fiId || fiId == 0){
            if (null != wi){
                fiId = wi.getFiId();
            } else {
                fiId = 0L;
            }
        }
        if (null == fiId || fiId == 0){
            if ((StringUtils.isNotBlank(flowCode) || (null != sodId && sodId.intValue() != 0)) && StringUtils.isNotBlank(bizId)){
            	if (StringUtils.isBlank(flowCode)){
            		fiId = formFlowService.getFiIdBySodIdAndBizId(sodId,bizId);
            	}else{
            		fiId = formFlowService.getFiIdByFlowCodeAndBizId(flowCode, bizId);
            	}
            }
        }
        fi = formFlowService.getFiByFiId(fiId);
        //排除作废的流程信息
        String spFiIdsStr = (StringUtils.isNotBlank(fi.getRelatedFiIds()) ? fi.getRelatedFiIds() + "," : "") + fi.getId();
        
        List<Long> zfFiIds = getCommonService().findByHQL(Long.class, "select id from Fi where (id = " + spFiIdsStr.replace(",", " or id = ") + ")  and terminateCode = ?", WsConstant.FLOW_TERMINATE_CODE_ZF);
        for (Long spFiId : zfFiIds){
        	spFiIdsStr = spFiIdsStr.replace("," + spFiId + ",", ",").replace(spFiId + ",", "").replace("," + spFiId, "");
        	if (spFiIdsStr.equals(spFiId.toString())){
        		spFiIdsStr = "";
        	}
        }
        Long[] spFiIds = FormFlowService.idsStrToLongArray(spFiIdsStr, ",", false);
        //历史记录
//        List<WpBean> spStepMap = null;
        //正在运行的流程的节点
        List<WpBean> runningSpStepList = new ArrayList<WpBean>();
        List<OpRelationInsBean> spButtons = null;
        if (wi != null) {
            boolean isMine = wi.getParticipant().longValue() == userDto.getId() || flowAuthDao.isFlowAuth(userDto.getId(), wi.getParticipant(), wi.getStartTime());
            // 审批流以及审批历程
            System.out.println("dealIndex+++流程参数方法耗时：=======");
        	Date startDate=new Date();
            StepsHistoryAndOpRelactionBean stepsHistoryAndOpRelactionBean = flowServerService.getStepsAndOps(
                spFiIds, spFiIds, null != spWiId ? Long.valueOf(spWiId) : null, true, true, true).getResult();
            
            
            
            System.out.println("dealIndex===【完成】：======="+(new Date().getTime()-startDate.getTime()));
            
            startDate=new Date();
            System.out.println("dealIndex22222+++流程参数方法耗时：=======");
            if (stepsHistoryAndOpRelactionBean != null) {
                if (null != stepsHistoryAndOpRelactionBean.getUserOpRelationsMap()) {
                    opRelationInsBeanListMap = stepsHistoryAndOpRelactionBean.getUserOpRelationsMap();
                }
                runningSpStepList = formFlowService.filterSpHis(stepsHistoryAndOpRelactionBean.getFiSteps(), new Long[] {fi.getId()}, false);
//                spStepMap = formFlowService.filterSpHis(stepsHistoryAndOpRelactionBean.getFiSteps(), spFiIds, true);
            }
            System.out.println("dealIndex22222===完成：======="+(new Date().getTime()-startDate.getTime()));

            startDate=new Date();
            System.out.println("dealIndex33333+++流程参数方法耗时：=======");
            // 未读时置为已读
            if (FlowConstant.INT_TRUE != wi.getIsRead()) {
                flowServerService.markWiIsRead(spWiId);
            }
            
            //获取操作按钮
            spButtons = formFlowService.getSpButtons(wi, opRelationInsBeanListMap);

            // 我自己的待办的才要显示按钮
            if (wi.getStatus() == WsConstant.STATUS_RUNNING && isMine) {
                // 如果是抄送的
                if (WsConstant.WiType.CS.getCode().equals(wi.getWiType()) || WsConstant.WiType.CY.getCode().equals(wi.getWiType())) {
                    flowServerService.completeWi(spWiId, userDto.getId(), "", formFlowService.getOpName(OpType.YD, OpType.YD_NAME, "", null, false), "", null);
                } else {
                    isDb = FlowConstant.INT_TRUE;
                }
            }
            if (null != wi.getAc() && wi.getAc().getIsStart() == FlowConstant.INT_TRUE) {
                isStartWp = FlowConstant.INT_TRUE;
            }
            System.out.println("dealIndex33333===完成：======="+(new Date().getTime()-startDate.getTime()));

        } else {
            // 审批流以及审批历程
            StepsHistoryAndOpRelactionBean stepsHistoryAndOpRelactionBean = flowServerService.getSteps(
                spFiIds, spFiIds, null != spWiId ? Long.valueOf(spWiId) : null, true, true, true).getResult();
            if (stepsHistoryAndOpRelactionBean != null) {
//                spStepMap = formFlowService.filterSpHis(stepsHistoryAndOpRelactionBean.getFiSteps(), spFiIds, true);
            }
        }
        Date startDate=new Date();
        System.out.println("dealIndex444444+++流程参数方法耗时：=======");

        //阅读记录
        iUserReadService.readMark(fi, userDto.getId(), userDto.getRealName(), userDto.getLoginName());
        // 判断是不是经办人操作
        
        request.setAttribute("isJbrOp", formFlowService.isJbrByFiIdAndUserId(fiId, userDto.getId()));
        //历史记录
//        request.setAttribute("spStep", spStepMap);
        //正在运行的流程的节点
        request.setAttribute("runningSpStep", runningSpStepList);
        
        System.out.println("dealIndex444444===完成：======="+(new Date().getTime()-startDate.getTime()));

        startDate=new Date();
        System.out.println("dealIndex55555+++流程参数方法耗时：=======");
        //当前审批对象
        request.setAttribute("curFi", fi);
        //操作按钮
        request.setAttribute("spButtons", formFlowService.dealSpButtons(spButtons));
        //是否是第一个节点即发起审批节点
        request.setAttribute("isStartWp", isStartWp);
        //审批常用语
        request.setAttribute("spCyyList", iUserNoteService.getUserNoteListByUserId(userDto.getId()));
        //当前的任务
        request.setAttribute("curWi", wi);
        if(wi!=null && wi.getAc()!=null){
        	 request.setAttribute("isStart",  wi.getAc().getIsStart());
        }
        //当前的wp
        WpBean curWp = ApiUtils.buildWpBean(null != wi ? wi.getWp() : null, true, true, true);
        request.setAttribute("curWp", curWp);
        WpBean nextWp = formFlowService.getNextWp(wi, curWp, runningSpStepList, 1 == isStartWp);
        //当前审批对象
        request.setAttribute("nextWp", nextWp);
        //下一步操作操作
        request.setAttribute("nextWpParticipantsDisplayName", FormFlowService.getWpParticipantsDisplayName(
            null != nextWp && null != nextWp.getWpId() ? getCommonService().getById(Wp.class, nextWp.getWpId()): null));
        // 是否是待办
        request.setAttribute("isDb", isDb);
        request.setAttribute("fiId", fiId);
        request.setAttribute("spWiId", spWiId);
        request.setAttribute("isAdmin", isAdmin() );
        //显示方式（showFiHistory：历史流程）
    	request.setAttribute("showType", request.getParameter("showType"));
    	/*BaseAPI api = App.getBean(BaseAPI.class, ApiConstant.BEAN_CODE);
    	FlowResult<ToDoBean> r = api.getToDoBeanByWiId(wi.getId(), FlowConstant.ATT_CODE_SP);*/
    	if (HttpRequestDeviceUtils.isMobileDevice(request)){
    		request.setAttribute("userPage", userService.getDeptUsersByloginName(LoginInfoUtils.getLoginInfoUserLogName(request), 0, Integer.MAX_VALUE));
    	}
    	//获取当前用户没有完成的协办
    	//request.setAttribute("isRuningXB", formFlowService.isExistRuningXB(userDto.getLoginName(), spWiId));
    	
        //隐藏相关审批流程
        List<RelationFi> relationFiList = new ArrayList<RelationFi>();
        //审批附件
    	Map<String, List<Upload>> uploadsMap = new HashMap<String, List<Upload>>();
    	//审批相关链接
    	Map<String, List<RelationHref>> relationHrefMap = new HashMap<String, List<RelationHref>>();
        if (null != spFiIds){
        	for (Long fiIdTemp : spFiIds){
            	uploadsMap.putAll(this.getUploadsMap("fiId_" + fiIdTemp, FlowConstant.ATT_CODE_SP));
                relationHrefMap.putAll(this.getRelationHrefMap("fiId_" + fiIdTemp));
            }
            relationFiList.addAll(getCommonService().findAll(RelationFi.class,"(ownerId like 'fiId_" + StringHelper.join(spFiIds, "_%' or ownerId like 'fiId_") + "_%')", new Object[]{}, "ownerId asc"));
        }
        System.out.println("dealIndex55555===完成：======="+(new Date().getTime()-startDate.getTime()));

        // 审批相关链接
        request.setAttribute("spUploadsMap", uploadsMap);
        // 审批附件
        request.setAttribute("relationHrefMap", relationHrefMap);
        //相关审批流程
    	request.setAttribute("relationFiList", relationFiList);
       
        //历史记录
//        request.setAttribute("spStep", spStepMap);
        //当前审批对象
        request.setAttribute("curFi", fi);
        // 是否是待办
        request.setAttribute("fiId", fiId);
        request.setAttribute("isAdmin", isAdmin());
        
        // 打开业务表单URL
        if(fi != null && fi.getServiceObjectDefine() != null && StringUtils.isNotBlank(fi.getServiceObjectDefine().getUrlBizEdit()) ){
        	
        	request.setAttribute("urlBizEdit", fi.getServiceObjectDefine().getUrlBizEdit() + fi.getBizId());
        }

    	//访问类型
        return this.fixResult("dealIndex", HttpRequestDeviceUtils.getShowModule(request));
    }
    
    
    /**
     * 结束任务
     * @author jun
     * @return
     */
    /**
     * @return
     */
    public String completeWork(){
        Map<String, Object> result = new HashMap<String, Object>();
      try {
        Long wiId = super.getParameterLong("spWiId");
        String userNote = super.getParameter("spUserNote");
        userNote = URLEncoder.encode(StringUtils.isNotBlank(userNote) ? userNote : "", "UTF-8");
        String opCode = super.getParameter("opCode");
        String opName = super.getParameter("opName");
        // 审批操作岗位 
        Long spGwId = super.getParameterLong("spGw");
        //当前操作人的IdName对象
        UserDTO userDto = LoginInfoUtils.getLoginInfo(request).getUserDTO();
    	
        //制定用户()
        String dealUsersIds = getParameter("dealUsersIds");
       //退回到的wpId
        Long backToWpId = super.getParameterLong("backToWpId");
        // 是否跳过中间节点默认为跳过
        String backSkip = super.getParameter("backSkip");
        //
        String flowInsName = super.getParameter("flowInsName");

 
        // 是否为流程开始节点
           int isStartWp = FlowConstant.INT_FALSE;
        	Wi wbe = formFlowService.getWi(wiId);
        	log.info("======流程实例Id-"+wbe.getFi().getId()+"-begin ======= 操作人："+userDto.getRealName());
        	log.info("wiId="+wiId+",opCode="+opCode+",opName="+opName+",spGwId="+spGwId+",dealUsersIds="+dealUsersIds+",backToWpId="+backToWpId+",backSkip="+backSkip+",flowInsName="+flowInsName);
        	
        	
            //zxxx
        	result = formFlowService.completeWork(spGwId, wiId, opCode, opName, userNote, dealUsersIds, backToWpId, backSkip, flowInsName, userDto);
        	//相关连接已作废
        	//relationHrefService.saveRelationHref(relationHrefList, "fiId_" + wbe.getFiId() + "_wiId_" + wbe.getId(), LoginInfoUtils.getLoginInfo(request).getUserDTO());
            //添加相关流程
        	relationFiService.saveRelationFi(relationFiList, "fiId_" + wbe.getFiId() + "_wiId_" + wbe.getId(), LoginInfoUtils.getLoginInfo(request).getUserDTO());
            log.info("======流程实例Id-"+wbe.getFi().getId()+"=====。提交同步OA=="+flowInsName+"======"+wbe.getFiId()+"===="+new Date());
            oaMsgServiceImpl.sendMsgByFiId(wbe.getFiId());
            log.info("======流程实例Id-"+wbe.getFi().getId()+"-end ======= 操作人："+userDto.getRealName());
            // 获取业务ID、系统编码
            if(wbe.getFi() != null ){
            	request.setAttribute("bizId", wbe.getFi().getBizId());
            	if(wbe.getFi().getServiceObjectDefine() != null){
            		request.setAttribute("code", wbe.getFi().getServiceObjectDefine().getCode());
            	}
            }
        	if (null != wbe.getAc() && wbe.getAc().getIsStart() == FlowConstant.INT_TRUE) {
                isStartWp = FlowConstant.INT_TRUE;
            }
		    request.setAttribute("isStartWp", isStartWp);
		    request.setAttribute("wiId", wiId);
		    request.setAttribute("op", result);
        } catch (Exception e) {
//           catch (Exception e) {
            log.error(e);
            result.put("success", false);
            result.put("msg", "操作失败！");

      }
        
        return "completeWork";
    }
    /**
     * 结束任务
     * @author jun
     * @return
     */
    public String completeWorkPhone(){
        return this.completeWork();
    }
    public String fiView(){
    	// Http 1.0 header
        response.setDateHeader("Expires", 1L);
        response.addHeader("Pragma", "no-cache");
        // Http 1.1 header
        response.setHeader("Cache-Control", "no-cache, no-store, max-age=0");
        Long fiId = getParameterLong("fiId");
        // 审批信息
        Fi fi = null;
        if (null == fiId || fiId == 0){
            fiId = formFlowService.getFiIdByFlowCodeAndBizId(flowCode, bizId);
        }
        if (null == fiId || fiId == 0){
            throw new AppException("流程id丢失！");
        }
        fi = getCommonService().getById(Fi.class, fiId, "fl");
        //历史记录
        List<WpBean> spStepMap = null;
        Long[] spFiIds = FormFlowService.idsStrToLongArray((StringUtils.isNotBlank(fi.getRelatedFiIds()) ? fi.getRelatedFiIds() + "," : "") + fi.getId(), ",", false);
        // 审批流以及审批历程
        StepsHistoryAndOpRelactionBean stepsHistoryAndOpRelactionBean = flowServerService.getSteps(
            spFiIds, spFiIds, null, true, true, true).getResult();
        if (stepsHistoryAndOpRelactionBean != null) {
            spStepMap = formFlowService.filterSpHis(stepsHistoryAndOpRelactionBean.getFiSteps(), spFiIds, true);
        }
        //历史记录
        request.setAttribute("spStep", spStepMap);
        //当前审批对象
        request.setAttribute("curFi", fi);
        // 是否是待办
        request.setAttribute("fiId", fiId);
    	return "fiView";
    }
    
    /**
     * 审批历程
     * 
     * @author jun
     * @return 返回审批历程
     */
    public String historyInfo() {
        // Http 1.0 header
        response.setDateHeader("Expires", 1L);
        response.addHeader("Pragma", "no-cache");
        // Http 1.1 header
        response.setHeader("Cache-Control", "no-cache, no-store, max-age=0");
        Long fiId = getParameterLong("fiId");
        // 审批信息
        Fi fi = null;
        if (null == fiId || fiId == 0){
            fiId = formFlowService.getFiIdByFlowCodeAndBizId(flowCode, bizId);
        }
        if (null == fiId || fiId == 0){
            throw new AppException("流程id丢失！");
        }
        fi = getCommonService().getById(Fi.class, fiId, "fl");
        //历史记录
        List<WpBean> spStepMap = null;
        //获取执行流程的历史流程+执行中的流程
        Long[] spFiIds = FormFlowService.idsStrToLongArray((StringUtils.isNotBlank(fi.getRelatedFiIds()) ? fi.getRelatedFiIds() + "," : "") + fi.getId(), ",", false);
        //审批附件
        Map<String, List<Upload>> uploadsMap = new HashMap<String, List<Upload>>();
        //审批相关链接
        Map<String, List<RelationHref>> relationHrefMap = new HashMap<String, List<RelationHref>>();
        for (Long fiIdTemp : spFiIds) {
            uploadsMap.putAll(this.getUploadsMap("fiId_" + fiIdTemp, FlowConstant.ATT_CODE_SP));//流程附件
            relationHrefMap.putAll(this.getRelationHrefMap("fiId_" + fiIdTemp));  //流程关联
        }
        // 审批流以及审批历程
        StepsHistoryAndOpRelactionBean stepsHistoryAndOpRelactionBean = flowServerService.getStepsAndOps(
            spFiIds, spFiIds, null, true, true, true).getResult();
        if (stepsHistoryAndOpRelactionBean != null) {
            spStepMap = formFlowService.filterSpHis(stepsHistoryAndOpRelactionBean.getFiSteps(), spFiIds, true);
        }
        // 审批相关链接
        request.setAttribute("spUploadsMap", uploadsMap);
        // 审批附件
        request.setAttribute("relationHrefMap", relationHrefMap);
        //历史记录
        request.setAttribute("spStep", spStepMap);
        //当前审批对象
        request.setAttribute("curFi", fi);
        // 是否是待办
        request.setAttribute("fiId", fiId);
        request.setAttribute("isAdmin", isAdmin());
        return this.fixResult("historyInfo", HttpRequestDeviceUtils.getShowModule(request));
    }
    /**
     * 阅读列表
     * @author jun
     * @return
     */
    public String readLogList(){
        Long fiId = getParameterLong("fiId");
        Fi fi = null;
        Long[] fiIds = null;
        if (null != fiId && fiId >0 ){
            fi = getCommonService().getById(Fi.class, fiId);
            fiIds = FormFlowService.idsStrToLongArray((StringUtils.isNotBlank(fi.getRelatedFiIds()) ? fi.getRelatedFiIds() + "," : "") + fi.getId(), ",", false);
            page = getCommonService().findPageByHQL(UserReadLog.class, " from UserReadLog where fiId in(" + StringHelper.join(fiIds, ",") + ") order by createDate,id asc", new Object[]{}, start, limit);
        }
        request.setAttribute("fi", fi);
        request.setAttribute("readerUserNames", iUserReadService.getReaderUserNames(fiIds, ","));
        return "readLogList";
    }

    /**
     * 操作历史记录列表
     * @author jun
     * @return 操作历史记录列表
     */
    public String abList(){
        Long fiId = getParameterLong("fiId");
        Long[] fiIds = null;
        Fi fi = null;
        //历史记录
        if (null != fiId && fiId > 0){
            fi = getCommonService().getById(Fi.class, fiId);
            fiIds = FormFlowService.idsStrToLongArray((StringUtils.isNotBlank(fi.getRelatedFiIds()) ? fi.getRelatedFiIds() + "," : "") + fi.getId(), ",", false);
        }
        request.setAttribute("abList", flowServerService.getAlList(fiIds).getResult());
        request.setAttribute("fiId", fiId);
        if (HttpRequestDeviceUtils.isMobileDevice(request) && null != fiIds && fiIds.length > 0){
            //审批附件
            Map<String, List<Upload>> uploadsMap = new HashMap<String, List<Upload>>();
            //审批相关链接
            Map<String, List<RelationHref>> relationHrefMap = new HashMap<String, List<RelationHref>>();
            for (Long fiIdTemp : fiIds) {
                uploadsMap.putAll(this.getUploadsMap("fiId_" + fiIdTemp, FlowConstant.ATT_CODE_SP));
                relationHrefMap.putAll(this.getRelationHrefMap("fiId_" + fiIdTemp));
            }
            // 审批相关链接
            request.setAttribute("spUploadsMap", uploadsMap);
            // 审批附件
            request.setAttribute("relationHrefMap", relationHrefMap);
        }
        return this.fixResult("abList", HttpRequestDeviceUtils.getShowModule(request));
    }
    
    /**
     * 重算工作流
     * @author jun
     */
    public void rebuildFi(){
        Long fiId = getParameterLong("fiId");
        Long postId =  getParameterLong("postId");
        //操作人id（用于管理员操作,运维使用）
        Long userId = getParameterLong("userId");
        Map<String,Object> jsonMap = new HashMap<String, Object>();
        StartFiResult sfr = null;
        if(postId!=null && postId.intValue() >0){
            Map<String,Object> gvMap = new HashMap<String, Object>();
            gvMap.put(WsConstant.WI_OP_ROLE, postId);
            int count = getCommonService().executeSQL("update tf_fi  set tf_fi.start_role_id = ?,tf_fi.company_id = (select min(c.id) from sm_company c"
				    + " inner join sm_party_entity e on c.id = e.ref_id"
				    + " left join sm_party_type t on t.id =  e.party_type_id"
				    + " where t.type = 'company'"
				    + " and "+DbType.getType()+"locate("+DbType.getType()+"concat("+DbType.getType()+"concat('-',e.id),'-'),"+DbType.getType()+"concat('-',(SELECT min(p.prefix)"
				    + " from sm_party_entity p where p.id = ?))) > 0) where tf_fi.id = ?"
				    , new Object[]{Long.parseLong(String.valueOf(postId)), postId, fiId});
            Fi fi = getCommonService().getById(Fi.class, fiId);
            if (count > 0){
            	fi.setFiCode(App.getBean(FlowService.class).fixFiCode(fi, gvMap));
            }
            getCommonService().update(fi);
            Gvs gvs = Gvs.getGvsFromValueMap(gvMap);
            sfr = flowServerService.restartFi(fi.getId(), fi.getFiName(), userId, gvs.toJSONString(), null, "", null).getResult();
            jsonMap.put("nextWpParticipantsName", FormFlowService.getWpParticipantsDisplayName(flowServerService.getNextWp(sfr.getStartWiId())));
        }
        jsonMap.put("success", true);
        super.renderJson(jsonMap);
        
    }
    /**
     * 刷新即将流向的参与人
     * @author jun
     */
    public void refreshNextWpParticipantsName(){
        Long wiId = getParameterLong("wiId");
        Map<String,Object> jsonMap = new HashMap<String, Object>();
        if(wiId !=null && wiId.intValue() > 0){
            jsonMap.put("nextWpParticipantsName", FormFlowService.getWpParticipantsDisplayName(flowServerService.getNextWp(wiId)));
        }
        jsonMap.put("success", true);
        super.renderJson(jsonMap);
        
    }
    
    /**
     * 流程信息
     * @author jun
     * @return 跳转页面
     */
    public String fiInfo(){
        Long fiId = getParameterLong("fiId");
        if (null != fiId){
            FiInfoBean fib = flowServerService.getFiInfo(fiId).getResult();
            request.setAttribute("fiInfo", fib);
            
            
            Fi fi = getCommonService().getById(Fi.class, fiId);
            request.setAttribute("flId", fi.getFl().getId());
            
        }
        //访问类型
        return this.fixResult("fiInfo", HttpRequestDeviceUtils.getShowModule(request));
    }
    
    /**
     * 是否可以提交
     * @author jun
     */
    public void canDealCompleteWork(){
        Map<String, Object> result = new HashMap<String, Object>();
        try {
            result.put("success", flowServerService.canSubmit(getParameterLong("wiId")).isSuccess());
        } catch (Exception e) {
            result.put("success", false);
        }
        renderJson(result);
    }
    
    /**
     * 转发到相关业务单据URL
     * @author jun
     * @return
     */
    public void redirectView() {
        String toUrl = "";
        String msg = "此流程模板没有配置相关的业务单据URL!";
        Long fiId = getParameterLong("fiId");
        //设备类型
        int mateType = HttpRequestDeviceUtils.isMobileDevice(request) ? 1 : 0;
        if (null != fiId && fiId > 0){
            Fi fi = getCommonService().findFirstByHQL(Fi.class, "from Fi fi where fi.id = ?", fiId);
            if (null != fi && null != fi.getFl() && null != fi.getFl().getServiceObjectDefine() && !fi.getBizId().equals("0")){
                ServiceObjectDefine serviceObjectDefine = fi.getFl().getServiceObjectDefine();
                switch (mateType) {
                    case 2: {
                        toUrl = StringUtils.isNotBlank(serviceObjectDefine.getUrlSpPad()) ? serviceObjectDefine.getUrlSpPad() : "";
                        break;
                    } case 1: {
                        toUrl = StringUtils.isNotBlank(serviceObjectDefine.getUrlSpPhone()) ? serviceObjectDefine.getUrlSpPhone() : "";
                        break;
                    } case 0: {
                        toUrl = StringUtils.isNotBlank(serviceObjectDefine.getUrlSp()) ? serviceObjectDefine.getUrlSp() : "";
                        break;
                    } default: {
                        break;
                    }
                }
                if (StringUtils.isNotBlank(toUrl)){
                    String appUrl = "";
                    if (StringUtils.isNotBlank(serviceObjectDefine.getModuleCode()) && !toUrl.toLowerCase().contains("http://")){
                    	appUrl = getCommonService().findString("select min(depUrl) from App where code = ?", serviceObjectDefine.getModuleCode());
                    }
                    if (StringUtils.isNotBlank(appUrl)){
                    	appUrl = appUrl + "/";
                    } else {
                    	appUrl = "";
                    }
                    toUrl = appUrl + toUrl;
                    if (!toUrl.contains("?")){
                        toUrl += "?t=" + new Date().getTime();
                    } else {
                        toUrl += "&t=" + new Date().getTime();
                    }
                    toUrl += "&flowCode=" + fi.getFl().getFlowCode() + "&soCode=" + serviceObjectDefine.getCode() + "&sodCode=" + serviceObjectDefine.getCode() + "&sodId=" + serviceObjectDefine.getId() + "&bizId=" + fi.getBizId()
                    		+  (StringUtils.isNotEmpty(fi.getBizVersion()) ?  "&bizVersion=" + fi.getBizVersion() : "");
                }
            }
        }
        if (StringUtils.isBlank(toUrl)){
            try {
                msg = URLEncoder.encode(URLEncoder.encode(msg, "UTF-8"), "UTF-8");
            } catch (UnsupportedEncodingException e) {
                e.printStackTrace();
            }
            toUrl = "Form!noView.do?msg=" + msg;
        }
        redirect(toUrl);
    }
    
    /**
     * 相关流程
     * @author jun
     * @return 相关流程页面
     */
    public String fiFileView(){
        List<Upload> spUploadsMap = new ArrayList<Upload>();
//        //审批相关链接
//        Map<String, List<RelationHref>> relationHrefMap = new HashMap<String, List<RelationHref>>();
        Long fiId = getParameterLong("fiId");
        if (null != fiId){
            Fi fi = getCommonService().getById(Fi.class, fiId, "fl");
            if (null != fi){
                Long[] spFiIds = FormFlowService.idsStrToLongArray((StringUtils.isNotBlank(fi.getRelatedFiIds()) ? fi.getRelatedFiIds() + "," : "") + fi.getId(), ",", false);
                DetachedCriteria dc = null;
                List<Upload> spUploadList = null;
                for (Long fiIdTemp : spFiIds){
                    dc = DetachedCriteria.forClass(Upload.class);
                    dc.add(Restrictions.eq("userId", String.valueOf(fi.getStartUserId())));
                    dc.add(Restrictions.like("ownerId", "fiId_" + fiIdTemp + "_%"));
                    dc.addOrder(Order.asc("id"));
                    spUploadList = getCommonService().findByCriteria(dc);
                    if (null != spUploadList && spUploadList.size() > 0){
                        spUploadsMap.addAll(spUploadList);
                    }
//                    relationHrefMap.putAll(this.getRelationHrefMap("fiId_" + fiIdTemp));
                }
            }
        }
        request.setAttribute("spUploadsMap", spUploadsMap);
//        request.setAttribute("relationHrefMap", relationHrefMap);
        return "fiFileView";
    }
    /**
     * 相关流程
     * @author jun
     * @return 相关流程页面
     */
    public String relationFiView(){
    	List<RelationFi> relationFiList = new ArrayList<RelationFi>();
    	Long fiId = getParameterLong("fiId");
    	if (null != fiId){
    		Fi fi = getCommonService().getById(Fi.class, fiId, "fl");
    		if (null != fi){
    			Long[] spFiIds = FormFlowService.idsStrToLongArray((StringUtils.isNotBlank(fi.getRelatedFiIds()) ? fi.getRelatedFiIds() + "," : "") + fi.getId(), ",", false);
    			DetachedCriteria dc = null;
    			List<RelationFi> relationFiListTemp = null;
    			for (Long fiIdTemp : spFiIds){
    				dc = DetachedCriteria.forClass(RelationFi.class);
    				dc.add(Restrictions.like("ownerId", "fiId_" + fiIdTemp + "_%"));
    				dc.addOrder(Order.asc("id"));
    				relationFiListTemp = getCommonService().findByCriteria(dc);
    				if (null != relationFiListTemp && relationFiListTemp.size() > 0){
    					relationFiList.addAll(relationFiListTemp);
    				}
    			}
    		}
    	}
    	request.setAttribute("relationFiList", relationFiList);
    	return "relationFiView";
    }
    /**
     * 历史流程
     * @author jun
     * @return
     */
    public String fiHistory(){
    	List<FiBean> relationFiList = new ArrayList<FiBean>();
    	Long fiId = getParameterLong("fiId");
    	if (null != fiId){
    		Fi fi = getCommonService().getById(Fi.class, fiId, "fl");
    		if (null != fi){
    			Long[] fiIds = FormFlowService.idsStrToLongArray((StringUtils.isNotBlank(fi.getRelatedFiIds()) ? fi.getRelatedFiIds() + "," : ""), ",", false);
    			relationFiList = flowServerService.getFiList(fiIds).getResult();
    		}
    	}
    	request.setAttribute("relationFiList", relationFiList);
        return "fiHistory";
    }
    /**
     * sp列表
     * @author jun
     * @return sp列表
     */
    public String singleSelectList(){
        StringBuffer selectSb = new StringBuffer();
        selectSb.append(" fi.id,");
        selectSb.append(" fi.fi_name,");
        selectSb.append(" fl.flow_code,");
        selectSb.append(" fi.create_user_name,");
        selectSb.append(" fi.status,");
        selectSb.append(" fi.create_time");
        StringBuffer sqlSb = new StringBuffer("select selectSb");
        sqlSb.append(" from tf_fi fi");
        sqlSb.append(" ,tf_fl fl");
        sqlSb.append(" where fi.fl_id = fl.id");
        sqlSb.append(" and not exists(select 'y' from tf_fi fi2 where "+DbType.getType()+"locate("+DbType.getType()+"concat("+DbType.getType()+"concat(',',fi.id),','),"+DbType.getType()+"concat("+DbType.getType()+"concat(',',fi2.related_fi_ids),',')) > 0)");
        sqlSb.append(" and (exists(select 'y' from tf_wi wi where wi.participant = ? and (wi.fi_id = fi.id or "+DbType.getType()+"locate("+DbType.getType()+"concat(',',wi.fi_id,','),"+DbType.getType()+"concat("+DbType.getType()+"concat(',',fi.related_fi_ids),',')) > 0))"
        		+ " or "+DbType.getType()+"locate("+DbType.getType()+"concat( ? ,':'),"+DbType.getType()+"concat(fi.read_users,':')) > 0)");
        List<Object> queryList = new ArrayList<Object>();
        queryList.add(LoginInfoUtils.getLoginInfo(request).getUserDTO().getId());
        queryList.add("_" + LoginInfoUtils.getLoginInfo(request).getUserDTO().getId());
        String fiName = getParameter("fiName","");
        if (StringUtils.isNotBlank(fiName)){
            sqlSb.append(" and fi.fi_name like ?");
            queryList.add("%" + fiName.trim() + "%");
        }
        String fiCode = getParameter("fiCode","");
        if (StringUtils.isNotBlank(fiCode)){
        	 sqlSb.append(" and fl.flow_code like ?");
            queryList.add("%" + fiCode.trim() + "%");
        }
        String fiStatus = getParameter("fiStatus","");
        if (StringUtils.isNotBlank(fiStatus)){
            sqlSb.append(" and fi.status = ?");
            queryList.add(Integer.parseInt(fiStatus));
        }
        String sodId = getParameter("sodId","");
        if (StringUtils.isNotBlank(sodId)){
            sqlSb.append(" and fi.service_object_define_id = ?");
            queryList.add(Long.parseLong(sodId));
        }
        page = getCommonService().findPageBySQL(sqlSb.toString().replace("selectSb", selectSb.toString()), sqlSb.toString().replace("selectSb", "count(*)"), queryList.toArray(), start, limit);
        return "singleSelectList";
    }
    /**
     * 发起催办
     * @author jun
     * @return 发起催办页面
     */
    public String showCuiBan(){
    	Long fiId = getParameterLong("fiId");
        FiInfoBean fib = null;
        if (null != fiId){
        	FlowResult<FiInfoBean> r = flowServerService.getFiInfo(fiId);
        	if (r.isSuccess() && null != r.getResult()){
        		fib = r.getResult();
        	}
        }
        if (null == fib){
        	fib = new FiInfoBean();
        }
        request.setAttribute("fiInfo", fib);
        request.setAttribute("fiId", fiId);
        return "showCuiBan";
    }
   /**
     * 催办
     * @author jun
     */
    public void cuiBan(){
        Map<String, Object> result = new HashMap<String, Object>();
        try {
        	Long fiId = getParameterLong("fiId");
        	if (null != fiId){
        		Fi fi = getCommonService().getById(Fi.class, fiId, "fl");
        		Long firstFiId = 0L;
        		if (null != fi){
        			firstFiId = FormFlowService.idsStrToLongArray((StringUtils.isNotBlank(fi.getRelatedFiIds()) ? fi.getRelatedFiIds() + "," : "") + fi.getId(), ",", false)[0];
        		}
        		FlowResult<WiBean> r = flowServerService.getStartWiBean(firstFiId);
        		if (r.isSuccess()){
        			FlowResult<SimpleResult> r2 = flowServerService.cuiBan(r.getResult().getWiId(), firstFiId);
                    if (r2.isSuccess()){
                        result.put("success", true);
                    } else {
                        result.put("success", false);
                        result.put("msg", FlowExceptionUtils.getExceptionMsg(r2.getDebugInfo()));
                    }
        		} else {
        			result.put("success", false);
                    result.put("msg", FlowExceptionUtils.getExceptionMsg(r.getDebugInfo()));
        		}
        	} else {
        		result.put("success", false);
        	}
        } catch (Exception e) {
            result.put("success", false);
        }
        renderJson(result);
    }
    /**
     * 收回(经办人流程收回)
     * @author jun
     */
    public void fiWithDraw() {
        Map<String, Object> result = new HashMap<String, Object>();
        String debugInfo = "";
        boolean success = true;
        try {
            Long fiId = getParameterLong("fiId");
            String spUserNote = getParameter("spUserNote","");
            if (fiId != null) {
            	FlowResult<WithdrawResult> r = flowServerService.fiwithdraw(fiId, LoginInfoUtils.getLoginInfoUserDtoId(request), spUserNote);
                if (!r.isSuccess()){
                    success = false;
                    debugInfo = FlowExceptionUtils.getExceptionMsg(r.getDebugInfo());
                }
            } else {
                success = false;
                debugInfo = "审批信息丢失,撤回失败！";
            }
        } catch (Exception e) {
            success = false;
            debugInfo = "网络异常,撤回失败！";
        }
        result.put("success", success);
        result.put("debugInfo", debugInfo);
        renderJson(result);
    }
    /**
     * 收回
     */
    public void withDraw() {
        Map<String, Object> result = new HashMap<String, Object>();
        try {
        	Long wiId = getParameterLong("wiId");
            String spUserNote = getParameter("spUserNote");
            if (wiId != null) {
                FlowResult<WithdrawResult> r = flowServerService.withdraw(wiId, LoginInfoUtils.getLoginInfoUserDtoId(request), false, spUserNote);
                if (r.isSuccess()){
                    result.put("wiId", r.getResult().getWithdrawWiId());
                    result.put("success", true);
                } else {
                    result.put("success", false);
                    result.put("msg", FlowExceptionUtils.getExceptionMsg(r.getDebugInfo()));
                }
            } else {
                result.put("success", false);
                result.put("msg", "撤回失败！");
            }
        } catch (Exception e) {
            result.put("success", false);
            result.put("msg", "撤回失败！");
        }
        renderJson(result);
    }
    /**
     * 传阅
     * @author jun
     */
    public void chuanYue(){
        Map<String, Object> result = new HashMap<String, Object>();
        String errorMsg = formFlowService.chuanyue(getParameterLong("fiId"), getParameter("paticipantString"));
        if (StringUtils.isNotBlank(errorMsg)){
            result.put("success", false);
            result.put("msg", errorMsg);
        } else {
            result.put("success", true);
        }
        renderJson(result);
    }
    /**
     * 撤回工作
     * @author jun
     * @return 撤回工作页面
     */
    public String withDrawNote(){
        request.setAttribute("fiId", getParameter("fiId"));
        request.setAttribute("wiId", getParameter("wiId"));
        return "withDrawNote";
    }
    /**
     * 得到审批历史的审批相关链接
     * @author jun
     * @param ownerIdStart 需要查找的ownerId的开始字符
     * @return 得到审批历史的审批相关链接
     */
    private Map<String, List<RelationHref>> getRelationHrefMap(String ownerIdStart) {
        Map<String, List<RelationHref>> uploadsMap = new HashMap<String, List<RelationHref>>();
        if (StringUtils.isNotBlank(ownerIdStart)) {
            List<String> idList = getCommonService().findByHQL(String.class,
                " select distinct ownerId from RelationHref where ownerId like ?",
                ownerIdStart + "%");
            for (String idStr : idList) {
                uploadsMap.put(idStr, relationHrefService.getRelationHrefList(idStr, false));
            }
        }
        return uploadsMap;
    }
    /**
     * 得到审批历史的审批相关链接
     * @author jun
     * @param ownerIdStart 需要查找的ownerId的开始字符
     * @return 得到审批历史的审批相关链接
     */
    @SuppressWarnings("unused")
	private Map<String, List<RelationFi>> getRelationFiMap(String ownerIdStart) {
        Map<String, List<RelationFi>> uploadsMap = new HashMap<String, List<RelationFi>>();
        if (StringUtils.isNotBlank(ownerIdStart)) {
            List<String> idList = getCommonService().findByHQL(String.class,
                " select distinct ownerId from RelationFi where ownerId like ?",
                ownerIdStart + "%");
            for (String idStr : idList) {
                uploadsMap.put(idStr, relationFiService.getRelationFiList(idStr, false));
            }
        }
        return uploadsMap;
    }
    /**
     * 流程模板没有配置相关的业务单据URL的提示页面
     * @author jun
     * @return
     */
    public String noView(){
        String msg = request.getParameter("msg");
        try {
            msg = URLDecoder.decode(msg, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        request.setAttribute("msg", msg);
        return "noView";
    }
    public String lineFeed(String str) {
        if(StringUtils.isNotEmpty(str)) {
            str = str.replaceAll("\t", "&nbsp;&nbsp;");
            str = str.replaceAll("\r\n", "<br/>");
            str = str.replaceAll("\n", "<br/>");
            str = str.replaceAll("\r", "<br/>");
        }
        return str;
    }
    /**
     * 得到审批历史的审批附件
     * 
     * @author jun
     * @param ownerIdStart 需要查找的ownerId的开始字符
     * @param category 附件category
     * @return 附件列表
     */
    private Map<String, List<Upload>> getUploadsMap(String ownerIdStart, String category) {
        Map<String, List<Upload>> uploadsMap = new HashMap<String, List<Upload>>();
        if (StringUtils.isNotBlank(ownerIdStart) && StringUtils.isNotBlank(category)) {
            List<String> idList = getCommonService().findByHQL(String.class,
                " select distinct ownerId from Upload where ownerId like ? and category = ? ",
                ownerIdStart + "%", category);
            for (String idStr : idList) {
                uploadsMap.put(idStr, this.getUploadList(idStr, category));
            }
        }
        return uploadsMap;
    }
    /**
     * 获取附件
     * @param ownerId
     * @param category
     * @return
     */
    public List<Upload> getUploadList(String ownerId,String category){
		List<Upload> uploadList = new ArrayList<Upload>();
		if(!StringUtils.isBlank(ownerId)&&!StringUtils.isBlank(category)){
			uploadList = fileService.getUploadList(category, ownerId);
		}
		return uploadList;
	} 
    
    /**
     * 一键审批通过流程
     */
    public void doAllWi() {
    	Map<String, Object> result = new HashMap<String, Object>();
        try {
        	UserDTO userDto = LoginInfoUtils.getLoginInfo(request).getUserDTO();
            Long fiId = getParameterLong("fiId");
            if(fiId != null) {
            	flowServerService.completeFi(fiId, userDto.getId(), "一键通过", OpType.TG + ";通过");
            }

            result.put("success", true);
        } catch (Exception e) {
            result.put("success", false);
        }

        renderJson(result);
    }
    
	public void jumpOverWi() {
        String userNote = "管理员跳过当前审批人";
		try {
			userNote = URLEncoder.encode(userNote, "UTF-8");
		} catch (UnsupportedEncodingException e1) {
		}

        String opCode = OpType.TG;
        String opName = "管理员审批通过";
        //当前操作人的IdName对象
        UserDTO userDto = LoginInfoUtils.getLoginInfo(request).getUserDTO();
        
		Map<String, Object> result = new HashMap<String, Object>();
		try {
			Long fiId = getParameterLong("fiId");
			if (fiId != null) {
				Long wiId = null;
				Wi wi = flowServerService.getRunningWi(fiId);
				wiId = (wi == null ? null : wi.getId());
				
				if ( wiId == null ) {
					result.put("success", false);
				} else {
					result = formFlowService.completeWork(null, wiId, opCode, opName, userNote, null, null, "false", null, userDto);
				}
			} else {
				result.put("success", false);
			}

		} catch (Exception e) {
			result.put("success", false);
		}

		renderJson(result);
	}
	
	public void rejectWi() {
        String userNote = "管理员驳回当前审批人";
		try {
			userNote = URLEncoder.encode(userNote, "UTF-8");
		} catch (UnsupportedEncodingException e1) {
		}
		
		Long backToWpId = getParameterLong("wiId");
		String backSkip = getParameter("backSkip");

        String opCode = OpType.BH;
        String opName = "管理员驳回";
        //当前操作人的IdName对象
        UserDTO userDto = LoginInfoUtils.getLoginInfo(request).getUserDTO();
        
		Map<String, Object> result = new HashMap<String, Object>();
		try {
			Long fiId = getParameterLong("fiId");
			if (fiId != null) {
				Long wiId = null;
				Wi wi = flowServerService.getRunningWi(fiId);
				wiId = (wi == null ? null : wi.getId());
				
				if ( wiId == null ) {
					result.put("success", false);
				} else {
					result = formFlowService.completeWork(null, wiId, opCode, opName, userNote, null, backToWpId, backSkip, null, userDto);
				}
			} else {
				result.put("success", false);
			}

		} catch (Exception e) {
			result.put("success", false);
		}

		renderJson(result);
	}
    
	/**
	 * 重新发起流程
	 * 
	 */
	public void rejectFi() {
		Long fiId = getParameterLong("fiId");
		Fi fi = getCommonService().getById(Fi.class, fiId, "fl");
		flowCode = fi.getFl().getFlowCode();
		bizId = fi.getBizId();
		sodId = fi.getServiceObjectDefineId();
		isFiComplite = true;

		start();
				
	}
    
	public void gotoWi() {
		
		Long gotoToWpId = getParameterLong("gotoToWpId");

		Map<String, Object> result = new HashMap<String, Object>();
		try {
			Long fiId = getParameterLong("fiId");
			if (fiId != null) {
				Long wiId = null;
				Wi wi = flowServerService.getRunningWi(fiId);
				wiId = (wi == null ? null : wi.getId());
				
				if ( wiId == null ) {
					result.put("success", false);
				} else {
					UserDTO userDto = LoginInfoUtils.getLoginInfo(request).getUserDTO();
					
					flowServerService.gotoWp(gotoToWpId, userDto.getId(), wi.getId(), wi.getWp().getId());
					result.put("success", true);
				}
			} else {
				result.put("success", false);
			}

		} catch (Exception e) {
			result.put("success", false);
		}

		renderJson(result);
	}
	
	public String rejectStepSel() {
		Long fiId = getParameterLong("fiId");
        Fi fi = getCommonService().getById(Fi.class, fiId, "fl");
        
        //正在运行的流程的节点
        List<WpBean> runningSpStepList = new ArrayList<WpBean>();
        Wi wi = flowServerService.getRunningWi(fiId);

        if (wi != null) {
            Long[] spFiIds = FormFlowService.idsStrToLongArray((StringUtils.isNotBlank(fi.getRelatedFiIds()) ? fi.getRelatedFiIds() + "," : "") + fi.getId(), ",", false);
            // 审批流以及审批历程
            StepsHistoryAndOpRelactionBean stepsHistoryAndOpRelactionBean = flowServerService.getStepsHistorysAndOps( spFiIds, spFiIds, wi.getId(), true, true, true).getResult();
            if (stepsHistoryAndOpRelactionBean != null) {
                List<WpBean> stepList = formFlowService.filterSpHis(stepsHistoryAndOpRelactionBean.getFiSteps(), new Long[] {fi.getId()}, false);
                WpBean curWp = ApiUtils.buildWpBean(null != wi ? wi.getWp() : null, true, true, true);
                for ( WpBean step : stepList ) {
                	if ( step.getTp() < curWp.getTp() ) {
                		runningSpStepList.add(step);
                	}
                }
            }
        }
        
        
        
        request.setAttribute("runningSpStep", runningSpStepList);

		return "rejectStepSel";
	}
	

	
	public String gotoStepSel() {
		Long fiId = getParameterLong("fiId");
        Fi fi = getCommonService().getById(Fi.class, fiId, "fl");
        
        //正在运行的流程的节点
        List<WpBean> wpLst = new ArrayList<WpBean>();
        Wi wi = flowServerService.getRunningWi(fiId);

        Long[] spFiIds = FormFlowService.idsStrToLongArray((StringUtils.isNotBlank(fi.getRelatedFiIds()) ? fi.getRelatedFiIds() + "," : "") + fi.getId(), ",", false);
        // 审批流以及审批历程
        StepsHistoryAndOpRelactionBean stepsHistoryAndOpRelactionBean = flowServerService.getStepsHistorysAndOps( spFiIds, spFiIds, wi.getId(), true, true, true).getResult();
        if (stepsHistoryAndOpRelactionBean != null) {
            for ( FiStepsBean step : stepsHistoryAndOpRelactionBean.getFiSteps() ) {
            	for ( WpBean wp : step.getWps() ) {
            		if ( wp.getStatus() == Fi.STATUS_CREATED ) {
            			wpLst.add(wp);
            		}
            	}
        	}
        }
        
        request.setAttribute("wps", wpLst);

		return "gotoStepSel";
	}
	
	public void deleteWp() {
		boolean isSuccess = false;
		Map<String, Object> result = new HashMap<String, Object>();
		try {
			Long fiId = getParameterLong("fiId");
			Long wpId = getParameterLong("wpId");
			if (fiId != null) {
				UserDTO userDto = LoginInfoUtils.getLoginInfo(request).getUserDTO();
//            	flowService.deleteWp( wpDao.getFirstValidWp(fiId).getId(), userDto.getId() );
				FlowResult<SimpleResult> rst = flowServerService.quqian( wpId, userDto.getId() );
            	if ( !rst.isSuccess() ) {
            		result.put("msg", "未开始的环节才能去签");
            	}
            	
            	isSuccess = rst.isSuccess();
			}

		} catch (Exception e) {
		}

		result.put("success", isSuccess);
		renderJson(result);
	}

	public void deleteFi() {
		boolean isSuccess = false;
		Map<String, Object> result = new HashMap<String, Object>();
		try {
			Long fiId = getParameterLong("fiId");
			if (fiId != null) {
				UserDTO userDto = LoginInfoUtils.getLoginInfo(request).getUserDTO();
				
				FlowResult<SimpleResult> rst = flowServerService.terminateFi(fiId, WsConstant.FLOW_TERMINATE_CODE_ZF, userDto.getId(), new Long[0]);
            	if ( !rst.isSuccess() ) {
            		result.put("msg", "作废处理失败");
            	}
            	
            	isSuccess = rst.isSuccess();

                oaMsgServiceImpl.sendMsgByFiId(fiId);
			}

		} catch (Exception e) {
		}

		result.put("success", isSuccess);
		renderJson(result);
	}
	
	public void replaceWiParticipants() {
		boolean isSuccess = false;
		Map<String, Object> result = new HashMap<String, Object>();
		try {
			Long fiId = getParameterLong("fiId");
			String userPartId = getParameter("userId");
			if (fiId != null) {
				List<Long> wiIdLst = new ArrayList<Long>();
				List<Wi> wiLst = flowServerService.getRunningWis(fiId);
				
				if ( wiLst != null && wiLst.size() > 0 ) {
//					for ( Wi wi : wiLst ) {
//						wiIdLst.add( wi.getId() );
//					}
					wiIdLst.add( wiLst.get(0).getId() );
					
					Long userEntityId = Long.valueOf(userPartId.substring(userPartId.indexOf("_") + 1, userPartId.indexOf(":")));
					List<User> userList = orgnAPIService.getUserListByPartId( userEntityId );
					String fixName = orgnAPIService.getEntityPath(userEntityId, true);
					if (null != userList){
	                    if (userList.size() == 1){
	                    	flowService.changeWisUser(wiIdLst.toArray(new Long[0]), userList.get(0).getUserId(), fixName, 0L);
	                    	isSuccess = true;
                            oaMsgServiceImpl.sendMsgByFiId(fiId);
	                    } else {
	                        result.put("msg", "目标参与者不唯一，请重新选择！");
	                    }
	                }
				}
			}

		} catch (Exception e) {
		}

		result.put("success", isSuccess);
		renderJson(result);
	}
	
	public String updateHistoryNote() {
		historyInfo();
		return this.fixResult("updateHistoryNote", HttpRequestDeviceUtils.getShowModule(request));
	}
	
	public void updateNote() {
		Map<String, Object> result = new HashMap<String, Object>();
		String msgDatas = getParameter("msg"); 
		
		try {
			msgDatas = java.net.URLDecoder.decode(msgDatas,"UTF-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		

        try {
        	String[] msgs = msgDatas.split(",");
        	String key = null;
        	String note = null;
        	for ( String msg : msgs ) {
        		if ( msg.length() == 0 ) {
        			continue;
        		}
        		
        		key = msg.substring( 0, msg.indexOf("_") );
        		note = msg.substring( msg.indexOf("_") + 1 );

        		getCommonService().executeSQL("update tf_wi wi set wi.user_note = ? where wi.id = ?", note,key);
        	}
        	
            result.put("success", true);
        } catch (Exception e) {
            result.put("success", false);
        }

        renderJson(result);
		
	}
	
    /**
     * 拼接访问需要访问的页面
     * @author jun
     * @param result
     * @param fixWord
     * @return
     */
	private String fixResult(String result, String fixWord){
	    request.setAttribute("showModule", fixWord);
	    return StringUtils.isNotBlank(result) ? (result + (StringUtils.isNotBlank(fixWord) ? fixWord : "")) : "";
	}
	
	private boolean isAdmin() {
		UserDTO userDto = LoginInfoUtils.getLoginInfo(request).getUserDTO();
		return "admin".equals( userDto.getLoginName().toLowerCase() );
	}
	/**
     * 
     *  流程收藏
     * @author lwp
     */
    public void fiStore() {
        Map<String, Object> result = new HashMap<String, Object>();
        try {
           Long fiId = getParameterLong("fiId");
            if (fiId != null && fiId > 0) {
                FlowResult<SimpleResult>  fr = flowServerService.fiStore(fiId, LoginInfoUtils.getLoginInfoUserDtoId(request));
                String returnStr = fr.isSuccess() ? "" : fr.getDebugInfo().getErrDesc().get(0);
                if (StringUtils.isNotBlank(returnStr)){
                    result.put("success", false);
                    result.put("msg", returnStr);
                } else {
                    result.put("success", true);
                }
            } else {
                result.put("success", false);
                result.put("msg", "流程id丢失，收藏失败！");
            }
        } catch (Exception e) {
            result.put("success", false);
            result.put("msg", ExceptionUtils.getExceptionMsg(e));
        }
        renderJson(result);
    }
    /**
     * 
     *  取消收藏
     * @author lwp
     */
    public void fiStoreCancel() {
        Map<String, Object> result = new HashMap<String, Object>();
        try {
            Long fiStoreId = getParameterLong("fiStoreId");
             if (fiStoreId != null && fiStoreId > 0) {
                 FlowResult<SimpleResult> fr = flowServerService.fiStoreCancel(fiStoreId);
                 String returnStr = fr.isSuccess() ? "" : fr.getDebugInfo().getErrDesc().get(0);
                 if (StringUtils.isNotBlank(returnStr)){
                     result.put("success", false);
                     result.put("msg", returnStr);
                 } else {
                     result.put("success", true);
                 }
             } else {
                 result.put("success", false);
                 result.put("msg", "需要取消的收藏id丢失，取消收藏失败！");
             }
         } catch (Exception e) {
             result.put("success", false);
             result.put("msg", ExceptionUtils.getExceptionMsg(e));
         }
         renderJson(result);
    }
    /**
     * 
     *  收藏流程列表
     *〈详细描述〉
     * @author lwp
     * @return
     */
    public String fiStoreList() {
        page = flowServerService.findFiStoresByUserId(start, limit, LoginInfoUtils.getLoginInfoUserDtoId(request));
        return "fiStoreList";
    }
    
    public String getFlowCode() {
        return flowCode;
    }

    public void setFlowCode(String flowCode) {
        this.flowCode = flowCode;
    }

    public String getBizId() {
        return bizId;
    }

    public void setBizId(String bizId) {
        this.bizId = bizId;
    }

	public Long getSodId() {
		return sodId;
	}

	public void setSodId(Long sodId) {
		this.sodId = sodId;
	}

	public List<RelationHref> getRelationHrefList() {
		return relationHrefList;
	}

	public void setRelationHrefList(List<RelationHref> relationHrefList) {
		this.relationHrefList = relationHrefList;
	}

	public List<RelationFi> getRelationFiList() {
		return relationFiList;
	}

	public void setRelationFiList(List<RelationFi> relationFiList) {
		this.relationFiList = relationFiList;
	}

    public String getBizVersion() {
		return bizVersion;
	}

	public void setBizVersion(String bizVersion) {
		this.bizVersion = bizVersion;
	}
}
