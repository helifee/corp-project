package com.xinleju.erp.finance.service;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.finance.dao.FiAccountCaptionDao;
import com.xinleju.erp.finance.models.FiAccountCaption;
import com.xinleju.erp.finance.models.FiBudgetCap;
import com.xinleju.erp.finance.utils.ExcelHandlerUtil;
import com.xinleju.erp.finance.utils.IExcelHandler;
import com.xinleju.erp.form.utils.DbType;
import com.xinleju.erp.frame.dto.FiAccountSubjectDTO;

/**
 * 会计科目业务数据对象
 * 
 * @author walden ztl
 * 
 */
@Service
public class FiAccountCaptionService extends BaseService implements IExcelHandler {
	@Autowired
	private FiAccountCaptionDao fiAccountCaptionDao;
	@Autowired
	private JdbcTemplate jt;
	
	/**
	 * 根据ID获取 FiAccountCaption
	 * @param id
	 * @return
	 */
	public FiAccountCaption getFiAccountCaptionById(Long id){
		return getDao().getById(FiAccountCaption.class, id);
	}
	
	/**
	 * 根据Code获取 FiAccountCaption
	 * @param id
	 * @return
	 */
	public FiAccountCaption getFiAccountCaptionByCode(String code,Long accountSetId){
		String hql = "from FiAccountCaption where code = ? and accountSetId=?";
		return	this.getDao().findFirstByHQL(FiAccountCaption.class, hql, code,accountSetId);
	}

	/**
	 * 根据账套id获得会计科目
	 * 
	 * @param accountSetId
	 * @param status
	 * @return
	 */
	public List<FiAccountCaption> getAccountCaptionList(String status,Long accountSetId) {
		return fiAccountCaptionDao.getAccountCaptionList(status,accountSetId);
	}

	/**
	 * 根据账套id获得会计科目的dto
	 * 
	 * @param accountSetId
	 * @param status
	 * @return
	 */
	public List<FiAccountSubjectDTO> getAccountSubjectDTOList(String status,Long accountSetId) {
		return fiAccountCaptionDao.getFiAccountSubjectDTOList(status,accountSetId);
	}

	public void saveOrUpdate(FiAccountCaption fiAccountCaption) {
		getDao().saveOrUpdate(fiAccountCaption);
	}

	/**
	 * 删除会计科目
	 * 
	 * @param fiAccountCaption
	 */
	public void delete(FiAccountCaption fiAccountCaption) {
		getDao().delete(fiAccountCaption);
	}

	/**
	 * excel页签名
	 * @return
	 */
	@Override
	public String getSheetName() {
		// TODO Auto-generated method stub
		return "会计科目";
	}
	/**
	 * 导出的excel字段名称
	 * @return
	 */
	@Override
	public String[] getHeadItemsNameAry() {
		// TODO Auto-generated method stub
		//code,name,ass_name,ass_account,parentid,
		String[] str = {"id","会计科目编码","会计科目名称","辅助核算名称","parentid","辅助核算内容","账套id"};
		return str;
	}

	/**
	 * 导出的excel字段属性名，class中必须存在此属性
	 * @return
	 */
	@Override
	public String[] getHeadItemsCodeAry() {
		// TODO Auto-generated method stub
		String[] str = {"id","code","name","assName","parentId","assContent","accountSetId"};
		return str;
	}

	/**
	 * 导出的excel字段在表格中占的宽度，与code一一对应，默认100，如不想显示比如ID字段，可设置为0。
	 * @return
	 */
	@Override
	public Integer[] getHeadItemsLength() {
		// TODO Auto-generated method stub
		Integer[] lengths = { 100, 100, 100, 100, 100, 100, 100};
		return lengths;
	}

	/**
	 * 导出字段在excel中是否红色显示 <br/> true:是（字段值不导出），false：否，null：红色、且字段值导出
	 * @return
	 */
	@Override
	public Boolean[] getHeadItemsColor() {
		// TODO Auto-generated method stub
		Boolean[] bool = { false, false, false, false, false, false, false};
		return bool;
	}

	/**
	 * 导出的excel实体类名
	 * @return
	 */
	@Override
	public Class<?> getEntityClass() {
		// TODO Auto-generated method stub
		return FiAccountCaption.class;
	}

	/**
	 * 导出到excel的具体数据
	 * @return
	 */
	@Override
	public List<?> getEntityList(IExcelHandler handler,String accountSetCode,long sysId,Long accountSetId,Long companyId) {
		// TODO Auto-generated method stub
		try{
		FiAccountCaptionService fiAccountCaptionService = (FiAccountCaptionService)handler;
		List<FiAccountCaption> accountCaptionList = null;
		if (StringUtils.isNotBlank(accountSetCode))
			accountCaptionList = fiAccountCaptionService.getAccountCaptionList("1",accountSetId);
		
		return accountCaptionList;
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 表格最上方的提示列表，为String集合，多条提示逐行显示
	 * @return
	 */
	@Override
	public List<String> getTipsList() {
		// TODO Auto-generated method stub
		List<String> tips = new ArrayList<String>();
		tips.add("说明：数据导出模板对格式有严格要求，请直接录入相关值，禁止增加或删除列，禁止删除此行及标题行，否则将导入失败！");
		return tips;
	}

	@Override
	public Map<String, Integer[]> getCellJoinMap() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?> getImpClass() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String[] getImportColumns() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String[] getImportHeadItemsName() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?>[] getImportColumnsType() {
		// TODO Auto-generated method stub
		return new Class[]{	Integer.class,String.class,String.class,String.class,Integer.class,String.class};
	}

	@Override
	public Boolean[] getColsIsImp() {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public int importPr(String accountSetCode,String sysId,String companyCode,String accountSetId,HSSFSheet sheet,Long companyId){
		int rowNum = sheet.getLastRowNum();// 行  
    	try{
    		String oldAccountSetId = ""; 
//    		getDao().executeSQL("SET IDENTITY_INSERT [dbo].[fi_account_caption] ON;");
    		if(DbType.getType().contains("dbo.")){
    			jt.execute("SET IDENTITY_INSERT [dbo].[fi_account_caption] ON");
    		}
			for(int k=2;k<=rowNum;k++){
	    		HSSFRow hssfRow = sheet.getRow(k);
	    		if (hssfRow == null) {
					continue;
				}
	    		oldAccountSetId = hssfRow.getCell(6)+"";
	    		if(oldAccountSetId.equals(accountSetId))
	    			return 1;
	    		Long parentId = null;
	    		if(StringUtils.isNotBlank(hssfRow.getCell(4)+"")){
	    			parentId = Long.valueOf(ExcelHandlerUtil.cutIdLength(ExcelHandlerUtil.getValue(hssfRow.getCell(4))+"")+accountSetId);
//	    			parentId = Long.valueOf(ExcelHandlerUtil.getValue(hssfRow.getCell(4))+"");
	    		}
	    		Long id = null;
	    		if(StringUtils.isNotBlank(hssfRow.getCell(0)+"")){
	    			id = Long.valueOf(ExcelHandlerUtil.cutIdLength(ExcelHandlerUtil.getValue(hssfRow.getCell(0))+"")+accountSetId);
	    		}
	    		if(DbType.getType().contains("dbo.")){
		    		String sql = "insert into fi_account_caption(id,status,create_date,code,name,ass_name,parent_id,ass_content,account_set_code,account_set_id) VALUES (?,?,?,?,?,?,?,?,?,?);";
		    		jt.update(sql, id,1,new Date(),ExcelHandlerUtil.getValue(hssfRow.getCell(1))+"",
		    				ExcelHandlerUtil.getValue(hssfRow.getCell(2))+"",ExcelHandlerUtil.getValue(hssfRow.getCell(3))+"",parentId,
		    				ExcelHandlerUtil.getValue(hssfRow.getCell(5))+"",accountSetCode,Long.valueOf(accountSetId));
	    		}else{
	    			String sql = "insert IGNORE into fi_account_caption(id,status,create_date,code,name,ass_name,parent_id,ass_content,account_set_code,account_set_id) VALUES (?,?,?,?,?,?,?,?,?,?)";
		    		getDao().executeSQL(sql, id,1,new Date(),ExcelHandlerUtil.getValue(hssfRow.getCell(1))+"",
		    				ExcelHandlerUtil.getValue(hssfRow.getCell(2))+"",ExcelHandlerUtil.getValue(hssfRow.getCell(3))+"",parentId,
		    				ExcelHandlerUtil.getValue(hssfRow.getCell(5))+"",accountSetCode,Long.valueOf(accountSetId));
	    		}
	    	} 
//			getDao().executeSQL("SET IDENTITY_INSERT [dbo].[fi_account_caption] OFF");
			if(DbType.getType().contains("dbo.")){
				jt.execute("SET IDENTITY_INSERT [dbo].[fi_account_caption] OFF");
			}
			return 2;
//			setParent(oldAccountSetId,accountSetId);
    	}catch(Exception e){
    		e.printStackTrace();
    		return 3;
    	}
	}
	
	public void setParent(String oldAccountSetId,String accountSetId){
		String hql="from FiAccountCaption where accountSetId='"+oldAccountSetId+"' ";
		String hql2="from FiAccountCaption where accountSetId='"+accountSetId+"' ";
		List<FiAccountCaption> list = getDao().findByHQL(FiAccountCaption.class, hql);
		List<FiAccountCaption> list2 = getDao().findByHQL(FiAccountCaption.class, hql2);
		for(FiAccountCaption fc:list){
			Long pid = fc.getParentId();
			String code = fc.getCode();
			for(FiAccountCaption fc2:list2){
				String code2 = fc2.getCode();
				if(StringUtils.isNotBlank(code) && code.equals(code2)){
					if(pid != null){
						FiAccountCaption c = this.getFiAccountCaptionById(pid);
						if(c != null){
							String pcode = c.getCode();
							String hql_="from FiAccountCaption where accountSetCode='"+accountSetId+"' and code ='"+pcode+"' group by code";
							FiAccountCaption fbc = getDao().findFirstByHQL(FiAccountCaption.class, hql_);
							if(fbc != null){
								Long pid_ = fbc.getId();
								fc2.setParentId(pid_);
								getDao().update(fc2);
							}
						}
					}
				}
			}
		}
	}
}
