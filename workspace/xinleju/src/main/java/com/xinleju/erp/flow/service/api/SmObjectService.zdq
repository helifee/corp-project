package com.xinleju.erp.flow.service.api;

import holo.web.csxmjc.service.ICsXmJcServices;



import java.lang.reflect.Method;
import java.util.Map;

import org.apache.commons.collections.map.LinkedMap;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;


import com.xinleju.erp.base.app.config.App;
import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.co.dataflow.service.ICOFlowCallBackService;
import com.xinleju.erp.com.service.ad.IADFlowService;
import com.xinleju.erp.com.service.zb.ISubFlowService;
import com.xinleju.erp.dataflow.service.IMDFlowCallBackService;
import com.xinleju.erp.ex.service.IEXFlowService;
import com.xinleju.erp.flow.dao.impl.FlDAO;
import com.xinleju.erp.flow.models.Fl;
import com.xinleju.erp.flow.utils.FlowExceptionUtils;
import com.xinleju.erp.pl.service.IAUService;
import com.xinleju.erp.qu.common.service.IFlowService;
import com.xinleju.erp.sa.service.ISaFlowUService;

/**
 * 其他业务系统servicebean
 * @author jun
 *
 */
@Service
public class SmObjectService extends BaseService {
	private static Logger log = Logger.getLogger(SmObjectService.class);
    /**
     * 接口类型-定时任务
     */
    public static final String INTERFACE_CODE_TASK = "interface_code_task";
    
    /**
     * 接口类型-定时任务
     */
    public static final String INTERFACE_CODE_FLOW = "interface_code_flow";
    
	/**
     * 流程DAO
     */
    @Autowired
    private FlDAO flDAO;
    
	/**
	 * 系统编码-招标系统
	 */
    
	public static final String APP_CODE_ZB = "ZB";
	
	/**
	 * 系统编码-主数据系统
	 */
	public static final String APP_CODE_MD = "MD";
	
	/**
	 * 系统编码-成本系统
	 */
	public static final String APP_CODE_CO = "CO";
	/**
	 * 系统编码-计划系统
	 */
	public static final String APP_CODE_PL = "PL";
	/**
	 * 系统编码-销售系统
	 */
	public static final String APP_CODE_SA = "SA";
	
	/**
	 * 系统编码-质量系统
	 */
	public static final String APP_CODE_QU = "QU";
	
	/**
	 * 系统编码-费用
	 */
	public static final String APP_CODE_EX = "EX";
	
	
	/**
	 *系统编码-考勤系统
	 */
	public static final String APP_CODE_AD="AD";
	
	/**
	 *系统编码-土投系统
	 */
	public static final String APP_CODE_TT="TT";
	
	/**
	 * 抓取业务数据
	 * @param flowcode 流程编码
	 * @param bizid 业务id
	 * @return 抓取业务数据
	 * @throws Exception
	 */
	public Map<String, Object> queryDetail(String flowCode, String bizid) throws Exception {
		String appCode = "";
		String soCode = "";
		if (StringUtils.isNotBlank(flowCode)){
			Fl fl = flDAO.getFl(flowCode);
			if (null != fl){
				appCode = fl.getAppCode();
				soCode = null != fl.getServiceObjectDefine() ? fl.getServiceObjectDefine().getCode() : "";
			}
		}
		return this.queryDetail(appCode, soCode, bizid);
	}
	
	/**
	 * 抓取业务数据
	 * @param flowcode 流程编码
	 * @param bizid 业务id
	 * @return 抓取业务数据
	 * @throws Exception
	 */
	public Map<String, Object> queryDetail(String appCode, String soCode, String bizid) throws Exception {
		Map<String, Object> queryDetailMap = null;
		if (StringUtils.isNotBlank(appCode) && StringUtils.isNotBlank(soCode) && StringUtils.isNotBlank(bizid)){
			queryDetailMap = this.invokeQueryDetail(appCode, soCode, bizid);
		}
		return queryDetailMap;
	}
	/**
	 * 回写流程接口
	 * @param appCode
	 * @param bizId
	 * @param soCode
	 * @param status
	 * @param endStatus
	 * @param endTime
	 * @param exData
	 * @throws Exception
	 */
	public Object sendFiStatus(String appCode, String bizId, String soCode, Integer status, Integer endStatus, String endTime, Map<String, Object> exData) throws Exception {
		return this.invokeSendFiStatusMethod(appCode, bizId, soCode, status, endStatus, endTime, exData);
	}
	
	/**
	 * 回写流程接口--节点通过
	 * @param appCode
	 * @param bizId
	 * @param soCode
	 * @param status
	 * @param endStatus
	 * @param endTime
	 * @param exData
	 * @throws Exception
	 */
	public void sendAiStatus(String appCode, String bizId, String soCode, Integer status, Integer endStatus, String endTime, Map<String, Object> exData) throws Exception {
		this.invokeSendAiStatusMethod(appCode, bizId, soCode, status, endStatus, endTime, exData);
	}
	
	private void invokeSendAiStatusMethod(String appCode, String bizId, String soCode, Integer status, Integer endStatus, String endTime, Map<String, Object> exData) throws Exception {
		Class<?> clazz = this.getSmObjectClass(appCode);
		log.info("entry into invokeSendAiStatusMethod 【bizId="+bizId+"===================="+"appCode="+appCode+"】");
		if (null != clazz){
	        Method method = this.getMethod(clazz, "sendAiStatus", String.class, String.class, Integer.class, Integer.class, String.class, Map.class);
	        if (null != method){
	            Object clazzBean = App.getBean(clazz);
	            if (null != clazzBean){
	                try {
	                    method.invoke(App.getBean(clazz), bizId, soCode, status, endStatus, endTime, exData); 
	                } catch (Exception e){
	                	log.error("调用外部接口：" + clazz.getName() + "的流程状态改变(sendAiStatus)方法" + "失败(msg:" + FlowExceptionUtils.getExceptionMsg(e) + ")！");
	                    throw new Exception("调用外部接口：" + clazz.getName() + "的流程状态改变(sendAiStatus)方法" + "失败(msg:" + FlowExceptionUtils.getExceptionMsg(e) + ")！");
	                }
	            } else {
	                throw new Exception("加载外部接口：" + clazz.getName() + "失败！");
	            }
	        } else {
	            throw new Exception("加载外部接口方法失败！");
	        }
		} else {
            throw new Exception("加载外部接口失败！");
        }
	}
	
	@SuppressWarnings("unchecked")
	private Map<String, Object> invokeQueryDetail(String appCode, String soCode, String bizid) throws Exception {
		Map<String, Object> map = null;
		Class<?> clazz = this.getSmObjectClass(appCode);
		if (null != clazz){
	        Method method = this.getMethod(clazz, "queryDetail", String.class, String.class);
	        if (null != method){
	            Object clazzBean = App.getBean(clazz);
	            if (null != clazzBean){
	                try {
	                    map = (Map<String, Object>) method.invoke(App.getBean(clazz), soCode, bizid);
	                } catch (Exception e){
	                    throw new Exception("调用外部接口：" + clazz.getName() + "的流程数据查询(queryDetail)方法" + "失败(msg:" + FlowExceptionUtils.getExceptionMsg(e) + ")！");
	                }
	            } else {
	                throw new Exception("加载外部接口：" + clazz.getName() + "失败！");
	            }
	        } else {
	            throw new Exception("加载外部接口方法失败！");
	        }
		} else {
		    throw new Exception("加载外部接口失败！");
		}
		return map;
	}
	

	
	private Object invokeSendFiStatusMethod(String appCode, String bizId, String soCode, Integer status, Integer endStatus, String endTime, Map<String, Object> exData) throws Exception {
		Class<?> clazz = this.getSmObjectClass(appCode);
		log.info("entry into invokeSendFiStatusMethod 【bizId="+bizId+"===================="+"appCode="+appCode+"】");
		if (null != clazz){
	        Method method = this.getMethod(clazz, "sendFiStatus", String.class, String.class, Integer.class, Integer.class, String.class, Map.class);
	        if (null != method){
	            Object clazzBean = App.getBean(clazz);
	            if (null != clazzBean){
	                try {
	                   Object obj= method.invoke(App.getBean(clazz), bizId, soCode, status, endStatus, endTime, exData);
	                   return obj;
	                } catch (Exception e){
	                	log.error("调用外部接口：" + clazz.getName() + "的流程状态改变(sendFiStatus)方法" + "失败(msg:" + FlowExceptionUtils.getExceptionMsg(e) + ")！");
	                    throw new Exception("调用外部接口：" + clazz.getName() + "的流程状态改变(sendFiStatus)方法" + "失败(msg:" + FlowExceptionUtils.getExceptionMsg(e) + ")！");
	                }
	            } else {
	                throw new Exception("加载外部接口：" + clazz.getName() + "失败！");
	     
	            }
	        } else {
	            throw new Exception("加载外部接口方法失败！");
	        }
		} else {
            throw new Exception("加载外部接口失败！");
        }
	}
	private Method getMethod(Class<?> clazz, String methodName,Class<?>... parameterTypes) throws Exception {
		Method method = null;
		if (null != clazz){
			method = clazz.getMethod(methodName, parameterTypes);
		}
		return method;
	}
	private Class<?> getSmObjectClass(String appCode){
		Class<?> clazz = null;
		if (StringUtils.isNotBlank(appCode)){
			appCode = appCode.trim().toUpperCase();
			if(APP_CODE_ZB.equals(appCode)){
			    clazz = ISubFlowService.class;
			} else if(APP_CODE_MD.equals(appCode)){
				clazz = IMDFlowCallBackService.class;
			} else if(APP_CODE_CO.equals(appCode)){
				clazz = ICOFlowCallBackService.class;
			} else if (APP_CODE_PL.equals(appCode)){
				clazz = IAUService.class;
			} else if(APP_CODE_SA.equals(appCode)){
				clazz = ISaFlowUService.class;
			} else if(APP_CODE_QU.equals(appCode)){
				clazz = IFlowService.class;
			}else if(APP_CODE_EX.equals(appCode)){
				clazz = IEXFlowService.class;
			}else if(APP_CODE_AD.equals(appCode)){
				clazz = IADFlowService.class;
			}else if(APP_CODE_TT.equals(appCode)){
				clazz = ICsXmJcServices.class;
			}
			
		}
		return clazz;
	}
	/**
	 * 获取接口map
	 * @author jun
	 * @return
	 */
	@SuppressWarnings("unchecked")
    public static Map<String, Map<String, String>> getInterfaceMap(){
	    Map<String, Map<String, String>> interfaceMapMap = new LinkedMap();
	    Map<String, String> interfaceMap = new LinkedMap();
	    interfaceMap.put("iPtBaseTaskJobService", "平台系统定时任务接口");
        interfaceMap.put("iCoBaseTaskJobService", "成本系统定时任务接口");
        interfaceMap.put("iZbBaseTaskJobService", "招采系统定时任务接口");
        interfaceMap.put("iSaBaseTaskJobService", "销售系统定时任务接口");
        interfaceMap.put("iExBaseTaskJobService", "费用系统定时任务接口");
        interfaceMap.put("iQuBaseTaskJobService", "质量系统定时任务接口");
        interfaceMap.put("iPlBaseTaskJobService", "计划系统定时任务接口");
        interfaceMap.put("iMdBaseTaskJobService", "主数据系统定时任务接口");
        interfaceMapMap.put(INTERFACE_CODE_TASK, interfaceMap);
        interfaceMap = new LinkedMap();
        interfaceMap.put("iPtBaseFlowDataService", "平台系统流程回调接口");
        interfaceMap.put("iCoBaseFlowDataService", "成本系统流程回调接口");
        interfaceMap.put("iZbBaseFlowDataService", "招采系统流程回调接口");
        interfaceMap.put("iSaBaseFlowDataService", "销售系统流程回调接口");
        interfaceMap.put("iQuBaseFlowDataService", "质量系统流程回调接口");
        interfaceMap.put("iPlBaseFlowDataService", "计划系统流程回调接口");
        interfaceMap.put("iMdBaseFlowDataService", "主数据系统流程回调接口");
        interfaceMapMap.put(INTERFACE_CODE_FLOW, interfaceMap);
	    return interfaceMapMap;
	}
	/**
	 * 获取接口map
	 * @author jun
	 * @param interfaceCode
	 * @return
	 */
	public static Map<String, String> getInterfaceMap(String interfaceCode){
	    Map<String, String> interfaceMap = new LinkedMap();
	    if (StringUtils.isNotBlank(interfaceCode)){
	        Map<String, Map<String, String>> interfaceMapMap = getInterfaceMap();
	        if (null != interfaceMapMap && interfaceMapMap.size() > 0 && interfaceMapMap.containsKey(interfaceCode.trim())){
	            interfaceMap = interfaceMapMap.get(interfaceCode);
	        }
	    }
	    return interfaceMap;
	}
}
