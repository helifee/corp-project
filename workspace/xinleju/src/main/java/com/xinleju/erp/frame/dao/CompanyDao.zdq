package com.xinleju.erp.frame.dao;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Repository;

import com.xinleju.erp.base.app.bean.Page;
import com.xinleju.erp.base.utils.StringHelper;
import com.xinleju.erp.flow.dao.impl.BaseDAO;
import com.xinleju.erp.frame.models.Company;
import com.xinleju.erp.frame.models.PartyType;
import com.xinleju.erp.frame.models.User;


/**
 * 公司Dao
 * @author chenhb
 *
 */
@Repository
public class CompanyDao extends BaseDAO {
	
	
	public static final int DELET_STATUS = 1;
	
	public void logicDelete(Long companyId) {
		changeStatus(companyId, DELET_STATUS);
	}

	/**
	 * 获得所有的公司，没有层级
	 * @param includeDisabled 是否包含禁用的
	 * @return
	 */
	public List<Company> getAllCompany(Boolean includeDisabled) {
		StringBuffer hqlSb = new StringBuffer();
		hqlSb.append(" from Company c where 1 = 1");
		if(includeDisabled == null || !includeDisabled) {
			hqlSb.append(" and (c.status is null or c.status =0)");
		}
		
		return getDao().findByHQL(Company.class, hqlSb.toString());
	}
	
	
	
	
	/**
	 * 获取公司有层级
	 * @param includeDisabled
	 * @return
	 */
	public List<Company> getAllCompanyLevel(Boolean includeDisabled) {
		StringBuffer hqlSb = new StringBuffer();
		hqlSb.append(" from Company c where 1 = 1");
		if(includeDisabled == null || !includeDisabled) {
			hqlSb.append(" and (c.status is null or c.status =0)");
		}
		
		return getDao().findByHQL(Company.class, hqlSb.toString());
	}
	
	
	public List<Company> getAllCompanyList(Boolean includeDisabled) {
		StringBuffer hqlSb = new StringBuffer();
		hqlSb.append(" from Company c where 1 = 1");
		if(includeDisabled == null || !includeDisabled) {
			hqlSb.append(" and (c.status is null or c.status =0)");
		}
		
		return getDao().findByHQL(Company.class, hqlSb.toString());
	}
	
	
	/**
	 * 依据code模糊查询所有Company @me
	 * @param includeDisabled 是否包含禁用的
	 * @param code
	 * @return
	 */
   public List<Company> getAllCompanyByCode(Boolean includeDisabled,String code){
	   StringBuffer hqlSb=new StringBuffer();
	   hqlSb.append("from Company c where 1 = 1");
	   if(StringUtils.isNotBlank(code)){
		   hqlSb.append("c.code like ?");
	   }
	   if(includeDisabled == null || !includeDisabled) {
			hqlSb.append(" and (c.status is null or c.status =0)");
	   }
	   return getDao().findByHQL(Company.class, hqlSb.toString(), "%"+code+"%");   
    }
   
   
     /**带分页的查询所有公司
      * @param code 公司代码
      * @param start 页面的开始
      * @param limit 查询多少条
      */
   public Page getAllCompanyByCodeHasPage(String code,Integer start,Integer limit){
	   StringBuffer hqlSb=new StringBuffer();
	   List<Object> params=new ArrayList<Object>();
	   hqlSb.append("from Company c where status=0");
	   if(StringUtils.isNotBlank(code)){
		   hqlSb.append("c.code like ?");
		   params.add("%"+code+"%");
	   }
	   
	   return getDao().findPageByHQL(Company.class, hqlSb.toString(), params.toArray(), start, limit);
   }
   
   
	
	/**
	 * 根据ID获取公司
	 * @param includeDisabled
	 * @param companyId
	 * @return
	 */
	public Company getCompanyById(Boolean includeDisabled,Long companyId) {
		StringBuffer hqlSb = new StringBuffer();
		hqlSb.append(" from Company c where 1 = 1");

		hqlSb.append(" and c.id ="+companyId);
		if(includeDisabled == null || !includeDisabled) {
			hqlSb.append(" and (c.status is null or c.status = 0) ");
		}
		return getDao().findFirstByHQL(Company.class, hqlSb.toString());
	}


	/**
	 * 根据IDs获取公司
	 * @param includeDisabled
	 * @param companyIds
	 * @return
	 */
	public List<Company> getCompanyByIds(Boolean includeDisabled,String[] companyIds) {
		StringBuffer hqlSb = new StringBuffer();
		hqlSb.append(" from Company c where 1 = 1");

		hqlSb.append(" and c.id in  ('" + StringHelper.join(companyIds, "','") + "')");

		if(includeDisabled == null || !includeDisabled) {
			hqlSb.append(" and (c.status is null or c.status = 0) ");
		}
		return getDao().findByHQL(Company.class, hqlSb.toString());
	}
	public void changeStatus(Long companyId, Integer status ){
		if (null != companyId && null != status){
			getDao().execute("update Company set status = ? where id= ?", status, companyId);
		}
	}
}
