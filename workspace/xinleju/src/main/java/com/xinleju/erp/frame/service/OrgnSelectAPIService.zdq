package com.xinleju.erp.frame.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.cxf.common.util.StringUtils;
import org.json.JSONArray;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.flow.service.api.ApiConstant;
import com.xinleju.erp.flow.service.api.extend.BaseAPI;
import com.xinleju.erp.flow.service.api.extend.dto.OrgnDTO;
import com.xinleju.erp.flow.service.api.extend.dto.UserDTO;

/**
 * 
 * 版权：(C) 版权所有 2000-2014 上海天好电子商务有限公司苏州分公司 <给OrgnSelectAction做的Service> <详细描述>
 * 
 * @author 胡科
 * @version $Id$
 * @since
 * @see
 */
@Service
public class OrgnSelectAPIService extends BaseService {

	/**
	 * 基础API。为页面提供zTree的数据，还有用户。
	 */
	@Autowired
	@Qualifier(ApiConstant.BEAN_CODE)
	private BaseAPI baseAPI;

	/**
	 * 
	 * 〈提供已经存在的用户列表〉 〈详细描述〉
	 * 
	 * @author 胡科
	 * @param existingPersonIds
	 *            已经存在的用户ID构成的字符串
	 * @return 提供已经存在的用户列表
	 */
	public List<UserDTO> getExistingUsers(String existingPersonIds) {
		if (!StringUtils.isEmpty(existingPersonIds)) {
			String[] strNew = existingPersonIds.split(",");
			List<UserDTO> users = new ArrayList<UserDTO>();
			for (String str : strNew) {
				users.add(baseAPI.getUserById(Long.parseLong(str)).getResult());
			}
			return users;
		}
		return null;
	}

	/**
	 * 
	 * 〈提供zTree父节点的子节点数据〉 〈详细描述〉
	 * 
	 * @author 胡科
	 * @param parentId
	 *            父节点ID
	 * @return 提供zTree父节点的子节点数据
	 */
	public String getChildrenOrgns(Long parentId) {

		List<OrgnDTO> subOrgns = new ArrayList<OrgnDTO>();
		if (null == parentId) {
			List<OrgnDTO> orgns = findOrgnDto(null);
			parentId = orgns.get(0).getId();
			subOrgns.addAll(orgns);
			subOrgns.addAll(findOrgnDto(parentId));
		} else {
			subOrgns = findOrgnDto(parentId);
		}
		List<Map<String, Object>> zTreeBranches = new ArrayList<Map<String, Object>>();
		for (OrgnDTO or : subOrgns) {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("id", or.getId());
			if (!or.getId().equals(parentId)) {
				map.put("pId", parentId);
			}
			map.put("name", or.getName());
			if (findOrgnDto(or.getId()).size() == 0) {
				map.put("isParent", false);
			} else {
				map.put("isParent", true);
			}
			if (or.getId().longValue() == findOrgnDto(null).get(0).getId().longValue()) {
				map.put("open", true);
			}
			zTreeBranches.add(map);
		}
		JSONArray arr = new JSONArray(zTreeBranches);

		return arr.toString();
	}

	/**
	 * 
	 * 〈简述〉 〈详细描述〉
	 * 
	 * @author Administrator
	 * @param parentId
	 *            希望得到的子节点的父节点
	 * @return 返回父节点parentId的子节点。如果parentId为空，那么返回跟节点
	 */
	public List<OrgnDTO> findOrgnDto(Long parentId) {
		String includeTypes[] = new String[] { "zb", "company", "department", "group", "role" };
		List<OrgnDTO> orgns = new ArrayList<OrgnDTO>();
		if (null == parentId) {
			orgns = baseAPI.findRootOrgns(includeTypes).getResult();
		} else {
			orgns = baseAPI.findSubOrgns(parentId, includeTypes).getResult();
		}
		return orgns;
	}

}