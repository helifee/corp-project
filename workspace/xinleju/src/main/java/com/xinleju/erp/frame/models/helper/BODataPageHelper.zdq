package com.xinleju.erp.frame.models.helper;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;
import net.sf.json.processors.DefaultValueProcessor;

import com.xinleju.erp.base.app.config.App;
import com.xinleju.erp.frame.dto.FiBillDTO;
import com.xinleju.erp.frame.enums.FiFieldFlagEnum;
import com.xinleju.erp.frame.enums.FiFieldTypeEnum;
import com.xinleju.erp.frame.enums.VoucherStateEnum;
import com.xinleju.erp.frame.exception.ValidateException;
import com.xinleju.erp.frame.itf.IFetchBillData;
import com.xinleju.erp.frame.models.BOData;
import com.xinleju.erp.frame.models.BOFieldData;
import com.xinleju.erp.frame.models.BOFieldInfo;
import com.xinleju.erp.frame.models.BusinessObject;
import com.xinleju.erp.frame.models.extender.BODataExtender;
import com.xinleju.erp.frame.models.extender.BODataHelperExtender;
import com.xinleju.erp.frame.service.FiBusinessService;
import com.xinleju.erp.frame.service.extend.dto.FiAggDTO;
import com.xinleju.erp.frame.utils.CommonUtil;
import com.xinleju.erp.frame.utils.BillImplProxy;
public class BODataPageHelper {
	private  FiBusinessService fiBusinessService;
	private List<BOFieldInfo> boFieldInfoList = null;
	private BOFieldHelper boFieldhelper;
	private static String FIELD_TAG =  "_";
	public BODataPageHelper(List<BOFieldInfo> boFieldInfoList){
		this.boFieldInfoList = boFieldInfoList;
		boFieldhelper = new BOFieldHelper(boFieldInfoList);	
	}
	
	private JSONObject getVoucherStateCondition(){
		JSONObject condition = new JSONObject();
		condition.put("key", "voucherstate");
		condition.put("name", "凭证生成状态");
		JSONArray values = new JSONArray();
		for(VoucherStateEnum state : VoucherStateEnum.values()){
			JSONObject value = new JSONObject();
			value.put("key", state.getKey());
			value.put("name", state.getName());
			values.add(value);
		}
		condition.put("values", values);
		return condition;
	}
	
	public FiBusinessService getFiBusinessService() {
		return fiBusinessService == null? fiBusinessService = App.getBean(FiBusinessService.class):fiBusinessService;
	}
	
	public  JSONArray getShowFields() {
		JSONArray jsonArray = new JSONArray();
		JSONObject mergenum = new JSONObject();
		mergenum.put("key","mergenum");
		mergenum.put("name","合并号");
		jsonArray.add(mergenum);
		if(boFieldInfoList == null || boFieldInfoList.size() == 0)
			return jsonArray;
		for(BOFieldInfo fieldINfo : boFieldInfoList){
			if(FiFieldFlagEnum.FLAG_KEY.getKey().equals(fieldINfo.getFlag()))
				continue;
			JSONObject jsonField = new JSONObject();
			String fieldkey = fieldINfo.getFieldkey();
			if(FiFieldTypeEnum.TYPE_ENUM.getKey().equals(fieldINfo.getVtype())){
				fieldkey += "_name";
			}
			jsonField.put("key", FIELD_TAG+fieldkey);
			jsonField.put("name", fieldINfo.getFieldname());
			jsonArray.add(jsonField);
		}
		JSONObject createDate = new JSONObject();
		createDate.put("key","createDate");
		createDate.put("name","生成日期");
		jsonArray.add(createDate);
		JSONObject voucherstate = new JSONObject();
		voucherstate.put("key","voucherstate_name");
		voucherstate.put("name","生成凭证状态");
		jsonArray.add(voucherstate);
		return jsonArray;
	}

	public  JSONArray getQuicklyConditions() {
		JSONArray conditions = new JSONArray();
		conditions.add(getVoucherStateCondition());
		if(boFieldInfoList == null || boFieldInfoList.size() == 0)
			return conditions;
		List<Long> dsidList  = new ArrayList<Long>();
		List<BOFieldInfo> enumList= boFieldhelper.getFieldList(FiFieldTypeEnum.TYPE_ENUM);
		for(BOFieldInfo field : enumList){
			dsidList.add(field.getDsid());
		}
		FiAggDTO[] aggDtos = getFiBusinessService().queryAggByIds(BusinessObject.class, dsidList.toArray(new Long[0]));
		Map<Long,FiAggDTO> aggMap = new HashMap<Long,FiAggDTO>();
		for(FiAggDTO agg : aggDtos){
			if(agg == null || agg.getParent() == null)
				continue;
			aggMap.put(agg.getParent().getId(), agg);
		}
		for(BOFieldInfo field : enumList){
			JSONObject condition = getCondition(field, aggMap);
			conditions.add(condition);
		}
		return conditions;
	}
	
	private JSONObject getCondition(BOFieldInfo field,Map<Long,FiAggDTO> aggMap){
//		FiAggDTO agg = aggMap.get(field.getDsid()); 
//		if(agg == null || agg.getParent() == null) 
//			return null;
//		IFetchBillData fetcher = BillImplProxy.getFetchVoucherDataImpl(((BusinessObject)agg.getParent()).getVfetchdataclass());
//		if(fetcher == null)
//			return null;
//		List<FiBillDTO> fvdtoList = fetcher.fetchVoucherData();
//		if(fvdtoList == null || fvdtoList.size() == 0)
//			return null;
//		@SuppressWarnings("unchecked")
//		List<BOFieldInfo> fieldLsit = (List<BOFieldInfo>) agg.getChildren(BOFieldInfo.class);
//		BOFieldHelper helper = new BOFieldHelper(fieldLsit);
//		JSONObject condition = new JSONObject();
//		condition.put("key", field.getFieldkey());
//		condition.put("name", field.getFieldname());
//		JSONArray values = new JSONArray();
//		for(FiBillDTO fvdto : fvdtoList){
//			JSONObject value = new JSONObject();
//			value.put("key", fvdto.getAttribute(helper.getKeyfield().getFieldkey()));
//			value.put("name",  fvdto.getAttribute(helper.getNamefield().getFieldkey()));
//			values.add(value);
//			fvdto.getAttribute(helper.getKeyfield().getFieldkey());
//		}
//		condition.put("values",values);
//		return condition;
		return null;
	}
	
	public static JSONObject transListResult(int total , List<BODataHelper> list ,BODataHelperExtender extender){
		JSONObject res = new JSONObject();
		res.put("total", total);
		JSONArray array = transList(list,extender);
		res.put("rows", array);
		return res;
	}
	
	public static JSONArray transList(List<BODataHelper> list,BODataHelperExtender extender){
		JSONArray array = new JSONArray();
		if(list != null && list.size() > 0){
			for(BODataHelper helper : list){
				JsonConfig cfg = new JsonConfig();
				cfg.registerDefaultValueProcessor(Long.class,     new DefaultValueProcessor() {  
		            public Object getDefaultValue(@SuppressWarnings("rawtypes") Class type) {  
			               return null;  
		           }} );  
				JSONObject jobj =trans(helper, cfg,extender);
				array.add(jobj);
			}
		}
		return array;
	}

	public static JSONObject trans(BODataHelper helper, JsonConfig cfg ,BODataHelperExtender extender) {
		JSONObject jboj = CommonUtil.transEx(helper.getBoData(),cfg, new BODataExtender());
		Map<String, Object> map = helper.getDataMap();
		for(String key :map.keySet()){
			jboj.put(FIELD_TAG+key , map.get(key));
		}
		for(String field : extender.getExtenderFields(helper)){
			jboj.put(FIELD_TAG+field, extender.getExtenderValue(field, helper));
		}
		return  jboj;
	}
	
	
	public static FiAggDTO[] jarray2BODataAggDTOs(JSONArray vouchers,List<BOFieldInfo> fields) throws ValidateException {
		List<FiAggDTO> list= new ArrayList<FiAggDTO>();
		for(int i = 0 ; i < vouchers.size() ; i++){
			FiAggDTO agg = json2BODataAggDTO((JSONObject)vouchers.get(i) , fields);
			list.add(agg);
		}
		return list.toArray(new FiAggDTO[0]);
	}

	public static  FiAggDTO json2BODataAggDTO(JSONObject jsonObject,List<BOFieldInfo> fields) {
		FiAggDTO dto = new FiAggDTO();
		BOData boData =(BOData) JSONObject.toBean(jsonObject,BOData.class);
		if(boData.getId() == null){
			boData.setCreateDate(new Date());
			boData.setEditDate(new Date());
		}else{
			boData.setEditDate(new Date());
		}
		dto.setParent(boData);
		List<BOFieldData> fieldDatas = new ArrayList<BOFieldData>();
		for(BOFieldInfo field: fields){
			BOFieldData fielddata = new BOFieldData();
			String key = field.getFieldkey();
			fielddata.setFieldkey(key);
			Object value = jsonObject.get(FIELD_TAG+key);
			if(value == null)
				value = "";
			if(value instanceof JSONObject && FiFieldTypeEnum.TYPE_DATE.getKey().equals(field.getVtype()))
				value = JSONObject.toBean((JSONObject)value,Date.class);
			fielddata.setFieldvalue(value.toString());
			fieldDatas.add(fielddata);
		}
		dto.addChildren(BOFieldData.class, fieldDatas.toArray(new BOFieldData[0]));
		return dto;
	}
}
