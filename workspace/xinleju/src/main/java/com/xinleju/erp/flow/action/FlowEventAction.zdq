package com.xinleju.erp.flow.action;

import java.util.Map;

import org.apache.commons.collections.map.LinkedMap;
import org.apache.commons.lang3.StringUtils;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.flow.models.FlowEvent;
import com.xinleju.erp.flow.service.extend.dto.FlowEventDto;

/**
 * <p>
 * 事件列表
 * </p>
 * <p>
 * </p>
 * 
 * @author 孙朝辉
 * @version $Id: FlowEventAction.java 1104 2014-07-29 00:56:18Z sunchaohui $
 * @since
 * @see
 */
public class FlowEventAction extends BaseAction {

    private FlowEventDto flowEventDto;
    
    /**
     * 
     * <p>
     * 事件列表
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @return Event-list.jsp
     */
    @SuppressWarnings("unchecked")
    public String list() {
        Map<String, String> statusMap = new LinkedMap();
        statusMap.put(FlowEventDto.IS_STATUS_N, "未处理");
        statusMap.put(FlowEventDto.IS_STATUS_Y, "已处理");
        request.setAttribute("statusMap", statusMap);
        Map<String, String> codeMap = new LinkedMap();
        codeMap.put(FlowEvent.EVENT_CODE_WS, "工作开始（WS）");
        codeMap.put(FlowEvent.EVENT_CODE_WE, "工作结束（WE）");
        codeMap.put(FlowEvent.EVENT_CODE_WR, "工作重开（WR）");
        codeMap.put(FlowEvent.EVENT_CODE_WO, "工作过期（WO）");
        codeMap.put(FlowEvent.EVENT_CODE_AS, "活动开始（AS）");
        codeMap.put(FlowEvent.EVENT_CODE_AE, "活动结束（AE）");
        codeMap.put(FlowEvent.EVENT_CODE_AO, "活动过期（AO）");
        codeMap.put(FlowEvent.EVENT_CODE_FS, "流程开始（FS）");
        codeMap.put(FlowEvent.EVENT_CODE_FE, "流程结束（FE）");
        codeMap.put(FlowEvent.EVENT_CODE_FO, "流程作废（FO）");
        request.setAttribute("codeMap", codeMap);
        Long srcId = null;
        String code = "";
        String isScan = "";
        if (null != flowEventDto){
            if (StringUtils.isNotBlank(flowEventDto.getKeyword()) && StringUtils.isNumeric(flowEventDto.getKeyword().trim())){
                srcId = Long.valueOf(flowEventDto.getKeyword().trim());
            }
            isScan = flowEventDto.getStatus();
            code = flowEventDto.getCode();
        }
        DetachedCriteria dc = DetachedCriteria.forClass(FlowEvent.class);
        if (srcId != null) {
            dc.add(Restrictions.eq("srcId", srcId));
        }

        if (StringUtils.isNotEmpty(code)) {
            dc.add(Restrictions.eq("code", code));
        }

        if (FlowEventDto.IS_STATUS_N.equals(isScan)) {
            dc.add(Restrictions.eqOrIsNull("isScan", 0));
        } else if (FlowEventDto.IS_STATUS_Y.equals(isScan)) {
            dc.add(Restrictions.eqOrIsNull("isScan", 1));
        }
        page = getCommonService().findPage(dc, start, limit);
        return "list";
    }

    public FlowEventDto getFlowEventDto() {
        return flowEventDto;
    }

    public void setFlowEventDto(FlowEventDto flowEventDto) {
        this.flowEventDto = flowEventDto;
    }
}
