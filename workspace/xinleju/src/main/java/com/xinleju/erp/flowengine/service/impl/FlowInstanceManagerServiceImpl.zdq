package com.xinleju.erp.flowengine.service.impl;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.flowengine.events.FlowInstanceEventService;
import com.xinleju.erp.flowengine.events.FlowInstanceStepEventService;
import com.xinleju.erp.flowengine.models.FlowInstance;
import com.xinleju.erp.flowengine.models.FlowInstanceStep;
import com.xinleju.erp.flowengine.models.FlowInstanceStepWork;
import com.xinleju.erp.flowengine.models.FlowInstanceStepWorkTask;
import com.xinleju.erp.flowengine.models.FlowInstanceStepWorkTaskExtend;
import com.xinleju.erp.flowengine.service.FlowInstanceManagerService;
import com.xinleju.erp.flowengine.service.TaskRelationMsgManagerService;

@Service
public class FlowInstanceManagerServiceImpl extends BaseService implements FlowInstanceManagerService{

	@Resource
	private TaskRelationMsgManagerService taskRelationMsgManagerService;
	
	@Resource
	private FlowInstanceEventService flowInstanceEventService;
	@Resource
	private FlowInstanceStepEventService flowInstanceStepEventService;

	@Override
	public void saveFlowInstanceStepWork(
			FlowInstanceStepWork flowInstanceStepWork) throws Exception {
		getDao().save(flowInstanceStepWork);
		getDao().flush();
	}

	@Override
	public void updateFlowInstanceStepWork(
			FlowInstanceStepWork flowInstanceStepWork) throws Exception {
		getDao().update(flowInstanceStepWork);
		getDao().flush();
	}

	@Override
	public void saveFlowInstanceStep(FlowInstanceStep flowInstanceStep)
			throws Exception {
		getDao().save(flowInstanceStep);
		getDao().flush();
	}

	@Override
	public void updateFlowInstanceStep(FlowInstanceStep flowInstanceStep)
			throws Exception {
		 getDao().update(flowInstanceStep);
		 getDao().flush();
		 flowInstanceStepEventService.changeAfterUpdateFlowInstanceStepEvent(flowInstanceStep);
	}

	@Override
	public void saveFlowInstance(FlowInstance flowInstance) throws Exception {
		getDao().save(flowInstance);
		getDao().flush();
	}

	@Override
	public void updateFlowInstance(FlowInstance flowInstance) throws Exception {
		getDao().update(flowInstance);
		getDao().flush();
		flowInstanceEventService.changeAfterUpdateFlowInstanceEvent(flowInstance);
	}
	
	@Override
	public void saveFlowInstanceStepWorkTask(
			FlowInstanceStepWorkTask flowInstanceStepWorkTask) throws Exception {
		getDao().save(flowInstanceStepWorkTask);
		getDao().flush();
		taskRelationMsgManagerService.sendFlowInstanceStepWorkTask(flowInstanceStepWorkTask);
	}

	@Override
	public void updateFlowInstanceStepWorkTask(
			FlowInstanceStepWorkTask flowInstanceStepWorkTask) throws Exception {
		getDao().update(flowInstanceStepWorkTask);
		getDao().flush();
		taskRelationMsgManagerService.sendFlowInstanceStepWorkTask(flowInstanceStepWorkTask);
	}

	@Override
	public void saveFlowInstanceStepWorkTaskExtend(
			FlowInstanceStepWorkTaskExtend flowInstanceStepWorkTaskExtend)throws Exception  {
		    getDao().save(flowInstanceStepWorkTaskExtend);
			getDao().flush();
			taskRelationMsgManagerService.sendFlowInstanceStepWorkTaskExtend(flowInstanceStepWorkTaskExtend);
	}

	@Override
	public void updateFlowInstanceStepWorkTaskExtend(
			FlowInstanceStepWorkTaskExtend flowInstanceStepWorkTaskExtend) throws Exception {
		   getDao().update(flowInstanceStepWorkTaskExtend);
			getDao().flush();
			taskRelationMsgManagerService.sendFlowInstanceStepWorkTaskExtend(flowInstanceStepWorkTaskExtend);
		
	}
	
	

}
