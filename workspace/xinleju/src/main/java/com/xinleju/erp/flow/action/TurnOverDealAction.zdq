package com.xinleju.erp.flow.action;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.base.utils.CollectionUtils;
import com.xinleju.erp.flow.frameapi.domain.User;
import com.xinleju.erp.flow.models.Fl;
import com.xinleju.erp.flow.service.DesignerService;
import com.xinleju.erp.flow.service.FlowService;
import com.xinleju.erp.flow.service.TurnOverDealService;
import com.xinleju.erp.flow.service.api.OrgnAPIService;
import com.xinleju.erp.form.utils.DbType;
import com.xinleju.erp.frame.models.PartyEntity;
import com.xinleju.erp.frame.service.PartyEntityService;
import com.xinleju.erp.frame.service.PartyStructService;
import com.xinleju.erp.frame.service.PartyStructTypeService;
import com.xinleju.erp.frame.service.RoleService;

/**
 * 版权：(C) 版权所有 2000-2014 上海天好电子商务有限公司苏州分公司
 * 离职处理
 * @author   zhongjun
 * @version  $Id$
 * @since
 * @see
 */
public class TurnOverDealAction extends BaseAction {
    
    /**
     * 数据库访问
     */
    @Autowired
    private JdbcTemplate jt;
    
    /**
     * 流程Service
     */
    @Autowired
    private FlowService flowService;
    
    /**
     * 工作流设计Service
     */
    @Autowired
    private DesignerService designerService;
    
    @Autowired
    private TurnOverDealService turnOverDealService;
    
    /**
     * 人员Service
     */
    @Autowired
    private OrgnAPIService orgnAPIService;
    
	@Autowired
	private PartyStructTypeService partyStructTypeService;  
	@Autowired
	private PartyEntityService partyEntityService;
	@Autowired
	private PartyStructService partyStructService; 	
	@Autowired
	private RoleService roleService;
    /**
     * 离职处理主页面
     * @author jun
     * @return 离职处理主页面
     */
    public String index() {
        return "index";
    }
    
    /**
     * 需要处理的流程实例列表
     * @author jun
     * @return 需要处理的流程实例列表
     */
    public String fiList(){
        return "fiList";
    }
    
//    /**
//     * 需要处理的流程实例列表
//     * @author jun
//     * @return 需要处理的流程实例列表
//     * @throws UnsupportedEncodingException 
//     */
//    public String flList() throws UnsupportedEncodingException{
//        String partyEntityId = request.getParameter("partyEntityId");
////        String partyEntityName = request.getParameter("partyEntityName");
//        String partyEntityName = (request.getParameter("partyEntityName") == null ? null : java.net.URLDecoder.decode(request.getParameter("partyEntityName"),"UTF-8")); 
//        
//            String sqlLimit =" exists(select 'y' from tf_fl tf1 where tf1.id = {alias}.id and tf1.flow_version = (select max(tf2.flow_version) from tf_fl tf2"
//                    + " where tf2.flow_code = {alias}.flow_code"
//                    + " and (tf2.is_disabled is null or tf2.is_disabled <> 1)"
//                    + " ))";
//            DetachedCriteria dc = DetachedCriteria.forClass(Fl.class);
//            dc.add(Restrictions.sqlRestriction(sqlLimit));
//            dc.addOrder(Order.asc("id"));
//            page = getCommonService().findPage(dc, start, limit);
//        super.setParameterAttribute("partyEntityId");
//        super.setParameterAttribute("partyEntityName");
//        if (StringUtils.isNotBlank(partyEntityId)){
//            String fromPartyIdVar = StringUtils.isNotBlank(partyEntityId) ? partyEntityId.substring(1, partyEntityId.indexOf(")")) : "";
//            String fromPartyVar = StringUtils.isNotBlank(partyEntityName) ? ( partyEntityName.indexOf(";") >= 0 ? partyEntityName.substring(0, partyEntityName.indexOf(";")) : partyEntityName ) : "请选择";
//            request.setAttribute("fromPartyIdVar", fromPartyIdVar);
//            request.setAttribute("fromPartyVar", fromPartyVar);
//        }
//        Map<String, Map<String, Object>> ctMap = null;
//        Map<String, Object> map = null;
//        if (null != page && null != page.getItems() && page.getItems().size() > 0){
//            /*String sqlStr = "select tc.id as id,(select max(sys_connect_by_path(tcc.name, '/'))"
//                    + " from tf_ct tcc start with tcc.id = tc.id connect by tcc.id = prior tcc.parent_id) as namePath"
//                    + " from tf_ct tc where tc.id in (" + StringHelper.join(CollectionUtils.collectAsList(page.getItems(), "ctId"), ",") + ")";
//            ctMap = this.getObjectMap(sqlStr);*/
//            ctMap = new HashMap<String, Map<String,Object>>();
//            for (Object ctId : CollectionUtils.collectAsList(page.getItems(), "ctId")){
//                if (null != ctId){
//                    map = new HashMap<String, Object>();
//                    map.put(ctId.toString(), CtAction.getCtNamePath(Long.valueOf(ctId.toString())));
//                    ctMap.put(ctId.toString(), map);
//                } else {
//                    map = new HashMap<String, Object>();
//                    map.put(null, "");
//                    ctMap.put(null, map);
//                }
//            }
//        }
//        request.setAttribute("ctMap", ctMap);
//        return "flList";
//    }
    /**
     * 查询需要处理的流程模板列表
     * @author jun
     * @return 
     * @throws UnsupportedEncodingException 
     */
    public String flList(){
    	try{
		        String fromPartyIdVar = request.getParameter("fromPartyIdVar");
		        String toPartyIdVar = request.getParameter("toPartyIdVar");
		        String fromPartyVar = (request.getParameter("fromPartyVar") == null ? null : java.net.URLDecoder.decode(request.getParameter("fromPartyVar"),"UTF-8"));
		        String toPartyVar = (request.getParameter("toPartyVar") == null ? null : java.net.URLDecoder.decode(request.getParameter("toPartyVar"),"UTF-8"));
		        
		        request.setAttribute("fromPartyIdVar", fromPartyIdVar);
		        request.setAttribute("fromPartyVar", fromPartyVar);
		        request.setAttribute("toPartyIdVar", toPartyIdVar);
		        request.setAttribute("toPartyVar", toPartyVar);
		        
		        if (StringUtils.isNotBlank(fromPartyIdVar)) {
			        String sqlLimit =" exists(select 'y' from tf_fl tf1 where tf1.id = {alias}.id and tf1.flow_version = (select max(tf2.flow_version) from tf_fl tf2"
			                + " where tf2.flow_code = {alias}.flow_code"
			                + " and (tf2.is_disabled is null or tf2.is_disabled <> 1)"
			                + " ))";
			        
			        DetachedCriteria dc = DetachedCriteria.forClass(Fl.class);
			        dc.add(Restrictions.sqlRestriction(sqlLimit));
			        if(StringUtils.isNotBlank(fromPartyVar)){
			        String sqlpartipart =" exists(select 'y' from tf_ac  tr where tr.flow_version = {alias}.flow_version and tr.flow_code =  {alias}.flow_code and "+DbType.getType()+"locate('"+fromPartyIdVar+":',tr.paticipant_list)>0  ) ";
			           dc.add(Restrictions.sqlRestriction(sqlpartipart));
			        }
			        
			        
			        dc.addOrder(Order.asc("id"));
			        page = getCommonService().findPage(dc, start, limit);
			
			        Map<String, Map<String, Object>> ctMap = null;
			        Map<String, Object> map = null;
			        if (null != page && null != page.getItems() && page.getItems().size() > 0){
			            ctMap = new HashMap<String, Map<String,Object>>();
			            for (Object ctId : CollectionUtils.collectAsList(page.getItems(), "ctId")){
			                if (null != ctId){
			                    map = new HashMap<String, Object>();
			                    map.put(ctId.toString(), CtAction.getCtNamePath(Long.valueOf(ctId.toString())));
			                    ctMap.put(ctId.toString(), map);
			                } else {
			                    map = new HashMap<String, Object>();
			                    map.put(null, "");
			                    ctMap.put(null, map);
			                }
			            }
			        }
			        request.setAttribute("ctMap", ctMap);	
				}
    	}catch(Exception e){
    		e.printStackTrace();
    	}
        return "flList";
    }   
    /**
     * 需要处理的流程实例列表
     * @author jun
     * @return 需要处理的流程实例列表
     */
    public String wiList() throws UnsupportedEncodingException{
    	
        String fromPartyIdVar = request.getParameter("fromPartyIdVar");
        String toPartyIdVar = request.getParameter("toPartyIdVar");
        String fromPartyVar = (request.getParameter("fromPartyVar") == null ? null : java.net.URLDecoder.decode(request.getParameter("fromPartyVar"),"UTF-8"));
        String toPartyVar = (request.getParameter("toPartyVar") == null ? null : java.net.URLDecoder.decode(request.getParameter("toPartyVar"),"UTF-8"));
        String userPostDivHtml = (request.getParameter("userPostDivHtml") == null ? null : java.net.URLDecoder.decode(request.getParameter("userPostDivHtml"),"UTF-8"));
        request.setAttribute("fromPartyIdVar", fromPartyIdVar);
        request.setAttribute("fromPartyVar", fromPartyVar);
        request.setAttribute("toPartyIdVar", toPartyIdVar);
        request.setAttribute("toPartyVar", toPartyVar);
        request.setAttribute("userPostDivHtml", userPostDivHtml);
        try {
			if(StringUtils.isNotBlank(fromPartyVar)){
				page =turnOverDealService.getFlowInstanceByParticipant(fromPartyVar, start, limit);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
        return "wiList";
    }
    /**
     * 替换流程模板参与人
     * @author jun
     */
    public void replaceFlParticipant(){
        Map<String, Object> result = new HashMap<String, Object>();
        try {
            String participantString = getParameter("participantString");
            String toParticipantString = getParameter("toParticipantString");
            try {
                participantString = URLDecoder.decode(StringUtils.isNotBlank(participantString) ? participantString : "", "UTF-8");
            } catch (UnsupportedEncodingException e1) {
//                e1.printStackTrace();
            }
            try {
                toParticipantString = URLDecoder.decode(StringUtils.isNotBlank(toParticipantString) ? toParticipantString : "", "UTF-8");
            } catch (UnsupportedEncodingException e1) {
//                e1.printStackTrace();
            }
            String idsString = getParameter("ids");
            if (StringUtils.isNotBlank(idsString)){
                String[] idsStr = idsString.split(";");
                ids = new Long[idsStr.length];
                for (int i = 0; i < idsStr.length; i++){
                    ids[i] = Long.valueOf(idsStr[i]);
                }
            }
            designerService.replaceParticipant(participantString, toParticipantString, ids);
            result.put("success", true);
        } catch (Exception e) {
            result.put("success", false);
        }
        renderJson(result);
    }
    /**
     * 替换流程模板参与人
     * @author jun
     */
    public void replaceWiParticipant(){
        Map<String, Object> result = new HashMap<String, Object>();
        try {
            boolean isSuccess = false;
            String msg = "目标参与者不存在!";
            String toParticipantString = getParameter("toParticipantString");
            String fromParticipantString = getParameter("fromParticipantString");
            String idsString = getParameter("ids");
            String[] ids=null;
            if (StringUtils.isNotBlank(idsString)){
            	ids = idsString.split(";");
            }
            try {
                toParticipantString = URLDecoder.decode(StringUtils.isNotBlank(toParticipantString) ? toParticipantString : "", "UTF-8");
                fromParticipantString = URLDecoder.decode(StringUtils.isNotBlank(fromParticipantString) ? fromParticipantString : "", "UTF-8");
            } catch (UnsupportedEncodingException e1) {
//                e1.printStackTrace();
            }
            
            if (StringUtils.isNotBlank(toParticipantString) && toParticipantString.contains("_") && toParticipantString.contains(":")){
            	Long userEntityId = Long.valueOf(toParticipantString.substring(toParticipantString.indexOf("_") + 1, toParticipantString.indexOf(":")));
            	Long fromEntityId = Long.valueOf(fromParticipantString.substring(fromParticipantString.indexOf("_") + 1, fromParticipantString.indexOf(":")));
//              List<User> userList = orgnAPIService.getUserListByPartId(
//                      Long.valueOf(toParticipantString.substring(toParticipantString.indexOf("_") + 1, toParticipantString.indexOf(":"))));
            	User user = orgnAPIService.getUserByUserId(userEntityId);
            	User fromUser = orgnAPIService.getUserByUserId(fromEntityId);
                if (null != user){
                	turnOverDealService.replaceFormParticipantToParticipant(ids, fromUser.getUserId(), user.getUserId());
                	isSuccess = true;
                }  
            }
            result.put("msg", msg);
            result.put("success", isSuccess);
        } catch (Exception e) {
            result.put("success", false);
        }
        renderJson(result);
    }
    /**
     * 封装一些不太好直接查询的扩展数据，用于页面显示（慎用）
     * @author jun
     * @param sqlStr sql
     * @return 扩展数据
     */
    private Map<String, Map<String, Object>> getObjectMap(String sqlStr){
        Map<String, Map<String, Object>> objectMap = new HashMap<String, Map<String, Object>>();
        if (StringUtils.isNotBlank(sqlStr)){
            List<Map<String, Object>> mapList = jt.queryForList(sqlStr);
            if (null != mapList && !mapList.isEmpty()){
                Map<String, Object> map = null;
                for (int i = 0; i < mapList.size(); i++) {
                    map = mapList.get(i);
                    if (map.containsKey("namePath")){
                        map.put("namePath", this.getNamePathDisplay((String) map.get("namePath"), false, false));
                    }
                    objectMap.put(map.containsKey("id") ? map.get("id").toString() : null, map);
                }
            }
        }
        return objectMap;
    }
    /**
     * 路径反转
     * @author jun
     * @param namePath 路径名
     * @param cutUserAtLast 是否出去最后的“/”
     * @param cutFirst 是否去除第一个路径
     * @return 路径反转
     */
    private String getNamePathDisplay(String namePath, boolean cutUserAtLast, boolean cutFirst) {
        String r = "";
        if (StringUtils.isNotBlank(namePath)){
            String[] s = namePath.split("/");
            LinkedList<String> x = new LinkedList<String>();
            for (int i = s.length - 1; i >= 0; i--){
                if (StringUtils.isNotEmpty(s[i])){
                    x.add(s[i]);
                }
            }
            //根：
            int startAt = cutFirst ? 1 : 0;
            for (int i = startAt; i < x.size(); i++){
                if (!cutUserAtLast || cutUserAtLast && i < x.size() - 1){
                    r += (StringUtils.isNotBlank(r) ? "/" : "") + x.get(i);
                }
            }
        }
        return r;
    }
    
	/**
	 * 离职人员选择架构树
	 * @return
	 */
	public String parList() {
		String partyStructTypeId = request.getParameter("partyStructTypeId");
		//  默认取第一个
		if(StringUtils.isBlank(partyStructTypeId)||"null".equals(partyStructTypeId)){
			partyStructTypeId = String.valueOf(partyStructTypeService.getZcStructId());
		}
		request.setAttribute("partyStructTypeId", partyStructTypeId);
		return "parList";
	}
	
	/**
	 * 组织架构下查找用户
	 * @return
	 */
	public String structParList(){
		// 默认显示zb的数据
		String partyStructTypeId = request.getParameter("partyStructTypeId");
		Long parentEntityId = Long.valueOf( request.getParameter("parentEntityId") );
		boolean isAdd = ( "true".equals( request.getParameter("isAdd") ) ? true : false );
		
		if(parentEntityId==0L){
			parentEntityId = partyEntityService.getZbEntity(Long.valueOf(partyStructTypeId));
		}
		String nameOrLogName = request.getParameter("nameOrLogName");
		PartyEntity pe = getCommonService().getById(PartyEntity.class, parentEntityId);
		page = partyStructService.findPageUserByParent(pe.getPrefix(), nameOrLogName, false, start, limit);
		// 主岗的组织架构路径
		for(Object u : page.getItems()){
			if(((com.xinleju.erp.frame.models.User)u).getMainRole()!=null)
				((com.xinleju.erp.frame.models.User)u).getMainRole().setNamefix(roleService.getNamefix(((com.xinleju.erp.frame.models.User)u).getMainRole()));
			

		}
		request.setAttribute("nameOrLogName", nameOrLogName);
		request.setAttribute("parentEntityId", parentEntityId);
		request.setAttribute("partyStructTypeId", request.getParameter("partyStructTypeId"));
		
		Long id = 0l;
		if ( page.getItems().size() > 0 ) {
			id = (Long)((com.xinleju.erp.frame.models.User)page.getItems().get(0)).getId();
		}
		
		String userId = isAdd ? request.getParameter("userId") : "";
		if ( userId.equals("") && isAdd ) {
			start = 0;
		}
		
		userId = ( (userId == null || userId.equals(""))&&isAdd  ? id.toString() : userId );
		
		request.setAttribute("userId", userId);
		return "structParList";
	}	
}
