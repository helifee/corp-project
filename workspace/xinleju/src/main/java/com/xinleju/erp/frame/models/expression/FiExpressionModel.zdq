package com.xinleju.erp.frame.models.expression;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.xinleju.erp.frame.enums.OperatorEnum;
@Component
public class FiExpressionModel {
	@Autowired
	private static volatile List<FiFunction> functionList = null;
	private static volatile List<FiOperator> operatorList = null;
	
	public static List<FiFunction> getFunctions(){
		initFunctionList();
		return functionList;
	}
	
	public static List<FiOperator> getOperators(){
		initOperatorList();
		return operatorList;
	}
	private static void initOperatorList() {
		if(operatorList == null) {
			synchronized(FiExpressionModel.class) {
				if(operatorList == null) {
					operatorList = new ArrayList<FiOperator>();
					for(OperatorEnum operator : OperatorEnum.values()){
						FiOperator fio = new FiOperator();
						operatorList.add(fio);
						fio.setName(operator.getName()+"[ "+operator.getCode()+" ]");
						fio.setCode(operator.getCode());
					}
				}
			}
		}
	}

	@SuppressWarnings("unchecked")
	private static void initFunctionList(){
		if(functionList == null) {
			synchronized(FiExpressionModel.class) {
				if(functionList == null) {
					functionList = new ArrayList<FiFunction>();
					 SAXReader reader = new SAXReader();
					 try {
						Document document = reader.read(FiExpressionModel.class.getClassLoader().getResourceAsStream("IKExpression.cfg.xml"));
						Element cfg = document.getRootElement();
						List<Element> beanList = cfg.elements("bean");
						if(beanList == null)
							return ;
						for(Element beanelem : beanList){
							List<Element> funcList = beanelem.elements("function");
							if(funcList == null)
								continue;
							for(Element funcelem : funcList){
								FiFunction function = new FiFunction();
								String funcname = funcelem.attributeValue("name");
								StringBuffer nameBuffer = new StringBuffer(funcname).append("(");
								StringBuffer formatBuffer = new StringBuffer("$").append(funcname).append("(");
								List<Element> paramList = funcelem.elements("parameter-type");
								if(paramList != null && paramList.size() > 0){
									for(Element paramelem : paramList){
										formatBuffer.append(" ,");
										String paramType = paramelem.getTextTrim();
										if(StringUtils.isEmpty(paramType))
											continue;
										String[] subs = paramType.split("\\.");
										nameBuffer.append(" ").append(subs[subs.length-1].toLowerCase()).append(",");
									}
									nameBuffer.delete(nameBuffer.length()-1, nameBuffer.length() );
									formatBuffer.delete(formatBuffer.length()-1, formatBuffer.length());
								}
								nameBuffer.append(")");
								formatBuffer.append(")");
								function.setFormat(formatBuffer.toString());
								function.setName(nameBuffer.toString());
								functionList.add(function);
							}
						}
					} catch ( Exception e){
						functionList = null;
					}
				}
			}
		}
	}
	
}
