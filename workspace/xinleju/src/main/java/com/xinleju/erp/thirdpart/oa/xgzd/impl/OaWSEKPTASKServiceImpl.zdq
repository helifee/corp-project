package com.xinleju.erp.thirdpart.oa.xgzd.impl;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.JdbcTemplate;

import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.flow.models.Wi;
import com.xinleju.erp.frame.dao.AppDao;
import com.xinleju.erp.frame.models.App;
import com.xinleju.erp.frame.models.Msg;
import com.xinleju.erp.frame.models.MsgPerson;
import com.xinleju.erp.frame.models.OaMsgSendLog;
import com.xinleju.erp.frame.service.SettingService;
import com.xinleju.erp.frame.utils.FrameUrlFixUtil;
import com.xinleju.erp.thirdpart.oa.api.IOaMsgService;
import com.xinleju.erp.thirdpart.oa.xgzd.api.WS_EKP_RETURN;
import com.xinleju.erp.thirdpart.oa.xinyuan.api.NotifyTodoAppResult;
import com.xinleju.erp.thirdpart.oa.xinyuan.impl.OATaskPushServiceImpl;

public class OaWSEKPTASKServiceImpl extends BaseService implements IOaMsgService{
	private static final Log log = LogFactory.getLog(OaWSEKPTASKServiceImpl.class);
    /**
     * 每次扫面的数据条数
     */
    public static int batchLimit = 200;
    
    /**
     * 扫描的最大失败次数
     */
    public static int maxErrorTimes = 3;
    
    @Autowired
    private JdbcTemplate jdbcTemplate;
    
    @Autowired
    private AppDao appDao;
    
    @Autowired
    private OaWSEKPTASKPushServiceImpl oaWSEKPTASKPushServiceImpl;
    
    @Autowired
    private SettingService settingService;
    
    @Value("#{appProperties['send_oa_msg_person']}")
	private String person;
	@Override
	public void sendOaMsg(Long id) {
		// TODO Auto-generated method stub
		  if (null != id) {
	            Msg msg = getDao().getById(Msg.class, id);
	            log.info("sendOaMsg======类型==="+msg.getOpType()+"=="+msg.getLoginName()+"===id======"+msg.getId()+"==== msgid======="+msg.getMsgId()+"========="+msg.getTitle());
	            
//	            System.out.println("sendOaMsg====类型======"+msg.getOpType()+"===="+msg.getLoginName()+"====id======"+msg.getId()+"==== msgid======="+msg.getMsgId()+"========="+msg.getTitle());
	            
	            Long objectId = msg.getId();
	            String opType = msg.getOpType();
	            String loginName = msg.getLoginName();
	       
	            String msgId_Id=msg.getMsgId();
	            if(msgId_Id.startsWith("Wi_")){
	            	Long wiId=Long.valueOf(msgId_Id.substring(3));
	            	Wi wi=getDao().getById(Wi.class, wiId);
	            	if(wi==null){
	            		log.info("wi========解析不到==类型===="+msg.getOpType()+"====="+msg.getLoginName()+"==="+msg.getId()+"====="+msg.getMsgId()+"======"+msg.getTitle());
//	            		 System.out.println("wi========解析不到==类型===="+msg.getOpType()+"====="+msg.getLoginName()+"==="+msg.getId()+"====="+msg.getMsgId()+"======"+msg.getTitle());
	                    //OA日志
	                    this.savaOALog(msg.getModuleCode(),msg.getId(), msg.getTitle(), "", new Date(), opType, msg.getMsgType().toString(), msg.getLoginName());
	            		return;
	            	}
	            }
	            
	            try{
	            	//特殊的人保存到特殊的表里去记录下
	            	if(loginName!=null&&!"".equals(loginName)){
	            		if(person.contains(loginName)){
		            		MsgPerson mp=new MsgPerson();
		            		mp.setCreateTime(new Date());
		            		mp.setDealDate(msg.getDealDate());
		            		mp.setExData(msg.getExData());
		            		mp.setIs_read(msg.getIs_read());
		            		mp.setLoginName(loginName);
		            		mp.setModuleCode(msg.getModuleCode());
		            		mp.setMsgId(String.valueOf(msg.getId()));
		            		mp.setMsgType(msg.getMsgType());
		            		mp.setOpType(msg.getOpType());
		            		mp.setTitle(msg.getTitle());
		            		mp.setTypedDate(msg.getTypedDate());
		            		mp.setUrl(msg.getUrl());
		            		getDao().save(mp);
	            		}
	            	}
	            }catch(Exception ex){
	            	ex.printStackTrace();
	            }
	            Integer msgType = msg.getMsgType();
	            App app = appDao.getAppByCode(msg.getAppCode());
	            App appPt = appDao.getPtApp();
	            String appName = app.getName();
	            String modelName = appName;
	            String subject = msg.getTitle();
	            
	            //最好用urlencode处理下 
	            String newUrl="";
	            try {
					newUrl=URLEncoder.encode(msg.getUrl(), "UTF-8");
				} catch (UnsupportedEncodingException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
	            String msgId=msg.getMsgId();
	            String phoneUrl="";
	            if(msgId!=null && !"".equals(msgId)){
	            	  //移动端审批路径
	            	 String from ="";
	            	 if (Msg.OP_TYPE_DB.equals(opType)){
	            		 from = "0";
	                 } else if (Msg.OP_TYPE_YB.equals(opType)){
	             		 from = "2";
	                 } else if (Msg.OP_TYPE_WD.equals(opType)){
	             		 from = "1";
	                 } else if (Msg.OP_TYPE_YD.equals(opType)){
	             		 from = "2";
	                 } else if (Msg.OP_TYPE_RM.equals(opType)){
	               		 from = "2";
	                 }
	            	 String phoneWiId=msgId.toLowerCase();
	            	 if(StringUtils.isNotBlank(phoneWiId)){
		            	 if(phoneWiId.indexOf("task_")>=0){
		            		 phoneWiId=msgId.toLowerCase().replace("task_", "");
		            	 }
		            	 if(phoneWiId.indexOf("wi_")>0){
		            		 phoneWiId=msgId.toLowerCase().replace("wi_", "");
		            	 }
		            	 
		            	 if(phoneWiId.indexOf("teId_")>0){
		           		   phoneWiId=msgId.toLowerCase().replace("teId_", "");
		            	 }
	          		      phoneUrl="/weixin/shenpi.jsp?wiid="+phoneWiId+"&which=OA&userId="+loginName+"&from="+from;
	            	 }
	            	 
	            }
	           

	            try {
	            	phoneUrl=URLEncoder.encode(phoneUrl, "UTF-8");
				} catch (UnsupportedEncodingException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
	            
	            //http://10.22.2.12/mobiletodo/weixin/shenpi.jsp?wiid=4459&userId=shenpi22&from=0

	            //String link = FrameUrlFixUtil.urlFix(msg.getUrl().replaceAll("&", "%26"), app.getDepUrl(), (StringUtils.isNotBlank(appPt.getDepUrl()) ? appPt.getDepUrl().trim() + "/casUrlLogin?url=" : ""));
	            String link = FrameUrlFixUtil.urlFix(newUrl, app.getDepUrl(), (StringUtils.isNotBlank(appPt.getDepUrl()) ? appPt.getDepUrl().trim() + "/casUrlLogin?username="+loginName+"&url=" : ""));
	            
	            link = FrameUrlFixUtil.urlFix(phoneUrl, app.getPhoneUrl(), link+"&phoneUrl=");
	            WS_EKP_RETURN result = null;
	            try{
	                if (StringUtils.isNotBlank(opType) && null != msgType){
	                	 if (Msg.OP_TYPE_DB.equals(opType)){
		                        result = oaWSEKPTASKPushServiceImpl.sendTodo(appName, modelName, msgId_Id, subject, link, "1", null, loginName);
		                    } else if (Msg.OP_TYPE_YB.equals(opType)){
		                        result = oaWSEKPTASKPushServiceImpl.setTodoDone(appName, modelName, msgId,"1", loginName);
		                    } else if (Msg.OP_TYPE_WD.equals(opType)){
		                        result = oaWSEKPTASKPushServiceImpl.sendTodo(appName, modelName, msgId_Id, subject, link, "2", null, loginName);
		                    } else if (Msg.OP_TYPE_YD.equals(opType)){
		                    	  result = oaWSEKPTASKPushServiceImpl.setTodoDone(appName, modelName, msgId,"2", loginName);
		                    } else if (Msg.OP_TYPE_RM.equals(opType)){
		                        result = oaWSEKPTASKPushServiceImpl.deleteTodo(appName, modelName, msgId, null, loginName);
		                    }
	                    if(result != null){
//	                        this.markSendLog(id, opType, result.getReturnState(), result.getMessage());
	                        //OA日志
	                        this.savaOALog(msg.getModuleCode(),msg.getId(), msg.getTitle(), link, new Date(), opType, msgType.toString(), msg.getLoginName());
	                        if(result.getRETURN_STATE() == OaMsgSendLog.RETURN_STATE_FAIL){
	                            throw new Exception(result.getERROR_INFO());
	                        }
	                    }else{
	                    	if(Msg.OP_TYPE_LC.equals(opType)){
	                    		
	                    	}else{
	                            throw new Exception("OA端没有返回结果！");
	                    	}
	           
	                    }
	                } else {
	                    
	                }
	            }catch(Exception e){
//	                this.markSendLog(id, opType, OaMsgSendLog.RETURN_STATE_FAIL, ExceptionUtils.getExceptionMsg(e));
	                //OA日志
	                this.savaOALog(msg.getModuleCode(),msg.getId(), msg.getTitle(), link, new Date(), opType, msgType.toString(), msg.getLoginName());
	            }
	        }
	    }
	    
	    public void sendOaMsgTask(Msg msg) {
	        if (null != msg&&msg.getId()!=null) {
	            log.info("sendOaMsg======类型==="+msg.getOpType()+"=="+msg.getLoginName()+"===id======"+msg.getId()+"==== msgid======="+msg.getMsgId()+"========="+msg.getTitle());
	            
//	            System.out.println("sendOaMsg====类型======"+msg.getOpType()+"===="+msg.getLoginName()+"====id======"+msg.getId()+"==== msgid======="+msg.getMsgId()+"========="+msg.getTitle());
	            
	            //最好用urlencode处理下 
	            String newUrl="";
	            Long objectId = msg.getId();
	            String opType = msg.getOpType();
	            String loginName = msg.getLoginName();
	            String msgId_Id=msg.getMsgId();
	            App app = appDao.getAppByCode(msg.getModuleCode());
	            App appPt = appDao.getPtApp();
	            String link = FrameUrlFixUtil.urlFix(newUrl, app.getDepUrl(), (StringUtils.isNotBlank(appPt.getDepUrl()) ? appPt.getDepUrl().trim() + "/casUrlLogin?username="+loginName+"&url=" : ""));
	            
	            if(msgId_Id.startsWith("Wi_")){
	            	Long wiId=Long.valueOf(msgId_Id.substring(3));
	            	Wi wi=getDao().getById(Wi.class, wiId);
	            	if(wi==null){
	            		log.info("wi========解析不到==类型===="+msg.getOpType()+"====="+msg.getLoginName()+"==="+msg.getId()+"====="+msg.getMsgId()+"======"+msg.getTitle());
//	            		 System.out.println("wi========解析不到==类型===="+msg.getOpType()+"====="+msg.getLoginName()+"==="+msg.getId()+"====="+msg.getMsgId()+"======"+msg.getTitle());
	            		   //OA日志
	                    this.savaOALog(msg.getModuleCode(),msg.getId(), msg.getTitle(),"", new Date(), opType, msg.getMsgType().toString(), msg.getLoginName());
	            		return;
	            	}
	            }
	            
	            try{
	            	//特殊的人保存到特殊的表里去记录下
	            	if(loginName!=null&&!"".equals(loginName)){
	            		if(person.contains(loginName)){
		            		MsgPerson mp=new MsgPerson();
		            		mp.setCreateTime(new Date());
		            		mp.setDealDate(msg.getDealDate());
		            		mp.setExData(msg.getExData());
		            		mp.setIs_read(msg.getIs_read());
		            		mp.setLoginName(loginName);
		            		mp.setModuleCode(msg.getModuleCode());
		            		mp.setMsgId(String.valueOf(msg.getId()));
		            		mp.setMsgType(msg.getMsgType());
		            		mp.setOpType(msg.getOpType());
		            		mp.setTitle(msg.getTitle());
		            		mp.setTypedDate(msg.getTypedDate());
		            		mp.setUrl(msg.getUrl());
		            		getDao().save(mp);
	            		}
	            	}
	            }catch(Exception ex){
	            	ex.printStackTrace();
	            }
	            Integer msgType = msg.getMsgType();
	            String appName = app.getName();
	            String modelName = appName;
	            String subject = msg.getTitle();

	            try {
					newUrl=URLEncoder.encode(msg.getUrl(), "UTF-8");
				} catch (UnsupportedEncodingException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
	            String msgId=msg.getMsgId();
	            String phoneUrl="";
	            if(msgId!=null && !"".equals(msgId)){
	            	  //移动端审批路径
	            	 String from ="";
	            	 if (Msg.OP_TYPE_DB.equals(opType)){
	            		 from = "0";
	                 } else if (Msg.OP_TYPE_YB.equals(opType)){
	             		 from = "2";
	                 } else if (Msg.OP_TYPE_WD.equals(opType)){
	             		 from = "1";
	                 } else if (Msg.OP_TYPE_YD.equals(opType)){
	             		 from = "2";
	                 } else if (Msg.OP_TYPE_RM.equals(opType)){
	               		 from = "2";
	                 }
	            	  phoneUrl="/weixin/shenpi.jsp?wiid="+msgId.toLowerCase().replace("wi_", "")+"&which=OA&userId="+loginName+"&from="+from;
	            }
	           

	            try {
	            	phoneUrl=URLEncoder.encode(phoneUrl, "UTF-8");
				} catch (UnsupportedEncodingException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
	            
	            //http://10.22.2.12/mobiletodo/weixin/shenpi.jsp?wiid=4459&userId=shenpi22&from=0

	            //String link = FrameUrlFixUtil.urlFix(msg.getUrl().replaceAll("&", "%26"), app.getDepUrl(), (StringUtils.isNotBlank(appPt.getDepUrl()) ? appPt.getDepUrl().trim() + "/casUrlLogin?url=" : ""));
	           //String link = FrameUrlFixUtil.urlFix(newUrl, app.getDepUrl(), (StringUtils.isNotBlank(appPt.getDepUrl()) ? appPt.getDepUrl().trim() + "/casUrlLogin?username="+loginName+"&url=" : ""));
	            
	            link = FrameUrlFixUtil.urlFix(phoneUrl, app.getPhoneUrl(), link+"&phoneUrl=");
	            WS_EKP_RETURN result = null;
	            try{
	                if (StringUtils.isNotBlank(opType) && null != msgType){
	                    if (Msg.OP_TYPE_DB.equals(opType)){
	                        result = oaWSEKPTASKPushServiceImpl.sendTodo(appName, modelName, msgId_Id, subject, link, "1", null, loginName);
	                    } else if (Msg.OP_TYPE_YB.equals(opType)){
	                        result = oaWSEKPTASKPushServiceImpl.setTodoDone(appName, modelName, msgId,"1", loginName);
	                    } else if (Msg.OP_TYPE_WD.equals(opType)){
	                        result = oaWSEKPTASKPushServiceImpl.sendTodo(appName, modelName, msgId_Id, subject, link, "2", null, loginName);
	                    } else if (Msg.OP_TYPE_YD.equals(opType)){
	                    	  result = oaWSEKPTASKPushServiceImpl.setTodoDone(appName, modelName, msgId,"2", loginName);
	                    } else if (Msg.OP_TYPE_RM.equals(opType)){
	                        result = oaWSEKPTASKPushServiceImpl.deleteTodo(appName, modelName, msgId, null, loginName);
	                    }
	                    if(result != null){
//	                        this.markSendLog(msg.getId(), opType, result.getReturnState(), result.getMessage());
	                        //OA日志
	                        this.savaOALog(msg.getModuleCode(), objectId, msg.getTitle(), link, new Date(), opType, msgType.toString(), loginName);
	                        if(result.getRETURN_STATE() == OaMsgSendLog.RETURN_STATE_FAIL){
	                            throw new Exception(result.getERROR_INFO());
	                        }
	                    }else{
	                        throw new Exception("OA端没有返回结果！");
	                    }
	                    //OA日志
	                    this.savaOALog(msg.getModuleCode(),msg.getId(), msg.getTitle(), link, new Date(), opType, msgType.toString(), msg.getLoginName());
	                } else {
	                    
	                }
	            }catch(Exception e){
//	                this.markSendLog(msg.getId(), opType, OaMsgSendLog.RETURN_STATE_FAIL, ExceptionUtils.getExceptionMsg(e));
	                //OA日志
	                this.savaOALog(msg.getModuleCode(), objectId, msg.getTitle(), link, new Date(), opType, msgType.toString(), loginName);
	            }
	        }
	}

	@Override
	public void batchSendOaMsg() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void batchSendOaMsg(int size) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void batchSendOaMsg(List<Long> ids) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public FlowResult<Boolean> savaOALog(String module, long msgId,
			String title, String url, Date typedDate, String opType,
			String msgType, String loginName) {
		// TODO Auto-generated method stub
		return null;
	}

}
