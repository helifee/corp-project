package com.xinleju.erp.flow.service.api.extend;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;

import com.xinleju.erp.base.app.bean.Page;
import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.flow.flowutils.bean.PageBean;
import com.xinleju.erp.flow.service.api.extend.dto.DataAuthDTO;
import com.xinleju.erp.flow.service.api.extend.dto.FuncDTO;
import com.xinleju.erp.flow.service.api.extend.dto.OpDTO;
import com.xinleju.erp.flow.service.api.extend.dto.RoleDTO;
import com.xinleju.erp.flow.service.api.extend.dto.ScopeDTO;
import com.xinleju.erp.flow.service.api.extend.dto.UserDTO;
import com.xinleju.erp.flow.service.api.utils.FuncUtils;
import com.xinleju.erp.flow.service.api.utils.RoleUtils;
import com.xinleju.erp.flow.service.api.utils.ScopeUtils;
import com.xinleju.erp.flow.service.api.utils.UserUtils;
import com.xinleju.erp.flow.utils.FlowUtils;
import com.xinleju.erp.frame.dao.AuthDao;
import com.xinleju.erp.frame.dao.BizDataRoleDao;
import com.xinleju.erp.frame.dao.CompanyDao;
import com.xinleju.erp.frame.dao.DeptDao;
import com.xinleju.erp.frame.dao.GroupDao;
import com.xinleju.erp.frame.dao.PartyEntityDao;
import com.xinleju.erp.frame.dao.PartyStructDao;
import com.xinleju.erp.frame.dao.RoleDao;
import com.xinleju.erp.frame.dao.RoleGeneralDao;
import com.xinleju.erp.frame.dao.UserDao;
import com.xinleju.erp.frame.models.FuncButton;
import com.xinleju.erp.frame.models.Group;
import com.xinleju.erp.frame.models.PartyEntity;
import com.xinleju.erp.frame.models.Role;
import com.xinleju.erp.frame.models.RoleGeneral;
import com.xinleju.erp.frame.models.User;
import com.xinleju.erp.frame.service.PartyEntityService;
import com.xinleju.erp.frame.service.PartyStructTypeService;
import com.xinleju.erp.frame.service.RoleService;
import com.xinleju.erp.frame.service.UserService;

@Service("UserServiceImpl")
public class UserServiceImpl implements UserSerivce {
	
	@Autowired
	AuthDao authDao;
	
	@Autowired
	GroupDao groupDao;
	
	@Autowired
	BizDataRoleDao bizDataRoleDao;
	
	@Autowired
	RoleService roleService;

	@Autowired
    @Qualifier("BaseAPIService")
    BaseAPIService BaseAPIService;
	
	@Autowired
	PartyEntityDao partyEntityDao;
	
	@Autowired
	PartyStructDao partyStructDao;
	
	@Autowired
    private UserDao userDao; 
	
	@Autowired
	private RoleDao roleDao;
	
	@Autowired
	private CompanyDao companyDao;
	
	@Autowired
	private DeptDao deptDao;
	
	@Autowired
	private RoleGeneralDao roleGeneralDao;

	@Autowired
	private UserService userService;
	
	@Autowired
	private PartyEntityService partyEntityService;	
	
	@Autowired
	private PartyStructTypeService partyStructTypeService;
	
	@Override
	public FlowResult<PageBean<UserDTO>> getUserList(Long orgnId, String name,
			Integer start, Integer limit, Boolean includeAllSubOrgns,
			Map<String, Object> extParm) {
		
		return BaseAPIService.getUserList(orgnId, name, start, limit, includeAllSubOrgns, extParm);
	}

	@Override
	public FlowResult<List<UserDTO>> getUserListByCompanyId(Long companyId) {
		FlowResult<List<UserDTO>> fr = new FlowResult<List<UserDTO>>();
		List<PartyEntity> psList=partyEntityDao.getPartyEntityListByRefIdAndPartyEntityTypes(companyId,new String[]{"company"});
		if(psList!=null && psList.size()>0){
			Page page = userDao.findUserByOrgnId(psList.get(0).getId(),null,0,1000000000,true);
			List<UserDTO> dtos = UserUtils.buildUserDtoList(page.getItems());
			fr.setResult(dtos);
		}
		
		
		return fr;
	}

	@Override
	public FlowResult<List<UserDTO>> getUserListByDeptId(Long deptId) {
		
			FlowResult<List<UserDTO>> fr = new FlowResult<List<UserDTO>>();
			List<PartyEntity> psList=partyEntityDao.getPartyEntityListByRefIdAndPartyEntityTypes(deptId,new String[]{"department"});
			if(psList!=null && psList.size()>0){
				Page page = userDao.findUserByOrgnId(psList.get(0).getId(),null,0,1000000000,true);
				List<UserDTO> dtos = UserUtils.buildUserDtoList(page.getItems());
				fr.setResult(dtos);
			}
			
			
			return fr;
		
	}
	@Override
	public FlowResult<List<UserDTO>> getUserListByDeptIds(String[] deptIds) {
		
		FlowResult<List<UserDTO>> fr = new FlowResult<List<UserDTO>>();
		List<PartyEntity> psList= null;
		List<UserDTO> dtos = new ArrayList<UserDTO>();
		for(String deptId : deptIds){
			psList= null;
		    psList=partyEntityDao.getPartyEntityListByRefIdAndPartyEntityTypes(Long.valueOf(deptId),new String[]{"department"});
			if(psList!=null && psList.size()>0){
				Page page = userDao.findUserByOrgnId(psList.get(0).getId(),null,0,1000000000,true);
				dtos.addAll(UserUtils.buildUserDtoList(page.getItems()));
				
			}
		}
		fr.setResult(dtos);
		
		return fr;
	
}

	@Override
	public FlowResult<List<UserDTO>> getUserListByPostId(Long postId) {
		FlowResult<List<UserDTO>> fr = new FlowResult<List<UserDTO>>();
		
		List<PartyEntity> psList=partyEntityDao.getPartyEntityListByRefIdAndPartyEntityTypes(postId,new String[]{"role"});
//		if(psList!=null && psList.size()>0){
//			Page page = userDao.findUserByOrgnId(psList.get(0).getId(),null,0,1000000000,true);
//			List<UserDTO> dtos = UserUtils.buildUserDtoList(page.getItems());
//			if(dtos == null){
//				dtos = new ArrayList<UserDTO>();
//			}
//			fr.setResult(dtos);
//		}
		
		List<UserDTO> dtos = new ArrayList<UserDTO>();
		Page page = null;
		for(PartyEntity pe : psList){
			page = userDao.findUserByOrgnId(pe.getId(),null,0,1000000000,true);
			dtos.addAll(UserUtils.buildUserDtoList(page.getItems()));
		}
		
		fr.setResult(dtos);
		
		return fr;
	}
	
	@Override
	public FlowResult<List<UserDTO>> getUserListByPostIds(String[] postIds) {
		
			FlowResult<List<UserDTO>> fr = new FlowResult<List<UserDTO>>();
			List<PartyEntity> psList= null;
			List<UserDTO> dtos = new ArrayList<UserDTO>();
			Page page = null;
			for(String deptId : postIds){
				if (StringUtils.isNotEmpty(deptId)) {
				    psList=partyEntityDao.getPartyEntityListByRefIdAndPartyEntityTypes(Long.valueOf(deptId),new String[]{"role"});
					   
					for(PartyEntity pe : psList){
						page = userDao.findUserByOrgnId(pe.getId(),null,0,1000000000,true);
						dtos.addAll(UserUtils.buildUserDtoList(page.getItems()));
					}
				}
			}
			fr.setResult(dtos);
			
			return fr;
		
		
		
	}

	@Override
	public FlowResult<List<UserDTO>> getUserListByProjectId(Long projectId) {
		FlowResult<List<UserDTO>> fr = new FlowResult<List<UserDTO>>();
		List<PartyEntity> psList=partyEntityDao.getPartyEntityListByRefIdAndPartyEntityTypes(projectId,new String[]{"group"});
		if(psList!=null && psList.size()>0){
			Page page = userDao.findUserByOrgnId(psList.get(0).getId(),null,0,1000000000,true);
			List<UserDTO> dtos = UserUtils.buildUserDtoList(page.getItems());
			if(dtos == null){
				dtos = new ArrayList<UserDTO>();
			}
			fr.setResult(dtos);
		}
		
		
		return fr;
	}

	@Override
	public FlowResult<List<UserDTO>> getUserListByProjectBranchId(Long projectBranchId) {
		FlowResult<List<UserDTO>> fr = new FlowResult<List<UserDTO>>();
		List<PartyEntity> psList=partyEntityDao.getPartyEntityListByRefIdAndPartyEntityTypes(projectBranchId,new String[]{"group"});
		if(psList!=null && psList.size()>0){
			Page page = userDao.findUserByOrgnId(psList.get(0).getId(),null,0,1000000000,true);
			List<UserDTO> dtos = UserUtils.buildUserDtoList(page.getItems());
			fr.setResult(dtos);
		}
		
		
		return fr;
	}

	@Override
	public FlowResult<List<UserDTO>> getUserListByStandardRoleId(
			Long standardRoleId) {
		FlowResult<List<UserDTO>> fr = new FlowResult<List<UserDTO>>();
		List<PartyEntity> psList=partyEntityDao.getPartyEntityListByRefParentIdsAndPartyEntityTypes(new String[]{standardRoleId.toString()},new String[]{"role"});
		
		List<UserDTO> dtos = new ArrayList<UserDTO>();
		Page page = null;
		for(PartyEntity pe : psList){
			page = userDao.findUserByOrgnId(pe.getId(),null,0,1000000000,true);
			dtos.addAll(UserUtils.buildUserDtoList(page.getItems()));
		}
		
		fr.setResult(dtos);
		
		
		return fr;
	}
	@Override
	public FlowResult<List<UserDTO>> getUserListByStandardRoleIds(
			String[] standardRoleIds) {
		FlowResult<List<UserDTO>> fr = new FlowResult<List<UserDTO>>();
		List<PartyEntity> psList=partyEntityDao.getPartyEntityListByRefParentIdsAndPartyEntityTypes(standardRoleIds,new String[]{"role"});

		List<UserDTO> dtos = new ArrayList<UserDTO>();
		Page page = null;
		for(PartyEntity pe : psList){
			page = userDao.findUserByOrgnId(pe.getId(),null,0,1000000000,true);
			dtos.addAll(UserUtils.buildUserDtoList(page.getItems()));
		}
		
		fr.setResult(dtos);
		
		
		return fr;
	}

	@Override
	public FlowResult<List<UserDTO>> getUserListByCompanyIdAndStandardRoleId(
			Long companyId, Long standardRoleId) {
		FlowResult<List<UserDTO>> fr = new FlowResult<List<UserDTO>>();
		
		List<UserDTO> dtos = new ArrayList<UserDTO>();
		List<PartyEntity> psList=partyEntityDao.getPartyEntityListByRefIdAndPartyEntityTypes(companyId,new String[]{"company"});
		if(psList!=null && psList.size()>0){
			Page page = userDao.findUserByOrgnId(psList.get(0).getId(),null,0,1000000000,true);
			dtos = UserUtils.buildUserDtoList(page.getItems());			
		}
		
		List<UserDTO> dtos2 = new ArrayList<UserDTO>();
		List<PartyEntity> psList2=partyEntityDao.getPartyEntityListByRefParentIdAndPartyEntityTypes(standardRoleId,new String[]{"role"});
		Page page2 = null;
		for(PartyEntity pl2 : psList2){
			page2 = userDao.findUserByOrgnId(pl2.getId(),null,0,1000000000,true);
			dtos2.addAll(UserUtils.buildUserDtoList(page2.getItems()));			
		}
		
		List<UserDTO> dtos3 = new ArrayList<UserDTO>();
			for(UserDTO dto :dtos){
				for(UserDTO dto2 : dtos2){
					if(dto.getId().equals(dto2.getId())){
						dtos3.add(dto);
					}
				}
			}
		if(dtos3!=null)
			fr.setResult(dtos3);
		
		return fr;
	}

	@Override
	public FlowResult<List<UserDTO>> getUserListByDeptIdAndStandardRoleId(
			Long deptId, Long standardRoleId) {
		FlowResult<List<UserDTO>> fr = new FlowResult<List<UserDTO>>();
		
		List<UserDTO> dtos  = new ArrayList<UserDTO>();
		List<PartyEntity> psList=partyEntityDao.getPartyEntityListByRefIdAndPartyEntityTypes(deptId,new String[]{"department"});
		if(psList!=null && psList.size()>0){
			Page page = userDao.findUserByOrgnId(psList.get(0).getId(),null,0,1000000000,true);
			dtos = UserUtils.buildUserDtoList(page.getItems());			
		}
		
		List<UserDTO> dtos2  = new ArrayList<UserDTO>();
		List<PartyEntity> psList2=partyEntityDao.getPartyEntityListByRefParentIdAndPartyEntityTypes(standardRoleId,new String[]{"role"});
		Page page2 = null;
		for(PartyEntity pl2 : psList2){
			page2 = userDao.findUserByOrgnId(pl2.getId(),null,0,1000000000,true);
			dtos2.addAll(UserUtils.buildUserDtoList(page2.getItems()));			
		}
		
		List<UserDTO> dtos3 = new ArrayList<UserDTO>();
			for(UserDTO dto :dtos){
				for(UserDTO dto2 : dtos2){
					if(dto.getId().equals(dto2.getId())){
						dtos3.add(dto);
					}
				}
			}
		if(dtos3!=null)
			fr.setResult(dtos3);
		
		return fr;
	}

	@Override
	public FlowResult<List<UserDTO>> getUserListByProjectBranchIdAndStandardRoleId(
			Long projectBranchId, Long standardRoleId) {
		
		FlowResult<List<UserDTO>> fr = new FlowResult<List<UserDTO>>();
		
		Long groupId = null; 
		
		Group group = groupDao.getGroupByRefObjectId(projectBranchId,2);
				
		if(group!=null){
			groupId = group.getId();
		}
		
		if(groupId != null){
			
		}else{
			fr.setResult(new ArrayList<UserDTO>());
		}
		
				
		List<UserDTO> dtos = new ArrayList<UserDTO>();
		List<PartyEntity> psList=partyEntityDao.getPartyEntityListByRefIdAndPartyEntityTypes(groupId,new String[]{"group"});
		if(psList!=null && psList.size()>0){
			Page page = userDao.findUserByOrgnId(psList.get(0).getId(),null,0,1000000000,true);
			dtos = UserUtils.buildUserDtoList(page.getItems());			
		}
		
		List<UserDTO> dtos2 = new ArrayList<UserDTO>();
		List<PartyEntity> psList2=partyEntityDao.getPartyEntityListByRefParentIdAndPartyEntityTypes(standardRoleId,new String[]{"role"});
		Page page2 = null;
		for(PartyEntity pl2 : psList2){
			page2 = userDao.findUserByOrgnId(pl2.getId(),null,0,1000000000,true);
			dtos2.addAll(UserUtils.buildUserDtoList(page2.getItems()));			
		}
		
		List<UserDTO> dtos3 = new ArrayList<UserDTO>();
			for(UserDTO dto :dtos){
				for(UserDTO dto2 : dtos2){
					if(dto.getId().equals(dto2.getId())){
						dtos3.add(dto);
					}
				}
			}
		if(dtos3!=null){
			List<UserDTO> dtoTemp = new ArrayList<UserDTO>();
			for(UserDTO  userDto : dtos3){
				if(!dtoTemp.contains(userDto)){  
					dtoTemp.add(userDto);  
		        }  
			}
			fr.setResult(dtoTemp);
		}
			
		
		return fr;
	}

	@Override
	public FlowResult<UserDTO> getUserByUserId(Long userId) {
		return BaseAPIService.getUserById(userId);
	}

	@Override
	public FlowResult<List<UserDTO>> getUserListByUserIds(String[] userIds) {
		FlowResult<List<UserDTO>> fr = new FlowResult<List<UserDTO>>();
		fr.setResult(UserUtils.buildUserDtoList(userDao.findUserByIds(userIds)));
		return fr;
	}

	@Override
	public FlowResult<UserDTO> getUserByUserLoginName(String userLoginName) {
		return BaseAPIService.getUserByLoginName(userLoginName);
	}

	@Override
	public FlowResult<List<UserDTO>> getUserListByLoginNames(
			String[] userLoginNames) {
		
		FlowResult<List<UserDTO>> fr = new FlowResult<List<UserDTO>>();
		fr.setResult(UserUtils.buildUserDtoList(userDao.findUserByLoginNames(userLoginNames)));
		return fr;
	}
	@Override
	public FlowResult<List<RoleDTO>> getStandardRolesByUserId(Long userId){
		FlowResult<List<RoleDTO>> fr = new FlowResult<List<RoleDTO>>();
		 List<Role> list = roleService.findRolesRefParentIdsByUserRefId(userId);
		 fr.setResult(RoleUtils.buildRoleDtoList(list));
		return fr;
	}
	@Override
	public FlowResult<RoleDTO> getStandardRolesById(Long standardRoleId){
		FlowResult<RoleDTO> fr = new FlowResult<RoleDTO>();
		Role role = roleDao.getRoleListById(standardRoleId);
		fr.setResult(RoleUtils.buildRoleDto(role));
		return fr;
	}
	
	@Override
	public FlowResult<List<RoleDTO>> getAllStandardRoles(){
		List<Role> roleList = roleDao.findAllStandardRoles();
		FlowResult<List<RoleDTO>> fr = new FlowResult<List<RoleDTO>>();
		fr.setResult(RoleUtils.buildRoleDtoList(roleList));
		return fr;
	}
	@Override
	public FlowResult<List<RoleDTO>> getRootStandardRoles() {		
		return BaseAPIService.getRootStandardRoles();
	}

	@Override
	public FlowResult<List<RoleDTO>> getSubStandardRoles(Long parentId) {
		return BaseAPIService.getSubStandardRoles(parentId);
	}

	@Override
	public FlowResult<List<OpDTO>> getOpAuth(String loginName,
			String moduleCode, String funcCode) {
		return BaseAPIService.getOpAuth(loginName, moduleCode, funcCode);
	}
	
	@Override
	public FlowResult<List<OpDTO>> getOpAuthByModuleCode(String moduleCode) {
		return BaseAPIService.getOpAuthByModuleCode(moduleCode);
	}

	@Override
	public FlowResult<List<FuncDTO>> getFuncAuth(String loginName,
			String moduleCode) {
		return BaseAPIService.getFuncAuth(loginName, moduleCode);
	}
	
	@Override
	public FlowResult<List<FuncDTO>> getFuncAuthByModuleCode(String moduleCode) {
		return BaseAPIService.getFuncAuthByModuleCode(moduleCode);
	}
	
	@Override
	public FlowResult<List<OpDTO>> getOpAuthByStandardRoleId(Long standardRoleId, String moduleCode, String funcCode){
		FlowResult<List<OpDTO>> result = new FlowResult<List<OpDTO>>();
        FlowUtils.checkParams(result, "standardRoleId", standardRoleId, "moduleCode", moduleCode);
        if(result.isSuccess()) {
        	 List<Long> roleIds = new ArrayList<Long>();
             roleIds.add(standardRoleId);
             
             //加通用角色
             getRoleGeneralIdsByMembers(roleIds);
             
            if(roleIds != null && !roleIds.isEmpty()) {
                List<FuncButton> fbs = authDao.getAuthOp(roleIds, moduleCode, funcCode);
                result.setResult(FuncUtils.buildOpDtoList(fbs));
            }else{
                result.setResult(new ArrayList<OpDTO>());
            }
        }
        return result;
	}
	@Override
	public FlowResult<List<FuncDTO>> getFuncAuthByStandardRoleId(Long standardRoleId, String moduleCode){
		FlowResult<List<FuncDTO>> result = new FlowResult<List<FuncDTO>>();
        FlowUtils.checkParams(result, "standardRoleId",standardRoleId,"moduleCode",moduleCode);
        if(result.isSuccess()) {
            List<Long> roleIds = new ArrayList<Long>();
            roleIds.add(standardRoleId);
            
          //取出符合的通用角色
            getRoleGeneralIdsByMembers(roleIds);
			
            
            if(roleIds != null && !roleIds.isEmpty()) {
                result.setResult(authDao.getAuthFunc(roleIds, moduleCode, null,true));
            }else {
                result.setResult(new ArrayList<FuncDTO>());
            }
        }
        return result;
	}

	@Override
	public FlowResult<DataAuthDTO> getDataAuth(String loginName) {
		// TODO Auto-generated method stub
		return BaseAPIService.getDataAuth(loginName);
	}
	
	@Override
	 public FlowResult<DataAuthDTO> getDataAuth(String loginName,String moduleCode) {
	        FlowResult<DataAuthDTO> result = new FlowResult<DataAuthDTO>();
	        FlowUtils.checkParams(result, "loginName",loginName);
	        if(result.isSuccess()) {
	            List<Long> roleIds = userDao.getRoleIds(loginName);
	            List<Long> standRoleIds = userDao.getStandRoleIds(loginName);
	            if(standRoleIds != null && !standRoleIds.isEmpty()){
	                roleIds.addAll(standRoleIds);
	            }
	            if(roleIds != null && !roleIds.isEmpty()) {
	                result.setResult(authDao.getDataAuth(roleIds, moduleCode));
	            }else{
	                result.setResult(new DataAuthDTO());
	            }
	        }

	        return result;
	    }
	
	@Override
	public FlowResult<List<ScopeDTO>> getAuthScope(String moduleCode,String authUserLoginName,Long ctrId,Long fieldId){
		FlowResult<List<ScopeDTO>> fr = new FlowResult<List<ScopeDTO>>();
		
		List<Long> roleIds = userDao.getRoleIds(authUserLoginName);
        List<Long> standRoleIds = userDao.getStandRoleIds(authUserLoginName);
        
        if(standRoleIds != null && !standRoleIds.isEmpty()){
            roleIds.addAll(standRoleIds);
        }
        
        if(roleIds != null && !roleIds.isEmpty()) {
        	List<ScopeDTO> scopeList = ScopeUtils.buildScopeDtoList(bizDataRoleDao.getBizDataRoles(roleIds, moduleCode, fieldId));
        	fr.setResult(scopeList);
        }
		return fr;
	}
	
	
	public void getRoleGeneralIdsByMembers(List<Long> roleIds){
		//取出符合的通用角色
		List<RoleGeneral> roleList=roleGeneralDao.getRoleGeneral();
		if(roleList!=null&&roleList.size()>0){
			for(RoleGeneral rg:roleList){
				if (roleIds != null && !roleIds.isEmpty()) {
					for(Long lon:roleIds){
						if(rg.getMembers().contains(lon+"_")){
							roleIds.add(Long.parseLong(RoleGeneral.PRE+rg.getId()));
							break;
						}
					}
				}
			}
		}
	}

	@Override
	public FlowResult<List<UserDTO>> getUserByRealName(String realName) {
		return BaseAPIService.getUserByRealName(realName);
	}

	@Override
	public void saveOrUpdateUser(UserDTO userDto) {
		// TODO Auto-generated method stub
		
		Long partyStructTypeId = partyStructTypeService.getZcStructId();
		Long parentEntityId = partyEntityService.getZbEntity(Long.valueOf(partyStructTypeId));
		
		User user = userService.getById(userDto.getId());
		user = UserUtils.buildUser(userDto,user);
		if (user != null) {
			if(user.getId() == null || user.getId() == 0){
				user.setCreateDate(new Date());
				userService.save(user, parentEntityId, partyStructTypeId);
			}else {
				user.setEditDate(new Date());
				userService.getDao().saveOrUpdate(user);
			}
		}
	}
	
}
