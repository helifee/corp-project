package com.xinleju.erp.frame.dao;


import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Projections;
import org.hibernate.criterion.Restrictions;
import org.hibernate.sql.JoinType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.xinleju.erp.base.app.bean.Page;
import com.xinleju.erp.base.utils.DateUtils;
import com.xinleju.erp.flow.dao.impl.BaseDAO;
import com.xinleju.erp.flow.flowutils.bean.PageBean;
import com.xinleju.erp.form.utils.DbType;
import com.xinleju.erp.frame.models.FlowAuth;
import com.xinleju.erp.frame.models.Msg;
import com.xinleju.erp.frame.service.extend.dto.MsgDto;


/**
 * 版权：(C) 版权所有 2000-2014 上海天好电子商务有限公司苏州分公司 消息DAO <详细描述>
 * 
 * @author zhengxj
 * @version $Id: MsgDao.java 10947 2016-11-24 09:23:18Z weiwulong $
 * @since
 * @see
 */
@Repository
public class MsgDao extends BaseDAO {

    @Autowired
    private FlowAuthDao flowAuthDao;
    
    /**
     * 消息列表 〈详细描述〉
     * 
     * @author zhengxj
     * @param msgDto 查询参数
     * @param start 分页开始数
     * @param limit 每页条数
     * @return page
     */
    public Page getMsgList(MsgDto msgDto, int start, int limit) {
        DetachedCriteria dc = this.getDc(msgDto);
        dc.addOrder(Order.desc("typedDate"));
        return getDao().findPage(dc, start, limit);
    }
    
 
     
    /**
     * @param msgDto
     * @param start
     * @param limit
     * @return
     */
    public PageBean<Object[]> getGroupLoginNameMsgDTO(MsgDto msgDto, int start, int limit) {
         StringBuffer sbHql=new StringBuffer();
         sbHql.append("select b.loginName , b.total from  (select g.login_name as loginName,sum(1) as total from SM_MSG   g where 1=1 ");
         String condition=getConditionDString(msgDto);
         sbHql.append(condition);
         sbHql.append(" group by g.login_name ) b where 1=1 ");
         


         //Page page=getDao().findPageBySQL(sbHql.toString(), null, start, limit);
         List list=getDao().findListBySQL(sbHql.toString(), null);
         
         PageBean<Object[]> pageBean=new PageBean<Object[]>();
         pageBean.setItems(list);
         pageBean.setLimit(limit);
         pageBean.setStart(start);
         pageBean.setTotal(list.size());
        return pageBean ;
    }


    /**
     * 待办消息列表 〈详细描述〉
     * 
     * @author zhengxj
     * @param msgDto 查询参数
     * @param start 分页开始数
     * @param limit 每页条数
     * @return page
     */
    public Page getDbMsgList(MsgDto msgDto, int start, int limit) {
        DetachedCriteria dc = this.getDbDc(msgDto);
        dc.addOrder(Order.asc(("typedDate")));
        return getDao().findPage(dc, start, limit);
    }
    /**
     * 获取消息条数
     * @author jun
     * @param msgDto
     * @return
     */
    public int getMsgCount(MsgDto msgDto){
        int msgCount = 0;
        DetachedCriteria dc = this.getDc(msgDto);
        dc.setProjection(Projections.rowCount());
        List<Object> list = getDao().findByCriteria(dc);
        if (null != list && list.size() > 0){
            String dbCount = String.valueOf(list.get(0));
            msgCount = Integer.parseInt(dbCount);
        }
        return msgCount;
    }
    
    private String getConditionDString(MsgDto msgDto){
         StringBuffer sb=new StringBuffer();
        if (msgDto != null) {
            String title = msgDto.getTitle();
            if (StringUtils.isNotBlank(title)) {
            	sb.append(" and title like '%" + title.trim() + "%'");
            }

            Integer msgType = msgDto.getMsgType();
            if (msgType != null) {
            	sb.append(" and msg_type = '" + msgType + "'");
            }

            String opType = msgDto.getOpType();
            if (StringUtils.isNotBlank(opType)) {
                sb.append(" and op_type = '" + opType + "'");
            }

            String moduleCode = msgDto.getModuleCode();
            if (moduleCode != null) {
                sb.append(" and module_code = '" + moduleCode + "'");
            }

            String beginDate = msgDto.getBeginDate();
            if (StringUtils.isNotBlank(beginDate)) {
                sb.append(" and typed_date > '" + beginDate + " 00:00:01'");
            }

            String endDate = msgDto.getEndDate();
            if (StringUtils.isNotBlank(endDate)) {
                sb.append(" and typed_date <= '" + endDate + " 23:59:59'");
            }
            
            
            String opBeginDate = msgDto.getOpBeginDate();
            if (StringUtils.isNotBlank(opBeginDate)) {
                sb.append(" and deal_date > '" + opBeginDate + " 00:00:01'");
            }

            String opEndDate = msgDto.getOpEndDate();
            if (StringUtils.isNotBlank(opEndDate)) {
                sb.append(" and deal_date <= '" + opEndDate + " 23:59:59'");
            }
            String loginName = msgDto.getLoginName();
            if (StringUtils.isNotBlank(loginName)) {
                sb.append(" and login_name = '" + loginName + "'");
            }
        }
        return sb.toString();
    }
    
    
    /**
     * 封装dc
     * @author jun
     * @param msgDto
     * @return
     */
    private DetachedCriteria getDc(MsgDto msgDto){
        DetachedCriteria dc = DetachedCriteria.forClass(Msg.class);
        if (msgDto != null) {
            String title = msgDto.getTitle();
            if (StringUtils.isNotBlank(title)) {
                dc.add(Restrictions.like("title", "%" + title.trim() + "%"));
            }

            Integer msgType = msgDto.getMsgType();
            if (msgType != null) {
                dc.add(Restrictions.eq("msgType", msgType));
            }


            String opType = msgDto.getOpType();
            if (StringUtils.isNotBlank(opType)) {
                if(Msg.OP_TYPE_YB.equals(opType)){
                	 dc.add(Restrictions.sqlRestriction(" ( op_type ='"+Msg.OP_TYPE_YB+"' or op_type ='"+Msg.OP_TYPE_YD+"' ) "));
                }else{
                	 dc.add(Restrictions.like("opType", opType.trim()));
                }
            }
           

            String moduleCode = msgDto.getModuleCode();
            if (moduleCode != null) {
                dc.add(Restrictions.eq("moduleCode", moduleCode));
            }

            String beginDate = msgDto.getBeginDate();
            if (StringUtils.isNotBlank(beginDate)) {
                dc.add(Restrictions.sqlRestriction("typed_date > '" + beginDate + " 00:00:01'"));
            }

            String endDate = msgDto.getEndDate();
            if (StringUtils.isNotBlank(endDate)) {
                dc.add(Restrictions.sqlRestriction("typed_date <= '" + endDate + " 23:59:59'"));
            }
            
            
            String opBeginDate = msgDto.getOpBeginDate();
            if (StringUtils.isNotBlank(opBeginDate)) {
                dc.add(Restrictions.sqlRestriction("deal_date > '" + opBeginDate + " 00:00:01'"));
            }

            String opEndDate = msgDto.getOpEndDate();
            if (StringUtils.isNotBlank(opEndDate)) {
                dc.add(Restrictions.sqlRestriction("deal_date <= '" + opEndDate + " 23:59:59'"));
            }
            String loginName = msgDto.getLoginName();
            if (StringUtils.isNotBlank(loginName)) {
                dc.add(Restrictions.eq("loginName", loginName));
            }
        }
        return dc;
    }
    
    /**
     * 封装待办专用dc
     * @author jun
     * @param msgDto
     * @return
     */
    private DetachedCriteria getDbDc(MsgDto msgDto){
        DetachedCriteria dc = DetachedCriteria.forClass(Msg.class);
        if (msgDto != null) {
            String title = msgDto.getTitle();
            if (StringUtils.isNotBlank(title)) {
                dc.add(Restrictions.like("title", "%" + title.trim() + "%"));
            }

            Integer msgType = msgDto.getMsgType();
            if (msgType != null) {
                dc.add(Restrictions.eq("msgType", msgType));
            }

            String opType = msgDto.getOpType();
            if (StringUtils.isNotBlank(opType)) {
                dc.add(Restrictions.like("opType", opType.trim()));
            }

            String moduleCode = msgDto.getModuleCode();
            if (moduleCode != null) {
                dc.add(Restrictions.eq("moduleCode", moduleCode));
            }

            String beginDate = msgDto.getBeginDate();
            if (StringUtils.isNotBlank(beginDate)) {
                dc.add(Restrictions.sqlRestriction("typed_date > '" + beginDate + " 00:00:01'"));
            }

            String endDate = msgDto.getEndDate();
            if (StringUtils.isNotBlank(endDate)) {
                dc.add(Restrictions.sqlRestriction("typed_date <= '" + endDate + " 23:59:59'"));
            }
            
            
            String opBeginDate = msgDto.getOpBeginDate();
            if (StringUtils.isNotBlank(opBeginDate)) {
                dc.add(Restrictions.sqlRestriction("deal_date > '" + opBeginDate + " 00:00:01'"));
            }

            String opEndDate = msgDto.getOpEndDate();
            if (StringUtils.isNotBlank(opEndDate)) {
                dc.add(Restrictions.sqlRestriction("deal_date <= '" + opEndDate + " 23:59:59'"));
            }
            String loginName = msgDto.getLoginName();
            if (StringUtils.isNotBlank(loginName)) {
                dc.add(Restrictions.eq("loginName", loginName));
            }
            
          //  sql += " login_name = '" + loginName + "'";
            /**
            String sql = "(";
	        if (StringUtils.isNotBlank(loginName)) {
	            sql += " login_name = '" + loginName + "'";
	        }
	        List<FlowAuth> authLst = flowAuthDao.findFlowAuthByAuth2UserLoginName(loginName);
	        for ( FlowAuth auth : authLst ) {
	        	if (sql.length() > 1) {
	        		sql += " or ( login_name = '" + auth.getAuthUser().getLoginname() + "'"
	        		        + " and msg_id in ( select "+DbType.getType()+"concat( 'wi_', w.id) from tf_wi w"
	        		        + " left join tf_fl fl on w.fl_id = fl.id"
	        		        + " where 1 = 1 ";
	        		//非实时生效
                    if (!FlowAuth.TRANS_FLAG_REAL.equals(auth.getTransFlg())){
                        sql += " and w.start_time >= '" + DateUtils.formatDate(null != auth.getAuthBeginDate() ? auth.getAuthBeginDate() : new Date(), DateUtils.DATE_FORMAT_YYYY_MM_DD_HH_MM_SS) + "'";
	        		}
	        		sql += " and fl.flow_code in (" + auth.getAuthScope().replaceAll(";", ",") + ")) ) ";
	        	}
	        }
	        
	        sql += ")";
	        **/
            
            //dc.add(Restrictions.sqlRestriction(sql));
            
        }
        return dc;
    }
    
    /**
     * 是否存在消息
     * 
     * @author zhengxj
     * @param module 所属模块编码
     * @param title 消息标题
     * @param url 链接
     * @param opType 消息操作类型
     * @param msgType 消息类型
     * @param loginName 发送对象
     * @return true/false
     */
    public boolean isExistMsg(String module, String title, String url, String opType,
                              String msgType, String loginName) {
        DetachedCriteria dc = DetachedCriteria.forClass(Msg.class);
        dc.createAlias("app", "app", JoinType.LEFT_OUTER_JOIN);
        dc.add(Restrictions.eq("app.code", module));
        dc.add(Restrictions.eq("title", title));
        dc.add(Restrictions.eq("url", url));
        dc.add(Restrictions.eq("opType", opType));
        dc.add(Restrictions.eq("msgType", msgType));
        dc.add(Restrictions.eq("loginName", loginName));
        List<Msg> list = getDao().findByCriteria(dc);
        return (list == null || list.isEmpty()) ? false : true;
    }

    /**
     * 保存消息
     * 
     * @author zhengxj
     * @param moduleCode 所属模块编码
     * @param msgId 消息ID,且模块内唯一
     * @param title 消息标题
     * @param url 链接
     * @param typedDate 消息创建时间
     * @param opType 消息操作类型
     * @param msgType 消息类型
     * @param loginName 发送对象
     * @param params 预留扩展字段
     * @throws Exception
     */
    public Msg saveMsg(String moduleCode, String msgId, String title, String url, String typedDate,
                        String opType, String msgType, String loginName, Map<String,Object> params)
       {
        try {
            
            Msg msg = null;
            
            /**
             *  消息类型 0: 待办,需要人工处理的工作，譬如流程发出的待 1: 通知,仅查看，譬如预警消息
             *  DB(1待办) YB(2已办) YD(3已读) WD(4未读) RM(5删除)
             *  
             *  消息类型-消息操作类型
             *  待办-待办、通知(消息类型)-待阅
             */
            if (Msg.OP_TYPE_DB.equals(opType) || Msg.OP_TYPE_WD.equals(opType)) {
                msg = new Msg();
                msg.setModuleCode(moduleCode);
                msg.setAppCode(moduleCode);
                msg.setMsgId(msgId);
                msg.setTitle(title);
                msg.setUrl(url);
                msg.setTypedDate(new Date());
                msg.setOpType(opType);
                msg.setMsgType(Integer.parseInt(msgType));
                msg.setLoginName(loginName);
                msg.setExData(params!=null&&params.get("fi_id")!=null?Long.toString((Long)params.get("fi_id")):null);
                getDao().save(msg);
            } else {
                
                List<Msg> list = null;
                
                if (Msg.OP_TYPE_YB.equals(opType)) {
                    list = getDao().findByHQL(Msg.class, "from Msg where moduleCode = ? and msgId = ? and opType = ? order by typedDate desc"
                        , moduleCode, msgId, Msg.OP_TYPE_DB);
                }
                
                if (Msg.OP_TYPE_YD.equals(opType)) {
                    list = getDao().findByHQL(Msg.class, "from Msg where moduleCode = ? and msgId = ? and opType = ? order by typedDate desc"
                        , moduleCode, msgId, Msg.OP_TYPE_WD);
                }
                
                if (Msg.OP_TYPE_RM.equals(opType)) {
                    list = getDao().findByHQL(Msg.class, "from Msg where moduleCode = ? and msgId = ? and (opType = ? or opType = ?) order by typedDate desc"
                            , moduleCode, msgId, Msg.OP_TYPE_DB, Msg.OP_TYPE_WD);
                }
                
                if (list != null && !list.isEmpty()) {
                    msg = list.get(0);
                    msg.setOpType(opType);
                    msg.setDealDate(new Date());
                    msg.setExData(params!=null&&params.get("fi_id")!=null?Long.toString((Long)params.get("fi_id")):null);
                    getDao().update(msg);
                }
            }
           return msg;
            
        } catch (Exception e) {
           // throw new Exception("系统异常!");
        	System.out.println("保存推送消息时异常:"+e.toString());
        	return null;
        }
        
    }

    /**
     * 获取待办数量
     * 
     * @author zhengxj
     * @param opType 消息操作类型
     * @return
     */
    public int getDBMsgCount(String opType) {
        return this.getDBMsgCount(opType, null);
    }
    /**
     * 获取待办数量
     * @author zhongjun
     * @param opType 消息操作类型
     * @param loginName 登录名
     * @return
     */
    public int getDBMsgCount(String opType, String loginName) {
        Long count = 0L;
        if (StringUtils.isNotBlank(loginName)){
        	if (Msg.OP_TYPE_WD.equals(opType)) {
        		count = getDao().findLong("select count(*) from Msg where opType = ? and msgType = 1 and loginName = ? ", opType, loginName);
			}else {
				count = getDao().findLong("select count(*) from Msg where opType = ? and loginName = ? ", opType, loginName);
			}
        } else {
            count = getDao().findLong("select count(*) from Msg where opType = ?", opType);
        }
        return count.intValue();
    }
    
    /**
     * 获取通知数量
     * 
     * @author zhengxj
     * @param msgType 消息类型
     * @return
     */
    public int getTZMsgCount(Integer msgType) {
        return this.getTZMsgCount(msgType, null);
    }
    
    public int getTZMsgCount(Integer msgType, String loginName) {
        Long count = 0L;
        if (StringUtils.isNotBlank(loginName)){
            count = getDao().findLong("select count(*) from Msg where msgType = ? and loginName = ?", msgType, loginName);
        } else {
            count = getDao().findLong("select count(*) from Msg where msgType = ?", msgType);
        }
        return count.intValue();
    }
}
