package com.xinleju.erp.flow.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import javax.transaction.Transactional;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import com.alibaba.fastjson.JSONObject;
import com.xinleju.erp.base.app.config.App;
import com.xinleju.erp.base.app.exception.AppException;
import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.base.utils.CollectionUtils;
import com.xinleju.erp.base.utils.DateUtils;
import com.xinleju.erp.base.utils.StringHelper;
import com.xinleju.erp.flow.bean.IdName;
import com.xinleju.erp.flow.dao.impl.AcDAO;
import com.xinleju.erp.flow.dao.impl.AiDAO;
import com.xinleju.erp.flow.dao.impl.BizDataDAO;
import com.xinleju.erp.flow.dao.impl.FiDAO;
import com.xinleju.erp.flow.dao.impl.FlDAO;
import com.xinleju.erp.flow.dao.impl.GvDAO;
import com.xinleju.erp.flow.dao.impl.ParticipantDAO;
import com.xinleju.erp.flow.dao.impl.TrDAO;
import com.xinleju.erp.flow.dao.impl.WiDAO;
import com.xinleju.erp.flow.dao.impl.WpDAO;
import com.xinleju.erp.flow.flowutils.bean.AssignWi;
import com.xinleju.erp.flow.flowutils.bean.BizDataDTO;
import com.xinleju.erp.flow.flowutils.bean.GvBean;
import com.xinleju.erp.flow.flowutils.bean.Gvs;
import com.xinleju.erp.flow.flowutils.utils.OpType;
import com.xinleju.erp.flow.flowutils.utils.WsConstant;
import com.xinleju.erp.flow.flowutils.utils.WsConstant.WiType;
import com.xinleju.erp.flow.frameapi.domain.User;
import com.xinleju.erp.flow.models.Ac;
import com.xinleju.erp.flow.models.Ai;
import com.xinleju.erp.flow.models.BizParticipant;
import com.xinleju.erp.flow.models.Fi;
import com.xinleju.erp.flow.models.Fl;
import com.xinleju.erp.flow.models.Hai;
import com.xinleju.erp.flow.models.Hfi;
import com.xinleju.erp.flow.models.OpGroup;
import com.xinleju.erp.flow.models.Tr;
import com.xinleju.erp.flow.models.Wi;
import com.xinleju.erp.flow.models.Wp;
import com.xinleju.erp.flow.service.api.ApiConstant;
import com.xinleju.erp.flow.service.api.DoAfterService;
import com.xinleju.erp.flow.service.api.OrgnAPIService;
import com.xinleju.erp.flow.service.api.extend.BaseAPI;
import com.xinleju.erp.flow.service.impl.AndFinishTypeService;
import com.xinleju.erp.flow.service.impl.AndForkTypeService;
import com.xinleju.erp.flow.service.impl.AndJoinTypeService;
import com.xinleju.erp.flow.service.impl.XorFinishTypeService;
import com.xinleju.erp.flow.utils.FlowConstant;
import com.xinleju.erp.flow.utils.FlowUtils;
import com.xinleju.erp.flow.utils.IdNameUtils;
import com.xinleju.erp.flow.utils.ParticipantUtils;
import com.xinleju.erp.flow.utils.UserPrefixUtils;
import com.xinleju.erp.form.utils.DbType;
import com.xinleju.erp.frame.service.RoleGeneralService;

//import com.xinleju.erp.frame.service.RoleGeneralService;

/**
 * 
 * 
 * <p>
 * </p>
 * <p>
 * </p>
 * 
 * @author 孙朝辉
 * @version $Id: FlowService.java 2340 2015-01-24 09:49:27Z zhongjun $
 * @since
 * 
 */
@Transactional
@Service
public class FlowService extends BaseService {
	Logger logger = LoggerFactory.getLogger(FlowService.class);
	/**
	 * 日志Service
	 */
	@Autowired
	AlService alService;

	/**
	 * 工作组Service
	 */
	@Autowired
	private WpService wpService;

	/**
	 * 流程流转动作Service
	 */
	@Autowired
	private DoAfterService doAfterService;

	/**
	 * 组织架构Service
	 */
	@Autowired
	private OrgnAPIService orgnAPIService;

	@Autowired
	private RoleGeneralService roleGeneralService;

	/**
	 * 参与人DAO
	 */
	@Autowired
	private ParticipantDAO participantDAO;

	/**
	 * 活动实例Service
	 */
	@Autowired
	private AiService aiService;

	/**
	 * 全局变量DAO
	 */
	@Autowired
	private GvDAO gvDAO;

	/**
	 * 业务数据DAO
	 */
	@Autowired
	private BizDataDAO bizDataDAO;

	/**
	 * 流程实例DAO
	 */
	@Autowired
	private FiDAO fiDAO;

	/**
	 * 流程定义DAO
	 */
	@Autowired
	private FlDAO flDAO;

	/**
	 * 活动实例DAO
	 */
	@Autowired
	private AiDAO aiDAO;

	/**
	 * 环节定义DAO
	 */
	@Autowired
	private AcDAO acDAO;

	/**
	 * 流转DAO
	 */
	@Autowired
	private TrDAO trDAO;

	/**
	 * 工作DAO
	 */
	@Autowired
	private WiDAO wiDAO;

	/**
	 * 工作组DAO
	 */
	@Autowired
	private WpDAO wpDAO;
	

	@Value("#{appProperties['not_show_objf_flowCode']}")
	private String notShowObjfFlowCode;

	/**
	 * 启动流程
	 * 
	 * @param flowCode
	 *            流程编码
	 * @param flowInsName
	 *            流程实例名
	 * @param user
	 *            启动人
	 * @param gvs
	 *            全局变量
	 * @return 流程实例
	 */
	public Fi startFi(String flowCode, String flowInsName, User user, Gvs gvs, List<BizDataDTO> bizDataDTOList) {
		Assert.notNull(user);
		// 创建流程
		Fi fi = createFi(flowCode, flowInsName, user, gvs);
		// 启动流程
		startFi(fi, user, gvs, bizDataDTOList, true);
		return fi;
	}

	/**
	 * 
	 * <p>
	 * 创建流程
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param flowCode
	 *            流程编码
	 * @param flowInsName
	 *            流程名
	 * @param user
	 *            启动人
	 * @param gvs
	 *            全局变量
	 * @return 流程实例Fi
	 */
	public Fi createFi(String flowCode, String flowInsName, User user, Gvs gvs) {
		Assert.notNull(user);

		// 创建流程实例
		Fl fl = flDAO.getFl(flowCode);
		if (null == fl || null == fl.getId()) {
			throw new AppException("不存在编码为：" + flowCode + "的流程模板！");
		}
		Fi fi = fiDAO.createFi(fl, flowInsName, user);

		// 发布全局变量
		gvDAO.putGvs(fi.getId(), gvs);

		// Fi操作日志
		fiDAO.log(fi.getId(), Hfi.LOG_CODE_CREATE, user);

		return fi;
	}

	public Fi createFi(String flowCode, String flowVersion, String flowInsName, User user, Gvs gvs) {
		Assert.notNull(user);

		// 创建流程实例
		Fl fl = flDAO.getFl(flowCode, flowVersion);
		Fi fi = fiDAO.createFi(fl, flowInsName, user);

		// 发布全局变量
		gvDAO.putGvs(fi.getId(), gvs);

		// Fi操作日志
		fiDAO.log(fi.getId(), Hfi.LOG_CODE_CREATE, user);

		return fi;
	}

	/**
	 * 启动流程
	 * 
	 * @param fi
	 *            流程实例
	 * @param user
	 *            操作人
	 * @param gvs
	 *            全局变量
	 * @param updateGvs
	 *            是否发布gvs
	 */
	public void startFi(Fi fi, User user, Gvs gvs, List<BizDataDTO> bizDataDTOList, boolean updateGvs) {
		try{
			
		// 启动流程
		fiDAO.startFi(fi, user);

		// 生成以start为根的Ai
		//获取模板的第一个开始节点获取首节点
		Ac start = acDAO.getStart(fi.getFl().getFlowCode(), fi.getFl().getFlowVersion());
		
		//构建节点AI
		rebulidFi(fi, start, gvs, bizDataDTOList, updateGvs, true);

		// Fi操作日志
		// fiDAO.log(fi.getId(), Hfi.LOG_CODE_START, user);

		doAfterService.doAfterFiStarted(fi);

		}catch(Exception ex){
			ex.printStackTrace();
		}
	}

	/**
	 * 
	 * <p>
	 * 挂起流程
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param fiId
	 *            流程实例ID
	 * @param suspendCode
	 *            挂起Code
	 * @param user
	 *            当前操作人
	 */
	public void suspendFi(Long fiId, String suspendCode, User user) {
		Assert.notNull(user);
		// 挂起流程
		fiDAO.suspendFi(fiId, user, suspendCode);
		// Fi操作日志
		fiDAO.log(fiId, Hfi.LOG_CODE_SUSPEND, user);

	}

	/**
	 * 
	 * <p>
	 * 解挂流程
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param fiId
	 *            流程实例ID
	 * @param user
	 *            操作人
	 */
	public void unSuspendFi(Long fiId, User user) {
		Assert.notNull(user);
		fiDAO.unSuspendFi(fiId);
		fiDAO.log(fiId, Hfi.LOG_CODE_UNSUSPEND, user);
	}

	/**
	 * 
	 * <p>
	 * 终止流程
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param fiId
	 *            流程实例ID
	 * @param terminateCode
	 *            终止编码Code
	 * @param user
	 *            操作人
	 */
	public void terminateFi(Long fiId, String terminateCode, User user) {
		if (null == user) {
			user = new User();
		}
		fiDAO.terminateFi(fiId, user, terminateCode);
		fiDAO.log(fiId, Hfi.LOG_CODE_TERMINATE, user);

		List<Wi> wiList = getDao().findAll(Wi.class, "fiId = ? and (status = ? or status = ?)", new Object[] { fiId, Wi.STATUS_CREATED, Wi.STATUS_RUNNING },
				new String[] { "ai", "ac", "fi" });
		while (null != wiList && wiList.size() > 0) {
			for (Wi wi : wiList) {
				wiDAO.overdueWi(wi);
			}
			wiList = getDao().findAll(Wi.class, "fiId = ? and (status = ? or status = ?)", new Object[] { fiId, Wi.STATUS_CREATED, Wi.STATUS_RUNNING },
					new String[] { "ai", "ac", "fi" });
		}
	}

	/**
	 * 
	 * <p>
	 * 结束流程
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param fiId
	 *            流程实例ID
	 * @param user
	 *            操作人
	 */
	public void completeFi(Long fiId, User user) {
		Fi fi = fiDAO.completeFi(fiId, user);
		fiDAO.log(fi, Hfi.LOG_CODE_COMPLETE, user);
		doAfterService.doAfterFiComplete(fi);
	}

	/**
	 * 
	 * <p>
	 * 挂起活动实例
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param aiId
	 *            环节实例ID
	 * @param suspendCode
	 *            挂起编码
	 * @param user
	 *            操作人
	 * 
	 */
	public void suspendAi(Long aiId, String suspendCode, User user) {
		aiDAO.suspendAi(aiId, suspendCode, user);
	}

	/**
	 * 
	 * <p>
	 * 解挂环节实例
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param aiId
	 *            环节实例ID
	 * @param user
	 *            操作人
	 */
	public void unSuspendAi(Long aiId, User user) {
		aiDAO.unSuspendAi(aiId);
	}

	/**
	 * 能否结束流程
	 * 
	 * @param fi
	 *            流程实例
	 * @return 是否能够结束
	 */
	public boolean canComplete(Fi fi) {
		boolean existRunningAi = getDao().isExist(Ai.class, "(fiId = ? and status = ?) or (fi.isSuspend = ?)", fi.getId(), Ai.STATUS_RUNNING, 1);
		return !existRunningAi;
	}

	/**
	 * 尝试结束流程实例
	 * 
	 * @param fi
	 *            流程实例
	 * @param gvs
	 *            全局变量
	 * @param transientVar
	 *            临时变量
	 * @param user
	 *            操作人
	 * @return 是否能够结束
	 */
	public boolean tryCompleteFi(Fi fi, Gvs gvs, Map<String, Object> transientVar, User user) {

		boolean canCompleteFi = this.canComplete(fi);
		if (canCompleteFi) {
			this.completeFi(fi.getId(), user);
		}

		return canCompleteFi;
	}

	/**
	 * 
	 * <p>
	 * 开始环节实例
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param ai
	 *            环节实例
	 * @param gvs
	 *            全局变量
	 * @param transientVar
	 *            临时变量
	 */
	public void startAi(Ai ai, Gvs gvs, Map<String, Object> transientVar) {

		// 更新Ai
		ai.setStatus(Ai.STATUS_RUNNING);
		ai.setRs((ai.getRs() == null ? new Date() : ai.getRs()));
		getDao().update(ai);
	}

	/**
	 * 尝试结束节点
	 * 
	 * @param ai
	 *            环节实例
	 * @param gvs
	 *            全局变量
	 * @param tryStartNext
	 *            是否尝试开始启动下一个环节
	 * @param transientVar
	 *            临时变量
	 * 
	 * @return 是否结束了Ai
	 */
	public boolean tryCompleteAi(Ai ai, boolean tryStartNext, Gvs gvs, Map<String, Object> transientVar) {

		boolean canComplete = canComplete(ai, gvs, transientVar);  //true、如果是新节点，不能返回true
		
		
		
		if (canComplete) {
			
			this.completeAi(ai, tryStartNext, gvs, transientVar);

			// 首节点不需要执行 & 串行的也不需要（代码逻辑是：竞争或者会审 需要这段逻辑）
			if (ai.getAc().getIsStart() != 1
					&& (ai.getAc().getNodeType() != null && ai.getAc().getNodeType().intValue() == 0 || ai.getAc().getNodeType().intValue() == 2)) {
				List<Wp> wps = getDao().findAll(
						Wp.class,
						"aiId = ?  " + "and parentWpId is not null and parentWp.subMode = 1 " + "and parentWp.assignType = 0 "
								+ "and participantsDefine is null and participants is null", new Object[] { ai.getId() });

				for (Wp wp : wps) {
					App.getBean(AlService.class).logWpAutoPassAsNoUsers(wp);
				}
			}

		}

		return canComplete;
	}

	/**
	 * 开始后续的未开始的流程
	 * 
	 * @param ai
	 *            环节实例
	 * @param gvs
	 *            全局变量
	 * @param transientVar
	 *            临时变量
	 */
	private void tryStartNextAi(Ai ai, Gvs gvs, Map<String, Object> tvs) {

		tryStartNextAiByAc(ai.getFiId(), ai.getAc(), gvs, tvs);
	}

	
	//ac 上一环节
	public void tryStartNextAiByAc(Long fiId, Ac ac, Gvs gvs, Map<String, Object> tvs) {
		String forkCtrlClass = StringUtils.isNotEmpty(ac.getForkCtrl()) ? ac.getForkCtrl() : AndForkTypeService.class.getName();
		IForkTypeService ft = null;
		try {
			ft = (IForkTypeService) App.getBean(Class.forName(forkCtrlClass));
		} catch (ClassNotFoundException e) {
			ft = null;
		}
		
		logger.info("方法tryStartNextAiByAc：ft="+ forkCtrlClass);
		
		List<Ai> nextList = new ArrayList<Ai>();
		
		logger.info(fiId+"：方法getNext1List：参数1 fiId="+ fiId);
		logger.info(fiId+"：方法getNext1List：参数2 当前AC="+ JSONObject.toJSONString(ac));
		logger.info(fiId+"：方法getNext1List：参数3 gvs="+ JSONObject.toJSONString(gvs));
		logger.info(fiId+"：方法getNext1List：参数4 tvs="+ JSONObject.toJSONString(tvs));
		if (ft != null) {
			nextList = ft.getNext1List(fiId, ac, gvs, tvs);
		}
		logger.info(fiId+"：方法tryStartNextAiByAc：nextList="+ JSONObject.toJSONString(nextList));
		for (Ai nextAi : nextList) {
			tryStartAi(nextAi, gvs, tvs, false);
		}
	}

	/**
	 * 结束活动
	 * 
	 * @param ai
	 *            环节实例
	 * @param tryStartNext
	 *            是否出发下一步
	 * @param gvs
	 *            全局变量
	 * @param transientVar
	 *            临时变量
	 */
	public void completeAi(Ai ai, boolean tryStartNext, Gvs gvs, Map<String, Object> transientVar) {
		// Ai更新
		ai.setStatus(Ai.STATUS_COMPLETE);
		
		
		ai.setRe(new Date());
		getDao().update(ai);
		// 生成Log
		aiDAO.log(ai, Hai.LOG_CODE_COMPLETE);
		
		doAfterService.doAfterAiComplete(ai);
		
		if (tryStartNext) {
			if (null != transientVar) {
				Wp wp = (Wp) transientVar.get(IConstantVar.TVS_WP);
				// 打回到逻辑直接跳转到需要需要跳回到的节点
				if (null != wp && null != wp.getJump2WpId() && wp.getJump2WpId().intValue() > 0) {
					Wp jump2Wp = wpDAO.getWpById(wp.getJump2WpId());
					// 完成工作wi时,如果跳转到的Wp和当前工作不在同一个Ai中,则结束当前工作所在的Ai
					if (wp.getAiId().longValue() != jump2Wp.getAiId()) {
						tryCompleteAi(wp.getAi(), false, gvs, transientVar);
					}
					// 指向"跳转到的Wp"
					aiService.pointToWp(jump2Wp);
					// 开始活动实例（完成工作wi时,如果跳转到的Wp和当前工作不在同一个Ai中,则有可能需要，重新开始活动实例)
					this.tryStartAi(jump2Wp.getAi(), gvs, transientVar, false);
				} else {
					this.tryStartNextAi(ai, gvs, transientVar);  //执行
				}
			} else {
				this.tryStartNextAi(ai, gvs, transientVar);
			}
		}
	}

	/**
	 * 
	 * <p>
	 * 回退一步
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param wiId_BackPoint
	 *            当前工作ID
	 * @param user
	 *            当前操作人
	 * @param userNote
	 *            用户意见
	 */
	public void previous1ToAi(Long wiId_BackPoint, User user, String opCode, String userNote) {
		Assert.notNull(user);
		Assert.notNull(wiId_BackPoint);

		Wi wi = getDao().getById(Wi.class, wiId_BackPoint);

		List<Tr> fromATrs = trDAO.getListByTrIds(wi.getAc().getFlowCode(), wi.getAc().getFlowVersion(), wi.getAc().getFrom_tr_a());
		List<Ac> fromAAcs = acDAO.getFromAList(wi.getAc());
		Gvs gvs = gvDAO.getGvs(wi.getFiId());
		List<Ai> backToAiList = aiDAO.getFrom1ListDeepSearchAutoAi(wi.getAi(), fromAAcs, fromATrs, gvs, Wi.STATUS_COMPLETE);

		List<Ai> newList = new ArrayList<Ai>();

		// 补丁开始-------或可流程设计重构-------
		for (Ai thisAi : backToAiList) {

			String fromA = thisAi.getAc().getFrom_a();
			if (StringUtils.isEmpty(fromA)) {
				newList.add(thisAi);
			} else {
				String fromAString = thisAi.getAc().getFrom_a() + "-";
				//
				boolean haveAi2ThisAi = false;
				for (Ai test : backToAiList) {
					String testId = test.getAc().getNodeId() + "-";
					if (fromAString.indexOf(testId) != -1) {
						haveAi2ThisAi = true;
					}
				}
				if (!haveAi2ThisAi) {
					newList.add(thisAi);
				}
			}
		}
		// 补丁结束-------
		this.previousToAi(newList, wiId_BackPoint, wi.getAiId(), user, opCode, userNote);
	}

	/**
	 * 
	 * <p>
	 * 回退到指定Ai
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param toAi
	 *            退回到的Ai
	 * @param wiId_BackPoint
	 *            当前工作ID
	 * @param user
	 *            当前操作人
	 * @param userNote
	 *            用户意见
	 */
	public void previousToAi(Ai toAi, Long wiId_BackPoint, User user, String opCode, String userNote) {

		Assert.notNull(wiId_BackPoint);

		List<Ai> backToAiList = new ArrayList<Ai>();
		backToAiList.add(toAi);

		Wi wi = getDao().getById(Wi.class, wiId_BackPoint);
		previousToAi(backToAiList, wiId_BackPoint, wi.getAiId(), user, opCode, userNote);

	}

	/**
	 * 
	 * <p>
	 * 回退到指定Ai
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param backToAiList
	 *            退回到的Ais
	 * @param wiIdBackPoint
	 *            当前工作ID
	 * @param aiIdBackPoint
	 *            当前工作对应的Ai.ID
	 * @param user
	 *            当前操作人
	 * @param userNote
	 *            用户意见
	 */
	private void previousToAi(List<Ai> backToAiList, Long wiIdBackPoint, Long aiIdBackPoint, User user, String opCode, String userNote) {

		List<Wp> backToWpList = getDao().findAll(Wp.class,
				"isAi = 1 and isDeleted = 0 and aiId in (" + CollectionUtils.collectAsString(backToAiList, "id", ",") + ")");
		this.previousToWp(backToWpList, wiIdBackPoint, user, opCode, userNote, false);
	}

	/**
	 * 
	 * <p>
	 * 退回到指定Wp
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param toWp
	 *            指定的Wps
	 * @param wiIdBackPoint
	 *            当前待办
	 * @param user
	 *            操作人
	 * @param userNote
	 *            用户意见
	 * @param back2Me
	 *            退回时再回到本Wp
	 */
	public void previousToWp(Wp toWp, Long wiIdBackPoint, User user, String opCode, String userNote, boolean back2Me) {

		List<Wp> backToWpList = new ArrayList<Wp>();
		backToWpList.add(toWp);

		previousToWp(backToWpList, wiIdBackPoint, user, opCode, userNote, back2Me);

	}

	/**
	 * <p>
	 * 退回到指定Wp
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param backToWpList
	 *            指定的Wps
	 * @param wiIdBackPoint
	 *            当前待办
	 * @param user
	 *            操作人
	 * @param opCode
	 *            操作码
	 * @param userNote
	 *            用户意见
	 * @param back2Me
	 *            退回时再回到本Wp
	 */
	public Long previousToWp(List<Wp> backToWpList, Long wiIdBackPoint, User user, String opCode, String userNote, boolean back2Me) {
		if (backToWpList.size() == 0) {
			return null;
		}
		Wi theBackPointWi = null;
		Long jump2WpId = null;
		Wp theBackWpOfWi = null;
		if (wiIdBackPoint != null) {
			jump2WpId = back2Me ? Long.valueOf(String.valueOf(getDao().getFirstBySQL(
					"select "+DbType.getType()+"ifnull(wp.parent_wp_id,wi.wp_id) from tf_wi wi inner join tf_wp wp on wi.wp_id = wp.id where wi.id = ? ", wiIdBackPoint))) : null;
			theBackPointWi = wiDAO.completeWi(wiIdBackPoint, user, userNote, opCode);
			// 记录退回记录
			alService.logBack(theBackPointWi);
			// 要跳到的wp
			theBackWpOfWi = null != jump2WpId ? wpDAO.getWpById(jump2WpId) : theBackPointWi.getWp();
			;
			theBackWpOfWi.setBjBackPoint(1);
			getDao().update(theBackWpOfWi);

		}
		List<Ai> previousAiAtPath = new ArrayList<Ai>();
		List<Long> backAiOfBackToWpList = new ArrayList<Long>();
		// 老流程的流程实例
		Fi oldFi = null;
		for (Wp backTo : backToWpList) {
			previousAiAtPath.add(backTo.getAi());
			backAiOfBackToWpList.add(backTo.getAi().getId());
			oldFi = backTo.getFi();
			List<Ai> nextAList = aiDAO.getNextAList(backTo.getAi(), Ai.STATUS_COMPLETE, Ai.STATUS_RUNNING);
			previousAiAtPath.addAll(nextAList);
		}
		List<Wi> wiList = getDao().findAll(Wi.class,
				"aiId in (" + CollectionUtils.collectAsString(previousAiAtPath, "id", ",") + ")" + " and (status = ? or status = ?) ",
				new Object[] { Wi.STATUS_RUNNING, Wi.STATUS_CREATED }, new String[] { "ai", "ac", "fi" });
		if (null != wiList && wiList.size() > 0) {
			// 将正在运行、刚创建的待办失效
			for (Wi wi : wiList) {
				wiDAO.overdueWi(wi);
			}
		}
		// 结束当前节点
		if (null != theBackPointWi && null != theBackPointWi.getAi()) {
			this.completeAi(theBackPointWi.getAi(), false, null, null);
		}
		Gvs gvs = gvDAO.getGvs(backToWpList.get(0).getFiId());
    
		List<BizDataDTO> bizDataDTOList = bizDataDAO.getBizDataDTOList(backToWpList.get(0).getFiId(), null != backToWpList.get(0).getFi() ? backToWpList.get(0)
				.getFi().getBizVersion() : "");

		// 创建用户
		User startor = new User(backToWpList.get(0).getFi().getOwnerUserId(), backToWpList.get(0).getFi().getOwnerUserLoginName(), backToWpList.get(0).getFi()
				.getOwnerUserName());
		//创建新流程
		Fi newFi = createFi(backToWpList.get(0).getAi().getAc().getFlowCode(), backToWpList.get(0).getAi().getAc().getFlowVersion(), backToWpList.get(0)
				.getFi().getFiName(), startor, gvs);
		
	
    	
		// 还要使用之前流程的发起人发起流程
		fiDAO.startFi(newFi, startor);
		// 处理历史流程
		newFi.setIsBackedFi(1);
		if (null != oldFi) {
			newFi.setRelatedFiIds((StringUtils.isNotBlank(oldFi.getRelatedFiIds()) ? oldFi.getRelatedFiIds() + "," : "") + oldFi.getId());
			newFi.setStartRoleId(oldFi.getStartRoleId());
			newFi.setBizId(oldFi.getBizId());
			newFi.setCompanyId(oldFi.getCompanyId());
			newFi.setFiCode(oldFi.getFiCode());
			newFi.setFiCodeNum(oldFi.getFiCodeNum());
			newFi.setServiceObjectDefineId(oldFi.getServiceObjectDefineId());
			newFi.setBizVersion(oldFi.getBizVersion());
		}
		getDao().update(newFi);

		Ac start = acDAO.getStart(newFi.getFl().getFlowCode(), newFi.getFl().getFlowVersion());
		rebulidFi(newFi, start, gvs, bizDataDTOList, false, true);
		for (Wp backToWp : backToWpList) {
			Wp new_backToWp = null;
			/**
			 * 处理退回到的Wp是一个subWp或者是主wp
			 */
			if (backToWp.getParentWpId() == null) {
				new_backToWp = getDao().findFirst(Wp.class, "ai.ac.nodeId = ? and fiId = ? and parentWpId is null",
						new Object[] { backToWp.getAi().getAc().getNodeId(), newFi.getId() });
			} else {
				new_backToWp = getDao().findFirst(Wp.class, "ai.ac.nodeId = ? and fiId = ? and parentWpId is not null",
						new Object[] { backToWp.getAi().getAc().getNodeId(), newFi.getId() }, new String[] { "parentWp" });
			}
			Map<String, Object> tvs = new HashMap<String, Object>();
			tvs.put(IConstantVar.TVS_AI, new_backToWp.getAi());
			/**
			 * 以下，处理backToWp的px和CurrentPx
			 */
			if (new_backToWp.getParentWpId() != null) {
				// px指向
				aiService.pointToWp(new_backToWp.getParentWp());
				// currentSubPx指向@串行中的subWp
				if (FlowUtils.isSubModeAndChuanxing(new_backToWp.getParentWp())) {
					// 简单处理到对应的subPx
					new_backToWp.setCurrentSubPx(backToWp.getSubPx());
					getDao().update(new_backToWp);
				}
			}
			// 只能退回到节点（主wp）
			else if (FlowUtils.isSubMode(new_backToWp)) {
				// px指向
				aiService.pointToWp(new_backToWp);

				// currentSubPx指向第一个
				if (FlowUtils.isSubModeAndChuanxing(new_backToWp)) {
					// 简单处理到对应的subPx
					new_backToWp.setCurrentSubPx(0);
					getDao().update(new_backToWp);
				}
			}
			// 没有启用子模式
			else {
				// px指向
				aiService.pointToWp(new_backToWp);
			}
			List<String> goodNodeIds = new ArrayList<String>();
			/**
			 * 以下处理 Jump2WpId
			 */
			if (back2Me) {
				Wp new_jump2Wp = null;

				if (theBackWpOfWi.getParentWpId() == null) {
					new_jump2Wp = getDao().findFirst(Wp.class, "ai.ac.nodeId = ? and fiId = ? and parentWpId is null",
							new Object[] { theBackWpOfWi.getAi().getAc().getNodeId(), newFi.getId() });
				} else {
					new_jump2Wp = getDao().findFirst(Wp.class, "ai.ac.nodeId = ? and fiId = ? and parentWpId is not null",
							new Object[] { theBackWpOfWi.getAi().getAc().getNodeId(), newFi.getId() }, new String[] { "parentWp" });
				}

				new_backToWp.setJump2WpId(new_jump2Wp.getId());
				getDao().update(new_backToWp);

				goodNodeIds.addAll(StringHelper.splitAsStringList(theBackPointWi.getAi().getAc().getNext_a(), "-"));
				goodNodeIds.add(theBackPointWi.getAi().getAc().getNodeId());
			} else {
				goodNodeIds.addAll(StringHelper.splitAsStringList(backToWp.getAi().getAc().getNext_a(), "-"));
				goodNodeIds.add(backToWp.getAi().getAc().getNodeId());
			}
			newFi.setGoodNodeIds(StringHelper.join(CollectionUtils.distinct(goodNodeIds), "-"));
			getDao().update(newFi);
			/**
			 * 启动 new_backToWp
			 */
			this.force_start(new_backToWp.getAi(), gvs, tvs, false);
			//流程业务数据配置
			if( bizDataDTOList!=null && bizDataDTOList.size()>0){
				bizDataDAO.putBizDatas(new_backToWp.getFiId(), bizDataDTOList);
			}
		}
		return newFi.getId();
	}

	/**
	 * 
	 * <p>
	 * 结束工作
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param wiId
	 *            工作ID
	 * @param user
	 *            操作人
	 * @param userNote
	 *            用户意见
	 * @param opCode
	 *            操作编码
	 */
	public void completeWi(Long wiId, User user, String userNote, String opCode) {
		this.completeWi(wiId, user, userNote, opCode, true);
	}

	public void completeWi(Long wiId, User user, String userNote, String opCode, boolean needLog) {
		Map<String, Object> tvs = new HashMap<String, Object>();
		tvs.put("needLog", needLog);
		this.completeWi(wiId, user, userNote, opCode, null, tvs);
	}

	/**
	 * 
	 * <p>
	 * 结束工作
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param wiId
	 *            工作ID
	 * @param user
	 *            操作人
	 * @param userNote
	 *            用户意见
	 * @param opCode
	 *            操作编码
	 * @param opUsers
	 *            选择的用户,格式化参与人字符串,保存在Wi对象中,表示完成本工作时相关联的用户，譬如：转发时选择的被转发人列表
	 * @param _tvs
	 *            扩展
	 */
	public void completeWi(Long wiId, User user, String userNote, String opCode, String opUsers, Map<String, Object> _tvs) {

		//完成Wi自身
		Wi wi = wiDAO.completeWi(wiId, user, userNote, opCode, opUsers, null, _tvs == null ? null : (Long) _tvs.get(WsConstant.WI_OP_ROLE));
	    System.out.println(wi.getId()+"===="+wi.getParticipantLoginName());
		getDao().flush();

		Wp wp = wpDAO.getWpById(wi.getWpId());
		
		getDao().flush();
		//重复自动跳过log
		if (!FlowUtils.foundSignal(_tvs, "needLog", "false")) {
			alService.logWi(wi);
		}

		boolean isEffectFlow = FlowUtils.isEffectFlow(wi);
	
		// 尝试结束本环节
		if (isEffectFlow) {

			Gvs gvs = gvDAO.getGvs(wi.getFiId());
			
			Map<String, Object> tvs = FlowUtils.joinMap(null, _tvs);

			// 当前Wp必定是有工作的Wp
			boolean canCompleteWp = canComplete(wp, gvs, tvs);
			
			System.out.println(canCompleteWp);
           
			if (canCompleteWp) {
				
				this.next(wp, gvs, tvs, user);
				
				
			} else if (FlowUtils.isChuanxing(wp)) {
                //串行
				Wi nextWi = wiDAO.getNextWi(wi);
				if (nextWi != null) {
					wiDAO.startWi(nextWi);
				}
			}
            
		}
      
		/* doAfterService.doAfterWiComplete(wi); */
	}

	/**
	 * 
	 * <p>
	 * 重新构造流程
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param fi
	 *            流程实例
	 * @param fromAc
	 *            重新计算开始Ac
	 * @param gvs
	 *            全局变量
	 * @param updateGvs
	 *            是否发布gvs
	 * @param reBuildParticipant
	 *            是否重置参与人
	 */
	/**
	 * @param fi
	 * @param fromAc
	 * @param gvs
	 * @param bizDataDTOList
	 * @param updateGvs
	 * @param reBuildParticipant
	 */
	/**
	 * @param fi
	 * @param fromAc
	 * @param gvs
	 * @param bizDataDTOList
	 * @param updateGvs
	 * @param reBuildParticipant
	 */
	private void rebulidFi(Fi fi, Ac fromAc, Gvs gvs, List<BizDataDTO> bizDataDTOList, boolean updateGvs, boolean reBuildParticipant) {
		try{
			
		
		if (updateGvs) {
			gvDAO.putGvs(fi.getId(), gvs);
			bizDataDAO.putBizDatas(fi.getId(), bizDataDTOList);
		}

		gvs = gvDAO.getGvs(fi.getId());

		// 更新页面选择的岗位
		Long startRoleId = gvs.get(WsConstant.WI_OP_ROLE) == null ? null : Long.parseLong(String.valueOf(gvs.get(WsConstant.WI_OP_ROLE)));
		//页面对应的项目
		String projectId = gvs.get(WsConstant.WI_OP_PROJECT) == null ? null : String.valueOf(gvs.get(WsConstant.WI_OP_PROJECT));
	
	    //参数项目
		if (projectId == null && fi.getFlowProjectId() != null) {
			projectId = fi.getFlowProjectId();
			gvs.add(WsConstant.WI_OP_PROJECT, projectId, "");
		} else if (projectId != null) {
			fi.setFlowProjectId(projectId);  //参数项目
			// update at SpAction.rebuildFi
			// getDao().update(fi);
			gvs.add(WsConstant.WI_OP_PROJECT, projectId, "");
		}
		//
		if (startRoleId == null && fi.getStartRoleId() != null) {
			startRoleId = fi.getStartRoleId();
			gvs.add(WsConstant.WI_OP_ROLE, startRoleId, "");
		} else if (startRoleId != null) {
			fi.setStartRoleId(startRoleId);  //发起岗位
			// update at SpAction.rebuildFi
			// getDao().update(fi);
			gvs.add(WsConstant.WI_OP_ROLE, startRoleId, "");
		}

		//创建不存在的Ai
		this.createAiIfNotExists(fi, fromAc, gvs);
		
		List<Ai> aiList = aiDAO.getAiList(fi.getId(), Ai.STATUS_CREATED, Ai.STATUS_RUNNING);
		Fl fl = fi.getFl();
		if (null == fl) {
			fl = getDao().getById(Fl.class, fi.getFlId());
		}
		for (Ai ai : aiList) {
			Map<String, Object> transientVar = new HashMap<String, Object>();
			transientVar.put(IConstantVar.TVS_AI, ai);
			transientVar.put(IConstantVar.TVS_FI, fi);
			// 数据库定义的格式化字符串
			String paticipantString = participantDAO.getParticipantString(ai);
			// 节点工作的控制方式
			// 串行
			boolean isChuanxingAc = ai.getAc().getNodeType() != null && ai.getAc().getNodeType() == 1;
			// 竞争
			boolean isBingxing = ai.getAc().getNodeType() == null || ai.getAc().getNodeType() == 0;
			// 并行
			boolean isHuishen = ai.getAc().getNodeType() != null && ai.getAc().getNodeType() == 2;
			// 结束控制方式
			String parentFinishCtrl = isChuanxingAc ? AndFinishTypeService.class.getName() : (isBingxing ? XorFinishTypeService.class.getName()
					: (isHuishen ? AndFinishTypeService.class.getName() : ""));
			// SubWp结束控制方式
			String subFinishCtrl = isChuanxingAc ? XorFinishTypeService.class.getName() : (isBingxing ? XorFinishTypeService.class.getName()
					: (isHuishen ? XorFinishTypeService.class.getName() : ""));
			// 只有此种情况将业务参与人对应的subwp的结束方式由XorFinishTypeService改为AndFinishTypeService
			boolean needChangeSubFinishCtrl = !isChuanxingAc && !isBingxing && isHuishen;
			// 以下情况不启用subMode:
			// 1.空人员配置的Ai
			// 2.发起节点
			// 3.自动条件节点(注意:不是自动活动的节点)
			boolean enableSub = StringUtils.isNotEmpty(paticipantString) && ai.getAc().getIsStart() != 1 && !FlowUtils.isAuto(ai.getAc());
			if (enableSub) {
				// 以空参与人初始化 Ai的Wp,将启用subMode模式，同时使用Ac设置的 NodeType(并、串、会)
				Wp parent = wpDAO.saveOrUpdateByAi(ai, 0, "", parentFinishCtrl, ai.getDisplayName(), reBuildParticipant);
				parent.setSubMode(1);
				parent.setWpType(ai.getAc().getNodeType());
				parent.setIsDeleted(0);
				// 父亲节点设置的参与人列表，依次生成subWp，并按照顺序计数
				//String[] paticipantStringList = paticipantString.split(";");
				
				String[] originpaticipantStringList = paticipantString.split(";");
				
				List<String> list=new ArrayList<String>();
				
				//剔除外部参与人为空
				if(originpaticipantStringList!=null && originpaticipantStringList.length>0){
					for(String paticipant: originpaticipantStringList){
						if(paticipant!=null && !"".equals(paticipant)&& paticipant.contains("Objf_")){
							String index_value=paticipant.substring(paticipant.indexOf(":")+1);
							Map<String, GvBean> map=gvs.getGvMap();
							System.out.println("*********************"+paticipant);
							for ( String key:map.keySet()){
			            		GvBean gb =map.get(key);
			            	    if(gb!=null){
			            	    	if(index_value!=null && index_value.equals(gb.getCode())){
			            	    		if(gb.getVal()!=null && !"".equals(gb.getVal())){
			            	    			list.add(paticipant);
			            	    			break;
			            	    		}else{
			            	    			continue;
			            	    		}
			            	    	}
			            	    }
			            	}	
						}else{
							list.add(paticipant);
						}
						
					}
				}
				String[] paticipantStringList=(String[]) list.toArray(new String[list.size()]);
				
				int subPx = 1;
				int maxPx = subPx;
				// 将所有User记录下来，在循环结束后，更新到parentWp.
				String parent_userAsString = "";
				Set<Wp> chWps = new HashSet<Wp>();
				for (String onePaticipantString : paticipantStringList) {
					boolean fla=false;
					Object[] dealSubWpReturn = null;

					// add by liuhm 针对通用角色，在解析之前要对其进行标准角色转换[通用角色]
					if (onePaticipantString != null && onePaticipantString.startsWith(IdName.GENERAL_PREFIX)) {
						
						List<String> rolePaticipantString = getGeneralPaticipantString2RolePaticipantString(onePaticipantString); //获取通用角色下的角色
						
						for (String rolePaticipantStr : rolePaticipantString) {
							//解析角色
							dealSubWpReturn = this.dealSubWp(ai, subPx, parent, fi, rolePaticipantStr, transientVar, gvs, subFinishCtrl, reBuildParticipant);
							if(dealSubWpReturn!=null){
								fla=true;
								parent_userAsString += (dealSubWpReturn[1] + ";");

								maxPx = subPx;
								subPx++;
							}
							if(dealSubWpReturn!=null){
								fla=true;
								chWps.add((Wp) dealSubWpReturn[0]);
							}
						}

					} else {
						//不是通用角色
						if (needChangeSubFinishCtrl && StringUtils.isNotBlank(onePaticipantString)
								&& (onePaticipantString.startsWith(IdName.PBIZ_PREFIX) || onePaticipantString.startsWith(IdName.OBJF_PREFIX))) {
							dealSubWpReturn = this.dealSubWp(ai, subPx, parent, fi, onePaticipantString, transientVar, gvs,
									AndFinishTypeService.class.getName(), reBuildParticipant);
						} else {
							dealSubWpReturn = this.dealSubWp(ai, subPx, parent, fi, onePaticipantString, transientVar, gvs, subFinishCtrl, reBuildParticipant);
						}
						if(dealSubWpReturn!=null){
							fla=true;
							parent_userAsString += (dealSubWpReturn[1] + ";");
							maxPx = subPx;
							subPx++;
						}
						if(dealSubWpReturn!=null){
							fla=true;
							chWps.add((Wp) dealSubWpReturn[0]);
						}
					}
					
				}
				parent_userAsString = IdNameUtils.encode(CollectionUtils.distinct(IdNameUtils.decode(parent_userAsString)));
				parent.setParticipantsDefine(parent_userAsString);
				// 当已经有Participants时，保留已有的定义
				if ((StringUtils.isNotEmpty(parent_userAsString) && StringUtils.isEmpty(parent.getParticipants())) || reBuildParticipant) {
					parent.setParticipants(parent_userAsString);
					if (StringUtils.isEmpty(parent.getParticipants())) {
						parent.setParticipantsSelected(parent_userAsString);
					}
				}
				parent.setChWps(chWps);
				parent.setMaxPx(maxPx);
				getDao().update(parent);
				// 删除发起审批前手动添加的用户对应的wp
				getDao().execute("delete from Wp where parentWpId = ? and subPx > ?", parent.getId(), maxPx);
			}

			else {

				// 不启用子模式的，将解析出所有的User，存入Wp
				List<User> users = participantDAO.getPaticipantUsers(fi.getId(), paticipantString, transientVar, gvs);
				String userAsString = IdNameUtils.encode(IdNameUtils.toIdNameList(users));
				Wp theWp = wpDAO.saveOrUpdateByAi(ai, 0, userAsString, ai.getAc().getFinishCtrl(), ai.getDisplayName(), reBuildParticipant);
				theWp.setUsersPrefix(UserPrefixUtils.ecode(users, ""));
				// 如果该节点是开始节点
				if (ai.getAc().getIsStart() == 1) {
					if (fi.getStartRoleId() != null) {
						String rolePath = orgnAPIService.getPostPath(fi.getStartRoleId());
						theWp.setRolePath(rolePath);
						theWp.setUsersPrefix(UserPrefixUtils.ecode(users, orgnAPIService.getPostPrefix(fi.getStartRoleId())));
					}
					getDao().update(theWp);
				}
			}

		}

		rebuildParticipant(fi);
		}catch(Exception ex){
			ex.printStackTrace();
		}

		// getDao().update(fi);
	}

	private List<String> getGeneralPaticipantString2RolePaticipantString(String onePaticipantString) {
		// Gnrl_10:通用角色1
		int beginIdx = onePaticipantString.indexOf("_") + 1;
		int endIdx = onePaticipantString.indexOf(":");
		String roleGeneralId = onePaticipantString.substring(beginIdx, endIdx);
		List<String> roleLst = roleGeneralService.getRoleByGeneralId(Long.valueOf(roleGeneralId));

		return roleLst;
	}

	/**
	 * 
	 * <p>
	 * 尝试开始一个环节
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param ai
	 *            环节
	 * @param gvs
	 *            全局变量
	 * @param transientVar
	 *            临时变量
	 * @param isBacked
	 *            是否退回
	 * @return 能否开始
	 */

	public boolean tryStartAi(Ai ai, Gvs gvs, Map<String, Object> transientVar, boolean isBacked) {

		if (ai.getStatus() == Ai.STATUS_CREATED || ai.getStatus() == Ai.STATUS_COMPLETE) {
			boolean canStart = canStart(ai, gvs, transientVar);

			if (canStart) {
                //YZP强制开启
				force_start(ai, gvs, transientVar, isBacked);

			}
			return canStart;
		}

		return true;
	}

	private void force_start(Ai ai, Gvs gvs, Map<String, Object> transientVar, boolean isBacked) {
		this.startAi(ai, gvs, transientVar);

		Wp wp = null;
		try {
			wp = wpDAO.getWpOfAi(ai.getId());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		logger.info("force_start方法：====参数fiID=="+ai.getFiId()+"====参数aiID:======="+ai.getId()+"====参数wpID:======="+wp.getId());

		boolean isSubModeAndChuanxing = FlowUtils.isSubModeAndChuanxing(wp);
		boolean isSubModeAndBingxing = FlowUtils.isSubModeAndBingxing(wp); //true
		boolean isSubModeAndHuishen = FlowUtils.isSubModeAndHuishen(wp);

		if (isSubModeAndChuanxing) {
			Wp subWp = wpDAO.popSub(wp, 1);
			if (subWp != null) {
				logger.info("force_start1方法：====参数fiID=="+ai.getFiId()+"======参数aiID:======="+ai.getId()+"====参数subWpID:======="+subWp.getId());
				wiDAO.startWp(subWp, false, 0);
			} else {
				tryCompleteAi(ai, true, gvs, transientVar);
			}
		} else if (isSubModeAndBingxing) {
			
			
			// 全部start
			Set<Wp> wps = wp.getChWps();
			for (Wp _wp : wps) {
				logger.info("force_start2方法：====参数fiID=="+ai.getFiId()+"======参数aiID:======="+ai.getId()+"====参数subWpID:======="+_wp.getId());
				wiDAO.startWp(_wp, false, 0);
			}

			tryCompleteAi(ai, true, gvs, transientVar);
			
			
			
		} else if (isSubModeAndHuishen) {
			// 全部start
			// 全部start
			Set<Wp> wps = wp.getChWps();

			for (Wp _wp : wps) {
				logger.info("force_start3方法：====参数fiID=="+ai.getFiId()+"======参数aiID:======="+ai.getId()+"====参数subWpID:======="+_wp.getId());

				wiDAO.startWp(_wp, false, 0);
			}

			tryCompleteAi(ai, true, gvs, transientVar);
		} else {
			wp = wpDAO.pop(ai, ai.getPx());
			if (wp != null) {
				// POP出来Wp,可能已经跳过
				logger.info("force_start4方法：====参数fiID=="+ai.getFiId()+"======参数aiID:======="+ai.getId()+"====参数subWpID:======="+wp.getId());

				wiDAO.startWp(wp, isBacked);
			} else {
				// 本环节没有可执行的Wp了
				tryCompleteAi(ai, true, gvs, transientVar);
			}
		}

	}

	/**
	 * 
	 * <p>
	 * 推动下一步
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param wp
	 *            工作组
	 * @param gvs
	 *            Gvs全局变量
	 * @param tvs
	 *            上下文
	 * @param opUser
	 *            操作人
	 * @return 是否结束了Ai
	 */
	public boolean next(Wp wp, Gvs gvs, Map<String, Object> tvs, User opUser) {
		boolean canCompleteAi = false;
		
		//协办，或者转办
		Long pwpId = wp.getPwpId(); //null;
		Long pwiId = wp.getPwiId();  //null;

		Long parentWpId = wp.getParentWpId();
		
		boolean isSubModeAndChuanxing = FlowUtils.isSubModeAndChuanxing(wp);//1
		
		boolean isSubModeAndBingxing = FlowUtils.isSubModeAndBingxing(wp);// false;
		
		boolean isSubModeAndHuishen = FlowUtils.isSubModeAndHuishen(wp); //2

		// 获取下一个Wp，分2种情况：
		// 1. 该Wp包括 : parentWp，流向: 父亲 Wp
		// 2. 该Wp没有 : parentWp，流向: 后续 Wp

		// 第一种情况
		if (pwpId != null) {

					Wp parentWp = getDao().getById(Wp.class, pwpId);
					Wi parentWi = getDao().getById(Wi.class, pwiId);
		
					boolean SIGNAL_WHEN_WP_BACK_PASS_PARENT = FlowUtils.foundSignal(tvs, WsConstant.SIGNAL_WHEN_WP_BACK, WsConstant.SIGNAL_WHEN_WP_BACK_PASS_PARENT);
		
					// 1.返回Parent，不发待办，直接跳过parentWp，去往下一个Wp，直到根Wp
					if (SIGNAL_WHEN_WP_BACK_PASS_PARENT) {
						tvs.put(WsConstant.SIGNAL_WHEN_WP_BACK, "");
						if (FlowUtils.isChuanxing(parentWp)) {
							Wi nextWi = wiDAO.getNextWi(parentWi);
							if (nextWi != null) {
								wiDAO.startWi(nextWi);
							} else {
								this.next(parentWp, gvs, tvs, opUser);
							}
						} else {
							this.next(parentWp, gvs, tvs, opUser);
						}
						// 2.返回Parent，需发待办，还留在parentWp
					} else {
						AssignWi assignWi = AssignWi.create(Wi.STATUS_RUNNING, WiType.ZC, parentWi.getWiCode(), "", "", null, "", "");
						assignWi.addParticipant(parentWi.getParticipant(), parentWi.getParticipantLoginName(), parentWi.getParticipantUserName());
						assignWi(parentWp, assignWi, 0);
		
					}
		}
		// X1.子摸试运行 && 串行
		else if (isSubModeAndChuanxing && wp.getCurrentSubPx() <= wp.getMaxPx()) {

					Wp subWpOfNext = wpDAO.popSub(wp, wp.getCurrentSubPx());
					if (subWpOfNext != null) {
						wiDAO.startWp(subWpOfNext, false, 0);
					} else {
						this.next(wp, gvs, tvs, opUser);
					}
		} else if (isSubModeAndBingxing) {
			// 不做任何事情
		} else if (isSubModeAndHuishen) {
			// 不做任何事情
		}
		// parentWp_isSubModeAndChuanxing :
		// tryStartAi初次进入，进入后的Wp.parentWpId != null ,
		// 1.更新parentWp.CurrentSubPx到下一个，然后使用parentWp，重新进入next计算，从而
		// X1.处pop出下一个subPx运行
		else if (parentWpId != null) {
			Wp parentWp = getDao().getById(Wp.class, parentWpId);

			boolean parentWp_isSubModeAndChuanxing = FlowUtils.isSubModeAndChuanxing(parentWp);
			boolean parentWp_isSubModeAndBingxing = FlowUtils.isSubModeAndBingxing(parentWp);//true
			boolean parentWp_isSubModeAndHuishen = FlowUtils.isSubModeAndHuishen(parentWp);

			// REF:WpDAO.popSub中无人参与的Wp,需要将
			// parentWp.setCurrentSubPx(parentWp.getCurrentSubPx() + 1);
			if (parentWp_isSubModeAndChuanxing) {
				parentWp.setCurrentSubPx(parentWp.getCurrentSubPx() + 1);
				getDao().update(parentWp);
				this.next(parentWp, gvs, tvs, opUser);
			} else if (parentWp_isSubModeAndBingxing) {
				tvs.put(IConstantVar.TVS_WP, parentWp);
				logger.info("流程实例=="+parentWp.getAi().getFiId() +"=====。方法：FlowService.next。ａｉＩｄ："+parentWp.getAi().getId());		
				//启动新的Ai，wi
				canCompleteAi = tryCompleteAi(parentWp.getAi(), true, gvs, tvs);
				
			} else if (parentWp_isSubModeAndHuishen) {
				
	
				tvs.put(IConstantVar.TVS_WP, parentWp);
				canCompleteAi = tryCompleteAi(parentWp.getAi(), true, gvs, tvs);
			}
		} else {
			// 此段逻辑保持与tryStartAi一致
			Wp nextWp = wpDAO.pop(wp.getAi(), wp.getPx() + 1);
			if (nextWp != null) {
				wiDAO.startWp(nextWp, false);
			} else {
				canCompleteAi = tryCompleteAi(wp.getAi(), true, gvs, tvs);
			}
		}
		// 尝试结束流程
		if (canCompleteAi) {
			tryCompleteFi(wp.getFi(), gvs, tvs, opUser);
		}
		return canCompleteAi;
	}

	/**
	 * 
	 * <p>
	 * 收回工作
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param wiId
	 *            工作ID
	 */
	public void getBackWi(Long wiId) {
		// 1.原路径返回
		// 2.重新流转
		// 退回1，退回任意一个
	}

	/**
	 * 
	 * <p>
	 * 获得所有的全局变量
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param fiId
	 *            流程实例
	 * @return 全局变量集合
	 */
	public Gvs getGvs(Long fiId) {
		return gvDAO.getGvs(fiId);
	}

	/**
	 * 
	 * <p>
	 * 创建所有的活动实例，存在的则忽略创建
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param fi
	 *            流程实例
	 * @param currentAc
	 *            当前Ac
	 * @param gvs
	 *            全局变量
	 */
	private void createAiIfNotExists(Fi fi, Ac currentAc, Gvs gvs) {
		
		String flowCode = fi.getFl().getFlowCode();
		String flowVersion = fi.getFl().getFlowVersion();

		// 所有Ac
		List<Ac> acList = acDAO.getAcList(flowCode, flowVersion);

		// 从root开始,所有可到达的Ac
		List<Tr> trList = trDAO.getListByTrIds(currentAc.getFlowCode(), currentAc.getFlowVersion(), currentAc.getNext_tr_a());

		// 已经建立实例的Ac
		List<String> existsNodeIdList = getDao().findByHQL(String.class, "select e.ac.nodeId from Ai e where e.fiId = ?", new Object[] { fi.getId() });

		// 所有将要实例化的Ac集合(已经排除自动节点)
		List<Ac> yList = FlowUtils.getAcListOfNextAList(currentAc, acList, trList, gvs, true);

		// 需要实例化的Ac : nList = yList - existsNodeIdList
		List<Ac> nList = FlowUtils.excludeExists(yList, existsNodeIdList);

		// 创建Ais
		aiDAO.createAiList(nList, fi);

		// ResetList:需要重置的Ai集合
		List<String> rList4Filter = new ArrayList<String>();
		// OverDueList:需要过期的Ai集合
		List<String> oList = new ArrayList<String>();
		// 所有将要实例化的Ac集合 = 已经实例化 + 未实例化
		List<String> yNodeIdList = CollectionUtils.collectAsList(yList, "nodeId");

		for (String existAiNodeId : existsNodeIdList) {
			if (yNodeIdList.contains(existAiNodeId)) {
				rList4Filter.add(existAiNodeId);
			} else {
				oList.add(existAiNodeId);
			}
		}

		// 将在yList中,也在ExistList中的过期状态的Ai,重置回来
		List<Ai> resetList = aiDAO.getListByNodeIdList(fi.getId(), rList4Filter, Ai.STATUS_OVERDUE);
		for (Ai ai : resetList) {
			ai.setStatus(Ai.STATUS_CREATED);
			ai.setRs(null);
			ai.setRe(null);
			getDao().update(ai);
		}

		// 将不在yList中，但是之前已经实例化的Ai过期掉
		List<Ai> overDueList = aiDAO.getListByNodeIdList(fi.getId(), oList);
		for (Ai ai : overDueList) {
			wiDAO.overdueByAi(ai, true);
		}
	}

	/**
	 * 判定节点能否开始
	 * 
	 * @param ai
	 *            环节实例
	 * @param gvs
	 *            全局变量
	 * @param transientVar
	 *            临时变量
	 * @return 能否开始
	 */
	public boolean canStart(Ai ai, Gvs gvs, Map<String, Object> transientVar) {

		int status = ai.getStatus();

		if (status == Ai.STATUS_RUNNING) {
			return true;
		} else {
			transientVar.put(IConstantVar.TVS_AI, ai);

			String startCtrl = StringUtils.isNotEmpty(ai.getAc().getStartCtrl()) ? ai.getAc().getStartCtrl() : AndJoinTypeService.class.getName();
			IJoinTypeService jt = null;
			try {
				jt = (IJoinTypeService) App.getBean(Class.forName(startCtrl));
			} catch (ClassNotFoundException e) {
				jt = null;
			}
			boolean canStart = false;
			if (jt != null)
				canStart = jt.canStart(gvs, transientVar);
			return canStart;
		}

	}

	/**
	 * 判定节点能否结束
	 * 
	 * @param ai
	 *            环节实例
	 * @param gvs
	 *            全局变量
	 * @param transientVar
	 *            临时变量
	 * @return 能否结束
	 */
	public boolean canComplete(Ai ai, Gvs gvs, Map<String, Object> transientVar) {

		// 外部任务、通过外部程序直接调用complete
		boolean isOutTask = FlowUtils.isTypeTask(ai.getAc(), Ac.ACTYPE_OUT_TASK); //false
		
		if (isOutTask) {
			return false;
		}
		transientVar.put(IConstantVar.TVS_AI, ai);
		/* Wp wp = wpDAO.getWpByPx(ai.getId(), ai.getPx()); */
		// 取ai对应的wp
		Wp wp = wpDAO.getWpOfAi(ai.getId());
		
		transientVar.put(IConstantVar.TVS_WP, wp);
		// 应用程序挂起，必须应用程序解挂
		boolean isSuspend = FlowUtils.isAiSuspend(ai) || FlowUtils.isFiSuspend(ai.getFi());
		if (isSuspend) {
			return false;
		}

		// 0.wp==null
		if (wp == null) {
			return true;
		}

		// 1.自动任务
		boolean isAuto = FlowUtils.isAutoOrAutoTask(ai.getAc());  //false;
		
		
		if (isAuto) {
			return true;
		}

		// 2.内置结束判断器
		String finishTypeClass = StringUtils.isNotEmpty(ai.getAc().getFinishCtrl()) ? ai.getAc().getFinishCtrl() : XorFinishTypeService.class.getName();
		
		IFinishTypeService ft = null;
		try {
			ft = (IFinishTypeService) App.getBean(Class.forName(finishTypeClass));
		} catch (ClassNotFoundException e) {
			ft = null;
		}
		boolean canComplete = false;
		if (ft != null) {
			canComplete = ft.canFinish(gvs, transientVar);
		} else {
			logger.error("IFinishTypeService 为 null");
		}

		return canComplete;
	}

	/**
	 * 判定工作组能否结束
	 * 
	 * @param wp
	 *            工作组
	 * @param gvs
	 *            全局变量
	 * @param transientVar
	 *            临时变量
	 * @return 能否结束
	 */
	/**
	 * @param wp
	 * @param gvs
	 * @param transientVar
	 * @return
	 */
	public boolean canComplete(Wp wp, Gvs gvs, Map<String, Object> transientVar) {

		transientVar.put(IConstantVar.TVS_WP, wp);
		transientVar.put(IConstantVar.TVS_AI, wp.getAi());

		
		//判断完成类型
		String finishTypeClass = StringUtils.isNotEmpty(wp.getFinishCtrl()) ? wp.getFinishCtrl() : XorFinishTypeService.class.getName();
		
		IFinishTypeService ft = null;
		try {
			ft = (IFinishTypeService) App.getBean(Class.forName(finishTypeClass));
		} catch (ClassNotFoundException e) {
			ft = null;
		}
		boolean canComplete = false;
		if (ft != null)
			canComplete = ft.canFinish(gvs, transientVar);
		return canComplete;
	}

	/**
	 * 加签
	 * 
	 * @param opUserId
	 *            操作人ID
	 * @param stepId
	 *            工作组ID
	 * @param jqUsers
	 *            加签用户
	 * @param jqType
	 *            前加签/后加签 JqType
	 * @param displayName
	 *            加签名
	 */
	public void addWp(Long opUserId, Long stepId, String jqUsers, Integer jqType, Integer assignType, String finishCtrl, String displayName) {

		User opUser = orgnAPIService.getUserByUserId(opUserId);

		// 更新Steps[Wp]
		Wp jqStep = wpDAO.getWpById(stepId);

		if (jqType == WsConstant.JqType.BEFORE.getType()) {
			// 前加签
			// 从当前(px) 开始更新
			int px = jqStep.getPx();
			List<Wp> wps = getDao().findAll(Wp.class, "aiId = ? and px >= ? and isDeleted = 0", new Object[] { jqStep.getAiId(), px });
			for (Wp wp : wps) {
				wp.setPx(wp.getPx() + 1);
				getDao().update(wp);
			}

			List<User> jqUserList = ParticipantUtils.toUsers(jqUsers);

			finishCtrl = StringUtils.isNotEmpty(finishCtrl) ? finishCtrl : (jqUserList.size() > 1 ? AndFinishTypeService.class.getName()
					: XorFinishTypeService.class.getName());

			wpDAO.saveOrUpdateByPx(jqStep.getAi(), px, jqUsers, finishCtrl, assignType, displayName, opUser, jqStep.getAi().getAc().getOps());

			// 前加签需要将Ai.px值指向到前一个
			aiService.pointToPx(jqStep.getAi(), px);

		} else if (jqType == WsConstant.JqType.AFTER.getType()) {
			// 后加签
			// 从下个(px+1) 开始更新
			int px = jqStep.getPx() + 1;
			List<Wp> wps = getDao().findAll(Wp.class, "aiId = ? and px >= ? and isDeleted = 0", new Object[] { jqStep.getAiId(), px });
			for (Wp wp : wps) {
				wp.setPx(wp.getPx() + 1);
				getDao().update(wp);
			}
			List<User> jqUserList = ParticipantUtils.toUsers(jqUsers);

			finishCtrl = StringUtils.isNotEmpty(finishCtrl) ? finishCtrl : (jqUserList.size() > 1 ? AndFinishTypeService.class.getName()
					: XorFinishTypeService.class.getName());

			wpDAO.saveOrUpdateByPx(jqStep.getAi(), px, jqUsers, finishCtrl, assignType, displayName, opUser, jqStep.getAi().getAc().getOps());
		} else {

		}

		Fi fi = getDao().getById(Fi.class, jqStep.getFiId(), "fl");
		// 重算
		rebuildParticipant(fi);
	}

	/**
	 * <p>
	 * 去签
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param stepId
	 *            环节ID
	 * @param opUserId
	 *            操作用户ID
	 */
	public void deleteWp(Long stepId, Long opUserId) {
		Wp jqStep = wpDAO.getWpById(stepId);
		jqStep.setIsDeleted(1);
		getDao().update(jqStep);

		// 过期工作

		boolean isRunning = FlowUtils.getWpStatus(jqStep) == Ai.STATUS_RUNNING;
		if (isRunning) {
			List<Wi> wis = getDao().findAll(Wi.class, "wpId = ? and status = ?", new Object[] { stepId, Wi.STATUS_RUNNING }, new String[] { "ai", "fi", "ac" });
			for (Wi wi : wis) {
				wiDAO.overdueWi(wi);
			}
		}

		List<Wp> wps = getDao().findAll(Wp.class, "aiId = ? and px > ? and isDeleted = 0 and id !=?",
				new Object[] { jqStep.getAiId(), jqStep.getPx(), jqStep.getId() });
		for (Wp wp : wps) {
			wp.setPx(wp.getPx() - 1);
			getDao().update(wp);
		}

		Fi fi = getDao().getById(Fi.class, jqStep.getFiId(), "fl");
		// 重算
		rebuildParticipant(fi);

		if (isRunning) {
			User user = orgnAPIService.getUserByUserId(opUserId);
			Gvs gvs = gvDAO.getGvs(jqStep.getFiId());
			Map<String, Object> transientVar = new HashMap<String, Object>();
			this.next(jqStep, gvs, transientVar, user);
		}
	}

	/**
	 * 
	 * <p>
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param wp
	 *            工作组
	 * @param assignWi
	 *            需要分配的任务
	 * @return 任务集合
	 */
	public List<Wi> assignWi(Wp wp, AssignWi assignWi, int px) {
		return wiDAO.assignWi(false, wp, assignWi, null, px);
	}

	/**
	 * 
	 * 节点自动抄送功能
	 * 
	 * @author 陈鸿彬
	 * @param aiId
	 *            活动节点id
	 */
	public void autoChaoSong(Long aiId) {
		Ai ai = getDao().getById(Ai.class, aiId);
		String paticipantString = ai.getAc().getCsList();
		if (StringUtils.isNotBlank(paticipantString)) {
			// String paticipantString = ai.getAc().getCsList();
			Map<String, Object> transientVar = new HashMap<String, Object>();
			transientVar.put(IConstantVar.TVS_AI, ai);
			transientVar.put(IConstantVar.TVS_FI, ai.getFi());
			LinkedList<User> csUsers = participantDAO.getPaticipantUsers(ai.getFiId(), paticipantString, transientVar, gvDAO.getGvs(ai.getFiId()));
			Wp wp = wpDAO.getWpOfAi(aiId);
			List<String> csUsersList = CollectionUtils.collectAsList(csUsers, "loginName");
			String oldUsers = ai.getFi().getCsUsers();
			if (oldUsers != null) {
				String[] xs = oldUsers.split("-");
				for (String x : xs) {
					if (StringUtils.isNotEmpty(x) && !csUsersList.contains(x)) {
						csUsersList.add(x);
					}

				}
			}
			if (csUsersList.size() > 0) {

				getDao().execute("update Fi set csUsers = ? where id = ?", CollectionUtils.collectAsString(csUsersList, "-") + "-", ai.getFiId());
			}
			AssignWi assignWi = new AssignWi();
			// 基本属性
			assignWi.setStatus(Wi.STATUS_RUNNING);
			assignWi.setWiType(WsConstant.WiType.CS.getCode());
			assignWi.setWiCode(null);
			assignWi.setWiName(null);
			assignWi.setParticipants(csUsers);
			// 完成工作属性
			assignWi.setOpCode(null);
			assignWi.setOpUserId(null);
			assignWi.setOpUsers(null);
			assignWi.setUserNote(null);
			this.assignWi(wp, assignWi, 0);
			List<String> csUsersNameList = CollectionUtils.collectAsList(csUsers, "userName");
			alService.logChaosong(wp, csUsersNameList);
		}
	}
	
	
	

	/**
	 * 
	 * <p>
	 * 覆盖参与人
	 * </p>
	 * <p>
	 * 在节点启动时，按照该字段的值，发布wi
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param wpId
	 *            工作组ID
	 * @param fiId
	 *            流程实例ID
	 * @param participants
	 *            参与人格式化字符串
	 */
	public void overrideParticipants(Long wpId, Long fiId, String participants) {
		wpDAO.replaceParticipants(wpId, participants, null, true);

		Fi fi = getDao().getById(Fi.class, fiId, "fl");
		// 重算
		rebuildParticipant(fi);
	}

	/**
	 * <p>
	 * 替换擦与人
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param wpId
	 *            工作组ID
	 * @param fiId
	 *            Fi.ID
	 * @param newUsers
	 *            新增用户
	 * @param rmUsers
	 *            删除用户
	 */
	public void replaceParticipants(Long wpId, Long fiId, String newUsers, String rmUsers) {
		wpDAO.replaceParticipants(wpId, newUsers, rmUsers, false);

		Fi fi = getDao().getById(Fi.class, fiId, "fl");
		// 重算
		rebuildParticipant(fi);

	}

	/**
	 * 
	 * <p>
	 * 按Id查询工作Wi
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param wiId
	 *            工作Id
	 * @return 工作
	 */
	public Wi getWiById(Long wiId) {
		return wiDAO.getWiById(wiId, "wp");
	}

	/**
	 * 
	 * <p>
	 * 重新整理流程实例的参与人
	 * </p>
	 * <p>
	 * 根据前后置审批配置，计算重复参与人，如存在则忽略
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param fi
	 *            流程实例
	 */
	public void rebuildParticipant(Fi fi) {
		List<Wp> wps = wpDAO.getAllCreatedWps(fi.getId());
		Long ownerUserId = fi.getOwnerUserId();
		Integer doWhenRepeatInAcs = fi.getFl().getDoWhenRepeatInAcs();
		if (doWhenRepeatInAcs != null
				&& (doWhenRepeatInAcs == FlowConstant.DOWHEN_REPEAT_INACS_USE_AFTER || doWhenRepeatInAcs == FlowConstant.DOWHEN_REPEAT_INACS_USE_AFTER_JUST_LIANXU)) {
			for (int i = 0; i < wps.size(); i++) {
				Wp c = wps.get(i);
				boolean ignoreFiOwner = c.getIgnoreFiOwner() != null && c.getIgnoreFiOwner().intValue() == 1;
				boolean ignoreAc = c.getIgnoreAc() != null && c.getIgnoreAc().intValue() == 1;
				if (ignoreAc) {
					continue;
				}
				String ps = ParticipantUtils.getParticipantsOfStatic(c);
				List<User> currentUsers = ParticipantUtils.toUsers(ps);
				List<User> afterUsers = ParticipantUtils.getAfterUsers(i, wps, doWhenRepeatInAcs == FlowConstant.DOWHEN_REPEAT_INACS_USE_AFTER);
				List<User> resultUsers = new LinkedList<User>();

				for (User theUser : currentUsers) {
					// 判断后续重复

					if ((c.getIsAi() == 1 && c.getAi().getAc().getIsStart() == 1)) {
						resultUsers.add(theUser);
					}
					// 判断是否发起人
					else if (theUser.getUserId().intValue() != ownerUserId.intValue() && !afterUsers.contains(theUser)) {
						resultUsers.add(theUser);
					} else if (theUser.getUserId().intValue() == ownerUserId.intValue() && ignoreFiOwner) {
						resultUsers.add(theUser);
					}
				}

				if (resultUsers.size() < currentUsers.size()) {
					c.setParticipants(ParticipantUtils.toParticipants(resultUsers));
					getDao().update(c);
				}

				// 拷贝代码
				// boolean isAutoPassByCfgDoWhenNoUsersAtWp =
				// FlowUtils.isAutoPassByCfgDoWhenNoUsersAtWp(fi.getFl());
				//
				// List<User> users =
				// IdNameUtils.toUsers(IdNameUtils.decode(c.getParticipants()));
				// List<User> defineUsers =
				// IdNameUtils.toUsers(IdNameUtils.decode(c.getParticipantsDefine()));
				//
				// //配置了自动跳过，且 users 为空 => 该节点自动跳过
				// if(users.size() == 0 && isAutoPassByCfgDoWhenNoUsersAtWp ){
				// c.setIsAutoAsNoParticipants(FlowConstant.WP_IS_AUTO_PASS_WEHN_NO_PARTICIPANTS_YES);
				// }
				// //重复计算后为空的 => 该节点自动跳过
				// else if(users.size() == 0 && defineUsers.size() > 0){
				// c.setIsAutoAsNoParticipants(FlowConstant.WP_IS_AUTO_PASS_WEHN_NO_PARTICIPANTS_YES);
				// }
				// else{
				// c.setIsAutoAsNoParticipants(FlowConstant.WP_IS_AUTO_PASS_WEHN_NO_PARTICIPANTS_NO);
				// }

			}

		} else if (doWhenRepeatInAcs != null
				&& (doWhenRepeatInAcs == FlowConstant.DOWHEN_REPEAT_INACS_USE_BEFORE || doWhenRepeatInAcs == FlowConstant.DOWHEN_REPEAT_INACS_USE_BEFORE_JUST_LIANXU)) {
			for (int i = wps.size() - 1; i >= 0; i--) {
				Wp c = wps.get(i);
				boolean ignoreFiOwner = c.getIgnoreFiOwner() != null && c.getIgnoreFiOwner().intValue() == 1;
				boolean ignoreAc = c.getIgnoreAc() != null && c.getIgnoreAc().intValue() == 1;
				if (ignoreAc) {
					continue;
				}
				List<User> currentUsers = ParticipantUtils.toUsers(ParticipantUtils.getParticipantsOfStatic(c));
				List<User> beforeUsers = ParticipantUtils.getBeforeUsers(i, wps, doWhenRepeatInAcs == FlowConstant.DOWHEN_REPEAT_INACS_USE_BEFORE);
				List<User> resultUsers = new LinkedList<User>();

				for (User theUser : currentUsers) {

					// 判断是否发起人
					if ((c.getIsAi() == 1 && c.getAi().getAc().getIsStart() == 1)) {
						resultUsers.add(theUser);
					} else if (theUser.getUserId().intValue() != ownerUserId.intValue() && !beforeUsers.contains(theUser)) {
						resultUsers.add(theUser);
					} else if (theUser.getUserId().intValue() == ownerUserId.intValue() && ignoreFiOwner) {
						resultUsers.add(theUser);
					}
				}

				if (resultUsers.size() < currentUsers.size()) {
					c.setParticipants(ParticipantUtils.toParticipants(resultUsers));
					getDao().update(c);
				}

				// 拷贝代码
				// boolean isAutoPassByCfgDoWhenNoUsersAtWp =
				// FlowUtils.isAutoPassByCfgDoWhenNoUsersAtWp(fi.getFl());
				//
				// List<User> users =
				// IdNameUtils.toUsers(IdNameUtils.decode(c.getParticipants()));
				// List<User> defineUsers =
				// IdNameUtils.toUsers(IdNameUtils.decode(c.getParticipantsDefine()));
				//
				// //配置了自动跳过，且 users 为空 => 该节点自动跳过
				// if(users.size() == 0 && isAutoPassByCfgDoWhenNoUsersAtWp ){
				// c.setIsAutoAsNoParticipants(FlowConstant.WP_IS_AUTO_PASS_WEHN_NO_PARTICIPANTS_YES);
				// }
				// //重复计算后为空的 => 该节点自动跳过
				// else if(users.size() == 0 && defineUsers.size() > 0){
				// c.setIsAutoAsNoParticipants(FlowConstant.WP_IS_AUTO_PASS_WEHN_NO_PARTICIPANTS_YES);
				// }
				// else{
				// c.setIsAutoAsNoParticipants(FlowConstant.WP_IS_AUTO_PASS_WEHN_NO_PARTICIPANTS_NO);
				// }
			}
		} else {
			// for (int i = 0; i < wps.size(); i++) {
			// Wp c = wps.get(i);
			//
			// //拷贝代码
			// boolean isAutoPassByCfgDoWhenNoUsersAtWp =
			// FlowUtils.isAutoPassByCfgDoWhenNoUsersAtWp(fi.getFl());
			//
			// List<User> users =
			// IdNameUtils.toUsers(IdNameUtils.decode(c.getParticipants()));
			// List<User> defineUsers =
			// IdNameUtils.toUsers(IdNameUtils.decode(c.getParticipantsDefine()));
			//
			// //配置了自动跳过，且 users 为空 => 该节点自动跳过
			// if(users.size() == 0 && isAutoPassByCfgDoWhenNoUsersAtWp ){
			// c.setIsAutoAsNoParticipants(FlowConstant.WP_IS_AUTO_PASS_WEHN_NO_PARTICIPANTS_YES);
			// }
			// //重复计算后为空的 => 该节点自动跳过
			// else if(users.size() == 0 && defineUsers.size() > 0){
			// c.setIsAutoAsNoParticipants(FlowConstant.WP_IS_AUTO_PASS_WEHN_NO_PARTICIPANTS_YES);
			// }
			// else{
			// c.setIsAutoAsNoParticipants(FlowConstant.WP_IS_AUTO_PASS_WEHN_NO_PARTICIPANTS_NO);
			// }
			//
			// }
		}
		// 2.将可阅人员解析并放入到fi.readUsers里
		LinkedList<User> readUsers = participantDAO.getPaticipantUsers(fi.getId(), fi.getFl().getKyList(), null, gvDAO.getGvs(fi.getId()));
		fi.setReadUsers(fiDAO.changeReadUsers(fi.getId(), readUsers));
	}

	/**
	 * <p>
	 * 过期工作
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param wi
	 *            工作
	 */
	public void overdueWi(Wi wi) {

		wiDAO.overdueWi(wi);
	}

	/**
	 * <p>
	 * 转移工作
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param wi
	 *            工作
	 * @param participant
	 *            目标用户
	 */
	public void zhuanyiWi(Wi wi, User participant, String orgiWiType) {

		Wi newWi = new Wi();

		BeanUtils.copyProperties(wi, newWi);

		newWi.setWiType(orgiWiType);
		newWi.setSubWps(null);
		newWi.setWpId(wi.getWpId());
		newWi.setAcId(wi.getAcId());
		newWi.setAiId(wi.getAiId());
		newWi.setFiId(wi.getFiId());
		newWi.setFlId(wi.getFlId());
		newWi.setIsBacked(wi.getIsBacked());
		newWi.setIsEffectFlow(wi.getIsEffectFlow());

		newWi.setStartTime(new Date());
		newWi.setAcceptTime(new Date());
		newWi.setStatus(Wi.STATUS_RUNNING);
		newWi.setCompleteTime(null);
		newWi.setIsBacked(0);
		newWi.setUserNote("");
		newWi.setAssigner(wi.getParticipant());
		newWi.setAssignerLoginName(wi.getParticipantLoginName());
		newWi.setAssignerUserName(wi.getParticipantUserName());
		newWi.setCompleteUserId(null);
		newWi.setCompleteUserLoginName(null);
		newWi.setCompleteUserName(null);
		newWi.setOpCode(null);

		newWi.setIsRead(0);

		newWi.setOverduCode(null);
		newWi.setReadDate(null);
		newWi.setOpWiId(wi.getId());
		newWi.setOpUsers(null);

		newWi.setParticipant(participant.getUserId());
		newWi.setParticipantLoginName(participant.getLoginName());
		newWi.setParticipantUserName(participant.getUserName());

		newWi.setId(null);
		getDao().save(newWi);
		List<Wi> newWiList = new ArrayList<Wi>();
		newWiList.add(newWi);
		doAfterService.doAfterWiStarted(newWiList);
	}

	/**
	 * 
	 * <p>
	 * 收回工作
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param wiId
	 *            工作Id
	 * @param userId
	 *            用户yId
	 * @param userNote
	 *            意见
	 * @param checkIsRead
	 *            是否检查已读性
	 * @return Object[]{能否收回,不能收回原因描述,不能收回时runningWis,收回后新生成的wi}
	 */
	public Object[] withdraw(Long wiId, Long userId, String userNote, boolean checkIsRead) {
		Object[] canWithdrawInfo = canWithdrawWi(wiId, userId, checkIsRead);
		Wi withdrawWi = wiDAO.getWiById(wiId, "fi", "ai", "ac", "wp", "wp.parentWp");
		Set<Ai> withdrawAiAtPath = new HashSet<Ai>();
		boolean canWithdraw = (Boolean) canWithdrawInfo[0];
		List<Wi> runningWis = (List<Wi>) canWithdrawInfo[2];
		if (canWithdraw) {
			if (runningWis.size() > 0) {
				// 后续工作过期掉
				for (Wi wi : runningWis) {
					wiDAO.overdueWi(wi);
					// 和撤回工作是串行关系的
					if (FlowUtils.isChuanxing(withdrawWi.getWp()) && withdrawWi.getWpId().longValue() == wi.getWpId().longValue()) {
						wi.setStatus(WsConstant.STATUS_CREATED);
						getDao().saveOrUpdate(wi);
						// 和撤回工作是串行关系的
					} else if (null != wi.getWp().getParentWpId() && null != wi.getWp().getParentWp() && FlowUtils.isChuanxing(wi.getWp().getParentWp())
							&& wi.getWp().getParentWpId().longValue() == wi.getWp().getParentWpId().longValue()) {
						// 串行的只把要收回到的wp里的wi设置为新建
						if (wi.getWpId().intValue() == withdrawWi.getWpId().intValue()) {
							wi.setStatus(WsConstant.STATUS_CREATED);
							getDao().saveOrUpdate(wi);
						}
					}
					withdrawAiAtPath.add(wi.getAi());
				}
				// 重置1.后续Ai
				for (Ai ai : withdrawAiAtPath) {
					if (ai.getId().intValue() != withdrawWi.getAiId()) {
						ai.setStatus(Ai.STATUS_CREATED);
						ai.setRe(null);
						aiService.resetPxOfAi(ai);
					}
				}
			}
			// 重置2。本环节状态
			if (withdrawWi.getAi().getStatus() != Ai.STATUS_RUNNING) {
				Ai currentAi = withdrawWi.getAi();
				currentAi.setStatus(Ai.STATUS_RUNNING);
				getDao().update(currentAi);
			}
			// 重置3.本环节的px指向
			// 不是子wp的（不是协办、沟通的）才需要指定到对应wp
			if (null != withdrawWi.getWp().getPwiId() && withdrawWi.getWp().getPwiId().intValue() > 0) {
				// 不做处理
				// 子wp模式
			} else if (null != withdrawWi.getWp().getParentWpId() && withdrawWi.getWp().getParentWpId().intValue() > 0) {
				Wp parentWp = withdrawWi.getWp().getParentWp();
				parentWp.setCurrentSubPx(withdrawWi.getWp().getSubPx());
				getDao().update(parentWp);
				// ai下面的直接wp
			} else {
				aiService.pointToWp(withdrawWi.getWp());
			}
			// 协办
			if (StringUtils.isNotBlank(withdrawWi.getOpCode()) && withdrawWi.getOpCode().startsWith(OpType.XB)) {
				withdrawWi.setWiType(WsConstant.WiType.ZC.getCode());
			}
			withdrawWi.setUserNote(userNote);
			wiDAO.resetWi(withdrawWi);
			alService.logWithDraw(withdrawWi);
		}
		canWithdrawInfo = new Object[] { canWithdrawInfo[0], canWithdrawInfo[1], canWithdrawInfo[2], withdrawWi.getId() };
		return canWithdrawInfo;
	}

	/**
	 * 
	 * <p>
	 * 判断某个工作能否被收回
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param wiId
	 *            当前待办
	 * @param userId
	 *            当前用户
	 * @param checkIsRead
	 *            是否检查已读
	 * @return 数组i{是否可收回,提示信息,需要失效掉的工作集合}
	 */
	public Object[] canWithdrawWi(Long wiId, Long userId, boolean checkIsRead) {
		Wi wi = wiDAO.getWiById(wiId, "wp");
		if (wi.getParticipant().intValue() != userId.intValue()) {
			return new Object[] { false, "该待办拥有者是" + wi.getParticipantUserName() + ",您无权处理该待办！", null };
		}
		if (wi.getStatus() == Wi.STATUS_RUNNING) {
			return new Object[] { false, "该待办正在进行中,不需要撤回！", null };
		}
		// 转发的工作不能收回
		if (WiType.ZF.getCode().equals(wi.getWiType())) {
			return new Object[] { false, "转发的工作,不能撤回！", null };
		}
		List<Wi> wiList = new ArrayList<Wi>();
		// 是否存在子的wp（协办，沟通等）
		if (null != wi && null != wi.getWp() && null != wi.getSubWps() && wi.getSubWps().size() > 0) {
			for (Wp subWp : wi.getSubWps()) {
				if (null != subWp.getWis()) {
					wiList.addAll(subWp.getWis());
				}
			}
			// 转办
		} else if (null != wi && Wi.STATUS_COMPLETE == wi.getStatus() && StringUtils.isNotBlank(wi.getOpCode()) && wi.getOpCode().startsWith(OpType.ZB + ";")) {
			wiList.addAll(this.getRunningZbWis(wi.getId()));
		} else {
			// 串行的要看是不是下步工作的情况
			if (FlowUtils.isChuanxing(wi.getWp())) {
				List<Wi> cxWiList = getDao().findByHQL(Wi.class,
						" from Wi where wpId = ? and px > ?" + " and (status = ? or status = ? or status = ?) and (wiCode is null or wiCode != ?) ",
						wi.getWpId(), wi.getPx(), WsConstant.STATUS_CREATED, WsConstant.STATUS_RUNNING, WsConstant.STATUS_COMPLETE,
						WsConstant.WI_CODE_AUTO_AS_REPEAT);
				if (null != cxWiList && cxWiList.size() > 0) {
					wiList.addAll(cxWiList);
				}
				// 当前节点是串行的
			}
			if (null != wi.getWp().getParentWpId() && null != wi.getWp().getParentWp() && FlowUtils.isChuanxing(wi.getWp().getParentWp())) {
				Wp nextWp = getDao().findFirst(Wp.class, " parentWpId = ? and participants is not null and subPx > ? ",
						new Object[] { wi.getWp().getParentWpId(), wi.getWp().getSubPx() });
				if (null != nextWp && nextWp.getWis().size() > 0) {
					wiList.addAll(CollectionUtils.set2list(nextWp.getWis()));
				}
			}
		}
		if (null != wiList && wiList.size() > 0) {
			return this.dealWiList(wiList, checkIsRead);
			// 并行的看下一个节点的情况
		} else {
			return canWithdrawWi(wi, userId, checkIsRead);
		}
	}

	/**
	 * 是否可以撤回
	 * 
	 * @author jun
	 * @param wi
	 *            撤回的任务
	 * @param userId
	 *            操作人
	 * @param checkIsRead
	 *            是否要包括已查阅的
	 * @return 否可以撤回
	 */
	private Object[] canWithdrawWi(Wi wi, Long userId, boolean checkIsRead) {
		List<Tr> nextATrs = trDAO.getListByTrIds(wi.getAc().getFlowCode(), wi.getAc().getFlowVersion(), wi.getAc().getNext_tr_a());
		List<Ac> nenxtAAcs = acDAO.getNextAList(wi.getAc());
		Gvs gvs = gvDAO.getGvs(wi.getFiId());
		List<Ai> next1AiList = aiDAO.getNext1ListDeepSearchAutoAi(wi.getAi(), nenxtAAcs, nextATrs, gvs, Wi.STATUS_RUNNING, Wi.STATUS_COMPLETE);
		// 检查后续Ai
		List<Ai> completedList = new ArrayList<Ai>();
		List<Ai> runningList = new ArrayList<Ai>();
		for (Ai ai : next1AiList) {
			if (ai.getStatus() == Wi.STATUS_COMPLETE) {
				completedList.add(ai);
			}
			if (ai.getStatus() == Wi.STATUS_RUNNING) {
				runningList.add(ai);
			}
		}
		if (completedList.size() > 0) {
			return new Object[] { false, "后续活动已经完成,不能撤回！", null };
		}
		// 检查后续Wp
		List<Wp> completedWps = new ArrayList<Wp>();
		List<Wp> runningWps = new ArrayList<Wp>();
		if (runningList.size() > 0) {
			List<Wp> wps = getDao().findAll(Wp.class, "isDeleted = 0 and aiId in (" + CollectionUtils.collectAsString(runningList, "id", ",") + ")");
			for (Wp wp : wps) {
				int wpStatus = FlowUtils.getWpStatus(wp);
				if (wpStatus == Ai.STATUS_COMPLETE) {
					completedWps.add(wp);
				}
				if (wpStatus == Ai.STATUS_RUNNING) {
					runningWps.add(wp);
				}
			}
			if (completedWps.size() > 0) {
				return new Object[] { false, "后续工作组已经完成,不能撤回！", null };
			}
		}
		List<Wi> wiList = null;
		if (runningWps.size() > 0) {
			wiList = getDao().findAll(
					Wi.class,
					"(wiCode is null or wiCode != ?) and (status = ? or status = ?)" + " and aiId in ("
							+ CollectionUtils.collectAsString(runningWps, "aiId", ",") + ")",
					new Object[] { WsConstant.WI_CODE_AUTO_AS_REPEAT, Wi.STATUS_RUNNING, Wi.STATUS_COMPLETE }, new String[] { "ac", "ai", "fi" });
		}
		return this.dealWiList(wiList, checkIsRead);
	}

	/**
	 * 处理是否可以撤回
	 * 
	 * @author jun
	 * @param wiList
	 *            wiList
	 * @param checkIsRead
	 *            是否检测已阅
	 * @return 是否可以撤回
	 */
	private Object[] dealWiList(List<Wi> wiList, boolean checkIsRead) {
		if (null == wiList) {
			wiList = new ArrayList<Wi>();
		}
		List<Wi> completedWis = new ArrayList<Wi>();
		List<Wi> runningWis = new ArrayList<Wi>();
		List<Wi> runningReadWis = new ArrayList<Wi>();
		List<Wi> runningBackedWis = new ArrayList<Wi>();
		for (Wi theWi : wiList) {
			if (theWi.getStatus() == Wi.STATUS_COMPLETE) {
				// 协办的情况
				if (null != theWi.getWp() && null != theWi.getWp().getPwiId()) {
					runningWis.addAll(this.getRunningSubWis(theWi.getWp().getPwiId()));
				} else if (StringUtils.isNotBlank(theWi.getOpCode()) && theWi.getOpCode().startsWith(OpType.ZB + ";")) {
					runningWis.addAll(this.getRunningZbWis(theWi.getId()));
				} else {
					completedWis.add(theWi);
				}
			} else if (theWi.getStatus() == Wi.STATUS_RUNNING) {
				runningWis.add(theWi);
				if (theWi.getIsRead() == 1) {
					runningReadWis.add(theWi);
				}
				if (theWi.getIsBacked().intValue() == 1) {
					runningBackedWis.add(theWi);
				}
			}
		}
		// 检查工作完成
		if (completedWis.size() > 0) {
			return new Object[] { false, "后续工作已经完成,不能撤回！", null };
		}
		// 检查已读
		if (checkIsRead && runningReadWis.size() > 0) {
			return new Object[] { false, "后续工作正在进行中,不能撤回！", null };
		}
		// 检查后续运行工作退回标记
		if (runningBackedWis.size() > 0) {
			return new Object[] { false, "后续环节被退回,不能撤回！", null };
		}
		return new Object[] { true, "OK", runningWis };
	}

	/**
	 * 是否可以撤回流程
	 * 
	 * @param fiId
	 *            流程id
	 * @param userId
	 *            操作人id
	 * @return 是否可以撤回流程
	 */
	public Object[] fiCanWithdraw(Long fiId, Long userId) {
		List<Wi> runningWis = getDao().findAll(Wi.class, "(wiCode is null or wiCode != ?) and (status = ?) and fiId = ?",
				new Object[] { WsConstant.WI_CODE_AUTO_AS_REPEAT, Wi.STATUS_RUNNING, fiId }, new String[] { "ac", "ai", "fi" });

		boolean canWithDraw = true;

		List<String> ogIds = new ArrayList<String>();

		String erroMsg = "OK";
		for (Wi _wi : runningWis) {

			if (_wi.getAc().getIsStart() == 1 && _wi.getWp().getIsAi().intValue() == 1) {
				continue;
			}

			Integer Cfg_CanWithDrawAc = _wi.getAc().getCanWithdraw();

			// 只要有一个，不可撤回，则不可撤回
			if (Cfg_CanWithDrawAc != null && Cfg_CanWithDrawAc.intValue() == 0) {
				canWithDraw = false;
				erroMsg = "当前运行的节点：" + _wi.getAc().getNodeName() + "，不允许撤回。";
				break;
			}

			if (Cfg_CanWithDrawAc != null && Cfg_CanWithDrawAc.intValue() == 3) {
				String OpGroups = _wi.getAc().getOpGroups();
				if (StringUtils.isNotEmpty(OpGroups)) {
					ogIds.add(OpGroups);
				}
			}
		}
		// 默认值中，只要有一个不可撤回，则不可撤回
		if (canWithDraw && ogIds.size() > 0) {
			List<OpGroup> ogs = getDao().findAll(OpGroup.class, "id in(" + StringHelper.join(ogIds, ",") + ")");
			for (OpGroup _og : ogs) {
				Integer Cfg_CanWithDrawOg = _og.getCanWithdraw();
				// 只要有一个，不可撤回，则不可撤回
				if (Cfg_CanWithDrawOg == null || Cfg_CanWithDrawOg.intValue() == 0) {
					canWithDraw = false;
					erroMsg = "当前运行的" + _og.getName() + "类型节点，不允许撤回。";
					break;
				}
			}
		}

		return new Object[] { canWithDraw, erroMsg, runningWis };
	}

	/**
	 * 处理子wp
	 * 
	 * @author jun
	 * @param ai
	 *            节点实例
	 * @param subPx
	 *            子wp的位置
	 * @param parent
	 *            父wp
	 * @param fi
	 *            流程实例
	 * @param onePaticipantString
	 *            参与者
	 * @param transientVar
	 *            map
	 * @param gvs
	 *            gvMap
	 * @param subFinishCtrl
	 *            子节点结束方式
	 * @param reBuildParticipant
	 *            是否重算参与人
	 * @return 返回子wp和对应的人员
	 */
	public Object[] dealSubWp(Ai ai, int subPx, Wp parent, Fi fi, String onePaticipantString, Map<String, Object> transientVar, Gvs gvs, String subFinishCtrl,
			boolean reBuildParticipant) {
		return this.dealSubWp(ai, subPx, parent, fi, onePaticipantString, transientVar, gvs, subFinishCtrl, reBuildParticipant, "");
	}

	/**
	 * 处理子wp
	 * 
	 * @author jun
	 * @param ai
	 *            节点实例
	 * @param subPx
	 *            子wp的位置
	 * @param parent
	 *            父wp
	 * @param fi
	 *            流程实例
	 * @param onePaticipantString
	 *            参与者
	 * @param transientVar
	 *            map
	 * @param gvs
	 *            gvMap
	 * @param subFinishCtrl
	 *            子节点结束方式
	 * @param reBuildParticipant
	 *            是否重算参与人
	 * @return 返回子wp和对应的人员
	 */
	public Object[] dealSubWp(Ai ai, int subPx, Wp parent, Fi fi, String onePaticipantString, Map<String, Object> transientVar, Gvs gvs, String subFinishCtrl,
			boolean reBuildParticipant, String rolePath) {
		// User_12:总裁;
		// Pbiz_流程启动人;
		// Role_标准角色;
		// Part_岗位;
		// 职级[董事长、总裁、副总裁&总裁助理、总经理、副总经理、总监、经理]
		// 相对角色[发起人部门领导、发起人上级部门领导、上节点处理人部门领导、上节点处理人部门上级领导]
		// Gnrl_通用角色;
		List<User> users = participantDAO.getPaticipantUsers(fi.getId(), onePaticipantString, transientVar, gvs);
		
		//判断是否外部审批人是空如果是空的则不更新wp 开始 
		 boolean flag=true;
		 List<IdName> list = IdNameUtils.decode(onePaticipantString);
		 for (IdName idName : list) {
			 if (idName.getPrefix().startsWith(IdName.OBJF_PREFIX)) {
	            	List<User> objusers = orgnAPIService.getUsersByObjf(idName.getId(), fi.getId());
	            	if (objusers!=null&&users.size() > 0) {
	                   if(objusers.get(0)==null){
	                	   flag=false;
	                   }
	                }else{
	                	flag=false;
	                }
	            	
	            }
		 }
		 if(flag==false&&notShowObjfFlowCode!=null&&notShowObjfFlowCode.contains(ai.getFl().getFlowCode())){
			 return null;
		 }else{
		 //判断是否外部审批人是空如果是空的则不更新wp结束
		
				String userAsString = IdNameUtils.encode(IdNameUtils.toIdNameList(users));  //解析人员
				Fl fl = fi.getFl();
				if (null == fl) {
					fl = getDao().getById(Fl.class, fi.getFlId());
				}
				Wp sub = wpDAO.saveOrUpdateByAi(ai, subPx, userAsString, subFinishCtrl, ai.getDisplayName(), parent.getId(), reBuildParticipant);
				sub.setOriginDefine(onePaticipantString);
				sub.setTp(parent.getTp());
				sub.setPx(parent.getPx());
				sub.setSubPx(subPx);
				sub.setParentWpId(parent.getId());
				sub.setParentWp(parent);
				sub.setIgnoreFiOwner(parent.getIgnoreFiOwner());
		
				if (StringUtils.isBlank(rolePath)) {
					// 流程启动人
					if (onePaticipantString.startsWith(IdName.PBIZ_PREFIX)) {
						BizParticipant bp = getDao().getById(BizParticipant.class, IdNameUtils.decode(onePaticipantString).get(0).getId());
						// 发起流程时，传入了 startRoleId
						if ("LCQDR".equals(bp.getCode()) && fi.getStartRoleId() != null) {
							rolePath = orgnAPIService.getPostPath(fi.getStartRoleId());
						} else {
							rolePath = bp.getName();
						}
						// 外部参与人
					} else if (users.size() > 0 && onePaticipantString.startsWith(IdName.OBJF_PREFIX)) {
						rolePath = orgnAPIService.getRolePathDisplay(users.get(0).getRoleName(), false);
						// 标准角色: 解析出人
					} else if (users.size() > 1 && onePaticipantString.startsWith(IdName.ROLE_PREFIX)) {
						rolePath = orgnAPIService.getRolePathDisplay(users.get(0).getRoleName(), true);
						// 标准角色: 不解析出人 ,可以从orgnId再次尝试寻找路径图
					} else if (users.size() == 0 && onePaticipantString.startsWith(IdName.ROLE_PREFIX) && fi.getStartRoleId() != null) {
						//获取发起人对应岗位
						Long queryRoot = orgnAPIService.getQueryRootByPost(IdNameUtils.decode(onePaticipantString).get(0).getId(), fi.getStartRoleId(),null);
						if (queryRoot != null) {
							rolePath = orgnAPIService.getPostPathByRoleAndRoot(IdNameUtils.decode(onePaticipantString).get(0).getId(), queryRoot);
						}
						if (StringUtils.isEmpty(rolePath)) {
							rolePath = IdNameUtils.decode(onePaticipantString).get(0).getName();
						}
						// 只找到一个人，并且该人包含rolePath信息并且是人
					} else if (users.size() == 1 && StringUtils.isNotEmpty(users.get(0).getRoleName()) && onePaticipantString.startsWith(IdName.USER_PREFIX)) {
						rolePath = orgnAPIService.getRolePathDisplay(users.get(0).getRoleName(), false);
						// 只找到一个人，并且该人包含rolePath信息
					} else if (users.size() == 1 && StringUtils.isNotEmpty(users.get(0).getRoleName())) {
						rolePath = orgnAPIService.getRolePathDisplay(users.get(0).getRoleName(), true);
						// 组织机构，找不出人，则直接找出该part的路径图
					} else if (users.size() == 0 && onePaticipantString.startsWith(IdName.PART_PREFIX)) {
						rolePath = orgnAPIService.getEntityPath(IdNameUtils.decode(onePaticipantString).get(0).getId());
						// 相对参与人
					} else if (users.size() > 0 && onePaticipantString.startsWith(IdName.XDPA_PREFIX)) {
						rolePath = orgnAPIService.getRolePathDisplay(users.get(0).getRoleName(), true);
						// 不是前面几种情况，找到人数 > 1，取配置名称
					} else if (users.size() > 1) {
						rolePath = IdNameUtils.decode(onePaticipantString).get(0).getName();
					} else {
						rolePath = IdNameUtils.decode(onePaticipantString).get(0).getName();
					}
				}
				sub.setDisplayName(parent.getDisplayName());
				sub.setRolePath(rolePath);
				sub.setUsersPrefix(UserPrefixUtils.ecode(users, ""));
				getDao().update(sub);
				return new Object[] { sub, userAsString };
		 }
	}

	/**
	 * 传阅
	 * 
	 * @author jun
	 * @param opWiId
	 *            操作wi
	 * @param paticipantString
	 *            需要传阅的人
	 */
	public void chuanYue(Long opWiId, String paticipantString) {
		if (StringUtils.isNotBlank(paticipantString)) {
			Wi opWi = wiDAO.getWiById(opWiId, "wp");
			LinkedList<User> cyUsers = participantDAO.getPaticipantUsers(opWi.getFiId(), paticipantString, null, gvDAO.getGvs(opWi.getFiId()));
			this.dealAssignWi(opWi, cyUsers, WsConstant.WiType.CY.getCode(), null);
			List<String> cyUsersNameList = CollectionUtils.collectAsList(cyUsers, "userName");
			alService.logChuanYue(opWi, opWi.getWp(), cyUsersNameList);
		}
	}

	/**
	 * 催办
	 * 
	 * @author jun
	 * @param opWi
	 *            操作wi
	 * @param runningWiList
	 *            需要催办的任务
	 */
	public void cuiBan(Wi opWi, List<Wi> runningWiList) {
		if (null != runningWiList && runningWiList.size() > 0) {
			this.dealCuiBanAssignWi(opWi, runningWiList);
			List<String> cbUsersNameList = CollectionUtils.collectAsList(runningWiList, "participantUserName");
			alService.logCuiBan(opWi, opWi.getWp(), cbUsersNameList);
		}
	}

	/**
	 * assignWi
	 * 
	 * @author jun
	 * @param opWi
	 *            操作wi
	 * @param runningWiList
	 *            需要催办的wi
	 */
	private void dealCuiBanAssignWi(Wi opWi, List<Wi> runningWiList) {
		List<User> runningUser = null;
		for (Wi wi : runningWiList) {
			runningUser = new ArrayList<User>();
			runningUser.add(new User(wi.getParticipant(), wi.getParticipantLoginName(), wi.getParticipantUserName()));
			this.dealAssignWi(opWi, runningUser, WsConstant.WiType.CB.getCode(), wi.getId());
		}
	}

	/**
	 * 催办
	 */
	public void dealCuiBanUsersAssignWis(Wi opWi, Long cuiBanWiId, List<User> cuiBanUsers) {
		if (null != opWi && null != cuiBanUsers) {
			this.dealAssignWi(opWi, cuiBanUsers, WsConstant.WiType.CB.getCode(), cuiBanWiId);
		}
	}

	/**
	 * 是否存在正在运行的协办
	 * 
	 * @author jun
	 * @param wiId
	 *            任务id
	 * @return 是否存在正在运行的协办
	 */
	public List<Wi> getRunningSubWis(Long wiId) {
		/*
		 * String runningSubWiIdsSql =
		 * "select tw.id as twId from tf_wi tw inner join tf_wp twp on tw.wp_id = twp.id"
		 * + " where tw.status = '" + WsConstant.STATUS_RUNNING +
		 * "' start with twp.pwi_id = " + wiId +
		 * " connect by prior twp.id = twp.pwp_id"; DetachedCriteria dc =
		 * DetachedCriteria.forClass(Wi.class);
		 * dc.add(Restrictions.sqlRestriction(" exists(select 'y' from (" +
		 * runningSubWiIdsSql + ") twIds where twIds.twId = {alias}.id) "));
		 * dc.addOrder(Order.desc("id")); return getDao().findByCriteria(dc);
		 */
		List<Wi> allWiList = new ArrayList<Wi>();
		List<Wi> wiList = getDao().findByHQL(Wi.class, " from Wi where pwiId = ? ", wiId);
		if (null != wiList && wiList.size() > 0) {
			for (Wi wi : wiList) {
				allWiList.add(wi);
				allWiList.addAll(this.getRunningSubWis(wi.getId()));
			}
		}
		return allWiList;
	}

	/**
	 * 获取转办的wis
	 * 
	 * @author jun
	 * @param wiId
	 *            任务id
	 * @return 转办的wis
	 */
	public List<Wi> getRunningZbWis(Long wiId) {
		List<Wi> allWiList = new ArrayList<Wi>();
		List<Wi> wiList = getDao().findByHQL(Wi.class, " from Wi where opWiId = ? ", wiId);
		if (null != wiList && wiList.size() > 0) {
			for (Wi wi : wiList) {
				allWiList.add(wi);
				allWiList.addAll(this.getRunningZbWis(wi.getId()));
			}
		}
		return allWiList;
	}

	/**
	 * assignWi
	 * 
	 * @author jun
	 * @param opWi
	 *            操作wi
	 * @param toUsers
	 *            需要催办的人
	 * @param assignWiType
	 *            assignWiType
	 * @param assignWiId
	 *            assignWiId
	 */
	private void dealAssignWi(Wi opWi, List<User> toUsers, String assignWiType, Long assignWiId) {
		AssignWi assignWi = new AssignWi();
		// 基本属性
		assignWi.setStatus(Wi.STATUS_RUNNING);
		assignWi.setWiType(assignWiType);
		assignWi.setWiCode(null);
		assignWi.setWiName(null);
		assignWi.setParticipants(toUsers);
		// 完成工作属性
		assignWi.setOpCode(null);
		assignWi.setOpUserId(null);
		assignWi.setOpUsers(null);
		assignWi.setUserNote(null);
		assignWi.setOpWiId(assignWiId);
		this.assignWi(opWi.getWp(), assignWi, getDao().findIntBySQL("select "+DbType.getType()+"ifnull(max(px),1) from tf_wi where wp_id = ?", opWi.getWpId()));
	}

	/**
	 * 是否可以提交（判断是否存在需要修改参与人的节点没有修改参与人）
	 * 
	 * @author jun
	 * @param wiId
	 *            任务id
	 * @return 是否可以提交
	 */
	public boolean canSubmit(Long wiId) {
		boolean canSubmit = true;
		Wi wi = wiDAO.getWiById(wiId);
		String participantsMustSelectAt = getDao().findString("select participantsMustSelectAt from Ac where id = ? ", wi.getAcId());
		if (StringUtils.isNotBlank(participantsMustSelectAt)) {
			canSubmit = !getDao().isExist(
					Wp.class,
					" fiId = ? and ai.ac.nodeId in (" + participantsMustSelectAt + ")" + " and participantsDefine is null and participants is null"
							+ " and subMode <> ? and originDefine like ?", wi.getFiId(), 1, "%" + IdName.XDPA_PREFIX + "4:%");
			if (canSubmit) {
				String sql = "select count(tai.id) from tf_ai tai inner join tf_ac ta on tai.ac_id = ta.id" + " where tai.fi_id = ? and ta.node_id in ("
						+ participantsMustSelectAt + ")" + " and not exists(select 'y' from tf_wp tw where tw.ai_id = tai.id"
						+ "     and (tw.sub_mode is null or tw.sub_mode <> ?)"
						+ "     and (length(tw.participants_define) > 0 or length(tw.participants) > 0))";
				canSubmit = 1 > getDao().findIntBySQL(sql, wi.getFiId(), 1);
			}
		}
		return canSubmit;
	}

	/**
	 * 将当前节点置为过期
	 * 
	 * @author jun
	 * @param ai
	 */
	public void overdueAi(Ai ai) {
		// Ai更新
		ai.setStatus(Ai.STATUS_OVERDUE);
		ai.setRe(new Date());
		getDao().update(ai);
		// 生成Log
		aiDAO.log(ai, Hai.LOG_CODE_OVERDUE);
		doAfterService.doAfterAiOverdue(ai);
	}

	/**
	 * 跳转到指定的节点
	 * 
	 * @author jun
	 * @param wpId
	 *            工作组id
	 * @param userId
	 *            操作者id
	 * @param curwiId
	 *            当前的任务id
	 * @param curWpId
	 *            当前的工作组id
	 * @return 是否跳转成功
	 */
	public boolean gotoWp(Long wpId, Long userId, Long curwiId, Long curWpId) {
		boolean gotoWpResult = true;
		Ai ai = getDao().findFirstByHQL(Ai.class, "select w.ai from Wp w where w.id = ?", wpId);
		if (null != ai) {
			// 将目标节点前刚创建和正在运行的ai过期掉
			List<Ai> runningAiList = aiDAO.getAiList(ai.getFiId(), ai.getAc().getTp(), new Integer[] { WsConstant.STATUS_CREATED, WsConstant.STATUS_RUNNING });
			if (null != runningAiList) {
				for (Ai runningAi : runningAiList) {
					// 过期所有当前正在运行的Ai的wi
					wiDAO.overdueAllWiByAi(runningAi.getId());
					// 如果存在已完成的wi旧件ai设为已完成，否则时置为过期
					if (getDao().isExist(Wi.class, " aiId = ? and status = ? ", runningAi.getId(), WsConstant.STATUS_COMPLETE)) {
						// 结束Ai
						this.completeAi(runningAi, false, new Gvs(), new HashMap<String, Object>());
					} else {
						// 结束Ai
						this.overdueAi(runningAi);
					}
				}
			}
			// 跳转到需要跳转的ai
			Gvs gvs = gvDAO.getGvs(ai.getFiId());
			Map<String, Object> tvs = new HashMap<String, Object>();
			tvs.put(IConstantVar.TVS_AI, ai);
			this.force_start(ai, gvs, tvs, false);
		} else {
			gotoWpResult = false;
		}
		return gotoWpResult;
	}

	/**
	 * 替换工作参与人
	 * 
	 * @author jun
	 * @param ids
	 *            工作ids
	 * @param userId
	 *            需要替换为的userId
	 * @param opUserId
	 *            当前的任务id
	 */
	public void changeWisUser(Long[] ids, Long userId, String fixName, Long opUserId) {
		if (null != ids && ids.length > 0 && null != userId && null != opUserId) {
			User user = orgnAPIService.getUserByUserId(userId);
			List<Wi> wis = getDao().findAll(Wi.class,
					" id in(" + StringHelper.join(ids, ",") + ")" + " and status in (" + WsConstant.STATUS_CREATED + "," + WsConstant.STATUS_RUNNING + ")",
					new Object[] {}, new String[] { "ai", "fi" });
			if (null != wis && wis.size() > 0) {
				for (Wi wi : wis) {
					// 过期当前的wi
					this.overdueWi(wi);
					// 替换参与人
					wi.setParticipant(user.getUserId());
					wi.setParticipantLoginName(user.getLoginName());
					wi.setParticipantUserName(user.getUserName());
					// 重新发布替换完参与人的任务
					wiDAO.resetWi(wi);

					// wi.getWp().setRolePath(fixName);
					// wpDAO.getDao().update(wi.getWp());
				}
			}
		}
	}

	/**
	 * 组装流程名称、编码map
	 * 
	 * @param flowCode
	 * @param bizId
	 * @return
	 */
	public Map<String, String> fixFiNameOrCodeMap(Fi fi, Map<String, Object> gvMap) {
		Map<String, String> map = new HashMap<String, String>();
		map.put("fiName", this.fixFiName(fi, gvMap));
		map.put("fiCode", this.fixFiCode(fi, gvMap));
		map.put("fiCodeNum", this.fixFiCodeNum(fi));
		return map;
	}

	/**
	 * 组装流程名称
	 * 
	 * @param fi
	 * @return
	 */
	public String fixFiName(Fi fi, Map<String, Object> gvMap) {
		String fixFiName = "";
		if (null != fi && null != fi.getFl()) {
			if (StringUtils.isNotBlank(fi.getFl().getTitleType())) {
				String titleType = fi.getFl().getTitleType().trim();
				titleType = this.fixCond(titleType, gvMap);
				if (titleType.contains("@title@")) {
					titleType = titleType.replace("@title@", StringUtils.isNotBlank(fi.getFl().getFlowName()) ? fi.getFl().getFlowName().trim() : "");
				}
				if (titleType.contains("@user@")) {
					titleType = titleType.replace("@user@", StringUtils.isNotBlank(fi.getStartUserName()) ? fi.getStartUserName().trim() : "");
				}
				fixFiName = titleType;
			}
		}
		return fixFiName;
	}

	/**
	 * 组装流程编号
	 * 
	 * @param fi
	 * @return
	 */
	public String fixFiCode(Fi fi, Map<String, Object> gvMap) {
		String fiCode = "";
		if (null != fi && null != fi.getFl()) {
			if (StringUtils.isNotBlank(fi.getFl().getCodePrefix())) {
				String codePrefix = fi.getFl().getCodePrefix().trim();
				codePrefix = this.fixCond(codePrefix, gvMap);
				if (codePrefix.contains("@公司编号@")) {
					codePrefix = codePrefix.replace("@公司编号@", null != fi.getCompany() && StringUtils.isNotBlank(fi.getCompany().getCode()) ? fi.getCompany()
							.getCode() : "");
				}
				if (codePrefix.contains("@年度@")) {
					codePrefix = codePrefix.replace("@年度@", DateUtils.getYear() + "");
				}
				if (codePrefix.contains("@月份@")) {
					codePrefix = codePrefix.replace("@月份@", (DateUtils.getMonth() > 9 ? DateUtils.getMonth() : "0" + DateUtils.getMonth()) + "");
				}
				fiCode += codePrefix;
			}
		}
		return fiCode;
	}

	/**
	 * 替换表达式里的gvs相关信息
	 * 
	 * @param cond
	 * @param gvs
	 * @return
	 */
	public String fixCond(String cond, Map<String, Object> gvMap) {
		if (StringUtils.isNotBlank(cond) && null != gvMap && gvMap.size() > 0) {
			for (Entry<String, Object> entry : gvMap.entrySet()) {
				try {
					cond = cond.replace("@" + entry.getKey() + "@", String.valueOf(entry.getValue()));
				} catch (Exception e) {

				}
			}
		}
		return cond;
	}

	/**
	 * 组装流程编号-流水号
	 * 
	 * @param fi
	 * @return
	 */
	public String fixFiCodeNum(Fi fi) {
		String fiCodeNum = "";
		if (null != fi && null != fi.getFl()) {
			if (StringUtils.isNotBlank(fi.getFl().getCodeTypeCode())) {
				BaseAPI baseAPIService = (BaseAPI) App.getBean(BaseAPI.class, ApiConstant.BEAN_CODE);
				String bizCode = baseAPIService.getNextBizCode(fi.getFl().getCodeTypeCode().trim()).getResult();
				fiCodeNum += StringUtils.isNotBlank(bizCode) ? bizCode : "";
			}
		}
		return fiCodeNum;
	}

	/**
	 * 
	 * 流程配置
	 * @param fiId
	 * @param wiId
	 */
	public void updateFiHistoryUserIds(Long fiId, Long wiId) {
		try {
			List<Object> objList = new ArrayList<Object>();
			StringBuffer stringBuffer =new StringBuffer();
			Fi fi = null;
			if (null != fiId) {
				fi=getDao().getById(Fi.class,fiId);
			}
			if (null != wiId) {
				List<Long> id = getDao().findByHQL(Long.class, "select wt.fi_id from tf_wi wt where wt.id =?", new Object[] { wiId});
				fi=getDao().getById(Fi.class,id.get(0));
			}
			if(fi!=null){
				String sql1="select distinct w.participant from tf_wi w where "+DbType.getType()+"find_in_set(w.fi_id,"+DbType.getType()+"concat("+DbType.getType()+"concat("+DbType.getType()+"ifnull(?,''),','),?)) > 0 and w.status in(0,1,2) ";
			    List<String> strList = App.getBean(JdbcTemplate.class).queryForList(sql1, new Object[]{fi.getRelatedFiIds() ,fi.getId()}, String.class);
//				List<String> strList = getDao().findByHQL(String.class, "select distinct w.participant from tf_wi w where find_in_set(w.fi_id,"+DbType.getType()+"concat("+DbType.getType()+"ifnull(?,''),',',?)) > 0 and w.status in(0,1,2) order by w.fi_id asc,w.ai_id asc,w.wp_id asc,w.id asc", new Object[] {fi.getRelatedFiIds() ,fi.getId()});
				if(!strList.isEmpty()){
					 for (String string : strList) {
						 stringBuffer.append(string+",");
					}
				}
				if(!StringUtils.isEmpty(stringBuffer)){
					stringBuffer=stringBuffer.deleteCharAt(stringBuffer.length()-1);
				}
				String sql = "update tf_fi  set history_wi_user_ids ='"+stringBuffer+"' where 1= 1";
				getDao().executeSQL(sql, objList.toArray());
			}
		} catch (Exception e) {
			System.out.println("fiId=" + fiId + "\r\n");
			e.printStackTrace();
		}
	}

	/**
	 * 是否可以使用流程模板
	 * 
	 * @param flowCode
	 *            流程模板编码
	 * @param userId
	 *            用户id
	 * @return
	 */
	public boolean canUseFlow(String flowCode, Long userId) {
		boolean canUseFlow = false;
		if (StringUtils.isNotBlank(flowCode) && null != userId) {
			Fl fl = flDAO.getFl(flowCode);
			if (null != fl && StringUtils.isNotBlank(fl.getFqList())) {
				List<Long> userIdList = CollectionUtils.collectAsList(participantDAO.getPaticipantUsers(fl.getFqList()), "userId");
				canUseFlow = userIdList.contains(userId);
			}
		}
		return canUseFlow;
	}

}
