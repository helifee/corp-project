package com.xinleju.erp.quartz.model;

// Generated 2013-4-17 11:29:38 by Hibernate Tools 4.0.0

import java.sql.Blob;
import java.util.HashMap;
import java.util.Map;

import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinColumns;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

/**
 * Triggers generated by hbm2java
 */
@Entity
@Table(name = "QRTZ_TRIGGERS")
public class Triggers implements java.io.Serializable {
	
	public static final String STATUS_WAITING = "WAITING";
	public static final String STATUS_PAUSED = "PAUSED";
	public static final String STATUS_ACQUIRED = "ACQUIRED";
	public static final String STATUS_BLOCKED = "BLOCKED";
	public static final String STATUS_ERROR = "ERROR";
	
	private static final long serialVersionUID = 3932869078065528655L;
	private TriggersId id;
	private JobDetails jobDetails;
	private String description;
	private Long nextFireTime;
	private Long prevFireTime;
	private Long priority;
	private String triggerState;
	private String triggerType;
	private long startTime;
	private Long endTime;
	private String calendarName;
	private Byte misfireInstr;
	private Blob jobData;
	private SimpropTriggers simpropTriggers;
	private CronTriggers cronTriggers;
	private SimpleTriggers simpleTriggers;
	private BlobTriggers blobTriggers;

	public Triggers() {
	}

	public Triggers(TriggersId id, JobDetails jobDetails, String triggerState,
			String triggerType, long startTime) {
		this.id = id;
		this.jobDetails = jobDetails;
		this.triggerState = triggerState;
		this.triggerType = triggerType;
		this.startTime = startTime;
	}

	public Triggers(TriggersId id, JobDetails jobDetails, String description,
			Long nextFireTime, Long prevFireTime, Long priority,
			String triggerState, String triggerType, long startTime,
			Long endTime, String calendarName, Byte misfireInstr, Blob jobData,
			SimpropTriggers simpropTriggers, CronTriggers cronTriggers,
			SimpleTriggers simpleTriggers, BlobTriggers blobTriggers) {
		this.id = id;
		this.jobDetails = jobDetails;
		this.description = description;
		this.nextFireTime = nextFireTime;
		this.prevFireTime = prevFireTime;
		this.priority = priority;
		this.triggerState = triggerState;
		this.triggerType = triggerType;
		this.startTime = startTime;
		this.endTime = endTime;
		this.calendarName = calendarName;
		this.misfireInstr = misfireInstr;
		this.jobData = jobData;
		this.simpropTriggers = simpropTriggers;
		this.cronTriggers = cronTriggers;
		this.simpleTriggers = simpleTriggers;
		this.blobTriggers = blobTriggers;
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "schedName", column = @Column(name = "SCHED_NAME", nullable = false, length = 120)),
			@AttributeOverride(name = "triggerName", column = @Column(name = "TRIGGER_NAME", nullable = false, length = 200)),
			@AttributeOverride(name = "triggerGroup", column = @Column(name = "TRIGGER_GROUP", nullable = false, length = 200)) })
	public TriggersId getId() {
		return this.id;
	}

	public void setId(TriggersId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumns({
			@JoinColumn(name = "SCHED_NAME", referencedColumnName = "SCHED_NAME", nullable = false, insertable = false, updatable = false),
			@JoinColumn(name = "JOB_NAME", referencedColumnName = "JOB_NAME", nullable = false, insertable = false, updatable = false),
			@JoinColumn(name = "JOB_GROUP", referencedColumnName = "JOB_GROUP", nullable = false, insertable = false, updatable = false) })
	public JobDetails getJobDetails() {
		return this.jobDetails;
	}

	public void setJobDetails(JobDetails jobDetails) {
		this.jobDetails = jobDetails;
	}

	@Column(name = "DESCRIPTION", length = 250)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "NEXT_FIRE_TIME", precision = 13, scale = 0)
	public Long getNextFireTime() {
		return this.nextFireTime;
	}

	public void setNextFireTime(Long nextFireTime) {
		this.nextFireTime = nextFireTime;
	}

	@Column(name = "PREV_FIRE_TIME", precision = 13, scale = 0)
	public Long getPrevFireTime() {
		return this.prevFireTime;
	}

	public void setPrevFireTime(Long prevFireTime) {
		this.prevFireTime = prevFireTime;
	}

	@Column(name = "PRIORITY", precision = 13, scale = 0)
	public Long getPriority() {
		return this.priority;
	}

	public void setPriority(Long priority) {
		this.priority = priority;
	}

	@Column(name = "TRIGGER_STATE", nullable = false, length = 16)
	public String getTriggerState() {
		return this.triggerState;
	}

	public void setTriggerState(String triggerState) {
		this.triggerState = triggerState;
	}

	@Column(name = "TRIGGER_TYPE", nullable = false, length = 8)
	public String getTriggerType() {
		return this.triggerType;
	}

	public void setTriggerType(String triggerType) {
		this.triggerType = triggerType;
	}

	@Column(name = "START_TIME", nullable = false, precision = 13, scale = 0)
	public long getStartTime() {
		return this.startTime;
	}

	public void setStartTime(long startTime) {
		this.startTime = startTime;
	}

	@Column(name = "END_TIME", precision = 13, scale = 0)
	public Long getEndTime() {
		return this.endTime;
	}

	public void setEndTime(Long endTime) {
		this.endTime = endTime;
	}

	@Column(name = "CALENDAR_NAME", length = 200)
	public String getCalendarName() {
		return this.calendarName;
	}

	public void setCalendarName(String calendarName) {
		this.calendarName = calendarName;
	}

	@Column(name = "MISFIRE_INSTR", precision = 2, scale = 0)
	public Byte getMisfireInstr() {
		return this.misfireInstr;
	}

	public void setMisfireInstr(Byte misfireInstr) {
		this.misfireInstr = misfireInstr;
	}

	@Column(name = "JOB_DATA")
	public Blob getJobData() {
		return this.jobData;
	}

	public void setJobData(Blob jobData) {
		this.jobData = jobData;
	}

	@Transient
	public SimpropTriggers getSimpropTriggers() {
		return this.simpropTriggers;
	}

	public void setSimpropTriggers(SimpropTriggers simpropTriggers) {
		this.simpropTriggers = simpropTriggers;
	}

	@Transient
	public CronTriggers getCronTriggers() {
		return this.cronTriggers;
	}

	public void setCronTriggers(CronTriggers cronTriggers) {
		this.cronTriggers = cronTriggers;
	}

	@Transient
	public SimpleTriggers getSimpleTriggers() {
		return this.simpleTriggers;
	}

	public void setSimpleTriggers(SimpleTriggers simpleTriggers) {
		this.simpleTriggers = simpleTriggers;
	}

	@Transient
	public BlobTriggers getBlobTriggers() {
		return this.blobTriggers;
	}

	public void setBlobTriggers(BlobTriggers blobTriggers) {
		this.blobTriggers = blobTriggers;
	}
	
	
	public static Map<String,String> getStatusMap(){
		Map<String,String> statusMap = new HashMap<String,String>();
		statusMap.put(STATUS_WAITING, "等待");
		statusMap.put(STATUS_PAUSED, "暂停");
		statusMap.put(STATUS_ACQUIRED, "正常");
		statusMap.put(STATUS_BLOCKED, "阻塞");
		statusMap.put(STATUS_ERROR, "错误");
		return statusMap;
	}

}
