package com.xinleju.erp.frame.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.frame.dao.AppDao;
import com.xinleju.erp.frame.models.App;
import com.xinleju.erp.frame.models.FuncModule;
import com.xinleju.erp.frame.service.MenuService;

/**
 * 
 * 版权：(C) 版权所有 2000-2014 上海天好电子商务有限公司苏州分公司
 * 菜单管理action
 * <详细描述>
 * @author   lwp
 * @version  $Id$
 * @since
 * @see
 */
public class MenuAction  extends BaseAction{
    /**
     * 菜单service
     */
    @Autowired
    private MenuService menuService;
    /**
     * 菜单
     */
    private FuncModule funcModule;
    /**
     * app列表
     */
    private List<App> apps;
    
    private String partentId;
    
    @Autowired
    private AppDao appDao;
    /**
     * 
     * 菜单管理树形页面
     *〈详细描述〉
     * @author lwp
     * @return
     */
    public String index(){
        return "index";
    }
    /**
     * 
     * 菜单列表页
     *〈详细描述〉
     * @author lwp
     * @return
     */
    public String list() {
        String keyWord = request.getParameter("keyWord");
        String parentId = request.getParameter("parentId");
        String systemCode = request.getParameter("systemCode");
        page = menuService.findMenuList(parentId, keyWord,systemCode, start, limit);
        request.setAttribute("keyWord", keyWord);
        request.setAttribute("parentId", parentId);
        return "list";
    }
    /**
     * 
     * 模块编辑页面
     *〈详细描述〉
     * @author lwp
     * @return
     */
    public String edit() {
        String parentId = request.getParameter("parentId");
        if (null != id) {//编辑
            funcModule = getCommonService().getById(FuncModule.class, id);
        } else {//新增
            funcModule = new FuncModule();
            funcModule.setParentId("0".equals(parentId) || StringUtils.isBlank(parentId) ? null : Long.valueOf(parentId));
        }
        apps = getCommonService().findAll(App.class, "1 = 1",new Object[]{},"sort asc");
        return "edit";
    }
    /**
     * 
     * 保存菜单
     *〈详细描述〉
     * @author lwp
     */
    public void save() {
        getCommonService().saveOrUpdate(funcModule);
        Map<String, Object> tree = new HashMap<String, Object>();
        tree.put("success", true);
        super.renderJson(tree);
    }
    /**
     * 
     * 禁用菜单
     * @author lwp
     */
    public void disable() {
       String menuId = request.getParameter("menuId");
       if (StringUtils.isNotBlank(menuId)) {
           menuService.changeStatus(Long.valueOf(menuId),FuncModule.STATUS_DISABLE);
       }
       Map<String, Object> tree = new HashMap<String, Object>();
       tree.put("success", "true");
       super.renderJson(tree);
    }
    /**
     * 
     * 启用菜单
     * @author lwp
     */
    public void enable() {
        String menuId = request.getParameter("menuId");
        if (StringUtils.isNotBlank(menuId)) {
            menuService.changeStatus(Long.valueOf(menuId),FuncModule.STATUS_ENABLE);
        }
        Map<String, Object> tree = new HashMap<String, Object>();
        tree.put("success", "true");
        super.renderJson(tree);
    }
    /**
     * 
     *  菜单树
     * @author lwp
     */
    public void getTrees() {
        List<Map<String, Object>> trees = new ArrayList<Map<String,Object>>();
        String systemCode = request.getParameter("systemCode");
        if (null == systemCode || "".equals(systemCode)) {
            for (Map.Entry<String,App> app : appDao.getAppMap().entrySet()) {
                Map<String, Object> tree = new HashMap<String, Object>();
                tree.put("id", app.getValue().getCode()+"::"+app.getValue().getCode());
                String name = app.getValue().getName();
                tree.put("text", name.substring(0, name.length() > 20 ? 20 : name.length()));
                tree.put("expanded", false);
                tree.put("leaf", false);
                trees.add(tree);
            }
        } else {
            
            String parentId = request.getParameter("parentId");
            if (StringUtils.isBlank(parentId) || "null".equals(parentId)) {
                parentId = "0";
            }
            List<FuncModule> childList = new ArrayList<FuncModule>();
            if (Long.valueOf(parentId) != 0) {
                childList = menuService.findAllChild(systemCode, Long.parseLong(parentId));
            } else {
                childList = menuService.findRoot(systemCode);
            }
            for (FuncModule funcModule : childList) {
                Map<String, Object> tree = new HashMap<String, Object>();
                tree.put("id", funcModule.getId()+":"+funcModule.getId()+":"+funcModule.getSystemCode());
                String name = funcModule.getName();
                tree.put("text", name.substring(0, name.length() > 20 ? 20 : name.length()));
                tree.put("expanded", false);
                tree.put("leaf", funcModule.getSubRoleCount() == 0);
                trees.add(tree);
            }
            
        }
        super.renderJson(trees);
    }
    
    public FuncModule getFuncModule() {
        return funcModule;
    }
    public void setFuncModule(FuncModule funcModule) {
        this.funcModule = funcModule;
    }
    public List<App> getApps() {
        return apps;
    }
    public void setApps(List<App> apps) {
        this.apps = apps;
    }
    public String getPartentId() {
        return partentId;
    }
    public void setPartentId(String partentId) {
        this.partentId = partentId;
    }
    
    
}

