package com.xinleju.erp.frame.action;

import java.io.UnsupportedEncodingException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.base.app.bean.Page;
import com.xinleju.erp.base.utils.EncodeUtils;
import com.xinleju.erp.base.utils.JsonUtils;
import com.xinleju.erp.flow.flowutils.bean.PageBean;
import com.xinleju.erp.flow.service.api.ApiConstant;
import com.xinleju.erp.flow.service.api.extend.BaseAPI;
import com.xinleju.erp.flow.service.api.extend.dto.OrgnDTO;
import com.xinleju.erp.flow.service.api.extend.dto.UserDTO;
import com.xinleju.erp.flow.utils.LoginInfoUtils;
import com.xinleju.erp.frame.dto.UserSelectDto;
import com.xinleju.erp.frame.models.LogRecord;
import com.xinleju.erp.frame.models.PartyEntity;
import com.xinleju.erp.frame.models.User;
import com.xinleju.erp.frame.service.OrgnService;
import com.xinleju.erp.frame.service.PartyEntityService;
import com.xinleju.erp.frame.service.UserService;

public class OrgnAction extends BaseAction {
	
	@Autowired
	private OrgnService orgnService;
	@Autowired
	private PartyEntityService partyEntityService;

	@Autowired
	@Qualifier(ApiConstant.BEAN_CODE)
	private BaseAPI baseAPI;
	
	@Autowired
	private UserService userService;

	private List<User> selectedUserList = new ArrayList<User>();
	
	public String showCase() {
		return "showCase";
	}

	/**
	 * 
	 * 首页
	 * 
	 * @author hongbin
	 * @return
	 * @throws UnsupportedEncodingException 
	 */
	public String index() throws UnsupportedEncodingException {
		String paramJsonStr = getParameter("paramJsonStr");
		UserDTO currUser = LoginInfoUtils.getLoginInfo(request).getUserDTO();
		PartyEntity pe = userService.getUserDept(currUser.getLoginName());
		request.setAttribute("paramJsonStr", URLEncoder.encode(paramJsonStr, "utf-8"));
		if (null != pe) {
			request.setAttribute("orgnId", pe.getId());
			String prefixStr = pe.getPrefix().replaceAll("-", "/");
			request.setAttribute("nodePath", "/0/"+prefixStr.substring(0, prefixStr.length()-1));
		}
		return "index";
	}

	/**
	 * 
	 * 用户列表
	 * 
	 * @author hongbin
	 * @return
	 * @throws InvocationTargetException 
	 * @throws IllegalArgumentException 
	 * @throws IllegalAccessException 
	 * @throws SecurityException 
	 * @throws NoSuchMethodException 
	 * @throws UnsupportedEncodingException 
	 */
	@SuppressWarnings("unchecked")
	public String userList() throws IllegalAccessException,IllegalArgumentException, InvocationTargetException,NoSuchMethodException, SecurityException,UnsupportedEncodingException {
		String name = getParameter("name");
		Long orgnId = getParameterLong("orgnId");
		String searchAll=request.getParameter("allSearch");
		if(StringUtils.isNotEmpty(searchAll)){
			List<PartyEntity> partyEntitys=partyEntityService.findRootEntity();
			if(partyEntitys!=null && partyEntitys.size()>0){
				orgnId=partyEntitys.get(0).getId();
			}
		}
		String paramJsonStr = getParameter("paramJsonStr");
		paramJsonStr = EncodeUtils.urlDecode(paramJsonStr);
		Integer isFirst = getParameterInt("isFirst");
		String selectedUserIds = getParameter("userIds");
		if (StringUtils.isNotBlank(paramJsonStr)) {
			//{"minCount":"dealUserIds","maxCount":null,"needBackUserInfo":1,"selectedUserQueryMethod":"findByRoleId"}
			UserSelectDto dto = JsonUtils.parseObject(paramJsonStr,UserSelectDto.class);
			dto.setRoleId(orgnId);
			if (dto != null) {
				
				// 不是第一次则通过页面上的selectedUserIds来进行查找
				if (isFirst == null || isFirst == 0) {
					dto.setSelectedUserIds(selectedUserIds);
				}else{
					selectedUserIds = dto.getSelectedUserIds();
				}
				if (StringUtils.isNotBlank(selectedUserIds)) {
					selectedUserList = orgnService.getUserById(selectedUserIds);
				} else if (StringUtils.isNotBlank(dto.getSelectedUserQueryMethod())) {
					Class<?> clazz = orgnService.getClass();
					Method queryMethod = clazz.getMethod(dto.getSelectedUserQueryMethod(),UserSelectDto.class);
					selectedUserList = (List<User>) queryMethod.invoke(orgnService, dto);
				}
			}
		} else {
			// 默认
			selectedUserList = orgnService.getUserById(selectedUserIds);
		}
		
		PageBean<UserDTO> pageBean = baseAPI.getUserList(orgnId, name, start,limit, true, null).getResult();
		if (pageBean != null) {
			page = new Page(start, limit, pageBean.getTotal(),pageBean.getItems());
		}
		
		request.setAttribute("paramJsonStr",URLEncoder.encode(paramJsonStr, "utf-8"));
		request.setAttribute("selectedUserList", selectedUserList);
		request.setAttribute("userIds", selectedUserIds);
		return "userList";
	}

	/**
	 * 组枳机构树
	 * 
	 * @author hongbin
	 */
	public void getOrgnTree() {
		String includeTypes[] = new String[] { "zb", "company", "department",
				"group", "role" };
		Long parentId = getParameterLong("parentId");
		List<OrgnDTO> result = null;
		if (parentId == null) {
			result = baseAPI.findRootOrgns(includeTypes).getResult();
		} else {
			result = baseAPI.findSubOrgns(parentId, includeTypes).getResult();
		}
		renderJson(buildExtTreeData(result));
	}

	private List<Map<String, Object>> buildExtTreeData(List<OrgnDTO> orgnDtos) {
		List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
		Map<String, Object> row = null;
		if (orgnDtos != null && !orgnDtos.isEmpty()) {
			for (OrgnDTO orgnDto : orgnDtos) {
				row = new HashMap<String, Object>();
				row.put("id", orgnDto.getId());
				row.put("text", StringUtils.isNotBlank(orgnDto.getName()) && orgnDto.getName().length() > 10 ? orgnDto.getName().substring(0, 10) + "..." : orgnDto.getName());
				row.put("refId", orgnDto.getRefId());
				row.put("leaf", orgnDto.getSubCount() > 0 ? false : true);
				result.add(row);
			}
		}
		return result;
	}

	public void getSelectUsers() {
		Map<String, Object> result = null;
		String userIds = getParameter("userIds");
		String[] idArray = userIds.split(";");
		System.out.println(idArray.length);
		renderJson(result);
	}
	
	/**
	 * 保存
	 * @throws UnsupportedEncodingException
	 */
	public void save() throws UnsupportedEncodingException{
		String paramJsonStr = getParameter("paramJsonStr");
		String userId = getParameter("userIds");
		String[] userIds = userId.split(",");
		
		Map<String,Object> result=new HashMap<String,Object>();
		
        if(StringUtils.isNotBlank(paramJsonStr)){
        	UserSelectDto dto = JsonUtils.parseObject(paramJsonStr,UserSelectDto.class);
        	
        	orgnService.saveUserRole(dto.getRoleId(), userIds);
        	result.put("success", true);
        	result.put("displayMsg", "保存成功");
        	

			//加日志
			BaseAPI baseAPIService = com.xinleju.erp.base.app.config.App.getBean(BaseAPI.class, ApiConstant.BEAN_CODE);
			Long uid=LoginInfoUtils.getLoginInfoUserDtoId(request);
			baseAPIService.saveLog(uid, "PT", "组织机构", "OrgnAction.save()", "机构保存", null, "json串",  LogRecord.SIGN_INSERT,LogRecord.TYPE_OTHER);
			
			
        }else{
        	result.put("sucess", false);
        	result.put("displayMsg", "保存失败");
        }
           renderJson(result);
    }
	
	/**
	 * 返回用户信息
	 */
    public void getUserInfo(){
    	String userId = getParameter("userIds");
    	
        List<Map<String,Object>> result = new ArrayList<Map<String,Object>>();
        
        if(StringUtils.isNotBlank(userId) ) {
            List<User> users =  orgnService.getUserById(userId);
            Map<String,Object> row = null;
            for(User u : users) {
                row = new HashMap<String,Object>();
                row.put("username", u.getRealName());
                row.put("userid", u.getId());
                result.add(row);
            }
        }
        
        	renderJson(result);
	   }

	public List<User> getSelectedUserList() {
		return selectedUserList;
	}

	public void setSelectedUserList(List<User> selectedUserList) {
		this.selectedUserList = selectedUserList;
	}

}
