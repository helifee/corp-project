package com.xinleju.erp.frame.service;


import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.xinleju.erp.base.app.config.App;
import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.flow.utils.FlowConstant;
import com.xinleju.erp.frame.dao.GroupDao;
import com.xinleju.erp.frame.dao.PartyEntityDao;
import com.xinleju.erp.frame.dao.PartyStructDao;
import com.xinleju.erp.frame.models.Group;
import com.xinleju.erp.frame.models.PartyEntity;
import com.xinleju.erp.frame.models.PartyType;


@Service
@Transactional
public class PartyEntityService extends BaseService {

	@Autowired
	private PartyEntityDao partyEntityDao;

	@Autowired
	private PartyStructDao partyStructDao;

	public void changeStatus(Long peId,Integer status){
		partyEntityDao.changeStatus(peId, status);
	}
	public void changeEntityName(Long refId,String partyType,String name,String shortName){

		PartyEntity pe = findEntityByRefId(refId, partyType);
		if(pe!=null){
			pe.setName(name);
			pe.setShortName(shortName);
			getDao().saveOrUpdate(pe);
		}
	}
	public PartyEntity findUserEntityByRefId(Long refId,Long parentEntityId,String type){
		return partyEntityDao.findUserEntityByRefId(refId,parentEntityId, type);
	}
	/**
	 * 查找组织架构下的某节点的子节点
	 * @author zhongjun
	 * @param parentId
	 * @param partyStructTypeId
	 * @return
	 */
	public List<PartyEntity> findChildEntityAllNoRole(Long parentId , Long partyStructTypeId){
		return partyEntityDao.findChildEntityAllNoRole(parentId, partyStructTypeId);
	}
	
	public List<PartyEntity> findChildEntityAllNoDept(Long parentId , Long partyStructTypeId){
		return partyEntityDao.findChildEntityAllNoDept(parentId, partyStructTypeId);
	}

	public List<PartyEntity> findChildEntityAllNoProject(Long parentId , Long partyStructTypeId){
		return partyEntityDao.findChildEntityAllNoProject(parentId, partyStructTypeId);
	}
	
	/**
	 * 查找组织架构下的某节点的子节点
	 * @author zhongjun
	 * @param parentId
	 * @param partyStructTypeId
	 * @return
	 */
	public List<PartyEntity> findChildEntityAllNoUser(Long parentId , Long partyStructTypeId ){
		return partyEntityDao.findChildEntityAllNoUser(parentId, partyStructTypeId);
	}
	/**
	 * 查找某组织架构的所有根节点
	 * @author jdq
	 * @param partyStructTypeId
	 * @return
	 */
	public List<PartyEntity> findRootEntity(Long partyStructTypeId){
		return partyEntityDao.findRootEntity(partyStructTypeId);
	}

	/**
	 * 查找某组织架构的所有根节点
	 * @author jdq
	 * @param partyStructTypeId
	 * @return
	 */
	public List<PartyEntity> findRootEntity(){
		return partyEntityDao.findRootEntity();
	}
	public String prefix2fullname(String prefix){
		String result = "";
		if(StringUtils.isNotBlank(prefix)){
			String[] peIds = prefix.split("-");
			for(String peId:peIds){
				if(StringUtils.isBlank(peId)){
					continue;
				}
				// 用戶的prefix 有多个组织架构关系 用;号分隔的
				if(peId.indexOf(";")>=0){
					result = result.substring(0, result.length()-1)+"<br/>";
					String name = getDao().findFirstByHQL(String.class, "select coalesce(nullif(e.name,''),e.shortName) from PartyEntity e where e.id=?", Long.valueOf(peId.substring(1)));
					if(StringUtils.isNotBlank(name)){
						result += name+"/";
					} 

				}else{
					String name = getDao().findFirstByHQL(String.class, "select coalesce(nullif(e.name,''),e.shortName) from PartyEntity e where e.id=?", Long.valueOf(peId));
					if(StringUtils.isNotBlank(name)){
						result += name+"/";
					} 
				}

			}
			return StringUtils.isBlank(result)?"": result.substring(0,result.length()-1);
		}
		return result;
	}
	public PartyEntity findEntityByRefId(Long refId, String type){
		return partyEntityDao.findEntityByRefId(refId, type);
	}
	public void updateEntityName(PartyEntity partyEntity,String shortName){
		partyEntity.setName(shortName);
		getDao().saveOrUpdate(partyEntity);
	}
	public PartyEntity findEntityByLoginName(String loginName){
		return partyEntityDao.findEntityByLoginName(loginName);
	}	
	public void deleteEntityById(Long entityId){
		partyEntityDao.getDao().delete(PartyEntity.class, entityId);
	}
	
	/**
	 * 解除用户直接与总部、公司、部门、团队之间的关系
	 * @param RefId
	 */
	public void deleteEntityByRefId( Long refId){
		partyEntityDao.deletePartyEntity(refId);
	}
	/**
	 *〈简述〉
	 *〈详细描述〉
	 * @author Administrator
	 * @param tree
	 * @param childParty
	 * @param isStruct
	 *        在用户管理，组织架构等页面显示的树上，isStruct为true；在用户编辑页面设置默认角色显示的组织架构树，isStruct为false
	 */
	public Map<String, Object> initTreeLeaf( PartyEntity childParty,String isStruct, String partyStructTypeId){
		Map<String, Object> tree = new HashMap<String, Object>();
		//String text = childParty.getShortName().substring(0, childParty.getShortName().length()>20?20:childParty.getShortName().length());
		String text = childParty.getName().substring(0, childParty.getName().length()>20?20:childParty.getName().length());
		// 禁用的标红
		if(PartyEntity.STATUS_DISABLE == childParty.getStatus()){
			tree.put("text","<span style='color:red'>"+text+"</span>");
		}else{
			tree.put("text",text);
		}
		tree.put("id", childParty.getId());
		tree.put("partyStructTypeId", partyStructTypeId);
		tree.put("partyType", childParty.getPartyType().getType());
		tree.put("iconCls", "icon"+childParty.getPartyType().getType());
		tree.put("expanded", false);
		tree.put("refId", childParty.getRefId());
		//  部门有子部门   如果有子部门树节点前面加号还是要显示的
		if(FlowConstant.STR_TRUE.equals(isStruct)){
			//  组织架构只显示到部门/项目
			if(childParty.getPartyType()!=null 
					&& ((PartyType.TYPE_GROUP.equals(childParty.getPartyType().getType()) &&  App.getBean(PartyStructService.class).findChildEntityIdsByParentEntityId(childParty.getId(), PartyType.TYPE_GROUP).size()==0 ) || 
							( PartyType.TYPE_DEPARTMENT.equals(childParty.getPartyType().getType())
									&&  App.getBean(PartyStructService.class).findChildEntityIdsByParentEntityId(childParty.getId(), PartyType.TYPE_DEPARTMENT).size()==0 )
							)){
				tree.put("leaf", true);
			}else{
				tree.put("leaf", false);
			}
		}else{
			if(PartyType.TYPE_ROLE.equals(childParty.getPartyType().getType())){
				tree.put("leaf", true);
			}else{
				tree.put("leaf", false);
			}

		}


		if(childParty.getPartyType()!=null && PartyType.TYPE_DEPARTMENT.equals(childParty.getPartyType().getType())){
			tree.put("isDept", true);
		}else{
			tree.put("isDept", false);
		}

		return tree;

	}
	
	public Map<String, Object> initTreeLeafDataAuth( PartyEntity childParty, String partyStructTypeId ,String treeDate){
		Map<String, Object> tree = new HashMap<String, Object>();
		String text = childParty.getShortName().substring(0, childParty.getShortName().length()>20?20:childParty.getShortName().length());
		// 禁用的标红
		if(PartyEntity.STATUS_DISABLE == childParty.getStatus()){
			tree.put("text","<span style='color:red'>"+text+"</span>");
		}else{
			tree.put("text",text);
		}
		tree.put("id", childParty.getId());
		if(PartyType.TYPE_GROUP.equals(childParty.getPartyType().getType())){
			GroupDao groupDao = App.getBean(GroupDao.class);
			
			if(groupDao!=null&&childParty.getRefId()!=null){
				Group group = groupDao.getDao().getById(Group.class, childParty.getRefId());
				if(group!=null)
					tree.put("code", group.getRefObjectId());
			}
		}else{
			tree.put("code", childParty.getRefId());
		}
		
		tree.put("partyStructTypeId", partyStructTypeId);
		tree.put("partyType", childParty.getPartyType().getType());
		tree.put("iconCls", "icon"+childParty.getPartyType().getType());
		tree.put("expanded", false);
		tree.put("refId", childParty.getRefId());
		
		
		if("company".equals(treeDate)){
			if(childParty.getPartyType()!=null 
					&& App.getBean(PartyStructService.class).findChildEntityIdsByParentEntityId(childParty.getId(), PartyType.TYPE_COMPANY).size()==0 )	{
				tree.put("leaf", true);
			}else{
				tree.put("leaf", false);
			}
			
		}else if("project".equals(treeDate)){
			if((childParty.getPartyType()!=null && PartyType.TYPE_COMPANY.equals(childParty.getPartyType().getType()) 
					&& App.getBean(PartyStructService.class).findChildEntityIdsByParentEntityId(childParty.getId(), PartyType.TYPE_GROUP).size()==0 )
					||(childParty.getPartyType()!=null && PartyType.TYPE_GROUP.equals(childParty.getPartyType().getType()))
					)	{
				tree.put("leaf", true);
			}else{
				tree.put("leaf", false);
			}
		}else if("project_branch".equals(treeDate)){
			if(childParty.getPartyType()!=null 
					&& App.getBean(PartyStructService.class).findChildEntityIdsByParentEntityId(childParty.getId(), PartyType.TYPE_GROUP).size()==0 )	{
				tree.put("leaf", true);
			}else{
				tree.put("leaf", false);
			}
		}else if("department".equals(treeDate)){
/*			if((childParty.getPartyType()!=null && PartyType.TYPE_COMPANY.equals(childParty.getPartyType().getType()) 
					&& App.getBean(PartyStructService.class).findChildEntityIdsByParentEntityId(childParty.getId(), PartyType.TYPE_DEPARTMENT).size()==0 )
					||(childParty.getPartyType()!=null && PartyType.TYPE_DEPARTMENT.equals(childParty.getPartyType().getType()))
					)	{*/
			if((childParty.getPartyType()!=null 
					&& PartyType.TYPE_COMPANY.equals(childParty.getPartyType().getType()) 
					&& App.getBean(PartyStructService.class).findChildEntityIdsByParentEntityId(childParty.getId(), PartyType.TYPE_DEPARTMENT).size()==0 )
					||(childParty.getPartyType()!=null && PartyType.TYPE_DEPARTMENT.equals(childParty.getPartyType().getType()) && App.getBean(PartyStructService.class).findChildEntityIdsByParentEntityId(childParty.getId(), PartyType.TYPE_DEPARTMENT).size()==0)
					)	{
				tree.put("leaf", true);
			}else{
				tree.put("leaf", false);
			}
		}
	


		

		return tree;

	}
	/**
	 * 
	 * @author jdq
	 * @param pe
	 * @param parentEntityId
	 */
	public void maintPreFix(PartyEntity pe,Long parentEntityId){
		PartyEntity parentEntity = null;
		if(parentEntityId!=null && parentEntityId!=0){
			parentEntity = getDao().getById(PartyEntity.class, parentEntityId);
		}
		//  修改相关数据时   不用更新
		if(parentEntity==null||StringUtils.isBlank(parentEntity.getPrefix()) 
				|| parentEntity.getPrefix().indexOf("-"+pe.getId()+"-")<0){
			pe.setPrefix((parentEntity==null||parentEntity.getPrefix()==null?"":parentEntity.getPrefix())+pe.getId()+"-");
			pe.setNamePrefix((parentEntity==null||parentEntity.getNamePrefix()==null?"":parentEntity.getNamePrefix())+pe.getName()+"-");
			getDao().saveOrUpdate(pe);
		} else if (StringUtils.isBlank(parentEntity.getNamePrefix())){
			pe.setNamePrefix((parentEntity==null||parentEntity.getNamePrefix()==null?"":parentEntity.getNamePrefix())+pe.getName()+"-");
			getDao().saveOrUpdate(pe);
		}
		if (null != pe.getPartyTypeId()){
			PartyType pt =getDao().getById(PartyType.class, pe.getPartyTypeId());
			if(null != pt && PartyType.TYPE_USER.equals(pt.getType() )){
				App.getBean(UserService.class).maintUserPrefix(pe.getRefId(), pe.getPrefix());
			}
		}
	}
	/**
	 * 更新所有的pe的namePath
	 */
	public void refleshPeNamePath(){
		this.refleshPeNamePath(partyEntityDao.findRootEntity());
	}
	/**
	 * 更新所有的pe的namePath
	 */
	private void refleshPeNamePath(List<PartyEntity> peList){
		if (null != peList && peList.size() > 0){
			for (PartyEntity pe : peList){
				maintPreFix(pe, partyStructDao.getParentEntityIdByPeId(pe.getId()));
				this.refleshPeNamePath(partyEntityDao.findChildEntityAll(pe.getId()));
			}
		}
	}
	public void saveEntity(Long parentEntityId,PartyEntity partyEntity,Long partyStructTypeId){
		//  保存节点
		getDao().saveOrUpdate(partyEntity);
		// 维护prefix
		this.maintPreFix(partyEntity, parentEntityId);
		//  处理上下级关系
		App.getBean(PartyStructService.class).processPartyStruct(parentEntityId, partyEntity.getId(), partyStructTypeId);

	}
	/**
	 * 获取总部组织架构节点
	 * @author jdq
	 * @return
	 */
	public Long getZbEntity(Long partyStructTypeId){
		List<PartyEntity> list = partyEntityDao.findRootEntity(Long.valueOf(partyStructTypeId));
		if(list==null||list.size()==0)
			return 0L;
		return list.get(0).getId();
	}
	public Long findParentEntityId(Long partyEntityId){
		return getDao().findFirstByHQL(Long.class,"select s.parentEntityId from PartyStruct s where s.childEntityId=?", partyEntityId);
	}
}
