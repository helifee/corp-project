


package com.xinleju.erp.frame.action;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.base.app.config.App;
import com.xinleju.erp.flow.service.api.ApiConstant;
import com.xinleju.erp.flow.service.api.extend.BaseAPI;
import com.xinleju.erp.flow.utils.LoginInfoUtils;
import com.xinleju.erp.frame.dao.PartyStructDao;
import com.xinleju.erp.frame.models.Company;
import com.xinleju.erp.frame.models.Dept;
import com.xinleju.erp.frame.models.Group;
import com.xinleju.erp.frame.models.LabelValueBean;
import com.xinleju.erp.frame.models.LogRecord;
import com.xinleju.erp.frame.models.PartyEntity;
import com.xinleju.erp.frame.models.PartyType;
import com.xinleju.erp.frame.models.Role;
import com.xinleju.erp.frame.models.User;
import com.xinleju.erp.frame.service.CompanyService;
import com.xinleju.erp.frame.service.DeptService;
import com.xinleju.erp.frame.service.DictService;
import com.xinleju.erp.frame.service.FuncAuthService;
import com.xinleju.erp.frame.service.PartyEntityService;
import com.xinleju.erp.frame.service.PartyStructService;
import com.xinleju.erp.frame.service.PartyStructTypeService;
import com.xinleju.erp.frame.service.PartyTypeService;
import com.xinleju.erp.frame.service.RoleService;
import com.xinleju.erp.frame.service.UserService;
import com.xinleju.erp.frame.utils.FrameConstant;

/**
 * 版权：(C) 版权所有 2000-2014 上海天好电子商务有限公司苏州分公司
 * 组维护
 * @author   jdq
 * @version  $Id$
 * @since
 * @see
 */
public class PartyStructAction  extends BaseAction{

	/**
	* <p>Title:PartyStructAction.java </p>
	* <p>Description: long</p>
	* <p>Todo:TODO </p> 
	* @author liugang
	* @date 2016-4-18
	*/
	private static final long serialVersionUID = 1L;
	public static final String FUNCTYPE_MODULE="module";
	public static final String FUNCTYPE_BUTTON="button";

	private Role role;

	private Company company;

	private Dept dept;

	private Group group;

	@Autowired
	private PartyStructService partyStructService;

	@Autowired
	private PartyEntityService partyEntityService;

	@Autowired
	private CompanyService companyService;

	@Autowired
	private RoleService roleService;

	@Autowired
	private UserService userService;

	@Autowired
	private FuncAuthService funcAuthService;

	@Autowired
	private PartyStructTypeService partyStructTypeService;
	@Autowired
	private PartyStructDao  partyStructDao;
	
	@Autowired
	private DeptService deptService;
	
	//加日志
	@Autowired
	private BaseAPI baseAPIService;
	/**
	 * 组织架构下 查找某节点下的所有 岗位信息
	 * @author jdq
	 * @param request
	 * @return
	 */
	public String roleList() {
		// 默认显示zb的数据
		String partyStructTypeId = request.getParameter("partyStructTypeId");
		Long parentId = Long.valueOf( request.getParameter("parentId") );
		if(parentId==0L){
			parentId = partyEntityService.getZbEntity(Long.valueOf(partyStructTypeId));
		}

		String name = request.getParameter("name");
		PartyEntity parentPe = getCommonService().getById(PartyEntity.class, parentId);

		page = roleService.findPageRoleByParentEntityId(parentId, name, start, limit, true);

		//从数据中取出typecode显示
    	Map<String, String> typeMap = new HashMap<String, String>();
    	
    	for (LabelValueBean bean : PartyType.typeList) {
    		typeMap.put(bean.getValue(), bean.getName());
		}
    	
    	try{
			for(Object r : page.getItems()){
				
				if(((Role)r).getParentRole()!=null){
					((Role)r).setStatus(((Role)r).getParentRole().getStatus());
				}
				
				
				String t = roleService.getUpPath((Role)r);
				if(StringUtils.isNotBlank(t)){
					t = FrameConstant.XY + t;
				}
				((Role)r).setUpPath(t);
				
				if(((Role)r).getParentRole()!=null&&((Role)r).getParentRole().getTypeCode()!=null){
					String tcode=((Role)r).getParentRole().getTypeCode();
					if(StringUtils.isNotBlank(tcode)){
						((Role)r).setTypeCodeName(typeMap.containsKey(tcode) ? typeMap.get(tcode) : "");
					}
				}
				
			}
    	}catch(Exception ex){
    		ex.printStackTrace();
    	}
		List<PartyType> canAddPartyTypeList = App.getBean(PartyTypeService.class).getCanAddList();
		request.setAttribute("canAddPartyTypeList", canAddPartyTypeList);
		request.setAttribute("parentPe", parentPe);
		request.setAttribute("refId", null != parentPe ? parentPe.getRefId() : null);
		request.setAttribute("name", name);
		request.setAttribute("parentId", parentId);
		request.setAttribute("partyStructTypeId", partyStructTypeId);
		request.setAttribute("grant", request.getParameter("grant"));
		return "roleList";

	}
	
	 public String roleSelect() {
	        request.setAttribute("datas", decodeParams(request.getParameter("datas")));
	        request.setAttribute("opType", request.getParameter("opType"));
	        return "userSelect";
	 }
	 private String decodeParams(String datas) {
	        try {
	            if (StringUtils.isNotBlank(datas)) {
	            	datas = java.net.URLDecoder.decode(datas,"utf-8"); 
	            }
	        } catch (UnsupportedEncodingException e) {
	            e.printStackTrace();
	        }
	        return datas;
	    }

	/**
	 * 组织架构
	 * @author jdq
	 * @param request
	 * @param pageable
	 * @param model
	 * @return
	 */
	public String roleTree() {
		String partyStructTypeId = request.getParameter("partyStructTypeId");
		if(StringUtils.isBlank(partyStructTypeId)){
			partyStructTypeId = String.valueOf(partyStructTypeService.getZcStructId());
		}
		request.setAttribute("partyStructTypeId", partyStructTypeId);
		return "roleTree";
	}
	
	
	/**
	 * 组织架构
	 * @author jdq
	 * @param request
	 * @param pageable
	 * @param model
	 * @return
	 */
	public String roleStandardTree() {
		String partyStructTypeId = request.getParameter("partyStructTypeId");
		if(StringUtils.isBlank(partyStructTypeId)){
			partyStructTypeId = String.valueOf(partyStructTypeService.getZcStructId());
		}
		request.setAttribute("partyStructTypeId", partyStructTypeId);
		return "roleStandardTree";
	}

	/**
	 * 区域树
	 * @author jdq
	 * @param request
	 * @return
	 */
	public String areaTree() {
		return "areaTree";
	}

	/**
	 * 获取公司对应区域的全名
	 * @author Administrator
	 * @param request
	 * @param model
	 */
	public void getAreaFullName(){
		String areaId = request.getParameter("areaId");
		String result = companyService.getAreaNameFix(Long.valueOf(areaId));
		Map<String, Object> r = new HashMap<String, Object>();
		r.put("result", result);
		super.renderJson(r);
	}


	/**
	 * 区域字典树
	 * @author jdq
	 * @return
	 */
	public void getAreaTree() {
		List<Map<String, Object>> trees = new ArrayList<Map<String, Object>>();
		String parentId = String.valueOf(request.getParameter("parentId"));
		List<Object[]> childList = new ArrayList<Object[]>();
		if(StringUtils.isNotBlank(parentId) && !"null".equals(parentId) && Long.valueOf(parentId)!=0){
			String sql = "select sd.id,sd.name from SM_DICT sd where sd.parent_id = ?";
			childList = App.getBean(DictService.class).getDictObjectArrayListBySql(sql, new Object[]{parentId});
		}else{
			String sql = "select sd.id,sd.name from sm_dict sd where sd.code = ?";
			childList = App.getBean(DictService.class).getDictObjectArrayListBySql(sql, new Object[]{DictService.SSQ});
		}
		for(Object[] child:childList){

			Map<String, Object> tree = new HashMap<String, Object>();
			String name = String.valueOf(child[1]);
			String id = String.valueOf(child[0]);
			String text = name.substring(0, name.length()>20?20:name.length());

			tree.put("id", id);
			tree.put("text", text);
			tree.put("expanded", false);

			if(companyService.hasChildArea(Long.valueOf(id))){
				tree.put("leaf", false);
			}else{
				tree.put("leaf", true);
			}

			trees.add(tree);
		}
		super.renderJson(trees);
	}
	public String unionRoleList() {
		String parentEntityId = request.getParameter("parentId");
		String name = request.getParameter("name");
		List<Role> list = roleService.findRoleByParentEntityId(Long.valueOf(parentEntityId), name);
		for(Role r : list){
			String t = roleService.getUpPath(r);
			if(StringUtils.isNotBlank(t)){
				t=FrameConstant.XY+t;
			}
			r.setUpPath(t);
		}
		request.setAttribute("name", name);
		request.setAttribute("list", list);
		request.setAttribute("parentId", parentEntityId);
		request.setAttribute("partyStructTypeId", request.getParameter("partyStructTypeId"));
		return "unionRoleList";
	}
	/**
	 * 查找组织架构  某节点下 所有用户列表
	 * @author jdq
	 * @param request
	 * @return
	 */
	public String userList() {
		// 默认显示zb的数据
		String partyStructTypeId = request.getParameter("partyStructTypeId");
		Long parentId = Long.valueOf( request.getParameter("parentId") );
		if(parentId==0L){
			parentId = partyEntityService.getZbEntity(Long.valueOf(partyStructTypeId));
		}
		String name = request.getParameter("name");
		PartyEntity parentPe = getCommonService().getById(PartyEntity.class, parentId);
		page = partyStructService.findPageUserByParent( parentPe.getPrefix() ,name,true,start,limit);
		for(Object u : page.getItems()){
			((User)u).setMainRoleName(getUserMainRoleName((User)u));
		}
		request.setAttribute("parentPe", parentPe);
		request.setAttribute("name", parentPe);
		request.setAttribute("parentId", parentId);
		request.setAttribute("partyStructTypeId", partyStructTypeId);
		baseAPIService.saveLog(request.getRemoteAddr(), LoginInfoUtils.getLoginInfoUserDtoId(request),LoginInfoUtils.getLoginInfo(request).getUserDTO().getLoginName(), "PT", "组织机构", "PartyStructAction.userList()", "查找组织架构  某节点下 所有用户列表", null, "json串",  LogRecord.SIGN_QUERY,LogRecord.TYPE_OTHER);
		return "userList";

	}

	/**
	 * 得到人员主岗在组织架构下的全路径
	 * @author jdq
	 * @param u
	 * @return
	 */
	public String getUserMainRoleName(User u){
		PartyEntity pe = partyEntityService.findEntityByRefId(u.getMainRoleId(), PartyType.TYPE_ROLE);
		return pe == null?"":partyEntityService.prefix2fullname(pe.getPrefix());
	}

	/**
	 * 组织架构添加用户  查看页面  显示可添加的用户list直接绑定 和  新增
	 * @author jdq
	 * @param request
	 * @return
	 */
	public String unionUser() {
		String parentId = request.getParameter("parentId");
		String name = request.getParameter("name");
		page = partyStructService.findUnBindUser(name, Long.valueOf(parentId), start, limit);
		request.setAttribute("name", name);
		request.setAttribute("parentEntityId", parentId);
		request.setAttribute("partyStructTypeId", request.getParameter("partyStructTypeId"));
		return "unionUser";
	}

	/**
	 * 组织架构添加用户  查看页面  显示可添加的岗位list直接绑定 和  新增
	 * @author jdq
	 * @param request
	 * @return
	 */
	public String unionRole() {
		// 组织架构上一级节点
		String parentId = request.getParameter("parentId");
		String name = request.getParameter("name");
		page = partyStructService.findStandardRoles(name,parentId, start, limit);
		request.setAttribute("name", name);
		request.setAttribute("parentEntityId", parentId);
		request.setAttribute("partyStructTypeId", request.getParameter("partyStructTypeId"));
		return "unionRole";
	}
	
	/**
	 * 
	 * 验证公司代码重复
	 *〈详细描述〉
	 * @author zhoupeng
	 */
	public void checkCompanyCode(){
	    String id = request.getParameter("id");
	    String code = request.getParameter("code");
	    boolean exists = false;
	    if (StringUtils.isBlank(code)){
            code = request.getParameter("param");
        }
	    if(StringUtils.isNotBlank(code)){
	        code = code.trim();
	        //如果id非空，即为编辑，排除本身
	        if(StringUtils.isNotBlank(id)){
	           Long count = partyStructDao.getCompanyCountWithId(code, Long.valueOf(id));
	           if(count > 0){
	               exists = true;
	           }
	        } else {
	            Long count =partyStructDao.getCompanyCountWithCode(code);
	            if(count > 0){
	                exists = true;
	            }   
	        }
	    }
	    Map<String, Object> r = new HashMap<String, Object>();
        r.put("status", !exists ? "y" : "n");
        r.put("info", !exists ? "" : "公司代码已存在！");
        super.renderJson(r);
	}
	
	/**
	 * 
	 * 验证部门代码重复
	 *〈详细描述〉
	 * @author liuhm
	 */
	public void checkDeptCode(){
		String parentEntityId = request.getParameter("parentEntityId");
		
	    String id = request.getParameter("id");
	    String code = request.getParameter("code");
	    boolean exists = false;
	    if (StringUtils.isBlank(code)){
            code = request.getParameter("param");
        }
	    if(StringUtils.isNotBlank(code)){
	        code = code.trim();
	        //如果id非空，即为编辑，排除本身
	        if(StringUtils.isNotBlank(id)){
	           Long count = partyStructDao.getDeptCountWithId(code, Long.valueOf(id), Long.valueOf( parentEntityId ));
	           if(count > 0){
	               exists = true;
	           }
	        } else {
	            Long count =partyStructDao.getDeptCountWithCode(code, Long.valueOf(parentEntityId));
	            if(count > 0){
	                exists = true;
	            }   
	        }
	    }
	    Map<String, Object> r = new HashMap<String, Object>();
        r.put("status", !exists ? "y" : "n");
        r.put("info", !exists ? "" : "部门代码已存在！");
        super.renderJson(r);
	}
	
	
	/**
	 * 
	 * 验证组代码重复
	 *〈详细描述〉
	 * @author zhoupeng
	 */
	public void checkGroupCode(){
	    String id = request.getParameter("id");
        String code = request.getParameter("code");
        boolean exists = false;
        if (StringUtils.isBlank(code)){
            code = request.getParameter("param");
        }
        if(StringUtils.isNotBlank(code)){
            code = code.trim();
            if(StringUtils.isNotBlank(id)){
                Long count = partyStructDao.getGroupCountWithId(code, Long.valueOf(id));
               if(count > 0){
                   exists = true;
               }
            } else {
                Long count = partyStructDao.getGroupCountWithId(code);
                if(count > 0){
                    exists = true;
                }   
            }
        }
        Map<String, Object> r = new HashMap<String, Object>();
        r.put("status", !exists ? "y" : "n");
        r.put("info", !exists ? "" : "组代码已存在！");
        super.renderJson(r);
	}
	public String editRole() {
		String roleId = request.getParameter("roleId");
		String parentEntityId = request.getParameter("parentId");
		if(StringUtils.isNotBlank(roleId)){
			role = getCommonService().getById(Role.class, Long.valueOf(roleId));
		}else{
			role = new Role();
			role.setType(Role.TYPE_COMMON);
			role.setStatus(Role.STATUS_ENABLE);
		}
		//岗位对应角色
		
		//岗位类别
		List<LabelValueBean> gwzjList = App.getBean(DictService.class).getChildDictByCode(DictService.GWZJ);
		request.setAttribute("gwzjList", gwzjList);
		if(role.getLeaderRoleId()!=null&&role.getLeaderRoleId()!=0){
			role.getLeaderRole().setNamefix(roleService.getNamefix(role.getLeaderRole()));
		}
		request.setAttribute("parentEntityId", parentEntityId);
		request.setAttribute("partyStructTypeId", request.getParameter("partyStructTypeId"));
		return "editRole";
	}

	public String editCompany() {
		String parentEntityId = request.getParameter("parentEntityId");
		if (id != null) {
			company = getCommonService().getById(Company.class, id);
			if(null != company && null == company.getStatus()){
			    company.setStatus(Company.STATUS_ENABLE);
			}
		} else {
			company = new Company();
			company.setStatus(Company.STATUS_ENABLE);
		}
		if(company.getAreaId()!=null&&company.getAreaId()!=0){
			company.setAreaFix( companyService.getAreaNameFix(company.getAreaId()) ); 
		}
		request.setAttribute("parentEntityId", parentEntityId);
		request.setAttribute("company", company);
		request.setAttribute("partyStructTypeId", request.getParameter("partyStructTypeId"));
		return "editCompany";
	}
	public String editDept() {
		String parentEntityId = request.getParameter("parentEntityId");
		List<Role> deptRoleList = null;
		List<Role> upDeptRoleList = null;
		if (id != null) {
			dept = getCommonService().getById(Dept.class, id, "upDeptRole");
			if(null != dept && null == dept.getStatus()){
			    dept.setStatus(Dept.STATUS_ENABLE);
			}
			//  部门领导岗位
			deptRoleList = roleService.entityRoleList(id,PartyType.TYPE_DEPARTMENT);
			deptRoleList.add(0, new Role());
			//  上级领导岗位
			upDeptRoleList = roleService.upEntityRoleList(id,PartyType.TYPE_DEPARTMENT);
			upDeptRoleList.add(0, new Role());

		} else {
			dept = new Dept();
			dept.setStatus(Dept.STATUS_ENABLE);
		}
		if(dept.getUpDeptRole()!=null){
			dept.getUpDeptRole().setName(roleService.getNamefix(dept.getUpDeptRole()));
		}
		request.setAttribute("deptRoleList", deptRoleList);
		request.setAttribute("upDeptRoleList", upDeptRoleList);
		request.setAttribute("parentEntityId", parentEntityId);
		request.setAttribute("partyStructTypeId", request.getParameter("partyStructTypeId"));
		return "editDept";
	}
	public String editGroup() {
		String parentEntityId = request.getParameter("parentEntityId");
		List<Role> groupRoleList = null;
		List<Role> upGroupRoleList = null;
		if (id != null) {
			group = getCommonService().getById(Group.class, id);
			if(null != group && null == group.getStatus()){
	            group.setStatus(Group.STATUS_ENABLE);//否
			}
			//  部门领导岗位
			groupRoleList = roleService.entityRoleList(id,PartyType.TYPE_GROUP);
			groupRoleList.add(0, new Role());
			//  上级领导岗位
			upGroupRoleList = roleService.upEntityRoleList(id,PartyType.TYPE_GROUP);
			upGroupRoleList.add(0, new Role());
		} else {
			group = new Group();
			group.setStatus(Group.STATUS_ENABLE);
		}
		if(group.getUpGroupRole()!=null){
			group.getUpGroupRole().setName(roleService.getNamefix(group.getUpGroupRole()));
		}
		request.setAttribute("groupRoleList", groupRoleList);
		request.setAttribute("upGroupRoleList", upGroupRoleList);
		request.setAttribute("parentEntityId", parentEntityId);
		request.setAttribute("partyStructTypeId", request.getParameter("partyStructTypeId"));
		return "editGroup";
	}
	/**
	 * 直接绑定已有的岗位到组织架构下
	 * @author jdq
	 * @param request
	 * @return
	 */
	public void joinRole() {
		String structTypeId=request.getParameter("partyStructTypeId");
		String roleId = request.getParameter("roleId");
		String parentEntityId = request.getParameter("parentEntityId");
		Role role = getCommonService().getById(Role.class, Long.valueOf(roleId));
		String result = partyStructService.processRolePartyStruct( role, Long.valueOf(parentEntityId), Long.valueOf(structTypeId));
		Map<String, Object> r = new HashMap<String, Object>();
		r.put("result", result);
		super.renderJson(r);
	}

	/**
	 * 直接绑定已有的岗位到组织架构下
	 * @author jdq
	 * @param request
	 * @param pageable
	 * @param model
	 * @return
	 */
	public void joinUser() {
		String structTypeId=request.getParameter("partyStructTypeId");
		String userId = request.getParameter("userId");
		String parentEntityId = request.getParameter("parentEntityId");
		User user = userService.getById(Long.valueOf(userId));
		partyStructService.processUserPartyStruct( user, Long.valueOf(parentEntityId), Long.valueOf(structTypeId));
	}
	public void saveRole() {
		String structTypeId=request.getParameter("partyStructTypeId");
		String parentEntityId = request.getParameter("parentEntityId");
		partyStructService.processRolePartyStruct(role , Long.valueOf(parentEntityId), Long.valueOf(structTypeId));
		Map<String, Object> r = new HashMap<String, Object>();
		r.put("success", true);
		r.put("parentEntityId", parentEntityId);
		baseAPIService.saveLog(request.getRemoteAddr(), LoginInfoUtils.getLoginInfoUserDtoId(request),LoginInfoUtils.getLoginInfo(request).getUserDTO().getLoginName(), "PT", "组织机构", "PartyStructAction.saveRole()", "保存组织机构角色信息", null, "json串",  LogRecord.SIGN_INSERT,LogRecord.TYPE_OTHER);
		super.renderJson(r);
	}

	public void saveCompany() {
		String structTypeId=request.getParameter("partyStructTypeId");
		String parentEntityId = request.getParameter("parentEntityId");
		String re = parentEntityId;
		if(company.getId()!=null){
			re = partyEntityService.findParentEntityId(Long.valueOf(parentEntityId)).toString();
		}
		partyStructService.processCompanyPartyStruct(company , Long.valueOf(parentEntityId), Long.valueOf(structTypeId));
		Map<String, Object> r = new HashMap<String, Object>();
		r.put("success", true);
		r.put("parentEntityId", re);
		//加日志
		baseAPIService.saveLog(request.getRemoteAddr(), LoginInfoUtils.getLoginInfoUserDtoId(request),LoginInfoUtils.getLoginInfo(request).getUserDTO().getLoginName(), "PT", "组织机构", "PartyStructAction.saveCompany()", "保存组织机构公司信息", null, "json串",  LogRecord.SIGN_INSERT,LogRecord.TYPE_OTHER);
		super.renderJson(r);
	}
	public void saveDept() {
		String structTypeId=request.getParameter("partyStructTypeId");
		String parentEntityId = request.getParameter("parentEntityId");
		String re = parentEntityId;
		if(dept.getId()!=null){
			re = partyEntityService.findParentEntityId(Long.valueOf(parentEntityId)).toString();
		}
		partyStructService.processDeptPartyStruct(dept, Long.valueOf(parentEntityId), Long.valueOf(structTypeId));
		Map<String, Object> r = new HashMap<String, Object>();
		r.put("success", true);
		r.put("parentEntityId", re);
		//加日志
		baseAPIService.saveLog(request.getRemoteAddr(), LoginInfoUtils.getLoginInfoUserDtoId(request),LoginInfoUtils.getLoginInfo(request).getUserDTO().getLoginName(), "PT", "组织机构", "PartyStructAction.saveDept()", "保存组织机构部门信息", null, "json串",  LogRecord.SIGN_INSERT,LogRecord.TYPE_OTHER);
		super.renderJson(r);
	}
	public void saveGroup() {
		String partyStructTypeId=request.getParameter("partyStructTypeId");
		String parentEntityId = request.getParameter("parentEntityId");
		String re = parentEntityId;
		if(group.getId()!=null){
			re = partyEntityService.findParentEntityId(Long.valueOf(parentEntityId)).toString();
		}
		partyStructService.processGroupPartyStruct(group, Long.valueOf(parentEntityId), Long.valueOf(partyStructTypeId));
		Map<String, Object> r = new HashMap<String, Object>();
		r.put("success", true);
		r.put("parentEntityId", re);
		//加日志
		baseAPIService.saveLog(request.getRemoteAddr(), LoginInfoUtils.getLoginInfoUserDtoId(request),LoginInfoUtils.getLoginInfo(request).getUserDTO().getLoginName(), "PT", "组织机构", "PartyStructAction.saveGroup()", "保存组织机构项目信息", null, "json串",  LogRecord.SIGN_INSERT,LogRecord.TYPE_OTHER);
		super.renderJson(r);
	}

	/**
	 * 组织架构下删除角色
	 * @author jdq
	 * @param model
	 */
	public void deleteRole(){
		String roleId = request.getParameter("roleId");
		partyStructService.deleteRole(Long.valueOf(roleId));
		Map<String, Object> r = new HashMap<String, Object>();
		r.put("success", true);
		//加日志
		baseAPIService.saveLog(request.getRemoteAddr(), LoginInfoUtils.getLoginInfoUserDtoId(request),LoginInfoUtils.getLoginInfo(request).getUserDTO().getLoginName(), "PT", "组织机构", "PartyStructAction.deleteRole()", "删除组织机构角色信息", null, "json串",  LogRecord.SIGN_DELETE,LogRecord.TYPE_OTHER);
		super.renderJson(r);
	}

	/**
	 * 组织架构下移除用户
	 * @author jdq
	 * @param request
	 * @param pageable
	 * @param model
	 */
	public void removeUser(){
		String userId = request.getParameter("userId");
		String parentEntityId = request.getParameter("parentEntityId");
		partyStructService.removeUser(Long.valueOf(userId),Long.valueOf(parentEntityId));
		Map<String, Object> r = new HashMap<String, Object>();
		r.put("success", true);
		//加日志
		baseAPIService.saveLog(request.getRemoteAddr(), LoginInfoUtils.getLoginInfoUserDtoId(request),LoginInfoUtils.getLoginInfo(request).getUserDTO().getLoginName(), "PT", "组织机构", "PartyStructAction.removeUser()", "移除用户信息", null, "json串",  LogRecord.SIGN_DELETE,LogRecord.TYPE_OTHER);
		super.renderJson(r);
	}
	
	/**
	 * 判断是否有子节点
	 */
	public void haveChild(){
		String parentEntityId = request.getParameter("parentEntityId");
		List<Long> list = partyStructService.findChildIdsByParentEntityId(Long.valueOf(parentEntityId));
		Map<String, Object> r = new HashMap<String, Object>();
		r.put("success", true);
		r.put("haveChild", list!=null&&list.size()>0);
		r.put("parentEntityId", parentEntityId);
		super.renderJson(r);
	}
	
	public void roleHaveParent(){
		String parentEntityId = request.getParameter("childEntityId");
		List<Long> list = App.getBean(PartyStructDao.class).findParentRefIdsByChildRefId(Long.valueOf(parentEntityId),new String[]{"company","department","group"});
		Map<String, Object> r = new HashMap<String, Object>();
		r.put("success", true);
		r.put("haveParent", list!=null&&list.size()>0);
		r.put("childEntityId", parentEntityId);
		super.renderJson(r);
	}
	
	public void deleteNode(){
		String parentEntityId = request.getParameter("parentEntityId");
		partyStructService.deleteEntityPartyStruct(Long.valueOf(parentEntityId));
		partyEntityService.deleteEntityById(Long.valueOf(parentEntityId));
		
		syncDelCompanyAndDept();
		
		Map<String, Object> r = new HashMap<String, Object>();
		r.put("success", true);
		super.renderJson(r);
	}

	/**
	 * 同步删除公司和部门
	 */
	private void syncDelCompanyAndDept() {
		String partyType = request.getParameter("partyType");
		String refId = request.getParameter("refId");
		
		if(partyType != null && refId != null) {
			if(partyType.equals("company")) {
				companyService.deleteCompany(Long.parseLong(refId));
			}else if(partyType.equals("department")) {
				deptService.deleteDept(Long.parseLong(refId));
			}
		}
	}

	/**
	 * 主岗
	 * @author jdq
	 * @param request
	 * @param model
	 * @return
	 */
	public String maintUserRole(){
		String userId = request.getParameter("userId");
		User user = userService.getById(Long.valueOf(userId));
		List<Role> userRoleList = roleService.findRolesByUserRefId(Long.valueOf(userId));
		// 插入一个空值
		userRoleList.add(0, new Role());
		request.setAttribute("userRoleList", userRoleList);
		request.setAttribute("user", user);
		return "maintUserRole";
	}

	public Role getRole() {
		return role;
	}

	public void setRole(Role role) {
		this.role = role;
	}

	public Company getCompany() {
		return company;
	}

	public void setCompany(Company company) {
		this.company = company;
	}

	public Dept getDept() {
		return dept;
	}

	public void setDept(Dept dept) {
		this.dept = dept;
	}

	public Group getGroup() {
		return group;
	}

	public void setGroup(Group group) {
		this.group = group;
	}

}
