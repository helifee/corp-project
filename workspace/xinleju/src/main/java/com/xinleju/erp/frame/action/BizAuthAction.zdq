package com.xinleju.erp.frame.action;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.flow.service.api.ApiConstant;
import com.xinleju.erp.flow.service.api.extend.BaseAPI;
import com.xinleju.erp.flow.utils.LoginInfoUtils;
import com.xinleju.erp.frame.dao.AppDao;
import com.xinleju.erp.frame.dao.RoleDao;
import com.xinleju.erp.frame.dto.BizAuthListDTO;
import com.xinleju.erp.frame.models.App;
import com.xinleju.erp.frame.models.BizDataRole;
import com.xinleju.erp.frame.models.LogRecord;
import com.xinleju.erp.frame.models.Role;
import com.xinleju.erp.frame.service.BizAuthService;
import com.xinleju.erp.frame.service.RoleService;

/**
 * 数据权限管理接口
 * @author lixj
 */
public class BizAuthAction extends BaseAction {
	@Autowired
	private BizAuthService bizAuthService;
	@Autowired
	private RoleService roleService;
	@Autowired
    private AppDao appDao;
	
	
	@Autowired
    private RoleDao roleDao;
	/**
	 * 业务模块列表
	 */
	private List<App> appList;
	/**
     * 业务模块code
     */
    private String systemCode;
    /**
     * 业务控制点列表
     */
    private List<BizAuthListDTO> bizAuthListDTOs;
    /**
     * 用户获得授权的业务控制范围
     */
    private List<BizDataRole> bizDataRoles;
    /**
     * 角色id
     */
    private Long roleId;
    /**
     * 已选标准角色id
     */
    private Long selectRoleId;
    /**
     * 选择的范围ID
     */
    private Long scopeId;
    
	
	/**
	 *  管理首页
	 * @return
	 */
	public String index(){
		appList = getCommonService().findByHQL(App.class, "from App");
        return "index";
	}
	
	/**
	 * 业务控制点列表
	 * @return
	 */
	public String bizBtnList(){
		// modify by liuhm 去掉首页、系统设置
		Map<String,App> appMap = appDao.getAppMap();
		appMap.remove("HP");
		appMap.remove("PT");
		appMap.remove("MD");
		if(systemCode == null || !appMap.containsKey(systemCode)) {
			systemCode = appMap.keySet().size() == 0 ? "" : appMap.keySet().toArray(new String[0])[0];
		};
				
		bizAuthListDTOs = bizAuthService.getBizModuleList(systemCode, roleId);
		
		String roleId = request.getParameter("roleId");
        if (StringUtils.isNotBlank(roleId) ) {
           Role role = roleDao.getRoleListById(getRoleId());
           if(role!=null)
            request.setAttribute("roleName", role.getName());
        }
		request.setAttribute("appMap", appMap);
		return "BizBtnList";
	}
	
	/**
	 * 多角色业务控制点列表
	 * @return
	 */
	public String rolesBizBtnList(){
		Map<String,App> appMap = appDao.getAppMap();
		appMap.remove("HP");
		appMap.remove("PT");
		if(systemCode == null || !appMap.containsKey(systemCode)) {
			systemCode = appMap.keySet().size() == 0 ? "" : appMap.keySet().toArray(new String[0])[0];
		};
				
		bizAuthListDTOs = bizAuthService.getBizModuleList(systemCode, roleId);
		
		String roleIds = request.getParameter("roleIds");
		if (StringUtils.isNotBlank(roleIds) ) {
	           String[] rId=roleIds.split(",");
	           List<Role> roleList=new ArrayList<Role>();
	           String roleName="";
	           for(String s:rId){
	        	   roleList.add(roleDao.getRoleListById(Long.valueOf(s)));
	           }
	           for(Role r:roleList){
	        	   roleName+=r.getName()+",";
	           }
	           roleName=roleName.substring(0,roleName.length()-1);
	            request.setAttribute("roleNames", roleName);
	            request.setAttribute("roleIds", roleIds);
	        }
		
		request.setAttribute("appMap", appMap);
		return "RolesBizBtnList";
	}
	
	/**
	 * 保存权限设置
	 * @return
	 */
	public String save1(){
		List<BizDataRole> bizDataRoles = bizAuthService.getSelectedScopeOption(request, systemCode, roleId);
		bizAuthService.save1(systemCode, roleId, bizDataRoles);

		//加日志
		BaseAPI baseAPIService = com.xinleju.erp.base.app.config.App.getBean(BaseAPI.class, ApiConstant.BEAN_CODE);
		Long uid=LoginInfoUtils.getLoginInfoUserDtoId(request);
		baseAPIService.saveLog(uid, "PT", "权限管理", "BizAuthAction.save1()", "保存权限设置", null, "json串",  LogRecord.SIGN_INSERT,LogRecord.TYPE_OTHER);
		
		return bizBtnList();
	}
	
	/**
	 * 保存权限设置
	 * @return
	 */
	public String saves1(){
		String roleIds = request.getParameter("roleId");
		List<BizDataRole> bizDataRoles = bizAuthService.getSelectedScopeOption(request, systemCode, roleIds);
		bizAuthService.saves1(systemCode, roleIds, bizDataRoles);

		//加日志
		BaseAPI baseAPIService = com.xinleju.erp.base.app.config.App.getBean(BaseAPI.class, ApiConstant.BEAN_CODE);
		Long uid=LoginInfoUtils.getLoginInfoUserDtoId(request);
		baseAPIService.saveLog(uid, "PT", "权限管理", "BizAuthAction.saves1()", "保存权限设置", null, "json串",  LogRecord.SIGN_INSERT,LogRecord.TYPE_OTHER);
		
		return bizBtnList();
	}
	
    /**
     * 选择标准角色首页
     * @return
     */
    public String chooseRole() {
        return "chooseRole";
    }
    
    /**
     * 获取角色数据权限
     */
    public void getOtherAuth(){
    	  Map<String, List<BizDataRole>> map = new HashMap<String, List<BizDataRole>>();
          map.put("fieldInfos", bizAuthService.getBizDataRoleList(selectRoleId, systemCode));
          renderJson(map);
    }
    
    /**
     * 获取权限范围详细分类
     * @return
     */
    public String chooseOption() {
    	return "chooseOption";
    }
    
    /**
     * 获取权限范围详细分类树
     */
    public void getScopeOptionTree() throws Exception{
    	String parentId = request.getParameter("parentId");   	
    	
    	
    	String urlReqData = bizAuthService.getBizDataScopeUrlDataNew(scopeId, parentId,this.request.getCookies());
    	
        super.renderJson(urlReqData);
    }
    
    
    /**
     * 显示选择选项页面
     * @return
     */
    public String chooseOptionList(){
    	String optionStr = request.getParameter("options");
    	try {
			optionStr = java.net.URLDecoder.decode(optionStr,"UTF-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
    	request.setAttribute("otherOptions", bizAuthService.handlerOptionStr(optionStr));
    	return "chooseOptionList";
    }
    
    /**
     * 获取已授权列表
     * @return
     */
    public String authList(){
    	// modify by liuhm 去掉首页、系统设置
		Map<String,App> appMap = appDao.getAppMap();
		appMap.remove("HP");
		if(systemCode == null || !appMap.containsKey(systemCode)) {
			systemCode = appMap.keySet().size() == 0 ? "" : appMap.keySet().toArray(new String[0])[0];
		};
    	
        String name = request.getParameter("name");
        if(null == name || "".equals(name)){
            Object[] args = new Object[2];
            args[0] = systemCode;
            args[1] = roleId;
            page = getCommonService().findPageByHQL(Object.class,"select dc.name, df.name, ds.name, dr.otherOptions from BizDataCtrl dc, BizDataField df, BizDataScope ds, BizDataRole dr where dc.id = df.ctrlId and df.id = dr.fieldId and ds.id = dr.scopeId and ds.moduleCode = ? and dr.roleId = ?", args, start, limit);
        } else {
            Object[] args = new Object[3];
            args[0] = systemCode;
            args[1] = roleId;
            args[2] = "%"+name+"%";
            page = getCommonService().findPageByHQL(Object.class,"select dc.name, df.name, ds.name, dr.otherOptions from BizDataCtrl dc, BizDataField df, BizDataScope ds, BizDataRole dr where dc.id = df.ctrlId and df.id = dr.fieldId and ds.id = dr.scopeId and ds.moduleCode = ? and dr.roleId = ? and dc.name like ?", args, start, limit);
        }
        bizAuthService.handlerAuthList(page);
        request.setAttribute("appMap", appMap);
        request.setAttribute("name", name);
        return "authList";
    }
    
    public void authListAjax(){
    	
    	page = getCommonService().findPageByHQL(Object.class,"select dc.name, df.name, ds.name, dr.otherOptions from BizDataCtrl dc, BizDataField df, BizDataScope ds, BizDataRole dr where dc.id = df.ctrlId and df.id = dr.fieldId and ds.id = dr.scopeId ",new Object[]{}, start, limit);
    	bizAuthService.handlerAuthList(page);
    	request.setAttribute("appMap", appDao.getAppMap());
    	super.renderJson(page.getItems());
    }
    
	//--------------------- getter & setter --------------------
	public List<App> getAppList() {
		return appList;
	}

	public void setAppList(List<App> appList) {
		this.appList = appList;
	}

	public String getSystemCode() {
		return systemCode;
	}

	public void setSystemCode(String systemCode) {
		this.systemCode = systemCode;
	}

	public List<BizAuthListDTO> getBizAuthListDTOs() {
		return bizAuthListDTOs;
	}

	public void setBizAuthListDTOs(List<BizAuthListDTO> bizAuthListDTOs) {
		this.bizAuthListDTOs = bizAuthListDTOs;
	}
	public Long getRoleId() {
		return roleId;
	}

	public void setRoleId(Long roleId) {
		this.roleId = roleId;
	}

	public List<BizDataRole> getBizDataRoles() {
		return bizDataRoles;
	}

	public void setBizDataRoles(List<BizDataRole> bizDataRoles) {
		this.bizDataRoles = bizDataRoles;
	}

	public Long getSelectRoleId() {
		return selectRoleId;
	}

	public void setSelectRoleId(Long selectRoleId) {
		this.selectRoleId = selectRoleId;
	}

	public Long getScopeId() {
		return scopeId;
	}

	public void setScopeId(Long scopeId) {
		this.scopeId = scopeId;
	}
	
}
