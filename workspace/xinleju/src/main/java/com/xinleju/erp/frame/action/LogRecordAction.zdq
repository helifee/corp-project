package com.xinleju.erp.frame.action;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.base.utils.DateUtils;
import com.xinleju.erp.flow.utils.LoginInfoUtils;
import com.xinleju.erp.form.utils.DbType;
import com.xinleju.erp.frame.dao.AppDao;
import com.xinleju.erp.frame.dto.LogRecordQueryDTO;
import com.xinleju.erp.frame.models.App;
import com.xinleju.erp.frame.models.LogRecord;
import com.xinleju.erp.report.action.ReportSettingAction;

/**
 * 登录日志,菜单访问日志等
 * 
 * @author luocheng
 * 
 */
public class LogRecordAction extends BaseAction {

	/**
	 * <p>
	 * Title:LogRecordAction.java
	 * </p>
	 * <p>
	 * Description: long
	 * </p>
	 * <p>
	 * Todo:TODO
	 * </p>
	 * 
	 * @author liugang
	 * @date 2016-4-8
	 */
	private static final long serialVersionUID = 806064509644259734L;

	private static final Log log = LogFactory.getLog(ReportSettingAction.class);

	private LogRecordQueryDTO logRecordQueryDTO;

	@Autowired
	private AppDao appDao;

	/**
	 * 日志首页
	 * 
	 * @return
	 */
	public String index() {

		return "index";
	}

	/**
	 * 列表
	 * 
	 * @return
	 */
	public String list() {
		String type = getParameter("type");
		if (StringUtils.isNotBlank(type)) {
			if (logRecordQueryDTO == null)
				logRecordQueryDTO = new LogRecordQueryDTO();
			    logRecordQueryDTO.setType(Long.parseLong(type));
		}
		DetachedCriteria dc = DetachedCriteria.forClass(LogRecord.class);
		if (logRecordQueryDTO != null) {
			if (StringUtils.isNotBlank(logRecordQueryDTO.getLoginName() )) {
				dc.add(Restrictions.like("loginName", "%" + logRecordQueryDTO.getLoginName() + "%"));
			}
			if (StringUtils.isNotBlank(logRecordQueryDTO.getCompany())) {
				dc.add(Restrictions.like("company", "%" + logRecordQueryDTO.getCompany() + "%"));
			}
			if (logRecordQueryDTO.getType() != null) {
				dc.add(Restrictions.eq("type", logRecordQueryDTO.getType()));
			}
			if (StringUtils.isNotBlank(logRecordQueryDTO.getModuleCode())) {
				dc.add(Restrictions.eq("moduleCode", logRecordQueryDTO.getModuleCode()));
			}
			if (StringUtils.isNotBlank(logRecordQueryDTO.getKeyword())) {
				dc.add(Restrictions.or(Restrictions.like("createUserName", logRecordQueryDTO.getKeyword().trim(), MatchMode.ANYWHERE),
						Restrictions.like("funcName", logRecordQueryDTO.getKeyword().trim(), MatchMode.ANYWHERE)));
			}
			if (StringUtils.isNotBlank(logRecordQueryDTO.getVisitDateBegin())) {
				dc.add(Restrictions.ge("createDate", DateUtils.str2Date(logRecordQueryDTO.getVisitDateBegin().trim().concat(" 00:00:00"), "yyyy-MM-dd HH:mm:ss")));
			}

			if (StringUtils.isNotBlank(logRecordQueryDTO.getVisitDateEnd())) {
				dc.add(Restrictions.le("createDate", DateUtils.str2Date(logRecordQueryDTO.getVisitDateEnd().trim().concat(" 23:59:59"), "yyyy-MM-dd HH:mm:ss")));
			}
		}
		dc.addOrder(Order.desc("createDate"));
		page = getCommonService().findPage(dc, start, limit);
		String sql = "SELECT DISTINCT y.name FROM sm_party_entity y LEFT JOIN sm_party_type t ON y.party_type_id = t.id LEFT JOIN sm_party_entity yyy ON "
				+ DbType.getType()
				+ "locate (y.prefix, yyy.prefix)>0 LEFT JOIN sm_party_type ttt ON yyy.party_type_id = ttt.id left join sm_company c on c.id=y.ref_id  WHERE c.status=0   and  t.type = 'company' AND ttt.type = 'user'";
		List<String> companyList = com.xinleju.erp.base.app.config.App.getBean(JdbcTemplate.class).queryForList(sql, new Object[] {}, String.class);
		Map<String, App> appMap = appDao.getAppMap();
		request.setAttribute("companyList", companyList);
		request.setAttribute("appMap", appMap);
		return "list";
	}

	/***
	 * 删除日志
	 */
	public void deleteLogs() {
		String success = "true";
		String msg = "操作成功！";
		try {
			String retIds = request.getParameter("retIds");
			String[] strIds = retIds.split(";");
			for (String strId : strIds) {
				getCommonService().delete(getCommonService().getById(LogRecord.class, Long.parseLong(strId)));
			}
			Map<String, Object> r = new HashMap<String, Object>();
			r.put("success", success);
			r.put("msg", msg);
			log.info("delete()" + msg);
			super.renderJson(r);
		} catch (NumberFormatException e) {
			log.info("delete()" + "删除失败");
		}
	}

	// 保存访问菜单的日志信息
	public void saveMenuLogRecord() {
		String moduleName = getParameter("moduleName");
		String menuName = getParameter("menuName");
		String menuItemName = getParameter("menuItemName");
		if (moduleName != null) {
			App app = appDao.getAppByName(moduleName);

			LogRecord logr = new LogRecord();// 日志记录对象
			logr.setCreateDate(new Date());
			logr.setCreateUserId(LoginInfoUtils.getLoginInfoUserDtoId(request));
			if (app != null)
				logr.setModuleCode(app.getCode());
			logr.setSign("1");
			logr.setFuncName("菜单访问");
			logr.setType(2L);
			logr.setLogInfo(moduleName + (menuName != null ? "-->" + menuName : "") + (menuItemName != null ? "-->" + menuItemName : ""));
			appDao.saveLogRecord(logr);
		}

	}

	public LogRecordQueryDTO getLogRecordQueryDTO() {
		return logRecordQueryDTO;
	}

	public void setLogRecordQueryDTO(LogRecordQueryDTO logRecordQueryDTO) {
		this.logRecordQueryDTO = logRecordQueryDTO;
	}

}
