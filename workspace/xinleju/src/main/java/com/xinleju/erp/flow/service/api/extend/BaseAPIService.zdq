package com.xinleju.erp.flow.service.api.extend;

import java.io.UnsupportedEncodingException;

import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.apache.log4j.Logger;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.xinleju.erp.base.app.bean.Page;
import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.base.utils.DateUtils;
import com.xinleju.erp.base.utils.StringHelper;
import com.xinleju.erp.flow.dao.impl.AcDAO;
import com.xinleju.erp.flow.dao.impl.FlDAO;
import com.xinleju.erp.flow.dao.impl.OpGroupDAO;
import com.xinleju.erp.flow.flowutils.bean.AiBean;
import com.xinleju.erp.flow.flowutils.bean.BizDataDTO;
import com.xinleju.erp.flow.flowutils.bean.CategoryDTO;
import com.xinleju.erp.flow.flowutils.bean.DebugInfo;
import com.xinleju.erp.flow.flowutils.bean.FileDto;
import com.xinleju.erp.flow.flowutils.bean.FlowDTO;
import com.xinleju.erp.flow.flowutils.bean.FlowInstanceDto;
import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.flow.flowutils.bean.GiveBackResult;
import com.xinleju.erp.flow.flowutils.bean.GvBean;
import com.xinleju.erp.flow.flowutils.bean.Gvs;
import com.xinleju.erp.flow.flowutils.bean.MsgDTO;
import com.xinleju.erp.flow.flowutils.bean.PageBean;
import com.xinleju.erp.flow.flowutils.bean.SimpleResult;
import com.xinleju.erp.flow.flowutils.bean.StartFiResult;
import com.xinleju.erp.flow.flowutils.bean.ToDoBean;
import com.xinleju.erp.flow.flowutils.utils.OpType;
import com.xinleju.erp.flow.flowutils.utils.WsConstant;
import com.xinleju.erp.flow.models.Ac;
import com.xinleju.erp.flow.models.Fi;
import com.xinleju.erp.flow.models.Fl;
import com.xinleju.erp.flow.models.OpGroup;
import com.xinleju.erp.flow.models.Upload;
import com.xinleju.erp.flow.models.Wi;
import com.xinleju.erp.flow.service.CtService;
import com.xinleju.erp.flow.service.FileService;
import com.xinleju.erp.flow.service.FormFlowService;
import com.xinleju.erp.flow.service.GvsService;
import com.xinleju.erp.flow.service.IRelationFiService;
import com.xinleju.erp.flow.service.IRelationHrefService;
import com.xinleju.erp.flow.service.ToDoService;
import com.xinleju.erp.flow.service.TodoFiService;
import com.xinleju.erp.flow.service.api.FlowServerService;
import com.xinleju.erp.flow.service.api.SmBizDataService;
import com.xinleju.erp.flow.service.api.SmObjectService;
import com.xinleju.erp.flow.service.api.extend.dto.CompanyDTO;
import com.xinleju.erp.flow.service.api.extend.dto.DataAuthDTO;
import com.xinleju.erp.flow.service.api.extend.dto.DeptDTO;
import com.xinleju.erp.flow.service.api.extend.dto.FlowInsDTO;
import com.xinleju.erp.flow.service.api.extend.dto.FuncDTO;
import com.xinleju.erp.flow.service.api.extend.dto.GroupDTO;
import com.xinleju.erp.flow.service.api.extend.dto.OpDTO;
import com.xinleju.erp.flow.service.api.extend.dto.OrgnDTO;
import com.xinleju.erp.flow.service.api.extend.dto.PostDTO;
import com.xinleju.erp.flow.service.api.extend.dto.RoleDTO;
import com.xinleju.erp.flow.service.api.extend.dto.ScopeDTO;
import com.xinleju.erp.flow.service.api.extend.dto.UserDTO;
import com.xinleju.erp.flow.service.api.utils.CompanyUtils;
import com.xinleju.erp.flow.service.api.utils.DeptUtils;
import com.xinleju.erp.flow.service.api.utils.FuncUtils;
import com.xinleju.erp.flow.service.api.utils.OrgnUtils;
import com.xinleju.erp.flow.service.api.utils.PostUtils;
import com.xinleju.erp.flow.service.api.utils.RoleUtils;
import com.xinleju.erp.flow.service.api.utils.ScopeUtils;
import com.xinleju.erp.flow.service.api.utils.UserUtils;
import com.xinleju.erp.flow.utils.FlowUtils;
import com.xinleju.erp.flowengine.dao.FlowInstanceDao;
import com.xinleju.erp.flowengine.service.FlowInstanceStepMobileService;
import com.xinleju.erp.flowengine.utils.FlowInstanceConstant;
import com.xinleju.erp.flowengine.utils.FlowInstanceStatus;
import com.xinleju.erp.flowengine.utils.StepTypeStatus;
import com.xinleju.erp.flowengine.utils.TaskTypeStatus;
import com.xinleju.erp.form.utils.DbType;
import com.xinleju.erp.frame.dao.AppDao;
import com.xinleju.erp.frame.dao.AuthDao;
import com.xinleju.erp.frame.dao.BizDataRoleDao;
import com.xinleju.erp.frame.dao.CompanyDao;
import com.xinleju.erp.frame.dao.DeptDao;
import com.xinleju.erp.frame.dao.GroupDao;
import com.xinleju.erp.frame.dao.MsgDao;
import com.xinleju.erp.frame.dao.PartyEntityDao;
import com.xinleju.erp.frame.dao.PartyStructDao;
import com.xinleju.erp.frame.dao.RoleDao;
import com.xinleju.erp.frame.dao.RoleGeneralDao;
import com.xinleju.erp.frame.dao.UserDao;
import com.xinleju.erp.frame.models.AdminLog;
import com.xinleju.erp.frame.models.App;
import com.xinleju.erp.frame.models.BizDataRole;
import com.xinleju.erp.frame.models.Company;
import com.xinleju.erp.frame.models.Dept;
import com.xinleju.erp.frame.models.FuncButton;
import com.xinleju.erp.frame.models.Group;
import com.xinleju.erp.frame.models.LogRecord;
import com.xinleju.erp.frame.models.Msg;
import com.xinleju.erp.frame.models.PartyStruct;
import com.xinleju.erp.frame.models.PartyType;
import com.xinleju.erp.frame.models.Role;
import com.xinleju.erp.frame.models.RoleGeneral;
import com.xinleju.erp.frame.models.User;
import com.xinleju.erp.frame.service.IdRuleService;
import com.xinleju.erp.frame.service.MsgService;
import com.xinleju.erp.frame.service.PartyStructService;
import com.xinleju.erp.frame.service.SaveMailService;
import com.xinleju.erp.frame.service.SaveSmService;
import com.xinleju.erp.frame.service.SendMailService;
import com.xinleju.erp.frame.service.SendSmService;
import com.xinleju.erp.sm.extend.dto.MailDTO;
import com.xinleju.erp.sm.extend.dto.SmDTO;
import com.xinleju.erp.thirdpart.oa.xinyuan.impl.OaMsgServiceImpl;

/**
 * <p>
 * </p>
 * <p>
 * </p>
 * 
 * @author Administrator
 * @version $Id$
 * @since
 * @see
 */

@Service("BaseAPIService")
public class BaseAPIService extends BaseService implements BaseAPI {
	
	private static Logger logger = Logger.getLogger(BaseAPIService.class);
	
	/** 校稿编码*/
	private final static String CHK_DRAFT = "JG";

	@Autowired
	private PartyStructDao psDao;

	@Autowired
	private AppDao appDao;

	@Autowired
	private UserDao userDao;
	@Autowired
	private FileService fileService;
	   /**
     * 相关链接
     */
    @Autowired
    private IRelationHrefService relationHrefService;

    /**
     * 相关流程
     */
    @Autowired
    private IRelationFiService relationFiService;

	@Autowired
	private AuthDao authDao;

	@Autowired
	private MsgDao msgDao;

	@Autowired
	private IdRuleService idRuleService;

	@Autowired
	private CompanyDao companyDao;

	@Autowired
	private RoleDao roleDao;

	@Autowired
	GvsService GvsService;

	@Autowired
	CtService ctService;

	@Autowired
	private FlDAO flDAO;
	
	@Autowired
	private AcDAO acDaO;
	
	@Autowired
	private OpGroupDAO opGroupDao;

	@Autowired
	private DeptDao deptDao;

	@Autowired
	PartyStructDao partyStructDao;

	@Autowired
	GroupDao groupDao;
	
	@Autowired
	private FlowInstanceDao flowInstanceDao;

	@Autowired
	private BizDataRoleDao bizDataRoleDao;

	@Autowired
	PartyEntityDao partyEntityDao;

	@Autowired
	private MsgService msgService;

	@Autowired
	private FlowServerService flowServerService;

	@Autowired
	private FormFlowService formFlowService;

	@Autowired
	private SendSmService sendSmService;

	@Autowired
	private SendMailService sendMailServices;

	@Autowired
	private SaveMailService saveMailService;

	@Autowired
	private SaveSmService saveSmService;
	@Autowired
	private FlowInstanceStepMobileService flowInstanceStepMobileService;

	@Autowired
	private ToDoService toDoService;

	@Autowired
	private RoleGeneralDao roleGeneralDao;

	@Autowired
	private TodoFiService todoFiService;
	
	@Autowired
	private OaMsgServiceImpl oaMsgServiceImpl;

	/**
	 * @see com.xinleju.erp.flow.service.api.extend.BaseAPI#sendMsg(java.lang.String,
	 *      java.lang.String, java.lang.String, java.lang.String,
	 *      java.lang.String, java.lang.String, java.lang.String,
	 *      java.lang.String, java.lang.String)
	 */

	public FlowResult<Boolean> sendMsg(String module, String msgId,
			String title, String url, String typedDate, String opType,
			String msgType, String loginName, Map<String, Object> extParm) {

		FlowResult<Boolean> result = new FlowResult<Boolean>();

		if (StringUtils.isBlank(module)) {
			result.faliure();
			result.getDebugInfo().addErrDesc("所属模块编码不能为空!");
			result.setResult(false);
			return result;
		}

		App app = getDao().getByProperty(App.class, "code", module);
		if (app == null) {
			result.faliure();
			result.getDebugInfo().addErrDesc("所属模块编码不存在!");
			result.setResult(false);
			return result;
		}

		if (StringUtils.isBlank(msgId)) {
			result.faliure();
			result.getDebugInfo().addErrDesc("消息ID不能为空!");
			result.setResult(false);
			return result;
		}

		if (StringUtils.isBlank(title)) {
			result.faliure();
			result.getDebugInfo().addErrDesc("消息标题不能为空!");
			result.setResult(false);
			return result;
		}

		if (!Msg.OP_TYPE_DB.equals(opType) && !Msg.OP_TYPE_YB.equals(opType)
				&& !Msg.OP_TYPE_YD.equals(opType)
				&& !Msg.OP_TYPE_WD.equals(opType)
				&& !Msg.OP_TYPE_RM.equals(opType)) {
			result.faliure();
			result.setResult(false);
			result.getDebugInfo().addErrDesc("消息操作类型不正确!");
			return result;
		}

		if (!Msg.MSG_TYPE_DB.toString().equals(msgType)
				&& !Msg.MSG_TYPE_TZ.toString().equals(msgType)) {
			result.faliure();
			result.getDebugInfo().addErrDesc("消息类型不正确!");
			result.setResult(false);
			return result;
		}

		/*
		 * boolean isExist = msgDao.isExistMsg(module, title, url, opType,
		 * msgType, loginName); if (isExist) { return
		 * "{status:0,msg:'该消息已经存在!',data:{}}"; }
		 */
		try {
			Msg msg=msgService.saveMsg(module, msgId, title, url, typedDate, opType,
					msgType, loginName, extParm);
			//System.out.println("发送消息==========msgId"+msgId+"====id"+msg.getId());
			//if(msg!=null&&msg.getId()>0l){
			//	if(msg.getOpType().equals(msg.OP_TYPE_YB)){
			//		oaMsgServiceImpl.sendOaMsgTask(msg);
			//		System.out.println("发送消息完成==========msgId"+msgId+"====id"+msg.getId());
			//	}

			//}
			
			result.setResult(true);
			return result;
		} catch (Exception e) {
			result.faliure();
			result.getDebugInfo().addErrDesc(e.getMessage());
			result.setResult(false);
			return result;
		}
	}
	
	
	

	@Override
	public FlowResult<List<String>> getFiCurrentAi(String bizId, String flowCode) {
		// TODO Auto-generated method stub
		Long fiId = formFlowService.getFiIdByFlowCodeAndBizId(flowCode, bizId);
		FlowResult<List<String>> result = new FlowResult<List<String>>();
		Object[] args=new Object[2];
        List<String> aiList = (List<String>) getDao().findListBySQL("select c.op_Groups from tf_ac c ,tf_ai a where c.id=a.ac_id  and a.fi_id='"+bizId+"' and a.status='"+flowCode+"' ", null);
        result.setResult(aiList);
        result.setSuccess(true);
		return result;
	}

	public FlowResult<DataAuthDTO> getDataAuth(String loginName) {
		FlowResult<DataAuthDTO> result = new FlowResult<DataAuthDTO>();
		FlowUtils.checkParams(result, "loginName", loginName);
		if (result.isSuccess()) {
			List<Long> roleIds = userDao.getRoleIds(loginName);
			List<Long> standRoleIds = userDao.getStandRoleIds(loginName, false);
			if (standRoleIds != null && !standRoleIds.isEmpty()) {
				roleIds.addAll(standRoleIds);
			}
			// 加通用角色
			getRoleGeneralIdsByMembers(roleIds);

			if (roleIds != null && !roleIds.isEmpty()) {
				DataAuthDTO dad = authDao.getDataAuth(roleIds, null);
				if (dad != null) {
					result.setResult(dad);
				} else {
					result.setResult(new DataAuthDTO());
				}
			} else {
				result.setResult(new DataAuthDTO());
			}
		}

		return result;
	}

	
	
	@Override
	public FlowResult<Boolean> getNotSubmitFiByFlowCodeAndBizId(
	 		String flowCode, String bizId) {
		  FlowResult<Boolean> result = new FlowResult<Boolean>();
		  //没有流程
		  Fi  fi = formFlowService.getFiByFlowCodeAndBizId(flowCode, bizId);
		  if(fi!=null&&fi.getId()!=null){
			  //获取没有提交流程的对象
			  fi = formFlowService.getNotSubmitFiByFlowCodeAndBizId(flowCode, bizId);
	          if (null != fi){
	        	  result.setResult(false);
	          }else{
	        	  List<String> lstBizId = flowInstanceDao.getNewestFlowBizId(bizId, flowCode);
		  			if (lstBizId == null || lstBizId.size() == 0) {
		  				result.setResult(true);
		  			} else {
		  				result.setResult(false);
		  			}
	          }
		  }else{
			    List<String> lstBizId = flowInstanceDao.getNewestFlowBizId(bizId, flowCode);
	  			if (lstBizId == null || lstBizId.size() == 0) {
	  				result.setResult(true);
	  			} else {
	  				result.setResult(false);
	  			}
		  }
		return result;
	}

	public FlowResult<List<FuncDTO>> getFuncAuth(String loginName,
			String moduleCode) {
		FlowResult<List<FuncDTO>> result = new FlowResult<List<FuncDTO>>();
		FlowUtils.checkParams(result, "loginName", loginName, "moduleCode",
				moduleCode);
		if (result.isSuccess()) {
			List<Long> roleIds = userDao.getRoleIds(loginName);
			List<Long> standRoleIds = userDao.getStandRoleIds(loginName);
			if (standRoleIds != null && !standRoleIds.isEmpty()) {
				roleIds.addAll(standRoleIds);
			}

			// 取出符合的通用角色
			getRoleGeneralIdsByMembers(roleIds);

			if (roleIds != null && !roleIds.isEmpty()) {
				result.setResult(authDao.getAuthFunc(roleIds, moduleCode, null,
						true));
			} else {
				result.setResult(new ArrayList<FuncDTO>());
			}
		}
		return result;
	}

	public FlowResult<List<OpDTO>> getOpAuth(String loginName,
			String moduleCode, String funcCode) {
		FlowResult<List<OpDTO>> result = new FlowResult<List<OpDTO>>();
		FlowUtils.checkParams(result, "loginName", loginName, "moduleCode",
				moduleCode);
		if (result.isSuccess()) {
			List<Long> roleIds = userDao.getRoleIds(loginName);
			List<Long> standRoleIds = userDao.getStandRoleIds(loginName);
			if (standRoleIds != null && !standRoleIds.isEmpty()) {
				roleIds.addAll(standRoleIds);
			}

			// 取出符合的通用角色
			getRoleGeneralIdsByMembers(roleIds);

			if (roleIds != null && !roleIds.isEmpty()) {
				List<FuncButton> fbs = authDao.getAuthOp(roleIds, moduleCode,
						funcCode);
				result.setResult(FuncUtils.buildOpDtoList(fbs));
			} else {
				result.setResult(new ArrayList<OpDTO>());
			}
		}
		return result;
	}

	public FlowResult<List<OpDTO>> getOpAuthByModuleCode(String moduleCode) {
		FlowResult<List<OpDTO>> result = new FlowResult<List<OpDTO>>();
		FlowUtils.checkParams(result, "moduleCode", moduleCode);
		if (result.isSuccess()) {
			List<FuncButton> fbs = authDao.getAuthOpByModuleCode( moduleCode);
			result.setResult(FuncUtils.buildOpDtoList(fbs));
		}
		return result;
	}

	/**
	 * @see com.xinleju.erp.flow.service.api.extend.BaseAPI#getMaxBizCode(java.lang.String)
	 */

	public FlowResult<String> getMaxBizCode(String defineCode) {
		FlowResult<String> result = new FlowResult<String>();
		String maxCount = idRuleService.getMaxCount(defineCode, false);
		if ("-1".equals(maxCount) || "-2".equals(maxCount)) {
			result.faliure();
			if ("-1".equals(maxCount)) {
				result.getDebugInfo().addErrDesc("规则定义编码不存在!");
			} else {
				result.getDebugInfo().addErrDesc("系统异常!");
			}
		}
		result.setResult(maxCount);
		return result;
	}

	/**
	 * @see com.xinleju.erp.flow.service.api.extend.BaseAPI#getNextBizCode(java.lang.String)
	 */

	public FlowResult<String> getNextBizCode(String defineCode) {
		FlowResult<String> result = new FlowResult<String>();
		String maxCount = idRuleService.getMaxCount(defineCode, true);
		if ("-1".equals(maxCount) || "-2".equals(maxCount)) {
			result.faliure();
			if ("-1".equals(maxCount)) {
				result.getDebugInfo().addErrDesc("规则定义编码不存在!");
			} else {
				result.getDebugInfo().addErrDesc("系统异常!");
			}
		}
		result.setResult(maxCount);
		return result;
	}

	public FlowResult<List<OrgnDTO>> findRootOrgns(String[] includeTypes) {
		FlowResult<List<OrgnDTO>> result = new FlowResult<List<OrgnDTO>>();
		List<PartyStruct> roots = psDao.findRootPartyStruct(includeTypes);
		List<OrgnDTO> dtos = OrgnUtils.buildOrgnDtoList(roots);
		result.setResult(dtos);
		return result;
	}

	public FlowResult<List<OrgnDTO>> findSubOrgns(Long parentId,
			String[] includeTypes) {
		FlowResult<List<OrgnDTO>> result = new FlowResult<List<OrgnDTO>>();
		FlowUtils.checkParams(result, "parentId", parentId);
		if (result.isSuccess()) {
			List<PartyStruct> subOrgns = psDao.findSubPartyStruct(parentId,
					includeTypes);
			List<OrgnDTO> dtos = OrgnUtils.buildOrgnDtoList(subOrgns);
			result.setResult(dtos);
		}
		return result;
	}

	public FlowResult<OrgnDTO> getParentOrgnByChildId(Long childId) {
		FlowResult<OrgnDTO> result = new FlowResult<OrgnDTO>();
		FlowUtils.checkParams(result, "parentId", childId);
		if (result.isSuccess()) {
			PartyStruct subOrgns = psDao.getStructByChildEntityId(childId);
			OrgnDTO dtos = OrgnUtils.buildOrgnDto(subOrgns);
			result.setResult(dtos);
		}
		return result;
	}

	public FlowResult<PageBean<UserDTO>> getUserList(Long peId, String name, Integer start, Integer limit, Boolean includeAllSubOrgns, Map<String, Object> extParm) {
		FlowResult<PageBean<UserDTO>> result = new FlowResult<PageBean<UserDTO>>();
		//张方志需求，需要查出已离职的人员 2017.01.18
//		Page page = userDao.findUserByOrgnId(peId, name, start, limit, includeAllSubOrgns);
		Page page = userDao.findUserByOrgnId(peId, name, start, limit, includeAllSubOrgns,extParm);
		List<UserDTO> dtos = UserUtils.buildUserDtoList(page.getItems());
		result.setResult(new PageBean<UserDTO>(start, limit, page.getTotal(), dtos));
		return result;
	}

	public FlowResult<UserDTO> getUserById(Long userId) {
		FlowResult<UserDTO> result = new FlowResult<UserDTO>();
		FlowUtils.checkParams(result, "userId", userId);
		if (result.isSuccess()) {
			User user = userDao.getDao().getById(User.class, userId);
			UserDTO dto = UserUtils.buildUserDto(user);
			result.setResult(dto);
		}
		return result;
	}

	public FlowResult<List<RoleDTO>> getRootStandardRoles() {
		return this.getRootStandardRoles(false);
	}

	public FlowResult<List<RoleDTO>> getRootStandardRoles(
			Boolean includeDisabled) {
		FlowResult<List<RoleDTO>> result = new FlowResult<List<RoleDTO>>();
		List<Role> roles = roleDao.findRootRole(includeDisabled);
		result.setResult(RoleUtils.buildRoleDtoList(roles));
		return result;
	}

	public FlowResult<List<RoleDTO>> getSubStandardRoles(Long parentId) {
		return this.getSubStandardRoles(parentId, true);
	}

	public FlowResult<List<RoleDTO>> getSubStandardRoles(Long parentId,
			Boolean includeDisabled) {
		FlowResult<List<RoleDTO>> result = new FlowResult<List<RoleDTO>>();
		FlowUtils.checkParams(result, "parentId", parentId);
		if (result.isSuccess()) {
			List<Role> roles = roleDao.findChildRoleAll(parentId,
					includeDisabled);
			result.setResult(RoleUtils.buildRoleDtoList(roles));
		}
		return result;
	}

	public FlowResult<RoleDTO> getMainRole(String loginName) {
		FlowResult<RoleDTO> result = new FlowResult<RoleDTO>();
		FlowUtils.checkParams(result, "loginName", loginName);
		if (result.isSuccess()) {
			Role role = userDao.findUserMainRoleByLoginName(loginName);
			result.setResult(RoleUtils.buildRoleDto(role));
		}
		return result;
	}

	public FlowResult<RoleDTO> getMainRole(Long userId) {
		FlowResult<RoleDTO> result = new FlowResult<RoleDTO>();
		FlowUtils.checkParams(result, "userId", userId);
		if (result.isSuccess()) {
			Role role = userDao.findUserMainRoleById(userId);
			result.setResult(RoleUtils.buildRoleDto(role));
		}
		return result;
	}

	public FlowResult<RoleDTO> getRoleByCompanyId(Long standardRoleId,
			Long companyId) {
		FlowResult<RoleDTO> result = new FlowResult<RoleDTO>();
		FlowUtils.checkParams(result, "standardRoleId", standardRoleId,
				"companyId", companyId);
		if (result.isSuccess()) {
			try {
				Role role = roleDao.getRoleByStandRoleInScope(standardRoleId,
						companyId, PartyType.TYPE_COMPANY);
				result.setResult(RoleUtils.buildRoleDto(role));
			} catch (Exception e) {
				result.faliure();
				result.getDebugInfo().addErrDesc(
						ExceptionUtils.getStackTrace(e));
			}
		}
		return result;
	}

	public FlowResult<RoleDTO> getRoleByTeamId(Long standardRoleId, Long teamId) {
		FlowResult<RoleDTO> result = new FlowResult<RoleDTO>();
		FlowUtils.checkParams(result, "standardRoleId", standardRoleId,
				"teamId", teamId);
		if (result.isSuccess()) {
			try {
				Role role = roleDao.getRoleByStandRoleInScope(standardRoleId,
						teamId, PartyType.TYPE_GROUP);
				result.setResult(RoleUtils.buildRoleDto(role));
			} catch (Exception e) {
				result.faliure();
				result.getDebugInfo().addErrDesc(
						ExceptionUtils.getStackTrace(e));
			}
		}
		return result;
	}

	public FlowResult<RoleDTO> getRoleByRoleId(Long standardRoleId, Long roleId) {
		FlowResult<RoleDTO> result = new FlowResult<RoleDTO>();
		FlowUtils.checkParams(result, "standardRoleId", standardRoleId,
				"roleId", roleId);
		if (result.isSuccess()) {
			try {
				Role role = roleDao.getRoleByStandRoleInScope(standardRoleId,
						roleId, PartyType.TYPE_ROLE);
				result.setResult(RoleUtils.buildRoleDto(role));
			} catch (Exception e) {
				result.faliure();
				result.getDebugInfo().addErrDesc(
						ExceptionUtils.getStackTrace(e));
			}
		}
		return result;
	}

	public FlowResult<Boolean> undo(String bizId, Long sodId, Long userId) {
		return this.undo(bizId,
				formFlowService.getDefaultFlowCodeBySodIdAndBizId(sodId),
				userId);
	}

	public FlowResult<Boolean> undo(String bizId, String flowCode, Long userId) {
		FlowResult<Boolean> result = new FlowResult<Boolean>();
		result.setResult(true);
		Long fiId = formFlowService.getFiIdByFlowCodeAndBizId(flowCode, bizId);
		if (null != fiId && fiId.intValue() > 0) {
			FlowResult<SimpleResult> r = flowServerService.terminateFi(fiId,
					WsConstant.FLOW_TERMINATE_CODE_ZF, userId, null);
			if (!r.isSuccess()) {
				result.faliure();
				result.setResult(false);
				result.setDebugInfo(r.getDebugInfo());
			}
		} else {
			result.faliure();
			result.setResult(false);
			result.getDebugInfo().addErrDesc(
					"找不到bizId：" + bizId + ",flowCode:" + flowCode + "对应的审批流！");
		}
		return result;
	}

	public FlowResult<Boolean> finishFi(String bizId, Long sodId, Long userId) {
		return this.finishFi(bizId,
				formFlowService.getDefaultFlowCodeBySodIdAndBizId(sodId),
				userId);
	}

	public FlowResult<Boolean> finishFi(String bizId, String flowCode,
			Long userId) {
		FlowResult<Boolean> result = new FlowResult<Boolean>();
		result.setResult(true);
		Long fiId = formFlowService.getFiIdByFlowCodeAndBizId(flowCode, bizId);
		if (null != fiId && fiId.intValue() > 0) {
			FlowResult<SimpleResult> r = flowServerService.completeFi(fiId,
					userId, OpType.SYS_TG_NAME, OpType.SYS_TG + ";"
							+ OpType.SYS_TG_NAME);
			if (!r.isSuccess()) {
				result.faliure();
				result.setResult(false);
				result.setDebugInfo(r.getDebugInfo());
			}
		} else {
			result.faliure();
			result.setResult(false);
			result.getDebugInfo().addErrDesc(
					"找不到bizId：" + bizId + ",flowCode:" + flowCode + "对应的审批流！");
		}
		return result;
	}

	public FlowResult<Boolean> giveBackFi(String bizId, Long sodId, Long userId) {
		return this.giveBackFi(bizId,
				formFlowService.getDefaultFlowCodeBySodIdAndBizId(sodId),
				userId);
	}

	public FlowResult<Boolean> giveBackFi(String bizId, String flowCode,
			Long userId) {
		FlowResult<Boolean> result = new FlowResult<Boolean>();
		result.setResult(true);
		Long fiId = formFlowService.getFiIdByFlowCodeAndBizId(flowCode, bizId);
		if (null != fiId && fiId.intValue() > 0) {
			FlowResult<GiveBackResult> r = flowServerService.giveBack(fiId,
					userId, true, WsConstant.FLOW_TERMINATE_CODE_CH);
			if (!r.isSuccess()) {
				result.faliure();
				result.setResult(false);
				result.setDebugInfo(r.getDebugInfo());
			}
		} else {
			result.faliure();
			result.setResult(false);
			result.getDebugInfo().addErrDesc(
					"找不到bizId：" + bizId + ",flowCode:" + flowCode + "对应的审批流！");
		}
		return result;
	}

	public FlowResult<Boolean> finishFiBranch(String bizId, String flowCode,
			String endTag, Long userId) {
		FlowResult<Boolean> result = new FlowResult<Boolean>();
		result.setResult(true);
		Long fiId = formFlowService.getFiIdByFlowCodeAndBizId(flowCode, bizId);
		if (null != fiId && fiId.intValue() > 0) {
			FlowResult<SimpleResult> r = flowServerService.finishFiBranch(fiId,
					endTag, userId);
			if (!r.isSuccess()) {
				result.faliure();
				result.setResult(false);
				result.setDebugInfo(r.getDebugInfo());
			}
		} else {
			result.faliure();
			result.setResult(false);
			result.getDebugInfo().addErrDesc(
					"找不到bizId：" + bizId + ",flowCode:" + flowCode + "对应的审批流！");
		}
		return result;
	}

	/**
	 * @see com.xinleju.erp.flow.service.api.extend.BaseAPI#getAiList(java.lang.Long)
	 */
	public FlowResult<List<AiBean>> getAiList(Long fiId) {
		return flowServerService.getAiList(fiId);
	}

	public FlowResult<FlowInsDTO> getFlowInsByFlowCodeAndBizId(String flowCode,
			String bizId) {
		FlowResult<FlowInsDTO> result = new FlowResult<FlowInsDTO>();
		Fi fi = formFlowService.getFiByFlowCodeAndBizId(flowCode, bizId);
		if (null != fi && null != fi.getId()) {
			FlowInsDTO flowInsDTO = new FlowInsDTO();
			flowInsDTO.setCompleteTime(fi.getCompleteTime());
			flowInsDTO.setFlowInsId(fi.getId());
			flowInsDTO.setFlowInsName(fi.getFiName());
			flowInsDTO.setGoodNodeIds(null);
			flowInsDTO.setIsBackedFi(fi.getIsBackedFi());
			UserDTO userDTO = new UserDTO();
			userDTO.setId(fi.getStartUserId());
			userDTO.setLoginName(fi.getCompleteUserLoginName());
			userDTO.setRealName(fi.getCompleteUserName());
			flowInsDTO.setOwnerUser(userDTO);
			flowInsDTO.setStartDate(DateUtils.formatDate(fi.getStartTime()));
			userDTO = new UserDTO();
			userDTO.setId(fi.getStartUserId());
			userDTO.setLoginName(fi.getCompleteUserLoginName());
			userDTO.setRealName(fi.getCompleteUserName());
			flowInsDTO.setStartUser(userDTO);
			flowInsDTO.setStatus(fi.getStatus());
			result.success();
			result.setResult(flowInsDTO);
		} else {
			result.faliure();
			result.setResult(new FlowInsDTO());
			result.getDebugInfo().addErrDesc(
					"找不到bizId：" + bizId + ",flowCode:" + flowCode + "对应的审批流！");
		}
		return result;
	}
	
 

	/**
	 * @see com.xinleju.erp.flow.service.api.extend.BaseAPI#canUseFlow(java.lang.String,java.lang.Long)
	 */
	public FlowResult<Boolean> canUseFlow(String flowCode, Long userId) {
		FlowResult<Boolean> result = new FlowResult<Boolean>();
		result.setResult(flowServerService.canUseFlow(flowCode, userId));
		return result;
	}

	/**
	 * @see com.xinleju.erp.flow.service.api.extend.BaseAPI#getRootCategories()
	 */

	public FlowResult<List<CategoryDTO>> getRootCategories() {
		FlowResult<List<CategoryDTO>> flowResult = new FlowResult<List<CategoryDTO>>();
		flowResult.setResult(ctService.getCategoryDTOList(null, null));
		return flowResult;
	}

	/**
	 * @see com.xinleju.erp.flow.service.api.extend.BaseAPI#getSubCategories(java.lang.Long)
	 */
	public FlowResult<List<CategoryDTO>> getSubCategories(Long parentId) {
		FlowResult<List<CategoryDTO>> flowResult = new FlowResult<List<CategoryDTO>>();
		if (null != parentId && parentId.intValue() > 0) {
			flowResult.setResult(ctService.getCategoryDTOList(parentId, null));
		}
		return flowResult;
	}

	/**
	 * @see com.xinleju.erp.flow.service.api.extend.BaseAPI#getFlows(java.lang.Long,
	 *      int, int, java.util.Map)
	 */

	public FlowResult<PageBean<FlowDTO>> getFlows(Long categoryId,
			Integer start, Integer limit, Map<String, Object> extParm) {
		FlowResult<PageBean<FlowDTO>> flowResult = new FlowResult<PageBean<FlowDTO>>();
		flowResult.setResult(flDAO.getFlowDTOPage(categoryId, start, limit,
				extParm));
		return flowResult;
	}

	/**
     * 
     */
	public FlowResult<Map<String, String>> getFlowNamesMapByFlowCodes(
			String... flowCodes) {
		FlowResult<Map<String, String>> flowResult = new FlowResult<Map<String, String>>();
		flowResult.setResult(flDAO.getFlowNamesMapByFlowCodes(flowCodes));
		return flowResult;
	}

	/**
	 * @see com.xinleju.erp.flow.service.api.extend.BaseAPI#store(java.lang.String,
	 *      java.lang.String, java.lang.String, java.lang.String,
	 *      java.lang.String, java.lang.String)
	 */

	public FlowResult<Boolean> store(String module, String storeType,
			String contentType, String contentId, String title, String url) {

		return null;
	}

	/**
	 * @see com.xinleju.erp.flow.service.api.extend.BaseAPI#unstore(java.lang.String,
	 *      java.lang.String, java.lang.String, java.lang.String)
	 */

	public FlowResult<Boolean> unstore(String module, String storeType,
			String contentType, String contentId) {

		return null;
	}

	/**
	 * @see com.xinleju.erp.flow.service.api.extend.BaseAPI#isStored(java.lang.String,
	 *      java.lang.String, java.lang.String, java.lang.String)
	 */

	public FlowResult<Boolean> isStored(String module, String storeType,
			String contentType, String contentId) {

		return null;
	}

	public FlowResult<List<CompanyDTO>> getAllCompany(Boolean includeDisabled) {
		FlowResult<List<CompanyDTO>> result = new FlowResult<List<CompanyDTO>>();
		List<Company> companys = companyDao.getAllCompany(includeDisabled);
		List<CompanyDTO> list = CompanyUtils.buildCompanyDtoList(companys);
		if (list == null) {
			result.setResult(new ArrayList<CompanyDTO>());
		} else {
			result.setResult(list);
		}

		return result;
	}
	
	
	@Override
	public FlowResult<List<CompanyDTO>> getAllCompanyLevel(
			Boolean includeDisabled) {
		// TODO Auto-generated method stub
		FlowResult<List<CompanyDTO>> result = new FlowResult<List<CompanyDTO>>();
		

		return result;
	}
	
	
	
	

	public FlowResult<CompanyDTO> getCompanyById(Long id) {
		FlowResult<CompanyDTO> result = new FlowResult<CompanyDTO>();
		FlowUtils.checkParams(result, "id", id);
		if (result.isSuccess()) {
			Company comp = companyDao.getDao().getById(Company.class, id);
			CompanyDTO dto = CompanyUtils.buildCompanyDto(comp);
			result.setResult(dto);
		}
		return result;
	}
	
	

	




	/**
	 * @see com.xinleju.erp.flow.service.api.extend.BaseAPI#updateFlowData(java.lang.String,
	 *      java.util.Map)
	 */
	@Override
	public FlowResult<Boolean> updateFlowData(String bizId, String soCode,
			Map<String, Object> arg1) {

		FlowResult<Boolean> r = new FlowResult<Boolean>();

		GvsService.update(bizId, soCode, arg1);

		r.setResult(true);
		r.isSuccess();
		return r;
	}

	public FlowResult<UserDTO> getUserByLoginName(String loginName) {
		FlowResult<UserDTO> result = new FlowResult<UserDTO>();
		FlowUtils.checkParams(result, "loginName", loginName);
		if (result.isSuccess()) {
			User user = userDao.findUserByLoginName(loginName);
			UserDTO dto = UserUtils.buildUserDto(user);
			result.setResult(dto);
		}
		return result;
	}
	

	public FlowResult<List<UserDTO>> getUserByRealName(String realName) {
		FlowResult<List<UserDTO>> result = new FlowResult<List<UserDTO>>();
		//FlowUtils.checkParams(result, "realName", realName);
		//if (result.isSuccess()) {
			List<User> userList = userDao.findUserByRealName(realName);
			result.setResult(UserUtils.buildUserDtoList(userList));
		//}
		return result;
	}

	public FlowResult<DeptDTO> getDeptById(Long deptId) {
		FlowResult<DeptDTO> result = new FlowResult<DeptDTO>();
		FlowUtils.checkParams(result, "deptId", deptId);
		if (result.isSuccess()) {
			Dept dept = deptDao.getDao().getById(Dept.class, deptId);
			DeptDTO dto = DeptUtils.buildDeptDto(dept);
			result.setResult(dto);
		}
		return result;
	}

	public FlowResult<List<DeptDTO>> getUserDepts(String loginName) {
		FlowResult<List<DeptDTO>> result = new FlowResult<List<DeptDTO>>();
		// FlowUtils.checkParams(result, "loginName",loginName);
		// if(result.isSuccess()) {
		// List<Dept> depts = userDao.getUserDepts(loginName);
		// List<DeptDTO> dtos = DeptUtils.buildDeptDtoList(depts);
		// result.setResult(dtos);
		// }
		// return result;
		User user = userDao.findUserByLoginName(loginName);
		FlowUtils.checkParams(result, "loginName", loginName);
		if (result.isSuccess()) {
			List<Long> companyIds = new ArrayList<Long>();
			// List<Long> pss =
			// partyStructDao.findPartyStructRefIdByChildPartyEntityRefId(user.getId(),
			// "department");
			List<Long> pss = partyStructDao
					.findPartyStructRefIdByChildPartyEntityRefIdAndType(
							user.getId(), "3", "6");
			companyIds.addAll(pss);
			List<Long> pss2 = partyStructDao
					.findPartyStructRefIdByChildPartyEntityRefIdAndType(
							user.getId(), "5", "6");

			List<Long> temp = null;

			for (Long l : pss2) {
				temp = partyStructDao.findPartyStructRefIdByChildPartyEntityId(
						l, "department");
				if (temp != null)
					companyIds.addAll(temp);
				temp = null;
			}

			result = getDeptListByIds(StringHelper.join(companyIds, "','")
					.split("','"));
		}

		return result;
	}

	public FlowResult<List<DeptDTO>> getDeptListByIds(String[] deptIds) {
		FlowResult<List<DeptDTO>> fr = new FlowResult<List<DeptDTO>>();
		List<Dept> deptList = deptDao.getDeptByIds(false, deptIds);
		List<DeptDTO> dtoList = DeptUtils.buildDeptDtoList(deptList);
		fr.setResult(dtoList);
		return fr;
	}

	/**
	 * @see com.xinleju.erp.flow.service.api.extend.BaseAPI#initGroupPartyStruct(com.xinleju.erp.flow.service.api.extend.dto.GroupDTO)
	 */
	public FlowResult<SimpleResult> initGroupPartyStruct(GroupDTO groupDTO) {
		FlowResult<SimpleResult> r = new FlowResult<SimpleResult>();
		FlowUtils.checkParams(r, "groupDTO", groupDTO);
		if (r.isSuccess()) {
			FlowUtils.checkParams(r, "groupDTO.code", groupDTO.getCode(),
					"groupDTO.name", groupDTO.getName(),
					"groupDTO.refObjectId", groupDTO.getRefObjectId());
			if (r.isSuccess()) {
				if (groupDTO.getIsDelete() != null
						&& groupDTO.getIsDelete().intValue() == 1) {
					boolean isSuccess = com.xinleju.erp.base.app.config.App
							.getBean(PartyStructService.class)
							.deleteGroupPartyStruct(groupDTO);
					if (!isSuccess) {
						r.faliure();
						r.getDebugInfo().addErrDesc("同步项目信息失败，无法从组织机构中删除项目！");
					}
				} else {
					boolean isSuccess = com.xinleju.erp.base.app.config.App
							.getBean(PartyStructService.class)
							.initGroupPartyStruct(groupDTO);
					if (!isSuccess) {
						r.faliure();
						r.getDebugInfo().addErrDesc("同步项目信息失败！");
					}
				}
			}
		}
		return r;
	}

	/**
	 * @see com.xinleju.erp.flow.service.api.extend.BaseAPI#getMsgList(com.xinleju.erp.flow.flowutils.bean.MsgDTO,
	 *      int, int)
	 */
	public FlowResult<PageBean<MsgDTO>> getMsgList(MsgDTO msgDTO,
			Integer start, Integer limit) {
		FlowResult<PageBean<MsgDTO>> result = new FlowResult<PageBean<MsgDTO>>();
		msgDTO.setModuleCode(null);
		if (null == msgDTO) {
			result.faliure();
			result.getDebugInfo().addErrDesc("检索条件不能为空!");
			result.setResult(new PageBean<MsgDTO>());
			return result;
		}

		if (StringUtils.isNotBlank(msgDTO.getModuleCode())) {
			App app = getDao().getByProperty(App.class, "code",
					msgDTO.getModuleCode());
			if (app == null) {
				result.faliure();
				result.getDebugInfo().addErrDesc("所属模块编码不存在!");
				result.setResult(new PageBean<MsgDTO>());
				return result;
			}
		}
		String opType = msgDTO.getOpType();
		if (!Msg.OP_TYPE_DB.equals(opType) && !Msg.OP_TYPE_YB.equals(opType)
				&& !Msg.OP_TYPE_YD.equals(opType)
				&& !Msg.OP_TYPE_WD.equals(opType)) {
			result.faliure();
			result.getDebugInfo().addErrDesc("消息操作类型不正确!");
			result.setResult(new PageBean<MsgDTO>());
			return result;
		}

		if (Msg.MSG_TYPE_DB != msgDTO.getMsgType()
				&& Msg.MSG_TYPE_TZ != msgDTO.getMsgType()) {
			result.faliure();
			result.getDebugInfo().addErrDesc("消息类型不正确!");
			result.setResult(new PageBean<MsgDTO>());
			return result;
		}
		// 查询数据
		if (result.isSuccess()) {
			result.success();
			if (null == start) {
				start = 0;
			}
			if (null == limit) {
				limit = 20;
			}
			result.setResult(msgService.getMsgList(msgDTO, start, limit));
		}

		return result;
	}

	/**
	 * @see com.xinleju.erp.flow.service.api.extend.BaseAPI#getMsgCount(com.xinleju.erp.flow.flowutils.bean.MsgDTO)
	 */
	public FlowResult<Integer> getMsgCount(MsgDTO msgDTO) {
		String loginName = msgDTO.getLoginName();
		FlowResult<Integer> result = new FlowResult<Integer>();
		if (null == msgDTO) {
			result.faliure();
			result.getDebugInfo().addErrDesc("检索条件不能为空!");
			result.setResult(0);
			return result;
		}

		if (StringUtils.isNotBlank(msgDTO.getModuleCode())) {
			App app = getDao().getByProperty(App.class, "code",
					msgDTO.getModuleCode());
			if (app == null) {
				result.faliure();
				result.getDebugInfo().addErrDesc("所属模块编码不存在!");
				result.setResult(0);
				return result;
			}
		}
		String opType = msgDTO.getOpType();
		if (!Msg.OP_TYPE_DB.equals(opType) && !Msg.OP_TYPE_YB.equals(opType)
				&& !Msg.OP_TYPE_YD.equals(opType)
				&& !Msg.OP_TYPE_WD.equals(opType)) {
			result.faliure();
			result.getDebugInfo().addErrDesc("消息操作类型不正确!");
			result.setResult(0);
			return result;
		}

		if (Msg.MSG_TYPE_DB != msgDTO.getMsgType()
				&& Msg.MSG_TYPE_TZ != msgDTO.getMsgType()) {
			result.faliure();
			result.getDebugInfo().addErrDesc("消息类型不正确!");
			result.setResult(0);
			return result;
		}

		// 查询数据
		if (result.isSuccess()) {
			result.success();
			result.setResult(msgService.getMsgCount(msgDTO));
		}

		return result;
	}

	/**
	 * @see com.xinleju.erp.flow.service.api.extend.BaseAPI#getToDoBeanByWiId(java.lang.Long)
	 */

	public FlowResult<ToDoBean> getToDoBeanByWiId(Long wiId, String category) {
		FlowResult<ToDoBean> result = new FlowResult<ToDoBean>();
		FlowUtils.checkParams(result, "wiId", wiId);
		if (result.isSuccess()) {
			result.setResult(toDoService.getToDoBean(wiId, category));
		}
		return result;
	}

	public FlowResult<ToDoBean> getTodoBeanByWiId4Mobile(Long fiId,
			String category) {
		FlowResult<ToDoBean> result = new FlowResult<ToDoBean>();
		FlowUtils.checkParams(result, "fiId", fiId);
		if (result.isSuccess()) {
			result.setResult(toDoService.getToDoBeanForMobile(fiId, category));
		}
		return result;
	}

	/**
	 * @see com.xinleju.erp.flow.service.api.extend.BaseAPI#completeWork(java.lang.Long,
	 *      java.lang.Long, java.lang.String, java.lang.String,
	 *      java.lang.String, java.lang.Long, java.lang.String, java.lang.Long,
	 *      java.lang.String, java.lang.String)
	 */
	@Override
	public FlowResult<SimpleResult> completeWork(Long opUserId, Long wiId,
			String userNote, String opCode, String opName, Long opRoleId,
			String dealUsersIds, Long backToWpId, String backSkip,
			String flowInsName) {
		
		FlowResult<SimpleResult> r = new FlowResult<SimpleResult>();
		try {
			userNote = URLEncoder.encode(
					StringUtils.isNotBlank(userNote) ? userNote : "", "UTF-8");
		} catch (UnsupportedEncodingException e1) {
			// e1.printStackTrace();
		}
		Map<String, Object> dealMap = formFlowService.checkCompleteWork(
				opRoleId, wiId, opCode, opName, userNote, dealUsersIds,
				backToWpId, backSkip, flowInsName, opUserId);
		if ((Boolean) dealMap.get("success")) {
			try {
				FlowResult<UserDTO> user = this.getUserById(opUserId);
				dealMap = formFlowService.completeWork(opRoleId, wiId, opCode,
						opName, userNote, dealUsersIds, backToWpId, backSkip,
						flowInsName, user.getResult());
				//发送消息
				Wi wbe = formFlowService.getWi(wiId);
				oaMsgServiceImpl.sendMsgByFiId(wbe.getFiId());
			} catch (Exception e) {
				dealMap.put("success", false);
				dealMap.put("msg", "操作失败！");
			}
		}
		if ((Boolean) dealMap.get("success")) {
			r.success();
			r.getDebugInfo().addErrDesc("操作成功!");

		} else {
			r.faliure();
			r.getDebugInfo().addErrDesc((String) dealMap.get("msg"));
		}
		return r;
	}

	/**
	 * 根据登录名和流程ID获取部门ID（PartyENtity Id）
	 * 
	 * @param loginName
	 * @param wiId
	 * @return
	 */
	@Override
	public FlowResult<Long> getDeptOrgnIdByLoginNameAndWiId(String loginName,
			Long wiId) {
		FlowResult<Long> fr = new FlowResult<Long>();
		fr.setResult(formFlowService.getDeptOrgnIdByLoginNameAndWiId(loginName,
				wiId));
		return fr;
	}

	/**
	 * 添加邮件到发送队列
	 */

	public FlowResult<Boolean> saveMail(MailDTO mailDto) {
		FlowResult<Boolean> result = new FlowResult<Boolean>();
		result.setResult(true);
		Boolean flag = saveMailService.saveMailContent(mailDto);
		if (flag == false) {
			result.faliure();
			result.setResult(false);
		}
		return result;
	}

	// @Override
	public FlowResult<Boolean> saveSm(SmDTO smDto) {
		FlowResult<Boolean> result = new FlowResult<Boolean>();
		result.setResult(true);
		Boolean flag = saveSmService.saveSmContent(smDto);
		if (flag == false) {
			result.faliure();
			result.setResult(false);
		}
		return result;
	}

	/**
	 * 根据范围id得到项目分期id
	 * 
	 * @param scopeId
	 * @return FlowResult<List<Long>>
	 */

	public FlowResult<List<Long>> getProjectBranchByScopeId(
			String authUserLoginName, Long scopeId, Long type) {
		FlowResult<List<Long>> fr = new FlowResult<List<Long>>();
		// 得到该 用户下的岗位列表
		FlowResult<List<PostDTO>> pdList = new FlowResult<List<PostDTO>>();
		User user = userDao.findUserByLoginName(authUserLoginName);
		if (user != null) {
			pdList = getPostListByUserId(user.getId());
		}

		List<Long> projectIds = new ArrayList<Long>();
		// 根据范围取角色 id
		List<BizDataRole> bdr = bizDataRoleDao.getRoleIdByScopeId(scopeId);
		if (bdr != null && bdr.size() > 0) {
			String rids = "";// 组装得到的角色id
			for (BizDataRole b : bdr) {
				if ("".equals(rids))
					rids = String.valueOf(b.getRoleId());
				else
					rids = rids + "," + b.getRoleId();
			}
			String roleId = "";// 存储岗位id
			// 根据角色id来查询岗位id
			List<Role> rss = roleDao.getRoleByParentIds(rids);

			for (Role r : rss) {
				boolean flag = false;
				if (pdList != null && pdList.getResult() != null
						&& pdList.getResult().size() > 0) {
					for (PostDTO pd : pdList.getResult()) {
						if (pd.getId() == r.getId()) {
							flag = true;
							break;
						}
					}
				}
				if (r != null && flag == true) {
					// 组装岗位id
					if ("".equals(roleId))
						roleId = String.valueOf(r.getId());
					else
						roleId = roleId + "," + r.getId();
				}
			}
			// 根据岗位id来查询项目树主键
			List<Long> projectTreeIds = new ArrayList<Long>();
			if (!"".equals(roleId))
				projectTreeIds = partyStructDao
						.findProjectBranchsByRoleId(roleId);
			// 根据prefix的组装值分析出项目树主键，再根据此id查询sm_group项目树主表得到项目id
			if (projectTreeIds != null && projectTreeIds.size() > 0) {
				for (Long s : projectTreeIds) {
					if (s != null) {
						Group g = groupDao.getGroupById(s, type);
						if (g != null && g.getRefObjectId() != null)
							projectIds.add(g.getRefObjectId());
					}
				}
			}
		}
		fr.setResult(projectIds);
		return fr;
	}

	public FlowResult<List<PostDTO>> getPostListByUserId(Long userId) {
		List<Long> pss = partyStructDao
				.findPartyStructRefIdByChildPartyEntityRefIdAndType(userId,
						"5", "6");
		FlowResult<List<PostDTO>> fr = new FlowResult<List<PostDTO>>();
		fr.setResult(PostUtils.buildPostDtoList(roleDao.getRoleListByIds("'"
				+ StringHelper.join(pss, "','") + "'")));
		return fr;
	}

	public FlowResult<Boolean> saveLog(Long userId, String moduleCode, String funcName, String url, String loginfo, String errorMsg, String returnMsg, String sign, Long type) {
		FlowResult<Boolean> fr = new FlowResult<Boolean>();
//		String ipAddress = request.getRemoteAddr();//返回发出请求的IP地址
		LogRecord lr = new LogRecord();
		lr.setModuleCode(moduleCode);
		lr.setFuncName(funcName);
		lr.setLoginName("");
		lr.setUrl(url);
		lr.setLogInfo(loginfo);
		lr.setErrorMsg(errorMsg);
		lr.setReturnMsg(returnMsg);
		lr.setSign(sign);
		lr.setType(type);
		lr.setCreateDate(new Date());
		lr.setCreateUserId(userId);
		lr.setCompany("");
		lr.setIpAddress("");
		appDao.saveLogRecord(lr);
		return fr;
	}
	
	
	public FlowResult<Boolean> saveLog(String ipAddress,Long userId,String loginName, String moduleCode, String funcName, String url, String loginfo, String errorMsg, String returnMsg, String sign, Long type) {
		String sql = "SELECT DISTINCT y.name FROM sm_party_entity y LEFT JOIN sm_party_type t ON y.party_type_id = t.id LEFT JOIN sm_party_entity yyy ON "+DbType.getType()+"locate (y.prefix, yyy.prefix)>0 LEFT JOIN sm_party_type ttt ON yyy.party_type_id = ttt.id left join sm_company c on c.id=y.ref_id  WHERE c.status=0   and  t.type = 'company' AND ttt.type = 'user' AND yyy.ref_id =?";
		List<String> companyList = com.xinleju.erp.base.app.config.App.getBean(JdbcTemplate.class).queryForList(sql, new Object[] { userId }, String.class);
		StringBuffer stringBuffer = new StringBuffer();
		if (!companyList.isEmpty()) {
			for (String str : companyList) {
				stringBuffer.append(str + ",");
			}
		}
		if (!StringUtils.isEmpty(stringBuffer)) {
			stringBuffer = stringBuffer.deleteCharAt(stringBuffer.length() - 1);
		}
		FlowResult<Boolean> fr = new FlowResult<Boolean>();
		LogRecord lr = new LogRecord();
		lr.setModuleCode(moduleCode);
		lr.setFuncName(funcName);
		lr.setUrl(url);
		lr.setLoginName(loginName);
		lr.setLogInfo(loginfo);
		lr.setErrorMsg(errorMsg);
		lr.setReturnMsg(returnMsg);
		lr.setSign(sign);
		lr.setType(type);
		lr.setCompany(stringBuffer.toString());
		lr.setCreateDate(new Date());
		lr.setCreateUserId(userId);
		lr.setIpAddress(ipAddress);
		appDao.saveLogRecord(lr);
		
		if (loginName.equals("Admin")) {
			AdminLog logr = new AdminLog();
			logr.setVisitDate(new Date());
			logr.setFuncName(funcName);
			logr.setVisitLoginName("系统管理员");
			logr.setLoginName(loginName);
			logr.setActionName("");
			logr.setModuleCode(moduleCode);
			logr.setCompany("");
			logr.setLogInfo(loginfo);
			logr.setUrl("");
			logr.setCompany(stringBuffer.toString());
			logr.setSign(sign);
			logr.setIpAddress(ipAddress);
			appDao.saveAdminLog(logr);
		}
		return fr;
	}

	public void getRoleGeneralIdsByMembers(List<Long> roleIds) {
		// 取出符合的通用角色
		List<RoleGeneral> roleList = roleGeneralDao.getRoleGeneral();
		if (roleList != null && roleList.size() > 0) {
			for (RoleGeneral rg : roleList) {
				if (roleIds != null && !roleIds.isEmpty()) {
					for (Long lon : roleIds) {
						if (rg.getMembers().contains(lon + "_")) {
							roleIds.add(Long.parseLong(RoleGeneral.PRE
									+ rg.getId()));
							break;
						}
					}
				}
			}
		}
	}

	/* (non-Javadoc)
	 * @see com.xinleju.erp.flow.service.api.extend.BaseAPI#getMsgCreationList(java.lang.String, java.lang.Integer, java.lang.Integer)
	 */
	@Override
	public FlowResult<PageBean<MsgDTO>> getMsgCreationList(String loginName,
			Integer start, Integer limit) {
		FlowResult<PageBean<MsgDTO>> result = new FlowResult<PageBean<MsgDTO>>();
		Long userId = userDao.findUserIdByLoginName(loginName.trim());
		String startUserIdLimitSql = "";
		startUserIdLimitSql = " fi.start_user_id = " + userId;
		Page page = todoFiService.getTodoFiPageBySql(null, startUserIdLimitSql,
				userId, start, limit);
		List<Object[]> list = page.getItems();
		PageBean<MsgDTO> pageBean = new PageBean<MsgDTO>();
		if (null != list && list.size() > 0) {
			List msgDTOList = new ArrayList();
			for (Object[] obj : list) {
				MsgDTO msgDTO = new MsgDTO();
				msgDTO.setId(Long.valueOf( obj[0]+""));
				msgDTO.setTitle(obj[3] + "");
				msgDTO.setMsgId("Wi_" + obj[0]);
				msgDTOList.add(msgDTO);
			}
			pageBean.setItems(msgDTOList);
			pageBean.setStart(start);
			pageBean.setLimit(limit);
			pageBean.setTotal(page.getTotal());
			result.setResult(pageBean);
			result.setSuccess(true);
		}
		

		return result;
	}
	
	
	/**
	 * 获取我的发起
	 * @param loginName
	 * @param start
	 * @param limit
	 * @return
	 */
	public FlowResult<PageBean<MsgDTO>> getMsgNewCreationList(String loginName,
			Integer start, Integer limit) {
		FlowResult<PageBean<MsgDTO>> result = new FlowResult<PageBean<MsgDTO>>();
		MsgDTO msgDTO=new MsgDTO();
		msgDTO.setLoginName(loginName);
		msgDTO.setOpType(Msg.OP_TYPE_LC);
		// 查询数据
		if (result.isSuccess()) {
			result.success();
			if (null == start) {
				start = 0;
			}
			if (null == limit) {
				limit = 20;
			}
			result.setResult(msgService.getMsgList(msgDTO, start, limit));
		}

		
		return result;
	}

	public FlowResult<List<FuncDTO>> getFuncAuthByModuleCode(String moduleCode) {
		FlowResult<List<FuncDTO>> result = new FlowResult<List<FuncDTO>>();
		FlowUtils.checkParams(result, "moduleCode", moduleCode);
		if (result.isSuccess()) {
			result.setResult(authDao.getAuthFuncByModuleCode(moduleCode, null,
					true));
		}
		return result;
	}
  
	@Override
	public FlowResult<Boolean> autoCommitFlow(String bizId, String flowCode,
			Long userId,Long spGwId,String userNote) {
		FlowResult<Boolean> fr = new FlowResult<Boolean>();
		fr.setSuccess(false);
		/**
	     * 业务版本
	     */
	    String bizVersion=null;
	    Gvs gvs = Gvs.create();
	    FlowResult<UserDTO> user = this.getUserById(userId);
	    List<BizDataDTO> bizDataDTOList = new ArrayList<BizDataDTO>();
	 	//分支条件使用 ，调用外部参数
		try {
			Map<String, Object> map = com.xinleju.erp.base.app.config.App.getBean(SmObjectService.class).queryDetail(flowCode, bizId);
			if (null != map && map.size() > 0){
	        	for (Map.Entry<String, Object> e:  map.entrySet()){
	        		GvBean gb = new GvBean( e.getKey(),e.getValue(),"");
	        		gvs.add(gb);
	        	}	
	    	}
	    	//获取手机端表单数据  ，业务表单保存起来
	    	bizDataDTOList.addAll(com.xinleju.erp.base.app.config.App.getBean(SmBizDataService.class).queryBizData(flowCode, bizId, bizVersion));
	    	FlowResult<StartFiResult> startFiResult=flowServerService.startFi(flowCode, bizId,bizVersion,null, userId, gvs.toJSONString(), JSONObject.toJSONString(bizDataDTOList, SerializerFeature.WriteClassName), null);
	    	String opCode = "TJSP";
	        String opName = "提交审批";
	        Long wiId=startFiResult.getResult().getStartWiId();
	        Wi wbe = formFlowService.getWi(wiId);
	        Map<String, Object> result = formFlowService.completeWork(spGwId, wiId, opCode, opName, userNote, null, null, null, "发起本环节", user.getResult());
        	relationHrefService.saveRelationHref(new ArrayList(), "fiId_" + wbe.getFiId() + "_wiId_" + wbe.getId(), user.getResult());
            relationFiService.saveRelationFi(new ArrayList(), "fiId_" + wbe.getFiId() + "_wiId_" + wbe.getId(), user.getResult());
            fr.setSuccess(true);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        return fr;
	}

	@Override
	public FlowResult<List<FlowInsDTO>> getFlowInsByFlowCodeAndBizIds(
			String flowCode, List<String> bizIds) {
		// TODO Auto-generated method stub
		FlowResult<List<FlowInsDTO>> result = new FlowResult<List<FlowInsDTO>>();
		List<FlowInsDTO> list=new ArrayList<FlowInsDTO>();
		if(bizIds!=null && bizIds.size()>0){
			for(String bizId:bizIds){
				FlowResult<FlowInsDTO> resultFlowInsDTO=getFlowInsByFlowCodeAndBizId( flowCode,bizId);
				if(resultFlowInsDTO.isSuccess()){
					list.add(resultFlowInsDTO.getResult());
				}
			}
		}
		return result;
	}

	@Override
	public FlowResult<Boolean> rejectWi(Long wiId, String opCode,
			String opName, String userNote, Long backToWpId, String backSkip,
			String flowInsName, UserDTO userDto) {
		// TODO Auto-generated method stub
		FlowResult<Boolean> fr = new FlowResult<Boolean>();
		fr.setSuccess(false);
		fr.setResult(false);
		try {
			formFlowService.completeWork(null, wiId, opCode, opName, userNote, null, backToWpId, backSkip, null, userDto);
			fr.setSuccess(true);
			fr.setResult(true);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			
		}

		return fr;
	}

	@Override
	public FlowResult<PageBean<Object[]>> getGroupLoginNameMsgDTO(MsgDTO msgDTO,Integer start, Integer limit) {
		// TODO Auto-generated method stub
		FlowResult<PageBean<Object[]>> result = new FlowResult<PageBean<Object[]>>();
		if (null == msgDTO) {
			result.faliure();
			result.getDebugInfo().addErrDesc("检索条件不能为空!");
			result.setResult(new PageBean<Object[]>());
			return result;
		}
        /**
		if (StringUtils.isNotBlank(msgDTO.getModuleCode())) {
			App app = getDao().getByProperty(App.class, "code",
					msgDTO.getModuleCode());
			if (app == null) {
				result.faliure();
				result.getDebugInfo().addErrDesc("所属模块编码不存在!");
				result.setResult(new PageBean<Object[]>());
				return result;
			}
		}
		**/
		msgDTO.setModuleCode(null);
		String opType = msgDTO.getOpType();
		if (!Msg.OP_TYPE_DB.equals(opType) && !Msg.OP_TYPE_YB.equals(opType)
				&& !Msg.OP_TYPE_YD.equals(opType)
				&& !Msg.OP_TYPE_WD.equals(opType)) {
			result.faliure();
			result.getDebugInfo().addErrDesc("消息操作类型不正确!");
			result.setResult(new PageBean<Object[]>());
			return result;
		}

		if (Msg.MSG_TYPE_DB != msgDTO.getMsgType()
				&& Msg.MSG_TYPE_TZ != msgDTO.getMsgType()) {
			result.faliure();
			result.getDebugInfo().addErrDesc("消息类型不正确!");
			result.setResult(new PageBean<Object[]>());
			return result;
		}
		// 查询数据
		if (result.isSuccess()) {
			result.success();
			if (null == start) {
				start = 0;
			}
			if (null == limit) {
				limit = 20;
			}
			
			result.setResult(msgService.getGroupLoginNameMsgDTO(msgDTO, start, limit));
		}

		return result;
	}

	@Override
	public FlowResult<String> getOpTypeByWiId(String wiid) {
		FlowResult<String> fr = new FlowResult<String>();
		fr.setSuccess(false);
		fr.setResult("");
		try {
			String opType=getDao().findString("select opType from Msg where msgId = ? ", "wi_"+wiid);
			fr.setSuccess(true);
			fr.setResult(opType);
		} catch (Exception e) {
			e.printStackTrace();
			
		}

		return fr;
	}
	
	private String convertArrayToStr(List<String> lstBizId){
		StringBuilder sbBizId = new StringBuilder();
		sbBizId.append("'" + lstBizId.get(0) + "'");
		for(int index=1;index<lstBizId.size();index++){
			sbBizId.append(",'" + lstBizId.get(index) + "'");
		}
		return sbBizId.toString();
	}
	@SuppressWarnings("unchecked")
	public FlowResult<Map<String, String>> getCurrentFlowUsers(String[] arrFlowCode, String[] arrBizId){

		LinkedList<String> lstErrorInfoList = new LinkedList<String>();
		FlowResult<Map<String, String>> flowResult = new FlowResult<Map<String, String>>();

		if(arrFlowCode == null || arrFlowCode.length == 0){
			lstErrorInfoList.add("流程编码请求参数为空");
		}
		if(arrBizId == null || arrBizId.length == 0){
			lstErrorInfoList.add("业务编号请求参数为空");
		}
		if(lstErrorInfoList.size()>0){
			flowResult.faliure();
			DebugInfo debugInfo = new DebugInfo();
			debugInfo.setErrDesc(lstErrorInfoList);
			return flowResult;
		}
		
		logger.info("flowCode=" + JSON.toJSONString(arrFlowCode)+",bizId=" + JSON.toJSONString(arrBizId));

		Map<String,String> mapResult = new HashMap<String,String>();
		
		try {
			// 转换数组bizID到集合
			List<String> lstBizId = Arrays.asList(arrBizId);
			// 获取新流程的bizID
			List<String> lstNewFlowBizId = flowInstanceDao.getNewestFlowBizIds(convertArrayToStr(lstBizId),arrFlowCode[0]);
			
			if(lstNewFlowBizId != null && lstNewFlowBizId.size() > 0){
				
				// 获取新流程当前审批人
				mapResult.putAll(flowInstanceDao.getNewFlowCurrentUsers(arrFlowCode[0], convertArrayToStr(lstNewFlowBizId),
						   												FlowInstanceStatus.STATUS_RUNNING,TaskTypeStatus.STATUS_RUNNING,
						   												TaskTypeStatus.TaskType.ZC.getCode()));
				// 判断当前请求中是否只有新流程的bizID，如果是 直接返回
				if(lstNewFlowBizId.size() == lstBizId.size()){
					flowResult.setResult(mapResult);
					return flowResult;
				}
				// 获取旧流程bizId lstBizId转换为旧流程bizId
				lstBizId = (List<String>) CollectionUtils.subtract(lstBizId, lstNewFlowBizId);
			}
			// 获取就流程当前审批人
			mapResult.putAll(flowInstanceDao.getOldFlowCurrentUsers(arrFlowCode[0], convertArrayToStr(lstBizId),
					   												FlowInstanceStatus.STATUS_RUNNING,TaskTypeStatus.STATUS_RUNNING,
					   												TaskTypeStatus.TaskType.ZC.getCode()));
			logger.info("mapResult="+mapResult);
			flowResult.setResult(mapResult);
		} catch (Exception ex) {
			flowResult.faliure();
			logger.error("方法getCurrentFlowUsers()发生异常：" + ex);
		}
		
		return flowResult;
	}
	/*
	public FlowResult<Map<String, String>> getCurrentFlowUsers_error(
			String[] flowCodes, String[] bizIds) {
		FlowResult<Map<String, String>> result = new FlowResult<Map<String, String>>();
		Map<String, String> m=new HashMap<String, String>();
		if (flowCodes!=null&&flowCodes.length>0 && bizIds!=null&&bizIds.length>0){
			List<Long> fiIds=formFlowService.getFiIdByFlowCodeAndBizIds(flowCodes,bizIds);
    		//for(int i=0;i<bizId.length;i++){
    			//Long fiId = formFlowService.getFiIdByFlowCodeAndBizId(flowCode, bizId[i]);
    			if(fiIds!=null&&fiIds.size()>0){
    				String fis="";
    				for(Long l:fiIds){
    					if(l!=null&&l>0l){
	    					if("".equals(fis)){
	    						fis=String.valueOf(l);
	    					}else{
	    						fis=fis+","+String.valueOf(l);
	    					}
    					}
    				}
    				String sql="select f.biz_id as bizId,group_"DbType.getType()+"concat(distinct w.participant_user_name) as name from  tf_wi w,tf_fi f where w.fi_id=f.id and w.fi_id in("+fis+") and w.status = 1  and w.wi_type in('" + WsConstant.WiType.ZC.getCode() + "')";
            		//Object object = getDao().getFirstBySQL(sql, fis);
            		List olist=getDao().findListBySQL(sql,null);
            		if(olist!=null&&olist.size()>0){
                		for (Object obj : olist) {
            				Object[] arr = (Object[]) obj;
            				if(arr!=null&&arr.length>1&&arr[0]!=null&&arr[1]!=null)
            					m.put(String.valueOf(arr[0]), String.valueOf(arr[1]));
                		}
            		}
        			if(object!=null){
        				m.put(bizId[i], object.toString());
        			}else{
        				m.put(bizId[i], "");
        			}
    			}
    		//}
        	result.success();
        	result.setResult(m);
    	}else{
    		result.faliure();
    		result.setResult(m);
			result.getDebugInfo().addErrDesc("流程编码与业务id为必传项!");
    	}
		return result;
	}*/

	@Override
	public FlowResult<Integer> getFileCount(String moduleCode, String ownid) {
		FlowResult<Integer> rs=new FlowResult<Integer>();
		if(!StringUtils.isBlank(moduleCode)&&!StringUtils.isBlank(ownid)){
			//根据category,ownerId查找uploadList
			String hql = "category=? and ownerId=?";
			//若时间限定不为空，则增加时间过滤条件
			
			List<Object> paramList = new ArrayList<Object>();
			paramList.add(moduleCode);
			paramList.add(ownid);
			
			List<Upload> uploadList =getDao().findAll(Upload.class,hql,paramList.toArray());
			if(uploadList!=null&&uploadList.size()>0){
				rs.setResult(uploadList.size());
			}else{
				rs.setResult(0);
			}
		}else{
			rs.setResult(0);
		}
		
		return rs;
	}
	
	private int findCount(String category,String ownId,boolean isUseIn){
		
		if(StringUtils.isNotBlank(category)&&StringUtils.isNotBlank(ownId)){

			DetachedCriteria dc = DetachedCriteria.forClass(Upload.class);
			
			dc.add(Restrictions.eq("category", category));
			if(isUseIn){
				dc.add(Restrictions.in("ownerId", ownId.split(",")));
			}else{
				dc.add(Restrictions.eq("ownerId", ownId));
			}

			List<Upload> lstUpload = getDao().findByCriteria(dc);
			
			if(lstUpload != null && lstUpload.size() > 0){
				return lstUpload.size();
			}else{
				return 0;
			}
		}else{
			return 0;
		}
	}

	@Override
	public FlowResult<Integer> getChkDraftFileCount(String[] chkDraftBefore , String[] chkDraftAfter) {
		
		int chkDraftBeforeCnt = 0,chkDraftAfterCnt = 0;
		FlowResult<Integer> rs=new FlowResult<Integer>();
		
		if(chkDraftBefore == null && chkDraftAfter== null){
			rs.setResult(0);
			return rs;
		}
		
		if(chkDraftBefore != null){
			
			chkDraftBeforeCnt = findCount(chkDraftBefore[0],chkDraftBefore[1],false);
		}
		
		if(chkDraftAfter != null){
			
			chkDraftAfterCnt = findCount(chkDraftAfter[0],chkDraftAfter[1],true);
		}
		
		if(chkDraftBeforeCnt > chkDraftAfterCnt){
			rs.setResult(chkDraftBeforeCnt);
		}else{
			rs.setResult(chkDraftAfterCnt);
		}
		
		return rs;
	}

	
	public FlowResult<Boolean> isExistsChkDraftNode(String flowCode) {
		
		FlowResult<Boolean> rs = new FlowResult<Boolean>();
		rs.faliure();
		
		// 通过流程编码获取最新版本流程模板
		Fl flow = flDAO.getFl(flowCode);
		if(flow == null ){
			return rs;
		}
		
		// 通过流程编码、流程版本获取流程环节集合
		List<Ac> lstAc = acDaO.getAcList(flow.getFlowCode(), flow.getFlowVersion());
		if(lstAc == null || lstAc.size() == 0){
			return rs;
		}
		
		// 获取操作组集合
		OpGroup opGroup = opGroupDao.getOpGroupsByCode(CHK_DRAFT);
		if(opGroup == null || opGroup.getId() == null){
			return rs;
		}
		
		// 循环遍历所有流程环节
		for(Ac item : lstAc){
			// 判断每个环节的操作组ID是否与校稿环节的操作组ID相等
			if(!StringUtils.equals(item.getOpGroups(), opGroup.getId().toString())){
				// 不相等遍历下一个环节
				continue;
			}
			// 相等 存在校稿环节 跳出循环
			rs.success();
			break;
		}
		
		return rs;
	}
	
	@Override
	public FlowResult<Boolean> isExistsRunningProofreadStep(String bizId, String flowCode,Long currLoginName) {
		
		logger.info("isExistsRunningProofreadStep start");
		
		FlowResult<Boolean> result = new FlowResult<Boolean>();
		
		LinkedList<String> lstErrorInfoList = new LinkedList<String>();
		if(StringUtils.isBlank(bizId)){
			lstErrorInfoList.add("业务ID为空");
		}
		if(StringUtils.isBlank(flowCode)){
			lstErrorInfoList.add("流程编码为空");
		}
		if(currLoginName == null){
			lstErrorInfoList.add("当前登录账号为空");
		}
		if(lstErrorInfoList.size()>0){
			
			DebugInfo debugInfo = new DebugInfo();
			debugInfo.setErrDesc(lstErrorInfoList);
			result.faliure();
			result.setDebugInfo(debugInfo);
			
			return result;
		}

		try {
			Long fiId = formFlowService.getFiIdByFlowCodeAndBizId(flowCode,bizId);
			Integer proofreadStepCont = getDao().findIntBySQL(
							"SELECT COUNT(1) FROM tf_fi f,tf_ai i,tf_ac c,tf_wi w,tf_op_group og WHERE f.id = i.fi_id AND i.id = w.ai_id AND i.ac_id = c.id AND c.op_groups = og.id AND w.participant = ? AND f.id = ? AND i.`status` = ? AND og.`code` = 'JG'",
							currLoginName,fiId, StepTypeStatus.STATUS_RUNNING);
			logger.info("bizId=" + bizId + ";flowCode=" + flowCode + ";fiId="
					+ fiId + ";proofreadStepCont=" + proofreadStepCont);
			if (proofreadStepCont == FlowInstanceConstant.NO_EXISTS_RUNNING_PROOFREAD_STEP) {
				result.setResult(false);
			} else {
				result.setResult(true);
			}
		} catch (Exception ex) {
			
			result.faliure();
			logger.error("isExistsRunningProofreadStep error ",ex);
		}
		
		logger.info("isExistsRunningProofreadStep end");
		
		return result;
	}

	@Override//打开详细页面
	public FlowResult<ToDoBean> getToDoBeanByTaskId(String taskId, String category) {
		// TODO Auto-generated method stub
		FlowResult<ToDoBean> result = new FlowResult<ToDoBean>();
		try {
			ToDoBean toDoBean=flowInstanceStepMobileService.getToDoBean(taskId, category);
			result.setSuccess(true);
			result.setResult(toDoBean);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			result.setSuccess(false);
			result.setResult(null);
		}
		return result;
	}

	
	public FlowResult<ToDoBean> getToDoBeanByflowCodeAndbizId(String flowCode, String bizId){
		FlowResult<ToDoBean> result = new FlowResult<ToDoBean>();
		try {
			ToDoBean toDoBean=flowInstanceStepMobileService.getToDoBeanByflowCodeAndbizId(flowCode, bizId);
			result.setSuccess(true);
			result.setResult(toDoBean);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			result.setSuccess(false);
			result.setResult(null);
		}
		return result;
	}
	
	
	@Override//ti'jia
	public FlowResult<SimpleResult> completeTask(Long opUserId, String taskId,
			String userNote, String opCode, String opName, 
			String dealUsersIds, String backStepId,String backTaskId, boolean backSkip,
			String flowInsName) {
		// TODO Auto-generated method stub
		FlowResult<SimpleResult> result=new FlowResult<SimpleResult> ();
		try {
			SimpleResult simpleResult=flowInstanceStepMobileService.completeTask( opUserId, taskId, userNote, opCode, opName, dealUsersIds,backStepId, backTaskId, backSkip, flowInsName);
			result.setResult(simpleResult);
			result.setSuccess(true);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			result.setSuccess(false);
			e.printStackTrace();
		}
		return result;
	}




	@Override
	public FlowResult<List<UserDTO>> getUserListByCompanyIdAndRoleId(Long compayId,
			Long roleId) {
		// TODO Auto-generated method stub
		FlowResult<List<UserDTO>> result = new FlowResult<List<UserDTO>>();
		//FlowUtils.checkParams(result, "realName", realName);
		//if (result.isSuccess()) {
			List<User> userList = userDao.getUserListByCompanyIdAndRoleId(compayId,roleId);
			result.setResult(UserUtils.buildUserDtoList(userList));
		//}
		return result;
	}




	@Override
	public FlowResult<List<UserDTO>> getUserListByCompanyIdAndRoleId1(
			Long compayId, Long roleId) {
		// TODO Auto-generated method stub
		return null;
	}




	@Override
	public FlowResult<List<CompanyDTO>> getAllCompanyLevel1(
			Boolean includeDisabled) {
		// TODO Auto-generated method stub
		return null;
	}
	
	/**
	 * chc add 2016.7.29
	 */
	@Override
	public FlowResult<List<ScopeDTO>> getAuthScope(String moduleCode,String authUserLoginName, Long ctrId, Long fieldId) {
		FlowResult<List<ScopeDTO>> fr = new FlowResult<List<ScopeDTO>>();
		
		List<Long> roleIds = userDao.getRoleIds(authUserLoginName);
        List<Long> standRoleIds = userDao.getStandRoleIds(authUserLoginName);
        
        if(standRoleIds != null && !standRoleIds.isEmpty()){
            roleIds.addAll(standRoleIds);
        }
        
        if(roleIds != null && !roleIds.isEmpty()) {
        	List<ScopeDTO> scopeList = ScopeUtils.buildScopeDtoList(bizDataRoleDao.getBizDataRoles(roleIds, moduleCode, fieldId));
        	Map<Long,ScopeDTO> sdtMap = new HashMap<Long,ScopeDTO>();
        	List<ScopeDTO> newScopeList = new ArrayList<ScopeDTO>();
        	for(ScopeDTO scopeDTO:scopeList){
        		sdtMap.put(scopeDTO.getId(), scopeDTO);
        	}
        	for (Map.Entry<Long,ScopeDTO> entry : sdtMap.entrySet()) {
        		newScopeList.add(entry.getValue());
        	}
        	fr.setResult(newScopeList);
        }
		return fr;
	}

	 /**
     * chc add 获取当前用户拥有岗位集合 2016.8.1
     * @param loginName
     * @return
     */
	@Override
	public List<RoleDTO> getPostsByCurrentUser(String loginName) {
		// 获取当前用户拥有岗位集合
		return flowServerService.getPostsByCurrentUser(loginName);
	}
	@Override
	public FlowResult<SimpleResult> startFlowTask(Long spGwId,
			Long startUserId, String userNote, String flowCode, String bizId) {
		// TODO Auto-generated method stub
		FlowResult<SimpleResult> result=new FlowResult<SimpleResult> ();
		try {
			SimpleResult simpleResult=flowInstanceStepMobileService.startFlowTask(spGwId, startUserId, userNote, flowCode, bizId);
			if(simpleResult.isResult()){
				result.setResult(simpleResult);
				result.setSuccess(true);
			}else{
				DebugInfo info=new DebugInfo();
				LinkedList l=new LinkedList();
			 	l.add(simpleResult.getMsg());
				info.setErrDesc(l);
				result.setDebugInfo(info);
				result.setResult(simpleResult);
				result.setSuccess(false);
			}
		
		} catch (Exception e) {
			// TODO Auto-generated catch block
			result.setSuccess(false);
			e.printStackTrace();
		}
		return result;
	}




	@Override
	public FlowResult<List<FileDto>> getFileList(String category, String bizIds) {
		// TODO Auto-generated method stub
		FlowResult<List<FileDto>> fr = new FlowResult<List<FileDto>>();
		List<FileDto> result = fileService.getFileList(category, bizIds);
		fr.setResult(result);
		fr.setSuccess(true);
		return fr;
	}




	@Override
	public FlowResult<List<FlowInstanceDto>> getEndFlowUsers(String flowCodes,
			String bizIds) {
		FlowResult<List<FlowInstanceDto>> fr = new FlowResult<List<FlowInstanceDto>>();
		List<FlowInstanceDto> result = flowInstanceDao.getFlowInstanceInfo(flowCodes,bizIds);
		fr.setResult(result);
		fr.setSuccess(true);
		return fr;
	}



	

//	@Override
//	public FlowResult<List<Map<String, Object>>> getEndFlowUsers(
//		String	 flowCodes,String  bizIds) {
//		// TODO Auto-generated method stub
//		FlowResult<List<Map<String, Object>>> fr = new FlowResult<List<Map<String, Object>>>();
//		List<Map<String, Object>> result = flowInstanceDao.getFlowInstanceInfo(flowCodes,bizIds);
//		fr.setResult(result);
//		fr.setSuccess(true);
//		return fr;
//	}




	





}
