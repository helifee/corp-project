package com.xinleju.erp.flow.utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.Key;

import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;

public class FileDESPlus {
	
	public static String strDefaultKey = "biohazard";
	private static Cipher encryptCipher = null;
	private static Cipher decryptCipher = null;
	
	/**
	  * 指定密钥构造方法
	  *
	  * @param strKey
	  *            指定的密钥
	  * @throws Exception
	*/
	public FileDESPlus(String strKey) throws Exception {
		//Security.addProvider(new com.sun.crypto.provider.SunJCE());
		Key key = getKey(strKey.getBytes());
	 
		encryptCipher = Cipher.getInstance("DES");
		encryptCipher.init(Cipher.ENCRYPT_MODE, key);
	 
		decryptCipher = Cipher.getInstance("DES");
		decryptCipher.init(Cipher.DECRYPT_MODE, key);
	}
	
	/**
	  * 默认构造方法，使用默认密钥
	  *
	  * @throws Exception
	*/
	public FileDESPlus() throws Exception {
		this(strDefaultKey);
	}
	
	/**
	  * 从指定字符串生成密钥，密钥所需的字节数组长度为8位 不足8位时后面补0，超出8位只取前8位
	  *
	  * @param arrBTmp
	  *            构成该字符串的字节数组
	  * @return 生成的密钥
	  * @throws java.lang.Exception
	*/
	private Key getKey(byte[] arrBTmp) throws Exception {
		// 创建一个空的8位字节数组（默认值为0）
		byte[] arrB = new byte[8];
	 
		// 将原始字节数组转换为8位
		for (int i = 0; i < arrBTmp.length && i < arrB.length; i++) {
			arrB[i] = arrBTmp[i];
		}
		// 生成密钥
		Key key = new javax.crypto.spec.SecretKeySpec(arrB, "DES");
		return key;
	}
	
	 //文件加密
	 public static void encryptFile(File myFile,File newFile){
		 try {
			FileInputStream dataFIS = new FileInputStream(myFile);
			CipherInputStream CIS=new CipherInputStream(dataFIS,encryptCipher);
			byte[] b = new byte[1024*10];
			int len;
            FileOutputStream FOS=new FileOutputStream(newFile);
            try {
            	while ((len =CIS.read(b)) > 0){
				     FOS.write(b, 0, len);//写入文件中
				 }
				CIS.close();
				FOS.close();
				dataFIS.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	 }
	 
	 //文件解密
	 public static void decryptFile(File myFile,File newFile){
		 try {
				FileInputStream dataFIS = new FileInputStream(myFile);
				CipherInputStream CIS = new CipherInputStream(dataFIS,decryptCipher);
				byte[] b = new byte[1024*10];
				int len;
	            FileOutputStream FOS=new FileOutputStream(newFile);
	             try {
	            	while ((len =CIS.read(b)) > 0){
	            		 FOS.write(b, 0, len);//写入文件中
					}
					CIS.close();
					FOS.close();
					dataFIS.close();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}finally{
					if(CIS!=null){
						try {
							CIS.close();
							FOS.close();
							dataFIS.close();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	 }
	 
	//文件解密
	 public static CipherInputStream decryptFileToStream(File myFile){
		 try {
				FileInputStream dataFIS = new FileInputStream(myFile);
				CipherInputStream CIS = new CipherInputStream(dataFIS,decryptCipher);
				return CIS;
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return null;
	 }
	 
	public static void main(String[] args) {
		File myFile = new File("d:\\FCKeditor文件上各类传解决方案.docx");
		File newFile = new File("d:\\FCKeditor文件上各类传解决方案1.docx");
		 try {
			FileDESPlus des = new FileDESPlus();
			des.decryptFile(myFile, newFile);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
