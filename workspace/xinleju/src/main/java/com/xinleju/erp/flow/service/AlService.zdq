package com.xinleju.erp.flow.service;

import java.util.Date;
import java.util.List;

import org.springframework.stereotype.Service;

import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.base.utils.CollectionUtils;
import com.xinleju.erp.base.utils.StringHelper;
import com.xinleju.erp.flow.flowutils.utils.WsConstant;
import com.xinleju.erp.flow.frameapi.domain.User;
import com.xinleju.erp.flow.models.Ac;
import com.xinleju.erp.flow.models.Al;
import com.xinleju.erp.flow.models.Fi;
import com.xinleju.erp.flow.models.Wi;
import com.xinleju.erp.flow.models.Wp;
import com.xinleju.erp.flow.utils.FlowUtils;
import com.xinleju.erp.flow.utils.IdNameUtils;

@Service
public class AlService extends BaseService{
    
    public static final String MSG_WI_AUTO_PASS_AS_USER_REPEAT = "(责任人相同,系统自动通过)";
    public static final String MSG_WP_AUTO_PASS_AS_NO_USER = "(责任人为空,系统自动通过)";
    public static final String MSG_WP_CHUANYUE = "传阅";
    public static final String MSG_WP_CHAODONG = "抄送";
    public static final String MSG_WP_XIAOXI = "消息";
    public static final String MSG_WP_CUIBAN = "催办";
    public static final String MSG_FI_WITHDRAW = "撤回流程";
    public static final String MSG_WI_WITHDRAW = "撤回";
    /**
     * 作废
     */
    public static final String MSG_WI_OVERDUE = "作废";
    /**
     * 操作名称
     */
    public static final String MSG_WP_AUTO_PASS_OP_NAME = "通过";
    /**
     * 操作编码
     */
    public static final String MSG_WP_AUTO_PASS_OP_CODE = "TG;通过";
    
    
    static final String USER_NAME_SYSTEM = "系统";
    public void logWi(Wi wi) {
        String nodeName = WsConstant.WiType.CB.getCode().equals(wi.getWiType()) ? MSG_WP_CUIBAN : wi.getAc().getNodeName();
        Al al = this.log(
                nodeName,
                wi.getParticipantLoginName(),
                wi.getParticipantUserName(),
                wi.getOpCode(), wi.getUserNote(), false);
        
        al.setWiId(wi.getId());
        al.setFiId(wi.getFiId());
        
        if(wi.getWp().getRolePath() != null){
            al.setRolePath(wi.getWp().getRolePath());
        }
        else if(wi.getWp().getOriginDefine()!=null){
            al.setRolePath(CollectionUtils.collectAsString(IdNameUtils.decode(wi.getWp().getOriginDefine()), "name",","));
        }
        else {
            al.setRolePath(USER_NAME_SYSTEM);
        }
        getDao().save(al);
    }
    



    public void logZhuanban(Wi wi) {
        Al al = this.log(
                wi.getAc().getNodeName(),
                wi.getParticipantLoginName(),
                wi.getParticipantUserName(),
                wi.getOpCode(), wi.getUserNote(),false);
        al.setUserNote(wi.getUserNote());
        al.setWiId(wi.getId());
        al.setFiId(wi.getFiId());
        
        if(wi.getWp().getRolePath() != null){
            al.setRolePath(wi.getWp().getRolePath());
        }
        else if(wi.getWp().getOriginDefine()!=null){
            al.setRolePath(CollectionUtils.collectAsString(IdNameUtils.decode(wi.getWp().getOriginDefine()), "name",","));
        }
        else {
            al.setRolePath(USER_NAME_SYSTEM);
        }
        
        getDao().save(al);
        
    }


    public void logBack(Wi wi) {
        Al al = this.log(
                wi.getAc().getNodeName(),
                wi.getParticipantLoginName(),
                wi.getParticipantUserName(),
                wi.getOpCode(), wi.getUserNote(),false);
        al.setUserNote(wi.getUserNote());
        al.setWiId(wi.getId());
        al.setFiId(wi.getFiId());
        
        
        if(wi.getWp().getRolePath() != null){
            al.setRolePath(wi.getWp().getRolePath());
        }
        else if(wi.getWp().getOriginDefine()!=null){
            al.setRolePath(CollectionUtils.collectAsString(IdNameUtils.decode(wi.getWp().getOriginDefine()), "name",","));
        }
        else {
            al.setRolePath(USER_NAME_SYSTEM);
        }
        
        getDao().save(al);
    }




    public void logFiWithDraw(Long fiId, User user,String userNote) {
        Al al = new Al();
        
        Fi fi = getDao().getById(Fi.class, fiId);
        Ac ac = getDao().findFirst(Ac.class, "isStart = 1 and flowCode = ? and flowVersion = ?"
                , new Object[]{fi.getFl().getFlowCode(),fi.getFl().getFlowVersion()});
        al.setFiId(fi.getId());
        al.setLogDate(new Date());
        al.setNodeName(ac.getNodeName());
        al.setLoginName(user.getLoginName());
        al.setUserName(user.getUserName());
        al.setOpName(MSG_FI_WITHDRAW);
        al.setUserNote(userNote);
        
        getDao().save(al);
        
    }


    public void logWithDraw(Wi wi) {
        Al al = this.log(
                wi.getAc().getNodeName(),
                wi.getParticipantLoginName(),
                wi.getParticipantUserName(),
                MSG_WI_WITHDRAW, wi.getUserNote(),false);
        al.setUserNote(wi.getUserNote());
        al.setWiId(wi.getId());
        al.setFiId(wi.getFiId());
        
        if(wi.getWp().getRolePath() != null){
            al.setRolePath(wi.getWp().getRolePath());
        }
        else if(wi.getWp().getOriginDefine()!=null){
            al.setRolePath(CollectionUtils.collectAsString(IdNameUtils.decode(wi.getWp().getOriginDefine()), "name",","));
        }
        else {
            al.setRolePath(USER_NAME_SYSTEM);
        }
        
        getDao().save(al);
    }


    
    /**
     * 节点责任人为空，或重复参与人计算后为空，日志
     * @param wp
     */
    public void logWpAutoPassAsNoUsers(Wp wp) {
        
        //自动活动的节点，自动跳过，不做记录
       if(!FlowUtils.isTypeTask(wp.getAi().getAc(), Ac.ACTYPE_AUTO)){
           Al al = new Al();
           al.setLogDate(new Date());
           al.setNodeName(wp.getAi().getAc().getNodeName());
           al.setLoginName("");
           
           if(wp.getParticipants() !=null){
               al.setUserName(CollectionUtils.collectAsString(IdNameUtils.decode(wp.getParticipants()), "name",","));
           }
           else if(wp.getOriginDefine()!=null){
               al.setUserName(CollectionUtils.collectAsString(IdNameUtils.decode(wp.getOriginDefine()), "name",","));
           }
           else{
               al.setUserName(USER_NAME_SYSTEM);
           }
           
           if(wp.getRolePath() != null){
               al.setRolePath(wp.getRolePath());
           }
           else if(wp.getOriginDefine()!=null){
               al.setRolePath(CollectionUtils.collectAsString(IdNameUtils.decode(wp.getOriginDefine()), "name",","));
           }
           else {
               al.setRolePath(USER_NAME_SYSTEM);
           }
          
           al.setOpName(MSG_WP_AUTO_PASS_OP_NAME);
           al.setUserNote(MSG_WP_AUTO_PASS_AS_NO_USER);
           al.setFiId(wp.getFiId());
           getDao().save(al);
       }
       
    }
    public void logWiAutoAsRepeat(Wi w) {
        
        Al al = new Al();
        al.setLogDate(new Date());
        al.setNodeName(w.getAc().getNodeName());
        al.setLoginName("");
        
        if(w.getParticipant()!=null){
            al.setUserName(w.getParticipantUserName());
        }
        else{
            al.setUserName(USER_NAME_SYSTEM);
        }
        if(w.getWp().getRolePath() != null){
            al.setRolePath(w.getWp().getRolePath());
        }
        else if(w.getWp().getOriginDefine()!=null){
            al.setRolePath(CollectionUtils.collectAsString(IdNameUtils.decode(w.getWp().getOriginDefine()), "name",","));
        }
        else {
            al.setRolePath(USER_NAME_SYSTEM);
        }
        al.setOpName(MSG_WP_AUTO_PASS_OP_NAME);
        al.setUserNote(MSG_WI_AUTO_PASS_AS_USER_REPEAT);
        al.setFiId(w.getFiId());
        getDao().save(al);
    }

    public void logChaosong(Wp wp, List<String> csUsersNameList) {
        Al al = new Al();
        al.setLogDate(new Date());
        al.setNodeName(wp.getAi().getAc().getNodeName());
        al.setLoginName("");
        al.setUserName(USER_NAME_SYSTEM);
        al.setOpName(MSG_WP_CHAODONG);
        al.setUserNote("抄送给：" + ((csUsersNameList==null || csUsersNameList.size() == 0) ? "无" : StringHelper.join(csUsersNameList, ",")));
        al.setFiId(wp.getFiId());
        getDao().save(al);
        
    }
    public void logXiaoxi(Wp wp, List<String> csUsersNameList) {
        Al al = new Al();
        al.setLogDate(new Date());
        al.setNodeName(wp.getAi().getAc().getNodeName());
        al.setLoginName("");
        al.setUserName(USER_NAME_SYSTEM);
        al.setOpName(MSG_WP_XIAOXI);
        al.setUserNote("发送消息给：" + ((csUsersNameList==null || csUsersNameList.size() == 0) ? "无" : StringHelper.join(csUsersNameList, ",")));
        al.setFiId(wp.getFiId());
        getDao().save(al);
        
    }
    /**
     * 传阅日志
     * @author jun
     * @param wi 操作的wi
     * @param wp 节点wp
     * @param cyUsersNameList 传阅人
     */
    public void logChuanYue(Wi wi, Wp wp, List<String> cyUsersNameList) {
        Al al = new Al();
        al.setLogDate(new Date());
        al.setNodeName(MSG_WP_CHUANYUE);
        al.setLoginName("");
        al.setUserName(wi.getCompleteUserName());
        al.setOpName(MSG_WP_CHUANYUE);
        al.setUserNote(wi.getCompleteUserName() + "传阅给：" + ((cyUsersNameList == null || cyUsersNameList.size() == 0)
                ? "无" : StringHelper.join(cyUsersNameList, ",")));
        al.setFiId(wp.getFiId());
        getDao().save(al);
        
    }
    /**
     * 传阅日志
     * @author jun
     * @param wi 操作的wi
     * @param wp 节点wp
     * @param cbUsersNameList 传阅人
     */
    public void logCuiBan(Wi wi, Wp wp, List<String> cbUsersNameList) {
        Al al = new Al();
        al.setLogDate(new Date());
        al.setNodeName(MSG_WP_CUIBAN);
        al.setLoginName("");
        al.setUserName(wi.getCompleteUserName());
        al.setOpName(MSG_WP_CUIBAN);
        al.setUserNote(wi.getParticipantUserName() + "催办：" + ((cbUsersNameList == null || cbUsersNameList.size() == 0)
                ? "无" : StringHelper.join(cbUsersNameList, ",")));
        al.setFiId(wp.getFiId());
        getDao().save(al);
        
    }
   
    /**
     * 操作日志
     * @author jun
     * @param nodeName 节点名
     * @param loginName 操作者-登陆名
     * @param userName 操作者-名称
     * @param opName 操作名称包括操作码（如：WYY；无异议）
     * @param userNote 操作者-意见
     * @param saveIt 是否保存
     * @return 操作日志
     */
    public Al log(String nodeName, String loginName, String userName, String opName
            , String userNote, boolean saveIt){
        
        Al al = new Al();
        al.setLogDate(new Date());
        
        al.setNodeName(nodeName);
        al.setLoginName(loginName);
        al.setUserName(userName);
        al.setOpName(opName);
        al.setUserNote(userNote);
        
        if (saveIt){
            getDao().save(al);
        }
        
        return al;
    }
    /**
     * 管理员作废任务的日志
     * @author jun
     * @param wi 任务
     */
    public void logAdminOverdueWi(Wi wi) {
        Al al = new Al();
        al.setLogDate(new Date());
        al.setNodeName(wi.getAc().getNodeName());
        al.setLoginName(wi.getParticipantLoginName());
        al.setUserName(wi.getParticipantUserName());
        al.setOpName(MSG_WI_OVERDUE);
        al.setUserNote(wi.getUserNote());
        al.setWiId(wi.getId());
        al.setFiId(wi.getFiId());
        if (wi.getWp().getRolePath() != null){
            al.setRolePath(wi.getWp().getRolePath());
        } else if (wi.getWp().getOriginDefine() != null){
            al.setRolePath(CollectionUtils.collectAsString(IdNameUtils.decode(wi.getWp().getOriginDefine()), "name", ","));
        } else {
            al.setRolePath(USER_NAME_SYSTEM);
        }
        
        getDao().save(al);
        
    }
}
