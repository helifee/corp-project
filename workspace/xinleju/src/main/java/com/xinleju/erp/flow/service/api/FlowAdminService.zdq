package com.xinleju.erp.flow.service.api;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.w3c.dom.Document;

import com.mxgraph.io.mxCodec;
import com.mxgraph.model.mxCell;
import com.mxgraph.model.mxGraphModel;
import com.mxgraph.util.mxXmlUtils;
import com.xinleju.erp.base.app.service.ICommonService;
import com.xinleju.erp.base.app.utils.ExUtils;
import com.xinleju.erp.base.utils.EncodeUtils;
import com.xinleju.erp.flow.dao.impl.OpDAO;
import com.xinleju.erp.flow.dao.impl.ParticipantDAO;
import com.xinleju.erp.flow.dao.impl.WiDAO;
import com.xinleju.erp.flow.dao.impl.WpDAO;
import com.xinleju.erp.flow.flowutils.bean.FlBean;
import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.flow.flowutils.bean.Gvs;
import com.xinleju.erp.flow.flowutils.bean.SimpleResult;
import com.xinleju.erp.flow.flowutils.bean.WpBean;
import com.xinleju.erp.flow.flowutils.bean.WsURI;
import com.xinleju.erp.flow.flowutils.utils.WsConstant.JqType;
import com.xinleju.erp.flow.frameapi.domain.User;
import com.xinleju.erp.flow.models.Ai;
import com.xinleju.erp.flow.models.Wp;
import com.xinleju.erp.flow.service.AiService;
import com.xinleju.erp.flow.service.DesignerService;
import com.xinleju.erp.flow.service.FlowService;
import com.xinleju.erp.flow.service.WpService;
import com.xinleju.erp.flow.service.api.utils.ApiMsgUtils;
import com.xinleju.erp.flow.service.api.utils.ApiUtils;
import com.xinleju.erp.flow.utils.FlowUtils;

/**
 * 
 * <p>
 * 工作流高级API
 * </p>
 * <p>
 * </p>
 * 
 * @author 孙朝辉
 * @version $Id: FlowAdminService.java 1933 2014-11-25 07:03:21Z zhongjun $
 * @since
 * @see
 */
@Service("FlowAdminService")
public class FlowAdminService {
    /**
     * 流程设计Service
     */
    @Autowired
    private DesignerService designerService;

    /**
     * 环节实例Service
     */
    @Autowired
    private AiService aiService;

    /**
     * 流程Service
     */
    @Autowired
    private FlowService flowService;

    /**
     * 组织架构Service
     */
    @Autowired
    private OrgnAPIService orgnAPIService;

    /**
     * 工作组Service
     */
    @Autowired
    private WpService wpService;

    /**
     * 公共Service
     */
    @Autowired
    private ICommonService commonService;

    /**
     * 工作组WpDAO
     */
    @Autowired
    private WpDAO wpDAO;

    /**
     * 工作组WiDAO
     */
    @Autowired
    private WiDAO wiDAO;

    /**
     * 参与者DAO
     */
    @Autowired
    private ParticipantDAO participantDAO;
    
    /**
     * 操作
     */
    @Autowired
    private OpDAO opDAO;
    
    /**
     * 
     * <p>
     * 获得工作流第一个Wp（首工作组）
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiId
     *            流程实例
     * @return 工作组
     */
    @GET
    @Path(WsURI.URI_GET_STARTWP)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<WpBean> getStartWp(@QueryParam("fiId") Long fiId) {
        FlowResult<WpBean> result = new FlowResult<WpBean>(WpBean.class);

        Wp wp = wpDAO.getFirstValidWp(fiId);
        
        WpBean wpBean = ApiUtils.buildWpBean(wp, false, false, true);
        result.setResult(wpBean);

        return result;
    }

    /**
     * 
     * <p>
     * 获取指定outCode && isAi == 1的Wp
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiId
     *            流程实例Id
     * @param outCode
     *            外部编码
     * @return Wp
     */
    @GET
    @Path(WsURI.URI_GET_WP_BY_OUTCODE)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<WpBean> getWpByOutCode(@QueryParam("fiId") Long fiId, @QueryParam("outCode") String outCode) {
        FlowResult<WpBean> result = new FlowResult<WpBean>(WpBean.class);

        Ai ai = aiService.getAi(fiId, outCode);
        if (ai == null) {
            result.faliure();
            result.getDebugInfo().addErrDesc(ApiMsgUtils.getMsg(ApiMsgUtils.KEY_OBJECT_NOTFOUNT, "Ai", outCode));
        } else {
            
            Wp wp = wpDAO.getWpOfAi(ai.getId());
            WpBean wpBean = ApiUtils.buildWpBean(wp, false, false, true);
            
            
            result.setResult(wpBean);
        }

        return result;
    }

    /**
     * 
     * <p>
     * 创建流程
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param xml
     *            模型XML
     * @param isCommited
     *            是否提交
     * @return SimpleResult
     */
    @POST
    @Path(WsURI.URI_CRETE_FL)
    @Produces({ "application/xml", "application/json" })
    public FlowResult<FlBean> createFl(@FormParam("xml") String xml, @FormParam("isCommited") boolean isCommited) {
        FlowResult<FlBean> result = new FlowResult<FlBean>(FlBean.class);

        try {
            Future<Integer> f = designerService.save(xml, isCommited, null);
            f.get();
            Document doc = mxXmlUtils.parseXml(xml);
            mxCodec codec = new mxCodec(doc);
            mxGraphModel model = (mxGraphModel) codec.decode(doc.getDocumentElement());
            mxCell root = (mxCell) model.getRoot();
            String flowCode = root.getAttribute("flowCode");
            String flowVersion = root.getAttribute("flowVersion");

            FlBean flb = result.getResult();
            flb.setFlowCode(flowCode);
            flb.setFlowVersion(flowVersion);
            result.setResult(flb);
        } catch (InterruptedException e) {
            result.faliure();
            result.getDebugInfo().addErrDesc("流程创建错误!");
            result.getDebugInfo().addErrDesc("异常类:" + e.getClass().getName());
            result.getDebugInfo().addErrDesc("异常堆栈:" + ExUtils.getStackMsg(e));
        } catch (ExecutionException e) {
            result.faliure();
            result.getDebugInfo().addErrDesc("流程创建错误!");
            result.getDebugInfo().addErrDesc("异常类:" + e.getClass().getName());
            result.getDebugInfo().addErrDesc("异常堆栈:" + ExUtils.getStackMsg(e));
        }

        return result;
    }

    /**
     * 
     * <p>
     * 管理接口:增加Wp
     * </p>
     * <p>
     * 校验规则:运行态的工作组只能后加签，未开始、结束状态可以前后加签
     * </p>
     * 
     * @author 孙朝辉
     * @param wpId
     *            【必须】工作组ID
     * @param opUserId
     *            【必须】操作人ID
     * @param opUsers
     *            【必须】增加的Wp的人员
     * @param jqType
     *            【必须】加签类别 BEFORE(1), AFTER(2);
     * @return SimpleResult
     */
    @GET
    @Path(WsURI.URI_ADD_WP)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<SimpleResult> addWp(@QueryParam("wpId") Long wpId, @QueryParam("opUserId") Long opUserId, @QueryParam("opUsers") String opUsers,
            @QueryParam("jqType") Integer jqType, @QueryParam("tvs") String tvsString) {

        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>(SimpleResult.class);

        FlowUtils.checkParams(result, "jqType", jqType, "wpId", wpId, "opUsers", opUsers, "opUserId", opUserId);
        Gvs _tvs = Gvs.parseObject(tvsString);
        if (StringUtils.isNotBlank(opUsers)){
            opUsers = EncodeUtils.urlDecode(opUsers);
        }
        if (result.isSuccess()) {
            Wp wp = wpDAO.getWpById(wpId);

            int wpStatus = FlowUtils.getWpStatus(wp);

            if (wpStatus == Ai.STATUS_RUNNING && jqType == JqType.BEFORE.getType()) {
                result.faliure();
                result.getDebugInfo().addErrDesc(ApiMsgUtils.MSG_ADDWP_BEFORE_CANNOT_RUNNING);
            }
        }

        if (result.isSuccess()) {
            User opUser = orgnAPIService.getUserByUserId(opUserId);
            
            Integer _assignType = FlowUtils.getAssignType(_tvs);
            String _finishCtrl = FlowUtils.getFinishCtrl(_tvs);
            String _displayName = FlowUtils.getDisplayName(_tvs, opUser.getUserName() + "加签");
            
            flowService.addWp(opUserId, wpId, opUsers, jqType, _assignType, _finishCtrl, _displayName);
        }

        return result;
    }

    /**
     * 
     * <p>
     * 管理接口:删除工作组
     * </p>
     * <p>
     * 校验规则:参考参数:forceDelete
     * </p>
     * 
     * @author 孙朝辉
     * @param wpId
     *            工作组ID
     * @param opUserId
     *            操作人
     * @param forceDelete
     *            是否强制删除, 当true时,运行态的工作组也会删除,包括工作组内所有正在运行的工作
     * @return SimpleResult
     */
    @GET
    @Path(WsURI.URI_DEL_WP)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<SimpleResult> deleteWp(@QueryParam("opUserId") Long opUserId, @QueryParam("wpId") Long wpId,
            @QueryParam("forceDelete") Boolean forceDelete) {

        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>(SimpleResult.class);
        FlowUtils.checkParams(result, "wpId", wpId, "opUserId", opUserId, "forceDelete", forceDelete);

        // User opUser = orgnAPIService.getUserByUserId(opUserId);
        if (result.isSuccess()) {

            Wp wp = wpDAO.getWpById(wpId);
            int wpStatus = FlowUtils.getWpStatus(wp);

            if (wp.getAi().getAc().getIsStart() == 1 && wp.getIsAi().intValue() == 1) {
                result.faliure();
                result.getDebugInfo().addErrDesc(ApiMsgUtils.MSG_DELWP_OF_START_NOT_ALLOWED);
            } else if (wpStatus == Ai.STATUS_RUNNING && !forceDelete) {
                result.faliure();
                result.getDebugInfo().addErrDesc(ApiMsgUtils.MSG_DELWP_OF_RUNNNG_REQUIRED_FORCE);
            }
        }

        if (result.isSuccess()) {
            flowService.deleteWp(wpId, opUserId);
        }

        return result;
    }
}
