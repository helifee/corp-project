package com.xinleju.erp.flow.frameapi;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.xinleju.erp.base.http.HttpClient;
import com.xinleju.erp.base.http.HttpResponse;
import com.xinleju.erp.flow.frameapi.domain.Auth;
import com.xinleju.erp.flow.frameapi.domain.Orgn;
import com.xinleju.erp.flow.frameapi.domain.Role;
import com.xinleju.erp.flow.frameapi.domain.User;

@SuppressWarnings("unchecked")
public class OrgnClient {
	
	public static final Log logger = LogFactory.getLog(OrgnClient.class);
	
	public String baseUrl = "";
	private String proxyHost;
	private int proxyPort;
	public static final String uri_getUserById = "FrameAPI/getUserById.json";
	public static final String uri_getUserByUserName = "FrameAPI/getUserByUserName.json";
	public static final String uri_getUserListByOrg = "FrameAPI/getUserListByOrg.json";
	public static final String uri_getUserListByRole = "FrameAPI/getUserListByRole.json";
	public static final String uri_getRootOrgList = "FrameAPI/getRootOrgList.json";
	public static final String uri_getSubOrgList = "FrameAPI/getSubOrgList.json";
	public static final String uri_getAllRoleList = "FrameAPI/getAllRoleList.json";
	public static final String uri_authUser = "FrameAPI/authUser.json";
	public static final String uri_modPasswd = "FrameAPI/modPasswd.json";
	public OrgnClient(String baseUrl){
		this.baseUrl = baseUrl;
	}
	
	public HttpResponse modPasswd(String loginName,String newPassword,String zoneCode,boolean validateOldPassword,String oldPassword){
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("loginName", loginName);
		paramMap.put("newPassword", newPassword);
		paramMap.put("oldPassword", oldPassword);
		paramMap.put("zoneCode", zoneCode);
		paramMap.put("validateOldPassword", validateOldPassword + "");
		HttpResponse response = getResponse(uri_modPasswd, paramMap,HttpClient.METHOD_GET);
		
		return response;
	}
	
	public Auth authUser(String loginName,String password,String zoneCode){
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("loginName", loginName);
		paramMap.put("password", password );
		paramMap.put("zoneCode", zoneCode);
		HttpResponse response = getResponse(uri_authUser, paramMap,HttpClient.METHOD_GET);
		Auth auth = response.asBean(Auth.class);
		return auth;
	}
	
	public User getUserByUserName(String zoneCode, String loginName) {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("loginName", loginName);
		paramMap.put("zoneCode", zoneCode );
		HttpResponse response = getResponse(uri_getUserByUserName,paramMap,HttpClient.METHOD_GET);
		User user = response.asBean(User.class);
		return user;
	}
	public User getUserById(Long userId) {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("userId", userId+"");

		HttpResponse response = getResponse(uri_getUserById,paramMap,HttpClient.METHOD_GET);
		User user = response.asBean(User.class);
		return user;
	}
	public List<User> getUserListByOrg(Long _orgnId, boolean includeDisabled) {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("orgnId", _orgnId + "");
		paramMap.put("includeDisabled", includeDisabled + "");
		HttpResponse response = getResponse(uri_getUserListByOrg, paramMap,HttpClient.METHOD_GET);
		List<User> userList = (List<User>)response.asList(User.class);
		return userList;
	}
	
	public List<Role> getAllRoleList(String currentZoneCode) {
		HttpResponse response =  getResponse(uri_getAllRoleList, null,HttpClient.METHOD_GET);
		List<Role> roleList = (List<Role>)response.asList(Role.class);
		return roleList;
	}
	
	public List<User> getUserListByRole(Long roleId,
			Map<String, Object> globalVars, Map<String, Object> transientVar,
			boolean includeDisabled) {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		this.addToMap(paramMap, globalVars, transientVar);
		paramMap.put("roleId", roleId.toString());
		HttpResponse response =  getResponse(uri_getUserListByRole, paramMap,HttpClient.METHOD_GET);
		List<User> userList = (List<User>)response.asList(User.class);
		return userList;
	}

	public List<Orgn> getRootOrgList(String zoneCode,
			boolean includeDisabled) {
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("zoneCode", zoneCode + "");
		paramMap.put("includeDisabled", includeDisabled + "");
		HttpResponse response =  getResponse(uri_getRootOrgList, paramMap,HttpClient.METHOD_GET);
		List<Orgn> orgnList = (List<Orgn>)response.asList(Orgn.class);
		return orgnList;
	}

	public List<Orgn> getSubOrgList(Long parentId, boolean includeDisabled) {
		
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("parentId", parentId + "");
		paramMap.put("includeDisabled", includeDisabled + "");
		
		HttpResponse response =  getResponse(uri_getSubOrgList, paramMap,HttpClient.METHOD_GET);
		List<Orgn> orgnList = (List<Orgn>)response.asList(Orgn.class);
		return orgnList;
	}

	
	public HttpResponse getResponse(String uri, Map<String, Object> paramMap,String method)  {
		String[] baseUrls = baseUrl.indexOf(";")!=-1 ? baseUrl.split(";") : new String[]{baseUrl};
		HttpClient HttpClient = new HttpClient();
		if(StringUtils.isNotEmpty(proxyHost) && proxyPort>0 ){
			HttpClient.setProxy(proxyHost, proxyPort);
		}
		HttpResponse r = null;
		if(StringUtils.isNotEmpty(VALID_URL)){
			r = HttpClient.execute((VALID_URL + "/" + uri),method,0,paramMap);
			
		}
		if(r == null || r.getResult() == null){
			for(String base_url : baseUrls){
				r = HttpClient.execute((base_url + "/" + uri),method,0,paramMap);
				if(r.getResult() != null){
					VALID_URL = base_url;
					break;
				}
			}
		}
		return r;
	}

	
	public static void main(String[] args){
		OrgnClient c = new OrgnClient("http://58.240.212.182:9090/AppFrame/webservice");
		User user =  c.getUserByUserName("tele-hot", "admin");
		Auth auth = c.authUser("admin", "123456", "tele-hot");
		System.out.println(user);
		System.out.println(auth.getErr_type());
	}
	
	private Map<String, Object> addToMap(Map<String, Object> dest,
			Map<String, ?>... srcs) {
		if (srcs != null) {
			for (Map<String, ?> src : srcs) {
				if(src!=null){
					for (String k : src.keySet()) {
						Object v = src.get(k);
						if (v != null) {
							dest.put(k, String.valueOf(v));
						}
					}
				}
				
			}

		}
		return dest;
	}
	
	private static String VALID_URL = "";
	public String getProxyHost() {
		return proxyHost;
	}

	public void setProxyHost(String proxyHost) {
		this.proxyHost = proxyHost;
	}

	public int getProxyPort() {
		return proxyPort;
	}

	public void setProxyPort(int proxyPort) {
		this.proxyPort = proxyPort;
	}

}
