package com.xinleju.erp.flowengine.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Service;

import com.ql.util.express.DefaultContext;
import com.ql.util.express.ExpressRunner;
import com.ql.util.express.IExpressContext;
import com.xinleju.erp.flowengine.models.FlowInstanceVariableMap;
import com.xinleju.erp.flowengine.service.FormulaCalculationService;

@Service(value="FormulaCalculationService")
public class FormulaCalculationServiceImpl implements FormulaCalculationService {

	public synchronized boolean parse(String expression, FlowInstanceVariableMap flowInstanceVariableMap,Map<String,String> paramTypeMap) throws Exception {
		Boolean o=false;
		try{
		initRunner(runner);
		expression = initExpression(expression);	
		//com.xinleju.erp.flow.bean.FinishCtrlContext ctx = new FinishCtrlContext(kvs,this.ctx);
		 IExpressContext<String,Object> expressContext = new DefaultContext<String,Object>();
		 if(flowInstanceVariableMap!=null){
			 Map<String,Object> map =flowInstanceVariableMap.getValueMap();
			 Set<String> set=map.keySet();
			 if(set!=null && set.size()>0){
				 for(String key : set){
					 /**
					if(map.get(key)!=null){
						 if(StringUtils.isNotBlank(map.get(key).toString())&&IsNumber(map.get(key).toString())){
							 expressContext.put(key,Double.parseDouble(map.get(key).toString()));
						 }else{1298432329333.00
							 expressContext.put(key, map.get(key).toString());
						 }
					}预算价 预算价 ﻿预算价
					**/
	
					 if(paramTypeMap.get(key)!=null){
							if("S".equals(paramTypeMap.get(key))){
								if(map.get(key)!=null){
									 expressContext.put(key,map.get(key).toString().trim());
								}else{
									 expressContext.put(key,"");
								}
							}else if("N".equals(paramTypeMap.get(key))){
								if(map.get(key)!=null){
									 String result=map.get(key).toString().replace(",", "");
									 expressContext.put(key,Double.parseDouble(result));
								}else{
									 expressContext.put(key,0);
								}
							}
					 }else{
						// System.out.println(key+"========流程变量没注册");
					 }

				 }
			 }
		 }
		List<String> errorInfo = new ArrayList<String>();
		 o = (Boolean) runner.execute(expression, expressContext, errorInfo, false,false);
		 //运行结果
		 System.out.println("表达式expression=="+expression+"结果======"+o.booleanValue());
		 
		}catch(Exception e){
			e.printStackTrace();
		}
		return o.booleanValue();
	}

	private static String initExpression(String expression) {
		return expression.replace("（", "(").replace("）", ")").replace("；", ";").replace("，", ",").replace("“", "\"").replace("”", "\"");
	}

	 private static boolean IsNumber(String str) {
		 String regex = "^(-)?[0-9]+([.][0-9]+){0,1}$";	 
		 return  match(regex, str);
	}
     private static boolean match(String regex, String str) {
		 Pattern pattern = Pattern.compile(regex);
		 Matcher matcher = pattern.matcher(str);
		 return matcher.matches();
	}
     
     
     
    public static void main(){
    //	{﻿预算价=N, ﻿评标小组=S, ﻿定标金额=N, ﻿商务评委=S, ﻿项目名称=S, ﻿商务谈判我方参与人=S, ﻿招标类别=S}
     String key="预算价";
     Map map=new HashMap();
     map.put("预算价", "N");
     System.out.print(map.get(key));
     
    }
	private static void initRunner(ExpressRunner runner) {
			if (isInitialRunner == true) {
				return;
			}
			try {
				// 在此可以加入预定义函数  报销金额 大于等于 50000
				runner.addOperatorWithAlias("属于", "in", "");
				runner.addOperatorWithAlias("小于等于", "<=", "");
				runner.addOperatorWithAlias("大于等于", ">=", "");
				runner.addOperatorWithAlias("不等于", "!=", "");
				runner.addOperatorWithAlias("等于",  "==", "结果不相等");
				runner.addOperatorWithAlias("大于", ">", "");
				runner.addOperatorWithAlias("小于", "<", "");
				runner.addOperatorWithAlias("并且", "&&", "");
				runner.addOperatorWithAlias("或者", "||", "");
				
			} catch (Exception e) {
				throw new RuntimeException("初始化失败表达式", e);
			}
		isInitialRunner = true;
	}

	private static ExpressRunner runner;
	static {
		runner = new ExpressRunner(false,true);
	}
	private static boolean isInitialRunner = false;

	
	private ApplicationContext ctx;
    public void setApplicationContext(ApplicationContext arg0) throws BeansException {
        this.ctx = arg0;
        
    }
    
    public static void main(String[] args){
		initRunner(runner);
    	IExpressContext<String, Object> context =new DefaultContext<String, Object>();  
      	String expression="出差类型 不等于 \"国内(不含港澳台)\"";
      	 //expression="报销金额  小于  50000";
    	expression = initExpression(expression);	
    	context.put("出差类型","国内(不含港澳台)");
          List<String> errorInfo = new ArrayList<String>();
    	try {
			System.out.println("==="+ runner.execute(expression, context, errorInfo, false,false));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
}
