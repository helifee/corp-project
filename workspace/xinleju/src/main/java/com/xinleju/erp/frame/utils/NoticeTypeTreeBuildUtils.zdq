package com.xinleju.erp.frame.utils;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.PostConstruct;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.xinleju.erp.frame.models.NoticeTemplate;
import com.xinleju.erp.frame.models.NoticeType;
import com.xinleju.erp.frame.service.NoticeService;

@Component
public class NoticeTypeTreeBuildUtils {
	public static final String NOTICE_TYPE_ROOT = "ROOT_";
	public static final String NOTICE_TYPE_NOTICETYPE = "NOTICETYPE_";
	public static final String NOTICE_TYPE_NOTICETEMPLATE = "NOTICETEMPLATE_";
	
	@Autowired
	private NoticeService noticeService;
	
	
	private static NoticeTypeTreeBuildUtils noticeTypeTreeBuildUtils;
	
	@PostConstruct
    public void init() {
		noticeTypeTreeBuildUtils = this;
		noticeTypeTreeBuildUtils.noticeService = this.noticeService;
    }
	
	public static Map<String,Object> buildNoticeTypeTree(NoticeType noticeType,boolean includeDisabled,boolean includeTemplate) {
		if(noticeType != null) {
			Map<String,Object> result = new HashMap<String, Object>();
			result.put("id", NOTICE_TYPE_NOTICETYPE+noticeType.getId());
			result.put("code", NOTICE_TYPE_NOTICETYPE+noticeType.getId());
			Long childCount = 0L;
			childCount += noticeTypeTreeBuildUtils.noticeService.getChildTypeCount(noticeType.getId(), includeDisabled);
			if(includeTemplate) {
				childCount += noticeTypeTreeBuildUtils.noticeService.getTemplateCountByTid(noticeType.getId(), includeDisabled);
			}
			result.put("leaf", childCount > 0 ? false : true);
			if(noticeType.getStatus() == NoticeType.STATUS_DISABLE) {
				result.put("text", "<span style='color:red'>"+noticeType.getName()+"</span>");
			}else{
				result.put("text",noticeType.getName());
			}
			return result;
		}
		return null;
	}
	
	public static List<Map<String,Object>> buildNoticeTypeTree(List<NoticeType> noticeTypes,boolean includeDisabled,boolean includeTemplate) {
		List<Map<String,Object>> result = new ArrayList<Map<String,Object>>();
		if(noticeTypes != null && !noticeTypes.isEmpty()) {
			for(NoticeType noticeType : noticeTypes) {
				result.add(buildNoticeTypeTree(noticeType, includeDisabled,includeTemplate));
			}
		}
		return  result;
	}
	
	public static Map<String,Object> buildNoticeTypeTree(NoticeTemplate noticeTemplate,boolean includeDisabled) {
		if(noticeTemplate != null) {
			Map<String,Object> result = new HashMap<String, Object>();
			result.put("id", NOTICE_TYPE_NOTICETEMPLATE+noticeTemplate.getId());
			result.put("code", NOTICE_TYPE_NOTICETEMPLATE+noticeTemplate.getId());
			result.put("leaf", true);
			if(noticeTemplate.getStatus() == NoticeTemplate.STATUS_DISABLE) {
				result.put("text", "<span style='color:red'>"+noticeTemplate.getName()+"</span>");
			}else{
				result.put("text",noticeTemplate.getName());
			}
			return result;
		}
		return null;
	}
	
	public static List<Map<String,Object>> buildNoticeTypeTree(List<NoticeTemplate> noticeTemplates,boolean includeDisabled) {
		List<Map<String,Object>> result = new ArrayList<Map<String,Object>>();
		if(noticeTemplates != null && !noticeTemplates.isEmpty()) {
			for(NoticeTemplate noticeTemplate : noticeTemplates) {
				result.add(buildNoticeTypeTree(noticeTemplate, includeDisabled));
			}
		}
		return  result;
	}
	
}
