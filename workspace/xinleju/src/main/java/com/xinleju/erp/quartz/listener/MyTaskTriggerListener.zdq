package com.xinleju.erp.quartz.listener;

import java.net.InetAddress;
import java.net.UnknownHostException;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.quartz.JobExecutionContext;
import org.quartz.Trigger;
import org.quartz.Trigger.CompletedExecutionInstruction;
import org.quartz.TriggerListener;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;



@Component("MyTaskTriggerListener")
public class MyTaskTriggerListener implements TriggerListener {
    protected static final Logger logger = Logger.getLogger(MyTaskTriggerListener.class);

    @Value("#{appProperties['quartz.server']}")
    private String taskServers;
    public String getName() {
        return "MyTaskTriggerListener";
    }
    
    /** 
        * (4) 任务完成时触发 
        * Called by the Scheduler when a Trigger has fired, it's associated JobDetail has been executed 
        * and it's triggered(xx) method has been called. 
     */  
    public void triggerComplete(Trigger trigger, JobExecutionContext context,
			CompletedExecutionInstruction triggerInstructionCode) {
	}

   /** 
    * (1)  Trigger被激发 它关联的job即将被运行 
    *   Called by the Scheduler when a Trigger has fired, and it's associated JobDetail is about to be executed. 
    */  

    public void triggerFired(Trigger arg0, JobExecutionContext arg1) {
    }
    /** 
        * (3) 当Trigger错过被激发时执行,比如当前时间有很多触发器都需要执行，但是线程池中的有效线程都在工作， 
        *  那么有的触发器就有可能超时，错过这一轮的触发。 
         * Called by the Scheduler when a Trigger has misfired. 
     */  
    public void triggerMisfired(Trigger arg0) {
    }

    /** 
       * (2) 
        * Trigger被激发 它关联的job即将被运行,先执行(1)，在执行(2) 如果返回TRUE 那么任务job会被终止 
       * Called by the Scheduler when a Trigger has fired, and it's associated JobDetail is about to be executed 
       */  
    public boolean vetoJobExecution(Trigger arg0, JobExecutionContext arg1) {
     
        if (StringUtils.isBlank(taskServers)) {
           logger.debug("任务执行server未配置，请检查配置文件quartz.server的值！");
            return true;
        }
        String serverHostAddress = "";
        try {
            serverHostAddress = InetAddress.getLocalHost().getHostAddress();
        } catch (UnknownHostException e) {
            logger.error(e.getMessage(), e);
        }
        if (StringUtils.isBlank(serverHostAddress)){
            serverHostAddress = "";
        }
        return false;
        /**
        if (StringUtils.isNotBlank(serverHostAddress) && taskServers.indexOf(serverHostAddress) > -1) {
            logger.debug("该机器为定时任务执行机器，job将会执行！");
            return false;
        } else {
            logger.debug("该机器为非任务执行机器，job将会被拒绝执行！" + "taskServers:" + taskServers + "-->" + "serverHostAddress:" + serverHostAddress);
            return true;
        }
        */
        
    }

	

}