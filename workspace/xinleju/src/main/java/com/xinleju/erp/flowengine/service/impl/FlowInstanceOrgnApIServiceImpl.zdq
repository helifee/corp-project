package com.xinleju.erp.flowengine.service.impl;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Service;

import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.flowengine.service.FlowInstanceOrgnApISerive;
import com.xinleju.erp.form.utils.DbType;
import com.xinleju.erp.frame.models.Company;
import com.xinleju.erp.frame.models.PartyEntity;
import com.xinleju.erp.frame.models.PartyType;
import com.xinleju.erp.frame.models.Role;
import com.xinleju.erp.frame.models.RoleGeneral;
import com.xinleju.erp.frame.models.User;

@Service
public class FlowInstanceOrgnApIServiceImpl  extends BaseService implements FlowInstanceOrgnApISerive{
	    @Autowired
	    private JdbcTemplate jt;
	    
	    
	    /**
	     * 获取角色
	     * @param Id
	     * @return
	     */
	    public Role getRoleByroleId(String roleId){
	    	try {
	    		System.out.println("查询***************************roleId=="+roleId);
	    		String sql="select r.id,r.name,r.type ,r.code ,r.type_code from sm_role r where r.id =? ";
		    	return jt.queryForObject(sql, new Object[]{roleId},new RoleMapper());
			} catch (Exception e) {
				// TODO: handle exception
				System.out.println("不存在的*************************roleId=="+roleId);
				e.printStackTrace();
			}
	        return null;
	    }
	    
	    
	    public User getUserByuserId(String userId){
	    	String sql="select u.id,u.prefix,u.real_name,u.main_role_id,u.loginname from sm_user u where u.id =? ";
	    	return jt.queryForObject(sql, new Object[]{userId},new UserMapper());
	    }
	    
	    public String getObjectById(String id){
	    	String sql="select f.name from sm_service_object_field f where f.id =? ";
	    	return jt.queryForObject(sql,String.class,id);
	    }
	    
	    
	    /**
	     * 查询唯一实体
	     * @param ref_id
	     * @param type
	     * @return
	     */
	    public PartyEntity getPartyEntityByref_idAndType(String ref_id,String type){
	    	String sql="select e.id,e.name,e.name_prefix,e.ref_id ,e.prefix from sm_party_entity e,sm_party_type t where e.party_type_id=t.id and t.type = ? and  e.ref_id='"+ref_id+"' ";
	    	List<PartyEntity> partyEntitys=jt.query(sql, new Object[]{type},new PartEntityMapper());
	    	  if(partyEntitys!=null && partyEntitys.size()>0){
				  return partyEntitys.get(0);
			  }else{
				  return null;
			  }
	    }
	    
	    
	    
	    @Override
		public PartyEntity getPartyEntityByidAndType(String id, String type) {
			// TODO Auto-generated method stub
	    	String sql="select e.id,e.name,e.name_prefix,e.ref_id ,e.prefix from sm_party_entity e,sm_party_type t where e.party_type_id=t.id and t.type = ? and  e.id='"+id+"' ";
	    	List<PartyEntity> partyEntitys=jt.query(sql, new Object[]{type},new PartEntityMapper());
	    	  if(partyEntitys!=null && partyEntitys.size()>0){
				  return partyEntitys.get(0);
			  }else{
				  return null;
			  }
		}


		/**
	     * 通过岗位获取对应的上级类型
	     * @param ref_id
	     * @param type
	     * @return
	     */
	    public PartyEntity getContainPartyEntityByref_idAndType(String ref_id,String type){
	    	String sql="select y.id,y.name,y.name_prefix,y.ref_id ,y.prefix from sm_party_entity e,sm_party_type t ,sm_party_entity y,sm_party_type yt where y.party_type_id=yt.id and yt.type=? and "+DbType.getType()+"locate(y.prefix,e.prefix) >0 and e.party_type_id=t.id  and  e.ref_id='"+ref_id+"' and  t.type = '"+PartyType.TYPE_ROLE+"'  order by y.prefix desc ";
	    	List<PartyEntity> partyEntitys=jt.query(sql, new Object[]{type},new PartEntityMapper());
	    	  if(partyEntitys!=null && partyEntitys.size()>0){
				  return partyEntitys.get(0);
			  }else{
				  return null;
			  }
	    }
	 
		/**
	     * 获取用户岗位UserId
	     * @param ref_id
	     * @param type
	     * @return
	     */
	    public List<PartyEntity> getPartyEntityByUserId(String userIds){
	    	String sql="SELECT e.id,e. NAME,e.name_prefix,e.ref_id FROM sm_party_entity e,sm_party_type t,sm_party_entity ee WHERE e.party_type_id = t.id AND t.type =? AND ee.ref_id = ? AND "+DbType.getType()+"locate(e.prefix, ee.prefix) > 0 ";
	    	return jt.query(sql, new Object[]{PartyType.TYPE_ROLE,userIds},new PartEntityMapper());
	    }
	    
	    
	    /**
	     * 通过岗位序号，获取岗位下的用户
	     * @param prefix
	     * @return
	     */
	    public Map<String,Object> getPartyEntityUsersByPrefix(String prefix){
	    	//
	    	//
	    	String sql="select e.name as name,e.ref_id as ref_id from sm_party_entity e ,sm_party_type t ,sm_user u where  e.ref_id=u.id and u.status="+User.STATUS_ENABLE+" and e.party_type_id=t.id and t.type='" + PartyType.TYPE_USER+ "'  and "+DbType.getType()+"locate(?,e.prefix)>0 ";
	    	
	    	Map<String,Object> mapResult = null;
	    	
	    	try {
	    		PostUserMapper postUsers=new PostUserMapper();
	    		jt.query(sql, new Object[]{prefix},postUsers);
	    		mapResult=postUsers.getMapResult();
		    } catch (EmptyResultDataAccessException ex) {
				
		    	mapResult = new HashMap<String, Object>();
			}
	    	
	    	return mapResult;
	    }
	    
	    private static class PostUserMapper implements RowMapper {
	    	public  Map<String, Object> mapResult=new HashMap<String, Object>();
			@Override
			public Object mapRow(ResultSet rs, int rowNum) throws SQLException {
				// TODO Auto-generated method stub
				mapResult.put( rs.getString("ref_id"),rs.getString("name"));
				return null;
			}
			public Map<String, Object> getMapResult() {
				return mapResult;
			}
			public void setMapResult(Map<String, Object> mapResult) {
				this.mapResult = mapResult;
			}
			
			
	    	
	    }
	    
	    private static class UserMapper implements RowMapper<User> {
	        @Override
	        public User mapRow(ResultSet arg0, int arg1) throws SQLException {
	            User user = new User();
	            user.setId(arg0.getLong("id"));
	            user.setRealName(arg0.getString("real_name"));
	            user.setPrefix(arg0.getString("prefix"));
	            user.setMainRoleId(arg0.getLong("main_role_id"));
	            user.setLoginname(arg0.getString("loginname"));
	            
	            return user;
	        }
	    }
	    
	    /**
	     * 
	     *角色Mapper
	     * @author Administrator
	     *
	     */
	    private static class RoleMapper implements RowMapper<Role> {
	        @Override
	        public Role mapRow(ResultSet arg0, int arg1) throws SQLException {
	            Role role = new Role();
	            role.setId(arg0.getLong("id"));
	            role.setCode(arg0.getString("code"));
	            role.setName(arg0.getString("name"));
	            role.setType(arg0.getString("type"));
	            role.setTypeCode(arg0.getString("type_code"));
	            return role;
	        }
	    }
	    
	    
	    /**
	     * 
	     * 实体Mapper
	     * @author Administrator
	     *
	     */
	    private static class PartEntityMapper implements  RowMapper<PartyEntity> {

	        @Override
	        public PartyEntity mapRow(ResultSet arg0, int arg1) throws SQLException {
	        	PartyEntity pe = new PartyEntity();
	            //role.setUserId(arg0.getLong("id"));
	            pe.setName(arg0.getString("name"));
	            pe.setId(arg0.getLong("id"));
	            pe.setRefId(arg0.getLong("ref_id"));
	            pe.setPrefix(arg0.getString("prefix"));
	            pe.setNamePrefix(arg0.getString("name_prefix"));
	            return pe;
	        }

	    }
	    
	    
	    /**
	     * 如果配置的是角色，牵扯2中情况，一种是职能岗位，一种是项目岗位
	     * 获取角色对应的岗位实体
	     * @param role,流程配置的角色
	     * @param startPostId
	     * @param projectId
	     * @return
	     */
	    public List<PartyEntity> getRoleForPostsBystartPostIdOrProjectId(Role role,Long startPostId,String projectId){
	        boolean isTdRole = role.getTypeCode() != null && role.getTypeCode().contains(PartyType.TYPE_GROUP);  //项目角色
	        boolean isBmRole = role.getTypeCode() != null && role.getTypeCode().contains(PartyType.TYPE_DEPARTMENT);  //部门角色
	        boolean isCsRole = role.getTypeCode() != null && role.getTypeCode().contains(PartyType.TYPE_COMPANY);   	//	公司角色
	        boolean isJtRole = role.getTypeCode() != null && role.getTypeCode().contains(PartyType.TYPE_ZB);  //集团角色
	        List<PartyEntity> result = new ArrayList<PartyEntity>();
	        Long roleId=role.getId();
	        if(isTdRole){
	        	if(projectId!=null &!"".equals(projectId)){
	        	      String[] ids=projectId.split(",");
	        	      StringBuffer sb=new StringBuffer();
	        		  for(String id:ids){
	        			  sb.append("'"+id+"',");
	        		  }
	        		  String sqlIn="";
	        		  if(sb.toString().endsWith(",")){
	        			  sqlIn=sb.substring(0, sb.toString().length()-1);
	        		  }
	        		  //获取项目下的角色对应的岗位
	        		  String start_post_at_group_sql =  "select distinct pe.id,pe.name,pe.name_prefix,pe.ref_id ,pe.prefix  from sm_party_entity pe  left join sm_party_entity e on "+DbType.getType()+"locate(e.prefix,pe.prefix)>0 left join sm_party_type ty"+
	        		  " on pe.party_type_id=ty.id left join sm_party_type pt on e.party_type_id=pt.id left join sm_group g on g.id=e.ref_id  where  pt.type= '" + PartyType.TYPE_GROUP+ "' and g.ref_object_id in("+sqlIn+") and ty.type= '" + PartyType.TYPE_ROLE+ "' and pe.ref_parent_id='"+roleId+"'  " ;
	        		             result= jt.query(start_post_at_group_sql,new PartEntityMapper());
	        	}else{
	        		//获取最大接近的项目
	        		//获取最接近的项目prefix
		       	     String groupPrefixSql="select max(yy.prefix) from sm_party_entity yy,sm_party_type t, sm_party_entity y,sm_party_type ty where ty.id=y.party_type_id and ty.type='"+PartyType.TYPE_ROLE+"' and  "+DbType.getType()+"locate(yy.prefix,y.prefix)>0 and t.id=yy.party_type_id and  t.type = '" + PartyType.TYPE_GROUP+ "' and y.ref_id='" + startPostId+ "'";
	        		 String groupPrefix= jt.queryForObject(groupPrefixSql, String.class);
	        		 if(groupPrefix!=null &&!"".equals(groupPrefix)){
	        			 String start_post_at_group_sql =  "select distinct  ee.id,ee.name,ee.name_prefix,ee.ref_id ,ee.prefix  from sm_party_entity ee  where ee.ref_parent_id ='"+roleId+"'  and "+DbType.getType()+"locate('"+groupPrefix+"',ee.prefix) >0";
		        		 result= jt.query(start_post_at_group_sql,new PartEntityMapper());
	        		 }
	        		//获取发起岗位对应的项目 
	        	}
	        	
	          
	        }
	        //如果是部门级别的角色，获取该部门E.ID，作为 roleId 的查询起源
	        else if(isBmRole){
	       	     String groupPrefixSql="select max(yy.prefix) from sm_party_entity yy,sm_party_type t, sm_party_entity y,sm_party_type ty where ty.id=y.party_type_id and ty.type='"+PartyType.TYPE_ROLE+"' and  "+DbType.getType()+"locate(yy.prefix,y.prefix)>0 and t.id=yy.party_type_id and  t.type = '" +PartyType.TYPE_DEPARTMENT+ "' and y.ref_id='" + startPostId+ "'";
        		 String groupPrefix= jt.queryForObject(groupPrefixSql, String.class);
        		 if(groupPrefix!=null &&!"".equals(groupPrefix)){
        			 String start_post_at_group_sql =  "select distinct  ee.id,ee.name,ee.name_prefix,ee.ref_id ,ee.prefix  from sm_party_entity ee  where ee.ref_parent_id ='"+roleId+"'  and "+DbType.getType()+"locate('"+groupPrefix+"',ee.prefix) >0";
	        		 result= jt.query(start_post_at_group_sql,new PartEntityMapper());
        		 }
	        }
	        //如果是城市公司级别的角色，获取该城市公司E.ID，作为 roleId 的查询起源
	        else if(isCsRole){
		       	     String groupPrefixSql="select max(yy.prefix) from sm_party_entity yy,sm_party_type t, sm_party_entity y,sm_party_type ty where ty.id=y.party_type_id and ty.type='"+PartyType.TYPE_ROLE+"' and  "+DbType.getType()+"locate(yy.prefix,y.prefix)>0 and t.id=yy.party_type_id and  t.type = '" + PartyType.TYPE_COMPANY+ "' and y.ref_id='" + startPostId+ "'";
		    		 String groupPrefix= jt.queryForObject(groupPrefixSql, String.class);
		    		 if(groupPrefix!=null &&!"".equals(groupPrefix)){
		    			 String start_post_at_group_sql =  "select distinct  ee.id,ee.name,ee.name_prefix,ee.ref_id ,ee.prefix  from sm_party_entity ee  where ee.ref_parent_id ='"+roleId+"'  and "+DbType.getType()+"locate('"+groupPrefix+"',ee.prefix) >0";
		        		 result= jt.query(start_post_at_group_sql,new PartEntityMapper());
		    		 
			        }
	        //如果是集团级别的角色，则从全局查询
	        }else  if(isJtRole){
		       	 String groupPrefixSql="select max(yy.prefix) from sm_party_entity yy,sm_party_type t, sm_party_entity y,sm_party_type ty where ty.id=y.party_type_id and ty.type='"+PartyType.TYPE_ROLE+"' and  "+DbType.getType()+"locate(yy.prefix,y.prefix)>0 and t.id=yy.party_type_id and  t.type = '" + PartyType.TYPE_ZB+ "' and y.ref_id='" + startPostId+ "'";
	    		 String groupPrefix= jt.queryForObject(groupPrefixSql, String.class);
	    		 if(groupPrefix!=null &&!"".equals(groupPrefix)){
	    			 String start_post_at_group_sql =  "select distinct  ee.id,ee.name,ee.name_prefix,ee.ref_id ,ee.prefix  from sm_party_entity ee  where ee.ref_parent_id ='"+roleId+"'  and "+DbType.getType()+"locate('"+groupPrefix+"',ee.prefix) >0";
	        		 result= jt.query(start_post_at_group_sql,new PartEntityMapper());
	    		 }
	        }
	        return result;
	    }
	    
	    
	    /**
	     * 岗位的上级岗位
	     * @param roleId
	     * @return
	     */
	    public PartyEntity getParentPartEntityByPostId(String roleId){
			  String start_post_at_group_sql =  "select pe.id,pe.name,pe.name_prefix,pe.ref_id ,pe.prefix   from sm_party_entity pe ,sm_role s ,sm_party_type t where  pe.party_type_id=t.id and t.type='"+PartyType.TYPE_ROLE+"'  and pe.ref_id=s.leader_role_id and s.id=?" ;
			  List<PartyEntity>  partyEntitys= jt.query(start_post_at_group_sql,new Object[]{roleId},new PartEntityMapper());
			  if(partyEntitys!=null && partyEntitys.size()>0){
				  return partyEntitys.get(0);
			  }else{
				  return null;
			  }
	    }
	    
	    
	    
	


		@Override
		public PartyEntity getParentUpPartEntityByPostId(String roleId) {
			// TODO Auto-generated method stub
	    	
	    	 String start_post_at_group_sql =  "select pe.id,pe.name,pe.name_prefix,pe.ref_id ,pe.prefix   from sm_party_entity pe ,sm_role s ,sm_party_type t where  pe.party_type_id=t.id and t.type='"+PartyType.TYPE_ROLE+"'  and pe.ref_id=s.leader_role_id and s.parent_id=?" ;
			  List<PartyEntity>  partyEntitys= jt.query(start_post_at_group_sql,new Object[]{roleId},new PartEntityMapper());
			  if(partyEntitys!=null && partyEntitys.size()>0){
				  return partyEntitys.get(0);
			  }else{
				  return null;
			  }
		}


	    
	    
	    
	    /**
	     * 岗位上级部门领导
	     * @param roleId
	     * @return
	     */
	    public PartyEntity getParentDeptLeaderByDeptId(String deptId){
			  String start_post_at_group_sql =  "select pe.id,pe.name,pe.name_prefix,pe.ref_id ,pe.prefix  from sm_party_entity pe ,sm_dept d ,sm_party_type t where  t.id=pe.party_type_id and t.type='"+PartyType.TYPE_ROLE+"' and  pe.ref_id=d.dept_role_id and  d.id=? " ;
			  List<PartyEntity>  partyEntitys= jt.query(start_post_at_group_sql,new Object[]{deptId},new PartEntityMapper());
			  if(partyEntitys!=null && partyEntitys.size()>0){
				  return partyEntitys.get(0);
			  }else{
				  return null;
			  }
	   }

	    
	    /**
	     * 部门上级领导
	     * @param deptId
	     * @return
	     */
	    public PartyEntity getParentDeptUpLeaderByDeptId(String deptId){
	    	  String start_post_at_group_sql =  "select pe.id,pe.name,pe.name_prefix,pe.ref_id ,pe.prefix  from sm_party_entity pe ,sm_dept d ,sm_party_type t where  t.id=pe.party_type_id and t.type='"+PartyType.TYPE_ROLE+"' and  pe.ref_id=d.up_deptrole_id and  d.id=? " ;			 
	    	  List<PartyEntity>  partyEntitys= jt.query(start_post_at_group_sql,new Object[]{deptId},new PartEntityMapper());
			  if(partyEntitys!=null && partyEntitys.size()>0){
				  return partyEntitys.get(0);
			  }else{
				  return null;
			  }
	   }

	    
	    /**
	     * 获取岗位最近部门
	     * @param deptId
	     * @return
	     */
	    public PartyEntity getDeptByPostIdRefId(String ref_id,String type){
	    	  String start_post_at_group_sql =  "select e.id,e.name,e.name_prefix,e.ref_id ,e.prefix from sm_party_entity e,sm_party_type t ,sm_party_entity y ,sm_party_type tt where e.party_type_id=t.id and t.type = ? and "+DbType.getType()+"locate(e.prefix,y.prefix)>0 and y.ref_id= ? and  y.party_type_id=tt.id and tt.type='role' order by prefix desc " ;			 
	    	  List<PartyEntity>  partyEntitys= jt.query(start_post_at_group_sql,new Object[]{type,ref_id},new PartEntityMapper());
			  if(partyEntitys!=null && partyEntitys.size()>0){
				  return partyEntitys.get(0);
			  }else{
				  return null;
			  }
	   }
	    
	    

		@Override
		public PartyEntity getRootDeptByPostIdRefId(String ref_id, String type) {
			// TODO Auto-generated method stub
			  String start_post_at_group_sql =  "select e.id,e.name,e.name_prefix,e.ref_id ,e.prefix from sm_party_entity e,sm_party_type t ,sm_party_entity y ,sm_party_type tt where e.party_type_id=t.id and t.type = ? and "+DbType.getType()+"locate(e.prefix,y.prefix)>0 and y.ref_id= ? and  y.party_type_id=tt.id and tt.type='role' order by prefix asc " ;			 
	    	  List<PartyEntity>  partyEntitys= jt.query(start_post_at_group_sql,new Object[]{type,ref_id},new PartEntityMapper());
			  if(partyEntitys!=null && partyEntitys.size()>0){
				  return partyEntitys.get(0);
			  }else{
				  return null;
			  }
		}


		@Override
		public String getPartyEntityType(String id) {
			// TODO Auto-generated method stub
			String sql="select t.type from  sm_party_entity y,sm_party_type t where y.party_type_id=t.id and y.id = ";
	    	return jt.queryForObject(sql,String.class,id);
		}


		@Override
		public Company getCompanyByRoleId(Long roleId) {
			// TODO Auto-generated method stub
			String sqlString="SELECT	max(y.ref_id) FROM sm_party_entity y,sm_party_entity yy,sm_party_type t,sm_party_type ty	WHERE ty.type = ? AND ty.id = yy.party_type_id AND t.type = ?"
	                   + " AND "+DbType.getType()+"locate(y.prefix, yy.prefix) > 0 AND y.party_type_id = t.id AND yy.ref_id = ?";
	        Integer companyId = getDao().findIntBySQL(sqlString, PartyType.TYPE_ROLE,PartyType.TYPE_COMPANY, roleId);
	        Company company=null;
	        if(companyId!=null){
	         company=getDao().getById(Company.class, Long.valueOf(companyId),null);
	        }
			return company;
		}
		
		
		/**
		 * 
		 * 通用角色获取角色
		 * @param id
		 * @return
		 */
		public List<String> getRoleByGeneralId(Long id) {
			RoleGeneral roleGeneral = getDao().getById(RoleGeneral.class, id);
			String[] roles = roleGeneral.getMembers().split(";");
			
			List<String> roleLst = new ArrayList<String>();
			for (String role : roles) {
				role = role.replace("_", ":");
				roleLst.add( "Role_" + role );
			}
			
			return roleLst;
		}

}
