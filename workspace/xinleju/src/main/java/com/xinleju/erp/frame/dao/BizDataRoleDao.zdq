package com.xinleju.erp.frame.dao;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Repository;

import com.xinleju.erp.base.utils.CollectionUtils;
import com.xinleju.erp.base.utils.StringHelper;
import com.xinleju.erp.flow.dao.impl.BaseDAO;
import com.xinleju.erp.frame.models.BizDataCtrl;
import com.xinleju.erp.frame.models.BizDataField;
import com.xinleju.erp.frame.models.BizDataRole;
import com.xinleju.erp.frame.models.BizDataScope;

/**
 * 用户所授权的业务控制点范围DAO
 * @author lixj
 *
 */
@Repository
public class BizDataRoleDao extends BaseDAO {
	/**
	 * 通过角色ID和模块编号获取用户所授权的业务控制点范围
	 * @param roleId
	 * @param systemCode
	 * @return
	 */
	public List<BizDataRole> getByModuleCode(Long roleId, String systemCode){
		return getDao().findByHQL(BizDataRole.class, "from BizDataRole where roleId = ?"
				+ " and fieldId in(select bdf.id from BizDataField bdf where bdf.moduleCode = ?)"
				, roleId, systemCode);
	}
	/**
	 * 通过角色ID和模块编号获取用户所授权的业务控制点范围
	 * @param roleId
	 * @return
	 */
	public List<BizDataRole> getByModuleCodeByRoleId(Long roleId){
		if (null != roleId){
			return getDao().findByHQL(BizDataRole.class, "from BizDataRole where roleId = ?", roleId);
		}
		return new ArrayList<BizDataRole>();
	}
	/**
	 * 通过角色ID、唯独ID、模块编号获取用户所授权的控制点范围
	 * @param roleId
	 * @param scopeId
	 * @param systemCode
	 * @return
	 */
	public List<BizDataRole> getByModuleCodeAndScopeId(Long roleId, Long scopeId, String systemCode){
		return getDao().findByHQL(BizDataRole.class, "from BizDataRole where roleId = ? and scopeId = ? and fieldId in(select bdf.id from BizDataField bdf where bdf.moduleCode = ?)",
				roleId, scopeId, systemCode);
	}
	
	
	/**
	 * 根据角色获取业务控制点
	 * @param roleIds
	 * @param systemCode
	 * @return
	 */
	@SuppressWarnings("unchecked")
    public List<BizDataCtrl> getBizDataCtrls(List<Long> roleIds,String systemCode){
		List<Object> param = new ArrayList<Object>();
		StringBuffer hqlStringBuffer = new StringBuffer();
		hqlStringBuffer.append("select bdr.bizDataField.bizDataCtrl from BizDataRole bdr left join bdr.bizDataField field left join bdr.bizDataField.bizDataCtrl ctrl where bdr.roleId in("
                + StringHelper.join(roleIds.toArray(), ",") + ") ");
		if(StringUtils.isNotBlank(systemCode)) {
			hqlStringBuffer.append(" and ctrl.moduleCode = ?");
			param.add(systemCode);
		}
		List<BizDataCtrl> list = getDao().findByHQL(BizDataCtrl.class,hqlStringBuffer.toString(), param.toArray());
		list = CollectionUtils.distinct(list);
		return list;
	}
	
	/**
	 * 根据角色以及业务控制点获取维度
	 * @param roleIds
	 * @param systemCode
	 * @param ctrlId
	 * @return
	 */
	@SuppressWarnings("unchecked")
    public List<BizDataField> getBizDataFields(List<Long> roleIds,String systemCode,Long ctrlId) {
		List<Object> param = new ArrayList<Object>();
		StringBuffer hqlStringBuffer = new StringBuffer();
		hqlStringBuffer.append("select bdr.bizDataField from BizDataRole bdr where bdr.roleId in("
                				+ StringHelper.join(roleIds.toArray(), ",") + ")" )
                		.append(" and bdr.bizDataField.ctrlId = ? ");
		param.add(ctrlId);
		if(StringUtils.isNotBlank(systemCode)) {
			hqlStringBuffer.append(" and bdr.bizDataField.bizDataCtrl.moduleCode = ?");
			param.add(systemCode);
		}
		List<BizDataField> list = getDao().findByHQL(BizDataField.class,hqlStringBuffer.toString(), param.toArray());
		list = CollectionUtils.distinct(list);
		return list;
	}
	
	/**
	 * 根据角色以及维度查询
	 * @param roleIds
	 * @param systemCode
	 * @param fieldId
	 * @return
	 */
	@SuppressWarnings("unchecked")
    public List<BizDataRole> getBizDataRoles(List<Long> roleIds,String systemCode,Long fieldId) {
		List<Object> param = new ArrayList<Object>();
		StringBuffer hqlStringBuffer = new StringBuffer();
		hqlStringBuffer.append("from BizDataRole bdr where bdr.roleId in("
                				+ StringHelper.join(roleIds.toArray(), ",") + ") ")
                		.append(" and bdr.fieldId = ? ");
		param.add(fieldId);
		if(StringUtils.isNotBlank(systemCode)) {
			hqlStringBuffer.append(" and bdr.bizDataField.bizDataCtrl.moduleCode = ?");
			param.add(systemCode);
		}
		List<BizDataRole> list = getDao().findByHQL(BizDataRole.class,hqlStringBuffer.toString(), param.toArray());
		list = CollectionUtils.distinct(list);
		return list;
	}
	
	/**
	 * 根据角色以及维度查询
	 * @param roleIds
	 * @param systemCode
	 * @param fieldId
	 * @return
	 */
	@SuppressWarnings("unchecked")
    public List<BizDataScope> getBizDataRoles(List<Long> roleIds,String systemCode,Long fieldId,Long ctrId) {
		List<Object> param = new ArrayList<Object>();
		StringBuffer hqlStringBuffer = new StringBuffer();
		hqlStringBuffer.append("from BizDataRole bdr where bdr.roleId in("
                				+ StringHelper.join(roleIds.toArray(), ",") + ") ")
                		.append(" and bdr.fieldId = ? ");
		param.add(fieldId);
		if(StringUtils.isNotBlank(systemCode)) {
			hqlStringBuffer.append(" and bdr.bizDataField.bizDataCtrl.moduleCode = ?");
			param.add(systemCode);
		}
		if(ctrId!=null){
			hqlStringBuffer.append(" and bdr.bizDataField.ctrlId = ?");
			param.add(ctrId);
		}
		List<BizDataRole> list = getDao().findByHQL(BizDataRole.class,hqlStringBuffer.toString(), param.toArray());
		list = CollectionUtils.distinct(list);
		List<Long> bizDataScopeIds = new ArrayList<Long>();
		for(BizDataRole bizDataRole:list){
			bizDataScopeIds.add(bizDataRole.getScopeId());
		}
		StringBuffer sql = new StringBuffer();
		sql.append("from BizDataScope where id in(" + StringHelper.join(bizDataScopeIds.toArray(), ",") + ")");
		List<BizDataScope> scopeList = getDao().findByHQL(BizDataScope.class,sql.toString());
		return scopeList;
	}
	
	private boolean hasAllBizDataRoles(List<Long> roleIds,String systemCode,Long fieldId){
	    List<Object> param = new ArrayList<Object>();
	    StringBuffer hqlStringBuffer = new StringBuffer();
        hqlStringBuffer.append("roleId in("
                                + StringHelper.join(roleIds.toArray(), ",") + ") ")
                        .append(" and fieldId = ? ");
        param.add(fieldId);
        if(StringUtils.isNotBlank(systemCode)) {
            hqlStringBuffer.append(" and bizDataField.bizDataCtrl.moduleCode = ?");
            param.add(systemCode);
        }
//	    boolean hasAllBizDataRoles = getDao().isExist(BizDataRole.class, arg1, arg2);
	    return false;
	}
	

	//根据范围id查询角色id
	public List<BizDataRole> getRoleIdByScopeId(Long scopeId){
		StringBuffer hqlSb = new StringBuffer();
		hqlSb.append(" from BizDataRole c where 1 = 1");
		
		hqlSb.append(" and c.scopeId ="+scopeId);
		return getDao().findByHQL(BizDataRole.class, hqlSb.toString());
	}
}
