package com.xinleju.erp.flowengine.service;

import java.util.List;
import java.util.Map;

import com.xinleju.erp.frame.models.Company;
import com.xinleju.erp.frame.models.PartyEntity;
import com.xinleju.erp.frame.models.Role;
import com.xinleju.erp.frame.models.User;


public interface FlowInstanceOrgnApISerive {

    /**
     * 获取角色
     * @param Id
     * @return
     */
    public Role getRoleByroleId(String roleId);
    
    
    
    /**
     * 获取类型
     * @param partId
     * @return
     */
    public String getPartyEntityType(String id);
    
    
    /**
     * @param userId
     * @return
     */
    public User getUserByuserId(String userId);
    
    
    /**
     * @param id
     * @return
     */
    public String getObjectById(String id);
    
    /**
     * 单一查询
     * @param ref_id
     * @param type
     * @return
     */
    public PartyEntity getPartyEntityByref_idAndType(String ref_id,String type);
    
    
    /**
     * 单一查询
     * @param ref_id
     * @param type
     * @return
     */
    public PartyEntity getPartyEntityByidAndType(String id,String type);
    
    /**
     * 
     * 获取岗位上级
     * @param ref_id
     * @param type
     * @return
     */
    public PartyEntity getContainPartyEntityByref_idAndType(String ref_id,String type);
    /**
     * 获取用户岗位UserId
     * @param ref_id
     * @param type
     * @return
     */
    public List<PartyEntity> getPartyEntityByUserId(String userIds);
    
    /**
     * 通过岗位序号，获取岗位下的用户
     * @param prefix
     * @return
     */
    public Map<String,Object> getPartyEntityUsersByPrefix(String prefix);
    
    /**
     * 如果配置的是角色，牵扯2中情况，一种是职能岗位，一种是项目岗位
     * 获取角色对应的岗位实体
     * @param role,流程配置的角色
     * @param startPostId
     * @param projectId
     * @return
     */
    public List<PartyEntity> getRoleForPostsBystartPostIdOrProjectId(Role role,Long startPostId,String projectId);
    
    
    /**
     * 岗位的的领导
     * @param roleId
     * @return
     */
    public PartyEntity getParentPartEntityByPostId(String roleId);
    
    /**
     * 岗位的上级领导
     * @param roleId
     * @return
     */
    public PartyEntity getParentUpPartEntityByPostId(String roleId);
    
    
    
    /**
     * 获取部门领导
     * @param roleId
     * @return
     */
    public PartyEntity getParentDeptLeaderByDeptId(String deptId);

    
    
    
    
    /**
     * 获取部门的上级部门领导
     * @param deptId
     * @return
     */
    public PartyEntity getParentDeptUpLeaderByDeptId(String deptId);
    
    
    /**
     * 获取岗位部门
     * @param ref_id
     * @param type
     * @return
     */
    public PartyEntity getDeptByPostIdRefId(String ref_id,String type);
    
    
    /**
     * 获取岗位一级部门
     * @param ref_id
     * @param type
     * @return
     */
    public PartyEntity getRootDeptByPostIdRefId(String ref_id,String type);
    
    
    /**
     * 通过角色获取公司
     * @param roleId
     * @return
     */
    public Company getCompanyByRoleId(Long roleId);
    
    
	/**
	 * 通用角色获取角色
	 * @param id
	 * @return
	 */
	public List<String> getRoleByGeneralId(Long id) ;
    
}
