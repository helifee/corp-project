package com.xinleju.erp.flow.service.impl;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.erp.flow.dao.impl.AcDAO;
import com.xinleju.erp.flow.dao.impl.AiDAO;
import com.xinleju.erp.flow.dao.impl.TrDAO;
import com.xinleju.erp.flow.models.Ac;

/**
 * 
 * 
 * <p>
 * </p>
 * <p>
 * </p>
 * 
 * @author 孙朝辉
 * @version $Id: XorForkTypeService.java 1148 2014-08-05 06:49:12Z sunchaohui $
 * @since
 * 
 */
@Service
public class XorForkTypeService extends AbstractForkService {

    /**
     * 活动实例DAO
     */
    @Autowired
    private AiDAO aiDAO;

    /**
     * 流转DAO
     */
    @Autowired
    private TrDAO trDAO;

    /**
     * 环节定义DAO
     */
    @Autowired
    private AcDAO acDAO;

    @Override
    List<Ac> getNext1AcList(List<Ac> passList, List<Ac> defaultList) {
        List<Ac> returnList = new ArrayList<Ac>();
        if (passList.size() > 0) {
            // 符合条件的所有分支中取优先级别最大的
            Collections.sort(passList, new AcPriorityCompare());

            
            //看是否优先级别一样，是则继续看默认属性
            int maxPri = passList.get(passList.size() - 1).getAcPriority().intValue();
            List<Ac> xdList = new ArrayList<Ac>();
            for (Ac a : passList) {
                if (a.getAcPriority().intValue() == maxPri && a.getIsDefault().intValue() == 1) {
                    xdList.add(a);
                }
            }

            if (xdList.size() > 0) {
                returnList.add(xdList.get(0));
            } else {
                returnList.add(passList.get(passList.size() - 1));
            }

        } else if (defaultList.size() > 0) {
            //
            Collections.sort(defaultList, new AcPriorityCompare());
            returnList.add(defaultList.get(defaultList.size() - 1));
        }
        return returnList;
    }

    public AiDAO getAiDAO() {
        return aiDAO;
    }

    public void setAiDAO(AiDAO aiDAO) {
        this.aiDAO = aiDAO;
    }

    public TrDAO getTrDAO() {
        return trDAO;
    }

    public void setTrDAO(TrDAO trDAO) {
        this.trDAO = trDAO;
    }

    public AcDAO getAcDAO() {
        return acDAO;
    }

    public void setAcDAO(AcDAO acDAO) {
        this.acDAO = acDAO;
    }

    class AcPriorityCompare implements Comparator<Ac> {

        @Override
        public int compare(Ac o1, Ac o2) {
            if (o1.getAcPriority() != null && o2.getAcPriority() != null) {
                return o1.getAcPriority() > o2.getAcPriority() ? 1 : -1;
            } else if (o1.getAcPriority() == null && o2.getAcPriority() != null) {
                return 1;
            } else if (o1.getAcPriority() != null && o2.getAcPriority() == null) {
                return -1;
            } else {
                return 0;
            }

        }

    }
}
