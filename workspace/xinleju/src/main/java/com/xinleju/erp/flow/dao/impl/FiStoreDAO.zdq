package com.xinleju.erp.flow.dao.impl;

import java.util.Date;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Repository;

import com.xinleju.erp.base.app.bean.Page;
import com.xinleju.erp.flow.frameapi.domain.User;
import com.xinleju.erp.flow.models.FiStore;

/**
 * 版权：(C) 版权所有 2000-2014 上海天好电子商务有限公司苏州分公司
 * 流程收藏
 * @author   zhongjun
 * @version  $Id: FiStoreDAO.java 2094 2014-12-12 02:03:27Z zhongjun $
 * @since
 * @see
 */
@Repository
public class FiStoreDAO extends BaseDAO {
    /**
     * 流程收藏-收藏
     * @author jun
     * @param fiId 流程id
     * @param user 操作人信息
     */
    public void fiStore(Long fiId, User user){
        if (null != fiId && null != user && null != user.getUserId()){
            //存在的更新状态，不存在的直接保存
            if (1 > getDao().execute("update FiStore set isDeleted = ? where createUserId = ? and fiId = ?", 0, user.getUserId(), fiId)){
                FiStore fs = new FiStore();
                fs.setCreateTime(new Date());
                fs.setCreateUserId(user.getUserId());
                fs.setCreateUserName(user.getUserName());
                fs.setCreateUserLoginName(user.getLoginName());
                fs.setFiId(fiId);
                fs.setIsDeleted(0);
                getDao().save(fs);
            }
        }
    }
    /**
     * 流程收藏-取消
     * @author jun
     * @param fiStoreId 收藏id
     */
    public void fiStoreCancel(Long fiStoreId){
        getDao().execute("update FiStore set isDeleted = ? where id = ?", 1, fiStoreId);
    }
    /**
     * 流程收藏-列表
     * @author jun
     * @param userId 用户id
     * @param start 开始位置
     * @param limit 每页数
     * @param gvs 检索条件
     * @return 流程收藏-列表
     */
    public Page getFiStorePage(Long userId, int start, int limit, Map<String, Object> gvs){
        DetachedCriteria dc = DetachedCriteria.forClass(FiStore.class);
        dc.createAlias("fi", "fi");
        dc.add(Restrictions.eq("createUserId", userId));
        dc.add(Restrictions.eqOrIsNull("isDeleted", 0));
        if (null != gvs){
            if (null != gvs.get("name") && StringUtils.isNotBlank(gvs.get("name").toString())){
                dc.add(Restrictions.ilike("fi.fiName", "%" + gvs.get("name").toString() + "%"));
            }
            if (null != gvs.get("status") && StringUtils.isNotBlank(gvs.get("status").toString())){
                dc.add(Restrictions.eq("fi.status", Integer.valueOf(gvs.get("status").toString())));
            }
        }
        return getDao().findPage(dc, start, limit);
    }
    /**
     * 是否已收藏
     * @author jun
     * @param fiId 流程id
     * @param userId 用户id
     * @return 是否已收藏
     */
    public boolean isExists(Long fiId, Long userId){
        return getDao().isExist(FiStore.class, "createUserId = ? and fiId = ? and (isDeleted is null or isDeleted = ?)", userId, fiId, 0);
    }
    /**
     * 是否已收藏
     * @author jun
     * @param fiStoreId id
     * @return 是否已收藏
     */
    public boolean isExists(Long fiStoreId){
        return getDao().isExist(FiStore.class, "id = ? and (isDeleted is null or isDeleted = ?)", fiStoreId, 0);
    }
}
