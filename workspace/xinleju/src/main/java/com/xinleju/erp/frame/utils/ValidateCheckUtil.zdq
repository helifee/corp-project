package com.xinleju.erp.frame.utils;

import java.lang.reflect.Field;
import java.util.List;

import javax.persistence.Column;


import com.xinleju.erp.annotation.PageField;
import com.xinleju.erp.frame.exception.ValidateException;
import com.xinleju.erp.frame.models.BaseEntity;
import com.xinleju.erp.frame.models.ChildEntity;
import com.xinleju.erp.frame.service.extend.dto.FiAggDTO;

public class ValidateCheckUtil {
		public static void checkNotNullValue(BaseEntity entity) throws ValidateException{
			Class<?> clazz = entity.getClass();
			Field[] fields = clazz.getDeclaredFields();
			StringBuffer error = new StringBuffer("请填写");
			for(Field field : fields){
				PageField check = field.getAnnotation(PageField.class);
				if(check == null || !check.must())
					continue;
				Object value = entity.getAttribute(field.getName());
				if(value == null || value.toString().length() == 0){
					error.append("[").append(check.showname()).append("]");
				}
			}
			if(error.length()>3)
				throw new ValidateException(error.toString());
		}
		
		public static void checkValidate(FiAggDTO dto) throws ValidateException{
			checkNotNullValue(dto.getParent());
			checkLengthOver(dto.getParent());
			for(List<? extends ChildEntity> list : dto.getChildrenMap().values()){
				 if(list == null || list.size() == 0)
					 continue;
				 for(BaseEntity entity :list){
					 checkNotNullValue(entity);
					 checkLengthOver(entity);
				 }
			 }
		}
		
		public static void checkLengthOver(BaseEntity entity)  throws ValidateException{
			Class<?> clazz = entity.getClass();
			Field[] fields = clazz.getDeclaredFields();
			StringBuffer error = new StringBuffer("以下内容超长:");
			for(Field field : fields){
				PageField check = field.getAnnotation(PageField.class);
				Column column = field.getAnnotation(Column.class);
				if(column == null)
					continue;
				int length = column.length();
				Object value = entity.getAttribute(field.getName());
				if(value != null && value.toString().length() != 0){
					if(value.toString().length() > length){
						error.append("[");
						if(check != null)
							error.append(check.showname());
						else
							error.append(field.getName());
						error.append("=").append(length).append("]");
					}
				}
			}
			if(error.length()>7)
				throw new ValidateException(error.toString());
		}
}
