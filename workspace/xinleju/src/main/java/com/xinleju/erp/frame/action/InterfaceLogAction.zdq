package com.xinleju.erp.frame.action;

import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.base.utils.DateUtils;
import com.xinleju.erp.frame.dao.AppDao;
import com.xinleju.erp.frame.dto.InterfaceLogQueryDTO;
import com.xinleju.erp.frame.dto.OaLogQueryDTO;
import com.xinleju.erp.frame.models.InterfaceLog;
import com.xinleju.erp.frame.models.LogRecord;
import com.xinleju.erp.frame.models.OaMsgSendLog;
import com.xinleju.erp.report.action.ReportSettingAction;

/**
 * 接口日志
 * 
 * @author chenhb
 * 
 */
public class InterfaceLogAction extends BaseAction {

	/**
	 * <p>
	 * Title:InterfaceLogAction.java
	 * </p>
	 * <p>
	 * Description: long
	 * </p>
	 * <p>
	 * Todo:TODO
	 * </p>
	 * 
	 * @author liugang
	 * @date 2016-4-9
	 */
	private static final long serialVersionUID = 1L;

	private InterfaceLogQueryDTO interfaceLogQueryDTO;
	
	private OaLogQueryDTO oaLogQueryDTO;
	
	private static final Log log = LogFactory.getLog(ReportSettingAction.class);

	@Autowired
	private AppDao appDao;

	/**
	 * 列表
	 * 
	 * @return
	 */
	public String list() {
		DetachedCriteria dc = DetachedCriteria.forClass(OaMsgSendLog.class);
		if (oaLogQueryDTO != null) {
			if (StringUtils.isNotBlank(oaLogQueryDTO.getLoginName())) {
				dc.add(Restrictions.like("loginName", "%"+oaLogQueryDTO.getLoginName().trim()+"%"));
			}
			if (StringUtils.isNotBlank(oaLogQueryDTO.getTitle())) {
				dc.add(Restrictions.like("title", "%"+oaLogQueryDTO.getTitle().trim()+"%"));
			}
			if (StringUtils.isNotBlank(oaLogQueryDTO.getModuleCode())) {
				dc.add(Restrictions.eqOrIsNull("moduleCode", oaLogQueryDTO.getModuleCode()));
			}
			if (StringUtils.isNotBlank(oaLogQueryDTO.getOpType())) {
				dc.add(Restrictions.eqOrIsNull("opType", oaLogQueryDTO.getOpType()));
			}
			if (oaLogQueryDTO.getReturnState() != null) {
				dc.add(Restrictions.eq("returnState", oaLogQueryDTO.getReturnState()));
			}
			if (StringUtils.isNotBlank(oaLogQueryDTO.getMsgType())) {
				dc.add(Restrictions.eqOrIsNull("msgType", oaLogQueryDTO.getMsgType()));
			}
			if (StringUtils.isNotBlank(oaLogQueryDTO.getTypedDate().toString())) {
				dc.add(Restrictions.ge("startAt", DateUtils.str2Date(oaLogQueryDTO.getStartAtBegin().trim().concat(" 00:00:00"), "yyyy-MM-dd HH:mm:ss")));
			}

			if (StringUtils.isNotBlank(oaLogQueryDTO.getStartAtEnd())) {
				dc.add(Restrictions.le("startAt", DateUtils.str2Date(oaLogQueryDTO.getStartAtEnd().trim().concat(" 23:59:59"), "yyyy-MM-dd HH:mm:ss")));
			}

		}
//		if (interfaceLogQueryDTO != null) {
//			if (StringUtils.isNotBlank(interfaceLogQueryDTO.getInitiatorName())) {
//				dc.add(Restrictions.like("initiatorName", "%"+interfaceLogQueryDTO.getInitiatorName().trim()+"%"));
//			}
//			if (StringUtils.isNotBlank(interfaceLogQueryDTO.getUserName())) {
//				dc.add(Restrictions.like("userName", "%"+interfaceLogQueryDTO.getUserName().trim()+"%"));
//			}
//			if (StringUtils.isNotBlank(interfaceLogQueryDTO.getTitle())) {
//				dc.add(Restrictions.like("title", "%"+interfaceLogQueryDTO.getTitle().trim()+"%"));
//			}
//			if (StringUtils.isNotBlank(interfaceLogQueryDTO.getName())) {
//				dc.add(Restrictions.like("name", interfaceLogQueryDTO.getName().trim()));
//			}
//			if (StringUtils.isNotBlank(interfaceLogQueryDTO.getModuleCode())) {
//				dc.add(Restrictions.eqOrIsNull("moduleCode", interfaceLogQueryDTO.getModuleCode()));
//			}
//			if (StringUtils.isNotBlank(interfaceLogQueryDTO.getStartAtBegin())) {
//				dc.add(Restrictions.ge("startAt", DateUtils.str2Date(interfaceLogQueryDTO.getStartAtBegin().trim().concat(" 00:00:00"), "yyyy-MM-dd HH:mm:ss")));
//			}
//			
//			if (StringUtils.isNotBlank(interfaceLogQueryDTO.getStartAtEnd())) {
//				dc.add(Restrictions.le("startAt", DateUtils.str2Date(interfaceLogQueryDTO.getStartAtEnd().trim().concat(" 23:59:59"), "yyyy-MM-dd HH:mm:ss")));
//			}
//			if (interfaceLogQueryDTO.getStatus() != null) {
//				dc.add(Restrictions.eq("status", interfaceLogQueryDTO.getStatus()));
//			}
//		}
		page = getCommonService().findPage(dc, start, limit);

		request.setAttribute("statusMap", InterfaceLog.getStatusMap());
		request.setAttribute("getTypeMap", InterfaceLog.getTypeMap());
		request.setAttribute("appMap", appDao.getAppMap());
		return "list";
	}

	/**
	 * 重置重试次数
	 */
	public void resetCount() {
		Map<String, Object> result = new HashMap<String, Object>();
		try {
			String ids = getParameter("ids");
			if (StringUtils.isNotBlank(ids)) {
				getCommonService().execute("update InterfaceLog l set l.retryTimes = 0 where id in  (" + ids.replaceAll(";", ",") + ")");
			}
			result.put("success", true);
		} catch (Exception e) {
			result.put("success", false);
			result.put("msg", e.getMessage());
		}
		renderJson(result);
	}
	/***
	 * 删除日志
	 */
	public void delete() {
		String success = "true";
		String msg = "操作成功！";
		try {
			String retIds = request.getParameter("retIds");
			String[] strIds = retIds.split(";");
			for (String strId : strIds) {
				getCommonService().delete(getCommonService().getById(OaMsgSendLog.class, Long.parseLong(strId)));
			}
			Map<String, Object> r = new HashMap<String, Object>();
			r.put("success", success);
			r.put("msg", msg);
			log.info("delete()" + msg);
			super.renderJson(r);
		} catch (NumberFormatException e) {
			log.info("delete()" + "删除失败");
		}
	}

	public InterfaceLogQueryDTO getInterfaceLogQueryDTO() {
		return interfaceLogQueryDTO;
	}

	public void setInterfaceLogQueryDTO(InterfaceLogQueryDTO interfaceLogQueryDTO) {
		this.interfaceLogQueryDTO = interfaceLogQueryDTO;
	}

}
