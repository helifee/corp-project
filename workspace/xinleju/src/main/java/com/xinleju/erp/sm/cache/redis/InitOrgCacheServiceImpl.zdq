package com.xinleju.erp.sm.cache.redis;

import java.util.List;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.ListOperations;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.stereotype.Service;

import com.xinleju.erp.flow.service.api.extend.dto.CompanyDTO;
import com.xinleju.erp.flow.service.api.extend.dto.DeptDTO;
import com.xinleju.erp.flow.service.api.extend.dto.FuncDTO;
import com.xinleju.erp.flow.service.api.extend.dto.OpDTO;
import com.xinleju.erp.flow.service.api.extend.dto.PartyEntityDTO;
import com.xinleju.erp.flow.service.api.extend.dto.PartyStructDTO;
import com.xinleju.erp.flow.service.api.extend.dto.UserDTO;
import com.xinleju.erp.flow.service.api.extend.dto.RoleDTO;
import com.xinleju.erp.flow.service.api.utils.CompanyUtils;
import com.xinleju.erp.flow.service.api.utils.DeptUtils;
import com.xinleju.erp.flow.service.api.utils.FuncUtils;
import com.xinleju.erp.flow.service.api.utils.PartyEntityUtils;
import com.xinleju.erp.flow.service.api.utils.PartyStructUtils;
import com.xinleju.erp.flow.service.api.utils.RoleUtils;
import com.xinleju.erp.flow.service.api.utils.UserUtils;
import com.xinleju.erp.frame.dao.CompanyDao;
import com.xinleju.erp.frame.dao.DeptDao;
import com.xinleju.erp.frame.dao.FuncButtonDao;
import com.xinleju.erp.frame.dao.FuncModuleDao;
import com.xinleju.erp.frame.dao.PartyEntityDao;
import com.xinleju.erp.frame.dao.PartyStructDao;
import com.xinleju.erp.frame.dao.RoleDao;
import com.xinleju.erp.frame.dao.UserDao;
import com.xinleju.erp.frame.models.Company;
import com.xinleju.erp.frame.models.Dept;
import com.xinleju.erp.frame.models.FuncButton;
import com.xinleju.erp.frame.models.FuncModule;
import com.xinleju.erp.frame.models.PartyEntity;
import com.xinleju.erp.frame.models.PartyStruct;
import com.xinleju.erp.frame.models.User;
import com.xinleju.erp.frame.models.Role;

@Service
public class InitOrgCacheServiceImpl {
	
	@Autowired
	FuncModuleDao funcModuleDao;
	
	@Autowired
	FuncButtonDao funcButtonDao;  
	
	@Autowired
	PartyEntityDao partyEntityDao;
	
	@Autowired
	PartyStructDao partyStructDao;
	
	@Autowired
    private UserDao userDao; 
	
	@Autowired
	private RoleDao roleDao;
	
	@Autowired
	private CompanyDao companyDao;
	
	@Autowired
	private DeptDao deptDao;
    
    @Resource(name="redisTemplate")
    private ListOperations<String, PartyEntityDTO> partyEntityListOper; 
    
    @Resource(name="redisTemplate")
    private ValueOperations<String, PartyEntityDTO> partyEntityValueOper;
    
    @Resource(name="redisTemplate")
    private ListOperations<String, PartyStructDTO> partyStructListOper; 
    
    @Resource(name="redisTemplate")
    private ValueOperations<String, PartyStructDTO> partyStructValueOper;     
    
    @Resource(name="redisTemplate")
    private ListOperations<String, FuncDTO> funcListOper; 

    @Resource(name="redisTemplate")
    private ListOperations<String, OpDTO> opListOper; 

    @Resource(name="redisTemplate")
    private ValueOperations<String, UserDTO> userValueOper;  
    
    @Resource(name="redisTemplate")
    private ValueOperations<String, RoleDTO> roleValueOper; 
    @Resource(name="redisTemplate")
    private ListOperations<String, RoleDTO> roleListOper;
    
    @Resource(name="redisTemplate")
    private ValueOperations<String, CompanyDTO> companyValueOper; 
    
    @Resource(name="redisTemplate")
    private ListOperations<String, CompanyDTO> companyListOper; 
    
    @Resource(name="redisTemplate")
    private ValueOperations<String, DeptDTO> deptValueOper; 
    

    public boolean initAllRole(){
    	List<Role> userList = roleDao.findAllRole();
    	List<Role> roleList2 = roleDao.findRootRole();
    	List<RoleDTO> userDTOList = RoleUtils.buildRoleDtoList(userList);
    	List<RoleDTO> roleDTOList2 = RoleUtils.buildRoleDtoList(roleList2);
    	
    	roleListOper.getOperations().delete("role:standard");
    	roleListOper.getOperations().delete("role:root");
    	
    	for(RoleDTO userDTO : userDTOList){
    		if(userDTO.getParentId()!=null)
    			roleListOper.getOperations().delete("role:parent_id:"+userDTO.getParentId()); 
    	}
    	
    	for(RoleDTO userDTO : userDTOList){
    		roleValueOper.set("role:role_id:"+userDTO.getId(), userDTO); 
    		if("standard".equals(userDTO.getTypeCode()))
    			roleListOper.leftPush("role:standard",userDTO);   
    		if(userDTO.getParentId()!=null)
    			roleListOper.leftPush("role:parent_id:"+userDTO.getParentId(),userDTO); 
    	}
    	
    	for(RoleDTO roleDTO : roleDTOList2){    		
    		roleListOper.leftPush("role:root",roleDTO);    		
    	}
    	
    	return true;
    }
    
    public boolean initAllUsers(){
    	List<User> userList = userDao.getAllUser();
    	List<UserDTO> userDTOList = UserUtils.buildUserDtoList(userList);
    	for(UserDTO userDTO : userDTOList){
    		userValueOper.set("user:user_login_name:"+userDTO.getLoginName(), userDTO); 
    		userValueOper.set("user:user_id:"+userDTO.getId(), userDTO); 
    	}
    	
    	return true;
    }
    
    public boolean initAllCompanys(){
    	List<Company> userList = companyDao.getAllCompany(true);
    	List<CompanyDTO> userDTOList = CompanyUtils.buildCompanyDtoList(userList);
    	
    	companyListOper.getOperations().delete("company:all");
    	for(CompanyDTO userDTO : userDTOList){
    		companyListOper.leftPush("company:all", userDTO);
    		companyValueOper.set("company:company_id:"+userDTO.getId(), userDTO); 
    	}
    	
    	return true;
    }
    
    public boolean initAllDepts(){
    	List<Dept> userList = deptDao.getAllDept(true);
    	List<DeptDTO> userDTOList = DeptUtils.buildDeptDtoList(userList);
    	for(DeptDTO userDTO : userDTOList){
    		deptValueOper.set("dept:dept_id:"+userDTO.getId(), userDTO); 
    	}
    	
    	return true;
    }
    
    
    /**
     * 缓存所有FuncModule
     * @return
     */
    public boolean initAllFunc(){
    	List<FuncModule> funcBtns = funcModuleDao.getAllFuncModule();
    	List<FuncDTO> funcBtnDTOs = FuncUtils.buildFuncDtoList(funcBtns);
    	
    	for(FuncDTO dto : funcBtnDTOs){
    		if(dto.getParentId() != null && dto.getSystemCode() !=null)
    			funcListOper.getOperations().delete("func:module_code:parent_id:"+dto.getSystemCode()+":"+dto.getParentId());
    		else if (dto.getSystemCode() !=null){
    			funcListOper.getOperations().delete("func:module_code:root:"+dto.getSystemCode());
    		}
    	}
    	
    	for(FuncDTO dto : funcBtnDTOs){
    		if(dto.getParentId() != null && dto.getSystemCode() !=null)
    			funcListOper.leftPush("func:module_code:parent_id:"+dto.getSystemCode()+":"+dto.getParentId(),dto);
    		else if (dto.getSystemCode() !=null){
    			funcListOper.leftPush("func:module_code:root:"+dto.getSystemCode(), dto);
    		}
    	}
    	return true;
    }
    
    /**
     * 缓存所有FuncButton
     * @return
     */
    public boolean initAllOp(){
    	List<FuncButton> funcBtns = funcButtonDao.getAllFuncButton();
    	List<OpDTO> partyStructDTOs = FuncUtils.buildOpDtoList(funcBtns);
    	
    	for(OpDTO dto : partyStructDTOs){
    		opListOper.getOperations().delete("op:func_id:"+dto.getFuncModuleId());
    	}
    	
    	for(OpDTO dto : partyStructDTOs){
    		opListOper.leftPush("op:func_id:"+dto.getFuncModuleId(), dto);
    	}
    	return true;
    }
    /**
     * 缓存所有PartyEntity
     * @return
     */
    public boolean initAllPartyEntity(){
    	List<PartyEntity> partyEntitys = partyEntityDao.getAllPartyEntity();
    	List<PartyEntityDTO> partyEntityDTOs = PartyEntityUtils.buildPartyEntityDTOList(partyEntitys);
    	
    	for(PartyEntityDTO dto : partyEntityDTOs){
    		partyEntityListOper.getOperations().delete("entity:entity_type:entity_ref_id:"+dto.getPartyTypeId()+":"+dto.getRefId());
    	}
    	
    	for(PartyEntityDTO dto : partyEntityDTOs){
    		partyEntityValueOper.set("entity:entity_id:entity_type_id:"+dto.getId()+":"+dto.getPartyTypeId(), dto);
    		partyEntityValueOper.set("entity:entity_id:"+dto.getId(), dto);
    		partyEntityValueOper.set("entity:entity_prefix:entity_type_id:"+dto.getPrefix()+":"+dto.getPartyTypeId(), dto);
    		partyEntityListOper.leftPush("entity:entity_type:entity_ref_id:"+dto.getPartyTypeId()+":"+dto.getRefId(), dto);
    	}
    	return true;
    }
    
    
    /**
     * 缓存所有SUB PartyStruct
     * @return
     */
    public boolean initAllSubPartyStruct(){
    	List<PartyStruct> partyStructs = partyStructDao.findAllSubPartyStruct();
    	List<PartyStructDTO> partyStructDTOs = PartyStructUtils.buildPartyStructDTOList(partyStructs);
    	
    	for(PartyStructDTO dto : partyStructDTOs){
    		partyStructListOper.getOperations().delete("struct:struct_type:parent_entity_id:"+dto.getPartyStructTypeId()+":"+dto.getParentEntityId());
    		partyStructListOper.getOperations().delete("struct:struct_type:child_entity_id:"+dto.getPartyStructTypeId()+":"+dto.getChildEntityId());
    	}
    	
    	
    	for(PartyStructDTO dto : partyStructDTOs){
    		partyStructListOper.leftPush("struct:struct_type:parent_entity_id:"+dto.getPartyStructTypeId()+":"+dto.getParentEntityId(), dto);
    		partyStructListOper.leftPush("struct:struct_type:child_entity_id:"+dto.getPartyStructTypeId()+":"+dto.getChildEntityId(), dto);
    	}
    	return true;
    }
    
    /**
     * 缓存所有ROOT PartyStruct
     * @return
     */
    public boolean initRootPartyStruct(){
    	List<PartyStruct> partyStructs = partyStructDao.findRootPartyStruct(null);
    	List<PartyStructDTO> partyStructDTOs = PartyStructUtils.buildPartyStructDTOList(partyStructs);
    	
    	partyStructListOper.getOperations().delete("root_struct");
    	for(PartyStructDTO dto : partyStructDTOs){
    		partyStructListOper.leftPush("root_struct", dto);
    	}
    	return true;
    }

}
