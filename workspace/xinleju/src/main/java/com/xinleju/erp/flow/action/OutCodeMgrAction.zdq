package com.xinleju.erp.flow.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.FetchMode;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;

import com.alibaba.fastjson.serializer.PropertyFilter;
import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.base.utils.JsonUtils;
import com.xinleju.erp.base.utils.StringHelper;
import com.xinleju.erp.flow.models.Oc;
import com.xinleju.erp.flow.models.Ocd;

/**
 * 版权：(C) 版权所有 2000-2014 上海天好电子商务有限公司苏州分公司
 * <工作流条件配置管理>
 * @author   hongbin
 * @version  $Id$
 * @since
 * @see
 */
public class OutCodeMgrAction extends BaseAction {
    
    /**
     * 判定条目目录
     */
    private Ocd ocd;
    
    /**
     * 判定條件值
     */
    private Oc oc;
    
    
    /**
     * 
     * 〈工作流条件配置管理首页〉
     * 
     * @author hongbin
     * @return page
     */
    public String index() {
        return "index";
    }
    
    
    /**
     * 
     * 判定条目树首页
     * @author hongbin
     * @return page
     */
    public String tree() {
        return "tree";
    }
    
    /**
     * 
     * 〈获得工作流条件配置目录树〉 
     * 
     * @author hongbin
     */
    public void getOcdTree() {

        Long parentId = getParameterLong("parentId");
        boolean ex_disabled = StringHelper.parseBoolean(getParameter("ex_disabled"));

        List<Map<String, Object>> resultList = new ArrayList<Map<String, Object>>();

        List<Ocd> ocdList = new ArrayList<Ocd>();
        if (parentId == null || parentId.intValue() == 0) {
            ocdList = getCommonService().findAll(Ocd.class, "parentId is null" + (ex_disabled ? " and (isDisabled is null or isDisabled = 0)" : ""),
                    new Object[] {}, "position asc,id asc");

        } else {
            ocdList = getCommonService().findAll(Ocd.class, "parentId = ? " + (ex_disabled ? " and (isDisabled is null or isDisabled = 0)" : ""),
                    new Object[] { parentId }, "position asc,id asc");

        }

        for (Ocd c : ocdList) {
            boolean IsDisabled = c.getIsDisabled() != null && c.getIsDisabled().intValue() == 1;
            Map<String, Object> tree = new HashMap<String, Object>();
            tree.put("id", "Ocdf_" + c.getId());
            tree.put("targetId", c.getId());
            
            if(ex_disabled){
                tree.put("leaf", c.getSubCount() == 0);
            }
            else{
                tree.put("leaf", c.getSubCountIncludeDisable() == 0 );
            }
           
            tree.put("isDisabled", IsDisabled);
            if (IsDisabled) {
                tree.put("text", "<font style=\"color:red\">" + c.getName() + "</font>");
            } else {
                tree.put("text", c.getName());
            }
            resultList.add(tree);
        }
        super.renderJson(resultList);
    }

    /**
     * 
     * 〈工作流条件值列表〉 
     * 
     * @author hongbin
     * @return page
     */
    public String ocList() {
        String isDisabled = getParameter("isDisabled", "0");
        Long ocdId = getParameterLong("ocdId");
        DetachedCriteria dc = DetachedCriteria.forClass(Oc.class);
        dc.setFetchMode("ocd", FetchMode.JOIN);
        String name = getParameter("name");
        if (StringUtils.isNotEmpty(name)) {
            dc.add(Restrictions.ilike("name", "%" + name + "%"));
        }
        String code = getParameter("code");
        if (StringUtils.isNotEmpty(code)) {
            dc.add(Restrictions.ilike("val", "%" + code + "%"));
        }
        if (ocdId != null && ocdId > 0) {
            ocd = getCommonService().getById(Ocd.class, ocdId);
            dc.add(Restrictions.eq("ocdId", ocdId));
        } else {
            dc.add(Restrictions.isNull("ocdId"));
        }

        if ("1".equals(isDisabled)) {
            dc.add(Restrictions.eq("isDisabled", 1));
        } else if ("0".equals(isDisabled)) {
            dc.add(Restrictions.or(new Criterion[] { Restrictions.eq("isDisabled", 0), Restrictions.isNull("isDisabled") }));
        }
        dc.setFetchMode("parent", FetchMode.JOIN);
        dc.addOrder(Order.asc("position"));

        page = getCommonService().findPage(dc, start, limit);
        return "ocList";
    }
    
  
    /**
     * 
     * 編輯工作流條件值
     * @author hongbin
     * @return page
     */
    public String editOcd() {
        ocd = super.edit(Ocd.class);
        if (ocd == null) {
            ocd = new Ocd();
        }
        Long ocId = getParameterLong("parentId");
        if (ocId != null && ocId > 0L) {
            ocd.setParentId(ocId);
        }

        return "editOcd";
    }
    
    
    /**
     * 保存工作流条件判定值 
     * @author hongbin
     */
    public void saveOcd() {
        getCommonService().saveOrUpdate(ocd);
        super.renderJson(ocd);
    }
    
    
    /**
     * 编辑工作流判定条目
     * @author hongbin
     * @return page
     */
    public String editOc() {
        oc = super.edit(Oc.class);
        oc = (oc == null ? new Oc() : oc);
        Long parentId = getParameterLong("ocdId");
        if(parentId !=null && parentId > 0){
            oc.setOcdId(parentId);
        }
        return "editOc";
    }
    
    
    /**
     * 保存工作流判定条目
     * @author hongbin
     */
    public void saveOc() {
        getCommonService().saveOrUpdate(oc);
        super.renderJson(oc);
    }
    /**
     * 标记删除
     * 
     * @author hongbin
     */
    public void disOcd() {
        
        getCommonService().execute("update Ocd set isDisabled = 1 where id = ?", id);
        ocd = getCommonService().getById(Ocd.class, id);
        PropertyFilter filter = new PropertyFilter() {
            public boolean apply(Object source, String name, Object value) {
                if("parent".equals(name)){
                    return false;
                }
                
                return true;
            }
        };
        
        String x = JsonUtils.toJSONString(ocd, filter);
        super.renderJson(x);
    }

    /**
     * 标记为未删除
     * 
     * @author hongbin
     */
    public void unDisOcd() {
        getCommonService().execute("update Ocd set isDisabled = 0 where id = ?", id);
        ocd = getCommonService().getById(Ocd.class, id);
        PropertyFilter filter = new PropertyFilter() {
            public boolean apply(Object source, String name, Object value) {
                if("parent".equals(name)){
                    return false;
                }
                return true;
            }
        };

        String x = JsonUtils.toJSONString(ocd, filter);
        super.renderJson(x);
    }

    /**
     * 标记删除
     * 
     * @author hongbin
     */
    public void disOc() {
        
        getCommonService().execute("update Oc set isDisabled = 1 where id = ?", id);
        oc = getCommonService().getById(Oc.class, id);
        PropertyFilter filter = new PropertyFilter() {
            public boolean apply(Object source, String name, Object value) {
                if("parent".equals(name)){
                    return false;
                }
                
                return true;
            }
        };
        
        String x = JsonUtils.toJSONString(oc, filter);
        super.renderJson(x);
    }

    /**
     * 标记为未删除
     * 
     * @author hongbin
     */
    public void unDisOc() {
        getCommonService().execute("update Oc set isDisabled = 0 where id = ?", id);
        oc = getCommonService().getById(Oc.class, id);
        PropertyFilter filter = new PropertyFilter() {
            public boolean apply(Object source, String name, Object value) {
                if("parent".equals(name)){
                    return false;
                }
                return true;
            }
        };

        String x = JsonUtils.toJSONString(oc, filter);
        super.renderJson(x);
    }



    /**
     * @return Returns the oc.
     */
    public Oc getOc() {
        return oc;
    }


    /**
     * @param oc The oc to set.
     */
    public void setOc(Oc oc) {
        this.oc = oc;
    }


    /**
     * @return Returns the ocd.
     */
    public Ocd getOcd() {
        return ocd;
    }


    /**
     * @param ocd The ocd to set.
     */
    public void setOcd(Ocd ocd) {
        this.ocd = ocd;
    }
    
    
}
