package com.xinleju.erp.frame.models.ref;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.xinleju.erp.base.app.bean.Page;
import com.xinleju.erp.frame.dto.FiBillDTO;
import com.xinleju.erp.frame.itf.IRefModel;
import com.xinleju.erp.frame.service.FiBusinessService;

public class BODataRefModel implements IRefModel {
	private FiBusinessService fiBusinessService;
	private List<FiBillDTO> bodataList=new ArrayList<FiBillDTO>();
	private String keyfield = "";
	private String namefield = "";
	private String codefield = "";
	private List<String> showfields = null;
	private List<String> shownames = null;
	private String title = "";

	public BODataRefModel(Long boid) {
		init(boid);
	}

	@SuppressWarnings("unchecked")
	private void init(Long boid) {
//		fiBusinessService = App.getBean(FiBusinessService.class);
//		FiAggDTO aggDto = fiBusinessService.queryAggById(BusinessObject.class,
//				boid);
//		if (aggDto == null)
//			return;
//		BusinessObject bo = (BusinessObject) aggDto.getParent();
//		if (bo == null)
//			return;
//		String fetchdatacalss = bo.getVfetchdataclass();
//		title = bo.getVobject();
//		IFetchBillData fetcher = BillImplProxy
//				.getFetchVoucherDataImpl(fetchdatacalss);
//		bodataList = fetcher.fetchVoucherData();
//		if (bodataList == null)
//			bodataList = new ArrayList<FiBillDTO>();
//		List<BOFieldInfo> fieldList = (List<BOFieldInfo>) aggDto
//				.getChildren(BOFieldInfo.class);
//		showfields = new ArrayList<String>();
//		shownames = new ArrayList<String>();
//		if (fieldList == null)
//			return;
//		for (BOFieldInfo fieldinfo : fieldList) {
//			if (fieldinfo == null)
//				continue;
//			String flag = fieldinfo.getFlag();
//			String fieldkey = fieldinfo.getFieldkey();
//			String fieldname = fieldinfo.getFieldname();
//			if (FiFieldFlagEnum.FLAG_KEY.getKey().equals(flag)) {
//				keyfield = fieldkey;
//			} else if (FiFieldFlagEnum.FLAG_SHOW.getKey().equals(flag)) {
//				namefield = fieldkey;
//				showfields.add(fieldkey);
//				shownames.add(fieldname);
//			} else if (FiFieldFlagEnum.FLAG_CODE.getKey().equals(flag)) {
//				codefield = fieldkey;
//				showfields.add(fieldkey);
//				shownames.add(fieldname);
//			} else {
//				showfields.add(fieldkey);
//				shownames.add(fieldname);
//			}
//		}
	}

	@Override
	public Page getData(int start, int limit, String keywords) {
		Page page = new Page();
		page.setItems(transfrom(bodataList));
		page.setTotal(bodataList.size());
		return page;
	}

	private List<Map<String, Object>> transfrom(List<?> list) {
		List<Map<String, Object>> transList = new ArrayList<Map<String, Object>>();
		if (list == null)
			return transList;
		for (Object obj : list) {
			transList.add(transform(obj));
		}
		return transList;
	}

	private Map<String, Object> transform(Object entity) {
		Map<String, Object> map = new HashMap<String, Object>();
		FiBillDTO dto = (FiBillDTO) entity;
		map.put("id", dto.getAttribute(getKeyField()));
		map.put("name",dto.getAttribute(getNameField()));
		Object obj = dto.getAttribute(getCodeField());
		map.put("code", obj == null ? "" : obj);
		for (String field : getShowFields()) {
			Object value = dto.getAttribute(field);
			map.put(field, value);
		}
		return map;
	}

	@Override
	public String getKeyField() {
		return keyfield;
	}

	@Override
	public String getNameField() {
		return namefield;
	}

	@Override
	public String[] getShowFields() {
		return showfields == null ? new String[0] : showfields
				.toArray(new String[0]);
	}

	@Override
	public String[] getShowNames() {
		return shownames == null ? new String[0] : shownames
				.toArray(new String[0]);
	}

	@Override
	public String getTitle() {
		return title;
	}

	@Override
	public Boolean isMutil() {
		return false;
	}

	@Override
	public String getCodeField() {
		return codefield;
	}
}
