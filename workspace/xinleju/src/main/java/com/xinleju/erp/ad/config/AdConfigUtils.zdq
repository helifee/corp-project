package com.xinleju.erp.ad.config;

import java.util.Hashtable;

import javax.naming.Context;
import javax.naming.NamingEnumeration;
import javax.naming.NamingException;
import javax.naming.directory.Attribute;
import javax.naming.ldap.InitialLdapContext;
import javax.naming.ldap.LdapContext;


public class AdConfigUtils {
	


	
	
	/**
	 * 
	 * 获取java目录服务上下文
	 * @return
	 */
	public static LdapContext  getLdapContextInstance(AdSetting adSetting){
		 LdapContext ldapContext=null;
		 if(ldapContext==null){
					try {
					    Hashtable hashEnv = new Hashtable();  
					    hashEnv.put(Context.SECURITY_AUTHENTICATION,adSetting.getScurityAuthentiction());
					    hashEnv.put(Context.SECURITY_PRINCIPAL,adSetting.getScurityPrincipal());
					    hashEnv.put(Context.SECURITY_CREDENTIALS,adSetting.getScurityCredentials());
					    hashEnv.put(Context.INITIAL_CONTEXT_FACTORY,adSetting.getInitialContextFactory());
					    hashEnv.put(Context.PROVIDER_URL, adSetting.getProviderUrl());
						ldapContext= new  InitialLdapContext(hashEnv, null);
					} catch (NamingException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
			
		 }
		return ldapContext;
	}
	
	
	public static  String getBaseND(String domainName){
		if(domainName!=null && !"".equals(domainName)){
			StringBuffer sb=new StringBuffer();
			String[] domains=domainName.split("\\.");
			if(domains!=null && domains.length>0){
		        for(int i=0 ; i<domains.length ; i++){
		        	sb.append("DC="+domains[i]+",");
				}
		        if(sb.toString().endsWith(",")){
		        	return sb.toString().substring(0,sb.toString().length()-1);
		        }else{
		        	return sb.toString();
		        }
			}else{
				return domainName;
			}
		}
		
		return null;
	}
	
	
	private static String getGUID(byte[] inArr) {  
	        StringBuffer guid = new StringBuffer();  
		      for (int i = 0; i < inArr.length; i++) {  
	           StringBuffer dblByte = new StringBuffer(  
		                    Integer.toHexString(inArr[i] & 0xff));  
	           if (dblByte.length() == 1) {  
	                guid.append("0");  
	          }  
	         guid.append(dblByte);  
	      }  
	       return guid.toString();  
    }  
	
	
	
	public static FileCatalog getFileCatalog(NamingEnumeration<? extends Attribute> aEnum) throws NamingException{
		 FileCatalog fileCatalog=new FileCatalog();
		while(aEnum.hasMoreElements()){
	    
			Attribute attr = aEnum.nextElement();
			System.out.println(attr.getID());
			if(attr==null){
				continue ;
			}
			// 打印属性名和属性值，属性值可以为多个
			if(FileCatalog.Description.equals(attr.getID())){
					for(int i=0;i<attr.size();i++){
						Object obj = attr.get(i);
						//String b = new String(obj.toString().getBytes("gb2312"),"utf-8");
						fileCatalog.setDescription(obj.toString());  
					}
			}
			// 打印属性名和属性值，属性值可以为多个
			if(FileCatalog.DistinguishedName.equals(attr.getID())){
					for(int i=0;i<attr.size();i++){
						Object obj = attr.get(i);
						fileCatalog.setDistinguishedName(obj.toString());
					
					}
			}
			// 打印属性名和属性值，属性值可以为多个
			if(FileCatalog.Name.equals(attr.getID())){
					for(int i=0;i<attr.size();i++){
						Object obj = attr.get(i);
						fileCatalog.setName(obj.toString());
					
					}
			}
			
			if(FileCatalog.SAMAccountName.equals(attr.getID())){
				for(int i=0;i<attr.size();i++){
					Object obj = attr.get(i);
					fileCatalog.setsAMAccountName(obj.toString());
				
				}
		     }
			
			if(FileCatalog.OBJECTGUID.equals(attr.getID())){
				for(int i=0;i<attr.size();i++){
					Object obj = attr.get(i);
					fileCatalog.setObjectGUID(getGUID(obj.toString().getBytes()));
				
				}
		     }
		}
		return fileCatalog;
	}




	
	public static  String getFilter(String root){
		 if(root!=null&&!"".equals(root)){
      	     return root+"(&(objectClass=organizationalUnit)(objectClass=top))";
		 }else{
			  return "(&(objectClass=organizationalUnit)(objectClass=top))";
		 }
	}
	
	public static  String getPersonFilter(String root){
		 if(root!=null&&!"".equals(root)){
     	     return root+"(&(objectClass=Person)(objectClass=top))";
		 }else{
			  return "(&(objectClass=Person)(objectClass=top))";
		 }
	}
	

}
