package com.xinleju.erp.frame.action;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.frame.dao.AppDao;
import com.xinleju.erp.frame.dto.SettingQueryDTO;
import com.xinleju.erp.frame.models.Setting;
import com.xinleju.erp.frame.service.SettingService;
import com.xinleju.erp.frame.utils.StaticInterface;


public class SettingAction extends BaseAction {

    public String settingTitle;
    
    public List<Setting> settingList;
    
    private SettingQueryDTO settingQueryDTO;
    
    @Autowired
    private AppDao appDao;
    
    @Autowired
    private SettingService settingService;
    
    public String index() {
        return "index";
    }
    /**
     * 左边菜单
     * @return
     */
    public String leftMenu(){
        return "leftMenu";
    }
    private void dealQuery(List<Map<String, String>> queryMapList){
        /*Map<String,App> appMap = appDao.getAppMap();
        request.setAttribute("appMap", appMap);
        if (null == settingQueryDTO){
            settingQueryDTO = new SettingQueryDTO();
        }
        if (StringUtils.isBlank(settingQueryDTO.getAppCode())){
            
        }*/
        List<Map<String, String>> mapList = new ArrayList<Map<String,String>>();
        if (null != queryMapList && queryMapList.size() > 0){
            Map<String, String> map = null;
            int i = 0;
            Setting setting = null;
            for (Map<String, String> queryMap : queryMapList){
                map = new HashMap<String, String>();
                if (StringUtils.isNotBlank(queryMap.get(Setting.KEY_CODE))){
                    setting = settingService.getSetting(queryMap.get(Setting.KEY_CODE).trim());
                }
                map.put(Setting.KEY_NAME, null != setting && StringUtils.isNotBlank(setting.getName()) ? setting.getName() : queryMap.get(Setting.KEY_NAME));
                map.put(Setting.KEY_CODE, null != setting && StringUtils.isNotBlank(setting.getCode()) ? setting.getCode() :queryMap.get(Setting.KEY_CODE));
                map.put(Setting.KEY_NOTE, null != setting && StringUtils.isNotBlank(setting.getNote()) ? setting.getNote() :queryMap.get(Setting.KEY_NOTE));
                map.put(Setting.KEY_APPCODE, null != setting && StringUtils.isNotBlank(setting.getAppCode()) ? setting.getAppCode() : "");
                map.put(Setting.KEY_VALUE, null != setting && StringUtils.isNotBlank(setting.getValue()) ? setting.getValue() : "");
                map.put(Setting.KEY_VALUE_TYPE, queryMap.get(Setting.KEY_VALUE_TYPE));
                map.put(Setting.KEY_POSITION, i + "");
                mapList.add(map);
                i++;
            }
        }
        request.setAttribute("mapList", mapList);
    }
    
    /**
     * oa接口设置
     * @author jun
     * @return
     */
    public String oaSetting(){
        settingTitle = "OA消息集成接口配置";
        List<Map<String, String>> queryMapList = new ArrayList<Map<String,String>>();
        Map<String, String> queryMap = new HashMap<String, String>();
        queryMap.put(Setting.KEY_CODE, StaticInterface.SKEY_PT_OA_INTERFACE_URL);
        queryMap.put(Setting.KEY_NAME, "OA消息集成接口地址");
        queryMap.put(Setting.KEY_NOTE, "OA消息集成接口地址");
        queryMapList.add(queryMap);
        queryMap = new HashMap<String, String>();
        queryMap.put(Setting.KEY_CODE, StaticInterface.SKEY_PT_OA_INTERFACE_MAX_ERROR_TIMES);
        queryMap.put(Setting.KEY_NAME, "OA消息发送最大失败次数");
        queryMap.put(Setting.KEY_NOTE, "OA消息发送最大失败次数");
        queryMapList.add(queryMap);
       /* queryMap = new HashMap<String, String>();
        queryMap.put(Setting.KEY_CODE, StaticInterface.SKEY_PT_OA_INTERFACE_BACK_URL);
        queryMap.put(Setting.KEY_NAME, "OA消息集成反链地址");
        queryMap.put(Setting.KEY_NOTE, "OA消息集成反链地址");
        queryMapList.add(queryMap);*/
        this.dealQuery(queryMapList);
        return "setting";
    }
    
    public void save() {
        if (null != settingList && settingList.size() > 0){
            for (Setting setting : settingList){
                settingService.updateSetting(setting.getCode(), setting.getValue(), setting.getName(), setting.getNote());
            }
        }
        Map<String,Object> r = new HashMap<String, Object>();
        r.put("success", "true");
        super.renderJson(r);
    }

    public SettingQueryDTO getSettingQueryDTO() {
        return settingQueryDTO;
    }

    public void setSettingQueryDTO(SettingQueryDTO settingQueryDTO) {
        this.settingQueryDTO = settingQueryDTO;
    }

    public String getSettingTitle() {
        return settingTitle;
    }

    public void setSettingTitle(String settingTitle) {
        this.settingTitle = settingTitle;
    }

    public List<Setting> getSettingList() {
        return settingList;
    }

    public void setSettingList(List<Setting> settingList) {
        this.settingList = settingList;
    }
}
