package com.xinleju.erp.frame.dao;

import java.util.Collection;
import java.util.List;
import java.util.Set;

import org.springframework.stereotype.Repository;

import com.xinleju.erp.annotation.Children;
import com.xinleju.erp.flow.dao.impl.BaseDAO;
import com.xinleju.erp.frame.models.BaseEntity;
import com.xinleju.erp.frame.models.ChildEntity;
import com.xinleju.erp.frame.models.ExChildEntity;
import com.xinleju.erp.frame.service.extend.dto.FiAggDTO;
import com.xinleju.erp.frame.service.extend.dto.FiExAggDTO;

@Repository
public class FiBODataDao extends BaseDAO {
	public String saveExAggDTO(FiExAggDTO exDTO){
		BaseEntity parent = exDTO.getParent();
		getDao().saveOrUpdate(parent);
		Long pid = parent.getId();
		deleteChildren(parent.getClass(),pid);
		Set<Class<? extends ChildEntity>> keys =  exDTO.getChildrenMap().keySet();
		for(Class<? extends ChildEntity> clazz : keys){
			List<FiExAggDTO> children = exDTO.getChildrenMap().get(clazz);
			for(FiExAggDTO exChild : children)
				saveExAggDTO(exChild, pid, pid);
		}
		return "success";
	}
	
	private String saveExAggDTO(FiExAggDTO exDTO,Long pid,Long spid){
		BaseEntity parent = exDTO.getParent();
		if(parent instanceof ChildEntity)
			((ChildEntity)parent).setPid(pid);
		if(parent instanceof ExChildEntity)
			((ExChildEntity)parent).setSPid(spid);
		getDao().saveOrUpdate(parent);
		pid = parent.getId();
		Set<Class<? extends ChildEntity>> keys =  exDTO.getChildrenMap().keySet();
		for(Class<? extends ChildEntity> clazz : keys){
			List<FiExAggDTO> children = exDTO.getChildrenMap().get(clazz);
			for(FiExAggDTO exChild : children)
				saveExAggDTO(exChild, pid, spid);
		}
		return "success";
	}

	private void deleteChildren(Class<? extends BaseEntity> parentClass,Long id){
		if(id == null)
			return;
		Children children = parentClass.getAnnotation(Children.class);
		if(children == null || children.name() == null)
			return;
		for(Class<? extends ChildEntity> childClass : children.name()){
			deleteChildren(childClass,id);
			if(childClass.equals(ChildEntity.class)){
				getDao().delete(childClass, "pid", new Long[]{id});
			}else if(childClass.equals(ExChildEntity.class)){
				getDao().delete(childClass, "spid", new Long[]{id});
			}
		}
	}
	
	public void delete(Class<? extends BaseEntity> parentClass , Long[] ids){
		if(ids == null || ids.length == 0)
			return;
		for(Long id : ids){
			if(id == null)
				continue;
			deleteChildren(parentClass, id);
			getDao().delete(parentClass, id);
		}
	}

	public String saveAggDTO(FiAggDTO aggDTO) {
		BaseEntity parent = aggDTO.getParent();
		Collection<List<? extends ChildEntity>> children = aggDTO
				.getChildrenMap().values();
		getDao().saveOrUpdate(parent);
		Long pid = parent.getId();
		for (List<? extends ChildEntity> list : children) {
			saveChindren(list, pid);
		}
		return "success";
	}

	public String saveChindren(List<? extends ChildEntity> list, Long pid) {
		if (list == null)
			return "success";
		Class<? extends ChildEntity> childclass = null;
		for (ChildEntity entity : list) {
			if(childclass == null){
				childclass = entity.getClass();
			}
			entity.setPid(pid);
		}
		getDao().delete(childclass, "pid", new Object[]{pid});
		getDao().saveOrUpdateAll(list);
		return "success";
	}
}
