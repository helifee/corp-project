package com.xinleju.erp.flow.dao.impl;

import java.util.Date;
import java.util.LinkedList;

import org.springframework.stereotype.Repository;

import com.xinleju.erp.flow.frameapi.domain.User;
import com.xinleju.erp.flow.models.Fi;
import com.xinleju.erp.flow.models.Fl;
import com.xinleju.erp.flow.models.Hfi;
import com.xinleju.erp.flow.utils.IdNameUtils;

/**
 * 
 * 
 * <p>
 * </p>
 * <p>
 * </p>
 * 
 * @author 孙朝辉
 * @version $Id: FiDAO.java 2024 2014-12-03 13:33:55Z zhongjun $
 * @since
 * 
 */
@Repository
public class FiDAO extends BaseDAO {

    /**
     * 
     * <p>
     * 创建流程实例
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fl
     *            流程定义
     * @param fiName
     *            流程名
     * @param user
     *            当前操作用户
     * @return 流程实例
     */
    public Fi createFi(Fl fl, String fiName, User user) {

        Fi fi = new Fi();
        fi.setFlId(fl.getId());
        fi.setFiName(fiName);
        fi.setStatus(Fi.STATUS_CREATED);
        fi.setCreateUserLoginName(user.getLoginName());
        fi.setCreateUserName(user.getUserName());
        fi.setCreateUserId(user.getUserId());
        fi.setCreateTime(new Date());
        fi.setIsDeleted(0);
        fi.setIsSuspend(0);
        fi.setIsTerminate(0);
        fi.setIsLimit(fl.getIsTimeLimit());
        fi.setTimeLimit(fl.getTimeLimit());
        fi.setTimeUnit(fl.getTimeUnit());
        fi.setFl(fl);
        getDao().save(fi);
        getDao().flush();
        return fi;
    }

    /**
     * 
     * <p>
     * 启动流程
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fi
     *            流程实例
     * @param user
     *            当前操作用户
     */
    public void startFi(Fi fi, User user) {
        fi.setStartTime(new Date());
        fi.setStartUserId(user.getUserId());
        fi.setStartUserLoginName(user.getLoginName());
        fi.setStartUserName(user.getUserName());

        // 流程默认归属
        fi.setOwnerUserId(user.getUserId());
        fi.setOwnerUserLoginName(user.getLoginName());
        fi.setOwnerUserName(user.getUserName());

        fi.setStatus(Fi.STATUS_RUNNING);

        getDao().update(fi);
    }

    /**
     * 
     * <p>
     * 挂起流程
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiId
     *            流程实例ID
     * @param user
     *            当前操作用户
     * @param suspendCode
     *            挂起原因编码
     */
    public void suspendFi(Long fiId, User user, String suspendCode) {
        getDao().execute(
                "update Fi set isSuspend = ?,suspendCode = ?,suspendDate = ?,suspendUserName = ?,suspendUserLoginName = ?,suspendUserId = ? where id = ?",
                new Object[] { 1, suspendCode, new Date(), user.getUserName(), user.getLoginName(), user.getUserId(), fiId });

    }

    /**
     * 
     * <p>
     * 解挂流程
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiId
     *            流程实例ID
     */
    public void unSuspendFi(Long fiId) {
        getDao().execute(
                "update Fi set isSuspend = ?,suspendCode = ?,suspendTime = ?,suspendUserName = ?,suspendUserLoginName = ?,suspendUserId = ? where id = ?",
                new Object[] { 0, "", null, null, null, null, fiId });

    }

    /**
     * 
     * <p>
     * 异常终止流程
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiId
     *            流程实例ID
     * @param user
     *            当前操作用户
     * @param terminateCode
     *            终止流程编码
     */
    public void terminateFi(Long fiId, User user, String terminateCode) {
        getDao().execute(
                "update Fi set status = ?, isTerminate = ?,terminateCode = ?,terminateTime = ?"
                        + ",terminateUserName = ?,terminateUserLoginName = ?,terminateUserId = ? where id = ?",
                new Object[] { Fi.STATUS_COMPLETE, 1, terminateCode, new Date(), user.getUserName(), user.getLoginName(), user.getUserId(), fiId });

    }

    /**
     * 
     * <p>
     * 正常结束流程
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiId
     *            流程实例ID
     * @param user
     *            当前操作用户
     * @return 流程实例时
     */
    public Fi completeFi(Long fiId, User user) {
        Fi fi = getDao().getById(Fi.class, fiId);
        fi.setStatus(Fi.STATUS_COMPLETE);
        fi.setCompleteTime(new Date());
        if (user != null) {
            fi.setCompleteUserId(user.getUserId());
            fi.setCompleteUserLoginName(user.getLoginName());
            fi.setCompleteUserName(user.getUserName());
        }

        getDao().update(fi);
        return fi;
    }

    /**
     * 
     * <p>
     * 流程实例操作log
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fi
     *            流程实例
     * @param logCode
     *            操作编码
     * @param user
     *            当前操作用户
     */
    public void log(Fi fi, String logCode, User user) {
    	if (null != fi){
            Hfi hfi = new Hfi();
            hfi.setFiId(fi.getId());
            hfi.setLogCode(logCode);
            hfi.setLogDate(new Date());
            if (user != null && null != user.getUserId() && user.getUserId().intValue() > 0) {
                hfi.setUserId(user.getUserId());
            }
            getDao().save(hfi);
    	}
    }

    /**
     * 
     * <p>
     * 流程实例操作log
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiId
     *            流程实例ID
     * @param logCode
     *            操作编码
     * @param user
     *            当前操作用户
     */
    public void log(Long fiId, String logCode, User user) {
    	
        Fi fi = null;
        if (null != fiId){
        	fi = getDao().getById(Fi.class, fiId);
        }
        this.log(fi, logCode, user);
    }

    /**
     * 
     * <p>
     * 获取流程实例
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiId
     *            流程实例ID
     * @return 流程实例
     */
    public Fi getFi(Long fiId) {
        return getDao().getById(Fi.class, fiId, "fl");
    }
    
    /**
     * 更新可阅人员
     * @author jun
     * @param fiId 流程实例id
     * @param readUsers 可阅人员
     * @return readUsersStr 可阅人员(已解析为人员)
     */
    public String changeReadUsers(Long fiId, LinkedList<User> readUsers){
        String readUsersStr = IdNameUtils.encode(IdNameUtils.toIdNameList(readUsers));
        getDao().executeSQL("update tf_fi set read_Users = ? where id = ? ", readUsersStr, fiId);
        return readUsersStr;
    }
}
