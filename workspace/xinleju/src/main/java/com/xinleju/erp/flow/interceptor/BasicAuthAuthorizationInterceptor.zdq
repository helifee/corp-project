package com.xinleju.erp.flow.interceptor;

import java.io.IOException;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.apache.cxf.binding.soap.interceptor.SoapHeaderInterceptor;
import org.apache.cxf.configuration.security.AuthorizationPolicy;
import org.apache.cxf.endpoint.Endpoint;
import org.apache.cxf.interceptor.Fault;
import org.apache.cxf.message.Exchange;
import org.apache.cxf.message.Message;
import org.apache.cxf.transport.Conduit;
import org.apache.cxf.ws.addressing.EndpointReferenceType;

/**
 * 
 * 
 * <p>
 * </p>
 * <p>
 * </p>
 * 
 * @author 孙朝辉
 * @version $Id: BasicAuthAuthorizationInterceptor.java 2305 2015-01-07 05:26:04Z sunchaohui $
 * @since
 * 
 */
public class BasicAuthAuthorizationInterceptor extends SoapHeaderInterceptor {

    /**
     * 认证用户名
     */
    private String serverUserName;

    /**
     * 认证密码
     */
    private String serverUserPsw;

    @Override
    public void handleMessage(Message message) throws Fault {

        AuthorizationPolicy policy = message.get(AuthorizationPolicy.class);

        // If the policy is not set, the user did not specify credentials.
        // 401 is sent to the client to indicate that authentication is required.
        if (policy == null) {
            sendErrorResponse(message, HttpURLConnection.HTTP_UNAUTHORIZED);
            return;
        }

        String username = policy.getUserName();
        String password = policy.getPassword();

        // CHECK USERNAME AND PASSWORD
        if (!checkLogin(username, password)) {
            sendErrorResponse(message, HttpURLConnection.HTTP_FORBIDDEN);
        }
    }

    /**
     * 
     * <p>
     * 校验用户名、密码
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param username
     *            用户名
     * @param password
     *            密码
     * @return 是否通过校验
     */
    private boolean checkLogin(String username, String password) {
        if (username.equals(serverUserName) && password.equals(serverUserPsw)) {
            return true;
        }
        return false;
    }

    /**
     * 
     * <p>
     * 校验失败返回
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param message
     *            消息对象
     * @param responseCode
     *            返回失败的 responseCode
     */
    private void sendErrorResponse(Message message, int responseCode) {
        Message outMessage = getOutMessage(message);
        outMessage.put(Message.RESPONSE_CODE, responseCode);

        Map<String, List<String>> responseHeaders = (Map<String, List<String>>) message.get(Message.PROTOCOL_HEADERS);

        if (responseHeaders != null) {
            responseHeaders.put("WWW-Authenticate", Arrays.asList(new String[] { "Basic realm=realm" }));
            responseHeaders.put("Content-Length", Arrays.asList(new String[] { "0" }));
        }
        message.getInterceptorChain().abort();
        try {
            getConduit(message).prepare(outMessage);
            close(outMessage);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * 
     * <p>
     * 返回认证消息
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param inMessage
     *            输入消息
     * @return Message
     */
    private Message getOutMessage(Message inMessage) {
        Exchange exchange = inMessage.getExchange();
        Message outMessage = exchange.getOutMessage();
        if (outMessage == null) {
            Endpoint endpoint = exchange.get(Endpoint.class);
            outMessage = endpoint.getBinding().createMessage();
            exchange.setOutMessage(outMessage);
        }
        outMessage.putAll(inMessage);
        return outMessage;
    }

    /**
     * 
     * <p>
     * 返回认证消息
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param inMessage
     *            输入消息
     * @return Message
     * @throws IOException
     *             接口读取流异常
     */
    private Conduit getConduit(Message inMessage) throws IOException {
        Exchange exchange = inMessage.getExchange();
        EndpointReferenceType target = exchange.get(EndpointReferenceType.class);
        Conduit conduit = exchange.getDestination().getBackChannel(inMessage);
        exchange.setConduit(conduit);
        return conduit;
    }

    /**
     * 
     * <p>
     * 关闭消息
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param outMessage
     *            Message
     * @throws IOException
     *             接口读取流异常
     */
    private void close(Message outMessage) throws IOException {
        OutputStream os = outMessage.getContent(OutputStream.class);
        os.flush();
        os.close();
    }

    public String getServerUserName() {
        return serverUserName;
    }

    public void setServerUserName(String serverUserName) {
        this.serverUserName = serverUserName;
    }

    public String getServerUserPsw() {
        return serverUserPsw;
    }

    public void setServerUserPsw(String serverUserPsw) {
        this.serverUserPsw = serverUserPsw;
    }

}
