package com.xinleju.erp.frame.dao;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Repository;

import com.xinleju.erp.base.utils.StringHelper;
import com.xinleju.erp.flow.dao.impl.BaseDAO;
import com.xinleju.erp.form.utils.DbType;
import com.xinleju.erp.frame.models.PartyEntity;
import com.xinleju.erp.frame.models.PartyStruct;
import com.xinleju.erp.frame.models.PartyType;

@Repository
public class PartyStructDao extends BaseDAO {

    /**
     * 查询根组织机构
     * 
     * @author hongbin
     * @return
     */
    public List<PartyStruct> findRootPartyStruct(String[] includeTypes) {
        String hql = "from PartyStruct"
                     + " ps where ps.parentEntityId is null and (ps.childEntity.status is null or ps.childEntity.status = 0)";
        if(includeTypes != null && includeTypes.length >0){
            hql += "  and ps.childEntity.partyType.type in('"+StringHelper.join(includeTypes, "','")+"')";
        }
        List<PartyStruct> psList = getDao().findByHQL(PartyStruct.class, hql);
        return psList;
    }
    
    
    public PartyStruct getStructByChildEntityId(Long childId){
    	if ( null != childId){
    		String hql = "select s2 from PartyStruct s2 where s2.childEntityId in (select s.parentEntityId from PartyStruct s where s.childEntityId = ?)";
    		return getDao().findFirstByHQL(PartyStruct.class, hql, childId);
    	}
    	return new PartyStruct();
    }
    /**
     * 查询子组织机构
     * @author hongbin
     * @param parentId 父id
     * @return
     */
    public List<PartyStruct> findSubPartyStruct(Long parentId,String[] includeTypes) {
        String hql = "from PartyStruct"
                     + " ps where ps.parentEntityId = ? and (ps.childEntity.status is null or ps.childEntity.status = 0)";
        if(includeTypes != null && includeTypes.length >0){
            hql += "  and ps.childEntity.partyType.type in('"+StringHelper.join(includeTypes, "','")+"')";
        }
        List<PartyStruct> psList = getDao().findByHQL(PartyStruct.class, hql, parentId);
        return psList;
    }
    
    /**
     * 查询所有子机构缓存使用
     * @return
     */
    public List<PartyStruct> findAllSubPartyStruct() {
        String hql = "from PartyStruct"
                     + " ps where ps.parentEntityId is not null and (ps.childEntity.status is null or ps.childEntity.status = 0)";        
        List<PartyStruct> psList = getDao().findByHQL(PartyStruct.class, hql);
        return psList;
    } 
    /**
     * 
     * 通过公司code和id获取记录数
     *〈详细描述〉
     * @author zhoupeng
     * @param code
     * @param id
     * @return
     */
    public Long getCompanyCountWithId(String code, Long id){
        if (StringUtils.isNotBlank(code) && null != id){
            return getDao().findLong("select count(c.id) from Company  c where c.code = ? and c.id != ?", code, id);
        }
        return 0L;
    }
    
    public Long getCompanyCountWithCode(String code){
        if (StringUtils.isNotBlank(code)){
            return getDao().findLong("select count(c.id) from Company  c where c.code = ?", code);
        }
        return 0L;
    }
    
    /**
     * 
     * 通过公司code和id获取记录数
     *〈详细描述〉
     * @author liuhm
     * @param code
     * @param id
     * @return
     */
    public Long getDeptCountWithId(String code, Long id, Long parentEntityId){
        if (StringUtils.isNotBlank(code) && null != id){
        	Long parentId = getDao().findLong(" select s.childEntityId from PartyStruct s where s.parentEntityId=? ", parentEntityId);
			return getDao()
					.findLong(
							"select count(c.id) from Dept c where c.code = ? and c.id != ? and c.id in ( select e.refId from PartyStruct s inner join s.childEntity e inner join e.partyType t where t.type = '" + PartyType.TYPE_DEPARTMENT + "' and s.parentEntityId=? )", code, id, parentId);
        }
        return 0L;
    }
    
    public Long getDeptCountWithCode(String code, Long parentEntityId){
        if (StringUtils.isNotBlank(code)){
            return getDao().findLong("select count(c.id) from Dept  c where c.code = ? and c.id in ( select e.refId from PartyStruct s inner join s.childEntity e inner join e.partyType t where t.type = '" + PartyType.TYPE_DEPARTMENT + "' and s.parentEntityId=? )", code, parentEntityId);
        }
        return 0L;
    }
    
    public Long getGroupCountWithId(String code, Long id){
        if (StringUtils.isNotBlank(code) && null != id){
            return getDao().findLong("select count(g.id) from Group g where  g.code = ? and g.id != ?", code, id);
        }
        return 0L;
    }
    public Long getGroupCountWithId(String code){
        if (StringUtils.isNotBlank(code)){
            return getDao().findLong("select count(g.id) from Group g where  g.code = ?", code);
        }
        return 0L;
    }
    
    
    /**
     * 查询PartyStruct
     * @param partEntityType
     * @return
     */
    public List<PartyStruct> findPartyStructByParentPartyEntityType(String[] partyEntityTypes) {
    	 String hql = "from PartyStruct"
                 + " ps where ps.parentEntityId is not null and (ps.childEntity.status is null or ps.childEntity.status = 0)"
                 + " and ps.parentEntity.partyType.type in ('"+StringHelper.join(partyEntityTypes, "','")+"')";;        
    List<PartyStruct> psList = getDao().findByHQL(PartyStruct.class, hql);
    return psList;
    }
    
    /**
     * 查询PartyStruct
     * @param partEntityType
     * @return
     */
    public List<PartyStruct> findPartyStructByChildPartyEntityType(String[] partyEntityTypes) {
    	 String hql = "from PartyStruct"
                 + " ps where 1=1 and (ps.childEntity.status is null or ps.childEntity.status = 0)"
                 + " and ps.childEntity.partyType.type in('"+StringHelper.join(partyEntityTypes, "','")+"')";        
    List<PartyStruct> psList = getDao().findByHQL(PartyStruct.class, hql);
    return psList;
    }
    
    /**
     * 查询PartyStruct
     * @param partEntityType
     * @return
     */
    public List<Long> findPartyStructRefIdByChildPartyEntityRefId(Long refId ,String partyEntityType) {
    	 String hql1 = "select e.refId from PartyStruct s left join s.parentEntity e left join s.childEntity c left join e.partyType t "
    			 + " where c.refId= "+refId+" and t.type= '"+ partyEntityType+"'";
    	 
    	 List<Long> psList = getDao().findByHQL(Long.class, hql1);
    	 return psList;
    }
    
    public List<Long> findPartyStructRefIdByChildPartyEntityRefIdAndType(Long crefId ,String parentType,String childType) {
   	 String hql1 = "select e.refId from PartyStruct s left join s.parentEntity e left join s.childEntity c  "
   			 + " where c.refId= "+crefId+" and e.partyTypeId= "+ parentType+" and c.partyTypeId = "+childType;
   	 
   	 List<Long> psList = getDao().findByHQL(Long.class, hql1);
   	 return psList;
   }
    //chc add 2016.8.2
    public List<PartyEntity> findPartyStructRefIdByChildPartyEntityRefIdAndTypeNew(Long crefId ,String parentType,String childType) {
      	 String hql1 = "select e from PartyStruct s left join s.parentEntity e left join s.childEntity c  "
      			 + " where c.refId= "+crefId+" and e.partyTypeId= "+ parentType+" and c.partyTypeId = "+childType;
      	 
      	 List<PartyEntity> psList = getDao().findByHQL(PartyEntity.class, hql1);
      	 return psList;
      }
    /**
     * 查询PartyStruct
     * @param partEntityType
     * @return
     */
    public List<PartyEntity> findPartyStructRefIdByChildPartyEntityIdNew(Long childPEId ,String partyEntityType) {    	   
    	 String hql1 = "select e from PartyStruct s left join s.parentEntity e left join s.childEntity c left join e.partyType t "
    			 + " where c.refId= "+childPEId+" and t.type= '"+ partyEntityType+"'";
    	 
    	 List<PartyEntity> psList = getDao().findByHQL(PartyEntity.class, hql1);
    	 return psList;
    }
    
    public List<Long> findCompanyIdByChildPartyEntityRefId(Long refId ,String partyEntityType) {
    /**
   	 String hql1 = "select s.prefix from PartyEntity s  "
   			 + " where s.refId= "+refId+" and s.partyTypeId= "+ partyEntityType+"";

   	 List<String> psList2 = getDao().findByHQL(String.class, hql1);
   	 List<Long> psList = new ArrayList<Long>();
   	 Set<String> s = new HashSet<String>();
   	 String[] temp = null;
   	 String tempCompanyId = null;
   	for(Iterator<String> iter = psList2.iterator(); iter.hasNext();){
   		String prefix = iter.next();
   		if(prefix!=null){
   			temp=prefix.split("-");
   			if(temp.length>2){
   				tempCompanyId = temp[1];
   			}
   		}
   		if(tempCompanyId!=null&&!s.contains(tempCompanyId)){
   			s.add(tempCompanyId);
   			psList.add(new Long(tempCompanyId));
   		}
   	}
   	**/
     List<Object[]> psList = new ArrayList<Object[]>();
     //获取当前用户的公司，而不是一级公司
//     String sql="select  DISTINCT yy.ref_id,yy.prefix,yy.name_prefix  from sm_party_entity yy left join sm_party_entity y on  y.ref_id='"+refId+"' left join sm_party_type ty  on yy.party_type_id =ty.id  left join sm_company c on c.id=yy.ref_id  where c.status !=1 and  ty.type='"+PartyType.TYPE_COMPANY+"'  and "+DbType.getType()+"locate(yy.prefix,y.prefix)>0  and  y.party_type_id='"+ partyEntityType+"' ";
     String sql="select  DISTINCT yy.ref_id,yy.prefix,yy.name_prefix  from sm_party_entity yy ";
     if(refId!=null){
    	 sql += " left join sm_party_entity y on  y.ref_id='"+refId+"' left join sm_party_type ty  on yy.party_type_id =ty.id  left join sm_company c on c.id=yy.ref_id  where c.status !=1 and  ty.type='"+PartyType.TYPE_COMPANY+"'  and "+DbType.getType()+"locate(yy.prefix,y.prefix)>0  and  y.party_type_id='"+ partyEntityType+"' ";
     }else{
    	 sql += " left join sm_party_type ty  on yy.party_type_id =ty.id  left join sm_company c on c.id=yy.ref_id  where c.status !=1 and  ty.type='"+PartyType.TYPE_COMPANY+"'"; 
     }
     String prefix="";
     List<Long> result=new ArrayList<Long>();
     psList = (List<Object[]>) getDao().findListBySQL(sql, null);
     Map<String,Long> map=new HashMap<String,Long>();
     int i=0;
     for(Object[] objs:psList){
    	
    	 if(objs[1]!=null){
    		     map.put(objs[1].toString(),Long.valueOf(objs[0].toString()));
		    	 if(i==0){
		    		 prefix=(objs[1]).toString();
		    	 }
		    	 if(prefix.length()<objs[1].toString().length()){
		    		 prefix=objs[1].toString();
		    	 }
    	 }
    	 
    	 result.add(map.get(prefix));
     }
     
   	 return result;
   }
    
    /**
     * 找组织架构上级节点关联的实际数据id
     * @author jdq
     * @param refId
     * @param type
     * @return
     */
    public List<Long> findParentRefIdsByChildRefId(Long refId, String partyType){
    	String hql = "select e.refId from PartyStruct s left join s.parentEntity e"
    			+ " left join s.childEntity c left join e.partyType t "
    			+ " where c.refId= ? and t.type= ?";
    	return getDao().findByHQL(Long.class, hql, new Object[]{refId, partyType});
    }
    
    /**
     * 
     * @param refId
     * @param partyType
     * @return
     */
    public List<Long> findParentRefParentIdsByChildRefId(Long refId, String partyType){
    	String hql = "select e.refParentId from PartyStruct s left join s.parentEntity e"
    			+ " left join s.childEntity c left join e.partyType t "
    			+ " where c.refId= ? and t.type= ?";
    	return getDao().findByHQL(Long.class, hql, new Object[]{refId, partyType});
    }
    
    public List<Long> findParentRefIdsByChildRefId(Long refId, String[] partyTypes){
    	String hql = "select e.refId from PartyStruct s left join s.parentEntity e"
    			+ " left join s.childEntity c left join e.partyType t "
    			+ " where c.refParentId= ? and t.type in ( '"+StringHelper.join(partyTypes, "','")+"') ";
    	return getDao().findByHQL(Long.class, hql, new Object[]{refId});
    }
    /**
     * 查询PartyStruct
     * @param partEntityType
     * @return
     */
    public List<Long> findPartyStructRefIdByChildPartyEntityId(Long childPEId ,String partyEntityType) {    	   
    	 String hql1 = "select e.refId from PartyStruct s left join s.parentEntity e left join s.childEntity c  left join e.partyType t left join c.partyType ct "
    			 + " where c.refId= "+childPEId+" and t.type= '"+ partyEntityType+"' and ct.type= 'role'  ";
    	 
    	 List<Long> psList = getDao().findByHQL(Long.class, hql1);
    	 return psList;
    }
    
    /**
     * 查询PartyStruct
     * @param partEntityType
     * @return
     */
    public List<Long> findPartyStructRefIdsByChildPartyEntityRefIds(String[] refIds ,String partyEntityType) {    	   
    	 String hql1 = "select e.refId from PartyStruct s left join s.parentEntity e left join s.childEntity c left join e.partyType t "
    			 + " where c.refId in ( '"+StringHelper.join(refIds, "','")+"') and t.type= '"+ partyEntityType+"'";
    	 
    	 List<Long> psList = getDao().findByHQL(Long.class, hql1);
    	 return psList;
    }
    
    /**
     * 查询PartyStruct
     * @param partEntityType
     * @return
     */
    public List<Long> findCompanyIdsByChildPartyEntityRefIds(String[] refIds ,String partyEntityType) {    	   
//    	 String hql1 = "select e.refId from PartyStruct s left join s.parentEntity e left join s.childEntity c left join e.partyType t "
//    			 + " where c.refId in ( '"+StringHelper.join(refIds, "','")+"') and t.type= '"+ partyEntityType+"'";
//    	 
//    	 List<Long> psList = getDao().findByHQL(Long.class, hql1);
    	 
    	 String hql1 = "select s.prefix from PartyEntity s  "
       			 + " where s.refId in ( '"+StringHelper.join(refIds, "','")+"') and s.partyTypeId= "+ partyEntityType+"";
       	 
       	
       	 
       	 List<String> psList2 = getDao().findByHQL(String.class, hql1);
       	 List<Long> psList = new ArrayList<Long>();
       	 Set<String> s = new HashSet<String>();
       	 String[] temp = null;
       	 String tempCompanyId = null;
       	for(Iterator<String> iter = psList2.iterator(); iter.hasNext();){
       		String prefix = iter.next();
       		if(prefix!=null){
       			temp=prefix.split("-");
       			if(temp.length>2){
       				tempCompanyId = temp[1];
       			}
       		}
       		if(tempCompanyId!=null&&!s.contains(tempCompanyId)){
       			s.add(tempCompanyId);
       			psList.add(new Long(tempCompanyId));
       		}
       	}
       	
       	if(psList!=null&&psList.size()>0){
       		String hql2 = "select s.refId from PartyEntity s  "
         			 + " where s.id in ('" + StringHelper.join(psList, "','") + "')";
       		psList = getDao().findByHQL(Long.class, hql2);
       	}else{
       		return new ArrayList<Long>();
       	}
       	 return psList;
    }
    
    public List<PartyStruct> findPartyStructsByChildPartyEntityRefIds(String[] refIds ,String partyEntityType) {    	   
   	 String hql1 = "from PartyStruct s where s.parentEntity.partyType.type = '"+ partyEntityType+"' and s.childEntity.refId in ( '"+StringHelper.join(refIds, "','")+"')";
   	 
   	 List<PartyStruct> psList = getDao().findByHQL(PartyStruct.class, hql1);
   	 return psList;
    }
    
    /**
     * 查询PartyStruct
     * @param partEntityType
     * @return
     */
    public List<Long> findPartyStructRefIdByParentPartyEntityRefId(Long refId ,String partyEntityType) {    	   
    	 String hql1 = "select c.refId from PartyStruct s left join s.parentEntity e left join s.childEntity c left join e.partyType t "
    			 + " where e.refId= "+refId+" and t.type= '"+ partyEntityType+"'";
    	 
    	 List<Long> psList = getDao().findByHQL(Long.class, hql1);
    	 return psList;
    }
    
    /**
     * 查询PartyStruct
     * @param partEntityType
     * @return
     */
    public List<Long> findPartyStructRefIdsByParentPartyEntityRefIds(String[] refIds ,String queryPartyEntityType,String resultPartyEntityType) {    	   
    	 String hql1 = "select c.refId from PartyStruct s left join s.parentEntity e left join s.childEntity c left join e.partyType p left join c.partyType ct "
    			 + " where e.refId in ( '"+StringHelper.join(refIds, "','")+"') and p.type= '"+ queryPartyEntityType+"'  and ct.type= '"+ resultPartyEntityType+"'    ";
    	 
    	 List<Long> psList = getDao().findByHQL(Long.class, hql1);
    	 return psList;
    }
    
    /**
     * 查询PartyStruct
     * @param partEntityType
     * @return
     */
    public List<PartyStruct> findPartyStructsByParentPartyTypeEntityRefIds(String[] refIds ,String partyEntityType) {    	   
   	 String hql1 = "from PartyStruct s where s.parentEntity.partyType.type = '"+ partyEntityType+"' and s.parentEntity.refId in ( '"+StringHelper.join(refIds, "','")+"')";
   	 
   	 List<PartyStruct> psList = getDao().findByHQL(PartyStruct.class, hql1);
   	 return psList;
   }
    
    public List<PartyStruct> findPartyStructsByParentPartyEntityRefIds(String[] refIds ,String partyEntityType) {    	   
    	 String hql1 = "from PartyStruct s where s.childEntity.partyType.type = '"+ partyEntityType+"' and s.parentEntity.refId in ( '"+StringHelper.join(refIds, "','")+"')";
    	 
    	 List<PartyStruct> psList = getDao().findByHQL(PartyStruct.class, hql1);
    	 return psList;
    }
    /**
     * 获取组织架构关系
     * @author jdq
     * @param parentId
     * @param childId
     * @return
     */
    public PartyStruct getStruct(Long parentId, Long childId){
    	if (null != parentId && null != childId){
    		String hql = "select s from PartyStruct s where s.parentEntityId = ? and s.childEntityId = ?";
    		return getDao().findFirstByHQL(PartyStruct.class, hql, parentId, childId);
    	}
    	return new PartyStruct();
    }
    
    /**
     * 查找组织架构节点下某实体数据的组织架构关系
     * @author jdq
     * @param parentId
     * @param refId
     * @return
     */
    public PartyStruct getStructByChildRefId(Long parentId, Long refId){
    	if (null != parentId && null != refId){
    		String hql = "select s from PartyStruct s where s.parentEntityId = ? and s.childEntity.refId=?";
    		return getDao().findFirstByHQL(PartyStruct.class, hql, parentId, refId);
    	}
    	return new PartyStruct();
    }

    /**
     * 获取组织架构关系中子节点的refid
     * @author jdq
     * @param parentId
     * @param partyType
     * @return
     */
    public List<Long> findChildRefIdsByParentEntityId(Long parentEntityId, String partyType){
    	if (null != parentEntityId && StringUtils.isNotBlank(partyType)){
    		String hql = "select c.refId from PartyStruct s left join s.parentEntity e left join s.childEntity c left join c.partyType t where s.parentEntityId= ? and c.refId is not null and t.type= ?";
    		List<Long> q = getDao().findByHQL(Long.class, hql, parentEntityId, partyType);
    		return q;
    	}
    	return new ArrayList<Long>();
    }
    
    public List<Long> findChildRefIdsByParentEntityId(Long parentEntityId){
    	if (null != parentEntityId ){
    		String hql = "select c.refId from PartyStruct s left join s.parentEntity e left join s.childEntity c  where s.parentEntityId= ? and c.refId is not null ";
    		List<Long> q = getDao().findByHQL(Long.class, hql, parentEntityId);
    		return q;
    	}
    	return new ArrayList<Long>();
    }

    
    /**
     * 获取组织架构关系中子节点的refid
     * @author zhangxiang
     * @param parentEntityId
     * @param partyType
     * @param includeAllSubOrgns
     * @return
     */
    public List<Long> findChildRefIdsByParentEntityId(Long parentEntityId, String partyType,Boolean includeAllSubOrgns){
    	
    	if(!includeAllSubOrgns){
    		return this.findChildRefIdsByParentEntityId(parentEntityId, partyType);
    	}else{
	    	if (null != parentEntityId && StringUtils.isNotBlank(partyType)){
	    		String firstId="1";
	    		//判断是否是根的id 取根id
	    		PartyStruct ps=getDao().findFirstByHQL(PartyStruct.class, "from PartyStruct where parentEntityId is null");
				if(ps!=null&&ps.getChildEntityId()!=null){
					Long peFirstId=ps.getChildEntityId();
					if(parentEntityId.equals(peFirstId)){
						firstId=String.valueOf(peFirstId);
					}
				}
	    		//结束
	    		String hql = "select c.refId from PartyStruct s left join s.parentEntity e left join s.childEntity c left join c.partyType t where s.childEntity.prefix like ? and c.refId is not null and t.type= ?";
	    		List<Long> q = getDao().findByHQL(Long.class, hql, firstId.equals(""+parentEntityId)?"%"+parentEntityId+"-%":"%-"+parentEntityId+"-%", partyType);
	    		return q;
	    	}
	    	return new ArrayList<Long>();
    	}
    	
    }
    
    //根据岗位id查询项目树主键值
    public List<Long> findProjectBranchsByRoleId(String roleId){
    	List<Long> sls=new ArrayList<Long>(); 
    	String hql = "select c.prefix from PartyStruct s left join s.parentEntity e left join s.childEntity c left join c.partyType t where s.childEntity.refId in("+roleId+") and c.refId is not null and t.type='"+PartyType.TYPE_ROLE+"'";
		List<String> q = getDao().findByHQL(String.class, hql);
		if(q!=null&&q.size()>0){
			for(String s:q){
				if(s!=null&&s.contains("-")){
					String[] ids=s.split("-");
					if(ids.length>2){
						for(int i=2;i<ids.length-1;i++){
							//根据主键查询refid
							PartyEntity pe=getDao().getById(PartyEntity.class,Long.parseLong(ids[i]));
							if(pe!=null&&pe.getRefId()!=null)
								sls.add(pe.getRefId());
						}
					}
				}
			}
		}

		return sls;
    }
    
    public List<Long> findChildEntityIdsByParentEntityId(Long parentEntityId, String partyType){
    	if (null != parentEntityId && StringUtils.isNotBlank(partyType)){
    		String hql = "select c.id from PartyStruct s left join s.parentEntity e left join s.childEntity c left join c.partyType t where s.parentEntityId= ? and c.refId is not null and t.type= ?";
    		return getDao().findByHQL(Long.class, hql, parentEntityId, partyType);
    	}
    	return new ArrayList<Long>();
    }
    
    /**
     * 获取节点涉及的所有上下级关系
     * @author jdq
     * @param entityId
     * @return
     */
    public List<PartyStruct> findEntityPartyStruct(Long entityId){
    	if (null != entityId){
    		String hql = "select m from PartyStruct m where m.parentEntityId = ? or m.childEntityId= ?";
    		return getDao().findByHQL(PartyStruct.class, hql, entityId, entityId);
    	}
    	return new ArrayList<PartyStruct>();
    }
    
    public List<PartyStruct> findPartyStructByChildEntityId(Long childEntityId){
    	if (null != childEntityId){
    		String hql = "select m from PartyStruct m where  m.childEntityId= ?";
    		return getDao().findByHQL(PartyStruct.class, hql, childEntityId);
    	}
    	return new ArrayList<PartyStruct>();
    }
    
    
    
    /**
     * 删除关联关系
     * @param entityId
     */
    public void deleteEntityPartyStruct(Long entityId){
    	if (null != entityId){
    		String hql = "delete from PartyStruct m where m.parentEntityId = ? or m.childEntityId= ?";
    		getDao().execute(hql, entityId, entityId);
    	}
    }
    
    
    /**
     * 查找组织架构节点下面的岗位节点对应标准角色
     * @author jdq
     * @param entityId
     * @return
     */
    public List<Long> findStructStdRoleIds(Long entityId){
    	if (null != entityId){
    		String hql = "select c.refParentId from PartyStruct s left join s.childEntity c left join c.partyType t"
        + " where s.parentEntityId = ? and t.type='role'";
    		return getDao().findByHQL(Long.class, hql, entityId);
    	}
    	return new ArrayList<Long>();
    }
    /**
     * 获取父peid
     * @param entityId 子peId
     * @return
     */
    public Long getParentEntityIdByPeId(Long entityId){
    	if (null != entityId){
    		String hql = "select s.parentEntityId from PartyStruct s left join s.childEntity c where c.id = ?";
    		return getDao().findFirstByHQL(Long.class, hql, entityId);
    	}
    	return null;
    }

}
