package com.xinleju.erp.finance.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.finance.dao.FiCashFlowCaseDao;
import com.xinleju.erp.finance.models.FiAccountCaption;
import com.xinleju.erp.finance.models.FiCashFlowCase;
import com.xinleju.erp.finance.utils.ExcelHandlerUtil;
import com.xinleju.erp.finance.utils.IExcelHandler;
import com.xinleju.erp.form.utils.DbType;
import com.xinleju.erp.frame.dto.FiCashFlowCaseDTO;

/**
 * 现金流量项目
 * @author ztl
 *
 */
@Service
public class FiCashFlowCaseService extends BaseService implements IExcelHandler{
	@Autowired
	private FiCashFlowCaseDao fiCashFlowCaseDao;
	@Autowired
	private JdbcTemplate jt;
	
	/**
	 * 根据ID获取 FiCashFlowCase
	 * @param id
	 * @return
	 */
	public FiCashFlowCase getFiCashFlowCaseById(Long id){
		return getDao().getById(FiCashFlowCase.class, id);
	}
	
	/**
	 * 根据Code获取 FiCashFlowCase
	 * @param id
	 * @return
	 */
	public FiCashFlowCase getFiAccountCaptionByCode(String code){
		String hql = "from FiCashFlowCase where code = ?";
		return	this.getDao().findFirstByHQL(FiCashFlowCase.class, hql, code);
	}

	/**
	 * 根据账套id获得现金留下项目
	 * 
	 * @param accountSetId
	 * @param status
	 * @return
	 */
	public List<FiCashFlowCase> getFiCashFlowCaseList(String status,Long accountSetId,Long sysId) {
		return fiCashFlowCaseDao.getFiCashFlowCaseList(status, accountSetId, sysId);
	}

	/**
	 * 根据账套id获得会计科目的dto
	 * 
	 * @param accountSetId
	 * @param status
	 * @return
	 */
	public List<FiCashFlowCaseDTO> getCashFlowCaseDTOList(String status,Long accountSetId,Long sysId) {
		return fiCashFlowCaseDao.getFiCashFlowCaseDTOList(status, accountSetId, sysId);
	}

	public void saveOrUpdate(FiCashFlowCase fiCashFlowCase) {
		getDao().saveOrUpdate(fiCashFlowCase);
	}

	/**
	 * 删除现金流量项目
	 * 
	 * @param fiAccountCaption
	 */
	public void delete(FiCashFlowCase fiCashFlowCase) {
		getDao().delete(fiCashFlowCase);
	}

	/**
	 * 删除会计科目
	 * 
	 * @param fiAccountCaption
	 */
	public void delete(FiAccountCaption fiAccountCaption) {
		getDao().delete(fiAccountCaption);
	}

	/**
	 * excel页签名
	 * @return
	 */
	@Override
	public String getSheetName() {
		// TODO Auto-generated method stub
		return "现金流量";
	}
	/**
	 * 导出的excel字段名称
	 * @return
	 */
	@Override
	public String[] getHeadItemsNameAry() {
		// TODO Auto-generated method stub
		//id,code,name,parentid,sys_id
		String[] str = {"id","编码","名称","parentid","所属系统","账套id"};
		return str;
	}

	/**
	 * 导出的excel字段属性名，class中必须存在此属性
	 * @return
	 */
	@Override
	public String[] getHeadItemsCodeAry() {
		// TODO Auto-generated method stub
		String[] str = {"id","code","name","parentId","sysId","accountSetId"};
		return str;
	}

	/**
	 * 导出的excel字段在表格中占的宽度，与code一一对应，默认100，如不想显示比如ID字段，可设置为0。
	 * @return
	 */
	@Override
	public Integer[] getHeadItemsLength() {
		// TODO Auto-generated method stub
		Integer[] lengths = { 100, 100, 100, 100, 100, 100};
		return lengths;
	}

	/**
	 * 导出字段在excel中是否红色显示 <br/> true:是（字段值不导出），false：否，null：红色、且字段值导出
	 * @return
	 */
	@Override
	public Boolean[] getHeadItemsColor() {
		// TODO Auto-generated method stub
		Boolean[] bool = { false, false, false, false, false, false};
		return bool;
	}

	/**
	 * 导出的excel实体类名
	 * @return
	 */
	@Override
	public Class<?> getEntityClass() {
		// TODO Auto-generated method stub
		return FiCashFlowCase.class;
	}

	/**
	 * 导出到excel的具体数据
	 * @return
	 */
	@Override
	public List<?> getEntityList(IExcelHandler handler,String accountSetCode,long sysId,Long accountSetId,Long companyId) {
		// TODO Auto-generated method stub
		try{
			FiCashFlowCaseService fiCashFlowCaseService = (FiCashFlowCaseService)handler;
			List<FiCashFlowCase> cashFlowCaseDTOList = null;
			if (StringUtils.isNotBlank(accountSetCode))
				cashFlowCaseDTOList = fiCashFlowCaseService.getFiCashFlowCaseList("1", accountSetId, sysId);
			return cashFlowCaseDTOList;
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 表格最上方的提示列表，为String集合，多条提示逐行显示
	 * @return
	 */
	@Override
	public List<String> getTipsList() {
		// TODO Auto-generated method stub
		List<String> tips = new ArrayList<String>();
		tips.add("说明：数据导出模板对格式有严格要求，请直接录入相关值，禁止增加或删除列，禁止删除此行及标题行，否则将导入失败！");
		return tips;
	}

	@Override
	public Map<String, Integer[]> getCellJoinMap() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?> getImpClass() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String[] getImportColumns() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String[] getImportHeadItemsName() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?>[] getImportColumnsType() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Boolean[] getColsIsImp() {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public int importPr(String accountSetCode,String sysId,String companyCode,String accountSetId,HSSFSheet sheet,Long companyId){
		int rowNum = sheet.getLastRowNum();// 行  
    	try{
    		String oldAccountSetId = "";
    		String oldSysId = "";
    		if(DbType.getType().contains("dbo.")){
    			jt.execute("SET IDENTITY_INSERT [dbo].[fi_cash_flow_case] ON;");
    		}
			for(int k=2;k<=rowNum;k++){
	    		HSSFRow hssfRow = sheet.getRow(k);
	    		if (hssfRow == null) {
					continue;
				}
	    		oldAccountSetId = hssfRow.getCell(5)+"";
	    		if(oldAccountSetId.equals(accountSetId))
	    			return 1;
	    		oldSysId = hssfRow.getCell(4)+"";
	    		Long parentId = null;
	    		if(StringUtils.isNotBlank(hssfRow.getCell(3)+"")){
	    			parentId = Long.valueOf(ExcelHandlerUtil.cutIdLength(ExcelHandlerUtil.getValue(hssfRow.getCell(3))+"")+accountSetId+sysId);
//	    			parentId = Long.valueOf(ExcelHandlerUtil.getValue(hssfRow.getCell(3))+"");
	    		}
	    		Long id = null;
	    		if(StringUtils.isNotBlank(hssfRow.getCell(0)+"")){
	    			id = Long.valueOf(ExcelHandlerUtil.cutIdLength(ExcelHandlerUtil.getValue(hssfRow.getCell(0))+"")+accountSetId+sysId);
	    		}
	    		//"id","code","name","parentId","sysId"
	    		if(DbType.getType().contains("dbo.")){
		    		String sql = "insert into fi_cash_flow_case(id,code,name,parent_id,create_date,status,account_set_code,account_set_id,sys_id) VALUES (?,?,?,?,?,?,?,?,?);";
		    		jt.update(sql, id,ExcelHandlerUtil.getValue(hssfRow.getCell(1))+"",
		    				ExcelHandlerUtil.getValue(hssfRow.getCell(2))+"",parentId,new Date(),1,accountSetCode,accountSetId,sysId);
	    		}else{
	    			String sql = "insert IGNORE into fi_cash_flow_case(id,code,name,parent_id,create_date,status,account_set_code,account_set_id,sys_id) VALUES (?,?,?,?,?,?,?,?,?)";
		    		getDao().executeSQL(sql, id,ExcelHandlerUtil.getValue(hssfRow.getCell(1))+"",
		    				ExcelHandlerUtil.getValue(hssfRow.getCell(2))+"",parentId,new Date(),1,accountSetCode,accountSetId,sysId);
	    		}
	    	} 
			if(DbType.getType().contains("dbo.")){
				jt.execute("SET IDENTITY_INSERT [dbo].[fi_cash_flow_case] OFF");
			}
			return 2;
//			setParent(oldAccountSetId,accountSetId,oldSysId,sysId);
    	}catch(Exception e){
    		e.printStackTrace();
    		return 3;
    	}
	}
	
	public void setParent(String oldAccountSetId,String accountSetId,String oldSysId,String sysId){
		String hql="from FiCashFlowCase where accountSetId='"+oldAccountSetId+"' and sysId = "+oldSysId;
		String hql2="from FiCashFlowCase where accountSetId='"+accountSetId+"' and sysId = "+sysId;
		List<FiCashFlowCase> list = getDao().findByHQL(FiCashFlowCase.class, hql);
		List<FiCashFlowCase> list2 = getDao().findByHQL(FiCashFlowCase.class, hql2);
		for(FiCashFlowCase fc:list){
			Long pid = fc.getParentId();
			String code = fc.getCode();
			for(FiCashFlowCase fc2:list2){
				String code2 = fc2.getCode();
				if(StringUtils.isNotBlank(code) && code.equals(code2)){
					if(pid != null){
						FiCashFlowCase c = this.getFiCashFlowCaseById(pid);
						if(c != null){
							String pcode = c.getCode();
							String hql_="from FiCashFlowCase where accountSetCode='"+accountSetId+"' and code ='"+pcode+"' and sysId = "+ sysId +" group by code";
							FiCashFlowCase fbc = getDao().findFirstByHQL(FiCashFlowCase.class, hql_);
							if(fbc != null){
								Long pid_ = fbc.getId();
								fc2.setParentId(pid_);
								getDao().update(fc2);
							}
						}
					}
				}
			}
		}
	}
}
