package com.xinleju.erp.flow.dao.impl;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Repository;

import com.xinleju.erp.flow.flowutils.bean.BizDataDTO;
import com.xinleju.erp.flow.models.BizData;
import com.xinleju.erp.flow.service.api.utils.ApiUtils;
import com.xinleju.erp.flow.utils.GvUtils;

/**
 * 业务数据
 * @author jun
 *
 */
@Repository
public class BizDataDAO extends BaseDAO {
	
    /**
     * 保存业务数据
     * @param fiId
     * @param gvs
     */
    public void putBizDatas(Long fiId, List<BizDataDTO> bizDataDTOList) {
        if (bizDataDTOList != null) {
            for (BizDataDTO bizDataDTO : bizDataDTOList) {
            	putBizData(fiId, bizDataDTO.getDataName(), bizDataDTO.getDataValue(), bizDataDTO.getDisplayDataName(), bizDataDTO.getDataType(), bizDataDTO.getDataVersion());
            }
        }
    }

    /**
     * 保存业务数据
     * @param fiId
     * @param k
     * @param v
     * @param name
     */
    public void putBizData(Long fiId, String k, Object v, String displayName, String dataType, String dataVsersion) {
        if (v != null) {
            String type = GvUtils.getType(v);
            BizData bizData = this.getBizData(fiId, k, dataVsersion);
            if (bizData == null) {
            	bizData = new BizData();
            }
            bizData.setFiId(fiId);
            bizData.setName(k);
            bizData.setDisplayName(displayName);
            bizData.setType(type);
            bizData.setVal(String.valueOf(v));
            bizData.setDataType(dataType);
            bizData.setDataVsersion(dataVsersion);
            getDao().saveOrUpdate(bizData);
        }
    }
    private BizData getBizData(Long fiId, String key, String dataVsersion) {
    	if (StringUtils.isNotBlank(dataVsersion)){
//    		return getDao().findFirst(BizData.class, "name = ? and fiId = ? and dataVsersion = ? ", new Object[] { key, fiId , dataVsersion});
    		return getDao().findFirst(BizData.class, "name = ? and fiId = ?", new Object[] { key, fiId });
    	} else {
    		return getDao().findFirst(BizData.class, "name = ? and fiId = ?", new Object[] { key, fiId });
    	}
    }
    /**
     * 
     * @param fiId
     * @return
     */
    public List<BizData> getBizDatas(Long fiId, String dataVsersion) {
        List<BizData> bizDataList = new ArrayList<BizData>();
        if (StringUtils.isNotBlank(dataVsersion)){
//        	bizDataList.addAll(getDao().findAll(BizData.class, " fiId=? and val is not null and dataVsersion = ? ", new Object[]{fiId, dataVsersion}, "id asc"));
        	bizDataList.addAll(getDao().findAll(BizData.class, " fiId=? and val is not null ", new Object[]{fiId, dataVsersion}, "id asc"));
        } else {
        	bizDataList.addAll(getDao().findAll(BizData.class, " fiId=? and val is not null", new Object[]{fiId}, "id asc"));
        }
        return bizDataList;
    }
    
    /**
     * 获取手机端对象
     * @param fiId
     * @param dataVsersion
     * @return
     */
    public List<BizDataDTO> getBizDataDTOList(Long fiId, String dataVsersion){
    	List<BizDataDTO> bizDataDTOList = new ArrayList<BizDataDTO>();
    	List<BizData> bizDataList = this.getBizDatas(fiId, dataVsersion);
    	for (BizData bizData : bizDataList){
    		bizDataDTOList.add(ApiUtils.buildBizDataDTO(bizData));
    	}
    	return bizDataDTOList;
    }
    
}
