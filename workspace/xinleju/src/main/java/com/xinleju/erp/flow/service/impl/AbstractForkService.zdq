package com.xinleju.erp.flow.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.xinleju.erp.base.utils.CollectionUtils;
import com.xinleju.erp.flow.dao.impl.AcDAO;
import com.xinleju.erp.flow.dao.impl.AiDAO;
import com.xinleju.erp.flow.dao.impl.TrDAO;
import com.xinleju.erp.flow.flowutils.bean.Gvs;
import com.xinleju.erp.flow.models.Ac;
import com.xinleju.erp.flow.models.Ai;
import com.xinleju.erp.flow.models.Tr;
import com.xinleju.erp.flow.models.Wi;
import com.xinleju.erp.flow.service.IForkTypeService;
import com.xinleju.erp.flow.utils.FlowUtils;

/**
 * 版权：(C) 版权所有 2000-2014 上海天好电子商务有限公司苏州分公司
 * <p>
 * </p>
 * <p>
 * </p>
 * 
 * @author Administrator
 * @version $Id: AbstractForkService.java 1673 2014-11-04 13:52:59Z sunchaohui $
 * @since
 * @see
 */
public abstract class AbstractForkService implements IForkTypeService {
    /**
     * 
     * <p>
     * 注入AiDAO
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @return AiDAO
     */
    abstract AiDAO getAiDAO();

    /**
     * 
     * <p>
     * 注入TrDAO
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @return TrDAO
     */
    abstract TrDAO getTrDAO();

    /**
     * 
     * <p>
     * 注入AcDAO
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @return AcDAO
     */
    abstract AcDAO getAcDAO();

    /**
     * 
     * <p>
     * 获取下一步可开始的节点
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param passList
     *            可通过
     * @param defaultList
     *            默认
     * @return 可开始的Ac
     */
    abstract List<Ac> getNext1AcList(List<Ac> passList, List<Ac> defaultList);

    @Override
    public final List<Ai> getNext1List(Long fiId, Ac ac, Gvs gvs, Map<String, Object> trs) {

        List<Ac> canPassList = new ArrayList<Ac>();
        List<Ac> defaultList = new ArrayList<Ac>();

        List<Tr> nextATrs = getTrDAO().getListByTrIds(ac.getFlowCode(), ac.getFlowVersion(), ac.getNext_tr_a());
        List<Ac> nextAAcs = getAcDAO().getNextAList(ac);

        FlowUtils.getNext1ListDeepSearchAuto(ac, nextAAcs, nextATrs, gvs, canPassList, defaultList);

        List<Ac> nextList = getNext1AcList(canPassList, defaultList);

        List<String> nodeIds = CollectionUtils.collectAsList(nextList, "nodeId");
        List<Ai> aiList = getAiDAO().getListByNodeIdList(fiId, nodeIds, Wi.STATUS_CREATED, Wi.STATUS_COMPLETE);

        return aiList;

    }

    

}
