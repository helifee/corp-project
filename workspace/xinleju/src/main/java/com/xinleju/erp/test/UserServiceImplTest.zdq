package com.xinleju.erp.test;

import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.xinleju.erp.flow.flowutils.bean.FlowDTO;
import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.flow.flowutils.bean.PageBean;
import com.xinleju.erp.flow.service.api.extend.BaseAPI;
import com.xinleju.erp.flow.service.api.extend.CommonService;
import com.xinleju.erp.flow.service.api.extend.FlowService;
import com.xinleju.erp.flow.service.api.extend.OrgnService;
import com.xinleju.erp.flow.service.api.extend.UserSerivce;
import com.xinleju.erp.flow.service.api.extend.dto.FuncDTO;
import com.xinleju.erp.flow.service.api.extend.dto.OpDTO;
import com.xinleju.erp.flow.service.api.extend.dto.UserDTO;
import com.xinleju.erp.sm.cache.api.SyncFinaData;
import com.xinleju.erp.sm.extend.dto.FinaData;
import com.xinleju.erp.sm.extend.dto.FinaQueryParams;

public class UserServiceImplTest {

	private BaseAPI baseAPI;
	private OrgnService orgnService;
	private UserSerivce userService;
	private FlowService flowService;
	private CommonService commonService;
	private SyncFinaData syncFinaData;

	@Before
	public void beforeClass() {
		ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(
				new String[] { "test-dubbo.xml" });
		context.start();

		baseAPI = (BaseAPI) context.getBean("baseAPIService");

		orgnService = (OrgnService) context.getBean("orgnServiceCustmer");
		userService = (UserSerivce) context.getBean("userServiceCustmer");
		flowService = (FlowService) context.getBean("flowServiceCustmer");
		commonService = (CommonService) context.getBean("commonServiceCustmer");
		//syncFinaData = (SyncFinaData) context.getBean("syncFinaDataCompany");
		}

	@Test
	public void getFinaData() {
		FinaQueryParams par=new FinaQueryParams();
		par.setFinaDataType(1);
		FlowResult<PageBean<FinaData>> fr=syncFinaData.getFinaData(par);
		System.out.println("-----共" + fr.getResult() + "条");
		for (FinaData f : fr.getResult().getItems()) {
			System.out.println("-------" + f.get("name"));
		}
	}
	
	@Test
	public void getUserListByCompanyId() {
		FlowResult<List<UserDTO>> fr = userService.getUserListByCompanyId(1L);
		System.out.println("-----共" + fr.getResult().size() + "条");
		for (UserDTO f : fr.getResult()) {
			System.out.println("-------" + f.getRealName());
		}
	}

	@Test
	public void getUserListByProjectBranchIdAndStandardRoleId() {

		FlowResult<List<UserDTO>> fr = userService
				.getUserListByProjectBranchIdAndStandardRoleId(46l, 1892796l);

		System.out
				.println("-------getUserListByProjectBranchIdAndStandardRoleId----------"
						+ fr.getResult().size());

		for (UserDTO f : fr.getResult()) {
			System.out.println("-------" + f.getRealName());
		}
	}

	@Test
	public void getFuncAuth() throws Exception {
		FlowResult<List<FuncDTO>> fr = baseAPI.getFuncAuth("admin", "PT");
		System.out.println("-------getFuncAuth----------"
				+ fr.getResult().size());

		for (FuncDTO f : fr.getResult()) {
			System.out.println("-------" + f.getName());
			if(f!=null&&f.getChildren()!=null){
				for (FuncDTO fc : f.getChildren()) {
					System.out.println("------------" + fc.getName());
				}
			}
		}
	}
	
	@Test
	public void getFuncAuthByModuleCode() throws Exception {
		FlowResult<List<FuncDTO>> fr = baseAPI.getFuncAuthByModuleCode("MD");
		System.out.println("-------getFuncAuth----------"
				+ fr.getResult().size());

		for (FuncDTO f : fr.getResult()) {
			System.out.println("-------" + f.getName());
			if(f!=null&&f.getChildren()!=null){
				for (FuncDTO fc : f.getChildren()) {
					System.out.println("------------" + fc.getName());
				}
			}
		}
	}

	@Test
	public void getUserList() {
		FlowResult<PageBean<UserDTO>> fr = userService.getUserList(654L, null,
				0, 100, true, null);
		System.out.println("-------getUserList----------"
				+ fr.getResult().getItems().size());

		for (UserDTO f : fr.getResult().getItems()) {
			System.out.println("---"+f.getId()+"----" + f.getLoginName()+"------"+f.getMainRoleId()+"--"+f.getPosition());
			System.out.println(f.getType());
		}
	}

	@Test
	public void getFuncAuthByStandardRoleId() {
		FlowResult<List<FuncDTO>> fr = userService.getFuncAuthByStandardRoleId(
				2L, "PT");
		System.out.println("=====size====="+fr.getResult().size());
		for (FuncDTO f : fr.getResult()) {
			System.out.println("-------" + f.getName());
			if(f!=null&&f.getChildren()!=null){
				for (FuncDTO fc : f.getChildren()) {
					System.out.println("------------" + fc.getName());
				}
			}
		}

	}
	
	@Test
	public void getOpAuth(){
		FlowResult<List<OpDTO>> fr=userService.getOpAuth("cwzj","PL","48");
		System.out.println("-----size------"+fr.getResult().size());
		if(fr.getResult()!=null){
			for(OpDTO od:fr.getResult()){
				System.out.println("-----"+od.getName());
			}
		}
	}
	
	@Test
	public void getFlows(){
		FlowResult<PageBean<FlowDTO>> fr=flowService.getFlows(null, 10, 10, null);
		System.out.println(fr.getResult().getTotal());
		for(FlowDTO fd:fr.getResult().getItems()){
			System.out.println("---"+fd.getFlowName());
		}
	}
	
	@Test
	public void getUserListByPostIds(){
		String[] postIds={"282","283","284","283","285"};
		FlowResult<List<UserDTO>> fr=userService.getUserListByPostIds(postIds);
		System.out.println(fr.getResult());
		for(UserDTO u:fr.getResult()){
			System.out.println("---"+u.getId());
		}
	}
	
	@Test
	public void getOpAuthByModuleCode() {
		FlowResult<List<OpDTO>> fr=userService.getOpAuthByModuleCode("PL");
		System.out.println("-----size------"+fr.getResult().size());
		if(fr.getResult()!=null){
			for(OpDTO od:fr.getResult()){
				System.out.println("-----"+od.getName());
			}
		}
	}
	
	@Test
	public void getUserByRealName(){
		FlowResult<List<UserDTO>> fr=userService.getUserByRealName(null);
		System.out.println(fr.getResult());
		for(UserDTO u:fr.getResult()){
			System.out.println("---"+u.getId()+"---"+u.getRealName());
		}
	}
	
	@Test
	public void getUserByUserLoginName(){
		FlowResult<UserDTO> fr=baseAPI.getUserByLoginName("admin");
		System.out.println(fr.getResult().getRealName());
	}
	


}
