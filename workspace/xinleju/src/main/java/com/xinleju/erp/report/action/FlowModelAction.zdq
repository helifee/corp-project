package com.xinleju.erp.report.action;

import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.frame.models.PartyEntity;
import com.xinleju.erp.frame.models.Role;
import com.xinleju.erp.report.dto.FlowModelStepDto;
import com.xinleju.erp.report.models.FlowModelStep;
import com.xinleju.erp.report.models.UserAuthority;
import com.xinleju.erp.report.service.UserOrginationService;
import com.xinleju.erp.report.service.impl.FlowModelStepServiceImpl;

public class FlowModelAction extends BaseAction {

	/**
	 * <p>
	 * Title:FlowModelAction.java
	 * 
	 * @author liugang
	 * @date 2016-4-21
	 */
	private static final Log log = LogFactory.getLog(FlowModelAction.class);

	private static final long serialVersionUID = 1L;

	private FlowModelStepDto flowModelStepDto;

	private FlowModelStep flowModelStep;

	@Autowired
	private FlowModelStepServiceImpl flowModelStepService;
	@Autowired
	private UserOrginationService userOrginationService;
	@Autowired
	private JdbcTemplate jdbcTemplate;

	/**
	 * 流程功能
	 * 
	 * @author liugang
	 * @date 2016-4-24
	 */
	public String flowIndex() {
		try {
			List<List<FlowModelStepDto>> list = flowModelStepService.parseFlowModel();
			// 删除历史数据
			getCommonService().execute("delete from FlowModelStep", new Object[] {});
			int i=0;
			for (List<FlowModelStepDto> list2 : list) {
				for (FlowModelStepDto flowModelStepDto : list2) {
					FlowModelStep flowModel = new FlowModelStep();
					//流程大类
					if (StringUtils.isNotBlank(flowModelStepDto.getType1())) {
						flowModel.setType1(flowModelStepDto.getType1());
					}
					//流程分类
					if (StringUtils.isNotBlank(flowModelStepDto.getType2())) {
						flowModel.setType2(flowModelStepDto.getType2());
					}
					//流程名称
					if (StringUtils.isNotBlank(flowModelStepDto.getFlowName())) {
						flowModel.setFlowName(flowModelStepDto.getFlowName());
					}
					//跳转条件
					if (StringUtils.isNotBlank(flowModelStepDto.getCondtions())) {
						flowModel.setCondstion(flowModelStepDto.getCondtions());
					}
					//流转过程
					if (StringUtils.isNotBlank(flowModelStepDto.getNodes())) {
						flowModel.setProcessing(flowModelStepDto.getNodes());
					}
					//保存入库
					getCommonService().save(flowModel);
					System.out.println(i+"=======================================");
				  i++;
				}

			}
			
			log.info("Action:FlowModelAction.index------->流程报表入库");
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
		}
		return "index";
	}
	
	/**
	 * 
	 * 角色权限
	 * @return
	 */
	public String roleIndex() {
		try {
			getCommonService().execute("delete from UserAuthority", new Object[] {});
			List<Role> roles = getCommonService().findAll(Role.class," type='standard'");
			for (Role role : roles) {
				String sql = "SELECT app.name AS name1,b.name AS name2,s.name AS name3,p.NAME AS name4 ,rb.func_button_id as name4Id  " +
						"FROM sm_func AS s LEFT JOIN sm_func b ON s.parent_id = b.id and b.parent_id IS NULL " +
						"LEFT JOIN sm_op p ON p.func_id = s.id LEFT JOIN sm_app app ON app.code = s.module_code " +
						"LEFT JOIN SM_role_module modd ON app.id = modd.func_module_id and 	modd.role_id = ? " +
						"LEFT JOIN SM_role_module moddd ON b.id = moddd.func_module_id  and moddd.role_id = ? " +
						"LEFT JOIN SM_role_module modddd ON s.id = modddd.func_module_id  and 	modddd.role_id = ? " +
						"LEFT JOIN SM_role_button rb ON p.id = rb.func_button_id  and 	rb.role_id = ?  " +
						"WHERE s.parent_id IN (b.Id) and(s.module_code='EX' OR s.module_code='MD' or s.module_code='PT') " +
						"ORDER BY app.name,b. NAME,s. NAME";
				List<Map<String, Object>> objects =jdbcTemplate.queryForList(sql,role.getId(),role.getId(),role.getId(),role.getId());
				System.out.println(role.getId()+"---------------------------");
				for (Map map : objects) {
					UserAuthority userAuthority=new UserAuthority();
					userAuthority.setRoleName(role.getName());
					userAuthority.setName1(map.get("name1").toString());
					userAuthority.setName2(map.get("name2").toString());
					if(map.get("name3")!=null){
						userAuthority.setName3(map.get("name3").toString());
					}else {
						userAuthority.setName4Id("");
					}
					if(map.get("name4")!=null){
						userAuthority.setName4(map.get("name4").toString());
					}else {
						userAuthority.setName4Id("");
					}
					if(map.get("name4Id")!=null){
						userAuthority.setName4Id(map.get("name4Id").toString());
					}else {
						userAuthority.setName4Id("");
					}
					//保存入库
					getCommonService().save(userAuthority);
				}
			}
			log.info("Action:FlowModelAction.index------->流程报表入库");
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
		}
		return "index";
	}
	
	
	/**
	 * 
	 * 角色权限
	 * @return
	 */
	public String userOrginIndex() {
		try {
			getCommonService().execute("delete from UserOrgination", new Object[] {});
			userOrginationService.sysUserOrgination();
			log.info("Action:FlowModelAction.index------->流程报表入库");
		} catch (Exception e) {
			e.printStackTrace();
			log.info(e.getMessage());
		}
		return "index";
	}

	public String index1() {
		try {

//			List<Role> roles = getCommonService().findAll(Role.class, "from Role");
//		for (Role role : roles) {
//			
//			String sql = "SELECT app.`name` AS name1, b.`name` AS name2, s.`name` AS name3, p.`NAME` AS name4, modd.func_module_id AS id1,moddd.func_module_id AS id2, modddd.func_module_id AS id3, rb.func_button_id AS id4 FROM sm_func AS s LEFT JOIN sm_func b ON s.parent_id = b.id and b.parent_id IS NULL LEFT JOIN sm_op p ON p.func_id = s.id LEFT JOIN sm_app app ON app.`code` = s.module_code LEFT JOIN SM_role_module modd ON app.id = modd.func_module_id and 	modd.role_id = ? LEFT JOIN SM_role_module moddd ON b.id = moddd.func_module_id  and 	moddd.role_id = ? LEFT JOIN SM_role_module modddd ON s.id = modddd.func_module_id  and 	modddd.role_id = ? LEFT JOIN SM_role_button rb ON p.id = rb.func_button_id  and 	rb.role_id = ?  WHERE s.parent_id IN (b.Id) and(s.module_code='EX' OR s.module_code='MD' or s.module_code='PT') ORDER BY app.`name`,b. NAME,s. NAME";
//			List<Object> objects = App.getBean(JdbcTemplate.class).queryForList(sql, new Object[] { role.getRoleId(),role.getRoleId(),role.getRoleId(),role.getRoleId() }, Object.class);
//			for (Object object : objects) {
//				
//				System.out.println(object);
//			}
//		}

			log.info("Action:FlowModelAction.index------->流程报表入库");
		} catch (Exception e) {
			log.info(e.getMessage());
		}
		return "index";
	}

	public FlowModelStepDto getFlowModelStepDto() {
		return flowModelStepDto;
	}

	public void setFlowModelStepDto(FlowModelStepDto flowModelStepDto) {
		this.flowModelStepDto = flowModelStepDto;
	}

	public FlowModelStep getFlowModelStep() {
		return flowModelStep;
	}

	public void setFlowModelStep(FlowModelStep flowModelStep) {
		this.flowModelStep = flowModelStep;
	}

}
