package com.xinleju.erp.finance.service.sa;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;

import org.apache.log4j.Logger;

import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.flow.flowutils.bean.DebugInfo;
import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.flow.flowutils.bean.PageBean;
import com.xinleju.erp.form.utils.DbType;
import com.xinleju.erp.sm.cache.api.SyncFinaSaData;
import com.xinleju.erp.sm.extend.dto.FinaData;
import com.xinleju.erp.sm.extend.dto.FinaQueryParams;

/**
 * @author Administrator
 * 
 */
public class SyncFinaSaDataImp extends BaseService implements SyncFinaSaData {
	Logger logger = Logger.getLogger(this.getClass().getName());

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.xinleju.erp.sm.cache.api.SyncFinaSaData#getFinaData(com.xinleju.erp
	 * .sm.extend.dto.FinaQueryParams)
	 */
	@Override
	public FlowResult<PageBean<FinaData>> getFinaData(FinaQueryParams param) {
		logger.info("---------------------------FlowResult<PageBean<FinaData>> getFinaData(FinaQueryParams param)---------------------------");
		// TODO Auto-generated method stub

		// TODO Auto-generated method stub
		String billDateBegin=param.getBillDateBegin();
		String billDateEnd=param.getBillDateEnd();
		String projectid=param.getProjectId();
		List<Long> projectidList=param.getProjectIdList();
		String billMan=param.getBillMan();
		String billType=param.getBillType();
		String corpid=param.getCorpId();
		
		String projectIds="";
		int len=0;
		for(Long billid:projectidList){
			projectIds+=billid+"";
			if(projectidList.size()-1!=len){
				projectIds+=",";
			}
			len++;
		}
		
		
		
		/**
		 * 1，收款单 2，退款单 3，换票单 4，转账单
		 */
		if ("1".equals(billType)) {
			billType = "收款单";
		} else if ("2".equals(billType)) {
			billType = "退款单";
		} else if ("3".equals(billType)) {
			billType = "换票单";
		} else if ("4".equals(billType)) {
			billType = "转账单";
		}

		String billbank = param.getBillBank();
		int pageNo = param.getCurrentPage();
		int pageSize = param.getPageSize();
		int startrow = 0;// 分页时，开始行和结束行
		// 取数据sql
		StringBuffer querySb = new StringBuffer();
		querySb.append("select trade.contractid ,sa.*  from"); // 相关销售单 0
		querySb.append("(SELECT                             ");
		querySb.append("         f.projectname,                 ");// 所属项目 1
		querySb.append("         r.vhousecode ,                 ");// 购买房间 2
		querySb.append("         f.vjkrname,                    ");// 交款人 3
		querySb.append("         f.vbilltype ,                  ");// 票据类型 4
		querySb.append("         f.dgatherdate,                  ");// 收款日期 5
		querySb.append("         f.vpjbook,                     ");// 票据本号 6
		querySb.append("         f.vpjno ,                      ");// 票据编号 7
		querySb.append("         f.vapproveid ,                 ");// 审核人 8
		querySb.append("         f.vsummary ,                   "); // 摘要 9
		querySb.append("         f.dapprovedate ,               ");// 审核日期 10
		querySb.append("         f.vinass ,                     ");// 入账银行 11
		querySb.append("         '3',							");// 引出日期 null 12
		querySb.append("         vbillstatus,                   ");// 单据状态 13
		querySb.append("         fb.fundtypename ,              ");// 款项类型 14
		querySb.append("         fb.fundname ,                  ");// 款项名称 15
		querySb.append("         fb.nmny ,                      ");// 金额 16
		querySb.append("         '人民币' ,                       ");// 币种 17
		querySb.append("         1 ,                            ");// 汇率 18
		querySb.append("         fb.nmny nmny2,                 ");// 本币金额 19
		querySb.append("         fb.vpaytype , 				    ");// 支付方式 20
		querySb.append("         fb.vsettletype , 				");// 结算方式 21
		querySb.append("         f.id,                			"); // 主键 22
		querySb.append("         f.tradeid,                 	"); // 23
		querySb.append("         f.kprname,           			"); // 开票人 24
		querySb.append("         f.dmakebilldate,                 ");// 开票日期 25
		querySb.append("         f.voucherid                 ");// 凭证 id 26
		querySb.append("FROM sa_fee_bill AS f,  sa_house_room   r,sa_fee_bill_b   AS fb 	 ");
		querySb.append("where   r.id= f.houseid   and  fb.billid = f.id and "+DbType.getType()+"IFNULL(f.dr,0)=0  and  "+DbType.getType()+"IFNULL(r.dr,0)=0  and  "+DbType.getType()+"IFNULL(fb.dr,0)=0   ");
		//querySb.append(" and f.vapprovestatus='已审核'																	   ");
		//querySb.append(" and (f.voucherstate='未生成'  or f.voucherstate is null or f.voucherstate='')					   ");
		//querySb.append(" and f.issendvoucher='是'	 								 							       ");
		SimpleDateFormat sd = new SimpleDateFormat("yyyy-MM-dd");
		if (billDateBegin != null) {
			querySb.append(" and f.dmakebilldate >='" + sd.format(billDateBegin) + "'		");
		}

		if (billDateEnd != null) {
			querySb.append(" and f.dmakebilldate <='" + sd.format(billDateEnd) + "'		");
		}
		
		if( !"".equals(projectIds)){
			querySb.append(" and f.projectid in("+projectIds+")      "); 
		}

		if (corpid != null && !"".equals(corpid)) {
			querySb.append(" and f.corpid='" + corpid + "'      ");
		}

		if (billMan != null && !"".equals(billMan)) {
			querySb.append(" and f.kprname ='" + billMan + "'        ");
		}

		if (billType != null && !"".equals(billType)) {
			querySb.append("  and f.vbilltype ='" + billType + "'		");
		}
		if (billbank != null && !"".equals(billbank)) {
			querySb.append(" and  f.vinass='" + billbank + "'		");
		}
		querySb.append("    order by f.dapprovedate  asc      ");
		if (pageNo != 0) {
			startrow = (pageNo - 1) * pageSize + 1;
			querySb.append("  limit " + startrow + "," + pageSize);
		}
		querySb.append(") sa				");
		querySb.append("LEFT JOIN sa_sale_trade  trade 				");
		querySb.append("ON sa.tradeid=trade.id  where  "+DbType.getType()+"IFNULL(trade.dr,0)=0 AND trade.vstatus='激活' and (sa.voucherid is null)");
		List resList = new ArrayList();
		DebugInfo info = new DebugInfo();
		LinkedList errinfolist = info.getErrDesc();// 存放错误堆栈信息
		LinkedList funcinfoList = info.getFuncDesc();
		funcinfoList.add("业务表单查询接口:getFinaData(FinaQueryParams params)");
		FlowResult<PageBean<FinaData>> res = new FlowResult<PageBean<FinaData>>();
		res.setSuccess(true);
		try {
			resList = getDao().findListBySQL(querySb.toString(), null);
		} catch (Exception e) {
			e.printStackTrace();
			errinfolist.add("getFinaData(FinaQueryParams param)查询报错,查询语句:" + querySb);
			StackTraceElement[] stackArray = e.getStackTrace();
			for (int i = 0; i < stackArray.length; i++) {
				StackTraceElement element = stackArray[i];
				errinfolist.add(element.toString());
			}
			res.setSuccess(false);
		}

		int total = 0;
		// 取数据总数sql、
		StringBuffer totalsql = new StringBuffer();

		totalsql.append("select count(*)  from");
		totalsql.append("(SELECT                          ");
		totalsql.append("    f.tradeid,f.voucherid        ");
		totalsql.append("FROM sa_fee_bill AS f,  sa_house_room   r,				");
		totalsql.append("sa_fee_bill_b   AS fb 				 ");
		totalsql.append("where  r.id= f.houseid  and    fb.billid = f.id and "+DbType.getType()+"IFNULL(f.dr,0)=0  and  "+DbType.getType()+"IFNULL(r.dr,0)=0  and  "+DbType.getType()+"IFNULL(fb.dr,0)=0				");
		// totalsql.append(" and f.vapprovestatus='已审核'																	");
		// totalsql.append(" and (f.voucherstate='未生成'  or f.voucherstate is null or f.voucherstate='')		");
		// totalsql.append(" and f.issendvoucher='是'	 								 							");
		if (billDateBegin != null) {
			totalsql.append(" and f.dmakebilldate >='" + sd.format(billDateBegin) + "'		");
		}

		if (billDateEnd != null) {
			totalsql.append(" and f.dmakebilldate <='" + sd.format(billDateEnd) + "'		");
		}

		if (projectid != null && !"".equals(projectid)) {
			totalsql.append(" and f.projectid='" + projectid + "'      ");
		}

		if (corpid != null && !"".equals(corpid)) {
			totalsql.append(" and f.corpid='" + corpid + "'      ");
		}

		if (billMan != null && !"".equals(billMan)) {
			totalsql.append(" and f.kprname ='" + billMan + "'        ");
		}

		if (billType != null && !"".equals(billType)) {
			totalsql.append("  and f.vbilltype ='" + billType + "'		");
		}
		if (billbank != null && !"".equals(billbank)) {
			totalsql.append(" and  f.vinass='" + billbank + "'		");
		}
		totalsql.append("    order by f.dapprovedate  asc      ");
		if (pageNo != 0) {
			startrow = (pageNo - 1) * pageSize + 1;
			totalsql.append("  limit " + startrow + "," + pageSize);
		}

		totalsql.append(") sa				");
		totalsql.append("LEFT JOIN sa_sale_trade  trade 				");
		totalsql.append("ON sa.tradeid=trade.id  where  "+DbType.getType()+"IFNULL(trade.dr,0)=0 AND trade.vstatus='激活' and (sa.voucherid is null)");
		try {
			total = getDao().getCountBySQL(totalsql.toString(), null);
		} catch (Exception e) {
			e.printStackTrace();
			errinfolist.add("getFinaData(FinaQueryParams param)查询总条数报错,查询语句:" + totalsql);
			StackTraceElement[] stackArray = e.getStackTrace();
			for (int i = 0; i < stackArray.length; i++) {
				StackTraceElement element = stackArray[i];
				errinfolist.add(element.toString());
			}
			res.setSuccess(false);
		}

		PageBean<FinaData> pagebean = new PageBean<FinaData>();
		pagebean.setLimit(pageSize);
		pagebean.setStart(startrow);
		pagebean.setTotal(total);
		List<FinaData> itemList = new ArrayList<FinaData>();
		try {
			String format = "yyyy-MM-dd";
			for (Object obj : resList) {
				FinaData data = new FinaData();
				Object[] arr = (Object[]) obj;
				data.put("saleBill", arr[0]);// 相关销售单
				data.put("project", arr[1]);// 所属项目
				data.put("buyRoom", arr[2]);// 购买房间
				data.put("payMan", arr[3]);// 交款人
				data.put("billType", arr[4]);// 票据类型
				data.put("accountDate", getFormatDate(arr[5], format));// 收款日期
				data.put("billBookNumber", arr[6]);// 票据本号
				data.put("billNumber", arr[7]);// 票据编号
				data.put("auditor", arr[8]);// 审核人
				data.put("summary", arr[9]);// 摘要
				data.put("auditDate", getFormatDate(arr[10], format));// 审核日期
				data.put("accountBank", arr[11]);// 入账银行
				data.put("exportDate", new Date());// 引出日期 null
				data.put("billStatus", arr[13]);// 单据状态
				data.put("fundType", arr[14]);// 款项类型
				data.put("fundName", arr[15]);// 款项名称
				data.put("amount", Double.valueOf(arr[16].toString()));// 金额
				data.put("currency", arr[17]);// 币种
				data.put("exchangeRate", Double.valueOf(arr[18].toString()));// 汇率
				data.put("ramount", Double.valueOf(arr[19].toString()));// 本币金额
				data.put("payMode", arr[20]);// 支付方式
				data.put("settleMode", arr[21]);// 结算方式
				data.put("id", arr[22]);// 主键
				data.put("billMan", arr[24]);// 开票人
				data.put("billDate", getFormatDate(arr[25], format));// 开票日期
				itemList.add(data);
			}
		} catch (Exception e) {
			e.printStackTrace();
			errinfolist.add("getFinaData(FinaQueryParams param)遍历封装从数据库查询出的数据报错");
			StackTraceElement[] stackArray = e.getStackTrace();
			for (int i = 0; i < stackArray.length; i++) {
				StackTraceElement element = stackArray[i];
				errinfolist.add(element.toString());
			}
			res.setSuccess(false);
		}
		pagebean.setItems(itemList);
		res.setDebugInfo(info);
		res.setResult(pagebean);
		return res;
	}

	/***
	 * 将字符串转换成日期类型数据
	 * 
	 * @param obj
	 *            日期类型的数据的字符串形式
	 * @param format
	 *            要转成的格式
	 * @return
	 * @throws ParseException
	 */
	public Date getFormatDate(Object obj, String format) throws ParseException {
		SimpleDateFormat sdf = new SimpleDateFormat(format == null ? "yyyy-MM-dd HH:mm:ss" : format);
		Date date = null;
		if (obj != null && !"".equals(obj)) {
			date = sdf.parse(obj.toString());
		}
		return date;
	}

	/*
	 * (non-Javadoc) 入账银行，销售系统 返回数据,id,name,code Id:主键 Name: 银行名字 Code: 银行代码
	 * 
	 * @see
	 * com.xinleju.erp.sm.cache.api.SyncFinaSaData#getAccountBlank(com.xinleju
	 * .erp.sm.extend.dto.FinaQueryParams)
	 */
	@Override
	public FlowResult<PageBean<FinaData>> getAccountBlank(FinaQueryParams param) {
		// TODO Auto-generated method stub
		System.out.println("---------------------------FlowResult<PageBean<FinaData>> getAccountBlank(FinaQueryParams param)---------------------------");
		// TODO Auto-generated method stub
		String corPid = param.getCorpId();

		int pageNo = param.getCurrentPage();
		int pageSize = param.getPageSize();
		int startrow = 0;// 分页时，开始行和结束行
		// 取数据sql
		StringBuffer querySb = new StringBuffer();
		// select * from sa_house_room where ifnull(dr,0)=0 and projectid=项目id
		querySb.append("select id,vname,vcode from sa_base_doc  where "+DbType.getType()+"ifnull(dr,0)=0 and cdataltypecode = 'C03' ");
		if (corPid != null && !"".equals(corPid)) {
			querySb.append("  and corpid=" + Integer.parseInt(corPid));
		}

		if (pageNo != 0) {
			startrow = (pageNo - 1) * pageSize + 1;
			querySb.append("  limit " + startrow + "," + pageSize);
		}

		List resList = new ArrayList();

		DebugInfo info = new DebugInfo();
		LinkedList errinfolist = info.getErrDesc();// 存放错误堆栈信息
		LinkedList funcinfoList = info.getFuncDesc();
		funcinfoList.add("入账银行信息查询接口:public FlowResult<PageBean<FinaData>> getAccountBlank(FinaQueryParams param)");
		FlowResult<PageBean<FinaData>> res = new FlowResult<PageBean<FinaData>>();
		res.setSuccess(true);
		try {
			resList = this.getDao().findListBySQL(querySb.toString(), null);
		} catch (Exception e) {
			e.printStackTrace();
			errinfolist.add("getAccountBlank(FinaQueryParams param)查询报错,查询语句:" + querySb);
			StackTraceElement[] stackArray = e.getStackTrace();
			for (int i = 0; i < stackArray.length; i++) {
				StackTraceElement element = stackArray[i];
				errinfolist.add(element.toString());
			}
			res.setSuccess(false);
		}

		int total = 0;
		// 取数据总数sql、
		StringBuffer totalsql = new StringBuffer();
		totalsql.append("select count(*) from sa_base_doc  where "+DbType.getType()+"ifnull(dr,0)=0 and cdataltypecode = 'C03' and corpid=" + corPid);
		try {
			total = this.getDao().getCountBySQL(totalsql.toString(), null);
		} catch (Exception e) {
			e.printStackTrace();
			errinfolist.add("getAccountBlank(FinaQueryParams param)查询总条数报错,查询语句:" + totalsql);
			StackTraceElement[] stackArray = e.getStackTrace();
			for (int i = 0; i < stackArray.length; i++) {
				StackTraceElement element = stackArray[i];
				errinfolist.add(element.toString());
			}
			res.setSuccess(false);
		}

		PageBean<FinaData> pagebean = new PageBean<FinaData>();
		pagebean.setLimit(pageSize);
		pagebean.setStart(startrow);
		pagebean.setTotal(total);
		List<FinaData> itemList = new ArrayList<FinaData>();
		try {
			for (Object obj : resList) {
				FinaData data = new FinaData();
				Object[] arr = (Object[]) obj;
				data.put("id", arr[0]);//
				data.put("name", arr[1]);//
				data.put("code", arr[2]);//
				itemList.add(data);
			}
		} catch (Exception e) {
			e.printStackTrace();
			errinfolist.add("getAccountBlank(FinaQueryParams param)遍历封装从数据库查询出的数据报错");
			StackTraceElement[] stackArray = e.getStackTrace();
			for (int i = 0; i < stackArray.length; i++) {
				StackTraceElement element = stackArray[i];
				errinfolist.add(element.toString());
			}
			res.setSuccess(false);
		}
		pagebean.setItems(itemList);
		res.setDebugInfo(info);
		res.setResult(pagebean);
		return res;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.xinleju.erp.sm.cache.api.SyncFinaSaData#getFunName(com.xinleju.erp
	 * .sm.extend.dto.FinaQueryParams)
	 */
	@Override
	public FlowResult<PageBean<FinaData>> getFunName(FinaQueryParams param) {
		// TODO Auto-generated method stub
		System.out.println("---------------------------FlowResult<PageBean<FinaData>> getFunName(FinaQueryParams param)---------------------------");
		// TODO Auto-generated method stub

		int pageNo = param.getCurrentPage();
		int pageSize = param.getPageSize();
		int startrow = 0;// 分页时，开始行和结束行
		// 取数据sql
		StringBuffer querySb = new StringBuffer();
		// select * from sa_house_room where ifnull(dr,0)=0 and projectid=项目id
		querySb.append("select id,vname,vcode from sa_base_kxmc where "+DbType.getType()+"ifnull(dr,0)=0");
		if (pageNo != 0) {
			startrow = (pageNo - 1) * pageSize + 1;
			querySb.append("  limit " + startrow + "," + pageSize);
		}

		List resList = new ArrayList();

		DebugInfo info = new DebugInfo();
		LinkedList errinfolist = info.getErrDesc();// 存放错误堆栈信息
		LinkedList funcinfoList = info.getFuncDesc();
		funcinfoList.add("款项名称信息查询接口:public FlowResult<PageBean<FinaData>> getFunName(FinaQueryParams param)");
		FlowResult<PageBean<FinaData>> res = new FlowResult<PageBean<FinaData>>();
		res.setSuccess(true);
		try {
			resList = this.getDao().findListBySQL(querySb.toString(), null);
		} catch (Exception e) {
			e.printStackTrace();
			errinfolist.add("getFunName(FinaQueryParams param)查询报错,查询语句:" + querySb);
			StackTraceElement[] stackArray = e.getStackTrace();
			for (int i = 0; i < stackArray.length; i++) {
				StackTraceElement element = stackArray[i];
				errinfolist.add(element.toString());
			}
			res.setSuccess(false);
		}

		int total = 0;
		// 取数据总数sql、
		StringBuffer totalsql = new StringBuffer();
		totalsql.append("select  count(*) from sa_base_kxmc where "+DbType.getType()+"ifnull(dr,0)=0");
		try {
			total = this.getDao().getCountBySQL(totalsql.toString(), null);
		} catch (Exception e) {
			e.printStackTrace();
			errinfolist.add("getFunName(FinaQueryParams param)查询总条数报错,查询语句:" + totalsql);
			StackTraceElement[] stackArray = e.getStackTrace();
			for (int i = 0; i < stackArray.length; i++) {
				StackTraceElement element = stackArray[i];
				errinfolist.add(element.toString());
			}
			res.setSuccess(false);
		}

		PageBean<FinaData> pagebean = new PageBean<FinaData>();
		pagebean.setLimit(pageSize);
		pagebean.setStart(startrow);
		pagebean.setTotal(total);
		List<FinaData> itemList = new ArrayList<FinaData>();
		try {
			for (Object obj : resList) {
				FinaData data = new FinaData();
				Object[] arr = (Object[]) obj;
				data.put("id", arr[0]);//
				data.put("name", arr[1]);//
				data.put("code", arr[2]);//
				itemList.add(data);
			}
		} catch (Exception e) {
			e.printStackTrace();
			errinfolist.add("getFunName(FinaQueryParams param)遍历封装从数据库查询出的数据报错");
			StackTraceElement[] stackArray = e.getStackTrace();
			for (int i = 0; i < stackArray.length; i++) {
				StackTraceElement element = stackArray[i];
				errinfolist.add(element.toString());
			}
			res.setSuccess(false);
		}
		pagebean.setItems(itemList);
		res.setDebugInfo(info);
		res.setResult(pagebean);
		return res;
	}

	/*
	 * (non-Javadoc) 支付方式，销售系统 返回数据,id,name,code Id:主键 Name: 支付名字 Code: 支付代码
	 * 
	 * @see
	 * com.xinleju.erp.sm.cache.api.SyncFinaSaData#getPayType(com.xinleju.erp
	 * .sm.extend.dto.FinaQueryParams)
	 */
	@Override
	public FlowResult<PageBean<FinaData>> getPayType(FinaQueryParams param) {
		// TODO Auto-generated method stub
		System.out.println("---------------------------FlowResult<PageBean<FinaData>> getPayType(FinaQueryParams param)---------------------------");
		// TODO Auto-generated method stub
		String corPid = param.getCorpId();

		int pageNo = param.getCurrentPage();
		int pageSize = param.getPageSize();
		int startrow = 0;// 分页时，开始行和结束行
		// 取数据sql
		StringBuffer querySb = new StringBuffer();
		// select * from sa_house_room where ifnull(dr,0)=0 and projectid=项目id
		querySb.append("select id,vpayway,vdocumentnum from sa_base_doc  where "+DbType.getType()+"ifnull(dr,0)=0 and cdataltypecode = 'J01' ");
		if (corPid != null && !"".equals(corPid)) {
			querySb.append(" and  corpid=" + Integer.parseInt(corPid));
		}

		if (pageNo != 0) {
			startrow = (pageNo - 1) * pageSize + 1;
			querySb.append("  limit " + startrow + "," + pageSize);
		}

		List resList = new ArrayList();

		DebugInfo info = new DebugInfo();
		LinkedList errinfolist = info.getErrDesc();// 存放错误堆栈信息
		LinkedList funcinfoList = info.getFuncDesc();
		funcinfoList.add("支付方式信息查询接口:public FlowResult<PageBean<FinaData>> getPayType(FinaQueryParams param)");
		FlowResult<PageBean<FinaData>> res = new FlowResult<PageBean<FinaData>>();
		res.setSuccess(true);
		try {
			resList = this.getDao().findListBySQL(querySb.toString(), null);
		} catch (Exception e) {
			e.printStackTrace();
			errinfolist.add("getPayType(FinaQueryParams param)查询报错,查询语句:" + querySb);
			StackTraceElement[] stackArray = e.getStackTrace();
			for (int i = 0; i < stackArray.length; i++) {
				StackTraceElement element = stackArray[i];
				errinfolist.add(element.toString());
			}
			res.setSuccess(false);
		}

		int total = 0;
		// 取数据总数sql、
		StringBuffer totalsql = new StringBuffer();
		totalsql.append("select count(*) from sa_base_doc  where "+DbType.getType()+"ifnull(dr,0)=0 and cdataltypecode = 'J01' ");
		if (corPid != null && !"".equals(corPid)) {
			totalsql.append(" and  corpid=" + Integer.parseInt(corPid));
		}

		try {
			total = this.getDao().getCountBySQL(totalsql.toString(), null);
		} catch (Exception e) {
			e.printStackTrace();
			errinfolist.add("getPayType(FinaQueryParams param)查询总条数报错,查询语句:" + totalsql);
			StackTraceElement[] stackArray = e.getStackTrace();
			for (int i = 0; i < stackArray.length; i++) {
				StackTraceElement element = stackArray[i];
				errinfolist.add(element.toString());
			}
			res.setSuccess(false);
		}

		PageBean<FinaData> pagebean = new PageBean<FinaData>();
		pagebean.setLimit(pageSize);
		pagebean.setStart(startrow);
		pagebean.setTotal(total);
		List<FinaData> itemList = new ArrayList<FinaData>();
		try {
			for (Object obj : resList) {
				FinaData data = new FinaData();
				Object[] arr = (Object[]) obj;
				data.put("id", arr[0]);//
				data.put("name", arr[1]);//
				data.put("code", arr[2]);//
				itemList.add(data);
			}
		} catch (Exception e) {
			e.printStackTrace();
			errinfolist.add("getPayType(FinaQueryParams param)遍历封装从数据库查询出的数据报错");
			StackTraceElement[] stackArray = e.getStackTrace();
			for (int i = 0; i < stackArray.length; i++) {
				StackTraceElement element = stackArray[i];
				errinfolist.add(element.toString());
			}
			res.setSuccess(false);
		}
		pagebean.setItems(itemList);
		res.setDebugInfo(info);
		res.setResult(pagebean);
		return res;
	}

	/*
	 * (non-Javadoc) 房间信息，销售系统 返回数据,id,name,code,pid(所属项目id) Id:主键 Name:房间名字
	 * Code:房间代码
	 * 
	 * @see
	 * com.xinleju.erp.sm.cache.api.SyncFinaSaData#getRoomInfo(com.xinleju.erp
	 * .sm.extend.dto.FinaQueryParams)
	 */
	@Override
	public FlowResult<PageBean<FinaData>> getRoomInfo(FinaQueryParams param) {
		// TODO Auto-generated method stub
		System.out.println("---------------------------FlowResult<PageBean<FinaData>> getRoomInfo(FinaQueryParams param)---------------------------");
		// TODO Auto-generated method stub
		String projectid = param.getProjectId();

		int pageNo = param.getCurrentPage();
		int pageSize = param.getPageSize();
		int startrow = 0;// 分页时，开始行和结束行
		// 取数据sql
		StringBuffer querySb = new StringBuffer();
		// select * from sa_house_room where ifnull(dr,0)=0 and projectid=项目id
		querySb.append("select id,vhousename,vhousecode,rootprojectid from sa_house_room where "+DbType.getType()+"ifnull(dr,0)=0 ");
		if (projectid != null && !"".equals(projectid)) {
			querySb.append("and  projectid='" + projectid + "'");
		}

		if (pageNo != 0) {
			startrow = (pageNo - 1) * pageSize + 1;
			querySb.append("  limit " + startrow + "," + pageSize);
		}

		List resList = new ArrayList();

		DebugInfo info = new DebugInfo();
		LinkedList errinfolist = info.getErrDesc();// 存放错误堆栈信息
		LinkedList funcinfoList = info.getFuncDesc();
		funcinfoList.add("房间信息查询接口:public FlowResult<PageBean<FinaData>> getRoomInfo(FinaQueryParams param)");
		FlowResult<PageBean<FinaData>> res = new FlowResult<PageBean<FinaData>>();
		res.setSuccess(true);
		try {
			resList = this.getDao().findListBySQL(querySb.toString(), null);
		} catch (Exception e) {
			e.printStackTrace();
			errinfolist.add("getRoomInfo(FinaQueryParams param)查询报错,查询语句:" + querySb);
			StackTraceElement[] stackArray = e.getStackTrace();
			for (int i = 0; i < stackArray.length; i++) {
				StackTraceElement element = stackArray[i];
				errinfolist.add(element.toString());
			}
			res.setSuccess(false);
		}

		int total = 0;
		// 取数据总数sql、
		StringBuffer totalsql = new StringBuffer();
		totalsql.append("select count(*)  from sa_house_room where "+DbType.getType()+"ifnull(dr,0)=0 ");
		if (projectid != null && !"".equals(projectid)) {
			totalsql.append("and  projectid='" + projectid + "'");
		}
		try {
			total = this.getDao().getCountBySQL(totalsql.toString(), null);
		} catch (Exception e) {
			e.printStackTrace();
			errinfolist.add("getRoomInfo(FinaQueryParams param)查询总条数报错,查询语句:" + totalsql);
			StackTraceElement[] stackArray = e.getStackTrace();
			for (int i = 0; i < stackArray.length; i++) {
				StackTraceElement element = stackArray[i];
				errinfolist.add(element.toString());
			}
			res.setSuccess(false);
		}

		PageBean<FinaData> pagebean = new PageBean<FinaData>();
		pagebean.setLimit(pageSize);
		pagebean.setStart(startrow);
		pagebean.setTotal(total);
		List<FinaData> itemList = new ArrayList<FinaData>();
		try {
			for (Object obj : resList) {
				FinaData data = new FinaData();
				Object[] arr = (Object[]) obj;
				data.put("id", arr[0]);//
				data.put("name", arr[1]);//
				data.put("code", arr[2]);//
				data.put("pid", arr[3]);//
				itemList.add(data);
			}
		} catch (Exception e) {
			e.printStackTrace();
			errinfolist.add("getRoomInfo(FinaQueryParams param)遍历封装从数据库查询出的数据报错");
			StackTraceElement[] stackArray = e.getStackTrace();
			for (int i = 0; i < stackArray.length; i++) {
				StackTraceElement element = stackArray[i];
				errinfolist.add(element.toString());
			}
			res.setSuccess(false);
		}
		pagebean.setItems(itemList);
		res.setDebugInfo(info);
		res.setResult(pagebean);
		return res;
	}

}
