package com.xinleju.erp.finance.action;

import java.util.ArrayList;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONArray;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.opensymphony.xwork2.ModelDriven;
import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.base.utils.JsonUtils;
import com.xinleju.erp.finance.models.FiAccountCaption;
import com.xinleju.erp.finance.models.FiAccountSet;
import com.xinleju.erp.finance.models.FiAssDetailMapping;
import com.xinleju.erp.finance.models.FiAssMapping;
import com.xinleju.erp.finance.service.FiAccountCaptionService;
import com.xinleju.erp.finance.service.FiAccountSetService;
import com.xinleju.erp.finance.service.FiAssMappingService;
import com.xinleju.erp.finance.service.SyncFinaDataService;
import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.flow.flowutils.bean.PageBean;
import com.xinleju.erp.flow.utils.LoginInfoUtils;
import com.xinleju.erp.frame.dto.FiAccountSubjectDTO;
import com.xinleju.erp.frame.dto.JsonTreeTableTemplete;
import com.xinleju.erp.frame.models.extender.FiAccountSubjectComboTreeExtender;
import com.xinleju.erp.frame.models.extender.FiAccountSubjectExtender;
import com.xinleju.erp.frame.utils.CommonUtil;
import com.xinleju.erp.sm.cache.api.SyncFinaSaData;
import com.xinleju.erp.sm.extend.dto.FinaData;
import com.xinleju.erp.sm.extend.dto.FinaQueryParams;

/**
 * 会计科目类别
 * 
 * @author walden
 * 
 */
public class FiAccountCaptionAction extends BaseAction implements ModelDriven<FiAccountCaption> {
	@Autowired
	private FiAccountCaptionService fiAccountCaptionService;
	@Autowired
	private SyncFinaDataService syncFinaDataService;
	@Autowired
	private FiAccountSetService fiAccountSetService;
	private FiAccountCaption fiAccountCaption = new FiAccountCaption();
	@Autowired
	private FiAssMappingService fiAssMappingService;

	/**
	 * 加载会计科目的treeGrid的json数据
	 */
	public void loadTreeGrid() {
		Long accountSetId = getParameterLong("accountSetId");
		String accountSetCode = request.getParameter("accountSetCode");
		Long sysId = getParameterLong("sysId");
		String status = "1";
		List<FiAccountSubjectDTO> accountCaptionList = null;
		if (StringUtils.isNotBlank(accountSetCode))
			accountCaptionList = fiAccountCaptionService.getAccountSubjectDTOList(status,accountSetId);
		else
			accountCaptionList = new ArrayList<FiAccountSubjectDTO>();
		JsonTreeTableTemplete jttt = new JsonTreeTableTemplete("id", "pid", FiAccountSubjectDTO.class, FiAccountSubjectExtender.class);
		JSONArray jsonTree = CommonUtil.transTree(accountCaptionList, jttt);
		renderJson(jsonTree.toString());
	}

	public void loadComboTree() {
		Long accountSetId = getParameterLong("accountSetId");
		String accountSetCode = request.getParameter("accountSetCode");
		Long sysId = getParameterLong("sysId");
//		System.out.println("accountSetCode====="+accountSetCode);
		if(StringUtils.isBlank(accountSetCode)){
			accountSetCode = "";
		}
		String status = "1";
		List<FiAccountSubjectDTO> accountCaptionList = null;
		if (StringUtils.isNotBlank(accountSetCode))
			accountCaptionList = fiAccountCaptionService.getAccountSubjectDTOList(status,accountSetId);
		else
			accountCaptionList = new ArrayList<FiAccountSubjectDTO>();
		JsonTreeTableTemplete jttt = new JsonTreeTableTemplete("id", "pid", FiAccountSubjectDTO.class, FiAccountSubjectComboTreeExtender.class);
		JSONArray jsonTree = CommonUtil.transTree(accountCaptionList, jttt);
//		System.out.println("loadComboTree====="+jsonTree.toString());
		renderJson(jsonTree.toString());
	}

	/**
	 * 保存或者更新会计科目
	 */
	public void saveOrUpdate() {
		Map<String, Object> result = new HashMap<String, Object>();
		if (fiAccountCaption.getId() != null) {
			fiAccountCaption.setEditDate(new Date());
			fiAccountCaption.setStatus(1);
			fiAccountCaption.setEditUserId(LoginInfoUtils.getLoginInfoUserDtoId(request));
		} else {
			fiAccountCaption.setCreateDate(new Date());
			fiAccountCaption.setStatus(1);
			fiAccountCaption.setCreateUserId(LoginInfoUtils.getLoginInfoUserDtoId(request));
		}

		try {
			/*String assId = fiAccountCaption.getAssName();
			String assName = "";
			if(StringUtils.isNotBlank(assId)){
				String[] assNamesArray = assId.split(",");
				for(int i=0;i<assNamesArray.length;i++){
					FiAssMapping fm = fiAssMappingService.getFiAssMappingById(Long.parseLong(assNamesArray[i].trim()));
					assName += fm.getAssName() + ","; 
				}
				assName = assName.substring(0, assName.lastIndexOf(","));
				fiAccountCaption.setAssName(assName);
			}*/
			
			fiAccountCaptionService.saveOrUpdate(fiAccountCaption);
			result.put("success", true);
			result.put("msg", "操作成功");
			renderHtml(JsonUtils.toJSONString(result));
		} catch (Exception e) {
			result.put("success", false);
			result.put("msg", e.getMessage());
			renderHtml(JsonUtils.toJSONString(result));
		}
	}

	public void delete() {
		Map<String, Object> result = new HashMap<String, Object>();
		try {
			fiAccountCaptionService.delete(fiAccountCaption);
			result.put("success", true);
			renderHtml(JsonUtils.toJSONString(result));
		} catch (Exception e) {
			result.put("success", false);
			result.put("msg", e.getMessage());
			renderHtml(JsonUtils.toJSONString(result));
		}
	}

	public void loadBizDatamx() {
		//SyncFinaSaData syncFinaSaData = syncFinaDataService.getSyncFinaSaData();
		Map<String, Object> result = new HashMap<String, Object>();
		String bizDataName = getParameter("name");
		Long accountSetId = getParameterLong("accountSetId");
		FiAccountSet fiAccountSet = fiAccountSetService.getFiAccountSetById(accountSetId);
		FlowResult<PageBean<FinaData>> fr = null;
		FinaQueryParams params = new FinaQueryParams();
		if ("公司".equals(bizDataName)) {
			fr = syncFinaDataService.getCompany(params);
		} else if ("项目分期".equals(bizDataName)) {
			params = new FinaQueryParams();
			params.setCorpId(fiAccountSet.getCompanyId().toString());
			fr = syncFinaDataService.getProjectPeriod(params);
		} else if ("产品类型".equals(bizDataName)) {
			fr = syncFinaDataService.getProductType(params);
		} else if ("房间信息".equals(bizDataName)) {
			List<Long> projectIdList = fiAccountSetService.getProjectIdListByAccountSetId(accountSetId);
			params.setProjectIdList(projectIdList);
			//fr = syncFinaSaData.getRoomInfo(params);

		} else if ("入账银行".equals(bizDataName)) {
			//fr = syncFinaSaData.getAccountBlank(params);

		} else if ("款项名称".equals(bizDataName)) {
			//fr = syncFinaSaData.getFunName(params);
		} else if ("支付方式".equals(bizDataName)) {
			//fr = syncFinaSaData.getPayType(params);
		} else {
			//System.out.println("没有定义" + bizDataName);
		}
		if (fr != null && fr.isSuccess()) {
			result.put("success", true);
			renderHtml(JsonUtils.toJSONString(fr.getResult().getItems()));
		} else {
			result.put("success", false);
			result.put("msg", "没有查到数据");
			renderHtml(JsonUtils.toJSONString(result));
		}
	}

	public FiAccountCaption getModel() {
		return fiAccountCaption;
	}

	public FiAccountCaptionService getFiAccountCaptionService() {
		return fiAccountCaptionService;
	}

	public void setFiAccountCaptionService(FiAccountCaptionService fiAccountCaptionService) {
		this.fiAccountCaptionService = fiAccountCaptionService;
	}

	public FiAccountCaption getFiAccountCaption() {
		return fiAccountCaption;
	}

	public void setFiAccountCaption(FiAccountCaption fiAccountCaption) {
		this.fiAccountCaption = fiAccountCaption;
	}

}
