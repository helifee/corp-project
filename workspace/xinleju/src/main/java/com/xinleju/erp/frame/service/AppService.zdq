package com.xinleju.erp.frame.service;


import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Restrictions;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.xinleju.erp.base.app.bean.Page;
import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.flow.service.api.extend.dto.AppDTO;
import com.xinleju.erp.flow.service.api.utils.AppUtils;
import com.xinleju.erp.flow.service.extend.dto.ModuleDto;
import com.xinleju.erp.frame.models.App;


@Service
@Transactional
public class AppService extends BaseService{
	/**
	 * 
	 * 通过id获取APP
	 * @author zhoupeng
	 * @param appId
	 * @return
	 */
    public App getAppById(Long appId){
        return getDao().getById(App.class, null != appId ? appId : 0L);
    }
    /**
     * 
     * 保存AppDTO
     * @author zhoupeng
     * @param appTDO
     */
    public void save(AppDTO appTDO){
        App app = this.getAppById(null != appTDO && null != appTDO.getId() ? appTDO.getId() : 0L);
        app = AppUtils.buildApp(appTDO, app);
        getDao().saveOrUpdate(app);
    }
    /**
     * 
     * 通过id获取AppDTO
     * @author zhoupeng
     * @param appId
     * @return
     */
    public AppDTO getAppDTO(Long appId){
        App app = this.getAppById(appId);
        return AppUtils.buildAppDTO(app);
    }
    /**
     * 
     * 禁用/启用
     * @author zhoupeng
     * @param id
     * @param status
     */
    public void changStatus(Long id, Integer status) {
        if (null != id && id > 0 && null != status) {
            getDao().execute("update App set status = ? where id= ?", status, id);
        }
    }
    
    
    
    public List<App> getAppList(ModuleDto moduleDto) {
    	 DetachedCriteria dc = DetachedCriteria.forClass(App.class);
    	if (null != moduleDto) {
            if (StringUtils.isNotEmpty(moduleDto.getKeyword())) {
                dc.add(Restrictions.like("name", moduleDto.getKeyword(),MatchMode.ANYWHERE));
            }
            if ("1".equals(moduleDto.getStatus())) {
                dc.add(Restrictions.eq("status", 1));
            } else if ("0".equals(moduleDto.getStatus())) {
                dc.add(Restrictions.or(new Criterion[] {Restrictions.eq("status", 0), Restrictions.isNull("status")}));
            }
        }
    	List<App> list = getDao().findByCriteria(dc);
        return list;
    }
    
    /**
     * 
     * AppDTOpage页
     *〈详细描述〉
     * @author zhoupeng
     * 
     * 
     * @param moduleDto
     * @param start
     * @param limit
     * @return
     */
    public Page getAppDTOPage(ModuleDto moduleDto, Integer start, Integer limit){
        DetachedCriteria dc = DetachedCriteria.forClass(App.class);
        if (null != moduleDto) {
            if (StringUtils.isNotEmpty(moduleDto.getKeyword())) {
                dc.add(Restrictions.like("name", moduleDto.getKeyword(),MatchMode.ANYWHERE));
            }
            if ("1".equals(moduleDto.getStatus())) {
                dc.add(Restrictions.eq("status", 1));
            } else if ("0".equals(moduleDto.getStatus())) {
                dc.add(Restrictions.or(new Criterion[] {Restrictions.eq("status", 0), Restrictions.isNull("status")}));
            }
        }
        Page page = getDao().findPage(dc, start, limit);
        return new Page(start, limit, page.getTotal(), AppUtils.buildAppDTOList(page.getItems()));
    }
}
