package com.xinleju.erp.frame.service;


import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.xinleju.erp.base.app.bean.Page;
import com.xinleju.erp.base.app.config.App;
import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.frame.dao.PartyEntityDao;
import com.xinleju.erp.frame.dao.PartyStructDao;
import com.xinleju.erp.frame.dao.RoleDao;
import com.xinleju.erp.frame.models.PartyEntity;
import com.xinleju.erp.frame.models.PartyType;
import com.xinleju.erp.frame.models.Role;


@Service
@Transactional
public class RoleService extends BaseService implements Serializable {
	private static final long serialVersionUID = 324589274837L;

	@Autowired
	private RoleDao roleDao;

	@Autowired
	private PartyEntityService partyEntityService;

	/**
	 * 查看角色树的根节点
	 * 
	 * @author jdq
	 * @param code
	 * @param id
	 * @return
	 */
	public List<Role> findRootRole() {
		return roleDao.findRootRole();
	}

	/**
	 * 获取角色树节点下的所有子节点
	 * 
	 * @author jdq
	 * @param code
	 * @param id
	 * @return
	 */
	public List<Role> findChildRoleAll(Long parentId) {
		return roleDao.findChildRoleAll(parentId);
	}

	/**
	 * 根据ids获取角色 〈详细描述〉
	 * 
	 * @author zhengxj
	 * @param ids
	 * @return
	 */
	public List<Role> getRoleListByIds(String ids) {
		if (StringUtils.isNotBlank(ids)) {
			return roleDao.getRoleListByIds(ids);
		}
		return null;
	}
	/**
	 * 更新状态
	 * @param roleId
	 * @param status
	 * @return
	 */
	public boolean changeStatus(Long roleId, Integer status){
		return roleDao.changeStatus(roleId, status);
	}
	/**
	 * 查看角色编码是否重复
	 * @author jdq
	 * @param code
	 * @param id
	 * @return
	 */
	public Long getRoleCountWithId(String code, Long id){
		if (StringUtils.isNotBlank(code) && null != id){
			return roleDao.getRoleCountWithId(code, id);
		}
		return 0L;
	}
	/**
	 * 查看角色编码是否重复
	 * @author jdq
	 * @param code
	 * @return
	 */
	public Long getRoleCount(String code){
		if (StringUtils.isNotBlank(code)){
			return roleDao.getRoleCount(code);
		}
		return 0L;
	}
	/**
	 * 通过prefix得到namefix  指示路径
	 * @author jdq
	 * @param role
	 * @return
	 */
	public String getNamefix(Role role){
	    PartyEntity pe = null;
	    if (null != role){
	        pe = this.findEntityByRefId(role.getId(), PartyType.TYPE_ROLE);
	    }
	    if (null != pe){
	        return partyEntityService.prefix2fullname(pe.getPrefix());
	    } else {
	        return "";
	    }
	}
	public PartyEntity findEntityByRefId(Long refId, String type){
		if (null != refId && refId > 0 && StringUtils.isNotBlank(type)){
			return partyEntityService.findEntityByRefId(refId, type.trim());
		}
		return new PartyEntity();
	}

	 public List<Role> findRoleByTypeCodeAndSort (String typeCode,Integer sort, Long parentId, Long id){
	    	return roleDao.findRoleByTypeCodeAndSort(typeCode, sort, parentId, id);
    }
	 
	 public List<Role> findRoleBySort (Integer sort, Long parentId, Long id){
	    	return roleDao.findRoleBySort(sort, parentId, id);
	 }
	 
	public void nodeDrop(Long currentRoleId,Long targetRoleId){
		Role correntRole = getDao().getById(Role.class, currentRoleId);
		if(Long.valueOf(targetRoleId)==0){
			correntRole.setParentId(null);
		}else{
			correntRole.setParentId(targetRoleId);
		}
		getDao().saveOrUpdate(correntRole);
	}
	/**
	 * 查找组织架构节点下的角色
	 * @author jdq
	 * @param parentEntityId
	 * @param name
	 * @param pageable
	 * @return
	 */
	public Page findPageRoleByParentEntityId( Long parentEntityId,String name, int start, int limit){
		List<Long> roleIdList = App.getBean(PartyStructService.class).findChildIdsByParentEntityId(parentEntityId,PartyType.TYPE_ROLE);
		return this.getRolePageByIds(roleIdList, name, start, limit);
	}
	
	public Page findPageRoleByParentEntityId( Long parentEntityId,String name, int start, int limit,Boolean includeAllSubOrgns){
		List<Long> roleIdList = App.getBean(PartyStructService.class).findChildIdsByParentEntityId(parentEntityId,PartyType.TYPE_ROLE,includeAllSubOrgns);
		return this.getRolePageByIds(roleIdList, name, start, limit);
	}
	public Page getRolePageByIds(List<Long> roleIdList,String name, int start, int limit){
		DetachedCriteria c = DetachedCriteria.forClass(Role.class);
		if(StringUtils.isNotBlank(name)){
			c.add(Restrictions.like("name", "%"+name+"%") );
		}
		//c.add(Restrictions.or(Restrictions.eq("status", Role.STATUS_ENABLE),Restrictions.isNull("status")));
		if(roleIdList==null||roleIdList.size()==0){
			c.add(Restrictions.eq("id", -1L));
		}else{
			c.add(Restrictions.in("id", roleIdList));
		}
		c.addOrder(Order.asc("id"));
		Page page = getDao().findPage(c, start, limit);
		return page;
	}
	public String getUpPath(Role role){
		String result = "";
		if(null != role && null != role.getParentId() && role.getParentRole()!=null){
			result += getUpPath(role.getParentRole());
			result +=  (StringUtils.isNotBlank(result) ? "/" : "") + role.getParentRole().getName();
		}
		return result;
	}
	/**
	 * 查找组织架构节点下的角色
	 * @author jdq
	 * @param parentEntityId
	 * @param name
	 * @param pageable
	 * @return
	 */
	public List<Role> findRoleByParentEntityId( Long parentEntityId,String name ){
		List<Long> roleIdList = App.getBean(PartyStructService.class).findChildIdsByParentEntityId(parentEntityId,PartyType.TYPE_ROLE);
		return this.getRoleListByIds(roleIdList, name);
	}
	public List<Role> getRoleListByIds(List<Long> roleIdList,String name){
		DetachedCriteria c = DetachedCriteria.forClass(Role.class);
		if(StringUtils.isNotBlank(name)){
			c.add( Restrictions.like("name", "%"+name+"%") );
		}
		if(roleIdList==null||roleIdList.size()==0){
			c.add(Restrictions.eq("id", -1L));
		}else{
			c.add(Restrictions.in("id", roleIdList));
		}
		c.addOrder(Order.asc("id"));
		return getDao().findByCriteria(c);
	}
	/**
	 * 查找部门下的所有岗位（ 非标准角色）
	 * @author jdq
	 * @param deptId
	 * @return
	 */
	public List<Role> entityRoleList(Long refId,String type){
		PartyEntity pe = partyEntityService.findEntityByRefId(refId, type);
		if(pe==null){
			return new ArrayList<Role>();
		}
		return this.findRoleByParentEntityId(pe.getId(),null);
	}
	/**
	 * 查找上级部门下的所有岗位（ 非标准角色）
	 * @author jdq
	 * @param deptId
	 * @return
	 */
	public List<Role> upEntityRoleList(Long refId,String type){
		PartyEntity pe = partyEntityService.findEntityByRefId(refId, type);
		if(pe==null){
			return new ArrayList<Role>();
		}
		//  上级节点
		PartyEntity parentPe = App.getBean(PartyEntityDao.class).getParentEntity(pe.getId());
		if(parentPe==null){
			return new ArrayList<Role>();
		}
		return findRoleByParentEntityId(parentPe.getId(),null);
	}
	/**
	 * 查找用户的所有角色  findParentRefParentIdsByChildRefId
	 * @author jdq
	 * @param userId
	 * @return
	 */
	public List<Role> findRolesByUserRefId(Long userId) {
		List<Long> roleIds = App.getBean(PartyStructDao.class).findParentRefIdsByChildRefId(userId,PartyType.TYPE_ROLE);
		return getRoleListByIds(roleIds,null);
	}
	
	/**
	 * 查找用户的所有标准角色  
	 * @param userId
	 * @return
	 */
	public List<Role> findRolesRefParentIdsByUserRefId(Long userId) {
		List<Long> roleIds = App.getBean(PartyStructDao.class).findParentRefParentIdsByChildRefId(userId,PartyType.TYPE_ROLE);
		return getRoleListByIds(roleIds,null);
	}
	
	
	public List<String> getPostUpContiansType(Long roleId,String type){
		return roleDao.getPostUpContiansType(roleId,type);
	}
}
