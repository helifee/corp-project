package com.xinleju.erp.flow.service.impl;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.flow.dao.impl.AcDAO;
import com.xinleju.erp.flow.dao.impl.AiDAO;
import com.xinleju.erp.flow.dao.impl.TrDAO;
import com.xinleju.erp.flow.dao.impl.WiDAO;
import com.xinleju.erp.flow.flowutils.bean.Gvs;
import com.xinleju.erp.flow.models.Ac;
import com.xinleju.erp.flow.models.Ai;
import com.xinleju.erp.flow.models.Tr;
import com.xinleju.erp.flow.service.IConstantVar;
import com.xinleju.erp.flow.service.IJoinTypeService;

/**
 * 
 * 
 * <p>
 * </p>
 * <p>
 * </p>
 * 
 * @author 孙朝辉
 * @version $Id: XorJoinTypeService.java 740 2014-06-30 03:38:39Z sunchaohui $
 * @since
 * 
 */
@Service
public class XorJoinTypeService extends BaseService implements IJoinTypeService {

    /**
     * 活动实例DAO
     */
    @Autowired
    private AiDAO aiDAO;

    /**
     * 流转DAO
     */
    @Autowired
    private TrDAO trDAO;

    /**
     * 环节定义DAO
     */
    @Autowired
    private AcDAO acDAO;

    /**
     * 工作DAO
     */
    @Autowired
    private WiDAO wiDAO;

    @Override
    public boolean canStart(Gvs gvs, Map<String, Object> tvs) {

        Ai currentAi = (Ai) tvs.get(IConstantVar.TVS_AI);

        List<Tr> fromATrs = trDAO.getListByTrIds(currentAi.getAc().getFlowCode(), currentAi.getAc().getFlowVersion(), currentAi.getAc().getFrom_tr_a());
        List<Ac> fromAAcs = acDAO.getFromAList(currentAi.getAc());

        // XOR:前面有一个节点完成,则可以汇聚
        List<Ai> fromAList = aiDAO.getFrom1ListDeepSearchAutoAi(currentAi, fromAAcs, fromATrs, gvs, Ai.STATUS_COMPLETE);

        boolean canStart = fromAList.size() > 0;
        if (canStart) {
            overdueAi(gvs, tvs);
        }
        return canStart;
    }

    @Override
    public void overdueAi(Gvs gvs, Map<String, Object> transientVars) {
        Ai ai = (Ai) transientVars.get(IConstantVar.TVS_AI);
        List<Ai> fromAList = aiDAO.getFromAList(ai, Ai.STATUS_RUNNING);
        for (Ai fromAi : fromAList) {
            wiDAO.overdueByAi(fromAi, true);
        }
    }
}
