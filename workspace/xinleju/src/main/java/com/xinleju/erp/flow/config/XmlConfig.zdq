package com.xinleju.erp.flow.config;

import java.util.List;

import javax.annotation.PostConstruct;
import javax.xml.bind.JAXBContext;

import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Component;

import com.xinleju.erp.flow.bean.OutCodeConfig;
import com.xinleju.erp.flow.bean.ParticipantClass;

/**
 * 
 * 
 * <p>
 * </p>
 * <p>
 * </p>
 * 
 * @author 孙朝辉
 * @version $Id: XmlConfig.java 2046 2014-12-04 10:37:32Z sunchaohui $
 * @since
 * 
 */
@Component
public class XmlConfig implements ApplicationContextAware {

    /**
     * outCode.xml分析后数据载体
     */
    private OutCodeConfig occ;

    /**
     * Spring.ApplicationContext
     */
    private ApplicationContext app;

    /**
     * 获取外部编码
     * 
     * @param outCode
     *            外部编码
     * 
     * @return OutCode
     */
//    public OutCode getOutCode(String outCode) {
//        if (occ.getOutcodes() != null) {
//            for (OutCode oc : occ.getOutcodes()) {
//                if (oc.getOutCode().equals(outCode)) {
//                    return oc;
//                }
//            }
//        }
//        return null;
//    }

    /**
     * 返回下级外部编码
     * 
     * @param parent_code
     *            父亲编码
     * 
     * @return 所有孩子外部编码集合
     */
//    public List<OutCode> getSubCodes(String parent_code) {
//        List<OutCode> returnList = new ArrayList<OutCode>();
//        for (OutCode oc : occ.getOutcodes()) {
//            String ocCode = oc.getOutCode();
//
//            // JS_01_01
//            if (ocCode.startsWith(parent_code + "_")) {
//                String sufix = ocCode.substring((parent_code + "_").length());
//                if (sufix.indexOf("_") == -1) {
//                    returnList.add(oc);
//                }
//            }
//        }
//
//        return returnList;
//    }

    /**
     * 获取外部操作
     * 
     * @param opCode
     *            操作编码
     * @return 操作
     */
//    public Operator getOperator(String opCode) {
//        if (occ.getOperators() != null) {
//            for (Operator op : occ.getOperators()) {
//                if (op.getOpCode().equals(opCode)) {
//                    return op;
//                }
//            }
//        }
//        return null;
//    }

    /**
     * 
     * 实例化后执行这段代码 分析outCode.xml数据到该bean
     * 
     */
    @PostConstruct
    public void init() {

        processOutCode();
    }

    /**
     * 
     * 实例化后执行这段代码 分析outCode.xml数据到该bean
     * 
     */
    private void processOutCode() {
    	
        Resource outCodeXML = null;
        try {
            outCodeXML = app.getResource("classpath:outCode.xml");
            if (outCodeXML != null) {
                JAXBContext context = JAXBContext.newInstance(OutCodeConfig.class);

                occ = (OutCodeConfig) context.createUnmarshaller().unmarshal(outCodeXML.getInputStream());

            }
        } catch (Exception e) {
            outCodeXML = null;
        }
        
    }

    /**
     * 
     * 注入 Spring ApplicationContext, 分析Spring Bean
     * 
     * @param applicationContext
     *            Spring
     */
    @Override
    public void setApplicationContext(ApplicationContext applicationContext) {
        this.app = applicationContext;
    }

    /**
     * 返回对应的"自定义参与人实现类"名称
     * 
     * @param beanClass
     *            自定义参与人实现类
     * 
     * @return 名称
     */
    public String getPcLabel(String beanClass) {
        List<ParticipantClass> l = occ.getPcs();
        for (ParticipantClass pc : l) {
            if (pc.getBeanClass().equals(beanClass)) {
                return pc.getLabel();
            }
        }

        return "";
    }

    public OutCodeConfig getOcc() {
        return occ;
    }

    public void setOcc(OutCodeConfig occ) {
        this.occ = occ;
    }

    public ApplicationContext getApp() {
        return app;
    }

    public void setApp(ApplicationContext app) {
        this.app = app;
    }

}
