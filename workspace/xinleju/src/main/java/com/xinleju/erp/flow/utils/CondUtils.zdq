package com.xinleju.erp.flow.utils;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.wltea.expression.ExpressionEvaluator;
import org.wltea.expression.datameta.Variable;

import com.xinleju.erp.base.app.config.App;
import com.xinleju.erp.flow.exception.ParseCondErrException;
import com.xinleju.erp.flow.flowutils.bean.GvBean;
import com.xinleju.erp.flow.flowutils.bean.Gvs;
import com.xinleju.erp.flow.service.CondService;

/**
 * 
 * 
 * <p>
 * </p>
 * <p>
 * </p>
 * 
 * @author 孙朝辉
 * @version $Id: CondUtils.java 1148 2014-08-05 06:49:12Z sunchaohui $
 * @since
 * 
 */
public class CondUtils {

    /**
     * 
     * <p>
     * 条件表达式分析
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param expression
     *            表达式
     * @param gvs
     *            变量
     * @return 是否成立
     */
    public static boolean parseCond(String expression, Gvs gvs) {

        try {
            if (StringUtils.isNotEmpty(expression)) {

                
               return  App.getBean(CondService.class).parse(expression, gvs);
//                List<Variable> variables = new ArrayList<Variable>();
//                for (GvBean gv : gvs.asList()) {
//                    if (gv.getVal() instanceof BigDecimal) {
//                        variables.add(Variable.createVariable(gv.getCode(), ((BigDecimal) gv.getVal()).doubleValue()));
//                    } else {
//                        variables.add(Variable.createVariable(gv.getCode(), gv.getVal()));
//                    }
//
//                }
//                // 执行表达式
//                Object result = ExpressionEvaluator.evaluate(expression, variables);
//                return "true".equalsIgnoreCase(String.valueOf(result));
            }

            return true;
        } catch (Exception e) {
            throw new ParseCondErrException(e.getMessage());
        }

    }

    /**
     * 
     * <p>
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param dateType
     *            条件类型
     * @param val
     *            值
     * @return 符合条件分析器格式的字符串
     */
    public static String asTypeString(String dateType, String val) {

        if (CateDataType.STRING.getTypeCode().equals(dateType)) {
            val = "\"" + val + "\"";
        } else if (CateDataType.INT.getTypeCode().equals(dateType)) {
            val = val.trim();
        } else if (CateDataType.NUMBER.getTypeCode().equals(dateType)) {
            val = val.trim();
        }
        return val;
    }

    public static void main(String[] a) {

        // String x = "x>10";
        //
        // List<Variable> variables = new ArrayList<Variable>();
        // variables.add(Variable.createVariable("y", new Long("1")));
        // // 执行表达式
        // Object result = parseCond(x,Gvs.create().add("y", 1, ""));
        //
        // System.out.println(result);

        String test = "Y_JSBCB > \"N\" && Y_JJFSCB == \"N\" || Y_ZBXZCB < \"N\" && T_QYKZJE >= 5000000";

        List<String> xxx = parseNames(test);

        for (String i : xxx) {
            if (StringUtils.isNotEmpty(i.trim())) {
                System.out.println(i.trim());
            }

        }
    }

    public static List<String> parseNames(String cond) {

        List<String> returnLst = new ArrayList<String>();

        if (StringUtils.isNotEmpty(cond)) {

            cond = cond.replaceAll("\\(", "");
            cond = cond.replaceAll("\\)", "");

            List<String> condItems = split(cond, "&&", "\\|\\|", "并且", "或者");

            LinkedList<String> condArrList = new LinkedList<String>();
            for (String condItem : condItems) {
                List<String> condArr = split(condItem, "==", ">=", "<=", "!=", "<", ">", "小于等于", "大于等于", "不等于", "等于", "小于", "大于");
                condArrList.addAll(condArr);
            }

            for (int i = 0; i < condArrList.size(); i += 2) {
                String name = condArrList.get(i).trim();
                returnLst.add(name);
            }
        }

        return returnLst;
    }

    private static List<String> split(String src, String... splits) {

        List<String> reurnList = new ArrayList<String>();
        List<String> workList = new ArrayList<String>();
        workList.add(src);
        for (String split : splits) {

            List<String> tempList = new ArrayList<String>();

            for (String item : workList) {

                String[] items = item.split(split);
                for (String x : items) {
                    tempList.add(x);
                }
            }
            workList = tempList;
        }

        return workList;

    }

    /**
     * <p>
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param gvs
     * @param $missing$
     * @return
     */
    public static boolean ifAllCondParamNameInGvs(Gvs gvs, String cond) {
        List<String> requiredNames = CondUtils.parseNames(cond);
        List<String> names = gvs == null ? new ArrayList<String>() : gvs.names();

        if (requiredNames.size() > 0) {
            for (String pn : requiredNames) {
                if (!names.contains(pn)) {
                    return false;
                }
            }
        }

        return true;
    }
}
