package com.xinleju.erp.finance.service.sa;

/**   
 *
 * @version V1.0   
 */
import java.util.LinkedList;
import java.util.List;

import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.flow.flowutils.bean.DebugInfo;
import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.sm.cache.api.RewriteFinaSaResult;
import com.xinleju.erp.sm.extend.dto.FinaResult;

/**
 * @Title: 房产销售系统
 * @ClassName: RewriteFinaResultImp
 * @Description: 移动案场接口 实现类
 * @author wangwuji
 * @date 2015-10-14 上午10:56:50
 */

public class RewriteFinaResultImp extends BaseService implements RewriteFinaSaResult {

	@Override
	public FlowResult<String> rewriteFinaResult(FinaResult finaResult) {
		System.out.println("---------------------------FlowResult<String> rewriteFinaResult(FinaResult finaResult)---------------------------");

		// TODO Auto-generated method stub
		String voucherWord = isNull(finaResult.getVoucherWord());// 凭证字
		String voucherNumber = isNull(finaResult.getVoucherNumber());// 凭证号
		String voucherMaker = isNull(finaResult.getVoucherMaker());// 制单人
		String voucherDate = isNull(finaResult.getVoucherDate());// 凭证日期
		String billType = isNull(finaResult.getBillType());// 单据类型
		List<String> billIds = finaResult.getBillIds();// 单据id
		Long voucherid = finaResult.getVoucherid();

		/**
		 * 1"收款单",2"结转单",3"换票单","4放款单",5"退款单
		 */
		if (billType.equals("1")) {
			billType = FeeBusinessConst.FEE_BILLTYPE[0];
		} else if (billType.equals("2")) {
			billType = FeeBusinessConst.FEE_BILLTYPE[1];
		} else if (billType.equals("3")) {
			billType = FeeBusinessConst.FEE_BILLTYPE[2];
		} else if (billType.equals("4")) {
			billType = FeeBusinessConst.FEE_BILLTYPE[3];
		} else if (billType.equals("5")) {
			billType = FeeBusinessConst.FEE_BILLTYPE[4];
		}

		FlowResult<String> res = new FlowResult<String>();
		DebugInfo debugInfo = new DebugInfo();
		LinkedList errinfolist = debugInfo.getErrDesc();// 存放错误堆栈信息
		LinkedList funcinfoList = debugInfo.getFuncDesc();
		funcinfoList.add("回写接口对象，生成凭证成功之后，需要将结果回写给业务系统:public FlowResult<PageBean<FinaData>> getFinaData(FinaQueryParams params)");
		StringBuffer addSql = addSql = new StringBuffer();
		addSql.append("update sa_fee_bill     ");
		addSql.append("set voucherword='" + voucherWord + "'     ");
		addSql.append(" ,vouchernum='" + voucherNumber + "' ");
		addSql.append(" ,vbilltype='" + billType + "'      ");
		addSql.append(" ,voucherid=" + voucherid + "       ");
		addSql.append(" where id in (");
		try {
			String ids = "";
			int len = 0;
			for (String billid : billIds) {

				ids += billid;
				if (billIds.size() - 1 != len) {
					ids += ",";
				}
				len++;
			}
			addSql.append(ids + ")");
			int i = getDao().executeSQL(addSql.toString(), null);

			res.setSuccess(true);
		} catch (Exception e) {
			e.printStackTrace();
			errinfolist.add("rewriteFinaResult(FinaResult finaResult)更新报错,更新语句:" + addSql);
			StackTraceElement[] stackArray = e.getStackTrace();
			for (int i = 0; i < stackArray.length; i++) {
				StackTraceElement element = stackArray[i];
				errinfolist.add(element.toString());
			}
			res.setSuccess(false);
			debugInfo.setErrDesc(errinfolist);
		}

		res.setDebugInfo(debugInfo);
		return res;
	}

	public String isNull(String str) {
		if (str == null) {
			return "";
		}
		return str;
	}

	private static String getStackMsg(Throwable e) {
		StringBuffer sb = new StringBuffer();
		StackTraceElement[] stackArray = e.getStackTrace();
		for (int i = 0; i < stackArray.length; i++) {
			StackTraceElement element = stackArray[i];
			sb.append(element.toString() + "\n");
		}
		return sb.toString();
	}

}
