package com.xinleju.erp.frame.dao;


import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.xinleju.erp.flow.dao.impl.BaseDAO;
import com.xinleju.erp.form.utils.DbType;
import com.xinleju.erp.frame.models.PartyType;
import com.xinleju.erp.frame.models.Role;


@Repository
public class RoleDao extends BaseDAO {
	@Autowired
	private JdbcTemplate jt;

    /**
     * 查看角色树的根节点
     * 
     * @author jdq
     * @param code
     * @param id
     * @return
     */
    public List<Role> findRootRole() {
        return this.findRootRole(true);
    }
    /**
     * 查看角色树的根节点
     * 
     * @author jdq
     * @param code
     * @param id
     * @return
     */
    public List<Role> findRootRole(Boolean includeDisabled) {
        return getDao().findByHQL(Role.class,
            "from Role where parentId is null and type='standard'" + (includeDisabled ? " order by status asc, px asc " : " and (status is null or status = " + Role.STATUS_ENABLE + ") order by status asc, px asc"));
    }
    /**
     * 查看角色树
     * 
     * @author jdq
     * @param code
     * @param id
     * @return
     */
    public List<Role> findAllStandardRoles() {
        return getDao().findByHQL(Role.class,
            "from Role where type='standard' and "+DbType.getType()+"ifnull(status,0 ) = 0 ");
    }

    /**
     * 获取角色树节点下的所有子节点
     * 
     * @author jdq
     * @param code
     * @param id
     * @return
     */
    public List<Role> findChildRoleAll(Long parentId) {
        return this.findChildRoleAll(parentId, true);
    }
    /**
     * 获取角色树节点下的所有子节点
     * 
     * @author jdq
     * @param code
     * @param id
     * @return
     */
    public List<Role> findChildRoleAll(Long parentId, Boolean includeDisabled) {
        return getDao().findByHQL(Role.class,
            "from Role where parentId = ? and type='standard'" + (includeDisabled ? " order by status asc, px asc " : " and (status is null or status = " + Role.STATUS_ENABLE + ") order by status asc, px asc"),
            new Object[] {parentId});
    }
    /**
     * 根据ids获取角色 〈详细描述〉
     * 
     * @author zhengxj
     * @param ids
     * @return
     */
    public List<Role> getRoleListByIds(String ids) {
        return getDao().findByHQL(Role.class, "from Role where id in (" + ids + ")");
    }
    
    
    /**
     * 获取岗位或者角色
     * @param id
     * @return
     */
    public Role getRoleById(String id) {
        return getDao().getById(Role.class, id);
    }
    /**
     * 根据parentid获取角色 〈详细描述〉
     * 
     * @author luocheng
     * @param parentid
     * @return
     */
    public List<Role> getRoleByParentIds(String parentId) {
        return getDao().findByHQL(Role.class, "from Role where parentId in (" + parentId + ")");
    }
    
    /**
     * 根据ids获取角色 〈详细描述〉
     * 
     * @author zhengxj
     * @param ids
     * @return
     */
    public Role getRoleListById(Long id) {
        return getDao().findFirstByHQL(Role.class, "from Role where id = " + id );
    }
    
    /**
     * 查看所有角色
     * 
     * @author zhangxiang
     * @return
     */
    public List<Role> findAllRole() {
        return getDao().findByHQL(Role.class,
            "from Role ");
    }
    
    public List<Role> findRoleByTypeCodeAndSort (String typeCode,Integer sort, Long parentId, Long id){
    	String sql = "from Role r where r.typeCode = ? and r.sort = ? and r.parentId = ? and r.type='standard'";
    	Object[] params = new Object[]{typeCode, sort, parentId};
    	if (id != null) {
    		sql += " and id <> ? ";
    		params = new Object[]{typeCode, sort, parentId, id};
    	}
    	
    	return getDao().findByHQL(Role.class,  sql, params);
    }
    /**
     * 
     * 通过排序查找角色
     *〈详细描述〉
     * @author zhoupeng
     * @param sort 角色排序
     * @param parentId 父角色id
     * @param id
     * @return
     */
    public List<Role> findRoleBySort(Integer sort, Long parentId, Long id){
        String sql;
        Object[] params;
       if (null == parentId) {
           sql = "from Role r where r.sort = ? and r.parentId  is null and r.type='standard'";
           params = new Object[]{sort};
       } else {
           sql = "from Role r where r.sort = ? and r.parentId  = ? and r.type='standard'";
           if (null != id) {//编辑
               sql += " and id <> ? ";
               params = new Object[]{sort, parentId, id};
           } else {
               params = new Object[]{sort, parentId};
           }
           
       }
    	
    	return getDao().findByHQL(Role.class,  sql, params);
    }
    
    /**
     * 查看角色编码是否重复
     * @author jdq
     * @param code
     * @param id
     * @return
     */
    public Long getRoleCountWithId(String code, Long id){
    	return getDao().findLong("select count(id) from Role r where r.code = ? and r.id != ? and r.type='standard'", new Object[]{code, id});
    }
    /**
     * 查看角色编码是否重复
     * @author jdq
     * @param code
     * @param id
     * @return
     */
    public Long getRoleCount(String code){
    	return getDao().findLong("select count(id) from Role r where r.code = ? and r.type='standard'", new Object[]{code});
    }
    /**
     * 范围内查找标准角色对应的角色
     * @param standRoleId
     * @param refId
     * @param petCode
     * @return
     */
    public Role getRoleByStandRoleInScope(Long standRoleId,Long refId,String petCode) {
    	StringBuffer hqlBuffer = new StringBuffer();
    	hqlBuffer.append("from Role r where r.id in(")
    			 .append("	select r.refId from PartyEntity r where r.partyType.type = ?")
    			 .append("  and r.refParentId = ?")
    			 .append("  and exists(")
    			 .append("        select 'X' from PartyEntity c where c.partyType.type = ?")
    			 .append("        and c.refId = ?")
    			 .append("        and r.prefix like "+DbType.getType()+"concat(c.prefix,'%')")
    			 .append(	")")
    		 	 .append(")");
    	List<Role> roleList = getDao().findByHQL(Role.class, hqlBuffer.toString(), PartyType.TYPE_ROLE,standRoleId,petCode,refId);
    	return (roleList == null ||  roleList.isEmpty()) ? null : roleList.get(0);
    }
	
	/**
	 * 
	 * 岗位的上级类型
	 * @param roleId
	 * @param type
	 * @return
	 */
	public List<String> getPostUpContiansType(Long roleId,String type){
		String sql="select tt.type from sm_party_entity y ,sm_party_entity yy,sm_party_type t,sm_party_type tt  where  y.party_type_id=t.id and t.type='role' and yy.party_type_id=tt.id  and tt.type=? and y.ref_id= ?  "
				+" and "+DbType.getType()+"locate(yy.prefix,y.prefix)>0";
		List<String> result=jt.queryForList(sql, String.class, new Object[]{type,roleId});
		return result;
	}
    
    
    
    
    /**
     * 更新状态
     * @param roleId
     * @param status
     * @return
     */
    public boolean changeStatus(Long roleId, Integer status){
    	boolean changeStatusSuccess = false;
    	if (null != roleId && roleId > 0 && null != status){
    		getDao().execute("update Role set status = ? where id= ?", status, roleId);
    	}
    	return changeStatusSuccess;
    }
}
