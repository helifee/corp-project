package com.xinleju.erp.flowengine.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import com.alibaba.dubbo.common.utils.StringUtils;
import com.xinleju.erp.base.app.bean.Page;
import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.flow.service.extend.dto.TodoFiDto;
import com.xinleju.erp.flowengine.service.FlowInstanceManageCalculateFiService;
import com.xinleju.erp.flowengine.utils.TaskTypeStatus;

/**
 * 新的流程查询功能
 * 
 * @author Yuap
 *
 */
@Service(value = "flowInstanceManageCalculateFiService")
public class FlowInstanceManageCalculateFiServiceImpl extends BaseService
		implements FlowInstanceManageCalculateFiService {
	/**
	 * JdbcTemplate
	 */
	@Autowired
	private JdbcTemplate jdbcTemplate;

	/**
	 * 根据查询条件查询数据
	 */
	@Override
	public Page getTodoFiPageBySql(TodoFiDto todoFiDto,
			String startUserIdLimitSql, Long userId, int start, int limit) {
		// 查询列
		StringBuffer sqlString = new StringBuffer();
		sqlString.append("DISTINCT f1.guid AS id,  "); // 0：流程id
		sqlString.append("f1.fi_Code AS fiCode,"); // 1：流程编码
		sqlString.append("f1.fi_Code AS fiCode1,"); // 2：流程编码-编号
		sqlString.append("f1.fi_Name AS fiName,"); // 3：流程名称
		sqlString.append(" f1.biz_Id AS flId, "); // 4：流程模板id
		sqlString.append("f1.start_User_Name AS startUserName,"); // 5：流程发起人名称
		sqlString.append("f1.create_time as startTime, "); // 6：流程启动时间
		sqlString.append("f1.status AS status,"); // 7：流程状态
		// 当前处理人
		sqlString.append("'' as curUserNames,"); // 8
			
		sqlString.append("f1.company_name as companayName,"); // 9 流程所在公司名称
		sqlString.append("f2.fi_id as fiId , "); // 10 关联表ID
		
		sqlString.append(" t.name as tname"); // 11 关联表ID
		// 查找条件
		StringBuffer selSql = new StringBuffer();
		selSql.append("select selSql FROM flow_instance f1 left join flow_instance_step_work_task f2  ");
		// 流程状态
		if (todoFiDto!=null && todoFiDto.getFiStatus()!=null&&!"".equals(todoFiDto.getFiStatus()) && Long.valueOf(todoFiDto.getFiStatus())!=TaskTypeStatus.STATUS_RUNNING) {
		  selSql.append(" on (f1.guid=f2.fi_id and f2.status=2 ) ");
		}else{
			 selSql.append(" on (f1.guid=f2.fi_id and f2.status=1 ) ");
		}
		 selSql.append(" left join tf_fl l on f1.fl_id = l.id  left join tf_ct t on l.ct_id=t.id ");
		
		selSql.append(" where 1=1 ");
		if (todoFiDto != null) {
			// 标题、编号过滤条件
			if (!StringUtils.isBlank(todoFiDto.getFiNameOrCode())) {
				selSql.append(" and (f1.fi_Name like '%"
						+ todoFiDto.getFiNameOrCode().trim()
						+ "%' or f1.fi_Code like '%"
						+ todoFiDto.getFiNameOrCode().trim()+ "%')");
			}
			// 申请人过滤条件
			if (!StringUtils.isBlank(todoFiDto.getStartUserName())) {
				selSql.append(" and f1.start_User_Name like '%"
						+ todoFiDto.getStartUserName().trim() + "%'");
			}
			// 申请时间条件
			if (!StringUtils.isBlank(todoFiDto.getStartDate())) {
				selSql.append(" and f1.create_time >= '"
						+ todoFiDto.getStartDate().trim() + "'");
			}
			if (!StringUtils.isBlank(todoFiDto.getEndDate())) {
				selSql.append(" and f1.create_time <= '"
						+ todoFiDto.getStartDate().trim() + "'");
			}
			// 通过时间条件
			if (!StringUtils.isBlank(todoFiDto.getClEndDate())) {
				selSql.append(" and f1.complete_time >= '"
						+ todoFiDto.getClEndDate().trim() + "'");
			}
			if (!StringUtils.isBlank(todoFiDto.getClEndDate())) {
				selSql.append(" and f1.complete_time <= '"
						+ todoFiDto.getClEndDate().trim() + "'");
			}
			// 流程状态
			if (StringUtils.isInteger(todoFiDto.getFiStatus())) {
				selSql.append(" and f1.status=" + todoFiDto.getFiStatus());
			}
			// 流程类型
			/**
			if (todoFiDto.getCtId() != null && todoFiDto.getCtId() > 0) {
				selSql.append(" and f1.biz_Id=" + todoFiDto.getCtId());
			}
			**/
			// 组织机构
			if (todoFiDto.getDepIds() != null && todoFiDto.getDepIds() > 0) {
				selSql.append(" and f1.company_id=" + todoFiDto.getDepIds());
			}
			// 付款申请
			if (todoFiDto.getCtId() != null && todoFiDto.getCtId() > 0) {
				selSql.append(" and t.id=" + todoFiDto.getCtId());
			}
			// 当前处理人查询条件
			if (todoFiDto != null
					&& !StringUtils.isBlank(todoFiDto.getCurUserNames())) {
				selSql.append(" and f2.participant_user_name like '%"
						+ todoFiDto.getCurUserNames().trim() + "%'");
			}
		}
		
	
		String sqlStr = selSql.toString().replace("selSql",
				sqlString.toString());
	//	sqlStr += " GROUP BY f2.fi_id";
		
		sqlStr+=" order by f1.create_time  desc";
		
		
		String sqlCountStr = selSql.toString().replace("selSql",
				" count(DISTINCT(f2.fi_id)) ");
		Page page = getDao().findPageBySQL(sqlStr, sqlCountStr, null, start,
				limit);
		
		//分析对应的人员
		List<Object[]> items=page.getItems();
		List<Object[]> newItems=new ArrayList<Object[]>();
	    for(Object[] item:items){
	    	 Object[] objs=new Object[12];
	    	for(int i=0;i<item.length;i++){
	 		   if(i==8){
	 			   String sql="select kk.participant_user_name from flow_instance_step_work_task kk where kk.fi_id= '"+item[0]+"'  and kk.status=1";
	 			   List<String> list=jdbcTemplate.queryForList(sql, String.class);
	 			   StringBuilder sb=new StringBuilder();
	 			  for(String l:list){
	 				  sb.append(l+",");
	 			  }
	 			  if(sb.toString().endsWith(",")){
	 				  sb.delete(sb.toString().length()-1, sb.toString().length());
	 			  }
	 			 objs[i]=sb.toString();
	 		   }else{
	 			   objs[i]=item[i];
	 		   }
	 		  
	 		}
	    	newItems.add(objs);
	    }
	    page.setItems(newItems);
		return page;
	}
}
