package com.xinleju.erp.sm.cache.redis;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.ListOperations;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.stereotype.Service;

import com.xinleju.erp.flow.service.api.extend.dto.CompanyDTO;
import com.xinleju.erp.flow.service.api.extend.dto.DeptDTO;
import com.xinleju.erp.flow.service.api.extend.dto.FuncDTO;
import com.xinleju.erp.flow.service.api.extend.dto.OpDTO;
import com.xinleju.erp.flow.service.api.extend.dto.PartyEntityDTO;
import com.xinleju.erp.flow.service.api.extend.dto.PartyStructDTO;
import com.xinleju.erp.flow.service.api.extend.dto.UserDTO;
import com.xinleju.erp.flow.service.api.extend.dto.RoleDTO;
import com.xinleju.erp.flow.service.api.utils.CompanyUtils;
import com.xinleju.erp.flow.service.api.utils.DeptUtils;
import com.xinleju.erp.flow.service.api.utils.FuncUtils;
import com.xinleju.erp.flow.service.api.utils.PartyEntityUtils;
import com.xinleju.erp.flow.service.api.utils.PartyStructUtils;
import com.xinleju.erp.flow.service.api.utils.RoleUtils;
import com.xinleju.erp.flow.service.api.utils.UserUtils;
import com.xinleju.erp.frame.models.Company;
import com.xinleju.erp.frame.models.Dept;
import com.xinleju.erp.frame.models.FuncButton;
import com.xinleju.erp.frame.models.FuncModule;
import com.xinleju.erp.frame.models.PartyEntity;
import com.xinleju.erp.frame.models.PartyStruct;
import com.xinleju.erp.frame.models.User;
import com.xinleju.erp.frame.models.Role;

@Service
public class CacheManagerService {
	
	@Resource(name="redisTemplate")
    private ListOperations<String, PartyEntityDTO> partyEntityListOper; 
    
    @Resource(name="redisTemplate")
    private ValueOperations<String, PartyEntityDTO> partyEntityValueOper;
    
    @Resource(name="redisTemplate")
    private ListOperations<String, PartyStructDTO> partyStructListOper; 
    
    @Resource(name="redisTemplate")
    private ValueOperations<String, PartyStructDTO> partyStructValueOper;     
    
    @Resource(name="redisTemplate")
    private ListOperations<String, FuncDTO> funcListOper; 

    @Resource(name="redisTemplate")
    private ListOperations<String, OpDTO> opListOper; 

    @Resource(name="redisTemplate")
    private ValueOperations<String, UserDTO> userValueOper;  
    
    @Resource(name="redisTemplate")
    private ValueOperations<String, RoleDTO> roleValueOper; 
    @Resource(name="redisTemplate")
    private ListOperations<String, RoleDTO> roleListOper;
    
    @Resource(name="redisTemplate")
    private ValueOperations<String, CompanyDTO> companyValueOper; 
    
    @Resource(name="redisTemplate")
    private ListOperations<String, CompanyDTO> companyListOper; 
    
    @Resource(name="redisTemplate")
    private ValueOperations<String, DeptDTO> deptValueOper; 
	    
	
	
	public boolean saveUser(User user){
		UserDTO userDTO = UserUtils.buildUserDto(user);
		userValueOper.set("user:user_login_name:"+userDTO.getLoginName(), userDTO); 
		userValueOper.set("user:user_id:"+userDTO.getId(), userDTO); 
		return true;
	}
	
	public boolean saveRole(Role role){
		RoleDTO roleDTO = RoleUtils.buildRoleDto(role);
		roleValueOper.set("role:role_id:"+roleDTO.getId(), roleDTO); 
		return true;
	}
	
	public boolean saveCompany(Company company){
		CompanyDTO companyDTO = CompanyUtils.buildCompanyDto(company);
		companyValueOper.set("company:company_id:"+companyDTO.getId(), companyDTO);
		return true;
	}
	
	public boolean saveDept(Dept dept){
		DeptDTO deptDTO = DeptUtils.buildDeptDto(dept);
		deptValueOper.set("dept:dept_id:"+deptDTO.getId(), deptDTO); 
		return true;		
	}
	
	public boolean savePartyEntity(PartyEntity partyEntity){
		PartyEntityDTO partyEntityDTO = PartyEntityUtils.buildPartyEntityDTO(partyEntity);
		partyEntityValueOper.set("entity:entity_id:entity_type_id:"+partyEntityDTO.getId()+":"+partyEntityDTO.getPartyTypeId(), partyEntityDTO);
		partyEntityValueOper.set("entity:entity_id:"+partyEntityDTO.getId(), partyEntityDTO);
		return true;
	}
	
	
	
}
