package com.xinleju.erp.flow.service.impl;

import java.util.Map;

import org.springframework.stereotype.Service;

import com.xinleju.erp.flow.flowutils.bean.Gvs;
import com.xinleju.erp.flow.models.Ai;
import com.xinleju.erp.flow.models.Wi;
import com.xinleju.erp.flow.models.Wp;
import com.xinleju.erp.flow.service.IConstantVar;
import com.xinleju.erp.flow.utils.FlowUtils;

/**
 * 
 * 
 * <p>
 * </p>
 * <p>
 * </p>
 * 
 * @author 孙朝辉
 * @version $Id: AndFinishTypeService.java 2250 2014-12-28 11:43:36Z zhongjun $
 * @since
 * 
 */
@Service
public class AndFinishTypeService extends AbstractFinishTypeService {

    @Override
    public boolean canFinish(Gvs gvs, Map<String, Object> transientVars) {
        Ai ai = (Ai) transientVars.get(IConstantVar.TVS_AI);
        Wp wp = super.getWp(ai, transientVars);
        boolean isWpSuspend = FlowUtils.isWpSuspend(wp);
        if (isWpSuspend){
            return false;
        }
        boolean isSubModel = FlowUtils.isSubMode(wp);
        //没有 启动子模式的wp
        if (!isSubModel){
            // 该Wp运行的工作
            long runningCount = getDao().findLong(
                    "select count(id) from Wi where (status=? or status = ?) and tstamp = ? and isEffectFlow = 1 and wpId = ?", 
                    Wi.STATUS_RUNNING, Wi.STATUS_CREATED, wp.getTstamp(), wp.getId());
            boolean result = 
                    //非串行，所有工作都结束了，
                    !FlowUtils.isChuanxing(wp) && runningCount == 0
                    //Wi是串行，存在未结束(Running + Created)的工作
                    || FlowUtils.isChuanxing(wp) && runningCount == 0 && getDao().findLong(
                        "select count(id) from Wi where status = ? and tstamp = ? and isEffectFlow = 1 and wpId = ?", 
                        Wi.STATUS_CREATED, wp.getTstamp(), wp.getId()) == 0;
            if (result) {
                result = !isSubWpsRunning(wp.getId());
            }
            return result;
        } else {
            boolean result = !isSubModeWpsHaveRunning(wp.getId(), wp.getTstamp());
            return result;
        }
    }

    @Override
    public void overdueWi(Gvs gvs, Map<String, Object> transientVar) {

    }

}
