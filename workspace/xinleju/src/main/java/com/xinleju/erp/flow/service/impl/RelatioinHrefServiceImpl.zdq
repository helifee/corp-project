package com.xinleju.erp.flow.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.flow.models.RelationHref;
import com.xinleju.erp.flow.service.IRelationHrefService;
import com.xinleju.erp.flow.service.api.extend.dto.UserDTO;
import com.xinleju.erp.flow.utils.FlowConstant;
/**
 * 
 * 版权：(C) 版权所有 2000-2014 上海天好电子商务有限公司苏州分公司
 * 相关链接service
 * @author   jun
 * @version  $Id: SpRelatioinHrefServiceImpl.java 53934 2014-12-10 07:46:10Z zhongjun $
 * @since
 * @see
 */
@Service
@Transactional
public class RelatioinHrefServiceImpl extends BaseService implements IRelationHrefService{

    /**
     * 
     */
    public void saveRelationHref(RelationHref relationHref, String ownerId, UserDTO opUser){
        relationHref = this.getRelationHref(relationHref, ownerId);
        if (null != relationHref && null != opUser){
            relationHref.setOpUserId(opUser.getId());
            relationHref.setOpUserLoginName(opUser.getLoginName());
            relationHref.setOpUserName(opUser.getRealName());
            getDao().saveOrUpdate(relationHref);
        }
    }
    
    /**
     * 
     */
    @Override
    public void saveRelationHref(List<RelationHref> relationHrefList, String ownerId, UserDTO opUser) {
        getDao().executeSQL("update tf_relation_href set is_disabled = ? where owner_id = ?", FlowConstant.INT_TRUE, ownerId);
        if (null != relationHrefList && relationHrefList.size() > 0){
            for (int i = 0; i < relationHrefList.size(); i++ ) {
                this.saveRelationHref(relationHrefList.get(i), ownerId, opUser);
            }
        }
    }
    /**
     * 
     */
    @Override
    public RelationHref getRelationHref(RelationHref relationHref, String ownerId) {
        RelationHref relationHrefTemp = null;
        if (null != relationHref && StringUtils.isNotBlank(relationHref.getHrefName()) && StringUtils.isNotBlank(ownerId)){
            relationHrefTemp = getDao().findFirstByHQL(RelationHref.class, "from RelationHref where ownerId = ? and hrefName = ?", ownerId, relationHref.getHrefName());
            if (null == relationHrefTemp){
                relationHrefTemp = new RelationHref();
                relationHrefTemp.setCreateDate(new Date());
            }
            relationHrefTemp.setHrefName(relationHref.getHrefName());
            relationHrefTemp.setHrefNameShort(relationHref.getHrefNameShort());
            relationHrefTemp.setHrefStr(relationHref.getHrefStr());
            relationHrefTemp.setIsDisabled(FlowConstant.INT_FALSE);
            relationHrefTemp.setSort(relationHref.getSort());
            relationHrefTemp.setOwnerId(ownerId);
        }
        return relationHrefTemp;
    }

    /**
     * 
     * @param ownerId
     * @param includeDisabled
     * @return
     */
    @Override
    public List<RelationHref> getRelationHrefList(String ownerId, boolean includeDisabled) {
        List<RelationHref> relationHrefList = new ArrayList<RelationHref>();
        if (StringUtils.isNotBlank(ownerId)){
            if (includeDisabled){
                relationHrefList = getDao().findByHQL(RelationHref.class, "from RelationHref where ownerId = ?", ownerId);
            } else {
                relationHrefList = getDao().findByHQL(RelationHref.class, "from RelationHref where ownerId = ? and (isDisabled is null or isDisabled != ?)", ownerId, FlowConstant.INT_TRUE);
            }
        }
        return relationHrefList;
    }
}
