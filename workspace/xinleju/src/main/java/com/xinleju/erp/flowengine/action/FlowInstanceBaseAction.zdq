package com.xinleju.erp.flowengine.action;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.struts2.ServletActionContext;

import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import com.xinleju.erp.base.app.bean.Page;
import com.xinleju.erp.base.app.config.App;
import com.xinleju.erp.base.app.config.Constant;
import com.xinleju.erp.base.app.service.ICommonService;
import com.xinleju.erp.base.utils.ActionHelper;
import com.xinleju.erp.base.utils.JsonUtils;
import com.xinleju.erp.base.utils.WebUtils;

public class FlowInstanceBaseAction extends ActionSupport {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	protected int start;
	protected int limit = Constant.PAGE_SIZE;
	protected Page page;

	protected HttpSession session = (HttpSession) ServletActionContext
			.getRequest().getSession();
	protected HttpServletRequest request = (HttpServletRequest) ActionContext
			.getContext().get(ServletActionContext.HTTP_REQUEST);
	protected HttpServletResponse response = (HttpServletResponse) ActionContext
			.getContext().get(ServletActionContext.HTTP_RESPONSE);

	protected void render(String text, String contentType) {
		try {
			WebUtils.setNoCacheHeader(ServletActionContext.getResponse());
			HttpServletResponse response = ServletActionContext.getResponse();
			response.setContentType(contentType);
			response.getWriter().write(text);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	protected void renderJson(Object object) {
		String s = JsonUtils.toJSONString(object);
		renderJson(s);
	}

	protected void renderJson(List<?> list, String entityKey) {
		List<Map<String, Object>> jsonList = JsonUtils.toMapList(list,
				entityKey);
		renderJson(jsonList);
	}

	/**
	 * 直接输出json字符串.
	 * 
	 * @param json
	 * @return
	 */
	protected void renderJson(String json) {
		render(json, "text/json;charset=UTF-8");
	}

	/**
	 * 直接输出JS字符串.
	 * 
	 * @param jsText
	 * @return
	 */
	protected void renderJs(String jsText) {
		render(jsText, "application/x-javascript;charset=utf-8");
	}

	/**
	 * 直接输出字符串.
	 */
	protected void renderText(String text) {
		WebUtils.setNoCacheHeader(ServletActionContext.getResponse());
		render(text, "text/plain;charset=UTF-8");
	}

	/**
	 * 直接输出HTML.
	 */
	protected void renderHtml(String html) {
		render(html, "text/html;charset=UTF-8");
	}

	protected void renderCss(String css) {
		render(css, "text/css");
	}

	/**
	 * 直接输出XML.
	 */
	protected void renderXML(String xml) {

		render(xml, "text/xml;charset=UTF-8");
	}
	
	public void redirect(String path,
			String... args) {

		String query = ActionHelper
				.buildArgsQueryString(request,
						args);
		if (StringUtils.isNotEmpty(query)) {
			path += (path.indexOf("?") == -1 ? "?"
					: "&")
					+ query;
		}
		try {
			response.sendRedirect(path);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public ICommonService getCommonService() {
		return App.getBean(ICommonService.class,
				"commonService");
	}

	
	protected String getParameter(String paramName) {
		return WebUtils.getParameter(request,
				paramName, true);
	}
	
	protected Integer getParameterInt(
			String paramName) {
		return WebUtils.getParameterInt(request,
				paramName);
	}
	
	protected Long getParameterLong(
			String paramName) {
		return WebUtils.getParameterLong(request,
				paramName);
	}
	
	public int getStart() {
		return start;
	}

	public void setStart(int start) {
		this.start = start;
	}

	public int getLimit() {
		return limit;
	}

	public void setLimit(int limit) {
		this.limit = limit;
	}

	public Page getPage() {
		return page;
	}

	public void setPage(Page page) {
		this.page = page;
	}
}
