package com.xinleju.erp.flow.service.api.utils;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang3.StringUtils;

import com.xinleju.erp.base.utils.DateUtils;
import com.xinleju.erp.base.utils.StringHelper;
import com.xinleju.erp.flow.flowutils.bean.AiBean;
import com.xinleju.erp.flow.flowutils.bean.AlBean;
import com.xinleju.erp.flow.flowutils.bean.BizDataDTO;
import com.xinleju.erp.flow.flowutils.bean.FiBean;
import com.xinleju.erp.flow.flowutils.bean.FiInfoBean;
import com.xinleju.erp.flow.flowutils.bean.FiStoreBean;
import com.xinleju.erp.flow.flowutils.bean.FlBean;
import com.xinleju.erp.flow.flowutils.bean.GvBean;
import com.xinleju.erp.flow.flowutils.bean.NameValuePair;
import com.xinleju.erp.flow.flowutils.bean.OpBean;
import com.xinleju.erp.flow.flowutils.bean.OpRelationInsBean;
import com.xinleju.erp.flow.flowutils.bean.ToDoButtonBean;
import com.xinleju.erp.flow.flowutils.bean.ToDoFiBean;
import com.xinleju.erp.flow.flowutils.bean.ToDoWorkBean;
import com.xinleju.erp.flow.flowutils.bean.ToDoWpBean;
import com.xinleju.erp.flow.flowutils.bean.UploadBean;
import com.xinleju.erp.flow.flowutils.bean.WiBean;
import com.xinleju.erp.flow.flowutils.bean.WpBean;
import com.xinleju.erp.flow.flowutils.utils.WsConstant;
import com.xinleju.erp.flow.frameapi.domain.User;
import com.xinleju.erp.flow.models.Ac;
import com.xinleju.erp.flow.models.Ai;
import com.xinleju.erp.flow.models.Al;
import com.xinleju.erp.flow.models.BizData;
import com.xinleju.erp.flow.models.Fi;
import com.xinleju.erp.flow.models.FiStore;
import com.xinleju.erp.flow.models.Fl;
import com.xinleju.erp.flow.models.Gv;
import com.xinleju.erp.flow.models.Op;
import com.xinleju.erp.flow.models.OpRelation;
import com.xinleju.erp.flow.models.OpRelationIns;
import com.xinleju.erp.flow.models.Upload;
import com.xinleju.erp.flow.models.Wi;
import com.xinleju.erp.flow.models.Wp;
import com.xinleju.erp.flow.service.impl.AndFinishTypeService;
import com.xinleju.erp.flow.utils.FlowUtils;
import com.xinleju.erp.flow.utils.GvUtils;
import com.xinleju.erp.flow.utils.ParticipantUtils;

/**
 * <p>
 * ApiUtils
 * </p>
 * <p>
 * </p>
 * 
 * @author 孙朝辉
 * @version $Id: ApiUtils.java 2340 2015-01-24 09:49:27Z zhongjun $
 * @since
 * @see
 */
public class ApiUtils {

	/**
	 * <p>
	 * 获取当前序列名
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param wp
	 *            Wp
	 * @return 名称
	 */
	public static String getWpName(Wp wp) {
		return wp.getDisplayName();
	}

	/**
	 * 
	 * <p>
	 * 获取工作名称
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param wi
	 *            当前工作
	 * @return 工作名
	 */
	public static String getWiName(Wi wi) {

		if (StringUtils.isNotEmpty(wi.getWiName())) {
			return wi.getWiName();
		} else {
			return getWpName(wi.getWp());
		}

	}

	/**
	 * <p>
	 * 返回Wp结束控制标识
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param wp
	 *            当前Wp
	 * @return 结束控制标识
	 */
	public static String getWpFinishCtrl(Wp wp) {
		return AndFinishTypeService.class.getName().equals(wp.getFinishCtrl()) ? "and" : "xor";
	}

	/**
	 * <p>
	 * 构造WpBean
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param wp
	 *            Wp
	 * @param fetchWis
	 *            是否组装wi
	 * @param includeChildWps
	 *            是否组装子wp
	 * @param includeParentWi
	 *            是否组装父pwi
	 * @return WpBean
	 */
	public static WpBean buildWpBean(Wp wp, boolean fetchWis, boolean includeChildWps, boolean includeParentWi){
		WpBean wb = new WpBean();
		if (null != wp){
			wb.setPwiId(wp.getPwiId());
			wb.setPwpId(wp.getPwpId());
			wb.setStatus(FlowUtils.getWpStatus(wp));
			wb.setWpId(wp.getId());
			wb.setPwi(includeParentWi && null != wp.getPwi() ? ApiUtils.buildWiBean(wp.getPwi(), false) : new WiBean());
			wb.setPx(wp.getPx());
			wb.setTp(wp.getTp());
			wb.setIsAi(wp.getIsAi() == null ? 0 : wp.getIsAi());
			wb.setParticipantUsers(ParticipantUtils.toUsers(wp.getParticipants()));
			wb.setSelectedUsers(ParticipantUtils.toUsers(wp.getParticipantsSelected()));
			wb.setDefinededUsers(ParticipantUtils.toUsers(wp.getParticipantsDefine()));
			wb.setWpType(wp.getWpType());
			wb.setWpTypeName(ApiUtils.getWpTypeNameStr(wp.getWpType()));
			wb.setParticipantsSelectStrategy(wp.getParticipantsSelectStrategy());
			wb.setAssignType(wp.getAssignType());
			wb.setFinishCtrl(ApiUtils.getWpFinishCtrl(wp));
			wb.setJump2WpId(wp.getJump2WpId());
			wb.setOwner(new User(wp.getOwnerUserId(), wp.getOwnerLoginName(), wp.getOwnerUserName()));
			wb.setDisplayName(ApiUtils.getWpName(wp));
			wb.setRolePath(wp.getRolePath());
			wb.setRolePathWithBr(wp.getRolePath());
			wb.setOriginDefine(wp.getOriginDefine());
			wb.setFirstCompleteWiDate(DateUtils.formatDate(wp.getFirstCompleteWiDate(), DateUtils.DATE_FORMAT_YYYY_MM_DD_HH_MM_SS));
			if (null != wp.getAi()){
				wb.setCompleteDate(DateUtils.formatDate(wp.getAi().getRe(), DateUtils.DATE_FORMAT_YYYY_MM_DD_HH_MM_SS));
				if (null != wp.getAi().getAc()){
					Ac ac = wp.getAi().getAc();
					wb.setNodeId(ac.getNodeId());
					wb.setParticipantsSelectAt(ac.getParticipantsSelectAt());
					wb.setParticipantsMustSelectAt(ac.getParticipantsMustSelectAt());
					wb.setIsStart(ac.getIsStart());
					wb.setNodeNote(ac.getNodeNote());
					wb.setOpGroupsName(ac.getOpGroupsName());
				}
			}
			wb.setAiId(wp.getAiId());
			wb.setFiId(wp.getFiId());
			List<WpBean> linkedWps = new ArrayList<WpBean>();
			//获取子Wp
			if (includeChildWps){
				Set<Wp> wpsTemp = wp.getChWps();
				for (Wp wpTemp : wpsTemp){
					if (null != wpTemp.getId()){
						WpBean wpb = buildWpBean(wpTemp, true, false, false);
						linkedWps.add(wpb);
					}
				}
			}
			wb.setChWps(linkedWps);
			//获取子的Wi
			List<WiBean> linkedWis = new ArrayList<WiBean>();
			if (fetchWis){
				Set<Wi> wis = wp.getWis();
				for (Wi wi : wis){
					WiBean wib = buildWiBean(wi, false);
					linkedWis.add(wib);
				}
			}
			wb.setWis(linkedWis);
		}
		return wb;
	}

	/**
	 * <p>
	 * 转换成OpBean
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param op
	 *            操作
	 * @return OpBean
	 */
	public static OpBean buildOpBean(Op op) {
		OpBean ob = new OpBean();
		ob.setCode(op.getCode());
		ob.setName(op.getName());
		ob.setNote(op.getNote());
		ob.setNoteType(op.getNoteType());
		return ob;
	}

	/**
	 * <p>
	 * 构造WiBean
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param wi
	 *            Wi
	 * @return WiBean
	 */
	public static WiBean buildWiBean(Wi wi, boolean includeWpPwi) {


		WiBean wb = new WiBean();
		if (null != wi){
		  //协办、沟通相关
	        if (null != wi.getWp()){
	            WpBean wpb = buildWpBean(wi.getWp(), false, false, includeWpPwi);
	            wb.setWp(wpb);
	            if (null != wi.getWp().getPwi()){
	                wb.setAssignUserName(wi.getWp().getPwi().getCompleteUserName());
	                wb.setAssignType(wi.getWp().getPwi().getOpCode());
	            }
	        }
	        if (null != wi.getFi()){
	            wb.setFiStartUserId(wi.getFi().getStartUserId());
	            wb.setFiStartUserLoginName(wi.getFi().getStartUserLoginName());
	            wb.setFiStartUserName(wi.getFi().getStartUserName());
	        }
	        wb.setFiId(wi.getFiId());
	        wb.setAiId(wi.getAiId());
	        wb.setWpId(wi.getWpId());
	        wb.setWiId(wi.getId());
	        wb.setWiName(wi.getWiName());
	        wb.setWiCode(wi.getWiCode());
	        if (null != wi.getSubWps() && wi.getSubWps().size() > 0){
	            wb.setSubWps(buildSubWpBeans(wi.getSubWps()));
	        }
	        wb.setWiType(wi.getWiType());
	        if (StringUtils.isNotBlank(wi.getOpCode())){
	            if (wi.getOpCode().indexOf(";") > 0){
	                wb.setOpCode(wi.getOpCode().substring(0, wi.getOpCode().indexOf(";")));
	                wb.setOpName(wi.getOpCode().substring(wi.getOpCode().indexOf(";") + 1));
	            } else {
	                wb.setOpCode(wi.getOpCode());
	            }
	        }
	        wb.setStatus(wi.getStatus());
	        wb.setIsAi(wi.getWp().getIsAi());
	        wb.setIsBacked(wi.getIsBacked());
	        wb.setIsStart(wi.getAc().getIsStart());
	        wb.setIsRead(wi.getIsRead());

	        wb.setWiName(ApiUtils.getWiName(wi));
	        wb.setUserNote(wi.getUserNote());

	        wb.setStartTime(null != wi.getStartTime() ? DateUtils.formatDate(wi.getStartTime(), DateUtils.DATE_FORMAT_YYYY_MM_DD_HH_MM_SS) : "");
	        wb.setAcceptTime(null != wi.getAcceptTime() ? DateUtils.formatDate(wi.getAcceptTime(), DateUtils.DATE_FORMAT_YYYY_MM_DD_HH_MM_SS) : "");
	        wb.setCompleteTime(null != wi.getCompleteTime() ? DateUtils.formatDate(wi.getCompleteTime(), DateUtils.DATE_FORMAT_YYYY_MM_DD_HH_MM_SS) : "");
	        wb.setParticipant(new User(wi.getParticipant(), wi.getParticipantLoginName(), wi.getParticipantUserName()));

	        // 可选字段,语法:Assigner, OpCode给 OpUsers,（例如:李六 转发给 张三;李四 / 李六加签了王五）
	        wb.setAssigner(new User(wi.getAssigner(), wi.getAssignerLoginName(), wi.getAssignerUserName()));
	        wb.setCompleteUser(new User(wi.getCompleteUserId(), wi.getCompleteUserLoginName(), wi.getCompleteUserName()));
	        wb.setRelatedUsers(ParticipantUtils.toUsers(wi.getOpUsers()));
	        wb.setAssignWiId(wi.getAssignWiId());
		}
		return wb;
	}
	/**
	 * 得到wi的子wp(同时将wp下的wi递归封装)
	 * @author jun
	 * @param wps wps
	 * @return wi下的wp
	 */
	public static List<WpBean> buildSubWpBeans(Set<Wp> wps){
		List<WpBean> wbList = new ArrayList<WpBean>();
		if (null != wps && wps.size() > 0){
			for (Wp wp : wps){
				if (null != wp.getId()){
					wbList.add(buildWpBean(wp, true, false, false));
				}
			}
		}
		return wbList;
	}

	/**
	 * <p>
	 * 构造AiBean
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param ai
	 *            Ai
	 * @return AiBean
	 */
	public static AiBean buildAiBean(Ai ai) {
		AiBean ab = new AiBean();
		ab.setAiId(ai.getId());
		ab.setFiId(ai.getFiId());
		ab.setDisplayName(ai.getDisplayName());
		ab.setIsStart(ai.getAc().getIsStart());
		ab.setOutCode(ai.getAc().getOutCode());
		ab.setNodeNote(ai.getAc().getNodeNote());
		ab.setStatus(ai.getStatus());
		ab.setSort(ai.getAc().getSort());
		FiBean fi = buildFiBean(ai.getFi());
		ab.setFi(fi);
		return ab;
	}

	/**
	 * <p>
	 * 构造FiBean
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param fi
	 *            流程实例
	 * @return FiBean
	 */
	public static FiBean buildFiBean(Fi fi) {
		FiBean fb = new FiBean();
		fb.setStatus(fi.getStatus());
		fb.setFlowInsName(fi.getFiName());
		fb.setFiId(fi.getId());
		fb.setOwnerUser(new User(fi.getOwnerUserId(), fi.getOwnerUserLoginName(), fi.getOwnerUserName()));
		fb.setStartUser(new User(fi.getStartUserId(), fi.getStartUserLoginName(), fi.getStartUserName()));
		fb.setStartDate(DateUtils.formatDate(fi.getStartTime(), DateUtils.DATE_FORMAT_YYYY_MM_DD_HH_MM_SS));
		fb.setCompleteTime(fi.getCompleteTime());
		if(fi.getIsBackedFi()!=null && fi.getIsBackedFi().intValue() == 1){
			fb.setIsBackedFi(1);
			fb.setGoodNodeIds(StringHelper.splitAsStringList(fi.getGoodNodeIds(), "-"));
		}
		else{
			fb.setIsBackedFi(0);
			fb.setGoodNodeIds(new ArrayList<String>());
		}


		return fb;
	}

	/**
	 * <p>
	 * 构造GvBean
	 * </p>
	 * <p>
	 * </p>
	 * 
	 * @author 孙朝辉
	 * @param g
	 *            Gv
	 * @return GvBean
	 */
	public static GvBean buildGvBean(Gv g) {
		GvBean gv = null;
		if (null != g){
			gv = new GvBean();
			gv.setCode(g.getName());
			gv.setName(g.getDisplayName());
			gv.setVal(GvUtils.getVal(g.getType(), g.getVal()));
		}
		return gv;
	}

	/**
	 * 获取权限组实体
	 * @author jun
	 * @param acId acId
	 * @param opRelationIns 操作组实例
	 * @return 权限组实体
	 */
	public static OpRelationInsBean buildOpRelationInsBean(Long acId, OpRelationIns opRelationIns){
		OpRelationInsBean opRelationInsBean = new OpRelationInsBean();
		if (null != opRelationIns){
			opRelationInsBean.setAcId(acId);
			opRelationInsBean.setName(opRelationIns.getName());
			opRelationInsBean.setOpBean(buildOpBean(opRelationIns.getOp()));
			//默认为待办
			opRelationInsBean.setShowType(StringUtils.isNotBlank(opRelationIns.getShowType()) ? opRelationIns.getShowType() : OpRelationInsBean.SHOW_TYPE_DB);
			opRelationInsBean.setSort(opRelationIns.getSort());
			opRelationInsBean.setUserOpType(opRelationIns.getOpUserType());
		}
		return opRelationInsBean;
	}
	/**
	 * 获取权限组实体
	 * @author jun
	 * @param acId acId
	 * @param opRelationIns 操作组实例
	 * @return 权限组实体
	 */
	public static OpRelationInsBean buildOpRelationInsBean(Long acId, OpRelation opRelation){
		OpRelationInsBean opRelationInsBean = new OpRelationInsBean();
		if (null != opRelation){
			opRelationInsBean.setAcId(acId);
			opRelationInsBean.setName(opRelation.getName());
			opRelationInsBean.setOpBean(buildOpBean(opRelation.getOp()));
			//默认为待办
			opRelationInsBean.setShowType(StringUtils.isNotBlank(opRelation.getShowType()) ? opRelation.getShowType() : OpRelationInsBean.SHOW_TYPE_DB);
			opRelationInsBean.setSort(opRelation.getSort());
			opRelationInsBean.setUserOpType(opRelation.getOpUserType());
		}
		return opRelationInsBean;
	}
	/**
	 * 封装流程实例bean
	 * @author jun
	 * @param fl 流程模板
	 * @return 封装流程实例bean
	 */
	public static FlBean buildFlBean(Fl fl){
		FlBean fb = new FlBean();
		if (null != fl){
			fb.setFlowCode(fl.getFlowCode());
			fb.setFlowName(fl.getFlowName());
			fb.setFlowVersion(fl.getFlowVersion());
		}
		return fb;
	}

	/**
	 * 封装操作记录bean
	 * @author jun
	 * @param al 封装操作记录
	 * @return 封装操作记录bean
	 */
	public static AlBean buildAlBean(Al al){
		AlBean ab = new AlBean();
		if (null != al){
			ab.setAlId(al.getId());
			ab.setLogDate(al.getLogDate());
			ab.setLoginName(al.getLoginName());
			ab.setNodeName(al.getNodeName());
			if (null != al && null != al.getOpName() && al.getOpName().indexOf(";") > 0){
				ab.setOpName(al.getOpName().substring(al.getOpName().indexOf(";") + 1));
			}
			else {
				ab.setOpName(al.getOpName());
			}
			ab.setUserName(al.getUserName());
			ab.setUserNote(al.getUserNote());
			ab.setWiId(al.getWiId());
			ab.setFiId(al.getFiId());
		}
		return ab;
	}
	/**
	 * 获取流程信息
	 * @author jun
	 * @param fi 流程实例
	 * @param runningWps 正在运行的wps
	 * @param runningWis 正在运行的wis
	 * @param nextWp 即将流向的wp
	 * @return 获取流程信息
	 */
	public static FiInfoBean buildFiInfoBean(Fi fi, List<Wp> runningWps, List<Wi> runningWis, Wp nextWp){
		FiInfoBean fib = new FiInfoBean();
		if (null != fi){
			fib.setFib(buildFiBean(fi));
			if (null != fi.getFl()){
				fib.setFlb(buildFlBean(fi.getFl()));
			}
			if (null != runningWps && runningWps.size() > 0){
				List<WpBean> runningWpBeans = new ArrayList<WpBean>();
				for (Wp wp :runningWps){
					runningWpBeans.add(buildWpBean(wp, true, true, false));
				}
				fib.setRunningWps(runningWpBeans);
			}
			if (null != runningWis && runningWis.size() > 0){
				List<WiBean> runningWiBeans = new ArrayList<WiBean>();
				for (Wi wi :runningWis){
					runningWiBeans.add(buildWiBean(wi, false));
				}
				fib.setRunningWis(runningWiBeans);
			}
			if (null != nextWp){
				fib.setNextWp(buildWpBean(nextWp, true, true, false));
			}
		}
		return fib;
	}

	/**
	 * <option value="0">并行</option>
	 * <option value="1">串行</option>
	 * <option value="2">会审</option>
	 * 返回操作类型
	 * @author jun
	 * @param wpType 参考Ac.nodeType(0:并行,1:串行,2:会审)
	 * @return 操作类型
	 */
	public static String getWpTypeNameStr(Integer wpType){
		String wpTypeNameStr = "";
		if (null != wpType){
			if (0 == wpType.intValue()){
				wpTypeNameStr += "竞争";
			} else if (1 == wpType.intValue()){
				wpTypeNameStr += "串行";
			} else if (2 == wpType.intValue()){
				wpTypeNameStr += "并行";
			}
		}
		return wpTypeNameStr;
	}
	/**
	 * 封装收藏list
	 * @author jun
	 * @param fsList 收藏list
	 * @return 封装的收藏list
	 */
	public static List<FiStoreBean> buildFiStoreBeanList(List<FiStore> fsList){
		List<FiStoreBean> fsbList = new ArrayList<FiStoreBean>();
		if (null != fsList && fsList.size() > 0){
			for (FiStore fs : fsList){
				fsbList.add(ApiUtils.buildFiStoreBean(fs));
			}
		}
		return fsbList;
	}
	/**
	 * 封装收藏
	 * @author jun
	 * @param fiStore 收藏
	 * @return 封装收藏
	 */
	public static FiStoreBean buildFiStoreBean(FiStore fiStore){
		FiStoreBean fsb = new FiStoreBean();
		if (null != fiStore){
			fsb.setCreateTime(DateUtils.formatDate(fiStore.getCreateTime(), DateUtils.DATE_FORMAT_YYYY_MM_DD_HH_MM_SS));
			fsb.setCreateUserId(fiStore.getCreateUserId());
			fsb.setCreateUserLoginName(fiStore.getCreateUserLoginName());
			fsb.setCreateUserName(fiStore.getCreateUserName());
			if (null != fiStore.getFi()){
				fsb.setFi(ApiUtils.buildFiBean(fiStore.getFi()));
			}
			fsb.setFiId(fiStore.getFiId());
			fsb.setFsId(fiStore.getId());
			fsb.setIsDeleted(fiStore.getIsDeleted());
		}
		return fsb;
	}

	/**
	 * 组装ToDoWorkBean
	 * @param wi 任务
	 * @return
	 */
	public static ToDoWorkBean buildToDoWorkBean(WiBean wi, List<UploadBean> uploadBeanList, String spType, String rolePath){
		ToDoWorkBean toDoWorkBean = new ToDoWorkBean();
		if (null != wi) {
			toDoWorkBean.setAiId(wi.getAiId());
			toDoWorkBean.setCompleteTime(null != wi.getCompleteTime() ? wi.getCompleteTime() : "");
			String userName = "";
			if (WsConstant.STATUS_COMPLETE == wi.getStatus() && null != wi.getParticipant()){
				userName = null != wi.getParticipant().getUserName() ? wi.getParticipant().getUserName() : "";
				if (null != wi && null != wi.getCompleteUser() && !wi.getParticipant().getUserId().equals(wi.getCompleteUser().getUserId())){
					userName += "(" + wi.getCompleteUser().getUserName() + "[代])";
				}
			}
			toDoWorkBean.setCompleteUserName(userName);
			toDoWorkBean.setFiId(wi.getFiId());
			toDoWorkBean.setIsRead(wi.getIsRead());
			toDoWorkBean.setOpCode(wi.getOpCode());
			toDoWorkBean.setOpName(wi.getOpName());
			toDoWorkBean.setOpRole(StringUtils.isNotBlank(wi.getOpRole()) ? wi.getOpRole() : rolePath);
			toDoWorkBean.setParticipantUserName(null != wi.getParticipant() ? wi.getParticipant().getUserName() : "");
			toDoWorkBean.setStartTime(null != wi.getStartTime() ? wi.getStartTime() : "");
			toDoWorkBean.setStatus(wi.getStatus());
			toDoWorkBean.setUserNote(wi.getUserNote());
			toDoWorkBean.setWiId(wi.getWiId());
			toDoWorkBean.setWiName(wi.getWiName());
			toDoWorkBean.setWiType(wi.getWiType());
			toDoWorkBean.setWpId(wi.getWpId());
			toDoWorkBean.setWpName(null != wi.getWp() ? wi.getWp().getDisplayName() : "");
			toDoWorkBean.setSpType(spType);
		}
		toDoWorkBean.setUploadBeanList(uploadBeanList);
		return toDoWorkBean;
	}
	/**
	 * 组装ToDoFiBean
	 * @param fi
	 * @param dataList
	 * @return
	 */
	public static ToDoFiBean buildToDoFiBean(Fi fi, List<NameValuePair> dataList,List<UploadBean> uploadList ){
		ToDoFiBean toDoFiBean = new ToDoFiBean();
		if (null != fi){
			toDoFiBean.setFlowInsName(fi.getFiName());
			toDoFiBean.setFlowName(null != fi.getFl() ? fi.getFl().getFlowName() : "");
			toDoFiBean.setOwnerUserName(null != fi.getFl() ? fi.getFl().getEditUserName() : "");
			toDoFiBean.setStartUserName(fi.getStartUserName());
			toDoFiBean.setStartTime(DateUtils.formatDateTime(fi.getStartTime()));
			toDoFiBean.setEndTime(null != fi.getCompleteTime() ? DateUtils.formatDateTime(fi.getCompleteTime()) : "");
		}
		toDoFiBean.setDataList(dataList);
		toDoFiBean.setUploadList(uploadList);
		
		
		return toDoFiBean;
	}
	/**
	 * 组装任务组
	 * @param wp
	 * @return
	 */
	public static ToDoWpBean buildToDoWpBean(WpBean wb){
		ToDoWpBean toDoWpBean = new ToDoWpBean();
		if (null != wb){
			toDoWpBean.setAiId(wb.getAiId());
			toDoWpBean.setFiId(wb.getFiId());
			toDoWpBean.setPx(wb.getPx());
			toDoWpBean.setStatus(wb.getStatus());
			toDoWpBean.setTp(wb.getTp());
			toDoWpBean.setWpId(wb.getWpId());
			toDoWpBean.setWpName(wb.getDisplayName());
		}
		return toDoWpBean;
	}
	/**
	 * 组装操作按钮
	 * @param opRelationInsBean
	 * @return
	 */
	public static ToDoButtonBean buildOpRelationInsBean(OpRelationInsBean opRelationInsBean){
		ToDoButtonBean toDoButtonBean = new ToDoButtonBean();
		if (null != opRelationInsBean){
			toDoButtonBean.setCode(opRelationInsBean.getOpBean().getCode());
			toDoButtonBean.setName(opRelationInsBean.getName());
			toDoButtonBean.setNote(opRelationInsBean.getOpBean().getNote());
			toDoButtonBean.setNoteType(opRelationInsBean.getOpBean().getNoteType());
			toDoButtonBean.setSort(opRelationInsBean.getSort());
		}
		return toDoButtonBean;
	}
	
	/**
	 * 组装操作按钮
	 * @param opRelationInsBean
	 * @return
	 */
	public static UploadBean buildUploadBean(Upload upload){
		UploadBean uploadBean = new UploadBean();
		if (null != upload){
			uploadBean.setCategory(upload.getCategory() );
        	uploadBean.setDescn(upload.getDescn());
        	uploadBean.setExt(upload.getExt() );
        	uploadBean.setFileName(upload.getFileName() );
        	uploadBean.setIsEncrypt(upload.getIsEncrypt());
        	uploadBean.setNote(upload.getNote() );
        	uploadBean.setOwnerId(upload.getOwnerId() );
        	uploadBean.setPath(upload.getPath() );
        	uploadBean.setUploadId(upload.getId() );
        	uploadBean.setUploadTime(upload.getUploadTime() );
        	uploadBean.setUserCode(upload.getUserCode() );
        	uploadBean.setUserId(upload.getUserId() );
        	uploadBean.setUserLabel(upload.getUserLabel() );
        	uploadBean.setUserName(upload.getUserName() );
		}
		return uploadBean;
	}
	/**
	 * 
	 * @param bizData
	 * @return
	 */
	public static NameValuePair buildNameValuePair(BizDataDTO bizDataDTO){
		String name = "";
		String value = "";
		if (null != bizDataDTO){
			name = StringUtils.isNotBlank(bizDataDTO.getDisplayDataName()) ? bizDataDTO.getDisplayDataName() :bizDataDTO.getDataName() ;
			value = null != bizDataDTO.getDataValue() ? String.valueOf(bizDataDTO.getDataValue()) : "";
		}
		NameValuePair nameValuePair = new NameValuePair(name, value);
		return nameValuePair;
	}
	
	public static BizDataDTO buildBizDataDTO(BizData bizData){
		BizDataDTO bizDataDTO = new BizDataDTO();
		if (null != bizData){
			bizDataDTO.setDataName(bizData.getName());
			bizDataDTO.setDisplayDataName(bizData.getDisplayName());
			bizDataDTO.setDataType(bizData.getDataType());
			bizDataDTO.setDataValue(GvUtils.getVal(bizData.getType(), bizData.getVal()));
			bizDataDTO.setDataVersion(bizData.getDataVsersion());
		}
		return bizDataDTO;
	}
}
