package com.xinleju.erp.flow.action;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.criterion.Conjunction;
import org.hibernate.criterion.Criterion;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Disjunction;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.base.utils.DateUtils;
import com.xinleju.erp.base.utils.StringHelper;
import com.xinleju.erp.flow.flowutils.utils.WsConstant;
import com.xinleju.erp.flow.models.Wi;
import com.xinleju.erp.flow.service.api.extend.dto.UserDTO;
import com.xinleju.erp.flow.utils.LoginInfoUtils;
import com.xinleju.erp.form.utils.DbType;

/**
 * 
 * 版权：(C) 版权所有 2000-2014 上海天好电子商务有限公司苏州分公司
 * 流程任务处理
 * @author   jun
 * @version  $Id$
 * @since
 * @see
 */
@SuppressWarnings("serial")
public class TodoAction extends BaseAction{
    
    /**
     * 流程名称
     */
    private String fiName;
    
    /**
     * 申请人ids
     */
    private String userIds;
    
    /**
     * 申请人名称
     */
    private String userNames;
    
    /**
     * 机构/部门名称
     */
    private String depNames;
    
    /**
     * 机构/部门ids
     */
    private String depIds;
    
    /**
     * 已/未读
     */
    private String readType;
    
    /**
     * 申请时间 - 开始
     */
    private String startDate;
    
    /**
     * 申请时间 - 结束
     */
    private String endDate;
    
    /**
     * 流程类别名称
     */
    private String ctNames;
    
    /**
     * 流程类别ids
     */
    private String ctIds;
    
    /**
     * 业务对象ids
     */
    private String objIds;
    
    /**
     * 业务对象名称
     */
    private String objNames;
    
    /**
     * 接收时间-开始
     */
    private String jsStartDate;
    
    /**
     * 接收时间-结束
     */
    private String jsEndDate;
    
    /**
     * 处理时间 -开始
     */
    private String clStartDate;
    
    /**
     * 处理时间 -结束
     */
    private String clEndDate;
    
    /**
     * 流程编号
     */
    private String flCode;
    
    /**
     * 处理人名称
     */
    private String clUserNames;
    
    /**
     * 处理人ids
     */
    private String clUserIds;
    
    /**
     * 流程状态
     */
    private String fiStatus;
    
    /**
     * JdbcTemplate
     */
    @Autowired
    private JdbcTemplate jdbcTemplate;
    
    /**
     * 待办列表
     * @author jun
     * @return
     */
    public String listDb(){
        //当前操作人的IdName对象
        UserDTO userDto = LoginInfoUtils.getLoginInfo(request).getUserDTO();
        DetachedCriteria dc = DetachedCriteria.forClass(Wi.class);
        dc.add(Restrictions.eq("participant", userDto.getId()));
        dc.add(Restrictions.eq("status", Wi.STATUS_RUNNING));
        dc.add(Restrictions.in("wiType", new Object[]{WsConstant.WiType.ZC.getCode(), WsConstant.WiType.LG.getCode()}));
        this.fixQueryDc(dc);
        page = getCommonService().findPage(dc, start, limit);
        return "listDb";
    }
    
    /**
     * 已办列表
     * @author jun
     * @return
     */
    public String listYb() {
        //当前操作人的IdName对象
        UserDTO userDto = LoginInfoUtils.getLoginInfo(request).getUserDTO();
        DetachedCriteria dc = DetachedCriteria.forClass(Wi.class);
        dc.add(Restrictions.eq("participant", userDto.getId()));
        dc.add(Restrictions.eq("status", Wi.STATUS_COMPLETE));
        dc.add(Restrictions.in("wiType", new Object[]{WsConstant.WiType.ZC.getCode(), WsConstant.WiType.LG.getCode()}));
        this.fixQueryDc(dc);
        page = getCommonService().findPage(dc, start, limit);
        return "listYb";
    }
    /**
     * 待阅列表
     * @author jun
     * @return
     */
    public String listDy(){
        //当前操作人的IdName对象
        UserDTO userDto = LoginInfoUtils.getLoginInfo(request).getUserDTO();
        DetachedCriteria dc = DetachedCriteria.forClass(Wi.class);
        dc.add(Restrictions.eq("participant", userDto.getId()));
        dc.add(Restrictions.eq("status", Wi.STATUS_RUNNING));
        dc.add(Restrictions.in("wiType", new Object[]{WsConstant.WiType.CB.getCode(), WsConstant.WiType.CY.getCode(), WsConstant.WiType.CS.getCode()}));
        this.fixQueryDc(dc);
        page = getCommonService().findPage(dc, start, limit);
        return "listDy";
    }
    
    /**
     * 已阅列表
     * @author jun
     * @return
     */
    public String listYy() {
        //当前操作人的IdName对象
        UserDTO userDto = LoginInfoUtils.getLoginInfo(request).getUserDTO();
        DetachedCriteria dc = DetachedCriteria.forClass(Wi.class);
        dc.add(Restrictions.eq("participant", userDto.getId()));
        dc.add(Restrictions.eq("status", Wi.STATUS_COMPLETE));
        dc.add(Restrictions.in("wiType", new Object[]{WsConstant.WiType.CB.getCode(), WsConstant.WiType.CY.getCode(), WsConstant.WiType.CS.getCode()}));
        this.fixQueryDc(dc);
        page = getCommonService().findPage(dc, start, limit);
        return "listYy";
    }
    /**
     * 全部列表
     * @author jun
     * @return
     */
    public String listAll() {
        //当前操作人的IdName对象
        UserDTO userDto = LoginInfoUtils.getLoginInfo(request).getUserDTO();
        DetachedCriteria dc = DetachedCriteria.forClass(Wi.class);
        dc.add(Restrictions.eq("participant", userDto.getId()));
        dc.add(Restrictions.in("wiType", new Object[]{WsConstant.WiType.ZC.getCode(), WsConstant.WiType.LG.getCode()}));
        this.fixQueryDc(dc);
        page = getCommonService().findPage(dc, start, limit);
        return "listAll";
    }
    
    private void fixQueryDc(DetachedCriteria dc){
        dc.createAlias("fi", "fi");
        dc.createAlias("fl", "fl");
        if (StringUtils.isNotBlank(fiName)){
            dc.add(Restrictions.like("fi.fiName", "%" + fiName.trim().trim() + "%"));
        }
        /*if(StringUtils.isNotBlank(userIds)){
            dc.add(Restrictions.in("fi.startUserId", userIds.trim().split(",")));
        }*/
        if (StringUtils.isNotBlank(userNames)){
            dc.add(Restrictions.or(Restrictions.like("fi.startUserLoginName", "%" + userNames.trim() + "%"),Restrictions.like("fi.startUserName", "%" + userNames.trim() + "%")));
        }
        if (StringUtils.isNotBlank(depIds)){
            //TODO
        }
        if (StringUtils.isNotBlank(readType)){
            if ("0".equals(readType.trim())){
                dc.add(Restrictions.or(Restrictions.eqOrIsNull("isRead", 0)));
            } else if ("1".equals(readType.trim())) {
                dc.add(Restrictions.eq("isRead", 1));
            }
        }
        if (StringUtils.isNotBlank(startDate)){
            dc.add(Restrictions.ge("fi.startTime", DateUtils.str2Date(startDate, DateUtils.DATE_FORMAT_YYYY_MM_DD_HH_MM_SS)));
        }
        if (StringUtils.isNotBlank(endDate)){
            dc.add(Restrictions.le("fi.startTime", DateUtils.str2Date(endDate, DateUtils.DATE_FORMAT_YYYY_MM_DD_HH_MM_SS)));
        }
        if (StringUtils.isNotBlank(ctIds)){
            String[] ctIdArray = ctIds.trim().replaceAll("Cate_", "").split(",");
            Long[] ids = new Long[ctIdArray.length];
            for (int i = 0; i < ctIdArray.length; i++){
                ids[i] = Long.valueOf(ctIdArray[i]);
            }
            dc.add(Restrictions.in("fl.ctId", ids));
        }
        if (StringUtils.isNotBlank(objIds)){
            String[] ctIdArray = objIds.trim().split(",");
            List<Long> appIdList = new ArrayList<Long>();
            List<Long> soIdList = new ArrayList<Long>();
            for (String ctId : ctIdArray){
                if (ctId.startsWith("App_")){
                    appIdList.add(Long.valueOf(ctId.replace("App_", "")));
                }
                if (ctId.startsWith("Object_")){
                    soIdList.add(Long.valueOf(ctId.replace("Object_", "")));
                }
            }
            if (1 > soIdList.size()){
                soIdList.add(0L);
            }
            if (1 > appIdList.size()){
                appIdList.add(0L);
            }
//            String serviceObjectDefineIdSql = "select group_"DbType.getType()+"concat(distinct d.id) from sm_service_object_define d"
//                + " where d.id in(" + StringHelper.join(soIdList, ",") + ") or exists(select 'y' from sm_app a where a.code = d.module_code and a.id in(" + StringHelper.join(appIdList, ",") + ")) ";
//            List<Long> idList = jdbcTemplate.queryForList(serviceObjectDefineIdSql, Long.class);
            List<Long> idList =  getCommonService().findByHQL(Long.class, "select distinct d.id from sm_service_object_define d"
                + " where d.id in(" + StringHelper.join(soIdList, ",") + ") or exists(select 'y' from sm_app a where a.code = d.module_code and a.id in(" + StringHelper.join(appIdList, ",") + ")) ", new Object[] {});
            dc.add(Restrictions.in("fl.serviceObjectDefineId", null != idList && idList.size() > 0 ? idList.toArray(new Long[]{}) : new Long[]{0L}));
        }
        if (StringUtils.isNotBlank(jsStartDate)){
            dc.add(Restrictions.ge("fi.startTime", DateUtils.str2Date(jsStartDate, DateUtils.DATE_FORMAT_YYYY_MM_DD_HH_MM_SS)));
        }
        if (StringUtils.isNotBlank(jsEndDate)){
            dc.add(Restrictions.le("fi.startTime", DateUtils.str2Date(jsEndDate, DateUtils.DATE_FORMAT_YYYY_MM_DD_HH_MM_SS)));
        }
        if (StringUtils.isNotBlank(clStartDate)){
            dc.add(Restrictions.ge("fi.completeTime", DateUtils.str2Date(clStartDate, DateUtils.DATE_FORMAT_YYYY_MM_DD_HH_MM_SS)));
        }
        if (StringUtils.isNotBlank(clEndDate)){
            dc.add(Restrictions.le("fi.completeTime", DateUtils.str2Date(clEndDate, DateUtils.DATE_FORMAT_YYYY_MM_DD_HH_MM_SS)));
        }
        if (StringUtils.isNotBlank(flCode)){
            dc.add(Restrictions.eq("fl.flowCode", flCode.trim()));
        }
        /*if(StringUtils.isNotBlank(clUserIds)){
            dc.add(Restrictions.in("participant", clUserIds.trim().split(",")));
        }*/
        if (StringUtils.isNotBlank(clUserNames)){
//            String clUserIdLimitSql = "select group_"DbType.getType()+"concat(distinct id) from sm_user where real_name like '%" + clUserNames + "%' or loginname like '%" + clUserNames + "%' ";
//            List<Long> idList = jdbcTemplate.queryForList(clUserIdLimitSql, Long.class);
            List<Long> idList =  getCommonService().findByHQL(Long.class, "select distinct id from sm_user where real_name like '%" + clUserNames + "%' or loginname like '%" + clUserNames + "%' ", new Object[] {});
            dc.add(Restrictions.in("participant", null != idList && idList.size() > 0 ? idList.toArray(new Long[]{}) : new Long[]{0L}));
        }
        if (StringUtils.isNotBlank(fiStatus)){
            List<Conjunction> rsList = new ArrayList<Conjunction>();
            Criterion [] cl = null;
            if (fiStatus.trim().contains("0")){
                cl = new Criterion[] {Restrictions.eq("fi.status", WsConstant.STATUS_RUNNING)};
                rsList.add(Restrictions.and(cl));
            }
            if (fiStatus.trim().contains("1")) {
                cl = new Criterion[] {Restrictions.or(Restrictions.eq("fi.terminateCode", WsConstant.FLOW_TERMINATE_CODE_BH),Restrictions.eq("fi.isBackedFi", 1))};
                rsList.add(Restrictions.and(cl));
            }
            if (fiStatus.trim().contains("2")) {
                String fiStatusLimit = " not exists(select 'y' from tf_fi f"
                    + " where "+DbType.getType()+"find_in_set({alias}.fi_id,f.related_fi_ids) >= 0"
                    + " and f.status <> " + WsConstant.STATUS_COMPLETE + " and f.terminate_code is null and f.related_fi_ids is not null) ";
                cl = new Criterion[] {Restrictions.eq("fi.status", WsConstant.STATUS_COMPLETE),
                    Restrictions.sqlRestriction(fiStatusLimit)};
                rsList.add(Restrictions.and(cl));
            }
            Disjunction disjunction = Restrictions.disjunction(); 
            for (Conjunction c : rsList){
                disjunction.add(c);
            }
            dc.add(disjunction);
        }
        dc.add(Restrictions.or(Restrictions.isNull("fi.terminateCode"),Restrictions.ne("fi.terminateCode", WsConstant.FLOW_TERMINATE_CODE_ZF)));
        dc.addOrder(Order.desc("startTime"));
    }

    public String getFiName() {
        return fiName;
    }

    public void setFiName(String fiName) {
        this.fiName = fiName;
    }

    public String getUserIds() {
        return userIds;
    }

    public void setUserIds(String userIds) {
        this.userIds = userIds;
    }

    public String getUserNames() {
        return userNames;
    }

    public void setUserNames(String userNames) {
        this.userNames = userNames;
    }

    public String getDepNames() {
        return depNames;
    }

    public void setDepNames(String depNames) {
        this.depNames = depNames;
    }

    public String getDepIds() {
        return depIds;
    }

    public void setDepIds(String depIds) {
        this.depIds = depIds;
    }

    public String getReadType() {
        return readType;
    }

    public void setReadType(String readType) {
        this.readType = readType;
    }

    public String getStartDate() {
        return startDate;
    }

    public void setStartDate(String startDate) {
        this.startDate = startDate;
    }

    public String getEndDate() {
        return endDate;
    }

    public void setEndDate(String endDate) {
        this.endDate = endDate;
    }

    public String getCtNames() {
        return ctNames;
    }

    public void setCtNames(String ctNames) {
        this.ctNames = ctNames;
    }

    public String getCtIds() {
        return ctIds;
    }

    public void setCtIds(String ctIds) {
        this.ctIds = ctIds;
    }

    public String getObjIds() {
        return objIds;
    }

    public void setObjIds(String objIds) {
        this.objIds = objIds;
    }

    public String getObjNames() {
        return objNames;
    }

    public void setObjNames(String objNames) {
        this.objNames = objNames;
    }

    public String getJsStartDate() {
        return jsStartDate;
    }

    public void setJsStartDate(String jsStartDate) {
        this.jsStartDate = jsStartDate;
    }

    public String getJsEndDate() {
        return jsEndDate;
    }

    public void setJsEndDate(String jsEndDate) {
        this.jsEndDate = jsEndDate;
    }

    public String getClStartDate() {
        return clStartDate;
    }

    public void setClStartDate(String clStartDate) {
        this.clStartDate = clStartDate;
    }

    public String getClEndDate() {
        return clEndDate;
    }

    public void setClEndDate(String clEndDate) {
        this.clEndDate = clEndDate;
    }

    public String getFlCode() {
        return flCode;
    }

    public void setFlCode(String flCode) {
        this.flCode = flCode;
    }

    public String getClUserNames() {
        return clUserNames;
    }

    public void setClUserNames(String clUserNames) {
        this.clUserNames = clUserNames;
    }

    public String getClUserIds() {
        return clUserIds;
    }

    public void setClUserIds(String clUserIds) {
        this.clUserIds = clUserIds;
    }

    public String getFiStatus() {
        return fiStatus;
    }

    public void setFiStatus(String fiStatus) {
        this.fiStatus = fiStatus;
    }
}
