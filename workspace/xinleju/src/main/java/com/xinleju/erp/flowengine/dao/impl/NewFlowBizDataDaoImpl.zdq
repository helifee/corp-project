package com.xinleju.erp.flowengine.dao.impl;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BatchPreparedStatementSetter;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.xinleju.erp.flow.dao.impl.BaseDAO;
import com.xinleju.erp.flow.flowutils.bean.BizDataDTO;
import com.xinleju.erp.flow.models.BizData;
import com.xinleju.erp.flow.service.api.utils.ApiUtils;
import com.xinleju.erp.flow.utils.GvUtils;
import com.xinleju.erp.flowengine.dao.NewFlowBizDataDao;

@Repository
public class NewFlowBizDataDaoImpl extends BaseDAO implements NewFlowBizDataDao {
	
	@Autowired
	private JdbcTemplate jdbcTemplate;
	
	@Override
	public void batchSave(final String fiId, final List<BizDataDTO> lstBizData) {

		jdbcTemplate.update("delete from tf_biz_data where flow_instance_id = ? ",fiId);

		String bizDataSql = "INSERT INTO tf_biz_data (flow_instance_id,name,display_name,type,val,data_type,data_vsersion) " +
				"VALUES(?,?,?,?,?,?,?)";
		
		jdbcTemplate.batchUpdate(bizDataSql, new BatchPreparedStatementSetter(){

			@Override
			public void setValues(PreparedStatement ps, int i)
					throws SQLException {
				BizDataDTO bizData = lstBizData.get(i);
				
				ps.setString(1, fiId);
				ps.setString(2, bizData.getDataName());
				ps.setString(3, bizData.getDisplayDataName());
				if(bizData.getDataValue()!=null){
				 ps.setString(4, GvUtils.getType(bizData.getDataValue()));
			    }else{
			   	 ps.setString(4, null);
			    }
				ps.setObject(5, bizData.getDataValue());
				ps.setString(6, bizData.getDataType());
				ps.setString(7, bizData.getDataVersion());
			}

			@Override
			public int getBatchSize() {
				return lstBizData.size();
			}
		});
	}
	
    public List<BizDataDTO> getBizDataDTOList(String flowInstanceId, String dataVsersion){
    	List<BizDataDTO> bizDataDTOList = new ArrayList<BizDataDTO>();
    	List<BizData> bizDataList = this.getBizDatas(flowInstanceId, dataVsersion);
    	for (BizData bizData : bizDataList){
    		bizDataDTOList.add(ApiUtils.buildBizDataDTO(bizData));
    	}
    	return bizDataDTOList;
    }
	
    public List<BizData> getBizDatas(String flowInstanceId, String dataVsersion) {
        List<BizData> bizDataList = new ArrayList<BizData>();
        if (StringUtils.isNotBlank(dataVsersion)){
//        	bizDataList.addAll(getDao().findAll(BizData.class, " fiId=? and val is not null and dataVsersion = ? ", new Object[]{fiId, dataVsersion}, "id asc"));
        	bizDataList.addAll(getDao().findAll(BizData.class, " flowInstanceId=? and val is not null ", new Object[]{flowInstanceId, dataVsersion}, "id asc"));
        } else {
        	bizDataList.addAll(getDao().findAll(BizData.class, " flowInstanceId=? and val is not null", new Object[]{flowInstanceId}, "id asc"));
        }
        return bizDataList;
    }

}
