package com.xinleju.erp.flow.service.api;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import com.xinleju.erp.base.app.config.App;
import com.xinleju.erp.data.cache.api.MDProjectCacheService;
import com.xinleju.erp.data.cache.dto.ProjectBaseDTO;
import com.xinleju.erp.data.cache.dto.ProjectBranchDTO;
import com.xinleju.erp.flow.bean.IdName;
import com.xinleju.erp.flow.utils.IdNameUtils;
import com.xinleju.erp.form.utils.DbType;
import com.xinleju.erp.frame.models.BaseEntity;
import com.xinleju.erp.frame.models.PartyType;

/**
 * 
 * 版权：(C) 版权所有 2000-2014 上海天好电子商务有限公司苏州分公司
 * 组织架构树service
 * @author   jun
 * @version  $Id$
 * @since
 * @see
 */
@Service("ParticipantAPIService")
public class ParticipantAPIService {
    
    /**
     * 招采组织架构的组织结构编码
     */
    public static final String ZC_STRUCTTYPE = "zc";
    
    /**
     * 数据库访问
     */
    @Autowired
    private JdbcTemplate jt;
    /**
     * 得到组织架构树的根
     * @author jun
     * @param partyStructTypeId 组织架构类型id
     * @param partyName 查询条件
     * @return 得到组织架构树的根
     */
    public List<IdName> getRootPartyEntityByStructTypeId(Long partyStructTypeId, String partyName){
        return this.findChildEntityAll(null, partyStructTypeId, partyName);
    }
    /**
     * 得到组织架构树
     * @author jun
     * @param parentId 父得到组织架构树Id
     * @param partyStructTypeId 组织架构类型id
     * @param partyName partyName
     * @return 得到组织架构树
     */
    public List<IdName> findChildEntityUserAll(Long parentId , Long partyStructTypeId, String partyName){
        String parentEntityLimitSql = " and fps.parent_entity_id is null";
        if (null != parentId && parentId > 0){
            parentEntityLimitSql = " and fps.parent_entity_id = " + parentId;
        }
        String partyNameLimitSql = "";
        if (StringUtils.isNotEmpty(partyName)){
            partyNameLimitSql = " and(fpe.name_prefix like '%" + partyName + "%' or fpe.name_prefix like '%" + partyName + "%'"
                    + " or exists(select 'y' from sm_party_entity fpe2"
                    + " where (fpe2.name_prefix like '%" + partyName + "%' or fpe2.name_prefix like '%" + partyName + "%')"
                    + " and "+DbType.getType()+"locate("+DbType.getType()+"concat('-',fpe.id,'-'), "+DbType.getType()+"concat('-',fpe2.prefix)) > 0))";
        }
        String childEntityListSql = "select '" + IdName.USER_PREFIX + "' as " + IdName.MAP_KEY_PREFIX 
                + " ,fpe.id as " + IdName.MAP_KEY_ID + ",fpe.name as " + IdName.MAP_KEY_NAME
                + " ,fpe.short_name as " + IdName.MAP_KEY_CODE
                + " ,fpt.type as type"
                + " from sm_party_entity fpe"
                + " inner join sm_party_struct fps on fps.child_entity_id = fpe.id"
                + " inner join sm_party_type fpt on fpt.id = fpe.party_type_id"
//                + " inner join sm_user u on u.id = fpe.ref_id "
                + " where fps.party_struct_type_id = ?"
                + parentEntityLimitSql
                + partyNameLimitSql
                // add by liuhm : 过滤掉已经禁用的用户fpe.ref_id is null or fpe.ref_id in (select id from sm_user where status = 0)
                + " and not exists(select 'y' from sm_user su where su.id = fpe.ref_id and fpt.type = '" + PartyType.TYPE_USER + "' and su.status = 1) ";
        if (!isRole(parentId)) {
        	childEntityListSql+= " and fpt.type != '" + PartyType.TYPE_USER + "' ";
        }
        
        childEntityListSql+= " order by fpt.type asc,fpe.ref_id asc";
        return IdNameUtils.mapToIdNameList(jt.queryForList(childEntityListSql, partyStructTypeId));
    }
    
    
    public List<IdName> findChildEntityAll(Long parentId , Long partyStructTypeId, String partyName){
        String parentEntityLimitSql = " and fps.parent_entity_id is null";
        if (null != parentId && parentId > 0){
            parentEntityLimitSql = " and fps.parent_entity_id = " + parentId;
        }
        String partyNameLimitSql = "";
        if (StringUtils.isNotEmpty(partyName)){
            partyNameLimitSql = " and(fpe.name_prefix like '%" + partyName + "%' or fpe.name_prefix like '%" + partyName + "%'"
                    + " or exists(select 'y' from sm_party_entity fpe2"
                    + " where (fpe2.name_prefix like '%" + partyName + "%' or fpe2.name_prefix like '%" + partyName + "%')"
                    + " and "+DbType.getType()+"locate("+DbType.getType()+"concat('-',fpe.id,'-'), "+DbType.getType()+"concat('-',fpe2.prefix)) > 0))";
        }
        String childEntityListSql = "select '" + IdName.PART_PREFIX + "' as " + IdName.MAP_KEY_PREFIX 
                + " ,fpe.id as " + IdName.MAP_KEY_ID + ",fpe.name as " + IdName.MAP_KEY_NAME
                + " ,fpe.short_name as " + IdName.MAP_KEY_CODE
                + " ,fpt.type as type"
                + " from sm_party_entity fpe"
                + " inner join sm_party_struct fps on fps.child_entity_id = fpe.id"
                + " inner join sm_party_type fpt on fpt.id = fpe.party_type_id"
//                + " inner join sm_user u on u.id = fpe.ref_id "
                + " where fps.party_struct_type_id = ?"
                + parentEntityLimitSql
                + partyNameLimitSql
                // add by liuhm : 过滤掉已经禁用的用户fpe.ref_id is null or fpe.ref_id in (select id from sm_user where status = 0)
               // + " and not exists(select 'y' from sm_user su where su.id = fpe.ref_id and fpt.type = '" + PartyType.TYPE_USER + "' and su.status = 1) ";
        		+ "  ";
        if (!isRole(parentId)) {
            childEntityListSql+= " and fpt.type != '" + PartyType.TYPE_USER + "' ";
        }
        
        childEntityListSql+= " order by fpt.type asc,fpe.ref_id asc";
        return IdNameUtils.mapToIdNameList(jt.queryForList(childEntityListSql, partyStructTypeId));
    }
    
    private boolean isRole(Long parentId) {
    	List<Map<String, Object>> rst = null;
    	String sql = " SELECT fpe.* "
			+ " from sm_party_entity fpe"
			+ " inner join sm_party_struct fps on fps.child_entity_id = fpe.id"
			+ " inner join sm_party_type fpt on fpt.id = fpe.party_type_id"
			+ " where fpt.type = '" + PartyType.TYPE_ROLE + "' and fps.child_entity_id = ? ";
    	
    	rst = jt.queryForList(sql, parentId);
    	return rst != null && rst.size() > 0;
    }
    
    /**
     * 获取所有Role对象
     * @author jun
     * @param parentId 父亲id
     * @param roleName 角色名
     * @return 获取所有根Role对象
     */
    public List<IdName> getAllRoleList(Long parentId, String roleName) {
       /* String parentIdLimitSql = " fr.parent_id is null";
        if (null != parentId && parentId > 0){
            parentIdLimitSql = " fr.parent_id = " + parentId;
        }
        String roleNameLimitSql = "";
        if (StringUtils.isNotEmpty(roleName)){
            roleNameLimitSql = " and (fr.name like '%" + roleName + "%') ";
        }
        String allRoleListSql = "select '" + IdName.ROLE_PREFIX + "' as " + IdName.MAP_KEY_PREFIX 
                + " ,fr.id as " + IdName.MAP_KEY_ID + ",fr.name as " + IdName.MAP_KEY_NAME
                + " ,fr.code as " + IdName.MAP_KEY_CODE 
                + " from sm_role fr"
                + " left join sm_dict d on d.code = fr.role_type "
                + " where " + parentIdLimitSql
                + " and fr.type='standard' and (fr.status = 0 or fr.status is null)"
                + roleNameLimitSql
                + " order by fr.px asc";
        
        List<Map<String, Object>> l = jt.queryForList(allRoleListSql);
        return IdNameUtils.mapToIdNameList(l);*/
    	return getAllRoleList(parentId,roleName,true);
    }
    
    /**
     * 获取所有Role对象
     * @author jun
     * @param parentId 父亲id
     * @param roleName 角色名
     * @return 获取所有根Role对象
     */
    public List<IdName> getAllRoleList(Long parentId, String roleName, boolean isStatusFilter) {
        String parentIdLimitSql = " fr.parent_id is null";
        if (null != parentId && parentId > 0){
            parentIdLimitSql = " fr.parent_id = " + parentId;
        }
        String roleNameLimitSql = "";
        if (StringUtils.isNotEmpty(roleName)){
            roleNameLimitSql = " and (fr.name like '%" + roleName + "%') ";
        }
        String statusFilterSql = "";
        if(isStatusFilter){
        	statusFilterSql = " and (fr.status = 0 or fr.status is null) ";
        }
        String allRoleListSql = "select '" + IdName.ROLE_PREFIX + "' as " + IdName.MAP_KEY_PREFIX 
                + " ,fr.id as " + IdName.MAP_KEY_ID + ",fr.name as " + IdName.MAP_KEY_NAME
                + " ,fr.code as " + IdName.MAP_KEY_CODE 
                + " from sm_role fr"
                + " left join sm_dict d on d.code = fr.role_type "
                + " where " + parentIdLimitSql
                + " and fr.type='standard'"
                + statusFilterSql
                + roleNameLimitSql
                + " order by fr.px asc";
        
        List<Map<String, Object>> l = jt.queryForList(allRoleListSql);
        return IdNameUtils.mapToIdNameList(l);
    }
    
    public List<IdName> getGeneralRoleList() {
        String allRoleListSql = "select '" + IdName.GENERAL_PREFIX + "' as " + IdName.MAP_KEY_PREFIX 
                + " ,fr.id as " + IdName.MAP_KEY_ID 
                + ",fr.name as " + IdName.MAP_KEY_NAME
                + " ,fr.code as " + IdName.MAP_KEY_CODE 
                + " from sm_role_general fr"
                + " where "
                + " fr.status = 0 "
                + " order by fr.px asc";
        
        List<Map<String, Object>> l = jt.queryForList(allRoleListSql);
        return IdNameUtils.mapToIdNameList(l);
    }
    
    /**
     * 
     * 判断是否存在叶子节点
     *〈详细描述〉
     * @author zhoupeng
     * @return
     */
  public boolean isExistedSon(Long id){
      boolean isExisted = true;
      if (null != id && id > 0){
          String sql = "select count(s.id) from sm_role s where s.type = 'standard' and s.parent_id = " + id;
          isExisted = jt.queryForInt(sql) > 0; 
      }
      return isExisted;
      
  }
    
    /**
     * 获取所有根Role对象
     * @author jun
     * @param roleName 角色名
     * @return 获取所有根Role对象
     */
    public List<IdName> getRootRoleList(String roleName){
        return this.getAllRoleList(null, roleName);
    }
    
    /**
     * 得到业务树
     * @author jun
     * @return 业务树
     */
    public List<IdName> getBizParticipantList(){
        String bizParticipantListSql = "select '" + IdName.PBIZ_PREFIX + "' as " + IdName.MAP_KEY_PREFIX 
                + " ,tbp.id as " + IdName.MAP_KEY_ID + ",tbp.name as " + IdName.MAP_KEY_NAME
                + " ,tbp.code as " + IdName.MAP_KEY_CODE
                + " from tf_biz_participant tbp"
                + " where (is_disabled = 0 or is_disabled is null)"
                + " order by tbp.id asc";
        return IdNameUtils.mapToIdNameList(jt.queryForList(bizParticipantListSql));
    }
    
    /**
     * 找到招采组织架构树类型编码
     * @author jun
     * @return 招采组织架构树类型编码
     */
    public Long getZcRootStructTypeIdByStructTypeCode(){
        return jt.queryForObject("select min(id) from sm_party_struct_type where code = ?", Long.class, ZC_STRUCTTYPE);
    }
    /**
     * 找到所有的所有注册的业务系统
     * @return
     */
    public List<IdName> getAllAppList(){
    	String appSql = "select '" + IdName.APPS_PREFIX + "' as " + IdName.MAP_KEY_PREFIX 
                + " ,app.id as " + IdName.MAP_KEY_ID
                + " ,app.name as " + IdName.MAP_KEY_NAME
                + " ,app.code as " + IdName.MAP_KEY_CODE
                + " from sm_app app"
                + " where (app.status = ? or app.status is null)"
                + " order by app.px asc,app.id asc";
        return IdNameUtils.mapToIdNameList(jt.queryForList(appSql, BaseEntity.STATUS_ENABLE));
    }
    /**
     * 找到app下的业务对象
     * @param appId
     * @return
     */
    public List<IdName> getSmServiceObjectListByAppId(Long appId){
    	String objSql = "select '" + IdName.OBJS_PREFIX + "' as " + IdName.MAP_KEY_PREFIX 
                + " ,obj.id as " + IdName.MAP_KEY_ID
                + " ,obj.name as " + IdName.MAP_KEY_NAME
                + " ,obj.code as " + IdName.MAP_KEY_CODE
                + " from sm_service_object_define obj"
                + " inner join sm_app app on app.code = obj.module_code"
                + " where app.id = ? "
                + " order by obj.id asc";
        return IdNameUtils.mapToIdNameList(jt.queryForList(objSql, appId));
    }
    
    public List<IdName> getRankList(){
        String rankSql = "select '" + IdName.RANK_PREFIX + "' as " + IdName.MAP_KEY_PREFIX 
            + " ,c.id as " + IdName.MAP_KEY_ID
            + " ,c.name as " + IdName.MAP_KEY_NAME
            + " ,c.code as " + IdName.MAP_KEY_CODE
            + " from sm_dict c"
            + " left join sm_dict f on c.parent_id=f.id"
            + " where (c.disabled='false' or c.disabled is null )"
            + " and f.code = ?"
            + " order by c.id asc";
        return IdNameUtils.mapToIdNameList(jt.queryForList(rankSql, "SYS_ZHIJI"));
    }
    
    /**
     * 得到业务对象下的字段s
     * @param objectId
     * @return
     */
    public List<IdName> getSmServiceObjectFieldListByObjectId(Long objectId){
    	String objSql = "select '" + IdName.OBJF_PREFIX + "' as " + IdName.MAP_KEY_PREFIX 
                + " ,obj.id as " + IdName.MAP_KEY_ID
                + " ,obj.name as " + IdName.MAP_KEY_NAME
                + " ,obj.field_type as " + IdName.MAP_KEY_CODE
                + " from sm_service_object_field obj"
                + " where obj.service_object_define_id = ? "
                + " order by obj.id asc";
        return IdNameUtils.mapToIdNameList(jt.queryForList(objSql, objectId));
    }
    
    public Collection<? extends IdName> getXiangduiParticipantList() {
        List<IdName> l = new ArrayList<IdName>();
        l.add(new IdName(1L, "发起人部门领导", IdName.XDPA_PREFIX ));
        l.add(new IdName(2L, "发起人上级部门领导", IdName.XDPA_PREFIX ));
        l.add(new IdName(3L, "上一环节审批人直接领导", IdName.XDPA_PREFIX ));
//        l.add(new IdName(3L, "发起人角色领导", IdName.XDPA_PREFIX ));
        l.add(new IdName(4L, "空岗位", IdName.XDPA_PREFIX ));
        l.add(new IdName(5L, "发起人一级部门领导", IdName.XDPA_PREFIX ));
        return l;
    }
    public Collection<? extends IdName> getWarnXiangduiParticipantList() {
        List<IdName> l = new ArrayList<IdName>();
        l.add(new IdName(11L, "审批人部门领导", IdName.XDPA_PREFIX ));
        l.add(new IdName(12L, "审批人上级部门领导", IdName.XDPA_PREFIX ));
//        l.add(new IdName(3L, "上一环节审批人直接领导", IdName.XDPA_PREFIX ));
////        l.add(new IdName(3L, "发起人角色领导", IdName.XDPA_PREFIX ));
//        l.add(new IdName(4L, "空岗位", IdName.XDPA_PREFIX ));
        return l;
    }   
    
    /**
     * 得到项目
     * @param objectId
     * @return
     */
    public List<IdName> getProjectServiceObjectFieldListByObjectId(Long objectId){
        MDProjectCacheService mdProjectCacheService = (MDProjectCacheService) App.getBean("mdProjectCacheService");
        List<ProjectBaseDTO> projectBaseDTOList = null;
        List<ProjectBranchDTO> projectBranchDTOList = null;
        List<Map<String, Object>> resultList = null;
        Map<String, Object> map = null;
        if (objectId.longValue() == -1L) {
            resultList = new ArrayList<Map<String, Object>>();
            projectBaseDTOList = mdProjectCacheService.getAllProjectBase().getResult();
            if (projectBaseDTOList != null) {
                for (ProjectBaseDTO projectBaseDTO : projectBaseDTOList) {
                    map = new HashMap<String,Object>();
                    map.put("id", projectBaseDTO.getId().toString());
                    map.put("name", projectBaseDTO.getName());
                    map.put("prefix", IdName.PROJECT_PREFIX);
                    map.put("code", "");
                    map.put("type", "project");
                    resultList.add(map);
                }
                return IdNameUtils.mapToIdNameList(resultList, 0);
            }
        } else {
            resultList = new ArrayList<Map<String, Object>>();
            projectBranchDTOList = mdProjectCacheService.getProjectBranchByProjectBaseId(objectId).getResult();
            if (projectBranchDTOList != null) {
                for (ProjectBranchDTO projectBranchDTO : projectBranchDTOList) {
                    map = new HashMap<String,Object>();
                    map.put("id", projectBranchDTO.getId().toString());
                    map.put("name", projectBranchDTO.getName());
                    map.put("prefix", IdName.BRANCH_PREFIX);
                    map.put("code", "");
                    map.put("type", "branch");
                    resultList.add(map);
                }
                return IdNameUtils.mapToIdNameList(resultList, 1);
            }
        }
        return null;
    }
    
    /**
     * 
     * 判断是否存在叶子节点
     *〈详细描述〉
     * @author zhoupeng
     * @return
     */
  public boolean isExistedProjectSon(Long id){
      boolean isExisted = true;
      if (null != id && id > 0){
          MDProjectCacheService mdProjectCacheService = (MDProjectCacheService) App.getBean("mdProjectCacheService");
          List<ProjectBranchDTO> projectBranchDTOList = mdProjectCacheService.getProjectBranchByProjectBaseId(id).getResult();
          isExisted = (projectBranchDTOList != null && !projectBranchDTOList.isEmpty()) ? true : false; 
      }
      return isExisted;
      
  }
    
}
