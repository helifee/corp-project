
package com.xinleju.erp.flow.flowutils.bean;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;

import com.xinleju.erp.flow.flowutils.utils.WsConstant;
import com.xinleju.erp.flow.frameapi.domain.User;

/**
 * wi pacakge
 * 
 * @author hongbin
 * @version 2014年5月30日
 * @see WpBean
 * @since
 */
public class WpBean implements IResultBean {
    
    /**
     * 意义，目的和功能，以及被用到的地方<br>
     */
    private static final long serialVersionUID = 8072148852146715119L;
    
    /**
     * 是否可以修改参与人-不需要修改
     */
    public static final int CHANGE_PARTICIPANTS_TYPE_NOT = 0;
    
    /**
     * 是否可以修改参与人-需要修改
     */
    public static final int CHANGE_PARTICIPANTS_TYPE_NEED = 1;
    
    /**
     * 是否可以修改参与人-必须修改
     */
    public static final int CHANGE_PARTICIPANTS_TYPE_MUST = 2;
    
    private FiBean fib;

    
    /**
     * 父亲Wi.ID
     */
    private Long pwiId;
    
    /**
     * 父亲wiBean
     */
    private WiBean pwi;
    
    /**
     * aiId
     */
    private Long aiId;

    /**
     * 父亲Wp.ID
     */
    private Long pwpId;
    
    /**
     * 直接跳转到Wp
     */
    private Long jump2WpId;
    
    public Long getPwiId() {
		return pwiId;
	}

	public void setPwiId(Long pwiId) {
		this.pwiId = pwiId;
	}

	public Long getPwpId() {
		return pwpId;
	}

	public void setPwpId(Long pwpId) {
		this.pwpId = pwpId;
	}

	/**
     * 主键
     */
    private Long wpId;
    
    private int isAi;
    
    private String displayName;
    
    
    private List<OpBean> ops;
    
    /**
     * 标识加签位置
     */
    private int px;
    
    /**
     * 拓扑排序
     */
    private int tp;

    /**
     * 是否正在运行(0表示未开始或已结束，1表示正在运行中)
     */
    private int status;

    /**
     * 0有示无参与人用户选择，1表示用户选择，2默认
     */
    private int participantsSelectStrategy;
    
    /**
     * 分发方式（0，并发，1：串行）
     */
    
    private Integer assignType;
    
    /**
     * and协作、xor竞争
     */
    private String finishCtrl;

    /**
     * 系统定义的
     */
    private List<User> definededUsers;

    /**
     * 用户选择的
     */
    private List<User> selectedUsers;

    /**
     * 实际参与人，有可能是已去掉重复参与人
     */
    private List<User> participantUsers;

    /**
     * 归属人， 用于判断该序列是否我创建的
     */
    private User owner;

    /**
     * 创建人， 用于显示【XXX加签】
     */
    private User creator;
    
    /**
     * 对应的Ac.NodeId
     */
    private String nodeId;
    
    /**
     * Ac.NodeId使用逗号分隔符分割
     */
    private String participantsSelectAt;
    
    /**
     * Ac.NodeId使用逗号分隔符分割
     */
    private String participantsMustSelectAt;
    
    private List<WiBean> wis;
    
    /**
     * 子wp
     */
    private List<WpBean> chWps;
    
    /**
     * 流程id
     */
    private Long fiId;
    
    /**
     * 操作人岗位Path
     */
    private String rolePath;
    
    /**
     * 操作人岗位有换行符的rolePath
     */
    private String rolePathWithBr;
    
    /**
     * 系统定义的参与人名称
     */
    private String definededUsersNames;
    
    
    /**
     * 实际参与人名称，有可能是已去掉重复参与人
     */
    private String participantUsersNames;
    
    
    /**
     * 参考Ac.nodeType
     */
    private Integer wpType;
    
    /**
     * 参考Ac.nodeType
     */
    private String wpTypeName;
    /**
     * 所有wi集合的size（包括子wp里的wi）
     */
    private int allWiSize;
    /**
     * 协办、沟通的集合 size
     */
    private int allXbGtWiSize;
    
    /**
     * 没有wi的子wp已完成
     */
    private int noWisWpUsersSize;
    
    /**
     * 没有wi的子wp运行中(不包含跳过的)
     */
    private int noWisWpSizeRunning;
    
    /**
     * 没有wi的子wp已完成
     */
    private int noWisWpSizeComplete;
    
    /**
     * 已结束的wi集合（包括子wp里的wi）
     */
    private List<WiBean> completeWiList;
    
    /**
     * 正在运行中的wi集合（包括子wp里的wi）
     */
    private List<WiBean> runningWiList;
    
    /**
     * 节点结束时间
     */
    private String completeDate;
    
    /**
     * wp下第一个结束的wi的时间戳
     */
    private String firstCompleteWiDate;
    
    
    /**
     * 是否是第一个节点
     */
    private int isStart;
    
    /**
     * 节点描述
     */
    private String nodeNote;
    
    /**
     * 定义的参与人
     */
    private String originDefine;
    
    /**
     * 参与类型
     */
    private String             finishCtrlName;
    
    /**
    * 是否可以修改参与人
    */
   private Integer            changeParticipantsType;
   
   /**
    * 审批类型
    */
   private String opGroupsName;
    
    
    public List<WiBean> getWis() {
		return wis;
	}

	public void setWis(List<WiBean> wis) {
		this.wis = wis;
	}

	public Long getWpId() {
        return wpId;
    }

    public void setWpId(Long wpId) {
        this.wpId = wpId;
    }

    public int getIsAi() {
        return isAi;
    }

    public void setIsAi(int isAi) {
        this.isAi = isAi;
    }

    public int getPx() {
        return px;
    }

    public void setPx(int px) {
        this.px = px;
    }

    public int getStatus() {
        return status;
    }

    public void setStatus(int status) {
        this.status = status;
    }

    public int getParticipantsSelectStrategy() {
        return participantsSelectStrategy;
    }

    public void setParticipantsSelectStrategy(int participantsSelectStrategy) {
        this.participantsSelectStrategy = participantsSelectStrategy;
    }
    

    public String getFinishCtrl() {
        return finishCtrl;
    }

    public void setFinishCtrl(String finishCtrl) {
        this.finishCtrl = finishCtrl;
    }

    public List<User> getDefinededUsers() {
        return definededUsers;
    }

    public void setDefinededUsers(List<User> definededUsers) {
        this.definededUsers = definededUsers;
    }

    public List<User> getSelectedUsers() {
        return selectedUsers;
    }

    public void setSelectedUsers(List<User> selectedUsers) {
        this.selectedUsers = selectedUsers;
    }

    public List<User> getParticipantUsers() {
        return participantUsers;
    }

    public void setParticipantUsers(List<User> participantUsers) {
        this.participantUsers = participantUsers;
    }

    public User getOwner() {
        return owner;
    }

    public void setOwner(User owner) {
        this.owner = owner;
    }

    public User getCreator() {
        return creator;
    }

    public void setCreator(User creator) {
        this.creator = creator;
    }

    public String getDisplayName() {
        return displayName;
    }

    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    public List<OpBean> getOps() {
        return ops;
    }

    public void setOps(List<OpBean> ops) {
        this.ops = ops;
    }

    public Integer getAssignType() {
        return assignType;
    }

    public void setAssignType(Integer assignType) {
        this.assignType = assignType;
    }

    public WiBean getPwi() {
        return pwi;
    }

    public void setPwi(WiBean pwi) {
        this.pwi = pwi;
    }

    public String getParticipantsSelectAt() {
        return participantsSelectAt;
    }

    public void setParticipantsSelectAt(String participantsSelectAt) {
        this.participantsSelectAt = participantsSelectAt;
    }

    public String getParticipantsMustSelectAt() {
        return participantsMustSelectAt;
    }

    public void setParticipantsMustSelectAt(String participantsMustSelectAt) {
        this.participantsMustSelectAt = participantsMustSelectAt;
    }

    public String getNodeId() {
        return nodeId;
    }

    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    public Long getFiId() {
        return fiId;
    }

    public void setFiId(Long fiId) {
        this.fiId = fiId;
    }

    public List<WpBean> getChWps() {
        return chWps;
    }

    public void setChWps(List<WpBean> chWps) {
        this.chWps = chWps;
    }

    public String getRolePath() {
        if (StringUtils.isNotBlank(rolePath)){
            //去除第一个"/"
            if (rolePath.startsWith("/")){
                rolePath = rolePath.substring(1);
            }
        }
        return rolePath;
    }

    public void setRolePath(String rolePath) {
        this.rolePath = rolePath;
    }

    public String getDefinededUsersNames() {
        if (null != this.getDefinededUsers()){
            definededUsersNames = "";
            for (User u : this.getDefinededUsers()){
                definededUsersNames += u.getUserName() + ",";
            }
            definededUsersNames = StringUtils.stripEnd(definededUsersNames, ",");
        }
        return definededUsersNames;
    }

    public void setDefinededUsersNames(String definededUsersNames) {
        this.definededUsersNames = definededUsersNames;
    }

    public String getParticipantUsersNames() {
        if (null != this.getParticipantUsers()){
            participantUsersNames = "";
            for (User u : this.getParticipantUsers()){
                participantUsersNames += u.getUserName() + ",";
            }
            participantUsersNames = StringUtils.stripEnd(participantUsersNames, ",");
        }
        return participantUsersNames;
    }

    public void setParticipantUsersNames(String participantUsersNames) {
        this.participantUsersNames = participantUsersNames;
    }


    public List<WiBean> getCompleteWiList() {
        if (null == completeWiList || completeWiList.size() < 1){
            int needStatus = WsConstant.STATUS_COMPLETE;
            completeWiList = new ArrayList<WiBean>();
            if(null != this.getChWps() && this.getChWps().size() > 0){
                for (WpBean wpTemp : this.getChWps()){
                    completeWiList.addAll(this.getList(wpTemp.getWis(), needStatus));
                }
            }
            completeWiList.addAll(this.getList(this.getWis(), needStatus));
        }
        return completeWiList;
    }

    public void setCompleteWiList(List<WiBean> completeWiList) {
        this.completeWiList = completeWiList;
    }

    public List<WiBean> getRunningWiList() {
        if (null == runningWiList || runningWiList.size() < 1){
            int needStatus = WsConstant.STATUS_RUNNING;
            runningWiList = new ArrayList<WiBean>();
            if(null != this.getChWps() && this.getChWps().size() > 0){
                for (WpBean wpTemp : this.getChWps()){
                    runningWiList.addAll(this.getList(wpTemp.getWis(), needStatus));
                }
            }
            runningWiList.addAll(this.getList(this.getWis(), needStatus));
        }
        return runningWiList;
    }

    public void setRunningWiList(List<WiBean> runningWiList) {
        this.runningWiList = runningWiList;
    }

    public int getAllWiSize() {
        if (allWiSize < 1){
            allWiSize = this.getCompleteWiList().size() + this.getRunningWiList().size() + this.getAllXbGtWiSize();
        }
        return allWiSize;
    }

    public void setAllWiSize(int allWiSize) {
        this.allWiSize = allWiSize;
    }

    /**
     * 得到wp下所有的协办和沟通的长度
     * @author jun
     * @param wbList
     * @return
     */
    public int getXbGtAllWiSize(List<WiBean> wiList){
        int xbGtWiSizeTemp = 0;
        if (null != wiList && wiList.size() > 0){
            for (WiBean wiTemp : wiList){
                if (null != wiTemp.getSubWps() && wiTemp.getSubWps().size() > 0){
                    for (WpBean wp : wiTemp.getSubWps()){
                        xbGtWiSizeTemp += wp.getWis().size();
                        xbGtWiSizeTemp += this.getXbGtAllWiSize(wp.getWis());
                    }
                }
            }
        }
        return xbGtWiSizeTemp;
    }
    
    /**
     * 过滤制定的wis
     * @author jun
     * @param wiBeanList
     * @param status
     * @return
     */
    private List<WiBean> getList(List<WiBean> wiBeanList, int status){
        List<WiBean> tempWbList = new ArrayList<WiBean>();
        if(null != wiBeanList && wiBeanList.size() > 0){
            for (WiBean wbTemp : wiBeanList){
                if (status == wbTemp.getStatus()) {
                    tempWbList.add(wbTemp);
                }
            }
        }
        return tempWbList;
    }
    
    public Integer getWpType() {
        return wpType;
    }

    public void setWpType(Integer wpType) {
        this.wpType = wpType;
    }

    public String getWpTypeName() {
        return wpTypeName;
    }

    public void setWpTypeName(String wpTypeName) {
        this.wpTypeName = wpTypeName;
    }

    public int getNoWisWpSizeRunning() {
        if (noWisWpSizeRunning < 1){
            if (null != this.getChWps() && this.getChWps().size() > 0){
                for(WpBean wp : this.getChWps()){
                    noWisWpSizeRunning += wp.getNoWisWpSizeRunning();
                }
            } else if ((null == this.getWis() || this.getWis().size() < 1)
                && (WsConstant.STATUS_CREATED == this.status
                || (WsConstant.STATUS_RUNNING == this.status)) && StringUtils.isBlank(firstCompleteWiDate)){
                noWisWpSizeRunning = 1;
            }
        }
        return noWisWpSizeRunning;
    }

    public void setNoWisWpSizeRunning(int noWisWpSizeRunning) {
        this.noWisWpSizeRunning = noWisWpSizeRunning;
    }
    
    public int getNoWisWpSizeComplete() {
        if (noWisWpSizeComplete < 1){
            if (null != this.getChWps() && this.getChWps().size() > 0){
                for(WpBean wp : this.getChWps()){
                    noWisWpSizeComplete += wp.getNoWisWpSizeComplete();
                }
            } else if ((null == this.getWis() || this.getWis().size() < 1) && (null == this.getParticipantUsers()
                || 1 > this.getParticipantUsers().size()) && WsConstant.STATUS_COMPLETE == this.status
                && StringUtils.isBlank(firstCompleteWiDate)){
                noWisWpSizeComplete = 1;
            }
        }
        return noWisWpSizeComplete;
    }

    public void setNoWisWpSizeComplete(int noWisWpSizeComplete) {
        this.noWisWpSizeComplete = noWisWpSizeComplete;
    }

    public int getAllXbGtWiSize() {
        if (allXbGtWiSize < 1){
            //只需要查找已完成的wi下的协办和沟通，发起沟通和协办的时候会结束当前工作。
            allXbGtWiSize = this.getXbGtAllWiSize(this.getCompleteWiList());
        }
        return allXbGtWiSize;
    }

    public void setAllXbGtWiSize(int allXbGtWiSize) {
        this.allXbGtWiSize = allXbGtWiSize;
    }

    public String getCompleteDate() {
        return completeDate;
    }

    public void setCompleteDate(String completeDate) {
        this.completeDate = completeDate;
    }

    public int getTp() {
        return tp;
    }

    public void setTp(int tp) {
        this.tp = tp;
    }

    public Long getJump2WpId() {
        return jump2WpId;
    }

    public void setJump2WpId(Long jump2WpId) {
        this.jump2WpId = jump2WpId;
    }

    public int getNoWisWpUsersSize() {
        if (noWisWpUsersSize < 1){
            if (null != this.getChWps() && this.getChWps().size() > 0){
                for(WpBean wp : this.getChWps()){
                    noWisWpUsersSize += wp.getNoWisWpUsersSize();
                }
            } else if ((null == this.getWis() || this.getWis().size() < 1 ) && StringUtils.isBlank(firstCompleteWiDate)){
                if (null != this.getParticipantUsers() && this.getParticipantUsers().size() > 0){
                    noWisWpUsersSize = this.getParticipantUsers().size();
                } else {
                    noWisWpUsersSize = 1;
                }
            }
        }
        return noWisWpUsersSize;
    }

    public void setNoWisWpUsersSize(int noWisWpUsersSize) {
        this.noWisWpUsersSize = noWisWpUsersSize;
    }

    public int getIsStart() {
        return isStart;
    }

    public void setIsStart(int isStart) {
        this.isStart = isStart;
    }

	public FiBean getFib() {
		return fib;
	}

	public void setFib(FiBean fib) {
		this.fib = fib;
	}

    public String getRolePathWithBr() {
        if (StringUtils.isNotBlank(rolePathWithBr)){
            //去除第一个"/"
            if (rolePathWithBr.startsWith("/")){
                rolePathWithBr = rolePathWithBr.substring(1);
            }
            //角色列换行
            if (rolePathWithBr.contains("/") && rolePathWithBr.lastIndexOf("/") > rolePathWithBr.lastIndexOf("<br>")){
                rolePathWithBr = (rolePathWithBr.substring(0, rolePathWithBr.lastIndexOf("/")) + "<br>"
                    + rolePathWithBr.substring(rolePathWithBr.lastIndexOf("/") + 1));
            }
        }
        return rolePathWithBr;
    }

    public void setRolePathWithBr(String rolePathWithBr) {
        this.rolePathWithBr = rolePathWithBr;
    }

    public String getNodeNote() {
        return nodeNote;
    }

    public void setNodeNote(String nodeNote) {
        this.nodeNote = nodeNote;
    }

    public String getOriginDefine() {
        return originDefine;
    }

    public void setOriginDefine(String originDefine) {
        this.originDefine = originDefine;
    }

    public String getFirstCompleteWiDate() {
        return firstCompleteWiDate;
    }

    public void setFirstCompleteWiDate(String firstCompleteWiDate) {
        this.firstCompleteWiDate = firstCompleteWiDate;
    }
    
    public String getFinishCtrlName() {
        if(WsConstant.FINISHCTRL_AND.equals(this.getFinishCtrl())){
            finishCtrlName = "会签";
            if(0 == this.getAssignType()){
                finishCtrlName += "并行";
            }else if(1 == this.getAssignType()){
                finishCtrlName += "串行";
            }
        }else if(WsConstant.FINISHCTRL_XOR.equals(this.getFinishCtrl())){
            finishCtrlName = "竞争";
        }
        return finishCtrlName;
    }

    public void setFinishCtrlName(String finishCtrlName) {
        this.finishCtrlName = finishCtrlName;
    }

    public Integer getChangeParticipantsType() {
        return changeParticipantsType;
    }

    public void setChangeParticipantsType(Integer changeParticipantsType) {
        this.changeParticipantsType = changeParticipantsType;
    }

    public String getOpGroupsName() {
        return opGroupsName;
    }

    public void setOpGroupsName(String opGroupsName) {
        this.opGroupsName = opGroupsName;
    }

	public Long getAiId() {
		return aiId;
	}

	public void setAiId(Long aiId) {
		this.aiId = aiId;
	}
}
