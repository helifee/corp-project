package com.xinleju.erp.finance.action;

import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.base.app.bean.Page;
import com.xinleju.erp.frame.exception.ValidateException;
import com.xinleju.erp.frame.itf.IRefModel;
import com.xinleju.erp.frame.itf.ITreeRefModel;
import com.xinleju.erp.frame.models.RefModelFactory;
import com.xinleju.erp.frame.service.FiRefService;
import com.xinleju.erp.frame.utils.CommonUtil;

public class FiRefAction extends BaseAction {

	@Autowired
	private FiRefService fiRefService;
	@Autowired
	private RefModelFactory modelFactory;

	private IRefModel getRefMode() throws ValidateException {
		IRefModel model = null;
		String modelName = getParameter("model");
		if ("assTypeRef".equals(modelName)) {
			model = getAssTypeRef();
		} else if ("boDataRef".equals(modelName)) {
			model = getBODataRef();
		} else if ("fiAccSubRef".equals(modelName)) {
			model = getFiAccSubRef();
		} else if ("bmRef".equals(modelName)) {
			model = getBMRef();
		} else if ("mdCorpRefModel".equals(modelName)) {
			model = modelFactory.getMdCorpRefModel();
		} else {
			model = modelFactory.getRefModel(modelName);
		}
		return model;
	}

	public void openRef() {
		try {
			openRef(getRefMode());
		} catch (ValidateException e) {
			renderError(e.getMessage());
		}
	}

	private IRefModel getFiAccSubRef() throws ValidateException {
		Long fisysinfoid = getParameterLong("fisysinfoid");
		String targsyscorpid = getParameter("targsyscorpid");
		if (fisysinfoid == null || targsyscorpid == null)
			throw new ValidateException("未指定查询的财务系统或公司");
		return modelFactory.getFiAccSubRefModel(fisysinfoid, targsyscorpid);
	}

	private IRefModel getBMRef() throws ValidateException {
		Long fisysinfoid = getParameterLong("fisysinfoid");
		String targsyscorpid = getParameter("targsyscorpid");
		if (fisysinfoid == null || targsyscorpid == null)
			throw new ValidateException("未指定查询的财务系统或公司");
		return modelFactory.getBMRefModel(fisysinfoid, targsyscorpid);
	}

	private IRefModel getAssTypeRef() throws ValidateException {
		Long fisysinfoid = getParameterLong("fisysinfoid");
		String targsyscorpid = getParameter("targsyscorpid");
		if (fisysinfoid == null || targsyscorpid == null)
			throw new ValidateException("未指定查询的财务系统或公司");
		return modelFactory.getAssTypeRefModel(fisysinfoid, targsyscorpid);
	}

	private IRefModel getBODataRef() throws ValidateException {
		Long boid = getParameterLong("boid");
		if (boid == null)
			throw new ValidateException("未指定查询的业务对象");
		return modelFactory.getBODataRefModel(boid);
	}

	public void load() {
		try {
			load(getRefMode());
		} catch (ValidateException e) {
			renderError(e.getMessage());
		}
	}

	private void load(IRefModel model) {
		limit = getParameterInt("rows") == null ? 10 : getParameterInt("rows");
		start = ((getParameterInt("page") == null ? 1 : getParameterInt("page")) - 1) * limit;
		String keyword = getParameter("keyword");
		Page page = fiRefService.getData(model, start, limit, keyword);
		if (model instanceof ITreeRefModel) {
			renderJson(CommonUtil.transTree(page.getItems(), ((ITreeRefModel) model).getJsonTreeTableTemplete()));
		} else {
			renderJson(CommonUtil.transListResult(page.getTotal(), page.getItems()));
		}
	}

	private void openRef(IRefModel model) {
		JSONObject res = new JSONObject();
		res.put("showFields", model.getShowFields());
		res.put("showNames", model.getShowNames());
		res.put("keyField", model.getKeyField());
		res.put("nameField", model.getNameField());
		res.put("codeField", model.getCodeField());
		res.put("title", model.getTitle());
		res.put("isMutil", model.isMutil().booleanValue());
		renderJson(res.toString());
	}

	private void renderError(String message) {
		JSONObject res = new JSONObject();
		res.put("success", false);
		res.put("msg", message);
		renderJson(res.toString());
	}

	public String btn() {
		return "Btn";
	}
}
