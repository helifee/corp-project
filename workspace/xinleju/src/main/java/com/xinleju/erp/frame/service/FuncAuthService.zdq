package com.xinleju.erp.frame.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.ButtonModel;
import javax.transaction.Transactional;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.frame.dao.AuthDao;
import com.xinleju.erp.frame.models.FuncButton;
import com.xinleju.erp.frame.models.FuncModule;
import com.xinleju.erp.frame.models.RoleButton;
import com.xinleju.erp.frame.models.RoleModule;

/**
 * 版权：(C) 版权所有 2000-2014 上海天好电子商务有限公司苏州分公司 功能授权Service <角色->动作点、角色->动作点>
 * 
 * @author zhengxj
 * @version $Id: FuncAuthService.java 6773 2015-08-20 07:14:37Z luocheng $
 * @since
 * @see
 */
@Service
public class FuncAuthService extends BaseService {

	@Autowired
	private AuthDao authDao;

	/**
	 * 角色->动作点 给相应的角色赋予菜单以及按钮权限
	 * 
	 * @author zhengxj
	 * @param createUserId
	 *            当前创建用户id
	 * @param systemCode
	 *            业务模块
	 * @param roleId
	 *            已选角色
	 * @param moduleIds
	 *            菜单ids 
	 * @param btnIds
	 *            按钮ids 
	 */
	@Transactional
	public void save1(Long createUserId, String systemCode, Long roleId, List<Long> moduleIds, List<Long> btnIds) {

		if (roleId != null) {
			delRM(roleId);
			delRB(roleId);
			if (moduleIds != null) {
				for (Long moduleId : moduleIds) {
					RoleModule rm = new RoleModule();
					rm.setCreateUserId(createUserId);
					rm.setRoleId(roleId);
					rm.setFuncModuleId(moduleId);
					rm.setCreateDate(new Date());
					getDao().save(rm);
				}
			}

			if (btnIds != null) {
				for (Long btnId : btnIds) {
					RoleButton rb = new RoleButton();
					rb.setCreateUserId(createUserId);
					rb.setRoleId(roleId);
					rb.setFuncButtonId(btnId);
					rb.setCreateDate(new Date());
					getDao().save(rb);
				}
			}
		}

	}

	@Transactional
	public void saves1(Long createUserId, String systemCode, String roleIds, List<Long> moduleIds, List<Long> btnIds) {

		if (roleIds != null) {
			//先删除已有权限
			String[] ids = roleIds.split(",");
			
			for (String id : ids) {
				if (id != null) {
					delRM(Long.valueOf(id)); 
					delRB(Long.valueOf(id));
				}
			}
			if (moduleIds != null) {
				for (Long moduleId : moduleIds) {

					for (String rid : ids) {
						if (rid != null) {
							RoleModule rm = new RoleModule();
							rm.setCreateUserId(createUserId);
							rm.setRoleId(Long.valueOf(rid));
							rm.setFuncModuleId(moduleId);
							rm.setCreateDate(new Date());
							getDao().save(rm);
						}
					}

				}
			}

			if (btnIds != null) {
				
				for (Long btnId : btnIds) {

					for (String id : ids) {
						if (id != null) {
							RoleButton rb = new RoleButton();
							rb.setCreateUserId(createUserId);
							rb.setRoleId(Long.valueOf(id));
							rb.setFuncButtonId(btnId);
							rb.setCreateDate(new Date());
							getDao().save(rb);
						}

					}

				}
			}
		}

	}

	/**
	 * 动作点->角色 给相应的角色赋予菜单以及按钮权限
	 * 
	 * @author zhengxj
	 * @param createUserId
	 *            当前创建用户id
	 * @param systemCode
	 *            业务模块
	 * @param moduleId
	 *            菜单id
	 * @param rbIds
	 */
	
	@Transactional
	public void save2(Long createUserId, String systemCode, Long moduleId, List<String> reIds, List<String> rbIds) {

		String roleId = null;
		String btnId = null;
		if(moduleId!=null){
			FuncButton fb=getDao().getById(FuncButton.class,moduleId);
			if(fb==null||fb.getId()==null){
				//菜单处理
				delRMByModuleId(moduleId);
				for (String reId : reIds) {
					roleId = reId;
					RoleModule rm = new RoleModule();
					rm.setCreateUserId(createUserId);
					rm.setRoleId(Long.parseLong(roleId));
					rm.setFuncModuleId(moduleId);
					rm.setCreateDate(new Date());
					getDao().save(rm);
				}
			}else{
				//按钮处理
				delRBByButtonId(moduleId);
				for (String reId : reIds) {
					roleId = reId;
					RoleButton rm = new RoleButton();
					rm.setCreateUserId(createUserId);
					rm.setRoleId(Long.parseLong(roleId));
					rm.setFuncButtonId(moduleId);
					rm.setCreateDate(new Date());
					getDao().save(rm);
				}
			}
		}

		/*if(moduleId!=null){
			delRMByModuleId(moduleId);
		}*/
		//处理角色
		/*if (reIds == null) {
			
		} else {
			for (String reId : reIds) {
				roleId = reId;
				RoleModule rm = new RoleModule();
				rm.setCreateUserId(createUserId);
				rm.setRoleId(Long.parseLong(roleId));
				rm.setFuncModuleId(moduleId);
				rm.setCreateDate(new Date());
				getDao().save(rm);
			}
		}*/
		//处理按钮
		//delRB(moduleId);
		//delRBByModuleId(moduleId);
		/*if (rbIds == null) {
			
		} else {
			for (String rbId : rbIds) {
				roleId = rbId.split("_")[0];
				btnId = rbId.split("_")[1];
				delRB(Long.parseLong(roleId), String.valueOf(moduleId));
			}

			for (String rbId : rbIds) {
				roleId = rbId.split("_")[0];
				btnId = rbId.split("_")[1];
				if(btnId!=null){
					RoleButton rb = new RoleButton();
					rb.setCreateUserId(createUserId);
					rb.setRoleId(Long.parseLong(roleId));
					rb.setFuncButtonId(Long.parseLong(btnId));
					rb.setCreateDate(new Date());
					getDao().save(rb);
				}
			}
		}*/
		
	}

	/**
	 * 该角色是否存在当前菜单
	 * 
	 * @author zhengxj
	 * @param roleId
	 *            角色id
	 * @param fmId
	 *            菜单id
	 * @return
	 */
	public boolean isExistRM(Long roleId, Long fmId) {
		List<RoleModule> list = getDao().findByHQL(RoleModule.class, "from RoleModule where roleId = ? and funcModuleId = ?", roleId, fmId);
		return (list == null || list.isEmpty()) ? false : true;
	}

	public Map<Long, RoleModule> getRoleModuleMap(Long roleId) {
		Map<Long, RoleModule> map = new HashMap<Long, RoleModule>();
		if (roleId != null) {
			List<RoleModule> list = getDao().findByHQL(RoleModule.class, "from RoleModule where roleId = ? ", roleId);

			for (RoleModule rm : list) {
				map.put(rm.getFuncModuleId(), rm);
			}
		}

		return map;
	}

	//根据菜单查询已有的角色
	public Map<Long,RoleModule> getFuncModuleMap(Long moduleId) {
		Map<Long,RoleModule> map = new HashMap<Long,RoleModule>();
		if(moduleId != null){
			List<RoleModule> list = getDao().findByHQL(RoleModule.class,"from RoleModule where funcModuleId = ? ", moduleId);
			
			for(RoleModule rm : list){
				map.put(rm.getRoleId(), rm);
			}
		}
		
		return map;
	}
	
	//根据按钮查询已有的角色
	public Map<Long,RoleButton> getRoleMap(Long roleId) {
		Map<Long,RoleButton> map = new HashMap<Long,RoleButton>();
		if(roleId != null){
			List<RoleButton> list = getDao().findByHQL(RoleButton.class,"from RoleButton where funcButtonId = ? ", roleId);
			
			for(RoleButton rm : list){
				map.put(rm.getRoleId(), rm);
			}
		}
		
		return map;
	}
	
	/**
	 * 该角色是否存在当前按钮
	 * 
	 * @author zhengxj
	 * @param roleId
	 *            角色id
	 * @param btnId
	 *            菜单id
	 * @return
	 */
	public boolean isExistRB(Long roleId, Long btnId) {
		List<RoleButton> list = getDao().findByHQL(RoleButton.class, "from RoleButton where roleId = ? and funcButtonId = ?", roleId, btnId);
		return (list == null || list.isEmpty()) ? false : true;
	}

	/**
	 * 该角色是否存在当前按钮 〈简述〉 〈详细描述〉
	 * 
	 * @author zhengxj
	 * @param roleId
	 *            角色id
	 * @param moduleId
	 *            菜单id
	 * @param btnId
	 *            按钮id
	 * @return
	 */
	public boolean isExistRB(Long roleId, Long moduleId, Long btnId) {
		if (roleId == null || moduleId == null || btnId == null) {
			return false;
		}
		List<RoleButton> list = getDao()
				.findByHQL(
						RoleButton.class,
						"from RoleButton rb where rb.roleId = ? and exists(select 'X' from FuncButton fb where fb.id = rb.funcButtonId and fb.funcModuleId = ?) and rb.funcButtonId = ?",
						roleId, moduleId, btnId);
		return (list == null || list.isEmpty()) ? false : true;
	}
	
	/**
	 * 查询当前按钮下有哪些角色
	 * 
	 * @author luocheng
	 * @param btnId
	 *            按钮id
	 * @return
	 */
	public List<Long> getCheckedRoleIdByButtonId(Long btnId) {
		List<Long> list = getDao()
				.findByHQL(
						Long.class,
						"from RoleButton rb where rb.funcButtonId = ? and exists(select 'X' from FuncButton fb where fb.id = rb.funcButtonId)",
						btnId);
		return list;
	}

	public Map<Long, RoleButton> getRoleButtonMap(Long roleId) {
		Map<Long, RoleButton> map = new HashMap<Long, RoleButton>();
		if (roleId != null) {
			List<RoleButton> list = getDao().findByHQL(RoleButton.class, "from RoleButton rb where rb.roleId = ? ", roleId);

			for (RoleButton rb : list) {
				map.put(rb.getFuncButtonId(), rb);
			}
		}
		return map;
	}

	/**
	 * 根据角色id删除菜单
	 * 
	 * @author zhongjun
	 * @param systemCode
	 */
	public void delRM(String systemCode) {
		this.delRM(null, systemCode);
	}

	/**
	 * 根据角色id删除菜单
	 * 
	 * @author zhongjun
	 * @param systemCode
	 */
	public void delRM(Long roleId) {
		this.delRM(roleId, null);
	}

	/**
	 * 根据角色id删除菜单
	 * 
	 * @author zhongjun
	 * @param roleId
	 */
	public void delRM(Long roleId, String systemCode) {
		if (null != roleId || StringUtils.isNotBlank(systemCode)) {
			String sql = "DELETE FROM SM_ROLE_MODULE WHERE 1 = 1";
			List<Object> objList = new ArrayList<Object>();
			if (null != roleId) {
				sql += " and ROLE_ID = ?";
				objList.add(roleId);
			}
			if (StringUtils.isNotBlank(systemCode)) {
				sql += " AND EXISTS (SELECT 'X' FROM SM_FUNC SF WHERE SF.ID = FUNC_MODULE_ID AND SF.MODULE_CODE = ?)";
				objList.add(systemCode);
			}
			getDao().executeSQL(sql, objList.toArray());
		}
	}
	
	/**
	 * 根据菜单id删除与角色关系表
	 * 
	 * @author luocheng
	 * @param moduleId
	 */
	public void delRMByModuleId(Long moduleId) {
		if (null != moduleId){
			String sql = "DELETE FROM SM_ROLE_MODULE WHERE 1 = 1";
			List<Object> objList = new ArrayList<Object>();
			sql += " and func_module_id = ?";
			objList.add(moduleId);
		
			getDao().executeSQL(sql, objList.toArray());
		}
	}
	
	/**
	 * 根据菜单id删除与按钮的关系表
	 * 
	 * @author luocheng
	 * @param moduleId
	 */
	public void delRBByModuleId(Long moduleId) {
		if (null != moduleId){
			String sql = "DELETE FROM SM_ROLE_BUTTON WHERE func_button_id in (select id from SM_OP where FUNC_ID=?)";
			List<Object> objList = new ArrayList<Object>();
			objList.add(moduleId);
		
			getDao().executeSQL(sql, objList.toArray());
		}
	}
	
	/**
	 * 根据按钮id删除与按钮的关系表
	 * 
	 * @author luocheng
	 * @param moduleId
	 */
	public void delRBByButtonId(Long buttonId) {
		if (null != buttonId){
			String sql = "DELETE FROM SM_ROLE_BUTTON WHERE func_button_id=?";
			List<Object> objList = new ArrayList<Object>();
			objList.add(buttonId);
		
			getDao().executeSQL(sql, objList.toArray());
		}
	}

	/**
	 * 根据角色id删除按钮
	 * 
	 * @author zhongjun
	 * @param roleId
	 */
	public void delRB(String systemCode) {
		this.delRB(null, systemCode);
	}

	/**
	 * 根据角色id删除按钮
	 * 
	 * @author zhongjun
	 * @param roleId
	 */
	public void delRB(Long roleId) {
		this.delRB(roleId, null);
	}

	/**
	 * 根据角色id删除按钮
	 * 
	 * @author zhongjun
	 * @param roleId
	 */
	public void delRB(Long roleId, String systemCode) {
		if (null != roleId || StringUtils.isNotBlank(systemCode)) {
			String sql = "DELETE FROM SM_ROLE_BUTTON WHERE 1 = 1";
			List<Object> objList = new ArrayList<Object>();
			if (null != roleId) {
				sql += " and ROLE_ID = ?";
				objList.add(roleId);
			}
			if (StringUtils.isNotBlank(systemCode)) {
				sql += " AND EXISTS(SELECT 'X' FROM SM_OP OP,SM_FUNC SF WHERE OP.FUNC_ID = SF.ID AND OP.ID = FUNC_BUTTON_ID AND SF.MODULE_CODE = ?)";
				objList.add(systemCode);
			}
			getDao().executeSQL(sql, objList.toArray());
		}
	}

	/**
	 * 根据角色id获取菜单ids列表 〈简述〉 〈详细描述〉
	 * 
	 * @author zhengxj
	 * @param roleIds
	 *            角色ids
	 * @return
	 */
	public List<Long> getRMIdsList(String roleIds, String systemCode) {
		List<Long> list = new ArrayList<Long>(0);
		for (String roleId : roleIds.split(",")) {
			List<Long> roleIdList = authDao.getRMIdsList(Long.parseLong(roleId), systemCode);
			for (Long _roleId : roleIdList) {
				if (!list.contains(_roleId)) {
					list.add(_roleId);
				}
			}
		}
		return list;
	}

	/**
	 * 根据角色id获取按钮ids列表 〈简述〉 〈详细描述〉
	 * 
	 * @author zhengxj
	 * @param roleIds
	 *            角色ids
	 * @return
	 */
	public List<Long> getRBIdsList(String roleIds, String systemCode) {
		List<Long> list = new ArrayList<Long>(0);
		for (String roleId : roleIds.split(",")) {
			List<Long> btnIdList = authDao.getRBIdsList(Long.parseLong(roleId), systemCode);
			for (Long _roleId : btnIdList) {
				if (!list.contains(_roleId)) {
					list.add(_roleId);
				}
			}
		}
		return list;
	}

	/**
	 * 根据角色id获取按钮ids列表 〈简述〉 〈详细描述〉
	 * 
	 * @author zhengxj
	 * @param roleIds
	 *            角色ids
	 * @return
	 */
	public List<String> getRBIdsList(String roleIds, Long moduleId, String systemCode) {
		List<String> list = new ArrayList<String>(0);
		for (String roleId : roleIds.split(",")) {
			List<Long> btnIdList = authDao.getRBIdsList(Long.parseLong(roleId), moduleId, systemCode);
			for (Long btnId : btnIdList) {
				if (!list.contains(roleId + "_" + btnId)) {
					list.add(roleId + "_" + btnId);
				}
			}
		}
		return list;
	}

	/**
	 * 获取菜单列表 〈详细描述〉
	 * 
	 * @author zhengxj
	 * @param systemCode
	 *            业务模块code
	 * @param parentId
	 *            父菜单id
	 * @return
	 */
	public List<FuncModule> getFuncModuleList(String systemCode, Long parentId) {
		return authDao.getFuncModuleList(systemCode, parentId);
	}

	/**
	 * 获取增删改查按钮 〈详细描述〉
	 * 
	 * @author zhengxj
	 * @param moduleId
	 *            菜单id
	 * @return
	 */
	public List<FuncButton> getFuncButtonList(Long moduleId) {
		return authDao.getFuncButtonList(moduleId);
	}

}
