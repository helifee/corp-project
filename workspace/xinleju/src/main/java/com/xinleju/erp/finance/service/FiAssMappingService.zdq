package com.xinleju.erp.finance.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import com.xinleju.erp.base.app.bean.Page;
import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.base.utils.StringHelper;
import com.xinleju.erp.finance.models.FiAssDetailMapping;
import com.xinleju.erp.finance.models.FiAssMapping;
import com.xinleju.erp.finance.models.FiVoucherTempType;
import com.xinleju.erp.finance.utils.ExcelHandlerUtil;
import com.xinleju.erp.finance.utils.IExcelHandler;
import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.flow.service.api.extend.dto.DeptDTO;
import com.xinleju.erp.flow.service.api.extend.dto.UserDTO;
import com.xinleju.erp.flow.service.api.utils.DeptUtils;
import com.xinleju.erp.flow.service.api.utils.UserUtils;
import com.xinleju.erp.form.utils.DbType;
import com.xinleju.erp.frame.dao.DeptDao;
import com.xinleju.erp.frame.dao.PartyEntityDao;
import com.xinleju.erp.frame.dao.PartyStructDao;
import com.xinleju.erp.frame.dao.UserDao;
import com.xinleju.erp.frame.models.Dept;
import com.xinleju.erp.frame.models.PartyEntity;

/**
 * 辅助核算对照
 * @author songjunjie
 */
@Service
public class FiAssMappingService extends BaseService implements IExcelHandler{
	
	@Autowired
    private UserDao userDao; 
	@Autowired
	PartyEntityDao partyEntityDao;
	@Autowired
	private DeptDao deptDao;
	@Autowired
	PartyStructDao partyStructDao;
	@Autowired
	private JdbcTemplate jt;
	
	/**
	 * 保存FiAssMapping辅助核算对照
	 * @param fiAss
	 */
	public void saveFiAssMapping(FiAssMapping fiAss){
		
		this.getDao().saveOrUpdate(fiAss);
	}
	
	public FiAssMapping getFiAssMappingById(Long id){
		return	this.getDao().getById(FiAssMapping.class, id);
	}
	
	public List<FiAssMapping> getAllFiAssMapping(){
		return this.getDao().findAll(FiAssMapping.class);
	}
	/**
	 * 根据账套ID获取辅助核算
	 * @param accountSetId
	 * @return
	 */
	public List<FiAssMapping> getFiAssMappingsByAccountSetId(Long accountSetId){
		List<FiAssMapping> result = getDao().findByHQL(FiAssMapping.class, "from FiAssMapping where accountSetId="+accountSetId + " order by sort asc");
		return result;
	}
	/**
	 * 根据账套ID和系统id获取辅助核算
	 * @param accountSetId
	 * chc add 2016.10.20
	 * @return
	 */
	public List<FiAssMapping> getFiAssMappingsByAccountSetId(Long accountSetId,Long sysId){
		List<FiAssMapping> result = getDao().findByHQL(FiAssMapping.class, "from FiAssMapping where accountSetId="+accountSetId + " and sysId =" + sysId + " order by sort asc");
		return result;
	}
	/**
	 * 保存辅助核算明细对照
	 */
	public void saveFiAssDetailMapping(FiAssDetailMapping fiAssDetailMapping){
	
		this.getDao().saveOrUpdate(fiAssDetailMapping);
	}
	
	/**
	 * 保存辅助核算明细对照
	 */
	public void saveAllFiAssDetailMapping(List<FiAssDetailMapping> fiAssDetailMappings){
	
		this.getDao().saveOrUpdateAll(fiAssDetailMappings);
	}
	/**
	 * 删除辅助核算对照ById
	 * @param id
	 */
	public void deleteFiAssMapping(Long id){
	
		this.getDao().delete(FiAssMapping.class, id);
	}
	
	public void delete(Long[] ids){
		String hql = "delete FiAssMapping s where s.id = ?";
		for(Long id : ids){
			this.getDao().execute(hql, id);
		}
	}
	
	//根据业务code业务name取核算代码与名称
	public FiAssDetailMapping loadDetailByBizCodeAndName(Long id,String code,String name){
		String hql="from FiAssDetailMapping where assMappingId="+id+" and objectItemCode='"+code+"' and objectItemName='"+name+"'";
		return getDao().findFirstByHQL(FiAssDetailMapping.class, hql);
	}
	
	//根据业务code业务name取核算代码与名称
	public FiAssDetailMapping loadDetailByCode(String code){
		String hql="from FiAssDetailMapping where objectItemCode='"+code+"' ";
		return getDao().findFirstByHQL(FiAssDetailMapping.class, hql);
	}
	
	//根据辅助核算名称获取辅助核算ID
	public Long loadFiAssByName(String name){
		String hql="from FiAssMapping where assName='"+name+"'";
		FiAssMapping fm = getDao().findFirstByHQL(FiAssMapping.class, hql);
		
		return fm.getId();
	}
	
	//根据辅助核算名称获取辅助核算ID
	public Long loadFiAssByName(String name,Long sysId,Long companyId){
		String hql="from FiAssMapping where assName='"+name+"' and accountSetId="+sysId +" and companyId="+companyId;
		FiAssMapping fm = getDao().findFirstByHQL(FiAssMapping.class, hql);
		
		return fm.getId();
	}
	
	/**
	 * 根据账套id和业务对象名字查询出辅助核算对照
	 * @param accountSetId
	 * @param bizObjectNmae
	 * @return
	 */
	public FiAssMapping findFiAssMapping(Long accountSetId,String bizObjectNmae,Long sysId,Long companyId){
		String hql = "FROM FiAssMapping WHERE assName = ? ";
		if(accountSetId != null){//chc add 2016.7.6
			hql += " and accountSetId="+accountSetId;
		}
		if(sysId != null){//chc add 2016.7.6
			hql += " and sysId="+sysId;
		}
		if(companyId!=null){
			hql += " and companyId="+companyId;
		}
		List<FiAssMapping> list = this.getDao().findByHQL(FiAssMapping.class, hql,bizObjectNmae);
		if(list!=null && !list.isEmpty()){
			return list.get(0);
		}
		return null;
	}
	
	/**
	 * 根据账套id和业务对象名字查询出辅助核算对照
	 * @param accountSetId
	 * @param bizObjectNmae
	 * @return
	 */
	public List<FiAssMapping> findFiAssMappingList(Long accountSetId,String bizObjectNmae,Long sysId,Long companyId){
		String hql = "FROM FiAssMapping WHERE assName = ? ";
		if(accountSetId != null){//chc add 2016.7.6
			hql += " and accountSetId="+accountSetId;
		}
		if(sysId != null){//chc add 2016.7.6
			hql += " and sysId="+sysId;
		}
		if(companyId!=null){
			hql += " and companyId="+companyId;
		}
		List<FiAssMapping> list = this.getDao().findByHQL(FiAssMapping.class, hql,bizObjectNmae);
		return list;
	}

	/**
	 * 根据辅助核算对照，返回对照明细
	 * @param assId
	 * @return
	 */
	public List<FiAssDetailMapping>  getFiAssDetailMappingByAssId(Long assId){
		String hql = "FROM FiAssDetailMapping WHERE assMappingId = ?";
		List<FiAssDetailMapping> list = this.getDao().findByHQL(FiAssDetailMapping.class, hql, assId);
		return list;
	}
	
	/**
	 * 根据辅助核算对照，返回对照明细
	 * @param assId
	 * @return
	 */
	public List<FiAssDetailMapping>  getFiAssDetailMappingByAssDetailName(Long assId,String detailname){
		String hql = "FROM FiAssDetailMapping WHERE assMappingId = ? and assItemName like '%"+detailname+"%'";
		List<FiAssDetailMapping> list = this.getDao().findByHQL(FiAssDetailMapping.class, hql, assId);
		return list;
	}
	
	/**
	 * 根据公司ID获取人员档案
	 * @param companyId
	 * @return
	 */
	public List<UserDTO> getUsersByCompanyId(Long companyId){
		List<UserDTO> userDtos = null;
		List<PartyEntity> psList = partyEntityDao.getPartyEntityListByRefIdAndPartyEntityTypes(companyId,new String[]{"company"});
		if(psList!=null && psList.size()>0){
			Page page = userDao.findUserByOrgnId(psList.get(0).getId(),null,0,1000000000,true);
			userDtos = UserUtils.buildUserDtoList(page.getItems());
		}
		return userDtos;
	}
	
	/**
	 * 获取所有的
	 * TODO 后面需要确定 按照公司获取
	 * @return
	 */
	public List<Dept> getDepts(){
		return deptDao.getAllDepts(true);
	}
	
	
	public List<DeptDTO> getDeptsByCompanyId(Long companyId){
		List<Long> pss = partyStructDao
				.findPartyStructRefIdsByParentPartyEntityRefIds(
						new String[] { companyId.toString() }, "company","department");

		DeptUtils.buildDeptDtoList(deptDao.getDeptByIds(false,
				StringHelper.join(pss, "','").split("','")));
		
		
		List<DeptDTO> depts = DeptUtils.buildDeptDtoList(deptDao.getDeptByIds(false,
				StringHelper.join(pss, "','").split("','")));
		
		return depts;
	}
	
	/**
	 * 根据辅助核算名称获取辅助核算字段
	 * TODO 暂时硬编码  
	 * @param assName
	 * @return
	 */
	public String getFieldByAssName(String assName,Long sysId){
		String field = "";
		if(assName.equals(FiVoucherCreateService.ASS_PERSON)){
			field = "vapplicant";
			//field = "vreceiveunit";
		}
		if(assName.equals(FiVoucherCreateService.ASS_DEPT)){
			field = "deptid";
		}
		if(assName.equals(FiVoucherCreateService.ASS_PUBLLER)){//ASS_SUPPLIER
			if(sysId==2){
				field = "partyBOrgn_Id";
			}else{
				field = "skunitid";
			}
		}
		if(assName.equals(FiVoucherCreateService.ASS_SUPPLIER)){
			if(sysId==2){
				field = "partyBOrgn_Id";
			}else{
				field = "skunitid";
			}
		}
		if(assName.equals(FiVoucherCreateService.ASS_PUBLLER_LJTH)){
			if(sysId==2){
				field = "partyBOrgn_Id";
			}else{
				field = "skunitid";
			}
		}
		if(assName.equals(FiVoucherCreateService.ASS_EXCENTER)){
			field = "ec";
		}
        if(assName.equals(FiVoucherCreateService.ASS_CASHFLOWCASE)){
        	field = "cf";
		}
        if(assName.equals(FiVoucherCreateService.ASS_BANKACCONT)){
        	if(sysId == 1){
        		field = "inassid";
        	}else{
        		field = "acount_Number";
        	}
		}
        if(assName.equals(FiVoucherCreateService.ASS_COLLECTION_TYPE)){
        	if(sysId == 1){
        		field = "fundid";
        	}
		}
        if(assName.equals(FiVoucherCreateService.ASS_HOUSE_WORD)){
        	if(sysId == 2){
        		field = "project_branch_id";
        	}else{
        		field = "projectid";
        	}
		}
        
        if(assName.equals(FiVoucherCreateService.ASS_PROJECT_BRANCE)){
        	if(sysId == 2){
        		field = "project_branch_id";
        	}else{
        		field = "projectid";
        	}
		}
      //销售添加 2016.10.27 chc
        if(assName.equals(FiVoucherCreateService.ASS_PROJECT_INFO)){
        	if(sysId == 2){
        		field = "project_branch_id";
        	}else{
        		field = "projectid";
        	}
		}
        if(assName.equals(FiVoucherCreateService.ASS_TYPE_INFO)){
        	field = "typeid";
		}
        if(assName.equals(FiVoucherCreateService.ASS_HOUSE_INFO)){
        	field = "houseno";
		}
        //河北添加 2016.9.22 chc
		if(assName.equals(FiVoucherCreateService.ASS_CO_OBJECT)){
			if(sysId == 2){
        		field = "project_branch_id";
        	}else{
        		field = "projectid";
        	}
		}
		//香港置地添加 2016.11.25 chc  ASS_PROJECT_HZ
		if(assName.equals(FiVoucherCreateService.ASS_PROJECT_HZ)){
        	field = "subjectid";
		}
		if(assName.equals(FiVoucherCreateService.ASS_CONTRACT)){
			field = "contractCode";
		}
		return field;
	}
	
	/**
	 * excel页签名
	 * @return
	 */
	@Override
	public String getSheetName() {
		// TODO Auto-generated method stub
		return "辅助核算与业务对象对应";
	}
	/**
	 * 导出的excel字段名称
	 * @return
	 */
	@Override
	public String[] getHeadItemsNameAry() {
		// TODO Auto-generated method stub
		//id,ass_name,account_set_id,sys_id，biz_object_id,biz_object_name,is_direct_code
		String[] str = {"id","核算名称","账套id","所属系统id","业务对象id","业务对象名称","传输类型id"};
		return str;
	}

	/**
	 * 导出的excel字段属性名，class中必须存在此属性
	 * @return
	 */
	@Override
	public String[] getHeadItemsCodeAry() {
		// TODO Auto-generated method stub
		String[] str = {"id","assName","accountSetId","sysId","bizObjectId","bizObjectName","isDirectCode"};
		return str;
	}

	/**
	 * 导出的excel字段在表格中占的宽度，与code一一对应，默认100，如不想显示比如ID字段，可设置为0。
	 * @return
	 */
	@Override
	public Integer[] getHeadItemsLength() {
		// TODO Auto-generated method stub
		Integer[] lengths = { 100, 100, 100, 100, 100, 100, 100};
		return lengths;
	}

	/**
	 * 导出字段在excel中是否红色显示 <br/> true:是（字段值不导出），false：否，null：红色、且字段值导出
	 * @return
	 */
	@Override
	public Boolean[] getHeadItemsColor() {
		// TODO Auto-generated method stub
		Boolean[] bool = { false, false, false, false, false, false, false};
		return bool;
	}

	/**
	 * 导出的excel实体类名
	 * @return
	 */
	@Override
	public Class<?> getEntityClass() {
		// TODO Auto-generated method stub
		return FiAssMapping.class;
	}

	/**
	 * 根据账套ID、系统id、公司id获取辅助核算
	 * @param accountSetId
	 * @return
	 */
	public List<FiAssMapping> getFiAssMappings(long sysId,Long accountSetId,Long companyId){
		List<FiAssMapping> result = getDao().findByHQL(FiAssMapping.class, "from FiAssMapping where accountSetId="+accountSetId + " and sysId= " + sysId + " and companyId=" + companyId + " order by sort asc");
		return result;
	}
	
	/**
	 * 导出到excel的具体数据
	 * @return
	 */
	@Override
	public List<?> getEntityList(IExcelHandler handler,String accountSetCode,long sysId,Long accountSetId,Long companyId) {
		// TODO Auto-generated method stub
		try{
			FiAssMappingService fiAssMappingService = (FiAssMappingService)handler;
			List<FiAssMapping> fiFiAssMappingList = null;
			if(StringUtils.isNotBlank(accountSetCode)){
				fiFiAssMappingList = fiAssMappingService.getFiAssMappings(sysId,accountSetId,companyId);
			}
			return fiFiAssMappingList;
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 表格最上方的提示列表，为String集合，多条提示逐行显示
	 * @return
	 */
	@Override
	public List<String> getTipsList() {
		// TODO Auto-generated method stub
		List<String> tips = new ArrayList<String>();
		tips.add("说明：数据导出模板对格式有严格要求，请直接录入相关值，禁止增加或删除列，禁止删除此行及标题行，否则将导入失败！");
		return tips;
	}

	@Override
	public Map<String, Integer[]> getCellJoinMap() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?> getImpClass() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String[] getImportColumns() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String[] getImportHeadItemsName() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?>[] getImportColumnsType() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Boolean[] getColsIsImp() {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public int importPr(String accountSetCode,String sysId,String companyCode,String accountSetId,HSSFSheet sheet,Long companyId){
		int rowNum = sheet.getLastRowNum();// 行  
    	try{
    		if(DbType.getType().contains("dbo.")){
    			jt.execute("SET IDENTITY_INSERT [dbo].[fi_ass_mapping] ON");
    		}
			for(int k=2;k<=rowNum;k++){
	    		HSSFRow hssfRow = sheet.getRow(k);
	    		if (hssfRow == null) {
					continue;
				}
	    		Long id = null;
	    		if(StringUtils.isNotBlank(hssfRow.getCell(0)+"")){
	    			id = Long.valueOf(ExcelHandlerUtil.cutIdLength(ExcelHandlerUtil.getValue(hssfRow.getCell(0))+"")+companyId+accountSetId);
	    		}
	    		//"id","assName","accountSetId","sysId","bizObjectId","bizObjectName","isDirectCode"
	    		if(DbType.getType().contains("dbo.")){
		    		String sql = "insert into fi_ass_mapping(id,ass_name,account_set_id,sys_id,biz_object_id,biz_object_name,is_direct_code,create_date,status,company_id) VALUES (?,?,?,?,?,?,?,?,?,?)";
		    		jt.update(sql, id,ExcelHandlerUtil.getValue(hssfRow.getCell(1))+"",
		    				Long.valueOf(accountSetId),Long.valueOf(sysId),
		    				ExcelHandlerUtil.getValue(hssfRow.getCell(4))+"",ExcelHandlerUtil.getValue(hssfRow.getCell(5))+"",
		    				ExcelHandlerUtil.getValue(hssfRow.getCell(6))+"",new Date(),0,companyId);
	    		}else{
	    			String sql = "insert IGNORE into fi_ass_mapping(id,ass_name,account_set_id,sys_id,biz_object_id,biz_object_name,is_direct_code,create_date,status,company_id) VALUES (?,?,?,?,?,?,?,?,?,?)";
		    		getDao().executeSQL(sql, id,ExcelHandlerUtil.getValue(hssfRow.getCell(1))+"",
		    				Long.valueOf(accountSetId),Long.valueOf(sysId),
		    				ExcelHandlerUtil.getValue(hssfRow.getCell(4))+"",ExcelHandlerUtil.getValue(hssfRow.getCell(5))+"",
		    				ExcelHandlerUtil.getValue(hssfRow.getCell(6))+"",new Date(),0,companyId);
	    		}
	    	} 
			if(DbType.getType().contains("dbo.")){
				jt.execute("SET IDENTITY_INSERT [dbo].[fi_ass_mapping] OFF");
			}
			return 2;
    	}catch(Exception e){
    		e.printStackTrace();
    		return 3;
    	}
	}
}
