package com.xinleju.erp.flow.models;

import java.math.BigDecimal;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Formula;

import com.xinleju.erp.base.app.config.App;
import com.xinleju.erp.base.app.models.IdEntity;
import com.xinleju.erp.base.app.service.ICommonService;
import com.xinleju.erp.base.app.utils.HibernateUtils;
import com.xinleju.erp.form.utils.DbType;

/**
 * 
 * 
 * <p>
 * </p>
 * <p>
 * </p>
 * 
 * @author 孙朝辉
 * @version $Id: Ac.java 2309 2015-01-09 03:23:33Z zhongjun $
 * @since
 * 
 */

@Entity
@Table(name = "tf_ac")
@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)
public class Ac extends IdEntity {
    private Integer canWithdraw;
    
    public static final int ACTYPE_OUT_TASK = 2;
    
    
    public static final int ACTYPE_AUTO = 9;
    /**
     * 序列化ID
     */
    private static final long serialVersionUID = 3484014327175167464L;
    
    /**
     * 分发方式（0，并发，1：串行）
     */
    
    private Integer assignType;
    
    
    /**
     * <option value="0">竞争</option>
     * <option value="1">串行</option>
     * <option value="2">会审</option>
     */
    private Integer nodeType;

    /**
     * 是否隐藏审批意见（对前序环节隐藏）
     */
    private Integer isHideNote;

    
    /**
     * 是否忽略发起人
     */
    private Integer ignoreFiOwner;
    
    /**
     * 活动类型
     */
    private Integer acType;
    
    /**
     * 优先级
     */
    @Transient
    private Integer acPriority;

    /**
     * 默认分支
     */
    @Transient
    private Integer isDefault;

    /**
     * 是否能到达
     */
    @Transient
    private Integer canPass;

    /**
     * 操作列表
     */
    @Column(length = HibernateUtils.COLOUMN_LENGTH_500)
    private String ops;
    
    /**
     * 操作列表
     */
    @Column(length = HibernateUtils.COLOUMN_LENGTH_500)
    private String opGroups;
    
//    @Formula("(select min(tog.name) from tf_op_group tog"
//        + " where "+DbType.getType()+"locate("DbType.getType()+"concat(tog.id,','),"DbType.getType()+"concat("+DbType.getType()+"ifnull(op_groups,''),',')) > 0"
//        + " )")
    private String opGroupsName;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "op_groups", updatable = false, insertable = false)
    private OpGroup opGroup;

	/**
     * 加签策略
     */
    private Integer jqStrategy;

    /**
     * 手工排序
     */
    private Integer sort;

    /**
     * 拓扑排序
     */
    private Integer tp;

    /**
     * 设计节点ID
     */
    private String nodeId;

    /**
     * 节点名
     */
    private String nodeName;

    /**
     * 流程编码
     */
    private String flowCode;

    /**
     * 流程版本
     */
    private String flowVersion;

    /**
     * 外部编码
     */
    private String outCode;

    /**
     * 是否启用时限
     */
    private Integer isTimelimit;
    /**
     * 时限
     */
    private BigDecimal timeLimit;

    /**
     * 时限单位
     */
    private Integer timeUnit;

    /**
     * 计时开始
     */
    private Integer isTimingStart;

    /**
     * 计时结束
     */
    private Integer isTimingEnd;

    /**
     * 风险点
     */
    private Integer isRiskPoint;

    /**
     * 风险点描述
     */
    @Lob
    private String riskNote;

    /**
     * 环节参与人
     */
    private String acPaticipant;

    /**
     * 是否启用抄送
     */
    private Integer isCs;

    /**
     * 抄送目标:格式化参与人字符串
     */
    @Column(length = HibernateUtils.COLOUMN_LENGTH_1500)
    private String csList;

    /**
     * 参与人:格式化参与人字符串
     */
    @Column(length = HibernateUtils.COLOUMN_LENGTH_1500)
    private String paticipantList;

    /**
     * 自定义参与人:接口实现
     */
    @Column(length = HibernateUtils.COLOUMN_LENGTH_1500)
    private String classPaticipant;

    /**
     * 结束工作控制
     */
    private String finishCtrl;

    /**
     * 开始控制
     */
    private String startCtrl;

    /**
     * 分支控制
     */
    private String forkCtrl;

    /**
     * 开始条件
     */
    private String startCondition;

    /**
     * 结束条件
     */
    private String finishCondition;

    /**
     * 是否自动节点
     */
    private Integer isAuto;

    /**
     * 是否自由流转 页面控制参数:如果流转出事xor型,那么必须是 多选一,从多个环节中选择出一个
     */
    private Integer isFree;

    /**
     * 自由流转类型
     */
    private Integer freeType;

    /**
     * 选择参与人方式
     */
    private Integer participantsSelectStrategy;

    /**
     * Ac.NodeId使用逗号分隔符分割
     */
    private String participantsSelectAt;
    private String participantsMustSelectAt;


    /**
     * 可选择多节点流转
     */
    private Integer isMultiFlow;

    /**
     * 多节点参与人
     */
    private Integer isMultiPaticitpant;

    /**
     * 可以退回
     */
    private Integer isBack;

    /**
     * 可退回节点设置
     */
    private String backActivities;

    /**
     * 直接后续NodeId
     */
    @Column(length = HibernateUtils.COLOUMN_LENGTH_500)
    private String next_1;

    /**
     * 所有后续NodeId
     */
    @Column(length = HibernateUtils.COLOUMN_LENGTH_500)
    private String next_a;

    /**
     * 直接前序NodeId
     */
    @Column(length = HibernateUtils.COLOUMN_LENGTH_500)
    private String from_1;

    /**
     * 所有前序NodeId
     */
    @Column(length = HibernateUtils.COLOUMN_LENGTH_1500)
    private String from_a;

    /**
     * 直接前序TrId
     */
    @Column(length = HibernateUtils.COLOUMN_LENGTH_500)
    private String next_tr_1;
    /**
     * 直接后续TrId
     */
    @Column(length = HibernateUtils.COLOUMN_LENGTH_500)
    private String from_tr_1;

    /**
     * 所有后续TrId
     */
    @Column(length = HibernateUtils.COLOUMN_LENGTH_1500)
    private String next_tr_a;

    /**
     * 所有前序TrId
     */
    @Column(length = HibernateUtils.COLOUMN_LENGTH_1500)
    private String from_tr_a;

    /**
     * 直接后续Tr的个数
     */
    private Integer next_tr_1_size;

    /**
     * 直接前序Tr的个数
     */
    private Integer from_tr_1_size;

    /**
     * 是否开始节点:没有前序节点
     * 
     */
    private int isStart;

    /**
     * 是否结束节点:没有后续节点
     */
    private int isEnd;
    
    /**
     * 节点类型（
     * <at text="发起人" value="fq"></at>
     * <at text="会签" value="hq"></at>
     * <at text="校稿" value="jg"></at>
     * <at text="审核" value="sh"></at>
     * <at text="审批" value="sp"></at>
     * <at text="归档" value="gd"></at>）
     */
    private String at;
    
    /**
     * 节点描述
     */
    private String nodeNote;
    
    /**
     * 结束标示（用于流程预期标示）
     */
    private String endTag;

    
    public Integer getTp() {
        return tp;
    }

    public void setTp(Integer tp) {
        this.tp = tp;
    }

    public Integer getSort() {
        return sort;
    }

    public void setSort(Integer sort) {
        this.sort = sort;
    }

    public String getNodeId() {
        return nodeId;
    }

    public void setNodeId(String nodeId) {
        this.nodeId = nodeId;
    }

    public String getNodeName() {
        return nodeName;
    }

    public void setNodeName(String nodeName) {
        this.nodeName = nodeName;
    }

    public String getFlowCode() {
        return flowCode;
    }

    public void setFlowCode(String flowCode) {
        this.flowCode = flowCode;
    }

    public String getFlowVersion() {
        return flowVersion;
    }

    public void setFlowVersion(String flowVersion) {
        this.flowVersion = flowVersion;
    }

    public String getOutCode() {
        return outCode;
    }

    public void setOutCode(String outCode) {
        this.outCode = outCode;
    }

    public Integer getIsTimelimit() {
        return isTimelimit;
    }

    public void setIsTimelimit(Integer isTimelimit) {
        this.isTimelimit = isTimelimit;
    }

    public Integer getIsTimingStart() {
        return isTimingStart;
    }

    public void setIsTimingStart(Integer isTimingStart) {
        this.isTimingStart = isTimingStart;
    }

    public Integer getIsTimingEnd() {
        return isTimingEnd;
    }

    public void setIsTimingEnd(Integer isTimingEnd) {
        this.isTimingEnd = isTimingEnd;
    }

    public Integer getIsRiskPoint() {
        return isRiskPoint;
    }

    public void setIsRiskPoint(Integer isRiskPoint) {
        this.isRiskPoint = isRiskPoint;
    }

    public String getRiskNote() {
        return riskNote;
    }

    public void setRiskNote(String riskNote) {
        this.riskNote = riskNote;
    }

    public String getAcPaticipant() {
        return acPaticipant;
    }

    public void setAcPaticipant(String acPaticipant) {
        this.acPaticipant = acPaticipant;
    }

    public String getPaticipantList() {
        return paticipantList;
    }

    public void setPaticipantList(String paticipantList) {
        this.paticipantList = paticipantList;
    }

    public String getClassPaticipant() {
        return classPaticipant;
    }

    public void setClassPaticipant(String classPaticipant) {
        this.classPaticipant = classPaticipant;
    }

    public String getFinishCtrl() {
        return finishCtrl;
    }

    public void setFinishCtrl(String finishCtrl) {
        this.finishCtrl = finishCtrl;
    }

    public String getStartCondition() {
        return startCondition;
    }

    public void setStartCondition(String startCondition) {
        this.startCondition = startCondition;
    }

    public String getFinishCondition() {
        return finishCondition;
    }

    public void setFinishCondition(String finishCondition) {
        this.finishCondition = finishCondition;
    }

    public Integer getIsAuto() {
        return isAuto;
    }

    public void setIsAuto(Integer isAuto) {
        this.isAuto = isAuto;
    }

    public Integer getIsFree() {
        return isFree;
    }

    public void setIsFree(Integer isFree) {
        this.isFree = isFree;
    }

    public Integer getFreeType() {
        return freeType;
    }

    public void setFreeType(Integer freeType) {
        this.freeType = freeType;
    }

    public Integer getIsMultiFlow() {
        return isMultiFlow;
    }

    public void setIsMultiFlow(Integer isMultiFlow) {
        this.isMultiFlow = isMultiFlow;
    }

    public Integer getIsMultiPaticitpant() {
        return isMultiPaticitpant;
    }

    public void setIsMultiPaticitpant(Integer isMultiPaticitpant) {
        this.isMultiPaticitpant = isMultiPaticitpant;
    }

    public Integer getIsBack() {
        return isBack;
    }

    public void setIsBack(Integer isBack) {
        this.isBack = isBack;
    }

    public String getBackActivities() {
        return backActivities;
    }

    public void setBackActivities(String backActivities) {
        this.backActivities = backActivities;
    }

    public String getNext_1() {
        return next_1;
    }

    public void setNext_1(String next_1) {
        this.next_1 = next_1;
    }

    public String getNext_a() {
        return next_a;
    }

    public void setNext_a(String next_a) {
        this.next_a = next_a;
    }

    public String getFrom_1() {
        return from_1;
    }

    public void setFrom_1(String from_1) {
        this.from_1 = from_1;
    }

    public String getFrom_a() {
        return from_a;
    }

    public void setFrom_a(String from_a) {
        this.from_a = from_a;
    }

    public String getNext_tr_1() {
        return next_tr_1;
    }

    public void setNext_tr_1(String next_tr_1) {
        this.next_tr_1 = next_tr_1;
    }

    public String getFrom_tr_1() {
        return from_tr_1;
    }

    public void setFrom_tr_1(String from_tr_1) {
        this.from_tr_1 = from_tr_1;
    }

    public Integer getNext_tr_1_size() {
        return next_tr_1_size;
    }

    public void setNext_tr_1_size(Integer next_tr_1_size) {
        this.next_tr_1_size = next_tr_1_size;
    }

    public Integer getFrom_tr_1_size() {
        return from_tr_1_size;
    }

    public void setFrom_tr_1_size(Integer from_tr_1_size) {
        this.from_tr_1_size = from_tr_1_size;
    }

    public int getIsStart() {
        return isStart;
    }

    public void setIsStart(int isStart) {
        this.isStart = isStart;
    }

    public int getIsEnd() {
        return isEnd;
    }

    public void setIsEnd(int isEnd) {
        this.isEnd = isEnd;
    }

    public String getStartCtrl() {
        return startCtrl;
    }

    public void setStartCtrl(String startCtrl) {
        this.startCtrl = startCtrl;
    }

    public String getForkCtrl() {
        return forkCtrl;
    }

    public void setForkCtrl(String forkCtrl) {
        this.forkCtrl = forkCtrl;
    }

    public BigDecimal getTimeLimit() {
        return timeLimit;
    }

    public void setTimeLimit(BigDecimal timeLimit) {
        this.timeLimit = timeLimit;
    }

    public Integer getTimeUnit() {
        return timeUnit;
    }

    public void setTimeUnit(Integer timeUnit) {
        this.timeUnit = timeUnit;
    }

    public String getNext_tr_a() {
        return next_tr_a;
    }

    public void setNext_tr_a(String next_tr_a) {
        this.next_tr_a = next_tr_a;
    }

    public String getFrom_tr_a() {
        return from_tr_a;
    }

    public void setFrom_tr_a(String from_tr_a) {
        this.from_tr_a = from_tr_a;
    }

    public Integer getIsCs() {
        return isCs;
    }

    public void setIsCs(Integer isCs) {
        this.isCs = isCs;
    }

    public String getCsList() {
        return csList;
    }

    public void setCsList(String csList) {
        this.csList = csList;
    }

    public Integer getAcPriority() {
        return acPriority == null ? 0 : acPriority;
    }

    public void setAcPriority(Integer acPriority) {
        this.acPriority = acPriority;
    }

    public Integer getParticipantsSelectStrategy() {
        return participantsSelectStrategy;
    }

    public void setParticipantsSelectStrategy(Integer participantsSelectStrategy) {
        this.participantsSelectStrategy = participantsSelectStrategy;
    }

    public Integer getIsDefault() {
        return isDefault == null ? 0 : isDefault;
    }

    public void setIsDefault(Integer isDefault) {
        this.isDefault = isDefault;
    }

    public Integer getCanPass() {
        return canPass;
    }

    public void setCanPass(Integer canPass) {
        this.canPass = canPass;
    }

    public Integer getJqStrategy() {
        return jqStrategy;
    }

    public void setJqStrategy(Integer jqStrategy) {
        this.jqStrategy = jqStrategy;
    }

    public String getOps() {
        return ops;
    }

    public void setOps(String ops) {
        this.ops = ops;
    }

    public Integer getAcType() {
        return acType;
    }

    public void setAcType(Integer acType) {
        this.acType = acType;
    }
    
    public Integer getAssignType() {
        return assignType;
    }

    public void setAssignType(Integer assignType) {
        this.assignType = assignType;
    }

    public String getOpGroups() {
        return opGroups;
    }

    public void setOpGroups(String opGroups) {
        this.opGroups = opGroups;
    }

    public String getAt() {
        return at;
    }

    public void setAt(String at) {
        this.at = at;
    }
    public String getParticipantsSelectAt() {
        return participantsSelectAt;
    }

    public void setParticipantsSelectAt(String participantsSelectAt) {
        this.participantsSelectAt = participantsSelectAt;
    }

    public String getParticipantsMustSelectAt() {
        return participantsMustSelectAt;
    }

    public void setParticipantsMustSelectAt(String participantsMustSelectAt) {
        this.participantsMustSelectAt = participantsMustSelectAt;
    }

    public Integer getIsHideNote() {
        return isHideNote;
    }

    public void setIsHideNote(Integer isHideNote) {
        this.isHideNote = isHideNote;
    }

    public Integer getIgnoreFiOwner() {
        return ignoreFiOwner;
    }

    public void setIgnoreFiOwner(Integer ignoreFiOwner) {
        this.ignoreFiOwner = ignoreFiOwner;
    }

    public Integer getNodeType() {
        return nodeType;
    }

    public void setNodeType(Integer nodeType) {
        this.nodeType = nodeType;
    }

    public Integer getCanWithdraw() {
        return canWithdraw;
    }

    public void setCanWithdraw(Integer canWithdraw) {
        this.canWithdraw = canWithdraw;
    }

    public String getNodeNote() {
        return nodeNote;
    }

    public void setNodeNote(String nodeNote) {
        this.nodeNote = nodeNote;
    }

	public String getEndTag() {
		return endTag;
	}

	public void setEndTag(String endTag) {
		this.endTag = endTag;
	}

    public String getOpGroupsName() {
  	  List<String> list = null;
	try {
		list = App.getBean(ICommonService.class).findAll(String.class, "(select min(tog.name) from tf_op_group tog"
		    + " where "+DbType.getType()+"locate("+DbType.getType()+"concat(tog.id,','),"+DbType.getType()+"concat("+DbType.getType()+"ifnull(op_groups,''),',')) > 0"
		    + " )", new Object[] { });
	} catch (Exception e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	  StringBuffer stringBuffer=new StringBuffer();
	  if(!list.isEmpty()){
		  for (String str : list) {
			stringBuffer.append(str+",");
		}
	  }
		if(!StringUtils.isEmpty(stringBuffer)){
			stringBuffer=stringBuffer.deleteCharAt(stringBuffer.length()-1);
		}
		 opGroupsName=stringBuffer.toString();
        return opGroupsName;
    }

    public void setOpGroupsName(String opGroupsName) {
        this.opGroupsName = opGroupsName;
    }
    public OpGroup getOpGroup() {
		return opGroup;
	}

	public void setOpGroup(OpGroup opGroup) {
		this.opGroup = opGroup;
	}
    
}
