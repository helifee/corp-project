package com.xinleju.erp.flowengine.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.flow.dao.impl.OpGroupDAO;
import com.xinleju.erp.flow.models.Ac;
import com.xinleju.erp.flow.models.OpGroup;
import com.xinleju.erp.flowengine.dao.FlowInstanceStepDao;
import com.xinleju.erp.flowengine.dto.AcDto;
import com.xinleju.erp.flowengine.dto.FlowInstanceStepDto;
import com.xinleju.erp.flowengine.dto.FlowInstanceStepTaskBackDto;
import com.xinleju.erp.flowengine.models.FlowInstance;
import com.xinleju.erp.flowengine.models.FlowInstanceStep;
import com.xinleju.erp.flowengine.models.FlowInstanceStepRelation;
import com.xinleju.erp.flowengine.models.FlowInstanceStepWork;
import com.xinleju.erp.flowengine.models.FlowInstanceStepWorkTask;
import com.xinleju.erp.flowengine.service.FlowInstanceCalculateStepService;
import com.xinleju.erp.flowengine.utils.IDGenerator;
import com.xinleju.erp.flowengine.utils.StepTypeStatus;


@Service(value="FlowInstanceCalculateStepService")
public class FlowInstanceCalculateStepServiceImpl extends BaseService implements FlowInstanceCalculateStepService{
	
	@Autowired
	private FlowInstanceStepDao flowInstanceStepDao;
	@Resource
	private OpGroupDAO opGroupDAO;
	
	
	/**
	 * @param acDto
	 * @param flowInstance
	 * @return
	 */
	
	/* (non-Javadoc)
	 * 
	 * 创建实体节点
	 * @see com.xinleju.erp.flowengine.service.FlowInstanceCalculateStepService#getAssembleFlowInstanceStep(com.xinleju.erp.flowengine.dto.AcDto, com.xinleju.erp.flowengine.models.FlowInstance)
	 */
	public FlowInstanceStep getAssembleFlowInstanceStep(AcDto acDto,FlowInstance flowInstance) {
		
		FlowInstanceStep flowInstanceStep = new FlowInstanceStep();
		flowInstanceStep.setGuid(IDGenerator.getUUID());
		flowInstanceStep.setAcId(acDto.getCurrentAc().getId());
		flowInstanceStep.setFiId(flowInstance.getGuid());
		flowInstanceStep.setDoWhenNoUsersAtwork(flowInstance.getDoWhenNoUsersAtwork());
		flowInstanceStep.setDoWhenRepeatInSteps(flowInstance.getDoWhenRepeatInSteps());
		flowInstanceStep.setFlId(flowInstance.getFlId());
		flowInstanceStep.setDisplayName(acDto.getCurrentAc().getNodeName());
		flowInstanceStep.setIsAuto(acDto.getCurrentAc().getAcType());
		flowInstanceStep.setOriginParticipantsList(acDto.getCurrentAc().getPaticipantList());
		flowInstanceStep.setForkStrategy(acDto.getCurrentAc().getFinishCtrl());
		flowInstanceStep.setJoinStrategy(acDto.getCurrentAc().getStartCtrl());
		flowInstanceStep.setParticipantsSelectStrategy(acDto.getCurrentAc().getParticipantsSelectStrategy());
		flowInstanceStep.setApprovalType(acDto.getCurrentAc().getOpGroups());
		flowInstanceStep.setOriginCsList(acDto.getCurrentAc().getCsList());
		flowInstanceStep.setStatus(StepTypeStatus.STATUS_CREATED);
		flowInstanceStep.setCreateTime(flowInstance.getCreateTime());
		flowInstanceStep.setIsStart(acDto.getCurrentAc().getIsStart());
		flowInstanceStep.setWorkPattern(acDto.getCurrentAc().getNodeType().toString());
		flowInstanceStep.setIsEnd(acDto.getCurrentAc().getIsEnd());
		flowInstanceStep.setBranchEndFlg(acDto.getCurrentAc().getEndTag());
		// 排序 以后加签减签
		flowInstanceStep.setSort(IDGenerator.getTimeLongStr());
		flowInstanceStep.setNum(IDGenerator.getNumberLongStr());
		return flowInstanceStep;
	}
	
	
	/**
	 * 
	 * 创建临时审批节点step
	 * @param acDto
	 * @param flowInstance
	 * @return
	 */
	public FlowInstanceStep getTempAssembleFlowInstanceStep(FlowInstance flowInstance) {
		
		FlowInstanceStep flowInstanceStep = new FlowInstanceStep();
		flowInstanceStep.setGuid(IDGenerator.getUUID());
	//	flowInstanceStep.setAcId(ac.getId());暂时没有
		flowInstanceStep.setFiId(flowInstance.getGuid());
		flowInstanceStep.setDoWhenNoUsersAtwork(flowInstance.getDoWhenNoUsersAtwork());
		flowInstanceStep.setDoWhenRepeatInSteps(flowInstance.getDoWhenRepeatInSteps());
		flowInstanceStep.setFlId(flowInstance.getFlId());
		flowInstanceStep.setDisplayName("临时节点");
		flowInstanceStep.setIsAuto(StepTypeStatus.HUMANACTIVITE);
		flowInstanceStep.setOriginParticipantsList(null);//审批人暂时不需要添加，因为是临时节点后面会补充
		flowInstanceStep.setForkStrategy(StepTypeStatus.FORKSTRATEGY_XO);
		flowInstanceStep.setJoinStrategy(StepTypeStatus.JOINSTRATEGY_XO);
		flowInstanceStep.setParticipantsSelectStrategy(2);   //选择人员
		flowInstanceStep.setBranchEndFlg("2");
		//查询审核所在的组
		OpGroup opGroup=opGroupDAO.getOpGroupsByCode(StepTypeStatus.SP);
		if(opGroup!=null){
			flowInstanceStep.setApprovalType(opGroup.getId().toString());
		}
		flowInstanceStep.setApprovalCode(StepTypeStatus.SP);
		flowInstanceStep.setOriginCsList(null); //临时审批也暂时不需要抄送
		flowInstanceStep.setStatus(StepTypeStatus.STATUS_CREATED);
		flowInstanceStep.setCreateTime(flowInstance.getCreateTime());
		flowInstanceStep.setIsStart(StepTypeStatus.IS_MIDDLE);
		flowInstanceStep.setIsEnd(StepTypeStatus.IS_MIDDLE);
		flowInstanceStep.setWorkPattern("2");//会审
		flowInstanceStep.setBranchEndFlg(null);
		// 排序 以后加签减签
		flowInstanceStep.setSort(IDGenerator.getTimeLongStr());
		flowInstanceStep.setNum(IDGenerator.getNumberLongStr());
		return flowInstanceStep;
	}

	/**
	 * @param lstAcDto
	 * @param flowInstance
	 * @return
	 */
	public List<FlowInstanceStep> getFlowInstanceStep(List<AcDto> lstAcDto,
			FlowInstance flowInstance) {
		
		List<OpGroup>  opGroups =opGroupDAO.getOpGroupsList();
		Map<String,String> mapGroups=new HashMap<String,String>();
		for(OpGroup opGroup :opGroups){
			mapGroups.put(String.valueOf(opGroup.getId()), opGroup.getCode());
		}
		FlowInstanceStep flowInstanceStep = null;
		List<FlowInstanceStep> lstFlowInstanceStep = new ArrayList<FlowInstanceStep>();
		Map<Long, String> stepRelationMap = new HashMap<Long, String>();
		Map<String, FlowInstanceStep> stepMap = new HashMap<String, FlowInstanceStep>();
		for (AcDto acDto : lstAcDto) {
			flowInstanceStep = getAssembleFlowInstanceStep(acDto, flowInstance);
			flowInstanceStep.setApprovalCode(mapGroups.get(acDto.getCurrentAc().getOpGroups()));
			stepRelationMap.put(acDto.getCurrentAc().getId(),flowInstanceStep.getGuid());
			stepMap.put(flowInstanceStep.getGuid(), flowInstanceStep);
		}

		FlowInstanceStepRelation flowInstanceStepRelation = null;
		List<FlowInstanceStepRelation> lstFlowInstanceStepRelation = null;
		try{
			for (AcDto acDto : lstAcDto) {
					List<Ac> nextAcs = acDto.getNextAc();
					String curentStepId = stepRelationMap.get(acDto.getCurrentAc().getId());
					lstFlowInstanceStepRelation = new ArrayList<FlowInstanceStepRelation>();
					for (Ac ac : nextAcs) {
		
						String nextStepId = stepRelationMap.get(ac.getId());
		
						flowInstanceStepRelation = new FlowInstanceStepRelation();
						flowInstanceStepRelation.setGuid(IDGenerator.getUUID());
						flowInstanceStepRelation.setFiId(flowInstance.getGuid());
						flowInstanceStepRelation.setStepId(curentStepId);
						flowInstanceStepRelation.setNextStepId(nextStepId);
		
						lstFlowInstanceStepRelation.add(flowInstanceStepRelation);
					}
					flowInstanceStep = stepMap.get(curentStepId);
					flowInstanceStep.setLstFlowInstanceStepRelation(lstFlowInstanceStepRelation);
					lstFlowInstanceStep.add(flowInstanceStep);
			}
		
			}catch(Exception e){
				e.printStackTrace();
			}
		return lstFlowInstanceStep;
		
	}
	public FlowInstanceStepWorkTask getTaskById(String taskId){
		
		return getDao().findFirst(FlowInstanceStepWorkTask.class,"guid = ? ",new Object[]{taskId});
	}
	
	
	
	@Override
	public List<FlowInstanceStepTaskBackDto> getFlowInstanceStepTaskBackDtoByFiId(
			String fiId) {
		// TODO Auto-generated method stub
		return flowInstanceStepDao.getFlowInstanceStepTaskBackDtoByFiId(fiId);
	}

	public List<FlowInstanceStepDto> getFlowInstanceStepDtoByFiId(String fiId){
		return flowInstanceStepDao.getFlowInstanceStepDtoByFiId(fiId);
	}
	
	public List<FlowInstanceStep> getFlowInstanceStepByFiId(String fiId,Integer status){
		return getDao().findByHQL(FlowInstanceStep.class, "from FlowInstanceStep where fiId = ? and status= ?", fiId,status);
	}
	
	public FlowInstanceStepWorkTask getTaskByAssignTaskId(String assignTaskId){
		return getDao().findFirst(FlowInstanceStepWorkTask.class,"assignTaskId = ? and oper_ctrl='XBR'",new Object[]{assignTaskId});
	}


	
	
	@Override
	public FlowInstanceStepWork getFlowInstanceStepWorkByWorkId(String workId) {
		// TODO Auto-generated method stub
		return getDao().findFirst(FlowInstanceStepWork.class,"guid = ? ",new Object[]{workId});
	}


	@Override
	public FlowInstanceStep getFlowInstanceStepBystepId(String stepId) {
		// TODO Auto-generated method stub
		return getDao().findFirst(FlowInstanceStep.class,"guid = ? ",new Object[]{stepId});
	}
}
