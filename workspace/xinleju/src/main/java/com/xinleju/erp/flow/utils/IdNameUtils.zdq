package com.xinleju.erp.flow.utils;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;

import com.xinleju.erp.base.utils.CollectionUtils;
import com.xinleju.erp.flow.bean.IdName;
import com.xinleju.erp.flow.frameapi.domain.Orgn;
import com.xinleju.erp.flow.frameapi.domain.Role;
import com.xinleju.erp.flow.frameapi.domain.User;
import com.xinleju.erp.flow.models.BizParticipant;

/**
 * 
 * 
 * <p>
 * IdName序列化和饭序列化操作
 * </p>
 * <p>
 * </p>
 * 
 * @author 孙朝辉
 * @version $Id: IdNameUtils.java 2024 2014-12-03 13:33:55Z zhongjun $
 * @since
 * 
 */
public class IdNameUtils {

    /**
     * 对IdName进行编码
     * 
     * @param idNameList
     *            IdName集合
     * @return 格式化字符串
     */
    public static String encode(List<IdName> idNameList) {
        String participantString = "";
        if (null != idNameList && idNameList.size() > 0){
            idNameList = CollectionUtils.distinct(idNameList);
            for (IdName idName : idNameList) {
                String item = encode(idName);
                participantString += (item + ";");
            }
            if (participantString.endsWith(";")) {
                participantString = participantString.substring(0, participantString.length() - 1);
            }
        }
        return participantString;
    }

    /**
     * 对IdName进行编码
     * 
     * @param idName
     *            IdName对象
     * @return 格式化字符串
     */
    public static String encode(IdName idName) {
        
        String person = (idName.getPrefix() + idName.getId()) + ":" + idName.getName();
        return person;
    }

    /**
     * 
     * <p>
     * 反序列化成IdName
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param participantString
     *            格式化字符串
     * @return IdName集合
     */
    public static List<IdName> decode(String participantString) {
        if (participantString == null || "".equals(participantString)) {
            return new ArrayList<IdName>();
        }
        String[] pl = participantString.split(";");
        List<IdName> idNameList = new LinkedList<IdName>();

        for (String participant : pl) {
            if (StringUtils.isEmpty(participant)) {
                continue;
            }

            String[] person = participant.split(":");
            if (participant.startsWith(IdName.ORGN_PREFIX)) {
                IdName idName = new IdName(Long.parseLong(person[0].substring(IdName.PREFIX_LENGTH)), person[1], IdName.ORGN_PREFIX);
                idNameList.add(idName);
            } else if (participant.startsWith(IdName.ROLE_PREFIX)) {
                IdName idName = new IdName(Long.parseLong(person[0].substring(IdName.PREFIX_LENGTH)), person[1], IdName.ROLE_PREFIX);
                idNameList.add(idName);
            } else if (participant.startsWith(IdName.USER_PREFIX)) {
                IdName idName = new IdName(Long.parseLong(person[0].substring(IdName.PREFIX_LENGTH)), person[1], IdName.USER_PREFIX);
                idNameList.add(idName);
            } else if (participant.startsWith(IdName.FLOW_PREFIX)) {
                IdName idName = new IdName(Long.parseLong(person[0].substring(IdName.PREFIX_LENGTH)), person[1], IdName.FLOW_PREFIX);
                idNameList.add(idName);
            } else if (participant.startsWith(IdName.PACP_PREFIX)) {
                IdName idName = new IdName(0L, person[1], person[0].substring(IdName.PREFIX_LENGTH), IdName.PACP_PREFIX);
                idNameList.add(idName);
            } else if (participant.startsWith(IdName.PCLS_PREFIX)) {
                IdName idName = new IdName(0L, person[1], person[0].substring(IdName.PREFIX_LENGTH), IdName.PCLS_PREFIX);
                idNameList.add(idName);
            } else if (participant.startsWith(IdName.PBIZ_PREFIX)) {
                IdName idName = new IdName(Long.parseLong(person[0].substring(IdName.PREFIX_LENGTH)), person[1], person[0].substring(IdName.PREFIX_LENGTH),
                        IdName.PBIZ_PREFIX);
                idNameList.add(idName);
            } else if (participant.startsWith(IdName.PART_PREFIX)) {
                IdName idName = new IdName(Long.parseLong(person[0].substring(IdName.PREFIX_LENGTH)), person[1], person[0].substring(IdName.PREFIX_LENGTH),
                        IdName.PART_PREFIX);
                idNameList.add(idName);
            } else if (participant.startsWith(IdName.XDPA_PREFIX)) {
                IdName idName = new IdName(Long.parseLong(person[0].substring(IdName.PREFIX_LENGTH)), person[1], person[0].substring(IdName.PREFIX_LENGTH),
                        IdName.XDPA_PREFIX);
                idNameList.add(idName);
            } else if (participant.startsWith(IdName.OBJF_PREFIX)) {
                IdName idName = new IdName(Long.parseLong(person[0].substring(IdName.PREFIX_LENGTH)), person[1], person[0].substring(IdName.PREFIX_LENGTH),
                        IdName.OBJF_PREFIX);
                idNameList.add(idName);
            } else if (participant.startsWith(IdName.RANK_PREFIX)) {
                IdName idName = new IdName(Long.parseLong(person[0].substring(IdName.PREFIX_LENGTH)), person[1], person[0].substring(IdName.PREFIX_LENGTH),
                    IdName.RANK_PREFIX);
            idNameList.add(idName);
        }
        }
        return CollectionUtils.distinct(idNameList);
    }
    /**
     * 
     * <p>
     * 将User,Role,Orgn,BizParticipant转成IdName
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param objlist map集合
     * @return IdName集合
     */
    public static List<IdName> mapToIdNameList(List<Map<String, Object>> objlist) {
        List<IdName> returnList = new ArrayList<IdName>();
        if (null != objlist && !objlist.isEmpty()){
            for (int i = 0; i < objlist.size(); i++) {
                returnList.add(toIdName(objlist.get(i)));
            }
        }
        return returnList;
    }

    /**
     * 将参与对象转为 IdName对象
     * @author jun
     * @param obj 参与对象
     * @return IdName对象
     */
    public static IdName toIdName(Map<String, Object> obj) {
        IdName idName = new IdName(Long.valueOf(String.valueOf(obj.get(IdName.MAP_KEY_ID))), String.valueOf(obj.get(IdName.MAP_KEY_NAME))
                , String.valueOf(obj.get(IdName.MAP_KEY_CODE)), String.valueOf(obj.get(IdName.MAP_KEY_PREFIX))
                , Integer.valueOf(String.valueOf(obj.get(IdName.MAP_KEY_ID))), obj);
        
        
        
        idName.setType((String)obj.get("type"));
        return idName;
    }
    
    /**
     * 将参与对象转为 IdName对象
     * @author jun
     * @param obj 参与对象
     * @return IdName对象
     */
    public static IdName toIdName(Map<String, Object> obj, Integer isLeaf) {
        IdName idName = new IdName(Long.valueOf(String.valueOf(obj.get(IdName.MAP_KEY_ID))), String.valueOf(obj.get(IdName.MAP_KEY_NAME))
                , String.valueOf(obj.get(IdName.MAP_KEY_CODE)), String.valueOf(obj.get(IdName.MAP_KEY_PREFIX))
                , isLeaf, obj);
        
        
        
        idName.setType((String)obj.get("type"));
        return idName;
    }
    
    /**
     * 
     * <p>
     * 将User,Role,Orgn,BizParticipant转成IdName
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param objlist map集合
     * @return IdName集合
     */
    public static List<IdName> mapToIdNameList(List<Map<String, Object>> objlist,Integer isLeaf) {
        List<IdName> returnList = new ArrayList<IdName>();
        if (null != objlist && !objlist.isEmpty()){
            for (int i = 0; i < objlist.size(); i++) {
                returnList.add(toIdName(objlist.get(i), isLeaf));
            }
        }
        return returnList;
    }
    
    /**
     * 
     * <p>
     * 将User,Role,Orgn,BizParticipant转成IdName
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param list
     *            User,Role,Orgn,BizParticipant集合
     * @return IdName集合
     */
    public static List<IdName> toIdNameList(List<?> list) {
        List<IdName> returnList = new ArrayList<IdName>();
        if(list!=null&&list.size()>0){
	        for (int i = 0; i < list.size(); i++) {
	            Object x = list.get(i);
	            if (x instanceof User) {
	                IdName user = toIdName((User) x);
	                returnList.add(user);
	            } else if (x instanceof Role) {
	                IdName role = toIdName((Role) x);
	                returnList.add(role);
	            } else if (x instanceof Orgn) {
	                IdName orgn = toIdName((Orgn) x);
	                returnList.add(orgn);
	            } else if (x instanceof BizParticipant) {
	                IdName bps = toIdName((BizParticipant) x);
	                returnList.add(bps);
	            } else {
	                continue;
	            }
	        }
        }

        return returnList;
    }

    /**
     * 
     * <p>
     * BizParticipant转IdName
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param bp
     *            业务参与人
     * @return IdName对象
     */
    public static IdName toIdName(BizParticipant bp) {
        IdName idName = new IdName(bp.getId(), bp.getName(), bp.getCode(), IdName.PBIZ_PREFIX, bp);
        return idName;
    }

    /**
     * 
     * <p>
     * User转IdName
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param user
     *            用户
     * @return IdName对象
     */
    public static IdName toIdName(User user) {
        IdName idName = new IdName(user.getUserId(), user.getUserName(), user.getLoginName(), IdName.USER_PREFIX, user);
        return idName;
    }

    /**
     * 
     * <p>
     * Role转IdName
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param role
     *            角色
     * @return IdName对象
     */
    public static IdName toIdName(Role role) {
        IdName idName = new IdName(role.getRoleId(), role.getRoleName(), role.getRoleCode(), IdName.ROLE_PREFIX, role);
        return idName;
    }

    /**
     * 
     * <p>
     * Orgn转IdName
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param orgn
     *            用户
     * @return IdName对象
     */
    public static IdName toIdName(Orgn orgn) {
        IdName idName = new IdName(orgn.getOrgnId(), orgn.getOrgnName(), orgn.getOrgnCode(), IdName.ORGN_PREFIX, orgn);
        return idName;
    }

    /**
     * 
     * <p>
     * idName转User
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param idName
     *            IdName对象
     * @return 用户
     */
    public static User toUser(IdName idName) {
        User user = new User();
        user.setLoginName(idName.getCode());
        user.setUserName(idName.getName());
        user.setUserId(idName.getId());
        return user;
    }

    /**
     * 
     * <p>
     * idName转Role
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param idName
     *            IdName对象
     * @return 角色
     */
    public static Role toRole(IdName idName) {
        Role role = new Role();
        role.setRoleName(idName.getName());
        role.setRoleCode(idName.getCode());
        role.setRoleId(idName.getId());
        return role;
    }

    /**
     * 
     * <p>
     * IdName转Orgn
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param idName
     *            IdName对象
     * @return 部门
     */
    public static Orgn toOrgn(IdName idName) {
        Orgn orgn = new Orgn();
        orgn.setOrgnName(idName.getName());
        orgn.setOrgnCode(idName.getCode());
        orgn.setOrgnId(idName.getId());
        return orgn;
    }

    /**
     * 
     * <p>
     * 获取IdName中的name属性，以逗号分隔符分隔返回
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param participantString
     *            格式化字符串
     * @return 字符串
     */
    public static String getJoinedName(String participantString) {
        @SuppressWarnings("unchecked")
        List<IdName> idNameList = CollectionUtils.distinct(decode(participantString));
        if (idNameList != null && idNameList.size() > 0) {
            return CollectionUtils.collectAsString(idNameList, "name", ",");
        }
        return "";
    }

    /**
     * 
     * <p>
     * IdName转Users
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param users
     *            IdName集合
     * @return 用户对象集合
     */
    public static List<User> toUsers(List<IdName> users) {
        List<User> list = new ArrayList<User>();
        for (IdName idName : users) {
            User user = toUser(idName);
            list.add(user);
        }
        return list;
    }
}
