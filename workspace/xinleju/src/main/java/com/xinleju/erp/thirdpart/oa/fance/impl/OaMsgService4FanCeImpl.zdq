package com.xinleju.erp.thirdpart.oa.fance.impl;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.simple.ParameterizedBeanPropertyRowMapper;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.flow.models.Wi;
import com.xinleju.erp.form.utils.DbType;
import com.xinleju.erp.frame.dao.AppDao;
import com.xinleju.erp.frame.models.App;
import com.xinleju.erp.frame.models.Msg;
import com.xinleju.erp.frame.models.OaMsgSendLog;
import com.xinleju.erp.frame.service.SettingService;
import com.xinleju.erp.frame.utils.ExceptionUtils;
import com.xinleju.erp.frame.utils.FrameUrlFixUtil;
import com.xinleju.erp.frame.utils.StaticInterface;
import com.xinleju.erp.thirdpart.oa.api.IOaMsgService;
import com.xinleju.erp.thirdpart.oa.fance.soap.NotifyTodoAppResult;
import com.xinleju.erp.thirdpart.oa.xinyuan.impl.OaMsgServiceImpl;

/**
 * 版权：(C) 版权所有 2000-2014 上海天好电子商务有限公司苏州分公司
 * <简述>
 * <详细描述>
 * @author   hongbin
 * @version  $Id: OaMsgServiceImpl.java 55330 2015-01-03 12:45:38Z zhongjun $
 * @since
 * @see
 */
@Service
@Transactional
public class OaMsgService4FanCeImpl extends BaseService implements IOaMsgService{
	private static final Log log = LogFactory.getLog(OaMsgService4FanCeImpl.class);
    /**
     * 每次扫面的数据条数
     */
    public static int batchLimit = 100;
    
    /**
     * 扫描的最大失败次数
     */
    public static int maxErrorTimes = 3;
    
    @Autowired
    private JdbcTemplate jdbcTemplate;
    
    @Autowired
    private AppDao appDao;
    
    @Autowired
    private OATaskPushService4FanCeImpl oATaskPushService4FanCeImpl;
    
    @Autowired
    private SettingService settingService;
    
    private static final Logger logger = Logger.getLogger(OaMsgService4FanCeImpl.class);
    
    /**
     * 
     * @see com.xinleju.erp.frame.service.IOaMsgService#sendOaMsg(java.lang.Long)
     */
    @Override
    public void sendOaMsg(Long id) {
        if (null != id) {
            Msg msg = getDao().getById(Msg.class, id);
            Long objectId = msg.getId();
            String opType = msg.getOpType();
            String loginName = msg.getLoginName();
            
            
            String msgId_Id=msg.getMsgId();
            if(msgId_Id.startsWith("Wi_")){
            	Long wiId=Long.valueOf(msgId_Id.substring(3));
            	Wi wi=getDao().getById(Wi.class, wiId);
            	if(wi==null){
            		log.info("wi========解析不到==类型===="+msg.getOpType()+"====="+msg.getLoginName()+"==="+msg.getId()+"====="+msg.getMsgId()+"======"+msg.getTitle());
            		return;
            	}
            }
            
            
            Integer msgType = msg.getMsgType();
            App app = appDao.getAppByCode(msg.getAppCode());
            App appPt = appDao.getPtApp();
            String appName = "xinleju";
            String modelName = appName;
            String subject = msg.getTitle();
            
                
            //最好用urlencode处理下 
            String newUrl="";
            try {
				newUrl=URLEncoder.encode(msg.getUrl(), "UTF-8");
			} catch (UnsupportedEncodingException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
            String msgId=msg.getMsgId();
            String phoneUrl="";
            if(msgId!=null && !"".equals(msgId)){
            	  //移动端审批路径
            	 String from ="";
            	 if (Msg.OP_TYPE_DB.equals(opType)){
            		 from = "0";
                 } else if (Msg.OP_TYPE_YB.equals(opType)){
             		 from = "2";
                 } else if (Msg.OP_TYPE_WD.equals(opType)){
             		 from = "1";
                 } else if (Msg.OP_TYPE_YD.equals(opType)){
             		 from = "2";
                 } else if (Msg.OP_TYPE_RM.equals(opType)){
               		 from = "2";
                 }
            	 String phoneWiId=msgId.toLowerCase();
            	 if(StringUtils.isNotBlank(phoneWiId)){
	            	 if(phoneWiId.indexOf("task_")>=0){
	            		 phoneWiId=msgId.toLowerCase().replace("task_", "");
	            	 }
	            	 if(phoneWiId.indexOf("wi_")>0){
	            		 phoneWiId=msgId.toLowerCase().replace("wi_", "");
	            	 }
	            	 
	            	 if(phoneWiId.indexOf("teId_")>0){
	           		   phoneWiId=msgId.toLowerCase().replace("teId_", "");
	            	 }
          		      phoneUrl="/weixin/shenpi.jsp?wiid="+phoneWiId+"&which=OA&userId="+loginName+"&from="+from;
            	 }
            	 
            }
           

            try {
            	phoneUrl=URLEncoder.encode(phoneUrl, "UTF-8");
			} catch (UnsupportedEncodingException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
            
            
            
            
            String link = FrameUrlFixUtil.urlFix(msg.getUrl(), app.getDepUrl(), (StringUtils.isNotBlank(appPt.getDepUrl()) ? appPt.getDepUrl().trim() + "/casUrlLogin?erpUrl=" : ""));
            NotifyTodoAppResult result = null;
            try{
                if (StringUtils.isNotBlank(opType) && null != msgType){
                    if (Msg.OP_TYPE_DB.equals(opType)){
                        result = oATaskPushService4FanCeImpl.sendTodo(appName, modelName, objectId.toString(), subject, link, 1, loginName);
                    } else if (Msg.OP_TYPE_YB.equals(opType)){
                        result = oATaskPushService4FanCeImpl.setTodoDone(appName, modelName, objectId.toString(), 1, loginName);
                    } else if (Msg.OP_TYPE_WD.equals(opType)){
                        result = oATaskPushService4FanCeImpl.sendTodo(appName, modelName, objectId.toString(), subject, link, 2, loginName);
                    } else if (Msg.OP_TYPE_YD.equals(opType)){
                        result = oATaskPushService4FanCeImpl.setTodoDone(appName, modelName, objectId.toString(), 2, loginName);
                    } else if (Msg.OP_TYPE_RM.equals(opType)){
                        result = oATaskPushService4FanCeImpl.deleteTodo(appName, modelName, objectId.toString(), null != msgType ? msgType.intValue() : 0, loginName);
                    }
                    if(result != null){
                        this.markSendLog(id, opType, result.getReturnState(), result.getMessage());
                        if(result.getReturnState() == OaMsgSendLog.RETURN_STATE_FAIL){
                            throw new Exception(result.getMessage());
                        }
                    }else{
                    	if(Msg.OP_TYPE_LC.equals(opType)){
                    		
                    	}else{
                            throw new Exception("OA端没有返回结果！");
                    	}
           
                    }
                } else {
                    
                }
            }catch(Exception e){
                this.markSendLog(id, opType, OaMsgSendLog.RETURN_STATE_FAIL, ExceptionUtils.getExceptionMsg(e));
                //OA日志
                this.savaOALog(msg.getModuleCode(), objectId, msg.getTitle(), link, new Date(), opType, msgType.toString(), loginName);
            }
        }
    }
    @Override
    public void batchSendOaMsg() {
        this.batchSendOaMsg(batchLimit);
    }
    /**
     * 
     * @see com.xinleju.erp.frame.service.IOaMsgService#batchSendOaMsg(int)
     */
    @Override
    public void batchSendOaMsg(int size) {
        String settingMaxErrorTime = settingService.getSettingValue(StaticInterface.SKEY_PT_OA_INTERFACE_MAX_ERROR_TIMES);
        if (StringUtils.isNotBlank(settingMaxErrorTime) && StringUtils.isNumeric(settingMaxErrorTime.trim())){
            maxErrorTimes = Integer.valueOf(settingMaxErrorTime.trim());
        }
        ParameterizedBeanPropertyRowMapper<Msg> rm = ParameterizedBeanPropertyRowMapper.newInstance(Msg.class);
        String sql = "select o.id from sm_msg o left join sm_oa_msg_send_log s on (o.id = s.msg_id and s.op_type = o.op_type ) where (s.return_state = ? or s.return_state = ? or s.return_state is null) and (s.error_times is null or s.error_times < ?) AND (o.op_type = 'DB' or o.op_type = 'WD' or o.op_type = 'YB' or o.op_type = 'YD' or o.op_type = 'RM' ) order by o.typed_date asc,o.id asc limit ?";
        List<Msg> oaMsgs = jdbcTemplate.query(sql, rm, OaMsgSendLog.RETURN_STATE_CREATE, OaMsgSendLog.RETURN_STATE_FAIL, maxErrorTimes, size);
        if (oaMsgs != null && oaMsgs.size() > 0) {
            for (int i = 0; i < oaMsgs.size(); i++) {
                this.sendOaMsg(oaMsgs.get(i).getId());
            }
        }
    }
    /**
     * 
     * @see com.xinleju.erp.frame.service.IOaMsgService#batchSendOaMsg(java.util.List)
     */
    @Override
    public void batchSendOaMsg(List<Long> ids) {
        if(!ids.isEmpty()) {
            ParameterizedBeanPropertyRowMapper<Long> rm = ParameterizedBeanPropertyRowMapper.newInstance(Long.class);
            String sql = "select o.id from sm_msg o where o.id in (?)";
            List<Long> oaMsgs = jdbcTemplate.query(sql,ids.toArray(), rm);
            if (oaMsgs != null && oaMsgs.size() > 0) {
                for (int i = 0; i < oaMsgs.size(); i++) {
                    this.sendOaMsg(oaMsgs.get(i));
                }
            }
        }
    }
    /**
     * 错误日志
     * @author jun
     * @param id
     * @param opType
     * @param errorMsg
     */
    private void markSendLog(Long id, String opType, int returnState, String errorMsg){
        if (OaMsgSendLog.RETURN_STATE_SUCCESS == returnState){
            int count = jdbcTemplate.update("update sm_oa_msg_send_log t set t.return_state = ? where t.msg_id = ? and t.op_type = ?", returnState, id, opType);
            if (1 > count){
                OaMsgSendLog osl = new OaMsgSendLog();
                osl.setMsgId(id);
                osl.setOpType(opType);
                osl.setErrorTimes(0);
                osl.setReturnState(returnState);
                getDao().save(osl);
            }
        } else {
            int count = jdbcTemplate.update("update sm_oa_msg_send_log t set t.return_state = ?,t.error_times = ("+DbType.getType()+"ifnull(t.error_times,0) + 1),t.error_msg = ? where t.msg_id = ? and t.op_type = ?", OaMsgSendLog.RETURN_STATE_FAIL, errorMsg, id, opType);
            if (1 > count){
                OaMsgSendLog osl = new OaMsgSendLog();
                osl.setErrorMsg(errorMsg);
                osl.setErrorTimes(1);
                osl.setMsgId(id);
                osl.setOpType(opType);
                osl.setReturnState(returnState);
                getDao().save(osl);
            }
        }
    }

	@Override
	public FlowResult<Boolean> savaOALog(String module, long msgId, String title, String url, Date typedDate, String opType, String msgType, String loginName) {
		FlowResult<Boolean> fr = new FlowResult<Boolean>();
		OaMsgSendLog osl = new OaMsgSendLog();
		osl.setModuleCode(module);
		osl.setMsgId(msgId);
		osl.setTitle(title);
		osl.setTypedDate(typedDate);
		osl.setMsgType(msgType);
		osl.setOpType(opType);
		osl.setLoginName(loginName);
		getDao().save(osl);
		return fr;
	}
    
}
