package com.xinleju.erp.flow.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.stereotype.Service;

import com.ql.util.express.DefaultContext;
import com.ql.util.express.ExpressRunner;
import com.ql.util.express.IExpressContext;
import com.xinleju.erp.flow.flowutils.bean.Gvs;

@Service
public class CondService implements ApplicationContextAware {

	public boolean parse(String expression, Gvs kvs) throws Exception {
		Boolean o=false;
		try{
		initRunner(runner);
		expression = initExpression(expression);	
		//com.xinleju.erp.flow.bean.FinishCtrlContext ctx = new FinishCtrlContext(kvs,this.ctx);
		 IExpressContext<String,Object> expressContext = new DefaultContext<String,Object>();
		 if(kvs!=null){
			 Map<String,Object> map =kvs.getValueMap();
			 Set<String> set=map.keySet();
			 if(set!=null && set.size()>0){
				 for(String key : set){
					 expressContext.put(key, map.get(key));
				 }
			 }
		 }
		List<String> errorInfo = new ArrayList<String>();
		 o = (Boolean) runner.execute(expression, expressContext, errorInfo,  false, false);
		}catch(Exception e){
			e.printStackTrace();
		}
		return o.booleanValue();
	}

	private static String initExpression(String expression) {
		return expression.replace("（", "(").replace("）", ")").replace("；", ";").replace("，", ",").replace("“", "\"").replace("”", "\"");
	}

	private void initRunner(ExpressRunner runner) {
		if (isInitialRunner == true) {
			return;
		}
		synchronized (runner) {
			if (isInitialRunner == true) {
				return;
			}
			try {
				// 在此可以加入预定义函数
				runner.addOperatorWithAlias("属于", "in", "");
				runner.addOperatorWithAlias("小于等于", "<=", "");
				runner.addOperatorWithAlias("大于等于", ">=", "");
				runner.addOperatorWithAlias("不等于", "!=", "");
				runner.addOperatorWithAlias("等于", "==", "结果不相等");
				runner.addOperatorWithAlias("大于", ">", "");
				runner.addOperatorWithAlias("小于", "<", "");
				runner.addOperatorWithAlias("并且", "&&", "");
				runner.addOperatorWithAlias("或者", "||", "");
				
			} catch (Exception e) {
				throw new RuntimeException("初始化失败表达式", e);
			}
		}
		isInitialRunner = true;
	}

	private static ExpressRunner runner;
	static {
		runner = new ExpressRunner(false,true);
	}
	private static boolean isInitialRunner = false;

	public static void main(String[] args) throws Exception {
		CondService s = new CondService();
		Gvs kvs = Gvs.create().add("匹配", 11, "").add("匹配", "11", "");
		// boolean x = s.parse("\"扎昂\" 属于 ('扎昂1')", kvs);
		boolean x = s.parse("匹配 + 1  等于 12 并且 x+1 小于 100", kvs);

		//boolean x = s.parse("匹配 前匹配 \"12\"", kvs);
		System.out.println(x);
	}

   
	
	private ApplicationContext ctx;
    @Override
    public void setApplicationContext(ApplicationContext arg0) throws BeansException {
        this.ctx = arg0;
        
    }
}
