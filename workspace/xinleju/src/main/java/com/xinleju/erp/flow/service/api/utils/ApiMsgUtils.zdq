package com.xinleju.erp.flow.service.api.utils;

import com.xinleju.erp.base.app.config.App;

/**
 * <p>
 * </p>
 * <p>
 * </p>
 * 
 * @author 孙朝辉
 * @version $Id: ApiMsgUtils.java 2092 2014-12-11 14:38:03Z zhongjun $
 * @since
 * @see
 */
public class ApiMsgUtils {

    /**
     * 参数{0}必须
     */
    public static final String KEY_COMMON_FIELD_REQUIRED = "FLOW.MSG.COMMON.1";;
    /**
     * 对象{0}({1})不存在！
     */
    public static final String KEY_OBJECT_NOTFOUNT = "FLOW.MSG.COMMON.2";;

    /**
     * 工作已经被处理
     */
    public static final String KEY_WI_PROCESSED = "FLOW.MSG.WI.1";

    /**
     * 待办工作期望得到{0}个,实际得到{1}个
     */
    public static final String KEY_WI_FOUND_NUM_ERROR = "FLOW.MSG.WI.2";

    /**
     * 对应的outCode的AI未找到
     */
    public static final String KEY_AI_NOT_FOUND_BY_OUTCODE = "FLOW.MSG.AI.100";

    /**
     * 工作组:"{0}"状态错误，期望:{1},实际是:{2}
     */
    public static final String KEY_WP_STATUS_ERR = "FLOW.MSG.WP.200";

    public static final String MSG_JIAQIAN_FIRST_WP_CANNOT_JIAQIAN_BEFORE = "第一个节点不能前加签";

    public static final String MSG_JIAQIAN_WI_PROCESSED = "工作已经被处理，不能加签";

    public static final String MSG_JIAQIAN_BEFORE_REQUIRE_RUNNINGWP = "未开始步骤不能前加签";
    public static final String MSG_JIAQIAN_QUQIAN_REQUIRE_NOT_RUNNING = "未开始的环节才能去签";
    public static final String MSG_FL_NOT_FOUND = "指定的流程编码不存在";
    public static final String MSG_FI_NOT_FOUND = "指定的流程实例不存在";
    public static final String MSG_ADDWP_BEFORE_CANNOT_RUNNING = "当前环节(工作组)正在进行中，不能前加环节（工作组）！";
    public static final String MSG_DELWP_OF_RUNNNG_REQUIRED_FORCE = "当前环节(工作组)正在进行中，不能删除，除非指定强制删除！";
    public static final String MSG_DELWP_OF_START_NOT_ALLOWED = "不能删除第一个节点！";
    public static final String MSG_FI_STORE_REPEAT = "此流程已收藏,收藏失败!";
    public static final String MSG_FI_STORE_CANCEL_REPEAT = "此流程已被取消收藏,取消收藏失败!";

    public static final String MSG_FI_START_WI_NOT_FOUND = "流程启动节点任务创建失败或已完成，无法再次启动!";

    /**
     * 
     * <p>
     * 获取消息
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param key
     *            消息key
     * @param vs
     *            参数
     * @return 消息
     */
    public static final String getMsg(String key, Object... vs) {
        return App.getMsg(key, vs);
    }
}
