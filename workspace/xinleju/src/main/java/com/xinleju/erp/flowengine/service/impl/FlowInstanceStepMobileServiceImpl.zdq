package com.xinleju.erp.flowengine.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.stereotype.Service;


import com.xinleju.erp.base.app.config.App;
import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.base.utils.DateUtils;
import com.xinleju.erp.com.service.IMyDubboService;
import com.xinleju.erp.com.service.base.IBaseBizDataService;
import com.xinleju.erp.com.service.zb.IZbBaseBizDataFileService;
import com.xinleju.erp.flow.dao.impl.BizDataDAO;
import com.xinleju.erp.flow.flowutils.bean.BizDataDTO;
import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.flow.flowutils.bean.NameValuePair;
import com.xinleju.erp.flow.flowutils.bean.SimpleResult;
import com.xinleju.erp.flow.flowutils.bean.ToDoBean;
import com.xinleju.erp.flow.flowutils.bean.ToDoButtonBean;
import com.xinleju.erp.flow.flowutils.bean.ToDoFiBean;
import com.xinleju.erp.flow.flowutils.bean.ToDoWorkBean;
import com.xinleju.erp.flow.flowutils.bean.ToDoWpBean;
import com.xinleju.erp.flow.flowutils.bean.UploadBean;
import com.xinleju.erp.flow.flowutils.utils.OpType;
import com.xinleju.erp.flow.models.Fl;
import com.xinleju.erp.flow.models.Upload;
import com.xinleju.erp.flow.models.Wi;
import com.xinleju.erp.flow.service.api.SmBizDataService;
import com.xinleju.erp.flow.service.api.SmObjectService;
import com.xinleju.erp.flow.service.api.extend.dto.UserDTO;
import com.xinleju.erp.flow.service.api.utils.ApiUtils;
import com.xinleju.erp.flow.utils.FlowConstant;
import com.xinleju.erp.flow.utils.LoginInfoUtils;
import com.xinleju.erp.flowengine.dao.NewFlowBizDataDao;
import com.xinleju.erp.flowengine.dto.AcDto;
import com.xinleju.erp.flowengine.dto.FlowInstanceDto;
import com.xinleju.erp.flowengine.dto.FlowInstanceStepDto;
import com.xinleju.erp.flowengine.dto.FlowInstanceStepTaskBackDto;
import com.xinleju.erp.flowengine.dto.FlowInstanceStepWorkDto;
import com.xinleju.erp.flowengine.dto.FlowInstanceStepWorkTaskDto;
import com.xinleju.erp.flowengine.dto.FlowInstanceWrapperBean;
import com.xinleju.erp.flowengine.dto.OpRelationInsDto;
import com.xinleju.erp.flowengine.events.FlowInstanceEventService;
import com.xinleju.erp.flowengine.models.FlowInstance;
import com.xinleju.erp.flowengine.models.FlowInstanceStep;
import com.xinleju.erp.flowengine.models.FlowInstanceStepWork;
import com.xinleju.erp.flowengine.models.FlowInstanceStepWorkTask;
import com.xinleju.erp.flowengine.models.FlowInstanceStepWorkTaskExtend;
import com.xinleju.erp.flowengine.models.FlowInstanceVariable;
import com.xinleju.erp.flowengine.models.FlowInstanceVariableMap;
import com.xinleju.erp.flowengine.service.BizAttachmentService;
import com.xinleju.erp.flowengine.service.FlowInstanceCalculateAcService;
import com.xinleju.erp.flowengine.service.FlowInstanceCalculateFiService;
import com.xinleju.erp.flowengine.service.FlowInstanceCalculateStepService;
import com.xinleju.erp.flowengine.service.FlowInstanceCalculateWorkService;
import com.xinleju.erp.flowengine.service.FlowInstanceFiService;
import com.xinleju.erp.flowengine.service.FlowInstanceOrgnApISerive;
import com.xinleju.erp.flowengine.service.FlowInstanceStepMobileService;
import com.xinleju.erp.flowengine.service.FlowInstanceStepService;
import com.xinleju.erp.flowengine.service.FlowInstanceStepWorkTaskExtendService;
import com.xinleju.erp.flowengine.service.OpRelationService;
import com.xinleju.erp.flowengine.utils.FlowInstanceConstant;
import com.xinleju.erp.flowengine.utils.FlowInstanceStatus;
import com.xinleju.erp.flowengine.utils.FlowInstanceVariableType;
import com.xinleju.erp.flowengine.utils.IDGenerator;
import com.xinleju.erp.flowengine.utils.StepTypeStatus;
import com.xinleju.erp.flowengine.utils.TaskTypeStatus;
import com.xinleju.erp.frame.models.Company;
import com.xinleju.erp.frame.models.ServiceObjectDefine;
import com.xinleju.erp.frame.models.User;

@Service
public class FlowInstanceStepMobileServiceImpl extends BaseService implements FlowInstanceStepMobileService{

	private static final Logger logger = Logger
			.getLogger(FlowInstanceStepMobileServiceImpl.class);

	@Autowired
	private FlowInstanceCalculateFiService flowInstanceCalculateFiService;
	@Autowired
	private FlowInstanceCalculateAcService flowInstanceCalculateAcService;
	@Autowired
	private FlowInstanceCalculateStepService flowInstanceCalculateStepService;
	@Autowired
	private FlowInstanceCalculateWorkService flowInstanceCalculateWorkService;
	@Autowired
	private FlowInstanceStepWorkTaskExtendService flowInstanceStepWorkTaskExtendService;
	@Autowired
	private FlowInstanceFiService flowInstanceFiService;
	@Autowired
	private FlowInstanceStepService flowInstanceStepService;
	@Autowired
	private OpRelationService opRelationService;
	@Autowired
	private BizAttachmentService bizAttachmentService;
	@Autowired
	private BizDataDAO bizDataDAO;
	
	@Autowired
	private FlowInstanceEventService flowInstanceEventService;
	
    @Autowired
    private FlowInstanceOrgnApISerive flowInstanceOrgnApISerive;
	
	@Autowired
	private JdbcTemplate jt;
	@Autowired
	private NewFlowBizDataDao newFlowBizDataDao;
	
	@Autowired
	private ThreadPoolTaskExecutor taskExecutor;

	/* (non-Javadoc)
	 * 
	 * 流程代办打开
	 * @see com.xinleju.erp.flowengine.service.FlowInstanceStepMobileService#getToDoBean(java.lang.String, java.lang.String)
	 */
	@Override
	public ToDoBean getToDoBean(String taskId, String category)
			throws Exception {
	
		// TODO Auto-generated method stub
		category = FlowConstant.ATT_CODE_SP;
		/**
    	//当前任务
    	Wi curWi = formFlowService.getWi(wiId);
    	// 未读时置为已读
        if (1 != curWi.getIsRead()) {
            flowServerService.markWiIsRead(wiId);
        }
        // 催办的直接置为已办
        if (curWi.getStatus() == WsConstant.STATUS_RUNNING && WsConstant.WiType.CB.getCode().equals(curWi.getWiType())) {
            flowServerService.completeWi(wiId, curWi.getParticipant(), "", formFlowService.getOpName(OpType.YD, OpType.YD_NAME, "", null, false), "", null);
        }
        // 如果是抄送的
        if (WsConstant.WiType.CS.getCode().equals(curWi.getWiType()) || WsConstant.WiType.CY.getCode().equals(curWi.getWiType())) {
            flowServerService.completeWi(wiId, curWi.getParticipant(), "", formFlowService.getOpName(OpType.YD, OpType.YD_NAME, "", null, false), "", null);
        } 
        //将催办wi设置为催办对应待办的wp
        String dyType=null;
        if (WsConstant.WiType.CB.getCode().equals(curWi.getWiType()) && null != curWi.getAssignWiId()) {
        	dyType=WsConstant.WiType.CB.getCode();
        	curWi = formFlowService.getWi(curWi.getAssignWiId());
            wiId = curWi.getId();
        }
    
   
        /**
         * 组装当前任务
         */
       	FlowInstanceStepWorkTask flowInstanceStepWorkTask = flowInstanceCalculateStepService
				.getTaskById(taskId);
       	//如果任务没有人说明是待阅功能
       	try {
	
	       	String fiId="";
	       	if(flowInstanceStepWorkTask!=null){
	    		fiId=flowInstanceStepWorkTask.getFiId();
	       	}else{
	       		FlowInstanceStepWorkTaskExtend flowInstanceStepWorkTaskExtend = flowInstanceStepWorkTaskExtendService
	    				.getFlowInstanceStepWorkTaskExtendById(taskId);
	    		fiId = flowInstanceStepWorkTaskExtend.getRelationFiId();
	    		if (TaskTypeStatus.STATUS_UNREAD == flowInstanceStepWorkTaskExtend
	    				.getStatus()) {
	    			flowInstanceStepWorkTaskExtend
	    					.setStatus(TaskTypeStatus.STATUS_READ);
	    			flowInstanceStepWorkTaskExtendService
	    					.updateFlowInstanceStepWorkTaskExtend(flowInstanceStepWorkTaskExtend);
	    			if(TaskTypeStatus.TaskType.CB.getCode().equals(flowInstanceStepWorkTaskExtend.getType())){
	    				taskId=flowInstanceStepWorkTaskExtend.getRelationTaskId();
	    				flowInstanceStepWorkTask =flowInstanceCalculateStepService
	    				.getTaskById(taskId);
	    			}
	    		}
	       	}
	       	return getCommonToDoBean( fiId, taskId, flowInstanceStepWorkTask) ;
       	} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
       	
        return new ToDoBean(); 
	}
	
	
	/**
	 * 
	 * 业务列表查看
	 * @param flowCode
	 * @param bizId
	 * @return
	 * @throws Exception
	 */
	public ToDoBean getToDoBeanByflowCodeAndbizId(String flowCode, String bizId)
			throws Exception {
		String fiId="";
		
		Fl fl = flowInstanceCalculateAcService.getNewVersionFl(flowCode);
		if (fl == null) {
			return new ToDoBean(); 
		}

		ServiceObjectDefine serviceObjectDefine = fl.getServiceObjectDefine();
		if (serviceObjectDefine == null) {
			return new ToDoBean(); 
		}
		
		FlowInstance flowInstance = flowInstanceCalculateFiService.getFlowInstanceByBizIdAndBizType(bizId, 
				fl.getServiceObjectDefine().getId(), "createTime desc",
				FlowInstanceStatus.STATUS_RUNNING,
				FlowInstanceStatus.STATUS_COMPLETE,
				FlowInstanceStatus.STATUS_BACK);
		
		if(flowInstance==null){
			return new ToDoBean(); 
		}else{
			fiId=flowInstance.getGuid();
		}
		return getCommonToDoBean( fiId, null,null);
	}
	
	
	/**
	 * 
	 * 获取当前任务以及操作
	 * @param fiId
	 * @param taskId
	 * @param flowInstanceStepWorkTask
	 * @return
	 * @throws Exception
	 */
	private ToDoBean getCommonToDoBean(String fiId,String taskId,FlowInstanceStepWorkTask flowInstanceStepWorkTask) throws Exception{
		 ToDoBean toDoBean = new ToDoBean();
		  // 审批流以及审批历程
       	FlowInstanceWrapperBean flowInstanceWrapperBean = getFlowInstancesDto(fiId, null);
        //流程历经封装
    	List<ToDoWorkBean> toDoWorkBeanHistorys = new ArrayList<ToDoWorkBean>();
    	//流程的封装
    	ToDoFiBean  toDoFiBean=new ToDoFiBean();
    	//当前运行
    	List<ToDoWorkBean> toDoWorkBeanCurrents=new ArrayList<ToDoWorkBean>();
    	//本任务
    	ToDoWorkBean  toDoWorkBeanCurrentRun=new ToDoWorkBean();
    	//历史执行流程
    	
    	List<FlowInstanceDto> flowInstanceDtos= flowInstanceWrapperBean.getLstHistoryFlowInstanceDto();
    	if(flowInstanceDtos!=null && flowInstanceDtos.size()>0){
		    	for(FlowInstanceDto flowInstanceDto :flowInstanceDtos){
		    		if(flowInstanceDto!=null){
		    			toDoFiBean.setFlowInsName(flowInstanceDto.getFiName());
		    			toDoFiBean.setFlowName(flowInstanceDto.getFiName());
			  		    List<FlowInstanceStepDto> steps=flowInstanceDto.getLstFlowInstanceStep();
			  			for(FlowInstanceStepDto step :steps){
			        		List<FlowInstanceStepWorkDto>  works=step.getLstFlowInstanceStepWork();
			        		for(FlowInstanceStepWorkDto work:works){
			        			String postName=work.getParticipantPostName();
			        			List<FlowInstanceStepWorkTaskDto> taskDtos= work.getLstFlowInstanceStepWorkTask();
			        			if(taskDtos!=null && taskDtos.size()>0){
			        			    for(FlowInstanceStepWorkTaskDto taskDto:taskDtos){
			        			    	ToDoWorkBean toDoWorkBean=new ToDoWorkBean();
			        			    	String userNote=taskDto.getUserNote()!=null ? taskDto.getUserNote():"";
			        			    	String opName="";
			        			    	if(taskDto.getOpCode()!=null){
			        			    		String[] opNames=taskDto.getOpCode().split(";");
			        			    		if(opNames!=null && opNames.length>1){
			        			    			opName=opNames[1];
			        			    		}else{
			        			    			opName=taskDto.getOpCode();
			        			    		}
			        			    	}
			        			    	toDoWorkBean.setFlowInstanceId(flowInstanceDto.getGuid());
			        			    	toDoWorkBean.setFlowInstanceStepId(step.getGuid());
			        			    	toDoWorkBean.setFlowInstanceWorkId(work.getGuid());
			        			    	toDoWorkBean.setFlowInstancetaskId(taskDto.getGuid());
			        			    	toDoWorkBean.setWiName(step.getDisplayName());
			        			    	toDoWorkBean.setOpName(opName);
			        			    	toDoWorkBean.setOpRole(postName);
			        			    	toDoWorkBean.setUserNote(userNote);
			        			    	toDoWorkBean.setCompleteTime(DateUtils.formatDate(taskDto.getCompleteTime(), DateUtils.DATE_FORMAT_YYYY_MM_DD_HH_MM_SS));
			        			    	//toDoWorkBean.set
			        			    	//toDoWorkBean.setWiType(step.get);
			        			    	if(taskDto.getStatus() ==TaskTypeStatus.STATUS_COMPLETE ){
			         			    	   toDoWorkBean.setCompleteUserName(taskDto.getParticipantUserName());
			         			    	}else{
			         			    	   toDoWorkBean.setParticipantUserName(taskDto.getParticipantUserName());
			         			    	}

			         			    	toDoWorkBean.setStatus(taskDto.getStatus());
			        			    	toDoWorkBean.setStatus(taskDto.getStatus());
			        			    	toDoWorkBeanHistorys.add(toDoWorkBean);
			        			    }
			        			}else{
			        			    	ToDoWorkBean toDoWorkBean=new ToDoWorkBean();
			        			    	toDoWorkBean.setFlowInstanceId(flowInstanceDto.getGuid());
			        			    	toDoWorkBean.setFlowInstanceStepId(step.getGuid());
			        			    	toDoWorkBean.setFlowInstanceWorkId(work.getGuid());
			        			    	//toDoWorkBean.setFlowInstancetaskId(taskDto.getGuid());
			        			    	toDoWorkBean.setWiName(step.getDisplayName());
			        			    	toDoWorkBean.setOpName(work.getParticipantPostName());
			        			    	//toDoWorkBean.setWiType(step.get);
			        			    	toDoWorkBean.setStatus(work.getStatus());
			        			    	toDoWorkBeanHistorys.add(toDoWorkBean);
			        			}
			        		}
			        	}
		    		}
		        	
		        }
    	}
    	List<ToDoWpBean> canBackedWpList=new ArrayList<ToDoWpBean> ();
    	//当前执行流程
    	FlowInstanceDto flowInstanceDto= flowInstanceWrapperBean.getCurrentFlowInstanceDto();
        if(flowInstanceDto!=null){
        	toDoFiBean.setFlowInsName(flowInstanceDto.getFiName());
			toDoFiBean.setFlowName(flowInstanceDto.getFiName());
        	List<FlowInstanceStepDto> steps=  flowInstanceDto.getLstFlowInstanceStep();
        	
        	List<FlowInstanceStepTaskBackDto>	lstFlowInstanceStepTaskBackDto = flowInstanceCalculateStepService.getFlowInstanceStepTaskBackDtoByFiId(fiId);
        	for(FlowInstanceStepTaskBackDto flowInstanceStepTaskBackDto:lstFlowInstanceStepTaskBackDto){
        		ToDoWpBean toDoWpBean=new ToDoWpBean();
    			toDoWpBean.setWpName(flowInstanceStepTaskBackDto.getDisplayName());
    			toDoWpBean.setFlowInstanceId(flowInstanceStepTaskBackDto.getFiId());
    			toDoWpBean.setFlowInstanceStepId(flowInstanceStepTaskBackDto.getStepId());
    			toDoWpBean.setFlowInstanceTaskId(flowInstanceStepTaskBackDto.getTaskId());
    			toDoWpBean.setTaskDealPersonName(flowInstanceStepTaskBackDto.getComplete_user_name());
    			canBackedWpList.add(toDoWpBean);
        	}
        	
        	for(FlowInstanceStepDto step :steps){
        		List<FlowInstanceStepWorkDto>  works=step.getLstFlowInstanceStepWork();
        		if(works!=null && works.size()>0){
		        		for(FlowInstanceStepWorkDto work:works){
		        	    	String postName=work.getParticipantPostName();
		        			List<FlowInstanceStepWorkTaskDto> taskDtos= work.getLstFlowInstanceStepWorkTask();
		        			if(taskDtos!=null && taskDtos.size()>0){
		        			    for(FlowInstanceStepWorkTaskDto taskDto:taskDtos){
		        			    	String userNote=taskDto.getUserNote()!=null ? taskDto.getUserNote():"";
		        			    	String opName="";
		        			    	if(taskDto.getOpCode()!=null){
		        			    		String[] opNames=taskDto.getOpCode().split(";");
		        			    		if(opNames!=null && opNames.length>1){
		        			    			opName=opNames[1];
		        			    		}else{
		        			    			opName=taskDto.getOpCode();
		        			    		}
		        			    	}
		        			    	ToDoWorkBean toDoWorkBean=new ToDoWorkBean();
		        			    	toDoWorkBean.setFlowInstanceId(flowInstanceDto.getGuid());
		        			    	toDoWorkBean.setFlowInstanceStepId(step.getGuid());
		        			    	toDoWorkBean.setFlowInstanceWorkId(work.getGuid());
		        			    	toDoWorkBean.setFlowInstancetaskId(taskDto.getGuid());
		        			    	toDoWorkBean.setWiName(step.getDisplayName());
		        			    	toDoWorkBean.setCompleteTime(DateUtils.formatDate(taskDto.getCompleteTime(), DateUtils.DATE_FORMAT_YYYY_MM_DD_HH_MM_SS));
		        			    	toDoWorkBean.setOpRole(postName);
		        			    	if(taskDto.getStatus()!=TaskTypeStatus.STATUS_RUNNING ){
		        			    	   toDoWorkBean.setOpName(opName);
		        			    	   toDoWorkBean.setUserNote(userNote);
		        			    	}
		        			    	//人员
		        			    	if(taskDto.getStatus() ==TaskTypeStatus.STATUS_COMPLETE ){
		        			    	   toDoWorkBean.setCompleteUserName(taskDto.getParticipantUserName());
		        			    	}else{
		        			    	   toDoWorkBean.setParticipantUserName(taskDto.getParticipantUserName());
		        			    	}
		
		        			    	toDoWorkBean.setStatus(taskDto.getStatus());
		        			    	toDoWorkBeanHistorys.add(toDoWorkBean);
		        			      
		        			    	if(taskDto.getStatus() ==TaskTypeStatus.STATUS_RUNNING ){
		        			    		ToDoWorkBean toDoWorkBeanCurrent=new ToDoWorkBean();
		        			    		toDoWorkBeanCurrent.setFlowInstanceId(flowInstanceDto.getGuid());
		        			    		toDoWorkBeanCurrent.setFlowInstanceStepId(step.getGuid());
		        			    		toDoWorkBeanCurrent.setFlowInstanceWorkId(work.getGuid());
		        			    		toDoWorkBeanCurrent.setFlowInstancetaskId(taskDto.getGuid());
		        			    		toDoWorkBeanCurrent.setWiName(step.getDisplayName());
		        			    		toDoWorkBeanCurrent.setOpName(opName);
		        			    		toDoWorkBeanCurrent.setOpRole(postName);
		        			    		toDoWorkBeanCurrent.setUserNote(userNote);
		        			    		toDoWorkBeanCurrent.setParticipantUserName(taskDto.getParticipantUserName());
		        			    		toDoWorkBeanCurrent.setStatus(taskDto.getStatus());
		        			    		toDoWorkBeanCurrents.add(toDoWorkBeanCurrent);
		        			    	}
		        			    	//当前任务
		        			    	if(taskId!=null && taskDto.getGuid().equals(taskId)){
		        			    		toDoWorkBeanCurrentRun.setFlowInstanceId(flowInstanceDto.getGuid());
		        			    		toDoWorkBeanCurrentRun.setFlowInstanceStepId(step.getGuid());
		        			    		toDoWorkBeanCurrentRun.setFlowInstanceWorkId(work.getGuid());
		        			    		toDoWorkBeanCurrentRun.setFlowInstancetaskId(taskDto.getGuid());
		        			    		toDoWorkBeanCurrentRun.setWiName(step.getDisplayName());
		        			    		toDoWorkBeanCurrentRun.setOpRole(postName);
		        			    		toDoWorkBeanCurrentRun.setOpName(opName);
		        			    		toDoWorkBeanCurrentRun.setUserNote(userNote);
		        			    		toDoWorkBeanCurrentRun.setStatus(taskDto.getStatus());
		        			    		//人员
		        			    		if(taskDto.getStatus() ==TaskTypeStatus.STATUS_COMPLETE ){
		             			    	   toDoWorkBean.setCompleteUserName(taskDto.getParticipantUserName());
		             			    	}else{
		             			    	   toDoWorkBean.setParticipantUserName(taskDto.getParticipantUserName());
		             			    	}
		        			    		toDoWorkBeanCurrents.add(toDoWorkBeanCurrentRun);
		        			    	}
		        			    	
		        			    	
		        			    }
		        			}else{
		        			    	ToDoWorkBean toDoWorkBean=new ToDoWorkBean();
		        			    	toDoWorkBean.setFlowInstanceId(flowInstanceDto.getGuid());
		        			    	toDoWorkBean.setFlowInstanceStepId(step.getGuid());
		        			    	toDoWorkBean.setFlowInstanceWorkId(work.getGuid());
		        			    	//toDoWorkBean.setFlowInstancetaskId(taskDto.getGuid());
		        			    	toDoWorkBean.setWiName(step.getDisplayName());
		        			    	toDoWorkBean.setOpRole(postName);
		        			    	toDoWorkBean.setParticipantUserName(work.getParticipantsDefineName());
		        			    	//toDoWorkBean.setWiType(step.get);
		        			    	toDoWorkBean.setStatus(work.getStatus());
		        			    	toDoWorkBeanHistorys.add(toDoWorkBean);
		        			}
		        		}
        		}else{
        			ToDoWorkBean toDoWorkBean=new ToDoWorkBean();
			    	toDoWorkBean.setFlowInstanceId(flowInstanceDto.getGuid());
			    	toDoWorkBean.setFlowInstanceStepId(step.getGuid());
			    	toDoWorkBean.setFlowInstanceWorkId(flowInstanceDto.getGuid());
			    	//toDoWorkBean.setFlowInstancetaskId(taskDto.getGuid());
			    	toDoWorkBean.setWiName(step.getDisplayName());
			    	//toDoWorkBean.setOpRole(postName);
			    	//toDoWorkBean.setParticipantUserName(work.getParticipantsDefineName());
			    	//toDoWorkBean.setWiType(step.get);
			    	toDoWorkBean.setStatus(step.getStatus());
			    	toDoWorkBeanHistorys.add(toDoWorkBean);
        		}
        	}
        	
        }
        toDoBean.setWiBean(toDoWorkBeanCurrentRun);
        toDoBean.setFiBean(toDoFiBean);
        toDoBean.setWiList(toDoWorkBeanHistorys);
        
        
        if(flowInstanceStepWorkTask!=null){
	        String opType=getDao().findString("select opType from Msg where msgId = ? ", "task_"+taskId);
	        toDoBean.setOpType(opType);
        }else{
        	if(taskId!=null){
        		String opType=getDao().findString("select opType from Msg where msgId = ? ", "teId_"+taskId);
    	        toDoBean.setOpType(opType);
        	}
        
        }
        List<ToDoButtonBean> bbList=new ArrayList<ToDoButtonBean>();
        if(flowInstanceStepWorkTask!=null){
           // 获取最新的
	 		Map<String, Object> map = opRelationService
	 				.getOpRelationInsByTaskId(flowInstanceStepWorkTask);
	 		List<OpRelationInsDto>	lstRelationIns = (List<OpRelationInsDto>) map.get("opRelationInsDtos");
	 		if(lstRelationIns!=null && lstRelationIns.size()>0){
	 			int i=0;
	 			for(OpRelationInsDto opRelationInsDto:lstRelationIns){
	 				ToDoButtonBean toDoButtonBean=new ToDoButtonBean();
	 				toDoButtonBean.setName(opRelationInsDto.getOpName());
	 				toDoButtonBean.setCode(opRelationInsDto.getOpCode());
	 				toDoButtonBean.setSort(i++);
	 				bbList.add(toDoButtonBean);
	 			}
	 		}
	 		toDoBean.setBbList(bbList);
        }
 	
        //业务数据
        List<NameValuePair> dataList = new ArrayList<NameValuePair>();
        try {
        	List<BizDataDTO> bizDataDTOList = newFlowBizDataDao.getBizDataDTOList(flowInstanceDto.getGuid(), null);
        	if(CollectionUtils.isEmpty(bizDataDTOList)){
        		String flowCode=getDao().findString("select flowCode from Fl where id = ? ",flowInstanceDto.getFlId());
        		saveMobileBizData(flowCode,flowInstanceDto.getBizId() ,flowInstanceDto.getGuid());
        		bizDataDTOList = newFlowBizDataDao.getBizDataDTOList(flowInstanceDto.getGuid(), null);
        	}
        	for (BizDataDTO bizDataDTO : bizDataDTOList){
        		dataList.add(ApiUtils.buildNameValuePair(bizDataDTO));
        	}
        } catch (Exception e){
        	e.printStackTrace();
        }
      
        
        toDoBean.setToDoWpBeanList(canBackedWpList);
        
        //得到附件
        List<UploadBean>  uploadList=new ArrayList<UploadBean>();
        String appCode=flowInstanceDto.getAppCode();
        try{
	        //通过接口得到附件的ownerid
			if(appCode!=null && "ZB".equals(appCode)){
				IZbBaseBizDataFileService iZbBaseBizDataFileService = App.getBean(IZbBaseBizDataFileService.class);
				String serviceId = "i" + (appCode.substring(0,1) + appCode.substring(1).toLowerCase()) + "BaseBizDataService";
				String soCode = null != flowInstanceDto.getBizCode() ? flowInstanceDto.getBizCode() : "";
				IBaseBizDataService iBaseBizDataService = App.getBean(IMyDubboService.class).getBaseBizDataService(serviceId);
				List<String> strs=iBaseBizDataService.queryBizUpload(soCode,flowInstanceDto.getBizId());
				uploadList=iZbBaseBizDataFileService.getUploadBeanList(strs);
				//
			}else{
			    String serviceId = "i" + (appCode.substring(0,1) + appCode.substring(1).toLowerCase()) + "BaseBizDataService";
				IBaseBizDataService iBaseBizDataService = App.getBean(IMyDubboService.class).getBaseBizDataService(serviceId);
				String soCode = null != flowInstanceDto.getBizCode() ? flowInstanceDto.getBizCode() : "";
				List<String> strs=iBaseBizDataService.queryBizUpload(soCode,flowInstanceDto.getBizId());
				uploadList=fillBizUploadFiles(strs);
			}
        }catch(Exception e){
        	logger.info("编号为："+appCode+"附件接口未修改");
        	e.printStackTrace();
        }
		
		toDoFiBean.setUploadList(uploadList);
		toDoFiBean.setDataList(dataList);
		toDoBean.setFiBean(toDoFiBean);
//		/uploadList
        
        /**
         * 组装可退回的任务组
         */
		/**
        List<ToDoWpBean> canBackedWpList = new ArrayList<ToDoWpBean>();
        //当前的wp
        WpBean curWp = ApiUtils.buildWpBean(null != curWi ? curWi.getWp() : null, true, true, true);;
        //可以退回的节点列表
        for (WpBean wb : runningSpStepList){
        	if (curWp.getTp() > wb.getTp()){
        		canBackedWpList.add(ApiUtils.buildToDoWpBean(wb));
        	}
        }
        
        toDoBean.setToDoWpBeanList(canBackedWpList);
        
        /**
         * 审批历程
         */
		/**
        List<ToDoWorkBean> wiList = formFlowService.fixToDoWorkBeanList(spStepMap, fi, category);
        toDoBean.setWiList(wiList);
        
        /**
         * 组装操作按钮
         */
		/**
        spButtons = formFlowService.getSpButtons(curWi, opRelationInsBeanListMap);
        List<ToDoButtonBean> buttonList = new ArrayList<ToDoButtonBean>();
        if(spButtons!=null && spButtons.size()>0){
        	   for (OpRelationInsBean sb : spButtons){
               	buttonList.add(ApiUtils.buildOpRelationInsBean(sb));
               }
        }
     
        toDoBean.setBbList(buttonList);
        **/
        
		
		
        
        
		return toDoBean;
	}
	

	
	@Override
	public List<Map<String, Object>> getAddtionalFlowInstance() throws Exception {
		// TODO Auto-generated method stub
		String sql="select f.guid as fiId,f.biz_id  as bizId ,l.flow_code as flowCode from flow_instance f ,tf_fl l where f.fl_id=l.id and f.guid  not in(select  bd.flow_instance_id from tf_biz_data bd where bd.flow_instance_id is not null)";
		List<Map<String, Object>> list=jt.queryForList(sql);
		return list;
	}




	public List<UploadBean> fillUploadFiles(String wiId, String category) {
		List<UploadBean> uploadBeanLst = new ArrayList<UploadBean>();
		// 读取上传的附件信息
        Wi wi = getDao().getById(Wi.class, wiId);
        Long fiId = wi.getFiId();
		String ownerId = "fiId_" + fiId + "_wiId_" + wiId;
		DetachedCriteria dc = DetachedCriteria.forClass(Upload.class);
		if(StringUtils.isNotEmpty(category)){
			dc.add(Restrictions.eq("category", category));
		}
		if(StringUtils.isNotEmpty(ownerId)){
			dc.add(Restrictions.eq("ownerId", ownerId));
		}
		List<Upload> files = getDao().findByCriteria(dc);
        for ( Upload file: files ) {
        	uploadBeanLst.add(ApiUtils.buildUploadBean(file));
        }
        return uploadBeanLst;
	}

	@Override
	public SimpleResult completeTask(Long opUserId, String taskId,
			String userNote, String opCode, String opName,
			String dealUsersIds, String backTostepId,String backTaskId, boolean backSkip,
			String flowInsName)throws Exception{
		// TODO Auto-generated method stub
//	 	
//		checkCompleteWork( spGwId,  taskId,
//				 opCode,  opName,  userNote,  dealUsersIds,
//				 backToTaskId,  backSkip,  flowInsName,
//				 opUserId) ;
		SimpleResult simpleResult=new SimpleResult();
		Map<String, Object> dealMap = checkCompleteWork(opUserId, taskId, opCode, opName, userNote, dealUsersIds,
				backTostepId, backTaskId, backSkip, flowInsName);
		if ((Boolean) dealMap.get("success")) {
			User user=getDao().getById(User.class, opUserId, null);
			completeTask(taskId, opCode, opName, userNote, dealUsersIds, backTostepId, backTaskId, backSkip, flowInsName, user);
		}
		return simpleResult;
	}

	@SuppressWarnings("unused")
	private static Map<String, Object> checkCompleteWork(Long opUserId, String taskId,
			String opCode, String opName, String userNote, String dealUsersIds,
			String backToWpId,String backToTaskId,boolean backSkip, String flowInsName) throws Exception {
		// TODO Auto-generated method stub
		Map<String,Object> jsonMap = new HashMap<String, Object>();
    	boolean isSuccess = true;
    	String msg = "";
    	if (null == opUserId){
    		isSuccess = false;
    		msg = "操作人不能为空！";
    	}
    	if (null == taskId){
    		isSuccess = false;
    		msg = "任务不能为空！";
    	}
    	if (StringUtils.isBlank(opCode)){
    		isSuccess = false;
    		msg = "操作类型不能为空！";
    	}
    	// 转办
        if (OpType.ZB.equals(opCode)) {
            if (!StringUtils.isNotBlank(dealUsersIds)) {
            	isSuccess = false;
        		msg = "被转办人不能为空！";
            } else if (!StringUtils.isNumeric(dealUsersIds)) {
            	isSuccess = false;
        		msg = "不能转办多人！";
            }
        // 发起协办
        } else if (OpType.XB.equals(opCode)) {
            //操作人处理
            if(StringUtils.isBlank(dealUsersIds)){
            	isSuccess = false;
        		msg = "协办人不能为空！";
            }
        // 沟通发起人
        } else if (OpType.GTFQR.equals(opCode)) {
        	
        // 沟通发起人页面的同意不同意操作
        } else if (OpType.JS.equals(opCode) || OpType.BJS.equals(opCode)) {
            
        // 驳回
        } else if (OpType.BH.equals(opCode)) {
            if (null == backToWpId) {
            	isSuccess = false;
        		msg = "退回到的节点不能为空！";
            }
        // 其他
        } 
        jsonMap.put("success", isSuccess);
        jsonMap.put("msg", msg);
    	return jsonMap;
	}

	
	private Map<String, Object> completeTask(String taskId,
			String opCode, String opName, String userNote, String dealUsersIds,
			String backTostepId,String backTaskId, boolean backSkip, String flowInsName,
			User user) throws Exception {
		FlowInstanceStepWorkTask flowInstanceStepWorkTask = flowInstanceCalculateStepService
				.getTaskById(taskId);
		flowInstanceStepWorkTask.setOpCode(opCode+";"+opName);
		flowInstanceStepWorkTask.setUserNote(userNote);
		// 当前用户登录信息
		flowInstanceStepWorkTask.setCompleteUserId(user.getId());
		flowInstanceStepWorkTask.setCompleteUserLoginName(user.getLoginname());
		flowInstanceStepWorkTask.setCompleteUserName(user.getRealName());
		UserDTO userDto=new UserDTO();
		userDto.setId(user.getId());
 		userDto.setLoginName(user.getLoginname());
		userDto.setRealName(user.getRealName());
		switch (opCode) {
		case "BH":
			FlowInstance flowInstance=flowInstanceCalculateFiService.getById(flowInstanceStepWorkTask.getFiId());
			
			flowInstanceStepService.saveToBack(flowInstance,flowInstanceStepWorkTask, backTostepId, backTaskId,backSkip,userDto);
			break;
		case "ZB":
			flowInstanceStepService.saveToZB(flowInstanceStepWorkTask, dealUsersIds,userDto);
			break;
		case "SH":
			flowInstanceStepService.saveRecycleCoHost(flowInstanceStepWorkTask);
			break;
		case "XB":
			flowInstanceStepService.saveToXB(flowInstanceStepWorkTask,
					Arrays.asList(dealUsersIds.split(",")),userDto);
			break;
		case "GTFQR":
			flowInstanceStepService.saveToGT(flowInstanceStepWorkTask,userDto);
			break;
		case "HF":
			flowInstanceStepService.saveToHF(flowInstanceStepWorkTask,userDto);
			break;
		default:
			flowInstanceStepService.save(flowInstanceStepWorkTask,userDto);
			break;
		}
		return null;
	}
	
	private FlowInstanceWrapperBean getFlowInstancesDto(String current_fiId,
			FlowInstance historyFlowInstance) {
		// 对象封装
		String backFiIds = null;
		FlowInstanceWrapperBean flowInstanceWrapperBean = new FlowInstanceWrapperBean();
		FlowInstanceDto flowInstanceDto = null;
		if (historyFlowInstance != null) {
			backFiIds = historyFlowInstance.getBackFiIds();
			if (StringUtils.isNotBlank(backFiIds)) {

				backFiIds = backFiIds + FlowInstanceConstant.SEPARATOR_COMMA
						+ historyFlowInstance.getGuid();
			} else {
				backFiIds = historyFlowInstance.getGuid();
			}
		} else {
			flowInstanceDto = flowInstanceCalculateFiService
					.getFlowInstanceDto(current_fiId);
			flowInstanceWrapperBean.setCurrentFlowInstanceDto(flowInstanceDto);
			backFiIds = flowInstanceDto.getBackFiIds();
		}
		if (StringUtils.isNotBlank(backFiIds)) {
			// 获取最新打回流程
			flowInstanceWrapperBean
					.setLstHistoryFlowInstanceDto(flowInstanceCalculateFiService
							.getFlowInstanceByIds(backFiIds));
		}
		if (StringUtils.isNotBlank(backFiIds)) {
			backFiIds = backFiIds + FlowInstanceConstant.SEPARATOR_COMMA
					+ current_fiId;
		} else {
			backFiIds = current_fiId;
		}
		return flowInstanceWrapperBean;
	}
	
	
	public List<UploadBean> fillBizUploadFiles(List<String> ls) {
		List<UploadBean> uploadBeanLst = new ArrayList<UploadBean>();
		if(ls!=null&&ls.size()>0){
			for(String ownerId:ls){
				// 读取上传的附件信息
				DetachedCriteria dc = DetachedCriteria.forClass(Upload.class);
				if(StringUtils.isNotEmpty(ownerId)){
					dc.add(Restrictions.eq("ownerId", ownerId));
				}
				List<Upload> files = getDao().findByCriteria(dc);
		        for ( Upload file: files ) {
		        	uploadBeanLst.add(ApiUtils.buildUploadBean(file));
		        }
			}
		}
        return uploadBeanLst;
	}
	
	public void saveMobileBizData(final String flowCode,final String bizId,final String fiId){
		
		taskExecutor.submit(new Runnable() {
			@Override
			public void run() {
				try {
					logger.info("queryBizData方法：flowCode="+flowCode+",bizId="+bizId+",fiId="+fiId);
					List<BizDataDTO> lstBizData = App.getBean(SmBizDataService.class).queryBizData(flowCode, bizId, null);
					
					if(lstBizData != null && lstBizData.size() > 0){
						newFlowBizDataDao.batchSave(fiId, lstBizData);
					}
				
				} catch (Exception ex) {
					logger.error("请求业务单据异常：", ex);
				}
			}
		});
	}




	@Override
	public SimpleResult startFlowTask(Long spGwId,
			Long startUserId, String userNote, String flowCode, String bizId)
			throws Exception {
		// TODO Auto-generated method stub
		SimpleResult simpleResult=new SimpleResult();
		simpleResult.setResult(true);
		Map<String, Object> dealMap =checkstartFlowTask(spGwId, startUserId, userNote, flowCode, bizId);
		if ((Boolean) dealMap.get("success")) {
			User user=getDao().getById(User.class, startUserId, null);
			Fl fl = flowInstanceCalculateAcService.getNewVersionFl(flowCode);
			Long flId = fl.getId();
			String fiId=null;
			String fiName=null;
			String bizUrl = fl.getServiceObjectDefine().getUrlSp();
			Long bizType = fl.getServiceObjectDefine().getId();

			// 获取运行中的流程实例  
			FlowInstance oldFlowInstance = flowInstanceCalculateFiService
					.getFlowInstanceByBizIdAndBizType(bizId, bizType, "sort desc",
							FlowInstanceStatus.STATUS_RUNNING,
							FlowInstanceStatus.STATUS_COMPLETE);

			if (oldFlowInstance != null) {
				fiId = oldFlowInstance.getGuid();
				fiName = oldFlowInstance.getFiName();
				return new SimpleResult();
			}

			// 获取最新打回的流程
			FlowInstance flowInstance = flowInstanceCalculateFiService.getFlowInstanceByBizIdAndBizType(bizId, bizType,
												"completeTime desc", FlowInstanceStatus.STATUS_BACK);
			// 获取最新打回的流程
			FlowInstance flowInstanceOver = flowInstanceCalculateFiService.getFlowInstanceByBizIdAndBizType(bizId, bizType,
												"completeTime desc", FlowInstanceStatus.STATUS_OVERDUE);
			if(flowInstanceOver!=null){
				String backIds=flowInstanceOver.getBackFiIds();
				if(backIds!=null && flowInstance !=null && backIds.contains(flowInstance.getGuid())){
					flowInstance=null;
				}
			}
			FlowInstanceWrapperBean flowInstanceWrapperBean = null;
			if (flowInstance != null) {
				// 获取最新历史流程对象
				flowInstanceWrapperBean = getFlowInstancesDto(null, flowInstance);
			}
			// 展现历史
			if (flowInstanceWrapperBean != null) {
			
			} else {
				flowInstanceWrapperBean = new FlowInstanceWrapperBean();
			}

			FlowInstanceVariableMap fivm = findFlowInstanceVariableMap( startUserId, flowCode, bizId);
			
			
			//添加发起岗位
			fivm.add(new FlowInstanceVariable(
					FlowInstanceVariableType.FLOW_START_OP_POST_ID, spGwId));
			
			flowInstanceWrapperBean.setFlowInstanceVariableMap(fivm);
			// 设置流程名称
			fiName = flowInstanceCalculateFiService.fixFiName(fl,fivm.getValueMap(), user.getRealName());
			
			
			UserDTO userDto=new UserDTO();
			userDto.setId(user.getId());
			userDto.setLoginName(user.getLoginname());
			userDto.setRealName(user.getRealName());
			
			
		     flowInstance = flowInstanceCalculateFiService
					.getFlowInstance(fl, bizId, userDto, fivm);

			List<AcDto> lstAcDto = flowInstanceCalculateAcService.getAcDtos(fl,
					fivm);

			List<FlowInstanceStep> lstFlowInstanceStep = flowInstanceCalculateStepService
					.getFlowInstanceStep(lstAcDto, flowInstance);

			lstFlowInstanceStep = flowInstanceCalculateWorkService
					.getFlowInstanceStepList(lstFlowInstanceStep, fivm);

			flowInstance.setLstFlowInstanceStep(lstFlowInstanceStep);
			
			
			//历史流程
			List<FlowInstanceDto> lstFlowInstanceDto = flowInstanceWrapperBean
					.getLstHistoryFlowInstanceDto();

			// 重新发起操作【设置流程关联】
			if (CollectionUtils.isNotEmpty(lstFlowInstanceDto)) {
				// 获取流程实例历史ID
				flowInstance.setBackFiIds(getMergedBackFiIds(lstFlowInstanceDto
						.get(lstFlowInstanceDto.size() - 1)));
			}

			
		   //设置流程名称
			flowInstance.setFiName(fiName);
			flowInstance.setStartPostId(spGwId);
			Company company=flowInstanceOrgnApISerive.getCompanyByRoleId(spGwId);
			if(company!=null){
				flowInstance.setCompanyId(company.getId());
				flowInstance.setCompanyName(company.getName());
			}
			
			//需要把选择的岗位需要预处理手机端提交没有动态添加人员，所以无需动用工作组
			//flowInstance=flowInstanceFiService.getPreDealWithFlowInstance(flowInstance);
			
			//当前提交动作的任务
			FlowInstanceStepWorkTaskDto flowInstanceStepWorkTask=new FlowInstanceStepWorkTaskDto();
			flowInstanceStepWorkTask.setOpCode("TJSP;发起");
			flowInstanceStepWorkTask.setUserNote(userNote);
			
			/**
			List<FlowInstanceStep>  steps=  flowInstance.getLstFlowInstanceStep();
			for(FlowInstanceStep step :steps){
				
				if(StepTypeStatus.AUTOACTIVITE!=step.getIsAuto()){
					List<FlowInstanceStepWork> works=step.getLstFlowInstanceStepWork();
					if(works!=null && works.size()>0){
						  for(FlowInstanceStepWork work:works){
						    	String defineName= work.getParticipantsDefineName();
						    	if(StringUtils.isBlank(defineName)){
						    		simpleResult.setResult(false);
						    		simpleResult.setMsg("流程解析岗位为空！");
						    		return simpleResult;
						    	}
						    }
					}else{
						simpleResult.setResult(false);
			    		simpleResult.setMsg("流程解析岗位为空！");
			    		return simpleResult;
					}
				  
				}
			}
			**/
			//流程保存
			flowInstanceFiService.save(flowInstance, flowInstanceStepWorkTask,userDto);
            
			
			//手机端保存
			saveMobileBizData(flowCode, bizId,flowInstance.getGuid());
            
			//对外调用流程状态
			flowInstanceEventService.changeAfterSaveFlowInstanceEvent(flowInstance);
			
			
		}
		return simpleResult;
	}
	
	private String getMergedBackFiIds(FlowInstanceDto latestFlowInstanceHistory) {

		StringBuilder sbBackFiIds = new StringBuilder();

		String backFiIds = latestFlowInstanceHistory.getBackFiIds();

		if (StringUtils.isNotBlank(backFiIds)) {
			sbBackFiIds.append(backFiIds)
					.append(FlowInstanceConstant.SEPARATOR_COMMA)
					.append(latestFlowInstanceHistory.getGuid());
		} else {
			sbBackFiIds.append(latestFlowInstanceHistory.getGuid());
		}
		return sbBackFiIds.toString();
	}

	
	/**
	 * 获取流程参数
	 * @param startUserId
	 * @return
	 * @throws Exception
	 */
	private FlowInstanceVariableMap findFlowInstanceVariableMap(Long startUserId,String flowCode,String bizId)
			throws Exception {

		FlowInstanceVariableMap fivm = FlowInstanceVariableMap.create();
		Map<String, Object> map = App.getBean(SmObjectService.class).queryDetail(flowCode, bizId);

		if (null != map && map.size() > 0) {
			for (Map.Entry<String, Object> e : map.entrySet()) {

				fivm.add(new FlowInstanceVariable(e.getKey(), e.getValue()));
			}
		}
		fivm.add(new FlowInstanceVariable(
				FlowInstanceVariableType.FLOW_START_OP_USER_ID, startUserId));
		return fivm;
	}
	
	private static Map<String, Object> checkstartFlowTask(Long spGwId,
			Long startUserId, String userNote, String flowCode, String bizId) throws Exception {
		// TODO Auto-generated method stub
		Map<String,Object> jsonMap = new HashMap<String, Object>();
    	boolean isSuccess = true;
    	String msg = "";
    	if (null == spGwId){
    		isSuccess = false;
    		msg = "岗位不能为空！";
    	}
    	if (null == startUserId){
    		isSuccess = false;
    		msg = "发起人不能为空！";
    	}
    	if (StringUtils.isBlank(bizId)){
    		isSuccess = false;
    		msg = "业务Id不能为空！";
    	}
    	if (StringUtils.isBlank(flowCode)){
    		isSuccess = false;
    		msg = "流程编号不能为空！";
    	}    	
        jsonMap.put("success", isSuccess);
        jsonMap.put("msg", msg);
    	return jsonMap;
	}
}
