/**   
 *
 * @version V1.0   
 */
package com.xinleju.erp.finance.utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.CellRangeAddress;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.xinleju.erp.base.app.models.IdEntity;
import com.xinleju.erp.finance.models.ErrorTip;
import com.xinleju.erp.finance.models.FiAccountCaption;


/**
 * @author Administrator
 * 
 */
@SuppressWarnings("deprecation")
public class ExcelHandlerUtil {

	public static HSSFWorkbook onexport(List<IExcelHandler> handlerList,String accountSetCode,Long sysId,Long accountSetId,Long companyId) {
		HSSFWorkbook wb = new HSSFWorkbook();
		try{
		for(IExcelHandler handler:handlerList){
			HSSFSheet sheet = wb.createSheet(handler.getSheetName());
	
			String[] colsName = handler.getHeadItemsNameAry();
			String[] colscode = handler.getHeadItemsCodeAry();
			Integer[] colsLength = handler.getHeadItemsLength();
			Boolean[] redColor = handler.getHeadItemsColor();
			List<?> list = handler.getEntityList(handler,accountSetCode,sysId,accountSetId,companyId);
			List<String> tips = handler.getTipsList();
	
			HSSFCellStyle style = getStyle(wb);
			HSSFCellStyle redstyle = getRedStyle(wb);
			HSSFCellStyle nomstyle = getNormStyle(wb);
	
			for (int i = 0; i < tips.size(); i++) {
				HSSFRow row = sheet.createRow((int) i);
				HSSFCell cell = row.createCell(0);
				cell.setCellValue(tips.get(i));
				cell.setCellStyle(style);
			}
			int count = tips.size();
			// 复合表头
			Map<String, Integer[]> cellJoinMap = handler.getCellJoinMap();
			if (cellJoinMap != null && cellJoinMap.keySet().size() > 0) {
				HSSFRow row = sheet.createRow(count++);
				for (int i = 0; i < colsName.length; i++) {
					HSSFCell cell = row.createCell(i);
					cell.setCellValue("");
				}
				for (String str : cellJoinMap.keySet()) {
					Integer[] ary = cellJoinMap.get(str);
					if (ary == null || ary.length < 4) {
						continue;
					}
					row.getCell(ary[2]).setCellValue(str);
					row.getCell(ary[2]).setCellStyle(nomstyle);
					sheet.addMergedRegion(new CellRangeAddress(ary[0], ary[1],
							ary[2], ary[3]));
				}
			}
			// 冻结单元格
			if (cellJoinMap != null) {
				sheet.createFreezePane(0, tips.size() + 2);
			} else {
				sheet.createFreezePane(0, tips.size() + 1);
			}
	
			HSSFRow row = sheet.createRow(count++);
	
			for (int i = 0; i < colsName.length; i++) {
				HSSFCell cell = row.createCell(i);
				cell.setCellValue(colsName[i]);
				if (null == redColor[i] || redColor[i]) {
					cell.setCellStyle(redstyle);
				} else {
					cell.setCellStyle(nomstyle);
				}
				sheet.autoSizeColumn(i);
				// 设置列宽度（像素）
				sheet.setColumnWidth(i, i >= colsLength.length ? 42 * 100 : 42 * colsLength[i]);
			}
			if (list != null && list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					row = sheet.createRow(count++);
//					FiAccountCaption entity = (FiAccountCaption) list.get(i);
					for (int j = 0; j < colscode.length; j++) {
						HSSFCell cell = row.createCell(j);
						cell.setCellStyle(style);
						if (null == redColor[j] || !redColor[j]) {
							Object obj = getter(list.get(i), colscode[j]);
							obj = obj == null ? "" : obj;
							setValue(cell, obj);
						}
					}
				}
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return wb;
	}

	public static void importPr(FileInputStream fileInputStream,String accountSetCode,String sysId,String companyCode,String accountSetId,List<IExcelHandler> handlerList,Long companyId){
		try{
			POIFSFileSystem fs = new POIFSFileSystem(fileInputStream);  
            HSSFWorkbook workbook = new HSSFWorkbook(fs);
            int num = workbook.getNumberOfSheets();
            for(int i=0;i<num;i++){
            	HSSFSheet sheet = workbook.getSheetAt(i);
            	if (sheet != null){
            		IExcelHandler handler = handlerList.get(i);
            		handler.importPr(accountSetCode, sysId, companyCode,accountSetId, sheet,companyId);
            	}
            }
		}catch(Exception e){
			e.printStackTrace();
		}
	}

	public static Map<String, Object> onimport(String path,
			IExcelHandler handler) throws Exception {
		Map<String, Object> map = new HashMap<String, Object>();
		String errorMsg = "";
		List<IdEntity> list = new ArrayList<IdEntity>();
		List<ErrorTip> errorlist = new ArrayList<ErrorTip>();

		String[] cloumns = handler.getImportColumns();
		String[] cloumnsName = handler.getImportHeadItemsName();
		Class<?>[] clazzs = handler.getImportColumnsType();
		List<String> tips = handler.getTipsList();
		Boolean[] isImportAry = handler.getColsIsImp();
		if (cloumns == null || clazzs == null || cloumns.length == 0
				|| clazzs.length == 0) {
			errorMsg += "缺少导入字段参数;<br/>";
		} else if (cloumns != null && clazzs != null
				&& cloumns.length != clazzs.length) {
			errorMsg += "导入字段参数与类型不匹配;<br/>";
		}
		IdEntity entity = null;
		Class<?> importClass = handler.getImpClass();
		if (importClass == null) {
			errorMsg += "缺少Class参数;<br/>";
		}
		try {
			if (path.endsWith(".xls")) {
				// excel2003版本
				InputStream is = new FileInputStream(path);
				HSSFWorkbook hssfWorkbook = new HSSFWorkbook(is);
				// 默认只读取第一个sheet
				HSSFSheet hssfSheet = hssfWorkbook.getSheetAt(0);
				if (hssfSheet != null && errorMsg.length() == 0) {
					// 循环行Row 从tips.size()+1 行开始
					Integer size = tips == null ? 0 : tips.size();
					for (int rowNum = size + 1; rowNum <= hssfSheet
							.getLastRowNum(); rowNum++) {
						HSSFRow hssfRow = hssfSheet.getRow(rowNum);
						if (hssfRow == null) {
							continue;
						}
						entity = (IdEntity) importClass.newInstance();
						// 循环列Cell
						for (int i = 0; i < cloumns.length; i++) {
							HSSFCell xh = hssfRow.getCell(i);
							if (xh == null) {
								continue;
							}
							if (isImportAry[i]) {
								Object value = getValue(xh);
								Class<?> cla = clazzs[i];
								boolean flag = checkValue(value, cla);
								if (flag) {
									setter(entity, cloumns[i], value, cla);
								} else {
									ErrorTip err = new ErrorTip();
									err.setRowno((rowNum + 1) + ":" + (i + 1));
									err.setItemname(cloumnsName[i]);
									err.setReasion("\u7c7b\u578b\u4e0d\u5339\u914d");// 类型不匹配
									errorlist.add(err);
								}
							}
						}
						if (entity.getId() != null) {
							list.add(entity);
						}
						//Jack这个只对合同付款发票导出有用
						if(entity.getId() == null && path.indexOf("合同付款发票导出")>=0){
							list.add(entity);
						}
					}
					if (errorlist.size() == 0) {
						map.put("data", list);
						map.put("result", "success");
						map.put("message", "成功读取excel记录" + list.size() + "条!");
					} else {
						map.put("errordata", errorlist);
						map.put("result", "error");
					}
				} else if (hssfSheet == null) {
					map.put("data", null);
					map.put("result", "error");
					map.put("message", "未找到导入的数据，请检查excel!");
				} else if (errorMsg.length() > 0) {
					map.put("data", null);
					map.put("result", "error");
					map.put("message", errorMsg);
				}
			} else {
				// excel2007版本
				InputStream is = new FileInputStream(path);
				XSSFWorkbook xssfworkbook = new XSSFWorkbook(is);
				XSSFSheet xssfSheet = xssfworkbook.getSheetAt(0);
				if (xssfSheet != null && errorMsg.length() == 0) {
					// 循环行Row 从tips.size()+1 行开始
					Integer size = tips == null ? 0 : tips.size();
					for (int rowNum = size + 1; rowNum <= xssfSheet
							.getLastRowNum(); rowNum++) {
						XSSFRow xssfRow = xssfSheet.getRow(rowNum);
						if (xssfRow == null || !checkRow(xssfRow, cloumns)) {
							continue;
						}
						entity = (IdEntity) importClass.newInstance();
						// 循环列Cell
						for (int i = 0; i < cloumns.length; i++) {
							XSSFCell xh = xssfRow.getCell(i);
							if (xh == null) {
								continue;
							}
							if (isImportAry[i]) {// 是否导入
								Object value = getValue(xh);
								Class<?> cla = clazzs[i];
								boolean flag = checkValue(value, cla);
								if (flag) {
									setter(entity, cloumns[i], value, cla);
								} else {
									ErrorTip err = new ErrorTip();
									err.setRowno(rowNum + ":" + (i + 1));
									err.setItemname(cloumnsName[i]);
									err.setReasion("\u7c7b\u578b\u4e0d\u5339\u914d");// 类型不匹配
									errorlist.add(err);
								}
							}
						}
						list.add(entity);
					}
					if (errorlist.size() == 0) {
						map.put("data", list);
						map.put("result", "success");
						map.put("message", "成功读取excel记录" + list.size() + "条!");
					} else {
						map.put("errordata", errorlist);
						map.put("result", "error");
					}
				} else if (xssfSheet == null) {
					map.put("data", null);
					map.put("result", "error");
					map.put("message", "未找到导入的数据，请检查excel!");
				} else if (errorMsg.length() > 0) {
					map.put("data", null);
					map.put("result", "error");
					map.put("message", errorMsg);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			// 删除文件
			File target = new File(path);
			// 如果文件已经存在，则删除原有文件
			if (target.exists()) {
				target.delete();
			}
		}
		return map;
	}

	/**
	 * @param xssfRow
	 *            传入的行 当此行所有内容均为空时，不导入 .xlsx版本需要作此校验
	 * @return true:有内容不为空；false：所有内容为空
	 */
	private static boolean checkRow(XSSFRow xssfRow, String[] columns) {
		for (int i = 0; i < columns.length; i++) {
			XSSFCell xh = xssfRow.getCell(i);
			Object value = getValue(xh);
			if (value != null && value.toString().trim().length() > 0) {
				return true;
			}
		}
		return false;
	}

	/**
	 * @param value
	 * @param cla
	 */
	@SuppressWarnings("rawtypes")
	public static boolean checkValue(Object value, Class cla) {
		if (value == null) {
			return true;
		} else if (cla == null) {
			return false;
		}
		if (Double.class.equals(cla)) {
			if (value.toString().trim().length() != 0) {
				// 判断value是数值类型
				Pattern pattern = Pattern
						.compile("^(\\-|\\+)?[0-9]+((.[0-9]*[Ee][0-9]*)|(.[0-9]*))?$");
				Matcher match = pattern.matcher(value.toString());
				return match.matches();
			} else {
				return true;
			}
		}
		if (Integer.class.equals(cla)) {
			if (value.toString().trim().length() != 0) {
				if (value != null && value.toString().contains(".")) {
					value = value.toString().substring(0,
							value.toString().indexOf("."));
				}
				// 判断value是正整数 改为判断value为整数，因为有可能导入负数的值 by wangjf 2015-06-01
				Pattern pattern = Pattern.compile("^(\\-|\\+)?[0-9]*$");
				Matcher match = pattern.matcher(value.toString());
				return match.matches();
			} else {
				return true;
			}
		}
		if (String.class.equals(cla)) {
			return true;
		}
		return false;
	}

	/**
	 * 获取一个对象的值
	 * 
	 * @param obj
	 * @param att
	 * @return
	 */
	public static Object getter(Object obj, String att) {
		try {
			String getterMethodName = "get" + StringUtils.capitalize(att);
			Method method = obj.getClass().getMethod(getterMethodName);
			Object value = method.invoke(obj);
			
			if(att.toLowerCase().startsWith("bis")){
				if(value instanceof Integer){
					if(Integer.valueOf(value.toString()).intValue()==1){
						return "是";
					}else{
						return "否";
					}
				}
			}
			//
			return value == null ? "" : value;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * @param obj
	 *            操作的对象
	 * @param att
	 *            操作的属性
	 * @param value
	 *            设置的值
	 * @param type
	 *            参数的属性
	 * @eg setter(obj,"Sex","男",String.class);
	 * */
	public static void setter(Object obj, String att, Object value,
			Class<?> type) {
		try {
			if (att == null) {
				return;
			}
			att = att.toLowerCase();
			att = att.replaceFirst(att.substring(0, 1), att.substring(0, 1)
					.toUpperCase());

			Method method = obj.getClass().getMethod("set" + att, type);
			if (Integer.class.equals(type)) {
				if (value != null && value.toString().contains(".")) {
					value = value.toString().substring(0,
							value.toString().indexOf("."));
				}
				if (value != null && value.toString().length() > 0) {
					value = Integer.valueOf(value.toString());
				}
				if (value == null || value.toString().length() == 0) {
					value = null;
				}
			} else if (Double.class.equals(type)) {
				if (value != null && value.toString().trim().length() > 0) {
					value = Double.valueOf(value.toString());
				} else {
					value = null;
				}
			} else if (String.class.equals(type)) {
				if (value != null && value.toString().trim().length() > 0) {
					value = value.toString();
				}
			}
			method.invoke(obj, value);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 得到Excel表中的值
	 * 
	 * @param hssfCell
	 *            Excel中的每一个格子
	 * @return Excel中每一个格子中的值
	 */
	@SuppressWarnings("static-access")
	public static Object getValue(HSSFCell hssfCell) {
		if (hssfCell == null)
			return "";
		if (hssfCell.getCellType() == hssfCell.CELL_TYPE_BOOLEAN) { // 返回布尔类型的值
			return String.valueOf(hssfCell.getBooleanCellValue());
		} else if (hssfCell.getCellType() == hssfCell.CELL_TYPE_NUMERIC) { // 返回数值类型的值
			if (HSSFDateUtil.isCellDateFormatted(hssfCell)) {
				Date d = hssfCell.getDateCellValue();
				DateFormat formater = new SimpleDateFormat("yyyy-MM-dd");
				return formater.format(d);
			} else {
				Double dblValue = hssfCell.getNumericCellValue();
				if (dblValue != null && dblValue.toString().endsWith(".0")) {
					DecimalFormat decimalFormat2 = new DecimalFormat("0");// 格式化设置
					return decimalFormat2.format(Double.valueOf(dblValue));
				} else {
					return dblValue;
				}
			}
		} else if (hssfCell.CELL_TYPE_FORMULA == hssfCell.getCellType()) { // 公式
			try {
				return String.valueOf(hssfCell.getNumericCellValue());
			} catch (IllegalStateException e) {
				return String.valueOf(hssfCell.getRichStringCellValue());
			}
		} else { // 返回字符串类型的值
			return String.valueOf(hssfCell.getStringCellValue());
		}
	}

	/**
	 * 得到Excel表中的值
	 * 
	 * @param hssfCell
	 *            Excel中的每一个格子
	 * @return Excel中每一个格子中的值
	 */
	@SuppressWarnings("static-access")
	public static Integer getIntegerValue(HSSFCell hssfCell) {
		Integer res = null;
		if (hssfCell.getCellType() == hssfCell.CELL_TYPE_NUMERIC) {
			// 返回布尔类型的值
			Object value = String.valueOf(hssfCell.getNumericCellValue());

			if (value != null && value.toString().contains(".")) {
				value = value.toString().substring(0,
						value.toString().indexOf("."));
			}
			if (value != null && value.toString().length() > 0) {
				res = Integer.valueOf(value.toString());
			}
			if (value == null || value.toString().length() == 0) {
				res = null;
			}
			return res;
		}
		return Integer.parseInt(hssfCell.getStringCellValue());
	}

	/**
	 * 得到Excel表中的值
	 * 
	 * @param hssfCell
	 *            Excel中的每一个格子
	 * @return Excel中每一个格子中的值
	 */
	@SuppressWarnings("static-access")
	public static Object getValue(XSSFCell hssfCell) {
		if (hssfCell.getCellType() == hssfCell.CELL_TYPE_BOOLEAN) {
			// 返回布尔类型的值
			return String.valueOf(hssfCell.getBooleanCellValue());
		} else if (hssfCell.getCellType() == hssfCell.CELL_TYPE_NUMERIC) {
			// 返回数值类型的值
			return hssfCell.getNumericCellValue();
		} else if (hssfCell.CELL_TYPE_FORMULA == hssfCell.getCellType()) {
			// 公式类型
			try {
				return String.valueOf(hssfCell.getNumericCellValue());
			} catch (IllegalStateException e) {
				return String.valueOf(hssfCell.getRichStringCellValue());
			}
		} else {
			// 返回字符串类型的值
			return String.valueOf(hssfCell.getStringCellValue());
		}
	}

	/**
	 * @param cell
	 * @param obj
	 */
	private static void setValue(HSSFCell cell, Object obj) {
		Object value = obj==null?"":obj.toString();
		try {
			if(obj instanceof Double){
        		java.text.NumberFormat nf = java.text.NumberFormat.getInstance();   
        		nf.setGroupingUsed(false); 
        		cell.setCellValue(nf.format(obj));
			}else if(obj instanceof BigDecimal){
				BigDecimal db = new BigDecimal((String)obj);
				cell.setCellValue(db.toPlainString());				
			}else{
				cell.setCellValue(value.toString());
			}
		} catch (Exception e) {
			cell.setCellValue(obj.toString());
		}
		

	}
	
	/**
	 * 获取标准样式
	 * 
	 * @param wb
	 * @return
	 */
	private static HSSFCellStyle getStyle(HSSFWorkbook wb) {
		HSSFCellStyle style = wb.createCellStyle();// 标准样式
		style.setAlignment(HSSFCellStyle.ALIGN_LEFT);// 居左显示
		style.setWrapText(false);
		return style;
	}

	/**
	 * 获取 表格头样式 居中、粗体、黑色
	 * 
	 * @param wb
	 * @return
	 */
	private static HSSFCellStyle getNormStyle(HSSFWorkbook wb) {
		HSSFCellStyle style = wb.createCellStyle();// 标准样式
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);// 居中显示
		style.setWrapText(false);
		HSSFFont normfont = wb.createFont();
		normfont.setColor(HSSFColor.BLACK.index);
		normfont.setFontHeightInPoints((short) 10);
		normfont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
		style.setFont(normfont);
		return style;
	}

	/**
	 * 获取 表格头样式 居中、粗体、红色
	 * 
	 * @param wb
	 * @return
	 */
	private static HSSFCellStyle getRedStyle(HSSFWorkbook wb) {
		HSSFCellStyle style = wb.createCellStyle();// 标准样式
		style.setAlignment(HSSFCellStyle.ALIGN_CENTER);// 居中显示
		style.setWrapText(false);
		HSSFFont normfont = wb.createFont();
		normfont.setFontHeightInPoints((short) 10);
		normfont.setColor(HSSFColor.RED.index);
		normfont.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
		style.setFont(normfont);
		return style;
	}
	
	public static String cutIdLength(String id){
		String subId = "";
		try{
		if(StringUtils.isNotBlank(id)){
			if(id.length()>11){
//				subId = id.substring(0, id.length()-11);
				subId = id.substring(id.length()-3);
			}else{
				subId = id;
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return subId;
	}
}
