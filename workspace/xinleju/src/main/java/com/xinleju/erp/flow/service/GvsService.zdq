package com.xinleju.erp.flow.service;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.base.utils.CollectionUtils;
import com.xinleju.erp.flow.dao.impl.FlDAO;
import com.xinleju.erp.flow.flowutils.bean.Gvs;
import com.xinleju.erp.flow.models.Fl;
import com.xinleju.erp.flow.models.Gv;

/**
 * 
 * 版权：(C) 版权所有 2000-2014 上海天好电子商务有限公司苏州分公司 流程实例全局变量操作接口
 * 
 * @author zhongjun
 * @version $Id$
 * @since
 * @see
 */
@Service
public class GvsService extends BaseService {

    @Autowired
    FlDAO flDAO;

    public Gvs getGvsByFiId(Long fiId){
        Gvs gvs = new Gvs();
        List<Gv> list = getDao().findAll(Gv.class, "fiId = ?", new Object[] {fiId});
        for (Gv gv : list) {
            gvs.add(gv.getName(), getVal(gv.getVal(), gv.getType()), null);
        }

        return gvs;
    }
    
    /**
     * 根据流程模板编码和业务id取出流程所需的全局变量（流程启动时使用）
     * 
     * @author jun
     * @param flowCode
     *            流程模板编码
     * @param bizId
     *            业务id
     * @return
     */
    public Gvs fetchGvsBySoCodeAndBizId(String soCode, String bizId) {
        Gvs gvs = new Gvs();

        List<Gv> list = getDao().findAll(Gv.class, "soCode = ? and bizId = ?", new Object[] { soCode, bizId });

        for (Gv gv : list) {
            gvs.add(gv.getName(), getVal(gv.getVal(), gv.getType()), null);
        }

        return gvs;
    }

    public Object getVal(String v, String classname) {

        if (StringUtils.isEmpty(v)) {
            return null;
        }
        if (classname.equals(String.class.getName())) {
            return v;
        } else if (classname.equals(Integer.class.getName()) || classname.equals(int.class.getName())) {
            return Integer.parseInt(v);
        } else if (classname.equals(Long.class.getName()) || classname.equals(long.class.getName())) {
            return Long.parseLong(v);
        } else if (classname.equals(BigDecimal.class.getName())) {
            return new BigDecimal(v);
        } else if (classname.equals(Double.class.getName()) || classname.equals(double.class.getName())) {
            return new Double(v);
        } else if (classname.equals(Float.class.getName()) || classname.equals(float.class.getName())) {
            return new Float(v);
        }

        throw new RuntimeException("不支持的类型:" + classname);

    }

    /**
     * <p>
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param bizId
     * @param soCode
     * @param arg1
     */
    public void update(String bizId, String soCode, Map<String, Object> arg1) {

        List<Gv> gvs = getDao().findAll(Gv.class, "soCode = ? and bizId = ?", new Object[] { soCode, bizId });
        Map<String, Gv> gvMap = CollectionUtils.collectAsMap(gvs, "name");

        for (Map.Entry<String, Object> e : arg1.entrySet()) {
            String k = e.getKey();
            Object v = e.getValue();

            Gv gv = gvMap.get(k);

            // 在数据库中存在
            if (gv != null) {
                String dbv = gv.getVal();
                // 和数据库值不相等,则更新
                if (v != null && !dbv.equals(String.valueOf(v))) {
                    gv.setVal(String.valueOf(v));
                    gv.setType(v.getClass().getName());
                    getDao().update(gv);
                }
            }
            // 在数据库中不存在
            else {
                gv = new Gv();
                gv.setName(k);
                gv.setVal(String.valueOf(v));
                gv.setType(v.getClass().getName());

                getDao().save(gv);
            }
        }

    }
}
