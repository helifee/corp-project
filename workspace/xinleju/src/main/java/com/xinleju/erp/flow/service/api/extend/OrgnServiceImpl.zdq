package com.xinleju.erp.flow.service.api.extend;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.collections.IteratorUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Service;

import com.xinleju.erp.base.utils.StringHelper;
import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.flow.service.api.FlowServerService;
import com.xinleju.erp.flow.service.api.extend.dto.CompanyDTO;
import com.xinleju.erp.flow.service.api.extend.dto.DeptDTO;
import com.xinleju.erp.flow.service.api.extend.dto.OrgnDTO;
import com.xinleju.erp.flow.service.api.extend.dto.PartyEntityDTO;
import com.xinleju.erp.flow.service.api.extend.dto.PostDTO;
import com.xinleju.erp.flow.service.api.extend.dto.RoleDTO;
import com.xinleju.erp.flow.service.api.extend.dto.ScopeDTO;
import com.xinleju.erp.flow.service.api.utils.CompanyUtils;
import com.xinleju.erp.flow.service.api.utils.DeptUtils;
import com.xinleju.erp.flow.service.api.utils.OrgnUtils;
import com.xinleju.erp.flow.service.api.utils.PartyEntityUtils;
import com.xinleju.erp.flow.service.api.utils.PostUtils;
import com.xinleju.erp.flow.service.api.utils.ScopeUtils;
import com.xinleju.erp.flow.utils.FlowUtils;
import com.xinleju.erp.frame.dao.BizDataRoleDao;
import com.xinleju.erp.frame.dao.CompanyDao;
import com.xinleju.erp.frame.dao.DeptDao;
import com.xinleju.erp.frame.dao.FuncButtonDao;
import com.xinleju.erp.frame.dao.FuncModuleDao;
import com.xinleju.erp.frame.dao.PartyEntityDao;
import com.xinleju.erp.frame.dao.PartyStructDao;
import com.xinleju.erp.frame.dao.RoleDao;
import com.xinleju.erp.frame.dao.UserDao;
import com.xinleju.erp.frame.models.Company;
import com.xinleju.erp.frame.models.Dept;
import com.xinleju.erp.frame.models.PartyEntity;
import com.xinleju.erp.frame.models.PartyStruct;
import com.xinleju.erp.frame.models.PartyType;
import com.xinleju.erp.frame.models.Role;
import com.xinleju.erp.frame.models.User;

@Service("OrgServiceImpl")
public class OrgnServiceImpl implements OrgnService {
	private static final Logger logger = Logger.getLogger(OrgnService.class);
	@Autowired
	BizDataRoleDao bizDataRoleDao;

	@Autowired
	@Qualifier("BaseAPIService")
	BaseAPIService baseAPIService;

	@Autowired
	FuncModuleDao funcModuleDao;

	@Autowired
	FuncButtonDao funcButtonDao;

	@Autowired
	PartyEntityDao partyEntityDao;

	@Autowired
	PartyStructDao partyStructDao;

	@Autowired
	private UserDao userDao;

	@Autowired
	private RoleDao roleDao;

	@Autowired
	private CompanyDao companyDao;

	@Autowired
	private DeptDao deptDao;
	@Autowired
	private FlowServerService flowServerService;

	@Autowired
	private JdbcTemplate jt;
	
	@Override
	public FlowResult<List<OrgnDTO>> getOrgnListAll() {
		List<PartyStruct> psList = partyStructDao
				.findPartyStructByChildPartyEntityType(new String[] { "zb",
						"company", "department", "group", "role" });

		List<OrgnDTO> dtoList = OrgnUtils.buildOrgnDtoList(psList);

		FlowResult<List<OrgnDTO>> fr = new FlowResult<List<OrgnDTO>>();
		if (dtoList != null) {
			fr.setResult(dtoList);
		} else {
			fr.setResult(new ArrayList<OrgnDTO>());
		}

		return fr;
	}

	@Override
	public FlowResult<OrgnDTO> getOrgnById(Long id) {
		List<PartyStruct> psList = partyStructDao
				.findPartyStructByChildEntityId(id);
		FlowResult<OrgnDTO> fr = new FlowResult<OrgnDTO>();
		if (psList != null && psList.size() > 0) {
			fr.setResult(OrgnUtils.buildOrgnDto(psList.get(0)));
		} else {
			fr.setResult(new OrgnDTO());
		}

		return fr;
	}

	@Override
	public FlowResult<OrgnDTO> getOrgnRoot() {
		FlowResult<List<OrgnDTO>> result = baseAPIService
				.findRootOrgns(new String[] { "zb" });
		FlowResult<OrgnDTO> r = new FlowResult<OrgnDTO>();
		if (result != null && result.getResult() != null
				&& result.getResult().size() > 0) {
			r.setResult(result.getResult().get(0));
		}
		return r;
	}

	@Override
	public FlowResult<List<OrgnDTO>> getOrgnListSub(Long parentId,
			String[] includeTypes) {
		return baseAPIService.findSubOrgns(parentId, includeTypes);
	}

	@Override
	public FlowResult<List<CompanyDTO>> getCompanyListAll() {
		return baseAPIService.getAllCompany(false);
	}

	@Override
	public FlowResult<OrgnDTO> getParentOrgnByChildId(Long childId) {
		return baseAPIService.getParentOrgnByChildId(childId);
	}

	@Override
	public FlowResult<CompanyDTO> getCompanyById(Long companyId) {

		FlowResult<CompanyDTO> fr = new FlowResult<CompanyDTO>();
		Company company = companyDao.getCompanyById(false, companyId);
		if (company != null) {
			CompanyDTO dto = CompanyUtils.buildCompanyDto(company);
			fr.setResult(dto);
		} else {
			fr.setResult(new CompanyDTO());
		}
		return fr;
	}

	@Override
	public FlowResult<List<CompanyDTO>> getCompanyListByIds(String[] companyIds) {
		FlowResult<List<CompanyDTO>> fr = new FlowResult<List<CompanyDTO>>();
		List<Company> companyList = companyDao.getCompanyByIds(false,
				companyIds);
		List<CompanyDTO> dtoList = CompanyUtils
				.buildCompanyDtoList(companyList);
		if (dtoList != null) {
			fr.setResult(dtoList);
		} else {
			fr.setResult(new ArrayList<CompanyDTO>());
		}

		return fr;
	}

	@Override
	public FlowResult<List<CompanyDTO>> getCompanyListLeaf() {
		List<PartyEntity> psList = partyEntityDao
				.getPartyEntityListByPartyEntityTypes(new String[] { "company" });

		List<Long> companyIds = new ArrayList<Long>();
		List<PartyStruct> subOrgns = null;

		for (PartyEntity pe : psList) {
			subOrgns = null;
			subOrgns = partyStructDao.findSubPartyStruct(pe.getId(),
					new String[] { "company" });
			if (subOrgns == null || subOrgns.size() < 1) {
				companyIds.add(pe.getRefId());
			}

		}

		return this.getCompanyListByIds(StringHelper.join(companyIds, "','")
				.split("','"));
	}

	@Override
	public FlowResult<List<CompanyDTO>> getCompanyListHaveProject() {

		List<PartyEntity> psList = partyEntityDao
				.getPartyEntityListByPartyEntityTypes(new String[] { "company" });

		List<Long> companyIds = new ArrayList<Long>();
		List<PartyStruct> subOrgns = null;

		for (PartyEntity pe : psList) {
			subOrgns = null;
			subOrgns = partyStructDao.findSubPartyStruct(pe.getId(),
					new String[] { "group" });
			if (subOrgns != null && subOrgns.size() > 0) {
				companyIds.add(pe.getRefId());
			}

		}

		return this.getCompanyListByIds(StringHelper.join(companyIds, "','")
				.split("','"));
	}

	@Override
	public FlowResult<CompanyDTO> getCompanyByDeptId(Long deptId) {
		List<Long> pss = partyStructDao
				.findPartyStructRefIdByChildPartyEntityRefIdAndType(deptId,
						"2", "3");
		FlowResult<CompanyDTO> fr = new FlowResult<CompanyDTO>();
		List<CompanyDTO> list = CompanyUtils.buildCompanyDtoList(companyDao
				.getCompanyByIds(false,
						StringHelper.join(pss, "','").split("','")));
		if (list != null && list.size() > 0)
			fr.setResult(list.get(0));
		return fr;
	}

	@Override
	public FlowResult<List<CompanyDTO>> getCompanyListByDeptIds(String[] deptIds) {
		List<Long> pss = partyStructDao
				.findPartyStructRefIdsByChildPartyEntityRefIds(deptIds,
						"company");
		FlowResult<List<CompanyDTO>> fr = new FlowResult<List<CompanyDTO>>();
		if (pss != null) {
			fr.setResult(CompanyUtils.buildCompanyDtoList(companyDao
					.getCompanyByIds(false, StringHelper.join(pss, "','")
							.split("','"))));
		}
		return fr;
	}
	public FlowResult<List<CompanyDTO>> getCompanyListByLoginName(String loginName) {
		User user = userDao.findUserByLoginName(loginName);
		List<Long> pss = partyStructDao.findCompanyIdByChildPartyEntityRefId(user.getId(), "6");
		return getCompanyListByIds(StringHelper.join(pss, "','").split("','"));
	}
	@Override
	public FlowResult<List<CompanyDTO>> getCompanyListByUserId(Long userId) {
		// List<Long> companyIds = new ArrayList<Long>();
		// List<Long> pss =
		// partyStructDao.findPartyStructRefIdByChildPartyEntityRefId(userId,
		// "company");
		// companyIds.addAll(pss);
		// List<Long> pss2 =
		// partyStructDao.findPartyStructRefIdByChildPartyEntityRefId(userId,
		// "department");
		// if(pss2==null) pss2 = new ArrayList<Long>();
		// List<Long> pss3 =
		// partyStructDao.findPartyStructRefIdByChildPartyEntityRefId(userId,
		// "role");
		//
		// List<Long> temp = null;
		// for(Long l: pss3){
		// temp =
		// partyStructDao.findPartyStructRefIdByChildPartyEntityId(l,"department");
		// if(temp!=null)pss2.addAll(temp);
		// temp = null;
		// }
		//
		// for(Long l: pss2){
		// temp =
		// partyStructDao.findPartyStructRefIdByChildPartyEntityId(l,"company");
		// if(temp!=null)pss.addAll(temp);
		// temp = null;
		// }

		List<Long> pss = partyStructDao.findCompanyIdByChildPartyEntityRefId(
				userId, "6");

		return getCompanyListByIds(StringHelper.join(pss, "','").split("','"));

	}

	@Override
	public FlowResult<CompanyDTO> getCompanyMainByUserId(Long userId) {
		FlowResult<CompanyDTO> fr = new FlowResult<CompanyDTO>();
		//获取公司岗位
		Role role = userDao.findUserMainRoleById(userId);
		if (role != null) {
			//获取岗位，岗位对应的公司
			List<PartyEntity> peList = partyEntityDao
					.getPartyEntityListByRefIdAndPartyEntityTypes(role.getId(),
							new String[] { "role" });
	
			if (peList != null && peList.size() > 0) {
				    String rolePrefix = peList.get(0).getPrefix();//获取岗位路径
				    List<PartyEntity> partyEntityList= partyEntityDao.findEntityChildPartyEntityPrefix(rolePrefix);
					String minPrefix="";
					Map<String,Long>  map=new HashMap<String,Long>();
				    for(int i=0;i<partyEntityList.size();i++){
				    	
				    	PartyEntity partyEntity=partyEntityList.get(i);
				    	map.put(partyEntity.getPrefix(), partyEntity.getRefId());
				    	if(i==0){
				    		minPrefix=partyEntity.getPrefix();
				    	}
				    	if(minPrefix.length()<partyEntity.getPrefix().length()){
				    		minPrefix=partyEntity.getPrefix();
		
				    	}
				    }
				    if(minPrefix!=null && map.get(minPrefix)!=null){
				    	Long key= map.get(minPrefix);
						fr = this.getCompanyById(key);
				    }
		    
			 }
			
//			 List<Long> list =
//			 partyStructDao.findPartyStructRefIdByChildPartyEntityRefIdAndType(role.getId(),
//			 "3","5");
//			 if(list!=null&&list.size()>0){
//			 List<Long> list2 =
//			 partyStructDao.findPartyStructRefIdByChildPartyEntityRefIdAndType(list.get(0),
//			 "2","3");
//			 fr = this.getCompanyById(list2.get(0));
		}
		return fr;
	}

	@Override
	public FlowResult<List<CompanyDTO>> getCompanyListByUserIds(String[] userIds) {

		List<Long> companyIds = partyStructDao
				.findCompanyIdsByChildPartyEntityRefIds(userIds, "6");
		// List<Long> pss =
		// partyStructDao.findPartyStructRefIdsByChildPartyEntityRefIds(userIds,
		// "company");
		// companyIds.addAll(pss);
		// List<Long> pss2 =
		// partyStructDao.findPartyStructRefIdsByChildPartyEntityRefIds(userIds,
		// "department");
		// if(pss2==null) pss2 = new ArrayList<Long>();
		// List<Long> pss3 =
		// partyStructDao.findPartyStructRefIdsByChildPartyEntityRefIds(userIds,
		// "role");
		//
		// List<Long> temp = null;
		// for(Long l: pss3){
		// temp =
		// partyStructDao.findPartyStructRefIdByChildPartyEntityId(l,"department");
		// if(temp!=null)pss2.addAll(temp);
		// temp = null;
		// }
		//
		// for(Long l: pss2){
		// temp =
		// partyStructDao.findPartyStructRefIdByChildPartyEntityId(l,"company");
		// if(temp!=null)companyIds.addAll(temp);
		// temp = null;
		// }

		return getCompanyListByIds(StringHelper.join(companyIds, "','").split(
				"','"));
	}

	@Override
	public FlowResult<List<CompanyDTO>> getCompanyListByUserLoginName(
			String userLoginName) {
		User user = userDao.findUserByLoginName(userLoginName);
		return this.getCompanyListByUserId(user.getId());
	}

	@Override
	public FlowResult<CompanyDTO> getCompanyMainByUserLoginName(
			String userLoginName) {
		FlowResult<CompanyDTO> fr = new FlowResult<CompanyDTO>();
		Long userId = userDao.findUserIdByLoginName(userLoginName);

		if (userId != null)
			return this.getCompanyMainByUserId(userId);
		else
			return fr;
		// Role role =
		// userDao.findUserMainRoleById(userDao.findUserIdByLoginName(userLoginName));
		// if(role !=null){
		// List<Long> list =
		// partyStructDao.findPartyStructRefIdByChildPartyEntityRefIdAndType(role.getId(),
		// "3","5");
		// if(list!=null&&list.size()>0){
		// List<Long> list2 =
		// partyStructDao.findPartyStructRefIdByChildPartyEntityRefIdAndType(list.get(0),
		// "2","3");
		// fr = this.getCompanyById(list2.get(0));
		// }
		// }
		// return fr;
	}

	@Override
	public FlowResult<List<CompanyDTO>> getCompanyListByUserLoginNames(
			String[] userLoginNames) {
		List<User> users = userDao.findUserByLoginNames(userLoginNames);
		List<Long> userIds = new ArrayList<Long>();
		for (User user : users) {
			userIds.add(user.getId());
		}

		return this.getCompanyListByUserIds(StringHelper.join(userIds, "','")
				.split("','"));

	}

	@Override
	public FlowResult<List<DeptDTO>> getDeptListByCompanyId(Long companyId) {
		List<Long> pss = partyStructDao
				.findPartyStructRefIdsByParentPartyEntityRefIds(
						new String[] { companyId.toString() }, "company","department");
		FlowResult<List<DeptDTO>> fr = new FlowResult<List<DeptDTO>>();

		//去重
		List<DeptDTO> rDeptDTOs = new ArrayList<DeptDTO>();
		Set<String> codeSet = new HashSet<String>();
		Set<String> nameSet = new HashSet<String>();
		List<DeptDTO> deptDTOs = DeptUtils.buildDeptDtoList(deptDao.getDeptByIds(false,StringHelper.join(pss, "','").split("','")));
		
		for (Iterator<DeptDTO> iterator = deptDTOs.iterator(); iterator.hasNext();) {
			DeptDTO deptDTO = iterator.next();
			if (codeSet.add(deptDTO.getCode().toUpperCase()) && nameSet.add(deptDTO.getName())) {
				rDeptDTOs.add(deptDTO);
			}
		}
		
		fr.setResult(rDeptDTOs);
		return fr;
	}

	@Override
	public FlowResult<DeptDTO> getDeptById(Long deptId) {
		FlowResult<DeptDTO> fr = new FlowResult<DeptDTO>();
		Dept company = deptDao.getDeptById(true, deptId);
		if (company != null) {
			DeptDTO dto = DeptUtils.buildDeptDto(company);
			fr.setResult(dto);
		}
		return fr;
	}

	@Override
	public FlowResult<List<DeptDTO>> getDeptListByIds(String[] deptIds) {
		FlowResult<List<DeptDTO>> fr = new FlowResult<List<DeptDTO>>();
		List<Dept> deptList = deptDao.getDeptByIds(false, deptIds);
		List<DeptDTO> dtoList = DeptUtils.buildDeptDtoList(deptList);
		fr.setResult(dtoList);
		return fr;
	}

	@Override
	public FlowResult<DeptDTO> getDeptByPostId(Long postId) {
		List<Long> pss = partyStructDao
				.findPartyStructRefIdByChildPartyEntityRefIdAndType(postId,
						"3", "5");
		FlowResult<DeptDTO> fr = new FlowResult<DeptDTO>();

		List<DeptDTO> list = DeptUtils.buildDeptDtoList(deptDao.getDeptByIds(
				false, StringHelper.join(pss, "','").split("','")));
		if (list != null && list.size() > 0)
			fr.setResult(list.get(0));
		return fr;
	}

	@Override
	public FlowResult<List<DeptDTO>> getDeptListByPostIds(String[] postIds) {
		List<Long> pss = partyStructDao
				.findPartyStructRefIdsByChildPartyEntityRefIds(postIds,
						"company");
		FlowResult<List<DeptDTO>> fr = new FlowResult<List<DeptDTO>>();
		if (pss != null) {
			fr.setResult(DeptUtils.buildDeptDtoList(deptDao.getDeptByIds(false,
					StringHelper.join(pss, "','").split("','"))));
		}
		return fr;
	}

	@Override
	public FlowResult<List<DeptDTO>> getDeptListByUserId(Long userId) {
		List<Long> companyIds = new ArrayList<Long>();
		List<Long> pss = partyStructDao
				.findPartyStructRefIdByChildPartyEntityRefIdAndType(userId,
						"3", "6");
		companyIds.addAll(pss);
		List<Long> pss2 = partyStructDao
				.findPartyStructRefIdByChildPartyEntityRefIdAndType(userId,
						"5", "6");

		List<Long> temp = null;

		for (Long l : pss2) {
			temp = partyStructDao.findPartyStructRefIdByChildPartyEntityId(l,
					"department");
			if (temp != null)
				companyIds.addAll(temp);
			temp = null;
		}

		return getDeptListByIds(StringHelper.join(companyIds, "','").split(
				"','"));
	}
	
	  //chc add 2016.8.2
	@Override
	public FlowResult<List<PartyEntityDTO>> getDeptListByUserIdNew(Long userId) {
		List<PartyEntity> companyIds = new ArrayList<PartyEntity>();
		FlowResult<List<PartyEntityDTO>> fr = new FlowResult<List<PartyEntityDTO>>();
		List<PartyEntity> pss = partyStructDao
				.findPartyStructRefIdByChildPartyEntityRefIdAndTypeNew(userId,
						"3", "6");
		companyIds.addAll(pss);
		List<PartyEntity> pss2 = partyStructDao
				.findPartyStructRefIdByChildPartyEntityRefIdAndTypeNew(userId,
						"5", "6");

		List<PartyEntity> temp = null;

		for (PartyEntity l : pss2) {
			temp = partyStructDao.findPartyStructRefIdByChildPartyEntityIdNew(l.getRefId(),
					"department");
			if (temp != null)
				companyIds.addAll(temp);
			temp = null;
		}
		List<PartyEntityDTO> dtoList = PartyEntityUtils.buildPartyEntityDTOList(companyIds);
		for (Iterator<PartyEntityDTO> it = dtoList.iterator(); it.hasNext();) {
			PartyEntityDTO dto=it.next();
			if (dto.getNamePrefix().contains("虚拟授权")) {
				it.remove();
			}
		}
		Map<Long,PartyEntityDTO> mp = new HashMap<Long,PartyEntityDTO>();
		for (Iterator<PartyEntityDTO> it = dtoList.iterator(); it.hasNext();) {
			PartyEntityDTO dto=it.next();
			mp.put(dto.getRefId(), dto);
		}
		List<PartyEntityDTO> newDtoList = new ArrayList<PartyEntityDTO>();
		for (Map.Entry<Long,PartyEntityDTO> entry : mp.entrySet()) {
			newDtoList.add(entry.getValue());
    	}
		fr.setResult(newDtoList);
		return fr;
	}

	@Override
	public FlowResult<DeptDTO> getDeptMainByUserId(Long userId) {
		FlowResult<DeptDTO> fr = new FlowResult<DeptDTO>();
		Role role = userDao.findUserMainRoleById(userId);
		if (role != null) {
			List<Long> list = partyStructDao
					.findPartyStructRefIdByChildPartyEntityRefIdAndType(
							role.getId(), "3", "5");
			if (list != null && list.size() > 0) {
				fr = this.getDeptById(list.get(0));
			}
		}
		return fr;
	}

	@Override
	public FlowResult<DeptDTO> getUpDeptMainByUserId(Long userId) {
		// TODO Auto-generated method stub
		FlowResult<DeptDTO> fr = new FlowResult<DeptDTO>();
		
		String sqlStr = "select dept.name,dept.id,dept.code,dept.short_name,dept.manager_id,dept.note from sm_dept dept,sm_party_entity u,sm_party_type ut,sm_user us,(select e.name,e.ref_id,e.prefix from sm_party_entity e,sm_party_type t where e.party_type_id=t.id and t.type='department' and e.prefix = (select MIN(ee.prefix) from sm_party_entity ee,sm_party_type tt where ee.party_type_id=tt.id and tt.type='department' and locate(ee.prefix,e.prefix) > 0)) d where u.party_type_id=ut.id and ut.type='role' and u.ref_id=us.main_role_id and locate(d.prefix,u.prefix) > 0 and dept.id=d.ref_id ";
		if (userId != null) {
			sqlStr += "and us.id=" + userId;
		}
		Map<String, Object> deptMap = jt.queryForMap(sqlStr);
		DeptDTO dto = new DeptDTO();
		dto.setId((Long)deptMap.get("id"));
		dto.setName((String)deptMap.get("name"));
		dto.setCode((String)deptMap.get("code"));
		dto.setShortName((String)deptMap.get("short_name"));
		dto.setManagerId((Long)deptMap.get("manager_id"));
		dto.setNote((String)deptMap.get("note"));
		
		fr.setResult(dto);
		
		return fr;
	}

	@Override
	public FlowResult<Map<String, DeptDTO>> getDeptMainByUserIds(
			String[] userIds) {
		FlowResult<Map<String, DeptDTO>> fr = new FlowResult<Map<String, DeptDTO>>();
		List<User> users = userDao.findUserByIds(userIds);

		List<Long> role = new ArrayList<Long>();

		Map<Long, String> roleLoginNameMap = new HashMap<Long, String>();

		for (User u : users) {
			role.add(u.getMainRoleId());
			roleLoginNameMap.put(u.getMainRoleId(), u.getLoginname());
		}
		Map<String, DeptDTO> map = new HashMap<String, DeptDTO>();
		if (role != null) {
			List<PartyStruct> list = partyStructDao
					.findPartyStructsByChildPartyEntityRefIds(StringHelper
							.join(role, "','").split("','"), "department");
			for (PartyStruct p : list) {
				map.put(roleLoginNameMap.get(p.getChildEntity().getRefId()),
						DeptUtils.buildDeptDto(deptDao.getDeptById(false, p
								.getParentEntity().getRefId())));
			}
		}
		fr.setResult(map);
		return fr;
	}

	@Override
	public FlowResult<List<DeptDTO>> getDeptListByUserIds(String[] userIds) {
		List<Long> companyIds = new ArrayList<Long>();
		List<Long> pss = partyStructDao
				.findPartyStructRefIdsByChildPartyEntityRefIds(userIds,
						"department");
		companyIds.addAll(pss);
		List<Long> pss2 = partyStructDao
				.findPartyStructRefIdsByChildPartyEntityRefIds(userIds, "role");
		if (pss2 == null)
			pss2 = new ArrayList<Long>();

		List<Long> temp = null;
		for (Long l : pss2) {
			temp = partyStructDao.findPartyStructRefIdByChildPartyEntityId(l,
					"department");
			if (temp != null)
				companyIds.addAll(temp);
			temp = null;
		}

		return this.getDeptListByIds(StringHelper.join(companyIds, "','")
				.split("','"));
	}

	@Override
	public FlowResult<List<PostDTO>> getPostListByCompanyId(Long companyId) {
		FlowResult<List<PostDTO>> fr = new FlowResult<List<PostDTO>>();
		List<Long> list = new ArrayList<Long>();

		/*
		 * List<PartyStruct> pss =
		 * partyStructDao.findPartyStructsByParentPartyEntityRefIds(new
		 * String[]{companyId.toString()}, "company"); List<PartyStruct> temp =
		 * null;
		 * 
		 * for(PartyStruct s : pss){
		 * if(s.getChildEntity()!=null&&s.getChildEntity
		 * ().getPartyType().getType().equals("role")){
		 * list.add(s.getChildEntityId()); } temp = null;
		 * if(s.getChildEntity()!=
		 * null&&s.getChildEntity().getPartyType().getType
		 * ().equals("department")){ temp =
		 * partyStructDao.findPartyStructsByParentPartyEntityRefIds(new
		 * String[]{companyId.toString()}, "department"); } if(temp !=null){
		 * for(PartyStruct s1 : temp){
		 * if(s1.getChildEntity()!=null&&s1.getChildEntity
		 * ().getPartyType().getType().equals("role")){
		 * list.add(s1.getChildEntityId()); } } } }
		 */

		PartyEntity pe = partyEntityDao.findEntityByRefId(companyId,
				PartyType.TYPE_COMPANY);
		Long parentEntityId = 0L;
		if (pe != null && pe.getId() != null) {
			parentEntityId = pe.getId();
		}

		list = partyStructDao.findChildRefIdsByParentEntityId(parentEntityId,
				PartyType.TYPE_ROLE, true);

		fr.setResult(PostUtils.buildPostDtoList(roleDao.getRoleListByIds("'"
				+ StringHelper.join(list, "','") + "'")));

		return fr;
	}

	@Override
	public FlowResult<List<PostDTO>> getPostListByCompanyIdAndStandardRoleId(
			Long companyId, Long standardRoleId) {

		FlowResult<List<PostDTO>> fr = new FlowResult<List<PostDTO>>();
		List<Long> list = new ArrayList<Long>();
		/*
		 * List<PartyStruct> pss = partyStructDao
		 * .findPartyStructsByParentPartyTypeEntityRefIds( new String[] {
		 * companyId.toString() }, "company"); List<PartyStruct> temp = null;
		 * 
		 * for (PartyStruct s : pss) { if (s.getChildEntity() != null &&
		 * s.getChildEntity().getPartyType().getType() .equals("role") &&
		 * s.getChildEntity().getRefParentId() != null &&
		 * s.getChildEntity().getRefParentId() == standardRoleId) {
		 * list.add(s.getChildEntityId()); } temp = null; if (s.getChildEntity()
		 * != null && s.getChildEntity().getPartyType().getType()
		 * .equals("department")) { temp = partyStructDao
		 * .findPartyStructsByParentPartyEntityRefIds( new String[] {
		 * companyId.toString() }, "department"); } if (temp != null) { String[]
		 * strs=new String[temp.size()]; for (int i=0;i<temp.size();i++) {
		 * strs[i]=temp.get(i).getChildEntity().getRefId().toString(); }
		 * List<PartyStruct> roles=partyStructDao
		 * .findPartyStructsByParentPartyTypeEntityRefIds(strs,"department");
		 * 
		 * if(roles!=null&&roles.size()>0){ for(PartyStruct s2 : roles){ if
		 * (s2.getChildEntity() != null &&s2.getChildEntity().getRefParentId()
		 * != null && s2.getChildEntity().getRefParentId() == standardRoleId) {
		 * list.add(s2.getChildEntityId()); } }
		 * 
		 * 
		 * 
		 * 
		 * } } }
		 */
		// 根据公司id找sm_party_entity表的主键
		List<PartyEntity> comPes = partyEntityDao
				.getPartyEntityListByRefIdAndPartyEntityTypes(companyId,
						new String[] { "company" });
		// 根据sm_party_entity模糊查询该公司下的关于角色的信息
		if (comPes != null && comPes.size() > 0) {
			list = partyEntityDao.getPartyEntityIdRefIdByPrefixAndType(comPes
					.get(0).getId(), standardRoleId, "role");
		}

		fr.setResult(PostUtils.buildPostDtoList(roleDao.getRoleListByIds("'"
				+ StringHelper.join(list, "','") + "'")));
		return fr;
	}

	@Override
	public FlowResult<List<PostDTO>> getPostListByDeptIdAndStandardRoleId(
			Long companyId, Long standardRoleId) {
		FlowResult<List<PostDTO>> fr = new FlowResult<List<PostDTO>>();
		List<Long> list = new ArrayList<Long>();
		/*
		 * List<PartyStruct> pss = partyStructDao
		 * .findPartyStructsByParentPartyEntityRefIds( new String[] {
		 * companyId.toString() }, "department");
		 * 
		 * for (PartyStruct s : pss) { if (s.getChildEntity() != null &&
		 * s.getChildEntity().getPartyType().getType() .equals("role") &&
		 * s.getChildEntity().getRefParentId() != null &&
		 * s.getChildEntity().getRefParentId() == standardRoleId) {
		 * list.add(s.getChildEntityId()); } }
		 */

		// 根据部门id找sm_party_entity表的主键
		List<PartyEntity> comPes = partyEntityDao
				.getPartyEntityListByRefIdAndPartyEntityTypes(companyId,
						new String[] { "department" });
		// 根据sm_party_entity模糊查询该部门下的关于角色的信息
		if (comPes != null && comPes.size() > 0) {
			list = partyEntityDao.getPartyEntityIdRefIdByPrefixAndType(comPes
					.get(0).getId(), standardRoleId, "role");
		}

		fr.setResult(PostUtils.buildPostDtoList(roleDao.getRoleListByIds("'"
				+ StringHelper.join(list, "','") + "'")));
		return fr;
	}

	@Override
	public FlowResult<List<PostDTO>> getPostListByStandardRoleId(
			Long standardRoleId) {
		FlowResult<List<PostDTO>> fr = new FlowResult<List<PostDTO>>();
		List<Long> list = new ArrayList<Long>();
		List<PartyEntity> pss = partyEntityDao
				.getPartyEntityListByPartyEntityTypes(new String[] { "role" });

		for (PartyEntity s : pss) {
			if (s.getRefParentId() != null
					&& s.getRefParentId() == standardRoleId) {
				list.add(s.getId());
			}
		}

		fr.setResult(PostUtils.buildPostDtoList(roleDao.getRoleListByIds("'"
				+ StringHelper.join(list, "','") + "'")));
		return fr;
	}

	@Override
	public FlowResult<PostDTO> getPostById(Long postId) {

		FlowResult<PostDTO> fr = new FlowResult<PostDTO>();
		Role role = roleDao.getRoleListById(postId);
		PostDTO dto = PostUtils.buildPostDto(role);
		fr.setResult(dto);
		return fr;
	}

	@Override
	public FlowResult<List<PostDTO>> getPostListByIds(String[] postIds) {

		FlowResult<List<PostDTO>> fr = new FlowResult<List<PostDTO>>();
		List<Role> roles = roleDao.getRoleListByIds("'"
				+ StringHelper.join(postIds, "','") + "'");
		List<PostDTO> dtos = PostUtils.buildPostDtoList(roles);
		fr.setResult(dtos);
		return fr;
	}

	@Override
	public FlowResult<List<PostDTO>> getPostListByDeptId(Long deptId) {
		List<Long> pss = partyStructDao
				.findPartyStructRefIdsByParentPartyEntityRefIds(
						new String[] { deptId.toString() },"department", "role");
		FlowResult<List<PostDTO>> fr = new FlowResult<List<PostDTO>>();

		// fr.setResult(PostUtils.buildPostDtoList(roleDao.getRoleListByIds(StringHelper.join(StringHelper.join(pss,
		// "','").split("','"),""))));

		fr.setResult(PostUtils.buildPostDtoList(roleDao.getRoleListByIds("'"
				+ StringHelper.join(pss, "','") + "'")));
		return fr;
	}

	@Override
	public FlowResult<List<PostDTO>> getPostListByPeId(Long peId) {
		List<Long> childRefIds = partyStructDao
				.findChildRefIdsByParentEntityId(peId, PartyType.TYPE_ROLE);
		FlowResult<List<PostDTO>> fr = new FlowResult<List<PostDTO>>();
		if (null != childRefIds && childRefIds.size() > 0) {
			fr.setResult(PostUtils.buildPostDtoList(roleDao
					.getRoleListByIds("'"
							+ StringHelper.join(childRefIds, "','") + "'")));
		} else {
			fr.setResult(new ArrayList<PostDTO>());
		}
		return fr;
	}

	@Override
	public FlowResult<List<PostDTO>> getPostListByUserLoginName(
			String userLoginName) {
		FlowResult<List<PostDTO>> fr = new FlowResult<List<PostDTO>>();
		User user = userDao.findUserByLoginName(userLoginName);
		if (user != null) {
			fr = getPostListByUserId(user.getId());
		}
		return fr;
	}

	@Override
	public FlowResult<List<PostDTO>> getPostListByUserId(Long userId) {
		List<Long> pss = partyStructDao
				.findPartyStructRefIdByChildPartyEntityRefIdAndType(userId,
						"5", "6");
		FlowResult<List<PostDTO>> fr = new FlowResult<List<PostDTO>>();
		fr.setResult(PostUtils.buildPostDtoList(roleDao.getRoleListByIds("'"
				+ StringHelper.join(pss, "','") + "'")));
		return fr;
	}

	public FlowResult<List<OrgnDTO>> getOrgnListAll(String moduleCode,
			String authUserLoginName, Long ctrId, Long fieldId) {
		List<PartyStruct> psList = partyStructDao
				.findPartyStructByChildPartyEntityType(new String[] { "zb",
						"company", "department", "group", "role" });

		List<OrgnDTO> dtoList = OrgnUtils.buildOrgnDtoList(psList);

		FlowResult<List<OrgnDTO>> fr = new FlowResult<List<OrgnDTO>>();
		fr.setResult(dtoList);
		return fr;
	}

	public FlowResult<OrgnDTO> getOrgnRoot(String moduleCode,
			String authUserLoginName, Long ctrId, Long fieldId) {
		FlowResult<List<OrgnDTO>> result = baseAPIService
				.findRootOrgns(new String[] { "zb" });
		FlowResult<OrgnDTO> r = new FlowResult<OrgnDTO>();
		if (result != null && result.getResult() != null
				&& result.getResult().size() > 0) {
			r.setResult(result.getResult().get(0));
		}
		return r;
	}

	public FlowResult<List<OrgnDTO>> getOrgnListSub(Long parentId,
			String[] includeTypes, String moduleCode, String authUserLoginName,
			Long ctrId, Long fieldId) {
		return baseAPIService.findSubOrgns(parentId, includeTypes);
	}

	public FlowResult<List<CompanyDTO>> getCompanyListAll(String moduleCode,
			String authUserLoginName, Long ctrId, Long fieldId) {
		return this.getAuthCompanyList(this.getCompanyListByLoginName(authUserLoginName), moduleCode,
				authUserLoginName, ctrId, fieldId);
	}

	public FlowResult<CompanyDTO> getCompanyById(Long companyId,
			String moduleCode, String authUserLoginName, Long ctrId,
			Long fieldId) {
		return this.getAuthCompany(this.getCompanyById(companyId), moduleCode,
				authUserLoginName, ctrId, fieldId);
	}

	public FlowResult<List<CompanyDTO>> getCompanyListByIds(
			String[] companyIds, String moduleCode, String authUserLoginName,
			Long ctrId, Long fieldId) {
		return this.getAuthCompanyList(this.getCompanyListByIds(companyIds),
				moduleCode, authUserLoginName, ctrId, fieldId);
	}

	public FlowResult<List<CompanyDTO>> getCompanyListLeaf(String moduleCode,
			String authUserLoginName, Long ctrId, Long fieldId) {
		return this.getAuthCompanyList(this.getCompanyListLeaf(), moduleCode,
				authUserLoginName, ctrId, fieldId);
	}

	public FlowResult<List<CompanyDTO>> getCompanyListHaveProject(
			String moduleCode, String authUserLoginName, Long ctrId,
			Long fieldId) {
		return this.getAuthCompanyList(this.getCompanyListHaveProject(),
				moduleCode, authUserLoginName, ctrId, fieldId);
	}

	public FlowResult<CompanyDTO> getCompanyByDeptId(Long deptId,
			String moduleCode, String authUserLoginName, Long ctrId,
			Long fieldId) {
		return this.getAuthCompany(this.getCompanyByDeptId(deptId), moduleCode,
				authUserLoginName, ctrId, fieldId);
	}

	public FlowResult<List<CompanyDTO>> getCompanyListByDeptIds(
			String[] deptIds, String moduleCode, String authUserLoginName,
			Long ctrId, Long fieldId) {
		return this.getAuthCompanyList(this.getCompanyListByDeptIds(deptIds),
				moduleCode, authUserLoginName, ctrId, fieldId);
	}

	/**
	 * 根据UserId查询人员权限范围的所有公司
	 * 
	 * @param userId
	 *            用户Id
	 * @param moduleCode
	 *            模块Code
	 * @param authUserLoginName
	 *            用户登录名
	 * @param ctrId
	 *            控制点Id
	 * @param fieldId
	 *            维度Id
	 * @return
	 */
	public FlowResult<List<CompanyDTO>> getCompanyListByUserId(Long userId,
			String moduleCode, String authUserLoginName, Long ctrId,
			Long fieldId) {
		return this.getAuthCompanyList(this.getCompanyListByUserId(userId),
				moduleCode, authUserLoginName, ctrId, fieldId);

	}

	public FlowResult<CompanyDTO> getCompanyMainByUserId(Long userId,
			String moduleCode, String authUserLoginName, Long ctrId,
			Long fieldId) {
		return this.getAuthCompany(this.getCompanyMainByUserId(userId),
				moduleCode, authUserLoginName, ctrId, fieldId);
	}

	public FlowResult<List<CompanyDTO>> getCompanyListByUserIds(
			String[] userIds, String moduleCode, String authUserLoginName,
			Long ctrId, Long fieldId) {
		return this.getAuthCompanyList(this.getCompanyListByUserIds(userIds),
				moduleCode, authUserLoginName, ctrId, fieldId);

	}

	public FlowResult<List<CompanyDTO>> getCompanyListByUserLoginName(
			String userLoginName, String moduleCode, String authUserLoginName,
			Long ctrId, Long fieldId) {
		return this.getAuthCompanyList(
				this.getCompanyListByUserLoginName(userLoginName), moduleCode,
				authUserLoginName, ctrId, fieldId);
	}

	public FlowResult<CompanyDTO> getCompanyMainByUserLoginName(
			String userLoginName, String moduleCode, String authUserLoginName,
			Long ctrId, Long fieldId) {
		return this.getAuthCompany(
				this.getCompanyMainByUserLoginName(userLoginName), moduleCode,
				authUserLoginName, ctrId, fieldId);
	}

	public FlowResult<List<CompanyDTO>> getCompanyListByUserLoginNames(
			String[] userLoginNames, String moduleCode,
			String authUserLoginName, Long ctrId, Long fieldId) {
		return this.getAuthCompanyList(
				this.getCompanyListByUserLoginNames(userLoginNames),
				moduleCode, authUserLoginName, ctrId, fieldId);

	}

	/**
	 * 查询人员权限范围的所有公司
	 * 
	 * @param sourceCompanyDTOList
	 *            人员岗位公司
	 * @param moduleCode
	 *            模块Code
	 * @param authUserLoginName
	 *            用户登录名
	 * @param ctrId
	 *            控制点Id
	 * @param fieldId
	 *            维度Id
	 * @return
	 */
	private FlowResult<List<CompanyDTO>> getAuthCompanyList(
			FlowResult<List<CompanyDTO>> sourceCompanyDTOList,
			String moduleCode, String authUserLoginName, Long ctrId,
			Long fieldId) {

		FlowResult<List<CompanyDTO>> result = new FlowResult<List<CompanyDTO>>();

		List<Long> roleIds = userDao.getRoleIds(authUserLoginName);
		List<Long> standRoleIds = userDao.getStandRoleIds(authUserLoginName);
		Map<Long,CompanyDTO> companyMap=new HashMap<Long,CompanyDTO>();
		if (standRoleIds != null && !standRoleIds.isEmpty()) {
			roleIds.addAll(standRoleIds);
		}

		if (roleIds != null && !roleIds.isEmpty()) {
			// 范围列表
			List<ScopeDTO> scopeList = ScopeUtils
					.buildScopeDtoList(bizDataRoleDao.getBizDataRoles(roleIds,
							moduleCode, fieldId));

			if (scopeList != null)
				for (ScopeDTO scopeDto : scopeList) {
					// 全集团
					if ("CA".equals(scopeDto.getCode())) {
						//return getCompanyListAll();
						FlowResult<List<CompanyDTO>> allCompanyResult=getCompanyListAll();
						List<CompanyDTO> compnays=allCompanyResult.getResult();
						if(compnays!=null && compnays.size()>0){
							for(CompanyDTO compnay:compnays){
								companyMap.put(compnay.getId(), compnay);
							}
						}
						
						// 本公司
					} else if ("CS".equals(scopeDto.getCode())) {
					
						List<CompanyDTO> compnays=sourceCompanyDTOList.getResult();
						if(compnays!=null && compnays.size()>0){
							for(CompanyDTO compnay:compnays){
								companyMap.put(compnay.getId(), compnay);
							}
						}
						// 指定公司
					} else if ("CO".equals(scopeDto.getCode())
							&& scopeDto.getValue() != null) {
						ArrayList<String> compIdList = new ArrayList<String>();
						String[] temp = scopeDto.getValue().split(",");
						for (String s : temp) {
							if (s.split("/").length > 0) {
								compIdList.add(s.split("/")[0]);
							}
						}
						if (compIdList != null && compIdList.size() > 0) {
							FlowResult<List<CompanyDTO>> otherCompanyResult= getCompanyListByIds((String[]) compIdList.toArray(new String[compIdList.size()]));
							List<CompanyDTO> compnays=otherCompanyResult.getResult();
							if(compnays!=null && compnays.size()>0){
								for(CompanyDTO compnay:compnays){
									companyMap.put(compnay.getId(), compnay);
								}
							}
						}
					}
				}
		}
		result.setResult(IteratorUtils.toList(companyMap.values().iterator()));
		return result;
	}

	private FlowResult<CompanyDTO> getAuthCompany(
			FlowResult<CompanyDTO> sourceCompanyDTOList, String moduleCode,
			String authUserLoginName, Long ctrId, Long fieldId) {

		CompanyDTO sourceResult = sourceCompanyDTOList.getResult();
		FlowResult<CompanyDTO> result = new FlowResult<CompanyDTO>();

		List<Long> roleIds = userDao.getRoleIds(authUserLoginName);
		List<Long> standRoleIds = userDao.getStandRoleIds(authUserLoginName);

		if (standRoleIds != null && !standRoleIds.isEmpty()) {
			roleIds.addAll(standRoleIds);
		}
		CompanyDTO compList = new CompanyDTO();
		if (roleIds != null && !roleIds.isEmpty()) {
			List<ScopeDTO> scopeList = ScopeUtils
					.buildScopeDtoList(bizDataRoleDao.getBizDataRoles(roleIds,
							moduleCode, fieldId));

			ArrayList<String> compIdList = new ArrayList<String>();

			List<CompanyDTO> userCompanyList = this
					.getCompanyListByUserLoginName(authUserLoginName)
					.getResult();

			if (scopeList != null)
				for (ScopeDTO scopeDto : scopeList) {
					if ("CA".equals(scopeDto.getCode())) {
						result.setResult(sourceResult);
						return result;
					} else if ("CS".equals(scopeDto.getCode())) {
						for (CompanyDTO cDTO : userCompanyList) {
							compIdList.add(String.valueOf(cDTO.getId()));
						}
					} else if ("CO".equals(scopeDto.getCode())
							&& scopeDto.getValue() != null) {
						String[] temp = scopeDto.getValue().split(",");
						for (String s : temp) {
							if (s.split("/").length > 0) {
								compIdList.add(s.split("/")[0]);
							}
						}
					}

					if (compIdList.size() > 0) {
						for (String st : compIdList) {
							if (st.equals(String.valueOf(sourceResult.getId()))) {
								compList = sourceResult;
							}
						}

					}

				}
		}
		result.setResult(compList);
		return result;
	}

	@Override
	public FlowResult<List<DeptDTO>> getAllDept(Long companyId,
			String moduleCode, String authUserLoginName, Long ctrId,
			Long fieldId) {

		return this.getAuthDeptList(companyId, moduleCode,
				authUserLoginName, ctrId, fieldId);

	}

	public FlowResult<List<DeptDTO>> getAllDept() {
		Date startDate=new Date();
		List<Dept> pbs = deptDao.getAllDept(false);
		List<DeptDTO> pbds = DeptUtils.buildDeptDtoList(pbs);
		FlowResult<List<DeptDTO>> fr = new FlowResult<List<DeptDTO>>();
		if (pbds == null) {
			fr.setResult(new ArrayList<DeptDTO>());
		} else {
			fr.setResult(pbds);
		}
		 Date endtDate=new Date();
			logger.info("getAuthDeptList============" +(startDate.getTime()-endtDate.getTime()));
		return fr;
	}

	private FlowResult<List<DeptDTO>> getAuthDeptList(Long companyId,
			String moduleCode,
			String authUserLoginName, Long ctrId, Long fieldId) {
	    Date startDate=new Date ();
	
		FlowResult<List<DeptDTO>> result = new FlowResult<List<DeptDTO>>();
		Map<Long,DeptDTO> deptDTOMap=new HashMap<Long,DeptDTO>();
//		FlowResult<DataAuthDTO> fr = baseAPIService
//				.getDataAuth(authUserLoginName);
//		Map<Long,DeptDTO> deptDTOMap=new HashMap<Long,DeptDTO>();
//		DataAuthDTO dAD = fr.getResult();
		Date startDate1=new Date ();
	   String sqlrole="select DISTINCT c.code,c.name,c.id ,r.biz_data_scope_other_options from sm_biz_data_scope c ,sm_biz_data_field f ,sm_biz_data_role r ,sm_party_entity y ,sm_party_entity yy ,sm_party_struct t ,sm_user u where y.party_type_id=6 and yy.party_type_id=5 and  t.child_entity_id=y.id and t.parent_entity_id=yy.id and yy.ref_parent_id=r.role_id and y.ref_id=u.id and" 
				+"  u.loginname ='"+authUserLoginName+"' and c.id=r.biz_data_scope_id and c.field_id =f.id and f.ctrl_id='"+ctrId+"' and f.id='"+fieldId+"' and  f.module_code='"+moduleCode+"' order by c.code ";
	
	   List<ScopeDTO> scopeList= jt.query(sqlrole, new RowMapper<ScopeDTO>(){
			@Override
			public ScopeDTO mapRow(ResultSet rs, int rowNum)
					throws SQLException {
				ScopeDTO scopeDto=new ScopeDTO();
				scopeDto.setCode(rs.getString("code"));
				scopeDto.setName(rs.getString("name"));
				scopeDto.setId(rs.getLong("id"));
				scopeDto.setValue(rs.getString("biz_data_scope_other_options"));
				// TODO Auto-generated method stub
				return scopeDto;
			}
	    });
	   
		logger.info("sqlrole================"+sqlrole+"=======用时======="+(new Date().getTime()-startDate1.getTime()));
	   
		if (scopeList != null && scopeList.size() > 0) {
				/**
				List<CompanyDTO> userCompanyList = getCompanyListByUserLoginName(
						authUserLoginName).getResult();
               **/
				for (ScopeDTO scopeDto : scopeList) {
					// 集团部门
					if ("DA".equals(scopeDto.getCode())) {
						
					    String sqlDA="select DISTINCT id, code,name ,short_name  from sm_dept d where (d.status is null or d.status = 0) ";
					    Date startDate2=new Date();
					    List<DeptDTO> listdepts= jt.query(sqlDA, new RowMapper<DeptDTO>(){
							@Override
							public DeptDTO mapRow(ResultSet rs, int rowNum)
									throws SQLException {
								DeptDTO deptDto=new DeptDTO();
								deptDto.setCode(rs.getString("code"));
								deptDto.setName(rs.getString("name"));
								deptDto.setId(rs.getLong("id"));
								deptDto.setShortName(rs.getString("short_name"));
								// TODO Auto-generated method stub
								return deptDto;
							}
					    });
					    if(listdepts!=null && listdepts.size()>0){
					    	for (DeptDTO p : listdepts) {
								//deptIdList.add(p.getId());
								deptDTOMap.put(p.getId(), p);
							}
					    }
					    logger.info("sqlDA================"+sqlDA+"=======用时======="+(new Date().getTime()-startDate2.getTime()));
					    break;
						// 公司部门
					} else if ("DB".equals(scopeDto.getCode())) {
						if(companyId!=null){
						   String sqlDB="select DISTINCT d.id, d.code,d.name ,d.short_name   from sm_dept d ,sm_party_entity e ,sm_party_struct t ,sm_party_entity c where d.id=e.ref_id and e.party_type_id=3 and c.ref_id="+companyId+" and e.id=t.child_entity_id and t.parent_entity_id=c.id and (d.status is null or d.status = 0) "	;
						   Date startDate3=new Date();
						   List<DeptDTO> listdepts= jt.query(sqlDB, new RowMapper<DeptDTO>(){
								@Override
								public DeptDTO mapRow(ResultSet rs, int rowNum)
										throws SQLException {
									DeptDTO deptDto=new DeptDTO();
									deptDto.setCode(rs.getString("code"));
									deptDto.setName(rs.getString("name"));
									deptDto.setId(rs.getLong("id"));
									deptDto.setShortName(rs.getString("short_name"));
									// TODO Auto-generated method stub
									return deptDto;
								}
						    });
						    if(listdepts!=null && listdepts.size()>0){
						    	for (DeptDTO p : listdepts) {
									//deptIdList.add(p.getId());
									deptDTOMap.put(p.getId(), p);
								}
						    }
						    logger.info("sqlDB================"+sqlDB+"=======用时======="+(new Date().getTime()-startDate3.getTime()));
						}
						
						// 本部门
					} else if ("DS".equals(scopeDto.getCode())) {
						/*Long uid = userDao
								.findUserIdByLoginName(authUserLoginName);
						if (uid != null && uid > 0L) {
							FlowResult<DeptDTO> myDept = getDeptMainByUserId(uid);
							if (myDept != null && myDept.getResult() != null) {
								//deptIdList.add(myDept.getResult().getId());
								deptDTOMap.put(myDept.getResult().getId(), myDept.getResult());
							}
						}*/
						Date startDate4=new Date();
					 String	sqlDS="select DISTINCT d.id, d.code,d.name ,d.short_name   from sm_dept d ,sm_party_entity e ,sm_party_struct t ,sm_party_entity c ,sm_user u ,sm_party_entity yy ,sm_party_struct tt ,sm_role r where "
								+" d.id=e.ref_id and e.party_type_id=3  and c.id=t.child_entity_id and t.parent_entity_id=e.id and c.party_type_id=5 and c.ref_parent_id=r.id and r.type_code!='system'"
								+" and c.id=tt.parent_entity_id and tt.child_entity_id=yy.id and yy.ref_id=u.id and u.loginname='"+authUserLoginName+"'    and (d.status is null or d.status = 0) "
								+" and yy.party_type_id=6 ";
					    List<DeptDTO> listdepts= jt.query(sqlDS, new RowMapper<DeptDTO>(){
							@Override
							public DeptDTO mapRow(ResultSet rs, int rowNum)
									throws SQLException {
								DeptDTO deptDto=new DeptDTO();
								deptDto.setCode(rs.getString("code"));
								deptDto.setName(rs.getString("name"));
								deptDto.setId(rs.getLong("id"));
								deptDto.setShortName(rs.getString("short_name"));
								// TODO Auto-generated method stub
								return deptDto;
							}
					    });
					    if(listdepts!=null && listdepts.size()>0){
					    	for (DeptDTO p : listdepts) {
								//deptIdList.add(p.getId());
								deptDTOMap.put(p.getId(), p);
							}
					    }
					    logger.info("sqlDS================"+sqlDS+"=======用时======="+(new Date().getTime()-startDate4.getTime()));
						// 指定部门
					} else if ("DO".equals(scopeDto.getCode())&& scopeDto.getValue() != null) {
						ArrayList<Long> deptIdList = new ArrayList<Long>();
						String[] temp = scopeDto.getValue().split(",");
						for (String s : temp) {
							if (s.split("/").length > 0) {
								if (s.split("/")[0] != null
										&& !"null".equals(s.split("/")[0])) {
									deptIdList
											.add(Long.valueOf(s.split("/")[0]));
								}
							}
						}
						if (deptIdList.size() > 0) {
							StringBuilder sb=new StringBuilder();
							for(Long l:deptIdList){
								sb.append(l+",");
							}
							if(sb.toString().endsWith(",")){
								sb.deleteCharAt(sb.toString().length()-1);
							}
							Date startDate5=new Date();
						    String sqlDO="select DISTINCT id, code,name ,short_name  from sm_dept d where (d.status is null or d.status = 0) and d.id in ("+sb.toString()+") ";
						    List<DeptDTO> listdepts= jt.query(sqlDO, new RowMapper<DeptDTO>(){
								@Override
								public DeptDTO mapRow(ResultSet rs, int rowNum)
										throws SQLException {
									DeptDTO deptDto=new DeptDTO();
									deptDto.setCode(rs.getString("code"));
									deptDto.setName(rs.getString("name"));
									deptDto.setId(rs.getLong("id"));
									deptDto.setShortName(rs.getString("short_name"));
									// TODO Auto-generated method stub
									return deptDto;
								}
						    });
						    if(listdepts!=null && listdepts.size()>0){
						    	for (DeptDTO p : listdepts) {
									//deptIdList.add(p.getId());
									deptDTOMap.put(p.getId(), p);
								}
						    }
						    logger.info("sqlDO================"+sqlDO+"=======用时======="+(new Date().getTime()-startDate5.getTime()));
						}
					}
				}
				ArrayList<DeptDTO> deptList2 = (ArrayList<DeptDTO>) IteratorUtils.toList(deptDTOMap.values().iterator());
				result.setResult(deptList2);
				 Date endtDate=new Date();
				logger.info("getAuthDeptList=======loginName=========="+authUserLoginName+"==============moduleCode==="+moduleCode+"=====companyId================="+ +companyId+"===============time========"+(endtDate.getTime()-startDate.getTime()));
				
				
			
		} else {
			result.faliure();
			result.getDebugInfo().addErrDesc("未找到相关数据授权信息,请授权!");
		}
		return result;
	}
	
	public static void main(String[] args){
		ArrayList<Long> deptIdList = new ArrayList<Long>();
		deptIdList.add(1L);
//		deptIdList.add(2L);
//		deptIdList.add(3L);
		if (deptIdList.size() > 0) {
			StringBuilder sb=new StringBuilder();
			for(Long l:deptIdList){
				sb.append(l+",");
			}
			if(sb.toString().endsWith(",")){
				sb.deleteCharAt(sb.toString().length()-1);
			}
			System.out.print(sb.toString());
			
		}
	}

	@Override
	public FlowResult<List<OrgnDTO>> getAuthDeptByCompany(Long companyId,
			String moduleCode, String authUserLoginName, Long ctrId,
			Long fieldId) {
		List<PartyStruct> psList = partyStructDao
				.findPartyStructByChildPartyEntityType(new String[] { "zb",
						"company", "department" });

		List<OrgnDTO> dtoList = OrgnUtils.buildOrgnDtoList(psList);
		List<OrgnDTO> dtoListNew = new ArrayList<OrgnDTO>();
		// 组装公司下的部门
		// 先得到数据授权的部门信息
		List<DeptDTO> dds = getAllDept(companyId, moduleCode,
				authUserLoginName, ctrId, fieldId).getResult();

		if (dtoList != null) {
			for (OrgnDTO o : dtoList) {

				if ("company".equals(o.getNodeType())
						&& companyId == o.getRefId()) {
					dtoListNew.add(o);
				}
				if ("department".equals(o.getNodeType())
						&& companyId == o.getParentId()) {
					boolean flag = false;
					if (dds != null) {
						for (DeptDTO d : dds) {
							if (d.getId() == o.getRefId()) {
								flag = true;
								break;
							}
						}
						if (flag) {
							dtoListNew.add(o);
						}
					}
				}
			}
		}

		FlowResult<List<OrgnDTO>> fr = new FlowResult<List<OrgnDTO>>();
		fr.setResult(dtoListNew);

		return fr;
	}

	@Override
	public FlowResult<List<OrgnDTO>> getOrgnListNotProjectAndBranch() {
		List<PartyStruct> psList = partyStructDao
				.findPartyStructByChildPartyEntityType(new String[] { "zb",
						"company", "department" });

		List<OrgnDTO> dtoList = OrgnUtils.buildOrgnDtoList(psList);

		FlowResult<List<OrgnDTO>> fr = new FlowResult<List<OrgnDTO>>();
		if (dtoList != null) {
			fr.setResult(dtoList);
		} else {
			fr.setResult(new ArrayList<OrgnDTO>());
		}

		return fr;
	}

	@Override
	public FlowResult<List<DeptDTO>> getDeptListByUserId(Long companyId,
			Long userId) {
		List<Long> companyIds = new ArrayList<Long>();
		List<Long> newDeptIds = new ArrayList<Long>(); 
		List<Long> pss = partyStructDao
				.findPartyStructRefIdByChildPartyEntityRefIdAndType(userId,
						"3", "6");
		companyIds.addAll(pss);
		List<Long> pss2 = partyStructDao
				.findPartyStructRefIdByChildPartyEntityRefIdAndType(userId,
						"5", "6");

		List<Long> temp = null;

		for (Long l : pss2) {
			temp = partyStructDao.findPartyStructRefIdByChildPartyEntityId(l,
					"department");
			if (temp != null)
				companyIds.addAll(temp);
			temp = null;
		}

		// 过滤部门是否在公司下
		if (companyIds != null && companyIds.size() > 0) {
			Long[] drefids = new Long[companyIds.size() + 5];
			Long[] cids = new Long[2];
			for (int i = 0; i < companyIds.size(); i++) {
				drefids[i] = companyIds.get(i);
			}
			List<PartyEntity> peDepts = partyEntityDao
					.getPartyEntityListByRefIdsAndPartyEntityType(drefids,
							"department");
			// 找公司
			cids[0] = companyId;
			List<PartyEntity> peCompanys = partyEntityDao
					.getPartyEntityListByRefIdsAndPartyEntityType(cids,
							"company");

			if (peDepts != null && peDepts.size() > 0 && peCompanys != null
					&& peCompanys.size() > 0) {
				for (PartyEntity deptDe : peDepts) {
					boolean fla = false;
					for (PartyEntity companyDe : peCompanys) {
						if (deptDe.getPrefix().contains("-"+String.valueOf(companyDe.getId()))) {
							fla = true;
						}
					}
					if (fla) {
						newDeptIds.add(deptDe.getRefId());
					}
				}
			}
		}

		return getDeptListByIds(StringHelper.join(newDeptIds, "','").split(
				"','"));
	}

	@Override
	public FlowResult<List<OrgnDTO>> getOrgnByRefId(Long refId,
			String[] includeTypes) {
		List<PartyEntity> peList = partyEntityDao
				.getPartyEntityListByRefIdAndPartyEntityTypes(refId,
						includeTypes);

		List<OrgnDTO> dtoList = PartyEntityUtils.buildOrgnDTOList(peList);

		FlowResult<List<OrgnDTO>> fr = new FlowResult<List<OrgnDTO>>();
		if (dtoList != null) {
			fr.setResult(dtoList);
		} else {
			fr.setResult(new ArrayList<OrgnDTO>());
		}

		return fr;
	}

	@Override
	public FlowResult<OrgnDTO> getParentOrgnByChildId(Long refId,
			String[] includeTypes) {
		List<PartyEntity> peList = partyEntityDao
				.getPartyEntityListByRefIdAndPartyEntityTypes(refId,
						includeTypes);
		FlowResult<OrgnDTO> result = new FlowResult<OrgnDTO>();
		if (peList != null && peList.size() > 0) {
			Long childId = peList.get(0).getId();
			FlowUtils.checkParams(result, "parentId", childId);
			if (result.isSuccess()) {
				PartyStruct subOrgns = partyStructDao
						.getStructByChildEntityId(childId);
				OrgnDTO dtos = OrgnUtils.buildOrgnDto(subOrgns);
				result.setResult(dtos);
			}
		}
		return result;
	}

	@Override
	public List<PartyEntityDTO> getParyEntityByStPidIsStrc(
			String partyStructTypeId, String parentEntityId, String isStruct) {
		// TODO Auto-generated method stub
		return null;
	}
	
	/**
	 * chc add 2016.7.29
	 */
	@Override
	public FlowResult<List<ScopeDTO>> getAuthScope(String moduleCode,String authUserLoginName, Long ctrId, Long fieldId) {
		FlowResult<List<ScopeDTO>> fr = new FlowResult<List<ScopeDTO>>();
		
		List<Long> roleIds = userDao.getRoleIds(authUserLoginName);
        List<Long> standRoleIds = userDao.getStandRoleIds(authUserLoginName);
        
        if(standRoleIds != null && !standRoleIds.isEmpty()){
            roleIds.addAll(standRoleIds);
        }
        
        if(roleIds != null && !roleIds.isEmpty()) {
        	List<ScopeDTO> scopeList = ScopeUtils.buildScopeDtoList(bizDataRoleDao.getBizDataRoles(roleIds, moduleCode, fieldId));
        	Map<Long,ScopeDTO> sdtMap = new HashMap<Long,ScopeDTO>();
        	List<ScopeDTO> newScopeList = new ArrayList<ScopeDTO>();
        	for(ScopeDTO scopeDTO:scopeList){
        		sdtMap.put(scopeDTO.getId(), scopeDTO);
        	}
        	for (Map.Entry<Long,ScopeDTO> entry : sdtMap.entrySet()) {
        		newScopeList.add(entry.getValue());
        	}
        	fr.setResult(newScopeList);
        }
		return fr;
	}

	 /**
     * chc add 获取当前用户拥有岗位集合 2016.8.1
     * @param loginName
     * @return
     */
	@Override
	public List<RoleDTO> getPostsByCurrentUser(String loginName) {
		// 获取当前用户拥有岗位集合
		return flowServerService.getPostsByCurrentUser(loginName);
	}
}
