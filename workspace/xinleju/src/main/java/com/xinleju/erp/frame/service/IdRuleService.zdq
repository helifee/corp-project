package com.xinleju.erp.frame.service;


import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.erp.base.app.bean.Page;
import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.frame.dao.IdRuleDao;
import com.xinleju.erp.frame.models.IdRule;
import com.xinleju.erp.frame.service.extend.dto.IdRuleDto;
import com.xinleju.erp.frame.utils.SeqUtils;


/**
 * 版权：(C) 版权所有 2000-2014 上海天好电子商务有限公司苏州分公司 编号规则Service <详细描述>
 * 
 * @author zhengxj
 * @version $Id: IdRuleService.java 720 2015-03-24 08:11:10Z zhongjun $
 * @since
 * @see
 */
@Service
public class IdRuleService extends BaseService {

    /**
     * 编号规则Dao
     */
    @Autowired
    private IdRuleDao idRuleDao;

    /**
     * 获取编号规则列表
     * 
     * @author zhengxj
     * @param idRuleDto 查询参数
     * @param start 分页开始数
     * @param limit 每页条数
     * @return page
     */
    public Page getMsgList(IdRuleDto idRuleDto, int start, int limit) {
        return idRuleDao.getIdRuleList(idRuleDto, start, limit);
    }
    /**
     * 获取全部编号规则列表
     * @return
     */
    public List<IdRule> getAllIdRuleList(){
    	return idRuleDao.getAllIdRuleList();
    }
    
    /**
     * 是否存在code
     * 
     * @author zhengxj
     * @param code 编码
     * @return
     */
    public boolean isExistCode(String code) {
        IdRule ir = getDao().getByProperty(IdRule.class, "code", code);
        return (ir != null) ? true : false;
    }

    /**
     * 编辑编号规则
     * 
     * @author zhengxj
     * @param idRule 编号规则
     */
    public void saveIdRule(IdRule idRule) {

        Date createDate = new Date();

        Long id = idRule.getId();
        if (id == null) {
            idRule.setCreateDate(createDate);
            idRule.setCount(0l);
            getDao().save(idRule);
        } else {
            IdRule _idRule = getDao().getById(IdRule.class, id);
            Integer _type = _idRule.getType();
            Integer type = idRule.getType();
            if (_type.intValue() != type.intValue()) {

                _idRule.setStatus(IdRule.STATUS_N);
                _idRule.setUpdateDate(createDate);
                getDao().update(_idRule);

                idRule.setId(null);
                idRule.setCreateDate(createDate);
                idRule.setCount(0l);
                getDao().save(idRule);
            } else {
                _idRule.setName(idRule.getName());
                _idRule.setCode(idRule.getCode());
                _idRule.setLen(idRule.getLen());
                _idRule.setStatus(idRule.getStatus());
                _idRule.setUpdateDate(createDate);
                getDao().update(_idRule);
            }
        }

    }

    /**
     * 保存编号规则
     * 
     * @author zhengxj
     * @param idRule 编号规则
     * @return
     */
    public IdRule saveByIdRule(IdRule idRule) {
        IdRule _idRule = new IdRule();
        _idRule.setName(idRule.getName());
        _idRule.setCode(idRule.getCode());
        _idRule.setType(idRule.getType());
        _idRule.setLen(idRule.getLen());
        _idRule.setStatus(IdRule.STATUS_Y);
        _idRule.setCreateDate(new Date());
        _idRule.setCount(0l);
        getDao().save(_idRule);
        return _idRule;
    }

    /**
     * 读取当前编码最大值
     * 
     * @author zhengxj
     * @param code
     * @return
     */
    public String getMaxCount(String code, boolean isNext) {
        try {

            DetachedCriteria dc = DetachedCriteria.forClass(IdRule.class);
            dc.add(Restrictions.eq("code", code));
            dc.add(Restrictions.eq("status", IdRule.STATUS_Y));
            dc.addOrder(Order.desc("createDate"));
            List<IdRule> list = getDao().findByCriteria(dc);
            if (list != null && !list.isEmpty()) {
                IdRule idRule = list.get(0);
                Integer type = idRule.getType();

                /**
                 * 当前系统时间
                 */
                String year = new SimpleDateFormat("yyyy-MM-dd").format(new Date());

                /**
                 * 当前时间
                 */
                String ymd = new SimpleDateFormat("yyyy-MM-dd").format(idRule.getCreateDate());

                /**
                 * 按年度
                 */
                if (IdRule.TYPE_YEAR == type.intValue()) {
                    if (!year.split("-")[0].equals(ymd.split("-")[0])) { // 初使化下年数据
                        idRule = saveByIdRule(idRule);
                    }
                }

                /**
                 * 按月份
                 */
                if (IdRule.TYPE_MONTH == type.intValue()) {

                    String ym = year.split("-")[0] + "-" + year.split("-")[1];
                    String _ym = ymd.split("-")[0] + "-" + ymd.split("-")[1];

                    if (!ym.equals(_ym)) { // 初使化下月数据
                        idRule = saveByIdRule(idRule);
                    }
                }

                /**
                 * 按天
                 */
                if (IdRule.TYPE_DAY == type.intValue()) {
                    if (!year.equals(ymd)) { // 初使化次日数据
                        idRule = saveByIdRule(idRule);
                    }
                }

                if (isNext) {
                    String maxCount = SeqUtils.getSeqMax(idRule.getLen());
                    if (idRule.getCount().longValue() < Long.parseLong(maxCount)
                        || IdRule.TYPE_N == type.intValue()) { // 当前计数小于规定位数最大值或无限期
                        idRule.setCount(idRule.getCount() + 1);
                        getDao().update(idRule);
                    }
                }

                return SeqUtils.genSeq(idRule.getLen(), idRule.getCount());
            } else {
                return "-1";
            }

        } catch (Exception e) {
            return "-2";
        }
    }
   
}
