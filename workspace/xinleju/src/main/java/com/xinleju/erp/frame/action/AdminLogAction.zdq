package com.xinleju.erp.frame.action;

import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.base.utils.DateUtils;
import com.xinleju.erp.frame.dao.AppDao;
import com.xinleju.erp.frame.dto.AdminLogQueryDTO;
import com.xinleju.erp.frame.models.AdminLog;
import com.xinleju.erp.frame.models.App;
import com.xinleju.erp.frame.models.LogRecord;
import com.xinleju.erp.report.action.ReportSettingAction;

/**
 * 管理员操作日志
 * 
 * @author chenhb
 * 
 */
public class AdminLogAction extends BaseAction {

	/**
	 * <p>
	 * Title:AdminLogAction.java
	 * </p>
	 * <p>
	 * Description: long
	 * </p>
	 * <p>
	 * Todo:TODO
	 * </p>
	 * 
	 * @author liugang
	 * @date 2016-4-8
	 */
	private static final long serialVersionUID = 1L;

	private static final Log log = LogFactory.getLog(ReportSettingAction.class);
	
	private AdminLogQueryDTO adminLogQueryDTO;

	@Autowired
	private AppDao appDao;

	/**
	 * 列表
	 * 
	 * @return
	 */
	public String list() {
		DetachedCriteria dc = DetachedCriteria.forClass(AdminLog.class);
		if (adminLogQueryDTO != null) {
			if (StringUtils.isNotBlank(adminLogQueryDTO.getLoginName())) {
				dc.add(Restrictions.like("loginName","%"+adminLogQueryDTO.getLoginName()+"%"));
			}
			if (StringUtils.isNotBlank(adminLogQueryDTO.getModuleCode())) {
				dc.add(Restrictions.eq("moduleCode", adminLogQueryDTO.getModuleCode()));
			}
			if (StringUtils.isNotBlank(adminLogQueryDTO.getKeyword())) {
				dc.add(Restrictions.or(Restrictions.like("visitLoginName", adminLogQueryDTO.getKeyword().trim(), MatchMode.ANYWHERE),
						Restrictions.like("funcName", adminLogQueryDTO.getKeyword().trim(), MatchMode.ANYWHERE)));
			}
			if (StringUtils.isNotBlank(adminLogQueryDTO.getVisitDateBegin())) {
				dc.add(Restrictions.ge("visitDate", DateUtils.str2Date(adminLogQueryDTO.getVisitDateBegin().trim().concat(" 00:00:00"), "yyyy-MM-dd HH:mm:ss")));
			}

			if (StringUtils.isNotBlank(adminLogQueryDTO.getVisitDateEnd())) {
				dc.add(Restrictions.le("visitDate", DateUtils.str2Date(adminLogQueryDTO.getVisitDateEnd().trim().concat(" 23:59:59"), "yyyy-MM-dd HH:mm:ss")));
			}
		}

		page = getCommonService().findPage(dc, start, limit);

		Map<String, App> appMap = appDao.getAppMap();
		request.setAttribute("appMap", appMap);
		return "list";
	}
	
	/***
	 * 删除管理员日志
	 */
	public void deleteAdminLogs() {
		String success = "true";
		String msg = "操作成功！";
		try {
			String retIds = request.getParameter("retIds");
			String[] strIds = retIds.split(";");
			for (String strId : strIds) {
				getCommonService().delete(getCommonService().getById(LogRecord.class, Long.parseLong(strId)));
			}
			Map<String, Object> r = new HashMap<String, Object>();
			r.put("success", success);
			r.put("msg", msg);
			log.info("delete()" + msg);
			super.renderJson(r);
		} catch (NumberFormatException e) {
			log.info("delete()" + "删除失败");
		}
	}
	
	public void delete(){
		String success = "true";
		String msg = "操作成功！";
		try {
			String retIds = request.getParameter("retIds");
			String[] strIds = retIds.split(";");
			for (String strId : strIds) {
				getCommonService().delete(getCommonService().getById(AdminLog.class, Long.parseLong(strId)));
			}
			Map<String, Object> r = new HashMap<String, Object>();
			r.put("success", success);
			r.put("msg", msg);
			log.info("delete()" + msg);
			super.renderJson(r);
		} catch (NumberFormatException e) {
			log.info("delete()" + "删除失败");
		}
	}

	/**
	 * 管理员日志首页
	 * 
	 * @return
	 */
	public String index() {

		return "index";
	}

	/**
	 * 左边菜单
	 * 
	 * @return
	 */
	public String leftMenu() {
		return "leftMenu";
	}

	public AdminLogQueryDTO getAdminLogQueryDTO() {
		return adminLogQueryDTO;
	}

	public void setAdminLogQueryDTO(AdminLogQueryDTO adminLogQueryDTO) {
		this.adminLogQueryDTO = adminLogQueryDTO;
	}

}
