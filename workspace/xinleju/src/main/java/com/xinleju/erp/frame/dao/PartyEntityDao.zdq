package com.xinleju.erp.frame.dao;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.xinleju.erp.base.app.utils.DaoHelper;
import com.xinleju.erp.base.utils.StringHelper;
import com.xinleju.erp.flow.dao.impl.BaseDAO;
import com.xinleju.erp.form.utils.DbType;
import com.xinleju.erp.frame.models.PartyEntity;
import com.xinleju.erp.frame.models.PartyStruct;
import com.xinleju.erp.frame.models.PartyType;

@Repository
public class PartyEntityDao extends BaseDAO {
	@Autowired
	private JdbcTemplate jt;
	public void changeStatus(Long partyEntityId, Integer status ){
		getDao().execute("update PartyEntity set status = ? where id= ?", status, partyEntityId);
	}
	/**
	 * 查找组织架构下的某节点的子节点
	 * @author zhongjun
	 * @param parentId
	 * @param partyStructTypeId
	 * @return
	 */
	public List<PartyEntity> findChildEntityAllNoRole(Long parentId , Long partyStructTypeId){
		if (null != parentId && null != partyStructTypeId){
			String hql ="select s.childEntity from PartyStruct s left join s.childEntity c left join c.partyType t"
					+ " where s.parentEntityId = ? and (t.type != 'role' and t.type != 'user') and s.partyStructTypeId = ? order by s.childEntityId asc";
			return getDao().findByHQL(PartyEntity.class, hql, new Object[]{parentId, partyStructTypeId});
		}
		return new ArrayList<PartyEntity>();
	}
	
	/**
	 * 查找组织架构下的某节点的子节点
	 * @author zx
	 * @param parentId
	 * @param partyStructTypeId
	 * @return
	 */
	public List<PartyEntity> findChildEntityAllNoDept(Long parentId , Long partyStructTypeId){
		if (null != parentId && null != partyStructTypeId){
			String hql ="select s.childEntity from PartyStruct s left join s.childEntity c left join c.partyType t"
					+ " where s.parentEntityId = ? and (t.type != 'role' and t.type != 'user' and t.type != 'department') and s.partyStructTypeId = ? order by s.childEntityId asc";
			return getDao().findByHQL(PartyEntity.class, hql, new Object[]{parentId, partyStructTypeId});
		}
		return new ArrayList<PartyEntity>();
	}
	
	public List<PartyEntity> findChildEntityAllNoProject(Long parentId , Long partyStructTypeId){
		if (null != parentId && null != partyStructTypeId){
			String hql ="select s.childEntity from PartyStruct s left join s.childEntity c left join c.partyType t"
					+ " where s.parentEntityId = ? and (t.type != 'role' and t.type != 'user' and t.type != 'group') and s.partyStructTypeId = ? order by s.childEntityId asc";
			return getDao().findByHQL(PartyEntity.class, hql, new Object[]{parentId, partyStructTypeId});
		}
		return new ArrayList<PartyEntity>();
	}

	/**
	 * 查找组织架构下的某节点的子节点
	 * @author zhongjun
	 * @param parentId
	 * @param partyStructTypeId
	 * @return
	 */
	public List<PartyEntity> findChildEntityAllNoUser(Long parentId , Long partyStructTypeId ){
		if (null != parentId && null != partyStructTypeId){
			String hql ="select s.childEntity from PartyStruct s left join s.childEntity c left join c.partyType t"
					+ " where s.parentEntityId = ? and (t.type != 'user' or c.partyTypeId is null) and s.partyStructTypeId = ? order by s.childEntityId asc";
			return getDao().findByHQL(PartyEntity.class, hql, new Object[]{parentId, partyStructTypeId});
		}
		return new ArrayList<PartyEntity>();
	}
	/**
	 * 查找某组织架构的所有根节点
	 * @author jdq
	 * @param partyStructTypeId
	 * @return
	 */
	public List<PartyEntity> findRootEntity(Long partyStructTypeId){
		if (null != partyStructTypeId){
			String hql ="select s.childEntity from PartyStruct s where s.parentEntityId is null"
					+ " and s.partyStructTypeId = ? order by s.childEntityId asc";
			return getDao().findByHQL(PartyEntity.class, hql, new Object[]{partyStructTypeId});
		}
		return new ArrayList<PartyEntity>();
	}

	/**
	 * 查找某组织架构的所有根节点
	 * @author jdq
	 * @param partyStructTypeId
	 * @return
	 */
	public List<PartyEntity> findRootEntity(){
		String hql ="select s.childEntity from PartyStruct s where s.parentEntityId is null order by s.childEntityId asc";
		return getDao().findByHQL(PartyEntity.class, hql, new Object[]{});
	}
	/**
	 * 查询所有PartyEntity，缓存使用
	 * @return
	 */
	public List<PartyEntity> getAllPartyEntity(){    	
		String hql ="from PartyEntity u where 1=1";
		List<PartyEntity> partyEntitys  = getDao().findByHQL(PartyEntity.class,hql);
		return partyEntitys;
	}

	/**
	 * 查询PE
	 * @param partyEntityType
	 * @return
	 */
	public List<PartyEntity> getPartyEntityListByPartyEntityTypes(String[] includeTypes){
		String hql = "from PartyEntity pe where 1=1";

		if(includeTypes != null && includeTypes.length >0){
			hql += "  and pe.partyType.type in('"+StringHelper.join(includeTypes, "','")+"')";
		}
		List<PartyEntity> partyEntitys  = getDao().findByHQL(PartyEntity.class,hql);
		return partyEntitys;
	}
	
	
	/**
	 * 获取岗位下的公司
	 * @param refParentId
	 * @param parentEntityId
	 * @return
	 */
	public List<PartyEntity> findEntityChildPartyEntityPrefix(String postIdPrefix){
		if (null != postIdPrefix && null != postIdPrefix){
			String hql = "select e from PartyEntity e ,PartyType t where e.partyTypeId=t.id and t.type='"+PartyType.TYPE_COMPANY+"' and "+DbType.getType()+"locate(e.prefix,'"+postIdPrefix+"')>0  ";
			return (List<PartyEntity>) getDao().findByHQL( PartyEntity.class, hql, new Object[]{});
		}
		return null;
	}

	/**
	 * 查询PE
	 * @param partyEntityType
	 * @return
	 */
	public List<PartyEntity> getPartyEntityListByRefIdAndPartyEntityTypes(Long refId,String[] includeTypes){
		String hql = "from PartyEntity pe where 1=1 and refId = " + refId ;

		if(includeTypes != null && includeTypes.length >0){
			hql += "  and pe.partyType.type in('"+StringHelper.join(includeTypes, "','")+"')";
		}
		List<PartyEntity> partyEntitys  = getDao().findByHQL(PartyEntity.class,hql);
		return partyEntitys;
	}
	
	public List<PartyEntity> getPartyEntityListByRefIdAndPartyEntityTypes(Long refId,String[] includeTypes,boolean  isPersonStruct){
		String hql = "from PartyEntity pe where 1=1 and refId = " + refId ;

		if(includeTypes != null && includeTypes.length >0){
			hql += "  and pe.partyType.type in('"+StringHelper.join(includeTypes, "','")+"')";
		}
		
		if(isPersonStruct){
			hql += "  and pe.entityType  is not null ";
		}
		List<PartyEntity> partyEntitys  = getDao().findByHQL(PartyEntity.class,hql);
		
		
		return partyEntitys;
	}
	
	
	public List<PartyEntity> getPartyEntityListByRefIdsAndPartyEntityType(Long[] refIds,String type){
		String hql = "from PartyEntity pe where 1=1  ";

		if(refIds != null && refIds.length >0){
			hql += "  and pe.refId in('"+StringHelper.join(refIds, "','")+"')";
		}
		if(StringUtils.isNotBlank(type)){

			hql += "  and pe.partyType.type='"+type+"'";
		}
		List<PartyEntity> partyEntitys  = getDao().findByHQL(PartyEntity.class,hql);
		return partyEntitys;
	}

	/**
	 * 查询PE
	 * @param partyEntityType
	 * @return
	 */
	public List<PartyEntity> getPartyEntityListByRefParentIdsAndPartyEntityTypes(String[] parentRefIds,String[] includeTypes){
		String hql = "from PartyEntity pe where 1=1 and refParentId in ('"+StringHelper.join(parentRefIds, "','")+"')";

		if(includeTypes != null && includeTypes.length >0){
			hql += "  and pe.partyType.type in('"+StringHelper.join(includeTypes, "','")+"')";
		}
		List<PartyEntity> partyEntitys  = getDao().findByHQL(PartyEntity.class,hql);
		return partyEntitys;
	}

	/**
	 * 查询PartyEntity根据ID
	 * @return
	 */
	public PartyEntity getPartyEntityById(Long partyEntityId){    	
		String hql ="from PartyEntity u where 1=1 and u.id = "+partyEntityId;
		PartyEntity partyEntitys  = getDao().findFirstByHQL(PartyEntity.class,hql);
		return partyEntitys;
	}

	/**
	 * 查询PartyEntity根据ID
	 * @return
	 */
	public List<PartyEntity> getPartyEntityByIds(String[] partyEntityIds){    	
		String hql ="from PartyEntity u where 1=1 ";

		if(partyEntityIds != null && partyEntityIds.length >0){
			hql += "  and u.id in('"+StringHelper.join(partyEntityIds, "','")+"')";
		}

		List<PartyEntity> partyEntitys  = getDao().findByHQL(PartyEntity.class,hql);
		return partyEntitys;
	}
	public PartyEntity findEntityByRefId(Long refId, String type){
		return getDao().findFirst(PartyEntity.class, "partyType.type = ? and e.partyType.type !='user' and e.refId = ?", new Object[]{type, refId});
	}

	public PartyEntity findEntityByLoginName(String loginName) {
		if (null != loginName) {
			String hql = "select ps.parentEntity from User u,PartyStruct ps where ps.childEntity.refId = u.mainRoleId and u.loginname = ?";
			return (PartyEntity) getDao().findFirstByHQL(PartyEntity.class,
					hql, new Object[] { loginName });
		}
		return null;
	}

	/**
	 * 查询PartyEntity根据ID
	 * @return
	 */
	public List<Long> getPartyEntityIdByIds(String[] partyEntityIds){    	
		String hql ="select u.id from PartyEntity u where 1=1 ";

		if(partyEntityIds != null && partyEntityIds.length >0){
			hql += "  and u.id in ('"+StringHelper.join(partyEntityIds, "','")+"')";
		}

		List<Long> partyEntitys  = getDao().findByHQL(Long.class,hql);
		return partyEntitys;
	}
	
	
	public List<Long> getPartyEntityIdRefIdByPrefixAndType(Long key,Long roleId,String type){    	
		String hql ="select u.refId from PartyEntity u where 1=1 ";

		if(key!=null&&key>0l){
			hql += "  and u.prefix like '%-"+key+"-%'";
		}
		
		if(StringUtils.isNotBlank(type)){
			hql += "  and u.partyType.type='"+type+"'";
		}
		
		if(roleId!=null&&roleId>0l){
			hql += "  and u.refParentId="+roleId;
		}

		List<Long> partyEntitys  = getDao().findByHQL(Long.class,hql);
		return partyEntitys;
	}
	
	
	
	
	/**
	 * 找标准角色在节点下的组织架构节点
	 * @author jdq
	 * @param refParentId
	 * @param parentEntityId
	 * @return
	 */
	public PartyEntity getEntityByRefParentId(Long refParentId, Long parentEntityId){
		if (null != refParentId && null != parentEntityId){
			String hql = "select c from PartyStruct s left join s.parentEntity p left join s.childEntity c where"
					+ " c.refParentId = ? and p.id = ?";
			return getDao().findFirstByHQL(PartyEntity.class, hql, refParentId, parentEntityId);
		}
		return new PartyEntity();
	}
	/**
	 * 获取父peid
	 * @param entityId 子peId
	 * @return
	 */
	public Long getParentEntityIdByPeId(Long entityId){
		if (null != entityId){
			String hql = "select s.parentEntityId from PartyStruct s left join s.childEntity c where c.id = ?";
			return getDao().findFirstByHQL(Long.class, hql, entityId);
		}
		return null;
	}
	public PartyEntity findUserEntityByRefId(Long refId, Long parentEntityId, String type){
		if (null != refId && null != parentEntityId && StringUtils.isNotBlank(type)){
			String hql = "select e from PartyStruct s left join s.childEntity e where "
					+ " s.parentEntityId = ? and e.partyType.type = ? and e.partyType.type ='user' and e.refId = ?";
			return getDao().findFirstByHQL(PartyEntity.class, hql, parentEntityId, type, refId);
		}
		return new PartyEntity();
	}
	public List<PartyEntity> findChildEntityAll(Long parentId){
		if (null != parentId){
			return getDao().findByHQL(PartyEntity.class, "select s.childEntity from PartyStruct s left join s.childEntity c where s.parentEntityId = ? order by s.childEntityId asc", parentId);
		}
		return new ArrayList<PartyEntity>();
	}
	
	public Long findChildEntityCount(Long parentId){
		if (null != parentId){
			return getDao().findLong( "select COUNT(d.id) from  PartyStruct d where d.parentEntityId = ? ", parentId);
		}
		return 0l;
	}
	public List<Long> findPartyEntityId(Long refId){
		if (null != refId) {
			String hql = "select u.id from PartyEntity r,PartyEntity u where "+DbType.getType()+"LOCATE(r.prefix,u.prefix)>0 and u.refId = ? and r.partyTypeId='5' and u.partyTypeId='6'";
			return getDao().findByHQL(Long.class,hql, refId);
		}
		return new ArrayList<Long>();
	}	
	/**
	 * 获取组织架构上级节点 
	 * @author jdq
	 * @param entityId
	 * @return
	 */
	public PartyEntity getParentEntity(Long entityId){
		if (null != entityId){
			return getDao().findFirstByHQL(PartyEntity.class, "select s.parentEntity from PartyStruct s where s.childEntityId = ?", entityId);
		}
		return new PartyEntity();
	}

	/**
	 * 查询PE
	 * @param partyEntityType
	 * @return
	 */
	public List<PartyEntity> getPartyEntityListByRefParentIdAndPartyEntityTypes(Long refId,String[] includeTypes){
		String hql = "from PartyEntity pe where 1=1 and refParentId = " + refId ;

		if(includeTypes != null && includeTypes.length >0){
			hql += "  and pe.partyType.type in('"+StringHelper.join(includeTypes, "','")+"')";
		}
		List<PartyEntity> partyEntitys  = getDao().findByHQL(PartyEntity.class,hql);
		return partyEntitys;
	}
	
    /**
     * 解除用户直接与总部、公司、部门、团队之间的关系
     * @param refId
     */
	public void deletePartyEntity(Long refId) {
		if (null != refId) {
			List<Long> peIdList = findPartyEntityId(refId);
			String conditionStr = "";
			if(DaoHelper.getDeleteIds(peIdList.toArray()) != null){
				conditionStr =" and e.id not in(" + DaoHelper.getDeleteIds(peIdList.toArray()) + ")";
			}
			
			String hql1 = "from PartyEntity e where e.partyTypeId='6' and e.refId = " + refId + conditionStr;
			List<PartyEntity> partyEntitys  = getDao().findByHQL(PartyEntity.class,hql1);
			List<Long> idList = new ArrayList<Long>();
			if(partyEntitys!=null){
				for(PartyEntity entity:partyEntitys){
					idList.add(entity.getId());
				}
				String structhql = "delete from PartyStruct e where e.childEntityId in(" + DaoHelper.getDeleteIds(idList.toArray()) + ")";
				getDao().execute(structhql);
				String structhql1 = "delete from PartyStruct e where e.parentEntityId in(" + DaoHelper.getDeleteIds(idList.toArray()) + ")";
				getDao().execute(structhql1);
			}
			
			String hql = "delete from PartyEntity e where e.partyTypeId='6' and e.refId = ?" + conditionStr;
			getDao().execute(hql, refId);
		}
	}
}
