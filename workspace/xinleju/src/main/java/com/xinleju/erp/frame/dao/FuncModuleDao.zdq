package com.xinleju.erp.frame.dao;


import java.util.ArrayList;
import java.util.List;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.xinleju.erp.base.app.bean.Page;
import com.xinleju.erp.base.utils.StringHelper;
import com.xinleju.erp.flow.dao.impl.BaseDAO;
import com.xinleju.erp.frame.models.FuncModule;
import com.xinleju.erp.frame.models.ShortCutFunc;

/**
 * 版权：(C) 版权所有 2000-2014 上海天好电子商务有限公司苏州分公司 菜单Dao <详细描述>
 * 
 * @author zhengxj
 * @version $Id: FuncModuleDao.java 9201 2016-03-04 11:55:12Z yuanzhanpeng $
 * @since
 * @see
 */
@Repository
public class FuncModuleDao extends BaseDAO {
	
	 /**
     * 数据库访问
     */
    @Autowired
    private JdbcTemplate jt;
	 /**
	    * 查询所有FuncModule，缓存使用
	    * @return
	    */
	public List<FuncModule> getAllFuncModule(){    	
    	String hql ="from FuncModule u where 1=1";
    	List<FuncModule> r  = getDao().findByHQL(FuncModule.class,hql);
    	return r;
    }
    /**
     * 根据业务模块code获取菜单
     * 
     * @author zhengxj
     * @param systemCode 业务模块code
     * @return
     */
    public Page getParentFuncModuleList(String systemCode, int start, int limit) {
        DetachedCriteria dc = DetachedCriteria.forClass(FuncModule.class);
        dc.add(Restrictions.isNull("parentId"));
        dc.add(Restrictions.eq("systemCode", systemCode));
        return getDao().findPage(dc, start, limit);
    }
    
    /**
     * 获取菜单
     * 
     * @author zx
     * @return
     */
    public Page getAllParentFuncModuleList( int start, int limit) {
        DetachedCriteria dc = DetachedCriteria.forClass(FuncModule.class);
        dc.add(Restrictions.isNull("parentId"));
        return getDao().findPage(dc, start, limit);
    }
    
    /**
     * 获得授权的根菜单
     * @param roleIds
     * @param systemCode
     * @param start
     * @param limit
     * @return
     */
    public Page getAuthParentFuncModuleList(List<Long> roleIds, String systemCode, int start, int limit) {
        StringBuffer hqlStringBuffer = new StringBuffer();
        /**
        hqlStringBuffer.append("from FuncModule f where exists(").append(
            "select 'X' from  RoleModule rm where rm.funcModuleId = f.id and rm.roleId in("
                + StringHelper.join(roleIds.toArray(), ",") + ")").append(")  ");
        hqlStringBuffer.append(" and f.parentId is null");
        hqlStringBuffer.append(" and f.systemCode = ?");
        hqlStringBuffer.append(" order by f.sort asc");
        **/
        
        
        
        hqlStringBuffer.append("from FuncModule f where exists(").append(
                "select 'X' from  RoleModule rm where rm.funcModuleId = f.id and rm.roleId in("
                    + StringHelper.join(roleIds.toArray(), ",") + ")").append(")  ");
            hqlStringBuffer.append(" and f.parentId is null");
            hqlStringBuffer.append(" and f.systemCode = ?");
            hqlStringBuffer.append(" order by f.sort asc");
        Page page = getDao().findPageByHQL(FuncModule.class, hqlStringBuffer.toString(), new Object[]{systemCode}, start, limit);
        return page;
    }

    /**
     * 根据菜单id获取子菜单
     * 
     * @author zhengxj
     * @param parentId 父菜单id
     * @return
     */
    public List<FuncModule> getChildFuncModuleList(Long parentId) {
        List<FuncModule> parentFMList = getDao().findByHQL(FuncModule.class,
            "from FuncModule where parentId = ?", parentId);
        return parentFMList;
    }
    
    
    /**
     * 根据父的获取子的菜单
     * @param roleIds
     * @param parentId
     * @return
     */
    public List<FuncModule> getAuthChildFuncModuleList(List<Long> roleIds,Long parentId) {
        StringBuffer hqlStringBuffer = new StringBuffer();
        hqlStringBuffer.append("from FuncModule f where exists(").append(
            "select 'X' from  RoleModule rm where rm.funcModuleId = f.id and rm.roleId in("
                + StringHelper.join(roleIds.toArray(), ",") + ")").append(")  ");
        hqlStringBuffer.append(" and f.parentId =?");
        hqlStringBuffer.append(" order by f.sort asc");
        List<FuncModule> parentFMList = getDao().findByHQL(FuncModule.class,hqlStringBuffer.toString(), parentId);
        return parentFMList;
    }
}
