package com.xinleju.erp.frame.action;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.frame.dao.DeskTopDao;
import com.xinleju.erp.frame.models.DeskTop;
import com.xinleju.erp.frame.models.Desk_Component;
import com.xinleju.erp.frame.models.DesktopComponent;

public class DeskTopAction extends BaseAction {

	@Autowired
	private DeskTopDao deskTopDao;

	private DeskTop deskTop;

	private List<Desk_Component> desk_Components;

	/**
	 * 查询列表
	 * 
	 * @return
	 */
	public String list() {
		String keyword = request.getParameter("keyword");
		Integer type = getParameterInt("type");
		Integer status = getParameterInt("status");

		DetachedCriteria dc = DetachedCriteria.forClass(DeskTop.class);

		if (type != null) {
			dc.add(Restrictions.eq("type", type));
		}

		if (StringUtils.isNotBlank(keyword)) {
			dc.add(Restrictions.like("name", keyword, MatchMode.ANYWHERE));
		}

		if (status != null) {
			dc.add(Restrictions.eq("status", status));

		}

		page = getCommonService().findPage(dc, start, limit);

		request.setAttribute("keyword", keyword);
		request.setAttribute("typeMap", getTypeMap());
		request.setAttribute("statusMap", getStatusMap());
		request.setAttribute("type", type);
		request.setAttribute("status", status);

		return "list";
	}

	/**
	 * 编辑页面
	 * 
	 * @return
	 */
	public String edit() {

		Long id = getParameterLong("deskTopId");

		if (id != null) {
			deskTop = deskTopDao.getDeskTop(id);

			desk_Components = getCommonService().findByHQL(Desk_Component.class, "from Desk_Component dc where dc.deskTopId = ?", id);
		} else {
			deskTop = new DeskTop();
		}

		Map<Long, DesktopComponent> desktopComponent = deskTopDao.getDesktopComponentMap();

		request.setAttribute("desktopComponent", desktopComponent);
		request.setAttribute("typeMap", getTypeMap());
		return "edit";
	}

	/**
	 * 保存deskTop对象
	 */
	public void save() throws Exception {

		Long id = deskTop.getId();

		if (id != null) {
			deskTop.setId(id);
			deskTop.setEditDate(new Date());
		} else {
			deskTop.setCreateDate(new Date());
			deskTop.setStatus(0);
		}

		Map<String, Object> result = new HashMap<String, Object>();
		if (StringUtils.isBlank(deskTop.getName())) {
			result.put("success", false);
			result.put("msg", "名称不能为空");
			renderJson(result);
			return;
		}
		if (deskTop.getType() == null) {
			result.put("success", false);
			result.put("msg", "请选择一个类型");
			renderJson(result);
			return;
		}

		if (StringUtils.isBlank(deskTop.getRemark())) {
			result.put("success", false);
			result.put("msg", "描述不能为空");
			renderJson(result);
			return;
		}
		if (desk_Components != null && desk_Components.size() > 0) {
			for (int i = 0; i < desk_Components.size(); i++) {
				if (desk_Components.get(i) != null && desk_Components.get(i).getComponentId() == null) {
					result.put("success", false);
					result.put("msg", "部件未选满！");
					renderJson(result);
					return;
				}
			}
		} else {
			result.put("success", false);
			result.put("msg", "桌面至少选择一个部件");
			renderJson(result);
			return;
		}

		getCommonService().saveOrUpdate(deskTop);
		// 将桌面组建组建删除
		getCommonService().execute("delete Desk_Component where deskTopId=? ", deskTop.getId());
		int index = 1;
		for (Desk_Component dc : desk_Components) {
			if (dc != null) {
				dc.setDeskTopId(deskTop.getId());
				dc.setSort(index++);
				getCommonService().save(dc);
			}
		}

		result.put("success", true);
		result.put("msg", "保存成功");
		renderJson(result);

	}

	/**
	 * 启用
	 */
	public void enable() {
		Map<String, Object> result = new HashMap<String, Object>();
		try {
			String ids = request.getParameter("id");

			if (ids != null) {
				String[] idAry = ids.split(";");
				for (String dd : idAry) {
					Long id = Long.valueOf(dd);
					getCommonService().execute("update DeskTop d set d.status=0 where d.id= ?", id);
				}

			}
			result.put("success", true);
		} catch (Exception e) {
			result.put("success", false);
			result.put("msg", e.getMessage());
		}
		renderJson(result);
	}

	/**
	 * 禁用
	 */
	public void unable() {
		Map<String, Object> result = new HashMap<String, Object>();
		try {
			String ids = request.getParameter("id");

			if (ids != null) {
				String[] idAry = ids.split(";");
				for (String dd : idAry) {
					Long id = Long.valueOf(dd);
					getCommonService().execute("update DeskTop d set d.status=1 where d.id= ?", id);
				}

			}
			result.put("success", true);
		} catch (Exception e) {
			result.put("success", false);
			result.put("msg", e.getMessage());
		}
		renderJson(result);
	}

	/**
	 * 左边菜单
	 * 
	 * @return
	 */
	public String leftMenu() {
		return "leftMenu";
	}

	/**
	 * @return
	 */
	public String index() {
		return "index";
	}

	public static Map<Integer, String> getTypeMap() {
		Map<Integer, String> typeMap = new HashMap<Integer, String>();
		typeMap.put(0, "默认");
		typeMap.put(1, "定制");
		return typeMap;
	}

	public static Map<Integer, String> getStatusMap() {
		Map<Integer, String> statusMap = new HashMap<Integer, String>();
		statusMap.put(0, "启用");
		statusMap.put(1, "禁用");
		return statusMap;
	}

	public DeskTop getDeskTop() {
		return deskTop;
	}

	public void setDeskTop(DeskTop deskTop) {
		this.deskTop = deskTop;
	}

	public List<Desk_Component> getDesk_Components() {
		return desk_Components;
	}

	public void setDesk_Components(List<Desk_Component> desk_Components) {
		this.desk_Components = desk_Components;
	}

}
