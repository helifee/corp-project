package com.xinleju.erp.flow.action;

import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.base.utils.DateUtils;
import com.xinleju.erp.base.utils.EncodeUtils;
import com.xinleju.erp.base.utils.JsonUtils;
import com.xinleju.erp.flow.bean.IdName;
import com.xinleju.erp.flow.dao.impl.WpDAO;
import com.xinleju.erp.flow.flowutils.bean.FiHistoryBean;
import com.xinleju.erp.flow.flowutils.bean.FiStepsBean;
import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.flow.flowutils.bean.Gvs;
import com.xinleju.erp.flow.flowutils.bean.OpRelationInsBean;
import com.xinleju.erp.flow.flowutils.bean.SimpleResult;
import com.xinleju.erp.flow.flowutils.bean.StartFiResult;
import com.xinleju.erp.flow.flowutils.bean.StepsHistoryAndOpRelactionBean;
import com.xinleju.erp.flow.flowutils.bean.WiBean;
import com.xinleju.erp.flow.flowutils.bean.WpBean;
import com.xinleju.erp.flow.flowutils.utils.OpType;
import com.xinleju.erp.flow.flowutils.utils.WsConstant;
import com.xinleju.erp.flow.models.Fi;
import com.xinleju.erp.flow.models.Fl;
import com.xinleju.erp.flow.models.Wi;
import com.xinleju.erp.flow.models.Wp;
import com.xinleju.erp.flow.service.FlowService;
import com.xinleju.erp.flow.service.FormFlowService;
import com.xinleju.erp.flow.service.GvsService;
import com.xinleju.erp.flow.service.IRelationFiService;
import com.xinleju.erp.flow.service.IUserNoteService;
import com.xinleju.erp.flow.service.TrService;
import com.xinleju.erp.flow.service.api.FlowServerService;
import com.xinleju.erp.flow.service.api.OrgnAPIService;
import com.xinleju.erp.flow.service.api.ParticipantAPIService;
import com.xinleju.erp.flow.service.api.entitybean.PartEntityBean;
import com.xinleju.erp.flow.service.api.utils.ApiUtils;
import com.xinleju.erp.flow.utils.FlowConstant;
import com.xinleju.erp.flow.utils.LoginInfoUtils;
import com.xinleju.erp.frame.dao.UserDao;
import com.xinleju.erp.frame.models.PartyStruct;
import com.xinleju.erp.frame.models.PartyType;
import com.xinleju.erp.frame.service.UserService;
import com.xinleju.erp.frame.utils.ExceptionUtils;

/**
 * 
 * 版权：(C) 版权所有 2000-2014 上海天好电子商务有限公司苏州分公司
 * 流程操作入口
 * @author   zhongjun
 * @version  $Id$
 * @since
 * @see
 */
public class FormToolsAction extends BaseAction{
    
    private static Logger log = Logger.getLogger(FormToolsAction.class);
    
    /**
     * 流程编码
     */
    private String flowCode;
    
    /**
     * 发起岗位
     */
    private Long startPeId;
    
    private Long fiId;
    
    /**
     * 限制条件名称集合
     */
    private List<String> condNameList;
    
    /**
     * 流程操作扩展接口
     */
    @Autowired
    private FormFlowService formFlowService;
    
    /**
     * 流程操作接口
     */
    @Autowired
    private FlowServerService flowServerService;
    
    /**
     * 流程Service
     */
    @Autowired
    private FlowService flowService;
    
    /**
     * 人员Service
     */
    @Autowired
    private OrgnAPIService orgnAPIService;
    
    /**
     * 流程实例全局变量操作接口
     */
    @Autowired
    private GvsService gvsService;
    
    /**
     * 自定义审批常用语操作接口
     */
    @Autowired
    private IUserNoteService iUserNoteService;
    
    /**
     * 用户操作接口
     */
    @Autowired
    private UserDao userDao;
    
    @Autowired
    private WpDAO wpDao;
    
    /**
     * 相关流程
     */
    @Autowired
    private IRelationFiService relationFiService;
    
    @Autowired
	private UserService userService;
    
    @Autowired
    private TrService trService;
    /**
     * 组织架构Service
     */
    @Autowired
    private ParticipantAPIService participantAPIService;
    @Autowired
    private JdbcTemplate jdbcTemplate;
    /**
     * 更改wps
     * @author jun
     * @return
     */
    public String changeWpsIndex(){
    	Long fiId = getParameterLong("fiId");
    	Long opWiId = getParameterLong("opWiId");
        if (null != fiId){
            List<WpBean> wpList = flowServerService.getSteps(fiId, true, true, true).getResult();
            request.setAttribute("wpList", wpList);
        }
        if (null != opWiId){
            WiBean curWi = ApiUtils.buildWiBean(formFlowService.getWi(opWiId), true);
            request.setAttribute("curWi", curWi);
            request.setAttribute("canChangeWpNodeIds", "," + (null != curWi.getWp().getParticipantsSelectAt() ? curWi.getWp().getParticipantsSelectAt() : "") + ",");
            request.setAttribute("mustChangeWpNodeIds", "," + (null != curWi.getWp().getParticipantsMustSelectAt() ? curWi.getWp().getParticipantsMustSelectAt() : "") + ",");
        }
        request.setAttribute("fiId", fiId);
        request.setAttribute("opWiId", opWiId);
        return "changeWpsIndex";
    }
    /**
     * 修改参与人
     * @author jun
     */
    public void changeWpsUsers(){
        Map<String, Object> result = new HashMap<String, Object>();
        try {
        	Long opWiId = getParameterLong("opWiId");
        	Long wpId = getParameterLong("wpId");
        	Long subWpId = getParameterLong("subWpId");
        	Long wiId = getParameterLong("wiId");
        	Long userId = getParameterLong("userId");
            String paticipantString = getParameter("paticipantString");
            String errorMsg = formFlowService.changeWpsUsers(null != opWiId ? opWiId : null, null != wpId ? wpId : null
                , null != subWpId ? subWpId : null, null != wiId ? wiId : null
                , null != userId ?  userId : null, paticipantString);
            if (StringUtils.isNotBlank(errorMsg)){
                result.put("success", false);
                result.put("msg", errorMsg);
            } else {
                result.put("success", true);
            }
        } catch (Exception e) {
            result.put("success", false);
            log.error(ExceptionUtils.getExceptionMsg(e));
        }
        renderJson(result);
    }
    /**
     * 修改参与人
     * 
     * @author jun
     */
    public void changeParticipants() {
        Map<String, Object> result = new HashMap<String, Object>();
        try {
            Long wpId = getParameterLong("wpId");
            String selectUserIds = getParameter("selectUserIds");
            if (wpId != null) {
                formFlowService.overrideParticipants(wpId, selectUserIds);
            }
            result.put("success", true);
        } catch (Exception e) {
            result.put("success", false);
        }
        renderJson(result);
    }
    /**
     * 修改参与人
     * 
     * @author jun
     */
    public void deleteParticipant() {
    	Map<String, Object> result = new HashMap<String, Object>();
        try {
        	Long opWiId = getParameterLong("opWiId");
        	Long wpId = getParameterLong("wpId");
        	Long subWpId = getParameterLong("subWpId");
        	Long wiId = getParameterLong("wiId");
        	Long userId = getParameterLong("userId");
            String errorMsg = formFlowService.deleteParticipant(null != opWiId ? opWiId : null, null != wpId ? wpId : null
                , null != subWpId ? subWpId : null, null != wiId ? wiId : null, null != userId ?  userId : null);
            if (StringUtils.isNotBlank(errorMsg)){
                result.put("success", false);
                result.put("msg", errorMsg);
            } else {
                result.put("success", true);
            }
        } catch (Exception e) {
            result.put("success", false);
            log.error(ExceptionUtils.getExceptionMsg(e));
        }
        renderJson(result);
    }
    /**
     * 特殊权限操作（运维用的）
     * @author jun
     * @return
     */
    public String tsqxDeal(){
        Long fiId = getParameterLong("fiId");
        Fi fi = null;
        if (null != fiId){
            fi = formFlowService.getFiByFiId(fiId);
        }
        List<WiBean> wis = new ArrayList<WiBean>();
        List<WpBean> wps = new ArrayList<WpBean>();
        if (fi != null && null != fi.getId()) {
            Long[] spFiIds = FormFlowService.idsStrToLongArray((StringUtils.isNotBlank(fi.getRelatedFiIds()) ? fi.getRelatedFiIds() + "," : "") + fi.getId(), ",", false);
            // 审批流以及审批历程
            StepsHistoryAndOpRelactionBean stepsHistoryAndOpRelactionBean = flowServerService.getStepsHistorysAndOps(
                spFiIds, spFiIds, null, true, true, true).getResult();
            if (stepsHistoryAndOpRelactionBean != null) {
                if (stepsHistoryAndOpRelactionBean.getFiHistory() != null && !stepsHistoryAndOpRelactionBean.getFiHistory().isEmpty()) {
                    for (FiHistoryBean fiHistoryBean : stepsHistoryAndOpRelactionBean.getFiHistory()){
                        wis.addAll(fiHistoryBean.getWis());
                    }
                }
                if (stepsHistoryAndOpRelactionBean.getFiSteps() != null && !stepsHistoryAndOpRelactionBean.getFiSteps().isEmpty()) {
                    for (FiStepsBean fiStepsBean : stepsHistoryAndOpRelactionBean.getFiSteps()){
                        wps.addAll(fiStepsBean.getWps());
                    }
                }
            }
        }
        request.setAttribute("currentFi", fi);
        request.setAttribute("wis", wis);
        request.setAttribute("wps", wps == null ? new ArrayList<WpBean>() : wps);
        return "tsqxDeal";
    }
    /**
     * 特殊权限对wi的操作（运维用）
     * @author jun
     * @return 操作页面
     */
    public String tsqxDealOp(){
        Long wiId = getParameterLong("wiId");
        Long fiId = getParameterLong("fiId");
        Map<String, List<OpRelationInsBean>> opRelationInsBeanListMap = new HashMap<String, List<OpRelationInsBean>>();
        // 审批信息
        Fi fi = null;
        Wi wi = null;
        // 当前审批工作按钮查询
        int isDb = FlowConstant.INT_FALSE;
        // 是否是审批流程开始的节点
        int isStartWp = FlowConstant.INT_FALSE;
        if (wiId != null) {
            wi = formFlowService.getWi(wiId);
        }
        if ((null == wiId || wiId == 0) && (null != fiId && fiId > 0)){
            wi = formFlowService.getStartWiByFiId(fiId);
            wiId = wi.getId();
        }
        if (null == fiId || fiId == 0){
            if (null != wi){
                fiId = wi.getFiId();
            } else {
                fiId = 0L;
            }
        }
        fi = formFlowService.getFiByFiId(fiId);
        //历史记录
        List<WpBean> spStepMap = null;
        //正在运行的流程的节点
        List<WpBean> runningSpStepList = new ArrayList<WpBean>();
        List<OpRelationInsBean> spButtons = null;
        if (wi != null) {
            Long[] spFiIds = FormFlowService.idsStrToLongArray((StringUtils.isNotBlank(fi.getRelatedFiIds()) ? fi.getRelatedFiIds() + "," : "") + fi.getId(), ",", false);
            // 审批流以及审批历程
            StepsHistoryAndOpRelactionBean stepsHistoryAndOpRelactionBean = flowServerService.getStepsHistorysAndOps(
                spFiIds, spFiIds, null != wiId ? Long.valueOf(wiId) : null, true, true, true).getResult();
            if (stepsHistoryAndOpRelactionBean != null) {
                if (null != stepsHistoryAndOpRelactionBean.getUserOpRelationsMap()) {
                    opRelationInsBeanListMap = stepsHistoryAndOpRelactionBean.getUserOpRelationsMap();
                }
                runningSpStepList = formFlowService.filterSpHis(stepsHistoryAndOpRelactionBean.getFiSteps(), new Long[] {fi.getId()}, false);
                spStepMap = formFlowService.filterSpHis(stepsHistoryAndOpRelactionBean.getFiSteps(), spFiIds, true);
            }
            // 未读时置为已读
            if (FlowConstant.INT_TRUE != wi.getIsRead()) {
                flowServerService.markWiIsRead(wiId);
            }
            spButtons = formFlowService.getSpButtons(wi, opRelationInsBeanListMap);
            // 我自己的待办的才要显示按钮
            if (wi.getStatus() == WsConstant.STATUS_RUNNING){
                isDb = FlowConstant.INT_TRUE;
            }
            if (null != wi.getAc() && wi.getAc().getIsStart() == FlowConstant.INT_TRUE) {
                isStartWp = FlowConstant.INT_TRUE;
            }
        }
        // 判断是不是经办人操作
        request.setAttribute("isJbrOp", true);
        //历史记录
        request.setAttribute("spStep", spStepMap);
        //正在运行的流程的节点
        request.setAttribute("runningSpStep", runningSpStepList);
        //当前审批对象
        request.setAttribute("curFi", fi);
        //操作按钮
        request.setAttribute("spButtons", formFlowService.dealSpButtons(spButtons));
        //是否是第一个节点即发起审批节点
        request.setAttribute("isStartWp", isStartWp);
        //审批常用语
        request.setAttribute("spCyyList", iUserNoteService.getUserNoteListByUserId(null != wi ? wi.getParticipant() : 0L));
        //当前的任务
        request.setAttribute("curWi", wi);
        //当前的wp
        WpBean curWp = ApiUtils.buildWpBean(null != wi ? wi.getWp() : null, true, true, true);;
        request.setAttribute("curWp", curWp);
        WpBean nextWp = formFlowService.getNextWp(wi, curWp, runningSpStepList, 1 == isStartWp);
        //当前审批对象
        request.setAttribute("nextWp", nextWp);
        //下一步操作操作
        request.setAttribute("nextWpParticipantsDisplayName", FormFlowService.getWpParticipantsDisplayName(
            null != nextWp && null != nextWp.getWpId() ? getCommonService().getById(Wp.class, nextWp.getWpId()): null));
        // 是否是待办
        request.setAttribute("isDb", isDb);
        request.setAttribute("fiId", fiId);
        request.setAttribute("wiId", wiId);
        return "tsqxDealOp";
    }
    /**
     * 流程仿真
     * @return
     */
    public String flowTest(){
        FlowResult<StartFiResult> sfr = new FlowResult<StartFiResult>();
        Fl fl = null;
        if (null != id){
            fl = getCommonService().getById(Fl.class, id);
            if (null != fl){
                flowCode = fl.getFlowCode();
                condNameList = trService.getCondNameListBy(fl.getFlowCode(), fl.getFlowVersion());
            }
        }
        Gvs gvs = Gvs.create();
        Long startRoleId = null;
        Long userId = LoginInfoUtils.getLoginInfoUserDtoId(request);
        if (null != startPeId){
            PartEntityBean peb = orgnAPIService.getPartEntityById(startPeId);
            if (null != peb){
                if (null != peb.getRefId()){
                    userId = peb.getRefId();
                }
                if (StringUtils.isNotBlank(peb.getPrefix())){
                    startRoleId = orgnAPIService.getObjectRefIdByPePrefix(peb.getPrefix(), PartyType.TYPE_ROLE);
                }
            }
        }
        gvs.add("startPeId", startPeId, "startPeId");
        if (null == userId){
            sfr.faliure();
        }
        String bizId = "0";
        Fi fi = formFlowService.getNotSubmitFiByFlIdAndBizId(null != fl ? fl.getId() : 0L, bizId);
        try {
            if (null != condNameList && condNameList.size() > 0){
                String val = "";
                for (String e : condNameList){
                    val = getParameter(e);
                    gvs.add(e, StringUtils.isNumeric(val) ? new BigDecimal(val) : val, e);
                }
            }
        } catch (Exception e) {
            sfr.faliure();
        }
        if (null != startRoleId){
            gvs.add(WsConstant.WI_OP_ROLE, startRoleId, "发起角色");
        }
        if (sfr.isSuccess()){
            if (null != fi){
                sfr = flowServerService.restartFi(fi.getId(), fi.getFiName(), userId, gvs.toJSONString(), "", FlowConstant.STR_FALSE, null);
            } else {
                sfr = flowServerService.startFi(flowCode, bizId,"",null, userId, gvs.toJSONString(), "", null);
            }
        }
        if (sfr.isSuccess()){
            gvs = gvsService.getGvsByFiId(sfr.getResult().getFiId());
        }
        fiId = sfr.getResult().getFiId();
        request.setAttribute("fl", fl);
        request.setAttribute("startPeId", gvs.get("startPeId"));
        if(fi != null && fi.getServiceObjectDefine() != null && StringUtils.isNotBlank(fi.getServiceObjectDefine().getUrlBizEdit()) ){
        	
        	request.setAttribute("urlBizEdit", fi.getServiceObjectDefine().getUrlBizEdit() + fi.getBizId());
        }
        request.setAttribute("startPeName", null != gvs.get("startPeId") ? orgnAPIService.getEntityPath(Long.valueOf(gvs.get("startPeId").toString())) : "");
        request.setAttribute("condValueMap", gvs.getValueMap());
        return "flowTest";
    }
    
    public void doAllWi() {
        Map<String, Object> result = new HashMap<String, Object>();
        try {
            Long fiId = getParameterLong("fiId");
            FlowResult<SimpleResult> r = formFlowService.compleateFi(fiId, LoginInfoUtils.getLoginInfoUserDtoId(request), "一键通过", OpType.TG + ";通过");
            result.put("success", r.isSuccess());
        } catch (Exception e) {
            result.put("success", false);
        }
        renderJson(result);
    }
    /**
     * 
     * 具体的运维工作
     * @author hongbin
     */
    public void syncWork() {
        Map<String, Object> result = new HashMap<String, Object>();
        boolean flag = false;
        try {
            Integer opFlag = getParameterInt("opFlag");
            Long wiId = getParameterLong("wiId");
            String note = getParameter("note");
            note = EncodeUtils.urlDecode(note);
            String ct = getParameter("ct");
            String st = getParameter("st");
            WiBean wi = ApiUtils.buildWiBean(formFlowService.getWi(wiId), true);
            switch (opFlag) {
                case 1:
                    //工作废除
                    flag = flowServerService.overduWi(wi.getWiId(), LoginInfoUtils.getLoginInfoUserDtoId(request), false).isSuccess();
                    break;
                case 2:
                    //工作废除(尝试进入下个环节)
                    flag = flowServerService.overduWi(wi.getWiId(), LoginInfoUtils.getLoginInfoUserDtoId(request), true).isSuccess();
                    break;
                case 3:
                    //物理删除当前工作
                    flag = jdbcTemplate.update("delete from tf_wi wi where wi.id = ?",wiId) > 0 ;
                    break;
                case 4:
                    //更新审批信息
                    flag = jdbcTemplate.update("update tf_wi wi set wi.user_note = ?,wi.start_time = ?, wi.complete_time = ? where wi.id = ?", note,DateUtils.str2Date(st, "yyyy-MM-dd HH:mm:ss"),DateUtils.str2Date(ct, "yyyy-MM-dd HH:mm:ss"),wiId) >0;
                    break;
                default:
                    break;
            }
            result.put("success", flag);
        } catch (Exception e) {
            result.put("success", false);
        }
        renderJson(result);
    }
    public String userSelect() {
        String datas_ = decodeParams(request.getParameter("datas"));   
        request.setAttribute("datas", datas_);
        return "userSelect";
    }
    
    /**
     * 选择人员树
     */
    public void getPeTree() {
        String q = getParameter("q");
        Long parentId = Long.parseLong(getRequest().getParameter("parentId").substring(IdName.PREFIX_LENGTH));

        String prefix = getRequest().getParameter("prefix");
        
        Long parentEntityId =1L;
		//查空的  parentEntityId
		PartyStruct ps=this.getCommonService().findFirstByHQL(PartyStruct.class, "from PartyStruct where parentEntityId is null");
		if(ps!=null&&ps.getChildEntityId()!=null){
			parentEntityId=ps.getChildEntityId();
		}
		

        List<IdName> returnList = new ArrayList<IdName>();
        if (prefix.equals(IdName.ROOT_PREFIX)) {
            returnList.add(new IdName(parentEntityId, "公司部门/岗位/用户", IdName.PART_PREFIX));
        } else if (prefix.equals(IdName.PART_PREFIX)) {
            returnList.addAll(participantAPIService.findChildEntityAll(parentId, participantAPIService.getZcRootStructTypeIdByStructTypeCode(), q));
        }
        List<Map<String, Object>> trees = new ArrayList<Map<String, Object>>();
        for (IdName idName : returnList) {

            Map<String, Object> tree = new HashMap<String, Object>();
            tree.put("id", idName.getPrefix() + idName.getId());
            tree.put("text", idName.getName());

            boolean isLeaf = false;
            tree.put("leaf", isLeaf);
            tree.put("prefix", idName.getPrefix());
            tree.put("type", idName.getType());
            
            if (PartyType.TYPE_USER.equals(idName.getType())) {
                tree.put("checkable", true);
                tree.put("disabled", false);
            }else{
                tree.put("checkable", false);
                tree.put("disabled", true);
            }

            if (idName.getPrefix().equals(IdName.ROLE_PREFIX)) {
                tree.put("iconCls", "img_role");
            } else if (idName.getPrefix().equals(IdName.USER_PREFIX)) {
                tree.put("iconCls", "img_user");
            } else if (idName.getPrefix().equals(IdName.PROJECT_PREFIX)) {
                tree.put("iconCls", "img_group");
            } else if (idName.getPrefix().equals(IdName.PART_PREFIX)) {
                if("user".equals(idName.getType())){
                    tree.put("iconCls", "img_user");
                    tree.put("leaf", true);
                }
                else if("role".equals(idName.getType())){
                    tree.put("iconCls", "img_role");
                }
                else if("group".equals(idName.getType())){
                    tree.put("iconCls", "img_group");
                }
                else{
                    tree.put("iconCls", "img_orgn");
                }
            }
            trees.add(tree);
        }

        Map<String, Object> pageMap = new HashMap<String, Object>();
        pageMap.put("total", trees.size());
        pageMap.put("nodes", trees);
        String jsonString = JsonUtils.toJSONString(trees);
        renderJson(jsonString);
    }
    
    private String decodeParams(String datas) {
        String datas_ = null;
        try {
            if (StringUtils.isNotBlank(datas)) {
                datas_ = new String(datas.getBytes("ISO8859_1"));
                datas_ = java.net.URLDecoder.decode(datas_,"utf-8"); 
            }
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return datas_;
    }
    public String lineFeed(String str) {
        if(StringUtils.isNotEmpty(str)) {
            str = str.replaceAll("\t", "&nbsp;&nbsp;");
            str = str.replaceAll("\r\n", "<br/>");
            str = str.replaceAll("\n", "<br/>");
            str = str.replaceAll("\r", "<br/>");
        }
        return str;
    }
    public List<String> getCondNameList() {
        return condNameList;
    }
    public void setCondNameList(List<String> condNameList) {
        this.condNameList = condNameList;
    }
    public String getFlowCode() {
        return flowCode;
    }
    public void setFlowCode(String flowCode) {
        this.flowCode = flowCode;
    }
    public Long getFiId() {
        return fiId;
    }
    public void setFiId(Long fiId) {
        this.fiId = fiId;
    }
    public Long getStartPeId() {
        return startPeId;
    }
    public void setStartPeId(Long startPeId) {
        this.startPeId = startPeId;
    }
}
