package com.xinleju.erp.finance.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONArray;

import org.apache.commons.lang.StringUtils;
import org.apache.cxf.Bus.BusState;
import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;

import com.alibaba.fastjson.JSON;
import com.opensymphony.xwork2.ModelDriven;
import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.base.utils.JsonUtils;
import com.xinleju.erp.finance.models.BillField;
import com.xinleju.erp.finance.models.FiAccountSetData;
import com.xinleju.erp.finance.models.FiBizObject;
import com.xinleju.erp.finance.models.FiBoFieldsinfo;
import com.xinleju.erp.finance.models.FiBusinessobject;
import com.xinleju.erp.finance.models.FiVoucherEntry;
import com.xinleju.erp.finance.models.FiVoucherTempType;
import com.xinleju.erp.finance.models.FiVoucherTemplate;
import com.xinleju.erp.finance.service.BillFieldService;
import com.xinleju.erp.finance.service.BizObjectService;
import com.xinleju.erp.finance.service.FiAccountCaptionService;
import com.xinleju.erp.finance.service.FiAccountSetDataService;
import com.xinleju.erp.finance.service.FiBizObjectService;
import com.xinleju.erp.finance.service.FiCashFlowCaseService;
import com.xinleju.erp.finance.service.FiVoucherEntryService;
import com.xinleju.erp.finance.service.FiVoucherTempTypeService;
import com.xinleju.erp.finance.service.FiVoucherTemplateService;
import com.xinleju.erp.finance.utils.ExcelHandlerUtil;
import com.xinleju.erp.finance.utils.IExcelHandler;
import com.xinleju.erp.flow.utils.LoginInfoUtils;
import com.xinleju.erp.frame.dto.FiAccountSubjectDTO;
import com.xinleju.erp.frame.dto.FiCashFlowCaseDTO;
import com.xinleju.erp.frame.dto.JsonTreeTableTemplete;
import com.xinleju.erp.frame.models.BusinessObject;
import com.xinleju.erp.frame.models.expression.FiExpressionModel;
import com.xinleju.erp.frame.models.extender.FiAccountSubjectExtender;
import com.xinleju.erp.frame.models.extender.FiCashFlowCaseComboTreeExtender;
import com.xinleju.erp.frame.models.extender.FiVoucherTempTypeExtender;
import com.xinleju.erp.frame.utils.CommonUtil;

/**
 * 凭证模板业务类型
 * 
 * @author walden
 * 
 */
public class FiVoucherTempTypeAction extends BaseAction implements ModelDriven<FiVoucherTempType> {

	private FiVoucherTempType fiVoucherTempType = new FiVoucherTempType();
	
	private FiVoucherTemplate fiVoucherTemplate;
	@Autowired
	private FiVoucherTempTypeService fiVoucherTempTypeService;
	@Autowired
	private FiAccountCaptionService fiAccountCaptionService;
	@Autowired
	private FiBizObjectService fiBizObjectService;
	@Autowired
	private FiVoucherTemplateService fiVoucherTemplateService;
	@Autowired
	private FiCashFlowCaseService fiCashFlowCaseService;
	@Autowired
	private FiVoucherEntryService fiVoucherEntryService;//凭证模板-凭证模板分录
    private File  uploadfile;
    
	@Autowired
	private FiAccountSetDataService fiAccountSetDataService;
	
	
	private static final String SY_ID = "00";
	private static final String YS_CODE_EX = "y_01";
	private static final String YS_NAME_EX = "预算科目";
	
	private static final String SA_BANK_ID = "01";
	private static final String YS_BANKCODE_SA = "y_02";
	private static final String YS_BANKNAME_SA = "银行账户";
	
	private static final String SA_COLLECTION_ID = "02";
	private static final String YS_COLLECTIONCODE_SA = "y_03";
	private static final String YS_COLLECTIONNAME_SA = "代收类型";
	
	private static final String YS_CODE_CASH_FLOW = "f_01";
	private static final String YS_NAME_CASH_FLOW = "预算科目对应的现金流量项目";
	
	private static final String SO_COCAP_ID = "04";
	private static final String YS_COCAPCODE_CO = "y_04";
	private static final String YS_COCAPNAME_CO = "成本控制科目";
	
	private static final String CO_COCAPINPUT_ID = "05";
	private static final String YS_COCAPINPUTCODE_CO = "y_05";
	private static final String YS_COCAPINPUTNAME_CO = "成本控制科目(投入)";
	
	private static final String CO_PAYTYPE_ID = "06";
	private static final String YS_PAYTYPECODE_CO = "y_06";
	private static final String YS_PAYTYPENAME_CO = "成本款项类型";
	
	private static final String YS_CODE_CASH_FLOW_CO = "f_04";
	private static final String YS_NAME_CASH_FLOW_CO = "成本科目对应的现金流量项目";
	
	private static final String STATUS = "1";
	
	private String sysId = "2";
	
	@Override
	public FiVoucherTempType getModel() {
		return fiVoucherTempType;
	}

	/**
	 * 根据业务对象的ID获取注册属性
	 */
	public void getFiledByboId(){
		String regClassName = request.getParameter("regClassName");
		String sid = request.getParameter("sysId");
		sysId = sid;
		String boFiledJson = "[]";
		try {
			regClassName =  URLDecoder.decode(regClassName,"utf-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		FiBusinessobject bo = fiBizObjectService.getFiBusinessobjectByRegisClass(regClassName,sysId);
		if(bo != null){
			List<FiBoFieldsinfo> boFieldList = this.fiBizObjectService.getAllBoField(bo.getId());
			List<BillField> list = new ArrayList<BillField>();
			BillField billfield = null;
			for(FiBoFieldsinfo bfls:boFieldList){
				billfield = new BillField();
				billfield.setCode(bfls.getFieldkey());
				billfield.setName(bfls.getFieldname());
				list.add(billfield);
			}
			
			if(list!=null){
				boFiledJson = JSON.toJSONString(list);
				
			}
		}
		
		renderJson(boFiledJson);
	}
	
	
	/**
	 * 加载 凭证模板的页面
	 * 
	 * @return
	 */
	public String list() {
		Long accountSetId = getParameterLong("accountSetId");
		String sysId = request.getParameter("sysId");
		String accountSetCode = request.getParameter("accountSetCode");
		String companyCode = request.getParameter("companyCode");
		List<FiAccountSubjectDTO> accountCaptionList = null;
		List<FiCashFlowCaseDTO> cashFlowCaseList = null;
		//动态添加一个预算科目标识符
		FiAccountSubjectDTO fasd = new FiAccountSubjectDTO();
		fasd.setId(SY_ID);
		fasd.setSubcode(YS_CODE_EX);
		fasd.setSubname(YS_NAME_EX);
		
		FiCashFlowCaseDTO fcf = new FiCashFlowCaseDTO();
		fcf.setId(SY_ID);
		fcf.setSubcode(YS_CODE_CASH_FLOW);
		fcf.setSubname(YS_NAME_CASH_FLOW);
		
		//动态添加一个收款账户对应的会计科目标识符
		FiAccountSubjectDTO bank = new FiAccountSubjectDTO();
		bank.setId(SA_BANK_ID);
		bank.setSubcode(YS_BANKCODE_SA);
		bank.setSubname(YS_BANKNAME_SA);
		
		//动态添加一个代收类型对应的会计科目标识符
		FiAccountSubjectDTO collection = new FiAccountSubjectDTO();
		collection.setId(SA_COLLECTION_ID);
		collection.setSubcode(YS_COLLECTIONCODE_SA);
		collection.setSubname(YS_COLLECTIONNAME_SA);
		
		//动态添加一个成本科目标识符
		FiAccountSubjectDTO fasdco = new FiAccountSubjectDTO();
		fasdco.setId(SO_COCAP_ID);
		fasdco.setSubcode(YS_COCAPCODE_CO);
		fasdco.setSubname(YS_COCAPNAME_CO);
		
		//动态添加一个成本科目标识符投入
		FiAccountSubjectDTO fasdcoinput = new FiAccountSubjectDTO();
		fasdcoinput.setId(CO_COCAPINPUT_ID);
		fasdcoinput.setSubcode(YS_COCAPINPUTCODE_CO);
		fasdcoinput.setSubname(YS_COCAPINPUTNAME_CO);
		
		//动态添加一个款项类型标识符
		FiAccountSubjectDTO fasdcopaytype = new FiAccountSubjectDTO();
		fasdcopaytype.setId(CO_PAYTYPE_ID);
		fasdcopaytype.setSubcode(YS_PAYTYPECODE_CO);
		fasdcopaytype.setSubname(YS_PAYTYPENAME_CO);
		
		FiCashFlowCaseDTO fcfco = new FiCashFlowCaseDTO();
		fcfco.setId(SO_COCAP_ID);
		fcfco.setSubcode(YS_CODE_CASH_FLOW_CO);
		fcfco.setSubname(YS_NAME_CASH_FLOW_CO);
		
		if (StringUtils.isNotBlank(accountSetCode)) {
			accountCaptionList = fiAccountCaptionService.getAccountSubjectDTOList(STATUS,accountSetId);
			accountCaptionList.add(fasd);
			accountCaptionList.add(bank);
			accountCaptionList.add(collection);
			accountCaptionList.add(fasdco);
			accountCaptionList.add(fasdcoinput);
			accountCaptionList.add(fasdcopaytype);
			cashFlowCaseList = fiCashFlowCaseService.getCashFlowCaseDTOList(STATUS, accountSetId,Long.parseLong(sysId));
			cashFlowCaseList.add(fcf);
			cashFlowCaseList.add(fcfco);
		} else {
			accountCaptionList = new ArrayList<FiAccountSubjectDTO>();
			cashFlowCaseList = new ArrayList<FiCashFlowCaseDTO>();
		}
		
		List<FiAccountSetData> fasds = fiAccountSetDataService.getFiAccountSetsDataByAccountId(accountSetId,Long.parseLong(sysId));
		if(fasds != null && fasds.size() > 0){
			List<Long> ids = new ArrayList<Long>();
			List<FiAccountSetData> companys = new ArrayList<FiAccountSetData>();
			for(FiAccountSetData f:fasds){
				if(!ids.contains(f.getCompanyId())){
					ids.add(f.getCompanyId());
					companys.add(f);
				}
			}
			String accountSetsjson = JsonUtils.toJSONString(companys);
			request.setAttribute("accountSetsjson", accountSetsjson);
			ids.clear();
		}else{
			request.setAttribute("accountSetsjson", "[]");
		}
		
		JsonTreeTableTemplete jttt = new JsonTreeTableTemplete("id", "pid", FiAccountSubjectDTO.class,
				FiAccountSubjectExtender.class);
		JSONArray jsonTree = CommonUtil.transTree(accountCaptionList, jttt);
		String captionList = jsonTree.toString();
		if (StringUtils.isBlank(captionList)) {
			captionList = "[]";
		}
		
		JsonTreeTableTemplete cashJtt = new JsonTreeTableTemplete("id", "pid", FiCashFlowCaseDTO.class, FiCashFlowCaseComboTreeExtender.class);
		JSONArray cashFlowJsonTree = CommonUtil.transTree(cashFlowCaseList, cashJtt);
		String cashFlowList = cashFlowJsonTree.toString();
		if (StringUtils.isBlank(cashFlowList)) {
			cashFlowList = "[]";
		}
		
		List billFieldList = BillFieldService.getBillFieldList();
		String billFieldJson = JsonUtils.toJSONString(billFieldList);
		JSONArray function = JSONArray.fromObject(FiExpressionModel.getFunctions());
		JSONArray operator = JSONArray.fromObject(FiExpressionModel.getOperators());
		
		//TODO 后续系统的编号需要从前台传过来    1:销售系统  2：成本系统  3：费用系统
		List<FiBizObject> bizFormObjList = getFibObjects("2", sysId);
		String bizFormObjListJson = JsonUtils.toJSONString(bizFormObjList); 
		
		request.setAttribute("accountSetCode", accountSetCode);
		request.setAttribute("companyCode", companyCode);
		request.setAttribute("sysId", sysId);
		request.setAttribute("captionList", captionList);
		request.setAttribute("cashFlowList", cashFlowList);
		request.setAttribute("billFieldJson", billFieldJson);
		request.setAttribute("functions", function.toString());
		request.setAttribute("operators", operator.toString());
		request.setAttribute("bizFormObjListJson", bizFormObjListJson);
		return "list";
	}
	
	public List<FiBizObject> getFibObjects(String type,String sysCode){
		List<FiBizObject> fibs = new ArrayList<FiBizObject>();
		List<FiBusinessobject> bos = fiBizObjectService.findBizObjectByType(type,sysCode);
		
		FiBizObject fbo = null;
		String sysName = "";
		if(sysCode.equals("1")){
			sysName = "销售系统";
		}else if(sysCode.equals("2")){
			sysName = "成本系统";
		}else{
			sysName = "费用系统";
		}
		
		for(FiBusinessobject bo:bos){
			fbo = new FiBizObject();
			fbo.setSysCode(Integer.parseInt(sysCode));
			//fbo.setObjectId(bo.getVfetchdataclass());
			fbo.setObjectId(bo.getBtype());
			fbo.setSysName(sysName);
			fbo.setObjectName(bo.getVobject());
			
			fibs.add(fbo);
		}
		
		
		return fibs;
		
	}

	public void loadTree() {
		Long sysId = getParameterLong("sysId");
		Long accountSetId = getParameterLong("accountSetId");
		String accountSetCode = request.getParameter("accountSetCode");
		Long companyId = getParameterLong("companyId");
		List<FiVoucherTempType> fiVoucherTempTypeList = null;
		if(StringUtils.isNotBlank(accountSetCode)){
			fiVoucherTempTypeList = fiVoucherTempTypeService.fiVoucherTempTypeList(accountSetId,sysId,companyId);
		}else{
			fiVoucherTempTypeList = new ArrayList<FiVoucherTempType>();
		}
		if(fiVoucherTempTypeList==null || fiVoucherTempTypeList.size()<=0){
			List<FiAccountSetData> fasds = fiAccountSetDataService.getFiAccountSetsDataByAccountId(accountSetId, sysId);
			if (fasds != null && fasds.size() > 0) {
				List<Long> ids = new ArrayList<Long>();
				List<FiAccountSetData> companys = new ArrayList<FiAccountSetData>();
				for (FiAccountSetData f : fasds) {
					if (!ids.contains(f.getCompanyId())) {
						ids.add(f.getCompanyId());
						companys.add(f);
					}
				}
				if(companys!=null && companys.size()>0)
					fiVoucherTempTypeList = fiVoucherTempTypeService.fiVoucherTempTypeList(accountSetId,sysId,companys.get(0).getCompanyId());
			}
		}
		
		JsonTreeTableTemplete jttt = new JsonTreeTableTemplete("id", "parentId", FiVoucherTempType.class,
				FiVoucherTempTypeExtender.class);
		JSONArray jsonTree = CommonUtil.transTree(fiVoucherTempTypeList, jttt);
		renderJson(jsonTree.toString());
	}
	
	/**
	 * 存储凭证模板类型
	 */
	public void saveOrUpdateTempType() {
			
		Map<String, Object> result = new HashMap<String, Object>();
		if (fiVoucherTempType.getId() != null) {
			fiVoucherTempType.setEditDate(new Date());
			fiVoucherTempType.setEditUserId(LoginInfoUtils.getLoginInfoUserDtoId(request));
		} else {
			fiVoucherTempType.setCreateDate(new Date());
			fiVoucherTempType.setStatus(1);
			fiVoucherTempType.setCreateUserId(LoginInfoUtils.getLoginInfoUserDtoId(request));
		}

		try {
			fiVoucherTempTypeService.saveOrUpdate(fiVoucherTempType);
			result.put("success", true);
			result.put("msg", "保存成功");
			String json = JsonUtils.toJSONString(result);	
			render(json, "text/html;charset=UTF-8");
		} catch (Exception e) {
			result.put("success", false);
			result.put("msg", e.getMessage());
			String json = JsonUtils.toJSONString(result);	
			render(json, "text/html;charset=UTF-8");
		}
	}
	
	
	
	/**
	 * 根据模板类型ID 获取 对应的业务对象类型
	 */
	public void getBtypeByTempTypeId() {
		
		Map<String, Object> result = new HashMap<String, Object>();
		Long typeId = getParameterLong("typeid");	
		FiVoucherTemplate temp = fiVoucherTemplateService.getFiVoucherTemplateByTypeId(typeId);
		String objectId = temp.getBizObjectId();
		//FiBusinessobject fbo = fiBizObjectService.getFiBusinessobjectByRegisClass(objectId);
		String btype = objectId;//fbo.getBtype();
	
		try {
			result.put("success", true);
			result.put("btype", btype);
			result.put("typeId", typeId);
		} catch (Exception e) {
			result.put("success", false);
			result.put("msg", e.getMessage());
		}
		
		renderJson(result);
	}

	/**
	 * 存储凭证模板类型
	 */
	public void saveOrUpdate() {
	
		String fenLuJson = request.getParameter("fenLuJson");
		String delRowsJson = request.getParameter("delRowsJson");
		List<FiVoucherEntry> toFivoucherEntryList = null;
		List<FiVoucherEntry> delEntryList = null;
		FiVoucherEntry fiVoucherEntry = null;
		if(StringUtils.isNotBlank(fenLuJson) && !fenLuJson.equals("null")){
//			toFivoucherEntryList = JsonUtils.parseArray(fenLuJson, FiVoucherEntry.class);
			fiVoucherEntry = JsonUtils.parseObject(fenLuJson, FiVoucherEntry.class);
		}
		if(StringUtils.isNotBlank(delRowsJson)){
			delEntryList = JsonUtils.parseArray(delRowsJson, FiVoucherEntry.class);
		}
		
		Map<String, Object> result = new HashMap<String, Object>();
		if (fiVoucherTemplate.getId() != null) {
			fiVoucherTemplate.setEditDate(new Date());
			fiVoucherTemplate.setEditUserId(LoginInfoUtils.getLoginInfoUserDtoId(request));
		} else {
			fiVoucherTemplate.setCreateDate(new Date());
			fiVoucherTemplate.setStatus(1);
			fiVoucherTemplate.setCreateUserId(LoginInfoUtils.getLoginInfoUserDtoId(request));
		}

		try {
//			fiVoucherTempTypeService.saveOrUpdateFiVoucherEntry(fiVoucherTemplate,toFivoucherEntryList,delEntryList);
			fiVoucherTempTypeService.saveOrUpdateFiVoucherEntry(fiVoucherTemplate,fiVoucherEntry,delEntryList);
			result.put("success", true);
			result.put("msg", "保存成功");
			result.put("templateid", fiVoucherTemplate.getId());
			String json = JsonUtils.toJSONString(result);	
			render(json, "text/html;charset=UTF-8");
		} catch (Exception e) {
			result.put("success", false);
			result.put("msg", e.getMessage());
			String json = JsonUtils.toJSONString(result);	
			render(json, "text/html;charset=UTF-8");
		}
	}

	/**
	 * 删除凭证模板类型
	 */
	public void delete() {
		Map<String, Object> result = new HashMap<String, Object>();
		try {
			fiVoucherTempTypeService.delete(fiVoucherTempType);
			result.put("success", true);
			renderHtml(JsonUtils.toJSONString(result));
		} catch (Exception e) {
			result.put("success", false);
			result.put("msg", e.getMessage());
			renderHtml(JsonUtils.toJSONString(result));
		}
	}
	
	/*
	 * 凭证模板导出
	 * chc add 2016.7.4
	 */
	public void exportPr(){
		try {
			String accountSetCode = request.getParameter("accountSetCode");
			String sysId = request.getParameter("sysId");
			String accountSetId = request.getParameter("accountSetId");
			Long companyId = getParameterLong("companyId");
			List<IExcelHandler> iexcelHandlerList = new ArrayList<IExcelHandler>();
			iexcelHandlerList.add(fiVoucherTempTypeService);
			iexcelHandlerList.add(fiVoucherTemplateService);
			iexcelHandlerList.add(fiVoucherEntryService);
			HSSFWorkbook wb = ExcelHandlerUtil.onexport(iexcelHandlerList,accountSetCode,Long.parseLong(sysId),Long.parseLong(accountSetId),companyId);
			onExport(wb,"凭证模板.xls");
		} catch (Exception e) {
			e.printStackTrace();
			Logger.getLogger(this.getClass()).error(e.getMessage());
		}
	}
	
	public void onExport(HSSFWorkbook wb,String fileName) throws UnsupportedEncodingException{
		response.setContentType("application/vnd.ms-excel");
		String downloadFileName=new String(fileName.getBytes("gb2312"), "iso8859-1");
		
		response.setHeader("Content-disposition","attachment;filename="+downloadFileName);
		OutputStream ouputStream = null;
		try {
			ouputStream = response.getOutputStream();
			wb.write(ouputStream);
			ouputStream.flush();
			ouputStream.close();
		} catch (IOException e) {
			Logger.getLogger(this.getClass()).error(e.getMessage());
			Logger.getLogger(this.getClass()).error("业务异常",e);
		}finally{
			if (ouputStream != null)
				try {
					ouputStream.close();
				} catch (IOException e) {
					Logger.getLogger(this.getClass()).error(e.getMessage());
					Logger.getLogger(this.getClass()).error("业务异常",e);
				}
            
		}
	}
	
	/**
	 * 凭证模板导入
	 * chc add 2016.7.5
	 */
	public void  importPr(){
		try {
			String accountSetCode = request.getParameter("accountSetCode");//账套好
			String sysId = request.getParameter("sysId");//系统
			String companyCode = request.getParameter("companyCode");//公司编码
			String accountSetId = request.getParameter("accountSetId");
			Long companyId = getParameterLong("companyId");
			List<IExcelHandler> iexcelHandlerList = new ArrayList<IExcelHandler>();
			iexcelHandlerList.add(fiVoucherTempTypeService);
			iexcelHandlerList.add(fiVoucherTemplateService);
			iexcelHandlerList.add(fiVoucherEntryService);
			FileInputStream fileInputStream = new FileInputStream(uploadfile);
			ExcelHandlerUtil.importPr(fileInputStream,accountSetCode,sysId,companyCode,accountSetId,iexcelHandlerList,companyId);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public FiVoucherTempType getFiVoucherTempType() {
		return fiVoucherTempType;
	}

	public void setFiVoucherTempType(FiVoucherTempType fiVoucherTempType) {
		this.fiVoucherTempType = fiVoucherTempType;
	}

	public FiVoucherTemplate getFiVoucherTemplate() {
		return fiVoucherTemplate;
	}

	public void setFiVoucherTemplate(FiVoucherTemplate fiVoucherTemplate) {
		this.fiVoucherTemplate = fiVoucherTemplate;
	}

	public File  getUploadfile() {
		return uploadfile;
	}

	public void setUploadfile(File uploadfile) {
		this.uploadfile = uploadfile;
	}
}
