package com.xinleju.erp.finance.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.finance.dao.FiCoCapDao;
import com.xinleju.erp.finance.dto.FiCoCapDTO;
import com.xinleju.erp.finance.models.FiAccountCaption;
import com.xinleju.erp.finance.models.FiCoCap;
import com.xinleju.erp.finance.models.FiCoCapInput;
import com.xinleju.erp.finance.utils.ExcelHandlerUtil;
import com.xinleju.erp.finance.utils.IExcelHandler;

@Service
public class FiCoCapService extends BaseService implements IExcelHandler{
	
	@Autowired
	private FiCoCapDao fiCoCapDao;
	@Autowired
	private JdbcTemplate jt;
	@Autowired
	private FiAccountCaptionService fiAccountCaptionService;
	/**
	 * 根据预算编码获取一条记录
	 * @param code
	 * @param status
	 * @return
	 */
	public FiCoCap getFiCoCapByCode(String code,String status,Long companyId,Long accountSetId){
		String hql="from FiCoCap where code='"+code+"' and status='"+status+"' ";
		if(companyId != null){
			hql += "and companyId="+companyId;
		}
		if(accountSetId!=null){
			hql += "and accountSetId="+accountSetId;
		}
		FiCoCap fbc = getDao().findFirstByHQL(FiCoCap.class, hql);
		return fbc;
	}
	
	/**
	 * 根据财务编码获取一条记录
	 * @param code
	 * @param status
	 * @return
	 */
	public FiCoCap getFiCoCapByAccCode(String accountCode,String status,Long sysId,Long accountSetId){
		String hql="from FiCoCap where accountCapCode='"+accountCode+"' and status='"+status+"' and sysId="+sysId +" and accountSetId="+accountSetId;
		FiCoCap fbc = getDao().findFirstByHQL(FiCoCap.class, hql);
		return fbc;
	}
	
	/**
	 * 根据ID获取FiCoCap
	 * @param code
	 * @return
	 */
	public FiCoCap getFiCoCapById(Long id){
		return getDao().getById(FiCoCap.class, id);
	}
	
	/**
	 * 根据账套id获得预算科目
	 * 
	 * @param accountSetId
	 * @param status
	 * @return
	 */
	public List<FiCoCap> getFiCoCapList(Long accountSetId, String status,Long sysId,Long companyId) {
		return fiCoCapDao.getFiCoCapList(accountSetId, status,sysId, companyId);
	}

	/**
	 * 根据账套id获得预算科目的dto
	 * 
	 * @param accountSetId
	 * @param status
	 * @return
	 */
	public List<FiCoCapDTO> getFiCoCapDTOList(Long accountSetId, String status,Long sysId,Long companyId) {
		List<FiCoCapDTO> list = fiCoCapDao.getFiCoCapDTOList(accountSetId, status,sysId, companyId);
		return list;
	}

	/**
	 * 根据财务编码、科目编码、账套id，公司id，所属系统获得款项类型
	 * 
	 * @param accountCapCode
	 * @param bankCode
	 * @param accountSetId
	 * @param companyId
	 * @param sysId
	 * @return
	 */
	public List<FiCoCap> getFiCoCapInputListByCapAndCoCode(String accountCapCode,String bankCode,Long accountSetId,Long companyId,Long sysId){
		return fiCoCapDao.getFiCoCapInputListByCapAndCoCode(accountCapCode, bankCode, accountSetId, companyId, sysId);
	}
	
	public void saveOrUpdate(FiCoCap fiCoCap) {
		getDao().saveOrUpdate(fiCoCap);
	}

	/**
	 * 删除预算科目
	 * 
	 * @param fiAccountCaption
	 */
	public void delete(FiCoCap fiCoCap) {
		getDao().delete(fiCoCap);
	}

	/**
	 * excel页签名
	 * @return
	 */
	@Override
	public String getSheetName() {
		// TODO Auto-generated method stub
		return "预算科目";
	}
	/**
	 * 导出的excel字段名称
	 * @return
	 */
	@Override
	public String[] getHeadItemsNameAry() {
		// TODO Auto-generated method stub
		//id,code,name,account_cap_code,account_cap_name,account_cap_id,cash_flow_code,cash_flow_name,parentid,sys_id，bid
		String[] str = {"id","成本科目编码","成本科目名称","财务科目编码","财务科目名称","财务科目id","所属系统","在业务系统id","账套id"};
		return str;
	}

	/**
	 * 导出的excel字段属性名，class中必须存在此属性
	 * @return
	 */
	@Override
	public String[] getHeadItemsCodeAry() {
		// TODO Auto-generated method stub
		String[] str = {"id","code","name","accountCapCode","accountCapName","accountCapId","sysId","bid","accountSetId"};
		return str;
	}

	/**
	 * 导出的excel字段在表格中占的宽度，与code一一对应，默认100，如不想显示比如ID字段，可设置为0。
	 * @return
	 */
	@Override
	public Integer[] getHeadItemsLength() {
		// TODO Auto-generated method stub
		Integer[] lengths = { 100, 100, 100, 100, 100,100, 100, 100, 100};
		return lengths;
	}

	/**
	 * 导出字段在excel中是否红色显示 <br/> true:是（字段值不导出），false：否，null：红色、且字段值导出
	 * @return
	 */
	@Override
	public Boolean[] getHeadItemsColor() {
		// TODO Auto-generated method stub
		Boolean[] bool = { false, false, false, false, false,false, false, false, false};
		return bool;
	}

	/**
	 * 导出的excel实体类名
	 * @return
	 */
	@Override
	public Class<?> getEntityClass() {
		// TODO Auto-generated method stub
		return FiCoCap.class;
	}

	/**
	 * 导出到excel的具体数据
	 * @return
	 */
	@Override
	public List<?> getEntityList(IExcelHandler handler,String accountSetCode,long sysId,Long accountSetId,Long companyId) {
		// TODO Auto-generated method stub
		try{
			FiCoCapService fiCoCapService = (FiCoCapService)handler;
			List<FiCoCap> fiCoCapDTOs = null;
			if (StringUtils.isNotBlank(accountSetCode))
				//System.out.println();
				fiCoCapDTOs = fiCoCapService.getFiCoCapList(accountSetId, "1",sysId, companyId);
			
			return fiCoCapDTOs;
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 表格最上方的提示列表，为String集合，多条提示逐行显示
	 * @return
	 */
	@Override
	public List<String> getTipsList() {
		// TODO Auto-generated method stub
		List<String> tips = new ArrayList<String>();
		tips.add("说明：数据导出模板对格式有严格要求，请直接录入相关值，禁止增加或删除列，禁止删除此行及标题行，否则将导入失败！");
		return tips;
	}

	@Override
	public Map<String, Integer[]> getCellJoinMap() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?> getImpClass() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String[] getImportColumns() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String[] getImportHeadItemsName() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?>[] getImportColumnsType() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Boolean[] getColsIsImp() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int importPr(String accountSetCode,String sysId,String companyCode,String accountSetId,HSSFSheet sheet,Long companyId){
		int rowNum = sheet.getLastRowNum();// 行  
    	try{
    		String oldAccountSetId = "";
			for(int k=2;k<=rowNum;k++){
	    		HSSFRow hssfRow = sheet.getRow(k);
	    		if (hssfRow == null) {
					continue;
				}
	    		oldAccountSetId = hssfRow.getCell(8)+"";
	    		//"id","code","name","accountCapCode","accountCapName","accountCapId","sysId","bid",AccountSetId
	    		List<FiCoCap> list = getFiCoCapInputListByCapAndCoCode(ExcelHandlerUtil.getValue(hssfRow.getCell(3))+"",ExcelHandlerUtil.getValue(hssfRow.getCell(1))+"",Long.valueOf(accountSetId),companyId,Long.valueOf(sysId));
	    		if(list != null && list.size()>0){
	    			continue;
	    		}
	    		FiAccountCaption fc = new FiAccountCaption();
	    		if(!oldAccountSetId.equals(accountSetId)){
	    			fc = fiAccountCaptionService.getFiAccountCaptionByCode(ExcelHandlerUtil.getValue(hssfRow.getCell(3))+"",Long.valueOf(accountSetId));
	    		}else{
	    			fc.setId(Long.valueOf(ExcelHandlerUtil.getValue(hssfRow.getCell(5))+""));
	    		}
	    		String sql = "insert into fi_co_cap(code,name,account_cap_code,account_cap_name,account_cap_id,create_date,status,bid,account_set_code,account_set_id,sys_id,company_Id) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)";
	    		getDao().executeSQL(sql, ExcelHandlerUtil.getValue(hssfRow.getCell(1))+"",ExcelHandlerUtil.getValue(hssfRow.getCell(2))+"",
	    				ExcelHandlerUtil.getValue(hssfRow.getCell(3))+"",ExcelHandlerUtil.getValue(hssfRow.getCell(4))+"",
	    				fc.getId(),new Date(),1,
	    				ExcelHandlerUtil.getValue(hssfRow.getCell(7))+"",accountSetCode,accountSetId,sysId,companyId);
	    	}
			return 2;
    	}catch(Exception e){
    		e.printStackTrace();
    		return 3;
    	}
	}
	
	/**
	 * 修改预算科目父id
	 * chc add 2016.6.29
	 */
	public void setParent(String oldAccountSetId,String accountSetId,String oldSysId,String sysId){
		String hql="from FiCoCap where accountSetId='"+oldAccountSetId+"' and sysId = "+oldSysId;
		String hql2="from FiCoCap where accountSetId='"+accountSetId+"' and sysId = "+sysId;
		List<FiCoCap> list = getDao().findByHQL(FiCoCap.class, hql);
		List<FiCoCap> list2 = getDao().findByHQL(FiCoCap.class, hql2);
		for(FiCoCap fc:list){
			Long pid = fc.getParentId();
			String code = fc.getAccountCapCode();
			for(FiCoCap fc2:list2){
				String code2 = fc2.getAccountCapCode();
				if(StringUtils.isNotBlank(code) && code.equals(code2)){
					if(pid != null){
						FiCoCap c = this.getFiCoCapById(pid);
						if(c != null){
							String pcode = c.getAccountCapCode();
							String hql_="from FiCoCap where accountSetId='"+accountSetId+"' and accountCapCode ='"+pcode+"' and sysId="+sysId + " order by createDate desc";
							FiCoCap fbc = getDao().findFirstByHQL(FiCoCap.class, hql_);
							if(fbc != null){
								Long pid_ = fbc.getId();
								fc2.setParentId(pid_);
								getDao().update(fc2);
							}
						}
					}
				}
			}
		}
	}
}
