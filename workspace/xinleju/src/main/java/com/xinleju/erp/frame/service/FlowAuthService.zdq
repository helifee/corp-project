package com.xinleju.erp.frame.service;


import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.FetchMode;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.flow.models.Wi;
import com.xinleju.erp.flowengine.service.FlowInstanceFiService;
import com.xinleju.erp.frame.dao.FlowAuthDao;
import com.xinleju.erp.frame.models.FlowAuth;


@Service
@Transactional
public class FlowAuthService extends BaseService implements Serializable {
	private static final long serialVersionUID = 324589274837L;

	@Autowired
	private FlowAuthDao flowAuthDao;
	@Autowired
	private FlowInstanceFiService flowInstanceFiService;

	/**
	 * 更新状态
	 * @param roleId
	 * @param status
	 * @return
	 */
	public boolean changeStatus(Long roleId, Integer status){
		return flowAuthDao.changeStatus(roleId, status);
	}
	
	public List<String> getAgentUser(String loginName) {
		List<String> agentUserLst = new ArrayList<String>();
		Date currDate = Calendar.getInstance().getTime();
		
		
		
		return agentUserLst;
	}
	
	
	
	public void saveOrUpdate(FlowAuth flowAuth) throws Exception{
		//处理现有的任务
		saveFlowInstanceRelationTasks( flowAuth);
		getDao().saveOrUpdate(flowAuth);
	}
	
	
	
	public void saveFlowInstanceRelationTasks(FlowAuth flowAuth) throws Exception{
		//处理现有的任务
		String itemIds=flowAuth.getAuthItems();
		String authFlCodes=flowAuth.getAuthScope();
		Long proxyUserId=flowAuth.getAuth2UserId();
		Long authUserId=flowAuth.getAuthUserId();
		Map map=new HashMap();
		map.put("participant", authUserId);
		map.put("proxyParticipant", proxyUserId);
		map.put("postIds", itemIds);
		map.put("flowCodes", authFlCodes);
		map.put("startDate", flowAuth.getAuthBeginDate());
		map.put("endDate", flowAuth.getAuthEndDate());
		List<String> taskIds=flowAuthDao.getByFlowInstanceStepTaskList(map);
		if(taskIds!=null&& taskIds.size()>0){
			flowInstanceFiService.proxyFlowInstanceStepWorkTask(taskIds, proxyUserId);
		}


	}
	
	
	
	   /**
	    * 获取代理人
	    * @return
	   */
	   public List<String> getFlowAuthList(String fiId,Long proxyUserId,Long proxPostId){
		   List<String> userIds=flowAuthDao.getFlowAuthList( fiId, proxyUserId, proxPostId);
	       return userIds;
	   }
	
	

	public boolean checkIsFlowAuth(Long wiId, Long userId, Long loginUserId) {
		Wi wi = getDao().getById(Wi.class, wiId);
		
		boolean rtn = false;
		List<FlowAuth> lst = new ArrayList<FlowAuth>();
    	Calendar cal = Calendar.getInstance();
    	SimpleDateFormat format = new SimpleDateFormat("YYYY-MM-dd HH:mm:ss");
	    String currDate = format.format(cal.getTime());
	    

	    DetachedCriteria dc = DetachedCriteria.forClass(FlowAuth.class);
	    dc.add( Restrictions.eq("auth2UserId", loginUserId) );
	    dc.add( Restrictions.eq("authUserId", userId) );
	    dc.add(Restrictions.sqlRestriction(" (auth_begin_date is null and auth_end_date > '" + currDate + "') or (auth_begin_date < '" + currDate + "' and auth_end_date > '" + currDate + "') "));
	    lst = getDao().findByCriteria(dc);
		
	    for (FlowAuth auth : lst) {
	    	if ( auth.getAuthScope().indexOf(wi.getFl().getFlowCode()) >= 0 ) {
	    		rtn = true;
	    		break;
	    	}
	    }
	    
		return rtn;
	}
	
}
