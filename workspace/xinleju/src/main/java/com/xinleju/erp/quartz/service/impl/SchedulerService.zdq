package com.xinleju.erp.quartz.service.impl;

import static org.quartz.CronScheduleBuilder.cronSchedule;
import static org.quartz.SimpleScheduleBuilder.simpleSchedule;
import static org.quartz.TriggerBuilder.newTrigger;

import java.util.Date;
import java.util.Map;
import java.util.UUID;

import org.quartz.CronTrigger;
import org.quartz.JobDetail;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.Trigger;
import org.quartz.TriggerBuilder;
import org.quartz.TriggerKey;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.support.ApplicationObjectSupport;
import org.springframework.stereotype.Service;

import com.xinleju.erp.quartz.service.ISchedulerService;

@Service("schedulerService")
public class SchedulerService extends ApplicationObjectSupport implements ISchedulerService {
	@Autowired
	@Qualifier("quartzScheduler")
	private Scheduler scheduler;

	@Override
	public void schedule(String jobDetail,String cronExpression,Map<String,Object> triggerMap) {
		schedule(jobDetail,null, cronExpression,triggerMap);
	}


	@Override
	public void schedule(String jobDetail,String name, String cronExpression,Map<String,Object> triggerMap) {
		try {
			Trigger cronTrigger = buildCronTrigger(jobDetail, name, cronExpression, triggerMap);
			if(scheduler.checkExists(getJobDetail(jobDetail).getKey())){
				scheduler.scheduleJob(cronTrigger);
			}else{
				scheduler.scheduleJob(getJobDetail(jobDetail),cronTrigger);
			}
			
		} catch (SchedulerException e) {
			throw new RuntimeException(e);
		}
	}

	@Override
	public void schedule(String jobDetail,Date startTime,Map<String,Object> triggerMap) {
		schedule(jobDetail,startTime, null,triggerMap);
	}

	@Override
	public void schedule(String jobDetail,String name, Date startTime,Map<String,Object> triggerMap) {
		schedule(jobDetail,name, startTime, null,triggerMap);
	}

	@Override
	public void schedule(String jobDetail,Date startTime, Date endTime,Map<String,Object> triggerMap) {
		schedule(jobDetail,startTime, endTime, 0,triggerMap);
	}

	@Override
	public void schedule(String jobDetail,String name, Date startTime, Date endTime,Map<String,Object> triggerMap) {
		schedule(jobDetail,name, startTime, endTime, 0,triggerMap);
	}

	@Override
	public void schedule(String jobDetail,Date startTime, Date endTime, int repeatCount,Map<String,Object> triggerMap) {
		schedule(jobDetail,null, startTime, endTime, 0,triggerMap);
	}

	@Override
	public void schedule(String jobDetail,String name, Date startTime, Date endTime, int repeatCount,Map<String,Object> triggerMap) {
		schedule(jobDetail,name, startTime, endTime, 1, 1,triggerMap);
	}

	@Override
	public void schedule(String jobDetail,Date startTime, Date endTime, int repeatCount, int repeatInterval,Map<String,Object> triggerMap) {
		schedule(jobDetail,null, startTime, endTime, repeatCount, repeatInterval,triggerMap);
	}

	@Override
	public void schedule(String jobDetail,String name, Date startTime, Date endTime, int repeatCount, int repeatInterval,Map<String,Object> triggerMap) {
		try {
			@SuppressWarnings("static-access")
			Trigger simpleTrigger = buildSimpleTrigger(jobDetail, name, startTime, endTime, repeatCount, repeatInterval, triggerMap);
			if(scheduler.checkExists(getJobDetail(jobDetail).getKey())){
				scheduler.scheduleJob(simpleTrigger);
			}else{
				scheduler.scheduleJob(getJobDetail(jobDetail),simpleTrigger);
			}
		} catch (SchedulerException e) {
			throw new RuntimeException(e);
		}
	}
	
	@Override
	public void pauseTrigger(String triggerName,String group){		
		try {
			scheduler.pauseTrigger(new TriggerKey(triggerName, group));//停止触发器
		} catch (SchedulerException e) {
			throw new RuntimeException(e);
		}
	}
	
	@Override
	public void resumeTrigger(String triggerName,String group){		
		try {
			scheduler.resumeTrigger(new TriggerKey(triggerName, group));//重启触发器
		} catch (SchedulerException e) {
			throw new RuntimeException(e);
		}
	}
	
	@Override
	public boolean removeTrigdger(String triggerName,String group){		
		try {
			scheduler.pauseTrigger(new TriggerKey(triggerName, group));//停止触发器
			return scheduler.unscheduleJob(new TriggerKey(triggerName, group));//移除触发器
		} catch (SchedulerException e) {
			throw new RuntimeException(e);
		}
	}
	
	
	public Trigger buildCronTrigger(String jobDetail, String name,
			String cronExpression, Map<String, Object> triggerMap) {
		if (name == null || name.trim().equals("")) {
			name = UUID.randomUUID().toString();
		}
		Trigger cronTrigger = newTrigger()
								  .startNow()
								  .forJob(getJobDetail(jobDetail))
								  .withIdentity(name, Scheduler.DEFAULT_GROUP)
								  .withSchedule(cronSchedule(cronExpression))
								  .build();
		cronTrigger.getJobDataMap().putAll(triggerMap);
		return cronTrigger;
			
	}
	
	
	
	
	public Trigger buildSimpleTrigger(String jobDetail, String name,Date startTime,Date endTime,Integer repeatCount, Integer repeatInterval, Map<String, Object> triggerMap) {
		if (name == null || name.trim().equals("")) {
			name = UUID.randomUUID().toString();
		}	
		 TriggerBuilder<Trigger> triggerBuilder = newTrigger().forJob(getJobDetail(jobDetail));
		 if(startTime != null) {
			 triggerBuilder.startAt(startTime);
		 }
		 if(endTime != null) {
			 triggerBuilder.endAt(endTime);
		 }
		 triggerBuilder.withIdentity(new TriggerKey(name, Scheduler.DEFAULT_GROUP));
		 if(repeatCount != null && repeatInterval != null) {
			 triggerBuilder.withSchedule(simpleSchedule().repeatSecondlyForTotalCount(repeatCount, repeatInterval));
		 }
		 Trigger simpleTrigger = triggerBuilder.build();
		 simpleTrigger.getJobDataMap().putAll(triggerMap);
		return simpleTrigger;
	}


	/**
	 * 获得真实的jobDetail
	 * @param jobDetail
	 * @return
	 */
	private JobDetail getJobDetail(String jobDetail){
		return (JobDetail)getApplicationContext().getBean(jobDetail);
	}

}
