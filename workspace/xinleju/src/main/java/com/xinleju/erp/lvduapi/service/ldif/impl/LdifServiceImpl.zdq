/**   
 *
 * @version V1.0   
 */
package com.xinleju.erp.lvduapi.service.ldif.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldif.LDIFException;
import com.unboundid.ldif.LDIFReader;
import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.flow.service.api.extend.BaseAPIService;
import com.xinleju.erp.flow.service.api.extend.UserSerivce;
import com.xinleju.erp.flow.service.api.extend.dto.UserDTO;
import com.xinleju.erp.lvduapi.model.UserSyncDTO;
import com.xinleju.erp.lvduapi.service.UserSyncService;
import com.xinleju.erp.lvduapi.service.ldif.LdifService;

/**
 * @author liugang
 * 
 */
@Service
public class LdifServiceImpl implements LdifService {
	public static final Logger logger = LoggerFactory
			.getLogger(LdifServiceImpl.class);

	@Resource(name="userServiceProvider")
	private UserSerivce userService;
	
	@Autowired
	private UserSyncService userSyncService;
	
	@Resource(name="baseAPIService")
	private BaseAPIService baseAPIService;

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.xinleju.erp.sa.service.ldif.ILdifService#parseLdif(java.io.File)
	 */
	@SuppressWarnings("static-access")
	@Override
	public void parseLdif(File ldif) {
		FileInputStream inputStream;
		try {
			inputStream = new FileInputStream(ldif);
			LDIFReader ldifReader = new LDIFReader(inputStream, "GB2312");
			List<Entry> entries = ldifReader.readEntries(inputStream);
			if (entries != null && !entries.isEmpty()) {
				UserSyncDTO userSyncDTO = null;
				SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
				SimpleDateFormat sdf2 = new SimpleDateFormat(
						"yyyy-MM-dd");
				Date date = new Date();
			//	String date = sdf.format(now);
				boolean flag = false;
				for (Entry entry : entries) {
					// 检查是否是人员entry
					if (entry.hasObjectClass("Yutong-Person")) {
						flag = true;
						logger.debug("Find Yutong-Person in ldif file......");
						String loginName = entry
								.getAttributeValue("yutong-loginname");
						String realName = entry.getAttributeValue("cn");
						String mobile = entry.getAttributeValue("mobile");
						String email = entry.getAttributeValue("mail");
						Integer status = entry
								.getAttributeValueAsInteger("yutong-accountactive");
						// erp 系统和宇通oa 的status 状态值的含义相反
						if (status == 0) {
							status = 1;
						} else if (status == 1) {
							status = 0;
						}

						// 新增用户
						if (entry.hasAttributeValue("changetype", "add")) {
							logger.debug("Adding person");
							// 保存用户信息
							UserDTO user = new UserDTO();
							user.setLoginName(loginName);
							user.setRealName(realName);
							user.setMobile(mobile);
							user.setEmail(email);
							user.setStatus(status);
							userService.saveOrUpdateUser(user);

							userSyncDTO = getUserSyncDTO(loginName, realName,
									mobile, email, date, status, "添加");
							// 更新用户
						} else if (entry.hasAttributeValue("changetype",
								"modify")) {
							logger.debug("Modify person");
							FlowResult<UserDTO> flowResult = userService
									.getUserByUserLoginName(loginName);
							UserDTO user = flowResult.getResult();
							if (StringUtils.isNotBlank(realName)) {
								user.setRealName(realName);
							}
							if (StringUtils.isNotBlank(mobile)) {
								user.setMobile(mobile);
							}
							if (StringUtils.isNotBlank(email)) {
								user.setEmail(email);
							}
							if (status != null) {
								user.setStatus(status);
							}
							userService.saveOrUpdateUser(user);
							userSyncDTO = getUserSyncDTO(loginName, realName,
									mobile, email, date, status, "修改");
							// 逻辑 删除用户
						} else if (entry.hasAttributeValue("changetype",
								"delete")) {
							logger.debug("Delete person");
							FlowResult<UserDTO> flowResult = userService
									.getUserByUserLoginName(loginName);
							UserDTO user = flowResult.getResult();
							user.setStatus(1);
							userService.saveOrUpdateUser(user);
							userSyncDTO = getUserSyncDTO(loginName, realName,
									mobile, email, date, status, "删除");
						}
						userSyncService.save(userSyncDTO);
					}
				}
				// 如果存在人员更新数据，发送一条通知
				if (flag) {
					String url = "/UserSync/user_sync!getListBydate.do?date="+sdf.format(date);
					baseAPIService.sendMsg("SM", UUID.randomUUID().toString(),
							"宇通OA系统人员同步任务完成", url, sdf2.format(date), "DB", "0",
							"admin", null);
				}
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (LDIFException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	// 生成用户同步信息
	private UserSyncDTO getUserSyncDTO(String loginName, String realName,
			String mobile, String email, Date date, Integer status,
			String actionType) {
		UserSyncDTO userSyncDTO = new UserSyncDTO();
		userSyncDTO.setLoginName(loginName);
		userSyncDTO.setRealName(realName);
		userSyncDTO.setMobile(mobile);
		userSyncDTO.setEmail(email);
		userSyncDTO.setStatus(status);
		userSyncDTO.setDate(date);
		userSyncDTO.setActionType(actionType);
		return userSyncDTO;
	}
}
