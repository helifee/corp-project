package com.xinleju.erp.flowengine.service;

import java.util.List;

import com.xinleju.erp.flowengine.models.FlowInstanceStep;
import com.xinleju.erp.flowengine.models.FlowInstanceStepWork;
import com.xinleju.erp.flowengine.models.FlowInstanceStepWorkTask;

public interface FlowInstanceStepWorkService {
	

	
	/**
	 * 完成工作---》开启下个工作，如果没有工作，返回true,如果有工作返回false
	 * @param flowInstanceStep
	 * @param flowInstanceStepWork
	 * @return
	 */
	public boolean tryComplementFlowInstanceStepWork(FlowInstanceStep flowInstanceStep ,FlowInstanceStepWork flowInstanceStepWork,FlowInstanceStepWorkTask flowInstanceStepWorkTask) throws Exception;
	
	
	
	
	/**
	 * 
	 * 开启step的下符合条件工作，如果开启后false，如果开启结束返回true
	 * @param nextFlowInstanceStep
	 * @return
	 */
	public boolean tryStartFlowInstanceStepWork(FlowInstanceStep FlowInstanceStep) throws Exception;
	
	
	/**
	 * 作废工作
	 * @param fiTask
	 * @return
	 * @throws Exception
	 */
	public boolean tryOverFlowInstanceStepWork(FlowInstanceStepWork flowInstanceStepWork) throws Exception;
	
	
	
	/**
	 * 打回工作
	 * @param flowInstanceStep
	 * @param flowInstanceStepWork
	 * @return
	 */
	public boolean tryBackFlowInstanceStepWork(FlowInstanceStep flowInstanceStep ,FlowInstanceStepWork flowInstanceStepWork,FlowInstanceStepWorkTask flowInstanceStepWorkTask) throws Exception;
	
	
	
	/**
	 * 流程转办
	 * @param flowInstanceStepWork
	 * @param flowInstanceStepWorkTask
	 * @param userId
	 * @return
	 * @throws Exception
	 */
	public  boolean tryZBtoflowInstanceStepWorkTask(FlowInstanceStep fiStep,FlowInstanceStepWork flowInstanceStepWork,FlowInstanceStepWorkTask flowInstanceStepWorkTask,String userId) throws Exception;
	
	/**
	 * 流程协办
	 * @param flowInstanceStepWork
	 * @param flowInstanceStepWorkTask
	 * @param userId
	 * @return
	 * @throws Exception
	 */
	public  boolean tryXBtoflowInstanceStepWorkTask(FlowInstanceStep fiStep,FlowInstanceStepWork flowInstanceStepWork,FlowInstanceStepWorkTask flowInstanceStepWorkTask,List<String> lstUserId) throws Exception;
	
	
	
	/**
	 * 流程回复
	 * @param fiTask
	 * @return
	 * @throws Exception
	 */
	public boolean tryHFtoflowInstanceStepWorkTask(FlowInstanceStepWorkTask fiTask) throws Exception;
	
	
	/**
	 * 流程回复
	 * @param fiTask
	 * @return
	 * @throws Exception
	 */
	public boolean tryReplaceFlowInstanceStepWorkTask(FlowInstanceStepWorkTask flowInstanceStepWorkTask , String userId,
			String repalceUserId) throws Exception;
	

	
	
	/**
	 * 沟通
	 * @param fiTask
	 * @return
	 * @throws Exception
	 */
	
	public boolean saveToGT(FlowInstanceStep fiStep,FlowInstanceStepWork flowInstanceStepWork,FlowInstanceStepWorkTask fiTask,  String userId) throws Exception ;
	
	
	
	/**
	 * 
	 * 收回协办
	 * @param fiTask
	 * @return
	 * @throws Exception
	 */
	public boolean saveRecycleCoHost(FlowInstanceStepWorkTask fiTask)
			throws Exception;
	
	
	/**
	 * 
	 * 尝试测试完成本环节，流向下一环节的人人员
	 * @param flowInstanceStep
	 * @param flowInstanceStepWork
	 * @param flowInstanceStepWorkTask
	 * @return
	 * @throws Exception
	 */
	public List<String> tryTestComplementFlowInstanceStepWork(FlowInstanceStep flowInstanceStep ,FlowInstanceStepWork flowInstanceStepWork,FlowInstanceStepWorkTask flowInstanceStepWorkTask) throws Exception;
	
	
	/**
	 * 
	 * 通过work环节，结束task任务
	 * @param flowInstanceStep
	 * @param status
	 * @return
	 * @throws Exception
	 */
	public boolean tryStopTaskComplementFlowInstanceStep(FlowInstanceStep flowInstanceStep) throws Exception;
	
	
	
	/**
	 * 
	 * 通过work环节，作废任务
	 * @param flowInstanceStep
	 * @param status
	 * @return
	 * @throws Exception
	 */
	public boolean tryOverTaskComplementFlowInstanceStep(FlowInstanceStep flowInstanceStep) throws Exception;
	
	
}
