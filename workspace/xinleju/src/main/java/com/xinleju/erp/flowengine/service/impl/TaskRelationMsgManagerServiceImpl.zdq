package com.xinleju.erp.flowengine.service.impl;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.erp.base.app.config.App;
import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.flow.service.api.ApiConstant;
import com.xinleju.erp.flow.service.api.extend.BaseAPI;
import com.xinleju.erp.flow.service.api.extend.dto.UserDTO;
import com.xinleju.erp.flowengine.models.FlowInstance;
import com.xinleju.erp.flowengine.models.FlowInstanceStepWorkTask;
import com.xinleju.erp.flowengine.models.FlowInstanceStepWorkTaskExtend;
import com.xinleju.erp.flowengine.service.TaskRelationMsgManagerService;
import com.xinleju.erp.flowengine.utils.TaskMsgConstent;
import com.xinleju.erp.flowengine.utils.TaskTypeStatus;
import com.xinleju.erp.flowengine.utils.TaskTypeStatus.TaskType;
import com.xinleju.erp.frame.models.Msg;
import com.xinleju.erp.frame.models.Setting;
import com.xinleju.erp.frame.service.SettingService;
import com.xinleju.erp.frame.utils.StaticInterface;
import com.xinleju.erp.thirdpart.oa.xinyuan.impl.OaMsgServiceImpl;

@Service
public class TaskRelationMsgManagerServiceImpl extends BaseService implements TaskRelationMsgManagerService{
	

    @Autowired
    private OaMsgServiceImpl oaMsgServiceImpl;
    @Autowired
    private OaMsgServiceImpl oaMsg12ServiceImpl;
	   /**
     * 平台的app Code
     */
    public static final String APP_CODE_PT = "PT";
	
   /**
    * 流程消息类型1代办，0通知
    * 得到待办的通知类型
    * @author jun
    * @param wi wi
    * @return 通知类型
    */
   private Integer fixToTaskMsgType(FlowInstanceStepWorkTask flowInstanceStepWorkTask){
       int msgType = Msg.MSG_TYPE_DB;
       if (StringUtils.isNotBlank(flowInstanceStepWorkTask.getType()) && ((TaskTypeStatus.TaskType.CS.getCode().equals(flowInstanceStepWorkTask.getType())) 
       		|| TaskTypeStatus.TaskType.CY.getCode().equals(flowInstanceStepWorkTask.getType()) || TaskTypeStatus.TaskType.CB.getCode().equals(flowInstanceStepWorkTask.getType()))){
           msgType = Msg.MSG_TYPE_TZ;
       }
       return msgType;
   }
   
   private Integer fixToTaskMsgType(FlowInstanceStepWorkTaskExtend flowInstanceStepWorkTaskExtend){
       int msgType = Msg.MSG_TYPE_DB;
       if (StringUtils.isNotBlank(flowInstanceStepWorkTaskExtend.getType()) && ((TaskTypeStatus.TaskType.CS.getCode().equals(flowInstanceStepWorkTaskExtend.getType()))|| TaskTypeStatus.TaskType.TX.getCode().equals(flowInstanceStepWorkTaskExtend.getType()) || TaskTypeStatus.TaskType.SPLDYQGZ.getCode().equals(flowInstanceStepWorkTaskExtend.getType()) || TaskTypeStatus.TaskType.SPYQGZ.getCode().equals(flowInstanceStepWorkTaskExtend.getType())
       		|| TaskTypeStatus.TaskType.CY.getCode().equals(flowInstanceStepWorkTaskExtend.getType()) || TaskTypeStatus.TaskType.CB.getCode().equals(flowInstanceStepWorkTaskExtend.getType()))){
           msgType = Msg.MSG_TYPE_TZ;
       }
       return msgType;
   }
	
   /**
    *流程任务标题
    * @param flowInstanceStepWorkTask
    * @param flowInstance
    * @param tjUserOpRole
    * @return
    */
   private  String fixToTaskMsgTitle(String type,String opCtrl,FlowInstance flowInstance, String tjUserOpRole,String dealUserName){
       //信息标题
    	String msgTitle = "";
       //审批人
       String tjUserName = "";
       //流程名称
       String flowName = "";
       //意见
       String notes = "";
       if (null != type){
           tjUserName =flowInstance.getStartUserName();
           if (null != flowInstance){
               flowName = flowInstance.getFiName();
           }
            if (StringUtils.isNotBlank(type)){
            	//提醒
               if (TaskTypeStatus.TaskType.TX.getCode().equals(type)){
                     msgTitle = TaskMsgConstent.getTXTitle(tjUserName, flowName, notes,flowInstance.getStatus());
               } else 
               //催办
               if (TaskTypeStatus.TaskType.CB.getCode().equals(type)){
                   msgTitle = TaskMsgConstent.getCuiBanTitle(tjUserName, flowName, notes);
               //传阅
               } else if (TaskTypeStatus.TaskType.CY.getCode().equals(type)){
                   msgTitle = TaskMsgConstent.getChuanYueTitle(tjUserName, flowName);
               //审批人预警
               }  else if (TaskTypeStatus.TaskType.SPYQGZ.getCode().equals(type)){
                   msgTitle = TaskMsgConstent.getSpWarn(dealUserName,tjUserName, flowName);
               //审批人领导预警
               } else if (TaskTypeStatus.TaskType.SPLDYQGZ.getCode().equals(type)){
                   msgTitle = TaskMsgConstent.getSpLeaderWarn(dealUserName, tjUserName, flowName);
               //抄送
               }else if (TaskTypeStatus.TaskType.CS.getCode().equals(type)){
                   msgTitle = TaskMsgConstent.getChaoSongTitle(tjUserName, flowName);
               //审批
               } else if (TaskTypeStatus.TaskType.ZC.getCode().equals(type) || TaskTypeStatus.TaskType.LG.getCode().equals(type)){
                   msgTitle = TaskMsgConstent.getDaiBanTitle(tjUserOpRole, tjUserName, flowName);
               	/**
                   //协办或沟通
                   if (StringUtils.isNotBlank(wi.getAssignType())){
                       //沟通
                       if (OpType.GTFQR.equals(wi.getAssignType())){
                           msgTitle = WiMsgConstent.getGouTongTitle(null != wi.getAssignUserName() ? wi.getAssignUserName() : "", flowName);
                       //协办
                       } else if (OpType.XB.equals(wi.getAssignType())){
                           msgTitle = WiMsgConstent.getXieBanTitle(null != wi.getAssignUserName() ? wi.getAssignUserName() : "", flowName);
                       } else {
                           msgTitle = WiMsgConstent.getDaiBanTitle(tjUserOpRole, tjUserName, flowName);
                       }
                   //正常审批
                   } else {
                       msgTitle = WiMsgConstent.getDaiBanTitle(tjUserOpRole, tjUserName, flowName);
                   }
                   **/
               }
           }
       }
       return msgTitle;
   }
   /**
    * 发送消息接口
    * 
    * @param moduleCode
    *            模块编码
    * @param msgId
    *            消息ID,模块内自行维护，且模块内唯一
    * @param title
    *            消息标题
    * @param url
    *            访问链接 (相对地址)
    * @param typedDate
    *            消息操作时间，对应为 待办发送时间，已办发送时间，阅读时间，格式为 yyyy-MM-dd HH:mm:ss
    * @param opType
    *            消息类别，取值为: DB(待办) WD(待阅) YB(已办) YD(已读) RM(删除)，一个需要人工处理的消息，发DB消息；只读不需处理的消息，发 DY消息            
    * @param msgType
    *            消息类型,取值为 通知、待办
    *            0:待办 1:通知需要人工处理
    * @param loginName
    *            登录名，发送目标用户
    * @param extParm
    *            预留字段
    * @return
    */
	private  Msg sendMsg(String moduleCode, String msgId,
			String title, String url, String typedDate, String opType,
			String msgType, String loginName, Map<String, Object> extParm) {
            Msg msg = null;
            
            /**
             *  消息类型 0: 待办,需要人工处理的工作，譬如流程发出的待 1: 通知,仅查看，譬如预警消息
             *  DB(1待办) YB(2已办) YD(3已读) WD(4未读) RM(5删除)
             *  
             *  消息类型-消息操作类型
             *  待办-待办、通知(消息类型)-待阅
             */
            if(Msg.OP_TYPE_LC.equals(opType)){
            	 List<Msg> list = getDao().findByHQL(Msg.class, "from Msg where moduleCode = ? and msgId = ? and opType = ? order by typedDate desc"
                         , moduleCode, msgId, Msg.OP_TYPE_LC);
            	 if(list!=null && list.size()>0){
            		 
            	 }else{
            		 msg = new Msg();
                     msg.setModuleCode(moduleCode);
                     msg.setMsgId(msgId);
                     msg.setTitle(title);
                     msg.setUrl(url);
                     msg.setAppCode(APP_CODE_PT);
                     msg.setTypedDate(new Date());
                     msg.setOpType(opType);
                     msg.setMsgType(Integer.parseInt(msgType));
                     msg.setLoginName(loginName);
                     msg.setExData((extParm!=null&&extParm.get("fi_id")!=null)?extParm.get("fi_id").toString():null);
                     getDao().save(msg);
                     getDao().flush();
                     /**
                     SettingService settingService = (SettingService)App.getBean(SettingService.class);
                     Setting setting = settingService.getSetting(StaticInterface.SKEY_PT_OA_INTERFACE_URL);
                     //不需要推送OA
                     if(setting!=null && !"".equals(setting.getValue())){
                    	 oaMsgServiceImpl.sendOaMsg(msg.getId());
                     }
                     
                     **/
                    
            	 }
            }else if (Msg.OP_TYPE_DB.equals(opType) || Msg.OP_TYPE_WD.equals(opType) ) {
                msg = new Msg();
                msg.setModuleCode(moduleCode);
                msg.setMsgId(msgId);
                msg.setTitle(title);
                msg.setUrl(url);
                msg.setAppCode(APP_CODE_PT);
                msg.setTypedDate(new Date());
                msg.setOpType(opType);
                msg.setMsgType(Integer.parseInt(msgType));
                msg.setLoginName(loginName);
                msg.setExData((extParm!=null&&extParm.get("fi_id")!=null)?extParm.get("fi_id").toString():null);
                getDao().save(msg); 
                getDao().flush();
                //不需要推送OA
                SettingService settingService = (SettingService)App.getBean(SettingService.class);
                Setting setting = settingService.getSetting(StaticInterface.PT_OA_TYPE);
                if(setting!=null && !"".equals(setting.getValue())){
                	//推送OA异常了，不需要回滚
                	try {
                		if(StaticInterface.OAEKP12.equals(setting.getValue())){
                			oaMsg12ServiceImpl.sendOaMsgTask(msg);
                		 }if(StaticInterface.OAEKP10.equals(setting.getValue())){
                			   oaMsgServiceImpl.sendOaMsgTask(msg);
                		}
					} catch (Exception e) {
						// TODO: handle exception
						e.printStackTrace();
					}
               	 
                }
            } else {
                List<Msg> list = null;
                if (Msg.OP_TYPE_YB.equals(opType)) {
                    list = getDao().findByHQL(Msg.class, "from Msg where moduleCode = ? and msgId = ? and opType = ? order by typedDate desc"
                        , moduleCode, msgId, Msg.OP_TYPE_DB);
                }
                
                if (Msg.OP_TYPE_YD.equals(opType)) {
                    list = getDao().findByHQL(Msg.class, "from Msg where moduleCode = ? and msgId = ? and opType = ? order by typedDate desc"
                        , moduleCode, msgId, Msg.OP_TYPE_WD);
                }
                
                
                
                if (Msg.OP_TYPE_RM.equals(opType)) {
                    list = getDao().findByHQL(Msg.class, "from Msg where moduleCode = ? and msgId = ? and (opType = ? or opType = ?) order by typedDate desc"
                            , moduleCode, msgId, Msg.OP_TYPE_DB, Msg.OP_TYPE_WD);
                }
                if (list != null && !list.isEmpty()) {
                    msg = list.get(0);
                    msg.setOpType(opType);
                    msg.setDealDate(new Date());
                    msg.setExData((extParm!=null&&extParm.get("fi_id")!=null)?extParm.get("fi_id").toString():null);
                    getDao().update(msg);
                    getDao().flush();
                    //不需要推送OA
                    SettingService settingService = (SettingService)App.getBean(SettingService.class);
                    Setting setting = settingService.getSetting(StaticInterface.PT_OA_TYPE);
                    if(setting!=null && !"".equals(setting.getValue())){
                    	//推送OA异常了，不需要回滚
                    	try {
                    		if(StaticInterface.OAEKP12.equals(setting.getValue())){
                    			oaMsg12ServiceImpl.sendOaMsgTask(msg);
                    		 }if(StaticInterface.OAEKP10.equals(setting.getValue())){
                    			   oaMsgServiceImpl.sendOaMsgTask(msg);
                    		}
    					} catch (Exception e) {
    						// TODO: handle exception
    						e.printStackTrace();
    					}
                    }
                }
            }
      
           return msg;
	            
	        
	}

	@Override
	public void sendFlowInstanceStepWorkTask(
			FlowInstanceStepWorkTask flowInstanceStepWorkTask) throws Exception {
		// TODO Auto-generated method stub
		  FlowInstance flowInstance=getDao().getById(FlowInstance.class, flowInstanceStepWorkTask.getFiId(), null);
		  BaseAPI baseAPIService = (BaseAPI)App.getBean(BaseAPI.class,ApiConstant.BEAN_CODE);
		  String defaultLink =  "FlowInstanceApprove!approve.do?tId=" + flowInstanceStepWorkTask.getGuid() + "&t=" + (new Date()).getTime();
		  String msgId="task_"+flowInstanceStepWorkTask.getGuid();
	       String bakUrl = defaultLink;
	       Integer msgType=fixToTaskMsgType(flowInstanceStepWorkTask);
	       String opType= fixOpType( flowInstanceStepWorkTask);
	       if(Msg.OP_TYPE_LC.equals(opType)){
	    	   //如果是已经发起过 ，被打回的流程只需要在我发起中出现过一次，太多了无法辨认
	    	   String backIds=flowInstance.getBackFiIds();
	    	   StringBuilder sb=new StringBuilder();
	    	   if(backIds!=null &&!"".equals(backIds)){
	    		   String[] ids=backIds.split(",");
	    		   for(String id:ids){
	    			   sb.append("'"+id+"',");
	    		   }
	    		   sb.deleteCharAt(sb.toString().length()-1);
	    		   List<Msg> list = getDao().findByHQL(Msg.class, "from Msg where moduleCode = ? and exData in ("+ sb.toString()+") and opType = ? order by typedDate desc"
	                       , flowInstance.getAppCode(), Msg.OP_TYPE_LC);
	    		   
	    		   if(list!=null && list.size()>0){
	    			   for(Msg g :list){
	    				   g.setOpType(Msg.OP_TYPE_RM);
	    			   }
	    		   }
	    	   } 
	       }
	       String url = StringUtils.isBlank(bakUrl) ? defaultLink : bakUrl;
	       DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
	       String typedDate = format.format(flowInstanceStepWorkTask.getCreateTime());
	       Map<String, Object> extParm=new HashMap<String, Object>();
	       extParm.put("fi_id", flowInstanceStepWorkTask.getFiId());
	       String loginName = "";
	       String loginUserName = flowInstanceStepWorkTask.getParticipantUserName();
	       String title=fixToTaskMsgTitle(flowInstanceStepWorkTask.getType(),flowInstanceStepWorkTask.getOperCtrl(), flowInstance,  flowInstance.getStartUserName(),loginUserName);
	       String userId =flowInstanceStepWorkTask.getParticipant();
	       if (StringUtils.isNotBlank(userId)){
	           UserDTO userDto = baseAPIService.getUserById(Long.valueOf(userId)).getResult();
	           if (null != userDto){
	               loginName = userDto.getLoginName();
	           }
	           sendMsg(flowInstance.getAppCode(), msgId, title, url, typedDate, opType, msgType.toString(), loginName, extParm);
	       }
	  
			
	}
	@Override
	public void sendFlowInstanceStepWorkTaskExtend(
			FlowInstanceStepWorkTaskExtend flowInstanceStepWorkTaskExtend)
			throws Exception {
		// TODO Auto-generated method stub
//		   System.out.println("=====================");
		   FlowInstance flowInstance=getDao().getById(FlowInstance.class, flowInstanceStepWorkTaskExtend.getRelationFiId(), null);
		   String defaultLink =  "FlowInstanceApprove!readFi.do?teId=" + flowInstanceStepWorkTaskExtend.getGuid() + "&t=" + (new Date()).getTime();
		   String msgId="teId_"+flowInstanceStepWorkTaskExtend.getGuid();
	       String bakUrl = defaultLink;
	       Integer msgType=fixToTaskMsgType(flowInstanceStepWorkTaskExtend);
	       String opType= fixOpType( flowInstanceStepWorkTaskExtend);
	       String url = StringUtils.isBlank(bakUrl) ? defaultLink : bakUrl;
	       DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
	       String typedDate = format.format(flowInstanceStepWorkTaskExtend.getCreateTime());
	       Map<String, Object> extParm=new HashMap<String, Object>();
	       extParm.put("fi_id", flowInstanceStepWorkTaskExtend.getRelationFiId());
	       String loginName = flowInstanceStepWorkTaskExtend.getReadUserLoginName();
	       String loginUserName = flowInstanceStepWorkTaskExtend.getReadUserName();
	   
	       String title=fixToTaskMsgTitle(flowInstanceStepWorkTaskExtend.getType(),null, flowInstance,  flowInstance.getStartUserName(),loginUserName);
	       sendMsg(flowInstance.getAppCode(), msgId, title, url, typedDate, opType, msgType.toString(), loginName, extParm);
	}

	private String fixOpType(FlowInstanceStepWorkTask flowInstanceStepWorkTask){
        String opType = "";
        if(flowInstanceStepWorkTask.getFirstTask()){
        	    opType = Msg.OP_TYPE_LC;
        }else{
	        if (TaskType.ZC.getCode().equals(flowInstanceStepWorkTask.getType())&&(TaskTypeStatus.STATUS_RUNNING==flowInstanceStepWorkTask.getStatus())){
	            opType = Msg.OP_TYPE_DB;
	        } else if((TaskType.GT.getCode().equals(flowInstanceStepWorkTask.getType()) || TaskType.HF.getCode().equals(flowInstanceStepWorkTask.getType()) || TaskType.XB.getCode().equals(flowInstanceStepWorkTask.getType()) || TaskType.ZC.getCode().equals(flowInstanceStepWorkTask.getType())|| TaskType.ZB.getCode().equals(flowInstanceStepWorkTask.getType()))&&(TaskTypeStatus.STATUS_COMPLETE==flowInstanceStepWorkTask.getStatus())){
	            opType = Msg.OP_TYPE_YB;
	            //任务过期
	        } else if(TaskType.ZF.getCode().equals(flowInstanceStepWorkTask.getType())&&(TaskTypeStatus.STATUS_OVERDUE==flowInstanceStepWorkTask.getStatus())){
	            opType = Msg.OP_TYPE_RM;
	        }
        }
        return opType;
    }
	
	private String fixOpType(FlowInstanceStepWorkTaskExtend flowInstanceStepWorkTaskExtend){
        String opType = "";
        if (TaskTypeStatus.STATUS_UNREAD==flowInstanceStepWorkTaskExtend.getStatus()){
            opType = Msg.OP_TYPE_WD;
        } else if(TaskTypeStatus.STATUS_READ==flowInstanceStepWorkTaskExtend.getStatus()){
            opType = Msg.OP_TYPE_YD;
            //任务过期
        } 
        return opType;
    }
   
}
