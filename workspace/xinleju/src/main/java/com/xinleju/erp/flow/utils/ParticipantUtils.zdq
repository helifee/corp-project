package com.xinleju.erp.flow.utils;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.apache.commons.lang3.StringUtils;

import com.xinleju.erp.flow.bean.IdName;
import com.xinleju.erp.flow.frameapi.domain.User;
import com.xinleju.erp.flow.models.Wp;

/**
 * 
 * 
 * <p>
 * </p>
 * <p>
 * </p>
 * 
 * @author 孙朝辉
 * @version $Id: ParticipantUtils.java 2178 2014-12-24 05:37:43Z sunchaohui $
 * @since
 * 
 */
public class ParticipantUtils {

    /**
     * 格式化字符串转List<User>
     * <p>
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param articipants
     *            参与人格式化字符串
     * @return 参与人集合
     */
    public static List<User> toUsers(String articipants) {

        List<IdName> users = IdNameUtils.decode(articipants);

        List<User> returnList = new LinkedList<User>();
        for (IdName i : users) {
            User user = new User();
            user.setUserId(i.getId());
            user.setUserName(i.getName());
            returnList.add(user);
        }
        return returnList;
    }

    /**
     * 
     * <p>
     * 参与人List转格式化字符串
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param resultUsers
     *            参与人集合
     * @return 参与人格式化字符串
     */
    public static String toParticipants(List<User> resultUsers) {
        String participants = IdNameUtils.encode(IdNameUtils.toIdNameList(resultUsers));
        return participants;
    }

    /**
     * <p>
     * 参与人List转格式化字符串
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param user
     *            参与人
     * @return 参与人格式化字符串
     */
    public static String toParticipants(User user) {
        List<User> us = new ArrayList<User>();
        us.add(user);
        return toParticipants(us);
    }

    /**
     * 
     * <p>
     * 获得 第i个之前的所有参与人
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param i
     *            循环序号, 从 i - 1个开始往前计算
     * @param wps
     *            所有WPS
     * @param allBefore
     *            是否包含所有前置Wp
     * @return 参与人列表
     */
    public static List<User> getBeforeUsers(int i, List<Wp> wps, boolean allBefore) {
        List<User> returnList = new LinkedList<User>();

        for (int x = i - 1; x >= 0; x--) {
            Wp wp = wps.get(x);
            String ps = getParticipantsOfStatic(wp);
            if (ps != null) {
                List<User> users = ParticipantUtils.toUsers(ps);
                if (users.size() > 0) {
                    returnList.addAll(users);
                }
            }
            if (!allBefore && returnList.size() > 0) {
                break;
            }
        }

        return returnList;
    }

    /**
     * 
     * <p>
     * 获得第1个之后所有的参与人
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param i
     *            循环序号, 从 i + 1个开始往后计算
     * @param wps
     *            所有WPS
     * @param allAfter
     *            是否包含所有后置Wp
     * @return 参与人列表
     */
    public static List<User> getAfterUsers(int i, List<Wp> wps, boolean allAfter) {

        List<User> returnList = new LinkedList<User>();

        for (int x = i + 1; x < wps.size(); x++) {
            Wp wp = wps.get(x);
            
            
            
            String ps = getParticipantsOfStatic(wp);
            if (ps != null) {
                List<User> users = ParticipantUtils.toUsers(ps);
                if (users.size() > 0) {
                    returnList.addAll(users);
                }
            }
            if (!allAfter && returnList.size() > 0) {
                break;
            }
        }

        return returnList;
    }

    /**
     * 
     * <p>
     * 获取流程静态参与人
     * </p>
     * <p>
     * 相对运行时参与人，运行时参与人可能会把重复的参与人去除掉
     * </p>
     * 
     * @author 孙朝辉
     * @param wp
     *            工作组
     * @return 格式化字符串
     */
    public static String getParticipantsOfStatic(Wp wp) {
        String pd = wp.getParticipantsDefine();
        String ps = wp.getParticipantsSelected();
        if (StringUtils.isNotEmpty(ps)) {
            return ps;
        }

        return pd;
    }

}
