package com.xinleju.erp.flow.action;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import javax.servlet.http.Cookie;

import org.apache.commons.lang3.StringUtils;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.flow.bean.LoginInfo;
import com.xinleju.erp.flow.service.TodoFiService;
import com.xinleju.erp.flow.service.api.extend.BaseAPIService;
import com.xinleju.erp.flow.service.api.extend.LogVist;
import com.xinleju.erp.flow.service.api.extend.dto.FuncDTO;
import com.xinleju.erp.flow.utils.FlowConstant;
import com.xinleju.erp.flow.utils.LoginInfoUtils;
import com.xinleju.erp.frame.dao.AppDao;
import com.xinleju.erp.frame.dao.ShortCutFuncDao;
import com.xinleju.erp.frame.models.App;
import com.xinleju.erp.frame.models.DeskTop;
import com.xinleju.erp.frame.models.Desk_Component;
import com.xinleju.erp.frame.models.DesktopComponent;
import com.xinleju.erp.frame.models.Msg;
import com.xinleju.erp.frame.models.ShortCutFunc;
import com.xinleju.erp.frame.service.MsgService;
import com.xinleju.erp.frame.service.extend.dto.MsgDto;
import com.xinleju.erp.frame.utils.FrameUrlFixUtil;
import com.xinleju.erp.report.dto.FlowModelStepDto;
import com.xinleju.erp.report.service.FlowModelStepService;

/**
 * 
 *  <title></title>
 * <p>
 * 首页Action
 * </p>
 * <p>
 * </p>
 * 
 * @author 孙朝辉
 * @version $Id: AppAction.java 2059 2014-12-06 11:17:37Z sunchaohui $
 * @since
 * 
 */
public class AppAction extends BaseAction {
    
    /**
	* <p>Title:AppAction.java </p>
	* <p>Description: long</p>
	* <p>Todo:TODO </p> 
	* @author liugang
	* @date 2016-4-8
	*/
	private static final long serialVersionUID = 1L;

	@Autowired
    private MsgService msgService;

    private MsgDto msgDto;
    
    @Autowired
    private ShortCutFuncDao shortCutFuncDao;
    
    @Autowired
    private AppDao appDao;
    
    @Autowired
    private TodoFiService todoFiService;
    @Autowired
    private FlowModelStepService flowModelStepService; 
    
    
    
    @Autowired
    private BaseAPIService baseAPIService;
    /**
     * 首页
     * @author jun
     * @return String App-index.jsp
     */
    @LogVist(moduleCode="HP",funcName="首页",actionName="首页",isStat=true)
    public String index() {
        response.setHeader("Cache-Control", "no-cache, no-store,  must-revalidate");
        response.setHeader("Pragma", "no-cache");
        response.setDateHeader("Expires", 0L);
        LoginInfo li = LoginInfoUtils.getLoginInfo(request);
        request.setAttribute("loginfo", li);
        request.setAttribute("funcMapJson", this.fixFuncMapJson(li));
        Cookie[] cookies = request.getCookies();
        if(cookies != null) {
        	for (Cookie cookie : cookies) {
				if("defaultModuleId".equals(cookie.getName())) {
					request.setAttribute("moduleId", cookie.getValue());
				}
				
				if("defaultFuncId".equals(cookie.getName())) {
					request.setAttribute("funcId", cookie.getValue());
				}
			}
        }
        //日志记录对象 
//        AdminLog logr=new AdminLog();
//		logr.setVisitDate(new Date());
//		logr.setVisitLoginName("系统管理员");
//		logr.setLoginName("admin");
//		logr.setFuncName("系统设置->用户登录");
//		logr.setActionName("");
//		logr.setModuleCode("HP");
//		logr.setCompany("");
//		logr.setLogInfo("系统管理员登录查询");
//		logr.setUrl("");
//		logr.setIpAddress(request.getRemoteAddr());
//		appDao.saveAdminLog(logr);
        return "index";
    }
    public String smIndex(){
    	return "smIndex";
    }
    
    public String adIndex(){
    	return "adLogin";
    }
    /**
     * 首页显示页面
     * @author jun
     * @return
     */
    public String hpIndex() {
        List<String> urlList = new ArrayList<String>();
        List<DesktopComponent> desktopComponent=new ArrayList<DesktopComponent>();
        List<DeskTop> deskTop=getCommonService().findByHQL(DeskTop.class, "from DeskTop d where d.status= 0 and d.type= 0");
        if(deskTop != null && deskTop.size() > 0){
	        List<Desk_Component> desk_Component=getCommonService().findByHQL(Desk_Component.class, "from Desk_Component dc where dc.deskTopId= ?", deskTop.get(0).getId());
	        for(int i=0;i<desk_Component.size();i++){
	            DesktopComponent dc =getCommonService().findFirstByHQL(DesktopComponent.class, "from DesktopComponent dc where dc.id= ?", desk_Component.get(i).getComponentId());
	            if (null != dc){
	                urlList.add(FrameUrlFixUtil.urlFix(dc.getModuleCode(), dc.getUrl(), appDao.getAllAppMap(), null));
	            } else {
	                urlList.add("");
	            }
	            desktopComponent.add(dc);
	        }
	        request.setAttribute("desktopComponent", desktopComponent);
            request.setAttribute("urlList", urlList);
            Integer  urlItemTotal=urlList.size()%2==0?urlList.size()/2:(urlList.size()/2+1);
            request.setAttribute("urlItemTotal", urlItemTotal);
        }
        return "hpIndex";
    }
    
    public String toDo() {
		response.setHeader("Cache-Control", "no-cache, no-store,  must-revalidate");
	    response.setHeader("Pragma", "no-cache");
	    response.setDateHeader("Expires", 0L);
	    request.setAttribute("dyCount", msgService.getDBMsgCount(Msg.OP_TYPE_WD, LoginInfoUtils.getLoginInfoUserLogName(request)));
	    request.setAttribute("oA",request.getParameter("oA"));
    	return "toDo";
    }
    
    public void queryUnReadMsgCount4Jsion() throws Exception {
    	JSONObject data = new JSONObject();
    	int db_count = msgService.getDBMsgCount(Msg.OP_TYPE_DB, LoginInfoUtils.getLoginInfoUserLogName(request));
    	int dy_count = msgService.getDBMsgCount(Msg.OP_TYPE_WD, LoginInfoUtils.getLoginInfoUserLogName(request));
    	data.put("unReadMsgCount", db_count + dy_count);
    	renderJson(data.toString());
    }
    
    public String shortCut(){
    	request.setAttribute("shortCutFunc", shortCutFuncDao.getMaxShortCuts(request.getUserPrincipal().getName()));
        request.setAttribute("appMap", appDao.getAppMap());
    	return "shortCut";
    }
    
    /**
     * 待办消息
     * @author jun
     * @return 页面
     */
    @SuppressWarnings("unchecked")
	public String desktop1() {
        request.setAttribute("dbCount", msgService.getDBMsgCount(Msg.OP_TYPE_DB, LoginInfoUtils.getLoginInfoUserLogName(request)));
        msgDto = new MsgDto();
        msgDto.setOpType(Msg.OP_TYPE_DB);
        msgDto.setLoginName(LoginInfoUtils.getLoginInfoUserLogName(request));
//        page = msgService.getMsgList(msgDto, start, 5);
        page = msgService.getDbMsgList(msgDto, start, 5);
        
        //加停留时间多少小时的标识
        if(page!=null&&page.getItems()!=null&&page.getItems().size()>0){
        	List<Msg> msgs=page.getItems();
        	for(Msg m:msgs){
        		String t=m.getTitle();
        		Long hour=0L;
				try {
					hour = getHourByCurrentTimeAndOneTime(m.getTypedDate());
				} catch (Exception e) {
					e.printStackTrace();
				}
        		m.setTitle("[停留"+hour+"小时]&nbsp;&nbsp;"+t);
        	}
        }
        //加停留时间结束
        
        Map<String,String> urlMap = new HashMap<String, String>();
        App appPt = appDao.getPtApp();
        Map<String, App> allAppMap = appDao.getAllAppMap();
        for (Object msgObj : page.getItems()){
            urlMap.put(((Msg)msgObj).getId() + "", FrameUrlFixUtil.urlFix(((Msg)msgObj).getAppCode(),((Msg)msgObj).getUrl(), allAppMap, appPt.getDepUrl()));
        }
        request.setAttribute("urlMap", urlMap);
        
        return "desktop1";
    }

    /**
     * 待阅消息
     * @author jun
     * @return 页面
     */
    @SuppressWarnings("unchecked")
	public String desktop2() {
        request.setAttribute("dyCount", msgService.getDBMsgCount(Msg.OP_TYPE_WD, LoginInfoUtils.getLoginInfoUserLogName(request)));
        msgDto = new MsgDto();
        msgDto.setOpType(Msg.OP_TYPE_WD);
        msgDto.setMsgType(Msg.MSG_TYPE_TZ);
        msgDto.setLoginName(LoginInfoUtils.getLoginInfoUserLogName(request));
        page = msgService.getMsgList(msgDto, start, 5);
        //加停留时间多少小时的标识
        if(page!=null&&page.getItems()!=null&&page.getItems().size()>0){
        	List<Msg> msgs=page.getItems();
        	for(Msg m:msgs){
        		String t=m.getTitle();
        		Long hour=0L;
				try {
					hour = getHourByCurrentTimeAndOneTime(m.getTypedDate());
				} catch (Exception e) {
					e.printStackTrace();
				}
        		m.setTitle("[停留"+hour+"小时]&nbsp;&nbsp;"+t);
        	}
        }
        //加停留时间结束
        
        Map<String,String> urlMap = new HashMap<String, String>();
        App appPt = appDao.getPtApp();
        Map<String, App> allAppMap = appDao.getAllAppMap();
        for (Object msgObj : page.getItems()){
            urlMap.put(((Msg)msgObj).getId() + "", FrameUrlFixUtil.urlFix(((Msg)msgObj).getAppCode(), ((Msg)msgObj).getUrl(), allAppMap, appPt.getDepUrl()));
        }
        request.setAttribute("urlMap", urlMap);
        return "desktop2";
    }

    /**
     * 已办
     * @author jun
     * @return 页面
     */
    public String desktop3() {
        msgDto = new MsgDto();
        msgDto.setOpType(Msg.OP_TYPE_YB);
        msgDto.setLoginName(LoginInfoUtils.getLoginInfoUserLogName(request));
        page = msgService.getMsgList(msgDto, start, 5);
        Map<String,String> urlMap = new HashMap<String, String>();
        App appPt = appDao.getPtApp();
        Map<String, App> allAppMap = appDao.getAllAppMap();
        for (Object msgObj : page.getItems()){
            urlMap.put(((Msg)msgObj).getId() + "", FrameUrlFixUtil.urlFix(((Msg)msgObj).getAppCode(), ((Msg)msgObj).getUrl(), allAppMap, appPt.getDepUrl()));
        }
        request.setAttribute("urlMap", urlMap);
        return "desktop3";
    }

    /**
     * 通知公告
     * @author jun
     * @return 页面
     */
    public String desktop4() {
    	  msgDto = new MsgDto();
          msgDto.setOpType(Msg.OP_TYPE_LC);
          msgDto.setLoginName(LoginInfoUtils.getLoginInfoUserLogName(request));
          page = msgService.getMsgList(msgDto, start, 5);
          Map<String,String> urlMap = new HashMap<String, String>();
          App appPt = appDao.getPtApp();
          Map<String, App> allAppMap = appDao.getAllAppMap();
          for (Object msgObj : page.getItems()){
              urlMap.put(((Msg)msgObj).getId() + "", FrameUrlFixUtil.urlFix(((Msg)msgObj).getAppCode(), ((Msg)msgObj).getUrl(), allAppMap, appPt.getDepUrl()));
          }
          request.setAttribute("urlMap", urlMap);
        return "desktop4";
    }
    /**
     * 菜单json
     * @author jun
     * @param li
     * @return
     */
    public String fixFuncMapJson(LoginInfo li){
        JSONArray allMap = new JSONArray();
        if (null != li && null != li.getUserDTO() && null != li.getFuncDTOListMap() && li.getFuncDTOListMap().size() > 0){
            Map<Long, ShortCutFunc> maxShortCutsMap = shortCutFuncDao.getMaxShortCutsMap(li.getUserDTO().getLoginName());
            //首页
            JSONObject ja = new JSONObject();
            String appUrl = "";
            for (Entry<com.xinleju.erp.frame.models.App, List<FuncDTO>>  entry : li.getFuncDTOListMap().entrySet()){
                ja = new JSONObject();
                try {
                	appUrl = (StringUtils.isNotBlank(entry.getKey().getDepUrl()) ? entry.getKey().getDepUrl().trim() : "") + "/";
                	System.out.println(entry.getKey().getCode()+"======"+entry.getKey().getDepUrl());
//                	if (entry.getKey().getCode().equals("HP") || entry.getKey().getCode().equals("PT")){
//                        appUrl =  ("http://192.168.10.147:90/xinleju") + "/";
//                	}
                	ja.put("moduleId", entry.getKey().getCode());
                    ja.put("moduleName", entry.getKey().getName());
                    ja.put("appUrl", appUrl);
                    ja.put("url", StringUtils.isNotBlank(entry.getKey().getIndexUrl()) ? entry.getKey().getIndexUrl().trim() : "");
//                    if (entry.getKey().getCode().equals("HP") || entry.getKey().getCode().equals("PT")){
//                        ja.put("url", appUrl + "/App!hpIndex.do");
//                    }
//                    ja.put("goNewPage", FlowConstant.APP_CODE_PT.endsWith(entry.getKey().getCode()) ? FlowConstant.STR_FALSE : FlowConstant.STR_TRUE);
                    if (null != entry.getValue() && entry.getValue().size() > 0){
                        JSONArray jam = new JSONArray();
                        JSONObject jom = null;
                        for (FuncDTO funcDTO : entry.getValue()){
                            jom = new JSONObject();
                            jom.put("menuName", funcDTO.getName());
                            jom.put("funcId", funcDTO.getName());
                            if (null != funcDTO.getChildren() && funcDTO.getChildren().size() > 0){
                                JSONArray jaf = new JSONArray();
                                JSONObject jof = null;
                                for (FuncDTO fd : funcDTO.getChildren()){
                                    jof = new JSONObject();
                                    jof.put("menuItemName", fd.getName());
                                    jof.put("funcId", fd.getId());
                                    //当以http开关的不加头地址
                                    if(fd.getUrl()!=null&&!"".equals(fd.getUrl())&&fd.getUrl().startsWith("http")){
                                    	jof.put("url",fd.getUrl());
                                    }else{
                                        jof.put("url", appUrl + fd.getUrl());
                                    }
                                    jof.put("isShortCut", shortCutFuncDao.isShortCut(fd.getId(), maxShortCutsMap));
                                    jaf.put(jof);
                                }
                                jom.put("menuItems", jaf);
                            }
                            jam.put(jom);
                        }
                        //防止当菜单过少时，出现各个系统菜单宽度不一致   -- Add by 李萍  2015.05.18
                        for(int start = jam.length();start < 5; start++)
                        {
                         	jom = new JSONObject();
                           	jom.put("menuName", "");
                            jom.put("funcId", "");
                            jam.put(jom);
                        }
                        ja.put("menu", jam);
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
                allMap.put(ja);
            }
        }
        return allMap.toString();
    }
    
    /**
     * 快捷收藏功能
     */
    public void  doShortCut(){
    	Map<String,Object> result = new HashMap<String,Object>();
    	try{
    		Long funcId = getParameterLong("funcId");
			Integer flag = getParameterInt("flag");
    		if(shortCutFuncDao.getShortCutCount(request.getUserPrincipal().getName()) >= ShortCutFunc.maxCount && flag == 1){
    			result.put("success", false);
    			result.put("msg", "快捷菜单最多只能添加"+ ShortCutFunc.maxCount +"个!");
    		}else{
    			shortCutFuncDao.doShortCut(funcId, flag,request.getUserPrincipal().getName());
    			result.put("success", true);
    		}
    	}catch(Exception e) {
    		result.put("success", false);
    		result.put("msg", "系统异常!");
    		e.printStackTrace();
    	}
    	renderJson(result);
    }
    
    public String  proxyPage(){
    	
    	return "proxyPage";
    }
    
    
    
    public String selectUsers() {
        return "selectUsers";
    }

    public MsgDto getMsgDto() {
        return msgDto;
    }

    public void setMsgDto(MsgDto msgDto) {
        this.msgDto = msgDto;
    }
    /**
     * 检查平台首页权限
     */
    public void checkPTIndexPagePower() {
    	LoginInfo li = (LoginInfo) request.getSession().getAttribute(FlowConstant.LOGININFO);
    	Map<App, List<FuncDTO>>  funcDTOListMap = li.getFuncDTOListMap();
    	Set<String> funcUrl = new HashSet<String>();
    	for(Map.Entry<App, List<FuncDTO>> entry : funcDTOListMap.entrySet()) {
    		if("PT".equals(entry.getKey().getCode())) {
    			List<FuncDTO> funcDtoList = entry.getValue();
    			for (FuncDTO funcDTO : funcDtoList) {
    				if (null != funcDTO.getChildren() && funcDTO.getChildren().size() > 0){
    					 for (FuncDTO fd : funcDTO.getChildren()){
    						 funcUrl.add(fd.getUrl());
						 }
    				}
				}
    			break;
    		}
    	}
    	Map<String, Object> result = new HashMap<String, Object>();
    	result.put("userPowerCheck", funcUrl.contains("User!index.do"));
    	result.put("ctPowerCheck", funcUrl.contains("Ct!index.do"));
    	result.put("todoFiPowerCheck", funcUrl.contains("TodoFi!allFiList.do"));
    	result.put("bizAuthPowerCheck", funcUrl.contains("BizAuth!index.do"));
    	renderJson(result);
    }
    
    //计算当前时间减去一时间的小时数
    public long getHourByCurrentTimeAndOneTime(Date oneTime)throws Exception{
//    	 SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");   
// 	    java.util.Date now = df.parse("2004-03-26 13:31:40");   
 	    //java.util.Date date=df.parse("2004-03-26 12:50:24");    
// 	    java.util.Date date=df.parse("2015-11-24 12:50:24");   
 	    //long l=now.getTime()-date.getTime();  
 	    long l=new Date().getTime()-oneTime.getTime();    
 	    long day=l/(24*60*60*1000);   
 	    long hour=(l/(60*60*1000)-day*24);   
// 	    long min=((l/(60*1000))-day*24*60-hour*60);   
// 	    long s=(l/1000-day*24*60*60-hour*60*60-min*60);   
 	    //System.out.println(""+day+"天"+hour+"小时"+min+"分"+s+"秒");  
 	   // System.out.println("停留"+(day*24+hour)+"小时");
 	    return day*24+hour;
    }
}
