package com.xinleju.erp.flowengine.action;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.alibaba.fastjson.JSON;
import com.xinleju.erp.base.app.config.App;
import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.flow.models.Fl;
import com.xinleju.erp.flow.service.IUserNoteService;
import com.xinleju.erp.flow.service.api.ApiConstant;
import com.xinleju.erp.flow.service.api.SmObjectService;
import com.xinleju.erp.flow.service.api.extend.BaseAPI;
import com.xinleju.erp.flow.service.api.extend.dto.OpDTO;
import com.xinleju.erp.flow.service.api.extend.dto.RoleDTO;
import com.xinleju.erp.flow.service.api.extend.dto.UserDTO;
import com.xinleju.erp.flow.utils.LoginInfoUtils;
import com.xinleju.erp.flowengine.dto.AcDto;
import com.xinleju.erp.flowengine.dto.BizAttachment;
import com.xinleju.erp.flowengine.dto.FlowInstanceDto;
import com.xinleju.erp.flowengine.dto.FlowInstanceStepDto;
import com.xinleju.erp.flowengine.dto.FlowInstanceStepTaskBackDto;
import com.xinleju.erp.flowengine.dto.FlowInstanceStepWorkTaskDto;
import com.xinleju.erp.flowengine.dto.FlowInstanceWrapperBean;
import com.xinleju.erp.flowengine.dto.JsonResult;
import com.xinleju.erp.flowengine.dto.OpRelationInsDto;
import com.xinleju.erp.flowengine.events.FlowInstanceEventService;
import com.xinleju.erp.flowengine.models.FlowInstance;
import com.xinleju.erp.flowengine.models.FlowInstanceStep;
import com.xinleju.erp.flowengine.models.FlowInstanceStepWorkTask;
import com.xinleju.erp.flowengine.models.FlowInstanceStepWorkTaskExtend;
import com.xinleju.erp.flowengine.models.FlowInstanceVariable;
import com.xinleju.erp.flowengine.models.FlowInstanceVariableMap;
import com.xinleju.erp.flowengine.service.BizAttachmentService;
import com.xinleju.erp.flowengine.service.FlowInstanceCalculateAcService;
import com.xinleju.erp.flowengine.service.FlowInstanceCalculateFiService;
import com.xinleju.erp.flowengine.service.FlowInstanceCalculateStepService;
import com.xinleju.erp.flowengine.service.FlowInstanceCalculateWorkService;
import com.xinleju.erp.flowengine.service.FlowInstanceFiService;
import com.xinleju.erp.flowengine.service.FlowInstanceOrgnApISerive;
import com.xinleju.erp.flowengine.service.FlowInstanceStepMobileService;
import com.xinleju.erp.flowengine.service.FlowInstanceStepService;
import com.xinleju.erp.flowengine.service.FlowInstanceStepWorkTaskExtendService;
import com.xinleju.erp.flowengine.service.OpRelationService;
import com.xinleju.erp.flowengine.utils.FlowInstanceConstant;
import com.xinleju.erp.flowengine.utils.FlowInstanceStatus;
import com.xinleju.erp.flowengine.utils.FlowInstanceVariableType;
import com.xinleju.erp.flowengine.utils.FreeMarkUtils;
import com.xinleju.erp.flowengine.utils.IDGenerator;
import com.xinleju.erp.flowengine.utils.ParticipantType;
import com.xinleju.erp.flowengine.utils.StepTypeStatus;
import com.xinleju.erp.flowengine.utils.TaskTypeStatus;
import com.xinleju.erp.frame.models.Company;
import com.xinleju.erp.frame.models.PartyType;
import com.xinleju.erp.frame.models.ServiceObjectDefine;
import com.xinleju.erp.frame.service.RoleService;

public class FlowInstanceApproveAction extends FlowInstanceBaseAction {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	private static final Logger logger = Logger
			.getLogger(FlowInstanceApproveAction.class);

	private boolean isStart;

	private boolean isReStart;

	private String tId;

	private String teId;

	private String fiId;

	private Long sodId;

	private String fiName;

	private String lastHistoryFiId;

	private String tokenId;

	private String bizId;

	private Long flId;

	private String flowCode;

	private Long startPostId;

	private List<RoleDTO> lstPost;

	private Fl fl;
	
	private String stepId;
	private String participantsId;

	private String bizUrl;

	private Long bizType;

	private FlowInstanceStepWorkTaskDto fiTask;

	private BizAttachment bizAttachment;

	private String backStepId;
	
	private String backTaskId;

	private boolean isReApprove;

	private List<FlowInstanceStepDto> lstFlowInstanceStep;
	
	private List<FlowInstanceStepTaskBackDto> lstFlowInstanceStepTaskBackDto;

	private List<OpRelationInsDto> lstRelationIns;

	private boolean xbhf_result = true;

	private String userIds;

	private String assignTaskId;
	
	@Autowired
	private FlowInstanceCalculateFiService flowInstanceCalculateFiService;
	@Autowired
	private FlowInstanceCalculateAcService flowInstanceCalculateAcService;
	@Autowired
	private FlowInstanceCalculateStepService flowInstanceCalculateStepService;
	@Autowired
	private FlowInstanceCalculateWorkService flowInstanceCalculateWorkService;
	@Autowired
	private FlowInstanceStepWorkTaskExtendService flowInstanceStepWorkTaskExtendService;
	@Autowired
	private FlowInstanceFiService flowInstanceFiService;
	@Autowired
	private FlowInstanceStepService flowInstanceStepService;
	@Autowired
	private OpRelationService opRelationService;
	@Autowired
	private BizAttachmentService bizAttachmentService;
	@Autowired
	private FlowInstanceStepMobileService flowInstanceStepMobileService;
	@Autowired
	private FlowInstanceEventService flowInstanceEventService;
    @Autowired
    private IUserNoteService iUserNoteService;
    @Autowired
    private FlowInstanceOrgnApISerive flowInstanceOrgnApISerive;
    @Autowired
	RoleService roleService;
    

	// 1.流程发起， 输入 bizId,flowCode,bizData :返回 当前用户的岗位,bizId,flowCode,流程分之判断参数
	public void validateStart() {

		if (StringUtils.isBlank(bizId)) {

			this.addFieldError("bizIdError", "业务ID不能为空");
			logger.error("业务ID不能为空");
		}

		
		if (StringUtils.isBlank(flowCode) && (null != sodId && sodId.intValue() != 0)){
    		flowCode = flowInstanceCalculateAcService.getDefaultFlowCodeBySodIdAndBizId(sodId);
    		if (StringUtils.isBlank(flowCode)){
    			this.addFieldError("flowCodeError", "流程编码不能为空");
    			logger.error("流程编码不能为空");
    		}
    	}
		
		if (StringUtils.isBlank(flowCode)) {
			this.addFieldError("flowCodeError", "流程编码不能为空");
			logger.error("流程编码不能为空");
		}

	
		
		fl = flowInstanceCalculateAcService.getNewVersionFl(flowCode);
		if (fl == null) {
			this.addFieldError("flowError", "流程编码为【" + flowCode + "】的流程模板不存在");
			logger.error("流程编码为【" + flowCode + "】的流程模板不存在");
			return;
		}

		ServiceObjectDefine serviceObjectDefine = fl.getServiceObjectDefine();
		if (serviceObjectDefine == null) {
			this.addFieldError("serviceObjectDefineError","流程模板ID为【" + fl.getId() + "】的业务对象不存在");
			logger.error("流程模板ID为【" + fl.getId() + "】的业务对象不存在");
		}
	}

	/**
	 * 
	 * 业务系统发起流程
	 * 
	 * @return
	 * @throws Exception
	 */
	public String start()  {
     try{
		// 流程ID
		flId = fl.getId();		
		
		// 获取业务表单URL
		bizUrl = fl.getServiceObjectDefine().getUrlSp();
		bizType = fl.getServiceObjectDefine().getId();

		// 获取运行中的流程实例  
		FlowInstance oldFlowInstance = flowInstanceCalculateFiService
				.getFlowInstanceByBizIdAndBizType(bizId, bizType, "sort desc",
						FlowInstanceStatus.STATUS_RUNNING,
						FlowInstanceStatus.STATUS_COMPLETE);

		if (oldFlowInstance != null) {
			fiId = oldFlowInstance.getGuid();
			fiName = oldFlowInstance.getFiName();
			return "detail";
		}

		// 获取当前用户岗位集合
		lstPost = getPostsByCurrentUser();
		// 生成tokenId
		tokenId = "fi_token_" + IDGenerator.getUUID();
		// 是否为发起操作
		isStart = FlowInstanceConstant.FLOW_INSTANCE_START_OP;
		// 获取最新打回的流程
		FlowInstance flowInstance = flowInstanceCalculateFiService.getFlowInstanceByBizIdAndBizType(bizId, bizType,
											"completeTime desc", FlowInstanceStatus.STATUS_BACK);
		// 获取最新打回的流程
		FlowInstance flowInstanceOver = flowInstanceCalculateFiService.getFlowInstanceByBizIdAndBizType(bizId, bizType,
											"completeTime desc", FlowInstanceStatus.STATUS_OVERDUE);
		if(flowInstanceOver!=null){
			String backIds=flowInstanceOver.getBackFiIds();
			if(backIds!=null && flowInstance !=null && backIds.contains(flowInstance.getGuid())){
				flowInstance=null;
			}
		}
		FlowInstanceWrapperBean flowInstanceWrapperBean = null;
		if (flowInstance != null) {
			// 获取最新历史流程对象
			flowInstanceWrapperBean = getFlowInstancesDto(null, flowInstance);
		}
		// 展现历史
		if (flowInstanceWrapperBean != null) {
			isReStart = FlowInstanceConstant.FLOW_INSTANCE_RE_START_OP;
		} else {
			flowInstanceWrapperBean = new FlowInstanceWrapperBean();
		}

		FlowInstanceVariableMap fivm = findFlowInstanceVariableMap();
		
		flowInstanceWrapperBean.setFlowInstanceVariableMap(fivm);
		// 设置流程名称
		UserDTO currUser = LoginInfoUtils.getLoginInfo(request).getUserDTO();
		fiName = "【" + fl.getServiceObjectDefine().getName() + "】" + flowInstanceCalculateFiService.fixFiName(fl,fivm.getValueMap(), currUser.getRealName());
		// 通过TJSP编码获取发起操作默认意见以及是否为必填
		request.setAttribute("opRelationIns", opRelationService.getOpRelationInsByCode("TJSP"));
		// 获取常见意见
		request.setAttribute("lstCommonOpinion", iUserNoteService.getUserNoteListByUserId(currUser.getId()));
		
		session.setAttribute(tokenId, flowInstanceWrapperBean);
     }catch(Exception e){
    	 e.printStackTrace();
     }
		return "approve";
	}
	
	
	/**
	 * 添加选择人
	 * @return
	 */
	public void addSelectWorkParticipant(){
		if(StringUtils.isNotBlank(tokenId)){
			FlowInstanceWrapperBean flowInstanceWrapperBean = (FlowInstanceWrapperBean) session
					.getAttribute(tokenId);
			FlowInstance flowInstance=flowInstanceWrapperBean.getFlowInstance();
			List<FlowInstanceStep> steps= flowInstance.getLstFlowInstanceStep();
			List<FlowInstanceStep> stepNews=new ArrayList<FlowInstanceStep>();
			for(FlowInstanceStep step:steps){
		
				if(step.getGuid().equals(stepId)){
					if(StringUtils.isNotBlank(participantsId)){
						String[] ids=participantsId.split(",");
						StringBuilder sb=new StringBuilder();
						for(String id:ids){
							sb.append(ParticipantType.USER_PREFIX+id+":"+";");
						}
						sb.deleteCharAt(sb.toString().length()-1);
						step.setSelectParticipants(sb.toString());
					}
				}
				stepNews.add(step);
			}
			flowInstance.setLstFlowInstanceStep(stepNews);
			flowInstanceWrapperBean.setFlowInstance(flowInstance);
            session.setAttribute(tokenId, flowInstanceWrapperBean);
         }
         renderJson(new JsonResult(true, StringUtils.EMPTY,"选择人员成功！"));
	}

	public String readFi() throws Exception {
		FlowInstanceStepWorkTaskExtend flowInstanceStepWorkTaskExtend = flowInstanceStepWorkTaskExtendService
				.getFlowInstanceStepWorkTaskExtendById(teId);
		fiId = flowInstanceStepWorkTaskExtend.getRelationFiId();
		if (TaskTypeStatus.STATUS_UNREAD == flowInstanceStepWorkTaskExtend
				.getStatus()) {
			flowInstanceStepWorkTaskExtend
					.setStatus(TaskTypeStatus.STATUS_READ);
			flowInstanceStepWorkTaskExtendService
					.updateFlowInstanceStepWorkTaskExtend(flowInstanceStepWorkTaskExtend);
			if (TaskTypeStatus.TaskType.CB.getCode().equals(
					flowInstanceStepWorkTaskExtend.getType())) {
				tId = flowInstanceStepWorkTaskExtend.getRelationTaskId();
				return approve();
			}
		}
		return detail();
	}

	@SuppressWarnings("unchecked")
	public String approve() {

		if (StringUtils.isBlank(tId)) {
			addActionError("任务ID为空！");
			return INPUT;
		}
		FlowInstanceStepWorkTask flowInstanceStepWorkTask = flowInstanceCalculateStepService.getTaskById(tId);

		if (flowInstanceStepWorkTask == null) {
			addActionError("任务ID=[" + tId + "]不存在记录!");
			return INPUT;
		}

		assignTaskId = flowInstanceStepWorkTask.getAssignTaskId();
		FlowInstanceStepWorkTask flowInstanceStepWorkTaskForAssign = flowInstanceCalculateStepService.getTaskByAssignTaskId(assignTaskId);
		if (flowInstanceStepWorkTaskForAssign != null) {
			request.setAttribute("assignerId",flowInstanceStepWorkTaskForAssign.getCompleteUserId());
			request.setAttribute("assignerName",flowInstanceStepWorkTaskForAssign.getCompleteUserName());			
		}
		
		fiId = flowInstanceStepWorkTask.getFiId();
		


		Map<String, Object> mapBizParam = flowInstanceCalculateFiService.getServiceObjectDefine(fiId);
		
		
		flId=Long.valueOf(mapBizParam.get("fl_id").toString());
	
		if(flId!=null && !"".equals(flId)){ 
			Fl fl = flowInstanceCalculateFiService.getFl(flId);
			//特殊需求
			ServiceObjectDefine serviceObjectDefine= fl.getServiceObjectDefine();
			if(serviceObjectDefine!=null){
				String code=serviceObjectDefine.getCode();
				if(StringUtils.isNotBlank(code) &&  "EX_MATTERASK".equals(code)){
					UserDTO currUser = LoginInfoUtils.getLoginInfo(request).getUserDTO();
					BaseAPI baseAPIService = com.xinleju.erp.base.app.config.App.getBean(BaseAPI.class, ApiConstant.BEAN_CODE);
					FlowResult<List<OpDTO>>  opListResult=baseAPIService.getOpAuth(currUser.getLoginName(), "PT", "1002");
					List<OpDTO> list=opListResult.getResult();
				    boolean flag=false;
					for(OpDTO opDTO:list){
						if("SP_COPY".equals(opDTO.getCode())){
							flag=true;
							break;
						}
					}
					if(flag){
						request.setAttribute("EX_MATTERASK", "EX_MATTERASK");
					}
				}
			}
			request.setAttribute("urlBizCopy", serviceObjectDefine.getUrlBizCopy());
			FlowInstanceStep flowInstanceStep = flowInstanceCalculateStepService.getFlowInstanceStepBystepId(flowInstanceStepWorkTask.getStepId());
		    if(flowInstanceStep.getIsStart()==1){
				request.setAttribute("isBackStart",true);
				request.setAttribute("urlBizEdit", serviceObjectDefine.getUrlBizEdit());
		    }else{
		    	request.setAttribute("isBackStart",false);
		    }
	   }

		bizUrl = (String) mapBizParam.get("url_sp");
		bizId = (String) mapBizParam.get("biz_id");
		fiName = (String) mapBizParam.get("fi_name");
		flowCode = (String) mapBizParam.get("flow_code");
		
		Map<String, Object> fiInfo =flowInstanceCalculateFiService.getFlowInstanceInfo(fiId);
		request.setAttribute("isAdmin", isAdmin());
		request.setAttribute("isStartUser", isStartUser(fiInfo.get("start_user_login_name").toString()));
		request.setAttribute("isRunningFi",fiInfo.get("status"));

		if (flowInstanceStepWorkTask.getStatus() != TaskTypeStatus.STATUS_RUNNING) {
			return "detail";
		}

		request.setAttribute("assignerUserName",flowInstanceStepWorkTask.getAssignerUserName());
		
	

		isStart = FlowInstanceConstant.FLOW_INSTANCE_APPROVE_OP;
		// 可以打回的环节
		lstFlowInstanceStepTaskBackDto = flowInstanceCalculateStepService.getFlowInstanceStepTaskBackDtoByFiId(fiId);
		// 获取操作编码数据
		Map<String, Object> map = opRelationService.getOpRelationInsByTaskId(flowInstanceStepWorkTask);
		lstRelationIns = (List<OpRelationInsDto>) map.get("opRelationInsDtos");
		
		//获取常见意见
		UserDTO userDto = LoginInfoUtils.getLoginInfo(request).getUserDTO();
		request.setAttribute("lstCommonOpinion", iUserNoteService.getUserNoteListByUserId(userDto.getId()));
		// 协办未回复
		xbhf_result = (boolean) map.get("result");
		return "approve";
	}
	
	
	//获取即将流向
	public void getTranstionUser(){
		try {
			FlowInstanceStepWorkTask flowInstanceStepWorkTask = flowInstanceCalculateStepService.getTaskById(tId);
			List<String> userIds=flowInstanceStepService.tryTestComplementFlowInstanceStepWork(flowInstanceStepWorkTask);
			StringBuffer sb=new StringBuffer();
			String result="";
			for(String userId:userIds){
				sb.append(userId+";");
			}
			if(sb.toString().endsWith(";")){
				result=sb.toString().substring(0,sb.toString().length()-1);
			}else{
				result=sb.toString();
			}
			renderJson("{\"success\":true,\"msg\":\""+result+"\" }");
		} catch (Exception e) {
			logger.error("即将流向获取失败",e);
			renderJson("{\"success\":false}");
		}
	}

	public String detail() {
		
		if (StringUtils.isBlank(flowCode) && (null != sodId && sodId.intValue() != 0)){
    		flowCode = flowInstanceCalculateAcService.getDefaultFlowCodeBySodIdAndBizId(sodId);
    		if (StringUtils.isBlank(flowCode)){
    			this.addFieldError("flowCodeError", "流程编码不能为空");
    			logger.error("流程编码不能为空");
    		}
    	}
		
		if (StringUtils.isNotBlank(flowCode) && StringUtils.isNotBlank(bizId)) {
			List<String> lstBizId = flowInstanceCalculateFiService.getNewestFlowBizId(bizId,flowCode);
			// 业务系统当前查看的审批流程为旧流程
			if (lstBizId == null || lstBizId.size() == 0) {
				redirect("Form!dealIndex.do", "flowCode", "bizId");
				return null;
			}
			// 业务系统当前查看的审批流程为新流程
			validateStart();
			// TODO 如果发生错误应该跳转到INPUT页面，暂时没有INPUT页面处理异常情况
			if (!this.hasFieldErrors()) {
				bizUrl = fl.getServiceObjectDefine().getUrlSp();
				FlowInstance flowInstance = flowInstanceCalculateFiService.getFlowInstanceByBizIdAndBizType(bizId, 
																fl.getServiceObjectDefine().getId(), "createTime desc",
																FlowInstanceStatus.STATUS_RUNNING,
																FlowInstanceStatus.STATUS_COMPLETE,
																FlowInstanceStatus.STATUS_BACK);

				if (flowInstance != null) {
					fiId = flowInstance.getGuid();
					fiName = flowInstance.getFiName();
				}
			}
		} else {
			Map<String, Object> mapBizParam = flowInstanceCalculateFiService
					.getServiceObjectDefine(fiId);
			bizUrl = (String) mapBizParam.get("url_sp");
			bizId = (String) mapBizParam.get("biz_id");
			fiName = (String) mapBizParam.get("fi_name");
			flowCode = (String) mapBizParam.get("flow_code");
		}
		Map<String, Object> fiInfo =flowInstanceCalculateFiService.getFlowInstanceInfo(fiId);
		
		flId=Long.valueOf(fiInfo.get("fl_id").toString());
	
		if(flId!=null && !"".equals(flId)){ 
		
			//特殊需求	//====香港之地
			
			Fl fl = flowInstanceCalculateFiService.getFl(flId);
			ServiceObjectDefine serviceObjectDefine= fl.getServiceObjectDefine();
			if(serviceObjectDefine!=null){
				String code=serviceObjectDefine.getCode();
				if(StringUtils.isNotBlank(code) &&  "EX_MATTERASK".equals(code)){
					UserDTO currUser = LoginInfoUtils.getLoginInfo(request).getUserDTO();
					BaseAPI baseAPIService = com.xinleju.erp.base.app.config.App.getBean(BaseAPI.class, ApiConstant.BEAN_CODE);
					FlowResult<List<OpDTO>>  opListResult=baseAPIService.getOpAuth(currUser.getLoginName(), "PT", "1002");
					List<OpDTO> list=opListResult.getResult();
				    boolean flag=false;
					for(OpDTO opDTO:list){
						if("SP_COPY".equals(opDTO.getCode())){
							flag=true;
							break;
						}
					}
					if(flag){
						request.setAttribute("EX_MATTERASK", "EX_MATTERASK");
					}
				}
			}

			request.setAttribute("urlBizCopy", serviceObjectDefine.getUrlBizCopy());
			
	   }
	
		request.setAttribute("flowCode", flowCode);
		request.setAttribute("isAdmin", isAdmin());
		request.setAttribute("isStartUser", isStartUser(fiInfo.get("start_user_login_name").toString()));
		request.setAttribute("isRunningFi",fiInfo.get("status"));
		
		return "detail";
	}

	public void history() {
		FlowInstanceWrapperBean flowInstanceWrapperBean = new FlowInstanceWrapperBean();
		// 重新发起操作后加载历史审批记录
		if (session.getAttribute(tokenId) != null) {
			flowInstanceWrapperBean = (FlowInstanceWrapperBean) session
					.getAttribute(tokenId);
		} else {// 提交后加载历史审批记录
			try{
			   flowInstanceWrapperBean = getFlowInstancesDto(fiId, null);
			}catch(Exception e){
				e.printStackTrace();
			}
		}

		if (flowInstanceWrapperBean == null) {
			return;
		}
		// 生成模板
		Map<String, Object> root = new HashMap<String, Object>();
		root.put("lstFlowInstance",
				flowInstanceWrapperBean.getLstHistoryFlowInstanceDto());
		root.put("flowInstance",
				flowInstanceWrapperBean.getCurrentFlowInstanceDto());

		String directory = request.getSession().getServletContext()
				.getRealPath("")
				+ File.separator
				+ "page"
				+ File.separator
				+ "FlowInstanceApprove";
		String htmlString = FreeMarkUtils.getTemplateParse(directory,
				"FlowInstanceApprove-approve.ftl", root);

		renderText(htmlString);
	}
	
	/**
	 * 流程历经修改
	 */
	public void historyUpdate() {
		FlowInstanceWrapperBean flowInstanceWrapperBean = new FlowInstanceWrapperBean();
		// 重新发起操作后加载历史审批记录
		if (session.getAttribute(tokenId) != null) {
			flowInstanceWrapperBean = (FlowInstanceWrapperBean) session
					.getAttribute(tokenId);
			//在缓存中查找，还没有提交流程
			Map<String, Object> root = new HashMap<String, Object>();
			root.put("lstFlowInstance", flowInstanceWrapperBean.getLstHistoryFlowInstanceDto());
			root.put("flowInstance", flowInstanceWrapperBean.getFlowInstance());
			root.put("isStart",true);
			String directory = request.getSession().getServletContext()
					.getRealPath("")
					+ File.separator
					+ "page"
					+ File.separator
					+ "FlowInstanceManager";
			String htmlString = FreeMarkUtils.getTemplateParse(directory,
					"FlowInstanceApprove-addCurrent.ftl", root);

			renderText(htmlString + "|&|"
					+ flowInstanceWrapperBean.getFlowInstanceVariableMap().get("startTaskId")
					+ "|&|" + flowInstanceWrapperBean.getFlowInstance().getGuid());

			logger.info("selectPost end");
			
		} else {// 提交后加载历史审批记录
			try{
			   flowInstanceWrapperBean = getFlowInstancesDto(fiId, null);
			}catch(Exception e){
				e.printStackTrace();
			}
		}

		if (flowInstanceWrapperBean == null) {
			return;
		}
		// 生成模板 ，不是缓存查找
		Map<String, Object> root = new HashMap<String, Object>();
		root.put("lstFlowInstance",
				flowInstanceWrapperBean.getLstHistoryFlowInstanceDto());
		root.put("flowInstance",
				flowInstanceWrapperBean.getCurrentFlowInstanceDto());

		String directory = request.getSession().getServletContext()
				.getRealPath("")
				+ File.separator
				+ "page"
				+ File.separator
				+ "FlowInstanceManager";
		String htmlString = FreeMarkUtils.getTemplateParse(directory,
				"FlowInstanceApprove-addCurrent.ftl", root);

		renderText(htmlString);
	
	}

	private List<RoleDTO> getPostsByCurrentUser() {

		// 获取当前用户拥有岗位集合
		List<RoleDTO> lstPost = LoginInfoUtils.getLoginInfo(request)
				.getRoleDtoList();

		if (lstPost == null || lstPost.size() == 0) {
			return new ArrayList<RoleDTO>();
		}
	    	
		// 删除类型编码为system的岗位 
		for (Iterator<RoleDTO> it = lstPost.iterator(); it.hasNext();) {
             RoleDTO dto=it.next();
             //香港置地的需求，不需要项目及岗位
             /**
            List<String>  gropIds=roleService.getPostUpContiansType(dto.getId(), "group");
			if (gropIds!=null && gropIds.size()>0) {
				it.remove();
			}
			**/
			
			
			if (PartyType.TYPE_SYSTEM.equals(dto.getTypeCode())) {
				it.remove();
			}
		}
		

		return lstPost;
	}

	// 2.切换岗位 输入 bizId,flowCode,postId ,session,返回流程历经
	public void selectPost() {
       try{
		logger.info("selectPost start");
		logger.info("startPostId=" + startPostId + ";");
		if (startPostId == null) {
			renderText(StringUtils.EMPTY);
			return;
		}

		// 将获取到的流程实例包装Bean
		FlowInstanceWrapperBean fiwbBean = findFlowInstanceWrapperBean();

		// 生成模板
		Map<String, Object> root = new HashMap<String, Object>();
		root.put("lstFlowInstance", fiwbBean.getLstHistoryFlowInstanceDto());
		root.put("flowInstance", fiwbBean.getFlowInstance());
		root.put("isStart",true);
		String directory = request.getSession().getServletContext()
				.getRealPath("")
				+ File.separator
				+ "page"
				+ File.separator
				+ "FlowInstanceApprove";
		String htmlString = FreeMarkUtils.getTemplateParse(directory,
				"FlowInstanceApprove-approve.ftl", root);

		renderText(htmlString + "|&|"
				+ fiwbBean.getFlowInstanceVariableMap().get("startTaskId")
				+ "|&|" + fiwbBean.getFlowInstance().getGuid());

		logger.info("selectPost end");
       }catch(Exception e){
    	   e.printStackTrace();
       }
	}

	/**
	 * 
	 * 第一次加载项目
	 * 
	 * @param historyFlowInstance
	 * @return
	 */
	private FlowInstanceWrapperBean getFlowInstancesDto(String current_fiId,
			FlowInstance historyFlowInstance) {
		// 对象封装
		String backFiIds = null;
		FlowInstanceWrapperBean flowInstanceWrapperBean = new FlowInstanceWrapperBean();
		FlowInstanceDto flowInstanceDto = null;
		if (historyFlowInstance != null) {
			backFiIds = historyFlowInstance.getBackFiIds();
			if (StringUtils.isNotBlank(backFiIds)) {
				backFiIds = backFiIds + FlowInstanceConstant.SEPARATOR_COMMA
						+ historyFlowInstance.getGuid();
			} else {
				backFiIds = historyFlowInstance.getGuid();
			}
		} else {
			flowInstanceDto = flowInstanceCalculateFiService
					.getFlowInstanceDto(current_fiId);
			flowInstanceWrapperBean.setCurrentFlowInstanceDto(flowInstanceDto);
			backFiIds = flowInstanceDto.getBackFiIds();
		}
		if (StringUtils.isNotBlank(backFiIds)) {
			// 获取最新打回流程
			flowInstanceWrapperBean
					.setLstHistoryFlowInstanceDto(flowInstanceCalculateFiService
							.getFlowInstanceByIds(backFiIds));
		}
		if (StringUtils.isNotBlank(backFiIds)) {
			backFiIds = backFiIds + FlowInstanceConstant.SEPARATOR_COMMA
					+ current_fiId;
		} else {
			backFiIds = current_fiId;
		}
		return flowInstanceWrapperBean;
	}
	
	
	/**
	 * 
	 * 获取当前流程、当前流程
	 * @param current_fiId
	 * @param historyFlowInstance
	 * @return
	 */
	private FlowInstanceWrapperBean getCurrentFlowInstancesDto(String current_fiId,
			FlowInstance historyFlowInstance) {
		// 对象封装
		String backFiIds = null;
		FlowInstanceWrapperBean flowInstanceWrapperBean = new FlowInstanceWrapperBean();
		FlowInstanceDto flowInstanceDto = null;
		if (historyFlowInstance != null) {
			backFiIds = historyFlowInstance.getBackFiIds();
			if (StringUtils.isNotBlank(backFiIds)) {
				backFiIds = backFiIds + FlowInstanceConstant.SEPARATOR_COMMA
						+ historyFlowInstance.getGuid();
			} else {
				backFiIds = historyFlowInstance.getGuid();
			}
		} else {
			flowInstanceDto = flowInstanceCalculateFiService
					.getFlowInstanceDto(current_fiId);
			flowInstanceWrapperBean.setCurrentFlowInstanceDto(flowInstanceDto);
			backFiIds = flowInstanceDto.getBackFiIds();
		}
		if (StringUtils.isNotBlank(backFiIds)) {
			// 获取最新打回流程
			flowInstanceWrapperBean
					.setLstHistoryFlowInstanceDto(flowInstanceCalculateFiService
							.getFlowInstanceByIds(backFiIds));
		}
		if (StringUtils.isNotBlank(backFiIds)) {
			backFiIds = backFiIds + FlowInstanceConstant.SEPARATOR_COMMA
					+ current_fiId;
		} else {
			backFiIds = current_fiId;
		}
		return flowInstanceWrapperBean;
	}

	// 当前用户是否是管理员
	private boolean isAdmin() {
		UserDTO userDto = LoginInfoUtils.getLoginInfo(request).getUserDTO();
		return "admin".equals(userDto.getLoginName().toLowerCase());
	}
	//当前用户是否是管理员
	private boolean isStartUser(String startUserLoginName) {
		UserDTO userDto = LoginInfoUtils.getLoginInfo(request).getUserDTO();
		return userDto.getLoginName().toLowerCase().equals(startUserLoginName);
	}
	

	// 流程发起
	public void submitForStart() throws Exception {

		logger.info("completeWorkForStart start");
		logger.info("tokenId=" + tokenId + ";startPostId=" + startPostId);

		// 当前用户登录信息
		UserDTO currUser = LoginInfoUtils.getLoginInfo(request).getUserDTO();
		try {
			
			FlowInstanceWrapperBean fiwb = (FlowInstanceWrapperBean) session.getAttribute(tokenId);
			if (fiwb == null) {
				logger.error("通过tokenId[" + tokenId + "]未从Session中获取到流程实例包装对象");
				return;
			}
			FlowInstance flowInstance = fiwb.getFlowInstance();
			if (flowInstance == null) {
				logger.error("从流程实例包装对象中为获取到流程实例对象，流程实例包装对象为"
						+ JSON.toJSONString(fiwb));
				return;
			}
			
			if (flowInstance != null) {
				List<FlowInstanceStep> steps= flowInstance.getLstFlowInstanceStep();
				boolean isEnd=true;
				for(FlowInstanceStep step:steps){
					if(step.getIsEnd()==StepTypeStatus.IS_END){
						isEnd=false;
					}
				}
				if(isEnd){
					logger.error("流程没有解析到结束节点可能存在问题，请联系管理员或者调整岗位岗位"
							+ JSON.toJSONString(fiwb));
					renderJson("{\"success\":false,\"msg\":\"发起流程不存在结束节点,无法提交请联系管理员或者调整相应的岗位\"}");
					return;
				}
			}


			List<FlowInstanceDto> lstFlowInstanceDto = fiwb
					.getLstHistoryFlowInstanceDto();

			// 重新发起操作
			if (CollectionUtils.isNotEmpty(lstFlowInstanceDto)) {
				// 获取流程实例历史ID
				flowInstance.setBackFiIds(getMergedBackFiIds(lstFlowInstanceDto
						.get(lstFlowInstanceDto.size() - 1)));
			}

			flowInstance.setFiName(fiName);
			flowInstance.setStartPostId(startPostId);
			Company company=flowInstanceOrgnApISerive.getCompanyByRoleId(startPostId);
			if(company!=null){
				flowInstance.setCompanyId(company.getId());
				flowInstance.setCompanyName(company.getName());
			}
			
			//需要把选择的岗位需要预处理
			flowInstance=flowInstanceFiService.getPreDealWithFlowInstance(flowInstance);
			
			
           
			flowInstanceFiService.save(flowInstance, fiTask,currUser);

			flowInstanceStepMobileService.saveMobileBizData(flowCode, bizId,flowInstance.getGuid());

			flowInstanceEventService.changeAfterSaveFlowInstanceEvent(flowInstance);

			renderJson(new JsonResult(true,"FlowInstanceApprove!detail.do?fiId=" + flowInstance.getGuid(),true));

		} catch (Exception ex) {
			logger.error("completeWorkForStart error", ex);
			ex.printStackTrace();
			renderJson("{\"success\":false,\"msg\":\"流程发起发生异常！\"}");
		}

		logger.info("completeWorkForStart end");
	}

	private String getMergedBackFiIds(FlowInstanceDto latestFlowInstanceHistory) {

		StringBuilder sbBackFiIds = new StringBuilder();

		String backFiIds = latestFlowInstanceHistory.getBackFiIds();

		if (StringUtils.isNotBlank(backFiIds)) {
			sbBackFiIds.append(backFiIds)
					.append(FlowInstanceConstant.SEPARATOR_COMMA)
					.append(latestFlowInstanceHistory.getGuid());
		} else {
			sbBackFiIds.append(latestFlowInstanceHistory.getGuid());
		}
		return sbBackFiIds.toString();
	}

	/**
	 * 
	 * 流程审批提交
	 * 
	 * @throws Exception
	 */
	public void submitForApprove() {

		if (StringUtils.isBlank(tId)) {
			logger.error("任务ID为空！");
			return;
		}
		FlowInstanceStepWorkTask flowInstanceStepWorkTask = flowInstanceCalculateStepService
				.getTaskById(tId);

		if (flowInstanceStepWorkTask == null) {
			logger.error("任务ID=[" + tId + "]不存在记录");
			return;
		}
		
		// 当前用户登录信息
		UserDTO currUser = LoginInfoUtils.getLoginInfo(request).getUserDTO();
		if (flowInstanceStepWorkTask.getParticipant()==null || !flowInstanceStepWorkTask.getParticipant().equals(currUser.getId().toString())) {
			renderJson("{\"success\":false,\"msg\":\"提交审批失败【当前用户和审批人不是同一个人】 \"}");
			return;
		}
		

		if (flowInstanceStepWorkTask.getStatus() != TaskTypeStatus.STATUS_RUNNING) {

			logger.info("任务ID=" + tId + "的环节已完成");
			renderJson("{\"success\":true,\"redirectUrl\":\"FlowInstanceApprove!detail.do?fiId="
					+ flowInstanceStepWorkTask.getFiId() + "\"}");
			return;
		}

		flowInstanceStepWorkTask.setOpCode(fiTask.getOpCode());
		flowInstanceStepWorkTask.setUserNote(fiTask.getUserNote());
		
		flowInstanceStepWorkTask.setCompleteUserId(currUser.getId());
		flowInstanceStepWorkTask.setCompleteUserLoginName(currUser
				.getLoginName());
		flowInstanceStepWorkTask.setCompleteUserName(currUser.getRealName());
		flowInstanceStepWorkTask.setOwnerId("fiId_"
				+ flowInstanceStepWorkTask.getFiId() + "_wiId_" + tId);

		String opCode = fiTask.getOpCode().split(";")[0];
		try {
			switch (opCode) {
			case "BH":
				FlowInstance flowInstance = flowInstanceCalculateFiService
						.getById(fiId);
//				flowInstanceStepService.saveToBack(flowInstance,
//						flowInstanceStepWorkTask, backStepId, isReApprove);
				flowInstanceStepService.saveToBack(flowInstance,flowInstanceStepWorkTask, backStepId, backTaskId,isReApprove, currUser);
				break;
			case "ZB":
				flowInstanceStepService.saveToZB(flowInstanceStepWorkTask,
						userIds, currUser);
				break;
			case "XB":
				flowInstanceStepService.saveToXB(flowInstanceStepWorkTask,
						Arrays.asList(userIds.split(",")), currUser);
				break;
			case "GTFQR":
				flowInstanceStepService.saveToGT(flowInstanceStepWorkTask, currUser);
				break;
			case "HF":
				flowInstanceStepService.saveToHF(flowInstanceStepWorkTask, currUser);
				break;
			default:
				flowInstanceStepService.save(flowInstanceStepWorkTask, currUser);
				break;
			}
			renderJson("{\"success\":true,\"redirectUrl\":\"FlowInstanceApprove!detail.do?fiId="
					+ flowInstanceStepWorkTask.getFiId() + "\"}");
		} catch (Exception e) {
            e.printStackTrace();
			logger.error("提交审批失败", e);
			renderJson("{\"success\":false,\"msg\":提交审批失败 \"}");
		}

	}

	/**
	 * @return
	 * @throws Exception
	 */
	private FlowInstanceWrapperBean findFlowInstanceWrapperBean()
			throws Exception {

		FlowInstanceVariableMap fivm = null;
		FlowInstanceWrapperBean flowInstanceWrapperBean = (FlowInstanceWrapperBean) session
				.getAttribute(tokenId);
		fivm = flowInstanceWrapperBean.getFlowInstanceVariableMap();
		fivm.add(new FlowInstanceVariable(
				FlowInstanceVariableType.FLOW_START_OP_POST_ID, startPostId));
		// 发起操作的第一次切换岗位或者重新发起操作的第一次以后切换岗位
		if (flowInstanceWrapperBean.getFlowInstance() == null) {
			flowInstanceWrapperBean.setFlowInstanceVariableMap(fivm);
			flowInstanceWrapperBean.setFlowInstance(findFlowInstance(fivm));
			session.setAttribute(tokenId, flowInstanceWrapperBean);
		} else {
			// 重新发起操作的第一次切岗获发起操作或者发起操作的第一次以后切岗操作
			flowInstanceWrapperBean = (FlowInstanceWrapperBean) session
					.getAttribute(tokenId);
			List<FlowInstanceStep> lstFlowInstanceStep = null;
			FlowInstance flowInstance = flowInstanceWrapperBean
					.getFlowInstance();
			if (flowInstance != null) {
				lstFlowInstanceStep = flowInstanceCalculateWorkService
						.getFlowInstanceStepList(
								flowInstance.getLstFlowInstanceStep(), fivm);
				flowInstanceWrapperBean.getFlowInstance()
						.setLstFlowInstanceStep(lstFlowInstanceStep);
			}
			flowInstanceWrapperBean.setFlowInstanceVariableMap(fivm);
		}

		return flowInstanceWrapperBean;
	}

	/**
	 * 
	 * 
	 * @param fivm
	 * @return
	 */
	private FlowInstance findFlowInstance(FlowInstanceVariableMap fivm) throws Exception{

		// 流程模板ID
		Fl fl = flowInstanceCalculateFiService.getFl(flId);
		// 当前用户登录信息
		UserDTO currUser = LoginInfoUtils.getLoginInfo(request).getUserDTO();
		// 获取流程实例
		FlowInstance flowInstance = flowInstanceCalculateFiService
				.getFlowInstance(fl, bizId, currUser, fivm);

		List<AcDto> lstAcDto = flowInstanceCalculateAcService.getAcDtos(fl,
				fivm);

		List<FlowInstanceStep> lstFlowInstanceStep = flowInstanceCalculateStepService
				.getFlowInstanceStep(lstAcDto, flowInstance);

		lstFlowInstanceStep = flowInstanceCalculateWorkService
				.getFlowInstanceStepList(lstFlowInstanceStep, fivm);

		flowInstance.setLstFlowInstanceStep(lstFlowInstanceStep);

		return flowInstance;
	}

	private FlowInstanceVariableMap findFlowInstanceVariableMap()
			throws Exception {

		FlowInstanceVariableMap fivm = FlowInstanceVariableMap.create();
		Map<String, Object> map = App.getBean(SmObjectService.class).queryDetail(flowCode, bizId);

		if (null != map && map.size() > 0) {
			for (Map.Entry<String, Object> e : map.entrySet()) {

				fivm.add(new FlowInstanceVariable(e.getKey(), e.getValue()));
			}
		}
		fivm.add(new FlowInstanceVariable(
				FlowInstanceVariableType.FLOW_START_OP_USER_ID, LoginInfoUtils
						.getLoginInfo(request).getUserDTO().getId()));
		return fivm;
	}

	// 3.发起提交流程，获取手机端表单参数

	// 4.审批提交： 通过，协办，转办，沟通，打回到发起环节，打回到中间环节，回复，接受，不接受，无异议

	/**
	 * 传两个ownId来查询附件
	 * 
	 * @return
	 */
	public void loadBizAttachment() {

		if (bizAttachment == null) {
			return;
		}

		String directory = request.getSession().getServletContext()
				.getRealPath("")
				+ File.separator
				+ "page"
				+ File.separator
				+ "FlowInstanceApprove";
		Map<String, Object> mapDataModel = bizAttachmentService
				.getBizAttachment(bizAttachment, flId);
		String htmlString = FreeMarkUtils.getTemplateParse(directory,
				(String) mapDataModel.get("templateName"), mapDataModel);

		renderText(htmlString);
	}

	public void setBizId(String bizId) {
		this.bizId = bizId;
	}

	public void setFlowCode(String flowCode) {
		this.flowCode = flowCode;
	}

	public String getTokenId() {
		return tokenId;
	}

	public void setTokenId(String tokenId) {
		this.tokenId = tokenId;
	}

	public void setStartPostId(Long startPostId) {
		this.startPostId = startPostId;
	}

	public List<RoleDTO> getLstPost() {
		return lstPost;
	}

	public String getBizUrl() {
		return bizUrl;
	}

	public String getBizId() {
		return bizId;
	}

	public String getFlowCode() {
		return flowCode;
	}

	public Long getFlId() {
		return flId;
	}

	public void setFlId(Long flId) {
		this.flId = flId;
	}

	public BizAttachment getBizAttachment() {
		return bizAttachment;
	}

	public void setBizAttachment(BizAttachment bizAttachment) {
		this.bizAttachment = bizAttachment;
	}

	public void setFiId(String fiId) {
		this.fiId = fiId;
	}

	public String getFiId() {
		return fiId;
	}

	public boolean getIsStart() {
		return isStart;
	}

	public FlowInstanceStepWorkTaskDto getFiTask() {
		return fiTask;
	}

	public void setFiTask(FlowInstanceStepWorkTaskDto fiTask) {
		this.fiTask = fiTask;
	}

	public String getTId() {
		return tId;
	}

	public void setTId(String tId) {
		this.tId = tId;
	}

	public Long getBizType() {
		return bizType;
	}

	public void setBizType(Long bizType) {
		this.bizType = bizType;
	}

	public boolean getIsReStart() {
		return isReStart;
	}

	public String getLastHistoryFiId() {
		return lastHistoryFiId;
	}

	public void setLastHistoryFiId(String lastHistoryFiId) {
		this.lastHistoryFiId = lastHistoryFiId;
	}

	public List<FlowInstanceStepDto> getLstFlowInstanceStep() {
		return lstFlowInstanceStep;
	}

	public void setBackStepId(String backStepId) {
		this.backStepId = backStepId;
	}

	public void setIsReApprove(boolean isReApprove) {
		this.isReApprove = isReApprove;
	}

	public List<OpRelationInsDto> getLstRelationIns() {
		return lstRelationIns;
	}

	public String getUserIds() {
		return userIds;
	}

	public void setUserIds(String userIds) {
		this.userIds = userIds;
	}

	public String getFiName() {
		return fiName;
	}

	public void setFiName(String fiName) {
		this.fiName = fiName;
	}

	public boolean isXbhf_result() {
		return xbhf_result;
	}

	public void setXbhf_result(boolean xbhf_result) {
		this.xbhf_result = xbhf_result;
	}

	public String getTeId() {
		return teId;
	}

	public void setTeId(String teId) {
		this.teId = teId;
	}

	public String getStepId() {
		return stepId;
	}

	public void setStepId(String stepId) {
		this.stepId = stepId;
	}

	public String getParticipantsId() {
		return participantsId;
	}

	public void setParticipantsId(String participantsId) {
		this.participantsId = participantsId;
	}

	public Long getSodId() {
		return sodId;
	}

	public void setSodId(Long sodId) {
		this.sodId = sodId;
	}

	
	
	public String getBackTaskId() {
		return backTaskId;
	}

	public void setBackTaskId(String backTaskId) {
		this.backTaskId = backTaskId;
	}

	public List<FlowInstanceStepTaskBackDto> getLstFlowInstanceStepTaskBackDto() {
		return lstFlowInstanceStepTaskBackDto;
	}

	public void setLstFlowInstanceStepTaskBackDto(
			List<FlowInstanceStepTaskBackDto> lstFlowInstanceStepTaskBackDto) {
		this.lstFlowInstanceStepTaskBackDto = lstFlowInstanceStepTaskBackDto;
	}

	
	
}
