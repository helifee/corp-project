package com.xinleju.erp.frame.filter;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.jasig.cas.client.authentication.DefaultGatewayResolverImpl;
import org.jasig.cas.client.authentication.GatewayResolver;
import org.jasig.cas.client.util.AbstractCasFilter;
import org.jasig.cas.client.util.CommonUtils;
import org.jasig.cas.client.validation.Assertion;

public class XinLeJuAuthenticationFilter extends AbstractCasFilter{
	private String casServerLoginUrl;
	private boolean renew = false;

	private boolean gateway = false;

	private GatewayResolver gatewayStorage = new DefaultGatewayResolverImpl();

	private String[] excludePaths;// 要排除的url路径
	
	private String page;
	
	
	@Override
	protected void initInternal(FilterConfig filterConfig)
			throws ServletException {
		if (!(isIgnoreInitConfiguration())) {  
            super.initInternal(filterConfig);  
            setCasServerLoginUrl(getPropertyFromInitParams(filterConfig, "casServerLoginUrl", null));  
            //this.logger.trace("Loaded CasServerLoginUrl parameter: " + this.casServerLoginUrl);
            setRenew(parseBoolean(getPropertyFromInitParams(filterConfig, "renew", "false")));  
            //this.logger.trace("Loaded renew parameter: " + this.renew);
            setGateway(parseBoolean(getPropertyFromInitParams(filterConfig, "gateway", "false")));  
            //this.logger.trace("Loaded gateway parameter: " + this.gateway);
            
			// 从web.xml中解析出init-param要排除的url配置 xulein
			String _excludePaths = getPropertyFromInitParams(filterConfig,
					"excludePaths", null);// filterConfig.getInitParameter("excludePaths");
			if (CommonUtils.isNotBlank(_excludePaths)) {
				setExcludePaths(_excludePaths.trim().split(","));
			}
			String _page = getPropertyFromInitParams(filterConfig,
					"page", null);
			if(CommonUtils.isNotBlank(_page)){
				setPage(_page);
			}
			// 从web.xml中解析出init-param要排除的url配置 end
            String gatewayStorageClass = getPropertyFromInitParams(filterConfig, "gatewayStorageClass", null);  
            if (gatewayStorageClass == null) return;  
            try {  
              this.gatewayStorage = ((GatewayResolver)Class.forName(gatewayStorageClass).newInstance());
            } catch (Exception e) {  
              //this.logger.error(e.getMessage(), e);
              throw new ServletException(e);  
            }  
		}
	}

	public void init() {
		super.init();
		CommonUtils.assertNotNull(this.casServerLoginUrl,
				"casServerLoginUrl cannot be null.");
	}

	
	@Override
	public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse,
			FilterChain filterChain) throws IOException, ServletException {
		// TODO Auto-generated method stub
		String modifiedServiceUrl;
		HttpServletRequest request = (HttpServletRequest) servletRequest;
		HttpServletResponse response = (HttpServletResponse) servletResponse;
		HttpSession session = request.getSession(false);
		Assertion assertion = (session != null) ? (Assertion) session
				.getAttribute("_const_cas_assertion_") : null;
		if (assertion != null) {
			filterChain.doFilter(request, response);
			return;
		}
		// xuein
		StringBuffer url=request.getRequestURL();
		String uri=url.toString();
		boolean isInWhiteList = false;
		if (excludePaths != null && excludePaths.length > 0 && uri != null) {
			for (String path : excludePaths) {
				if (CommonUtils.isNotBlank(path)) {
					isInWhiteList = uri.indexOf(path.trim()) > -1;
					if (isInWhiteList) {
						break;
					}
				}
			}
		}

		if (isInWhiteList) {
			StringBuffer url_1=request.getRequestURL();
			String uri_1=url_1.toString();
			if(uri_1.equals(page.trim())){
				filterChain.doFilter(request, response);
			}else{
				 response.sendRedirect(page.trim());
			}
			return;
		}

		String serviceUrl = constructServiceUrl(request, response);
		String ticket = CommonUtils.safeGetParameter(request,
				getArtifactParameterName());
		boolean wasGatewayed = this.gatewayStorage.hasGatewayedAlready(request,
				serviceUrl);

		if ((CommonUtils.isNotBlank(ticket)) || (wasGatewayed)) {
			filterChain.doFilter(request, response);
			return;
		}

		//this.logger.debug("no ticket and no assertion found");
		if (this.gateway) {
			//this.logger.debug("setting gateway attribute in session");
			modifiedServiceUrl = this.gatewayStorage.storeGatewayInformation(
					request, serviceUrl);
		} else {
			modifiedServiceUrl = serviceUrl;
		}

//		if (this.logger.isDebugEnabled()) {
//			this.logger.debug("Constructed service url: " + modifiedServiceUrl);
//		}

		String urlToRedirectTo = CommonUtils.constructRedirectUrl(
				this.casServerLoginUrl, getServiceParameterName(),
				modifiedServiceUrl, this.renew, this.gateway);

//		if (this.logger.isDebugEnabled()) {
//			this.logger.debug("redirecting to \"" + urlToRedirectTo + "\"");
//		}

		response.sendRedirect(urlToRedirectTo);
	}
	public String getCasServerLoginUrl() {
		return casServerLoginUrl;
	}
	public void setCasServerLoginUrl(String casServerLoginUrl) {
		this.casServerLoginUrl = casServerLoginUrl;
	}
	public boolean isRenew() {
		return renew;
	}
	public void setRenew(boolean renew) {
		this.renew = renew;
	}
	public boolean isGateway() {
		return gateway;
	}
	public void setGateway(boolean gateway) {
		this.gateway = gateway;
	}
	public GatewayResolver getGatewayStorage() {
		return gatewayStorage;
	}
	public void setGatewayStorage(GatewayResolver gatewayStorage) {
		this.gatewayStorage = gatewayStorage;
	}
	public String[] getExcludePaths() {
		return excludePaths;
	}
	public void setExcludePaths(String[] excludePaths) {
		this.excludePaths = excludePaths;
	}

	public String getPage() {
		return page;
	}

	public void setPage(String page) {
		this.page = page;
	}
	
	
	
	

}
