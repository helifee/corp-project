package com.xinleju.erp.finance.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.finance.dao.FiPaymentTypeDao;
import com.xinleju.erp.finance.dto.FiPaymentTypeDTO;
import com.xinleju.erp.finance.models.FiAccountCaption;
import com.xinleju.erp.finance.models.FiPaymentType;
import com.xinleju.erp.finance.utils.ExcelHandlerUtil;
import com.xinleju.erp.finance.utils.IExcelHandler;
import com.xinleju.erp.form.utils.DbType;

@Service
public class FiPaymentTypeService extends BaseService implements IExcelHandler{
	
	@Autowired
	private FiPaymentTypeDao fiPaymentTypeDao;
	@Autowired
	private JdbcTemplate jt;
	@Autowired
	private FiAccountCaptionService fiAccountCaptionService;
	/**
	 * 根据款项类型编码获取一条记录
	 * @param code
	 * @param status
	 * @return
	 */
	public FiPaymentType getFiPaymentTypeByCode(String fundsTypeId,String status,Long companyId,Long accountSetId){
		String hql="from FiPaymentType where typeCode='"+fundsTypeId+"' and status="+status+" ";
		/*if(companyId != null){
			hql += "and companyId="+companyId;
		}*/
		if(accountSetId!=null){
			hql += "and accountSetId="+accountSetId;
		}
		FiPaymentType fbc = getDao().findFirstByHQL(FiPaymentType.class, hql);
		return fbc;
	}
	
	/**
	 * 根据财务编码获取一条记录
	 * @param code
	 * @param status
	 * @return
	 */
	public FiPaymentType getFiPaymentTypeByAccCode(String accountCode,String status,Long sysId,Long accountSetId){
		String hql="from FiPaymentType where accountCapCode='"+accountCode+"' and status='"+status+"' and sysId="+sysId +" and accountSetId="+accountSetId;
		FiPaymentType fbc = getDao().findFirstByHQL(FiPaymentType.class, hql);
		return fbc;
	}
	
	/**
	 * 根据ID获取FiPaymentType
	 * @param code
	 * @return
	 */
	public FiPaymentType getFiPaymentTypeById(Long id){
		return getDao().getById(FiPaymentType.class, id);
	}
	
	/**
	 * 根据账套id获得款项类型
	 * 
	 * @param accountSetId
	 * @param status
	 * @return
	 */
	public List<FiPaymentType> getFiPaymentTypeList(Long accountSetId, String status,Long sysId) {
		return fiPaymentTypeDao.getFiPaymentTypeList(accountSetId, status,sysId);
	}
	
	/**
	 * 根据财务编码、款项类型编码、账套id获得款项类型
	 * 
	 * @param accountSetId
	 * @param status
	 * @return
	 */
	public List<FiPaymentType> getFiPaymentTypeListByCapAndTypeCode(String accountCapCode, String typeCode,Long accountSetId,Long sysId) {
		return fiPaymentTypeDao.getFiPaymentTypeListByCapAndTypeCode(accountCapCode, typeCode,accountSetId,sysId);
	}
	
	/**
	 * 根据银行id获得款项名称
	 * 
	 * @param accountSetId
	 * @param status
	 * @return
	 */
	public List<FiPaymentType> getFiPaymentTypeListByTypeId(Long accountSetId,String bid) {
		return fiPaymentTypeDao.getFiPaymentTypeListByTypeId(accountSetId,bid);
	}

	/**
	 * 根据账套id获得预算科目的dto
	 * 
	 * @param accountSetId
	 * @param status
	 * @return
	 */
	public List<FiPaymentTypeDTO> getFiPaymentTypeDTOList(Long accountSetId, String status,Long sysId) {
		List<FiPaymentTypeDTO> list = fiPaymentTypeDao.getFiPaymentTypeDTOList(accountSetId, status,sysId);
		return list;
	}

	
	public void saveOrUpdate(FiPaymentType fiPaymentType) {
		getDao().saveOrUpdate(fiPaymentType);
	}

	/**
	 * 删除预算科目
	 * 
	 * @param fiAccountCaption
	 */
	public void delete(FiPaymentType fiPaymentType) {
		getDao().delete(fiPaymentType);
	}

	/**
	 * excel页签名
	 * @return
	 */
	@Override
	public String getSheetName() {
		// TODO Auto-generated method stub
		return "代收类型科目对照";
	}
	/**
	 * 导出的excel字段名称
	 * @return
	 */
	@Override
	public String[] getHeadItemsNameAry() {
		// TODO Auto-generated method stub
		//id,accountCapCode,accountCapName,bankCode,bankName,bid,parentId,sysId,accountSetId,companyId
		String[] str = {"id","会计科目编码","会计科目名称","会计科目Id","款项类型编码","款项类型名称","款项类型id","所属系统","账套id"};
		return str;
	}

	/**
	 * 导出的excel字段属性名，class中必须存在此属性
	 * @return
	 */
	@Override
	public String[] getHeadItemsCodeAry() {
		// TODO Auto-generated method stub
		String[] str = {"id","accountCapCode","accountCapName","accountCapId","typeCode","typeName","coId","sysId","accountSetId"};
		return str;
	}

	/**
	 * 导出的excel字段在表格中占的宽度，与code一一对应，默认100，如不想显示比如ID字段，可设置为0。
	 * @return
	 */
	@Override
	public Integer[] getHeadItemsLength() {
		// TODO Auto-generated method stub
		Integer[] lengths = { 100, 100, 100, 100, 100,100, 100, 100, 100};
		return lengths;
	}

	/**
	 * 导出字段在excel中是否红色显示 <br/> true:是（字段值不导出），false：否，null：红色、且字段值导出
	 * @return
	 */
	@Override
	public Boolean[] getHeadItemsColor() {
		// TODO Auto-generated method stub
		Boolean[] bool = { false, false, false, false, false,false, false, false, false};
		return bool;
	}

	/**
	 * 导出的excel实体类名
	 * @return
	 */
	@Override
	public Class<?> getEntityClass() {
		// TODO Auto-generated method stub
		return FiPaymentType.class;
	}

	/**
	 * 导出到excel的具体数据
	 * @return
	 */
	@Override
	public List<?> getEntityList(IExcelHandler handler,String accountSetCode,long sysId,Long accountSetId,Long companyId) {
		// TODO Auto-generated method stub
		try{
			FiPaymentTypeService fiPaymentTypeService = (FiPaymentTypeService)handler;
			List<FiPaymentType> fiPaymentTypeDTOs = null;
			if (StringUtils.isNotBlank(accountSetCode))
				//System.out.println();
				fiPaymentTypeDTOs = fiPaymentTypeService.getFiPaymentTypeList(accountSetId, "1",sysId);
			
			return fiPaymentTypeDTOs;
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 表格最上方的提示列表，为String集合，多条提示逐行显示
	 * @return
	 */
	@Override
	public List<String> getTipsList() {
		// TODO Auto-generated method stub
		List<String> tips = new ArrayList<String>();
		tips.add("说明：数据导出模板对格式有严格要求，请直接录入相关值，禁止增加或删除列，禁止删除此行及标题行，否则将导入失败！");
		return tips;
	}

	@Override
	public Map<String, Integer[]> getCellJoinMap() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?> getImpClass() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String[] getImportColumns() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String[] getImportHeadItemsName() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?>[] getImportColumnsType() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Boolean[] getColsIsImp() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int importPr(String accountSetCode,String sysId,String companyCode,String accountSetId,HSSFSheet sheet,Long companyId){
		int rowNum = sheet.getLastRowNum();// 行  
    	try{
    		String oldAccountSetId = "";
    		String oldSysId = "";
			for(int k=2;k<=rowNum;k++){
	    		HSSFRow hssfRow = sheet.getRow(k);
	    		if (hssfRow == null) {
					continue;
				}
	    		oldAccountSetId = hssfRow.getCell(8)+"";
	    		oldSysId = hssfRow.getCell(7)+"";
	    		
	    		Long coid = null;
	    		if(StringUtils.isNotBlank(hssfRow.getCell(6)+"")){
	    			coid = Long.valueOf(ExcelHandlerUtil.cutIdLength(ExcelHandlerUtil.getValue(hssfRow.getCell(6))+""));
	    		}
	    		//"id","accountCapCode","accountCapName","accountCapId","typeCode","typeName","coId","sysId","accountSetId"
	    		List<FiPaymentType> list = getFiPaymentTypeListByCapAndTypeCode(ExcelHandlerUtil.getValue(hssfRow.getCell(1))+"",ExcelHandlerUtil.getValue(hssfRow.getCell(4))+"",Long.valueOf(accountSetId),Long.valueOf(sysId));
	    		if(list != null && list.size()>0){
	    			continue;
	    		}
	    		FiAccountCaption fc = new FiAccountCaption();
	    		if(!oldAccountSetId.equals(accountSetId)){
	    			fc = fiAccountCaptionService.getFiAccountCaptionByCode(ExcelHandlerUtil.getValue(hssfRow.getCell(1))+"",Long.valueOf(accountSetId));
	    		}else{
	    			fc.setId(Long.valueOf(ExcelHandlerUtil.getValue(hssfRow.getCell(3))+""));
	    		}
	    		String sql = "insert into fi_payment_type(account_Cap_Code,account_Cap_Name,account_Cap_Id,type_Code,type_Name,co_id,sys_id,account_set_id,create_date,status,account_set_code) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
    			getDao().executeSQL(sql, ExcelHandlerUtil.getValue(hssfRow.getCell(1))+"",ExcelHandlerUtil.getValue(hssfRow.getCell(2))+"",
    					fc.getId(),ExcelHandlerUtil.getValue(hssfRow.getCell(4))+"",
	    				ExcelHandlerUtil.getValue(hssfRow.getCell(5))+"",coid+"",
	    				sysId,accountSetId,new Date(),1,accountSetCode);
	    	}
			//setParent(oldAccountSetId,accountSetId,oldSysId,sysId);
			return 2;
    	}catch(Exception e){
    		e.printStackTrace();
    		return 3;
    	}
	}
	
	/**
	 * 修改预算科目父id
	 * chc add 2016.6.29
	 */
	public void setParent(String oldAccountSetId,String accountSetId,String oldSysId,String sysId){
		String hql="from FiPaymentType where accountSetId='"+oldAccountSetId+"' and sysId = "+oldSysId;
		String hql2="from FiPaymentType where accountSetId='"+accountSetId+"' and sysId = "+sysId;
		List<FiPaymentType> list = getDao().findByHQL(FiPaymentType.class, hql);
		List<FiPaymentType> list2 = getDao().findByHQL(FiPaymentType.class, hql2);
		for(FiPaymentType fc:list){
			Long pid = fc.getParentId();
			String code = fc.getAccountCapCode();
			for(FiPaymentType fc2:list2){
				String code2 = fc2.getAccountCapCode();
				if(StringUtils.isNotBlank(code) && code.equals(code2)){
					if(pid != null){
						FiPaymentType c = this.getFiPaymentTypeById(pid);
						if(c != null){
							String pcode = c.getAccountCapCode();
							String hql_="from FiPaymentType where accountSetId='"+accountSetId+"' and accountCapCode ='"+pcode+"' and sysId="+sysId + " order by createDate desc";
							FiPaymentType fbc = getDao().findFirstByHQL(FiPaymentType.class, hql_);
							if(fbc != null){
								Long pid_ = fbc.getId();
								fc2.setParentId(pid_);
								getDao().update(fc2);
							}
						}
					}
				}
			}
		}
	}
}
