package com.xinleju.erp.flow.service.api.extend;

import java.io.Serializable;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.data.redis.connection.RedisConnection;
import org.springframework.data.redis.core.RedisCallback;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import com.xinleju.erp.flow.frameapi.domain.User;

/**
 * <p></p>
 * <p></p>
 * @author   Administrator
 * @version  $Id$
 * @since
 * @see
 */

@Service
public class Demo1Service {
    
    @Autowired RedisTemplate<Serializable, Serializable> redisTemplate;
    
    public void save(final Demo user) {
        redisTemplate.execute(new RedisCallback<Object>() {
            @Override
            public Object doInRedis(RedisConnection connection)
                    throws DataAccessException {
                connection.set(
                        redisTemplate.getStringSerializer().serialize(
                                "user.uid." + user.getUid()),
                        redisTemplate.getStringSerializer().serialize(
                                user.getAddress()));
                return null;
            }
        });
    }
    
    
   
    public Demo read(final String uid) {
        return redisTemplate.execute(new RedisCallback<Demo>() {
            @Override
            public Demo doInRedis(RedisConnection connection)
                    throws DataAccessException {
                byte[] key = redisTemplate.getStringSerializer().serialize(
                        "user.uid." + uid);
                if (connection.exists(key)) {
                    byte[] value = connection.get(key);
                    String address = redisTemplate.getStringSerializer()
                            .deserialize(value);
                    Demo user = new Demo();
                    user.setAddress(address);
                    user.setUid(uid);
                    return user;
                }
                return null;
            }
        });
    }
}
