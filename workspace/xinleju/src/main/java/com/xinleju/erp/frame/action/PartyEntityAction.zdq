package com.xinleju.erp.frame.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.flow.service.api.ApiConstant;
import com.xinleju.erp.flow.service.api.extend.BaseAPI;
import com.xinleju.erp.flow.utils.FlowConstant;
import com.xinleju.erp.flow.utils.LoginInfoUtils;
import com.xinleju.erp.frame.models.App;
import com.xinleju.erp.frame.models.Company;
import com.xinleju.erp.frame.models.Group;
import com.xinleju.erp.frame.models.LogRecord;
import com.xinleju.erp.frame.models.PartyEntity;
import com.xinleju.erp.frame.models.PartyStruct;
import com.xinleju.erp.frame.models.PartyType;
import com.xinleju.erp.frame.service.CompanyService;
import com.xinleju.erp.frame.service.PartyEntityService;
import com.xinleju.erp.frame.service.PartyStructTypeService;
import com.xinleju.erp.frame.service.PartyTypeService;

/**
 * 版权：(C) 版权所有 2000-2014 上海天好电子商务有限公司苏州分公司 组维护
 * 
 * @author zhongjun
 * @version $Id$
 * @since
 * @see
 */
public class PartyEntityAction extends BaseAction {

	/**
	* <p>Title:PartyEntityAction.java </p>
	* <p>Description: long</p>
	* <p>Todo:TODO </p> 
	* @author liugang
	* @date 2016-4-18
	*/
	private static final long serialVersionUID = 1L;

	private PartyEntity partyEntity;

	@Autowired
	private PartyEntityService partyEntityService;

	@Autowired
	private PartyStructTypeService partyStructTypeService;

	@Autowired
	private PartyTypeService partyTypeService;
	@Autowired
	private CompanyService companyService;
	//加日志
	@Autowired
	private BaseAPI baseAPIService;

	/**
	 * 
	 */
	public void getFullName() {
		String partyEntityId = request.getParameter("partyEntityId");
		PartyEntity partyEntity = getCommonService().getById(PartyEntity.class, Long.valueOf(partyEntityId));
		String result = partyEntityService.prefix2fullname(partyEntity.getPrefix());
		Map<String, Object> r = new HashMap<String, Object>();
		r.put("result", result);
		super.renderJson(r);
	}

	/**
	 * 组织架构树
	 * 
	 * @author jdq
	 * @param request
	 * @param pageable
	 * @param model
	 * @return
	 */
	public void getTrees() {
		List<Map<String, Object>> trees = new ArrayList<Map<String, Object>>();
		String partyStructTypeId = getParameter("partyStructTypeId");
		String parentEntityId = getParameter("parentEntityId");
		String isStruct = getParameter("isStruct");
		List<PartyEntity> childPartyList = new ArrayList<PartyEntity>();
		if (StringUtils.isNotBlank(parentEntityId) && !"null".equals(parentEntityId) && Long.valueOf(parentEntityId) != 0) {
			if (FlowConstant.STR_TRUE.equals(isStruct)) { // 组织架构树 不显示岗位
				childPartyList = partyEntityService.findChildEntityAllNoRole(Long.valueOf(parentEntityId), Long.valueOf(partyStructTypeId));
			} else {
				childPartyList = partyEntityService.findChildEntityAllNoUser(Long.valueOf(parentEntityId), Long.valueOf(partyStructTypeId));
			}
		} else {
			childPartyList = partyEntityService.findRootEntity(Long.valueOf(partyStructTypeId));
		}

		for (PartyEntity childParty : childPartyList) {
			trees.add(partyEntityService.initTreeLeaf(childParty, isStruct, partyStructTypeId));
		}
		super.renderJson(trees);
	}

	public void getAuthCompanyTrees() {
		List<Map<String, Object>> trees = new ArrayList<Map<String, Object>>();

		String parentEntityId = getParameter("parentId");
		if (parentEntityId == null || ("0").equals(parentEntityId)) {
			parentEntityId = "1";
			//查空的  parentEntityId
			PartyStruct ps=this.getCommonService().findFirstByHQL(PartyStruct.class, "from PartyStruct where parentEntityId is null");
			if(ps!=null&&ps.getChildEntityId()!=null){
				parentEntityId=String.valueOf(ps.getChildEntityId());
			}
		}

		List<PartyEntity> childPartyList = new ArrayList<PartyEntity>();
		if (StringUtils.isNotBlank(parentEntityId) && !"null".equals(parentEntityId) && Long.valueOf(parentEntityId) != 0) {
			childPartyList = partyEntityService.findChildEntityAllNoDept(Long.valueOf(parentEntityId), 1l);
		} else {
			childPartyList = partyEntityService.findRootEntity(1l);
		}

		for (PartyEntity childParty : childPartyList) {
			if (PartyType.TYPE_COMPANY.equals(childParty.getPartyType().getType()))
				trees.add(partyEntityService.initTreeLeafDataAuth(childParty, "1", "company"));
		}
		super.renderJson(trees);
	}

	public void getAuthProjectTrees() {
		List<Map<String, Object>> trees = new ArrayList<Map<String, Object>>();

		String parentEntityId = getParameter("parentId");
		if (parentEntityId == null || ("0").equals(parentEntityId)) {
			parentEntityId = "1";
			//查空的  parentEntityId
			PartyStruct ps=this.getCommonService().findFirstByHQL(PartyStruct.class, "from PartyStruct where parentEntityId is null");
			if(ps!=null&&ps.getChildEntityId()!=null){
				parentEntityId=String.valueOf(ps.getChildEntityId());
			}
		}

		List<PartyEntity> childPartyList = new ArrayList<PartyEntity>();
		if (StringUtils.isNotBlank(parentEntityId) && !"null".equals(parentEntityId) && Long.valueOf(parentEntityId) != 0) {
			childPartyList = partyEntityService.findChildEntityAllNoDept(Long.valueOf(parentEntityId), 1l);
		} else {
			childPartyList = partyEntityService.findRootEntity(1l);
		}

		for (PartyEntity childParty : childPartyList) {
			if (PartyType.TYPE_COMPANY.equals(childParty.getPartyType().getType()) || PartyType.TYPE_GROUP.equals(childParty.getPartyType().getType())) {
				trees.add(partyEntityService.initTreeLeafDataAuth(childParty, "1", "project"));
			}
		}
		super.renderJson(trees);
	}
	
	public void getAuthDepartmentTrees() {
		List<Map<String, Object>> trees = new ArrayList<Map<String, Object>>();

		String parentEntityId = getParameter("parentId");
		if (parentEntityId == null || ("0").equals(parentEntityId)) {
			parentEntityId = "1";
			//查空的  parentEntityId
			PartyStruct ps=this.getCommonService().findFirstByHQL(PartyStruct.class, "from PartyStruct where parentEntityId is null");
			if(ps!=null&&ps.getChildEntityId()!=null){
				parentEntityId=String.valueOf(ps.getChildEntityId());
			}
		}

		List<PartyEntity> childPartyList = new ArrayList<PartyEntity>();
		if (StringUtils.isNotBlank(parentEntityId) && !"null".equals(parentEntityId) && Long.valueOf(parentEntityId) != 0) {
			childPartyList = partyEntityService.findChildEntityAllNoProject(Long.valueOf(parentEntityId), 1l);
		} else {
			childPartyList = partyEntityService.findRootEntity(1l);
		}

		for (PartyEntity childParty : childPartyList) {
			if (PartyType.TYPE_COMPANY.equals(childParty.getPartyType().getType()) || PartyType.TYPE_DEPARTMENT.equals(childParty.getPartyType().getType())) {
				trees.add(partyEntityService.initTreeLeafDataAuth(childParty, "1", "department"));
			}
		}
		super.renderJson(trees);
	}

	public void getAuthProjectBranchTrees() {
		List<Map<String, Object>> trees = new ArrayList<Map<String, Object>>();

		String parentEntityId = getParameter("parentId");
		if (parentEntityId == null || ("0").equals(parentEntityId)) {
			parentEntityId = "1";
			//查空的  parentEntityId
			PartyStruct ps=this.getCommonService().findFirstByHQL(PartyStruct.class, "from PartyStruct where parentEntityId is null");
			if(ps!=null&&ps.getChildEntityId()!=null){
				parentEntityId=String.valueOf(ps.getChildEntityId());
			}
		}

		List<PartyEntity> childPartyList = new ArrayList<PartyEntity>();
		if (StringUtils.isNotBlank(parentEntityId) && !"null".equals(parentEntityId) && Long.valueOf(parentEntityId) != 0) {
			childPartyList = partyEntityService.findChildEntityAllNoDept(Long.valueOf(parentEntityId), 1l);
		} else {
			childPartyList = partyEntityService.findRootEntity(1l);
		}

		for (PartyEntity childParty : childPartyList) {
			if (PartyType.TYPE_COMPANY.equals(childParty.getPartyType().getType()) || PartyType.TYPE_GROUP.equals(childParty.getPartyType().getType())) {
				trees.add(partyEntityService.initTreeLeafDataAuth(childParty, "1", "project_branch"));
			}
		}
		super.renderJson(trees);
	}

	public void getEntityId() {
		String roleId = request.getParameter("roleId");
		PartyEntity partyEntity = partyEntityService.findEntityByRefId(Long.valueOf(roleId), PartyType.TYPE_ROLE);
		request.setAttribute("partyEntityId", partyEntity.getId());
		Map<String, Object> r = new HashMap<String, Object>();
		r.put("partyEntityId", partyEntity.getId());
		super.renderJson(r);
	}

	/**
	 * 组织架构首页
	 * 
	 * @author jdq
	 * @param request
	 * @param pageable
	 * @param model
	 * @return
	 */
	public String index() {
		String partyStructTypeId = request.getParameter("partyStructTypeId");

		if (StringUtils.isBlank(partyStructTypeId)) {
			partyStructTypeId = String.valueOf(partyStructTypeService.getZcStructId());
		}
		List<PartyType> canAddPartyTypeList = partyTypeService.getCanAddList();
		request.setAttribute("canAddPartyTypeList", canAddPartyTypeList);
		request.setAttribute("partyStructTypeId", partyStructTypeId);
		request.setAttribute("isStruct", FlowConstant.STR_TRUE);
		String refleshPeNamePix = request.getParameter("refleshPeNamePix");
		if (StringUtils.isNotBlank(refleshPeNamePix) && "true".equals(refleshPeNamePix)) {
			partyEntityService.refleshPeNamePath();
		}
		return "index";

	}

	public void showProjBranch() {
		String refId = request.getParameter("refId");
		Group group = partyEntityService.getDao().findFirstByHQL(Group.class, " from Group where id=? ", new Object[] { Long.valueOf(refId) });
		Long projId = null;
		if (group != null) {
			projId = group.getRefObjectId();
		}

		App app = getCommonService().findFirstByHQL(App.class, " from App a where a.code = 'MD' ");
		String url = app.getDepUrl() + "/project_branch!view.do?id=" + projId;
		renderJson("{\"succcess\":\"true\",\"url\":\"" + url + "\"}");
	}

	public void refleshPeNamePath() {
		partyEntityService.refleshPeNamePath();
	}

	public String edit() {
		String parentEntityId = request.getParameter("parentEntityId");
		String partyStructTypeId = request.getParameter("partyStructTypeId");
		String type = request.getParameter("partyType");
		PartyType partyType = partyTypeService.getByPartyType(type);
		if (null != id) {
			partyEntity = getCommonService().getById(PartyEntity.class, id);
		} else {
			partyEntity = new PartyEntity();
		}
		partyEntity.setPartyTypeId(partyType.getId());
		partyEntity.setPartyType(partyType);
		request.setAttribute("parentEntityId", parentEntityId);
		request.setAttribute("partyStructTypeId", partyStructTypeId);
		// 加日志
		baseAPIService.saveLog(request.getRemoteAddr(), LoginInfoUtils.getLoginInfoUserDtoId(request),LoginInfoUtils.getLoginInfo(request).getUserDTO().getLoginName(), "PT", "组织机构", "PartyEntityAction.edit()", "跳转到编辑组织机构页面", null, "edit", LogRecord.SIGN_UPDATE, LogRecord.TYPE_OTHER);
		return "edit";
	}

	public String editShortName() {
		partyEntity = getCommonService().getById(PartyEntity.class, id);
		return "editShortName";
	}

	public void save() {
		String parentEntityId = request.getParameter("parentEntityId");
		String partyStructTypeId = request.getParameter("partyStructTypeId");
		partyEntityService.saveEntity(StringUtils.isNotBlank(parentEntityId) ? Long.valueOf(parentEntityId) : null, partyEntity,
				Long.valueOf(partyStructTypeId));
		Map<String, Object> r = new HashMap<String, Object>();
		r.put("success", true);
		r.put("parentEntityId", parentEntityId);
		// 加日志
		baseAPIService.saveLog(request.getRemoteAddr(), LoginInfoUtils.getLoginInfoUserDtoId(request),LoginInfoUtils.getLoginInfo(request).getUserDTO().getLoginName(), "PT", "组织机构", "PartyEntityAction.save()", "保存组织机构信息", null, "json串", LogRecord.SIGN_INSERT, LogRecord.TYPE_OTHER);
		super.renderJson(r);
	}
	/**
	 * 通过公司的id获得公司信息
	 */
	public void getCompanyById() {
		Long companyId = getParameterLong("refId");
		Company com = companyService.getById(companyId);
		renderJson(com);
	}

	public void saveShortName() {
		getCommonService().saveOrUpdate(partyEntity);
		Map<String, Object> r = new HashMap<String, Object>();
		r.put("success", true);
		r.put("parentEntityId", partyEntity.getId());
		super.renderJson(r);
	}

	public PartyEntity getPartyEntity() {
		return partyEntity;
	}

	public void setPartyEntity(PartyEntity partyEntity) {
		this.partyEntity = partyEntity;
	}
}
