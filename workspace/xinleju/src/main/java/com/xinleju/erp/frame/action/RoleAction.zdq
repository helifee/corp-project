package com.xinleju.erp.frame.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.base.app.config.App;
import com.xinleju.erp.flow.service.api.ApiConstant;
import com.xinleju.erp.flow.service.api.extend.BaseAPI;
import com.xinleju.erp.flow.utils.LoginInfoUtils;
import com.xinleju.erp.frame.dao.PartyStructDao;
import com.xinleju.erp.frame.models.LabelValueBean;
import com.xinleju.erp.frame.models.LogRecord;
import com.xinleju.erp.frame.models.PartyType;
import com.xinleju.erp.frame.models.Role;
import com.xinleju.erp.frame.models.RoleModule;
import com.xinleju.erp.frame.models.User;
import com.xinleju.erp.frame.service.RoleService;

/**
 * 版权：(C) 版权所有 2000-2014 上海天好电子商务有限公司苏州分公司 消息 <详细描述>
 * 
 * @author zhongjun
 * @version $Id: MsgAction.java 731 2015-03-24 10:03:00Z zhongjun $
 * @since
 * @see
 */
public class RoleAction extends BaseAction {

	/**
	* <p>Title:RoleAction.java </p>
	* <p>Description: long</p>
	* <p>Todo:TODO </p> 
	* @author liugang
	* @date 2016-4-8
	*/
	private static final long serialVersionUID = 9005770297599657745L;

	/**
	 * 是否显示更多
	 */
	private String show;

	/**
	 * 消息DTO
	 */
	private String name;

	/**
	 * 父id
	 */
	private String parentId;

	private String roleId;

	private String userId;

	private String partyStructTypeId;

	private Boolean exists;

	private String code;

	private Role role;

	private List<Long> roleIds;

	private List<PartyType> partyTypeList;

	@Autowired
	private RoleService roleService;

	@Autowired
	private PartyStructDao partyStructDao;

	/**
	 * 消息列表
	 * 
	 * @author zhengxj
	 * @return
	 */
	public String index() {
		return "index";
	}

	/**
	 * 角色树
	 * 
	 * @author jdq
	 * @param request
	 * @param pageable
	 * @param model
	 * @return
	 */
	public void getTrees() {
		List<Map<String, Object>> trees = new ArrayList<Map<String, Object>>();
		if (StringUtils.isBlank(parentId) || "null".equals(parentId)) {
			parentId = "0";
		}
		List<Role> childList = new ArrayList<Role>();
		if (Long.valueOf(parentId) != 0) {
			childList = roleService.findChildRoleAll(Long.valueOf(parentId));
		} else {
			childList = roleService.findRootRole();
		}
		for (Role role : childList) {
			if (Role.ENABLE.equals(show) && role.getStatus() != null && Role.STATUS_DISABLE == role.getStatus()) {
				continue;
			}
			Map<String, Object> tree = new HashMap<String, Object>();
			tree.put("id", role.getId());
			String name = role.getName();

			tree.put("text", name.substring(0, name.length() > 20 ? 20 : name.length()));
			tree.put("expanded", false);
			tree.put("leaf", role.getSubRoleCount() == 0);
			trees.add(tree);
		}
		super.renderJson(trees);
	}

	/**
	 * 角色禁用
	 * 
	 * @author
	 * @date
	 */
	public void disable() {
		if (StringUtils.isNotBlank(roleId)) {
			roleService.changeStatus(Long.valueOf(roleId), Role.STATUS_DISABLE);
			getSession().setAttribute("currentRoleId", roleId);
		}
		Map<String, Object> tree = new HashMap<String, Object>();
		tree.put("success", "true");
		// 加日志
		BaseAPI baseAPIService = com.xinleju.erp.base.app.config.App.getBean(BaseAPI.class, ApiConstant.BEAN_CODE);
		Long uid = LoginInfoUtils.getLoginInfoUserDtoId(request);
		baseAPIService.saveLog(request.getRemoteAddr(), uid,LoginInfoUtils.getLoginInfo(request).getUserDTO().getLoginName(), "PT", "系统设置->角色管理", "RoleAction.disable()", "角色禁用", null, "json串", LogRecord.SIGN_QUERY, LogRecord.TYPE_OTHER);
		super.renderJson(tree);
	}

	/**
	 * 角色启用
	 * 
	 * @author
	 * @date
	 */
	public void enable() {
		if (StringUtils.isNotBlank(roleId)) {
			roleService.changeStatus(Long.valueOf(roleId), Role.STATUS_ENABLE);
			getSession().setAttribute("currentRoleId", roleId);
		}
		Map<String, Object> tree = new HashMap<String, Object>();
		tree.put("success", "true");
		// 加日志
		BaseAPI baseAPIService = com.xinleju.erp.base.app.config.App.getBean(BaseAPI.class, ApiConstant.BEAN_CODE);
		Long uid = LoginInfoUtils.getLoginInfoUserDtoId(request);
		baseAPIService.saveLog(request.getRemoteAddr(), uid,LoginInfoUtils.getLoginInfo(request).getUserDTO().getLoginName(), "PT", "系统设置->角色管理", "RoleAction.enable()", "角色启用", null, "json串", LogRecord.SIGN_QUERY, LogRecord.TYPE_OTHER);
		super.renderJson(tree);
		super.renderJson(tree);
	}

	/**
	 * 角色删除
	 * 
	 * @author liugang
	 * @date 2016-0408
	 */
	public void deleteRole() {
		if (StringUtils.isNotBlank(roleId)) {
			roleService.getDao().delete(Role.class, Long.valueOf(roleId));
			getSession().setAttribute("currentRoleId", roleId);
		}
		Map<String, Object> tree = new HashMap<String, Object>();
		tree.put("success", "true");
		// 加日志
		BaseAPI baseAPIService = com.xinleju.erp.base.app.config.App.getBean(BaseAPI.class, ApiConstant.BEAN_CODE);
		Long uid = LoginInfoUtils.getLoginInfoUserDtoId(request);
		baseAPIService.saveLog(request.getRemoteAddr(), uid,LoginInfoUtils.getLoginInfo(request).getUserDTO().getLoginName(), "PT", "系统设置->角色管理", "RoleAction.deleteRole()", "角色删除【" + role.getName() + "】", null, "json串", LogRecord.SIGN_DELETE, LogRecord.TYPE_OTHER);
		super.renderJson(tree);
	}

	/**
	 * 标准角色管理
	 * 
	 * @author jdq
	 * @param request
	 * @param pageable
	 * @param model
	 * @return
	 */
	public String list() {
		DetachedCriteria c = DetachedCriteria.forClass(Role.class);
		if (StringUtils.isNotBlank(parentId) && Long.valueOf(parentId) != 0) {
			c.add(Restrictions.eq("parentId", Long.valueOf(parentId)));
		} else {
			c.add(Restrictions.isNull("parentId"));
		}
		// 标准角色
		c.add(Restrictions.eq("type", Role.TYPE_STANDARD));
		if (StringUtils.isNotBlank(name)) {
			c.add(Restrictions.like("name", "%" + name + "%"));
		}
		c.addOrder(Order.asc("status"));
		c.addOrder(Order.asc("sort"));
		page = getCommonService().findPage(c, start, limit);

		if (page.getItems() != null) {

			Map<String, String> typeMap = new HashMap<String, String>();

			for (LabelValueBean bean : PartyType.typeList) {
				typeMap.put(bean.getValue(), bean.getName());
			}

			for (Object obj : page.getItems()) {
				Role role = (Role) obj;
				role.setTypeCodeName(typeMap.containsKey(role.getTypeCode()) ? typeMap.get(role.getTypeCode()) : "");
			}
		}
		// 加日志
		BaseAPI baseAPIService = com.xinleju.erp.base.app.config.App.getBean(BaseAPI.class, ApiConstant.BEAN_CODE);
		Long uid = LoginInfoUtils.getLoginInfoUserDtoId(request);
		baseAPIService.saveLog(request.getRemoteAddr(), uid,LoginInfoUtils.getLoginInfo(request).getUserDTO().getLoginName(), "PT", "系统设置->角色管理", "RoleAction.list()", "查询角色集合", null, "json串", LogRecord.SIGN_QUERY, LogRecord.TYPE_OTHER);
		return "list";
	}

	/**
	 * 岗位列表
	 * 
	 * @author jdq
	 * @param request
	 * @param pageable
	 * @param model
	 * @return
	 */
	public String commList() {
		DetachedCriteria c = DetachedCriteria.forClass(Role.class);
		// 岗位
		c.add(Restrictions.eq("type", Role.TYPE_COMMON));
		if (StringUtils.isNotBlank(name)) {
			c.add(Restrictions.like("name", "%" + name + "%"));
		}
		c.addOrder(Order.asc("sort"));
		page = getCommonService().findPage(c, start, limit);
		for (Object o : page.getItems()) {
			((Role) o).setNamefix(roleService.getNamefix((Role) o));
		}
		// 用户已有的所有岗位 出去主岗
		User user = getCommonService().getById(User.class, Long.valueOf(userId));
		roleIds = partyStructDao.findParentRefIdsByChildRefId(user.getId(), PartyType.TYPE_ROLE);
		if (user.getMainRoleId() != null) {
			roleIds.remove(user.getMainRoleId());
		}
		return "commList";
	}

	/**
	 * Description:检查编码是否重复 <br>
	 * 
	 * @see
	 */
	public void checkCode() {
		exists = false;
		if (StringUtils.isNotBlank(code)) {
			// 如果id非空，即为编辑，排除本身
			if (null != id) {
				Long count = roleService.getRoleCountWithId(code, Long.valueOf(id));
				if (count > 0) {
					exists = true;
				}
			} else {// 如果id为空，则为新增
				Long count = roleService.getRoleCount(code);
				if (count > 0) {
					exists = true;
				}
			}
		}
	}

   /**
     * <p>Description:验证标准角色排序重复 〈详细描述〉</p>
     * <p>Todo:TODO </p> 
     * @author liugang
     * @date 2016-4-8
    */
	public void checkRoleSeq() {
		String sort = request.getParameter("param");
		String typeCode = request.getParameter("typeCode");
		String pId = request.getParameter("parentId");
		Long parentId = ("".equals(pId) ? null : Long.valueOf(pId));
		String roleid = request.getParameter("roleid");
		Long id = ("".equals(roleid) ? null : Long.valueOf(roleid));
		if (sort != null && typeCode != null) {
			List<Role> list = roleService.findRoleBySort(Integer.valueOf(sort), parentId, id);
			Map<String, Object> r = new HashMap<String, Object>();
			r.put("status", list.size() <= 0 ? "y" : "n");
			r.put("info", list.size() <= 0 ? "" : "排序重复！");
			super.renderJson(r);
		}
	}

	public String edit() {
		if (id != null) {
			role = getCommonService().getById(Role.class, id);
			getSession().setAttribute("currentRoleId", id);
		} else {
			role = new Role();
			role.setStatus(Role.STATUS_ENABLE);
			role.setType(Role.TYPE_STANDARD);
			role.setParentId("0".equals(parentId) || StringUtils.isBlank(parentId) ? null : Long.valueOf(parentId));
		}
		partyTypeList = getCommonService().findAll(PartyType.class, "1=1 and name!='" + PartyType.ROLE + "' and name!='" + PartyType.USER + "'", new Object[] {}, "sort asc");
		return "edit";
	}
 /**
  * 
   * <p>Description:角色保存 </p>
   * <p>Todo:TODO </p> 
   * @author liugang
   * @date 2016-4-8
  */
	public void save() {
		getCommonService().saveOrUpdate(role);
		getSession().setAttribute("currentRoleId", role.getId());
		Map<String, Object> tree = new HashMap<String, Object>();
		tree.put("success", true);
		// 加日志
		BaseAPI baseAPIService = com.xinleju.erp.base.app.config.App.getBean(BaseAPI.class, ApiConstant.BEAN_CODE);
		Long uid = LoginInfoUtils.getLoginInfoUserDtoId(request);
		baseAPIService.saveLog(request.getRemoteAddr(), uid,LoginInfoUtils.getLoginInfo(request).getUserDTO().getLoginName(), "PT", "系统设置->角色管理", "RoleAction.save()", "角色保存【" + role.getName() + "】", null, "json串", LogRecord.SIGN_INSERT, LogRecord.TYPE_OTHER);
		super.renderJson(tree);
	}

	public void nodeDrop() {
		String currentRoleId = request.getParameter("currentRoleId");
		String targetRoleId = request.getParameter("targetRoleId");
		roleService.nodeDrop(Long.valueOf(currentRoleId), Long.valueOf(targetRoleId));
	}

  /**
    * <p>Description:判断角色时候可以删除 </p>
    * <p>Todo:TODO </p> 
    * @author liugang
    * @date 2016-4-8
   */
	public void roleRefChk() {
		String parentEntityId = request.getParameter("childEntityId");
		String errMsg = "";
		// 校验是否分配岗位
		List<Long> list = App.getBean(PartyStructDao.class).findParentRefIdsByChildRefId(Long.valueOf(parentEntityId), new String[] { "zb", "company", "department", "group" });
		boolean isCanDel = list == null || list.size() == 0;
		if (!isCanDel) {
			errMsg = "该角色已经分配岗位，不能删除!";
		} else {
			// 校验是否分配权限
			List<RoleModule> rm = getCommonService().findByHQL(RoleModule.class, " from RoleModule where roleId = ? ", Long.valueOf(parentEntityId));
			boolean hasAuth = rm != null && rm.size() > 0;
			isCanDel = !hasAuth;
			if (hasAuth) {
				errMsg = "该角色已经分配权限，不能删除!";
			}

		}
		Map<String, Object> r = new HashMap<String, Object>();
		r.put("success", true);
		r.put("isCanDel", isCanDel);
		r.put("errMsg", errMsg);
		r.put("childEntityId", parentEntityId);
		// 加日志
		BaseAPI baseAPIService = com.xinleju.erp.base.app.config.App.getBean(BaseAPI.class, ApiConstant.BEAN_CODE);
		Long uid = LoginInfoUtils.getLoginInfoUserDtoId(request);
		baseAPIService.saveLog(request.getRemoteAddr(), uid,LoginInfoUtils.getLoginInfo(request).getUserDTO().getLoginName(), "PT", "系统设置->角色管理", "RoleAction.roleRefChk()", "判断角色时候可以删除", null, "json串", LogRecord.SIGN_QUERY, LogRecord.TYPE_OTHER);
		super.renderJson(r);
	}

	public String getShow() {
		return show;
	}

	public void setShow(String show) {
		this.show = show;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getParentId() {
		return parentId;
	}

	public void setParentId(String parentId) {
		this.parentId = parentId;
	}

	public String getRoleId() {
		return roleId;
	}

	public void setRoleId(String roleId) {
		this.roleId = roleId;
	}

	public String getUserId() {
		return userId;
	}

	public void setUserId(String userId) {
		this.userId = userId;
	}

	public String getPartyStructTypeId() {
		return partyStructTypeId;
	}

	public void setPartyStructTypeId(String partyStructTypeId) {
		this.partyStructTypeId = partyStructTypeId;
	}

	public Boolean getExists() {
		return exists;
	}

	public void setExists(Boolean exists) {
		this.exists = exists;
	}

	public String getCode() {
		return code;
	}

	public void setCode(String code) {
		this.code = code;
	}

	public Role getRole() {
		return role;
	}

	public void setRole(Role role) {
		this.role = role;
	}

	public List<Long> getRoleIds() {
		return roleIds;
	}

	public void setRoleIds(List<Long> roleIds) {
		this.roleIds = roleIds;
	}

	public List<PartyType> getPartyTypeList() {
		return partyTypeList;
	}

	public void setPartyTypeList(List<PartyType> partyTypeList) {
		this.partyTypeList = partyTypeList;
	}

}
