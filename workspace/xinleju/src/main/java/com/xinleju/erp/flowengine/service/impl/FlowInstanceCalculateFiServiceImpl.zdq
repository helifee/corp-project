package com.xinleju.erp.flowengine.service.impl;

import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.collections.MapUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.base.utils.DateUtils;
import com.xinleju.erp.flow.models.Fl;
import com.xinleju.erp.flow.service.api.extend.dto.UserDTO;
import com.xinleju.erp.flowengine.dao.FlowInstanceDao;
import com.xinleju.erp.flowengine.dto.FlowInstanceDto;
import com.xinleju.erp.flowengine.models.FlowInstance;
import com.xinleju.erp.flowengine.models.FlowInstanceVariableMap;
import com.xinleju.erp.flowengine.service.FlowInstanceCalculateFiService;
import com.xinleju.erp.flowengine.utils.FlowInstanceConstant;
import com.xinleju.erp.flowengine.utils.IDGenerator;
import com.xinleju.erp.flowengine.utils.StepTypeStatus;

@Service(value = "FlowInstanceCalculateFiService")
public class FlowInstanceCalculateFiServiceImpl extends BaseService implements
		FlowInstanceCalculateFiService {

	@Autowired
	private FlowInstanceDao flowInstanceDao;

	public FlowInstance getFlowInstance(Fl flow, String bizId,
			UserDTO currUser, FlowInstanceVariableMap fivm) {

		FlowInstance flowInstance = new FlowInstance();

		flowInstance.setGuid(IDGenerator.getUUID());
		
		flowInstance.setBizCode(flow.getServiceObjectDefine().getCode());
		flowInstance.setFlId(flow.getId());
		flowInstance.setBizId(bizId);
		flowInstance.setAppCode(flow.getAppCode());
		flowInstance.setBizType(flow.getServiceObjectDefineId());
		flowInstance.setBizCode(flow.getServiceObjectDefine().getCode());
		flowInstance.setStatus(StepTypeStatus.STATUS_CREATED);
		flowInstance.setSort(IDGenerator.getTimeLongStr());
		flowInstance.setFiType(flow.getCtId());
		flowInstance.setDoWhenNoUsersAtwork(flow.getDoWhenNoUsersAtWp());
		flowInstance.setDoWhenRepeatInSteps(flow.getDoWhenRepeatInAcs());
		Date currDate = new Date();
		flowInstance.setCreateTime(currDate);
		flowInstance.setCreateUserId(currUser.getId());
		flowInstance.setCreateUserLoginName(currUser.getLoginName());
		flowInstance.setCreateUserName(currUser.getRealName());
	
		

//		flowInstance.setCompleteTime(currDate);
//		flowInstance.setCompleteUserId(currUser.getId());
//		flowInstance.setCompleteUserLoginName(currUser.getLoginName());
//		flowInstance.setCompleteUserName(currUser.getRealName());

		flowInstance.setStartUserId(currUser.getId());
		flowInstance.setStartUserLoginName(currUser.getLoginName());
		flowInstance.setStartUserName(currUser.getRealName());
		// TODO 获取公司编号
		flowInstance.setFiCode(fixFiCode(flow, fivm.getValueMap(), null));
		flowInstance.setFiName(fixFiName(flow, fivm.getValueMap(),
				currUser.getRealName()));

		return flowInstance;
	}

	private String fixFiCode(Fl fl, Map<String, Object> gvMap,
			String companyCode) {

		if (StringUtils.isBlank(fl.getCodePrefix())) {
			return null;
		}

		String codePrefix = fl.getCodePrefix().trim();

		codePrefix = this.fixFiParam(codePrefix, gvMap);

		if (codePrefix.contains("@公司编号@")) {
			codePrefix = codePrefix.replace("@公司编号@", StringUtils
					.isNotBlank(companyCode) ? companyCode : StringUtils.EMPTY);
		}
		if (codePrefix.contains("@年度@")) {
			codePrefix = codePrefix.replace("@年度@", DateUtils.getYear() + "");
		}
		if (codePrefix.contains("@月份@")) {
			codePrefix = codePrefix.replace("@月份@",
					(DateUtils.getMonth() > 9 ? DateUtils.getMonth() : "0"
							+ DateUtils.getMonth())
							+ StringUtils.EMPTY);
		}

		return codePrefix;
	}

	public String fixFiName(Fl fl, Map<String, Object> gvMap, String userName) {

		String titleType = fl.getTitleType();

		if (StringUtils.isBlank(titleType) || MapUtils.isEmpty(gvMap)) {
			return null;
		}

		titleType = fixFiParam(titleType, gvMap);

		if (titleType.contains("@title@")) {
			titleType = titleType.replace("@title@", StringUtils.isNotBlank(fl
					.getFlowName()) ? fl.getFlowName().trim()
					: StringUtils.EMPTY);
		}
		if (titleType.contains("@user@")) {
			titleType = titleType
					.replace("@user@",
							StringUtils.isNotBlank(userName) ? userName.trim()
									: StringUtils.EMPTY);
		}

		return titleType;
	}

	private String fixFiParam(String target, Map<String, Object> gvMap) {

		for (Entry<String, Object> entry : gvMap.entrySet()) {
			Object value = entry.getValue();
			target = StringUtils.replace(target,
					FlowInstanceConstant.SEPARATOR_AT + entry.getKey()
							+ FlowInstanceConstant.SEPARATOR_AT,
					value == null ? StringUtils.EMPTY : String.valueOf(value));
		}

		return target;
	}

	public FlowInstanceDto getFlowInstanceDto(String fiId) {
		return flowInstanceDao.getFlowInstanceById(fiId);
	}
	
    /**
     * 
     * 获取流程模板
     * @param flId
     * @return
     */
    public Fl getFl(Long flId) {
        return getDao().findFirstByHQL(Fl.class,"from Fl t where t.id = ?", flId);
    }
    
    public Map<String, Object> getServiceObjectDefine(String fiId){
    	
    	return flowInstanceDao.getBizParam(fiId);
    }
    
    public FlowInstance getFlowInstanceByBizIdAndBizType(String bizId,Long bizType,Integer status){
    	FlowInstance flowInstances= getDao().findFirst(FlowInstance.class,
    								" bizId = ? AND bizType = ? AND status = ? ",new Object[]{bizId,bizType,status},"sort  desc");
        return flowInstances;
    }
    
    public List<FlowInstanceDto> getFlowInstanceByIds(String fiIds){
    	
    	return flowInstanceDao.getFlowInstanceByIds(fiIds);
    }
    
    public FlowInstance getById(String fiId){
    	return getDao().getById(FlowInstance.class,fiId);
    }

	public FlowInstance getFlowInstanceByBizIdAndBizType(String bizId,
			Long bizType, String sort,Integer... arrStatus) {
		StringBuilder sbSql = new StringBuilder();
		Object[] args = new Object[arrStatus.length + 2];
		args[0] = bizId;
		args[1] = bizType;
		sbSql.append("bizId = ? AND bizType = ?");
		if (arrStatus.length == 1) {
			args[2] = arrStatus[0];
			sbSql.append(" AND status = ?");
		} else {
			sbSql.append(" AND status in (");
			for (int i = 0; i < arrStatus.length; i++) {
				args[i + 2] = arrStatus[i];
				sbSql.append("?,");
			}
			sbSql.deleteCharAt(sbSql.length() - 1).append(")");
		}
		FlowInstance flowInstances = getDao().findFirst(FlowInstance.class,
				sbSql.toString(), args, sort);

		return flowInstances;
	}
	
	public List<String> getNewestFlowBizId(String bizId,String flowCode){
		return flowInstanceDao.getNewestFlowBizId(bizId,flowCode);
	}
	
	

	@Override
	public List<String> getNewestFlowBizIds(String bizIds, String flowCode) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Map<String, Object> getFlowInstanceInfo(String fiId) {
		// TODO Auto-generated method stub
		return flowInstanceDao.getFlowInstanceInfo(fiId);
	}
	
	
}
