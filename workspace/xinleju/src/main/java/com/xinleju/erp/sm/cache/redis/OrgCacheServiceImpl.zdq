package com.xinleju.erp.sm.cache.redis;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.data.redis.core.ListOperations;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.stereotype.Service;

import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.flow.service.api.extend.dto.FuncDTO;
import com.xinleju.erp.flow.service.api.extend.dto.OpDTO;
import com.xinleju.erp.flow.service.api.extend.dto.OrgnDTO;
import com.xinleju.erp.flow.service.api.extend.dto.PartyEntityDTO;
import com.xinleju.erp.flow.service.api.extend.dto.PartyStructDTO;
import com.xinleju.erp.flow.service.api.utils.FuncUtils;
import com.xinleju.erp.flow.service.api.utils.PartyEntityUtils;
import com.xinleju.erp.flow.service.api.utils.PartyStructUtils;
import com.xinleju.erp.frame.dao.FuncButtonDao;
import com.xinleju.erp.frame.dao.FuncModuleDao;
import com.xinleju.erp.frame.dao.PartyEntityDao;
import com.xinleju.erp.frame.dao.PartyStructDao;
import com.xinleju.erp.frame.models.FuncButton;
import com.xinleju.erp.frame.models.FuncModule;
import com.xinleju.erp.frame.models.PartyEntity;
import com.xinleju.erp.frame.models.PartyStruct;
import com.xinleju.erp.sm.cache.api.OrgCacheService;

@Service
public class OrgCacheServiceImpl implements OrgCacheService {
	
	@Autowired
	FuncModuleDao funcModuleDao;
	
	@Autowired
	FuncButtonDao funcButtonDao;  
	
	@Autowired
	PartyEntityDao partyEntityDao;
	
	@Autowired
	PartyStructDao partyStructDao;
	
  
    
    @Resource(name="redisTemplate")
    private ListOperations<String, PartyEntityDTO> partyEntityListOper; 
    
    @Resource(name="redisTemplate")
    private ValueOperations<String, PartyEntityDTO> partyEntityValueOper;
    
    @Resource(name="redisTemplate")
    private ListOperations<String, PartyStructDTO> partyStructListOper; 
    
    @Resource(name="redisTemplate")
    private ValueOperations<String, PartyStructDTO> partyStructValueOper; 
    
    
    @Resource(name="redisTemplate")
    private ListOperations<String, FuncDTO> funcListOper; 
    
    @Resource(name="redisTemplate")
    private ValueOperations<String, FuncDTO> funcValueOper;
    
    @Resource(name="redisTemplate")
    private ListOperations<String, OpDTO> opListOper; 
    
    @Resource(name="redisTemplate")
    private ValueOperations<String, OpDTO> opValueOper;
    
    
    
	
	/**
	 * 根据EntityType 和 entityID获取PartyEntity
	 * @param entityType
	 * @param entityID
	 * @return
	 */
	public FlowResult<PartyEntityDTO> getPartyEntityBYTypeAndID (String entityType,String entityID){
		FlowResult<PartyEntityDTO> fr = new FlowResult<PartyEntityDTO>();
		PartyEntityDTO dto = partyEntityValueOper.get("entity:entity_id:entity_type_id:"+entityID+":"+entityType);
		fr.setResult(dto);
		
		return fr;
	}
	
	/**
	 * 根据entityID获取PartyEntity
	 * @param entityID
	 * @return
	 */
	public FlowResult<PartyEntityDTO> getPartyEntityBYID (String entityID){
		FlowResult<PartyEntityDTO> fr = new FlowResult<PartyEntityDTO>();
		
		PartyEntityDTO dto = partyEntityValueOper.get("entity:entity_id:"+entityID);
		
		fr.setResult(dto);
		return fr;
	}
	
	/**
	 * 根据entityType 和 parentID获取PartyEntity
	 * @param entityType
	 * @param parentID
	 * @return
	 */
	public FlowResult<List<PartyEntityDTO>> getPartyEntityBYTypeAndParentID (String entityType,String parentID){
		FlowResult<List<PartyEntityDTO>> fr = new FlowResult<List<PartyEntityDTO>>();
		
		List<PartyEntityDTO> dtos = new ArrayList<PartyEntityDTO>();
		List<PartyStructDTO> structDTOs = partyStructListOper.range("struct:struct_type:parent_entity_id:1:"+parentID, 0, -1);
		System.out.println("PartyStructDTO length:-----------------"+structDTOs.size());
		for(PartyStructDTO ps : structDTOs){
			System.out.println("dddd length:-----------------"+parentID+":entity:entity_id:entity_type_id:"+ps.getChildEntityId());
			dtos.add(partyEntityValueOper.get("entity:entity_id:entity_type_id:"+ps.getChildEntityId()+":"+entityType));
		}
		System.out.println("partyEntityValueOper length:-----------------"+dtos.size());
		fr.setResult(dtos);
		return fr;
	}
	
	
	/**
	 * 根据 parentID获取PartyEntity
	 * @param parentID
	 * @return
	 */
	public FlowResult<List<PartyEntityDTO>> getPartyEntityBYParentID (String parentID){
		FlowResult<List<PartyEntityDTO>> fr = new FlowResult<List<PartyEntityDTO>>();
		
		List<PartyEntityDTO> dtos = new ArrayList<PartyEntityDTO>();
		List<PartyStructDTO> structDTOs = partyStructListOper.range("struct:struct_type:parent_entity_id:1:"+parentID, 0, -1);
		
		for(PartyStructDTO ps : structDTOs){
			dtos.add(partyEntityValueOper.get("entity:entity_id:"+ps.getChildEntityId()));
		}
		fr.setResult(dtos);
		
		return fr;
	}
	
	/**
	 * 根据 parentID获取PartyEntity
	 * @param parentID
	 * @return
	 */
	public FlowResult<List<PartyEntityDTO>> getRootPartyEntity (){
		FlowResult<List<PartyEntityDTO>> fr = new FlowResult<List<PartyEntityDTO>>();
		List<PartyEntityDTO> dtos = new ArrayList<PartyEntityDTO>();
		List<PartyStructDTO> structDTOs = partyStructListOper.range("root_struct", 0, -1);
		
		for(PartyStructDTO ps : structDTOs){
			dtos.add(partyEntityValueOper.get("entity:entity_id:"+ps.getChildEntityId()));
		}
		
		fr.setResult(dtos);
		return fr;
	}
	
	/**
	 * 根据用户ID查询用户功能权限
	 * @param userId
	 * @return
	 */
	
	public FlowResult<List<FuncDTO>> getUserFuncAuth(Long userId){
		FlowResult<List<FuncDTO>> fr = new FlowResult<List<FuncDTO>>();
		List<FuncDTO> fdtos = new ArrayList<FuncDTO>();
		List<PartyEntityDTO> pedtos = partyEntityListOper.range("entity:entity_type:entity_ref_id:6:"+userId, 0, -1);
		List<PartyStructDTO> structDTOs = new ArrayList<PartyStructDTO>();
		for(PartyEntityDTO dto: pedtos){
			structDTOs.addAll(partyStructListOper.range("struct:struct_type:child_entity_id:1:"+dto.getId(), 0, -1));
		}
		
		List<PartyEntityDTO> dtos = new ArrayList<PartyEntityDTO>();
		for(PartyStructDTO ps : structDTOs){
			dtos.add(partyEntityValueOper.get("entity:entity_id:entity_type_id:"+ps.getChildEntityId()+":5"));
		}
		
		for(PartyEntityDTO ped : dtos){
			fdtos.addAll(funcListOper.range("func:module_code:parent_id:"+ped.getRefId(),0,-1));
		}
		fr.setResult(fdtos);
		return fr;
	}
	
	/**
	 * 根据用户ID查询用户按钮权限
	 * @param userId
	 * @return
	 */
	public FlowResult<List<OpDTO>> getUserButtonAuth(Long userId){
		FlowResult<List<OpDTO>> fr = new FlowResult<List<OpDTO>>();
		List<OpDTO> fdtos = new ArrayList<OpDTO>();
		List<PartyEntityDTO> pedtos = partyEntityListOper.range("entity:entity_type:entity_ref_id:6:"+userId, 0, -1);
		List<PartyStructDTO> structDTOs = new ArrayList<PartyStructDTO>();
		for(PartyEntityDTO dto: pedtos){
			structDTOs.addAll(partyStructListOper.range("struct:struct_type:child_entity_id:1:"+dto.getId(), 0, -1));
		}
		
		List<PartyEntityDTO> dtos = new ArrayList<PartyEntityDTO>();
		for(PartyStructDTO ps : structDTOs){
			dtos.add(partyEntityValueOper.get("entity:entity_id:entity_type_id:"+ps.getChildEntityId()+":5"));
		}
		
		for(PartyEntityDTO ped : dtos){
			fdtos.addAll(opListOper.range("op:func_id:"+ped.getRefId(),0,-1));
		}
		fr.setResult(fdtos);
		return fr;
	}
	
	
	public static void main(String args[]) throws Exception{
//    	ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(new String[] {"dubbo-consumer.xml"});
//        context.start();
 
       // IAUServiceABC iau = (IAUServiceABC) context.getBean("aab");
        //Map<String, Object> a = iau.queryDetail("","");
       // System.out.println(a.get(1).toString());
        
        
       // OrgCacheService ucs =  (OrgCacheService)context.getBean("orgCacheServiceP"); 
//        //ucs.initRootPartyStruct();
//        ucs.initAllPartyEntity();
//        //ucs.initAllSubPartyStruct();
//        
//        FlowResult<List<PartyEntityDTO>> fr = ucs.getRootPartyEntity();
//        List<PartyEntityDTO> dtos = fr.getResult();
//        
//        FlowResult<List<PartyEntityDTO>> fr2 = ucs.getPartyEntityBYTypeAndParentID("2", "1");
//        List<PartyEntityDTO> dtos2 = fr2.getResult();
//        
//       // ucs.initAllPartyEntity();
//       // ucs.initAllSubPartyStruct();
////        PartyEntityDTO dto = ucs.getPartyEntityBYID("2");
////        
////        List<PartyEntityDTO> dtos = ucs.getPartyEntityBYTypeAndParentID("3", "2");
////        System.out.println(dto.getName()+"-------------------------------");
////        System.out.println(dto.getId()+"-------------------------------");
////        
//        for(PartyEntityDTO dt: dtos){
//        	System.out.println(dt.getName()+"-------------------------------");
//            System.out.println(dt.getId()+"-------------------------------");
//        }
//        
//        for(PartyEntityDTO dt: dtos2){
//        	System.out.println(dt.getName()+"-------------------------------");
//            System.out.println(dt.getId()+"-------------------------------");
//        }
//    	
    }
	

}
