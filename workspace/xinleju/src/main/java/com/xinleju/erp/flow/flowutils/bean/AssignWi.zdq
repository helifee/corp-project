package com.xinleju.erp.flow.flowutils.bean;

import java.util.LinkedList;
import java.util.List;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.xinleju.erp.flow.flowutils.utils.WsConstant.WiType;
import com.xinleju.erp.flow.frameapi.domain.User;

/**
 * <p>
 * 分配工作信息
 * </p>
 * <p>
 * </p>
 * 
 * @author 孙朝辉
 * @version $Id: AssignWi.java 1194 2014-08-28 03:21:40Z sunchaohui $
 * @since
 * @see
 */
public class AssignWi implements IResultBean {

    /**
     * 序列化ID
     */
    private static final long serialVersionUID = 7461173348561037610L;

    public AssignWi() {

    }

    /**
     * 分发模式：0，并发 1，串行
     */
    private Integer assignType;

    /**
     * 分配的参与人
     */
    private List<User> participants;

    /**
     * 工作状态
     */
    private int status;

    /**
     * 当前操作工作ID
     */
    private Long opWiId;
    
    /**
     * 本次工作的操作人
     */
    private Long opUserId;

    /**
     * 工作状态
     */
    private String wiType;

    /**
     * 工作编码
     */
    private String wiCode;

    /**
     * 工作名
     */
    private String wiName;

    /**
     * 操作编码
     */
    private String opCode;

    /**
     * 操作相关人
     */
    private String opUsers;

    /**
     * 用户意见
     */
    private String userNote;

    /**
     * 
     * <p>
     * 创建一个AssignWi,将待办分配到"participants"参数指定的用户
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param status
     *            工作状态 【必须，将存储在WiBean.status,引用 WsConstant.STATUS_***】
     * @param wiType
     *            工作类别 【必须，将存储在WiBean.wiType,引用 WsConstant.WiType，必须是正常，抄送，转发，日志中的一种】
     * @param wiCode
     *            工作编码 【可选，自定义，将存储在WiBean.wiCode,譬如需要区分"转发"和"抄送"可以使用该字段;或者对该工作需要特别标记，也可以使用该字段】
     * @param wiName
     *            工作名称 【可选，自定义，将存储在WiBean.wiName】
     * @param opCode
     *            操作编码 【可选，自定义，将存储在WiBean.opCode】
     * @param opUserId
     *            操作人 【可选，User.userId，将存储在WiBean.opUser】
     * @param opUsers
     *            操作涉及到的人 【可选，将存储在WiBean.relatedUsers，参与人格式化字符串,例如:User_1:张三;User_2:李四】
     * @param userNote
     *            用户意见【可选，将存储在WiBean.userNote，一般wiType = "日志",status = "结束"时，需要该项】
     * @return AssignWi
     */
    public static AssignWi create(int status, WiType wiType, String wiCode, String wiName, String opCode, Long opUserId, String opUsers, String userNote) {
        return create(status, wiType, wiCode, wiName, opCode, opUserId, opUsers, userNote, null);
    }

    /**
     * 
     * <p>
     * 创建一个AssignWi,将待办分配到"participants"参数指定的用户
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param status
     *            工作状态 【必须，将存储在WiBean.status,引用 WsConstant.STATUS_***】
     * @param wiType
     *            工作类别 【必须，将存储在WiBean.wiType,引用 WsConstant.WiType，必须是正常，抄送，转发，日志中的一种】
     * @param wiCode
     *            工作编码 【可选，自定义，将存储在WiBean.wiCode,譬如需要区分"转发"和"抄送"可以使用该字段;或者对该工作需要特别标记，也可以使用该字段】
     * @param wiName
     *            工作名称 【可选，自定义，将存储在WiBean.wiName】
     * @param opCode
     *            操作编码 【可选，自定义，将存储在WiBean.opCode】
     * @param opUserId
     *            操作人 【可选，User.userId，将存储在WiBean.opUser】
     * @param opUsers
     *            操作涉及到的人 【可选，将存储在WiBean.relatedUsers，参与人格式化字符串,例如:User_1:张三;User_2:李四】
     * @param userNote
     *            用户意见【可选，将存储在WiBean.userNote，一般wiType = "日志",status = "结束"时，需要该项】
     * @param participants
     *            参与人 【必须，将存储在WiBean.participant】
     * @return AssignWi
     */
    public static AssignWi create(int status, WiType wiType, String wiCode, String wiName, String opCode, Long opUserId, String opUsers, String userNote, List<User> participants) {
        AssignWi assignWi = new AssignWi();
        // 基本属性
        assignWi.setStatus(status);
        assignWi.setWiType(wiType.getCode());
        assignWi.setWiCode(null);
        assignWi.setWiName(null);
        assignWi.setParticipants(participants);

        // 完成工作属性
        assignWi.setOpCode(opCode);
        assignWi.setOpUserId(opUserId);
        assignWi.setOpUsers(opUsers);
        assignWi.setUserNote(userNote);

        return assignWi;
    }

    /**
     * 
     * <p>
     * 从Json转成AssignWi对象
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param json
     *            Json字符串
     * @return
     */
    public static AssignWi fromString(String json) {
        return JSON.parseObject(json, AssignWi.class);
    }

    /**
     * 
     * <p>
     * 将自己换换成Json字符串
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @return Json字符串
     */
    public String toJson() {
        return JSONObject.toJSONString(this);
    }

    /**
     * 
     * <p>
     * 增加本次分配的目标参与人
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param userId
     *            参与人ID
     * @param loginName
     *            用户登录名
     * @param userName
     *            用户名
     */
    public void addParticipant(Long userId, String loginName, String userName) {
        User user = new User();
        user.setUserId(userId);
        user.setLoginName(loginName);
        user.setUserName(userName);
        addParticipant(user);
    }

    /**
     * 
     * <p>增加本次分配的目标参与人</p>
     * <p></p>
     * @author 孙朝辉
     * @param e 参与人
     */
    public void addParticipant(User e) {
        if (!this.getParticipants().contains(e)) {
            this.getParticipants().add(e);
        }
    }
    
    
    public Long getOpUserId() {
        return opUserId;
    }

    public void setOpUserId(Long opUserId) {
        this.opUserId = opUserId;
    }

    public String getWiCode() {
        return wiCode;
    }

    public void setWiCode(String wiCode) {
        this.wiCode = wiCode;
    }

    public String getWiName() {
        return wiName;
    }

    public void setWiName(String wiName) {
        this.wiName = wiName;
    }

    public String getOpCode() {
        return opCode;
    }

    public void setOpCode(String opCode) {
        this.opCode = opCode;
    }

    public String getOpUsers() {
        return opUsers;
    }

    public void setOpUsers(String opUsers) {
        this.opUsers = opUsers;
    }

    public String getUserNote() {
        return userNote;
    }

    public void setUserNote(String userNote) {
        this.userNote = userNote;
    }

    public List<User> getParticipants() {
        if (participants == null) {
            participants = new LinkedList<User>();
        }
        return participants;
    }

    public void setParticipants(List<User> participants) {
        this.participants = participants;
    }

    public int getStatus() {
        return status;
    }

    public void setStatus(int status) {
        this.status = status;
    }

    public String getWiType() {
        return wiType;
    }

    public void setWiType(String wiType) {
        this.wiType = wiType;
    }

    public Integer getAssignType() {
        return assignType;
    }

    public void setAssignType(Integer assignType) {
        this.assignType = assignType;
    }

    public Long getOpWiId() {
        return opWiId;
    }

    public void setOpWiId(Long opWiId) {
        this.opWiId = opWiId;
    }

}
