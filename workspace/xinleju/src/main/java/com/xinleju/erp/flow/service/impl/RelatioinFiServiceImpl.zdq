package com.xinleju.erp.flow.service.impl;


import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.base.utils.StringHelper;
import com.xinleju.erp.flow.models.RelationFi;
import com.xinleju.erp.flow.service.IRelationFiService;
import com.xinleju.erp.flow.service.api.extend.dto.UserDTO;
import com.xinleju.erp.flow.utils.FlowConstant;
/**
 * 
 * 版权：(C) 版权所有 2000-2014 上海天好电子商务有限公司苏州分公司
 * 相关service
 * @author   zhongjun
 * @version  $Id: RelatioinFiServiceImpl.java 54049 2014-12-12 08:34:12Z zhongjun $
 * @since
 * @see
 */
@Service
@Transactional
public class RelatioinFiServiceImpl extends BaseService implements IRelationFiService{

    /**
     * 
     * @param relationFi
     * @param ownerId
     * @param opUser
     */
    public void saveRelationFi(RelationFi relationFi, String ownerId, UserDTO opUser){
        relationFi = this.getRelationFi(relationFi, ownerId);
        if (null != relationFi && null != opUser){
            relationFi.setOpUserId(opUser.getId());
            relationFi.setOpUserLoginName(opUser.getLoginName());
            relationFi.setOpUserName(opUser.getRealName());
            getDao().saveOrUpdate(relationFi);
        }
    }
    
    /**
     * 
     */
    @Override
    public void saveRelationFi(List<RelationFi> relationFiList, String ownerId,
                                 UserDTO opUser) {
        getDao().executeSQL("update tf_relation_fi set is_disabled = ? where owner_id = ?", FlowConstant.INT_TRUE, ownerId);
        if (null != relationFiList && relationFiList.size() > 0){
            for (int i = 0; i < relationFiList.size(); i++ ) {
                this.saveRelationFi(relationFiList.get(i), ownerId, opUser);
            }
        }
    }

    @Override
    public RelationFi getRelationFi(RelationFi relationFi, String ownerId) {
        RelationFi relationFiTemp = null;
        if (null != relationFi && null != relationFi.getRelationFiId() && StringUtils.isNotBlank(ownerId)){
            relationFiTemp = getDao().findFirstByHQL(RelationFi.class, "from RelationFi where ownerId = ? and relationFiId = ?", ownerId, relationFi.getRelationFiId());
            if (null == relationFiTemp){
                relationFiTemp = new RelationFi();
                relationFiTemp.setCreateDate(new Date());
            }
            relationFiTemp.setRelationFiId(relationFi.getRelationFiId());
            relationFiTemp.setIsDisabled(FlowConstant.INT_FALSE);
            relationFiTemp.setSort(relationFi.getSort());
            relationFiTemp.setOwnerId(ownerId);
        }
        return relationFiTemp;
    }

    /**
     * 
     * @see com.telehot.flow.service.IrelationFiService#getRelationFi(java.lang.String, boolean)
     */
    @Override
    public List<RelationFi> getRelationFiList(String ownerId, boolean includeDisabled) {
        List<RelationFi> relationFiList = new ArrayList<RelationFi>();
        if (StringUtils.isNotBlank(ownerId)){
            if (includeDisabled){
                relationFiList = getDao().findByHQL(RelationFi.class, "from RelationFi where ownerId = ?", ownerId);
            } else {
                relationFiList = getDao().findByHQL(RelationFi.class, "from RelationFi where ownerId = ? and (isDisabled is null or isDisabled != ?)", ownerId, FlowConstant.INT_TRUE);
            }
        }
        return relationFiList;
    }
    /**
     * 
     * @see com.telehot.flow.service.ISpRelationFiService#deleteRelationFis(java.lang.Integer)
     */
    @Override
    public void deleteRelationFis(Long[] spIds) {
        if (null != spIds && spIds.length > 0){
            getDao().execute("delete from RelationFi where relationFiId in(" + StringHelper.join(spIds, ",") + ")");
        }
    }
}
