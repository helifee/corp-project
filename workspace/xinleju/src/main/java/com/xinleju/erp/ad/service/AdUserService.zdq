package com.xinleju.erp.ad.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.naming.NamingEnumeration;
import javax.naming.NamingException;
import javax.naming.directory.Attribute;
import javax.naming.directory.Attributes;
import javax.naming.directory.SearchControls;
import javax.naming.directory.SearchResult;
import javax.naming.ldap.LdapContext;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.erp.ad.config.AdConfigUtils;
import com.xinleju.erp.ad.config.AdSetting;
import com.xinleju.erp.ad.config.FileCatalog;
import com.xinleju.erp.base.app.config.App;
import com.xinleju.erp.base.app.service.ICommonService;
import com.xinleju.erp.finance.action.BusinessObjectAction;
import com.xinleju.erp.frame.dao.CompanyDao;
import com.xinleju.erp.frame.dao.DeptDao;
import com.xinleju.erp.frame.dao.PartyEntityDao;
import com.xinleju.erp.frame.dao.PartyStructDao;
import com.xinleju.erp.frame.dao.UserDao;
import com.xinleju.erp.frame.models.Company;
import com.xinleju.erp.frame.models.Dept;
import com.xinleju.erp.frame.models.PartyEntity;
import com.xinleju.erp.frame.models.PartyStruct;
import com.xinleju.erp.frame.models.User;

@Service
public class AdUserService {
	
	private static final Log log = LogFactory.getLog(AdUserService.class);
	@Autowired
	private DeptDao deptDao;
	
	@Autowired
	private CompanyDao companyDao;
	
	@Autowired
	private PartyEntityDao partyEntityDao;
	
	
	@Autowired
	private PartyStructDao partyStructDao;
	
	@Autowired
	private UserDao userDao;
	
	/**
	 * 同步用户
	 * @throws NamingException 
	 */
	public boolean SynUser(LdapContext ldapContext,AdSetting adSetting) throws NamingException{
		ICommonService iCommonService=App.getBean(ICommonService.class,
				"commonService");
        	String random=String.valueOf((new Date()).getTime());
		  List<Dept>  depts=iCommonService.findByHQL(Dept.class, "from Dept y where y.distinguishedName is not null and y.extend='"+adSetting.getExtendName()+"'");
		  for(Dept dept: depts){
					 SynCycle( ldapContext, adSetting, dept.getDistinguishedName(), dept,random);
		  } 
	      

		  List<Company>  companys=iCommonService.findByHQL(Company.class, "from Company y where y.distinguishedName is not null and y.extend='"+adSetting.getExtendName()+"'" );
		  for(Company company: companys){
			  SynCycleCompany( ldapContext, adSetting, company.getDistinguishedName(), company,random);
		  }
		  
		  
		  
		  
  	 	List<User>  users=iCommonService.findByHQL(User.class, "from User y where y.objectGuid  is not null and y.objectGuid !='' and y.adFlag != ? and y.extend=? " ,random,adSetting.getExtendName() );
      	if(users!=null && users.size()>0){
      		for(User u :users){
      			List<PartyEntity> relationPartyEntitys=partyEntityDao.getPartyEntityListByRefIdAndPartyEntityTypes(u.getId(), new String[]{"user"},true);
      			if(relationPartyEntitys!=null&& relationPartyEntitys.size()>0){
      				PartyEntity entity=relationPartyEntitys.get(0);
      				entity.setStatus(PartyEntity.STATUS_DISABLE);
          			partyEntityDao.getDao().update(entity);
              		partyEntityDao.getDao().flush();
      			}
          		//禁用
          		u.setStatus(User.STATUS_DISABLE);
          		companyDao.getDao().update(u);
          		companyDao.getDao().flush();
          		
          	}
      	}
	      return true;
	}
	
	public void SynCycle(LdapContext ldapContext,AdSetting adSetting,String distinguishedName,Dept dept,String random) throws NamingException{
		// 实例化一个搜索器
		SearchControls cons = new SearchControls();
		// 搜索范围： 1、平级检索；2、树形检索
		//cons.setSearchScope(SearchControls.SUBTREE_SCOPE);
		cons.setSearchScope(SearchControls.ONELEVEL_SCOPE);
		//设置为false时返回结果占用内存减少
		cons.setReturningObjFlag(true);
		// 执行查询
		String baseDN=distinguishedName;
		if(distinguishedName==null || "".equals(distinguishedName))return ;
		String   filter=AdConfigUtils.getPersonFilter(null);
		try{
		   NamingEnumeration<SearchResult> sEnum = ldapContext.search(baseDN, filter, cons);
		   int size = 0;
			List<FileCatalog> fileCatalogs=new ArrayList<FileCatalog>();
			if(sEnum.hasMore()){
				while(sEnum.hasMoreElements()){    
							SearchResult sr = sEnum.nextElement();
							String DN = sr.getName();
							Attributes attrs = sr.getAttributes();
							// 取到所有属性
							NamingEnumeration<? extends Attribute> aEnum = attrs.getAll();
							FileCatalog fileCatalog=AdConfigUtils.getFileCatalog(aEnum);
							fileCatalogs.add(fileCatalog);
							size ++ ;
							System.out.println("---------------------------------------");
				}
				saveOrUpdate(fileCatalogs,dept,random,adSetting);
				
			}
		}catch(javax.naming.NameNotFoundException e){
		//	e.printStackTrace();
		}
		
	}
	/**
	 * 同步公司人员
	 * @param ldapContext
	 * @param adSetting
	 * @param distinguishedName
	 * @param dept
	 * @param random
	 * @throws NamingException
	 */
	public void SynCycleCompany(LdapContext ldapContext,AdSetting adSetting,String distinguishedName,Company company,String random) throws NamingException{
		// 实例化一个搜索器
		SearchControls cons = new SearchControls();
		// 搜索范围： 1、平级检索；2、树形检索
		//cons.setSearchScope(SearchControls.SUBTREE_SCOPE);
		cons.setSearchScope(SearchControls.ONELEVEL_SCOPE);
		//设置为false时返回结果占用内存减少
		cons.setReturningObjFlag(true);
		// 执行查询
		String baseDN=distinguishedName;
		if(distinguishedName==null || "".equals(distinguishedName))return ;
		String   filter=AdConfigUtils.getPersonFilter(null);
		try{
		   NamingEnumeration<SearchResult> sEnum = ldapContext.search(baseDN, filter, cons);
		   int size = 0;
			List<FileCatalog> fileCatalogs=new ArrayList<FileCatalog>();
			if(sEnum.hasMore()){
				while(sEnum.hasMoreElements()){    
							SearchResult sr = sEnum.nextElement();
							String DN = sr.getName();
							Attributes attrs = sr.getAttributes();
							// 取到所有属性
							NamingEnumeration<? extends Attribute> aEnum = attrs.getAll();
							FileCatalog fileCatalog=AdConfigUtils.getFileCatalog(aEnum);
							fileCatalogs.add(fileCatalog);
							size ++ ;
							System.out.println("---------------------------------------");
				}
				saveOrUpdateCompany(fileCatalogs,company,random,adSetting);
				
			}
		}catch(javax.naming.NameNotFoundException e){
		//	e.printStackTrace();
		}
		
	}
	
	
	 /**
	  * 公司人员
	 * @param fileCatalogs
	 * @param dept
	 * @param random
	 */
	public void saveOrUpdateCompany(List<FileCatalog> fileCatalogs,Company company,String random,AdSetting adSetting){
	    	ICommonService iCommonService=App.getBean(ICommonService.class,
					"commonService");

	    	    List<PartyEntity> partyEntitys=partyEntityDao.getPartyEntityListByRefIdAndPartyEntityTypes(company.getId(), new String[]{"company"},true);
	    	 	for(FileCatalog fileCatalog:fileCatalogs){
		    		User user=new User();
		    		//查找是否创建过该公司
		    		List<User>  users=iCommonService.findByHQL(User.class, "from User y where y.objectGuid =? and   y.extend= ?" ,fileCatalog.getObjectGUID(),adSetting.getExtendName());
		    		if(users!=null && users.size()>0){
		    			user=users.get(0);
		    			user.setRealName(fileCatalog.getDescription());
		    			if(!"root".equals(adSetting.getExtendName())){
		    				user.setLoginname(fileCatalog.getsAMAccountName()+"@"+adSetting.getExtendName());
		    			}else{
		    				user.setLoginname(fileCatalog.getsAMAccountName());
		    			}
		    			user.setDistinguishedName(fileCatalog.getDistinguishedName());
		    			user.setObjectGuid(fileCatalog.getObjectGUID());
		    			user.setStatus(User.STATUS_ENABLE);
		    			user.setExtend(adSetting.getExtendName());
		    			user.setEntityType(PartyEntity.ENTITY_TYPE);
		    			user.setAdFlag(random);
		    			user.setPassword("");
		    			userDao.getDao().update(user);
		    			userDao.getDao().flush();
		    			
		    			//用户的prefix发生了编号
		        		List<PartyEntity> relationPartyEntitys=partyEntityDao.getPartyEntityListByRefIdAndPartyEntityTypes(user.getId(), new String[]{"user"},true);
		        		
		        		if(relationPartyEntitys==null || relationPartyEntitys.size()<=0){
		        			
		        			PartyEntity rootEntity=partyEntitys.get(0);
		        			PartyEntity partyEntity=new PartyEntity();
		            		partyEntity.setName(fileCatalog.getDescription());
		            		partyEntity.setShortName(fileCatalog.getDescription());
		            		partyEntity.setPartyTypeId(6L);
		            		partyEntity.setRefId(user.getId());
		            		partyEntity.setStatus(PartyEntity.STATUS_ENABLE);
		            		partyEntity.setEntityType(PartyEntity.ENTITY_TYPE);
		            		partyEntity.setNamePrefix(rootEntity.getNamePrefix()+fileCatalog.getDescription()+"-");
		            		partyEntityDao.getDao().save(partyEntity);
		            		partyEntityDao.getDao().flush();
		            		partyEntity.setPrefix(rootEntity.getPrefix()+partyEntity.getId()+"-");
		            		partyEntityDao.getDao().update(partyEntity);
		            		partyEntityDao.getDao().flush();
		            		//关系表
		            		PartyStruct partyStruct=new PartyStruct();
		            		partyStruct.setChildEntityId(partyEntity.getId());
		            		partyStruct.setParentEntityId(rootEntity.getId());
		            		partyStruct.setPartyStructTypeId(1L);
		            		partyStructDao.getDao().save(partyStruct);
		            		
		        		}else{
		        			//获取上级名称，对应修改名称
		        			PartyEntity rootEntity=partyEntitys.get(0);
		        			PartyEntity relationPartyEntity=relationPartyEntitys.get(0);
		        			relationPartyEntity.setEntityType(PartyEntity.ENTITY_TYPE);
		        			relationPartyEntity.setStatus(PartyEntity.STATUS_ENABLE);
		        			relationPartyEntity.setName(fileCatalog.getDescription());
		        			relationPartyEntity.setShortName(fileCatalog.getDescription());
		        			relationPartyEntity.setNamePrefix(rootEntity.getNamePrefix()+fileCatalog.getDescription()+"-");
		        			relationPartyEntity.setPrefix(rootEntity.getPrefix()+relationPartyEntity.getId()+"-");
		        			partyEntityDao.getDao().update(relationPartyEntity);
		            		partyEntityDao.getDao().flush();
		        		}
		    		}else{
		    			user.setRealName(fileCatalog.getDescription());
		    			if(!"root".equals(adSetting.getExtendName())){
		    				user.setLoginname(fileCatalog.getsAMAccountName()+"@"+adSetting.getExtendName());
		    			}
		    			user.setDistinguishedName(fileCatalog.getDistinguishedName());
		    			user.setObjectGuid(fileCatalog.getObjectGUID());
		    			user.setStatus(User.STATUS_ENABLE);
		    			user.setExtend(adSetting.getExtendName());
		    			user.setEntityType(PartyEntity.ENTITY_TYPE);
		    			user.setAdFlag(random);
		    			user.setPassword("");
		    			user.setState("0");
		    			userDao.getDao().save(user);
		        		if(partyEntitys!=null&&partyEntitys.size()>0){
		        			//快捷表
		        			PartyEntity rootEntity=partyEntitys.get(0);
		        			PartyEntity partyEntity=new PartyEntity();
		            		partyEntity.setName(fileCatalog.getDescription());
		            		partyEntity.setShortName(fileCatalog.getDescription());
		            		partyEntity.setPartyTypeId(6L);
		            		partyEntity.setStatus(PartyEntity.STATUS_ENABLE);
		            		partyEntity.setEntityType(PartyEntity.ENTITY_TYPE);
		            		partyEntity.setRefId(user.getId());
		            		partyEntity.setNamePrefix(rootEntity.getNamePrefix()+fileCatalog.getDescription()+"-");
		            		partyEntityDao.getDao().save(partyEntity);
		            		partyEntityDao.getDao().flush();
		            		partyEntity.setPrefix(rootEntity.getPrefix()+partyEntity.getId()+"-");
		            		partyEntityDao.getDao().update(partyEntity);
		            		partyEntityDao.getDao().flush();
		            		//关系表
		            		PartyStruct partyStruct=new PartyStruct();
		            		partyStruct.setChildEntityId(partyEntity.getId());
		            		partyStruct.setParentEntityId(rootEntity.getId());
		            		partyStruct.setPartyStructTypeId(1L);
		            		partyStructDao.getDao().save(partyStruct);
		        		}
		    		}
		    	}
	    
	    	 	
	    }
	
	  /**
     * 部门人员
     */
    public void saveOrUpdate(List<FileCatalog> fileCatalogs,Dept dept,String random,AdSetting adSetting){
    	ICommonService iCommonService=App.getBean(ICommonService.class,
				"commonService");
    	    List<PartyEntity> partyEntitys=partyEntityDao.getPartyEntityListByRefIdAndPartyEntityTypes(dept.getId(), new String[]{"department"},true);
    	 	for(FileCatalog fileCatalog:fileCatalogs){
	    		User user=new User();
	    		//查找是否创建过该公司
	    		List<User>  users=iCommonService.findByHQL(User.class, "from User y where y.objectGuid =?" ,fileCatalog.getObjectGUID());
	    		if(users!=null && users.size()>0){
	    			user=users.get(0);
	    			user.setRealName(fileCatalog.getDescription());
	    			if(!"root".equals(adSetting.getExtendName())){
	    				user.setLoginname(fileCatalog.getsAMAccountName()+"@"+adSetting.getExtendName());
	    			}else{
	    				user.setLoginname(fileCatalog.getsAMAccountName());
	    			}
	    			
	    			user.setDistinguishedName(fileCatalog.getDistinguishedName());
	    			user.setObjectGuid(fileCatalog.getObjectGUID());
	    			user.setStatus(User.STATUS_ENABLE);
	    			user.setEntityType(PartyEntity.ENTITY_TYPE);
	    			user.setExtend(adSetting.getExtendName());
	    			user.setAdFlag(random);
	    			user.setPassword("");
	    			userDao.getDao().update(user);
	    			userDao.getDao().flush();
	        		List<PartyEntity> relationPartyEntitys=partyEntityDao.getPartyEntityListByRefIdAndPartyEntityTypes(user.getId(), new String[]{"user"},true);
	        		if(relationPartyEntitys==null || relationPartyEntitys.size()<=0){
	        			
	        			PartyEntity rootEntity=partyEntitys.get(0);
	        			PartyEntity partyEntity=new PartyEntity();
	            		partyEntity.setName(fileCatalog.getDescription());
	            		partyEntity.setShortName(fileCatalog.getDescription());
	            		partyEntity.setPartyTypeId(6L);
	            		partyEntity.setRefId(user.getId());
	            		partyEntity.setStatus(PartyEntity.STATUS_ENABLE);
	            		partyEntity.setEntityType(PartyEntity.ENTITY_TYPE);
	            		partyEntity.setNamePrefix(rootEntity.getNamePrefix()+fileCatalog.getDescription()+"-");
	            		partyEntityDao.getDao().save(partyEntity);
	            		partyEntityDao.getDao().flush();
	            		partyEntity.setPrefix(rootEntity.getPrefix()+partyEntity.getId()+"-");
	            		partyEntityDao.getDao().update(partyEntity);
	            		partyEntityDao.getDao().flush();
	            		//关系表
	            		PartyStruct partyStruct=new PartyStruct();
	            		partyStruct.setChildEntityId(partyEntity.getId());
	            		partyStruct.setParentEntityId(rootEntity.getId());
	            		partyStruct.setPartyStructTypeId(1L);
	            		partyStructDao.getDao().save(partyStruct);
	        		}else{
	        			//获取上级名称，对应修改名称
	        			PartyEntity rootEntity=partyEntitys.get(0);
	        			PartyEntity relationPartyEntity=relationPartyEntitys.get(0);
	        			relationPartyEntity.setEntityType(PartyEntity.ENTITY_TYPE);
	        			relationPartyEntity.setStatus(PartyEntity.STATUS_ENABLE);
	        			relationPartyEntity.setName(fileCatalog.getDescription());
	        			relationPartyEntity.setShortName(fileCatalog.getDescription());
	        			
	        			log.info("==prefixName==="+fileCatalog.getDescription()+"===="+rootEntity.getNamePrefix()+fileCatalog.getDescription()+"-");
	        			relationPartyEntity.setNamePrefix(rootEntity.getNamePrefix()+fileCatalog.getDescription()+"-");
	        			relationPartyEntity.setPrefix(rootEntity.getPrefix()+relationPartyEntity.getId()+"-");
	        			
	        			log.info("==prefix=="+rootEntity.getPrefix()+relationPartyEntity.getId()+"-");
	        			partyEntityDao.getDao().update(relationPartyEntity);
	            		partyEntityDao.getDao().flush();
	        		}
	    		}else{
	    			user.setRealName(fileCatalog.getDescription());
	    			if(!"root".equals(adSetting.getExtendName())){
	    				user.setLoginname(fileCatalog.getsAMAccountName()+"@"+adSetting.getExtendName());
	    			}
	    			user.setDistinguishedName(fileCatalog.getDistinguishedName());
	    			user.setObjectGuid(fileCatalog.getObjectGUID());
	    			user.setStatus(User.STATUS_ENABLE);
	    			user.setExtend(adSetting.getExtendName());
	    			user.setEntityType(PartyEntity.ENTITY_TYPE);
	    			user.setAdFlag(random);
	    			user.setPassword("");
	    			user.setState("0");
	    			userDao.getDao().save(user);
	        		if(partyEntitys!=null&&partyEntitys.size()>0){
	        			//快捷表
	        			PartyEntity rootEntity=partyEntitys.get(0);
	        			PartyEntity partyEntity=new PartyEntity();
	            		partyEntity.setName(fileCatalog.getDescription());
	            		partyEntity.setShortName(fileCatalog.getDescription());
	            		partyEntity.setPartyTypeId(6L);
	            		partyEntity.setStatus(PartyEntity.STATUS_ENABLE);
	            		partyEntity.setEntityType(PartyEntity.ENTITY_TYPE);
	            		partyEntity.setRefId(user.getId());
	            		partyEntity.setNamePrefix(rootEntity.getNamePrefix()+fileCatalog.getDescription()+"-");
	            		partyEntityDao.getDao().save(partyEntity);
	            		partyEntityDao.getDao().flush();
	            		partyEntity.setPrefix(rootEntity.getPrefix()+partyEntity.getId()+"-");
	            		partyEntityDao.getDao().update(partyEntity);
	            		partyEntityDao.getDao().flush();
	            		//关系表
	            		PartyStruct partyStruct=new PartyStruct();
	            		partyStruct.setChildEntityId(partyEntity.getId());
	            		partyStruct.setParentEntityId(rootEntity.getId());
	            		partyStruct.setPartyStructTypeId(1L);
	            		partyStructDao.getDao().save(partyStruct);
	        		}
	    		}
    	}
    }
}
