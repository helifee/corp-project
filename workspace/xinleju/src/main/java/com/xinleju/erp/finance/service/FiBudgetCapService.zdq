package com.xinleju.erp.finance.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.finance.dao.FiBudgetCapDao;
import com.xinleju.erp.finance.models.FiAccountCaption;
import com.xinleju.erp.finance.models.FiBudgetCap;
import com.xinleju.erp.finance.models.FiCashFlowCase;
import com.xinleju.erp.finance.utils.ExcelHandlerUtil;
import com.xinleju.erp.finance.utils.IExcelHandler;
import com.xinleju.erp.form.utils.DbType;
import com.xinleju.erp.frame.dto.FiBudgetCapDTO;

@Service
public class FiBudgetCapService extends BaseService implements IExcelHandler{
	
	@Autowired
	private FiBudgetCapDao fiBudgetCapDao;
	@Autowired
	private JdbcTemplate jt;
	/**
	 * 根据预算编码获取一条记录
	 * @param code
	 * @param status
	 * @return
	 */
	public FiBudgetCap getFiBudgetCapByCode(String code,String status,Long companyId,Long accountSetId){
		String hql="from FiBudgetCap where code='"+code+"' and status='"+status+"' ";
		if(companyId != null){
			hql += "and companyId="+companyId;
		}
		if(accountSetId!=null){
			hql += "and accountSetId="+accountSetId;
		}
		FiBudgetCap fbc = getDao().findFirstByHQL(FiBudgetCap.class, hql);
		return fbc;
	}
	
	/**
	 * 根据财务编码获取一条记录
	 * @param code
	 * @param status
	 * @return
	 */
	public FiBudgetCap getFiBudgetCapByAccCode(String accountCode,String status,Long sysId,Long accountSetId){
		String hql="from FiBudgetCap where accountCapCode='"+accountCode+"' and status='"+status+"' and sysId="+sysId +" and accountSetId="+accountSetId;
		FiBudgetCap fbc = getDao().findFirstByHQL(FiBudgetCap.class, hql);
		return fbc;
	}
	
	/**
	 * 根据ID获取FiBudgetCap
	 * @param code
	 * @return
	 */
	public FiBudgetCap getFiBudgetCapById(Long id){
		return getDao().getById(FiBudgetCap.class, id);
	}
	
	/**
	 * 根据账套id获得预算科目
	 * 
	 * @param accountSetId
	 * @param status
	 * @return
	 */
	public List<FiBudgetCap> getFiBudgetCapList(Long accountSetId, String status,Long sysId) {
		return fiBudgetCapDao.getFiBudgetCapList(accountSetId, status,sysId);
	}

	/**
	 * 根据账套id获得预算科目的dto
	 * 
	 * @param accountSetId
	 * @param status
	 * @return
	 */
	public List<FiBudgetCapDTO> getFiBudgetCapDTOList(Long accountSetId, String status,Long sysId) {
		List<FiBudgetCapDTO> list = fiBudgetCapDao.getFiBudgetCapDTOList(accountSetId, status,sysId);
		return list;
	}

	
	public void saveOrUpdate(FiBudgetCap fiBudgetCap) {
		getDao().saveOrUpdate(fiBudgetCap);
	}

	/**
	 * 删除预算科目
	 * 
	 * @param fiAccountCaption
	 */
	public void delete(FiBudgetCap fiBudgetCap) {
		getDao().delete(fiBudgetCap);
	}

	/**
	 * excel页签名
	 * @return
	 */
	@Override
	public String getSheetName() {
		// TODO Auto-generated method stub
		return "预算科目";
	}
	/**
	 * 导出的excel字段名称
	 * @return
	 */
	@Override
	public String[] getHeadItemsNameAry() {
		// TODO Auto-generated method stub
		//id,code,name,account_cap_code,account_cap_name,account_cap_id,cash_flow_code,cash_flow_name,parentid,sys_id，bid
		String[] str = {"id","预算科目编码","预算科目名称","财务科目编码","财务科目名称","财务科目id","现金流量项目编码","现金流量项目名称","parentid","所属系统","在业务系统id","账套id"};
		return str;
	}

	/**
	 * 导出的excel字段属性名，class中必须存在此属性
	 * @return
	 */
	@Override
	public String[] getHeadItemsCodeAry() {
		// TODO Auto-generated method stub
		String[] str = {"id","code","name","accountCapCode","accountCapName","accountCapId","cashFlowCode","cashFlowName","parentId","sysId","bid","accountSetId"};
		return str;
	}

	/**
	 * 导出的excel字段在表格中占的宽度，与code一一对应，默认100，如不想显示比如ID字段，可设置为0。
	 * @return
	 */
	@Override
	public Integer[] getHeadItemsLength() {
		// TODO Auto-generated method stub
		Integer[] lengths = { 100, 100, 100, 100, 100,100, 100, 100, 100, 100,100,100};
		return lengths;
	}

	/**
	 * 导出字段在excel中是否红色显示 <br/> true:是（字段值不导出），false：否，null：红色、且字段值导出
	 * @return
	 */
	@Override
	public Boolean[] getHeadItemsColor() {
		// TODO Auto-generated method stub
		Boolean[] bool = { false, false, false, false, false,false, false, false, false, false,false,false};
		return bool;
	}

	/**
	 * 导出的excel实体类名
	 * @return
	 */
	@Override
	public Class<?> getEntityClass() {
		// TODO Auto-generated method stub
		return FiBudgetCap.class;
	}

	/**
	 * 导出到excel的具体数据
	 * @return
	 */
	@Override
	public List<?> getEntityList(IExcelHandler handler,String accountSetCode,long sysId,Long accountSetId,Long companyId) {
		// TODO Auto-generated method stub
		try{
			FiBudgetCapService fiBudgetCapService = (FiBudgetCapService)handler;
			List<FiBudgetCap> fiBudgetCapDTOs = null;
			if (StringUtils.isNotBlank(accountSetCode))
				//System.out.println();
				fiBudgetCapDTOs = fiBudgetCapService.getFiBudgetCapList(accountSetId, "1",sysId);
			
			return fiBudgetCapDTOs;
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 表格最上方的提示列表，为String集合，多条提示逐行显示
	 * @return
	 */
	@Override
	public List<String> getTipsList() {
		// TODO Auto-generated method stub
		List<String> tips = new ArrayList<String>();
		tips.add("说明：数据导出模板对格式有严格要求，请直接录入相关值，禁止增加或删除列，禁止删除此行及标题行，否则将导入失败！");
		return tips;
	}

	@Override
	public Map<String, Integer[]> getCellJoinMap() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?> getImpClass() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String[] getImportColumns() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String[] getImportHeadItemsName() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<?>[] getImportColumnsType() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Boolean[] getColsIsImp() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int importPr(String accountSetCode,String sysId,String companyCode,String accountSetId,HSSFSheet sheet,Long companyId){
		int rowNum = sheet.getLastRowNum();// 行  
    	try{
    		String oldAccountSetId = "";
    		String oldSysId = "";
    		if(DbType.getType().contains("dbo.")){
    			jt.execute("SET IDENTITY_INSERT [dbo].[fi_accountcap_budgetcap] ON;");
    		}
			for(int k=2;k<=rowNum;k++){
	    		HSSFRow hssfRow = sheet.getRow(k);
	    		if (hssfRow == null) {
					continue;
				}
	    		oldAccountSetId = hssfRow.getCell(11)+"";
	    		if(oldAccountSetId.equals(accountSetId))
	    			return 1;
	    		oldSysId = hssfRow.getCell(9)+"";
	    		Long parentId = null;
	    		if(StringUtils.isNotBlank(hssfRow.getCell(8)+"")){
	    			parentId = Long.valueOf(ExcelHandlerUtil.cutIdLength(ExcelHandlerUtil.getValue(hssfRow.getCell(8))+"")+accountSetId+sysId);
//	    			parentId = Long.valueOf(ExcelHandlerUtil.getValue(hssfRow.getCell(8))+"");
	    		}
	    		Long capId = null;
	    		if(StringUtils.isNotBlank(hssfRow.getCell(5)+"")){
	    			capId = Long.valueOf(ExcelHandlerUtil.cutIdLength(ExcelHandlerUtil.getValue(hssfRow.getCell(5))+"")+accountSetId);
	    		}
	    		Long id = null;
	    		if(StringUtils.isNotBlank(hssfRow.getCell(0)+"")){
	    			id = Long.valueOf(ExcelHandlerUtil.cutIdLength(ExcelHandlerUtil.getValue(hssfRow.getCell(0))+"")+accountSetId+sysId);
	    		}
	    		//"id","code","name","accountCapCode","accountCapName","accountCapId","cashFlowCode","cashFlowName","parentId","sysId","bid"
	    		if(DbType.getType().contains("dbo.")){
		    		String sql = "insert into fi_accountcap_budgetcap(id,code,name,account_cap_code,account_cap_name,account_cap_id,cash_flow_code,cash_flow_name,parent_id,create_date,status,account_set_code,account_set_id,sys_id,bid) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?);";
		    		jt.update(sql, id,ExcelHandlerUtil.getValue(hssfRow.getCell(1))+"",
		    				ExcelHandlerUtil.getValue(hssfRow.getCell(2))+"",ExcelHandlerUtil.getValue(hssfRow.getCell(3))+"",ExcelHandlerUtil.getValue(hssfRow.getCell(4))+"",
		    				capId,ExcelHandlerUtil.getValue(hssfRow.getCell(6))+"",ExcelHandlerUtil.getValue(hssfRow.getCell(7))+"",
		    				parentId,new Date(),1,accountSetCode,accountSetId,sysId,ExcelHandlerUtil.getValue(hssfRow.getCell(10))+"");
	    		}else{
	    			String sql = "insert IGNORE into fi_accountcap_budgetcap(id,code,name,account_cap_code,account_cap_name,account_cap_id,cash_flow_code,cash_flow_name,parent_id,create_date,status,account_set_code,account_set_id,sys_id,bid) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
		    		getDao().executeSQL(sql, id,ExcelHandlerUtil.getValue(hssfRow.getCell(1))+"",
		    				ExcelHandlerUtil.getValue(hssfRow.getCell(2))+"",ExcelHandlerUtil.getValue(hssfRow.getCell(3))+"",ExcelHandlerUtil.getValue(hssfRow.getCell(4))+"",
		    				capId,ExcelHandlerUtil.getValue(hssfRow.getCell(6))+"",ExcelHandlerUtil.getValue(hssfRow.getCell(7))+"",
		    				parentId,new Date(),1,accountSetCode,accountSetId,sysId,ExcelHandlerUtil.getValue(hssfRow.getCell(10))+"");
	    		}
	    	}
			if(DbType.getType().contains("dbo.")){
				jt.execute("SET IDENTITY_INSERT [dbo].[fi_accountcap_budgetcap] OFF");
			}
			return 2;
//			setParent(oldAccountSetId,accountSetId,oldSysId,sysId);
    	}catch(Exception e){
    		e.printStackTrace();
    		return 3;
    	}
	}
	
	/**
	 * 修改预算科目父id
	 * chc add 2016.6.29
	 */
	public void setParent(String oldAccountSetId,String accountSetId,String oldSysId,String sysId){
		String hql="from FiBudgetCap where accountSetId='"+oldAccountSetId+"' and sysId = "+oldSysId;
		String hql2="from FiBudgetCap where accountSetId='"+accountSetId+"' and sysId = "+sysId;
		List<FiBudgetCap> list = getDao().findByHQL(FiBudgetCap.class, hql);
		List<FiBudgetCap> list2 = getDao().findByHQL(FiBudgetCap.class, hql2);
		for(FiBudgetCap fc:list){
			Long pid = fc.getParentId();
			String code = fc.getCode();
			for(FiBudgetCap fc2:list2){
				String code2 = fc2.getCode();
				String capCode = fc2.getAccountCapCode();
				if(StringUtils.isNotBlank(code) && code.equals(code2)){
					if(pid != null){
						FiBudgetCap c = this.getFiBudgetCapById(pid);
						if(c != null){
							String pcode = c.getCode();
							String hql_="from FiBudgetCap where accountSetCode='"+accountSetId+"' and code ='"+pcode+"' and sysId="+sysId+" group by code";
							FiBudgetCap fbc = getDao().findFirstByHQL(FiBudgetCap.class, hql_);
							
							String hql1_="from FiAccountCaption where accountSetCode='"+accountSetId+"' and code ='"+capCode+"' group by code";
							FiAccountCaption fbc1 = getDao().findFirstByHQL(FiAccountCaption.class, hql1_);
							if(fbc1!=null){
								fc2.setAccountCapId(fbc1.getId());
							}
							if(fbc != null){
								Long pid_ = fbc.getId();
								fc2.setParentId(pid_);
								getDao().update(fc2);
							}
						}
					}
				}
			}
		}
	}
}
