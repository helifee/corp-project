package com.xinleju.erp.flow.service.api;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import javax.servlet.ServletContext;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;

import org.apache.commons.collections.map.LinkedMap;
import org.apache.commons.lang3.StringUtils;
import org.hibernate.FetchMode;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSON;
import com.xinleju.erp.base.app.bean.Page;
import com.xinleju.erp.base.app.config.App;
import com.xinleju.erp.base.app.service.ICommonService;
import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.base.utils.CollectionUtils;
import com.xinleju.erp.base.utils.EncodeUtils;
import com.xinleju.erp.base.utils.StringHelper;
import com.xinleju.erp.flow.bean.LoginInfo;
import com.xinleju.erp.flow.dao.impl.FiStoreDAO;
import com.xinleju.erp.flow.dao.impl.FlDAO;
import com.xinleju.erp.flow.dao.impl.GvDAO;
import com.xinleju.erp.flow.dao.impl.OpDAO;
import com.xinleju.erp.flow.dao.impl.OpRelationDAO;
import com.xinleju.erp.flow.dao.impl.OpRelationInsDAO;
import com.xinleju.erp.flow.dao.impl.ParticipantDAO;
import com.xinleju.erp.flow.dao.impl.WiDAO;
import com.xinleju.erp.flow.dao.impl.WpDAO;
import com.xinleju.erp.flow.flowutils.bean.AiBean;
import com.xinleju.erp.flow.flowutils.bean.AlBean;
import com.xinleju.erp.flow.flowutils.bean.AssignWi;
import com.xinleju.erp.flow.flowutils.bean.BizDataDTO;
import com.xinleju.erp.flow.flowutils.bean.CompleteWiResult;
import com.xinleju.erp.flow.flowutils.bean.FiBean;
import com.xinleju.erp.flow.flowutils.bean.FiHistoryBean;
import com.xinleju.erp.flow.flowutils.bean.FiInfoBean;
import com.xinleju.erp.flow.flowutils.bean.FiStepsBean;
import com.xinleju.erp.flow.flowutils.bean.FiStoreBean;
import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.flow.flowutils.bean.GiveBackResult;
import com.xinleju.erp.flow.flowutils.bean.GvBean;
import com.xinleju.erp.flow.flowutils.bean.Gvs;
import com.xinleju.erp.flow.flowutils.bean.OpBean;
import com.xinleju.erp.flow.flowutils.bean.OpRelationInsBean;
import com.xinleju.erp.flow.flowutils.bean.PageBean;
import com.xinleju.erp.flow.flowutils.bean.SimpleResult;
import com.xinleju.erp.flow.flowutils.bean.StartFiResult;
import com.xinleju.erp.flow.flowutils.bean.StepsAndHistoryBean;
import com.xinleju.erp.flow.flowutils.bean.StepsHistoryAndOpRelactionBean;
import com.xinleju.erp.flow.flowutils.bean.WiBean;
import com.xinleju.erp.flow.flowutils.bean.WithdrawResult;
import com.xinleju.erp.flow.flowutils.bean.WpBean;
import com.xinleju.erp.flow.flowutils.bean.WsURI;
import com.xinleju.erp.flow.flowutils.utils.OpType;
import com.xinleju.erp.flow.flowutils.utils.WsConstant;
import com.xinleju.erp.flow.flowutils.utils.WsConstant.WiType;
import com.xinleju.erp.flow.frameapi.domain.User;
import com.xinleju.erp.flow.models.Ac;
import com.xinleju.erp.flow.models.Ai;
import com.xinleju.erp.flow.models.Al;
import com.xinleju.erp.flow.models.Fi;
import com.xinleju.erp.flow.models.FiStore;
import com.xinleju.erp.flow.models.Fl;
import com.xinleju.erp.flow.models.Gv;
import com.xinleju.erp.flow.models.Op;
import com.xinleju.erp.flow.models.OpRelation;
import com.xinleju.erp.flow.models.OpRelationIns;
import com.xinleju.erp.flow.models.Wi;
import com.xinleju.erp.flow.models.Wp;
import com.xinleju.erp.flow.service.AiService;
import com.xinleju.erp.flow.service.AlService;
import com.xinleju.erp.flow.service.DesignerService;
import com.xinleju.erp.flow.service.FlowService;
import com.xinleju.erp.flow.service.FormFlowService;
import com.xinleju.erp.flow.service.IChangeWpUserService;
import com.xinleju.erp.flow.service.IConstantVar;
import com.xinleju.erp.flow.service.IFinishTypeService;
import com.xinleju.erp.flow.service.WpService;
import com.xinleju.erp.flow.service.api.extend.BaseAPI;
import com.xinleju.erp.flow.service.api.extend.BaseAPIService;
import com.xinleju.erp.flow.service.api.extend.LogService;
import com.xinleju.erp.flow.service.api.extend.dto.FuncDTO;
import com.xinleju.erp.flow.service.api.extend.dto.RoleDTO;
import com.xinleju.erp.flow.service.api.utils.ApiMsgUtils;
import com.xinleju.erp.flow.service.api.utils.ApiUtils;
import com.xinleju.erp.flow.service.api.utils.RoleUtils;
import com.xinleju.erp.flow.service.impl.ParallelChangeWpUserService;
import com.xinleju.erp.flow.service.impl.SerialChangeWpUserService;
import com.xinleju.erp.flow.service.impl.XorFinishTypeService;
import com.xinleju.erp.flow.utils.FlowConstant;
import com.xinleju.erp.flow.utils.FlowUtils;
import com.xinleju.erp.flow.utils.ParticipantUtils;
import com.xinleju.erp.form.utils.DbType;
import com.xinleju.erp.frame.dao.AppDao;
import com.xinleju.erp.frame.dao.RoleDao;
import com.xinleju.erp.frame.dao.UserDao;
import com.xinleju.erp.frame.models.PartyType;
import com.xinleju.erp.frame.models.Role;
import com.xinleju.erp.frame.service.RoleService;

/**
 * <p>
 * </p>
 * <p>
 * </p>
 * 
 * @author Administrator
 * @version $Id: FlowServerService.java 2340 2015-01-24 09:49:27Z zhongjun $
 * @since
 * @see
 */
@Service("FlowServerService")
public class FlowServerService  extends BaseService{

    /**
     * 流程日志
     */
    @Autowired 
    private AlService alService;
    
    /**
     * 流程设计Service
     */
    @Autowired
    private DesignerService designerService;

    /**
     * 环节实例Service
     */
    @Autowired
    private AiService aiService;

    /**
     * 流程Service
     */
    @Autowired
    private FlowService flowService;

    /**
     * 组织架构Service
     */
    @Autowired
    private OrgnAPIService orgnAPIService;

    /**
     * 工作组Service
     */
    @Autowired
    private WpService wpService;

    /**
     * 公共Service
     */
    @Autowired
    private ICommonService commonService;
    
    /**
     * 公共 jdbcTemplate
     */
    @Autowired
    private JdbcTemplate jdbcTemplate;
    
    
    @Autowired
    private FormFlowService formFlowService;

    /**
     * 工作组WpDAO
     */
    @Autowired
    private WpDAO wpDAO;

    /**
     * 工作组WiDAO
     */
    @Autowired
    private WiDAO wiDAO;

    /**
     * 操作
     */
    @Autowired
    private OpDAO opDAO;
    
    /**
     * 操作组实例dao
     */
    @Autowired
    private OpRelationInsDAO opRelationInsDAO;
    
    /**
     * 操作组dao
     */
    @Autowired
    private OpRelationDAO opRelationDAO;

    /**
     * 参与者DAO
     */
    @Autowired
    private ParticipantDAO participantDAO;

    /**
     * 流程DAO
     */
    @Autowired
    private FlDAO flDAO;

    /**
     * 全局变量DAO
     */
    @Autowired
    private GvDAO gvDAO;
    
    /**
     * 收藏dao
     */
    @Autowired
    private FiStoreDAO fiStoreDAO;

    /**
     * 流程状态改变接口
     */
    @Autowired
    private FiStatusChangeService fiStatusChangeService;
    
    @Autowired
	RoleService roleService;
    
    /**
     * 
     * <p>
     * 启动流程
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param flowCode
     *            流程编码
     * @param flowInsName
     *            流程实例名
     * @param userId
     *            启动人ID
     * @param gvsString
     *            全局变量
     * @param sc
     *            cxf上下文
     * 
     * @return FlowResult
     */
    @GET
    @Path(WsURI.URI_STARTFI)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    @LogService(moduleCode="SM",serviceName="启动流程",canRetry=false)
    public FlowResult<StartFiResult> startFi(@QueryParam("flowCode") String flowCode, @QueryParam("bizId") String bizId,  @QueryParam("bizVersion") String bizVersion,@QueryParam("flowInsName") String flowInsName,
            @QueryParam("userId") Long userId, @QueryParam("gvs") String gvsString, @QueryParam("bizDataString") String bizDataString, @Context ServletContext sc) {
        // Step0.准备数据存储
        FlowResult<StartFiResult> result = new FlowResult<StartFiResult>(StartFiResult.class);
        StartFiResult r = result.getResult();
        // 存在性校验
        Fl fl = flDAO.getFl(flowCode); //流程模板
        if (fl == null) {
            result.faliure();
            result.getDebugInfo().addErrDesc(ApiMsgUtils.MSG_FL_NOT_FOUND);
        }

        if (result.isSuccess()) {
            // Step1.构造全局变量gvMap
            Gvs gvs = Gvs.parseObject(gvsString);  //map 转换为gvs
            
            //转换为手机端对象
            List<BizDataDTO> bizDataDTOList = StringUtils.isNotBlank(bizDataString) ? JSON.parseObject(bizDataString, List.class) : new ArrayList<BizDataDTO>();
            
            // Step2.启动流程
            User user = orgnAPIService.getUserByUserId(userId);
            Fi fi = flowService.startFi(flowCode, StringUtils.isNotBlank(flowInsName) ? flowInsName : fl.getFlowName(), user, gvs, bizDataDTOList);
            //记录业务对象id及业务id
            fi.setBizId(bizId);
            fi.setServiceObjectDefineId(fl.getServiceObjectDefineId());
            fi.setFiCode(flowService.fixFiCode(fi, gvs.getValueMap()));
            fi.setFiCodeNum(flowService.fixFiCodeNum(fi));
            fi.setFiName(flowService.fixFiName(fi, gvs.getValueMap()));
            fi.setBizVersion(bizVersion);
            commonService.update(fi);
            getDao().flush();
            // Step3.开始活动实例
            Ai startAi = aiService.getStartAi(fi.getId());  //获取第一个活动节点实例
            
            if (startAi != null){
                Map<String, Object> transientVar = new HashMap<String, Object>();
                transientVar.put(IConstantVar.TVS_AI, startAi);
                
                flowService.tryStartAi(startAi, gvs, transientVar, false);  //启动第一个节点
                // 返回值3.首节点工作Id
                Wi startWi = commonService.findFirst(Wi.class, "aiId = ? and participant = ? and status = ?", new Object[] { startAi.getId(), userId,
                    Wi.STATUS_RUNNING });
                if (startWi != null) {
                    r.setStartAiId(startWi.getAiId());
                    r.setStartWiId(startWi.getId());
                    r.setStartWpId(startWi.getWpId());
                }
            } else {
                Ac ac = commonService.findFirst(Ac.class, "flowCode = ? and flowVersion = ? and isStart = 1"
                        , new Object[]{fl.getFlowCode(), fl.getFlowVersion()});
                flowService.tryStartNextAiByAc(fi.getId(), ac, gvs, new HashMap<String, Object>());
            }
            r.setKyList(fi.getFl().getKyList());
            r.setReadUsers(fi.getReadUsers());
            r.setFiId(fi.getId());

        }
        return result;
    }
    
    
    /**
     * 删除流程实例
     * @param fiId
     */
    public void deleteFi(Long fiId){

    	try {    		
    		//更新数据
    		getDao().executeSQL("update sm_msg g ,tf_wi i set g.op_type='RM' where g.msg_id="+DbType.getType()+"concat('"+"Wi_"+"',i.id) and i.fi_id= ? ", new Object[]{fiId});
    		getDao().execute("delete Wi where flId = ?  ",  fiId);
    		getDao().execute("delete Wp where fiId = ? and parentWpId is not null ",  fiId);
         	getDao().execute("delete Wp where fiId = ?",  fiId);
        	getDao().execute("delete Ai where fiId = ?",  fiId);
        	getDao().execute("delete Fi where id = ?",  fiId);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}

        getDao().flush();
    }

    /**
     * 
     *〈简述〉
     *〈详细描述〉
     * @author jun
     * @param oldFi
     * @param userId
     * @param gvsString
     * @param sc
     * @return
     */
    @LogService(moduleCode="SM",serviceName="重新启动被退回的流程",canRetry=false)
    public FlowResult<StartFiResult> restartBackedFi(Fi oldFi, Long userId, String gvsString, String bizDataString, ServletContext sc) {
        // Step0.准备数据存储
        FlowResult<StartFiResult> result = new FlowResult<StartFiResult>(StartFiResult.class);
        StartFiResult r = result.getResult();
        if (result.isSuccess() && (null == oldFi || null == oldFi.getId())) {
            result.faliure();
            result.getDebugInfo().addErrDesc(ApiMsgUtils.MSG_FI_NOT_FOUND);
        }
        String flowCode = "";
        String flowInsName = "";
        String bizId = "";
        Long serviceObjectDefineId = null;
        Fl fl = null;
        if (result.isSuccess()){
            fl = oldFi.getFl();
            if (null == fl || null == fl.getId()){
                fl = commonService.getById(Fl.class, oldFi.getFlId());
            }
            flowCode = oldFi.getFl().getFlowCode();
            flowInsName = oldFi.getFiName();
            bizId = oldFi.getBizId();
            serviceObjectDefineId = fl.getServiceObjectDefineId();
        }
        FlowUtils.checkParams(result, "flowCode", flowCode, "flowInsName", flowInsName, "bizId", bizId, "userId", userId);
        // 存在性校验
        fl = flDAO.getFl(flowCode);
        if (result.isSuccess() && fl == null) {
            result.faliure();
            result.getDebugInfo().addErrDesc(ApiMsgUtils.MSG_FI_NOT_FOUND);
        }
        if (result.isSuccess() && null != fl.getServiceObjectDefineId() && fl.getServiceObjectDefineId() != serviceObjectDefineId.intValue()) {
            result.faliure();
            result.getDebugInfo().addErrDesc(ApiMsgUtils.MSG_FL_NOT_FOUND);
        }
        if (result.isSuccess()) {
            // Step1.构造全局变量gvMap
            Gvs gvs = Gvs.parseObject(gvsString);
            
            List<BizDataDTO> bizDataDTOList = StringUtils.isNotBlank(bizDataString) ? JSON.parseObject(bizDataString, List.class) : new ArrayList<BizDataDTO>();
            
            gvs.add(WsConstant.WI_OP_ROLE, null, "发起角色");
            // Step2.启动流程
            User user = orgnAPIService.getUserByUserId(userId);
            Fi fi = flowService.startFi(flowCode, StringUtils.isNotBlank(flowInsName) ? flowInsName : fl.getFlowName(), user, gvs, bizDataDTOList);
            //处理历史流程
            fi.setIsBackedFi(1);
            fi.setGoodNodeIds(aiService.getGoodNodeIdsByFiId(fi.getId()));
            //记录业务对象id及业务id
            fi.setBizId(bizId);
            fi.setServiceObjectDefineId(fl.getServiceObjectDefineId());
            fi.setFiCode(flowService.fixFiCode(fi, gvs.getValueMap()));
            fi.setFiCodeNum(flowService.fixFiCodeNum(fi));
            fi.setFiName(flowService.fixFiName(fi, gvs.getValueMap()));
            fi.setRelatedFiIds((StringUtils.isNotBlank(oldFi.getRelatedFiIds()) ? oldFi.getRelatedFiIds() + "," : "") + oldFi.getId());
            commonService.update(fi);
            // Step3.开始活动实例
            Ai startAi = aiService.getStartAi(fi.getId());
            if (startAi != null){
                Map<String, Object> transientVar = new HashMap<String, Object>();
                transientVar.put(IConstantVar.TVS_AI, startAi);
                flowService.tryStartAi(startAi, gvs, transientVar, false);
                // 返回值3.首节点工作Id
                Wi startWi = commonService.findFirst(Wi.class, "aiId = ? and participant = ? and status = ?", new Object[] { startAi.getId(), userId, Wi.STATUS_RUNNING });
                if (startWi != null) {
                    r.setStartAiId(startWi.getAiId());
                    r.setStartWiId(startWi.getId());
                    r.setStartWpId(startWi.getWpId());
                }
            } else {
                Ac ac = commonService.findFirst(Ac.class, "flowCode = ? and flowVersion = ? and isStart = 1", new Object[]{fl.getFlowCode(), fl.getFlowVersion()});
                flowService.tryStartNextAiByAc(fi.getId(), ac, gvs, new HashMap<String, Object>());
            }
            r.setKyList(fi.getFl().getKyList());
            r.setReadUsers(fi.getReadUsers());
            r.setFiId(fi.getId());
        }
        return result;
    }
    
    /**
     * 
     * <p>
     * 重启流程
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiId
     *            流程实例ID
     * @param flowInsName
     *            流程实例名
     * @param userId
     *            用户ID
     * @param gvsString
     *            全局变量
     * @param sc
     *            ServletContext
     * @return FlowResult
     */
    @GET
    @Path(WsURI.URI_RESTARTFI)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.TEXT_PLAIN })
    public FlowResult<StartFiResult> restartFi(@QueryParam("fiId") Long fiId, @QueryParam("flowInsName") String flowInsName, @QueryParam("userId") Long userId,
            @QueryParam("gvs") String gvsString, @QueryParam("bizDataString") String bizDataString
            , @QueryParam("setStartRoleIdIsNull") String setStartRoleIdIsNull, @Context ServletContext sc) {

        FlowResult<StartFiResult> result = new FlowResult<StartFiResult>(StartFiResult.class);
        StartFiResult r = result.getResult();

        // 首节点工作
        Wi startWi = wiDAO.getStartWiByFiId(fiId);
        // 首节点工作.状态判断
        if (startWi != null && startWi.getStatus() == Wi.STATUS_COMPLETE) {
            result.faliure();
            result.getDebugInfo().addErrDesc(ApiMsgUtils.getMsg(ApiMsgUtils.KEY_WI_PROCESSED));
        }
        if (result.isSuccess()) {
            // Step2.构造全局变量gvMap
            Gvs gvs = Gvs.parseObject(gvsString);
            
            List<BizDataDTO> bizDataDTOList = StringUtils.isNotBlank(bizDataString) ? JSON.parseObject(bizDataString, List.class) : new ArrayList<BizDataDTO>();
            
            // Step3.重新构造流程
            Fi fi = commonService.getById(Fi.class, fiId);
            if(StringUtils.isNotEmpty(flowInsName)){
                fi.setFiName(flowInsName);
            }
            User user = orgnAPIService.getUserByUserId(userId);
            //如果是其他用户再次发起流程则重启startwp，打开人换人了打开流程表单
            if (startWi != null && startWi.getParticipant().intValue() != userId.intValue()) {
            	//setStartRoleIdIsNull ,重新发起角色，流程实例上设置发起角色
                if (!(StringUtils.isNotBlank(setStartRoleIdIsNull) && FlowConstant.STR_FALSE.equals(setStartRoleIdIsNull))){
                    //重置发起角色
                    gvs.add(WsConstant.WI_OP_ROLE, null, "发起角色");
                    fi.setStartRoleId(null);
                }
                flowService.startFi(fi, user, gvs, bizDataDTOList, true);
                wiDAO.startWp(startWi.getWp(), false);
                //过期之前的的wi（默认只有一个发起任务）
                wiDAO.overdueWi(startWi);
                //算出新的startwi
                startWi = wiDAO.getStartWiByFiId(fiId);
            } else {
                flowService.startFi(fi, user, gvs, bizDataDTOList, true);
            }
            // 返回值1.流程实例Id
            r.setFiId(fi.getId());

            r.setStartAiId(startWi.getAiId());
            r.setStartWiId(startWi.getId());
            r.setStartWpId(startWi.getWpId());
            if (null != fi.getFl()){
                r.setKyList(fi.getFl().getKyList());
            }
            r.setReadUsers(fi.getReadUsers());
        }

        return result;
    }

    /**
     * 
     * <p>
     * 获取指定FiId的序列集合和历程集合
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param stepFiIds
     *            序列FiIds
     * @param historyFiIds
     *            历程FiIds
     * @param fetchWis
     *            是否组装wis
     * @param includeChildWis
     *            是否组装子wis
     * @param includeChildWps
     *            是否组装子wps
     * @return StepsAndHistoryBean
     */
    @GET
    @Path(WsURI.URI_GET_STEPS_AND_HISTORY)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<StepsAndHistoryBean> getStepsAndHistorys(@QueryParam("stepFiIds") Long[] stepFiIds, @QueryParam("historyFiIds") Long[] historyFiIds
            , @QueryParam("fetchWis") boolean fetchWis, @QueryParam("includeChildWis") boolean includeChildWis
            , @QueryParam("includeChildWps") boolean includeChildWps) {
        FlowResult<StepsAndHistoryBean> result = new FlowResult<StepsAndHistoryBean>(StepsAndHistoryBean.class);
        StepsAndHistoryBean sh = result.getResult();

        List<FiStepsBean> fiSteps = getStepsOfAllFis(stepFiIds, fetchWis, includeChildWis, includeChildWps).getResult();
        List<FiHistoryBean> fiHistory = getHistoryOfAllFis(historyFiIds).getResult();

        sh.setFiSteps(fiSteps);
        sh.setFiHistory(fiHistory);

        return result;
    }
    /**
     * 获取指定FiId的序列集合和历程集合
     * @author jun
     * @param stepFiIds 序列FiIds
     * @param historyFiIds 序列FiIds
     * @param wiId 任务id
     * @param fetchWis
     *            是否组装wis
     * @param includeChildWis
     *            是否组装子wis
     * @param includeChildWps
     *            是否组装子wps
     * @return StepsHistoryAndOpRelactionBean
     */
    @GET
    @Path(WsURI.URI_GET_STEPS_HISTORY_AND_OPS)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<StepsHistoryAndOpRelactionBean> getStepsHistorysAndOps(@QueryParam("stepFiIds") Long[] stepFiIds
            , @QueryParam("historyFiIds") Long[] historyFiIds , @QueryParam("wiId") Long wiId
            , @QueryParam("fetchWis") boolean fetchWis, @QueryParam("includeChildWis") boolean includeChildWis
            , @QueryParam("includeChildWps") boolean includeChildWps) {
        FlowResult<StepsHistoryAndOpRelactionBean> result = new FlowResult<StepsHistoryAndOpRelactionBean>(StepsHistoryAndOpRelactionBean.class);
        StepsHistoryAndOpRelactionBean sh = result.getResult();
        List<FiStepsBean> fiSteps = this.getStepsOfAllFis(stepFiIds, fetchWis, includeChildWis, includeChildWps).getResult();
        List<FiHistoryBean> fiHistory = this.getHistoryOfAllFis(historyFiIds).getResult();
        Map<String, List<OpRelationInsBean>> userOpRelationsMap = this.getOp(wiId).getResult();
        sh.setFiSteps(fiSteps);
        sh.setFiHistory(fiHistory);
        sh.setUserOpRelationsMap(userOpRelationsMap);
        return result;
    }

    /**
     * @param stepFiIds 历史流程+执行流程
     * @param historyFiIds历史流程+执行流程
     * @param wiId
     * @param fetchWis
     * @param includeChildWis
     * @param includeChildWps
     * @return
     */
    public FlowResult<StepsHistoryAndOpRelactionBean> getStepsAndOps(Long[] stepFiIds
            , Long[] historyFiIds , Long wiId
            , boolean fetchWis, boolean includeChildWis
            , boolean includeChildWps) {
    	 System.out.println("KKKKKKK=*********==开始");
    	 Date startDate=new Date();
        FlowResult<StepsHistoryAndOpRelactionBean> result = new FlowResult<StepsHistoryAndOpRelactionBean>(StepsHistoryAndOpRelactionBean.class);
        StepsHistoryAndOpRelactionBean sh = result.getResult();
         startDate=new Date();
        System.out.println("getStepsAndOps=*********==开始");
        //获取当前流程的步骤
        List<FiStepsBean> fiSteps = this.getStepsOfAllFis(stepFiIds, fetchWis, includeChildWis, includeChildWps).getResult();
        System.out.println("getStepsAndOps==****="+(new Date().getTime()-startDate.getTime()));
      //  System.out.println("getOp=*********==开始");
        startDate=new Date();
        //获取当前流程操作
        Map<String, List<OpRelationInsBean>> userOpRelationsMap = this.getOp(wiId).getResult();
      //  System.out.println("getOp==****="+(new Date().getTime()-startDate.getTime()));

        sh.setFiSteps(fiSteps);
        sh.setFiHistory(new ArrayList<FiHistoryBean>());
        sh.setUserOpRelationsMap(userOpRelationsMap);
        System.out.println("KKKK结束==****="+(new Date().getTime()-startDate.getTime()));

        return result;
    }
    public FlowResult<StepsHistoryAndOpRelactionBean> getSteps(Long[] stepFiIds
            , Long[] historyFiIds , Long wiId
            , boolean fetchWis, boolean includeChildWis
            , boolean includeChildWps) {
        FlowResult<StepsHistoryAndOpRelactionBean> result = new FlowResult<StepsHistoryAndOpRelactionBean>(StepsHistoryAndOpRelactionBean.class);
        StepsHistoryAndOpRelactionBean sh = result.getResult();
        List<FiStepsBean> fiSteps = this.getStepsOfAllFis(stepFiIds, fetchWis, includeChildWis, includeChildWps).getResult();
        sh.setFiSteps(fiSteps);
        sh.setFiHistory(new ArrayList<FiHistoryBean>());
        sh.setUserOpRelationsMap(new HashMap<String, List<OpRelationInsBean>>());
        return result;
    }
    /**
     * 
     * <p>
     * 获取指定FiId的序列集合
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiIds
     *            流程实例ID  历史流程+当前流程
     * @param fetchWis
     *            是否组装wis
     * @param includeChildWis
     *            是否组装子wis
     * @param includeChildWps
     *            是否组装子wps
     * @return List<FiStepBean>
     */
    @GET
    @Path(WsURI.URI_GET_STEPS_OF_ALLFIS)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<List<FiStepsBean>> getStepsOfAllFis(@QueryParam("fiIds") Long[] fiIds, @QueryParam("fetchWis") boolean fetchWis
            , @QueryParam("includeChildWis") boolean includeChildWis, @QueryParam("includeChildWps") boolean includeChildWps){

        FlowResult<List<FiStepsBean>> result = new FlowResult<List<FiStepsBean>>();
     //   System.out.println("开始(getStepsOfAllFis)=====");
        Date t=new Date();
        // 每个审批
      //  System.out.println("开始(findAll)=====");
      //  List<FiStepsBean> fis = new LinkedList<FiStepsBean>();
        List<FiStepsBean> fis = new ArrayList<FiStepsBean>(); //流程历经
        List<Fi> fiList = commonService.findAll(Fi.class, "id in(" + StringHelper.join(fiIds, ",") + ")", null, "startTime desc");
     //   System.out.println("完成(findAll)====="+(new Date().getTime()-t.getTime()));
        
        
        Date t0=new Date();
        System.out.println("开始(getStepsByFiIds)=====");
        Map<Long,List<WpBean>> wpBeanListMap = this.getStepsByFiIds(fiIds, fetchWis, includeChildWis, includeChildWps).getResult();
        System.out.println("完成(getStepsByFiIds)====="+(new Date().getTime()-t0.getTime()));

        Date t1=new Date();
     //   System.out.println("开始(for)=====");
        for (Fi fi : fiList) {
            FiStepsBean fs = new FiStepsBean();
            fs.setFiId(fi.getId());
            fs.setFib(ApiUtils.buildFiBean(fi));
            List<WpBean> wps = wpBeanListMap.get(fi.getId());
            fs.setWps(wps);
            fis.add(fs);
        }
     //   System.out.println("完成(for)====="+(new Date().getTime()-t1.getTime()));

        result.setResult(fis);
    //    System.out.println("完成(getStepsOfAllFis)====="+(new Date().getTime()-t.getTime()));

        return result;
    }

    /**
     * 
     * <p>
     * 获取指定FiId的序列
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiId
     *            流程实例ID
     * @param fetchWis
     *            是否组装wis
     * @param includeChildWis
     *            是否组装子wis
     * @param includeChildWps
     *            是否组装子wps
     * @return 序列集合
     */
    @GET
    @Path(WsURI.URI_GET_STEPS)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<List<WpBean>> getSteps(@QueryParam("fiId") Long fiId , @QueryParam("fetchWis") boolean fetchWis
            , @QueryParam("includeChildWis") boolean includeChildWis, @QueryParam("includeChildWps") boolean includeChildWps) {

        FlowResult<List<WpBean>> result = new FlowResult<List<WpBean>>();
        List<WpBean> wps = new ArrayList<WpBean>();
        List<Wp> wpList = wpDAO.getAllValidWps(fiId,1);
        for (Wp wp : wpList) {
            //被退回的已经结束的流程，Create状态的不需要出来，只返回已结束的
            if(wp.getFi().getIsTerminate() != null && wp.getFi().getIsTerminate().intValue() == 1 && 
                    wp.getAi().getStatus() == Ai.STATUS_CREATED){
                continue;
            }
            WpBean wb = null;
            if (includeChildWis){
                wb = ApiUtils.buildWpBean(wp, fetchWis, includeChildWps, true);
                List<WiBean> linkedWis = new ArrayList<WiBean>();
                List<Wi> wiList = new ArrayList<Wi>();
                Set<Wi> wis = wp.getWis();
                for (Wi wi : wis){
                    wiList.addAll(this.getWiAndChildList(wi));
                }
                for (Wi wi : wiList){
                    WiBean wib = ApiUtils.buildWiBean(wi, true);
                    linkedWis.add(wib);
                }
                wb.setWis(linkedWis);
            } else {
                wb = ApiUtils.buildWpBean(wp, fetchWis, includeChildWps, true);
            }
            
            wps.add(wb);
        }
        result.setResult(wps);
        return result;
    }
    
    public FlowResult<Map<Long,List<WpBean>>> getStepsByFiIds(Long[] fiIds , boolean fetchWis
            , boolean includeChildWis, boolean includeChildWps) {
    	System.out.println("getAllValidWpsByFiIds==开始执行");
    	Date date =new Date();
        FlowResult<Map<Long,List<WpBean>>> result = new FlowResult<Map<Long,List<WpBean>>>();
        Map<Long,List<WpBean>> wpBeanListMap = new HashMap<Long, List<WpBean>>();
        List<WpBean> wps = null;
        
      
        Map<Long, List<Wp>> wpListMap = wpDAO.getAllValidWpsByFiIds(fiIds,1);  //获取有效 节点的父节点Wp
      //  System.out.println("getAllValidWpsByFiIds==开始完成"+(new Date().getTime()-date.getTime()));
        int i=0;
        for (Entry<Long, List<Wp>> entry : wpListMap.entrySet()){//获取流程的对应根节点Wp
        	Date star=new Date();
        	i++;
        	System.out.println("========="+i+"================for开始执行===");
        	wps = new ArrayList<WpBean>();
        	
        	int j=0;
        	for (Wp wp : entry.getValue()) {
        		//循环根节点
        		Date start=new Date();
            //	System.out.println(i+"for开始执行内部===");
                //被退回的已经结束的流程，Create状态的不需要出来，只返回已结束的
                if(wp.getFi().getIsTerminate() != null && wp.getFi().getIsTerminate().intValue() == 1 && 
                        wp.getAi().getStatus() == Ai.STATUS_CREATED){
                    continue;
                }
                WpBean wb = null;
                if (includeChildWis){
                    wb = ApiUtils.buildWpBean(wp, fetchWis, includeChildWps, true);//并且统计子的Wp,子Wi
                    List<WiBean> linkedWis = new ArrayList<WiBean>();
                    List<Wi> wiList = new ArrayList<Wi>();
                    Set<Wi> wis = wp.getWis();
                    //装在子Wi
                    for (Wi wi : wis){
                        wiList.addAll(this.getWiAndChildList(wi));
                    }
                    for (Wi wi : wiList){
                        WiBean wib = ApiUtils.buildWiBean(wi, true);  //重新构建Wi
                        linkedWis.add(wib);
                    }
                    
                    
                    wb.setWis(linkedWis);
                } else {
                    wb = ApiUtils.buildWpBean(wp, fetchWis, includeChildWps, true);
                }
                wps.add(wb);
                j++;
             //   System.out.println(j+"完成执行内部==="+(new Date().getTime()-start.getTime()));

            }
        	wpBeanListMap.put(entry.getKey(), wps);
            System.out.println(i+"========================完成执行==="+(new Date().getTime()-star.getTime()));

        }
       
        result.setResult(wpBeanListMap);
        
        System.out.println(i+"========================完成执行==="+(new Date().getTime()-date.getTime()));

        return result;
    }
    
    /**
     * 循环得到子wi
     * @author jun
     * @param wi wi
     * @return 子wi组
     */
    private List<Wi> getWiAndChildList(Wi wi){
        List<Wi> wisAll = new ArrayList<Wi>();
        wisAll.add(wi);
        wisAll.addAll(wiDAO.getWiListByPwpId(wi.getId()));
        return wisAll;
    }
    /**
     * 
     * <p>
     * 获取指定FiId集合对应的历程的集合
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiIds
     *            流程实例ID 集合
     * @return 历程集合
     */
    @GET
    @Path(WsURI.URI_GET_HISTORY_OF_ALLFIS)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<List<FiHistoryBean>> getHistoryOfAllFis(@QueryParam("fiIds") Long[] fiIds) {

        FlowResult<List<FiHistoryBean>> result = new FlowResult<List<FiHistoryBean>>();

        List<FiHistoryBean> fiHistory = new LinkedList<FiHistoryBean>();

        // 每个审批
        for (Long theFiId : fiIds) {

            FiHistoryBean fw = new FiHistoryBean();
            fw.setFiId(theFiId);
//            fs.setFib(ApiUtils.buildFiBean(fi));
            List<WiBean> wis = getHistory(theFiId).getResult();
            fw.setWis(wis);

            fiHistory.add(fw);
        }
        result.setResult(fiHistory);
        return result;
    }

    /**
     * 
     * <p>
     * 获取指定FiId的历程
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiId
     *            流程实例ID
     * @return 历程
     */
    @GET
    @Path(WsURI.URI_GET_HISTORY)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<List<WiBean>> getHistory(@QueryParam("fiId") Long fiId) {
        FlowResult<List<WiBean>> result = new FlowResult<List<WiBean>>();

        List<Wi> wiList = commonService.findAll(Wi.class, "fiId = ? and (status = ? or status = ?)",
                new Object[] { fiId, Wi.STATUS_COMPLETE, Wi.STATUS_RUNNING }, "completeTime asc", new String[] { "wp", "ac" });
        List<WiBean> wis = new LinkedList<WiBean>();

        for (Wi wi : wiList) {
            WiBean wb = ApiUtils.buildWiBean(wi, true);
            wis.add(wb);
        }
        result.setResult(wis);
        return result;
    }

    /**
     * 
     * <p>
     * 获得当前流程的所有Ai
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiId
     *            流程实例ID
     * @return AiList
     */
    @GET
    @Path(WsURI.URI_GET_AILIST)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<List<AiBean>> getAiList(@QueryParam("fiId") Long fiId) {
        FlowResult<List<AiBean>> result = new FlowResult<List<AiBean>>();

        List<Ai> aiList = commonService.findAll(Ai.class, "fiId = ? and (ac.isAuto = 0) and status in(0,1,2)", new Object[] { fiId }, "ac.tp asc,ac.sort asc");
        List<AiBean> aibList = new LinkedList<AiBean>();

        for (Ai ai : aiList) {
            AiBean aib = ApiUtils.buildAiBean(ai);
            aibList.add(aib);
        }
        result.setResult(aibList);

        return result;
    }
    /**
     * 
     * <p>
     * 获取Wi
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param wpId
     *            工作组ID
     * @param fetchWis
     *            是否组装wis
     * @param includeChildWps
     *            是否组装子wps
     * @return WpBean
     */
    @GET
    @Path(WsURI.URI_GET_WP)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<WpBean> getWp(@QueryParam("wpId") Long wpId, @QueryParam("fetchWis") boolean fetchWis
            , @QueryParam("includeChildWps") boolean includeChildWps) {
        FlowResult<WpBean> result = new FlowResult<WpBean>();
        Wp wp = commonService.getById(Wp.class, wpId, "ai", "ai.ac", "pwi");
        WpBean wb = ApiUtils.buildWpBean(wp, fetchWis, includeChildWps, true);
        result.setResult(wb);
        return result;
    }
    /**
     * 
     * <p>
     * 获取Wi
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param wiId
     *            工作ID
     * @return WiBean
     */
    @GET
    @Path(WsURI.URI_GET_WI)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<WiBean> getWi(@QueryParam("wiId") Long wiId) {
        FlowResult<WiBean> result = new FlowResult<WiBean>();

        Wi wi = commonService.getById(Wi.class, wiId, "ai", "ai.ac", "wp", "wp.pwi");
        WiBean wb = ApiUtils.buildWiBean(wi, true);

        
        Wp wp = wi.getWp();
        List<OpBean> opBeans = new ArrayList<OpBean>();

        List<Op> opList = opDAO.findOpList(wp.getOps());
        for (Op op : opList) {
            OpBean ob = ApiUtils.buildOpBean(op);
            opBeans.add(ob);
        }
        wb.getWp().setOps(opBeans);
        
        result.setResult(wb);

        return result;
    }

    /**
     * 
     * <p>
     * 获取Ai
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param aiId
     *            工作ID
     * @param includeCsUsers
     *            是否包括抄送人信息，这将花去更多的接口调用时间
     * @return AiBean
     */
    @GET
    @Path(WsURI.URI_GET_AI)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<AiBean> getAi(@QueryParam("aiId") Long aiId, @QueryParam("includeCsUsers") String includeCsUsers) {
        FlowResult<AiBean> result = new FlowResult<AiBean>();
        Ai ai = commonService.getById(Ai.class, aiId);

        AiBean aib = ApiUtils.buildAiBean(ai);

        if (StringHelper.parseBoolean(includeCsUsers)) {
            Map<String, Object> tvs = new HashMap<String, Object>();
            tvs.put(IConstantVar.TVS_AI, ai);
            tvs.put(IConstantVar.TVS_FI, ai.getFi());
            Gvs gvs = flowService.getGvs(ai.getFiId());
            List<User> csUsers = participantDAO.getPaticipantUsers(ai.getFiId(), ai.getAc().getCsList(), tvs, gvs);
            aib.setCsUsers(csUsers);
        }
        result.setResult(aib);
        return result;
    }

    /**
     * 
     * <p>
     * 获取Ai
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiId
     *            流程实例ID
     * @param outCode
     *            环节编码
     * @return AiBean
     */
    @GET
    @Path(WsURI.URI_GET_AI_BY_OUT_CODE)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<AiBean> getAiListByOutCode(@QueryParam("fiId") Long fiId, @QueryParam("outCode") String outCode) {
        FlowResult<AiBean> result = new FlowResult<AiBean>();
        Ai ai = commonService.findFirst(Ai.class, "fiId = ? and ac.outCode = ?", new Object[] { fiId, outCode });
        if (ai != null) {
            AiBean ab = ApiUtils.buildAiBean(ai);
            result.setResult(ab);
        } else {
            result.faliure();
            result.getDebugInfo().addErrDesc(ApiMsgUtils.getMsg(ApiMsgUtils.KEY_AI_NOT_FOUND_BY_OUTCODE));
        }

        return result;
    }

    /**
     * 
     * <p>
     * 获取Ai
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiId
     *            流程实例ID
     * @return FiBean
     */
    @GET
    @Path(WsURI.URI_GET_FI)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<FiBean> getFi(@QueryParam("fiId") Long fiId) {
        FlowResult<FiBean> result = new FlowResult<FiBean>(FiBean.class);

        FlowUtils.checkParams(result, "fiId", fiId);

        if (result.isSuccess()) {
            Fi fi = commonService.getById(Fi.class, fiId);
            FiBean ab = ApiUtils.buildFiBean(fi);
            result.setResult(ab);
        }

        return result;
    }

    /**
     * 
     * <p>
     * 结束工作
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param wiId
     *            工作Id
     * @param userId
     *            用户Id
     * @param userNote
     *            意见
     * @param opCode
     *            操作码
     * @param tvsString
     *            扩展
     * @param participantString 
     * @return CompleteWiResult
     */
    /**
     * @param wiId
     * @param userId
     * @param userNote
     * @param opCode
     * @param participantString
     * @param tvsString
     * @return
     */
    /**
     * @param wiId
     * @param userId
     * @param userNote
     * @param opCode
     * @param participantString
     * @param tvsString
     * @return
     */
    @GET
    @Path(WsURI.COMPLETE_WI)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<CompleteWiResult> completeWi(@QueryParam("wiId") Long wiId, @QueryParam("userId") Long userId, @QueryParam("userNote") String userNote,
            @QueryParam("opCode") String opCode, @QueryParam("participantString") String participantString, @QueryParam("tvs") String tvsString) {
        if (StringUtils.isNotBlank(userNote)){
            userNote = EncodeUtils.urlDecode(userNote);
        }
        if (StringUtils.isNotBlank(opCode)){
            opCode = EncodeUtils.urlDecode(opCode);
        }
        if (StringUtils.isNotBlank(participantString)){
            participantString = EncodeUtils.urlDecode(participantString);
        }
        
        FlowResult<CompleteWiResult> result = new FlowResult<CompleteWiResult>(CompleteWiResult.class);
        
        int status = commonService.findInt("select status from Wi where id = ?", wiId);
        
        User opUser = orgnAPIService.getUserByUserId(userId);
        Gvs _tvs = Gvs.parseObject(tvsString);
        
        if (status == Wi.STATUS_RUNNING) {

            User user = opUser;
            boolean SIGNAL_WP_OPERATOR_GO_SUB = FlowUtils.foundSignal(_tvs, WsConstant.SIGNAL_WP_OPERATOR, WsConstant.SIGNAL_WP_OPERATOR_GO_SUB); 
            
            Integer _assignType = FlowUtils.getAssignType(_tvs);  //串行1，并行0
            
            String _finishCtrl = FlowUtils.getFinishCtrl(_tvs); 
            
            int _wpType = FlowUtils.getWpType(_finishCtrl,_assignType);
            
            if (SIGNAL_WP_OPERATOR_GO_SUB){
                //完成本环节
            	  wiDAO.completeWi(wiId, opUser, userNote, opCode, participantString, WiType.LG.getCode(), null);
                
                //本环节的Ai
                Wi wi = commonService.getById(Wi.class, wiId, "ai"); 
         
                
                Ai ai = wi.getAi();
                //本环节Wi
                alService.logWi(wi);
                //获取流程变量
                Gvs gvs = gvDAO.getGvs(wi.getFiId());
                
                Map<String, Object> tvs = FlowUtils.joinMap(null, Gvs.getValueMapFromGvs(_tvs));
                
                tvs.put(IConstantVar.TVS_AI, ai);
                
                tvs.put(IConstantVar.TVS_WP, wi.getWp());
               
                
                String finishTypeClass = StringUtils.isNotEmpty(wi.getWp().getFinishCtrl()) ? wi.getWp().getFinishCtrl() : XorFinishTypeService.class.getName();
                if (finishTypeClass.equals(XorFinishTypeService.class.getName())){
                    IFinishTypeService ft = (IFinishTypeService) App.getBean(XorFinishTypeService.class);
                    ft.overdueWi(gvs, tvs);
                }
               
                
                //构建协办
                Wp wp = new Wp();
                
                wp.setPwiId(wiId);
                wp.setPwpId(wi.getWpId());
                
                wp.setOps("");
                wp.setPx(0);
                wp.setIsAi(0);
                
                //0,并行 1,串行
                wp.setAssignType(_assignType);
                wp.setFinishCtrl(_finishCtrl);
                wp.setWpType(_wpType);
                wp.setAiId(ai.getId());
                wp.setFiId(ai.getFiId());
                wp.setFi(ai.getFi());
                wp.setIsDeleted(0);

                if (opUser != null) {
                    wp.setCreatorUserId(wi.getParticipant());
                    wp.setCreatorLoginName(wi.getParticipantLoginName());
                    wp.setCreatorUserName(wi.getParticipantUserName());
                }
                
                wp.setParticipantsSelectStrategy(FlowConstant.PARTICIPANT_SELECT_ALWAYS);
                //岗位为空自动跳过
                boolean isAutoPassByCfgDoWhenNoUsersAtWp = FlowUtils.isAutoPassByCfgDoWhenNoUsersAtWp(ai.getFl());
                //岗位为空自动跳过
                wp.setIsAutoAsNoParticipants(isAutoPassByCfgDoWhenNoUsersAtWp ? 
                        FlowConstant.WP_IS_AUTO_PASS_WEHN_NO_PARTICIPANTS_YES : FlowConstant.WP_IS_AUTO_PASS_WEHN_NO_PARTICIPANTS_NO);
                
                wp.setAi(ai);
                wp.setTp(ai.getAc().getTp());
                String displayName = StringUtils.isNotBlank(opCode) ? opCode.substring(opCode.indexOf(";") + 1) : "";
                displayName = StringUtils.isNotBlank(displayName) && displayName.indexOf(":") > 0 ? displayName.substring(0, displayName.indexOf(":")) : displayName;
                if (null != displayName){
                    displayName.trim();
                }
                wp.setDisplayName(displayName);
                wp.setParticipantsDefine(participantString);
                wp.setParticipantsSelected(participantString);
                wp.setParticipants(participantString);
                wp.setAi(ai);
                
                commonService.saveOrUpdate(wp);
                
                wiDAO.startWp(wp, false);
                
                //需要创建新的待审节点
                /**
            	AssignWi assignWi = AssignWi.create(Wi.STATUS_RUNNING, WiType.ZC, wi.getWiCode(), "", "", null, "", "");
				assignWi.addParticipant(wi.getParticipant(), wi.getParticipantLoginName(),wi.getParticipantUserName());
				wiDAO.assignWi(false, wi.getWp(), assignWi, null, 0);
				**/
                
            } else {
            
            	
            	
                flowService.completeWi(wiId, user, userNote, opCode, participantString, Gvs.getValueMapFromGvs(_tvs));
            }
            
           
        } else {
            result.faliure();
            result.getDebugInfo().addErrDesc(ApiMsgUtils.getMsg(ApiMsgUtils.KEY_WI_PROCESSED));
        }

        return result;
    }

    /**
     * 
     * <p>
     * 退回工作
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param wiId
     *            当前工作
     * @param toWpId
     *            退回到toWpId
     * @param userId
     *            用户Id
     * @param userNote
     *            用户意见
     * @param opCode 
     *            操作码
     * @param back2Me
     *            指定Wp结束时直接到我
     * @param terminateFi
     *            是否需要结束当前流程
     * @param terminateCode
     *            流程结束类型
     * @return BackAiResult
     */
    @GET
    @Path(WsURI.URI_GIVEBACK)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<GiveBackResult> giveBack(@QueryParam("wiId") Long wiId, @QueryParam("toWpId") Long toWpId, @QueryParam("userId") Long userId
            , @QueryParam("userNote") String userNote, @QueryParam("opCode") String opCode, @QueryParam("back2Me") boolean back2Me
            , @QueryParam("terminateFi") boolean terminateFi, @QueryParam("terminateFi") String terminateCode) {
        FlowResult<GiveBackResult> result = new FlowResult<GiveBackResult>(GiveBackResult.class);
        FlowUtils.checkParams(result, "wiId", wiId, "toWpId", toWpId, "userId", userId, "opCode", opCode);
        if (StringUtils.isNotBlank(userNote)){
            userNote = EncodeUtils.urlDecode(userNote);
        }
        if (StringUtils.isNotBlank(opCode)){
            opCode = EncodeUtils.urlDecode(opCode);
        }
        if (result.isSuccess()) {
            List<Long> toWpIds = new ArrayList<Long>();
            toWpIds.add(toWpId);
            return this.giveBack(wiId, toWpIds.toArray(new Long[0]), userId, userNote, opCode, back2Me, terminateFi, terminateCode);
        }

        return result;
    }

    /**
     * 
     * <p>
     * 退回工作
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param wiId
     *            当前工作
     * @param toWpIds
     *            退回到toWpIds
     * @param userId
     *            用户Id
     * @param userNote
     *            用户意见
     * @param opCode
     *            操作码
     * @param back2Me
     *            指定Wp结束时直接到我
     * @param terminateFi
     *            是否需要结束当前流程
     * @param terminateCode
     *           流程结束类型
     * @return BackAiResult
     */
    private FlowResult<GiveBackResult> giveBack(Long wiId, Long[] toWpIds, Long userId, String userNote
            , String opCode, boolean back2Me, boolean terminateFi, String terminateCode) {
        FlowResult<GiveBackResult> result = new FlowResult<GiveBackResult>(GiveBackResult.class);

        // 工作状态检查
        if (result.isSuccess()) {

            int status = commonService.findInt("select status from Wi where id = ?", wiId);
            if (status != Wi.STATUS_RUNNING) {
                result.faliure();
                result.getDebugInfo().addErrDesc(ApiMsgUtils.getMsg(ApiMsgUtils.KEY_WI_PROCESSED));
            }
        }
        // 用户存在性检查
        User user = null;
        if (result.isSuccess()) {
            user = orgnAPIService.getUserByUserId(userId);
        }

        if (user == null) {
            result.faliure();
            result.getDebugInfo().addErrDesc(ApiMsgUtils.getMsg(ApiMsgUtils.KEY_OBJECT_NOTFOUNT, "User", userId));
        }

        // 退回到目的地
        List<Wp> wps = commonService.findAll(Wp.class, "id in (" + StringHelper.join(toWpIds, ",") + ")");
        //是否退回到发起节点
        boolean isBackToStartAi = false;
        Long startUserId=0L;
        // 检查状态
        for (Wp wp : wps) {
            int wpStatus = FlowUtils.getWpStatus(wp);
            if (wpStatus != Ai.STATUS_COMPLETE 
                    && (wp.getFi().getIsBackedFi() == null || wp.getFi().getIsBackedFi().intValue() ==0)) {
                result.faliure();
                result.getDebugInfo().addErrDesc(ApiMsgUtils.getMsg(ApiMsgUtils.KEY_WP_STATUS_ERR, wp.getDisplayName(), Ai.STATUS_COMPLETE, wpStatus));
            }
            if (null != wp.getAi() && null != wp.getAi().getAc() && 1 == wp.getAi().getAc().getIsStart()){
                isBackToStartAi = true;
                Wi wbe = formFlowService.getWi(wiId);
                startUserId= wbe.getFi().getStartUserId();
            }
        }
      
        if (result.isSuccess()) {
            Long newFiId = flowService.previousToWp(wps, wiId, user, opCode, userNote, back2Me);
            result.getResult().setFiId(newFiId);
            //是否需要结束流程
            if (terminateFi){
                flowService.terminateFi(commonService.findLong("select fiId from Wi where id = ?", wiId), null != terminateCode ? terminateCode : "", user);
            }
            if (isBackToStartAi){
                Fi fi = commonService.getById(Fi.class, commonService.findLong("select fiId from Wi where id = ?", wiId), new String[]{"fl", "fl.serviceObjectDefine"});
                App.getBean(FiStatusChangeService.class).statusChange(fi, WsConstant.FI_STATUS_CHANGE_TYPE_BH);
                formFlowService.chuanyueUsers(fi.getId(), startUserId.toString());
            }
        }
        return result;
    }
    /**
     * 
     * <p>
     * 退回工作
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiId 流程id
     * @param userId
     *            用户Id
     * @param userNote
     *            用户意见
     * @param opCode
     *            操作码
     * @param terminateFi
     *            是否需要结束当前流程
     * @param terminateCode
     *           流程结束类型
     * @return BackAiResult
     */
    public FlowResult<GiveBackResult> giveBack(Long fiId, Long userId, boolean terminateFi, String terminateCode) {
        FlowResult<GiveBackResult> result = new FlowResult<GiveBackResult>(GiveBackResult.class);
        // 工作状态检查
        if (result.isSuccess()) {
            int status = commonService.findInt("select status from Fi where id = ?", fiId);
            if (status != Wi.STATUS_RUNNING) {
                result.faliure();
                result.getDebugInfo().addErrDesc("流程不是运行状态，无法退回！");
            }
        }
        // 用户存在性检查
        User user = null;
        if (result.isSuccess()) {
            user = orgnAPIService.getUserByUserId(userId);
        }
        if (user == null) {
            result.faliure();
            result.getDebugInfo().addErrDesc(ApiMsgUtils.getMsg(ApiMsgUtils.KEY_OBJECT_NOTFOUNT, "User", userId));
        }
        // 退回到目的地
        List<Wp> wps = commonService.findAll(Wp.class, " fiId = ? and ai.ac.isStart = 1", new Object[] {fiId});
        // 检查状态
        for (Wp wp : wps) {
            int wpStatus = FlowUtils.getWpStatus(wp);
            if (wpStatus != Ai.STATUS_COMPLETE 
                    && (wp.getFi().getIsBackedFi() == null || wp.getFi().getIsBackedFi().intValue() ==0)) {
                result.faliure();
                result.getDebugInfo().addErrDesc(ApiMsgUtils.getMsg(ApiMsgUtils.KEY_WP_STATUS_ERR, wp.getDisplayName(), Ai.STATUS_COMPLETE, wpStatus));
            }
        }
        if (result.isSuccess()) {
            Long newFiId = flowService.previousToWp(wps, null, user, "", "", false);
            result.getResult().setFiId(newFiId);
            //是否需要结束流程
            if (terminateFi){
                flowService.terminateFi(fiId, null != terminateCode ? terminateCode : "", user);
            }
            Fi fi = commonService.getById(Fi.class,fiId , new String[]{"fl", "fl.serviceObjectDefine"});
            App.getBean(FiStatusChangeService.class).statusChange(fi, WsConstant.FI_STATUS_CHANGE_TYPE_BH);
        }
        return result;
    }
    /**
     * 
     * <p>
     * 标记工作为已读
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param wiId
     *            工作Id
     * @return SimpleResult
     */
    @GET
    @Path(WsURI.URI_MARK_WI_ISREAD)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<SimpleResult> markWiIsRead(@QueryParam("wiId") Long wiId) {

        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>();

        commonService.execute("update Wi set isRead = ?,readDate = ? where id = ?", new Object[] { 1, new Date(), wiId });

        return result;
    }

    /**
     * 
     * <p>
     * 在指定的Wp分配工作
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param wpId
     *            工作组
     * @param assignWi
     *            分配工作
     * @param logWi
     *            日志工作
     * @return SimpleResult
     */
    @GET
    @Path(WsURI.URI_ASSIGNWI_BY_WP)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<SimpleResult> assignWiByWp(@QueryParam("wpId") Long wpId, @QueryParam("assignWi") AssignWi assignWi
            , @QueryParam("logWi") AssignWi logWi) {

        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>();

        Wp wp = wpDAO.getWpById(wpId);
        Long opWiId = null;
        // 记录操作历程
        if (logWi != null) {
            opWiId = flowService.assignWi(wp, logWi, 0).get(0).getId();
        }

        // 执行转发,发送待办
        List<Wi> wis = flowService.assignWi(wp, assignWi, 0);

        // 记录opWiId,用于特殊操作，譬如 收回
        if (opWiId != null && wis.size() > 0) {
            for (Wi wi : wis) {
                wi.setOpWiId(opWiId);
                commonService.update(wi);
            }
        }
        return result;
    }

    /**
     * 
     * <p>
     * 在指定的Wp分配工作
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiId
     *            流程实例ID
     * @param assignWi
     *            分配工作
     * @param logWi
     *            日志工作
     * @return SimpleResult
     */
    @GET
    @Path(WsURI.URI_ASSIGNWI_BY_FI)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<SimpleResult> assignWiByFi(@QueryParam("fiId") Long fiId, @QueryParam("assignWi") AssignWi assignWi
            , @QueryParam("logWi") AssignWi logWi) {

        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>();
        List<Wp> wpList = commonService.findAll(Wp.class, "fiId = ? and ai.status != ? and isDeleted = 0 and pwpId is null and parentWpId is null"
                , new Object[] { fiId, Ai.STATUS_OVERDUE }, "tp asc,px asc");
        Wp wp = wpList.get(0);
        // 记录操作历程
        if (logWi != null) {
            flowService.assignWi(wp, logWi, 0);
        }

        // 执行转发,发送待办
        flowService.assignWi(wp, assignWi, 0);

        return result;
    }

    /**
     * 
     * <p>
     * 修改参与人
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param wpId
     *            Wp.id
     * @param opUsers
     *            替换的用户
     * @return SimpleResult
     */
    @GET
    @Path(WsURI.URI_OVERRIDE_PARTICIPANTS)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<SimpleResult> overrideParticipants(@QueryParam("wpId") Long wpId, @QueryParam("opUsers") String opUsers) {
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>(SimpleResult.class);
        if (StringUtils.isNotBlank(opUsers)){
            opUsers = EncodeUtils.urlDecode(opUsers);
        }
        Wp wp = wpDAO.getWpById(wpId);
        int wpStatus = FlowUtils.getWpStatus(wp);
        if (wpStatus == 0) {
            Long fiId = commonService.findLong("select fiId from Wp where id = ?", wpId);
            flowService.overrideParticipants(wpId, fiId, opUsers);
        } else {
            result.faliure();
            result.getDebugInfo().addErrDesc(ApiMsgUtils.getMsg(ApiMsgUtils.KEY_WP_STATUS_ERR, wp.getDisplayName(), 0, wpStatus));
        }

        return result;
    }

    /**
     * 
     * <p>
     * 终止流程
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiId
     *            流程Id
     * @param terminateCode
     *            终止编码
     * @param opUserId
     *            操作人Id
     * @param relatedFiIds
     *            相关的Fi.id,同时被终止
     * @return SimpleResult
     */
    @GET
    @Path(WsURI.URI_TERMINATE_FI)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<SimpleResult> terminateFi(@QueryParam("fiId") Long fiId, @QueryParam("terminateCode") String terminateCode,
            @QueryParam("opUserId") Long opUserId, @QueryParam("relatedFiIds") Long[] relatedFiIds) {
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>();
        FlowUtils.checkParams(result, "fiId", fiId);
        if (result.isSuccess()){
        	Fi fi = commonService.getById(Fi.class, fiId, new String[]{"fl", "fl.serviceObjectDefine"});
        	if (null == fi){
        		result.faliure();
        		result.getDebugInfo().addErrDesc("找不到fiId为" + fiId + "的流程实例！");
        	} else if(WsConstant.STATUS_RUNNING != fi.getStatus()){
        		result.faliure();
        		result.getDebugInfo().addErrDesc("非运行状态的流程实例无法作废！");
        	} else {
        		try {
                    User user = orgnAPIService.getUserByUserId(opUserId);
                    flowService.terminateFi(fiId, terminateCode, user);
                    FiStatusChangeService fiStatusChangeService = App.getBean(FiStatusChangeService.class);
                    fiStatusChangeService.statusChange(fi, WsConstant.FI_STATUS_CHANGE_TYPE_BH);
                    for (Long relatedFiId : relatedFiIds) {
                        flowService.terminateFi(relatedFiId, terminateCode, user);
                        fi = commonService.getById(Fi.class, relatedFiId, new String[]{"fl", "fl.serviceObjectDefine"});
                        fiStatusChangeService.statusChange(fi, WsConstant.FI_STATUS_CHANGE_TYPE_BH);
                    }
        		} catch (Exception e){
        			result.faliure();
            		result.getDebugInfo().addErrDesc("作废失败！");
        		}
        	}
        }
        return result;
    }
    
    /**
     * 结束指定分支
     * @param fiId
     * @param endTag
     * @param userId
     * @return
     */
    public FlowResult<SimpleResult> finishFiBranch(Long fiId, String endTag, Long userId) {
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>(SimpleResult.class);
        FlowUtils.checkParams(result, "fiId", fiId, "endTag", endTag);
        if (result.isSuccess()){
        	try {
                List<Ai> aiList = aiService.getBranchAiList(fiId, endTag);
            	User opUser = orgnAPIService.getUserByUserId(userId);
                for (Ai ai : aiList){
                    String[] needDealCode = new String[]{WsConstant.WiType.ZC.getCode(), WsConstant.WiType.CB.getCode()
                            , WsConstant.WiType.CY.getCode(), WsConstant.WiType.ZF.getCode(), WsConstant.WiType.LG.getCode()};
                    Wi wi = wiDAO.getFirstRunningWiByAiId(ai.getId(), needDealCode);
                    while (null != wi && WsConstant.STATUS_RUNNING == wi.getStatus()) {
                        flowService.completeWi(wi.getId(), opUser, OpType.SYS_TG_NAME, OpType.SYS_TG + ";" + OpType.SYS_TG_NAME);
                        wi = wiDAO.getFirstRunningWiByAiId(ai.getId(), needDealCode);
                    }
                }
            } catch (Exception e){
                result.faliure();
                result.getDebugInfo().addErrDesc(e.getMessage());
            }
        }
        return result;
    }
    
    /**
     * 
     * <p>
     * 过期工作
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param wiId
     *            工作ID
     * @param opUserId
     *            操作人ID
     * @param tryStartNextWi
     *            是否尝试开始下个任务
     * @return SimpleResult
     */
    @GET
    @Path(WsURI.URI_OVERDU_WI)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<SimpleResult> overduWi(@QueryParam("wiId") Long wiId, @QueryParam("opUserId") Long opUserId
            , @QueryParam("tryStartNextWi") boolean tryStartNextWi) {
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>();
        FlowUtils.checkParams(result, "wiId", wiId, "opUserId", opUserId);
        if (result.isSuccess()){
            User user = orgnAPIService.getUserByUserId(opUserId);
            Wi wi = wiDAO.getWiById(wiId, "ai", "fi");
            if (tryStartNextWi && WsConstant.STATUS_RUNNING == wi.getStatus()){
                flowService.completeWi(wiId, user, AlService.MSG_WP_AUTO_PASS_OP_NAME, AlService.MSG_WP_AUTO_PASS_OP_CODE, false);
            }
            flowService.overdueWi(wi);
            //当前节点已完成且没有已完成的待办即只存在overduewi的任务则时置为过期
            if (WsConstant.STATUS_COMPLETE == wi.getAi().getStatus()
                    && !commonService.isExist(Wi.class, " aiId = ? and status = ? ", wi.getAiId(), WsConstant.STATUS_COMPLETE)){
                //过期Ai
                flowService.overdueAi(wi.getAi());
            }
            wi.setUserNote(user.getUserName() + "将此工作作废。");
            alService.logAdminOverdueWi(wi);
        }
        return result;
    }

    /**
     * 
     * <p>
     * 加签
     * </p>
     * <p>
     * 前置条件:状态运行
     * </p>
     * 
     * @author 孙朝辉
     * @param jqType
     *            【必须】加签类别 BEFORE(1), AFTER(2);
     * @param wpId
     *            【必须】加签所在的Wp, Wp.id
     * @param opUsers
     *            【必须】加签用户
     * @param opUserId
     *            【必须】操作人Id
     * @param completeWi
     *            【可选】是否结束当前工作，当true时下面三个字段必须
     * @param wiId
     *            工作ID
     * @param opCode
     *            操作编码
     * @param userNote
     *            用户意见
     * @param tvsString
     *            扩展
     * @return SimpleResult
     */
    @GET
    @Path(WsURI.URI_JIAQIAN)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<SimpleResult> jiaqian(@QueryParam("jqType") Integer jqType, @QueryParam("wpId") Long wpId, @QueryParam("opUsers") String opUsers,
            @QueryParam("opUserId") Long opUserId, @QueryParam("completeWi") Boolean completeWi, @QueryParam("wiId") Long wiId,
            @QueryParam("opCode") String opCode, @QueryParam("userNote") String userNote, @QueryParam("tvs") String tvsString) {
        if (StringUtils.isNotBlank(userNote)){
            userNote = EncodeUtils.urlDecode(userNote);
        }
        if (StringUtils.isNotBlank(opCode)){
            opCode = EncodeUtils.urlDecode(opCode);
        }
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>(SimpleResult.class);

        FlowUtils.checkParams(result, "jqType", jqType, "wpId", wpId, "opUsers", opUsers, "opUserId", opUserId, "completeWi", completeWi);

        if (!result.isSuccess()) {
            return result;
        }

        User opUser = orgnAPIService.getUserByUserId(opUserId);

        Wi wi = flowService.getWiById(wiId);
        int wiStatus = wi.getStatus();

        int wpStatus = FlowUtils.getWpStatus(wi.getWp());
        Wp jqStep = wpDAO.getWpById(wpId);
        int jqStepStatus = FlowUtils.getWpStatus(jqStep);
        int jqStepPx = jqStep.getPx();

        boolean wiIsAtStartAi = wi.getAc().getIsStart() == 1;
        int wiMinPx = wpDAO.getMinPx(wi.getAiId());

        boolean wiIsFirstWp = wiIsAtStartAi && wiMinPx == wi.getWp().getPx().intValue();

        // 工作状态修改
        if (wiStatus != Wi.STATUS_RUNNING || wpStatus != 1) {
            result.faliure();
            result.getDebugInfo().addErrDesc(ApiMsgUtils.MSG_JIAQIAN_WI_PROCESSED);
        }

        // 第一个节点不能前加签
        if (result.isSuccess() && wiIsFirstWp && jqType == WsConstant.JqType.BEFORE.getType()) {
            result.faliure();
            result.getDebugInfo().addErrDesc(ApiMsgUtils.MSG_JIAQIAN_FIRST_WP_CANNOT_JIAQIAN_BEFORE);
        }

        // 前加签 只能在已经开始的Wp
        if (result.isSuccess() && jqType == WsConstant.JqType.BEFORE.getType() && jqStepStatus != 1) {
            result.faliure();
            result.getDebugInfo().addErrDesc(ApiMsgUtils.MSG_JIAQIAN_BEFORE_REQUIRE_RUNNINGWP);
        }

        if (result.isSuccess()) {
            Gvs _tvs = Gvs.parseObject(tvsString);
            
            Integer _assignType = FlowUtils.getAssignType(_tvs);
            String _finishCtrl = FlowUtils.getFinishCtrl(_tvs);
            
            // Step1.如果是前加签，生成日志
            if (completeWi != null && completeWi && jqType == WsConstant.JqType.BEFORE.getType()) {
                wiDAO.completeWi(wiId, opUser, userNote, opCode, opUsers, WiType.LG.getCode());
            }
            
            // Step2.加签到:jqUsers
            flowService.addWp(wi.getParticipant(), wpId, opUsers, jqType, _assignType , _finishCtrl, wi.getParticipantUserName() + "加签");

            // Step3.开始加签到的节点
            if (completeWi != null && completeWi && jqType == WsConstant.JqType.BEFORE.getType()) {
                Ai ai = wi.getAi();
                Gvs gvs = flowService.getGvs(wi.getFiId());
                Map<String, Object> tvs = new HashMap<String, Object>();
                flowService.tryStartAi(ai, gvs, tvs, false);
                
                Wp wp = wpDAO.getWpByPx(ai.getId(), jqStepPx);
                List<Wi> wis = commonService.findAll(Wi.class, "wpId = ? and status = ? and isEffectFlow = 1", new Object[] { wp.getId(), Wi.STATUS_RUNNING });
                for (Wi theWi : wis) {
                    theWi.setOpWiId(wiId);
                    commonService.update(theWi);
                }

            } else if (completeWi != null && completeWi && jqType == WsConstant.JqType.AFTER.getType()) {
                flowService.completeWi(wiId, opUser, userNote, opCode);
            }
        }

        return result;
    }

    /**
     * 
     * <p>
     * 去签
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param wpId
     *            Wp.id
     * @param opUserId
     *            操作用户ID
     * @return SimpleResult
     */
    @GET
    @Path(WsURI.URI_QUQIAN)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<SimpleResult> quqian(@QueryParam("wpId") Long wpId, @QueryParam("opUserId") Long opUserId) {
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>(SimpleResult.class);

        Wp jqStep = wpDAO.getWpById(wpId);
        int jqStepStatus = FlowUtils.getWpStatus(jqStep);
        // User opUser = orgnAPIService.getUserByUserId(opUserId);
        if (jqStepStatus != 0) {
            result.faliure();
            result.getDebugInfo().addErrDesc(ApiMsgUtils.MSG_JIAQIAN_QUQIAN_REQUIRE_NOT_RUNNING);
        }

        if (result.isSuccess()) {
            flowService.deleteWp(wpId, opUserId);
        }

        return result;
    }

    /**
     * 
     * <p>
     * 转移流程实例
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiIds
     *            流程实例ID集合
     * @param newUserId
     *            目标用户
     * @param logOperate
     *            是否记录操作日志
     * @param opUserId
     *            操作人
     * @param opCode
     *            操作编码
     * @param userNote
     *            用户意见
     * @return SimpleResult
     */
    @GET
    @Path(WsURI.URI_ZHUANYI_FIS)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<SimpleResult> zhuanyiFis(@QueryParam("fiIds") Long[] fiIds, @QueryParam("newUserId") Long newUserId,
            @QueryParam("logOperate") boolean logOperate, @QueryParam("opUserId") Long opUserId, @QueryParam("opCode") String opCode,
            @QueryParam("userNote") String userNote) {

        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>();
        for (Long fiId : fiIds) {
            zhuanyiFi(fiId, newUserId, logOperate, opUserId, opCode, userNote);
        }
        return result;
    }

    /**
     * 
     * <p>
     * 转移流程实例
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiId
     *            流程实例ID
     * @param newUserId
     *            目标用户
     * @param logOperate
     *            是否记录操作日志
     * @param opUserId
     *            操作人
     * @param opCode
     *            操作编码
     * @param userNote
     *            用户意见
     * @return SimpleResult
     */
    @GET
    @Path(WsURI.URI_ZHUANYI_FI)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<SimpleResult> zhuanyiFi(@QueryParam("fiId") Long fiId, @QueryParam("newUserId") Long newUserId,
            @QueryParam("logOperate") boolean logOperate, @QueryParam("opUserId") Long opUserId, @QueryParam("opCode") String opCode,
            @QueryParam("userNote") String userNote) {
        if (StringUtils.isNotBlank(userNote)){
            userNote = EncodeUtils.urlDecode(userNote);
        }
        if (StringUtils.isNotBlank(opCode)){
            opCode = EncodeUtils.urlDecode(opCode);
        }
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>();

        User newUser = orgnAPIService.getUserByUserId(newUserId);

        Long ownerUserId = commonService.findLong("select ownerUserId from Fi where id = ?", fiId);
        User ownerUser = orgnAPIService.getUserByUserId(ownerUserId);

        Fi fi = commonService.getById(Fi.class, fiId);
        fi.setOwnerUserId(newUser.getUserId());
        fi.setOwnerUserLoginName(newUser.getLoginName());
        fi.setOwnerUserName(newUser.getUserName());
        commonService.update(fi);

        // 转移工作
        List<Wi> wis = commonService.findAll(Wi.class, "(status != ? or status != ?) and fiId = ? and participant = ?", new Object[] { Wi.STATUS_COMPLETE,
            Wi.STATUS_RUNNING, fiId, ownerUserId });
        for (Wi wi : wis) {
            this.zhuanyiWi(wi, newUser, logOperate, opUserId, opCode, userNote);
        }

        List<Wp> wps = wpDAO.getAllCreatedWps(fi.getId());
        String newUsers = ParticipantUtils.toParticipants(newUser);
        String rmUsers = ParticipantUtils.toParticipants(ownerUser);
        for (Wp wp : wps) {
            wpDAO.replaceParticipants(wp, newUsers, rmUsers, false);
        }

        return result;
    }

    /**
     * 
     * <p>
     * 转移工作
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param wiIds
     *            工作列表
     * @param newUserId
     *            目标用户
     * @param logOperate
     *            是否记录操作日志
     * @param opUserId
     *            操作人
     * @param opCode
     *            操作编码
     * @param userNote
     *            用户意见
     * @return SimpleResult
     */
    @GET
    @Path(WsURI.URI_ZHUANYI_WIS)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<SimpleResult> zhuanyiWis(@QueryParam("wiIds") Long[] wiIds, @QueryParam("newUserId") Long newUserId,
            @QueryParam("logOperate") boolean logOperate, @QueryParam("opUserId") Long opUserId, @QueryParam("opCode") String opCode,
            @QueryParam("userNote") String userNote) {
        if (StringUtils.isNotBlank(userNote)){
            userNote = EncodeUtils.urlDecode(userNote);
        }
        if (StringUtils.isNotBlank(opCode)){
            opCode = EncodeUtils.urlDecode(opCode);
        }
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>();
        User newUser = orgnAPIService.getUserByUserId(newUserId);
        for (Long wiId : wiIds) {
            Wi wi = flowService.getWiById(wiId);
            this.zhuanyiWi(wi, newUser, logOperate, opUserId, opCode, userNote);
        }

        return result;
    }

    /**
     * 
     * <p>
     * 转移工作
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param wiId
     *            工作ID
     * @param newUserId
     *            目标用户
     * @param logOperate
     *            是否记录操作日志
     * @param opUserId
     *            操作人
     * @param opCode
     *            操作编码
     * @param userNote
     *            用户意见
     * @return SimpleResult
     */
    @GET
    @Path(WsURI.URI_ZHUANYI_WI)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<SimpleResult> zhuanyiWi(@QueryParam("wiId") Long wiId, @QueryParam("newUserId") Long newUserId,
            @QueryParam("logOperate") boolean logOperate, @QueryParam("opUserId") Long opUserId, @QueryParam("opCode") String opCode,
            @QueryParam("userNote") String userNote) {
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>();
        FlowUtils.checkParams(result, "wiId", wiId, "newUserId", newUserId);
        if (result.isSuccess()){
        	User newUser = orgnAPIService.getUserByUserId(newUserId);
    		Wi wi = flowService.getWiById(wiId);
        	if (StringUtils.isNotBlank(userNote)){
        		userNote = EncodeUtils.urlDecode(userNote);
        	}
        	if (StringUtils.isNotBlank(opCode)){
        		opCode = EncodeUtils.urlDecode(opCode);
        	}
        	if (null == newUser){
        		result.faliure();
        		result.getDebugInfo().addErrDesc("转移到的用户不能为空！");
        	}
        	if (null == wi){
        		result.faliure();
        		result.getDebugInfo().addErrDesc("要转移的任务不能为空！");
        	}
        	if (result.isSuccess()){
        		this.zhuanyiWi(wi, newUser, logOperate, opUserId, opCode, userNote);
        	}
        }
        return result;
    }

    /**
     * 
     * <p>
     * 获取全局变量
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiId
     *            流程实例ID
     * @param key
     *            键值
     * @return GvBean
     */
    @GET
    @Path(WsURI.URI_GETGV)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<GvBean> getGvBean(@QueryParam("fiId") Long fiId, @QueryParam("key") String key) {
        FlowResult<GvBean> r = new FlowResult<GvBean>(GvBean.class);
        Gv g = commonService.findFirst(Gv.class, "fiId = ? and name = ?", new Object[] { fiId, key });
        GvBean gb = ApiUtils.buildGvBean(g);
        r.setResult(gb);
        return r;
    }

    /**
     * 
     * <p>
     * 结束本环节
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiId
     *            流程实例ID
     * @param outCode
     *            外部编码
     * @param userId
     *            参与人ID
     * @return SimpleResult
     */
    @GET
    @Path(WsURI.URI_FINISH_AI_BY_OUT_CODE)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<SimpleResult> finishAiByOutCode(@QueryParam("fiId") Long fiId, @QueryParam("outCode") String outCode, @QueryParam("userId") Long userId) {
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>(SimpleResult.class);
        FlowUtils.checkParams(result, "outCode", outCode, "userId", userId);

        Wi wi = null;
        if (result.isSuccess()) {
            wi = commonService.findFirst(Wi.class, "status=? and ac.outCode = ? and fiId = ? and participant=?", new Object[] { Wi.STATUS_RUNNING, outCode,
                fiId, userId });
        }

        if (wi == null) {
            result.faliure();
            result.getDebugInfo().addErrDesc(ApiMsgUtils.getMsg(ApiMsgUtils.KEY_OBJECT_NOTFOUNT, "Wi", "指定用户" + userId));
        }

        if (result.isSuccess()) {
            completeWi(wi.getId(), userId, wi.getAc().getNodeName() + "完成环节！", Wi.OP_CODE_NEXT, "", null);
        }

        return result;
    }

    /**
     * 
     * <p>
     * 结束本环节
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param aiId
     *            活动实例ID
     * @param userId
     *            参与人ID
     * @return SimpleResult
     */
    @GET
    @Path(WsURI.URI_FINISH_AI_BY_ID)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<SimpleResult> finishAiById(@QueryParam("aiId") Long aiId, @QueryParam("userId") Long userId) {
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>(SimpleResult.class);
        FlowUtils.checkParams(result, "aiId", aiId, "userId", userId);

        Wi wi = null;
        if (result.isSuccess()) {
            wi = commonService.findFirst(Wi.class, "status=? and aiId = ? and participant=?", new Object[] { Wi.STATUS_RUNNING, aiId, userId });
        }

        if (wi == null) {
            result.faliure();
            result.getDebugInfo().addErrDesc(ApiMsgUtils.getMsg(ApiMsgUtils.KEY_OBJECT_NOTFOUNT, "工作", "指定用户:" + userId));
        }

        if (result.isSuccess()) {
            completeWi(wi.getId(), userId, wi.getAc().getNodeName() + "完成环节！", Wi.OP_CODE_NEXT, "" ,null);
        }

        return result;
    }

    /**
     * 
     * <p>
     * 收回工作
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param wiId
     *            工作ID
     * @param userId
     *            用户ID
     * @param checkIsRead
     *            是否检查待办已读
     * @param spUserNote
     *            撤回意见
     * @return WithdrawResult
     */
    @GET
    @Path(WsURI.URI_WITHDRAW)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<WithdrawResult> withdraw(@QueryParam("wiId") Long wiId, @QueryParam("userId") Long userId
            , @QueryParam("checkIsRead") boolean checkIsRead, @QueryParam("spUserNote") String spUserNote) {
        FlowResult<WithdrawResult> result = new FlowResult<WithdrawResult>(WithdrawResult.class);
        FlowUtils.checkParams(result, "wiId", wiId, "userId", userId, "checkIsRead", checkIsRead);
        if (StringUtils.isNotBlank(spUserNote)){
            spUserNote = EncodeUtils.urlDecode(spUserNote);
        }
        if (result.isSuccess()) {
            Object[] info = flowService.withdraw(wiId, userId, spUserNote, checkIsRead);
            boolean canWithdraw = (Boolean) info[0];
            String msg = (String) info[1];
            Long withdrawWiId = (Long) info[3];
            if (!canWithdraw) {
                result.faliure();
                result.getDebugInfo().addErrDesc(msg);
            } else {
                result.success();
                result.getResult().setCanWithdraw(true);
                result.getResult().setWithdrawWiId(withdrawWiId);
            }
        }

        return result;
    }
    
    /**
     * 流程撤回
     * @param fiId 流程id
     * @param userId 操作人id
     * @param spUserNote 意见
     * @return 撤回
     */
    @GET
    @Path(WsURI.URI_FIWITHDRAW)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<WithdrawResult> fiwithdraw(@QueryParam("fiId") Long fiId, @QueryParam("userId") Long userId,
            @QueryParam("spUserNote") String spUserNote) {
        
        FlowResult<WithdrawResult> result = new FlowResult<WithdrawResult>(WithdrawResult.class);
        FlowUtils.checkParams(result, "fiId", fiId, "userId", userId);
        if (StringUtils.isNotBlank(spUserNote)){
            spUserNote = EncodeUtils.urlDecode(spUserNote);
        }
        if (result.isSuccess()) {
            User user = orgnAPIService.getUserByUserId(userId);
            result = fiCanWithdraw(fiId, userId);
            if (result.getResult().isCanWithdraw()){
                flowService.terminateFi(fiId, WsConstant.FLOW_TERMINATE_CODE_CH, user);
                alService.logFiWithDraw(fiId, user, spUserNote);
                fiStatusChangeService.statusChange(fiId, WsConstant.FI_STATUS_CHANGE_TYPE_CH);
            }
        }
        return result;
    }
    
    /**
     * 
     * <p>
     * 是否可收回
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param wiId
     *            工作ID
     * @param userId
     *            用户ID
     * @param checkIsRead
     *            是否检查待办已读
     * @return WithdrawResult
     */
    @GET
    @Path(WsURI.URI_CAN_WITHDRAW)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<WithdrawResult> canWithdraw(@QueryParam("wiId") Long wiId, @QueryParam("userId") Long userId,
            @QueryParam("checkIsRead") boolean checkIsRead) {
        FlowResult<WithdrawResult> result = new FlowResult<WithdrawResult>(WithdrawResult.class);
        FlowUtils.checkParams(result, "wiId", wiId, "userId", userId, "checkIsRead", checkIsRead);
        if (result.isSuccess()) {
            Object[] info = flowService.canWithdrawWi(wiId, userId, checkIsRead);
            boolean canWithdraw = (Boolean) info[0];
            String msg = (String) info[1];
            if (!canWithdraw) {
                result.faliure();
                result.getDebugInfo().addErrDesc(msg);
            } else {
                result.getResult().setCanWithdraw(canWithdraw);
            }

        }

        return result;
    }
    /**
     * 是否可以收回流程
     * @author jun
     * @param fiId 节点id
     * @param userId 操作人id
     * @return 是否可以收回
     */
    @GET
    @Path(WsURI.URI_FI_CAN_WITHDRAW)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<WithdrawResult> fiCanWithdraw(@QueryParam("fiId") Long fiId
            , @QueryParam("userId") Long userId){
        FlowResult<WithdrawResult> result = new FlowResult<WithdrawResult>(WithdrawResult.class);
        FlowUtils.checkParams(result, "fiId", fiId, "userId", userId);
        if (result.isSuccess()) {
            Object[] info = flowService.fiCanWithdraw(fiId, userId);
            boolean canWithdraw = (Boolean) info[0];
            String msg = (String) info[1];
            if (!canWithdraw) {
                result.faliure();
                result.getDebugInfo().addErrDesc(msg);
            } else {
                result.getResult().setCanWithdraw(canWithdraw);
            }

        }

        return result;
     

    }
    /**
     * 
     * <p>
     * 获得某人在流程中的待办
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param fiId
     *            流程实例ID
     * @param userId
     *            用户ID
     * @return List<WiBean>
     */
    @GET
    @Path(WsURI.URI_GET_USER_RUNNINGWIS)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<List<WiBean>> getUserRunningWis(@QueryParam("fiId") Long fiId, @QueryParam("userId") Long userId) {
        FlowResult<List<WiBean>> result = new FlowResult<List<WiBean>>();
        FlowUtils.checkParams(result, "fiId", fiId, "userId", userId);

        if (result.isSuccess()) {
            List<Wi> wiList = commonService.findAll(Wi.class, "fiId = ? and participant = ? and status = ?", new Object[] { fiId, userId, Wi.STATUS_RUNNING },
                    "acceptTime desc", new String[] { "wp", "ac" });
            List<WiBean> wis = new LinkedList<WiBean>();

            for (Wi wi : wiList) {
                WiBean wb = ApiUtils.buildWiBean(wi, true);
                wis.add(wb);
            }
            result.setResult(wis);
        }

        return result;
    }

    /**
     * 
     * <p>
     * 转移工作
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param wi
     *            工作
     * @param newUser
     *            目标用户
     * @param logOperate
     *            是否记录操作日志
     * @param opUserId
     *            操作人
     * @param opCode
     *            操作编码
     * @param userNote
     *            用户意见
     */
    private void zhuanyiWi(Wi wi, User newUser, boolean logOperate, Long opUserId, String opCode, String userNote) {
        User ownerUser = FlowUtils.getParticipant(wi);
        String rmUsers = ParticipantUtils.toParticipants(ownerUser);
        String newUsers = ParticipantUtils.toParticipants(newUser);
        String orgiWiType = wi.getWiType();
        // 执行转移
        flowService.zhuanyiWi(wi, newUser, orgiWiType);
        // 修改Wp显示
        flowService.replaceParticipants(wi.getWpId(), wi.getFiId(), newUsers, rmUsers);
        // 记录转移动作
        if (logOperate) {
            User opUser = orgnAPIService.getUserByUserId(opUserId);
            
            wiDAO.completeWi(wi.getId(), opUser, userNote, opCode, newUsers, WsConstant.WiType.LG.getCode());
        }
        alService.logZhuanban(wi);
    }
    
    /**
     * 
     *〈简述〉
     *〈详细描述〉
     * @author jun
     * @param wiId wiId
     *            是否组装wis
     * @return 操作
     */
    @SuppressWarnings("unused")
    @GET
    @Path(WsURI.URI_GET_OP)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<Map<String, List<OpRelationInsBean>>> getOp(@QueryParam("wiId") Long wiId) {
        FlowResult<Map<String, List<OpRelationInsBean>>> result = new FlowResult<Map<String, List<OpRelationInsBean>>>();
        if (result.isSuccess()) {
            Map<String, List<OpRelationInsBean>> opRelationInsBeanMap = new HashMap<String, List<OpRelationInsBean>>();
            if (null != wiId){
                Ac ac = commonService.findFirstByHQL(Ac.class, "select w.ac from Wi w where w.id = ?", wiId);
                if (null != ac && StringUtils.isNotBlank(ac.getOpGroups())){
                    //使用版本的
                    if (FlowConstant.USE_OPRELATIONINS_NO == 0){
                        List<OpRelationIns> qcrOpRelationInsList = opRelationInsDAO.getOpRelationInsList(ac, OpRelation.OP_USER_TYPE_QCR);
                        List<OpRelationIns> clrOpRelationInsList = opRelationInsDAO.getOpRelationInsList(ac, OpRelation.OP_USER_TYPE_CLR);
                        List<OpRelationIns> xbrOpRelationInsList = opRelationInsDAO.getOpRelationInsList(ac, OpRelation.OP_USER_TYPE_XBR);
                        opRelationInsBeanMap.put(OpRelation.OP_USER_TYPE_QCR, this.dealOpRelationIns(ac.getId(), qcrOpRelationInsList));
                        opRelationInsBeanMap.put(OpRelation.OP_USER_TYPE_CLR, this.dealOpRelationIns(ac.getId(), clrOpRelationInsList));
                        opRelationInsBeanMap.put(OpRelation.OP_USER_TYPE_XBR, this.dealOpRelationIns(ac.getId(), xbrOpRelationInsList));
                    //实时生效的
                    } else {
                        List<OpRelation> qcrOpRelationList = opRelationDAO.getOpRelationList(Long.valueOf(ac.getOpGroups()), OpRelation.OP_USER_TYPE_QCR);
                        List<OpRelation> clrOpRelationList = opRelationDAO.getOpRelationList(Long.valueOf(ac.getOpGroups()), OpRelation.OP_USER_TYPE_CLR);
                        List<OpRelation> xbrOpRelationList = opRelationDAO.getOpRelationList(Long.valueOf(ac.getOpGroups()), OpRelation.OP_USER_TYPE_XBR);
                        opRelationInsBeanMap.put(OpRelation.OP_USER_TYPE_QCR, this.dealOpRelation(ac.getId(), qcrOpRelationList));
                        opRelationInsBeanMap.put(OpRelation.OP_USER_TYPE_CLR, this.dealOpRelation(ac.getId(), clrOpRelationList));
                        opRelationInsBeanMap.put(OpRelation.OP_USER_TYPE_XBR, this.dealOpRelation(ac.getId(), xbrOpRelationList));
                    }
                }
            }
            result.setResult(opRelationInsBeanMap);
        }
        return result;
    }
    /**
     * 处理操作权限实例
     * @author jun
     * @param acId 节点id
     * @param opRelationInsList 操作组
     * @return opRelationInsBeanList
     */
    private List<OpRelationInsBean> dealOpRelationIns(Long acId, List<OpRelationIns> opRelationInsList){
        List<OpRelationInsBean> opRelationInsBeanList = new ArrayList<OpRelationInsBean>();
        if (null != opRelationInsList){
            for (OpRelationIns opRelationIns : opRelationInsList){
                opRelationInsBeanList.add(ApiUtils.buildOpRelationInsBean(acId, opRelationIns));
            }
        }
        return opRelationInsBeanList;
    }
    /**
     * 处理操作权限实例
     * @author jun
     * @param acId 节点id
     * @param opRelationList 操作组
     * @return opRelationInsBeanList
     */
    private List<OpRelationInsBean> dealOpRelation(Long acId, List<OpRelation> opRelationList){
        List<OpRelationInsBean> opRelationInsBeanList = new ArrayList<OpRelationInsBean>();
        if (null != opRelationList){
            for (OpRelation opRelation : opRelationList){
                opRelationInsBeanList.add(ApiUtils.buildOpRelationInsBean(acId, opRelation));
            }
        }
        return opRelationInsBeanList;
    }
    /**
     * 
     *〈简述〉
     *〈详细描述〉
     * @author jun
     * @param aiId 节点id
     * @param userId 操作人id
     * @param fetchWis 是否组装wis
     * @return 是否操作成功
     */
    @GET
    @Path(WsURI.URI_COMPLETE_AI)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<SimpleResult> completeAi(@QueryParam("aiId") Long aiId, @QueryParam("userId") Long userId, @QueryParam("fetchWis") boolean fetchWis) {
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>(SimpleResult.class);
        
        Ai ai = commonService.getById(Ai.class, aiId);
        
        Gvs gvs = flowService.getGvs(ai.getFiId());
        Map<String, Object> tvs = new HashMap<String, Object>();
        flowService.completeAi(ai, true, gvs, tvs);
        
        return result;
    }
    /**
     * 一键审批通过
     * @author jun
     * @param fiId 流程id
     * @param userId 操作人id
     * @param userNote 意见
     * @param opCode 操作人码
     * @return 是否操作成功
     */
    @GET
    @Path(WsURI.URI_COMPLETE_FI)
    @Produces({ "application/xml", "application/json" })
    @Consumes({ "application/xml", "application/json" })
    public FlowResult<SimpleResult> completeFi(@QueryParam("fiId") Long fiId, @QueryParam("userId") Long userId
            , @QueryParam("userNote") String userNote, @QueryParam("opCode") String opCode) {
        if (StringUtils.isNotBlank(userNote)){
            userNote = EncodeUtils.urlDecode(userNote);
        }
        if (StringUtils.isNotBlank(opCode)){
            opCode = EncodeUtils.urlDecode(opCode);
        }
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>(SimpleResult.class);
        FlowUtils.checkParams(result, "fiId", fiId);
        if (result.isSuccess()){
            try {
                User opUser = orgnAPIService.getUserByUserId(userId);
                String[] needDealCode = new String[]{WsConstant.WiType.ZC.getCode(), WsConstant.WiType.CB.getCode()
                        , WsConstant.WiType.CY.getCode(), WsConstant.WiType.ZF.getCode(), WsConstant.WiType.LG.getCode()};
                Wi wi = wiDAO.getFirstRunningWi(fiId, needDealCode);
                while (null != wi && WsConstant.STATUS_RUNNING == wi.getStatus()) {
                    flowService.completeWi(wi.getId(), opUser, userNote, opCode);
                    wi = wiDAO.getFirstRunningWi(fiId, needDealCode);
                }
                if (!commonService.isExist(Fi.class, " id = ? and status = ? ", fiId, WsConstant.STATUS_COMPLETE)){
                    result.faliure();
                    result.getDebugInfo().addErrDesc("操作失败！");
                }
            } catch (Exception e){
                result.faliure();
                result.getDebugInfo().addErrDesc(e.getMessage());
            }
        }
        return result;
    }
    /**
     * 得到操作历史
     * @author jun
     * @param fiIds 流程id
     * @return 得到操作历史
     */
    @GET
    @Path(WsURI.URI_GET_AL_LIST)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<List<AlBean>> getAlList(@QueryParam("fiIds") Long[] fiIds) {
        FlowResult<List<AlBean>> result = new FlowResult<List<AlBean>>();
        List<AlBean> abList = new LinkedList<AlBean>();
        if (null != fiIds && fiIds.length > 0){
            DetachedCriteria dc = DetachedCriteria.forClass(Al.class);
            dc.add(Restrictions.in("fiId", fiIds));
//            String limitSql = " exists(select 'y' from tf_wi tw1"
//                    + " inner join tf_fi tf1 on tw1.fi_id = tf1.id"
//                    + " where tw1.id = {alias}.wi_id"
//                    + " and tf1.id in(" + StringHelper.join(fiIds, ",") + "))";
//            dc.add(Restrictions.sqlRestriction(limitSql));
            dc.addOrder(Order.asc("id"));
            List<Al> alList = commonService.findByCriteria(dc);
            if (null != alList){
                for (Al al : alList){
                    abList.add(ApiUtils.buildAlBean(al));
                }
            }
        }
        result.setResult(abList);
        return result;
    }
    /**
     * 获取下一步任务的wp
     * @author jun
     * @param wiId 当前任务id
     * @return 下一步任务的wp
     */
    @GET
    @Path(WsURI.URI_GET_NEXT_WP)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<WpBean> getNextWpBean(@QueryParam("wiId") Long wiId){
        FlowResult<WpBean> result = new FlowResult<WpBean>();
        Wp nextWp = this.getNextWp(wiId);
        result.setResult(ApiUtils.buildWpBean(nextWp, false, false, false));
        return result;
    }
    /**
     * 获取下一步任务的wp
     * @author jun
     * @param wiId 当前任务id
     * @return 下一步任务的wp
     */
    public Wp getNextWp(Long wiId){
        Wp nextWp = new Wp();
        if (null != wiId && wiId > 0){
            Wi wi = wiDAO.getWiById(wiId, "wp");
            List<Wp> wpList = wpDAO.getAllValidWps(wi.getFiId(), WsConstant.STATUS_RUNNING);
            if (null != wi.getWp() && null != wi.getFiId() && null != wpList){
                boolean isNext = false;
                for (Wp wbe : wpList){
                    if (isNext){
                        nextWp = wbe;
                        break;
                    } else if (wi.getAiId().equals(wbe.getAiId())){
                        isNext = true;
                    }
                }
            }
        }
        return nextWp;
    }
    
    /**
     * 获取流程信息
     * @author jun
     * @param fiId 流程id
     * @return 获取流程信息
     */
    @GET
    @Path(WsURI.URI_GET_FI_INFO)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<FiInfoBean> getFiInfo(@QueryParam("fiId") Long fiId){
        FlowResult<FiInfoBean> result = new FlowResult<FiInfoBean>();
        FlowUtils.checkParams(result, "fiId", fiId);
        FiInfoBean fib = new FiInfoBean();
        if (result.isSuccess()) {
            Fi fi = commonService.getById(Fi.class, fiId, "fl");
            String[] needDealCode = new String[]{WsConstant.WiType.ZC.getCode()};
            List<Wi> runningWis = wiDAO.getRunningWiList(fiId, needDealCode);
            List<Wp> runningWps = wpDAO.getAllRuningWps(fiId);
            fib = ApiUtils.buildFiInfoBean(fi, runningWps, runningWis, null);
        }
        result.setResult(fib);
        return result;
    }
    
    /**
     * 获取流程信息
     * @author jun
     * @param fiIds 流程ids
     * @return 获取流程信息
     */
    @GET
    @Path(WsURI.URI_GET_FI_LIST)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<List<FiBean>> getFiList(@QueryParam("fiIds") Long[] fiIds){
        FlowResult<List<FiBean>> result = new FlowResult<List<FiBean>>();
        FlowUtils.checkParams(result, "fiIds", fiIds);
        // 每个审批
        List<FiBean> fis = new LinkedList<FiBean>();
        if (result.isSuccess()) {
            List<Fi> fiList = commonService.findAll(Fi.class, "id in(" + StringHelper.join(fiIds, ",") + ")", null, "startTime desc");
            for (Fi fi : fiList) {
                fis.add(ApiUtils.buildFiBean(fi));
            }
        }
        result.setResult(fis);
        return result;
    }
    
    /**
     * 流程收藏-收藏
     * @author jun
     * @param fiId 流程id
     * @param userId 操作人id
     * @return 收藏结果
     */
    @GET
    @Path(WsURI.URI_FI_STORE)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<SimpleResult> fiStore(@QueryParam("fiId") Long fiId, @QueryParam("userId") Long userId){
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>(SimpleResult.class);
        FlowUtils.checkParams(result, "fiId", fiId, "userId", userId);
        if (!fiStoreDAO.isExists(fiId, userId)){
            fiStoreDAO.fiStore(fiId, orgnAPIService.getUserByUserId(userId));
        } else {
            result.faliure();
            result.getDebugInfo().addErrDesc(ApiMsgUtils.MSG_FI_STORE_REPEAT);;
        }
        return result;
    }
    
    /**
     * 流程收藏-收藏
     * @author jun
     * @param fiStoreId 收藏id
     * @return 取消收藏结果
     */
    @GET
    @Path(WsURI.URI_FI_STORE_CANCEL)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<SimpleResult> fiStoreCancel(@QueryParam("fiStoreId") Long fiStoreId){
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>(SimpleResult.class);
        FlowUtils.checkParams(result, "fiStoreId", fiStoreId);
        if (fiStoreDAO.isExists(fiStoreId)){
            fiStoreDAO.fiStoreCancel(fiStoreId);
        } else {
            result.faliure();
            result.getDebugInfo().addErrDesc(ApiMsgUtils.MSG_FI_STORE_CANCEL_REPEAT);;
        }
        return result;
    }
    
    /**
     * 流程收藏-page
     * @author jun
     * @param userId 操作人id
     * @param start start
     * @param limit limit
     * @param gvsString 查询条件
     * @return 流程收藏-page
     */
    @GET
    @Path(WsURI.URI_GET_FI_STORE_PAGE)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<PageBean<FiStoreBean>> getFiStorePage(@QueryParam("userId") Long userId, @QueryParam("start") int start
            , @QueryParam("limit") int limit, @QueryParam("gvs") String gvsString){
        FlowResult<PageBean<FiStoreBean>> result = new FlowResult<PageBean<FiStoreBean>>();
        FlowUtils.checkParams(result, "userId", userId);
        PageBean<FiStoreBean> pb = new PageBean<FiStoreBean>();
        if (result.isSuccess()) {
            Page page = fiStoreDAO.getFiStorePage(userId, start, limit, FlowUtils.joinMap(null, Gvs.getValueMapFromGvs(Gvs.parseObject(gvsString))));
            pb = new PageBean<FiStoreBean>(start, limit, page.getTotal(), ApiUtils.buildFiStoreBeanList(page.getItems()));
        }
        result.setResult(pb);
        return result;
    }
    
    /**
     * 修改流程参与人
     * @author jun
     * @param opWiId 修改参与人的任务id
     * @param wpId 需要修改参与人的节点id
     * @param subWpId 需要修改参与人的子节点id
     * @param wiId 需要修改参与人的任务id
     * @param userId 需要修改参与人的用户id
     * @param paticipantString 选择的参与者
     * @return 不可以修改的原因（为空时表示修改成功）
     */
    @GET
    @Path(WsURI.URI_CHANGE_WP_USERS)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<SimpleResult> changeWpUsers(@QueryParam("opWiId") Long opWiId, @QueryParam("wpId") Long wpId, @QueryParam("subWpId") Long subWpId
            , @QueryParam("wiId") Long wiId, @QueryParam("userId") Long userId, @QueryParam("paticipantString") String paticipantString){
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>(SimpleResult.class);
        if (StringUtils.isNotBlank(paticipantString)){
            paticipantString = EncodeUtils.urlDecode(paticipantString);
        }
        FlowUtils.checkParams(result, "wpId", wpId, "paticipantString", paticipantString);
        if (result.isSuccess()){
            Wp wp = wpDAO.getWpById(wpId);
            String changeWpUserClass = FlowUtils.isChuanxing(wp) ? SerialChangeWpUserService.class.getName() : ParallelChangeWpUserService.class.getName();
            IChangeWpUserService iChangeWpUserService = null;
            try {
                iChangeWpUserService = (IChangeWpUserService) App.getBean(Class.forName(changeWpUserClass));
            } catch (ClassNotFoundException e) {
                iChangeWpUserService = null;
            }
            
            // 由于该流程目前系统中没有用到，所以暂时不针对该流程进行通用角色适配
            // 后续如果要适配，请参考FlowService.rebulidFi方法，下面的这个接口的两个实现类中针对通用角色进行标准角色转换。
            Object[] changeWpUser = iChangeWpUserService.changeWpUser(opWiId, wpId, subWpId, wiId, userId, paticipantString);
            if (!(Boolean) changeWpUser[0]){
                result.faliure();
                result.getDebugInfo().addErrDesc((String) changeWpUser[1]);
            }
        }
        return result;
    }
    /**
     * 修改流程参与人
     * @author jun
     * @param opWiId 修改参与人的任务id
     * @param wpId 需要修改参与人的节点id
     * @param subWpId 需要修改参与人的子节点id
     * @param wiId 需要修改参与人的任务id
     * @param userId 需要修改参与人的用户id
     * @param paticipantString 选择的参与者
     * @return 不可以修改的原因（为空时表示修改成功）
     */
    @GET
    @Path(WsURI.URI_DELETE_PARTICIPANT)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<SimpleResult> deleteParticipant(@QueryParam("opWiId") Long opWiId, @QueryParam("wpId") Long wpId
    		, @QueryParam("subWpId") Long subWpId, @QueryParam("wiId") Long wiId, @QueryParam("userId") Long userId){
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>(SimpleResult.class);
        FlowUtils.checkParams(result, "wpId", wpId);
        if (result.isSuccess()){
            Wp wp = wpDAO.getWpById(wpId);
            String changeWpUserClass = FlowUtils.isChuanxing(wp) ? SerialChangeWpUserService.class.getName() : ParallelChangeWpUserService.class.getName();
            IChangeWpUserService iChangeWpUserService = null;
            try {
                iChangeWpUserService = (IChangeWpUserService) App.getBean(Class.forName(changeWpUserClass));
            } catch (ClassNotFoundException e) {
                iChangeWpUserService = null;
            }
            
            // 由于该流程目前系统中没有用到，所以暂时不针对该流程进行通用角色适配
            // 后续如果要适配，请参考FlowService.rebulidFi方法，下面的这个接口的两个实现类中针对通用角色进行标准角色转换。
            iChangeWpUserService.deleteParticipant(opWiId, wpId, subWpId, wiId, userId);
        }
        return result;
    }
    /**
     * 传阅
     * @author jun
     * @param opWiId 传阅wi
     * @param paticipantString 选择的参与者
     * @return 传阅
     */
    @GET
    @Path(WsURI.URI_CHUAN_YUE)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<SimpleResult> chuanYue(@QueryParam("opWiId") Long opWiId, @QueryParam("paticipantString") String paticipantString){
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>(SimpleResult.class);
        FlowUtils.checkParams(result, "opWiId", opWiId, "paticipantString", paticipantString);
        paticipantString = EncodeUtils.urlDecode(paticipantString);
        if (result.isSuccess()){
            int fiStatus = commonService.findInt("select fi.status from Wi where id = ? ", opWiId);
            if (fiStatus == WsConstant.STATUS_COMPLETE){
                flowService.chuanYue(opWiId, paticipantString);
            } else {
                result.faliure();
                result.getDebugInfo().addErrDesc("流程尚未结束,不能传阅!");
            }
        }
        return result;
    }
    /**
     * 传阅
     * @author jun
     * @param opWiId 传阅wi
     * @param paticipantString 选择的参与者
     * @return 传阅
     */
    @GET
    @Path(WsURI.URI_CHUAN_YUE_USER)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<SimpleResult> chuanYueUser(@QueryParam("opWiId") Long opWiId, @QueryParam("paticipantString") String paticipantString){
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>(SimpleResult.class);
        FlowUtils.checkParams(result, "opWiId", opWiId, "paticipantString", paticipantString);
        paticipantString = EncodeUtils.urlDecode(paticipantString);
        if (result.isSuccess()){
            flowService.chuanYue(opWiId, paticipantString);
        }
        return result;
    }
    /**
     * 催办
     * @author jun
     * @param opWiId 催办opWiId
     * @param fiId 催办fiId
     * @return 催办
     */
    @GET
    @Path(WsURI.URI_CUI_BAN)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<SimpleResult> cuiBan(@QueryParam("opWiId") Long opWiId, @QueryParam("fiId") Long fiId){
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>(SimpleResult.class);
        FlowUtils.checkParams(result, "opWiId", opWiId, "fiId", fiId);
        if (result.isSuccess()){
            Wi opWi = wiDAO.getWiById(opWiId, "wp");
            List<Wi> runningWiList = wiDAO.getRunningWiList(fiId, new String[]{WsConstant.WiType.ZC.getCode()});
            if (null != runningWiList && runningWiList.size() > 0){
                flowService.cuiBan(opWi, runningWiList);
            } else {
                result.faliure();
                result.getDebugInfo().addErrDesc("流程不存在待办任务,不能催办!");
            }
        }
        return result;
    }
    
    /**
     * 催办默认
     * @author jun
     * @param opWiId 催办opWiId
     * @param wiId 被催办的wiId
     * @param userIds 催办需要发送给的用户(多个用“,”隔开)
     * @return 催办
     */
    @GET
    @Path(WsURI.URI_CUI_BAN_USERS)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<SimpleResult> cuiBanUsers(@QueryParam("opWiId") Long opWiId, @QueryParam("wiId") Long wiId, @QueryParam("userIds") String userIds){
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>(SimpleResult.class);
        FlowUtils.checkParams(result, "opWiId", opWiId, "wiId", wiId, "userIds", userIds);
        if (result.isSuccess()){
            Wi opWi = wiDAO.getWiById(opWiId, "wp");
            Wi wi = wiDAO.getWiById(wiId, "wp");
            if (null != wi && wi.getStatus() == WsConstant.STATUS_RUNNING) {
                flowService.dealCuiBanUsersAssignWis(opWi, wi.getId(), orgnAPIService.getUserListByUserIds(userIds));
            } else {
                result.faliure();
                result.getDebugInfo().addErrDesc("非待办任务,不能催办!");
            }
        }
        return result;
    }
    
    /**
     * 是否可以提交（判断是否存在需要修改参与人的节点没有修改参与人）
     * @author jun
     * @param wiId 任务id
     * @return 是否可以提交
     */
    @GET
    @Path(WsURI.URI_CAN_SUBMIT)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<SimpleResult> canSubmit(@QueryParam("wiId") Long wiId){
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>(SimpleResult.class);
        FlowUtils.checkParams(result, "wiId", wiId);
        if (result.isSuccess() && !flowService.canSubmit(wiId)){
            result.faliure();
        }
        return result;
    }
    
    /**
     * 跳转到指定的节点
     * @author jun
     * @param wpId 工作组id
     * @param userId 操作者id
     * @param curWiId 当前的任务id
     * @param curWpId 当前的工作组id
     * @return 跳转到指定的节点
     */
    @GET
    @Path(WsURI.URI_GOTO_WP)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<SimpleResult> gotoWp(@QueryParam("wpId") Long wpId, @QueryParam("userId") Long userId
            , @QueryParam("curWiId") Long curWiId, @QueryParam("curWpId") Long curWpId){
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>(SimpleResult.class);
        FlowUtils.checkParams(result, "wpId", wpId, "userId", userId);
        if (!(result.isSuccess() && flowService.gotoWp(wpId, userId, curWiId, curWpId))){
            result.faliure();
            result.getDebugInfo().addErrDesc("操作失败!");
        }
        return result;
    }
    /**
     * 替换工作参与人
     * @author jun
     * @param wiId 工作id
     * @param userId 需要替换为的userId
     * @param opUserId 当前的任务id
     * @return 替换工作参与人
     */
    @GET
    @Path(WsURI.URI_CHANGE_WI_USER)
    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })
    public FlowResult<SimpleResult> changeWiUser(@QueryParam("wiId") Long wiId, @QueryParam("userId") Long userId, @QueryParam("opUserId") Long opUserId){
        FlowResult<SimpleResult> result = new FlowResult<SimpleResult>(SimpleResult.class);
        FlowUtils.checkParams(result, "wiId", wiId, "userId", userId, "opUserId", opUserId);
        if (result.isSuccess()){
            Wi wi = wiDAO.getWiById(wiId, "ai", "fi");
            if (WsConstant.STATUS_RUNNING == wi.getStatus()){
                User user = orgnAPIService.getUserByUserId(userId);
                if (null != user && null != user.getUserId()){
                    //过期当前的wi
                    flowService.overdueWi(wi);
                    //替换参与人
                    wi.setParticipant(user.getUserId());
                    wi.setParticipantLoginName(user.getLoginName());
                    wi.setParticipantUserName(user.getUserName());
                    //重新发布替换完参与人的任务
                    wiDAO.resetWi(wi);
                } else {
                    result.faliure();
                    result.getDebugInfo().addErrDesc("需要替换的参与人不存在，操作失败!");
                }
            } else {
                result.faliure();
                result.getDebugInfo().addErrDesc("当前工作已结束不能替换操作人，操作失败!");
            }
        }
        if (!result.isSuccess()){
            result.faliure();
            result.getDebugInfo().addErrDesc("操作失败!");
        }
        return result;
    }
    /**
     * 获取流程的发起节点任务
     * @param fiId
     * @return
     */
    public FlowResult<WiBean> getStartWiBean(@QueryParam("fiId") Long fiId){
    	FlowResult<WiBean> result = new FlowResult<WiBean>();
    	FlowUtils.checkParams(result, "fiId", fiId);
    	if (result.isSuccess()){
    		Wi wi = wiDAO.getStartWiByFiId(fiId);
    		if (null != wi){
    			result.setResult(ApiUtils.buildWiBean(wi, false));
    		} else {
    			result.faliure();
    			result.getDebugInfo().addErrDesc("未找到发起节点任务!");
    		}
    	}
    	return result;
    }
    
    public Wi getRunningWi(Long fiId) {
    	List<Wi> wi = wiDAO.getRunningWiList(fiId, new String[]{WsConstant.WiType.ZC.getCode()});
    	
    	return wi == null || wi.size() == 0 ? null : wi.get(0);
    }
    
    public List<Wi> getRunningWis(Long fiId) {
    	return wiDAO.getRunningWiList(fiId, new String[]{WsConstant.WiType.ZC.getCode()});
    }
    /**
     * 
     *  收藏流程page
     *〈详细描述〉
     * @author lwp
     * @param fiName 查询流程名称
     * @param start
     * @param limit
     * @param userId 登录用户id
     * @return
     */
    public Page findFiStoresByUserId(Integer start, Integer limit, Long userId) {
        DetachedCriteria dc = DetachedCriteria.forClass(FiStore.class);
        if (userId != null && userId > 0) {
            dc.add(Restrictions.eq("createUserId", userId));
        }
        dc.add(Restrictions.eq("isDeleted", FiStore.IS_DELETED_N));
        dc.createAlias("fi", "fi");
        dc.setFetchMode("fi", FetchMode.JOIN);
        dc.addOrder(Order.desc("createTime"));
        return getDao().findPage(dc, start, limit);
    }
    /**
     * 是否可以使用流程模板
     * @param flowCode 流程模板编码
     * @param userId 用户id
     * @return
     */
    public boolean canUseFlow(String flowCode, Long userId){
    	return flowService.canUseFlow(flowCode, userId);
    }
    
    /**
     * chc add 获取当前用户拥有岗位集合
     * @param loginName
     * @return
     */
    public List<RoleDTO> getPostsByCurrentUser(String loginName) {

		// 获取当前用户拥有岗位集合
		List<RoleDTO> lstPost = new ArrayList<RoleDTO>();
		LoginInfo li = null;
		if (StringUtils.isNotBlank(loginName)){
            li = new LoginInfo();
            UserDao userDao = App.getBean(UserDao.class);
            Long userId = userDao.findUserIdByLoginName(loginName.trim());
            BaseAPI baseAPIService = App.getBean(BaseAPI.class, ApiConstant.BEAN_CODE);
            li.setUserDTO(baseAPIService.getUserById(userId).getResult());
            li.setFuncDTOListMap(this.getFuncDTOListMap(loginName));
            RoleDao roleDao = App.getBean(RoleDao.class);
            List<Long> roleIdList = userDao.getRoleIds(loginName.trim());
            if (null != roleIdList && roleIdList.size() > 0){
                OrgnAPIService orgnAPIService = App.getBean(OrgnAPIService.class);
                List<Role> roleList = roleDao.getRoleListByIds(CollectionUtils.collectAsString(roleIdList, ","));
                for (Role role : roleList){
                    role.setNamefix(orgnAPIService.getPostPathWithStartFix(role.getId(), false));
                }
                lstPost.addAll(RoleUtils.buildRoleDtoList(roleList));
            } else {
            	lstPost.addAll(RoleUtils.buildRoleDtoList(new ArrayList<Role>()));
            }
        }
		// 删除类型编码为system的岗位
		for (Iterator<RoleDTO> it = lstPost.iterator(); it.hasNext();) {
             RoleDTO dto=it.next();
            List<String>  gropIds=roleService.getPostUpContiansType(dto.getId(), "group");
			if (gropIds!=null && gropIds.size()>0) {
				it.remove();
			}
			
			if (PartyType.TYPE_SYSTEM.equals(dto.getTypeCode())) {
				it.remove();
			}
		}
		return lstPost;
	}
	private Map<com.xinleju.erp.frame.models.App, List<FuncDTO>> getFuncDTOListMap(String loginName){
        Map<com.xinleju.erp.frame.models.App, List<FuncDTO>> funcDTOListMap = new LinkedMap();
        if (StringUtils.isNotBlank(loginName)){
        	AppDao appDao = App.getBean(AppDao.class);
            Map<String, com.xinleju.erp.frame.models.App> appMap = appDao.getAppMap();
            if (null != appMap && appMap.size() > 0){
                for (Entry<String, com.xinleju.erp.frame.models.App> map : appMap.entrySet()){
                	if(map!=null && map.getKey()!=null){
                		BaseAPI baseAPIService = App.getBean(BaseAPIService.class, ApiConstant.BEAN_CODE);
                		List<FuncDTO> funcDtoList = baseAPIService.getFuncAuth(loginName, map.getKey().trim()).getResult();
                    	//过滤没有功能授权App(除首页外)
                    	//如果没有funcList 目前只有两种情况，1、此功能模块没有授权 2、此功能模块没有注册菜单项（理论存在），
                    	if((funcDtoList != null && funcDtoList.size() > 0) || map.getKey().equals("HP")) {
                    		funcDTOListMap.put(map.getValue(), funcDtoList);
                    	}
                	}
                	
                }
            }
        }
        return funcDTOListMap;
    }
}
