package com.xinleju.erp.frame.action;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Restrictions;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.flow.utils.LoginInfoUtils;
import com.xinleju.erp.frame.models.Notice;

public class NoticeAction extends BaseAction {
	
	private Notice notice;
	
	/**
	 * 列表
	 * @return
	 */
	public String list() {
		Integer status=getParameterInt("status");
		String keyWord=getParameter("keyword");
		
		DetachedCriteria dc = DetachedCriteria.forClass(Notice.class);
		
		if(status!=null) {
			dc.add(Restrictions.eq("status", status));
		}
		
		if(keyWord!=null) {
			dc.add(Restrictions.like("title", keyWord,MatchMode.ANYWHERE));
		}
		
		page = getCommonService().findPage(dc, start, limit);
		request.setAttribute("status", status);
		request.setAttribute("statusMap", Notice.getStatusMap());
		return "list";
	}
	
	
	/**
	 * 进入编辑
	 * @return
	 */
	public String edit() {
		Long id = getParameterLong("id");
		if(id == null) {
			notice = new Notice();
		}else{
			notice = getCommonService().getById(Notice.class, id);
		}
		return "edit";
	}
	
	
	/**
	 * 保存
	 */
	public void save() {

		Map<String,Object> result = new HashMap<String,Object>();
		if(notice == null) {
			result.put("success", false);
			result.put("msg", "参数错误！");
			renderJson(result);
			return;
		}
		
		if(StringUtils.isBlank(notice.getTitle())) {
			result.put("success", false);
			result.put("msg", "标题不能为空！");
			renderJson(result);
			return;
		}
		
		try{
			if(notice.getId() == null) {
				notice.setCreateTime(new Date());
				notice.setCreateUserId(LoginInfoUtils.getLoginInfo(request).getUserDTO().getId());
				notice.setStatus(Notice.STATUS_CREATE);
				notice.setClickCount(0L);
			}
			getCommonService().saveOrUpdate(notice);
			result.put("success", true);
		}catch(Exception e) {
			e.printStackTrace();
			result.put("success", false);
			result.put("msg", "系统异常！");
		}
		renderJson(result);
	
	}
	
	/**
	 * 删除公告
	 */
	public void removeOne() {
		Map<String,Object> result = new HashMap<String,Object>();
    	try{
    		Long id = getParameterLong("id");
    		if(id != null) {
    			getCommonService().execute("delete from Notice n where n.id = ?",id);
    		}
    		result.put("success", true);
    	}catch(Exception e){
    		result.put("success", false);
    		result.put("msg", e.getMessage());
    	}
    	renderJson(result);
	}
	
	/**
	 * 选择模板
	 * @return
	 */
	public String selectTemplate(){
		return "selectTemplate";
	}
	public String selectTemplate1(){
		return "selectTemplate";
	}

	public Notice getNotice() {
		return notice;
	}


	public void setNotice(Notice notice) {
		this.notice = notice;
	}


}
