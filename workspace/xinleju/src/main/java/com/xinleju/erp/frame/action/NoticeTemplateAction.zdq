package com.xinleju.erp.frame.action;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Restrictions;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.flow.utils.LoginInfoUtils;
import com.xinleju.erp.frame.models.NoticeTemplate;
import com.xinleju.erp.frame.models.NoticeType;


/**
 * 通知公告模板管理
 * @author chenhongbin
 *
 */
public class NoticeTemplateAction extends BaseAction {
	
	private Long noticeTypeId;
	
	private NoticeTemplate noticeTemplate;
	
	/**
	 * 通知公告模板首页
	 * @return
	 */
	public String index() {
		return "index";
	}
	
	
	/**
	 * 通知公告列表
	 * @return
	 */
	public String list() {
		String ifIncludeNextLevel = getParameter("ifIncludeNextLevel");
		Boolean ifIncludeNextLevelBoolean = (StringUtils.isBlank(ifIncludeNextLevel) || "false".equals(ifIncludeNextLevel)) ? false : true;
		Integer status = getParameterInt("status");
		String keyword = getParameter("keyword");
		DetachedCriteria dc = DetachedCriteria.forClass(NoticeTemplate.class);
		if(StringUtils.isNotBlank(keyword)) {
			dc.add(Restrictions.like("name", keyword, MatchMode.ANYWHERE));
		}
		dc.createAlias("noticeType", "noticeType");
		if(status==null){
			
		}
		else if(status==1){
			dc.add(Restrictions.eq("status",status));
		} else {
		    dc.add(Restrictions.eq("status", status));
		}
		if(ifIncludeNextLevelBoolean){
			if(noticeTypeId != null && noticeTypeId !=0L){
				dc.add(Restrictions.or(Restrictions.like("noticeType.prefix", "-" + noticeTypeId + "-", MatchMode.ANYWHERE), Restrictions.like("noticeType.prefix", noticeTypeId + "-",MatchMode.START)));
			}
		}else{
			if(noticeTypeId != null && noticeTypeId !=0L){
				dc.add(Restrictions.eq("noticeTypeId", noticeTypeId));
			}else{
				dc.add(Restrictions.eq("noticeTypeId", -1L));
			}
		}
		page = getCommonService().findPage(dc, start, limit);
		
		request.setAttribute("statusMap", NoticeTemplate.getStatusMap());
		request.setAttribute("ifIncludeNextLevelMap", getIfIncludeNextLevelMap());
		request.setAttribute("status", status);
		request.setAttribute("ifIncludeNextLevel", ifIncludeNextLevelBoolean);
		request.setAttribute("keyworld", keyword);
		request.setAttribute("noticeTypeId", noticeTypeId);
		return "list";
	}
	
	
	/**
	 * 编辑模板
	 * @return
	 */
	public String edit(){
		Long id = getParameterLong("id");
		if(id == null) {
			noticeTemplate = new NoticeTemplate();
			noticeTemplate.setNoticeTypeId(noticeTypeId);
			noticeTemplate.setNoticeType(getCommonService().getById(NoticeType.class, noticeTypeId));
			noticeTemplate.setStatus(NoticeType.STATUS_ENABLE);
		}else{
			noticeTemplate = getCommonService().getById(NoticeTemplate.class, id);
		}
		request.setAttribute("statusMap", NoticeTemplate.getStatusMap());
		return "edit";
	}
	
	
	/**
	 * 保存模板
	 */
	public void save() {
		Map<String,Object> result = new HashMap<String,Object>();
		if(noticeTemplate == null) {
			result.put("success", false);
			result.put("msg", "参数错误！");
			renderJson(result);
			return;
		}
		
		if(StringUtils.isBlank(noticeTemplate.getName())) {
			result.put("success", false);
			result.put("msg", "名称不能为空！");
			renderJson(result);
			return;
		}
		
		try{
			if(noticeTemplate.getId() == null) {
				noticeTemplate.setCreateDate(new Date());
				noticeTemplate.setCreateUserId(LoginInfoUtils.getLoginInfo(request).getUserDTO().getId());
			}
			getCommonService().saveOrUpdate(noticeTemplate);
			result.put("success", true);
		}catch(Exception e) {
			e.printStackTrace();
			result.put("success", false);
			result.put("msg", "系统异常！");
		}
		renderJson(result);
	}
	
	
	private Map<Boolean,Object> getIfIncludeNextLevelMap(){
		Map<Boolean,Object>  map = new HashMap<Boolean, Object>();
		map.put(Boolean.TRUE, "是");
		map.put(Boolean.FALSE, "否");
		return map;
	}


	public Long getNoticeTypeId() {
		return noticeTypeId;
	}


	public void setNoticeTypeId(Long noticeTypeId) {
		this.noticeTypeId = noticeTypeId;
	}


	public NoticeTemplate getNoticeTemplate() {
		return noticeTemplate;
	}


	public void setNoticeTemplate(NoticeTemplate noticeTemplate) {
		this.noticeTemplate = noticeTemplate;
	}
	
}
