package com.xinleju.erp.finance.action;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONObject;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.erp.annotation.PageField;
import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.base.utils.JsonUtils;
import com.xinleju.erp.data.cache.api.MDFinanceCacheService;
import com.xinleju.erp.data.cache.api.MDProjectCacheService;
import com.xinleju.erp.data.cache.dto.FinanceLegalPersonDTO;
import com.xinleju.erp.data.cache.dto.ProjectBaseDTO;
import com.xinleju.erp.data.cache.dto.ProjectBranchDTO;
import com.xinleju.erp.finance.models.FiAccountSetData;
import com.xinleju.erp.finance.service.FiAccountSetDataService;
import com.xinleju.erp.finance.service.FiAccountSetService;
import com.xinleju.erp.finance.service.SyncFinaDataService;
import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.flow.utils.LoginInfoUtils;
import com.xinleju.erp.frame.dto.CompanyDTO;
import com.xinleju.erp.frame.dto.LegalPersonDTO;
import com.xinleju.erp.frame.dto.PayUnitDTO;
import com.xinleju.erp.frame.models.BaseEntity;
import com.xinleju.erp.frame.models.Company;
import com.xinleju.erp.frame.service.CompanyService;
import com.xinleju.erp.frame.utils.CommonUtil;

public class FiAccountSetDataAction extends BaseAction {
	private static final Log log = LogFactory.getLog(FiAccountSetDataAction.class);
	private FiAccountSetData fiAccountSetData;
	private Long accountSetId;
	@Autowired
	private FiAccountSetDataService fiAccountSetDataService;
	@Autowired
	private SyncFinaDataService syncFinaDataService;
	@Autowired
	private MDProjectCacheService mdProjectCacheService;
	@Autowired
	private FiAccountSetService fiAccountSetService;
	@Autowired
	private CompanyService companyService;

	
	
	private Map<String, Map<String, Object>> pageFiledMap;

	/**
	 * 系统注册列表页
	 * 
	 * @return
	 */
	public String list() {
		try {
			if (fiAccountSetData == null)
				fiAccountSetData = new FiAccountSetData();
			Long accountSetId = getParameterLong("accountSetId");
			Long sysId = getParameterLong("sysId");
			request.setAttribute("setId", accountSetId);
			request.setAttribute("sysId", sysId);
			

			//request.setAttribute("lepMap", lepMap);
//			fiAccountSetData.setSysId(1L);
//			if (accountSetId != null)
//				fiAccountSetData.setAccountSetId(accountSetId);
//			// 获得账套信息
//			FiAccountSet fiAccountSet = fiAccountSetService.getFiAccountSetById(accountSetId);
//			request.setAttribute("statusMap", FiSysInfo.getStatusMap());
//			request.setAttribute("sysTypeMap", FiSysTypeEnum.getMap());
//			request.setAttribute("sysMap", FiAccountSetData.getsysMap());
//			request.setAttribute("vtype_ref", CommonUtil.transRef(FiSysTypeEnum.getMap()).toString());
//			Map<String, String> jsMap = new HashMap<String, String>();
//			// 系统状态列表
//			jsMap.put("status_ref", CommonUtil.transRef(BusinessObject.getStatusMap()).toString());
//			// 系统接口类型
//			jsMap.put("vtype_ref", CommonUtil.transRef(FiSysTypeEnum.getMap()).toString());
//			request.setAttribute("refs", jsMap);
//			// 取项目分期
//			Map<String, String> projectmap = new HashMap<String, String>();
//			FinaQueryParams params = new FinaQueryParams();
//			params.setCorpId(fiAccountSet.getCompanyId().toString());
//			FlowResult<PageBean<FinaData>> fr = syncFinaDataService.getProjectPeriod(params);
//			List<FinaData> projectBranchs = fr.getResult().getItems();
//			for (FinaData fd : projectBranchs) {
//				// Long k= (Long) fd.get("id");
//				String v = (String) fd.get("name");
//				projectmap.put(v, v);
//			}
//			request.setAttribute("projectBranchMap", projectmap);
//			request.setAttribute("projectBranchs", JsonUtils.toJSONString(projectBranchs));
		} catch (Exception e) {
			e.printStackTrace();
			log.error("", e);
		}
		return "list";
	}

	/**
	 * 查询(加载)系统数据
	 */
	public void loadlist() {
		try {
			String keyword = request.getParameter("keyword");
			String sta = request.getParameter("status");
			Long accountSetId = getParameterLong("setId");
			Long sysId = getParameterLong("sysId");
			String compCode = request.getParameter("cc");
			//String compName = request.getParameter("cn");
			DetachedCriteria dc = DetachedCriteria.forClass(FiAccountSetData.class);
//			if (StringUtils.isNotBlank(keyword)) {
//				dc.add(Restrictions.like("fiSysName", keyword, MatchMode.ANYWHERE));
//			}
//			if (fiAccountSetData != null && fiAccountSetData.getAccountSetId() != null) {
//				if (fiAccountSetData.getAccountSetId() > 0l) {
//					dc.add(Restrictions.eq("accountSetId", accountSetId));
//				}
//			}

			if (StringUtils.isNotBlank(sta)) {
				Integer status = Integer.valueOf(sta);
				dc.add(Restrictions.eq("status", status));
				request.setAttribute("status", status);
			}
			if (accountSetId != null) {
				dc.add(Restrictions.eq("accountSetId", accountSetId));
				//request.setAttribute("setId", accountSetId);
			}
			if (sysId != null) {
				dc.add(Restrictions.eq("sysId", sysId));
			}
			if (StringUtils.isNotBlank(compCode)) {
				dc.add(Restrictions.eq("companyCode", compCode));
				request.setAttribute("cc", compCode);
			}
//			if (StringUtils.isNotBlank(compName)) {
//				dc.add(Restrictions.eq("companyName", compName));
//				request.setAttribute("cn", compName);
//			}
			page = getCommonService().findPage(dc, start, limit);
			JSONObject jobj = CommonUtil.transListResult(page.getTotal(), page.getItems());
			renderJson(jobj.toString());
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public Map<String, Map<String, Object>> getPageFiledMap(Class<? extends BaseEntity> clazz) {
		if (pageFiledMap == null) {
			pageFiledMap = new HashMap<String, Map<String, Object>>();
			Field[] fields = clazz.getDeclaredFields();
			for (Field field : fields) {
				PageField pageField = field.getAnnotation(PageField.class);
				Map<String, Object> map = new HashMap<String, Object>();
				map.put("showname", pageField.showname());
				map.put("must", pageField.must());
				map.put("show", pageField.show());
				map.put("type", pageField.type());
				map.put("unique", pageField.unique());
				map.put("valuemap", pageField.valuemap());
				map.put("refmodel", pageField.refmodel());
				pageFiledMap.put(field.getName(), map);
			}
		}
		return pageFiledMap;
	}

	/**
	 * 编辑页面
	 * 
	 * @return
	 */
	public String edit() throws Exception {
		// Long id = getParameterLong("id");
		// if (id != null) {
		// FiAggDTO aggDTO = fiBusinessService.queryAggById(
		// FiSysInfo.class, id);
		// fiSysInfo = (FiSysInfo) aggDTO.getParent();
		// }
		// request.setAttribute("statusMap", FiSysInfo.getStatusMap());
		// request.setAttribute("sysTypeMap", FiSysTypeEnum.getMap());
		// Map<String,String> jsMap = new HashMap<String,String>();
		// jsMap.put("status_ref",
		// CommonUtil.transRef(BusinessObject.getStatusMap()).toString());
		// jsMap.put("vtype_ref", CommonUtil.transRef(
		// FiSysTypeEnum.getMap()).toString());
		// request.setAttribute("refs", jsMap);
		return "edit";
	}

	/**
	 * 根据id查出 帐套信息
	 */
	public void getFiAccountSetDataById() {
		Long id = this.getParameterLong("id");
		FiAccountSetData fiAccountSetData = this.fiAccountSetDataService.getFiAccountSetDataById(id);
		this.renderJson(fiAccountSetData);
	}

	/**
	 * 保存对象
	 */
	public void saveFiAccountSetData() throws Exception {
		Map<String, Object> result = new HashMap<String, Object>();
		if (fiAccountSetData.getId() != null) {
			fiAccountSetData.setEditDate(new Date());
			fiAccountSetData.setEditUserId(LoginInfoUtils.getLoginInfoUserDtoId(request));
		} else {
//			String idStr = fiAccountSetData.getCompanyCode();
//			if(StringUtils.isNotBlank(idStr)){
//				String id = idStr.substring(0, idStr.length()-1);
//				fiAccountSetData.setCompanyId(Long.parseLong(id));
//			}
			
			fiAccountSetData.setCreateDate(new Date());
			fiAccountSetData.setStatus(0);
			fiAccountSetData.setCreateUserId(LoginInfoUtils.getLoginInfoUserDtoId(request));
		}
		try {
			this.fiAccountSetDataService.saveOrUpdate(fiAccountSetData);
			// FiAggDTO aggDTO = new FiAggDTO();
			// aggDTO.setParent(fiSysInfo);
			// ValidateCheckUtil.checkValidate(aggDTO);
			// fiBusinessService.saveOrUpdate(aggDTO);

			result.put("success", true);
			result.put("msg", "保存成功");
			String json = JsonUtils.toJSONString(result);
			render(json, "text/html;charset=UTF-8");
		} catch (Exception e) {
			result.put("success", false);
			result.put("msg", e.getMessage());
			log.error("", e);
			String json = JsonUtils.toJSONString(result);
			render(json, "text/html;charset=UTF-8");
		}
	}

	/**
	 * 启用
	 */
	public void enable() {
		Map<String, Object> result = new HashMap<String, Object>();
		try {
			String ids = request.getParameter("id");
			if (ids != null) {
				String[] idAry = ids.split(";");
				// fiAccountSetDataService.batchUpdateStatus(FiSysInfo.class,
				// CommonUtil.transformIds(idAry), Integer.valueOf(0));
			}
			result.put("success", true);
		} catch (Exception e) {
			result.put("success", false);
			result.put("msg", e.getMessage());
		}
		renderJson(result);
	}

	/**
	 * 删除
	 */
	public void delete() {
		Map<String, Object> result = new HashMap<String, Object>();
		try {
			String ids = request.getParameter("id");
			if (ids != null) {
				Long[] idAry = CommonUtil.transformIds(ids.split(";"));
				this.fiAccountSetDataService.delete(idAry);
			}
			result.put("success", true);
		} catch (Exception e) {
			result.put("success", false);
			result.put("msg", e.getMessage());
			log.error("", e);
		}
		renderJson(result);
	}

	/**
	 * 禁用
	 */
	public void unable() {
		Map<String, Object> result = new HashMap<String, Object>();
		try {
			String ids = request.getParameter("id");
			if (ids != null) {
				String[] idAry = ids.split(";");
				// fiBusinessService.batchUpdateStatus(FiSysInfo.class,
				// CommonUtil.transformIds(idAry), Integer.valueOf(1));
			}
			result.put("success", true);
		} catch (Exception e) {
			result.put("success", false);
			result.put("msg", e.getMessage());
		}
		renderJson(result);
	}
	

	/**
	 * 加载公司法人
	 * 
	 */
	public void loadlegalPersons(){
		List<LegalPersonDTO> lps = new ArrayList<LegalPersonDTO>();
		MDFinanceCacheService syncFinaMdData = syncFinaDataService.getSyncFinaMdData();
		if (syncFinaMdData != null) {
			FlowResult<List<FinanceLegalPersonDTO>> results = syncFinaMdData.getFinanceLegalPersonAll();
			List<FinanceLegalPersonDTO> list = results.getResult();
			for(FinanceLegalPersonDTO fp:list){
				LegalPersonDTO lpDto = new LegalPersonDTO();
				String name = fp.getName();
				Long id = fp.getId();
				
				lpDto.setId(id.toString());
				lpDto.setName(name);
				lps.add(lpDto);
			}
		}
		
		String json = JsonUtils.toJSONString(lps);
		renderHtml(json);
	}
	
	/**
	 * 加载公司信息
	 */
	public void loadCompanys(){
		List<CompanyDTO> lps = new ArrayList<CompanyDTO>();
		Map<String,Object> mapjson=new HashMap<String,Object>();
		List<Company> companys = companyService.getCompanyAll();
		for(Company company:companys){
			CompanyDTO cdto = new CompanyDTO();
			String name = company.getName();
			Long id = company.getId();
			
			cdto.setId(id.toString());
			cdto.setName(name);
			lps.add(cdto);
		}	
		
		mapjson.put("total",lps==null?0:lps.size());
		mapjson.put("rows", lps);
		
		renderJson(mapjson);
	}
	
	/**
	 * 根据公司ID加载对应的分期
	 */
	public void findProjectBanchByCompanyId() {

		Long compayId = getParameterLong("companyId");
		List<ProjectBranchDTO> result = new ArrayList<ProjectBranchDTO>();
		Map<String, Object> mapjson = new HashMap<String, Object>();
		FlowResult<List<ProjectBaseDTO>> projectBases = mdProjectCacheService.getProjectBaseByOrgId(compayId);
		Map<Long,String> baseBranchMap = new HashMap<Long,String>();
		if(projectBases != null){
			List<ProjectBaseDTO> list = projectBases.getResult();
			for(ProjectBaseDTO dto:list){
				baseBranchMap.put(dto.getId(), dto.getName());
			}
		}
		FlowResult<List<ProjectBranchDTO>> results = mdProjectCacheService.getProjectBranchListByOrgId(compayId);
		if (results != null) {
			List<ProjectBranchDTO> list = results.getResult();
			
			for (ProjectBranchDTO vo : list) {
				ProjectBranchDTO voNew = new ProjectBranchDTO();
				String name = "";
				if(baseBranchMap.get(vo.getProjectId())!=null){
					name = baseBranchMap.get(vo.getProjectId())+"-"+vo.getName();
				}else{
					name = vo.getName();
				}
				voNew.setName(name);
				voNew.setId(vo.getId());
				result.add(voNew);
			}
		

			//mapjson.put("total", result == null ? 0 : result.size());
			//mapjson.put("rows", result);
		}

		renderJson(result);
	}
	
	/**
	 * 记载付款单位
	 */
	public void findPayUnit(){
		
		List<PayUnitDTO> result = new ArrayList<PayUnitDTO>();
		Map<String,Object> mapjson=new HashMap<String,Object>();
		try{
			Long companyId = getParameterLong("corpid");
			if(companyId==null){
				companyId = 0L;
			}
		MDFinanceCacheService syncFinaMdData = syncFinaDataService.getSyncFinaMdData();
		if(syncFinaMdData != null){
			FlowResult<List<FinanceLegalPersonDTO>> fr = syncFinaMdData.getFinanceLegalPersonByCompanyId(companyId);
			if(fr!=null){
				List<FinanceLegalPersonDTO> list = fr.getResult();
				for(FinanceLegalPersonDTO vo :list){
					PayUnitDTO voNew = new PayUnitDTO();
					voNew.setName(vo.getName());
					voNew.setId(vo.getId());
					result.add(voNew);
				}
			}
		
			mapjson.put("total",result==null?0:result.size());
			mapjson.put("rows", result);
		}
		}catch(Exception e){
			e.printStackTrace();
		}

		renderJson(mapjson);
	}
	
	
	public String payUnit(){
		Long companyId = getParameterLong("companyId");
		request.setAttribute("companyId", companyId);
    	return "payUnit";
    }
	
	public String companys(){
    	return "companys";
    }

	public String loadFields() {
		return "fieldsInfo";
	}

	public FiAccountSetData getFiAccountSetData() {
		return fiAccountSetData;
	}

	public void setFiAccountSetData(FiAccountSetData fiAccountSetData) {
		this.fiAccountSetData = fiAccountSetData;
	}

	public Long getAccountSetId() {
		return accountSetId;
	}

	public void setAccountSetId(Long accountSetId) {
		this.accountSetId = accountSetId;
	}
	


}
