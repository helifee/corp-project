package com.xinleju.erp.flowengine.service;

import java.util.List;

import com.xinleju.erp.flow.service.api.extend.dto.UserDTO;
import com.xinleju.erp.flowengine.models.FlowInstance;
import com.xinleju.erp.flowengine.models.FlowInstanceStep;
import com.xinleju.erp.flowengine.models.FlowInstanceStepWork;
import com.xinleju.erp.flowengine.models.FlowInstanceStepWorkTask;

public interface FlowInstanceStepService {


	/**
	 * 完成本环节,本工作组下的任务
	 * @param flowInstanceStep
	 * @param flowInstanceStepWork
	 * @param flowInstanceStepWorkTask
	 * @return
	 */
	public boolean tryComplementFlowInstanceStep(
			FlowInstanceStep flowInstanceStep,FlowInstanceStepWork flowInstanceStepWork,FlowInstanceStepWorkTask flowInstanceStepWorkTask,UserDTO currUser) throws Exception;
	
	/**
	 * @param flowInstanceStepWorkTask
	 * @return
	 * @throws Exception
	 */
	public boolean save(FlowInstanceStepWorkTask flowInstanceStepWorkTask,UserDTO currUser)throws Exception;
	
	/**
	 * @param fiTask
	 * @param stepId
	 * @param isReStart
	 * @return
	 * @throws Exception
	 */
	public boolean saveToBack(FlowInstance flowInstance,FlowInstanceStepWorkTask fiTask,String stepId,boolean isReStart,UserDTO currUser) throws Exception;
	
	
	
	/**
	 * @param fiTask
	 * @param stepId
	 * @param isReStart
	 * @return
	 * @throws Exception
	 */
	public boolean saveToBack(FlowInstance flowInstance,FlowInstanceStepWorkTask fiTask,String stepId,String backTaskId,boolean isReStart ,UserDTO currUser) throws Exception;
	
	/**
	 * @param fiTask
	 * @param lstUserId
	 * @return
	 * @throws Exception
	 */
	public boolean saveToXB(FlowInstanceStepWorkTask fiTask,List<String> lstUserId,UserDTO currUser) throws Exception;
	
	/**
	 * @param fiTask
	 * @param userId
	 * @return
	 * @throws Exception
	 */
	public boolean saveToZB(FlowInstanceStepWorkTask fiTask,String userId,UserDTO currUser) throws Exception;
	
	/**
	 * @param fiTask
	 * @return
	 * @throws Exception
	 */
	public boolean saveToGT(FlowInstanceStepWorkTask fiTask,UserDTO currUser) throws Exception;
	
	/**
	 * @param fiTask
	 * @return
	 * @throws Exception
	 */
	public boolean saveToHF(FlowInstanceStepWorkTask fiTask,UserDTO currUser) throws Exception;
	
	
	
	/**
	 * @throws Exception
	 */
	public void csFlowInstanceStepWorkTask() throws Exception;
	
	
	
	/**
	 * @param fiTask
	 * @return
	 * @throws Exception
	 */
	public boolean saveRecycleCoHost(FlowInstanceStepWorkTask fiTask)throws Exception;
	

	/**
	 * cuiban
	 * @param fiId
	 * @return
	 * @throws Exception
	 */
	public boolean saveToCb(FlowInstance flowInstance,String taskIds) throws Exception;
	
	/**
	 * 撤回流程
	 * @param fiId
	 * @return
	 * @throws Exception
	 */
	public boolean saveToCh(FlowInstance flowInstance) throws Exception;
	
	/**
	 * 流程替换
	 * @param taskId
	 * @param userId
	 * @param repalceUserId
	 * @throws Exception
	 */
	public void replaceTaskIdToUserId(FlowInstanceStepWorkTask flowInstanceStepWorkTask ,String userId,String repalceUserId) throws Exception;
	
	
	
	/**
	 * 作废流程
	 * @param fiId
	 * @return
	 * @throws Exception
	 */
	public boolean saveToZF(FlowInstance flowInstance,UserDTO currUser) throws Exception;
	
	
	

	/**
	 * 流程添加环节/人员
	 * @param workId
	 * @param addApplayUserId
	 * @param nodeType
	 * @return
	 */
	public boolean addFlowApprovalPersonSave(String workId,String addApplayUserId,String nodeType,FlowInstance flowInstance) throws Exception;
	
	
	
	/**
	 * dangqian 
	 * @param currentFlowInstanceStep
	 * @return
	 */
	public List<FlowInstanceStep> getNextFlowInstanceStepByCurrentStep(FlowInstanceStep currentFlowInstanceStep) throws Exception;
	
	
	/**
	 * @param flowInstanceStepWorkTask
	 * @return
	 * @throws Exception
	 */
	public List<String> tryTestComplementFlowInstanceStepWork(FlowInstanceStepWorkTask flowInstanceStepWorkTask) throws Exception;
	
	
	
	/**
	 * @param flowInstance
	 * @param flowInstanceStep
	 * @param flowInstanceStepWork
	 * @param flowInstanceStepWorkTask
	 * @param backStepId
	 * @param backStepFlag
	 * @return
	 * @throws Exception
	 */
	public  boolean tryBacktoFlowInstanceStep(FlowInstance flowInstance,FlowInstanceStep flowInstanceStep,FlowInstanceStepWork flowInstanceStepWork,FlowInstanceStepWorkTask flowInstanceStepWorkTask,String backStepId,boolean backStepFlag,UserDTO currUser) throws Exception;
	/**
	 * @return
	 * @throws Exception
	 */
	public boolean  jumpFlowInstanceStepWorkTask(String fiId,UserDTO currUser) throws Exception;
	
	
	
	/**
	 * 一键审结
	 * @param flowInstance
	 * @return
	 * @throws Exception
	 */
	public boolean saveToKeyFinalized(FlowInstance flowInstance,UserDTO currUser) throws Exception;

	public boolean isProofreadStepUploadFile(String fiId);
}
