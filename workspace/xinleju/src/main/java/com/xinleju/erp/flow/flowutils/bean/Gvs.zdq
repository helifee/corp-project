package com.xinleju.erp.flow.flowutils.bean;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.serializer.SerializerFeature;

/**
 * <p>
 * 全局变量载体&操作类
 * </p>
 * <p>
 * </p>
 * 
 * @author 孙朝辉
 * @version $Id: Gvs.java 1597 2014-10-30 06:19:37Z sunchaohui $
 * @since
 * @see
 */
public final class Gvs implements Serializable {

    /**
     * 序列化
     */
    private static final long serialVersionUID = 4027120796428411632L;
    
    /**
     * 全局变量
     */
    private Map<String, GvBean> gvMap;

    public Gvs() {
        this.gvMap = new HashMap<String, GvBean>();
    }
    public Map<String, Object> getValueMap() {

        Map<String, Object> dataMap = new HashMap<String, Object>();

        for (GvBean kv : gvMap.values()) {
            dataMap.put(kv.getCode(), kv.getVal());
        }

        return dataMap;
    }
    /**
     * 
     * <p>创建Gvs</p>
     * <p></p>
     * @author 孙朝辉
     * @return
     */
    public static Gvs create() {
        return new Gvs();
    }

    
    /**
     * 
     * <p>增加一个全局变量</p>
     * <p></p>
     * @author 孙朝辉
     * @param gv
     * @return
     */
    public Gvs add(GvBean gv) {
        if (!this.contains(gv)) {
            this.gvMap.put(gv.getCode(), gv);
        }
        return this;
    }
    public Gvs add(String code,Object v,String name) {
        GvBean gb = new GvBean(code,v,name);
        if (!this.contains(gb)) {
            this.gvMap.put(gb.getCode(), gb);
        }
        return this;
    }
    /**
     * 
     * <p>判断是否已经存在</p>
     * <p></p>
     * @author 孙朝辉
     * @param gv
     * @return
     */
    private boolean contains(GvBean gv) {
        return this.gvMap.containsValue(gv);
    }

    public Collection<GvBean> asList() {
        return this.gvMap.values();
    }

    public String toJSONString() {

        return JSONObject.toJSONString(this, SerializerFeature.WriteClassName);
    }

    public static Gvs parseObject(String gvsString) {
        return StringUtils.isNotBlank(gvsString) ? JSON.parseObject(gvsString, Gvs.class) : new Gvs();
    }

    public Map<String, GvBean> getGvMap() {
        return gvMap;
    }

    public void setGvMap(Map<String, GvBean> gvMap) {
        this.gvMap = gvMap;
    }

    /**
     * <p>
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @param string
     * @return
     */
    public Object get(String key) {
        return gvMap == null || gvMap.get(key) == null ? null : gvMap.get(key).getVal();
    }

    /**
     * <p>
     * </p>
     * <p>
     * </p>
     * 
     * @author 孙朝辉
     * @return
     */
    public static Map<String,Object> getValueMapFromGvs(Gvs gvs) {

        Map<String, Object> valueMap = new HashMap<String, Object>();
        if (null != gvs && null != gvs.getGvMap() && gvs.getGvMap().size() > 0){
            for (GvBean gv : gvs.getGvMap().values()) {
                valueMap.put(gv.getCode(), gv.getVal());
            }
        }
        return valueMap;
    }

    public static Gvs getGvsFromValueMap(Map<String, Object> m) {

        Gvs gvs = Gvs.create();
        if (m != null) {
            for (String k : m.keySet()) {
                gvs.add(new GvBean(k, m.get(k), ""));
            }
        }

        return gvs;
    }
    public List<String> names() {

       List<String> ns = new ArrayList<String>();
        if (this.gvMap != null) {
            for (String k : this.gvMap.keySet()) {
               ns.add(k);
            }
        }

        return ns;
    }
    public static void main(String[] args) {
        Gvs gvs = Gvs.create();
        gvs.add(new GvBean("t", 1L, "xx"));
        System.out.println(gvs.toJSONString());

        Gvs gvs2 = Gvs.parseObject(gvs.toJSONString());
        System.out.println(gvs2);
    }
}
