package com.xinleju.erp.frame.action;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.flow.utils.LoginInfoUtils;
import com.xinleju.erp.frame.dao.UserDao;
import com.xinleju.erp.frame.models.NoticeType;
import com.xinleju.erp.frame.service.NoticeService;

/**
 * 通知公告类型管理
 * @author chenhongbin
 *
 */
public class NoticeTypeAction extends BaseAction {
	
	@Autowired
	private NoticeService noticeService;
	
	@Autowired
	private UserDao userDao;
	
	private NoticeType noticeType;
	/**
	 * 通知公告类型树
	 */
	public void getAllNoticeTypeTree() {
		String includeDisabled = getParameter("includeDisabled");
		String includeTemplate = getParameter("includeTemplate");
		String parentIdStr = getParameter("parentId");
		String type = null;
		Long parentId = null;
		if(StringUtils.isNotBlank(parentIdStr)) {
			type = StringUtils.substringBefore(parentIdStr, "_")+"_";
			parentId = Long.valueOf(StringUtils.substringAfter(parentIdStr, "_"));
		}
		List<Map<String,Object>> result = noticeService.getAllNoticeTypeTree(type, parentId,
				(StringUtils.isBlank(includeDisabled) || "false".equals(includeDisabled)) ? false : true,
				(StringUtils.isBlank(includeTemplate) || "false".equals(includeTemplate)) ? false : true);
		renderJson(result);
	}
	
	public void getNoticeTypeTreeForAuth() {
		String parentIdStr = getParameter("parentId");
		String type = null;
		Long parentId = null;
		if(StringUtils.isNotBlank(parentIdStr)) {
			type = StringUtils.substringBefore(parentIdStr, "_")+"_";
			parentId = Long.valueOf(StringUtils.substringAfter(parentIdStr, "_"));
		}
		List<Map<String,Object>> result = noticeService.getAllNoticeTypeTree(type, parentId, false, true);
		renderJson(result);
	}
	
	/**
	 * 编辑公告类别
	 * @return
	 */
	public String edit() {
		Long id = getParameterLong("id");
		if(id == null) {
			noticeType = new NoticeType();
			Long parentId = getParameterLong("parentId");
			noticeType.setParentId((parentId == null || parentId == 0L) ? null : parentId);
			if(parentId != null && parentId != 0L) {
				noticeType.setParent(getCommonService().getById(NoticeType.class, parentId));
			}
			noticeType.setStatus(NoticeType.STATUS_ENABLE);
		}else {
			noticeType = getCommonService().getById(NoticeType.class, id);
		}
		
		request.setAttribute("statusMap", NoticeType.getStatusMap());
		return "edit";
	}
	
	/**
	 * 保存公告类别
	 */
	public void save() {
		Map<String,Object> result = new HashMap<String,Object>();
		if(noticeType == null) {
			result.put("success", false);
			result.put("msg", "参数错误！");
			renderJson(result);
			return;
		}
		
		if(StringUtils.isBlank(noticeType.getName())) {
			result.put("success", false);
			result.put("msg", "名称不能为空！");
			renderJson(result);
			return;
		}
		
		try{
			if(noticeType.getId() == null) {
				noticeType.setCreateDate(new Date());
				noticeType.setCreateUserId(LoginInfoUtils.getLoginInfo(request).getUserDTO().getId());
			}
			noticeService.saveOrUpdate(noticeType);
			result.put("success", true);
		}catch(Exception e) {
			e.printStackTrace();
			result.put("success", false);
			result.put("msg", "系统异常！");
		}
		renderJson(result);
	}

	public NoticeType getNoticeType() {
		return noticeType;
	}

	public void setNoticeType(NoticeType noticeType) {
		this.noticeType = noticeType;
	}
	
	/**
	 * 根据权限控制模板选择树
	 */
	public void getTypeTree() {
		String includeDisabled = getParameter("includeDisabled");
		String includeTemplate = getParameter("includeTemplate");
		String parentIdStr = getParameter("parentId");
		String loginName = request.getUserPrincipal().getName();
		String type = null;
		Long parentId = null;
		if(StringUtils.isNotBlank(parentIdStr)) {
			type = StringUtils.substringBefore(parentIdStr, "_")+"_";
			parentId = Long.valueOf(StringUtils.substringAfter(parentIdStr, "_"));
		}
		List<Map<String,Object>> result = noticeService.getNoticeTypeTree(loginName,type, parentId,
				(StringUtils.isBlank(includeDisabled) || "false".equals(includeDisabled)) ? false : true,
				(StringUtils.isBlank(includeTemplate) || "false".equals(includeTemplate)) ? false : true);
		renderJson(result);
	}
	

}
