package com.xinleju.erp.thirdpart.oa.fanwei.impl;

import java.util.Date;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.simple.ParameterizedBeanPropertyRowMapper;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.xinleju.erp.base.app.service.impl.BaseService;
import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.erp.form.utils.DbType;
import com.xinleju.erp.frame.dao.AppDao;
import com.xinleju.erp.frame.models.App;
import com.xinleju.erp.frame.models.Msg;
import com.xinleju.erp.frame.models.OaMsgSendLog;
import com.xinleju.erp.frame.service.SettingService;
import com.xinleju.erp.frame.utils.ExceptionUtils;
import com.xinleju.erp.frame.utils.FrameUrlFixUtil;
import com.xinleju.erp.frame.utils.StaticInterface;
import com.xinleju.erp.thirdpart.oa.api.IOaMsgService;
/**
 * @author 河北
 *
 */
@Service
@Transactional
public class OaMsgService4FanWeiImpl extends BaseService implements IOaMsgService{
    /**
     * 每次扫面的数据条数
     */
    public static int batchLimit = 30;
    /**
     * 扫描的最大失败次数
     */
    public static int maxErrorTimes = 3;
    
    @Autowired
    private JdbcTemplate jdbcTemplate;
    
    @Autowired
    private AppDao appDao;
    
    @Autowired
    private SettingService settingService;
    
    @Autowired
    private OATaskPushService4FanWeiImpl2 oATaskPushServiceImpl;
    
    /**
     * 
     * @see com.xinleju.erp.frame.service.IOaMsgService#sendOaMsg(java.lang.Long)
     */
    @Override
    public void sendOaMsg(Long id) {
        if (null != id) {
            Msg msg = getDao().getById(Msg.class, id);
            String opType = msg.getOpType();
            Integer msgType = msg.getMsgType();
            App app = appDao.getAppByCode(msg.getAppCode());
            App appPt = appDao.getPtApp();
            String link = FrameUrlFixUtil.urlFix(msg.getUrl(),app.getDepUrl(), (StringUtils.isNotBlank(appPt.getDepUrl()) ? appPt.getDepUrl().trim() +  "/casUrlLogin?erpUrl=" : "")); 
            try{
                if (StringUtils.isNotBlank(opType) && null != msgType){
                    if (Msg.OP_TYPE_DB.equals(opType)){
                        oATaskPushServiceImpl.sendTodo(msg);
                    } else if (Msg.OP_TYPE_YB.equals(opType)){
                        oATaskPushServiceImpl.setTodoDone(msg);
                    } else if (Msg.OP_TYPE_RM.equals(opType)){
                        oATaskPushServiceImpl.deleteTodo(msg);
                    } else if (Msg.OP_TYPE_YD.equals(opType)){
                        oATaskPushServiceImpl.setTodoDone(msg);
                    }else if (Msg.OP_TYPE_WD.equals(opType)){
                        oATaskPushServiceImpl.sendTodo(msg);
                    }
                    this.markSendLog(id, opType, OaMsgSendLog.RETURN_STATE_SUCCESS, "执行成功！");
                    //OA日志
                    this.savaOALog(msg.getModuleCode(),msg.getId(), msg.getTitle(), link, new Date(), opType, msgType.toString(), msg.getLoginName());
                }
            }catch(Exception e){
                 this.markSendLog(id, opType, OaMsgSendLog.RETURN_STATE_FAIL, ExceptionUtils.getExceptionMsg(e));
                //OA日志
            	e.printStackTrace();
                this.savaOALog(msg.getModuleCode(),msg.getId(), msg.getTitle(), link, new Date(), opType, msgType.toString(), msg.getLoginName());
            }
        }
    }
    @Override
    public void batchSendOaMsg() {
        this.batchSendOaMsg(batchLimit);
    }
    /**
     * 
     * @see com.xinleju.erp.frame.service.IOaMsgService#batchSendOaMsg(int)
     */
    @Override
    public void batchSendOaMsg(int size) {
        String settingMaxErrorTime = settingService.getSettingValue(StaticInterface.SKEY_PT_OA_INTERFACE_MAX_ERROR_TIMES);
        if (StringUtils.isNotBlank(settingMaxErrorTime) && StringUtils.isNumeric(settingMaxErrorTime.trim())){
            maxErrorTimes = Integer.valueOf(settingMaxErrorTime.trim());
        }
        ParameterizedBeanPropertyRowMapper<Msg> rm = ParameterizedBeanPropertyRowMapper.newInstance(Msg.class);
        String sql = "select o.id from sm_msg o left join sm_oa_msg_send_log s on (o.id = s.msg_id and s.op_type = o.op_type ) where (s.return_state = ? or s.return_state = ? or s.return_state is null) and (s.error_times is null or s.error_times < ?) AND (o.op_type = 'DB' or o.op_type = 'WD' or o.op_type = 'YB' or o.op_type = 'YD' or o.op_type = 'RM' ) order by o.typed_date asc,o.id asc limit ?";
        List<Msg> oaMsgs = jdbcTemplate.query(sql, rm, OaMsgSendLog.RETURN_STATE_CREATE, OaMsgSendLog.RETURN_STATE_FAIL, maxErrorTimes, size);
        if (oaMsgs != null && oaMsgs.size() > 0) {
            for (int i = 0; i < oaMsgs.size(); i++) {
            	System.out.println("@@@@@@@@@@@@@@@@@@@@@"+oaMsgs.get(i).getId());
                this.sendOaMsg(oaMsgs.get(i).getId());
            }
        }
    }
    
    /**
     * 
     * @see com.xinleju.erp.frame.service.IOaMsgService#batchSendOaMsg(java.util.List)
     */
    @Override
    public void batchSendOaMsg(List<Long> ids) {
        if(!ids.isEmpty()) {
            ParameterizedBeanPropertyRowMapper<Long> rm = ParameterizedBeanPropertyRowMapper.newInstance(Long.class);
            String sql = "select o.id from sm_msg o where o.id in (?)";
            List<Long> oaMsgs = jdbcTemplate.query(sql,ids.toArray(), rm);
            if (oaMsgs != null && oaMsgs.size() > 0) {
                for (int i = 0; i < oaMsgs.size(); i++) {
                    this.sendOaMsg(oaMsgs.get(i));
                }
            }
        }
    }
    /**
     * 错误日志
     * @author jun
     * @param id
     * @param opType
     * @param errorMsg
     */
    private void markSendLog(Long id, String opType, int returnState, String errorMsg){
        if (OaMsgSendLog.RETURN_STATE_SUCCESS == returnState){
            int count = jdbcTemplate.update("update sm_oa_msg_send_log t set t.return_state = ? where t.msg_id = ? and t.op_type = ?", returnState, id, opType);
            if (1 > count){
                OaMsgSendLog osl = new OaMsgSendLog();
                osl.setMsgId(id);
                osl.setOpType(opType);
                osl.setErrorTimes(0);
                osl.setReturnState(returnState);
                getDao().save(osl);
            }
        } else {
            int count = jdbcTemplate.update("update sm_oa_msg_send_log t set t.return_state = ?,t.error_times = ("+DbType.getType()+"ifnull(t.error_times,0) + 1),t.error_msg = ? where t.msg_id = ? and t.op_type = ?", OaMsgSendLog.RETURN_STATE_FAIL, errorMsg, id, opType);
            if (1 > count){
                OaMsgSendLog osl = new OaMsgSendLog();
                osl.setErrorMsg(errorMsg);
                osl.setErrorTimes(1);
                osl.setMsgId(id);
                osl.setOpType(opType);
                osl.setReturnState(returnState);
                getDao().save(osl);
            }
        }
    }

	@Override
	public FlowResult<Boolean> savaOALog(String module, long msgId,
			String title, String url, Date typedDate, String opType,
			String msgType, String loginName) {
		// TODO Auto-generated method stub
		return null;
	}
    
    

 

}
