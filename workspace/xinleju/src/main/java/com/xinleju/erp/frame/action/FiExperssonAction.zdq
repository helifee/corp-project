package com.xinleju.erp.frame.action;

import java.util.List;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.frame.enums.FiFieldTypeEnum;
import com.xinleju.erp.frame.models.BOFieldInfo;
import com.xinleju.erp.frame.models.BusinessObject;
import com.xinleju.erp.frame.models.expression.FiExpressionModel;
import com.xinleju.erp.frame.models.extender.BOFieldTreeExtender;
import com.xinleju.erp.frame.service.FiBusinessService;
import com.xinleju.erp.frame.utils.CommonUtil;


/**
 *
 * @author songjunjie
 */
public class FiExperssonAction extends BaseAction{
	@Autowired
	private FiBusinessService fiBusinessService;
	
	public String open(){
		return "dialog";
	}

	/** 
	 * 公式编辑页面中数据加载页面
	 */
	public void load(){
		Long boid = getParameterLong("boid");
		String value = getParameter("value");
		if(boid == null){
			renderError("请选择业务对象");
			return;
		}
		BusinessObject bo = fiBusinessService.getDao().getById(BusinessObject.class, boid);
		if(bo == null){
			renderError("业务对象不存在");
			return;
		}
		JSONObject jobj = new JSONObject();
		//[{name:xxx,format:xxx}] 公式
		JSONArray function = JSONArray.fromObject(FiExpressionModel.getFunctions());
		//[{name:xxx,code:xxx}] 操作符
		JSONArray operator = JSONArray.fromObject(FiExpressionModel.getOperators());
		JSONArray bofieldarray = loadBoFieldTree(boid,null);
		JSONArray botree = new JSONArray();
		JSONObject root = new JSONObject();
		root.put("id", "");
		root.put("text",bo.getVobject());
		root.put("children",bofieldarray);
		botree.add(root);
		jobj.put("value", value);
		jobj.put("function", function);
		jobj.put("operator", operator);
		jobj.put("bofieldtree", botree);
		renderJson(jobj.toString());
	}
	
	public void loadBoTree(){
		Long boid = getParameterLong("boid");
		String fieldkey = getParameter("fieldkey");
		if(boid == null){
			renderError("加载业务对象失败");
			return;
		}
		renderJson(loadBoFieldTree(boid,fieldkey).toString());
	}
	
	private JSONArray loadBoFieldTree(Long boid,String fieldkey){
		List<BOFieldInfo> list = fiBusinessService.findByHQL(BOFieldInfo.class, " FROM BOFieldInfo t WHERE pid= ?" , boid);
		JSONArray array = new JSONArray();
		if(list == null || list.size() < 0)
			return array;
		BOFieldTreeExtender extender = new BOFieldTreeExtender(fieldkey);
		for(BOFieldInfo fieldinfo : list){
			JSONObject jobj = CommonUtil.transEx(fieldinfo, extender);
			//如果是Enum类型，设置节点状态为关闭
			if(fieldinfo.getVtype().equals(FiFieldTypeEnum.TYPE_ENUM.getKey())){
				jobj.put("iconCls", "icon-search");
				jobj.put("state", "closed");
			}
			array.add(jobj);
		}
		return array;
	}
	
	private void renderError(String message){
		JSONObject res = new JSONObject();
		res.put("success", false);
		res.put("msg", message);
		renderJson(res.toString());
	}
}
