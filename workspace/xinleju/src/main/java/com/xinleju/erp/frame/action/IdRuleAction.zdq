package com.xinleju.erp.frame.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.frame.models.IdRule;
import com.xinleju.erp.frame.service.IdRuleService;
import com.xinleju.erp.frame.service.extend.dto.IdRuleDto;
import com.xinleju.erp.frame.utils.SeqUtils;

/**
 * 版权：(C) 版权所有 2000-2014 上海天好电子商务有限公司苏州分公司 编号规则 <详细描述>
 * 
 * @author zhengxj
 * @version $Id: IdRuleAction.java 10434 2016-07-15 06:10:42Z yuanzhanpeng $
 * @since
 * @see
 */
public class IdRuleAction extends BaseAction {

	/**
	 * 编号规则Service
	 */
	@Autowired
	private IdRuleService idRuleService;

	/**
	 * 编号规则DTO
	 */
	private IdRuleDto idRuleDto;

	/**
	 * 编号规则
	 */
	private IdRule idRule;

	/**
	 * 编号规则列表页面
	 * 
	 * @author zhengxj
	 * @return
	 */
	public String index() {
		page = idRuleService.getMsgList(idRuleDto, start, limit);
		request.setAttribute("statusMap", this.getStatusMap());
		return "index";
	}

	/**
	 * 编辑页面 〈详细描述〉
	 * 
	 * @author zhengxj
	 * @return
	 */
	public String editUI() {
		if (idRule != null && idRule.getId() != null) {
			idRule = getCommonService().getById(IdRule.class, idRule.getId());
		}
		return "editUI";
	}

	public String edit() {
		idRuleService.saveIdRule(idRule);
		return "editUI";
	}

	public void save() { 
		idRuleService.saveIdRule(idRule);
		Map<String, Object> tree = new HashMap<String, Object>();
		tree.put("success", true);

		super.renderJson(tree);
	}

	/**
	 * Ajax校验编码
	 * 
	 * @author zhengxj
	 */
	public void del() {
		String id = request.getParameter("id");
		int count = getCommonService().execute("delete IdRule where id =?",
				Long.parseLong(id));
		Map<String, Integer> map = new HashMap<String, Integer>();
		if (count > 0) {
			map.put("result", 0);
		} else {
			map.put("result", 1);
		}
		renderJson(map);
	}

	/**
	 * Ajax校验编码
	 * 
	 * @author zhengxj
	 */
	public void validateCode() {
		String code = request.getParameter("code");
		Map<String, Integer> map = new HashMap<String, Integer>();
		if (idRuleService.isExistCode(code)) {
			map.put("result", 0);
		} else {
			map.put("result", 1);
		}
		renderJson(map);
	}

	private Map<Integer, String> getStatusMap() {
		Map<Integer, String> statusMap = new HashMap<Integer, String>();
		statusMap.put(IdRule.STATUS_Y, "启用");
		statusMap.put(IdRule.STATUS_N, "禁用");
		return statusMap;
	}

	/**
	 * 生成流水号
	 * 
	 * @author zhengxj
	 * @param len
	 *            位数
	 * @param count
	 *            当前计数
	 * @return 流水号
	 */
	public String getSeq(Integer len, Long count) {
		return SeqUtils.genSeq(len, count);
	}

	public String tree() {
		request.setAttribute("treeRootPrefix", getParameter("treeRootPrefix"));
		request.setAttribute("treeRootId", getParameter("treeRootId"));
		return "tree";
	}

	/**
	 * 获取编号规则选择树
	 */
	public void getTree() {
		List<Map<String, Object>> resultList = new ArrayList<Map<String, Object>>();
		List<IdRule> idRuleList = idRuleService.getAllIdRuleList();
		for (IdRule c : idRuleList) {
			Map<String, Object> tree = new HashMap<String, Object>();
			tree.put("id", "IdRule_" + c.getId());
			tree.put("prefix", "IdRule_");
			tree.put("code", c.getCode());
			tree.put("leaf", true);
			tree.put("text", c.getName());
			resultList.add(tree);
		}
		super.renderJson(resultList);
	}

	public IdRuleDto getIdRuleDto() {
		return idRuleDto;
	}

	public void setIdRuleDto(IdRuleDto idRuleDto) {
		this.idRuleDto = idRuleDto;
	}

	public IdRule getIdRule() {
		return idRule;
	}

	public void setIdRule(IdRule idRule) {
		this.idRule = idRule;
	}

}
