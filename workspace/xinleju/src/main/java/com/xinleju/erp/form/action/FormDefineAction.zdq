package com.xinleju.erp.form.action;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Property;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.base.utils.DateUtils;
import com.xinleju.erp.form.models.FormCt;
import com.xinleju.erp.form.models.FormDefine;
import com.xinleju.erp.form.service.FormService;

/**
 * 表单定义
 * @author chenhongbin
 *
 */
public class FormDefineAction extends BaseAction {
	
	private Long formCtId;
	
	private FormDefine formDefine;
	
	@Autowired
	private FormService formService;
	
	/**
	 * 表单定义首页
	 * @return
	 */
	public String index() {
		return "index";
	}
	
	/**
	 * 表单定义列表
	 * @return
	 */
	public String list() {
		String ifIncludeNextLevel = getParameter("ifIncludeNextLevel");
		Boolean ifIncludeNextLevelBoolean = (StringUtils.isBlank(ifIncludeNextLevel) || "false".equals(ifIncludeNextLevel)) ? false : true;
		Integer status = getParameterInt("status");
		String keyword = getParameter("keyword");
		DetachedCriteria dc = DetachedCriteria.forClass(FormDefine.class,"fdObj");
		if(StringUtils.isNotBlank(keyword)) {
			dc.add(Restrictions.like("name", keyword, MatchMode.ANYWHERE));
		}
		dc.createAlias("formCt", "formCt");
		if(ifIncludeNextLevelBoolean){
			if(formCtId != null && formCtId !=0L){
				dc.add(Restrictions.like("formCt.prefix", formCtId+"",MatchMode.START));
			}
		}else{
			if(formCtId != null && formCtId != 0L){
				dc.add(Restrictions.eq("formCtId", formCtId));
			}else{
				dc.add(Restrictions.eq("formCtId", -1L));
			}
		}
		
		if(status != null) {
			dc.add(Restrictions.eq("status", status));
		}
		
		/*取最大版本*/
		DetachedCriteria dcAs = DetachedCriteria.forClass(FormDefine.class, "fdAs");
	    dcAs.setProjection(Property.forName("formVersion").max());
	    dcAs.add(Property.forName("fdAs.code").eqProperty("fdObj.code"));
	    dc.add(Property.forName("formVersion").eq(dcAs));
	    
	    
		page = getCommonService().findPage(dc, start, limit);
		
		request.setAttribute("statusMap", FormDefine.getStatusMap());
		request.setAttribute("ifIncludeNextLevelMap", getIfIncludeNextLevelMap());
		request.setAttribute("status", status);
		request.setAttribute("ifIncludeNextLevel", ifIncludeNextLevelBoolean);
		request.setAttribute("keyworld", keyword);
		request.setAttribute("formCtId", formCtId);
		return "list";
	}
	
    /**
     * 历史版本
     * @return
     */
	public String history() {
		String formCode = getParameter("formCode");
		if(StringUtils.isNotBlank(formCode)) {
			DetachedCriteria dc = DetachedCriteria.forClass(FormDefine.class);
			dc.add(Restrictions.eq("code", formCode));
			dc.addOrder(Order.desc("formVersion"));
			page = getCommonService().findPage(dc, start, limit);
		}
		return "history";
	}
	
	/**
	 * 设为当前版本
	 */
	public void setCurrentVersion() {
		Map<String,Object> result = new HashMap<String,Object>();
		try{
			Long id = getParameterLong("id");
			formService.setCurrentVersion(id);
			result.put("success", true);
		}catch(Exception e) {
			e.printStackTrace();
			result.put("success", false);
			result.put("msg", "系统异常！");
		}
		renderJson(result);
	}
	
	/**
	 * 表单定义编辑
	 * @return
	 */
	public String edit() {
		Long id = getParameterLong("id");
		if(id == null) {
			formDefine = new FormDefine();
			formDefine.setFormVersion(DateUtils.formatDate(new Date(), "yyyyMMddHHmmss"));
			if(formCtId != null) {
				formDefine.setFormCtId(formCtId);
				formDefine.setFormCt(getCommonService().getById(FormCt.class, formCtId));
			}
		}else {
			formDefine = getCommonService().getById(FormDefine.class, id);
			String action = getParameter("action");
			//如果是检出
			if("checkout".equals(action)) {
				formDefine.setId(null);
				formDefine.setFormVersion(DateUtils.formatDate(new Date(), "yyyyMMddHHmmss"));
			}
		}
		return "edit";
	}
	
	
	/**
	 * 查看
	 * @return
	 */
	public String view() {
		Long id = getParameterLong("id");
		formDefine = getCommonService().getById(FormDefine.class, id);
		return "view";
	}
	
	
	/**
	 * 是否包含下级
	 * @return
	 */
	private Map<Boolean,Object> getIfIncludeNextLevelMap(){
		Map<Boolean,Object>  map = new HashMap<Boolean, Object>();
		map.put(Boolean.TRUE, "是");
		map.put(Boolean.FALSE, "否");
		return map;
	}

	
	/**
	 * 表单自定义保存
	 */
	public void save() {
		Map<String,Object> result = new HashMap<String,Object>();
		try{
			
			formService.saveForm(formDefine);
			result.put("success", true);
		}catch(Exception e) {
			e.printStackTrace();
			result.put("success", false);
			result.put("msg", "系统异常！");
		}
		renderJson(result);
	}

	public Long getFormCtId() {
		return formCtId;
	}

	public void setFormCtId(Long formCtId) {
		this.formCtId = formCtId;
	}

	public FormDefine getFormDefine() {
		return formDefine;
	}

	public void setFormDefine(FormDefine formDefine) {
		this.formDefine = formDefine;
	}
	
}
