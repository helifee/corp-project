package com.xinleju.erp.report.action;

import java.io.File;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.erp.base.app.action.BaseAction;
import com.xinleju.erp.base.utils.FileUtils;
import com.xinleju.erp.frame.models.App;
import com.xinleju.erp.frame.models.Dict;
import com.xinleju.erp.frame.service.AppService;
import com.xinleju.erp.report.models.ReportSetting;

public class ReportSettingAction extends BaseAction {

	private static final Log log = LogFactory.getLog(ReportSettingAction.class);
	/**
	 * 菜单service
	 */
	@Autowired
	private AppService appService;
	private ReportSetting reportSetting;
	private List<App> appList;
	//第一个上传文件
	public File queryPath;
	public String queryPathFileName;
	public String queryPathFileType;
	//第二个上传文件
	public File calatePath;
	public String calatePathFileName;
	public String calatePathFileType;
	//第三个上传文件
	public File resultPath;
	public String resultPathFileName;
	public String resultPathFileType;
	

	private String code;
	
	

	public String index() {
		return "index";
	}
	
	/**
	 * 获取报表对象
	 */
	public String reportTemplate() {
		String code=request.getParameter("appCode");
		String reportCode=request.getParameter("reportCode");
		List<ReportSetting> reportSettingList =getCommonService().findByHQL(ReportSetting.class,"from ReportSetting  where  appCode=? and reportCode=?",code,reportCode);
		if(reportSettingList.size()>0){
			reportSetting=reportSettingList.get(0);
		}
		request.setAttribute("reportName", reportSetting.getReportName());
		request.setAttribute("queryPath", reportSetting.getQueryPath());
		request.setAttribute("resultPath", reportSetting.getResultPath());
		return "templateRedirect";
	}
	/**
	 * 获取报表对象-平台（用户，角色，岗位）
	 */
	public String reportBasic() {
		String reportName = request.getParameter("reportName");
		try {
			reportName = URLDecoder.decode(StringUtils.isNotBlank(reportName) ? reportName : "", "UTF-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		request.setAttribute("reportName", reportName);
		request.setAttribute("queryPath", request.getParameter("queryPath"));
		request.setAttribute("resultPath", request.getParameter("resultPath"));
		return "template";
	}

	/***
	 * 查询列表
	 */
	public String list() {
		try {
			appList = appService.getAppList(null);
			DetachedCriteria dc = DetachedCriteria.forClass(ReportSetting.class);
			if (code != null) {
				dc.add(Restrictions.eq("appCode", code));
			}
			page = getCommonService().findPage(dc, start, limit);
			request.setAttribute("appList", appList);
			request.setAttribute("code", code);
			log.info("list()" + "查询成功");
			return "list";
		} catch (Exception e) {
			log.info("list()" + e.getMessage());
		}
		return null;
	}

	/***
	 * 编辑及新增
	 * 
	 * @return
	 */
	public String edit() {
		try {
			appList = appService.getAppList(null);
			if (reportSetting != null && reportSetting.getId() != null) {
				reportSetting = getCommonService().getById(ReportSetting.class, reportSetting.getId());
				getRequest().setAttribute("isView", true);
			}else {
				getRequest().setAttribute("isView", false);
			}
			request.setAttribute("appList", appList);
			request.setAttribute("code", request.getParameter("code"));
			log.info("edit()" + "编辑成功");
		} catch (Exception e) {
			log.info("edit()" + e.getMessage());
		}
		return "edit";
	}

	/***
	 * 删除
	 */
	public void delete() {
		String success = "true";
		String msg = "操作成功！";
		try {
			String retIds = request.getParameter("retIds");
			String[] strIds = retIds.split(",");
			for (String strId : strIds) {
				getCommonService().delete(getCommonService().getById(ReportSetting.class, Long.parseLong(strId)));
			}
			Map<String, Object> r = new HashMap<String, Object>();
			r.put("success", success);
			r.put("msg", msg);
			log.info("delete()" + msg);
			super.renderJson(r);
		} catch (NumberFormatException e) {
			log.info("delete()" + "删除失败");
		}
	}

	/***
	 * 保存
	 */
	public void save() {
		String msg = "操作失败！";
		try {
			// 设置上传文件目录
//			String realpath1 = ServletActionContext.getServletContext().getRealPath("/")+File.separator+"raqsoft/reportFiles";
			String realpath = getRequest().getServletContext().getRealPath("/")  + File.separator + "raqsoft/reportFiles" +File.separator;
			FileUtils.checkDir(realpath +File.separator+ reportSetting.getAppCode());
			if (queryPath != null) {
				String filepath=realpath +File.separator+ reportSetting.getAppCode()+File.separator+queryPathFileName;
				File newFile=new File(filepath);
				reportSetting.setQueryPath( reportSetting.getAppCode()+File.separator+queryPathFileName);
				FileUtils.copyForChannel(queryPath, newFile);
			}
			if (calatePath != null) {
				String filepath=realpath +File.separator+ reportSetting.getAppCode()+File.separator+calatePathFileName;
				File newFile=new File(filepath);
				FileUtils.copyForChannel(calatePath, newFile);
				reportSetting.setCalatePath(reportSetting.getAppCode()+File.separator+calatePathFileName);

			}
			if (resultPath != null) {
				String filepath=realpath +File.separator+ reportSetting.getAppCode()+File.separator+resultPathFileName;
				File newFile=new File(filepath);
				FileUtils.copyForChannel(resultPath, newFile);
				reportSetting.setResultPath(reportSetting.getAppCode()+File.separator+resultPathFileName);
			}
			//reportSetting.setUrl("ReportSetting!reportTemplate.do?appCode=" + reportSetting.getAppCode()+"&reportCode="+ reportSetting.getReportCode()+"&queryPath="+ reportSetting.getQueryPath()+"&calatePath="+ reportSetting.getCalatePath()+"&resultPath="+ reportSetting.getResultPath());
			reportSetting.setUrl("ReportSetting!reportTemplate.do?appCode=" + reportSetting.getAppCode()+"&reportCode="+ reportSetting.getReportCode());
			if (getCommonService().findAll(ReportSetting.class, "reportCode=?", new Object[] { reportSetting.getReportCode() }).size() > 0) {
				msg += "报表编码【" + reportSetting.getReportCode() + "】已经存在，请修改！\\n";
			} else {
				if (reportSetting != null && reportSetting.getId() == null) {
					getCommonService().save(reportSetting);
					msg = " 保存操作成功！";
					log.info("save()" + msg);
				} else {
					getCommonService().update(reportSetting);
					msg = "修改操作成功！";
					log.info("save()" + msg);
				}
			}
		} catch (Exception e) {
			msg = "操作失败！";
			log.info("save()" + msg);
		}
		renderHtml("<script type='text/javascript'>alert('" + msg + "');" + "window.opener.queryAndRefreshTree();window.close();</script>");
	}
	public void updateField() {
		String isBuildIn = getParameter("isBuildIn");
		getCommonService().execute("update Dict set isBuildIn=? where id=?", isBuildIn, id);
		renderJson("{success:true,id:" + id + "}");
	}

	public void getByPid() {
		Long pid = getParameterLong("pid");
		List<Dict> children = new ArrayList<Dict>();
		if (pid != null) {

		}
		super.renderJson(children);
	}
	/**
	 * Description: 校验数据字典编码是否重复<br>
	 * 
	 * @see
	 */
	public void checkCode() {
		Map<String, Object> r = new HashMap<String, Object>();
		super.renderJson(r);
	}

	/**
	 * 左边的树形结构
	 */
	public void getTrees() {
		List<Map<String, Object>> trees = new ArrayList<Map<String, Object>>();
		List<App> childList = appService.getAppList(null);
		for (App app : childList) {
			Map<String, Object> tree = new HashMap<String, Object>();
			tree.put("id", app.getCode());
			String name = app.getName();
			tree.put("text", name.substring(0, name.length() > 20 ? 20 : name.length()));
			tree.put("leaf", true);
			trees.add(tree);
		}
		super.renderJson(trees);
	}

	public ReportSetting getReportSetting() {
		return reportSetting;
	}

	public void setReportSetting(ReportSetting reportSetting) {
		this.reportSetting = reportSetting;
	}

	public List<App> getAppList() {
		return appList;
	}

	public void setAppList(List<App> appList) {
		this.appList = appList;
	}

	public String getCode() {
		return code;
	}

	public void setCode(String code) {
		this.code = code;
	}


	public File getQueryPath() {
		return queryPath;
	}


	public void setQueryPath(File queryPath) {
		this.queryPath = queryPath;
	}


	public String getQueryPathFileName() {
		return queryPathFileName;
	}


	public void setQueryPathFileName(String queryPathFileName) {
		this.queryPathFileName = queryPathFileName;
	}


	public String getQueryPathFileType() {
		return queryPathFileType;
	}


	public void setQueryPathFileType(String queryPathFileType) {
		this.queryPathFileType = queryPathFileType;
	}


	public File getCalatePath() {
		return calatePath;
	}


	public void setCalatePath(File calatePath) {
		this.calatePath= calatePath;
	}


	public String getCalatePathFileName() {
		return calatePathFileName;
	}


	public void setCalatePathFileName(String calatePathFileName) {
		this.calatePathFileName = calatePathFileName;
	}


	public String getCalatePathFileType() {
		return calatePathFileType;
	}


	public void setCalatePathFileType(String calatePathFileType) {
		this.calatePathFileType = calatePathFileType;
	}


	public File getResultPath() {
		return resultPath;
	}


	public void setResultPath(File resultPath) {
		this.resultPath = resultPath;
	}


	public String getResultPathFileName() {
		return resultPathFileName;
	}


	public void setResultPathFileName(String resultPathFileName) {
		this.resultPathFileName = resultPathFileName;
	}


	public String getResultPathFileType() {
		return resultPathFileType;
	}


	public void setResultPathFileType(String resultPathFileType) {
		this.resultPathFileType = resultPathFileType;
	}




}
