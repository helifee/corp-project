package com.landray.kmss.util.encryption;


import sun.misc.*;
import java.beans.Expression;
import java.io.IOException;
import java.nio.charset.Charset;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.SecureRandom;
import java.security.Security;
import java.util.Date;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import org.bouncycastle.crypto.*;
import org.bouncycastle.crypto.engines.*;
import org.bouncycastle.crypto.params.*;
import org.bouncycastle.crypto.tls.SRPTlsClient;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.util.encoders.Base64Encoder;

/**
 * 
 * @param <T>
 */
@SuppressWarnings("unused")
public class BCVFactory
{

	private CipherParameters _params = null;
	private BlockCipher _engine = null;
	private Charset _charset = null;
	public static final String VIPARA = "1234567812345678";


	public CipherParameters getParams()
	{
		return _params;
	}
	/**
	 * KeyParameter(keys);
	 * 
	 * @param value
	 */
	public void setParams(CipherParameters value)
	{
		_params = value;
	}
	public BlockCipher getEngine()
	{
		return _engine;
	}
	/**
	 * 
	 * @param value
	 */
	public void setEngine(BlockCipher value)
	{
		_engine = value;
	}
	public Charset getCharset()
	{
		return _charset;
	}
	/**
	 * 
	 * @param value
	 */
	public void setCharset(Charset value)
	{
		_charset = value;
	}
	/**
	 */
	public BCVFactory()
	{
	}
	/**
	 * 
	 * @param params
	 * @param engine
	 * @param charset
	 */
	public BCVFactory(CipherParameters params, BlockCipher engine, Charset charset)
	{
		this.setParams(params);
		this.setEngine(engine);
		this.setCharset(charset);
	}
	
	
	private static final String bm = "gb2312";
	
	public static Cipher iniCipher(String dataPassword, String algorithm, String transformation, String provider,
			int opmode) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,
			InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException, NoSuchProviderException
	{
		return iniCipher(dataPassword, algorithm, transformation, provider, opmode, VIPARA);
	}
	public static Cipher iniCipher(String dataPassword, String algorithm, String transformation, String provider,
			int opmode, String IvParameter) throws NoSuchAlgorithmException, NoSuchPaddingException,
			InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException, BadPaddingException,
			NoSuchProviderException
	{
		IvParameterSpec zeroIv = null;
		if (!Usual.f_isNullOrWhiteSpace(IvParameter))
		{
			zeroIv = new IvParameterSpec(IvParameter.getBytes());
		}
		SecretKeySpec key = new SecretKeySpec(dataPassword.getBytes(), algorithm);
		Cipher cipher = Cipher.getInstance(transformation, provider);
		if (zeroIv != null)
		{
			cipher.init(opmode, key, zeroIv);
		}
		else
		{
			cipher.init(opmode, key);
		}
		return cipher;
	}
	/**
	 * 
	 * @param dataPassword
	 * @param opmode
	 * @return
	 * @throws NoSuchAlgorithmException
	 * @throws NoSuchPaddingException
	 * @throws InvalidKeyException
	 * @throws InvalidAlgorithmParameterException
	 * @throws IllegalBlockSizeException
	 * @throws BadPaddingException
	 * @throws NoSuchProviderException
	 */
	public static Cipher iniBlowfishCipher(String dataPassword, int opmode) throws NoSuchAlgorithmException,
			NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException,
			BadPaddingException, NoSuchProviderException
	{
		return iniCipher(dataPassword, "Blowfish", "Blowfish", "BC", opmode);// Cipher.getInstance("AES/CBC/PKCS5Padding");
	}
	/**
	 * 
	 * @param dataPassword
	 * @param cleartext
	 * @return
	 * @throws Exception
	 */
	public static String blowfishEncrypt(String dataPassword, String cleartext) throws Exception
	{
		byte[] clearByte = cleartext.getBytes(bm);
		byte[] encryptedData = blowfishEncrypt(dataPassword, clearByte);
		return Usual.f_toBase64String(encryptedData);
	}
	/**
	 * 
	 * @param dataPassword
	 * @param clearByte
	 * @return
	 * @throws NoSuchAlgorithmException
	 * @throws NoSuchPaddingException
	 * @throws InvalidKeyException
	 * @throws InvalidAlgorithmParameterException
	 * @throws IllegalBlockSizeException
	 * @throws BadPaddingException
	 * @throws NoSuchProviderException
	 */
	public static byte[] blowfishEncrypt(String dataPassword, byte[] clearByte) throws NoSuchAlgorithmException,
			NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException,
			BadPaddingException, NoSuchProviderException
	{
		Cipher cipher = iniBlowfishCipher(dataPassword, Cipher.ENCRYPT_MODE);// Cipher.getInstance("AES/CBC/PKCS5Padding");
		return cipher.doFinal(clearByte);
	}
	/**
	 * 
	 * @param dataPassword
	 * @param encrypted
	 * @return
	 * @throws Exception
	 */
	public static String blowfishDecrypt(String dataPassword, String encrypted) throws Exception
	{
		byte[] byteMi = Usual.f_fromBase64String(encrypted);
		byte[] decryptedData = blowfishDecrypt(dataPassword, byteMi);
		return new String(decryptedData, bm);
	}
	/**
	 * 
	 * @param dataPassword
	 * @param byteMi
	 * @return
	 * @throws NoSuchAlgorithmException
	 * @throws NoSuchPaddingException
	 * @throws InvalidKeyException
	 * @throws InvalidAlgorithmParameterException
	 * @throws IllegalBlockSizeException
	 * @throws BadPaddingException
	 * @throws NoSuchProviderException
	 */
	public static byte[] blowfishDecrypt(String dataPassword, byte[] byteMi) throws NoSuchAlgorithmException,
			NoSuchPaddingException, InvalidKeyException, InvalidAlgorithmParameterException, IllegalBlockSizeException,
			BadPaddingException, NoSuchProviderException
	{
		Cipher cipher = iniBlowfishCipher(dataPassword, Cipher.DECRYPT_MODE);// Cipher.getInstance("AES/CBC/PKCS5Padding");
		return cipher.doFinal(byteMi);
	}
	
	public static void main(String[] args)
	{ 

		Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
		String mStr =Usual.mEmpty;
		String de = Usual.mEmpty;
		try
		{
		   mStr =	BCVFactory.blowfishEncrypt("1234567812345678", "test");
		   de=BCVFactory.blowfishDecrypt("1234567812345678",mStr);
		   System.out.println(mStr);
		   System.out.println(de);
		}
		catch (Exception e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}