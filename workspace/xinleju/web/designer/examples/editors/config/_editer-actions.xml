<mxEditor>
	<add as="onInit">
		function ()
		{
			var editor = this;
			
			// Changes some default colors
			//mxConstants.HANDLE_FILLCOLOR = '#99ccff';
			//mxConstants.HANDLE_STROKECOLOR = '#0088cf';
			//mxConstants.VERTEX_SELECTION_COLOR = '#00a8ff';
			//mxConstants.OUTLINE_COLOR = '#00a8ff';
			//mxConstants.OUTLINE_HANDLE_FILLCOLOR = '#99ccff';
			//mxConstants.OUTLINE_HANDLE_STROKECOLOR = '#00a8ff';
			//mxConstants.CONNECT_HANDLE_FILLCOLOR = '#cee7ff';
			//mxConstants.EDGE_SELECTION_COLOR = '#00a8ff';
			//mxConstants.DEFAULT_VALID_COLOR = '#00a8ff';
			//mxConstants.LABEL_HANDLE_FILLCOLOR = '#cee7ff';
			//mxConstants.GUIDE_COLOR = '#0088cf';
			mxShape.prototype.crisp = true;
			mxShape.prototype.roundedCrispSvg = false;
			mxActor.prototype.crisp = false;
			mxCylinder.prototype.crisp = false;
			mxEllipse.prototype.crisp = false;
			mxDoubleEllipse.prototype.crisp = false;
			mxConnector.prototype.crisp = true;

			// Increases default rubberband opacity (default is 20)
			mxRubberband.prototype.defaultOpacity = 30;
			
			mxConnectionHandler.prototype.connectImage = new mxImage('images/connector.gif', 16, 16);
			mxConstraintHandler.prototype.pointImage = new mxImage('images/dot.gif', 10, 10);
			editor.graph.setConnectable(true);
			editor.graph.connectionHandler.setCreateTarget(true);
			editor.graph.connectionHandler.targetConnectImage = true;
			
			editor.graph.setAllowDanglingEdges(false);
    		editor.graph.setDisconnectOnMove(false);
			editor.graph.setPortsEnabled(false);
			editor.graph.setDropEnabled(false);
			
			editor.graph.removeListener(mxEvent.DOUBLE_CLICK);
		
			editor.graph.setConnectable(true);
			
			
			editor.graph.getAllConnectionConstraints = function(terminal, source){
			
				if(terminal!=null){
					var ix = this.model.isVertex(terminal.cell) == 1;
					if(ix){
						return [new mxConnectionConstraint(new mxPoint(0, 0), true),
							new mxConnectionConstraint(new mxPoint(0.25, 0), true),
					    	new mxConnectionConstraint(new mxPoint(0.5, 0), true),
					    	new mxConnectionConstraint(new mxPoint(0.75, 0), true),
					    	new mxConnectionConstraint(new mxPoint(1, 0), true),
					    	
					    	new mxConnectionConstraint(new mxPoint(0, 0.5), true),
							new mxConnectionConstraint(new mxPoint(1, 0.5), true),
							
							
							//new mxConnectionConstraint(new mxPoint(0, 0.25), true),
							//new mxConnectionConstraint(new mxPoint(1, 0.25), true),
							
							//new mxConnectionConstraint(new mxPoint(0, 0.75), true),
							//new mxConnectionConstraint(new mxPoint(1, 0.75), true),
							
							new mxConnectionConstraint(new mxPoint(0, 1), true),
							new mxConnectionConstraint(new mxPoint(0.25, 1), true),
							new mxConnectionConstraint(new mxPoint(0.5, 1), true),
							new mxConnectionConstraint(new mxPoint(0.75, 1), true),
							new mxConnectionConstraint(new mxPoint(1, 1), true)];
					}
				}
				
			};
				
			// Connect preview for elbow edges
			editor.graph.connectionHandler.createEdgeState = function(me){
				var edge = editor.graph.createEdge(null, null, null, null, null, 'edgeStyle=straightEdge');	
				return new mxCellState(editor.graph.view, edge, editor.graph.getCellStyle(edge));
			};
			
			mxEdgeHandler.prototype.isConnectableCell = function(cell)
			{
				return editor.graph.connectionHandler.isConnectableCell(cell);
			};
				
			// Enables rubberband selection
			new mxRubberband(editor.graph);
				
				
			
			editor.graph.dblClick = function(evt, cell){
				// alert(cell.isEdge());
				if (cell != null){
					if(cell.isVertex()){
						editor.actions.editAc(editor,cell);
						initPosition();
					}
					else if(cell.isEdge()){
						editor.actions.editTr(editor,cell);
						initPosition();
					}
			    }
			    else{
			        editor.actions.editFlow(editor);
			    }
			    
			    mxEvent.consume(evt);
			}
			
			
			editor.actions.loadGraph(editor);
		}
	</add>
	<Array as="actions">
		<add as="loadGraph">
			function (editor){
				
				if(act=='check'){
					this.coGraph(editor,flowId);
				}
				else if(act=='edit' || act=='view'){
					this.editGraph(editor,flowId);
				}
				else if(act=='create'){
					this.createGraph(editor);
				}
				
			}
		</add>
		
		<add as="copyFlow">
			function (editor){
				copy_flow_win.show();
			}
		</add>
		
		<add as="createGraph">
			
			function (editor){
				var req = new mxXmlRequest('../../../Designer!createGraph.ajax?ctId=' + ctId,'serviceObjectDefineId=' + serviceObjectDefineId, 'POST', false);
				req.send(function(req) {
					var doc = req.getDocumentElement();
					editor.readGraphModel(doc);
				});
			}
			
		</add>
		<add as="editGraph">
			
			function (editor,flowId){
				mxUtils.get('../../../Designer!editGraph.ajax?flowId='+flowId, function(req) {
					var doc = req.getDocumentElement();
					editor.readGraphModel(doc);
				});
			}
		
		</add>
		<add as="coGraph">
			
			function (editor,flowId){
				
				mxUtils.get('../../../Designer!coGraph.ajax?flowId='+flowId, function(req) {
					var doc = req.getDocumentElement();
					editor.readGraphModel(doc);
				});
			}
		
		</add>
		<add as="saveGraph">
			
			function (editor){
				var encoder = new mxCodec();
				var node = encoder.encode(editor.graph.getModel());
				
				
				var xml = encodeURIComponent(mxUtils.getPrettyXml(node));
				var req = new mxXmlRequest('../../../Designer!saveGraph.ajax','xml=' + xml, 'POST', false);
				req.send(function(req) {
					mxUtils.alert('保存成功！');
				});
			}
		
		</add>
		<add as="ciGraph">
			
			function (editor){
				var encoder = new mxCodec();
				var node = encoder.encode(editor.graph.getModel());
				
				
				var xml = encodeURIComponent(mxUtils.getPrettyXml(node));
				var req = new mxXmlRequest('../../../Designer!ciGraph.ajax','xml=' + xml, 'POST', false);
				req.send(function(req) {
					  mxUtils.alert('发布成功，即将关闭窗口！');
					  if(window.opener != null){
					  	try{
					  		window.opener.queryFl();
					  	}
					  	catch(e){
					  	}
					  	window.close();
					  }
				});
			}
		</add>

		
		<add as="editActivityForm">
            
            function (editor,cell){
                if(cell.isVertex()){
                    ac_win.setTitle('活动属性 - ' + cell.getAttribute('label'));
                    ac_win.show();
                    //ac_win.loadData(editor,cell,'forms_tab');
                }
            }
           
        
        </add>
        <add as="editAc">
			
			function (editor,cell){
				if(cell.isVertex()){
					ac_win.setTitle('活动属性 - ' + cell.getAttribute('label'));
					ac_win.show();
					ac_win.loadData(cell);
				}
			}
		
		</add>
		 <add as="editTr">
			
			function (editor,cell){
				tr_win.setTitle('流转属性');
				tr_win.show();
				tr_win.loadData(cell);
			}
		
		</add>
		<add as="editFlow">
			
			function (editor){	
				var cell = editor.graph.getCurrentRoot() || editor.graph.getModel().getRoot();
				flow_win.setTitle('流程属性 - ' + cell.getAttribute('flowName'));
				flow_win.show();
				flow_win.loadData(cell);
			}
		
		</add>
		
		<add as="editFlowForm">
            
            function (editor){  
                var cell = editor.graph.getCurrentRoot() || editor.graph.getModel().getRoot();
            
                flow_win.setTitle('流程属性 - ' + cell.getAttribute('flowName'));
                flow_win.show();
                flow_win.loadData(editor,cell,1);
            }
        
        </add>
        
		<add as="viewXml">
			function (editor){
				var encoder = new mxCodec();
				var graph = editor.graph;
				var node = encoder.encode(graph.getModel());
				mxUtils.popup(mxUtils.getPrettyXml(node), true);
			}
		</add>
		
		<add as="autoLayout">
			function (editor){
				
				var parent = editor.graph.getDefaultParent();
				var layout = new mxCompactTreeLayout(editor.graph, true);
				layout.useBoundingBox = false;
				layout.levelDistance = 35;
				layout.nodeDistance = 25;

				try{
					editor.graph.getModel().beginUpdate();
					layout.execute(parent);
				}
				catch (e){
					throw e;
				}
				finally{
					var morph = new mxMorphing(editor.graph);
					morph.addListener(mxEvent.DONE, function(){
						editor.graph.getModel().endUpdate();
					});	
					morph.startAnimation();
				}
			}
		</add>
		<add as="dashedCell"><![CDATA[
			function (editor){
				var graph = editor.graph;
				graph.toggleCellStyles(mxConstants.STYLE_DASHED);
			}
		]]></add>
	</Array>
	
	<mxGraph as="graph" swimlaneNesting="0">
		<mxStylesheet as="stylesheet">
			<add as="straightEdge" extend="defaultEdge">
				<add as="rounded" value="0" />
				<add as="edgeStyle" value="none" />
			</add>
			<add as="orthogonalEdge" extend="defaultEdge">
				<add as="rounded" value="0" />
				<add as="edgeStyle" value="orthogonalEdgeStyle" />
			</add>
		</mxStylesheet>
	</mxGraph>
	
</mxEditor>
