package com.jzy.hio.base.redis;

import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

/**
 *  部分redis-api
 * Created by luoro on 2017/12/24.
 */
@Component
public class RedisClient {

    @Autowired
    private JedisPool jedisPool;

    /**
     *  String
     * @param k
     * @param v
     * @return
     */
    public String set(String k, String v)  {
        Jedis jedis = null;
        String result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.set(k, v);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }

    /**
     *  String ifExist
     * @param k
     * @param sec
     * @param v
     * @return
     */
    public String  setex(String k,int sec, String v)  {
        Jedis jedis = null;
        String result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.setex(k,sec,v);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }

    /**
     * String
     * @param k
     * @return
     */
    public String get(String k){
        Jedis jedis = null;
        String result = null;
        try {
            jedis = jedisPool.getResource();
            result =  jedis.get(k);
        } catch (Exception e){
            e.printStackTrace();
        } finally {
            jedis.close();
        }
        return result;
    }

    /**
     *  String
     * @param k
     * @return
     */
    public Long del(String k){
        Jedis jedis = null;
        Long result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.del(k);
        } catch (Exception e){
            e.printStackTrace();
        } finally {
            jedis.close();
        }
        return result;
    }

    /**
     *  String
     * @param keys
     * @return
     */
    public Long del(String... keys){
        Jedis jedis = null;
        Long result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.del(keys);
        } catch (Exception e){
            e.printStackTrace();
        } finally {
            jedis.close();
        }
        return result;
    }

    /**
     *
     * @param k
     * @return
     */
    public Boolean exists(String k){
        Jedis jedis = null;
        Boolean result = Boolean.FALSE;
        try {
            jedis = jedisPool.getResource();
            result = jedis.exists(k);
        } catch (Exception e){
            e.printStackTrace();
        } finally {
            jedis.close();
        }
        return result;
    }

    /**
     *
     * @param pattern
     * @return
     */
    public Set<String> keys(String pattern) {
        Jedis jedis = null;
        Set<String> result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.keys(pattern);
        } catch (Exception e){
            e.printStackTrace();
        } finally {
            jedis.close();
        }
        return result;
    }

    /**
     *  Hash
     * @param k
     * @param f
     * @param v
     * @return
     */
    public Long hset(String k,String f,String v){
        Jedis jedis = null;
        Long result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.hset(k,f,v);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }

    /**
     *  Hash
     * @param k
     * @param f
     * @return
     */
    public String  hget(String k,String f){
        Jedis jedis = null;
        String result = null;
        try {
            jedis = jedisPool.getResource();
            result =  jedis.hget(k,f);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }

    /**
     *  Hash
     * @param k
     * @param fs
     * @return
     */
    public Long hdel(String k,String... fs){
        Jedis jedis = null;
        Long result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.hdel(k,fs);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }

    /**
     *  Hash
     * @param k
     * @return
     */
    public Long hlen(String k){
        Jedis jedis = null;
        Long result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.hlen(k);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }

    /**
     *  Hash
     * @param k
     * @param f
     * @param v
     * @return
     */
    public Long hsetnx(String k,String f,String v){
        Jedis jedis = null;
        Long result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.hsetnx(k,f,v);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }
    /**
     *  Hash
     * @param k
     * @param f
     * @return
     */
    public Boolean hexists(String k, String f){
        Jedis jedis = null;
        Boolean result = Boolean.FALSE;
        try {
            jedis = jedisPool.getResource();
            result = jedis.hexists(k,f);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }

    /**
     *  Hash
     * @param k
     * @return
     */
    public Map<String,String> hgetAll(String k){
        Jedis jedis = null;
        Map<String,String> result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.hgetAll(k);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }
    /**
     *  Hash
     * @param k
     * @return
     */
    public Set<String> hkeys(String k){
        Jedis jedis = null;
        Set<String> result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.hkeys(k);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }

    /**
     *
     * @param k
     * @param f
     * @param v
     * @return
     */
    public Long hincrBy(String k,String f,Long v){
        Jedis jedis = null;
        Long result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.hincrBy(k,f,v);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }

    /**
     *  批量
     * @param kv
     * @return
     */
    public String mset(String... kv){
        Jedis jedis = null;
        String result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.mset(kv);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }
    /**
     *  批量  ifExist
     * @param kv
     * @return
     */
    public Long msetnx(String... kv){
        Jedis jedis = null;
        Long result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.msetnx(kv);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }
    /**
     * @param ks
     * @return
     */
    public List<String> mget(String... ks){
        Jedis jedis = null;
        List<String> result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.mget(ks);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }
    /**
     *  设置key 超时
     * @param k
     * @param sec
     * @return
     */
    public Long expire(String k, int sec) {
        Jedis jedis = null;
        Long result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.expire(k,sec);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }
    /**
     *  List
     * @param k
     * @param v
     * @return
     */
    public Long lpush(String k,String... v){
        Jedis jedis = null;
        Long result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.lpush(k,v);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }
    /**
     * List
     * @param k
     * @param v
     * @return
     */
    public Long rpush(String k,String... v){
        Jedis jedis = null;
        Long result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.rpush(k,v);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }

    /**
     * List
     * @param k
     * @return
     */
    public String lpop(String k){
        Jedis jedis = null;
        String result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.lpop(k);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }

    /**
     * List
     * @param k
     * @return
     */
    public String rpop(String k){
        Jedis jedis = null;
        String result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.rpop(k);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }

    /**
     * List
     * @param k
     * @return
     */
    public Long lpushx(String k){
        Jedis jedis = null;
        Long result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.lpushx(k);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }
    /**
     *  List
     * @param k
     * @return
     */
    public Long rpushx(String k){
        Jedis jedis = null;
        Long result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.rpushx(k);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }

    /**
     * List
     * @param k
     * @param start
     * @param end
     * @return
     */
    public List<String> lrange(String k,long start,long end){
        Jedis jedis = null;
        List<String> result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.lrange(k,start,end);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }
    /**
     *  Set集合 新增
     * @param k
     * @param members
     * @return
     */
    public Long sadd(String k,String... members){
        Jedis jedis = null;
        Long result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.sadd(k,members);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }
    /**
     *  Set集合 删除
     * @param k
     * @param members
     * @return
     */
    public Long srem(String k,String... members){
        Jedis jedis = null;
        Long result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.srem(k,members);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }
    /**
     *  Set集合 获取元素个数
     * @param k
     * @return
     */
    public Long scard(String k){
        Jedis jedis = null;
        Long result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.scard(k);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }
    /**
     *  Set集合 是否存在
     * @param k
     * @return
     */
    public Boolean sismember (String k,String member){
        Jedis jedis = null;
        Boolean result = Boolean.FALSE;
        try {
            jedis = jedisPool.getResource();
            result = jedis.sismember(k,member);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }
    /**
     *  Set集合 随机从集合中返回指定个数元素
     * @param k
     * @param count
     * @return
     */
    public List<String> srandmember (String k,int count){
        Jedis jedis = null;
        List<String> result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.srandmember(k,count);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }
    /**
     *  Set集合 从集合中随机弹出一个元素.
     * @param k
     * @return
     */
    public String spop(String k){
        Jedis jedis = null;
        String result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.spop(k);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }

    /**
     *  Set集合 获取集合所有元素,且返回结果是无序的.
     * @param k
     * @return
     */
    public Set<String> smembers(String k){
        Jedis jedis = null;
        Set<String> result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.smembers(k);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }

    /**
     *  Set集合 集合间操作 求多个集合的交集
     * @param ks
     * @return
     */
    public Set<String> sinter(String... ks){
        Jedis jedis = null;
        Set<String> result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.sinter(ks);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }
    /**
     *  Set集合 集合间操作 求多个集合的并集
     * @param ks
     * @return
     */
    public Set<String> sunion(String... ks){
        Jedis jedis = null;
        Set<String> result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.sunion(ks);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }

    /**
     *  Set集合 集合间操作 求多个集合的差集
     * @param ks
     * @return
     */
    public Set<String> sdiff(String... ks){
        Jedis jedis = null;
        Set<String> result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.sdiff(ks);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }
    /**
     *  有序Set集合 新增
     * @param k
     * @param member
     * @return
     */
    public Long zadd(String k,Long score,String member){
        Jedis jedis = null;
        Long result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.zadd(k,score,member);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }

    /**
     *  有序Set集合 新增
     * @param k
     * @param scoreMembers
     * @return
     */
    public Long zadd(String k,Map<String,Double> scoreMembers){
        Jedis jedis = null;
        Long result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.zadd(k,scoreMembers);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }
    /**
     *  有序Set集合 删除
     * @param k
     * @param members
     * @return
     */
    public Long zrem(String k,String... members){
        Jedis jedis = null;
        Long result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.zrem(k,members);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }
    /**
     *  有序Set集合 获取元素个数
     * @param k
     * @return
     */
    public Long zcard(String k){
        Jedis jedis = null;
        Long result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.zcard(k);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }
    /**
     *  有序Set集合 获取成员排名 从分数从低到高返回排名
     * @param k
     * @return
     */
    public Long zrank(String k,String member){
        Jedis jedis = null;
        Long result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.zrank(k,member);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }
    /**
     *  有序Set集合 获取成员排名  从分数从高到低返回排名
     * @param k
     * @param member
     * @return
     */
    public Long zrevrank (String k,String member){
        Jedis jedis = null;
        Long result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.zrevrank(k,member);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }
    /**
     * 持久key
     * @param k
     * @return
     */
    public Long persist(String k){
        Jedis jedis = null;
        Long result = null;
        try {
            jedis = jedisPool.getResource();
            result = jedis.persist(k);
        } catch (Exception e){
            e.printStackTrace();
        }finally {
            jedis.close();
        }
        return result;
    }


}
