package com.creditease.b2bsettle.basedata.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import net.sf.json.JSONObject;

import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.creditease.b2bsettle.basedata.constant.AuditStatus;
import com.creditease.b2bsettle.basedata.constant.CommonConstants;
import com.creditease.b2bsettle.basedata.constant.OperateType;
import com.creditease.b2bsettle.basedata.model.FinancialInstitution;
import com.creditease.b2bsettle.basedata.model.FinancialInstitutionAudit;
import com.creditease.b2bsettle.basedata.repository.FinancialInstitutionAuditRepository;
//import com.creditease.b2bsettle.basedata.repository.FinancialInstitutionAuditRepository;
import com.creditease.b2bsettle.basedata.repository.FinancialInstitutionRepository;
import com.creditease.b2bsettle.basedata.service.FinancialInstitutionService;

/**
 * 金融机构管理
 * 
 * @author shihl
 *
 */
@Service
public class FinancialInstitutionServiceImpl implements FinancialInstitutionService {
	@Autowired
	private FinancialInstitutionAuditRepository financialInstitutionAuditRepository;
	@Autowired
	private FinancialInstitutionRepository financialInstitutionRepository;
 
	
	/**
	 * 新增支付类型（存审核表）
	 * */ 
	@Override
	public long newFinancialInstitution(FinancialInstitutionAudit financialInstitutionAudit) {
		FinancialInstitutionAudit save = financialInstitutionAuditRepository.save(financialInstitutionAudit);
		return save.getCid();
	}

	/**
	 * 修改
	 * 适用范围：
	 * 已启用、未启用页面的新增、修改操作
	 * 当如参cid 为0时方法认为是已用页面传来的请求
	 * */
	@Override
	public void updateFinancialInstitution(long cid, long id, String bankName, String bankCode, String bankNameSimple , String modifier) {
		//标识已启用页面不能修改
		FinancialInstitution financialInstitutionmd = financialInstitutionRepository.findOne(id);
		financialInstitutionmd.setCanOperate(false);
		financialInstitutionRepository.save(financialInstitutionmd);
		
		//在审核表新建或更新信息
		FinancialInstitutionAudit financialInstitutionAudit = null;
		String operateSummary = "";
		if(cid == 0){//cid为0时认为时已用页面发来的请求，需要在审核表里新增
			financialInstitutionAudit = new FinancialInstitutionAudit();
			financialInstitutionAudit.setId(id);
			operateSummary = CommonConstants.updateUsed;
		}else{
			financialInstitutionAudit = financialInstitutionAuditRepository.findOne(cid);
			operateSummary = CommonConstants.updateNotUsed;
			financialInstitutionAudit.setAuditText("");//清空上次的审核信息
		}
		financialInstitutionAudit.setBankName(bankName);
		financialInstitutionAudit.setBankCode(bankCode);
		financialInstitutionAudit.setBankNameSimple(bankNameSimple);
		financialInstitutionAudit.setAuditStatus(AuditStatus.Audit);
		financialInstitutionAudit.setOperateSummary(operateSummary);
		financialInstitutionAudit.setOperateType(OperateType.UPDATE);
		financialInstitutionAudit.setCreator(financialInstitutionmd.getCreator());
		financialInstitutionAudit.setCreatedTime(financialInstitutionmd.getCreatedTime());
		financialInstitutionAudit.setModifier(modifier);
		financialInstitutionAudit.setModifyTime(new Date());
		financialInstitutionAuditRepository.save(financialInstitutionAudit);
	}

	
	/**
	 * 删除
	 * 适用范围：
	 * 已启用、未启用页面的删除操作
	 * 当如参cid 为null时方法认为是已用页面传来的请求
	 * */
	public void deleteFinancialInstitution(long cid, long id, boolean isDelte, String modifier) {
		//标识已启用页面不能修改
		FinancialInstitution financialInstitutionmd = financialInstitutionRepository.findOne(id);
		financialInstitutionmd.setCanOperate(false);
		financialInstitutionRepository.save(financialInstitutionmd);
		
		//在审核表新建或更新信息
		FinancialInstitutionAudit financialInstitutionAudit = null;
		String operateSummary = "";
		if(cid == 0){//cid为0时认为时已用页面发来的请求，需要在审核表里新增
			financialInstitutionAudit = new FinancialInstitutionAudit();
			financialInstitutionAudit.setId(id);
			operateSummary = CommonConstants.deleteUsed;
		}else{
			financialInstitutionAudit = financialInstitutionAuditRepository.findOne(cid);
			operateSummary = CommonConstants.deleteNotUsed;
			financialInstitutionAudit.setAuditText("");//清空上次的审核信息
		}
		financialInstitutionAudit.setBankName(financialInstitutionmd.getBankName());
		financialInstitutionAudit.setBankCode(financialInstitutionmd.getBankCode());
		financialInstitutionAudit.setBankNameSimple(financialInstitutionmd.getBankNameSimple());
		financialInstitutionAudit.setDeleted(isDelte);
		financialInstitutionAudit.setAuditStatus(AuditStatus.Audit);
		financialInstitutionAudit.setOperateSummary(operateSummary);
		financialInstitutionAudit.setOperateType(OperateType.DELETE);
		financialInstitutionAudit.setCreator(financialInstitutionmd.getCreator());
		financialInstitutionAudit.setCreatedTime(financialInstitutionmd.getCreatedTime());
		financialInstitutionAudit.setModifier(modifier);
		financialInstitutionAudit.setModifyTime(new Date());
		financialInstitutionAuditRepository.save(financialInstitutionAudit);
	}
	
	
	
	/**
	 * 
	 * 审核操作 
	 * 适用范围：
	 * 适用来自 已启用、未启用页面的新增、修改和删除操作的审核
	 * */
	@Override
	public String auditFinancialInstitution(long cid, String auditText,AuditStatus auditStatus, String auditor ) {
		FinancialInstitutionAudit financialInstitutionAudit =  financialInstitutionAuditRepository.findOne(cid);
		FinancialInstitution financialInstitution = financialInstitutionRepository.findOne(financialInstitutionAudit.getId());
		//审核通过
		if(auditStatus.equals(AuditStatus.Through)){
			//更改审核表状态
			financialInstitutionAudit.setAuditStatus(AuditStatus.Through);
			financialInstitutionAudit.setAuditText(auditText);//审核操作不是修改，所以不更新modifer字段
			
			//复制审核表信息更新主表
			if(financialInstitution == null){//审核新增、因为查不出数据、此时需要新建主表
				financialInstitution = new FinancialInstitution();
				financialInstitution.setBankCode(financialInstitutionAudit.getBankCode());
				financialInstitution.setBankName(financialInstitutionAudit.getBankName());
				financialInstitution.setBankNameSimple(financialInstitutionAudit.getBankNameSimple());
				financialInstitution.setCreator(financialInstitutionAudit.getCreator());
				financialInstitution.setCreatedTime(financialInstitutionAudit.getCreatedTime());
				financialInstitution.setModifier(financialInstitutionAudit.getModifier());
				financialInstitution.setModifyTime(financialInstitutionAudit.getModifyTime());
				financialInstitution.setAuditor(auditor);
				financialInstitution.setAuditTime(new Date());
				financialInstitution.setDeleted(false);
				financialInstitution.setCanOperate(true);
			}else{//审核修改或删除、此时需要更新主表
				financialInstitution.setBankCode(financialInstitutionAudit.getBankCode());
				financialInstitution.setBankName(financialInstitutionAudit.getBankName());
				financialInstitution.setBankNameSimple(financialInstitutionAudit.getBankNameSimple());
				financialInstitution.setAuditor(auditor);
				financialInstitution.setAuditTime(new Date());
				financialInstitution.setModifier(financialInstitutionAudit.getModifier());
				financialInstitution.setModifyTime(financialInstitutionAudit.getModifyTime());
				financialInstitution.setDeleted(financialInstitutionAudit.getOperateType().equals(OperateType.DELETE));//如果当前审核通过的市删除操作，那么删除标识为true
				financialInstitution.setCanOperate(true);
			}
		}else{//审核未通过
			financialInstitutionAudit.setAuditStatus(AuditStatus.Refuse);
			financialInstitutionAudit.setAuditText(auditText);
			financialInstitution.setCanOperate(true);
		}
		financialInstitution = financialInstitutionRepository.save(financialInstitution);//审核新增时insert，审核修改和删除时update
		financialInstitutionAudit.setId(financialInstitution.getId());//新增情况需要关联ID   无论任何时候主表和审核表都是有关系的所以此方法没问题
		financialInstitutionAuditRepository.save(financialInstitutionAudit);//更新操作
		return "1";
	}
	
	
	
	/**********************此方法接口使用******************************/
	@Override
	@Test
	public List<FinancialInstitution> queryFinancialInstitutionAll() {
		return financialInstitutionRepository.findByCanOperateAndDeleted(true,false);
	}
	
	@Override
	@Test
	public FinancialInstitution queryByBankName(String bankName) {
		return financialInstitutionRepository.findByBankNameAndCanOperateAndDeleted(bankName,true, false);
	}
	
	@Override
	public FinancialInstitution queryFinancialInstitutionById(long id) {
		FinancialInstitution FinancialInstitution = financialInstitutionRepository.findOne(id);
		return FinancialInstitution;
	}
	



}
