package com.creditease.b2bsettle.basedata.service.impl;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.creditease.b2bsettle.basedata.constant.AuditStatus;
import com.creditease.b2bsettle.basedata.constant.CommonConstants;
import com.creditease.b2bsettle.basedata.constant.OperateType;
import com.creditease.b2bsettle.basedata.external.model.BankRelateNumberOneRes;
import com.creditease.b2bsettle.basedata.model.BankRelateNumber;
import com.creditease.b2bsettle.basedata.model.BankRelateNumberAudit;
import com.creditease.b2bsettle.basedata.model.City;
import com.creditease.b2bsettle.basedata.model.Province;
import com.creditease.b2bsettle.basedata.repository.BankRelateNumberAuditRepository;
import com.creditease.b2bsettle.basedata.repository.BankRelateNumberRepository;
import com.creditease.b2bsettle.basedata.repository.CityRepository;
import com.creditease.b2bsettle.basedata.repository.ProvinceRepository;
import com.creditease.b2bsettle.basedata.service.BankRelateNumberService;

/**
 * 联行号管理
 * 
 * @author shihl
 *
 */
@Service
public class BankRelateNumberServiceImpl implements BankRelateNumberService {
	
	@Autowired
	private BankRelateNumberRepository bankRelateNumberRepository;
	
	@Autowired
	private BankRelateNumberAuditRepository bankRelateNumberAuditRepository;
	
	@Autowired
	private ProvinceRepository provinceRepository;
	
	@Autowired
	private CityRepository cityRepository;
	
	
 

	
	
	/**
	 * 新增支付类型（存审核表）
	 * */ 
	@Override
	public long newbankRelateNumber(BankRelateNumberAudit bankRelateNumberAudit) {
		BankRelateNumberAudit save = bankRelateNumberAuditRepository.save(bankRelateNumberAudit);
		return save.getCid();
	}

	/**
	 * 修改
	 * 适用范围：
	 * 已启用、未启用页面的新增、修改操作
	 * 当如参cid 为0时方法认为是已用页面传来的请求
	 * */
	@Override
	public void updatebankRelateNumber(long cid, long id, BankRelateNumberAudit updateInfo, String modifier) {
		//标识已启用页面不能修改
		BankRelateNumber bankRelateNumbermd = bankRelateNumberRepository.findOne(id);
		bankRelateNumbermd.setCanOperate(false);
		bankRelateNumberRepository.save(bankRelateNumbermd);
		
		//在审核表新建或更新信息
		BankRelateNumberAudit bankRelateNumberAudit = null;
		String operateSummary = "";
		if(cid == 0){//cid为0时认为时已用页面发来的请求，需要在审核表里新增
			bankRelateNumberAudit = new BankRelateNumberAudit();
			bankRelateNumberAudit.setId(id);
			operateSummary = CommonConstants.updateUsed;
		}else{
			bankRelateNumberAudit = bankRelateNumberAuditRepository.findOne(cid);
			operateSummary = CommonConstants.updateNotUsed;
			bankRelateNumberAudit.setAuditText("");//清空上次的审核信息
		}
		bankRelateNumberAudit.setRelateNumber(updateInfo.getRelateNumber());
		bankRelateNumberAudit.setBranchName(updateInfo.getBranchName());
		bankRelateNumberAudit.setBranchAddress(updateInfo.getBranchAddress());
		bankRelateNumberAudit.setBankCode(updateInfo.getBankCode());
		bankRelateNumberAudit.setBankName(updateInfo.getBankName());
		bankRelateNumberAudit.setZoneCode(updateInfo.getZoneCode());
		bankRelateNumberAudit.setProvince(updateInfo.getProvince());
		bankRelateNumberAudit.setCity(updateInfo.getCity());
		bankRelateNumberAudit.setComments(updateInfo.getComments());
		
		bankRelateNumberAudit.setAuditStatus(AuditStatus.Audit);
		bankRelateNumberAudit.setOperateSummary(operateSummary);
		bankRelateNumberAudit.setOperateType(OperateType.UPDATE);
		bankRelateNumberAudit.setCreator(bankRelateNumbermd.getCreator());
		bankRelateNumberAudit.setCreatedTime(bankRelateNumbermd.getCreatedTime());
		bankRelateNumberAudit.setModifier(modifier);
		bankRelateNumberAudit.setModifyTime(new Date());
		bankRelateNumberAuditRepository.save(bankRelateNumberAudit);
	}

	
	/**
	 * 删除
	 * 适用范围：
	 * 已启用、未启用页面的删除操作
	 * 当如参cid 为null时方法认为是已用页面传来的请求
	 * */
	public void deletebankRelateNumber(long cid, long id, boolean isDelte, String modifier) {
		//标识已启用页面不能修改
		BankRelateNumber bankRelateNumbermd = bankRelateNumberRepository.findOne(id);
		bankRelateNumbermd.setCanOperate(false);
		bankRelateNumberRepository.save(bankRelateNumbermd);
		
		//在审核表新建或更新信息
		BankRelateNumberAudit bankRelateNumberAudit = null;
		String operateSummary = "";
		if(cid == 0){//cid为0时认为时已用页面发来的请求，需要在审核表里新增
			bankRelateNumberAudit = new BankRelateNumberAudit();
			bankRelateNumberAudit.setId(id);
			operateSummary = CommonConstants.deleteUsed;
		}else{
			bankRelateNumberAudit = bankRelateNumberAuditRepository.findOne(cid);
			operateSummary = CommonConstants.deleteNotUsed;
			bankRelateNumberAudit.setAuditText("");//清空上次的审核信息
		}
		bankRelateNumberAudit.setRelateNumber(bankRelateNumbermd.getRelateCode());
		bankRelateNumberAudit.setBranchName(bankRelateNumbermd.getBranchName());
		bankRelateNumberAudit.setBranchAddress(bankRelateNumbermd.getBranchAddress());
		bankRelateNumberAudit.setBankCode(bankRelateNumbermd.getBankCode());
		bankRelateNumberAudit.setBankName(bankRelateNumbermd.getBankName());
		bankRelateNumberAudit.setZoneCode(bankRelateNumbermd.getZoneCode());
		bankRelateNumberAudit.setProvince(bankRelateNumbermd.getProvince());
		bankRelateNumberAudit.setCity(bankRelateNumbermd.getCity());
		bankRelateNumberAudit.setComments(bankRelateNumbermd.getComments());
		
		bankRelateNumberAudit.setDeleted(isDelte);
		bankRelateNumberAudit.setAuditStatus(AuditStatus.Audit);
		bankRelateNumberAudit.setOperateSummary(operateSummary);
		bankRelateNumberAudit.setOperateType(OperateType.DELETE);
		bankRelateNumberAudit.setCreator(bankRelateNumbermd.getCreator());
		bankRelateNumberAudit.setCreatedTime(bankRelateNumbermd.getCreatedTime());
		bankRelateNumberAudit.setModifier(modifier);
		bankRelateNumberAudit.setModifyTime(new Date());
		bankRelateNumberAuditRepository.save(bankRelateNumberAudit);
	}
	
	
	
	/**
	 * 
	 * 审核操作 
	 * 适用范围：
	 * 适用来自 已启用、未启用页面的新增、修改和删除操作的审核
	 * */
	@Override
	public String auditbankRelateNumber(long cid, String auditText,AuditStatus auditStatus, String auditor ) {
		BankRelateNumberAudit bankRelateNumberAudit =  bankRelateNumberAuditRepository.findOne(cid);
		BankRelateNumber bankRelateNumber = bankRelateNumberRepository.findOne(bankRelateNumberAudit.getId());
		//审核通过
		if(auditStatus.equals(AuditStatus.Through)){
			//更改审核表状态
			bankRelateNumberAudit.setAuditStatus(AuditStatus.Through);
			bankRelateNumberAudit.setAuditText(auditText);//审核操作不是修改，所以不更新modifer字段
			
			//复制审核表信息更新主表
			if(bankRelateNumber == null){//审核新增、因为查不出数据、此时需要新建主表
				bankRelateNumber = new BankRelateNumber ();
				bankRelateNumber.setRelateCode(bankRelateNumberAudit.getRelateNumber());
				bankRelateNumber.setBranchName(bankRelateNumberAudit.getBranchName());
				bankRelateNumber.setBranchAddress(bankRelateNumberAudit.getBranchAddress());
				bankRelateNumber.setBankCode(bankRelateNumberAudit.getBankCode());
				bankRelateNumber.setBankName(bankRelateNumberAudit.getBankName());
				bankRelateNumber.setZoneCode(bankRelateNumberAudit.getZoneCode());
				bankRelateNumber.setProvince(bankRelateNumberAudit.getProvince());
				bankRelateNumber.setCity(bankRelateNumberAudit.getCity());
				bankRelateNumber.setComments(bankRelateNumberAudit.getComments());
				
				bankRelateNumber.setCreator(bankRelateNumberAudit.getCreator());
				bankRelateNumber.setCreatedTime(bankRelateNumberAudit.getCreatedTime());
				bankRelateNumber.setModifier(bankRelateNumberAudit.getModifier());
				bankRelateNumber.setModifyTime(bankRelateNumberAudit.getModifyTime());
				bankRelateNumber.setAuditor(auditor);
				bankRelateNumber.setAuditTime(new Date());
				bankRelateNumber.setDeleted(false);
				bankRelateNumber.setCanOperate(true);
			}else{//审核修改或删除、此时需要更新主表
				bankRelateNumber.setRelateCode(bankRelateNumberAudit.getRelateNumber());
				bankRelateNumber.setBranchName(bankRelateNumberAudit.getBranchName());
				bankRelateNumber.setBranchAddress(bankRelateNumberAudit.getBranchAddress());
				bankRelateNumber.setBankCode(bankRelateNumberAudit.getBankCode());
				bankRelateNumber.setBankName(bankRelateNumberAudit.getBankName());
				bankRelateNumber.setZoneCode(bankRelateNumberAudit.getZoneCode());
				bankRelateNumber.setProvince(bankRelateNumberAudit.getProvince());
				bankRelateNumber.setCity(bankRelateNumberAudit.getCity());
				bankRelateNumber.setComments(bankRelateNumberAudit.getComments());
				
				bankRelateNumber.setAuditor(auditor);
				bankRelateNumber.setAuditTime(new Date());
				bankRelateNumber.setModifier(bankRelateNumberAudit.getModifier());
				bankRelateNumber.setModifyTime(bankRelateNumberAudit.getModifyTime());
				bankRelateNumber.setDeleted(bankRelateNumberAudit.getOperateType().equals(OperateType.DELETE));//如果当前审核通过的市删除操作，那么删除标识为true
				bankRelateNumber.setCanOperate(true);
			}
		}else{//审核未通过
			bankRelateNumberAudit.setAuditStatus(AuditStatus.Refuse);
			bankRelateNumberAudit.setAuditText(auditText);
			bankRelateNumber.setCanOperate(true);
		}
		bankRelateNumber = bankRelateNumberRepository.save(bankRelateNumber);//审核新增时insert，审核修改和删除时update
		bankRelateNumberAudit.setId(bankRelateNumber.getId());//新增情况需要关联ID   无论任何时候主表和审核表都是有关系的所以此方法没问题
		bankRelateNumberAuditRepository.save(bankRelateNumberAudit);//更新操作
		return "1";
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	@Override
	public List<BankRelateNumber> queryBankRelateNumberAll() {
		return bankRelateNumberRepository.findAll();

	}

	@Override
	public BankRelateNumber queryBankRelateNumberById(long id) {
		BankRelateNumber bankRelateNumber = bankRelateNumberRepository.findOne(id);
		return bankRelateNumber;
	}

	
	/**************************以下外部接口处理******************************/
	@Override
	public List<BankRelateNumber> queryRelateCodesByBankCodeAndProvinceAndCity( String bankCode,String province, String city) {
		List<BankRelateNumber> bankRelateNumbers = (List<BankRelateNumber>) bankRelateNumberRepository.findByBankCodeAndProvinceAndCity(bankCode,province ,city );
		return bankRelateNumbers;
	}

	@Override
	public BankRelateNumberOneRes queryByRelateCode(String relateCode) {
		System.out.println("客户端传来relateCode="+relateCode);
		BankRelateNumber bankRelateNumber = bankRelateNumberRepository.findByRelateCodeAndCanOperateAndDeleted(relateCode, true, false);
		Province province = provinceRepository.findByProvinceCode(bankRelateNumber.getProvince());
		City city = cityRepository.findByCityCode(bankRelateNumber.getCity());
		
		 BankRelateNumberOneRes res = new BankRelateNumberOneRes();
		 res.setRetMessage("测试");
		 res.setRelateCode(bankRelateNumber.getRelateCode());
		 res.setBranchName(bankRelateNumber.getBranchName());
		 res.setBranchAddress(bankRelateNumber.getBranchAddress());
		 res.setBankName(bankRelateNumber.getBankName());
		 res.setBankCode(bankRelateNumber.getBankCode());
		 res.setZoneCode(bankRelateNumber.getZoneCode());
		 res.setProvinceName(province.getProvinceName());
		 res.setCityName(city.getCityName());
		return res;
	}

}
