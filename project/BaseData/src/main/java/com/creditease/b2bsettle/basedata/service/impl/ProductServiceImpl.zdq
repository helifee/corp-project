package com.creditease.b2bsettle.basedata.service.impl;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.creditease.b2bsettle.basedata.constant.AuditStatus;
import com.creditease.b2bsettle.basedata.constant.CommonConstants;
import com.creditease.b2bsettle.basedata.constant.OperateType;
import com.creditease.b2bsettle.basedata.model.AccountType;
import com.creditease.b2bsettle.basedata.model.Product;
import com.creditease.b2bsettle.basedata.model.ProductAudit;
import com.creditease.b2bsettle.basedata.repository.ProductAuditRepository;
import com.creditease.b2bsettle.basedata.repository.ProductRepository;
import com.creditease.b2bsettle.basedata.service.ProductService;
@Service
public class ProductServiceImpl implements ProductService {
	
	@Autowired
	private ProductAuditRepository productAuditRepository;
	
	@Autowired
	private ProductRepository productRepository;
	

	/**
	 * 新增支付类型（存审核表）
	 * */ 
	@Override
	public long newProduct(ProductAudit productAudit) {
		ProductAudit save = productAuditRepository.save(productAudit);
		return save.getCid();
	}

	/**
	 * 修改
	 * 适用范围：
	 * 已启用、未启用页面的新增、修改操作
	 * 当如参cid 为0时方法认为是已用页面传来的请求
	 * */
	@Override
	public void updateProduct(long cid, long id, String productName, int productStatus, String modifier) {
		//标识已启用页面不能修改
		Product productmd = productRepository.findOne(id);
		productmd.setCanOperate(false);
		productRepository.save(productmd);
		
		//在审核表新建或更新信息
		ProductAudit productAudit = null;
		String operateSummary = "";
		if(cid == 0){//cid为0时认为时已用页面发来的请求，需要在审核表里新增
			productAudit = new ProductAudit();
			productAudit.setId(id);
			operateSummary = CommonConstants.updateUsed;
		}else{
			productAudit = productAuditRepository.findOne(cid);
			operateSummary = CommonConstants.updateNotUsed;
			productAudit.setAuditText("");//清空上次的审核信息
		}
		productAudit.setProductName(productName);
		productAudit.setProductStatus(productStatus);
		
		productAudit.setAuditStatus(AuditStatus.Audit);
		productAudit.setOperateSummary(operateSummary);
		productAudit.setOperateType(OperateType.UPDATE);
		productAudit.setCreator(productmd.getCreator());
		productAudit.setCreatedTime(productmd.getCreatedTime());
		productAudit.setModifier(modifier);
		productAudit.setModifyTime(new Date());
		productAuditRepository.save(productAudit);
	}

	
	/**
	 * 删除
	 * 适用范围：
	 * 已启用、未启用页面的删除操作
	 * 当如参cid 为null时方法认为是已用页面传来的请求
	 * */
	public void deleteProduct(long cid, long id, boolean isDelte, String modifier) {
		//标识已启用页面不能修改
		Product productmd = productRepository.findOne(id);
		productmd.setCanOperate(false);
		productRepository.save(productmd);
		
		//在审核表新建或更新信息
		ProductAudit productAudit = null;
		String operateSummary = "";
		if(cid == 0){//cid为0时认为时已用页面发来的请求，需要在审核表里新增
			productAudit = new ProductAudit();
			productAudit.setId(id);
			operateSummary = CommonConstants.deleteUsed;
		}else{
			productAudit = productAuditRepository.findOne(cid);
			operateSummary = CommonConstants.deleteNotUsed;
			productAudit.setAuditText("");//清空上次的审核信息
		}
		productAudit.setProductName(productmd.getProductName());
		productAudit.setProductStatus(productmd.getProductStatus());
		
		productAudit.setDeleted(isDelte);
		productAudit.setAuditStatus(AuditStatus.Audit);
		productAudit.setOperateSummary(operateSummary);
		productAudit.setOperateType(OperateType.DELETE);
		productAudit.setCreator(productmd.getCreator());
		productAudit.setCreatedTime(productmd.getCreatedTime());
		productAudit.setModifier(modifier);
		productAudit.setModifyTime(new Date());
		productAuditRepository.save(productAudit);
	}
	
	
	
	/**
	 * 
	 * 审核操作 
	 * 适用范围：
	 * 适用来自 已启用、未启用页面的新增、修改和删除操作的审核
	 * */
	@Override
	public String auditProduct(long cid, String auditText,AuditStatus auditStatus, String auditor ) {
		ProductAudit productAudit =  productAuditRepository.findOne(cid);
		Product product = productRepository.findOne(productAudit.getId());
		//审核通过
		if(auditStatus.equals(AuditStatus.Through)){
			//更改审核表状态
			productAudit.setAuditStatus(AuditStatus.Through);
			productAudit.setAuditText(auditText);//审核操作不是修改，所以不更新modifer字段
			
			//复制审核表信息更新主表
			if(product == null){//审核新增、因为查不出数据、此时需要新建主表
				product = new Product ();
				product.setProductName(productAudit.getProductName());
				product.setProductStatus((int) productAudit.getProductStatus());
				
				product.setCreator(productAudit.getCreator());
				product.setCreatedTime(productAudit.getCreatedTime());
				product.setModifier(productAudit.getModifier());
				product.setModifyTime(productAudit.getModifyTime());
				product.setAuditor(auditor);
				product.setAuditTime(new Date());
				product.setDeleted(false);
				product.setCanOperate(true);
			}else{//审核修改或删除、此时需要更新主表
				product.setProductName(productAudit.getProductName());
				product.setProductStatus((int) productAudit.getProductStatus());
				
				product.setAuditor(auditor);
				product.setAuditTime(new Date());
				product.setModifier(productAudit.getModifier());
				product.setModifyTime(productAudit.getModifyTime());
				product.setDeleted(productAudit.getOperateType().equals(OperateType.DELETE));//如果当前审核通过的市删除操作，那么删除标识为true
				product.setCanOperate(true);
			}
		}else{//审核未通过
			productAudit.setAuditStatus(AuditStatus.Refuse);
			productAudit.setAuditText(auditText);
			product.setCanOperate(true);
		}
		product = productRepository.save(product);//审核新增时insert，审核修改和删除时update
		productAudit.setId(product.getId());//新增情况需要关联ID   无论任何时候主表和审核表都是有关系的所以此方法没问题
		productAuditRepository.save(productAudit);//更新操作
		return "1";
	}
	
	
	@Override
	public List<Product> findAll() {
		return productRepository.findByCanOperateAndDeleted(true,false);
	}

}
