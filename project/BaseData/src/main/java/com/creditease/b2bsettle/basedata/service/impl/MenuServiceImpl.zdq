package com.creditease.b2bsettle.basedata.service.impl;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.creditease.b2bsettle.basedata.constant.AuditStatus;
import com.creditease.b2bsettle.basedata.constant.OperateType;
import com.creditease.b2bsettle.basedata.model.Menu;
import com.creditease.b2bsettle.basedata.model.MenuAudit;
import com.creditease.b2bsettle.basedata.repository.MenuAuditRepository;
import com.creditease.b2bsettle.basedata.repository.MenuRepository;
import com.creditease.b2bsettle.basedata.repository.RoleMenuRepository;
import com.creditease.b2bsettle.basedata.service.MenuService;

@Service
public class MenuServiceImpl implements MenuService {

	@Autowired
	private MenuRepository menuRepository;
	
	@Autowired
	private MenuAuditRepository menuAuditRepository;
	
	@Autowired
	private RoleMenuRepository roleMenuRepository;
	
	@Override
	public long addMenu(Menu menu) {
		Menu retMenu = menuRepository.save(menu);
		return retMenu.getId();
	}

	@Override
	public boolean delMenu(String sysId, String code) {
		int count = menuRepository.deleteMenuByCode(sysId, code);
		return count == 1;
	}

	@Override
	public boolean updateMenu(Menu menu) {
		Menu retMenu = menuRepository.save(menu);
		return retMenu != null;
	}

	@Override
	public Menu findMenuByCode(String sysId, String code) {
		return menuRepository.findBySysIdAndCodeAndDeleted(sysId, code, false);
	}

	@Override
	public boolean updateFunctionOf(String sysId, String menuCode,
			String functionCode) {
		int count = menuRepository.updateFunctionOf(sysId, menuCode, functionCode);
		return count == 1;
	}

	public MenuRepository getMenuRepository() {
		return menuRepository;
	}

	public void setMenuRepository(MenuRepository menuRepository) {
		this.menuRepository = menuRepository;
	}

	@Override
	public List<Menu> findMenusOf(int roleId) {
		return menuRepository.findMenusOf(roleId);
	}

	@Override
	public List<Menu> findAllValidMenus(String sysId) {
		return menuRepository.findBySysIdAndDeleted(sysId);
	}

	@Override
	public List<MenuAudit> findAllInvalidMenu() {
		return menuAuditRepository.findByDeleted(false);
	}

	@Override
	public boolean pass(MenuAudit menuAudit) {
		//同步数据到主表
		OperateType operateType = menuAudit.getOperateType();
		if(OperateType.ADD.equals(operateType)) {
			//新增菜单
			Menu menu = new Menu();
			convert(menuAudit, menu);
			Menu save = menuRepository.save(menu);
			menuAudit.setId(save.getId());	//回写ID
			
		} else if(OperateType.UPDATE.toString().equals(operateType)) {
			//修改菜单
			Menu menu = menuRepository.findOne(menuAudit.getId());
			convert(menuAudit, menu);
			menuRepository.save(menu);
			
		} else if(OperateType.DELETE.toString().equals(operateType)) {
			//删除菜单
			menuRepository.deleteById(menuAudit.getId(), new Date());
		}
		
		menuAudit.setDeleted(true);
		menuAuditRepository.save(menuAudit);
		
    	return true;
    }

	private void convert(MenuAudit menuAudit, Menu menu) {
		menu.setCode(menuAudit.getCode());
		menu.setName(menuAudit.getName());
		menu.setComments(menuAudit.getComments());
		menu.setCreator(menuAudit.getCreator());
		menu.setFunctionCode(menuAudit.getFunctionCode());
		menu.setLeaf(menuAudit.isLeaf());
		menu.setLocation(menuAudit.getLocation());
		menu.setParent(menuAudit.getParent());
		menu.setSysId(menuAudit.getSysId());
		menu.setUrl(menuAudit.getUrl());
		menu.setCanOperate(true);
	}

	@Override
	public boolean noPass(MenuAudit menuAudit) {
		menuAudit.setAuditStatus(AuditStatus.Refuse);
		menuAuditRepository.save(menuAudit);
		return true;
	}

}
