package com.creditease.b2bsettle.basedata.service.impl;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.creditease.b2bsettle.basedata.constant.AuditStatus;
import com.creditease.b2bsettle.basedata.constant.CommonConstants;
import com.creditease.b2bsettle.basedata.constant.OperateType;
import com.creditease.b2bsettle.basedata.model.DaySwitch;
import com.creditease.b2bsettle.basedata.model.DaySwitchAudit;
import com.creditease.b2bsettle.basedata.model.PayType;
import com.creditease.b2bsettle.basedata.repository.DaySwitchAuditRepository;
import com.creditease.b2bsettle.basedata.repository.DaySwitchRepository;
import com.creditease.b2bsettle.basedata.service.DaySwitchService;

/**
 * 日切管理
 * 
 * @author shihl
 *
 */
@Service
public class DaySwitchServiceImpl implements DaySwitchService {
	@Autowired
	private DaySwitchAuditRepository daySwitchAuditRepository;
	@Autowired
	private DaySwitchRepository daySwitchRepository;
	
	/**
	 * 
	 * 前台查询
	 * 
	 * */
	
	@Override
	public Page<DaySwitch> findAll(Pageable pageable) {
		Page<DaySwitch> page = daySwitchRepository.findAll(pageable);
		return page;
	}

	/**
	 * 新增支付类型（存审核表）
	 * */ 
	@Override
	public long newDaySwitchService(DaySwitchAudit daySwitchAudit) {
		DaySwitchAudit save = daySwitchAuditRepository.save(daySwitchAudit);
		return save.getCid();
	}

	/**
	 * 修改
	 * 适用范围：
	 * 已启用、未启用页面的新增、修改操作
	 * 当如参cid 为0时方法认为是已用页面传来的请求
	 * */
	@Override
	public void updateDaySwitch(long cid, long id, long hour,long minute, String modifier) {
		//标识已启用页面不能修改
		DaySwitch daySwitchmd = daySwitchRepository.findOne(id);
		daySwitchmd.setCanOperate(false);
		daySwitchRepository.save(daySwitchmd);
		
		//在审核表新建或更新信息
		DaySwitchAudit daySwitchAudit = null;
		String operateSummary = "";
		if(cid == 0){//cid为0时认为时已用页面发来的请求，需要在审核表里新增
			daySwitchAudit = new DaySwitchAudit();
			daySwitchAudit.setId(id);
			operateSummary = CommonConstants.updateUsed;
		}else{
			daySwitchAudit = daySwitchAuditRepository.findOne(cid);
			operateSummary = CommonConstants.updateNotUsed;
			daySwitchAudit.setAuditText("");//清空上次的审核信息
		}
		daySwitchAudit.setHour(hour);
		daySwitchAudit.setMinute(minute);
		daySwitchAudit.setAuditStatus(AuditStatus.Audit);
		daySwitchAudit.setOperateSummary(operateSummary);
		daySwitchAudit.setOperateType(OperateType.UPDATE);
		daySwitchAudit.setCreator(daySwitchmd.getCreator());
		daySwitchAudit.setCreatedTime(daySwitchmd.getCreatedTime());
		daySwitchAudit.setModifier(modifier);
		daySwitchAudit.setModifyTime(new Date());
		daySwitchAuditRepository.save(daySwitchAudit);
	}

	
	/**
	 * 删除
	 * 适用范围：
	 * 已启用、未启用页面的删除操作
	 * 当如参cid 为null时方法认为是已用页面传来的请求
	 * */
	public void deleteDaySwitch(long cid, long id, boolean isDelte, String modifier) {
		//标识已启用页面不能修改
		DaySwitch daySwitchmd = daySwitchRepository.findOne(id);
		daySwitchmd.setCanOperate(false);
		daySwitchRepository.save(daySwitchmd);
		
		//在审核表新建或更新信息
		DaySwitchAudit daySwitchAudit = null;
		String operateSummary = "";
		if(cid == 0){//cid为0时认为时已用页面发来的请求，需要在审核表里新增
			daySwitchAudit = new DaySwitchAudit();
			daySwitchAudit.setId(id);
			operateSummary = CommonConstants.deleteUsed;
		}else{
			daySwitchAudit = daySwitchAuditRepository.findOne(cid);
			operateSummary = CommonConstants.deleteNotUsed;
			daySwitchAudit.setAuditText("");//清空上次的审核信息
		}
		daySwitchAudit.setHour(daySwitchmd.getHour());
		daySwitchAudit.setMinute(daySwitchmd.getMinute());
		daySwitchAudit.setDeleted(isDelte);
		daySwitchAudit.setAuditStatus(AuditStatus.Audit);
		daySwitchAudit.setOperateSummary(operateSummary);
		daySwitchAudit.setOperateType(OperateType.DELETE);
		daySwitchAudit.setCreator(daySwitchmd.getCreator());
		daySwitchAudit.setCreatedTime(daySwitchmd.getCreatedTime());
		daySwitchAudit.setModifier(modifier);
		daySwitchAudit.setModifyTime(new Date());
		daySwitchAuditRepository.save(daySwitchAudit);
	}
	
	
	
	/**
	 * 
	 * 审核操作 
	 * 适用范围：
	 * 适用来自 已启用、未启用页面的新增、修改和删除操作的审核
	 * */
	@Override
	public String auditDaySwitch(long cid, String auditText,AuditStatus auditStatus, String auditor ) {
		DaySwitchAudit daySwitchAudit =  daySwitchAuditRepository.findOne(cid);
		DaySwitch daySwitch = daySwitchRepository.findOne(daySwitchAudit.getId());
		//审核通过
		if(auditStatus.equals(AuditStatus.Through)){
			//更改审核表状态
			daySwitchAudit.setAuditStatus(AuditStatus.Through);
			daySwitchAudit.setAuditText(auditText);//审核操作不是修改，所以不更新modifer字段
			
			//复制审核表信息更新主表
			if(daySwitch == null){//审核新增、因为查不出数据、此时需要新建主表
				daySwitch = new DaySwitch();
				daySwitch.setHour(daySwitchAudit.getHour());
				daySwitch.setMinute(daySwitchAudit.getMinute());
				daySwitch.setCreator(daySwitchAudit.getCreator());
				daySwitch.setCreatedTime(daySwitchAudit.getCreatedTime());
				daySwitch.setModifier(daySwitchAudit.getModifier());
				daySwitch.setModifyTime(daySwitchAudit.getModifyTime());
				daySwitch.setAuditor(auditor);
				daySwitch.setAuditTime(new Date());
				daySwitch.setDeleted(false);
				daySwitch.setCanOperate(true);
			}else{//审核修改或删除、此时需要更新主表
				daySwitch.setHour(daySwitchAudit.getHour());
				daySwitch.setMinute(daySwitchAudit.getMinute());
				daySwitch.setAuditor(auditor);
				daySwitch.setAuditTime(new Date());
				daySwitch.setModifier(daySwitchAudit.getModifier());
				daySwitch.setModifyTime(daySwitchAudit.getModifyTime());
				daySwitch.setDeleted(daySwitchAudit.getOperateType().equals(OperateType.DELETE.name()));//如果当前审核通过的市删除操作，那么删除标识为true
				daySwitch.setCanOperate(true);
			}
		}else{//审核未通过
			daySwitchAudit.setAuditStatus(AuditStatus.Refuse);
			daySwitchAudit.setAuditText(auditText);
			daySwitch.setCanOperate(true);
		}
		daySwitch = daySwitchRepository.save(daySwitch);//审核新增时insert，审核修改和删除时update
		daySwitchAudit.setId(daySwitch.getId());//新增情况需要关联ID   无论任何时候主表和审核表都是有关系的所以此方法没问题
		daySwitchAuditRepository.save(daySwitchAudit);//更新操作
		return "1";
	}

}
