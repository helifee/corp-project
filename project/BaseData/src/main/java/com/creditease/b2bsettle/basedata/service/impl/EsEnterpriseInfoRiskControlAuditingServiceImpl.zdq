/**  
* @Title: EsEnterpriseInfoRiskControlAuditingServiceImpl.java
* @Package com.creditease.b2bsettle.basedata.service.impl
* @Description: TODO
* @author zhanghaiyang6 
* @date 2015年6月28日 下午11:11:07
* @version V1.0  
*/ 
package com.creditease.b2bsettle.basedata.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import com.creditease.b2bsettle.basedata.constant.AuditStatus;
import com.creditease.b2bsettle.basedata.constant.EsEnterpriseInfoConstants;
import com.creditease.b2bsettle.basedata.model.EsContactInfo;
import com.creditease.b2bsettle.basedata.model.EsContactInfoChktemp;
import com.creditease.b2bsettle.basedata.model.EsEnterpriseInfo;
import com.creditease.b2bsettle.basedata.model.EsEnterpriseInfoChktemp;
import com.creditease.b2bsettle.basedata.model.EsEproductInfo;
import com.creditease.b2bsettle.basedata.model.EsEproductInfoChktemp;
import com.creditease.b2bsettle.basedata.repository.EsContactInfoChktempRepository;
import com.creditease.b2bsettle.basedata.service.EsEnterpriseInfoRiskControlAuditingService;

/**
 * @ClassName: EsEnterpriseInfoRiskControlAuditingServiceImpl
 * @Description: 企业风控审核服务类
 * @author zhanghaiyang6
 * @date 2015年6月28日 下午11:11:07
 *
 */
@Service
public class EsEnterpriseInfoRiskControlAuditingServiceImpl extends EsEnterpriseInfoBaseService implements EsEnterpriseInfoRiskControlAuditingService {

	/**
	 * 
	* @Title: queryEsEnterprisePendingInfoPageListByCondition
	* @Description: 企业待处理信息查询--带分页查询
	* @param @param eId 企业编号
	* @param @param eName 企业名
	* @param @param joinDateFrom
    * @param @param joinDateTo
	* @param @param eDueDateFrom 到期时间开始
	* @param @param eDueDateTo 到期时间结束
	* @param @param pageable 分页状态
	* @param @return    
	* @return Page<EsEnterpriseInfoChktemp>   
	* @throws
	 */
	@Override
	public Page<EsEnterpriseInfoChktemp> queryEsEnterpriseRiskControlAuditInfoPageListByCondition(
			String eId, String eName, Date joinDateFrom, Date joinDateTo,
			Date eDueDateFrom, Date eDueDateTo, Pageable pageable) {
		Specification<EsEnterpriseInfoChktemp> spec = this.makeQueryMultConditionForEsEnterpriseInfoChktempPage(eId,eName,joinDateFrom,joinDateTo,eDueDateFrom,eDueDateTo,null);
		return esEnterpriseInfoChktempRepository.findAll(spec, pageable);
	}

	
	@Override
	public Specification<EsEnterpriseInfoChktemp> makeQueryMultConditionForEsEnterpriseInfoChktempPage(
			String eId, String eName, Date joinDateFrom, Date joinDateTo,
			Date eDueDateFrom, Date eDueDateTo, String eStatus) {
		   final String eIdF = eId;
		     final String eNameF = eName;
		     final Date joinDateFromF = joinDateFrom;
		     final Date joinDateToF = joinDateTo;
		     final Date eDueDateFromF = eDueDateFrom;
		     final Date eDueDateToF = eDueDateTo;
		     final String eStatusF = eStatus;
		     
		 	return new Specification<EsEnterpriseInfoChktemp>(){
		        
		          public Predicate toPredicate(Root<EsEnterpriseInfoChktemp> root,CriteriaQuery<?> query, CriteriaBuilder cb) {
		         	 
		              // 存放多个条件
		              List<Predicate> predicateList = new ArrayList<Predicate>();
		              
		              //企业编码支持模糊查询
		              if ((eIdF != null) && (!(eIdF.isEmpty()))) {
		             	 predicateList.add(cb.like(root.get("eId").as(String.class), "%"+eIdF+"%"));
		              }
		              
		              //企业名称支持模糊查询
		              if ((eNameF != null) && (!(eNameF.isEmpty()))) {
		             	 predicateList.add(cb.like(root.get("eName").as(String.class), "%"+eNameF+"%"));
		              }
		              
		              //企业类型
		              if(eStatusF!=null && (!(eStatusF.isEmpty()))){
		             	 predicateList.add(cb.equal(root.get("eStatus").as(String.class),eStatusF));
		              }
		              
		              //企业入网时间
			               if (joinDateFromF != null && joinDateToF != null) {
			                  predicateList.add(cb.between(root.get("joinDate").as(Date.class),joinDateFromF, joinDateToF));
			               }
			               
			                 //企业到期时间
			               if (eDueDateFromF != null && eDueDateToF != null) {
			                  predicateList.add(cb.between(root.get("eDueDate").as(Date.class),eDueDateFromF, eDueDateToF));
			               }
		              
		              
		              Predicate[] p = new Predicate[predicateList.size()];  
		              return cb.and(predicateList.toArray(p));  
		          }
		      };
	}
	
	
	
	/**
	 * 
	* @Title: getEsEnterpriseInfoChktempDetailByUid
	* @Description: 根据uID获取企业信息详情
	* @param @param uid
	* @param @return    
	* @return EsEnterpriseInfoChktemp   
	* @throws
	 */
	@Override
	public EsEnterpriseInfoChktemp getEsEnterpriseInfoChktempDetailByUid(String uid) {
		return esEnterpriseInfoChktempRepository.findByUid(uid);
	}

	/**
	 * 
	* @Title: getEsContactInfoChktempDetailByEId
	* @Description: 根据EID获取企业联系人信息详情
	* @param @param eId
	* @param @return    
	* @return List<EsContactInfoChktemp>   
	* @throws
	 */
	@Override
	public List<EsContactInfoChktemp> getEsContactInfoChktempDetailByEId(String eId) {
		return esContactInfoChktempRepository.findByEId(eId);
	}

	//实体表 List<EsEproductInfo>
	@Override
	public List<EsEproductInfo> getEsEproductInfoByEId(String eId) {
		return esContactInfoChktempRepository.findEsEproductInfoByEId(eId);
	}
	
	
	/**
	 * 
	* @Title: getEsEproductInfoChktempDetailByEId
	* @Description: 根据EID获取产品选择信息详情
	* @param @param eId
	* @param @return    
	* @return List<EsEproductInfoChktemp>   
	* @throws
	 */
	@Override
	public List<EsEproductInfoChktemp> getEsEproductInfoChktempDetailByEId(String eId) {
		return esEproductInfoChktempRepository.findByEId(eId);
	}

	
	//实体表 List<EsContactInfo>
		@Override
		public List<EsContactInfo> getEsContactInfoByEId(String eId) {
			return esContactInfoChktempRepository.findEsContactInfoByEId(eId);
		}
	
	/**
	 * 
	* @Title: submitEsEnterpriseRiskControlAuditForAddType
	* @Description: 提交审核---类型为新增的
	* @param @param esEnterpriseInfoChktemp
	* @param @param esContactInfoChktempList
	* @param @param esEproductInfoChktempList    
	* @return void   
	* @throws
	 */
	@Override
	public void submitEsEnterpriseRiskControlAuditForAddType(EsEnterpriseInfoChktemp esEnterpriseInfoChktemp,List<EsContactInfoChktemp> esContactInfoChktempList,List<EsEproductInfoChktemp> esEproductInfoChktempList) {
		String eId = esEnterpriseInfoChktemp.getEId();
		//a）根据es_enterprise_info_chktemp.e_id update es_enterprise_info_chktemp表对应记录
		updateEsEnterpriseInfoChktemp(esEnterpriseInfoChktemp);
		
		//b）将es_enterprise_info_chktemp表除uid和ope_type外的所有字段insert es_enterprise_info表，同时es_enterprise_info. in_update取值“2”
		EsEnterpriseInfo insertEsEnterpriseInfo = new EsEnterpriseInfo();
		
		// 企业编号 eid
		insertEsEnterpriseInfo.setEId(esEnterpriseInfoChktemp.getEId());
		
		// 企业名称 ename
		insertEsEnterpriseInfo.setEName(esEnterpriseInfoChktemp.getEName());
		//企业分类 ECategory
		insertEsEnterpriseInfo.setECategory(esEnterpriseInfoChktemp.getECategory());
		
		//企业简称 EShortName
		insertEsEnterpriseInfo.setEShortName(esEnterpriseInfoChktemp.getEShortname());
		
		//营业执照号码 ELicenseId
		insertEsEnterpriseInfo.setELicenseId(esEnterpriseInfoChktemp.getELicenseId());
		
		//orgInstdId 组织机构代码
		insertEsEnterpriseInfo.setOrgInstdId(esEnterpriseInfoChktemp.getOrgInstdId());
		
		//taxId 税务登记号
		insertEsEnterpriseInfo.setTaxId(esEnterpriseInfoChktemp.getTaxId());
		
		// 开户许可证核准号 arrpId
		insertEsEnterpriseInfo.setArrpId(esEnterpriseInfoChktemp.getArrpId());
		
		//eDueDate 企业到期时间
		insertEsEnterpriseInfo.setEDueDate(esEnterpriseInfoChktemp.getEDueDate());
		
		//icpId ICP证编号
		insertEsEnterpriseInfo.setIcpId(esEnterpriseInfoChktemp.getIcpId());
		
		// 备注 remark
		insertEsEnterpriseInfo.setRemark(esEnterpriseInfoChktemp.getRemark());
		
		//eType 企业类型
		insertEsEnterpriseInfo.setEType(esEnterpriseInfoChktemp.getEType());
		
		//corpOwnerNm 公司法人代表名
		insertEsEnterpriseInfo.setCorpOwnerNm(esEnterpriseInfoChktemp.getCorpOwnerNm());
		
		//ownerCertTp 法人证件类型
		insertEsEnterpriseInfo.setOwnerCertTp(esEnterpriseInfoChktemp.getOwnerCertTp());
		
		// ownerCertId 法人证件号
		insertEsEnterpriseInfo.setOwnerCertId(esEnterpriseInfoChktemp.getOwnerCertId());
		
		// merchantAddress 地址
		insertEsEnterpriseInfo.setMerchantAddress(esEnterpriseInfoChktemp.getMerchantAddress());
		
		// regCapital 注册金额
		insertEsEnterpriseInfo.setRegCapital(esEnterpriseInfoChktemp.getRegCapital());
		
		//corpEstDate 成立日
		insertEsEnterpriseInfo.setCorpEstDate(esEnterpriseInfoChktemp.getCorpEstDate());
		
		//营业起始日期 bizBeginDate
		insertEsEnterpriseInfo.setBizBeginDate(esEnterpriseInfoChktemp.getBizBeginDate());
		
		// 营业终止日期 bizEndDate
		insertEsEnterpriseInfo.setBizEndDate(esEnterpriseInfoChktemp.getBizEndDate());
		
		//组成形式 estType
		insertEsEnterpriseInfo.setEstType(esEnterpriseInfoChktemp.getEstType());
		
		//营业地址-省 province
		insertEsEnterpriseInfo.setProvince(esEnterpriseInfoChktemp.getProvince());
		
		// 营业地址-市 city
		insertEsEnterpriseInfo.setCity(esEnterpriseInfoChktemp.getCity());
		
		//具体地址 detailAddr
		insertEsEnterpriseInfo.setDetailAddr(esEnterpriseInfoChktemp.getDetailAddr());
		
		// 营业地段 bizCommodity
		insertEsEnterpriseInfo.setBizCommodity(esEnterpriseInfoChktemp.getBizCommodity());
		
		// 行业大类 industryNo
		insertEsEnterpriseInfo.setIndustryNo(esEnterpriseInfoChktemp.getIndustryNo());
		
		//行业细分 subIndustryNo
		insertEsEnterpriseInfo.setSubIndustryNo(esEnterpriseInfoChktemp.getSubIndustryNo());
		
		//网站地址 webAddr
		insertEsEnterpriseInfo.setWebAddr(esEnterpriseInfoChktemp.getWebAddr());
		
		//企业电话 telNo
		insertEsEnterpriseInfo.setTelNo(esEnterpriseInfoChktemp.getTelNo());
		
		//信用等级 creditLvl
		insertEsEnterpriseInfo.setCreditLvl(esEnterpriseInfoChktemp.getCreditLvl());
		
		//节假日营业 holidayBiz
		insertEsEnterpriseInfo.setHolidayBiz(esEnterpriseInfoChktemp.getHolidayBiz());
		
		//员工人数 employeeNo
		insertEsEnterpriseInfo.setEmployeeNo(esEnterpriseInfoChktemp.getEmployeeNo());
		
		/// 企业行业描述 industryDesp
		insertEsEnterpriseInfo.setIndustryDesp(esEnterpriseInfoChktemp.getIndustryDesp());
		
		//主营业范围 bizScope
		insertEsEnterpriseInfo.setBizScope(esEnterpriseInfoChktemp.getBizScope());
		
		//副营业范围 subBizScope
		insertEsEnterpriseInfo.setSubBizScope(esEnterpriseInfoChktemp.getSubBizScope());
		
		//企业入网时间 joinDate
		insertEsEnterpriseInfo.setJoinDate(esEnterpriseInfoChktemp.getJoinDate());
		
		//// 创建人 creator
		insertEsEnterpriseInfo.setCreator(esEnterpriseInfoChktemp.getCreator());
		
		//创建时间 createTime
		insertEsEnterpriseInfo.setCreateTime(esEnterpriseInfoChktemp.getCreateTime());
		
		//修改时间 modifyTime
		insertEsEnterpriseInfo.setModifyTime(esEnterpriseInfoChktemp.getModifyTime());
		
		//修改者 updater
		insertEsEnterpriseInfo.setUpdater(esEnterpriseInfoChktemp.getUpdater());
		
		//企业状态 eStatus
		insertEsEnterpriseInfo.setEStatus(esEnterpriseInfoChktemp.getEStatus());
		
		//审核状态 chkStatus
		insertEsEnterpriseInfo.setChkStatus(esEnterpriseInfoChktemp.getChkStatus());
		
		//运营审核时间 opeChkTime
		insertEsEnterpriseInfo.setOpeChkTime(esEnterpriseInfoChktemp.getOpeChkTime());
		
		// 运营审核人 opeChecker
		insertEsEnterpriseInfo.setOpeChecker(esEnterpriseInfoChktemp.getOpeChecker());
		
		//运营审核意见 opeChkComment
		insertEsEnterpriseInfo.setOpeChkComment(esEnterpriseInfoChktemp.getOpeChkComment());
		
		//风控审核时间 riskChkTime
		insertEsEnterpriseInfo.setRiskChkTime(esEnterpriseInfoChktemp.getRiskChkTime());
		
		//风控审核人 riskChecker
		insertEsEnterpriseInfo.setRiskChecker(esEnterpriseInfoChktemp.getRiskChecker());
		
		//获取审核状态
		insertEsEnterpriseInfo.setChkStatus(esEnterpriseInfoChktemp.getChkStatus());
		
		esEnterpriseInfoRepository.save(insertEsEnterpriseInfo);
		
		//c）根据es_contact_info_chktemp.e_id=es_enterprise_info_chktemp.e_id取es_contact_info_chktemp所有记录，
		//将对应记录insertes_contact_info表（uid除外）
		List<EsContactInfoChktemp> queryEsContactInfoChktempList = getEsContactInfoChktempDetailByEId(eId);
		
		if(null != queryEsContactInfoChktempList && queryEsContactInfoChktempList.size()>0){
			
			List<EsContactInfo> saveEsContactInfoList = new ArrayList<EsContactInfo>();
			
			for(EsContactInfoChktemp esContactInfoChktemp : queryEsContactInfoChktempList){
				EsContactInfo saveEsContactInfo = new EsContactInfo();
				
				//企业编号 eid
				saveEsContactInfo.setEId(esContactInfoChktemp.getEId());
				
				//联系人类型 contactorTp
				saveEsContactInfo.setContactorTp(esContactInfoChktemp.getContactorTp());
				
				// 联系人姓名 contactorNm
				saveEsContactInfo.setContactorNm(esContactInfoChktemp.getContactorNm());
				
				//联系人手机 contactorCell
				saveEsContactInfo.setContactorCell(esContactInfoChktemp.getContactorCell());
				
				//联系人座机contactorTel
				saveEsContactInfo.setContactorTel(esContactInfoChktemp.getContactorTel());
				
				// 联系人传真contactorFax
				saveEsContactInfo.setContactorFax(esContactInfoChktemp.getContactorFax());
				
				//联系人邮箱contactorMail
				saveEsContactInfo.setContactorMail(esContactInfoChktemp.getContactorMail());
				
				//联系人序号 contactorOrder
				saveEsContactInfo.setContactorOrder(esContactInfoChktemp.getContactorOrder());
				
				saveEsContactInfoList.add(saveEsContactInfo);
			}
			esContactInfoRepository.save(saveEsContactInfoList);
		}
		
		//d）根据es_eproduct_info_chktemp.e_id=es_enterprise_info_chktemp.e_id
		//取es_eproduct_info_chktemp所有记录，将对应记录insertes_eproduct_info表（uid除外）
		List<EsEproductInfoChktemp> queryEsEproductInfoChktempList = getEsEproductInfoChktempDetailByEId(eId);
		 
		if(null!=queryEsEproductInfoChktempList&&queryEsEproductInfoChktempList.size()>0){
			
			List<EsEproductInfo> saveEsEproductInfoList = new ArrayList<EsEproductInfo>();
			
			for(EsEproductInfoChktemp esEproductInfoChktemp : queryEsEproductInfoChktempList){
				EsEproductInfo saveEsEproductInfo = new EsEproductInfo();
				
				//企业EID 
				saveEsEproductInfo.setEId(esEproductInfoChktemp.getEId());
				
				// 支持业务类型 productTp
				saveEsEproductInfo.setProductTp(esEproductInfoChktemp.getProductTp());
				saveEsEproductInfoList.add(saveEsEproductInfo);
			}
			esEproductInfoRepository.save(saveEsEproductInfoList);
		}
		
		//e）根据es_enterprise_info_chktemp.e_id删除es_enterprise_info_chktemp表对应记录
		esEnterpriseInfoChktempRepository.delete(esEnterpriseInfoChktemp);
		
		//f）根据es_contact_info_chktemp.e_id=es_enterprise_info_chktemp.e_id删除es_contact_info_chktemp所有记录
		esContactInfoChktempRepository.delete(queryEsContactInfoChktempList);
		
		//g）根据es_eproduct_info_chktemp.e_id=es_enterprise_info_chktemp.e_id删除es_eproduct_info_chktemp所有记录
		esEproductInfoChktempRepository.delete(queryEsEproductInfoChktempList);
	}

	
	/**
	 * 
	* @Title: submitEsEnterpriseRiskControlAuditForUpdatedType
	* @Description: 提交审核---类型为更新的
	* @param @param esEnterpriseInfoChktemp
	* @param @param esContactInfoChktempList
	* @param @param esEproductInfoChktempList    
	* @return void   
	* @throws
	 */
	@Override
	public void submitEsEnterpriseRiskControlAuditForUpdateType(EsEnterpriseInfoChktemp esEnterpriseInfoChktemp,List<EsContactInfoChktemp> esContactInfoChktempList,List<EsEproductInfoChktemp> esEproductInfoChktempList) {

		String eId = esEnterpriseInfoChktemp.getEId();
		
		List<EsContactInfo> queryEsContactInfoList = getEsContactInfoByEId(eId);
		List<EsEproductInfo> queryEsEproductInfoList = getEsEproductInfoByEId(eId);
		 
		//1.2 a:根据es_enterprise_info_chktemp.e_id update es_enterprise_info_chktemp表对应记录
		updateEsEnterpriseInfoChktemp(esEnterpriseInfoChktemp);
		
		//1.2 b:根据es_enterprise_info.e_id=es_enterprise_info_chktemp.e_id
		//将es_enterprise_info_chktemp表除uid和ope_type外的所有字段update到 es_enterprise_info表，
		//同时update es_enterprise_info. in_update=“2”
		//updateEsEnterpriseInfoChktemp(EsEnterpriseInfo);
		
		
		
		
		//1.2 c:根据es_contact_info.e_id=es_enterprise_info_chktemp.e_id
		//删除es_contact_info表所有记录
		esContactInfoRepository.delete(queryEsContactInfoList);
		
		//根据es_contact_info_chktemp.e_id = es_enterprise_info_chktemp.e_id
		//取es_contact_info_chktemp所有记录，将对应记录insert es_contact_info表
		List<EsContactInfoChktemp> queryEsContactInfoChktempList = getEsContactInfoChktempDetailByEId(eId);
		if(null != queryEsContactInfoChktempList && queryEsContactInfoChktempList.size()>0){
			
			List<EsContactInfo> saveEsContactInfoList = new ArrayList<EsContactInfo>();
			
			for(EsContactInfoChktemp esContactInfoChktemp : queryEsContactInfoChktempList){
				EsContactInfo saveEsContactInfo = new EsContactInfo();
				
				//企业编号 eid
				saveEsContactInfo.setEId(esContactInfoChktemp.getEId());
				
				//联系人类型 contactorTp
				saveEsContactInfo.setContactorTp(esContactInfoChktemp.getContactorTp());
				
				// 联系人姓名 contactorNm
				saveEsContactInfo.setContactorNm(esContactInfoChktemp.getContactorNm());
				
				//联系人手机 contactorCell
				saveEsContactInfo.setContactorCell(esContactInfoChktemp.getContactorCell());
				
				//联系人座机contactorTel
				saveEsContactInfo.setContactorTel(esContactInfoChktemp.getContactorTel());
				
				// 联系人传真contactorFax
				saveEsContactInfo.setContactorFax(esContactInfoChktemp.getContactorFax());
				
				//联系人邮箱contactorMail
				saveEsContactInfo.setContactorMail(esContactInfoChktemp.getContactorMail());
				
				//联系人序号 contactorOrder
				saveEsContactInfo.setContactorOrder(esContactInfoChktemp.getContactorOrder());
				
				saveEsContactInfoList.add(saveEsContactInfo);
			}
			esContactInfoRepository.save(saveEsContactInfoList);
		}
		
		
		//1.2 d:根据es_eproduct_info.e_id=es_enterprise_info_chktemp.e_id删除es_eproduct_info表所有记录；
		esEproductInfoRepository.delete(queryEsEproductInfoList);
		
		List<EsEproductInfoChktemp> queryEsEproductInfoChktempList = getEsEproductInfoChktempDetailByEId(eId);
		//根据es_eproduct_info_chktemp.e_id=es_enterprise_info_chktemp.e_id
		
		//取es_eproduct_info_chktemp所有记录，将对应记录insert es_eproduct_info表（uid除外）
		 if(null!=queryEsEproductInfoChktempList  &&  queryEsEproductInfoChktempList.size()>0){
			
			List<EsEproductInfo> saveEsEproductInfoList = new ArrayList<EsEproductInfo>();
			
			for(EsEproductInfoChktemp esEproductInfoChktemp : queryEsEproductInfoChktempList){
				EsEproductInfo saveEsEproductInfo = new EsEproductInfo();
				
				//企业EID 
				saveEsEproductInfo.setEId(esEproductInfoChktemp.getEId());
				
				// 支持业务类型 productTp
				saveEsEproductInfo.setProductTp(esEproductInfoChktemp.getProductTp());
				saveEsEproductInfoList.add(saveEsEproductInfo);
			}
			esEproductInfoRepository.save(saveEsEproductInfoList);
		//1.2 e）根据es_enterprise_info_chktemp.e_id删除es_enterprise_info_chktemp表对应记录
			esEnterpriseInfoChktempRepository.delete(esEnterpriseInfoChktemp);
			
		//1.2 f）根据es_contact_info_chktemp.e_id=es_enterprise_info_chktemp.e_id删除es_contact_info_chktemp所有记录
			esContactInfoChktempRepository.delete(queryEsContactInfoChktempList);
			
		//1.2 g）根据es_eproduct_info_chktemp.e_id=es_enterprise_info_chktemp.e_id删除es_eproduct_info_chktemp所有记录
			esEproductInfoChktempRepository.delete(queryEsEproductInfoChktempList);
		}
		
	}

//风控审核  拒绝  通过
	@Override
	public boolean verify(String eid, String verifyStatus, String comment) {
		EsEnterpriseInfoChktemp infoChktemp = esEnterpriseInfoChktempRepository.findByEId(eid);

		//审核通过
		if (AuditStatus.Through.value().equals(verifyStatus)) {
			// 设置企业状态为 正常
			infoChktemp.setEStatus(EsEnterpriseInfoConstants.E_STATUS_NORMAL);

			// 设置审核状态为 风控审核通过
			infoChktemp.setChkStatus(EsEnterpriseInfoConstants.CHK_STATUS_4);
		}
		
		return false;
	}
}
