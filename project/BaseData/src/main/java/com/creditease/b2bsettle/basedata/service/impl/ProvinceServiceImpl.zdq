package com.creditease.b2bsettle.basedata.service.impl;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.creditease.b2bsettle.basedata.constant.AuditStatus;
import com.creditease.b2bsettle.basedata.constant.CommonConstants;
import com.creditease.b2bsettle.basedata.constant.OperateType;
import com.creditease.b2bsettle.basedata.model.PayType;
import com.creditease.b2bsettle.basedata.model.Province;
import com.creditease.b2bsettle.basedata.model.ProvinceAudit;
import com.creditease.b2bsettle.basedata.repository.ProvinceAuditRepository;
import com.creditease.b2bsettle.basedata.repository.ProvinceRepository;
//import com.creditease.b2bsettle.basedata.repository.ProvinceAuditRepository;
import com.creditease.b2bsettle.basedata.service.ProvinceService;

/**
 * 省级地区管理
 * 
 * @author shihl
 *
 */
@Service
public class ProvinceServiceImpl implements ProvinceService {
	@Autowired
	private ProvinceAuditRepository provinceAuditRepository;
	@Autowired
	private ProvinceRepository provinceRepository;
	
	
	/**
	 * 
	 * 前台查询
	 * 
	 * */
	
	@Override
	public Page<Province> findAll(Pageable pageable) {
		Page<Province> page = provinceRepository.findAll(pageable);
		return page;
	}
	

	/**
	 * 新增支付类型（存审核表）
	 * */ 
	@Override
	public long newProvinceService(ProvinceAudit provinceAudit) {
		ProvinceAudit save = provinceAuditRepository.save(provinceAudit);
		return save.getCid();
	}

	/**
	 * 修改
	 * 适用范围：
	 * 已启用、未启用页面的新增、修改操作
	 * 当如参cid 为0时方法认为是已用页面传来的请求
	 * */
	@Override
	public void updateProvince(long cid, long id, String provinceName, String provinceCode, String modifier) {
		//标识已启用页面不能修改
		Province provincemd = provinceRepository.findOne(id);
		provincemd.setCanOperate(false);
		provinceRepository.save(provincemd);
		
		//在审核表新建或更新信息
		ProvinceAudit provinceAudit = null;
		String OperateSummary = "";
		if(cid == 0){//cid为0时认为时已用页面发来的请求，需要在审核表里新增
			provinceAudit = new ProvinceAudit();
			provinceAudit.setId(id);
			OperateSummary = CommonConstants.updateUsed;
		}else{
			provinceAudit = provinceAuditRepository.findOne(cid);
			OperateSummary = CommonConstants.updateNotUsed;
			provinceAudit.setAuditText("");//清空上次的审核信息
		}
		provinceAudit.setProvinceCode(provinceCode);
		provinceAudit.setProvinceName(provinceName);
		provinceAudit.setAuditStatus(AuditStatus.Audit);
		provinceAudit.setOperateSummary(OperateSummary);
		provinceAudit.setOperateType(OperateType.UPDATE);
		provinceAudit.setCreator(provincemd.getCreator());
		provinceAudit.setCreatedTime(provincemd.getCreatedTime());
		provinceAudit.setModifier(modifier);
		provinceAudit.setModifyTime(new Date());
		provinceAuditRepository.save(provinceAudit);
	}

	
	/**
	 * 删除
	 * 适用范围：
	 * 已启用、未启用页面的删除操作
	 * 当如参cid 为null时方法认为是已用页面传来的请求
	 * */
	public void deleteProvince(long cid, long id, boolean isDelte, String modifier) {
		//标识已启用页面不能修改
		Province provincemd = provinceRepository.findOne(id);
		provincemd.setCanOperate(false);
		provinceRepository.save(provincemd);
		
		//在审核表新建或更新信息
		ProvinceAudit provinceAudit = null;
		String operateSummary = "";
		if(cid == 0){//cid为0时认为时已用页面发来的请求，需要在审核表里新增
			provinceAudit = new ProvinceAudit();
			provinceAudit.setId(id);
			operateSummary = CommonConstants.deleteUsed;
		}else{
			provinceAudit = provinceAuditRepository.findOne(cid);
			operateSummary = CommonConstants.deleteNotUsed;
			provinceAudit.setAuditText("");//清空上次的审核信息
		}
		provinceAudit.setProvinceName(provincemd.getProvinceName());
		provinceAudit.setProvinceCode(provincemd.getProvinceCode());
		provinceAudit.setDeleted(isDelte);
		provinceAudit.setAuditStatus(AuditStatus.Audit);
		provinceAudit.setOperateSummary(operateSummary);
		provinceAudit.setOperateType(OperateType.DELETE);
		provinceAudit.setCreator(provincemd.getCreator());
		provinceAudit.setCreatedTime(provincemd.getCreatedTime());
		provinceAudit.setModifier(modifier);
		provinceAudit.setModifyTime(new Date());
		provinceAuditRepository.save(provinceAudit);
	}
	
	
	
	/**
	 * 
	 * 审核操作 
	 * 适用范围：
	 * 适用来自 已启用、未启用页面的新增、修改和删除操作的审核
	 * */
	@Override
	public String auditProvince(long cid, String auditText,AuditStatus auditStatus, String auditor ) {
		ProvinceAudit provinceAudit =  provinceAuditRepository.findOne(cid);
		Province province = provinceRepository.findOne(provinceAudit.getId());
		//审核通过
		if(auditStatus.equals(AuditStatus.Through)){
			//更改审核表状态
			provinceAudit.setAuditStatus(AuditStatus.Through);
			provinceAudit.setAuditText(auditText);//审核操作不是修改，所以不更新modifer字段
			
			//复制审核表信息更新主表
			if(province == null){//审核新增、因为查不出数据、此时需要新建主表
				province = new Province();
				province.setProvinceCode(provinceAudit.getProvinceCode());
				province.setProvinceName(provinceAudit.getProvinceName());
				province.setCreator(provinceAudit.getCreator());
				province.setCreatedTime(provinceAudit.getCreatedTime());
				province.setModifier(provinceAudit.getModifier());
				province.setModifyTime(provinceAudit.getModifyTime());
				province.setAuditor(auditor);
				province.setAuditTime(new Date());
				province.setDeleted(false);
				province.setCanOperate(true);
			}else{//审核修改或删除、此时需要更新主表
				province.setProvinceCode(provinceAudit.getProvinceCode());
				province.setProvinceName(provinceAudit.getProvinceName());
				province.setAuditor(auditor);
				province.setAuditTime(new Date());
				province.setModifier(provinceAudit.getModifier());
				province.setModifyTime(provinceAudit.getModifyTime());
				province.setDeleted(provinceAudit.getOperateType().equals(OperateType.DELETE.name()));//如果当前审核通过的市删除操作，那么删除标识为true
				province.setCanOperate(true);
			}
		}else{//审核未通过
			provinceAudit.setAuditStatus(AuditStatus.Refuse);
			provinceAudit.setAuditText(auditText);
			province.setCanOperate(true);
		}
		province = provinceRepository.save(province);//审核新增时insert，审核修改和删除时update
		provinceAudit.setId(province.getId());//新增情况需要关联ID   无论任何时候主表和审核表都是有关系的所以此方法没问题
		provinceAuditRepository.save(provinceAudit);//更新操作
		return "1";
	}


}
