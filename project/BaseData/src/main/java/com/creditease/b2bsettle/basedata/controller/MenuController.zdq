package com.creditease.b2bsettle.basedata.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.CollectionUtils;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.creditease.b2bsettle.basedata.constant.CommonConstants;
import com.creditease.b2bsettle.basedata.controller.param.MenuTree;
import com.creditease.b2bsettle.basedata.model.Function;
import com.creditease.b2bsettle.basedata.model.Menu;
import com.creditease.b2bsettle.basedata.service.MenuService;

@Controller
@RequestMapping(value = "/menu")
public class MenuController {
	
	private static final Logger logger = LoggerFactory
			.getLogger(MenuController.class);
	
	@Autowired
	private MenuService menuService;
	
	@RequestMapping(value = "/tree", method = RequestMethod.POST)
	@ResponseBody
	public List<MenuTree> menuTreegrid(HttpServletResponse response) {
		String sysId = "portal";
		List<Menu> allValidMenus = menuService.findAllValidMenus(sysId);
		List<MenuTree> tree = convert(allValidMenus);
		
		return tree;
	}

	private List<MenuTree> convert(List<Menu> allValidMenus) {
		if (CollectionUtils.isEmpty(allValidMenus)) {
			return null;
		}

		Map<String, MenuTree> map = new HashMap<String, MenuTree>();
		MenuTree root = null;
		for(Menu menu : allValidMenus) {
			String parentId = menu.getParent();
			MenuTree node = new MenuTree(menu.getId(), menu.getName(), menu.getUrl());
			if(CommonConstants.ROOT_VAL.equals(parentId)) {
				root = node;
			} else {
				MenuTree parent = map.get(parentId);
				if(parent == null) {
					logger.error("not found the parent node " + parentId);
					return null;
				}
				if(parent.getChildren() == null) {
					List<MenuTree> children = new ArrayList<MenuTree>();
					parent.setChildren(children);
				}
				parent.getChildren().add(node);
			}
			map.put(menu.getCode(), node);
		}
		List<MenuTree> list = new ArrayList<MenuTree>();
		list.add(root);
		return list;
	}

	@RequestMapping(value = "/add", method = RequestMethod.POST)
	public String add(@ModelAttribute("menu") Menu menu){
		System.out.println(menu.getName());
		System.out.println(menu.getUrl());
		System.out.println(menu.getFunctionCode());
		System.out.println(menu.getLocation());
		return null;
	}

	@RequestMapping(value = "/delete", method = RequestMethod.POST)
	public void delete() {
		
	}

	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public void update() {

	}

	@RequestMapping(value = "/operations", method = RequestMethod.POST)
	@ResponseBody
	public List<Function> operations() {
		return null;
	}
}
