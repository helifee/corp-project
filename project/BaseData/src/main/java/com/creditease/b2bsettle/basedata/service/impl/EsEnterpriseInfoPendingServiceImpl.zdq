/**  
* @Title: EsEnterpriseInfoPendingServiceImpl.java
* @Package com.creditease.b2bsettle.basedata.service.impl
* @Description: TODO
* @author zhanghaiyang6 
* @date 2015年6月17日 下午3:45:34
* @version V1.0  
*/ 
package com.creditease.b2bsettle.basedata.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;

import com.creditease.b2bsettle.basedata.constant.EsEnterpriseInfoConstants;
import com.creditease.b2bsettle.basedata.model.EsContactInfoChktemp;
import com.creditease.b2bsettle.basedata.model.EsEnterpriseInfoChktemp;
import com.creditease.b2bsettle.basedata.model.EsEproductInfoChktemp;
import com.creditease.b2bsettle.basedata.service.EsEnterpriseInfoPendingService;

/**
 * @ClassName: EsEnterpriseInfoPendingServiceImpl
 * @Description: 企业信息待处理信息服务类
 * @author zhanghaiyang6
 * @date 2015年6月17日 下午3:45:34
 *
 */
@Service
public class EsEnterpriseInfoPendingServiceImpl extends EsEnterpriseInfoBaseService implements EsEnterpriseInfoPendingService {

	
	
	/**
	 * 
	* @Title: queryEsEnterprisePendingInfoPageListByCondition
	* @Description: 企业待处理信息查询--带分页查询
	* @param @param eId 企业编号
	* @param @param eName 企业名
	* @param @param eStatus 企业状态
	* @param @param joinDateFrom
    * @param @param joinDateTo
	* @param @param eDueDateFrom 到期时间开始
	* @param @param eDueDateTo 到期时间结束
	* @param @param pageable 分页状态
	* @param @return    
	* @return Page<EsEnterpriseInfoChktemp>   
	* @throws
	 */
	@Override
	public Page<EsEnterpriseInfoChktemp> queryEsEnterprisePendingInfoPageListByCondition(String eId, String eName,Date joinDateFrom,Date joinDateTo, String eStatus, Date eDueDateFrom,Date eDueDateTo,Pageable pageable) {
		Specification<EsEnterpriseInfoChktemp> spec = this.makeQueryMultConditionForEsEnterpriseInfoChktempPage(eId,eName,joinDateFrom,joinDateTo,eDueDateFrom,eDueDateTo,eStatus);
		return esEnterpriseInfoChktempRepository.findAll(spec, pageable);
	}
	
  /**
  * 
 * @Title: makeQueryMultConditionForEsEnterpriseInfoChktempPage
 * @Description: 组装若干个查询条件---企业风控和运营信息查询时使用
 * @param @param eId
 * @param @param eName
 * @param @param joinDateFrom
 * @param @param joinDateTo
 * @param @param eDueDateFrom
 * @param @param eDueDateTo
 * @param @param eStatus
 * @param @return    
 * @return Specification<EsEnterpriseInfoChktemp>   
 * @throws
  */
 public Specification<EsEnterpriseInfoChktemp> makeQueryMultConditionForEsEnterpriseInfoChktempPage(String eId, String eName, Date joinDateFrom, Date joinDateTo,Date eDueDateFrom, Date eDueDateTo,String eStatus){
 	
     final String eIdF = eId;
     final String eNameF = eName;
     final Date joinDateFromF = joinDateFrom;
     final Date joinDateToF = joinDateTo;
     final Date eDueDateFromF = eDueDateFrom;
     final Date eDueDateToF = eDueDateTo;
     final String eStatusF = eStatus;
     
 	return new Specification<EsEnterpriseInfoChktemp>(){
        
          public Predicate toPredicate(Root<EsEnterpriseInfoChktemp> root,CriteriaQuery<?> query, CriteriaBuilder cb) {
         	 
              // 存放多个条件
              List<Predicate> predicateList = new ArrayList<Predicate>();
              
              //企业编码支持模糊查询
              if ((eIdF != null) && (!(eIdF.isEmpty()))) {
             	 predicateList.add(cb.like(root.get("eId").as(String.class), "%"+eIdF+"%"));
              }
              
              //企业名称支持模糊查询
              if ((eNameF != null) && (!(eNameF.isEmpty()))) {
             	 predicateList.add(cb.like(root.get("eName").as(String.class), "%"+eNameF+"%"));
              }
              
              //企业类型
              if(eStatusF!=null && (!(eStatusF.isEmpty()))){
             	 predicateList.add(cb.equal(root.get("eStatus").as(String.class),eStatusF));
              }
              
              //企业入网时间
	               if (joinDateFromF != null && joinDateToF != null) {
	                  predicateList.add(cb.between(root.get("joinDate").as(Date.class),joinDateFromF, joinDateToF));
	               }
	               
	                 //企业到期时间
	               if (eDueDateFromF != null && eDueDateToF != null) {
	                  predicateList.add(cb.between(root.get("eDueDate").as(Date.class),eDueDateFromF, eDueDateToF));
	               }
              
              
              Predicate[] p = new Predicate[predicateList.size()];  
              return cb.and(predicateList.toArray(p));  
          }
      };
 }

	/**
	 * 
	* @Title: getEsEnterpriseInfoChktempDetailByUid
	* @Description: 根据uID获取企业信息详情
	* @param @param uid
	* @param @return    
	* @return EsEnterpriseInfoChktemp   
	* @throws
	 */
	@Override
	public EsEnterpriseInfoChktemp getEsEnterpriseInfoChktempDetailByUid(String uid) {
		return esEnterpriseInfoChktempRepository.findByUid(uid);
	}

	/**
	 * 
	* @Title: getEsContactInfoChktempDetailByEId
	* @Description: 根据EID获取企业联系人信息详情
	* @param @param eId
	* @param @return    
	* @return List<EsContactInfoChktemp>   
	* @throws
	 */
	@Override
	public List<EsContactInfoChktemp> getEsContactInfoChktempDetailByEId(String eId) {
		return esContactInfoChktempRepository.findByEId(eId);
	}

	/**
	 * 
	* @Title: getEsEproductInfoChktempDetailByEId
	* @Description: 根据EID获取产品选择信息详情
	* @param @param eId
	* @param @return    
	* @return List<EsEproductInfoChktemp>   
	* @throws
	 */
	@Override
	public List<EsEproductInfoChktemp> getEsEproductInfoChktempDetailByEId(String eId) {
		return esEproductInfoChktempRepository.findByEId(eId);
	}

	/**
	 * 
	* @Title: updateEsEnterprisePendingInfoAll
	* @Description: 修改待处理企业信息，包括Tab1&Tab2&Tab3&Tab4的内容
	* @param @param esEnterpriseInfoChktemp 企业基本信息
	* @param @param esContactInfoChktempList 企业联系人信息列表（可能有多条联系人信息）
	* @param @param esEproductInfoChktempList 企业产品类型信息列表（可能有多条产品信息）    
	* @return void   
	* @throws
	 */
	@Override
	public void updateEsEnterprisePendingInfoAll(EsEnterpriseInfoChktemp esEnterpriseInfoChktemp,List<EsContactInfoChktemp> esContactInfoChktempList,List<EsEproductInfoChktemp> esEproductInfoChktempList) {
		
		String currentUser = "";
		String eId = esEnterpriseInfoChktemp.getEId();
		
		esEnterpriseInfoChktemp.setEStatus(EsEnterpriseInfoConstants.E_STATUS_HAS_SAVED);//已保存
		esEnterpriseInfoChktemp.setUpdater(currentUser);
		esEnterpriseInfoChktemp.setModifyTime(new Date());
		updateEsEnterpriseInfoChktemp(esEnterpriseInfoChktemp);
		
		updateEsContactInfoChktemp(eId,esContactInfoChktempList);
		
		updateEsEproductInfoChktemp(eId,esEproductInfoChktempList);
	}

	/**
	 * 
	* @Title: submitEsEnterprisePendingAudit
	* @Description: 提交审核
	* @param @param esEnterpriseInfoChktemp
	* @param @param esContactInfoChktempList
	* @param @param esEproductInfoChktempList    
	* @return void   
	* @throws
	 */
	@Override
	public void submitEsEnterprisePendingAudit(EsEnterpriseInfoChktemp esEnterpriseInfoChktemp,List<EsContactInfoChktemp> esContactInfoChktempList,List<EsEproductInfoChktemp> esEproductInfoChktempList) {
		
		String currentUser = "";
		
		String eId = esEnterpriseInfoChktemp.getEId();
		
		esEnterpriseInfoChktemp.setUpdater(currentUser);
		esEnterpriseInfoChktemp.setModifyTime(new Date());
		esEnterpriseInfoChktemp.setEStatus(EsEnterpriseInfoConstants.E_STATUS_HAS_SUBMIT);//已提交
		esEnterpriseInfoChktemp.setChkStatus(EsEnterpriseInfoConstants.CHK_STATUS_1);//待运营审核
		esEnterpriseInfoChktemp.setOpeChecker("");
		esEnterpriseInfoChktemp.setOpeChkComment("");
		esEnterpriseInfoChktemp.setOpeChkTime(null);
		esEnterpriseInfoChktemp.setRiskChecker("");
		esEnterpriseInfoChktemp.setRiskChkComment("");
		esEnterpriseInfoChktemp.setRiskChkTime(null);
		updateEsEnterpriseInfoChktemp(esEnterpriseInfoChktemp);
		
		updateEsContactInfoChktemp(eId,esContactInfoChktempList);
		
		updateEsEproductInfoChktemp(eId,esEproductInfoChktempList);
	}

	/**
     * 
    * @Title: submitHasSavedPendingInfo
    * @Description: 对应企业状态为“已保存”（ES_ENTERPRISE_INFO_CHKTEMP. E_STATUS=1）的记录有提交按钮
    * @param @param esEnterpriseInfoChktemp    
    * @return void   
    * @throws
     */
	@Override
	public void submitHasSavedPendingInfo(EsEnterpriseInfoChktemp esEnterpriseInfoChktemp) {
		String currentUser = "";
		esEnterpriseInfoChktemp.setUpdater(currentUser);
		esEnterpriseInfoChktemp.setModifyTime(new Date());
		esEnterpriseInfoChktemp.setEStatus(EsEnterpriseInfoConstants.E_STATUS_HAS_SUBMIT);//已提交
		esEnterpriseInfoChktemp.setChkStatus(EsEnterpriseInfoConstants.CHK_STATUS_1);//待运营审核
		esEnterpriseInfoChktemp.setOpeChecker("");
		esEnterpriseInfoChktemp.setOpeChkComment("");
		esEnterpriseInfoChktemp.setOpeChkTime(null);
		esEnterpriseInfoChktemp.setRiskChecker("");
		esEnterpriseInfoChktemp.setRiskChkComment("");
		esEnterpriseInfoChktemp.setRiskChkTime(null);
		updateEsEnterpriseInfoChktemp(esEnterpriseInfoChktemp);
	}
}
