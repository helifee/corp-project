package com.creditease.b2bsettle.basedata.service.impl;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.creditease.b2bsettle.basedata.constant.AuditStatus;
import com.creditease.b2bsettle.basedata.constant.OperateType;
import com.creditease.b2bsettle.basedata.model.Function;
import com.creditease.b2bsettle.basedata.model.FunctionAudit;
import com.creditease.b2bsettle.basedata.repository.FunctionAuditRepository;
import com.creditease.b2bsettle.basedata.repository.FunctionRepository;
import com.creditease.b2bsettle.basedata.service.FunctionService;

@Service
public class FunctionServiceImpl implements FunctionService {
	
	@Autowired
	private FunctionRepository functionRepository;
	
	@Autowired
	private FunctionAuditRepository functionAuditRepository;

	@Override
	public long addFunction(Function function) {
		Function newFun = functionRepository.save(function);
		return newFun.getId();
	}

	@Override
	public boolean delFunctionByCode(String sysId, String code) {
		int count = functionRepository.deleteByCode(sysId, code);
		return count == 1;
	}

	@Override
	public boolean updateFunction(Function function) {
		Function retFun = functionRepository.save(function);
		return retFun != null;
	}

	@Override
	public Function findFunctionByCode(String sysId, String code) {
		return functionRepository.findBySysIdAndCodeAndDeleted(sysId, code, false);
	}

	@Override
	public List<Function> findAllValidFuncs() {
		return functionRepository.findByDeleted(false);
	}

	@Override
	public List<FunctionAudit> findAllInvalidFunc() {
		return functionAuditRepository.findByDeleted(false);
	}

	@Override
	public boolean pass(FunctionAudit funcAudit) {
		//同步数据到主表
		OperateType operateType = funcAudit.getOperateType();
		if(OperateType.ADD.equals(operateType)) {
			//新增功能
			Function func = new Function();
			convert(funcAudit, func);
			Function save = functionRepository.save(func);
			funcAudit.setId(save.getId());	//回写ID
			
		} else if(OperateType.UPDATE.toString().equals(operateType)) {
			//修改功能
			Function func = functionRepository.findOne(funcAudit.getId());
			convert(funcAudit, func);
			functionRepository.save(func);
			
		} else if(OperateType.DELETE.toString().equals(operateType)) {
			//删除功能
			functionRepository.deleteById(funcAudit.getId(), new Date());
		}
		
		funcAudit.setDeleted(true);
		functionAuditRepository.save(funcAudit);
		
    	return true;
    }

	private void convert(FunctionAudit funcAudit, Function func) {
		func.setId(funcAudit.getId());
		func.setName(funcAudit.getName());
		func.setCode(funcAudit.getCode());
		func.setParent(funcAudit.getParent());
		func.setCreatedTime(funcAudit.getCreatedTime());
		func.setCreator(funcAudit.getCreator());
		func.setCanOperate(true);
	}

	@Override
	public boolean noPass(FunctionAudit funcAudit) {
		funcAudit.setAuditStatus(AuditStatus.Refuse);
		functionAuditRepository.save(funcAudit);
		return true;
	}

}
