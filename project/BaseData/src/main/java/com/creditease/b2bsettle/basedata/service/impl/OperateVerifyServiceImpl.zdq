package com.creditease.b2bsettle.basedata.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Path;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.creditease.b2bsettle.basedata.constant.AuditStatus;
import com.creditease.b2bsettle.basedata.constant.EsEnterpriseInfoConstants;
import com.creditease.b2bsettle.basedata.model.EsContactInfoChktemp;
import com.creditease.b2bsettle.basedata.model.EsEnterpriseInfoChktemp;
import com.creditease.b2bsettle.basedata.model.EsEproductInfoChktemp;
import com.creditease.b2bsettle.basedata.repository.EsContactInfoChktempRepository;
import com.creditease.b2bsettle.basedata.repository.EsEnterpriseInfoChktempRepository;
import com.creditease.b2bsettle.basedata.repository.EsEproductInfoChktempRepository;
import com.creditease.b2bsettle.basedata.service.OperateVerifyService;

@Service
@Transactional
public class OperateVerifyServiceImpl implements OperateVerifyService {
	@Autowired
	private EsEnterpriseInfoChktempRepository esEnterpriseInfoChktempRepository;
	@Autowired
	private EsContactInfoChktempRepository esContactInfoChktempRepository;
	@Autowired
	private EsEproductInfoChktempRepository esEproductInfoChktempRepository;
	
	

	/* (non-Javadoc/)
	 * @see com.creditease.b2bsettle.basedata.service.OperateVerifyService#queryOperateVerify(com.creditease.b2bsettle.basedata.model.EsEnterpriseInfoChktemp)
	 */
	@Override
	public Page<EsEnterpriseInfoChktemp> queryOperateVerify(
			Integer pageNo, Integer pageSize, final String eId, final String eName,final  String opeType, final Date joinStartDate, final Date joinEndDate, final Date eDueStartDate, final Date eDueEndDate) {
		// TODO  动态拼接查询条件， 返回的结果集
		// 1.动态拼接查询
		Specification<EsEnterpriseInfoChktemp> specification  = new Specification<EsEnterpriseInfoChktemp>() {
			@Override
			public Predicate toPredicate(Root<EsEnterpriseInfoChktemp> root,
					CriteriaQuery<?> query, CriteriaBuilder cb) {
				Path<String> eIdPath = root.get("eId");				// 企业编号
				Path<String> eNamePath = root.get("eName");			// 企业名称
				Path<String> opeTypePath = root.get("opeType");		// 操作类型
				Path<Date> joinDatePath = root.get("joinDate");		// 入网日期
				Path<Date> eDueDatePath = root.get("eDueDate");		// 到期日期
				Path<Object> chkStatusPath = root.get("chkStatus");	// 审核状态
				
				// 存放多个过滤条件
				List<Predicate> predicateList = new ArrayList<Predicate>();
				
				// 审核状态为 待运营审核
				predicateList.add(cb.equal(chkStatusPath, EsEnterpriseInfoConstants.CHK_STATUS_1));
				
				if(eId != null){
					predicateList.add(cb.like(eIdPath, "%"+ eId +"%"));
				}
				if(eName != null){
					predicateList.add(cb.like(eNamePath, "%"+ eName +"%"));
				}
				
				if(opeType != null){
					predicateList.add(cb.like(opeTypePath, "%"+ opeType +"%"));
				}
				//按入网日期 查询
				if(joinStartDate != null && joinEndDate != null){
					predicateList.add(cb.between(joinDatePath, joinStartDate, joinEndDate));
				}
				//按 到期日期 查询
				if(eDueStartDate != null && eDueEndDate != null){
					predicateList.add(cb.between(eDueDatePath, eDueStartDate, eDueEndDate));
				}
				
				Predicate[] p = new Predicate[predicateList.size()];
				// 将所有条件  and 连接起来 ，返回拼接好的过滤条件
				return cb.and(predicateList.toArray(p));
			}
		};
		// 2.分页参数
		Pageable pageable = new PageRequest(pageNo, pageSize);
		
		// 3.得到结果集
		Page<EsEnterpriseInfoChktemp> page = esEnterpriseInfoChktempRepository.findAll(specification,pageable);
		
		return page;
	}

	/* (non-Javadoc)
	 * @see com.creditease.b2bsettle.basedata.service.OperateVerifyService#findByUid(java.lang.String)
	 */
	@Override
	public EsEnterpriseInfoChktemp findByEId(String eid) {
		return esEnterpriseInfoChktempRepository.findByEId(eid);
	}

	/* (non-Javadoc)
	 * @see com.creditease.b2bsettle.basedata.service.OperateVerifyService#verify(java.lang.String, java.lang.String, java.lang.String)
	 */
	@Override
	public boolean verify(String eid, String auditStatus, String comment) {
		EsEnterpriseInfoChktemp infoChktemp = esEnterpriseInfoChktempRepository.findByEId(eid);
		// 审核为通过时
		if(AuditStatus.Through.value().equals(auditStatus)){
			infoChktemp.setChkStatus(EsEnterpriseInfoConstants.CHK_STATUS_3);		// 设置审核状态为  待风控审核
		}
		// 审核为拒绝时
		if(AuditStatus.Refuse.value().equals(auditStatus)){
			infoChktemp.setEStatus(EsEnterpriseInfoConstants.E_STATUS_HAS_REFUSED);	// 设置企业状态为  已拒绝
			infoChktemp.setChkStatus(EsEnterpriseInfoConstants.CHK_STATUS_2);		// 设置审核状态为  运营审核拒绝
		}
		infoChktemp.setOpeChkTime(new Date());										// 当前时间 
		// TODO 当前用户取值问题。当前用户（用户名称/用户标识？？）应该来源于Session中
		infoChktemp.setOpeChecker(null);											// 当前用户
		infoChktemp.setOpeChkComment(comment);
		boolean result = false;
		try {
			esEnterpriseInfoChktempRepository.save(infoChktemp);
			result = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

	/* (non-Javadoc)
	 * @see com.creditease.b2bsettle.basedata.service.OperateVerifyService#getEsContactInfoDetailByEId(java.lang.String)
	 */
	@Override
	public List<EsContactInfoChktemp> getEsContactInfoChktempDetailByEId(String eId) {
		return esContactInfoChktempRepository.findByEId(eId);
	}

	/* (non-Javadoc)
	 * @see com.creditease.b2bsettle.basedata.service.OperateVerifyService#findEproductInfoChktempByEId(java.lang.String)
	 */
	@Override
	public List<EsEproductInfoChktemp> findEproductInfoChktempByEId(String eid) {
		return esEproductInfoChktempRepository.findByEId(eid);
	}
}
