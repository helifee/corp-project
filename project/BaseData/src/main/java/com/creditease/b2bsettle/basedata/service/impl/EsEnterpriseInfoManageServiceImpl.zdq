/**  
* @Title: EsEnterpriseInfoManageServiceImpl.java
* @Package com.creditease.b2bsettle.basedata.service.impl
* @Description: TODO
* @author zhanghaiyang6 
* @date 2015年6月12日 下午6:54:34
* @version V1.0  
*/ 
package com.creditease.b2bsettle.basedata.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.creditease.b2bsettle.basedata.constant.EsEnterpriseInfoConstants;
import com.creditease.b2bsettle.basedata.model.EsContactInfo;
import com.creditease.b2bsettle.basedata.model.EsContactInfoChktemp;
import com.creditease.b2bsettle.basedata.model.EsEnterpriseInfo;
import com.creditease.b2bsettle.basedata.model.EsEnterpriseInfoChktemp;
import com.creditease.b2bsettle.basedata.model.EsEproductInfo;
import com.creditease.b2bsettle.basedata.model.EsEproductInfoChktemp;
import com.creditease.b2bsettle.basedata.service.EsEnterpriseInfoManageService;
import com.creditease.b2bsettle.basedata.util.Uuid32Bit;

/**
 * @ClassName: EsEnterpriseInfoManageServiceImpl
 * @Description:  企业信息管理服务--企业信息的增删改查
 * @author zhanghaiyang6
 * @date 2015年6月12日 下午6:54:34
 *
 */
@Transactional
@Service
public class EsEnterpriseInfoManageServiceImpl extends EsEnterpriseInfoBaseService implements EsEnterpriseInfoManageService {

	
	/**
	 * 
	* @Title: saveEsEnterpriseAllInfoToChktempTable
	* @Description: 新增企业基本信息、企业经营信息、联系人信息、产品类型信息到审核临时表中---From Tab1&Tab2&Tab3&Tab4
	* @param @param esEnterpriseInfoChktemp,esContactInfoChktempList,esEproductInfoChktempList
	* @param @return    
	* @return   
	* @throws
	 */
	@Override
	public void saveEsEnterpriseAllInfoToChktempTable(EsEnterpriseInfoChktemp esEnterpriseInfoChktemp,List<EsContactInfoChktemp> esContactInfoChktempList,List<EsEproductInfoChktemp> esEproductInfoChktempList) {
		operateEsEnterpriseAllInfoToChktempTable(esEnterpriseInfoChktemp,esContactInfoChktempList,esEproductInfoChktempList);
	}
	
	/**
	 * 
	* @Title: submitSaveEsEnterpriseAllInfoToChktempAudit
	* @Description: 添加操作的审核
	* @param @param esEnterpriseInfoChktemp
	* @param @param esContactInfoChktempList
	* @param @param esEproductInfoChktempList    
	* @return void   
	* @throws
	 */
	@Override
	public void submitSaveEsEnterpriseAllInfoToChktempAudit(EsEnterpriseInfoChktemp esEnterpriseInfoChktemp,List<EsContactInfoChktemp> esContactInfoChktempList,List<EsEproductInfoChktemp> esEproductInfoChktempList){
		operateEsEnterpriseAllInfoToChktempTable(esEnterpriseInfoChktemp,esContactInfoChktempList,esEproductInfoChktempList);
	}
	

	/**
	 * 
	* @Title: updateEsEnterpriseAllInfoToChktempTable
	* @Description: 更新企业基本信息和企业经营信息到审核临时表中---From Tab1&Tab2企业基本信息、企业经营信息、联系人信息、产品类型信息到审核临时表中---From Tab1&Tab2&Tab3&Tab4
	*               查出数据库中当前的信息，将传入的信息过滤到查出的实体类中然后重新插入一遍
	* @param @param inputEsEnterpriseInfoChktemp,inputEsContactInfoChktempList,inputEsEproductInfoChktempList
	* @param @return    
	* @return  
	* @throws
	 */
	@Override
	public void updateEsEnterpriseAllInfoToChktempTable(EsEnterpriseInfoChktemp inputEsEnterpriseInfoChktemp,List<EsContactInfoChktemp> inputEsContactInfoChktempList,List<EsEproductInfoChktemp> inputEsEproductInfoChktempList) {
		
		operateEsEnterpriseAllInfoToChktempTable(inputEsEnterpriseInfoChktemp,inputEsContactInfoChktempList,inputEsEproductInfoChktempList);
		
		//update 原ES_ENTERPRISE_INFO记录
		String userName = null;
		esEnterpriseInfoRepository.modifyUpdateInfoByEId(inputEsEnterpriseInfoChktemp.getEId(), new Date(), userName, EsEnterpriseInfoConstants.IN_UPDATE_Y);
		
	}
	
	/**
	 * 
	* @Title: submitUpdateEsEnterpriseAllInfoToChktempAudit
	* @Description: 更新操作的审核
	* @param @param inputEsEnterpriseInfoChktemp,inputEsContactInfoChktempList,inputEsEproductInfoChktempList  
	* @return void   
	* @throws
	 */
	@Override
	public void submitUpdateEsEnterpriseAllInfoToChktempAudit(EsEnterpriseInfoChktemp inputEsEnterpriseInfoChktemp,List<EsContactInfoChktemp> inputEsContactInfoChktempList,List<EsEproductInfoChktemp> inputEsEproductInfoChktempList){
	  
		operateEsEnterpriseAllInfoToChktempTable(inputEsEnterpriseInfoChktemp,inputEsContactInfoChktempList,inputEsEproductInfoChktempList);
		
		//update 原ES_ENTERPRISE_INFO记录
		String userName = null;
		esEnterpriseInfoRepository.modifyUpdateInfoByEId(inputEsEnterpriseInfoChktemp.getEId(), new Date(), userName, EsEnterpriseInfoConstants.IN_UPDATE_Y);
		
	}
	
	
	/**
	 * 
	* @Title: operateEsEnterpriseAllInfoToChktempTable
	* @Description: 公用操作：
	* @param @param inputEsEnterpriseInfoChktemp
	* @param @param inputEsContactInfoChktempList
	* @param @param inputEsEproductInfoChktempList    
	* @return void   
	* @throws
	 */
	private void operateEsEnterpriseAllInfoToChktempTable(EsEnterpriseInfoChktemp inputEsEnterpriseInfoChktemp,List<EsContactInfoChktemp> inputEsContactInfoChktempList,List<EsEproductInfoChktemp> inputEsEproductInfoChktempList) {
		
		// TODO 企业编号生成
		String eid = Uuid32Bit.getUuid32Bit();
		//将Tab页1和Tab页2的数据Insert ES_ENTERPRISE_INFO_CHKTEMP表
		if(null!=inputEsEnterpriseInfoChktemp){
			String uid = Uuid32Bit.getUuid32Bit();
			inputEsEnterpriseInfoChktemp.setUid(uid);
			inputEsEnterpriseInfoChktemp.setEId(eid);
			esEnterpriseInfoChktempRepository.save(inputEsEnterpriseInfoChktemp);
		}
		
		//将Tab页3的记录Insert ES_CONTACT_INFO_CHKTEMP表对应字段(可能有多条记录)
		if(null!=inputEsContactInfoChktempList&&inputEsContactInfoChktempList.size()>0){
			for(EsContactInfoChktemp esContactInfoChktemp : inputEsContactInfoChktempList){
				esContactInfoChktemp.setId(Uuid32Bit.getUuid32Bit());
				esContactInfoChktemp.setEId(eid);
				esContactInfoChktempRepository.save(esContactInfoChktemp);
			}
		}
		
		//将Tab页4的记录Insert ES_EPRODUCT_INFO_CHKTEMP表对应字段(可能有多条记录)
		if(null!=inputEsEproductInfoChktempList&&inputEsEproductInfoChktempList.size()>0){
			for(EsEproductInfoChktemp esEproductInfoChktemp : inputEsEproductInfoChktempList){
				esEproductInfoChktemp.setId(Uuid32Bit.getUuid32Bit());
				esEproductInfoChktemp.setEId(eid);
				esEproductInfoChktempRepository.save(esEproductInfoChktemp);
			}
		}
	}
	

	/**
	 * 
	* @Title: getEsEnterpriseInfoDetailByUid
	* @Description: 根据UID获取企业信息详情
	* @param @param uid
	* @param @return    
	* @return EsEnterpriseInfo   
	* @throws
	 */
	@Override
	public EsEnterpriseInfo getEsEnterpriseInfoDetailByUid(String uid){
		return esEnterpriseInfoRepository.findByUid(uid);
	}
	
	/**
	 * 
	* @Title: getEsContactInfoDetailByEId
	* @Description: 根据EID获取企业联系人信息详情
	* @param @param eId
	* @param @return    
	* @return List<EsContactInfo>   
	* @throws
	 */
	@Override
	public List<EsContactInfo> getEsContactInfoDetailByEId(String eId){
		return esContactInfoRepository.findByEId(eId);
	}
	
	/**
	 * 
	* @Title: getEsEproductInfoDetailByEId
	* @Description: 根据EID获取产品选择信息详情
	* @param @param eId
	* @param @return    
	* @return List<EsEproductInfo>   
	* @throws
	 */
	@Override
	public List<EsEproductInfo> getEsEproductInfoDetailByEId(String eId){
		return esEproductInfoRepository.findByEId(eId);
	}

	/**
	 * 
	* @Title: queryEsEnterpriseInfoPageListByCondition
	* @Description: 企业信息查询---按照分页查询
	* @param @param eId 企业编号
	* @param @param eName 企业名称
	* @param @param joinDateFrom 入网时间开始
	* @param @param joinDateTo 入网时间结束
	* @param @param eDueDateFrom 截止日期开始
	* @param @param eDueDateTo 截止日期结束
	* @param @param eStatus 企业状态
	* @param @param pageable 分页状态
	* @param @return    
	* @return Page<EsEnterpriseInfo>   
	* @throws
	 */
	@Override
	public Page<EsEnterpriseInfo> queryEsEnterpriseInfoPageListByCondition(String eId, String eName, Date joinDateFrom, Date joinDateTo,Date eDueDateFrom, Date eDueDateTo, String eStatus,String chkStatus, Pageable pageable) {
	    Specification<EsEnterpriseInfo> spec = this.makeQueryMultConditionForEsEnterpriseInfoPage(eId,eName,joinDateFrom,joinDateTo,eDueDateFrom,eDueDateTo,eStatus, chkStatus);
        return esEnterpriseInfoRepository.findAll(spec, pageable);
	}

	/* (non-Javadoc)
	 * @see com.creditease.b2bsettle.basedata.service.EsEnterpriseInfoManageService#getEsEnterpriseInfoDetailByEid(java.lang.String)
	 */
	@Override
	public EsEnterpriseInfo getEsEnterpriseInfoDetailByEid(String eid) {
		// TODO Auto-generated method stub
		return esEnterpriseInfoRepository.findByEId(eid);
	}
	
	
	/**
	 * @param chkStatus TODO
	 * 
	* @Title: makeQueryMultCondition
	* @Description: 组装若干个查询条件---企业信息查询时使用
	* @param eId
	* @param eName
	* @param joinDateFrom
	* @param joinDateTo
	* @param eDueDateFrom
	* @param eDueDateTo
	* @param eStatus	企业状态
	* @param chkStatus	审核状态
	* @param @return    
	* @return Specification<EsEnterpriseInfo>   
	* @throws
	 */
    private Specification<EsEnterpriseInfo> makeQueryMultConditionForEsEnterpriseInfoPage(String eId, String eName, Date joinDateFrom, Date joinDateTo,Date eDueDateFrom, Date eDueDateTo, String eStatus, String chkStatus){
    	
        final String eStatusF = eStatus;
        final String chkStatusF = chkStatus;
        final String eIdF = eId;
        final String eNameF = eName;
        final Date joinDateFromF = joinDateFrom;
        final Date joinDateToF = joinDateTo;
        final Date eDueDateFromF = eDueDateFrom;
        final Date eDueDateToF = eDueDateTo;
        
    	return new Specification<EsEnterpriseInfo>(){
           
             public Predicate toPredicate(Root<EsEnterpriseInfo> root,CriteriaQuery<?> query, CriteriaBuilder cb) {
            	 
                 // 存放多个条件
                 List<Predicate> predicateList = new ArrayList<Predicate>();
                 
                 //企业编码支持模糊查询
                 if ((eIdF != null) && (!(eIdF.isEmpty()))) {
                	 predicateList.add(cb.like(root.get("eId").as(String.class), "%"+eIdF+"%"));
                 }
                 
                 //企业名称支持模糊查询
                 if ((eNameF != null) && (!(eNameF.isEmpty()))) {
                	 predicateList.add(cb.like(root.get("eName").as(String.class), "%"+eNameF+"%"));
                 }
                 
                 //企业状态
                 if(eStatusF!=null && (!(eStatusF.isEmpty()))){
                	 predicateList.add(cb.equal(root.get("eStatus").as(String.class), eStatusF));
                 }
                 
                 //审核状态
                 if(chkStatusF!=null && (!(chkStatusF.isEmpty()))){
                	 predicateList.add(cb.equal(root.get("chkStatus").as(String.class), chkStatusF));
                 }
                 
                 //企业入网时间
	               if (joinDateFromF != null && joinDateToF != null) {
	                  predicateList.add(cb.between(root.get("joinDate").as(Date.class),joinDateFromF, joinDateToF));
	               }
	               
	                 //企业到期时间
	               if (eDueDateFromF != null && eDueDateToF != null) {
	                  predicateList.add(cb.between(root.get("eDueDate").as(Date.class),eDueDateFromF, eDueDateToF));
	               }
                 
                 
                 Predicate[] p = new Predicate[predicateList.size()];  
                 return cb.and(predicateList.toArray(p));  
             }
         };
    }

	/**
	 * 该服务中不用这个接口
	 */
	@Override
	public Specification<EsEnterpriseInfoChktemp> makeQueryMultConditionForEsEnterpriseInfoChktempPage(
			String eId, String eName, Date joinDateFrom, Date joinDateTo,
			Date eDueDateFrom, Date eDueDateTo, String eStatus) {
		return null;
	}
	
}
