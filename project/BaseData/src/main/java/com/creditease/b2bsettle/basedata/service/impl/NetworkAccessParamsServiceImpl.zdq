package com.creditease.b2bsettle.basedata.service.impl;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.creditease.b2bsettle.basedata.constant.AuditStatus;
import com.creditease.b2bsettle.basedata.constant.CommonConstants;
import com.creditease.b2bsettle.basedata.constant.OperateType;
import com.creditease.b2bsettle.basedata.model.NetworkAccessParams;
import com.creditease.b2bsettle.basedata.model.NetworkAccessParamsAudit;
import com.creditease.b2bsettle.basedata.repository.NetworkAccessParamsAuditRepository;
import com.creditease.b2bsettle.basedata.repository.NetworkAccessParamsRepository;
import com.creditease.b2bsettle.basedata.service.NetworkAccessParamsService;
@Service
public class NetworkAccessParamsServiceImpl implements NetworkAccessParamsService {
	
	@Autowired
	private NetworkAccessParamsAuditRepository networkAccessParamsAuditRepository;
	
	@Autowired
	private NetworkAccessParamsRepository networkAccessParamsRepository;
	

	/**
	 * 新增企业参数类型（存审核表）
	 * */ 
	@Override
	public long newNetworkAccessParams(NetworkAccessParamsAudit networkAccessParamsAudit) {
		NetworkAccessParamsAudit save = networkAccessParamsAuditRepository.save(networkAccessParamsAudit);
		return save.getCid();
	}

	/**
	 * 修改
	 * 适用范围：
	 * 已启用、未启用页面的新增、修改操作
	 * 当如参cid 为0时方法认为是已用页面传来的请求
	 * */
	@Override
	public void updateNetworkAccessParams(long cid, long id, String corp, String paramName, String paramValue, String modifier) {
		//标识已启用页面不能修改
		NetworkAccessParams networkAccessParamsmd = networkAccessParamsRepository.findOne(id);
		networkAccessParamsmd.setCanOperate(false);
		networkAccessParamsRepository.save(networkAccessParamsmd);
		
		//在审核表新建或更新信息
		NetworkAccessParamsAudit networkAccessParamsAudit = null;
		String operateSummary = "";
		if(cid == 0){//cid为0时认为时已用页面发来的请求，需要在审核表里新增
			networkAccessParamsAudit = new NetworkAccessParamsAudit();
			networkAccessParamsAudit.setId(id);
			operateSummary = CommonConstants.updateUsed;
		}else{
			networkAccessParamsAudit = networkAccessParamsAuditRepository.findOne(cid);
			operateSummary = CommonConstants.updateNotUsed;
			networkAccessParamsAudit.setAuditText("");//清空上次的审核信息
		}
		networkAccessParamsAudit.setCorp(corp);
		networkAccessParamsAudit.setParamName(paramName);
		networkAccessParamsAudit.setParamValue(paramValue);
		
		networkAccessParamsAudit.setAuditStatus(AuditStatus.Audit);
		networkAccessParamsAudit.setOperateSummary(operateSummary);
		networkAccessParamsAudit.setOperateType(OperateType.UPDATE);
		networkAccessParamsAudit.setCreator(networkAccessParamsmd.getCreator());
		networkAccessParamsAudit.setCreatedTime(networkAccessParamsmd.getCreatedTime());
		networkAccessParamsAudit.setModifier(modifier);
		networkAccessParamsAudit.setModifyTime(new Date());
		networkAccessParamsAuditRepository.save(networkAccessParamsAudit);
	}

	
	/**
	 * 删除
	 * 适用范围：
	 * 已启用、未启用页面的删除操作
	 * 当如参cid 为null时方法认为是已用页面传来的请求
	 * */
	public void deleteNetworkAccessParams(long cid, long id, boolean isDelte, String modifier) {
		//标识已启用页面不能修改
		NetworkAccessParams networkAccessParamsmd = networkAccessParamsRepository.findOne(id);
		networkAccessParamsmd.setCanOperate(false);
		networkAccessParamsRepository.save(networkAccessParamsmd);
		
		//在审核表新建或更新信息
		NetworkAccessParamsAudit networkAccessParamsAudit = null;
		String operateSummary = "";
		if(cid == 0){//cid为0时认为时已用页面发来的请求，需要在审核表里新增
			networkAccessParamsAudit = new NetworkAccessParamsAudit();
			networkAccessParamsAudit.setId(id);
			operateSummary = CommonConstants.deleteUsed;
		}else{
			networkAccessParamsAudit = networkAccessParamsAuditRepository.findOne(cid);
			operateSummary = CommonConstants.deleteNotUsed;
			networkAccessParamsAudit.setAuditText("");//清空上次的审核信息
		}
		networkAccessParamsAudit.setCorp(networkAccessParamsmd.getCorp());
		networkAccessParamsAudit.setParamName(networkAccessParamsmd.getParamName());
		networkAccessParamsAudit.setParamValue(networkAccessParamsmd.getParamValue());
		
		networkAccessParamsAudit.setDeleted(isDelte);
		networkAccessParamsAudit.setAuditStatus(AuditStatus.Audit);
		networkAccessParamsAudit.setOperateSummary(operateSummary);
		networkAccessParamsAudit.setOperateType(OperateType.DELETE);
		networkAccessParamsAudit.setCreator(networkAccessParamsmd.getCreator());
		networkAccessParamsAudit.setCreatedTime(networkAccessParamsmd.getCreatedTime());
		networkAccessParamsAudit.setModifier(modifier);
		networkAccessParamsAudit.setModifyTime(new Date());
		networkAccessParamsAuditRepository.save(networkAccessParamsAudit);
	}
	
	
	
	/**
	 * 
	 * 审核操作 
	 * 适用范围：
	 * 适用来自 已启用、未启用页面的新增、修改和删除操作的审核
	 * */
	@Override
	public String auditNetworkAccessParams(long cid, String auditText,AuditStatus auditStatus, String auditor ) {
		NetworkAccessParamsAudit networkAccessParamsAudit =  networkAccessParamsAuditRepository.findOne(cid);
		NetworkAccessParams networkAccessParams = networkAccessParamsRepository.findOne(networkAccessParamsAudit.getId());
		//审核通过
		if(auditStatus.equals(AuditStatus.Through)){
			//更改审核表状态
			networkAccessParamsAudit.setAuditStatus(AuditStatus.Through);
			networkAccessParamsAudit.setAuditText(auditText);//审核操作不是修改，所以不更新modifer字段
			
			//复制审核表信息更新主表
			if(networkAccessParams == null){//审核新增、因为查不出数据、此时需要新建主表
				networkAccessParams = new NetworkAccessParams ();
				networkAccessParams.setCorp(networkAccessParamsAudit.getCorp());
				networkAccessParams.setParamName(networkAccessParamsAudit.getParamName());
				networkAccessParams.setParamValue(networkAccessParamsAudit.getParamValue());
				networkAccessParams.setComments(networkAccessParamsAudit.getComments());
				
				networkAccessParams.setCreator(networkAccessParamsAudit.getCreator());
				networkAccessParams.setCreatedTime(networkAccessParamsAudit.getCreatedTime());
				networkAccessParams.setModifier(networkAccessParamsAudit.getModifier());
				networkAccessParams.setModifyTime(networkAccessParamsAudit.getModifyTime());
				networkAccessParams.setAuditor(auditor);
				networkAccessParams.setAuditTime(new Date());
				networkAccessParams.setDeleted(false);
				networkAccessParams.setCanOperate(true);
			}else{//审核修改或删除、此时需要更新主表
				networkAccessParams.setCorp(networkAccessParamsAudit.getCorp());
				networkAccessParams.setParamName(networkAccessParamsAudit.getParamName());
				networkAccessParams.setParamValue(networkAccessParamsAudit.getParamValue());
				networkAccessParams.setComments(networkAccessParamsAudit.getComments());
				
				networkAccessParams.setAuditor(auditor);
				networkAccessParams.setAuditTime(new Date());
				networkAccessParams.setModifier(networkAccessParamsAudit.getModifier());
				networkAccessParams.setModifyTime(networkAccessParamsAudit.getModifyTime());
				networkAccessParams.setDeleted(networkAccessParamsAudit.getOperateType().equals(OperateType.DELETE));//如果当前审核通过的市删除操作，那么删除标识为true
				networkAccessParams.setCanOperate(true);
			}
		}else{//审核未通过
			networkAccessParamsAudit.setAuditStatus(AuditStatus.Refuse);
			networkAccessParamsAudit.setAuditText(auditText);
			networkAccessParams.setCanOperate(true);
		}
		networkAccessParams = networkAccessParamsRepository.save(networkAccessParams);//审核新增时insert，审核修改和删除时update
		networkAccessParamsAudit.setId(networkAccessParams.getId());//新增情况需要关联ID   无论任何时候主表和审核表都是有关系的所以此方法没问题
		networkAccessParamsAuditRepository.save(networkAccessParamsAudit);//更新操作
		return "1";
	}
	
	
	@Override
	public List<NetworkAccessParams> findAll() {
		return networkAccessParamsRepository.findByCanOperateAndDeleted(true,false);
	}

}
