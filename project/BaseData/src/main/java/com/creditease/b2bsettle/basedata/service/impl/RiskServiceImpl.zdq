/**
 * 
 */
package com.creditease.b2bsettle.basedata.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Path;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.creditease.b2bsettle.basedata.constant.AuditStatus;
import com.creditease.b2bsettle.basedata.constant.EsEnterpriseInfoConstants;
import com.creditease.b2bsettle.basedata.model.EsContactInfo;
import com.creditease.b2bsettle.basedata.model.EsContactInfoChktemp;
import com.creditease.b2bsettle.basedata.model.EsEnterpriseInfo;
import com.creditease.b2bsettle.basedata.model.EsEnterpriseInfoChktemp;
import com.creditease.b2bsettle.basedata.model.EsEproductInfo;
import com.creditease.b2bsettle.basedata.model.EsEproductInfoChktemp;
import com.creditease.b2bsettle.basedata.repository.EsContactInfoChktempRepository;
import com.creditease.b2bsettle.basedata.repository.EsContactInfoRepository;
import com.creditease.b2bsettle.basedata.repository.EsEnterpriseInfoChktempRepository;
import com.creditease.b2bsettle.basedata.repository.EsEproductInfoChktempRepository;
import com.creditease.b2bsettle.basedata.repository.EsEproductInfoRepository;
import com.creditease.b2bsettle.basedata.service.EsEnterpriseInfoManageService;
import com.creditease.b2bsettle.basedata.service.RiskService;

/**
 * Description:
 * 
 * @author chenmingli Create Date: 2015年6月24日 下午6:56:46
 */
@Service
@Transactional
public class RiskServiceImpl extends EsEnterpriseInfoBaseService implements
		RiskService {

	@Autowired
	private EsEnterpriseInfoChktempRepository esEnterpriseInfoChktempRepository;

	@Autowired
	private EsContactInfoChktempRepository esContactInfoChktempRepository;
	
	@Autowired
	EsContactInfoRepository esContactInfoRepository;
	
	@Autowired
	private EsEproductInfoChktempRepository esEproductInfoChktempRepository;
	
	@Autowired
	private EsEproductInfoRepository esEproductInfoRepository;

	@Autowired
	private EsEnterpriseInfoManageService enterpriseInfoManageService;

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.creditease.b2bsettle.basedata.service.RiskService#queryRisk(java.
	 * lang.Integer, java.lang.Integer, java.lang.String, java.lang.String,
	 * java.lang.String, java.util.Date, java.util.Date, java.util.Date,
	 * java.util.Date)
	 */
	@Override
	public Page<EsEnterpriseInfoChktemp> queryRisk(Integer pageNo,
			Integer pageSize, final String eId, final String eName,
			final String opeType, final Date joinStartDate,
			final Date joinEndDate, final Date eDueStartDate,
			final Date eDueEndDate) {
		// 动态拼接查询条件， 返回的结果集
		// 1.动态拼接查询
		Specification<EsEnterpriseInfoChktemp> specification = new Specification<EsEnterpriseInfoChktemp>() {
			@Override
			public Predicate toPredicate(Root<EsEnterpriseInfoChktemp> root,
					CriteriaQuery<?> query, CriteriaBuilder cb) {
				Path<String> eIdPath = root.get("eId"); // 企业编号
				Path<String> eNamePath = root.get("eName"); // 企业名称
				Path<String> opeTypePath = root.get("opeType"); // 操作类型
				Path<Date> joinDatePath = root.get("joinDate"); // 入网日期
				Path<Date> eDueDatePath = root.get("eDueDate"); // 到期日期
				Path<Object> chkStatusPath = root.get("chkStatus"); // 审核状态

				// 存放多个过滤条件
				List<Predicate> predicateList = new ArrayList<Predicate>();

				// 审核状态为 待运营审核
				predicateList.add(cb.equal(chkStatusPath,
						EsEnterpriseInfoConstants.CHK_STATUS_1));

				if (eId != null) {
					predicateList.add(cb.like(eIdPath, "%" + eId + "%"));
				}
				if (eName != null) {
					predicateList.add(cb.like(eNamePath, "%" + eName + "%"));
				}

				if (opeType != null) {
					predicateList
							.add(cb.like(opeTypePath, "%" + opeType + "%"));
				}
				// 按入网日期 查询
				if (joinStartDate != null && joinEndDate != null) {
					predicateList.add(cb.between(joinDatePath, joinStartDate,
							joinEndDate));
				}
				// 按 到期日期 查询
				if (eDueStartDate != null && eDueEndDate != null) {
					predicateList.add(cb.between(eDueDatePath, eDueStartDate,
							eDueEndDate));
				}

				Predicate[] p = new Predicate[predicateList.size()];
				// 将所有条件 and 连接起来 ，返回拼接好的过滤条件
				return cb.and(predicateList.toArray(p));
			}
		};
		// 2.分页参数
		Pageable pageable = new PageRequest(pageNo, pageSize);

		// 3.得到结果集
		Page<EsEnterpriseInfoChktemp> page = esEnterpriseInfoChktempRepository
				.findAll(specification, pageable);

		return page;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.creditease.b2bsettle.basedata.service.RiskService#findByUid(java.
	 * lang.String)
	 */
	@Override
	public EsEnterpriseInfoChktemp findByUid(String uid) {
		// TODO Auto-generated method stub
		return esEnterpriseInfoChktempRepository.findByUid(uid);
	}

	 @Override
	 public EsContactInfoChktemp findByEId(String eId) {
	 // TODO Auto-generated method stub
	 return (EsContactInfoChktemp)
	 esContactInfoChktempRepository.findByEId(eId);
	 }

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.creditease.b2bsettle.basedata.service.RiskService#verify(java.lang
	 * .String, java.lang.String, java.lang.String)
	 */
	@Override
	public boolean verify(String eid, String auditStatus, String comment) {

		EsEnterpriseInfoChktemp infoChktemp = esEnterpriseInfoChktempRepository
				.findByEId(eid);

		// EsContactInfoChktemp.eid = esEnterpriseInfoChktemp.eid;
		// TODO 查询uid 还是eid 还是id ？
		EsContactInfoChktemp eCInfoChktemp = (EsContactInfoChktemp) esContactInfoChktempRepository
				.findByEId(eid);

		// eseproductInfoChKemp.eid = esterpriseInfoChkemp.eid
		// TODO 查询uid 还是eid 还是id ？
		EsEproductInfoChktemp esEproductInfoChktemp = (EsEproductInfoChktemp) esEproductInfoChktempRepository
				.findByEId(eid);

		// 审核为通过时
		if (AuditStatus.Through.value().equals(auditStatus)) {
			// 1.1操作类型为 新增状态下的事务控制

			// 设置企业状态为 正常
			infoChktemp.setEStatus(EsEnterpriseInfoConstants.E_STATUS_NORMAL);

			// 设置审核状态为 风控审核通过
			infoChktemp.setChkStatus(EsEnterpriseInfoConstants.CHK_STATUS_4);

			// TODO RISK_CHK_TIME:当前时间 RISK_CHECKER:当前用户
			// RISK_CHK_COMMENT:页面的审核意见
			EsEnterpriseInfo info = new EsEnterpriseInfo();
			// 判断如果要是新增状态下 进行处理业务
			if (infoChktemp.getOpeType() == "1") {
				// 1.1

				// 将ES_ENTERPRISE_INFO_CHKTEMP表除UID和OPE_TYPE外的所有字段Insert
				// 到ES_ENTERPRISE_INFO表中，同时ES_ENTERPRISE_INFO. IN_UPDATE取值“2”

				// 企业基本信息表审核临时表的实体类 EsEnterpriseInfoChktempRepository

				// 企业编号 eid
				info.setEId(infoChktemp.getEId());
				// 企业名称 ename
				info.setEName(infoChktemp.getEName());

				// 企业分类 ECategory
				info.setECategory(infoChktemp.getECategory());

				// 企业简称 EShortName
				info.setEShortName(infoChktemp.getEShortname());

				// 营业执照号码 ELicenseId
				info.setELicenseId(infoChktemp.getELicenseId());

				// orgInstdId 组织机构代码
				info.setOrgInstdId(infoChktemp.getOrgInstdId());

				// taxId 税务登记号
				info.setTaxId(infoChktemp.getTaxId());

				// 开户许可证核准号 arrpId
				info.setArrpId(infoChktemp.getArrpId());

				// eDueDate 企业到期时间
				info.setEDueDate(infoChktemp.getEDueDate());

				// icpId ICP证编号
				info.setIcpId(infoChktemp.getIcpId());

				// 备注 remark
				info.setRemark(infoChktemp.getRemark());

				// eType 企业类型
				info.setEType(infoChktemp.getEType());

				// corpOwnerNm 公司法人代表名
				info.setCorpOwnerNm(infoChktemp.getCorpOwnerNm());

				// ownerCertTp 法人证件类型
				info.setOwnerCertTp(infoChktemp.getOwnerCertTp());

				// ownerCertId 法人证件号
				info.setOwnerCertId(infoChktemp.getOwnerCertId());

				// merchantAddress 地址
				info.setMerchantAddress(infoChktemp.getMerchantAddress());

				// regCapital 注册金额
				info.setRegCapital(infoChktemp.getRegCapital());

				// corpEstDate 成立日
				info.setCorpEstDate(infoChktemp.getCorpEstDate());

				// 营业起始日期 bizBeginDate
				info.setBizBeginDate(infoChktemp.getBizBeginDate());

				// 营业终止日期 bizEndDate
				info.setBizEndDate(infoChktemp.getBizEndDate());

				// 组成形式 estType
				info.setEstType(infoChktemp.getEstType());

				// 营业地址-省 province
				info.setProvince(infoChktemp.getProvince());

				// 营业地址-市 city
				info.setCity(infoChktemp.getCity());

				// 具体地址 detailAddr
				info.setDetailAddr(infoChktemp.getDetailAddr());

				// 营业地段 bizCommodity
				info.setBizCommodity(infoChktemp.getBizCommodity());

				// 行业大类 industryNo
				info.setIndustryNo(infoChktemp.getIndustryNo());

				// 行业细分 subIndustryNo
				info.setSubIndustryNo(infoChktemp.getSubIndustryNo());

				// 网站地址 webAddr
				info.setWebAddr(infoChktemp.getWebAddr());

				// 企业电话 telNo
				info.setTelNo(infoChktemp.getTelNo());

				// 信用等级 creditLvl
				info.setCreditLvl(infoChktemp.getCreditLvl());

				// 节假日营业 holidayBiz
				info.setHolidayBiz(infoChktemp.getHolidayBiz());

				// 员工人数 employeeNo
				info.setEmployeeNo(infoChktemp.getEmployeeNo());

				// 企业行业描述 industryDesp
				info.setIndustryDesp(infoChktemp.getIndustryDesp());

				// 主营业范围 bizScope
				info.setBizScope(infoChktemp.getBizScope());

				// 副营业范围 subBizScope
				info.setSubBizScope(infoChktemp.getSubBizScope());

				// 企业入网时间 joinDate
				info.setJoinDate(infoChktemp.getJoinDate());

				// 创建人 creator
				info.setCreator(infoChktemp.getCreator());

				// 创建时间 createTime
				info.setCreateTime(infoChktemp.getCreateTime());

				// 修改时间 modifyTime
				info.setModifyTime(infoChktemp.getModifyTime());

				// 修改者 updater
				info.setUpdater(infoChktemp.getUpdater());

				// 企业状态 eStatus
				info.setEStatus(infoChktemp.getEStatus());

				// 审核状态 chkStatus
				info.setChkStatus(infoChktemp.getChkStatus());

				// 运营审核时间 opeChkTime
				info.setOpeChkTime(infoChktemp.getOpeChkTime());

				// 运营审核人 opeChecker
				info.setOpeChecker(infoChktemp.getOpeChecker());

				// 运营审核意见 opeChkComment
				info.setOpeChkComment(infoChktemp.getOpeChkComment());

				// 风控审核时间 riskChkTime
				info.setRiskChkTime(infoChktemp.getRiskChkTime());

				// 风控审核人 riskChecker
				info.setRiskChecker(infoChktemp.getRiskChecker());

				// 风控审核意见 riskChkComment
				info.setRiskChkComment(infoChktemp.getRiskChkComment());

				info.setInUpdate(EsEnterpriseInfoConstants.IN_UPDATE_N);// 修改中
																		// 字段
																		// 取值为2（否）
				// save enterpriseInfoManageService.save(info)... insert

				// "企业联系人信息审核临时表"的实体类 EsContactInfoChktemp
				// 根据es_contact_info_chktemp.e_id = es_enterprise_info_chktemp.e_id
				//取es_contact_info_chktemp所有记录，
				// 将对应记录insert es_contact_info表（uid除外）
				EsContactInfo esContactInfo = new EsContactInfo();

				// 企业编号 eid
				esContactInfo.setEId(eCInfoChktemp.getEId());

				// 联系人序号 contactorOrder
				esContactInfo.setContactorOrder(eCInfoChktemp
						.getContactorOrder());
				// 联系人类型 contactorTp
				esContactInfo.setContactorTp(eCInfoChktemp.getContactorTp());

				// 联系人姓名 contactorNm
				esContactInfo.setContactorNm(eCInfoChktemp.getContactorNm());

				// 联系人手机 contactorCell
				esContactInfo
						.setContactorCell(eCInfoChktemp.getContactorCell());

				// 联系人座机contactorTel
				esContactInfo.setContactorTel(eCInfoChktemp.getContactorTel());

				// 联系人传真contactorFax
				esContactInfo.setContactorFax(eCInfoChktemp.getContactorFax());

				// 联系人邮箱contactorMail
				esContactInfo
						.setContactorMail(eCInfoChktemp.getContactorMail());

				// "企业产品权限审核临时表"的实体类 EsEproductInfoChktempRepository
				// 根据es_eproduct_info_chktemp.e_id=es_enterprise_info_chktemp.e_id
				//取es_eproduct_info_chktemp所有记录，
				// 将对应记录insert ES_EPRODUCT_INFO表（UID除外）

				EsEproductInfo esEproductInfo = new EsEproductInfo();

				// 企业编号 eId
				esEproductInfo.setEId(esEproductInfoChktemp.getEId());

				// 支持业务类型 productTp
				esEproductInfo.setProductTp(esEproductInfoChktemp
						.getProductTp());

				// e）根据ES_ENTERPRISE_INFO_CHKTEMP.E_ID
				// EsEnterpriseInfoChktemp.eid
				// 删除ES_ENTERPRISE_INFO_CHKTEMP表对应记录esEnterpriseInfoChktempRepository
				esEnterpriseInfoChktempRepository.delete(infoChktemp.getEId());

				// 根据es_contact_info_chktemp.e_id=es_enterprise_info_chktemp.e_id
				// 删除es_contact_info_chktemp所有记录
				if (eCInfoChktemp.getEId().equals(infoChktemp.getEId())) {
				esContactInfoChktempRepository.delete(eCInfoChktemp);
				}

				// ES_EPRODUCT_INFO_CHKTEMP.E_ID=ES_ENTERPRISE_INFO_CHKTEMP.E_ID
				// 根据esEproductInfoChktemp.eid = esEnterpriseInfoChktemp.eid
				// 删除ES_EPRODUCT_INFO_CHKTEMP所有记录
				if (esEproductInfoChktemp.getEId().equals(infoChktemp.getEId())) {
				esEproductInfoChktempRepository
							.delete(esEproductInfoChktemp);
				}
			}

			// 2. 操作类型为 修改时
			// TODO .....
			if (infoChktemp.getOpeType() == "2") {
				// 根据ES_ENTERPRISE_INFO_CHKTEMP.E_ID update
				// ES_ENTERPRISE_INFO_CHKTEMP表对应记录
				// E_STATUS：正常
				// CHK_STATUS：风控审核通过
				// RISK_CHK_TIME：当前时间
				// RISK_CHECKER：当前用户
				// RISK_CHK_COMMENT：页面的审核意见
				// protected void
				// updateEsEnterpriseInfoChktemp(EsEnterpriseInfoChktemp
				// esEnterpriseInfoChktemp){
				// /**
				// * 将Tab页1和Tab页2的数据update ES_ENTERPRISE_INFO_CHKTEMP表
				// */根据ES_ENTERPRISE_INFO.E_ID=ES_ENTERPRISE_INFO_CHKTEMP.E_ID
				//将es_enterprise_info_chktemp表除UID和OPE_TYPE外的所有字段
				//update到 es_enterprise_info表，同时update es_enterprise_info. in_update=“2”
				// 1.2.b
				EsEnterpriseInfoChktemp queryEsEnterpriseInfoChktemp = esEnterpriseInfoChktempRepository
						.findByUid(infoChktemp.getUid());
				Object filterObject = filterAttributes(
						queryEsEnterpriseInfoChktemp, infoChktemp);
				EsEnterpriseInfoChktemp updateEsEnterpriseInfoChktemp = (EsEnterpriseInfoChktemp) filterObject;
				esEnterpriseInfoChktempRepository.save(updateEsEnterpriseInfoChktemp);
				//同时update
				// ES_ENTERPRISE_INFO.
				// IN_UPDATE=“2”
				info.setInUpdate(EsEnterpriseInfoConstants.IN_UPDATE_N);
			
				
				// 1.2.c
			    //根据ES_CONTACT_INFO.E_ID=ES_ENTERPRISE_INFO_CHKTEMP.E_ID删除
				// es_contact_info表所有记录
				EsContactInfo esContaceInfo1 = (EsContactInfo) esContactInfoRepository.findByEId(eid);
				
				if(eCInfoChktemp.getEId()
						.equals(infoChktemp.getEId())){
					//esContactInfoChktempRepository.delete(esContactInfo);
					 EsContactInfo esContactInfo2 = new EsContactInfo();
					 
					 // 企业编号 eid
					 esContactInfo2.setEId(esContaceInfo1.getEId());
					 
					 //联系人序号  contactorOrder
					 esContactInfo2.setContactorOrder(esContaceInfo1.getContactorOrder());
					 
					 //联系人类型 contactorTp
					 esContactInfo2.setContactorTp(esContaceInfo1.getContactorTp());
					 
					 //联系人姓名  contactorNm
					 esContactInfo2.setContactorNm(esContaceInfo1.getContactorNm());
 
					 //联系人手机  contactorCell
					 esContactInfo2.setContactorCell(esContaceInfo1.getContactorCell());
					 
					 //联系人座机  contactorTel
					 esContactInfo2.setContactorTel(esContaceInfo1.getContactorTel());
					 
					 //联系人传真  contactorFax
					 esContactInfo2.setContactorFax(esContaceInfo1.getContactorFax());
					 
					 // 联系人邮箱 contactorMail
					 esContactInfo2.setContactorMail(esContaceInfo1.getContactorMail());
 
				}
				
				//2.d）根据es_eproduct_info.e_id=es_enterprise_info_chktemp.e_id删除es_eproduct_info表所有记录；
				//	根据es_eproduct_info_chktemp.e_id=es_enterprise_info_chktemp.e_id
				//取es_eproduct_info_chktemp所有记录，
				//将对应记录insert es_eproduct_info表（uid除外）
				EsEproductInfo esEproductInfo = (EsEproductInfo) esEproductInfoChktempRepository
						.findByEId(eid);
				
				/*if(esEproductInfoChktemp.getEId().equals(esEproductInfo.getEId())){
					esEproductInfoChktempRepository.delete(esEproductInfo);
					//企业编号
					esEproductInfo.setEId(esEproductInfoChktemp.getEId());
					
					//支持业务类型
					esEproductInfo.setProductTp(esEproductInfoChktemp.getProductTp());
						
				}*/
				//2.e）根据es_enterprise_info_chktemp.e_id删除es_enterprise_info_chktemp表对应记录
				       esEnterpriseInfoChktempRepository.delete(infoChktemp.getEId());
			
			//2.f  根据es_contact_info_chktemp.e_id=es_enterprise_info_chktemp.e_id
		   //      删除es_contact_info_chktemp所有记录
				       if (eCInfoChktemp.getEId().equals(infoChktemp.getEId())) {
							esContactInfoChktempRepository.delete(eCInfoChktemp);
				}
				       
			// 2.g  根据esEproductInfoChktemp.eid = esEnterpriseInfoChktemp.eid
			// 删除es_eproduct_info_chktemp所有记录
			if (esEproductInfoChktemp.getEId().equals(infoChktemp.getEId())) {
						esEproductInfoChktempRepository
									.delete(esEproductInfoChktemp);
				}
			}

		}
		// 审核为拒绝时
		if (AuditStatus.Refuse.value().equals(auditStatus)) {
			infoChktemp
					.setEStatus(EsEnterpriseInfoConstants.E_STATUS_HAS_REFUSED); // 设置企业状态为
																					// 已拒绝
			infoChktemp.setChkStatus(EsEnterpriseInfoConstants.CHK_STATUS_5); // 设置审核状态为
																				// 风控审核拒绝
		}
		infoChktemp.setOpeChkTime(new Date()); // 当前时间
		// TODO 当前用户取值问题。当前用户（用户名称/用户标识？？）应该来源于Session中
		infoChktemp.setOpeChecker(null); // 当前用户
		infoChktemp.setOpeChkComment(comment);
		boolean result = false;
		try {
			esEnterpriseInfoChktempRepository.save(infoChktemp);
			result = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

	/* (non-Javadoc)
	 * @see com.creditease.b2bsettle.basedata.service.RiskService#findByEId(java.lang.String)
	 */
	@Override
	public EsEnterpriseInfoChktemp findByEId(String eid) {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see com.creditease.b2bsettle.basedata.service.RiskService#getEsContactInfoChktempDetailByEId(java.lang.String)
	 */
	@Override
	public List<EsContactInfoChktemp> getEsContactInfoChktempDetailByEId(
			String eId) {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see com.creditease.b2bsettle.basedata.service.RiskService#findEproductInfoChktempByEId(java.lang.String)
	 */
	@Override
	public List<EsEproductInfoChktemp> findEproductInfoChktempByEId(
			String eid) {
		// TODO Auto-generated method stub
		return null;
	}
}
