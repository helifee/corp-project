package com.creditease.b2bsettle.basedata.service.impl;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.creditease.b2bsettle.basedata.constant.AuditStatus;
import com.creditease.b2bsettle.basedata.constant.CommonConstants;
import com.creditease.b2bsettle.basedata.constant.OperateType;
import com.creditease.b2bsettle.basedata.model.City;
import com.creditease.b2bsettle.basedata.model.CityAudit;
import com.creditease.b2bsettle.basedata.model.PayType;
import com.creditease.b2bsettle.basedata.model.User;
import com.creditease.b2bsettle.basedata.repository.CityAuditRepository;
import com.creditease.b2bsettle.basedata.repository.CityRepository;
import com.creditease.b2bsettle.basedata.service.CityService;

/**
 * 市级地区管理
 * 
 * @author shihl
 *
 */
@Service
public class CityServiceImpl implements CityService {
	@Autowired
	private CityAuditRepository cityAuditRepository;
	@Autowired
	private CityRepository cityRepository;
	
	/**
	 * 
	 * 前台查询
	 * 
	 * */
	
	@Override
	public Page<City> findAll(Pageable pageable) {
		Page<City> page = cityRepository.findAll(pageable);
		return page;
	}

	/**
	 * 新增支付类型（存审核表）
	 * */ 
	@Override
	public long newCityService(CityAudit cityAudit) {
		CityAudit save = cityAuditRepository.save(cityAudit);
		return save.getCid();
	}

	/**
	 * 修改
	 * 适用范围：
	 * 已启用、未启用页面的新增、修改操作
	 * 当如参cid 为0时方法认为是已用页面传来的请求
	 * */
	@Override
	public void updateCity(long cid, long id, String cityName, String cityCode, String provinceName, String provinceCode, String modifier) {
		//标识已启用页面不能修改
		City citymd = cityRepository.findOne(id);
		citymd.setCanOperate(false);
		cityRepository.save(citymd);
		
		//在审核表新建或更新信息
		CityAudit cityAudit = null;
		String operateSummary = "";
		if(cid == 0){//cid为0时认为时已用页面发来的请求，需要在审核表里新增
			cityAudit = new CityAudit();
			cityAudit.setId(id);
			operateSummary = CommonConstants.updateUsed;
		}else{
			cityAudit = cityAuditRepository.findOne(cid);
			operateSummary = CommonConstants.updateNotUsed;
			cityAudit.setAuditText("");//清空上次的审核信息
		}
		cityAudit.setCityCode(cityCode);
		cityAudit.setCityName(cityName);
		cityAudit.setProvinceCode(provinceCode);
		cityAudit.setProvinceName(provinceName);
		
		cityAudit.setAuditStatus(AuditStatus.Audit);
		cityAudit.setOperateSummary(operateSummary);
		cityAudit.setOperateType(OperateType.UPDATE);
		cityAudit.setCreator(citymd.getCreator());
		cityAudit.setCreatedTime(citymd.getCreatedTime());
		cityAudit.setModifier(modifier);
		cityAudit.setModifyTime(new Date());
		cityAuditRepository.save(cityAudit);
	}

	
	/**
	 * 删除
	 * 适用范围：
	 * 已启用、未启用页面的删除操作
	 * 当如参cid 为null时方法认为是已用页面传来的请求
	 * */
	public void deleteCity(long cid, long id, boolean isDelte, String modifier) {
		//标识已启用页面不能修改
		City citymd = cityRepository.findOne(id);
		citymd.setCanOperate(false);
		cityRepository.save(citymd);
		
		//在审核表新建或更新信息
		CityAudit cityAudit = null;
		String operateSummary = "";
		if(cid == 0){//cid为0时认为时已用页面发来的请求，需要在审核表里新增
			cityAudit = new CityAudit();
			cityAudit.setId(id);
			operateSummary = CommonConstants.deleteUsed;
		}else{
			cityAudit = cityAuditRepository.findOne(cid);
			operateSummary = CommonConstants.deleteNotUsed;
			cityAudit.setAuditText("");//清空上次的审核信息
		}
		cityAudit.setCityCode(citymd.getCityCode());
		cityAudit.setCityName(citymd.getCityName());
		cityAudit.setProvinceCode(citymd.getProvinceCode());
		cityAudit.setProvinceName(citymd.getProvinceName());
		cityAudit.setDeleted(isDelte);
		cityAudit.setAuditStatus(AuditStatus.Audit);
		cityAudit.setOperateSummary(operateSummary);
		cityAudit.setOperateType(OperateType.DELETE);
		cityAudit.setCreator(citymd.getCreator());
		cityAudit.setCreatedTime(citymd.getCreatedTime());
		cityAudit.setModifier(modifier);
		cityAudit.setModifyTime(new Date());
		cityAuditRepository.save(cityAudit);
	}
	
	
	
	/**
	 * 
	 * 审核操作 
	 * 适用范围：
	 * 适用来自 已启用、未启用页面的新增、修改和删除操作的审核
	 * */
	@Override
	public String auditCity(long cid, String auditText,AuditStatus auditStatus, String auditor ) {
		CityAudit cityAudit =  cityAuditRepository.findOne(cid);
		City city = cityRepository.findOne(cityAudit.getId());
		//审核通过
		if(auditStatus.equals(AuditStatus.Through)){
			//更改审核表状态
			cityAudit.setAuditStatus(AuditStatus.Through);
			cityAudit.setAuditText(auditText);//审核操作不是修改，所以不更新modifer字段
			
			//复制审核表信息更新主表
			if(city == null){//审核新增、因为查不出数据、此时需要新建主表
				city = new City();
				city.setCityCode(cityAudit.getCityCode());
				city.setCityName(cityAudit.getCityName());
				city.setProvinceCode(cityAudit.getProvinceCode());
				city.setProvinceName(cityAudit.getProvinceName());
				city.setCreator(cityAudit.getCreator());
				city.setCreatedTime(cityAudit.getCreatedTime());
				city.setModifier(cityAudit.getModifier());
				city.setModifyTime(cityAudit.getModifyTime());
				city.setAuditor(auditor);
				city.setAuditTime(new Date());
				city.setDeleted(false);
				city.setCanOperate(true);
			}else{//审核修改或删除、此时需要更新主表
				city.setCityCode(cityAudit.getCityCode());
				city.setCityName(cityAudit.getCityName());
				city.setProvinceCode(cityAudit.getProvinceCode());
				city.setProvinceName(cityAudit.getProvinceName());
				city.setAuditor(auditor);
				city.setAuditTime(new Date());
				city.setModifier(cityAudit.getModifier());
				city.setModifyTime(cityAudit.getModifyTime());
				city.setDeleted(cityAudit.getOperateType().equals(OperateType.DELETE.name()));//如果当前审核通过的市删除操作，那么删除标识为true
				city.setCanOperate(true);
			}
		}else{//审核未通过
			cityAudit.setAuditStatus(AuditStatus.Refuse);
			cityAudit.setAuditText(auditText);
			city.setCanOperate(true);
		}
		city = cityRepository.save(city);//审核新增时insert，审核修改和删除时update
		cityAudit.setId(city.getId());//新增情况需要关联ID   无论任何时候主表和审核表都是有关系的所以此方法没问题
		cityAuditRepository.save(cityAudit);//更新操作
		return "1";
	}

}
