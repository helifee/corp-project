package com.creditease.b2bsettle.basedata.controller;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.creditease.b2bsettle.basedata.constant.CommonConstants;
import com.creditease.b2bsettle.basedata.dict.BizCommodity;
import com.creditease.b2bsettle.basedata.dict.ContactorTypeEnum;
import com.creditease.b2bsettle.basedata.dict.CreditLevel;
import com.creditease.b2bsettle.basedata.dict.EnterpriseCategoryEnum;
import com.creditease.b2bsettle.basedata.dict.EnterpriseOperateTypeEnum;
import com.creditease.b2bsettle.basedata.dict.EnterpriseStatusEnum;
import com.creditease.b2bsettle.basedata.dict.EnterpriseTypeEnum;
import com.creditease.b2bsettle.basedata.dict.HolidayBizEnum;
import com.creditease.b2bsettle.basedata.dict.OperationAuditStatusEnum;
import com.creditease.b2bsettle.basedata.dict.ProductBusinessType;
import com.creditease.b2bsettle.basedata.dto.EsEnterpriseAddOperateDto;
import com.creditease.b2bsettle.basedata.model.EsContactInfo;
import com.creditease.b2bsettle.basedata.model.EsContactInfoChktemp;
import com.creditease.b2bsettle.basedata.model.EsEnterpriseInfo;
import com.creditease.b2bsettle.basedata.model.EsEnterpriseInfoChktemp;
import com.creditease.b2bsettle.basedata.model.EsEproductInfo;
import com.creditease.b2bsettle.basedata.model.EsEproductInfoChktemp;
import com.creditease.b2bsettle.basedata.service.EsEnterpriseInfoManageService;

/** 
 * Description: 企业信息查询
 *
 * @author leileiyuan
 * Create Date: 2015年6月27日 下午6:04:44
 */
@Controller
@RequestMapping("/enterpriseInfoManage")
public class EsEnterpriseInfoManageController {
	@Autowired
	private EsEnterpriseInfoManageService esEnterpriseInfoManageService;
	
	@RequestMapping("/managePage")
	public String operateVerifyPage(Model model){
		// 审核状态
		model.addAttribute("auditStatus", OperationAuditStatusEnum.values());
		// 企业状态
		model.addAttribute("enterpriseStatus", EnterpriseStatusEnum.values());
		// 企业分类  内/外部企业
		model.addAttribute("eCategory", EnterpriseCategoryEnum.values());		
		//  企业类型 
		model.addAttribute("eType", EnterpriseTypeEnum.values());
		
		// TODO 法人证件类型
		
		// 节假日营业   （节假日是否营业）
		model.addAttribute("holidayBiz", HolidayBizEnum.values());
		// 营业地段
		model.addAttribute("bizCommodity", BizCommodity.values());
		
		// TODO 行业大类
		// TODO 行业细分
		
		// 信用级别
		model.addAttribute("creditLevel", CreditLevel.values());
		// 联系人类型
		model.addAttribute("contactorType", ContactorTypeEnum.values());
		
		// 操作类型
		model.addAttribute("operateTypeEnum", EnterpriseOperateTypeEnum.values());
		
		return "enterpriseInfoManage/queryManage";
	}
	
	@RequestMapping(value = "/queryManageDatas",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> queryManageDatas(
			Model model,
			@RequestParam(value = "firstResult", required = false) Integer firstResult,
			@RequestParam(value = "eId", required = false) String eId,
			@RequestParam(value = "eName", required = false) String eName,
			@RequestParam(value = "eStatus", required = false) String eStatus,
			@RequestParam(value = "chkStatus", required = false) String chkStatus,
			@RequestParam(value = "joinStartDate", required = false) String joinDateFrom,
			@RequestParam(value = "joinEndDate", required = false) String joinDateTo,
			@RequestParam(value = "eDueStartDate", required = false) String eDueDateFrom,
			@RequestParam(value = "eDueEndDate", required = false) String eDueDateTo){
		Map<String,Object> map  = new HashMap<String, Object>();
		if (firstResult == null) {
			firstResult = 0;// 默认从第一条数据开始，mysql第一条数据的标识为0
		}
		if("".equals(eStatus)){
			eStatus = null;// 企业状态
		}
		if("".equals(chkStatus)){
			chkStatus = null;// 审核状态
		}
		
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date joinStartDate = null;
		Date joinEndDate = null;
		Date eDueStartDate = null;
		Date eDueEndDate = null;
		try {
			joinStartDate = sdf.parse(joinDateFrom);
			joinEndDate = sdf.parse(joinDateTo);
		} catch (ParseException e) {
			e.printStackTrace();
			// TODO 日期格式 不正确，给出日期格式错误提示；或者忽略这个日期格式，发生异常时日期值为null
		}catch (NullPointerException e2){
			e2.printStackTrace();
		}
		try {
			eDueStartDate = sdf.parse(eDueDateFrom);
			eDueEndDate = sdf.parse(eDueDateTo);
		} catch (ParseException e) {
			e.printStackTrace();
			// TODO 日期格式 不正确，给出日期格式错误提示；或者忽略这个日期格式，发生异常时日期值为null
		}catch (NullPointerException e2){
			e2.printStackTrace();
		}
		
		Pageable pageable = new PageRequest(firstResult, CommonConstants.DEFAULT_PAGE_SIZE);
		
		Page<EsEnterpriseInfo> page = esEnterpriseInfoManageService.queryEsEnterpriseInfoPageListByCondition(eId, eName, joinStartDate, joinEndDate, eDueStartDate, eDueEndDate, eStatus, chkStatus, pageable);
		// 字典项渲染
		for (EsEnterpriseInfo chktemp : page) {
			// 企业分类  内/外部企业
			chktemp.setECategory(EnterpriseCategoryEnum.getName(chktemp.getECategory()));
			// 企业类型 
			chktemp.setEType(EnterpriseTypeEnum.getName(chktemp.getEType()));
			// 企业状态
			String eStatusName = EnterpriseStatusEnum.getName(chktemp.getEStatus());
			chktemp.setEStatus(eStatusName);
			
			// 审核状态
			String chkStatusName = OperationAuditStatusEnum.getName(chktemp.getChkStatus());
			chktemp.setChkStatus(chkStatusName);
		}
		
		map.put("totalPages", page.getTotalPages());		// 总页数
		map.put("count", page.getTotalElements());			// 总记录数
		map.put("datas", page.getContent());				// 当前页数据
		map.put("currentPageNO", page.getNumber() + 1);		// 当前页码
		
		//mav.setViewName("enterpriseOperateVerify/queryOperateVerify");
		return map;
	}
	
	@RequestMapping(value = "/getDict")
	@ResponseBody
	public Map<String, Object> getEsEnterpriseInfoByEid(@RequestParam("eid") String eid) {
		Map<String, Object> map = new HashMap<String, Object>();
		// 企业分类  内/外部企业
		map.put("eCategory", EnterpriseCategoryEnum.values());		
		//  企业类型 
		map.put("eType", EnterpriseTypeEnum.values());
		// TODO 法人证件类型
		
		// 节假日营业   （节假日是否营业）
		map.put("holidayBiz", HolidayBizEnum.values());
		// 营业地段
		map.put("bizCommodity", BizCommodity.values());
		// TODO 行业大类
		// TODO 行业细分
		
		// 信用级别
		map.put("creditLevel", CreditLevel.values());
		// 联系人类型
		map.put("contactorType", ContactorTypeEnum.values());
		
		return map;
	}

	/**
	 * Description: 企业信息查询-->企业新增
	 *
	 * @param esEnterpriseAddOperateDto  
	 * 		企业信息新增时，封装提交的参数：EsEnterpriseInfoChktemp（企业基本信息/经营信息 参数）,
	 * 		EsEproductInfoChktemp（联系人信息列表 参数）,EsEproductInfoChktemp(产品信息列表 参数)
	 * @return
	 * @author leileiyuan
	 * Create Date: 2015年6月29日 上午11:18:07
	 */
	@RequestMapping(value = "/save", method = RequestMethod.POST)
	@ResponseBody
	public boolean save(EsEnterpriseAddOperateDto enterpriseDto) {
		EsEnterpriseInfoChktemp esEnterpriseInfoChktemp = enterpriseDto.getEsEnterpriseInfoChktemp();
		List<EsContactInfoChktemp> esContactInfoChktempList = enterpriseDto.getEsContactInfoChktemps();
		List<EsEproductInfoChktemp> esEproductInfoChktempList  = new ArrayList<EsEproductInfoChktemp>();
		
		List<EsEproductInfoChktemp> productInfoList = enterpriseDto.getEsEproductInfoChktemps();
		for (EsEproductInfoChktemp info : productInfoList) {
			if(info.getProductTp()!=null){
				esEproductInfoChktempList.add(info);
			}
		}
		
		boolean result = false;
		try {
			esEnterpriseInfoManageService.saveEsEnterpriseAllInfoToChktempTable(esEnterpriseInfoChktemp, esContactInfoChktempList, esEproductInfoChktempList);
			result = true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

}
