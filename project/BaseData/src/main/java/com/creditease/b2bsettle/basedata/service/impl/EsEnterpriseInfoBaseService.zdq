/**  
* @Title: EsEnterpriseInfoBaseService.java
* @Package com.creditease.b2bsettle.basedata.service.impl
* @Description: TODO
* @author zhanghaiyang6 
* @date 2015年6月17日 下午3:07:44
* @version V1.0  
*/ 
package com.creditease.b2bsettle.basedata.service.impl;

import java.lang.reflect.Field;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;

import com.creditease.b2bsettle.basedata.model.EsContactInfoChktemp;
import com.creditease.b2bsettle.basedata.model.EsEnterpriseInfoChktemp;
import com.creditease.b2bsettle.basedata.model.EsEproductInfoChktemp;
import com.creditease.b2bsettle.basedata.repository.EsContactInfoChktempRepository;
import com.creditease.b2bsettle.basedata.repository.EsContactInfoRepository;
import com.creditease.b2bsettle.basedata.repository.EsEnterpriseInfoChktempRepository;
import com.creditease.b2bsettle.basedata.repository.EsEnterpriseInfoRepository;
import com.creditease.b2bsettle.basedata.repository.EsEproductInfoChktempRepository;
import com.creditease.b2bsettle.basedata.repository.EsEproductInfoRepository;

/**
 * @ClassName: EsEnterpriseInfoBaseService
 * @Description: 抽象类，用于抽象企业信息管理所有服务的公用方法
 * @author zhanghaiyang6
 * @date 2015年6月17日 下午3:07:44
 *
 */
public abstract class EsEnterpriseInfoBaseService {
	
	/**Osss
	 * 对“企业基本信息表”进行操作
	 */
	@Autowired
	protected EsEnterpriseInfoRepository esEnterpriseInfoRepository;
	
	/**
	 * 对“企业基本信息表审核临时表”进行操作
	 */
	@Autowired
	protected EsEnterpriseInfoChktempRepository esEnterpriseInfoChktempRepository;
	
	/**
	 * 对“企业产品权限表”进行操作
	 */
	@Autowired
	protected EsEproductInfoRepository esEproductInfoRepository;
	
	/**
	 * 对“企业产品权限审核临时表”进行操作
	 */
	@Autowired
	protected EsEproductInfoChktempRepository esEproductInfoChktempRepository;
	
	/**
	 * 对“企业联系人信息表”进行操作
	 */
	@Autowired
	protected EsContactInfoRepository esContactInfoRepository;
	
	/**
	 * 对“企业联系人信息审核临时表”进行操作
	 */
	@Autowired
	protected EsContactInfoChktempRepository esContactInfoChktempRepository;

	/**
	 * 
	* @Title: filterAttributes
	* @Description:  过滤两个实体类：类2中有字段值的项更新到类1中去
	* @param @param obj1
	* @param @param obj2
	* @param @return    
	* @return Object   
	* @throws
	 */
    public Object filterAttributes(Object obj1,Object obj2){
    	
    	Object resultObject = null;
    	
    	if(obj1!=null&&obj2!=null){
    		
    		
    		 try {
    				//得到类对象  
    				Class objCla = (Class) obj2.getClass();  
    				 
    				/* 
    				 * 得到类中的所有属性集合 
    				 */  
    				Field[] fs = objCla.getDeclaredFields(); 
    				
    				for(int i = 0 ; i < fs.length; i++){  
    				    Field f = fs[i];  
    				    f.setAccessible(true); //设置些属性是可以访问的  
    				    Object val = f.get(obj2);//得到此属性的值     
    				    
    				    String propertyName = f.getName();//属性名称
    				 
    				    String propertyType = f.getType().toString();//得到此属性的类型  
    				    
    				    if (propertyType.endsWith("String")) { 
    				    	 if(StringUtils.isNotEmpty((CharSequence) val)){
    				    		 resultObject = changeObjectPropertyValue(obj1,propertyName,val);
    				    	 }
    				 
    				    }else if(propertyType.endsWith("Date") ){  
    				    	 if(null!= val){
    				    		 resultObject = changeObjectPropertyValue(obj1,propertyName,val);
     				    	 }
    				    }else if(propertyType.endsWith("int")){  
    			             if((Integer)val>0){
    			            	 resultObject = changeObjectPropertyValue(obj1,propertyName,val);
    			             }
    				    }else if(propertyType.endsWith("Integer")){  
	   			             if(null!= val){
	   			            	resultObject = changeObjectPropertyValue(obj1,propertyName,val);
				             }
				        }else if(propertyType.endsWith("long")){  
   			                 if((Long)val>0){
   			                	resultObject = changeObjectPropertyValue(obj1,propertyName,val);
   			                 }
    				    }else if(propertyType.endsWith("Long")){  
  			                 if(null!= val){
  			                	resultObject = changeObjectPropertyValue(obj1,propertyName,val);
  			                 }
   				        }else if(propertyType.endsWith("double")){  
    			             if((Double)val>0){
    			            	 resultObject = changeObjectPropertyValue(obj1,propertyName,val);
    			             }
    				    }else if(propertyType.endsWith("Double")){  
				             if(null!= val){
				            	 resultObject = changeObjectPropertyValue(obj1,propertyName,val);
				             }
				       }else if(propertyType.endsWith("boolean")){  
	   				    	if((Boolean)val==true||(Boolean)val==false){
	   				    		resultObject = changeObjectPropertyValue(obj1,propertyName,val);
					    	 }
				       } else if(propertyType.endsWith("Boolean")){  
    				    	if(val!=null){
    				    		resultObject = changeObjectPropertyValue(obj1,propertyName,val);
    				    	 }
    				    }  
    				     
    				}
    			} catch (SecurityException e) {
    				e.printStackTrace();
    			} catch (IllegalArgumentException e) {
    				e.printStackTrace();
    			} catch (IllegalAccessException e) {
    				e.printStackTrace();
    			}  
    	}
    	return resultObject;
    }
    
    /**
     * 
    * @Title: changeObjectPropertyValue
    * @Description: 用反射将某个类的对象中的指定参数值修改成value值
    * @param @param obj
    * @param @param propertyName 属性名
    * @param @param value 要修改成的值
    * @param @return    
    * @return Object   
    * @throws
     */
    private static Object changeObjectPropertyValue(Object obj,String propertyName,Object value){
    	if(null!=obj){
    		try {
				Field f1 = obj.getClass().getDeclaredField(propertyName);
				
				f1.setAccessible(true);
				f1.set(obj, value);
			} catch (NoSuchFieldException e) {
				e.printStackTrace();
			} catch (SecurityException e) {
				e.printStackTrace();
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			}
    	}
    	return obj;
    }
    
    /**
     * 
    * @Title: updateEsEnterpriseInfoChktemp
    * @Description: 更新EsEnterpriseInfoChktemp表信息
    * @param @param esEnterpriseInfoChktemp    
    * @return void   
    * @throws
     */
    protected void updateEsEnterpriseInfoChktemp(EsEnterpriseInfoChktemp esEnterpriseInfoChktemp){
		/**
		 * 将Tab页1和Tab页2的数据update ES_ENTERPRISE_INFO_CHKTEMP表
		 */
		EsEnterpriseInfoChktemp queryEsEnterpriseInfoChktemp = esEnterpriseInfoChktempRepository.findByUid(esEnterpriseInfoChktemp.getUid());
		Object filterObject = filterAttributes(queryEsEnterpriseInfoChktemp, esEnterpriseInfoChktemp);
		EsEnterpriseInfoChktemp updateEsEnterpriseInfoChktemp = (EsEnterpriseInfoChktemp)filterObject;
		esEnterpriseInfoChktempRepository.save(updateEsEnterpriseInfoChktemp);
    }   
    /**
     * 
    * @Title: updateEsContactInfoChktemp
    * @Description:更新EsContactInfoChktemp记录：删除现有EID对应所有记录，重新插入新记录
    * @param @param eId
    * @param @param inputList    
    * @return void   
    * @throws
     */
    protected void updateEsContactInfoChktemp(String eId,List<EsContactInfoChktemp> inputList){
		/**
		 * 将es_contact_info_chktemp表中原es_contact_info_chktemp.e_id=对应记录es_enterprise_info_chktemp.e_id的数据删除
		 */
		List<EsContactInfoChktemp> deleteEsContactInfoChktempList = esContactInfoChktempRepository.findByEId(eId);
		esContactInfoChktempRepository.delete(deleteEsContactInfoChktempList);
		/*
		 * 将Tab页3的记录Insert ES_CONTACT_INFO_CHKTEMP表对应字段,（可能有多条记录
		 */
		esContactInfoChktempRepository.save(inputList);
    }
    
    /**
     * 
    * @Title: updateEsEproductInfoChktemp
    * @Description: 更新EsEproductInfoChktemp记录：删除现有EID对应所有记录，重新插入新记录
    * @param @param eId
    * @param @param inputList    
    * @return void   
    * @throws
     */
    protected void updateEsEproductInfoChktemp(String eId,List<EsEproductInfoChktemp> inputList){
		/**
		 * 将ES_EPRODUCT_INFO_CHKTEMP表中原ES_EPRODUCT_INFO_CHKTEMP.E_ID=对应记录ES_ENTERPRISE_INFO_CHKTEMP.E_ID的数据删除
		 */
		List<EsEproductInfoChktemp> deleteEsEproductInfoChktempList = esEproductInfoChktempRepository.findByEId(eId);
		esEproductInfoChktempRepository.delete(deleteEsEproductInfoChktempList);
		/**
		 * 将Tab页4的记录Insert ES_EPRODUCT_INFO_CHKTEMP表对应字段，其中ES_EPRODUCT_INFO_CHKTEMP.E_ID=对应记录的ES_ENTERPRISE_INFO_CHKTEMP.E_ID（可能有多条记录）
		 */
		esEproductInfoChktempRepository.save(inputList);
    }
    
    
    /**
	 * 
	* @Title: queryEsEnterprisePendingInfoPageListByCondition
	* @Description: 企业待处理信息查询--带分页查询
	* @param @param eId 企业编号
	* @param @param eName 企业名
	* @param @param eStatus 企业状态
	* @param @param joinDateFrom
    * @param @param joinDateTo
	* @param @param eDueDateFrom 到期时间开始
	* @param @param eDueDateTo 到期时间结束
	* @param @param pageable 分页状态
	* @param @return    
	* @return Page<EsEnterpriseInfoChktemp>   
	* @throws
	 */
	public Page<EsEnterpriseInfoChktemp> queryEsEnterprisePendingInfoPageListByCondition(String eId, String eName,Date joinDateFrom,Date joinDateTo, String eStatus, Date eDueDateFrom,Date eDueDateTo,Pageable pageable) {
		Specification<EsEnterpriseInfoChktemp> spec = makeQueryMultConditionForEsEnterpriseInfoChktempPage(eId,eName,joinDateFrom,joinDateTo,eDueDateFrom,eDueDateTo,eStatus);
		return esEnterpriseInfoChktempRepository.findAll(spec, pageable);
	}
	
	 /**
	  * 
	 * @Title: makeQueryMultConditionForEsEnterpriseInfoChktempPage
	 * @Description: 组装若干个查询条件---企业风控和运营信息查询时使用
	 * @param @param eId
	 * @param @param eName
	 * @param @param joinDateFrom
	 * @param @param joinDateTo
	 * @param @param eDueDateFrom
	 * @param @param eDueDateTo
	 * @param @param eStatus
	 * @param @return    
	 * @return Specification<EsEnterpriseInfoChktemp>   
	 * @throws
	  */
	 public abstract  Specification<EsEnterpriseInfoChktemp> makeQueryMultConditionForEsEnterpriseInfoChktempPage(String eId, String eName, Date joinDateFrom, Date joinDateTo,Date eDueDateFrom, Date eDueDateTo,String eStatus);
	
	

}
