package com.creditease.b2bsettle.basedata.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.creditease.b2bsettle.basedata.constant.AuditStatus;
import com.creditease.b2bsettle.basedata.constant.CommonConstants;
import com.creditease.b2bsettle.basedata.constant.OperateType;
import com.creditease.b2bsettle.basedata.model.CorpGroupRelation;
import com.creditease.b2bsettle.basedata.model.CorpGroupRelationAudit;
import com.creditease.b2bsettle.basedata.model.CorpGroup;
import com.creditease.b2bsettle.basedata.repository.CorpGroupRelationAuditRepository;
import com.creditease.b2bsettle.basedata.repository.CorpGroupRelationRepository;
import com.creditease.b2bsettle.basedata.repository.CorpGroupRepository;
import com.creditease.b2bsettle.basedata.service.CorpGroupRelationService;


/**
 *  企业与组关系管理
 * 
 * @author shihl
 *
 */
@Service
public class CorpGroupRelationServiceImpl implements CorpGroupRelationService {
	
	@Autowired
	private CorpGroupRelationAuditRepository corpGroupRelationAuditRepository;
	@Autowired
	private CorpGroupRelationRepository corpGroupRelationRepository;
	@Autowired
	private CorpGroupRepository corpGroupRepository;

	/**
	 * 新增支付类型（存审核表）
	 * */ 
	@Override
	public String newCorpGroupRelationService(String groupName, List<String> list, String created) {
		//insert审核表
		CorpGroupRelationAudit corpGroupRelationAudit = new CorpGroupRelationAudit();
		corpGroupRelationAudit.setGroupName(groupName);
		corpGroupRelationAudit.setOperateType(OperateType.ADD);
		corpGroupRelationAudit.setOperateSummary(CommonConstants.AddUsed);
		corpGroupRelationAudit.setAuditStatus(AuditStatus.Audit);
		corpGroupRelationAudit.setCreator(created);
		corpGroupRelationAudit.setCreatedTime(new Date());
		corpGroupRelationAudit.setModifier(created);
		corpGroupRelationAudit.setModifyTime(new Date());
		CorpGroupRelationAudit save = corpGroupRelationAuditRepository.save(corpGroupRelationAudit);

		//insert审核子表
		List<CorpGroupRelation> relationList = new ArrayList<CorpGroupRelation>();
		for(int i=0; i<list.size(); i++){
			
			CorpGroupRelation corpGroupRelation = new CorpGroupRelation();
			corpGroupRelation.setId(1);
			corpGroupRelation.setCorp(list.get(i));
//			corpGroupRelation.setCorpGroup();//组编码，此时没有编码，因为主表还未生成
			corpGroupRelation.setCid(save.getCid());//审核编号
			corpGroupRelation.setCreator(created);
			corpGroupRelation.setCreatedTime(new Date());
			corpGroupRelation.setModifier(created);
			corpGroupRelation.setModifyTime(new Date());
//			corpGroupRelation.setAuditor("000");
			corpGroupRelation.setAuditTime(new Date());
			corpGroupRelation.setCanOperate(false);
			corpGroupRelation.setDeleted(false);
			relationList.add(corpGroupRelation);
		}
		corpGroupRelationRepository.save(relationList);
		return "1";
		
	}

	/**
	 * 修改
	 * 适用范围：
	 * 已启用、未启用页面的新增、修改操作
	 * 当如参cid 为0时方法认为是已用页面传来的请求
	 * */
	@Override
	public void updateCorpGroupRelation(long cid, long id, String groupName,List <String> listEid, String modifier) {
		//标识已启用页面不能修改
		CorpGroup corpGroupmd = corpGroupRepository.findOne(id);
		corpGroupmd.setCanOperate(false);
		corpGroupRepository.save(corpGroupmd);
		
		
		//在审核表新建或更新信息
		CorpGroupRelationAudit corpGroupRelationAudit = null;//审核主表
		List<CorpGroupRelation> relationList = new ArrayList<CorpGroupRelation>();//审核子表
		String operateSummary = "";
		if(cid == 0){//cid为0时认为时已用页面发来的请求，需要在审核表里新增
			corpGroupRelationAudit = new CorpGroupRelationAudit();
			corpGroupRelationAudit.setId(id);
			operateSummary = CommonConstants.updateUsed;
			corpGroupRelationAudit.setGroupName(groupName);
			corpGroupRelationAudit.setAuditStatus(AuditStatus.Audit);
			corpGroupRelationAudit.setOperateSummary(operateSummary);
			corpGroupRelationAudit.setOperateType(OperateType.UPDATE);
			corpGroupRelationAudit.setCreator(corpGroupmd.getCreator());
			corpGroupRelationAudit.setCreatedTime(corpGroupmd.getCreatedTime());
			corpGroupRelationAudit.setModifier(modifier);
			corpGroupRelationAudit.setModifyTime(new Date());
			corpGroupRelationAudit = corpGroupRelationAuditRepository.save(corpGroupRelationAudit);
			
			for(int i=0; i<listEid.size(); i++){
				CorpGroupRelation corpGroupRelation = new CorpGroupRelation();
				corpGroupRelation.setCid(corpGroupRelationAudit.getCid());//审核编号,和审核表关联
				corpGroupRelation.setCorp(listEid.get(i));
				corpGroupRelation.setCorpGroup(corpGroupmd.getId());//组编码  审核表id 就是groupCode 
				corpGroupRelation.setCreator(corpGroupmd.getCreator());
				corpGroupRelation.setCreatedTime(new Date());
				corpGroupRelation.setModifier(modifier);
				corpGroupRelation.setModifyTime(new Date());
//				corpGroupRelation.setAuditor("000");
//				corpGroupRelation.setAuditTime(new Date());
				corpGroupRelation.setCanOperate(false);
				corpGroupRelation.setDeleted(false);
				relationList.add(corpGroupRelation);
			}
			corpGroupRelationRepository.save(relationList);
		}else{
			corpGroupRelationAudit = corpGroupRelationAuditRepository.findOne(cid);
			operateSummary = CommonConstants.updateNotUsed;
			corpGroupRelationAudit.setAuditText("");//清空上次的审核信息
			corpGroupRelationAudit.setGroupName(groupName);
			corpGroupRelationAudit.setAuditStatus(AuditStatus.Audit);
			corpGroupRelationAudit.setOperateSummary(operateSummary);
			corpGroupRelationAudit.setOperateType(OperateType.UPDATE);
			corpGroupRelationAudit.setCreator(corpGroupmd.getCreator());
			corpGroupRelationAudit.setCreatedTime(corpGroupmd.getCreatedTime());
			corpGroupRelationAudit.setModifier(modifier);
			corpGroupRelationAudit.setModifyTime(new Date());
			corpGroupRelationAudit = corpGroupRelationAuditRepository.save(corpGroupRelationAudit);
			
			for(int i=0; i<listEid.size(); i++){
				CorpGroupRelation corpGroupRelation = new CorpGroupRelation();
				corpGroupRelation.setCid(corpGroupRelationAudit.getCid());//审核编号,和审核表关联
				corpGroupRelation.setCorp(listEid.get(i));
				corpGroupRelation.setCorpGroup(corpGroupmd.getId());//组编码  审核表id 就是groupCode 
				corpGroupRelation.setCreator(corpGroupmd.getCreator());
				corpGroupRelation.setCreatedTime(new Date());
				corpGroupRelation.setModifier(modifier);
				corpGroupRelation.setModifyTime(new Date());
//				corpGroupRelation.setAuditor("000");
//				corpGroupRelation.setAuditTime(new Date());
				corpGroupRelation.setCanOperate(false);
				corpGroupRelation.setDeleted(false);
				relationList.add(corpGroupRelation);
			}
			corpGroupRelationRepository.save(relationList);
		}
	}

	
	/**
	 * 删除
	 * 适用范围：
	 * 已启用、未启用页面的删除操作
	 * 当如参cid 为null时方法认为是已用页面传来的请求
	 * */
	public void deleteCorpGroupRelation(long cid, long id, boolean isDelte, String modifier) {
		//标识已启用页面不能修改
		CorpGroup corpGroupmd = corpGroupRepository.findOne(id);
		corpGroupmd.setCanOperate(false);
		corpGroupRepository.save(corpGroupmd);
		
		
		
		//在审核表新建或更新信息
		CorpGroupRelationAudit corpGroupRelationAudit = null;
		String operateSummary = "";
		if(cid == 0){//cid为0时认为时已用页面发来的请求，需要在审核表里新增
			corpGroupRelationAudit = new CorpGroupRelationAudit();
			corpGroupRelationAudit.setId(id);
			operateSummary = CommonConstants.deleteUsed;
		}else{
			corpGroupRelationAudit = corpGroupRelationAuditRepository.findOne(cid);
			operateSummary = CommonConstants.deleteNotUsed;
			corpGroupRelationAudit.setAuditText("");//清空上次的审核信息
		}
		corpGroupRelationAudit.setGroupName(corpGroupmd.getGroupName());
		corpGroupRelationAudit.setAuditStatus(AuditStatus.Audit);
		corpGroupRelationAudit.setOperateSummary(operateSummary);
		corpGroupRelationAudit.setOperateType(OperateType.DELETE);
		corpGroupRelationAudit.setCreator(corpGroupmd.getCreator());
		corpGroupRelationAudit.setCreatedTime(corpGroupmd.getCreatedTime());
		corpGroupRelationAudit.setModifier(modifier);
		corpGroupRelationAudit.setModifyTime(new Date());
		corpGroupRelationAudit = corpGroupRelationAuditRepository.save(corpGroupRelationAudit);
		
		//审核子表处理
		List<CorpGroupRelation> relationList = corpGroupRelationRepository.findByCanOperate(true);//旧的审核子表数据
		for(int i=0; i<relationList.size(); i++){
			relationList.get(i).setId(0);
			relationList.get(i).setCid(corpGroupRelationAudit.getCid());
			relationList.get(i).setCanOperate(false);//只有已启用的是true
			relationList.get(i).setModifier(modifier);
			relationList.get(i).setModifyTime(new Date());
		}
		corpGroupRelationRepository.save(relationList);//生成新的审核子表数据
	}
	
	
	
	/**
	 * 
	 * 审核操作 
	 * 适用范围：
	 * 适用来自 已启用、未启用页面的新增、修改和删除操作的审核
	 * cid 审核编号
	 * */
	@Override
	public String auditCorpGroupRelation(long cid, String auditText,AuditStatus auditStatus, String auditor ) {
		CorpGroupRelationAudit corpGroupRelationAudit =  corpGroupRelationAuditRepository.findOne(cid);//审核表
		List<CorpGroupRelation> newRelationList = corpGroupRelationRepository.findByCid(corpGroupRelationAudit.getCid());//新的企业与组关系，审核子表 
		List<CorpGroupRelation> oldRelationList = corpGroupRelationRepository.findByCanOperate(true);//旧的企业与组关系
		CorpGroup corpGroup = corpGroupRepository.findOne(corpGroupRelationAudit.getId());//主表
		
		//审核通过
		if(auditStatus.equals(AuditStatus.Through)){
			
			
			
			//复制审核表信息更新主表
			if(corpGroup == null){//审核新增、因为查不出数据、此时需要新建主表
				corpGroup = new CorpGroup();
				corpGroup.setGroupName(corpGroupRelationAudit.getGroupName());
				corpGroup.setCreator(corpGroupRelationAudit.getCreator());
				corpGroup.setCreatedTime(corpGroupRelationAudit.getCreatedTime());
				corpGroup.setModifier(corpGroupRelationAudit.getModifier());
				corpGroup.setModifyTime(corpGroupRelationAudit.getModifyTime());
				corpGroup.setAuditor(auditor);
				corpGroup.setAuditTime(new Date());
				corpGroup.setDeleted(false);
				corpGroup.setCanOperate(true);
			}else{//审核修改或删除、此时需要更新主表
				corpGroup.setGroupName(corpGroupRelationAudit.getGroupName());
				corpGroup.setAuditor(auditor);
				corpGroup.setAuditTime(new Date());
				corpGroup.setModifier(corpGroupRelationAudit.getModifier());
				corpGroup.setModifyTime(corpGroupRelationAudit.getModifyTime());
				corpGroup.setDeleted(corpGroupRelationAudit.getOperateType().equals(OperateType.DELETE));//如果当前审核通过的市删除操作，那么删除标识为true
				corpGroup.setCanOperate(true);
			}
			
			
			//保存主表
			corpGroup = corpGroupRepository.save(corpGroup);//审核新增时insert，审核修改和删除时update
			
			//更新审核表
			corpGroupRelationAudit.setId(corpGroup.getId());//新增情况需要关联ID   无论任何时候主表和审核表都是有关系的所以此方法没问题
			corpGroupRelationAudit.setAuditStatus(AuditStatus.Through);
			corpGroupRelationAudit.setAuditText(auditText);//审核操作不是修改，所以不更新modifer字段
			corpGroupRelationAuditRepository.save(corpGroupRelationAudit);//更新操作
			
			//更新审核子表状态(由于组和企业多对多的关系，采用CanOperate字段来标识的方式更新)
			if(oldRelationList != null){
				for(int i=0; i<oldRelationList.size(); i++){
					oldRelationList.get(i).setCanOperate(false);//此字段仅表示审核通过旧数据被禁用
				}
			}
			if(newRelationList != null){
				for(int i=0; i<newRelationList.size(); i++){
					newRelationList.get(i).setCanOperate(true);//此字段仅表示审核通过旧数据被禁用
					newRelationList.get(i).setCorpGroup(corpGroup.getId());
					newRelationList.get(i).setAuditor(auditor);
					newRelationList.get(i).setAuditTime(new Date());
					newRelationList.get(i).setDeleted(corpGroupRelationAudit.getOperateType().equals(OperateType.DELETE));
				}
			}
			corpGroupRelationRepository.save(oldRelationList);
			corpGroupRelationRepository.save(newRelationList);
			
			
		}else{//审核未通过
			corpGroup.setCanOperate(true);
			corpGroup = corpGroupRepository.save(corpGroup);//审核新增时insert，审核修改和删除时update
			
			//更新审核表
			corpGroupRelationAudit.setAuditStatus(AuditStatus.Refuse);
			corpGroupRelationAudit.setAuditText(auditText);
			corpGroupRelationAudit.setId(corpGroup.getId());//新增情况需要关联ID   无论任何时候主表和审核表都是有关系的所以此方法没问题
			corpGroupRelationAuditRepository.save(corpGroupRelationAudit);//更新操作
		}
		
		return "1";
	}


}
