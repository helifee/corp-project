package com.creditease.b2bsettle.basedata.controller;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.creditease.b2bsettle.basedata.constant.CommonConstants;
import com.creditease.b2bsettle.basedata.dict.BizCommodity;
import com.creditease.b2bsettle.basedata.dict.CreditLevel;
import com.creditease.b2bsettle.basedata.dict.EnterpriseCategoryEnum;
import com.creditease.b2bsettle.basedata.dict.EnterpriseStatusEnum;
import com.creditease.b2bsettle.basedata.dict.EnterpriseTypeEnum;
import com.creditease.b2bsettle.basedata.dict.HolidayBizEnum;
import com.creditease.b2bsettle.basedata.dict.OperationAuditStatusEnum;
import com.creditease.b2bsettle.basedata.dict.ProductBusinessType;
import com.creditease.b2bsettle.basedata.model.EsContactInfoChktemp;
import com.creditease.b2bsettle.basedata.model.EsEnterpriseInfoChktemp;
import com.creditease.b2bsettle.basedata.model.EsEproductInfoChktemp;
import com.creditease.b2bsettle.basedata.service.EsEnterpriseInfoRiskControlAuditingService;

/**
 * Description: 运营系统>企业管理>风控审核查询
 * 
 * @author chenmingli Create Date: 2015年6月24日 下午16:21:54
 */

@Controller
@RequestMapping(value = "/risk")
public class RiskController {

	/**
	 * Description: 查询风控审核列表
	 * 
	 * @param firstResult
	 *            从那一条数据开始查询记录。默认从第一条数据开始，mysql第一条数据的标识为0
	 * @param eId
	 *            企业编号
	 * @param eName
	 *            企业名称
	 * @param opeType
	 *            操作类型
	 * @param joinStartDate
	 *            入网开始时间 格式：yyyy-MM-dd
	 * @param joinStartDate
	 *            入网开始时间 格式：yyyy-MM-dd
	 * @param eDueStartDate
	 *            到期开始时间 格式：yyyy-MM-dd
	 * @param eDueEndDate
	 *            到期结束时间 格式：yyyy-MM-dd
	 * @return
	 * @Author chenmingli Create Date: 2015年6月24日 下午4:58:06
	 */
	@Autowired
	private EsEnterpriseInfoRiskControlAuditingService esEnterpriseInfoRiskControlAuditingService;

	
	@RequestMapping("/riskVerifyPage")
	public String operateVerifyPage(){
		return "riskcontrolaudit/queryriskControlAudit";
	}
	@RequestMapping(value = "/queryRiskVerifyDatas")
	@ResponseBody
	public ModelAndView queryRiskVerifyDatas(
			@RequestParam(value = "firstResult", required = false) Integer firstResult,
			@RequestParam(value = "eId", required = false) String eId,
			@RequestParam(value = "eName", required = false) String eName,
			@RequestParam(value = "opeType", required = false) String opeType,
			@RequestParam(value = "joinStartDate", required = false) String joinDateFrom,
			@RequestParam(value = "joinEndDate", required = false) String joinDateTo,
			@RequestParam(value = "eDueStartDate", required = false) String eDueDateFrom,
			@RequestParam(value = "eDueEndDate", required = false) String eDueDateTo) {

		if(firstResult == null){
			firstResult = 0; //mysql第一条数据默认从零开始 
		}
		ModelAndView mav = 	new ModelAndView();

		//规范时间格式
		SimpleDateFormat sdf = 	new SimpleDateFormat("yyyy-MM-dd");
		
		Date joinStartDate = null;
		Date joinEndDate = null;
		Date eDueStartDate = null;
		Date eDueEndDate = null;
		
		try{
			joinStartDate = sdf.parse(joinDateFrom);
			joinEndDate = sdf.parse(joinDateTo);
		}
		catch(ParseException e){
			e.printStackTrace();
	// TODO 日期格式 不正确，给出日期格式错误提示；或者忽略这个日期格式，发生异常时日期值为null
		}
		try{
			sdf.parse(eDueDateFrom);
			sdf.parse(eDueDateTo);
		}catch(ParseException e){
			e.printStackTrace();
			// TODO 日期格式 不正确，给出日期格式错误提示；或者忽略这个日期格式，发生异常时日期值为null
		}catch (NullPointerException e2){
			e2.printStackTrace();
		}
		
		Pageable pageable = null;
		Page<EsEnterpriseInfoChktemp> page = esEnterpriseInfoRiskControlAuditingService.queryEsEnterpriseRiskControlAuditInfoPageListByCondition(eId, eName, joinStartDate, joinEndDate, eDueStartDate, eDueEndDate, pageable);
		//字典渲染
		for (EsEnterpriseInfoChktemp chktemp : page) {
			// 企业状态
			//String eStatusName = com.creditease.b2bsettle.basedata.dict.EnterpriseStatusEnum.getName(chktemp.getEStatus());
			String eStatusName = EnterpriseStatusEnum.getName(chktemp.getEStatus());
			chktemp.setEStatus(eStatusName);
			
			// 审核状态
			String chkStatusName = OperationAuditStatusEnum.getName(chktemp.getChkStatus());
			chktemp.setChkStatus(chkStatusName);
		}
		mav.addObject("totalPages", page.getTotalPages());		// 总页数
		mav.addObject("count", page.getTotalElements());		// 总记录数
		mav.addObject("datas", page.getContent());				// 当前页数据
		mav.addObject("currentPageNO", page.getNumber() + 1);	// 当前页码
		
		mav.setViewName("riskcontrolaudit/queryriskControlAudit");
		return mav;
	}
	/**
	 * Description: 根据uid获取企业信息详情
	 *  
	 * @param uid
	 * @return
	 * @Author chenmingli
	 * Create Date: 2015年6月24日 下午6:41:49
	 */
	@RequestMapping(value = "/getEsEnterpriseInfoChktempByEid")
	@ResponseBody
	public Map<String, Object> getEsEnterpriseInfoChktempByEId(@RequestParam("eid") String eid) {
		Map<String, Object> map = new HashMap<String, Object>();
		
		// 1.企业信息
		EsEnterpriseInfoChktemp chktemp = esEnterpriseInfoRiskControlAuditingService.getEsEnterpriseInfoChktempDetailByUid(eid);
		// 企业分类 
		String eCategory = EnterpriseCategoryEnum.getName(chktemp.getECategory());
		chktemp.setECategory(eCategory);
		// 企业类型 
		String eType = EnterpriseTypeEnum.getName(chktemp.getEType());
		chktemp.setEType(eType);
		
		//营业执照注册号
		//chktemp.setELicenseId(chktemp.getELicenseId());
		
		//TODO 法人代表人证件类型 字典渲染
		
		// 2.经营信息
		// 节假日是否营业 字典渲染
		String holidayBiz = HolidayBizEnum.getName(chktemp.getHolidayBiz());
		chktemp.setHolidayBiz(holidayBiz);
		
		// 营业地段 字典渲染
		String bizCommodity = BizCommodity.getName(chktemp.getBizCommodity());
		chktemp.setBizCommodity(bizCommodity);
		
		// 信用等级 字典渲染
		String creditLevel = CreditLevel.getName(chktemp.getCreditLvl());
		chktemp.setCreditLvl(creditLevel);
		// TODO 行业大类 字典渲染
		
		// 2. 联系人信息
		List<EsContactInfoChktemp> contactInfoChktemps = esEnterpriseInfoRiskControlAuditingService.getEsContactInfoChktempDetailByEId(eid);
		
		// 3.产品信息
		List<EsEproductInfoChktemp> productInfoChktemps = esEnterpriseInfoRiskControlAuditingService.getEsEproductInfoChktempDetailByEId(eid);
		// 产品业务类型  字典渲染
		for (EsEproductInfoChktemp pinfoChktemp : productInfoChktemps) {
			String pbType = ProductBusinessType.getName(pinfoChktemp.getProductTp());
			pinfoChktemp.setProductTp(pbType);
		}
		
		map.put("chktemp", chktemp);
		map.put("contactInfoChktemps", contactInfoChktemps);
		map.put("productInfoChktemps", productInfoChktemps);

		return map;
	}

	/**
	 * Description: 风控审核。
	 *  
	 * @param uid
	 * @param verifyStatus 审核状态。审核通过(1)/审核拒绝(2)
	 * @param comment 审核意见
	 * @return 
	 * @author chenmingli
	 * Create Date: 2015年6月24日 下午6:42:26
	 */
	@RequestMapping(value = "/verify",method=RequestMethod.POST)
	@ResponseBody
	public boolean verify(@RequestParam("eid") String eid, @RequestParam("verifyStatus") String verifyStatus,
			@RequestParam("comment") String comment) {
		return esEnterpriseInfoRiskControlAuditingService.verify(eid, verifyStatus, comment);
	}
	
	
	
	
}
