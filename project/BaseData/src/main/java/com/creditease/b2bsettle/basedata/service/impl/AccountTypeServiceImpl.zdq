package com.creditease.b2bsettle.basedata.service.impl;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.creditease.b2bsettle.basedata.constant.AuditStatus;
import com.creditease.b2bsettle.basedata.constant.CommonConstants;
import com.creditease.b2bsettle.basedata.constant.OperateType;
import com.creditease.b2bsettle.basedata.model.AccountType;
import com.creditease.b2bsettle.basedata.model.AccountTypeAudit;
import com.creditease.b2bsettle.basedata.repository.AccountTypeAuditRepository;
import com.creditease.b2bsettle.basedata.repository.AccountTypeRepository;
import com.creditease.b2bsettle.basedata.service.AccountTypeService;
@Service
public class AccountTypeServiceImpl implements AccountTypeService {
	
	@Autowired
	private AccountTypeAuditRepository accountTypeAuditRepository;
	
	@Autowired
	private AccountTypeRepository accountTypeRepository;
	

	/**
	 * 新增支付类型（存审核表）
	 * */ 
	@Override
	public long newAccountType(AccountTypeAudit accountTypeAudit) {
		AccountTypeAudit save = accountTypeAuditRepository.save(accountTypeAudit);
		return save.getCid();
	}

	/**
	 * 修改
	 * 适用范围：
	 * 已启用、未启用页面的新增、修改操作
	 * 当如参cid 为0时方法认为是已用页面传来的请求
	 * */
	@Override
	public void updateaccountType(long cid, long id, String newAccountType, String modifier) {
		//标识已启用页面不能修改
		AccountType accountTypemd = accountTypeRepository.findOne(id);
		accountTypemd.setCanOperate(false);
		accountTypeRepository.save(accountTypemd);
		
		//在审核表新建或更新信息
		AccountTypeAudit accountTypeAudit = null;
		String operateSummary = "";
		if(cid == 0){//cid为0时认为时已用页面发来的请求，需要在审核表里新增
			accountTypeAudit = new AccountTypeAudit();
			accountTypeAudit.setId(id);
			operateSummary = CommonConstants.updateUsed;
		}else{
			accountTypeAudit = accountTypeAuditRepository.findOne(cid);
			operateSummary = CommonConstants.updateNotUsed;
			accountTypeAudit.setAuditText("");//清空上次的审核信息
		}
		accountTypeAudit.setAccoutType(newAccountType);
		
		accountTypeAudit.setAuditStatus(AuditStatus.Audit);
		accountTypeAudit.setOperateSummary(operateSummary);
		accountTypeAudit.setOperateType(OperateType.UPDATE);
		accountTypeAudit.setCreator(accountTypemd.getCreator());
		accountTypeAudit.setCreatedTime(accountTypemd.getCreatedTime());
		accountTypeAudit.setModifier(modifier);
		accountTypeAudit.setModifyTime(new Date());
		accountTypeAuditRepository.save(accountTypeAudit);
	}

	
	/**
	 * 删除
	 * 适用范围：
	 * 已启用、未启用页面的删除操作
	 * 当如参cid 为null时方法认为是已用页面传来的请求
	 * */
	public void deleteaccountType(long cid, long id, boolean isDelte, String modifier) {
		//标识已启用页面不能修改
		AccountType accountTypemd = accountTypeRepository.findOne(id);
		accountTypemd.setCanOperate(false);
		accountTypeRepository.save(accountTypemd);
		
		//在审核表新建或更新信息
		AccountTypeAudit accountTypeAudit = null;
		String operateSummary = "";
		if(cid == 0){//cid为0时认为时已用页面发来的请求，需要在审核表里新增
			accountTypeAudit = new AccountTypeAudit();
			accountTypeAudit.setId(id);
			operateSummary = CommonConstants.deleteUsed;
		}else{
			accountTypeAudit = accountTypeAuditRepository.findOne(cid);
			operateSummary = CommonConstants.deleteNotUsed;
			accountTypeAudit.setAuditText("");//清空上次的审核信息
		}
		accountTypeAudit.setAccoutType(accountTypemd.getAccoutType());
		
		accountTypeAudit.setDeleted(isDelte);
		accountTypeAudit.setAuditStatus(AuditStatus.Audit);
		accountTypeAudit.setOperateSummary(operateSummary);
		accountTypeAudit.setOperateType(OperateType.DELETE);
		accountTypeAudit.setCreator(accountTypemd.getCreator());
		accountTypeAudit.setCreatedTime(accountTypemd.getCreatedTime());
		accountTypeAudit.setModifier(modifier);
		accountTypeAudit.setModifyTime(new Date());
		accountTypeAuditRepository.save(accountTypeAudit);
	}
	
	
	
	/**
	 * 
	 * 审核操作 
	 * 适用范围：
	 * 适用来自 已启用、未启用页面的新增、修改和删除操作的审核
	 * */
	@Override
	public String auditAccountType(long cid, String auditText,AuditStatus auditStatus, String auditor ) {
		AccountTypeAudit accountTypeAudit =  accountTypeAuditRepository.findOne(cid);
		AccountType accountType = accountTypeRepository.findOne(accountTypeAudit.getId());
		//审核通过
		if(auditStatus.equals(AuditStatus.Through)){
			//更改审核表状态
			accountTypeAudit.setAuditStatus(AuditStatus.Through);
			accountTypeAudit.setAuditText(auditText);//审核操作不是修改，所以不更新modifer字段
			
			//复制审核表信息更新主表
			if(accountType == null){//审核新增、因为查不出数据、此时需要新建主表
				accountType = new AccountType ();
				accountType.setAccoutType(accountTypeAudit.getAccoutType());
				
				accountType.setCreator(accountTypeAudit.getCreator());
				accountType.setCreatedTime(accountTypeAudit.getCreatedTime());
				accountType.setModifier(accountTypeAudit.getModifier());
				accountType.setModifyTime(accountTypeAudit.getModifyTime());
				accountType.setAuditor(auditor);
				accountType.setAuditTime(new Date());
				accountType.setDeleted(false);
				accountType.setCanOperate(true);
			}else{//审核修改或删除、此时需要更新主表
				accountType.setAccoutType(accountTypeAudit.getAccoutType());
				
				accountType.setAuditor(auditor);
				accountType.setAuditTime(new Date());
				accountType.setModifier(accountTypeAudit.getModifier());
				accountType.setModifyTime(accountTypeAudit.getModifyTime());
				accountType.setDeleted(accountTypeAudit.getOperateType().equals(OperateType.DELETE));//如果当前审核通过的市删除操作，那么删除标识为true
				accountType.setCanOperate(true);
			}
		}else{//审核未通过
			accountTypeAudit.setAuditStatus(AuditStatus.Refuse);
			accountTypeAudit.setAuditText(auditText);
			accountType.setCanOperate(true);
		}
		accountType = accountTypeRepository.save(accountType);//审核新增时insert，审核修改和删除时update
		accountTypeAudit.setId(accountType.getId());//新增情况需要关联ID   无论任何时候主表和审核表都是有关系的所以此方法没问题
		accountTypeAuditRepository.save(accountTypeAudit);//更新操作
		return "1";
	}

	@Override
	public List<AccountType> findAll() {
		return accountTypeRepository.findByCanOperateAndDeleted(true,false);
	}

}
