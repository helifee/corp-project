package helife.tree;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TreeUtil {
	public static Tree getTreeFrom() {
		
		Record r1 = new Record();
		r1.setId("001");
		r1.setTxt("aaa");
		r1.setCheck(0);
		r1.setDispSeq("0100000000");
		
		Record r2 = new Record();
		r2.setId("002");
		r2.setTxt("bbb");
		r2.setCheck(1);
		r2.setDispSeq("0102000000");
		
		Record r3 = new Record();
		r3.setId("003");
		r3.setTxt("ccc");
		r3.setCheck(0);
		r3.setDispSeq("0103000000");
		
		Record r4 = new Record();
		r4.setId("004");
		r4.setTxt("ddd");
		r4.setCheck(0);
		r4.setDispSeq("0200000000");
		
		Record r5 = new Record();
		r5.setId("005");
		r5.setTxt("eee");
		r5.setCheck(0);
		r5.setDispSeq("0201000000");
		
		Record r6 = new Record();
		r6.setId("006");
		r6.setTxt("fff");
		r6.setCheck(0);
		r6.setDispSeq("0202000000");
		
		Record r7 = new Record();
		r7.setId("007");
		r7.setTxt("ggg");
		r7.setCheck(0);
		r7.setDispSeq("0300000000");
		
		Record r8 = new Record();
		r8.setId("008");
		r8.setTxt("hhh");
		r8.setCheck(0);
		r8.setDispSeq("0301000000");
		
		Record r9 = new Record();
		r9.setId("009");
		r9.setTxt("iii");
		r9.setCheck(0);
		r9.setDispSeq("0302000000");
		
		List<Record> records = new ArrayList<Record>();
		records.add(r1);
		records.add(r2);
		records.add(r3);
		records.add(r4);
		records.add(r5);
		records.add(r6);
		records.add(r7);
		records.add(r8);
		records.add(r9);
		
		Map<Integer, List<Record>> map = new HashMap<Integer, List<Record>>();
		int unit = 2;
		for(int i=0; i<records.size(); i++) {
			Record r = records.get(i);
			String seq = r.getDispSeq();
			List<String> grades = getGrades(seq, unit);
			r.setGrades(grades);

			int grade = grades.size();
			if(1 == grade ) {
				if(null == map.get(grade)) {
					List<Record> lr = new ArrayList<Record>();
					lr.add(r);
					map.put(grade, lr);
				} else {
					map.get(grade).add(r);
				}
			} else {
				if(null == map.get(grade)) {
					List<Record> lr = new ArrayList<Record>();
					lr.add(r);
					map.put(grade, lr);
					
					Record parent = getParent(map, grade - 1);
					List<Record> tmp = parent.getChildren();
					if(null == tmp) {
						tmp = new ArrayList<Record>();
						tmp.add(r);
						parent.setChildren(tmp);
					} else {
						parent.getChildren().add(r);
					}
				} else {
					map.get(grade).add(r);
					
					Record parent = getParent(map, grade - 1);
					List<Record> tmp = parent.getChildren();
					if(null == tmp) {
						tmp = new ArrayList<Record>();
						tmp.add(r);
						parent.setChildren(tmp);
					} else {
						parent.getChildren().add(r);
					}
					
				}
			}
		}
		
		//List<Tree> --> List<Record>
		List<Record> lr = map.get(1);
		List<Tree> items = null;
		for(int i=0; i<lr.size(); i++) {
			Record r = lr.get(i);
		}
		
		
		//生成树
		Tree tree = new Tree();
		tree.setId("000");
		tree.setTxt("远东社内网");
		tree.setCheck(0);
		tree.setItems(items);
		
		return tree;
	}
	
	private static List<String> getGrades(String seq, int unit) {
		List<String> grades = new ArrayList<String>();
		
		int max = seq.length() / unit;
		int index = 0;		
		for(int i=0; i<max; i++) {
			String s = seq.substring(index, index + unit);
			if("00".equals(s)) {
				break;				
			} else {
				grades.add(s);
				index = index + unit;
			}
		}
		
		return grades;
	}

	//找父节点
	private static Record getParent(Map<Integer, List<Record>> map, int grade) {
		List<Record> lr = map.get(grade);
		return lr.get(lr.size() - 1);
//		Record record = null;
//		for(int i=0; i<lr.size(); i++) {
//			record = lr.get(i);
//			if(r.getGrades().containsAll(record.getGrades())) {
//				break;
//			}
//		}
//		return record;
	}
}
