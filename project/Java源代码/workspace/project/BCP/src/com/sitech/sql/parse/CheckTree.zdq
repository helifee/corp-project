/*
 * 判断sql相似
 */
package com.sitech.sql.parse;

import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import com.sitech.sql.parse.node.Column;
import com.sitech.sql.parse.node.ColumnExp;
import com.sitech.sql.parse.node.ColumnRef;
import com.sitech.sql.parse.node.Columns;
import com.sitech.sql.parse.node.ExpTable;
import com.sitech.sql.parse.node.FunctionCall;
import com.sitech.sql.parse.node.Node;
import com.sitech.sql.parse.node.NodeList;
import com.sitech.sql.parse.node.NodeToken;
import com.sitech.sql.parse.node.Param;
import com.sitech.sql.parse.node.ParamList;
import com.sitech.sql.parse.node.ScalarExp;
import com.sitech.sql.parse.node.Select;
import com.sitech.sql.parse.node.SinSelect;
import com.sitech.sql.parse.node.TableColumns;
import com.sitech.sql.parse.node.TableExp;
import com.sitech.sql.parse.node.TableID;
import com.sitech.sql.parse.node.TableRef;
import com.sitech.sql.parse.node.Visitor;

public class CheckTree extends Visitor{
	private int flag=0;
	public SelectBean currBean=new SelectBean();
	public void visitNodeToken(NodeToken token){
		switch(flag){
		case 1:
			currBean.colRef.add(token.tokenString);
			break;
		case 2:
			currBean.colFun.add(token.tokenString);
			break;
		case 3:
			currBean.tabTable.add(token.tokenString);
			break;
		
		}
	}
	public void visitNodeList(NodeList n){
		for (Iterator it = n.elements(); it.hasNext();) {
			((Node) it.next()).accept(this);
		}
	}

	public void visitSinSelect(SinSelect s){

		SelectBean oldBean=currBean;
		currBean=new SelectBean();
		if(flag==4){
			oldBean.colSelect.add(currBean);
		}else if(flag==5){
			oldBean.tabSelect.add(currBean);
		}
		s.columns.accept(this);
		s.expTable.accept(this);
		currBean=oldBean;
		flag=0;
	}

	public void visitSelect(Select s){
		flag=4;
		s.selectList.accept(this);
		flag=0;
	}
	public void visitColumn(Column c){
		c.columnExp.accept(this);
	}
	
	public void visitColumns(Columns c){
		c.columnList.accept(this);
	}

	public void visitColumnExp(ColumnExp c){
		c.opopList.accept(this);
		c.scalaList.accept(this);
		
	}
	public void visitScalarExp(ScalarExp s){
		if(s.columnExp!=null){
			s.columnExp.accept(this);
		}
		if(s.columnRef!=null){
			flag=1;
			s.columnRef.accept(this);
			flag=0;
		}
		if(s.funCall!=null){
			flag=2;
			s.funCall.accept(this);
			flag=0;
		}
		if(s.number!=null){
			s.number.accept(this);
		}
		if(s.seelct!=null){
			flag=5;
			s.seelct.accept(this);
			flag=0;
		}
		if(s.string!=null){
			s.string.accept(this);
		}
	}
	public void visitColumnRef(ColumnRef c){
		c.columnName.accept(this);
		if(c.tableName!=null){
			//c.tableName.accept(this);
		}
	}
	public void visitFunctionCall(FunctionCall f){
		f.funName.accept(this);
		f.paramList.accept(this);
	}
	public void visitParamList(ParamList p){
		p.paramList.accept(this);
	}
	public void visitParam(Param p){
		p.columnExp.accept(this);
	}
	//-------------表----------------
	public void visitExpTable(ExpTable t){
		t.tableColumns.accept(this);
	}
	public void visitTableColumns(TableColumns t){
		t.tableRefList.accept(this);
	}
	public void visitTableRef(TableRef t){
		t.tableExp.accept(this);
	}
	public void visitTableExp(TableExp t){
		if(t.tableExp!=null){
			t.tableExp.accept(this);
		}else if(t.select!=null){
			flag=4;
			t.select.accept(this);
			flag=0;
		}else if(t.tableid!=null){
			flag=3;
			t.tableid.accept(this);
			flag=0;
		}
	}
	public void visitTableid(TableID id){
		id.tableName.accept(this);
	}
	//比较判断
	public boolean equals(Object obj){
		CheckTree tree=(CheckTree)obj;
		return currBean.equals(tree.currBean);
	}

	class SelectBean{
		public Set colSelect=new HashSet();
		public Set colFun=new HashSet();
		public Set colRef=new HashSet();
		public Set tabTable=new HashSet();
		public Set tabSelect=new HashSet();
		public boolean equals(Object arg0) {
			SelectBean bean=(SelectBean)arg0;
			Iterator it=colSelect.iterator();
			Iterator it2=null;
			while(it.hasNext()){
				SelectBean b=(SelectBean)it.next();
				it2=bean.colSelect.iterator();
				while(it2.hasNext()){
					SelectBean b2=(SelectBean)it2.next();
					if(!b.equals(b2)){
						return false;
					}
				}
			}
			it=tabSelect.iterator();
			while(it.hasNext()){
				SelectBean b=(SelectBean)it.next();
				it2=bean.tabSelect.iterator();
				while(it2.hasNext()){
					SelectBean b2=(SelectBean)it2.next();
					if(!b.equals(b2)){
						return false;
					}
				}
			}
			if(!colFun.equals(bean.colFun)){
				return false;
			}
			if(!colRef.equals(bean.colRef)){
				return false;
			}
			if(!tabTable.equals(bean.tabTable)){
				return false;
			}
			return true;
			
		}
		
	}


	
}
