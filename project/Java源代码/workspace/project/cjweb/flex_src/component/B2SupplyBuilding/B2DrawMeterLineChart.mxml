<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx">
	<s:layout>
		<s:HorizontalLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import component.common.*;
			import component.common.LineGraphic;
			
			import flash.utils.Dictionary;
			
			import mx.charts.AxisRenderer;
			import mx.charts.CategoryAxis;
			import mx.charts.LineChart;
			import mx.charts.LinearAxis;
			import mx.charts.chartClasses.Series;
			import mx.charts.series.LineSeries;
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;

			
			private var dict:Dictionary = new Dictionary();
			private var linechart:LineChart;
			private var hDate:CategoryAxis;
			private var axRend4Horizontal:AxisRenderer;
			private var axRend4Vertical:AxisRenderer;
			
			private var linegrap:LineGraphic;
			//表计名称列表
			private var _arrMeterName:Array;
			public function get arrMeterName():Array{
				return _arrMeterName;
			}
			public function set arrMeterName(value:Array):void{
				if(value!=_arrMeterName){
					_arrMeterName=value;
					this.invalidateProperties();
				}
			}
			//linechart数据源
			private var _arrLineChartData:ArrayCollection;
			public function get arrLineChartData():ArrayCollection{
				return _arrLineChartData;
			}
			public function set arrLineChartData(value:ArrayCollection):void{
				if(value!=_arrLineChartData){
					_arrLineChartData=value;
					this.invalidateProperties();
				}
			}
			//纵轴单位描述
			private var _strUnit:String;
			public function get strUnit():String{
				return _strUnit;
			}
			public function set strUnit(value:String):void{
				if(value!=_strUnit){
					_strUnit=value;
					this.invalidateProperties();
				}
			}
			[Bindable]private var vUsage:LinearAxis;
			private var arrLineSeries:Array;
			//水平坐标的数据源对应列名
			[Bindable]private var _HorizontalField:String;
			public function get HorizontalField():String{
				return _HorizontalField;
			}
			public function set HorizontalField(value:String):void{
				if(value!=_HorizontalField){
					_HorizontalField=value;
					this.invalidateProperties();
				}
			}
			
			override protected function createChildren():void{
				
				
				
				//表计画图属性
				var leftLineArrows:Array = new Array();
				var rightLineArrows:Array = new Array();
				//左边
				var linearrow1:LineArrow = new LineArrow();
				var linearrow2:LineArrow = new LineArrow();
				leftLineArrows.push(linearrow1);
				leftLineArrows.push(linearrow2);
				//右边
				var linearrowTemp:LineArrow;
				var mTemp:Meter;
				var _CompArrayTemp:Array
				
				//图表属性
				linechart=new LineChart();
				linechart.dataProvider=_arrLineChartData;
				//横坐标
				hDate=new CategoryAxis();
				hDate.categoryField=_HorizontalField;
				linechart.horizontalAxis=hDate;
				axRend4Horizontal=new AxisRenderer();
				axRend4Horizontal.placement="bottom";
				axRend4Horizontal.axis=hDate;
				var arrRend4Horizontal:Array=new Array();
				arrRend4Horizontal.push(axRend4Horizontal);
				linechart.horizontalAxisRenderers=arrRend4Horizontal;
				
				
				
				arrLineSeries=new Array();
				var lsTemp:LineSeries;
				
				//总量曲线
				lsTemp = new LineSeries();
				lsTemp.horizontalAxis=hDate;
				lsTemp.yField="Sum";
				lsTemp.displayName="总量";
				vUsage=new LinearAxis();
				vUsage.title=_strUnit;
				lsTemp.verticalAxis=vUsage;
				lsTemp.setStyle("form","curve");
				arrLineSeries.push(lsTemp);
				
				
				//存储表计对象与图表曲线ID的键值对
				var elementNum:int=arrMeterName.length;
				for(var i:int=0;i<elementNum;i++)
				{
					//动态生成表计图
					linearrowTemp=new LineArrow();
					mTemp=new Meter();
					mTemp.addEventListener(MouseEvent.CLICK,showLineChartOrHide);
					_CompArrayTemp= new Array();
					_CompArrayTemp.push(mTemp);
					linearrowTemp.CompArray = _CompArrayTemp;
					linearrowTemp.lineName=arrMeterName[i];
					rightLineArrows.push(linearrowTemp);
					
					//动态生成曲线对象
					lsTemp = new LineSeries();
					lsTemp.horizontalAxis=hDate;
					lsTemp.yField="Unit"+(i+1).toString();
					lsTemp.displayName=arrMeterName[i];
					vUsage=new LinearAxis();
					vUsage.title=_strUnit;
					lsTemp.verticalAxis=vUsage;
					lsTemp.setStyle("form","curve");
					lsTemp.visible=false;
					arrLineSeries.push(lsTemp);
					
					
					//表计对象与图表曲线对应
					dict[mTemp]=lsTemp;
				}
				
				
				linegrap = new LineGraphic();
				linegrap.width=600;
				linegrap.height=200;
				linegrap.LeftLineArrows = leftLineArrows;
				linegrap.RightLineArrows = rightLineArrows;
				
				//纵坐标
				axRend4Vertical=new AxisRenderer();
				axRend4Vertical.placement="left";
				axRend4Vertical.setStyle("fontSize",13);
				axRend4Vertical.axis=vUsage;
				var arrRend4Vertical:Array=new Array();
				arrRend4Vertical.push(axRend4Vertical);
				linechart.verticalAxisRenderers=arrRend4Vertical;
				linechart.series=arrLineSeries;
				linechart.width=1100;
				linechart.showDataTips=true;
				
				
				this.addElement(linegrap);
				this.addElement(linechart);
			}
			//控制曲线的显示与否
			public function showLineChartOrHide(event:MouseEvent):void{
//				LineSeries(dict[event.target]).alpha=LineSeries(dict[event.target]).alpha==1?0:1;
				LineSeries(dict[event.target]).visible=LineSeries(dict[event.target]).visible==true?false:true;
				Meter(event.target)._alphaNum=Meter(event.target)._alphaNum==0.2?0:0.2;
				Meter(event.target).invalidateDisplayList();
			}

			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void{
				super.updateDisplayList(unscaledWidth,unscaledHeight);
				linegrap.x=linechart.width-linegrap.width;
				linegrap.y=-10;
				linechart.x=0;
				linechart.y=linegrap.height-40;
			}
 

		]]>
	</fx:Script>
</s:Group>
