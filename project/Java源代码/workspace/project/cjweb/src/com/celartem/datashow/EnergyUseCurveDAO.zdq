package com.celartem.datashow;

import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.CallableStatementCallback;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import com.celartem.common.SystemConstant;
import com.celartem.common.Utils;
import com.celartem.datashow.bean.EnergyCurveInfo;

/**
 * 用能曲线DAO
 * 
 * @author zhangdaoqiang
 * 
 */
@Repository
public class EnergyUseCurveDAO {

	@Resource
	private JdbcTemplate jdbcTemplate; // jdbc操作

	/**
	 * 按照日期范围，用能类型，统计维度查询总量用能曲线
	 * 
	 * @param sdate ： 开始日期
	 * @param edate ： 结束日期
	 * @param energyType ： 用能类型
	 * @param precision ： 统计维度
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public List<EnergyCurveInfo> getCurTotalAmount(final String sdate,
			final String edate, final String energyType, final String precision) {
		
		String procedure = "call sp_getwholeusage(?,?,?,?,?)";
		
		List<EnergyCurveInfo> infoList = (List<EnergyCurveInfo>) jdbcTemplate.execute(procedure, 
				new CallableStatementCallback() {

					public Object doInCallableStatement(CallableStatement cs)
							throws SQLException, DataAccessException {
						
						//set parameter
						cs.setString(1, sdate);			//开始日期
						cs.setString(2, edate);			//结束日期
						cs.setString(3, energyType);	//用能类型
						cs.setString(4, precision);		//统计维度
						
						cs.registerOutParameter(5,
								oracle.jdbc.driver.OracleTypes.CURSOR);
						cs.execute();
						ResultSet rs = (ResultSet) cs.getObject(5);
						List<EnergyCurveInfo> result = null;
						
						if (rs != null) {
							result = new ArrayList();
							while(rs.next()) {
								
								EnergyCurveInfo info = new EnergyCurveInfo();
								
								//根据维度取得日期
								String date = getDate(rs, precision);	//日期
								if(null == date) {
									return null;
								}
								
								info.setName(date);
								info.setValue(rs.getDouble("usage"));	//用量
								
								result.add(info);
							}
						}
						rs.close();
						return result;
					}
				});
		
		return infoList;		
	}
	
	/**
	 * 根据日期范围，用能类型，统计维度，部门ID取得部门用能曲线
	 * 
	 * @param sdate ： 开始日期
	 * @param edate ： 结束日期
	 * @param energyType ： 用能类型
	 * @param precision ： 统计维度
	 * @param did ：部门ID
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public List<EnergyCurveInfo> getCurDeptAmount(final String sdate, 
			final String edate, final String energyType, final String precision, final int did) {
		String procedure = "call sp_geteleusagebydpt(?,?,?,?,?,?)";
		
		List<EnergyCurveInfo> infoList = (List<EnergyCurveInfo>) jdbcTemplate.execute(procedure, 
				new CallableStatementCallback() {

					public Object doInCallableStatement(CallableStatement cs)
							throws SQLException, DataAccessException {
						
						//set parameter
						cs.setInt(1, did);				//部门ID
						cs.setString(2, sdate);			//开始日期
						cs.setString(3, edate);			//结束日期
						cs.setString(4, energyType);	//用能类型
						cs.setString(5, precision);		//统计维度
						
						
						cs.registerOutParameter(6,
								oracle.jdbc.driver.OracleTypes.CURSOR);
						cs.execute();
						ResultSet rs = (ResultSet) cs.getObject(6);
						List<EnergyCurveInfo> result = null;
						
						if (rs != null) {
							result = new ArrayList();
							while(rs.next()) {
								
								EnergyCurveInfo info = new EnergyCurveInfo();
								
								//根据维度取得日期
								String date = getDate(rs, precision);	//日期
								if(null == date) {
									return null;
								}
								
								info.setName(date);
								info.setValue(rs.getDouble("usage"));	//用量
								
								result.add(info);
							}
						}
						rs.close();
						return result;
					}
				});
		
		return infoList;
	}
	
	/**
	 * 根据日期范围，统计维度取得入住率
	 * 
	 * @param sdate ： 开始日期
	 * @param edate ： 结束日期
	 * @param precision ： 统计维度
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public List<EnergyCurveInfo> getLodgingRate(final String sdate, 
			final String edate, final String precision) {
		
		String procedure = "call sp_getcustomrate(?,?,?,?)";

		List<EnergyCurveInfo> infoList = (List<EnergyCurveInfo>) jdbcTemplate.execute(procedure, 
				new CallableStatementCallback() {

					public Object doInCallableStatement(CallableStatement cs)
							throws SQLException, DataAccessException {
						
						//set parameter
						cs.setString(1, sdate);			//开始日期
						cs.setString(2, edate);			//结束日期
						cs.setString(3, precision);		//统计维度
						
						cs.registerOutParameter(4,
								oracle.jdbc.driver.OracleTypes.CURSOR);
						cs.execute();
						ResultSet rs = (ResultSet) cs.getObject(4);
						List<EnergyCurveInfo> result = null;
						
						if (rs != null) {
							result = new ArrayList();
							while(rs.next()) {
								
								EnergyCurveInfo info = new EnergyCurveInfo();
								
								//根据维度取得日期
								String date = getDate(rs, precision);	//日期
								if(null == date) {
									return null;
								}
								
								info.setName(date);
								info.setValue(rs.getDouble("customrate"));	//入住率
								
								result.add(info);
							}
						}
						rs.close();
						return result;
					}
				});
		
		return infoList;
	}
	
	/**
	 * 根据日期范围，用能类型，部门ID取得部门用能饼图数据
	 * 
	 * @param sdate ： 开始日期
	 * @param edate ：结束日期
	 * @param energyType ： 用能类型
	 * @param did ： 部门ID
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public List<EnergyCurveInfo> getPieDeptAmount(final String sdate, 
			final String edate, final String energyType, final int did) {
		
		String procedure = "call sp_getdptusagerate(?,?,?,?,?)";

		List<EnergyCurveInfo> infoList = (List<EnergyCurveInfo>) jdbcTemplate.execute(procedure, 
				new CallableStatementCallback() {

					public Object doInCallableStatement(CallableStatement cs)
							throws SQLException, DataAccessException {
						
						//set parameter
						cs.setInt(1, did);				//部门ID
						cs.setString(2, sdate);			//开始日期
						cs.setString(3, edate);			//结束日期
						cs.setString(4, energyType);	//用能类型
						
						cs.registerOutParameter(5,
								oracle.jdbc.driver.OracleTypes.CURSOR);
						cs.execute();
						ResultSet rs = (ResultSet) cs.getObject(5);
						List<EnergyCurveInfo> result = null;
						
						if (rs != null) {
							result = new ArrayList();
							while(rs.next()) {
								
								EnergyCurveInfo info = new EnergyCurveInfo();
								
								info.setName(rs.getString("name"));			//部门名称
								info.setValue(rs.getDouble("allusage"));	//部门总量
								
								result.add(info);
							}
							rs.close();
						}
						
						return result;
					}
				});
		
		return infoList;
	}
	
	/**
	 * 根据日期范围，用能类型，部门ID取得表计用能饼图数据
	 * 
	 * @param sdate ： 开始日期
	 * @param edate ：结束日期
	 * @param energyType ： 用能类型
	 * @param did ： 部门ID
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public List<EnergyCurveInfo> getPieMeterAmount(final String sdate, 
			final String edate, final String energyType, final int did) {
		
		String procedure = "call sp_getmeterusagerate(?,?,?,?,?)";

		List<EnergyCurveInfo> infoList = (List<EnergyCurveInfo>) jdbcTemplate.execute(procedure, 
				new CallableStatementCallback() {

					public Object doInCallableStatement(CallableStatement cs)
							throws SQLException, DataAccessException {
						
						//set parameter
						cs.setInt(1, did);				//部门ID
						cs.setString(2, sdate);			//开始日期
						cs.setString(3, edate);			//结束日期
						cs.setString(4, energyType);	//用能类型
						
						cs.registerOutParameter(5,
								oracle.jdbc.driver.OracleTypes.CURSOR);
						cs.execute();
						ResultSet rs = (ResultSet) cs.getObject(5);
						List<EnergyCurveInfo> result = null;
						
						if (rs != null) {
							result = new ArrayList();
							while(rs.next()) {
								
								EnergyCurveInfo info = new EnergyCurveInfo();
								
								info.setName(rs.getString("name"));		//表计名称
								info.setValue(rs.getDouble("usage"));	//名称总量
								
								result.add(info);
							}
						}
						rs.close();
						return result;
					}
				});
		
		return infoList;
	}
	
	/**
	 * 根据统计维度取得返回的日期
	 * 
	 * @param rs ：结果集
	 * @param type ： 统计维度
	 * @return
	 * @throws SQLException 
	 */
	private String getDate(ResultSet rs, String precision) throws SQLException {
		
		String date = null;
		
		if(SystemConstant.StatPrecision.DAY.getValue().equals(precision)) {
			date = Utils.convert(rs.getDate("day"));
			
		} else if(SystemConstant.StatPrecision.WEEK.getValue().equals(precision)) {	// TODO
			date = Utils.convert(rs.getDate("day"));
			
		} else if(SystemConstant.StatPrecision.MONTH.getValue().equals(precision)) { // TODO
			date = Utils.convert(rs.getDate("day"));
			
		} else if(SystemConstant.StatPrecision.WEEK.getValue().equals(precision)) {
			date = String.valueOf(rs.getDouble("year"));
		}
		
		return date;
	}

	/**
	 * @param jdbcTemplate the jdbcTemplate to set
	 */
	public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}
}
