package com.celartem.datashow;

import java.sql.SQLException;
import java.text.ParseException;
import java.util.List;

import com.celartem.datashow.bean.BranchCurInfo;
import com.celartem.datashow.bean.PoDot;
import com.celartem.datashow.bean.PoPowerRoomRate;

/**
 * Flex B2 调用类
 * 
 * @author zhangdaoqiang
 * 
 */
public class EngSuplyController {

	private EngSuplyService engSuplyService;

	/**
	 * 制热tab页的曲线数据集
	 * 
	 * @return
	 */
	public BranchCurInfo getDataHeat() {
		return null;
	}

	/**
	 * 制冷tab页的曲线数据集
	 * 
	 * @return
	 */
	public BranchCurInfo getDataCool() {
		return null;
	}

	/**
	 * 用电tab页的曲线数据集
	 * 
	 * @param bid
	 *            : 建筑物ID
	 * @param sdate
	 *            ： 开始日期
	 * @param edate
	 *            ： 结束日期
	 * @param precision
	 *            ： 统计维度
	 * @return
	 * @throws SQLException
	 * @throws NumberFormatException
	 * @throws ParseException
	 */
	public BranchCurInfo getDataEle(String bid, String sdate, String edate,
			String precision) throws NumberFormatException, SQLException,
			ParseException {

		BranchCurInfo retInfo = this.engSuplyService.getBranchCurData(Integer
				.parseInt(bid), "ele", sdate, edate, precision);

		return retInfo;
	}

	/**
	 * 用水tab页的曲线数据集
	 * 
	 * @return
	 * @throws SQLException
	 * @throws NumberFormatException
	 * @throws ParseException
	 */
	public BranchCurInfo getDataWater(String bid, String sdate, String edate,
			String precision) throws NumberFormatException, SQLException,
			ParseException {

		BranchCurInfo info = this.engSuplyService.getBranchCurData(Integer
				.parseInt(bid), "watercold", sdate, edate, precision);

		return info;
	}

	/**
	 * 根据表计ID取得对应的曲线
	 * 
	 * @param mid ： 表计ID
	 * @param type ： 表计类型
	 * @param sdate ： 开始日期
	 * @param edate ： 结束日期
	 * @param precision ： 统计维度
	 * @return
	 * @throws NumberFormatException
	 * @throws SQLException
	 */
	public List<PoDot> getSinleCur(String mid, String type, String sdate,
			String edate, String precision) throws NumberFormatException,
			SQLException {
		return this.engSuplyService.getSingleCurve(Integer.parseInt(mid), type,
				sdate, edate, precision);
	}
	
	/**
	 * 取得指定配电室所有出线支路数据
	 * 
	 * @param bid ： 配电室ID
	 * @param sdate ： 开始日期
	 * @param edate ： 结束日期
	 * @return
	 * @throws NumberFormatException
	 * @throws SQLException
	 */
	public List<PoPowerRoomRate> getPowerRoomRate(String bid, String sdate,
			String edate) throws NumberFormatException, SQLException {
		return this.engSuplyService.getPowerRoomRate(Integer.parseInt(bid), sdate, edate);
	}

	/**
	 * @param engSuplyService
	 *            the engSuplyService to set
	 */
	public void setEngSuplyService(EngSuplyService engSuplyService) {
		this.engSuplyService = engSuplyService;
	}
}
