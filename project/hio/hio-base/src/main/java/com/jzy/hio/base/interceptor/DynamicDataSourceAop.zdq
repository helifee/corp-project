package com.jzy.hio.base.interceptor;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.context.annotation.Configuration;

import com.jzy.hio.base.datasource.DataSourceContextHolder;

/**
 * Created by luoro on 2017/12/24.
 */
@Aspect
@Configuration
public class DynamicDataSourceAop {

    @Pointcut("execution(*  com.jzy.hio.*.service.impl.*.*(..) )")
    public void excudeService(){}

    @Before("excudeService()")
    public void before() {

    }

    @After("excudeService()")
    public void after() {
    }

    @AfterReturning("excudeService()")
    public void afterReturning() {
    }

    @AfterThrowing("excudeService()")
    public void afterThrowing() {
    }

    @Around("excudeService()")
    public Object around(ProceedingJoinPoint thisJoinPoint){
        Object obj = null;
        try {
            //TODO  切换数据库
        	DataSourceContextHolder.setDataSourceType("test_test013");
            thisJoinPoint.proceed();
        } catch (Throwable e) {
            e.printStackTrace ();
        }

        return obj;
    }
}
