package com.jzy.hio.base.datasource;

import java.sql.SQLException;
import java.util.*;

import com.jzy.hio.base.mapper.DataSourceBeanMapper;
import com.jzy.hio.base.vo.TendDataSourceVo;
import org.apache.ibatis.annotations.Property;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.springframework.beans.BeansException;
import org.springframework.beans.MutablePropertyValues;
import org.springframework.beans.factory.support.BeanDefinitionBuilder;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.beans.factory.support.GenericBeanDefinition;
import org.springframework.boot.bind.RelaxedPropertyResolver;
import org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.ApplicationListener;
import org.springframework.context.EnvironmentAware;
import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;
import org.springframework.core.env.Environment;
import org.springframework.core.type.AnnotationMetadata;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;
import com.alibaba.druid.pool.DruidDataSource;

import javax.annotation.Resource;

/**
 *   数据库路由加载路由targetDataSources列表
 */
public class DynamicDataSource extends AbstractRoutingDataSource implements ApplicationContextAware {

	private ApplicationContext context;
	@Override
	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
		context = applicationContext;
	}

	@Override
	protected Object determineCurrentLookupKey() {
		// TODO Auto-generated method stub
		return DataSourceContextHolder.getDataSourceType();
	}

	@Override
	public void afterPropertiesSet() {
		// TODO Auto-generated method stub
		try {
			initDataSources();
			super.afterPropertiesSet();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	
	}

	private void initDataSources() throws SQLException {
		DefaultListableBeanFactory defaultFactory  = (DefaultListableBeanFactory)context.getAutowireCapableBeanFactory();
		DataSourceBeanMapper dataService = (DataSourceBeanMapper)defaultFactory.getBean(DataSourceBeanMapper.class);
		GenericBeanDefinition druidDatasource = new GenericBeanDefinition();
		druidDatasource.setBeanClass(DruidDataSource.class);
		druidDatasource.setSynthetic(true);
		druidDatasource.setDestroyMethodName("close");
		druidDatasource.setInitMethodName("init");
//		druidDatasource.setPrimary(true);
		Map<String, Object> rpr = new RelaxedPropertyResolver(context.getEnvironment(), "spring.datasource.druid").getSubProperties(".");
		Map<String, Object> values = new HashMap<>(rpr);
		Map<Object,Object> targetDataSources = new HashMap<>();
		try {
			List<TendDataSourceVo> databaseList = dataService.getTendDataSourceVoList();
			for (TendDataSourceVo database : databaseList) {
				System.out.println( database.getTendCode());
				values.put("driverClassName",database.getDriverName());
				values.put("url",database.getUrl());
				values.put("username",database.getUserName());
				values.put("password",database.getPassword());
				druidDatasource.setInitMethodName("init");
				druidDatasource.setDestroyMethodName("close");
				druidDatasource.setAttribute("id", database.getTendCode());
				druidDatasource.setPropertyValues(new MutablePropertyValues(values));
				defaultFactory.registerBeanDefinition(database.getTendCode(), druidDatasource);
				targetDataSources.put(database.getTendCode(),context.getBean(database.getTendCode()) );
			}
			this.setTargetDataSources(targetDataSources);
			BeanDefinitionBuilder	sqlSessionFactory = BeanDefinitionBuilder.rootBeanDefinition(SqlSessionFactoryBean.class);
			sqlSessionFactory.getBeanDefinition().setAttribute("id", "sqlSessionFactory");
			sqlSessionFactory.addPropertyReference("dataSource", "dataSource");
			sqlSessionFactory.addPropertyValue("mapperLocations", context.getEnvironment().getProperty("mybatis.mapper-locations"));
			sqlSessionFactory.addPropertyValue("typeAliasesPackage", context.getEnvironment().getProperty("mybatis.type-aliases-package"));
			defaultFactory.registerBeanDefinition("sqlSessionFactory", sqlSessionFactory.getBeanDefinition());

			//覆盖原有txManager
			BeanDefinitionBuilder	transactionManager  = BeanDefinitionBuilder.rootBeanDefinition(DataSourceTransactionManager.class);
			transactionManager.getBeanDefinition().setAttribute("id", "transactionManager");
			transactionManager.addPropertyReference("dataSource", "dataSource");
			defaultFactory.registerBeanDefinition("transactionManager", transactionManager.getBeanDefinition());
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

}
