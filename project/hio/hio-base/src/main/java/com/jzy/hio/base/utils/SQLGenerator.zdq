package com.jzy.hio.base.utils;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.jzy.hio.base.annotation.Column;
import com.jzy.hio.base.annotation.Key;
import com.jzy.hio.base.annotation.Table;
import com.jzy.hio.base.annotation.Version;

/**
 *
 * Description: 生成查询数量的SQL
 *
 * @author yzp
 *
 * @param <T>
 */
public class SQLGenerator<K extends Serializable> {
	SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd H:m:s.SSS");
	private Class clazz;

	public SQLGenerator(Class clazz) {
		this.clazz = clazz;
	}

	/**
	 *
	 * 获取类对象的SQL语句
	 *
	 * @param t
	 * @return
	 */
	public String getSaveSQL(Object t) {
		StringBuilder sql = new StringBuilder();
		String tableName = getTableName();
		sql.append("INSERT INTO ").append(tableName);
		sql.append(" ( ");
		Map<String, List<String>> columnNames = getTableGeneriateColumnAnalyze();
		List<String> columns = columnNames.get("tableColumns");
		List<String> propertys = columnNames.get("propertyColumns");
		Map<String, String> key = getTableKeyColumnAnalyze();
		Map<String, String> version = getTableVersionColumnAnalyze();
		columns.add(0, key.get("keyTableColumn"));
		propertys.add(0, key.get("keyPropertyColumn"));
		sql.append(StringUtils.join(columns, ","));
		sql.append(" , "+version.get("versionTableColumn"));
		sql.append(" ) ");
		sql.append(" VALUES ");
		sql.append(" ( ");
		Map<String, Object> map = getTableColumnValuesAnalyze(propertys, t);
		/**
		 * 系统内置对象
		 */
//		SecurityUserBeanInfo securityUserBeanInfo= LoginUtils.getSecurityUserBeanInfo();
		for (String property : propertys) {
			/*if(securityUserBeanInfo!=null){
				if(property.equals("createDate")){
					sql.append("'"+format.format(new Date()) + "',");
					continue;
				}
				if(property.equals("createPersonId")){
					sql.append("'"+securityUserBeanInfo.getSecurityUserDto().getId() + "',");
					continue;
				}
				if(property.equals("createPersonName")){
					if(property.equals("createPersonName")){
						sql.append("'"+securityUserBeanInfo.getSecurityUserDto().getRealName() + "',");
						continue;
					}
				}
				if(property.equals("tendId")){
					sql.append("'"+securityUserBeanInfo.getTendId() + "',");
					continue;
				}
			}*/


			Object obj = map.get(property);
			if (obj != null) {
				sql.append(obj + ",");
			} else {
				sql.append(null + ",");
			}
		}
		if (sql.toString().endsWith(",")) {
			sql.deleteCharAt(sql.toString().length() - 1);
		}
		sql.append(",0 ");
		sql.append(" ) ");
		return sql.toString();
	}

	/**
	 * @param t
	 * @return
	 */
	public String getUpdateSQL(Object t) {
		StringBuilder sql = new StringBuilder();
		String tableName = getTableName();
		sql.append("UPDATE ").append(tableName);
		sql.append(" SET ");
		Map<String, List<String>> columnNames = getTableGeneriateColumnAnalyze();
		List<String> columns = columnNames.get("tableColumns");
		List<String> propertys = columnNames.get("propertyColumns");
		Map<String, String> key = getTableKeyColumnAnalyze();
		Map<String, String> version = getTableVersionColumnAnalyze();
		columns.add(0, key.get("keyTableColumn"));
		columns.add(1, version.get("versionTableColumn"));
		propertys.add(0, key.get("keyPropertyColumn"));
		propertys.add(1, version.get("versionPropertyColumn"));
		Map<String, Object> map = getTableColumnValuesAnalyze(propertys, t);
		/**
		 * 系统内置对象
		 */
//		SecurityUserBeanInfo securityUserBeanInfo=LoginUtils.getSecurityUserBeanInfo();
		for (int i = 0; i < propertys.size() ; i++) {
			String property = propertys.get(i);
			String column = columns.get(i);
			/*if(securityUserBeanInfo!=null){
				if(property.equals("updateDate")){
					sql.append(column+"='"+format.format(new Date()) + "',");
					continue;
				}
				if(property.equals("updatePersonId")){
					sql.append(column+"='"+securityUserBeanInfo.getSecurityUserDto().getId() + "',");
					continue;
				}
				if(property.equals("updatePersonName")){
					sql.append(column+"='"+securityUserBeanInfo.getSecurityUserDto().getRealName() + "',");
					continue;
				}
				if(property.equals("tendId")){
					sql.append(column+"='"+securityUserBeanInfo.getTendId() + "',");
					continue;
				}
			}*/

			Object obj = map.get(property);
			if (obj != null) {
				if(property.equals(version.get("versionPropertyColumn"))){
					sql.append(column + "=" + (Integer.valueOf(obj.toString())+1) + ",");
				}else{
					sql.append(column + "=" + obj + ",");
				}
			} else {
				sql.append(column + "=" + null + ",");
			}
		}
		if (sql.toString().endsWith(",")) {
			sql.deleteCharAt(sql.toString().length() - 1);
		}
		sql.append(" WHERE  ");
		sql.append(key.get("keyTableColumn") + "="
				+ map.get(key.get("keyPropertyColumn")));

		sql.append(" and ");

		sql.append(version.get("versionTableColumn") + "="
				+ map.get(version.get("versionPropertyColumn")));
		return sql.toString();
	}

	/**
	 * @param k
	 * @param t
	 * @return
	 */
	public String getSQL(K k) {
		StringBuilder sql = new StringBuilder();
		String tableName = getTableName();
		sql.append(" SElECT  ");
		Map<String, List<String>> columnNames = getTableGeneriateColumnAnalyze();
		Map<String, String> version = getTableVersionColumnAnalyze();
		List<String> columns = columnNames.get("tableColumns");

		List<String> propertys = columnNames.get("propertyColumns");
		Map<String, String> key = getTableKeyColumnAnalyze();
		columns.add(0, key.get("keyTableColumn"));
		columns.add(1, version.get("versionTableColumn"));
		propertys.add(0, key.get("keyPropertyColumn"));
		propertys.add(1, version.get("versionPropertyColumn"));
		for (int i = 0; i < propertys.size() ; i++) {
			String property = propertys.get(i);
			String column = columns.get(i);
			sql.append(column + " as " + property + ",");
		}
		if (sql.toString().endsWith(",")) {
			sql.deleteCharAt(sql.toString().length() - 1);
		}
		sql.append(" FROM ");
		sql.append(tableName);
		sql.append(" WHERE  ");
		sql.append(key.get("keyTableColumn") + "='" + k + "'");
		return sql.toString();
	}

	/**
	 * 获取列表的SQL
	 * @param paramater
	 * @return
	 */
	public String queryListSQL(Map<String, Object> paramater,String sort) {
		StringBuilder sql = new StringBuilder();
		String tableName = getTableName();
		sql.append(" SElECT  ");
		Map<String, List<String>> columnNames = getTableGeneriateColumnAnalyze();
		List<String> columns = columnNames.get("tableColumns");
		List<String> propertys = columnNames.get("propertyColumns");
		Map<String, String> key = getTableKeyColumnAnalyze();
		Map<String, String> version = getTableVersionColumnAnalyze();
		columns.add(0, key.get("keyTableColumn"));
		propertys.add(0, key.get("keyPropertyColumn"));
		columns.add(1, version.get("versionTableColumn"));
		propertys.add(1, version.get("versionPropertyColumn"));
		for (int i = 0; i < propertys.size() ; i++) {
			String property = propertys.get(i);
			String column = columns.get(i);
			sql.append(column + " as " + property + ",");
		}
		if (sql.toString().endsWith(",")) {
			sql.deleteCharAt(sql.toString().length() - 1);
		}
		sql.append(" FROM ");
		sql.append(tableName);
		sql.append(" WHERE 1=1  ");
		if(paramater!=null){
			for (int i = 0; i < propertys.size() ; i++) {
				String property = propertys.get(i);
				String column = columns.get(i);
				if(paramater.get(property)!=null){
					if(paramater.get(property) instanceof java.lang.String){
						sql.append(" AND "+column+" = '"+paramater.get(property)+"' ");
					}else{
						sql.append(" AND "+column+" = "+paramater.get(property)+" ");
					}

				}
			}
			getOrderBySql(paramater, sql);
		}
		if(sort!=null && StringUtils.isNotBlank(sort)){
			sql.append(" order by  "+sort);
		}
		return sql.toString();
	}

	/**
	 * 生成排序部分sql
	 * @param paramater
	 * @param sql
	 */
	private void getOrderBySql(Map<String, Object> paramater, StringBuilder sql) {
		// add by haoqipeng
		// 添加排序
		if (paramater.get("sidx") != null && StringUtils.isNotEmpty(paramater.get("sidx").toString())) {
			sql.append(" order by ").append(paramater.get("sidx").toString()).append(" ");
			if (paramater.get("sord") != null && StringUtils.isNotEmpty(paramater.get("sord").toString())) {
				sql.append(paramater.get("sord").toString());
			}
		}
	}

	/**
	 * @param k
	 * @param t
	 * @return
	 */
	public String deleteByKey(K k) {
		StringBuilder sql = new StringBuilder();
		String tableName = getTableName();
		sql.append(" DELETE  ");
		Map<String, String> key = getTableKeyColumnAnalyze();
		List<String> propertys = new ArrayList<String>();
		propertys.add(key.get("keyPropertyColumn"));
		sql.append(" FROM ");
		sql.append(tableName);
		sql.append(" WHERE  ");
		sql.append(key.get("keyTableColumn") + "='" + k + "'");
		return sql.toString();
	}

	public String pseudoDeletionByKey(K k) {
		StringBuilder sql = new StringBuilder();
		String tableName = getTableName();
		sql.append(" UPDATE  ");
		sql.append(tableName);
		Map<String, String> key = getTableKeyColumnAnalyze();
		List<String> propertys = new ArrayList<String>();
		propertys.add(key.get("keyPropertyColumn"));
		sql.append(" SET delflag= true ");
		sql.append(" WHERE  ");
		sql.append(key.get("keyTableColumn") + "='" + k + "'");
		return sql.toString();
	}

	/**
	 * 批量删除sql
	 *
	 * @param ks
	 * @return
	 */
	public String deleteByKeys(List<K> ks) {
		StringBuilder sql = new StringBuilder();
		String tableName = getTableName();
		sql.append(" DELETE  ");
		Map<String, String> key = getTableKeyColumnAnalyze();
		List<String> propertys = new ArrayList<String>();
		propertys.add(key.get("keyPropertyColumn"));
		sql.append(" FROM ");
		sql.append(tableName);
		sql.append(" WHERE  ");
		sql.append(key.get("keyTableColumn") + " in ");
		sql.append(" ( ");
		for (K k : ks) {
			if (k != null) {
				if (k instanceof java.lang.String) {
					sql.append("'" + k + "',");
				} else {
					sql.append(k + ",");
				}

			} else {
				sql.append(null + ",");
			}
		}
		if (sql.toString().endsWith(",")) {
			sql.deleteCharAt(sql.toString().length() - 1);
		}
		sql.append(" ) ");

		return sql.toString();
	}

	/**
	 * @param t
	 * @param start
	 * @param limit
	 * @return
	 */
	public String getPageSQL(Map<String,Object> paramater, int start, int limit,String sort) {
		StringBuilder sql = new StringBuilder();
		String tableName = getTableName();
		sql.append(" SElECT  ");
		Map<String, List<String>> columnNames = getTableGeneriateColumnAnalyze2();
		Map<String, String> version = getTableVersionColumnAnalyze();
		List<String> columns = columnNames.get("tableColumns");
		List<String> propertys = columnNames.get("propertyColumns");
		List<String> fuzzys = columnNames.get("fuzzyColumns");
		Map<String, String> key = getTableKeyColumnAnalyze();
		columns.add(0, key.get("keyTableColumn"));
		propertys.add(0, key.get("keyPropertyColumn"));
		columns.add(1, version.get("versionTableColumn"));
		propertys.add(1, version.get("versionPropertyColumn"));
		fuzzys.add(0,Boolean.toString(false));
		fuzzys.add(1,Boolean.toString(false));
		for (int i = 0; i < propertys.size() ; i++) {
			String property = propertys.get(i);
			String column = columns.get(i);
			sql.append(column + " as " + property + ",");
		}
		if (sql.toString().endsWith(",")) {
			sql.deleteCharAt(sql.toString().length() - 1);
		}
		sql.append(" FROM ");
		sql.append(tableName);
		sql.append(" WHERE 1=1  ");

		if(sort!=null && StringUtils.isNotBlank(sort)){
			sql.append(" order by  "+sort);
		}

		sql.append(getWhereSql(paramater, columns, propertys, fuzzys));

		getOrderBySql(paramater, sql);

		sql.append(" limit "+start+" , "+limit+" ");
		return sql.toString();
	}


	/**
	 *
	 * 获取总记录数
	 * @param paramater
	 * @return
	 */
	public String getCount(Map<String,Object> paramater){
		Map<String, List<String>> columnNames = getTableGeneriateColumnAnalyze2();
		List<String> columns = columnNames.get("tableColumns");

		List<String> propertys = columnNames.get("propertyColumns");


		List<String> fuzzys = columnNames.get("fuzzyColumns");

		Map<String, String> key = getTableKeyColumnAnalyze();
		propertys.add(0, key.get("keyPropertyColumn"));
		columns.add(0, key.get("keyTableColumn"));
		fuzzys.add(0,Boolean.toString(false));
		StringBuilder sql = new StringBuilder();
		String tableName = getTableName();
		sql.append(" SElECT  COUNT("+key.get("keyTableColumn")+") ");
		sql.append(" FROM ");
		sql.append(tableName);
		sql.append(" WHERE 1=1  ");
		sql.append(getWhereSql(paramater, columns, propertys, fuzzys));
		return sql.toString();
	}

	/**
	 * 生成where部分sql
	 * @param paramater
	 * @param columns
	 * @param propertys
	 * @param fuzzys
	 * @return
	 */
	private String getWhereSql(Map<String, Object> paramater, List<String> columns, List<String> propertys, List<String> fuzzys) {
		StringBuilder sql = new StringBuilder();
		if(paramater!=null){
			for (int i = 0; i < propertys.size(); i++) {
				String property = propertys.get(i);
				String column = columns.get(i);
				if(paramater.get(property)!=null){
					if(paramater.get(property) instanceof java.lang.String){
						if (Boolean.toString(true).equals(fuzzys.get(i))) {
							sql.append(" AND "+column+" like '%"+paramater.get(property)+"%' ");
						} else {
							sql.append(" AND "+column+" = '"+paramater.get(property)+"' ");
						}
					}else{
						sql.append(" AND "+column+" = "+paramater.get(property)+" ");
					}

				}
			}
		}
		return sql.toString();
	}

	/**
	 * 根据类获取普通数据库列名,属性名
	 *
	 * @param clazz
	 * @return
	 */
	private Map<String, List<String>> getTableGeneriateColumnAnalyze() {
		Map<String, List<String>> map = new HashMap<String, List<String>>();
		// 获取类本身
		Field[] fields = clazz.getDeclaredFields();
		List<String> columns = new ArrayList<String>();
		List<String> propertys = new ArrayList<String>();
		for (Field f : fields) {
			Column column = (Column) f.getAnnotation(Column.class);
			if (column != null) {
				propertys.add(f.getName());
				if (StringUtils.isNotBlank(column.value())) {
					columns.add(column.value());
				} else {
					String propertyName = f.getName();
					StringBuilder columnName = new StringBuilder();
					for (int i = 0; i < propertyName.length(); i++) {
						char c = propertyName.charAt(i);
						if (Character.isUpperCase(c)) {
							columnName.append("_" + Character.toLowerCase(c));
						} else {
							columnName.append(c);
						}
					}
					columns.add(columnName.toString());
				}
			}
		}
		// 基类
		Class superClazz = clazz.getSuperclass();
		fields = superClazz.getDeclaredFields();
		for (Field f : fields) {
			Column column = (Column) f.getAnnotation(Column.class);
			if (column != null) {
				propertys.add(f.getName());
				if (StringUtils.isNotBlank(column.value())) {
					columns.add(column.value());
				} else {
					String propertyName = f.getName();
					StringBuilder columnName = new StringBuilder();
					for (int i = 0; i < propertyName.length(); i++) {
						char c = propertyName.charAt(i);
						if (Character.isUpperCase(c)) {
							columnName.append("_" + Character.toLowerCase(c));
						} else {
							columnName.append(c);
						}
					}
					columns.add(columnName.toString());
				}
			}

		}
		map.put("tableColumns", columns);
		map.put("propertyColumns", propertys);
		return map;
	}

	/**
	 * 根据类获取普通数据库列名,属性名， 添加模糊查询支持
	 *
	 * @param clazz
	 * @return
	 */
	private Map<String, List<String>> getTableGeneriateColumnAnalyze2() {
		Map<String, List<String>> map = new HashMap<String, List<String>>();
		// 获取类本身
		Field[] fields = clazz.getDeclaredFields();
		List<String> columns = new ArrayList<String>();
		List<String> propertys = new ArrayList<String>();
		List<String> fuzzys = new ArrayList<String>();
		for (Field f : fields) {
			Column column = (Column) f.getAnnotation(Column.class);
			if (column != null) {
				propertys.add(f.getName());
				if (StringUtils.isNotBlank(column.value())) {
					columns.add(column.value());
					fuzzys.add(Boolean.toString(column.fuzzyQuery()));
				} else {
					String propertyName = f.getName();
					StringBuilder columnName = new StringBuilder();
					for (int i = 0; i < propertyName.length(); i++) {
						char c = propertyName.charAt(i);
						if (Character.isUpperCase(c)) {
							columnName.append("_" + Character.toLowerCase(c));
						} else {
							columnName.append(c);
						}
					}
					columns.add(columnName.toString());
					fuzzys.add(Boolean.toString(false));
				}
			}
		}
		// 基类
		Class superClazz = clazz.getSuperclass();
		fields = superClazz.getDeclaredFields();
		for (Field f : fields) {
			Column column = (Column) f.getAnnotation(Column.class);
			if (column != null) {
				propertys.add(f.getName());
				if (StringUtils.isNotBlank(column.value())) {
					columns.add(column.value());
					fuzzys.add(Boolean.toString(column.fuzzyQuery()));
				} else {
					String propertyName = f.getName();
					StringBuilder columnName = new StringBuilder();
					for (int i = 0; i < propertyName.length(); i++) {
						char c = propertyName.charAt(i);
						if (Character.isUpperCase(c)) {
							columnName.append("_" + Character.toLowerCase(c));
						} else {
							columnName.append(c);
						}
					}
					columns.add(columnName.toString());
					fuzzys.add(Boolean.toString(false));
				}
			}

		}
		map.put("tableColumns", columns);
		map.put("propertyColumns", propertys);
		map.put("fuzzyColumns", fuzzys);
		return map;
	}

	/**
	 * 根据类获取主键数据库列名,属性名
	 *
	 * @param t
	 * @return
	 */
	private Map<String, String> getTableKeyColumnAnalyze() {
		Map<String, String> map = new HashMap<String, String>();
		// 获取类本身
		Field[] fields = clazz.getDeclaredFields();
		for (Field f : fields) {
			Key key = (Key) f.getAnnotation(Key.class);
			if (key != null) {
				map.put("keyPropertyColumn", f.getName());
				if (StringUtils.isNotBlank(key.value())) {
					map.put("keyTableColumn", key.value());
				} else {
					String propertyName = f.getName();
					StringBuilder columnName = new StringBuilder();
					for (int i = 0; i < propertyName.length(); i++) {
						char c = propertyName.charAt(i);
						if (Character.isUpperCase(c)) {
							columnName.append("_" + Character.toLowerCase(c));
						} else {
							columnName.append(c);
						}
					}
					map.put("keyTableColumn", columnName.toString());
				}
				break;
			}
		}
		// 基类
		Class superClazz = clazz.getSuperclass();
		fields = superClazz.getDeclaredFields();
		for (Field f : fields) {
			Key key = (Key) f.getAnnotation(Key.class);
			if (key != null) {
				map.put("keyPropertyColumn", f.getName());
				if (StringUtils.isNotBlank(key.value())) {
					map.put("keyTableColumn", key.value());
				} else {
					String propertyName = f.getName();
					StringBuilder columnName = new StringBuilder();
					for (int i = 0; i < propertyName.length(); i++) {
						char c = propertyName.charAt(i);
						if (Character.isUpperCase(c)) {
							columnName.append("_" + Character.toLowerCase(c));
						} else {
							columnName.append(c);
						}
					}
					map.put("keyTableColumn", columnName.toString());
				}
				break;
			}

		}
		return map;
	}

	/**
	 *
	 * 获取表的版本列
	 * @return
	 */
	private Map<String, String> getTableVersionColumnAnalyze() {
		Map<String, String> map = new HashMap<String, String>();
		// 获取类本身
		Field[] fields = clazz.getDeclaredFields();
		for (Field f : fields) {
			Version version = (Version) f.getAnnotation(Version.class);
			if (version != null) {
				map.put("versionPropertyColumn", f.getName());
				if (StringUtils.isNotBlank(version.value())) {
					map.put("versionTableColumn", version.value());
				} else {
					String propertyName = f.getName();
					StringBuilder columnName = new StringBuilder();
					for (int i = 0; i < propertyName.length(); i++) {
						char c = propertyName.charAt(i);
						if (Character.isUpperCase(c)) {
							columnName.append("_" + Character.toLowerCase(c));
						} else {
							columnName.append(c);
						}
					}
					map.put("versionTableColumn", columnName.toString());
				}
				break;
			}
		}
		// 基类
		Class superClazz = clazz.getSuperclass();
		fields = superClazz.getDeclaredFields();
		for (Field f : fields) {
			Version version = (Version) f.getAnnotation(Version.class);
			if (version != null) {
				map.put("versionPropertyColumn", f.getName());
				if (StringUtils.isNotBlank(version.value())) {
					map.put("versionTableColumn", version.value());
				} else {
					String propertyName = f.getName();
					StringBuilder columnName = new StringBuilder();
					for (int i = 0; i < propertyName.length(); i++) {
						char c = propertyName.charAt(i);
						if (Character.isUpperCase(c)) {
							columnName.append("_" + Character.toLowerCase(c));
						} else {
							columnName.append(c);
						}
					}
					map.put("versionTableColumn", columnName.toString());
				}
				break;
			}

		}
		return map;
	}

	/**
	 * 解析出实体对象属性值
	 *
	 * @param propertiyNames
	 * @param t
	 * @return
	 */
	public Map<String, Object> getTableColumnValuesAnalyze(
			List<String> propertiyNames, Object t) {
		Map<String, Object> propertyMap = new HashMap<String, Object>();
		try {
			Method[] methods = clazz.getMethods();
			Map<String, Object> map = new HashMap<String, Object>();
			for (Method method : methods) {
				String methodName = method.getName();
				if (methodName.startsWith("get")
						&& !"getClass".equals(methodName)) {
					Type type = method.getGenericReturnType();
					Class clz = (Class) type;
					//System.out.println(clz.getName());
					Object val = method.invoke(t);
					if (val != null && clz.getName().equals("java.lang.String")) {
						map.put(methodName.substring(3, 4).toLowerCase()
								+ methodName.substring(4), "'" + val + "'");
					} else if (val != null
							&& clz.getName().equals("java.util.Date")) {
						map.put(methodName.substring(3, 4).toLowerCase()
										+ methodName.substring(4),
								"'" + format.format(val) + "'");
					} else if (val != null
							&& clz.getName().equals("java.sql.Timestamp")) {
						map.put(methodName.substring(3, 4).toLowerCase()
										+ methodName.substring(4),
								"'" + format.format(val) + "'");
					} else {
						map.put(methodName.substring(3, 4).toLowerCase()
								+ methodName.substring(4), val);
					}
				}
			}
			for (String property : propertiyNames) {
				if (map.get(property) != null) {
					propertyMap.put(property, map.get(property));
				} else {
					propertyMap.put(property, null);
				}

			}

		} catch (IllegalArgumentException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return propertyMap;
	}

	/**
	 * 根据类获取表名
	 *
	 * @param clazz
	 * @return
	 */
	private String getTableName() {
		Table table = (Table) clazz.getAnnotation(Table.class);
		return table.value();
	}

}
