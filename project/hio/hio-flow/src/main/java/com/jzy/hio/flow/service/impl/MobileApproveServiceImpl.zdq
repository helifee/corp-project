package com.jzy.hio.flow.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.jzy.hio.base.utils.AttachmentDto;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.base.utils.AttachmentDto;
import com.jzy.hio.base.utils.DubboServiceResultInfo;
import com.jzy.hio.base.utils.JacksonUtils;
import com.jzy.hio.base.utils.LoginUtils;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.flow.dto.tobedeleted.ApprovalList;
import com.jzy.hio.flow.dto.tobedeleted.ApproveOperationDto;
import com.jzy.hio.flow.dto.tobedeleted.MobileApproveDto;
import com.jzy.hio.flow.dto.tobedeleted.MobileFormDto;
import com.jzy.hio.flow.entity.Instance;
import com.jzy.hio.flow.entity.InstanceTask;
import com.jzy.hio.flow.entity.MobileForm;
import com.jzy.hio.flow.entity.SysNoticeMsg;
import com.jzy.hio.flow.entity.UploadAttachment;
import com.jzy.hio.flow.mapper.MobileFormDao;
import com.jzy.hio.flow.service.ApproveOperationService;
import com.jzy.hio.flow.service.InstanceService;
import com.jzy.hio.flow.service.InstanceTaskService;
import com.jzy.hio.flow.service.MobileApproveService;
import com.jzy.hio.flow.service.MobileFormService;
import com.jzy.hio.flow.service.SysNoticeMsgService;
import com.jzy.hio.flow.service.UploadAttachmentService;
import com.jzy.hio.base.utils.DubboServiceResultInfo;
import com.jzy.hio.base.utils.LoginUtils;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;


/**
 * @author admin
 * 
 * 
 */

@Service
public class MobileApproveServiceImpl extends  BaseServiceImpl<String,Instance> implements MobileApproveService{

	private static Logger log = Logger.getLogger(MobileApproveServiceImpl.class);
	
	@Autowired
	private MobileFormService mobileFormService;
	
	@Autowired
	private MobileFormDao mobileFormDao;
	
	@Autowired
	private InstanceService instanceService;
	
	@Autowired
	private InstanceTaskService instanceTaskService;
	
	@Autowired
	private ApproveOperationService approveOperationService;
	
	@Autowired
	private UploadAttachmentService uploadAttachmentService;
	
	@Autowired
	private SysNoticeMsgService sysNoticeMsgService;
	
	/**
	 * paramMap(appId,businessId,instanceId,typeCode,approveRole)
	 */
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public MobileApproveDto queryMobileApproveByParamMap(Map<String, Object> msgIdMap) throws Exception {
		MobileApproveDto mobileApprove = new MobileApproveDto();
		String instanceId=null;
		String taskId =null;
		Map<String, Object> paramMap =null;
		//hr查看流程
		if(msgIdMap.get("instanceId")!=null && msgIdMap.get("businessId")!=null){
			instanceId = (String)msgIdMap.get("instanceId");
			paramMap=msgIdMap;
		}else{
			String msgId = (String)msgIdMap.get("msgId");
			SysNoticeMsg sysNoticeMsg = sysNoticeMsgService.getObjectById(msgId);
			mobileApprove.setMsgId(msgId);
			mobileApprove.setMsgDelFlag(sysNoticeMsg.getDelflag());
			String paramJSON = sysNoticeMsg.getMobibleParam();
			paramMap = JacksonUtils.fromJson(paramJSON, HashMap.class);
			instanceId = (String)paramMap.get("instanceId");
			taskId = (String)paramMap.get("taskId");
			
			mobileApprove.setOpType(sysNoticeMsg.getOpType());
			mobileApprove.setTaskId(taskId);
		}
		mobileApprove.setInstanceId(instanceId);
		String businessObjectName = mobileFormDao.getBusObjName(paramMap);
		if(StringUtils.isNotEmpty(businessObjectName)){
			mobileApprove.setBusinessObjectName(businessObjectName);
		}
		// 手机表单数据
		mobileApprove.setDataList(getMobileFormData(instanceId));
		// 流程过程附件
		mobileApprove.setFileList(getFlowAttachment(paramMap));

		// 流程审批记录
		mobileApprove.setFlowList(getApprovalLists(instanceId));
		// 获取审批操作
		mobileApprove.setNextList(getApproveOperation(paramMap));
		if(taskId!=null){
			InstanceTask task = instanceTaskService.getObjectById(taskId);
			mobileApprove.setCurrentTaskStatus(task.getStatus());
		}
		return mobileApprove;
	}
	
	/**
	 * 获取手机表单数据
	 * 
	 * @param instanceId
	 * @return
	 * @throws Exception
	 */
	private List<MobileFormDto> getMobileFormData(String instanceId) throws Exception {

		List<MobileFormDto> mobileFormDtos = new ArrayList<MobileFormDto>();

		HashMap<String, Object> conMap = new HashMap<String, Object>();
		conMap.put("instanceId", instanceId);
		conMap.put("sidx", "sort");
		conMap.put("sord", "asc");
		conMap.put("delflag", 0);
		/*List<MobileForm> mobileForms = mobileFormService.queryList(conMap);
		for (MobileForm mobileForm : mobileForms) {
			MobileFormDto dataDto = new MobileFormDto();
			BeanUtils.copyProperties(mobileForm, dataDto);
			mobileFormDtos.add(dataDto);
		}
		return mobileFormDtos;*/
		return null;
	}

	/**
	 * 获取流程表单附件
	 * 
	 * @param paramMap
	 * @return
	 * @throws Exception
	 */
	private List<AttachmentDto> getFlowAttachment(Map<String, Object> paramMap) throws Exception {

		List<AttachmentDto> attachmentDtos = new ArrayList<AttachmentDto>();

		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userInfo = JacksonUtils.toJson(userBeanInfo);

		HashMap<String, Object> conMap = new HashMap<String, Object>();
		String[] businessIdArray = { (String) paramMap.get("businessId") };
		if(paramMap.get("appId")!=null||paramMap.get("appCode")!=null){
//			if(paramMap.get("appId")!=null){
//				conMap.put("appId", paramMap.get("appId"));
//			}else{
//				String appId=appSystemDao.selectAppIdByCode(paramMap);
//				conMap.put("appId", appId);
//			}
			conMap.put("businessId", businessIdArray);
			// TODO zhangdaoqiang 1225
			String dubboResultInfo = null;//attachmentDtoServiceCustomer.queryListByObject(userInfo, JacksonUtils.toJson(conMap));
			DubboServiceResultInfo resultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if (resultInfo.isSucess()) {
				attachmentDtos = JacksonUtils.fromJson(resultInfo.getResult(), ArrayList.class, AttachmentDto.class);
			}
		}
		/*//还要再查询一下pt_flow_upload_attachment的数据，然后去查询对应的信息*/
		UploadAttachment queryParam = new UploadAttachment();
		queryParam.setInstanceId((String) paramMap.get("instanceId"));
		log.info("---- getFlowAttachment() 002 >>queryList() queryParam="+JacksonUtils.toJson(queryParam));
//		List<UploadAttachment> uploadDataList = uploadAttachmentService.queryList(queryParam);
		List<UploadAttachment> uploadDataList = new ArrayList<>();
		log.info("---- getFlowAttachment() 002 >>queryList() uploadDataList="+JacksonUtils.toJson(uploadDataList));
		if(uploadDataList!=null && uploadDataList.size()>0){
			if(attachmentDtos == null){
				attachmentDtos = new ArrayList<AttachmentDto>();
			}
			for(UploadAttachment updateData : uploadDataList){
				HashMap<String, Object> fileMap = new HashMap<String, Object>();
				String[] businessIds = {updateData.getBusinessId() };
				fileMap.put("businessId", businessIds);
				fileMap.put("categoryId", updateData.getCategoryId());//updateData.getCategoryId());
				log.info("---- getFlowAttachment() 003 >>queryListByObject() fileMap="+JacksonUtils.toJson(fileMap));
				// TODO zhangdaoqiang 1225
				String fileResultInfo = null;//attachmentDtoServiceCustomer.queryListByObject(userInfo, JacksonUtils.toJson(fileMap));
				DubboServiceResultInfo fileResult = JacksonUtils.fromJson(fileResultInfo, DubboServiceResultInfo.class);

				if (fileResult.isSucess()) {
					log.info("---- getFlowAttachment() 003 >>queryListByObject() fileMap="+JacksonUtils.toJson(fileMap));
					List<AttachmentDto> fileList = JacksonUtils.fromJson(fileResult.getResult(), ArrayList.class, AttachmentDto.class);
					if(fileList!=null && fileList.size()>0){
						attachmentDtos.addAll(fileList);
					}
				}
			}
		}
		return attachmentDtos;
	}
	
	/**
	 * 获取流程审批记录
	 * 
	 * @param instanceId
	 * @return
	 */
	private List<ApprovalList> getApprovalLists(String instanceId) {
		List<ApprovalList> approvalLists = new ArrayList<ApprovalList>();
		//approvalLists = instanceService.queryApprovalList((String) paramMap.get("instanceId"),"mobile", null,"0");
		approvalLists = instanceService.queryApprovalList(instanceId, "mobile", null,"0");
		return approvalLists;
	}
	
	/**
	 * 获取审批操作
	 * 
	 * @param paramMap
	 * @return
	 * @throws Exception
	 */
	private List<ApproveOperationDto> getApproveOperation(Map<String, Object> paramMap) throws Exception {

		List<ApproveOperationDto> approveOperationDtos = new ArrayList<ApproveOperationDto>();

		ApproveOperationDto approveOperationDto = new ApproveOperationDto();
		/*会签	HQ
		校稿	JG
		审核	SH
		审批	SP
		核对	HD
		办理	BL*/
		if (paramMap.get("typeCode")==null || paramMap.get("approveRole")==null) {
			return approveOperationDtos;
		}
		String typeCode = (String) paramMap.get("typeCode");
		String approveRole = (String) paramMap.get("approveRole");
		approveOperationDto.setTypeCode(typeCode); // 审批类型码
		approveOperationDto.setApproveRole(approveRole); // 审批角色: 1,发起人,2,审批人,3,被协办人

		approveOperationDtos = approveOperationService.queryListByApproveRoleCode(typeCode, approveRole);

		return approveOperationDtos;
	}

}
