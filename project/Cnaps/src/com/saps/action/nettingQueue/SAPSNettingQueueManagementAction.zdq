package com.saps.action.nettingQueue;


import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.bancstone.action.BaseAction;
import com.bancstone.common.exception.PicpMessageException;
import com.cnaps.coreservices.CommonXMLEntity;
import com.cnaps.coreservices.TransCodeEntity;
import com.cnaps.coreservices.TransServices;
import com.saps.entity.SAPSNettingQueueManagement;
import com.saps.form.SAPSNettingQueueManagemenForm;

/**
 * @包名   com.saps.action.nettingQueue
 * @文件名 SAPSNettingQueueManagementAction.java
 * @作者   zcx
 * @创建日期 May 13, 2011
 * @版本 V 1.0
 * 轧差清算排队管理
 */
@SuppressWarnings("unchecked")
public class SAPSNettingQueueManagementAction extends BaseAction{
	
	public ActionForward  querySave(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response)throws Exception {
		
		String business = request.getParameter("business");  // 标识 HVPS、BEPS、IBPS ……
		try{
			SAPSNettingQueueManagemenForm voform = (SAPSNettingQueueManagemenForm) form;
			//报文设置
			String transactionid = TransCodeEntity.SAPSNettingQueueManagementAction_sendMsg;//功能代码
			commSetToXML(voform,request,transactionid);
			//报文体组装发送
			TransServices transServices = (TransServices)this.getBean("transServices");
			CommonXMLEntity  commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(),"clearingaccts","");
			if(!commonXMLEntity.getProcessCode().equals("000000")){
				throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
			}
			request.setAttribute("business", business);
			return toSuccessPage(mapping,request,"轧差排队管理录入成功 ！,报文标识号为："+commonXMLEntity.getMessageId());

		} catch (Exception e) {
			e.printStackTrace(); 
			return toFailedPage(mapping, request,e.getMessage());
		}
	
		
	}
	
	
	@SuppressWarnings("unchecked")
	public ActionForward  queryList(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response)throws Exception {

		try{
			@SuppressWarnings("unused")
			String business = request.getParameter("business");  // 标识 HVPS、BEPS、IBPS ……
			//界面查询条件
			SAPSNettingQueueManagemenForm voform = (SAPSNettingQueueManagemenForm) form;
			SAPSNettingQueueManagement hpo = voform.getPo();
			//报文头设置
			String transactionid = TransCodeEntity.QUERYCD;//功能代码
			commSetToXML(voform,request,transactionid);
			//查询代码
			voform.setQueryCd(TransCodeEntity.SAPSNettingQueueManagementAction_sendMsg_query);
			//分页设置
			this.setFenYe(voform);

			//查询条件设置
			if (!StringUtils.isEmpty(hpo.getSendDrctPty())&&!"".equals(hpo.getSendDrctPty().trim())) 
			{
				
				voform.getConditions().add("instgdrctpty:"+hpo.getSendDrctPty().trim());
			}
			if (!StringUtils.isEmpty(hpo.getWorkDate())&&!"".equals(hpo.getWorkDate().trim())) 
			{
				
				voform.getConditions().add("workdt:"+hpo.getWorkDate().trim());
			}
			if (!StringUtils.isEmpty(hpo.getMsgId())&&!"".equals( hpo.getMsgId().trim())) 
			{
				
				voform.getConditions().add("msgid:"+hpo.getMsgId().trim());
			}
			//报文体组装发送
			TransServices transServices = (TransServices)this.getBean("transServices");
			CommonXMLEntity  commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(),"clearingaccts",voform.getQueryCd());
			if(!commonXMLEntity.getProcessCode().equals("000000")){
				throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
			}
			//设置分页信息。记录总条数
			if(commonXMLEntity.getRecordcount() == null){
				voform.setTotalSize(0);
			}else{
				voform.setTotalSize(Integer.parseInt(commonXMLEntity.getRecordcount()));
			}
		    setQueryPageValue(voform,true);
			List<SAPSNettingQueueManagement>  list = commonXMLEntity.getResults();
			//request.getSession().setAttribute("SAPSNettingQueueManagementDetaillist",  "");
//			request.getSession().removeAttribute("SAPSNettingQueueManagementDetaillist");
//			request.getSession().setAttribute("SAPSNettingQueueManagementDetaillist",  list);
			this.setPageInfo(request,voform);
			this.setObjectToRequest(request, "queryList",list);
			return mapping.findForward("queryList");

		} catch (Exception e) {
			e.printStackTrace(); 
			return toFailedPage(mapping, request,e.getMessage());
		}
	}
	@SuppressWarnings("unchecked")
	public ActionForward  queryDetail(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response)throws Exception {
//		  String id= request.getParameter("id");
//		   List<SAPSNettingQueueManagement> list=(List<SAPSNettingQueueManagement>) request.getSession().getAttribute("SAPSNettingQueueManagementDetaillist");
//		   for(SAPSNettingQueueManagement sap:list){
//			   if(sap.getId().equals(id)){
//				   request.setAttribute("sap", sap);
//				   break;
//			   }
//		   }
//		return mapping.findForward("detail");
		try{
			@SuppressWarnings("unused")
			String business = request.getParameter("business");  // 标识 HVPS、BEPS、IBPS ……
			//界面查询条件
			SAPSNettingQueueManagemenForm voform = (SAPSNettingQueueManagemenForm) form;
			SAPSNettingQueueManagement hpo = voform.getPo();
			//报文头设置
			String transactionid = TransCodeEntity.QUERYCD;//功能代码
			commSetToXML(voform,request,transactionid);
			//查询代码
			voform.setQueryCd(TransCodeEntity.SAPSNettingQueueManagementAction_sendMsg_query);
			//分页设置
			this.setFenYe(voform);

			//查询条件设置
			String id=request.getParameter("id");
			voform.getConditions().add("id:"+id);
			//报文体组装发送
			TransServices transServices = (TransServices)this.getBean("transServices");
			CommonXMLEntity  commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(),"clearingaccts",voform.getQueryCd());
			if(!commonXMLEntity.getProcessCode().equals("000000")){
				throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
			}
			//设置分页信息。记录总条数
			if(commonXMLEntity.getRecordcount() == null){
				voform.setTotalSize(0);
			}else{
				voform.setTotalSize(Integer.parseInt(commonXMLEntity.getRecordcount()));
			}
		    setQueryPageValue(voform,true);
			List<SAPSNettingQueueManagement>  list = commonXMLEntity.getResults();
			SAPSNettingQueueManagement sapsn=new SAPSNettingQueueManagement();
			if(list.size()==1){
				sapsn=list.get(0);
			}
			else if(list.size()>1){
				for(SAPSNettingQueueManagement i:list){
					if(id.equals(i.getId())){
						sapsn=i;
					}
				}
			}
			request.removeAttribute("sap");
			 request.setAttribute("sap", sapsn);
			return mapping.findForward("detail");

		} catch (Exception e) {
			e.printStackTrace(); 
			return toFailedPage(mapping, request,e.getMessage());
		}
		
	}
}
