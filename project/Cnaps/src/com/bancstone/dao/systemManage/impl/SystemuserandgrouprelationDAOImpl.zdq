package com.bancstone.dao.systemManage.impl;

import java.util.List;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockMode;
import org.springframework.context.ApplicationContext;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import com.bancstone.dao.systemManage.SystemuserandgrouprelationDAO;
import com.bancstone.hibernate.systemManage.Systemuserandgrouprelation;

/**
 * A data access object (DAO) providing persistence and search support for
 * Systemuserandgrouprelation entities. Transaction control of the save(),
 * update() and delete() operations can directly support Spring
 * container-managed transactions or they can be augmented to handle
 * user-managed Spring transactions. Each of these methods provides additional
 * information for how to configure it for the desired type of transaction
 * control.
 * 
 * @see com.bancstone.hibernate.systemManage.Systemuserandgrouprelation
 * @author MyEclipse Persistence Tools
 */

public class SystemuserandgrouprelationDAOImpl extends HibernateDaoSupport implements SystemuserandgrouprelationDAO {
	private static final Log log = LogFactory
			.getLog(SystemuserandgrouprelationDAOImpl.class);
	// property constants
	public static final String USERINDETIFIER = "userindetifier";
	public static final String TEAMID = "teamid";
	public static final String DESCRIPTION = "description";
	public static final String COMMON = "common";

	protected void initDao() {
		// do nothing
	}

	/* (non-Javadoc)
	 * @see com.bancstone.dao.impl.SystemuserandgrouprelationDAO#save(com.bancstone.hibernate.Systemuserandgrouprelation)
	 */
	public void save(Systemuserandgrouprelation transientInstance) {
		log.debug("saving Systemuserandgrouprelation instance");
		try {
			getHibernateTemplate().save(transientInstance);
			log.debug("save successful");
		} catch (RuntimeException re) {
			log.error("save failed", re);
			throw re;
		}
	}

	/* (non-Javadoc)
	 * @see com.bancstone.dao.impl.SystemuserandgrouprelationDAO#delete(com.bancstone.hibernate.Systemuserandgrouprelation)
	 */
	public void delete(Systemuserandgrouprelation persistentInstance) {
		log.debug("deleting Systemuserandgrouprelation instance");
		try {
			getHibernateTemplate().delete(persistentInstance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}

	/* (non-Javadoc)
	 * @see com.bancstone.dao.impl.SystemuserandgrouprelationDAO#findById(java.lang.Long)
	 */
	public Systemuserandgrouprelation findById(java.lang.Long id) {
		log.debug("getting Systemuserandgrouprelation instance with id: " + id);
		try {
			Systemuserandgrouprelation instance = (Systemuserandgrouprelation) getHibernateTemplate()
					.get("com.bancstone.hibernate.Systemuserandgrouprelation",
							id);
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	/* (non-Javadoc)
	 * @see com.bancstone.dao.impl.SystemuserandgrouprelationDAO#findByExample(com.bancstone.hibernate.Systemuserandgrouprelation)
	 */
	public List findByExample(Systemuserandgrouprelation instance) {
		log.debug("finding Systemuserandgrouprelation instance by example");
		try {
			List results = getHibernateTemplate().findByExample(instance);
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}

	/* (non-Javadoc)
	 * @see com.bancstone.dao.impl.SystemuserandgrouprelationDAO#findByProperty(java.lang.String, java.lang.Object)
	 */
	public List findByProperty(String propertyName, Object value) {
		log.debug("finding Systemuserandgrouprelation instance with property: "
				+ propertyName + ", value: " + value);
		try {
			String queryString = "from Systemuserandgrouprelation as model where model."
					+ propertyName + "= ?";
			return getHibernateTemplate().find(queryString, value);
		} catch (RuntimeException re) {
			log.error("find by property name failed", re);
			throw re;
		}
	}

	/* (non-Javadoc)
	 * @see com.bancstone.dao.impl.SystemuserandgrouprelationDAO#findByUserindetifier(java.lang.Object)
	 */
	public List findByUserindetifier(Object userindetifier) {
		return findByProperty(USERINDETIFIER, userindetifier);
	}

	/* (non-Javadoc)
	 * @see com.bancstone.dao.impl.SystemuserandgrouprelationDAO#findByTeamid(java.lang.Object)
	 */
	public List findByTeamid(Object teamid) {
		return findByProperty(TEAMID, teamid);
	}

	/* (non-Javadoc)
	 * @see com.bancstone.dao.impl.SystemuserandgrouprelationDAO#findByDescription(java.lang.Object)
	 */
	public List findByDescription(Object description) {
		return findByProperty(DESCRIPTION, description);
	}

	/* (non-Javadoc)
	 * @see com.bancstone.dao.impl.SystemuserandgrouprelationDAO#findByCommon(java.lang.Object)
	 */
	public List findByCommon(Object common) {
		return findByProperty(COMMON, common);
	}

	/* (non-Javadoc)
	 * @see com.bancstone.dao.impl.SystemuserandgrouprelationDAO#findAll()
	 */
	public List findAll() {
		log.debug("finding all Systemuserandgrouprelation instances");
		try {
			String queryString = "from Systemuserandgrouprelation";
			return getHibernateTemplate().find(queryString);
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}

	/* (non-Javadoc)
	 * @see com.bancstone.dao.impl.SystemuserandgrouprelationDAO#merge(com.bancstone.hibernate.Systemuserandgrouprelation)
	 */
	public Systemuserandgrouprelation merge(
			Systemuserandgrouprelation detachedInstance) {
		log.debug("merging Systemuserandgrouprelation instance");
		try {
			Systemuserandgrouprelation result = (Systemuserandgrouprelation) getHibernateTemplate()
					.merge(detachedInstance);
			log.debug("merge successful");
			return result;
		} catch (RuntimeException re) {
			log.error("merge failed", re);
			throw re;
		}
	}

	/* (non-Javadoc)
	 * @see com.bancstone.dao.impl.SystemuserandgrouprelationDAO#attachDirty(com.bancstone.hibernate.Systemuserandgrouprelation)
	 */
	public void attachDirty(Systemuserandgrouprelation instance) {
		log.debug("attaching dirty Systemuserandgrouprelation instance");
		try {
			getHibernateTemplate().saveOrUpdate(instance);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	/* (non-Javadoc)
	 * @see com.bancstone.dao.impl.SystemuserandgrouprelationDAO#attachClean(com.bancstone.hibernate.Systemuserandgrouprelation)
	 */
	public void attachClean(Systemuserandgrouprelation instance) {
		log.debug("attaching clean Systemuserandgrouprelation instance");
		try {
			getHibernateTemplate().lock(instance, LockMode.NONE);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public static SystemuserandgrouprelationDAO getFromApplicationContext(
			ApplicationContext ctx) {
		return (SystemuserandgrouprelationDAO) ctx
				.getBean("SystemuserandgrouprelationDAOImpl");
	}
}