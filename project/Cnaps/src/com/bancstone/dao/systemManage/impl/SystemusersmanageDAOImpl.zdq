package com.bancstone.dao.systemManage.impl;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockMode;
import org.springframework.context.ApplicationContext;

import com.bancstone.common.dao.impl.GenericHibernateDaoSupportImpl;
import com.bancstone.common.utils.StringUtil;
import com.bancstone.constants.SystemConstants;
import com.bancstone.dao.systemManage.SystemusersmanageDAO;
import com.bancstone.form.systemManage.SystemusersmanageForm;
import com.bancstone.hibernate.systemManage.Systemuserandgrouprelation;
import com.bancstone.hibernate.systemManage.Systemuserorganizationrelation;
import com.bancstone.hibernate.systemManage.Systemusersmanage;

/**
 * A data access object (DAO) providing persistence and search support for
 * SystemUsersmanage entities. Transaction control of the save(), update() and
 * delete() operations can directly support Spring container-managed
 * transactions or they can be augmented to handle user-managed Spring
 * transactions. Each of these methods provides additional information for how
 * to configure it for the desired type of transaction control.
 * 
 * @see com.bancstone.hibernate.systemManage.Systemusersmanage
 * @author MyEclipse Persistence Tools
 */

@SuppressWarnings("unchecked")
public class SystemusersmanageDAOImpl extends GenericHibernateDaoSupportImpl
		implements SystemusersmanageDAO {
	private static final Log log = LogFactory
			.getLog(SystemusersmanageDAOImpl.class);
	// property constants
	public static final String USERNAME = "username";
	public static final String USERTYPE = "usertype";
	public static final String USERCODE = "usercode";
	public static final String USERTELEPHONE = "usertelephone";
	public static final String USERMOBILE = "usermobile";
	public static final String LATTICEPOINT = "latticepoint";
	public static final String USERSEX = "usersex";
	public static final String USERIDCARD = "useridcard";
	public static final String USERADRESS = "useradress";
	public static final String USEREMAIL = "useremail";
	public static final String USERMSN = "usermsn";
	public static final String USERPASS = "userpass";
	public static final String USERGROUPTYPE = "usergrouptype";
	public static final String USERISACTIVITY = "userisactivity";
	public static final String USERPOSTALCODE = "userpostalcode";
	public static final String COMMON = "common";
	public static final String REALNAME = "realname";
	public static final String ENGLISHNAME = "englishname";
	public static final String ORGANIZATIONINDENTIFIER = "organizationindentifier";

	protected void initDao() {

	}

	/*
	 * (non-JavaDoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#save(com.bancstone.hibernate.Systemusersmanage)
	 */
	public void save(Systemusersmanage transientInstance) {
		log.debug("saving Systemusersmanage instance");
		try {
			transientInstance.setUserpass("654321");
			getHibernateTemplate().save(transientInstance);
			log.debug("save successful");
		} catch (RuntimeException re) {
			log.error("save failed", re);
			throw re;
		}
	}

	/*
	 * (non-JavaDoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#delete(com.bancstone.hibernate.Systemusersmanage)
	 */
	public void delete(Systemusersmanage persistentInstance) {
		log.debug("deleting Systemusersmanage instance");
		try {
			getHibernateTemplate().delete(persistentInstance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}

	/*
	 * (non-JavaDoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#findById(java.lang.String)
	 */
	public Systemusersmanage findById(java.lang.String id) {
		log.debug("getting Systemusersmanage instance with id: " + id);
		try {
			Systemusersmanage instance = (Systemusersmanage) getHibernateTemplate()
					.get(
							"com.bancstone.hibernate.systemManage.Systemusersmanage",
							id);
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			re.printStackTrace();
			throw re;
		}
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：史文龙</li>
	 * <li>2、开发日期：2010-8-5</li>
	 * <li>3、开发时间：下午01:44:46</li>
	 * <li>4、返回类型：SystemUsersmanage</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明： 查询一个用户下的 所有组 现在系统一个用户只对应一个组</li>
	 * </ul>
	 * 
	 * @param teamid
	 * @return
	 */
	public Systemuserandgrouprelation findGroupByUserId(
			java.lang.String userindetifier) {

		try {
			String hql = "from Systemuserandgrouprelation as model where model.id.userindetifier='"
					+ userindetifier + "' ";
			Systemuserandgrouprelation systemgroupsmanage = (Systemuserandgrouprelation) this
					.queryOnUniqueResult(hql);
			return systemgroupsmanage;

		} catch (RuntimeException re) {
			log.error("get failed", re);
			re.printStackTrace();
			throw re;
		}
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：史文龙</li>
	 * <li>2、开发日期：2010-8-5</li>
	 * <li>3、开发时间：下午01:55:59</li>
	 * <li>4、返回类型：SystemUsersmanage</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：查询一个用户所属的机构 现在系统一个用户对应一个机构</li>
	 * </ul>
	 * 
	 * @param oid
	 * @return
	 */
	public Systemuserorganizationrelation findOrganizationByUserId(
			java.lang.String userindentifier) {

		try {
			String hql = "from Systemuserorganizationrelation as model where model.id.userindentifier='"
					+ userindentifier + "' ";
			Systemuserorganizationrelation systemorganizationsmanage = (Systemuserorganizationrelation) this
					.queryOnUniqueResult(hql);
			return systemorganizationsmanage;

		} catch (RuntimeException re) {
			log.error("get failed", re);
			re.printStackTrace();
			throw re;
		}
	}

	/*
	 * (non-JavaDoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#findByExample(com.bancstone.hibernate.Systemusersmanage)
	 */
	public List findByExample(Systemusersmanage instance) {
		log.debug("finding Systemusersmanage instance by example");
		try {
			List results = getHibernateTemplate().findByExample(instance);
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}

	/*
	 * (non-JavaDoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#findByProperty(java.lang.String,
	 *      java.lang.Object)
	 */
	public List findByProperty(String propertyName, Object value) {
		log.debug("finding Systemusersmanage instance with property: "
				+ propertyName + ", value: " + value);
		try {
			String queryString = "from Systemusersmanage as model where model."
					+ propertyName + "= ?";
			return getHibernateTemplate().find(queryString, value);
		} catch (RuntimeException re) {
			log.error("find by property name failed", re);
			throw re;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#findByUsername(java.lang.Object)
	 */
	public List findByUsername(Object username) {
		return findByProperty(USERNAME, username);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#findByUsertype(java.lang.Object)
	 */
	public List findByUsertype(Object usertype) {
		return findByProperty(USERTYPE, usertype);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#findByUsercode(java.lang.Object)
	 */
	public List findByUsercode(Object usercode) {
		return findByProperty(USERCODE, usercode);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#findByUsertelephone(java.lang.Object)
	 */
	public List findByUsertelephone(Object usertelephone) {
		return findByProperty(USERTELEPHONE, usertelephone);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#findByUsermobile(java.lang.Object)
	 */
	public List findByUsermobile(Object usermobile) {
		return findByProperty(USERMOBILE, usermobile);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#findByLatticepoint(java.lang.Object)
	 */
	public List findByLatticepoint(Object latticepoint) {
		return findByProperty(LATTICEPOINT, latticepoint);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#findByUsersex(java.lang.Object)
	 */
	public List findByUsersex(Object usersex) {
		return findByProperty(USERSEX, usersex);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#findByUseridcard(java.lang.Object)
	 */
	public List findByUseridcard(Object useridcard) {
		return findByProperty(USERIDCARD, useridcard);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#findByUseradress(java.lang.Object)
	 */
	public List findByUseradress(Object useradress) {
		return findByProperty(USERADRESS, useradress);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#findByUseremail(java.lang.Object)
	 */
	public List findByUseremail(Object useremail) {
		return findByProperty(USEREMAIL, useremail);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#findByUsermsn(java.lang.Object)
	 */
	public List findByUsermsn(Object usermsn) {
		return findByProperty(USERMSN, usermsn);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#findByUserpass(java.lang.Object)
	 */
	public List findByUserpass(Object userpass) {
		return findByProperty(USERPASS, userpass);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#findByUsergrouptype(java.lang.Object)
	 */
	public List findByUsergrouptype(Object usergrouptype) {
		return findByProperty(USERGROUPTYPE, usergrouptype);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#findByUserisactivity(java.lang.Object)
	 */
	public List findByUserisactivity(Object userisactivity) {
		return findByProperty(USERISACTIVITY, userisactivity);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#findByUserpostalcode(java.lang.Object)
	 */
	public List findByUserpostalcode(Object userpostalcode) {
		return findByProperty(USERPOSTALCODE, userpostalcode);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#findByCommon(java.lang.Object)
	 */
	public List findByCommon(Object common) {
		return findByProperty(COMMON, common);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#findByRealname(java.lang.Object)
	 */
	public List findByRealname(Object realname) {
		return findByProperty(REALNAME, realname);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#findByEnglishname(java.lang.Object)
	 */
	public List findByEnglishname(Object englishname) {
		return findByProperty(ENGLISHNAME, englishname);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#findByOrganizationindentifier(java.lang.Object)
	 */
	public List findByOrganizationindentifier(Object organizationindentifier) {
		return findByProperty(ORGANIZATIONINDENTIFIER, organizationindentifier);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#findAll()
	 */
	public List<Systemusersmanage> findAll() {
		log.debug("finding all Systemusersmanage instances");
		try {
			String queryString = "from Systemusersmanage";
			return getHibernateTemplate().find(queryString);
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#merge(com.bancstone.hibernate.Systemusersmanage)
	 */
	public Systemusersmanage merge(Systemusersmanage detachedInstance) {
		log.debug("merging Systemusersmanage instance");
		try {
			Systemusersmanage result = (Systemusersmanage) getHibernateTemplate()
					.merge(detachedInstance);
			log.debug("merge successful");
			return result;
		} catch (RuntimeException re) {
			log.error("merge failed", re);
			throw re;
		}
	}

	/*
	 * (non-JavaDoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#attachDirty(com.bancstone.hibernate.Systemusersmanage)
	 */
	public void attachDirty(Systemusersmanage instance) {
		log.debug("attaching dirty Systemusersmanage instance");
		try {
			getHibernateTemplate().saveOrUpdate(instance);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemusersmanageDAO#attachClean(com.bancstone.hibernate.Systemusersmanage)
	 */
	public void attachClean(Systemusersmanage instance) {
		log.debug("attaching clean Systemusersmanage instance");
		try {
			getHibernateTemplate().lock(instance, LockMode.NONE);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public static SystemusersmanageDAO getFromApplicationContext(
			ApplicationContext ctx) {
		return (SystemusersmanageDAO) ctx.getBean("SystemusersmanageDAOImpl");
	}

	// 根据条件模糊查询用户列表
	@SuppressWarnings("unchecked")
	public List findByExample(SystemusersmanageForm systemusersmanageForm) {
		StringBuffer sqlBuffer = new StringBuffer(
				"From Systemusersmanage as u where 1=1");
		// 拼接SQL语句
		if (systemusersmanageForm != null) {
			if (systemusersmanageForm.getUsername() != null
					&& !"".equals(systemusersmanageForm.getUsername())) {
				sqlBuffer.append(" and username like '%"
						+ systemusersmanageForm.getUsername() + "%' ");
			}
			if (systemusersmanageForm.getUsercode() != null
					&& !"".equals(systemusersmanageForm.getUsercode())) {
				sqlBuffer.append(" and usercode like '%"
						+ systemusersmanageForm.getUsercode() + "%' ");
			}
			
			if (systemusersmanageForm.getUsergrouptype() != null
					&& !"".equals(systemusersmanageForm.getUsergrouptype())) {
				sqlBuffer.append(" and usergrouptype='"
						+ systemusersmanageForm.getUsergrouptype() + "'");
			}
			if (systemusersmanageForm.getUserisactivity() != null
					&& !"".equals(systemusersmanageForm.getUserisactivity())) {
				sqlBuffer.append(" and userisactivity='"
						+ systemusersmanageForm.getUserisactivity() + "' ");
			}
			if (systemusersmanageForm.getUsersex() != null
					&& !"".equals(systemusersmanageForm.getUsersex())) {
				sqlBuffer.append(" and usersex='"
						+ systemusersmanageForm.getUsersex() + "' ");
			}
			//总行
			if("01".equals(systemusersmanageForm.getSystemuser().getSystemorganizationsmanage().getLevelCode())){
				if(systemusersmanageForm.getOrganizationindentifier()==null||"".equals(systemusersmanageForm.getOrganizationindentifier())){
					//查询分行的和父机构是分行的
//					sqlBuffer.append(" and u.systemorganizationsmanage.namecode = '"
//							+ systemusersmanageForm.getSystemuser().getSystemorganizationsmanage().getNamecode() + 
//							"' or u.systemorganizationsmanage.parentidentifier='"+
//							systemusersmanageForm.getSystemuser().getSystemorganizationsmanage().getNamecode()+"'");
				}else{
					sqlBuffer.append(" and u.systemorganizationsmanage.namecode ='"
							+ systemusersmanageForm.getOrganizationindentifier() + "'");
				}
				
			//分行
			}else if("02".equals(systemusersmanageForm.getSystemuser().getSystemorganizationsmanage().getLevelCode())){
				if(systemusersmanageForm.getOrganizationindentifier()==null||"".equals(systemusersmanageForm.getOrganizationindentifier())){
					//查询分行的和父机构是分行的
					sqlBuffer.append(" and u.systemorganizationsmanage.namecode = '"
							+ systemusersmanageForm.getSystemuser().getSystemorganizationsmanage().getNamecode() + 
							"' or u.systemorganizationsmanage.parentidentifier='"+
							systemusersmanageForm.getSystemuser().getSystemorganizationsmanage().getNamecode()+"'");
				}else{
					sqlBuffer.append(" and u.systemorganizationsmanage.namecode ='"
							+ systemusersmanageForm
									.getOrganizationindentifier() + "'");
				}
			//支行
			}else{
				if(systemusersmanageForm.getOrganizationindentifier()==null||"".equals(systemusersmanageForm.getOrganizationindentifier())){
					//查询支行的
					sqlBuffer.append(" and u.systemorganizationsmanage.namecode ='"
							+ systemusersmanageForm.getSystemuser().getSystemorganizationsmanage().getNamecode() + "'");
				}else{
					//查询支行的
					sqlBuffer.append(" and u.systemorganizationsmanage.namecode ='"
							+ systemusersmanageForm.getOrganizationindentifier() + "'");
				}
				
			}
		}
		sqlBuffer.append(" order by userindetifier desc");
		List<Systemusersmanage> userList = new ArrayList<Systemusersmanage>();
		try {
			userList = this.query4Page(sqlBuffer.toString(),
					systemusersmanageForm.getPageInfo());
			for (Systemusersmanage systemusersmanage : userList) {
				// 把代码转成名称形式
				// 用户状态，01已激活。02未激活
				if (systemusersmanage.getUserisactivity().equals(
						SystemConstants.IS_ACTIVITY_NAMECODE)) {
					systemusersmanage.setUserisactivity(SystemConstants
							.getIsActivityNameByNameCode(systemusersmanage
									.getUserisactivity()));
				} else if (systemusersmanage.getUserisactivity().equals(
						SystemConstants.NOT_ACTIVITY_NAMECODE)) {
					systemusersmanage.setUserisactivity(SystemConstants
							.getIsActivityNameByNameCode(systemusersmanage
									.getUserisactivity()));
				}
				
			}
			log.debug("find by example successful, userList size: "
					+ userList.size());
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			re.printStackTrace();
			throw re;
		}
		return userList;
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 12, 2010</li>
	 * <li>3、开发时间：10:33:58 AM</li>
	 * <li>4、方法含义：</li>
	 * <li>5、方法说明：根据用户名密码获取用户</li>
	 * </ul>
	 * 
	 * @see com.bancstone.dao.systemManage.SystemusersmanageDAO#getUser(java.lang.String,
	 *      java.lang.String)
	 */
	@SuppressWarnings("unchecked")
	public Systemusersmanage getUser(String username, String password) {

		String sql = " select user FROM Systemusersmanage user where 1=1 AND user.username ='"
				+ username + "'";
  System.out.println  (sql);
		List list = this.queryByHql(sql);
		Systemusersmanage user = null;
		if (list.size() > 0) {
			user = (Systemusersmanage) list.get(0);
		}
		return user;

	}

	/**
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Sep 7, 2010</li>
	 * <li>3、开发时间：11:07:25 AM</li>
	 * <li>4、方法含义：</li>
	 * <li>5、方法说明：用户密码重置</li>
	 * </ul>
	 * 
	 * @see com.bancstone.dao.systemManage.SystemusersmanageDAO#resetPasswordByKey(java.lang.String)
	 */
	public void resetPasswordByKey(String identifier) {
		Systemusersmanage systemusersmanage = null;
		try {
			systemusersmanage = this.findById(identifier);
			systemusersmanage.setUserpass("654321");
			this.merge(systemusersmanage);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Oct 25, 2010</li>
	 * <li>3、开发时间：10:32:57 AM</li>
	 * <li>4、方法含义：</li>
	 * <li>5、方法说明：</li>
	 * </ul>
	 * 
	 * @see com.bancstone.dao.systemManage.SystemusersmanageDAO#getUser(com.bancstone.form.systemManage.SystemusersmanageForm)
	 */
	public Systemusersmanage getUser(SystemusersmanageForm userform) {
		StringBuffer buffer = new StringBuffer(
				"FROM Systemusersmanage user where 1=1 ");

//		if (!"".equals(StringUtil.nullToString(userform.getEnglishname()))) {
//			buffer.append(" AND user.englishname='"
//					+ StringUtil.nullToString(userform.getEnglishname()).trim()
//					+ "'");
//		}
		if (!"".equals(StringUtil.nullToString(userform.getUsername()))) {
			buffer
					.append(" AND user.username='" + userform.getUsername()
							+ "'");
		}
		Systemusersmanage user = null;
		try {
			user = (Systemusersmanage) this.queryOnUniqueResult(buffer
					.toString());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return user;
	}
}