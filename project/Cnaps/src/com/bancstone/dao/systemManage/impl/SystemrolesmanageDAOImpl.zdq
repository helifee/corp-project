package com.bancstone.dao.systemManage.impl;

import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockMode;
import org.springframework.context.ApplicationContext;

import com.bancstone.common.dao.impl.GenericHibernateDaoSupportImpl;
import com.bancstone.common.utils.StringUtil;
import com.bancstone.constants.SystemConstants;
import com.bancstone.dao.systemManage.SystemrolesmanageDAO;
import com.bancstone.form.systemManage.SystemrolesmanageForm;
import com.bancstone.hibernate.systemManage.Systemrolesmanage;

/**
 * A data access object (DAO) providing persistence and search support for
 * Systemrolesmanage entities. Transaction control of the save(), update() and
 * delete() operations can directly support Spring container-managed
 * transactions or they can be augmented to handle user-managed Spring
 * transactions. Each of these methods provides additional information for how
 * to configure it for the desired type of transaction control.
 * 
 * @see com.bancstone.hibernate.systemManage.Systemrolesmanage
 * @author MyEclipse Persistence Tools
 */

public class SystemrolesmanageDAOImpl extends GenericHibernateDaoSupportImpl
		implements SystemrolesmanageDAO {
	private static final Log log = LogFactory
			.getLog(SystemrolesmanageDAOImpl.class);
	// property constants
	public static final String NAME = "name";
	public static final String ENGLISHNAME = "englishname";
	public static final String NAMECODE = "namecode";
	public static final String PHONETICIZECODE = "phoneticizecode";
	public static final String ISACTIVITY = "isactivity";
	public static final String COMMON = "common";
	public static final String TYPE = "type";
	public static final String PARENTINDENTIFIER = "parentindentifier";

	protected void initDao() {
		// do nothing
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemrolesmanageDAO#save(com.bancstone.hibernate.Systemrolesmanage)
	 */
	public void save(Systemrolesmanage transientInstance) {
		log.debug("saving Systemrolesmanage instance");
		try {
			getHibernateTemplate().save(transientInstance);
			log.debug("save successful");
		} catch (RuntimeException re) {
			log.error("save failed", re);
			throw re;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemrolesmanageDAO#delete(com.bancstone.hibernate.Systemrolesmanage)
	 */
	public void delete(Systemrolesmanage persistentInstance) {
		log.debug("deleting Systemrolesmanage instance");
		try {
			getHibernateTemplate().delete(persistentInstance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemrolesmanageDAO#findById(java.lang.String)
	 */
	public Systemrolesmanage findById(java.lang.String id) {
		log.debug("getting Systemrolesmanage instance with id: " + id);
		try {
			Systemrolesmanage instance = (Systemrolesmanage) getHibernateTemplate()
					.get(
							"com.bancstone.hibernate.systemManage.Systemrolesmanage",
							id);
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemrolesmanageDAO#findByExample(com.bancstone.hibernate.Systemrolesmanage)
	 */
	public List findByExample(Systemrolesmanage instance) {
		log.debug("finding Systemrolesmanage instance by example");
		try {
			List results = getHibernateTemplate().findByExample(instance);
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemrolesmanageDAO#findByProperty(java.lang.String,
	 *      java.lang.Object)
	 */
	public List findByProperty(String propertyName, Object value) {
		log.debug("finding Systemrolesmanage instance with property: "
				+ propertyName + ", value: " + value);
		try {
			String queryString = "from Systemrolesmanage as model where model."
					+ propertyName + "= ?";
			return getHibernateTemplate().find(queryString, value);
		} catch (RuntimeException re) {
			log.error("find by property name failed", re);
			throw re;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemrolesmanageDAO#findByName(java.lang.Object)
	 */
	public List findByName(Object name) {
		return findByProperty(NAME, name);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemrolesmanageDAO#findByEnglishname(java.lang.Object)
	 */
	public List findByEnglishname(Object englishname) {
		return findByProperty(ENGLISHNAME, englishname);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemrolesmanageDAO#findByNamecode(java.lang.Object)
	 */
	public List findByNamecode(Object namecode) {
		return findByProperty(NAMECODE, namecode);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemrolesmanageDAO#findByPhoneticizecode(java.lang.Object)
	 */
	public List findByPhoneticizecode(Object phoneticizecode) {
		return findByProperty(PHONETICIZECODE, phoneticizecode);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemrolesmanageDAO#findByIsactivity(java.lang.Object)
	 */
	public List findByIsactivity(Object isactivity) {
		return findByProperty(ISACTIVITY, isactivity);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemrolesmanageDAO#findByCommon(java.lang.Object)
	 */
	public List findByCommon(Object common) {
		return findByProperty(COMMON, common);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemrolesmanageDAO#findByType(java.lang.Object)
	 */
	public List findByType(Object type) {
		return findByProperty(TYPE, type);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemrolesmanageDAO#findByParentindentifier(java.lang.Object)
	 */
	public List findByParentindentifier(Object parentindentifier) {
		return findByProperty(PARENTINDENTIFIER, parentindentifier);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemrolesmanageDAO#findAll()
	 */
	public List findAll() {
		log.debug("finding all Systemrolesmanage instances");
		try {
			String queryString = "from Systemrolesmanage";
			return getHibernateTemplate().find(queryString);
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemrolesmanageDAO#merge(com.bancstone.hibernate.Systemrolesmanage)
	 */
	public Systemrolesmanage merge(Systemrolesmanage detachedInstance) {
		log.debug("merging Systemrolesmanage instance");
		try {
			Systemrolesmanage result = (Systemrolesmanage) getHibernateTemplate()
					.merge(detachedInstance);
			log.debug("merge successful");
			return result;
		} catch (RuntimeException re) {
			log.error("merge failed", re);
			throw re;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemrolesmanageDAO#attachDirty(com.bancstone.hibernate.Systemrolesmanage)
	 */
	public void attachDirty(Systemrolesmanage instance) {
		log.debug("attaching dirty Systemrolesmanage instance");
		try {
			getHibernateTemplate().saveOrUpdate(instance);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.bancstone.dao.impl.SystemrolesmanageDAO#attachClean(com.bancstone.hibernate.Systemrolesmanage)
	 */
	public void attachClean(Systemrolesmanage instance) {
		log.debug("attaching clean Systemrolesmanage instance");
		try {
			getHibernateTemplate().lock(instance, LockMode.NONE);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public static SystemrolesmanageDAO getFromApplicationContext(
			ApplicationContext ctx) {
		return (SystemrolesmanageDAO) ctx.getBean("SystemrolesmanageDAOImpl");
	}

	/**
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 26, 2010</li>
	 * <li>3、开发时间：9:44:17 AM</li>
	 * <li>4、方法含义：</li>
	 * <li>5、方法说明：</li>
	 * </ul>
	 * 
	 * @see com.bancstone.dao.systemManage.SystemrolesmanageDAO#querySystemRoleList(com.bancstone.form.systemManage.SystemrolesmanageForm)
	 */
	@SuppressWarnings("unchecked")
	public List<Systemrolesmanage> querySystemRoleList(
			SystemrolesmanageForm systemrolesmanageForm) {
		StringBuffer buf = new StringBuffer(
				"FROM Systemrolesmanage AS role WHERE 1=1");
		if (!""
				.equals(StringUtil
						.nullToString(systemrolesmanageForm.getName()))) {
			buf.append(" AND name='" + systemrolesmanageForm.getName() + "'");
		}
//		if (!"".equals(StringUtil.nullToString(systemrolesmanageForm
//				.getEnglishname()))) {
//			if (!systemrolesmanageForm.getEnglishname().equals(
//					SystemConstants.USER_CLASS_CODE_ADMIN)) {
//				buf.append(" AND englishname='"
//						+ systemrolesmanageForm.getEnglishname() + "'");
//			}
//
//		}
//		if (!"".equals(StringUtil.nullToString(systemrolesmanageForm
//				.getNamecode()))) {
//			if (systemrolesmanageForm.getNamecode().equals(
//					SystemConstants.ROLE_AND_GROUP_LEVEL_CODE01)) {
//				buf.append(" AND namecode!='"
//						+ SystemConstants.ROLE_AND_GROUP_LEVEL_CODE02 + "'");
//			}
//			if (systemrolesmanageForm.getNamecode().equals(
//					SystemConstants.ROLE_AND_GROUP_LEVEL_CODE00)) {
//				buf.append(" AND namecode='"
//						+ SystemConstants.ROLE_AND_GROUP_LEVEL_CODE00 + "'");
//			}
//		}
		buf.append(" ORDER BY identifier ASC");
		List<Systemrolesmanage> systemRoleList = null;
		try {
			systemRoleList = this.query4Page(buf.toString(),
					systemrolesmanageForm.getPageInfo());
			for (Systemrolesmanage systemrolesmanage : systemRoleList) {

				if (systemrolesmanage.getIsactivity().equals(
						SystemConstants.IS_ACTIVITY_NAMECODE)) {
					systemrolesmanage
							.setIsactivity(SystemConstants
									.getIsActivityNameByNameCode(SystemConstants.IS_ACTIVITY_NAMECODE));
				} else {
					systemrolesmanage
							.setIsactivity(SystemConstants
									.getIsActivityNameByNameCode(SystemConstants.NOT_ACTIVITY_NAMECODE));
				}
			}

		} catch (Exception e) {

			e.printStackTrace();
		}
		return systemRoleList;
	}

	/**
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 4, 2010</li>
	 * <li>3、开发时间：11:06:31 AM</li>
	 * <li>4、方法含义：</li>
	 * <li>5、方法说明：根据用户组标识符查询角色列表</li>
	 * </ul>
	 * 
	 * @see com.bancstone.dao.systemManage.SystemrolesmanageDAO#queryRoleListByGroupIndentifier(java.lang.String)
	 */
	@SuppressWarnings("unchecked")
	public List<Systemrolesmanage> queryRoleListByIndentifier(String indentifier) {
		StringBuffer buf = new StringBuffer(
				"FROM Systemrolesmanage AS role WHERE 1=1 AND role.identifier='"
						+ indentifier + "'");
		return this.queryByHql(buf.toString());
	}

	/**
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 5, 2010</li>
	 * <li>3、开发时间：10:50:46 AM</li>
	 * <li>4、方法含义：</li>
	 * <li>5、方法说明：</li>
	 * </ul>
	 * 
	 * @see com.bancstone.dao.systemManage.SystemrolesmanageDAO#findByIndentifier(java.lang.String)
	 */
	public Systemrolesmanage findByIndentifier(String indentifier) {
		StringBuffer buf = new StringBuffer(
				"FROM Systemrolesmanage AS role WHERE 1=1 AND role.identifier='"
						+ indentifier + "'");
		Systemrolesmanage systemrolesmanage = null;
		try {
			systemrolesmanage = (Systemrolesmanage) this
					.queryOnUniqueResult(buf.toString());
			if (systemrolesmanage.getIsactivity().equals(
					SystemConstants.IS_ACTIVITY_NAMECODE)) {
				systemrolesmanage
						.setIsactivity(SystemConstants
								.getIsActivityNameByNameCode(SystemConstants.IS_ACTIVITY_NAMECODE));
			} else {
				systemrolesmanage
						.setIsactivity(SystemConstants
								.getIsActivityNameByNameCode(SystemConstants.NOT_ACTIVITY_NAMECODE));

			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return systemrolesmanage;
	}

	/**
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Oct 12, 2010</li>
	 * <li>3、开发时间：5:59:39 PM</li>
	 * <li>4、方法含义：</li>
	 * <li>5、方法说明：</li>
	 * </ul>
	 * 
	 * @see com.bancstone.dao.systemManage.SystemrolesmanageDAO#findByEnglishname(java.lang.String)
	 */
	public List findByEnglishname(String roleClass) {
		StringBuffer buffer = new StringBuffer(
				"from Systemrolesmanage as sr where 1=1");
		if (!"".equals(StringUtil.nullToString(roleClass))
				&& !roleClass.trim().equals(
						SystemConstants.USER_CLASS_CODE_ADMIN)) {
			buffer.append(" AND englishname='" + roleClass + "'");
		}
		List<Systemrolesmanage> sr = null;
		try {
			sr = this.queryByHql(buffer.toString());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return sr;
	}
}