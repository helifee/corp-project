package com.bancstone.action;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.springframework.context.ApplicationContext;
import org.springframework.web.context.support.WebApplicationContextUtils;

import com.bancstone.common.page.PageInfo;
import com.bancstone.common.utils.StringUtil;
import com.bancstone.constants.SystemConstants;
import com.bancstone.form.BaseActionForm;
import com.bancstone.hibernate.systemManage.Authordistributionmanager;
import com.bancstone.hibernate.systemManage.Systemorganizationsmanage;
import com.bancstone.hibernate.systemManage.Systemusersmanage;
import com.bancstone.service.systemManage.AuthordistributionmanagerServices;
import com.bancstone.service.systemManage.SystemorganizationsmanageServices;
import com.bancstone.service.systemManage.SystemusersmanageServices;
import com.cnaps.hvps.persistence.messages.Hvpspartyinfo;

public class BaseAction<T> extends DispatchAction {
	/**
	 * 设置XML需要用到公共XML部分
	 * 
	 * @param voform
	 * @param hpo
	 */
	public void commSetToXML(BaseActionForm voform, String transactionid,
			String business) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
		voform.setSource("CNAPS2");
		voform.setDestination(business);
		voform.setTransactionId(transactionid);// 交易代码
		voform.setSendDateTime(sdf.format(new Date()));

	}

	/**
	 * 设置XML需要用到公共XML部分
	 * 
	 * @param voform
	 * @param hpo
	 */
	public void commSetToXML(BaseActionForm voform, HttpServletRequest request,
			String transactionId) {
		// 报文头设置
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
		voform.setSource("QBQD");
		voform.setDestination("CNAPS2");// 系统编号
		voform.setTransactionId(transactionId);// 功能代码
		voform.setSendDateTime(sdf.format(new Date())); // 发送时间
		voform.setTermId(request.getSession().getAttribute("termId") + "");// 终端号
		voform.setBrnchCd(request.getSession().getAttribute("brnchCd") + "");// 网点号
		Systemusersmanage user = (Systemusersmanage) request.getSession()
				.getAttribute("userentity");
		voform.setOperTeller(user.getUsername());// 操作员
		Hvpspartyinfo bankInfo = (Hvpspartyinfo) request.getSession()
				.getAttribute("bankInfo");
		voform.setOperBankCode(bankInfo.getBankcode());// 发起参与机构
		voform.setOrgCode(request.getSession().getAttribute("orgcode")+"");// 机构号
	}

	// AJAX输出，返回null
	public String ajax(String content, HttpServletResponse response) {
		try {

			response.setContentType("text/html;charset=UTF-8");
			response.setHeader("Pragma", "No-cache");
			response.setHeader("Cache-Control", "no-cache");
			response.setDateHeader("Expires", 0);
			response.getWriter().write(content);
			response.getWriter().flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 编辑修改添加明细使用同一个页面用到的方法 判断用
	 * 
	 * @param request
	 */
	public void setDoPageRequestObject(HttpServletRequest request) {
		request.setAttribute("QUERYSENDXML_STATS",
				SystemConstants.QUERYSENDXML_STATS);
		request.setAttribute("QUERYRECEIVEXML_STATS",
				SystemConstants.QUERYRECEIVEXML_STATS);
		request.setAttribute("SAVE_STATS", SystemConstants.SAVE_STATS);
		request.setAttribute("DETAIL_STATS", SystemConstants.DETAIL_STATS);
		request.setAttribute("CHECK_STATS", SystemConstants.CHECK_STATS);
		request.setAttribute("UPDATE_STATS", SystemConstants.UPDATE_STATS);
		request.setAttribute("DO_STATS", SystemConstants.DO_STATS);

	}

	/**
	 * 根据 bean id名称，返回 bean 实例
	 * 
	 * @param name
	 * @return
	 */
	protected Object getBean(String name) {
		ApplicationContext ctx = WebApplicationContextUtils
				.getRequiredWebApplicationContext(servlet.getServletContext());
		return ctx.getBean(name);
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 31, 2010</li>
	 * <li>3、开发时间：4:47:36 PM</li>
	 * <li>4、返回类型：void</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：将组装好的JsonString会写输出到请求方</li>
	 * </ul>
	 * 
	 * @param response
	 * @param jsonString
	 * @throws IOException
	 */
	protected ActionForward writeResponseJson(HttpServletResponse response,
			String jsonString) throws IOException {
		response.setContentType(SystemConstants.JSON_RESPONSE_CONTENT_TYPE);
		response.getWriter().write(jsonString);
		return null;
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 17, 2010</li>
	 * <li>3、开发时间：10:27:54 PM</li>
	 * <li>4、返回类型：T</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：根据bean.class名称，返回 bean 实例</li>
	 * </ul>
	 * 
	 * @param clazz
	 * @return
	 * @return
	 */
	@SuppressWarnings( { "unchecked", "hiding" })
	protected <T> T getBean(Class<T> clazz) {
		ApplicationContext ctx = WebApplicationContextUtils
				.getRequiredWebApplicationContext(servlet.getServletContext());
		return (T) ctx.getBean(clazz.getSimpleName().toLowerCase());
	}

	/**
	 * 传到错误消息提示页
	 * 
	 * @param mapping
	 * @param request
	 * @param message
	 * @return
	 */
	protected ActionForward toErrorPage(ActionMapping mapping,
			HttpServletRequest request, String message) {
		request.setAttribute("message", message);
		return mapping.findForward("error");
	}

	/**
	 * 传到成功消息提示页
	 * 
	 * @param mapping
	 * @param request
	 * @param message
	 * @return
	 */
	protected ActionForward toSuccessPage(ActionMapping mapping,
			HttpServletRequest request, String message) {
		request.setAttribute("message", message);
		return mapping.findForward("success");
	}

	/**
	 * 传到成功消息提示页
	 * 
	 * @param mapping
	 * @param request
	 * @param message
	 * @return
	 */
	protected ActionForward toSuccessPage(ActionMapping mapping,
			HttpServletRequest request, String message, String msgid,
			String systemCode,String pmttp) {
		request.setAttribute("message", message);
		request.setAttribute("msgid", msgid);
		request.setAttribute("systemCode", systemCode);
		request.setAttribute("pmttp", pmttp);
		return mapping.findForward("transSuccess");
	}
	

	/**
	 * 传到授权成功消息提示页
	 * 
	 * @param mapping
	 * @param request
	 * @param message
	 * @return
	 */
	protected ActionForward toAthorizationSuccessPage(ActionMapping mapping,
			HttpServletRequest request, String message) {
		request.setAttribute("message", message);
		return mapping.findForward("AthorizationSuccess");
	}

	/**
	 * 转到提示页面(带有自定义链接地址)
	 * 
	 * @param mapping
	 * @param request
	 * @param operation_result
	 * @param flag
	 *            成功失败标识
	 * @param next_url
	 *            跳转路径
	 * @param message
	 * @return
	 */
	protected ActionForward toReceiptPage(ActionMapping mapping,
			HttpServletRequest request, boolean operation_result, String flag,
			String next_url, String message) {
		request.setAttribute("message", message);
		request
				.setAttribute(SystemConstants.OPERATION_RESULT,
						operation_result);
		request.setAttribute(SystemConstants.MESSAGE, message);
		request.setAttribute("flag", flag);
		request.setAttribute(SystemConstants.NEXT_URL, next_url);
		return mapping.findForward(SystemConstants.RECEIPT);
	}

	/**
	 * 传到警告消息提示页
	 * 
	 * @param mapping
	 * @param request
	 * @param message
	 * @return
	 */
	protected ActionForward toWarnningPage(ActionMapping mapping,
			HttpServletRequest request, String message) {
		request.setAttribute("message", message);
		return mapping.findForward("warnning");
	}

	/**
	 * 传到失败消息提示页
	 * 
	 * @param mapping
	 * @param request
	 * @param message
	 * @return
	 */
	protected ActionForward toFailedPage(ActionMapping mapping,
			HttpServletRequest request, String message) {
		request.setAttribute("message", message);
		return mapping.findForward("failed");
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 13, 2010</li>
	 * <li>3、开发时间：12:02:30 AM</li>
	 * <li>4、返回类型：String</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：得到 context 路径</li>
	 * </ul>
	 * 
	 * @return
	 */
	protected String getContextPath() {
		return servlet.getServletContext().getRealPath("/");
	}

	protected String processStream(InputStream in) {

		String bodyStr = "";

		try {
			BufferedInputStream br = new BufferedInputStream(in);
			// System.out.println(br.available());
			byte[] b = new byte[br.available()];
			br.read(b);
			bodyStr = new String(b);
		} catch (Exception e) {

		}
		return bodyStr;
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 13, 2010</li>
	 * <li>3、开发时间：12:02:14 AM</li>
	 * <li>4、返回类型：Systemusersmanage</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：取得 用户登录信息</li>
	 * </ul>
	 * 
	 * @param request
	 * @return
	 */
	public static Systemusersmanage getUserInfo(HttpServletRequest request) {
		return (Systemusersmanage) request.getSession().getAttribute(
				"userentity");
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 13, 2010</li>
	 * <li>3、开发时间：12:01:41 AM</li>
	 * <li>4、返回类型：Systemusersmanage</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：取得 用户信息</li>
	 * </ul>
	 * 
	 * @param request
	 * @return
	 */
	protected static Systemusersmanage getUserModel(HttpServletRequest request) {
		HttpSession session = request.getSession();
		return (Systemusersmanage) session.getAttribute("userentity");
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 14, 2010</li>
	 * <li>3、开发时间：11:25:05 AM</li>
	 * <li>4、返回类型：List<Systemorganizationsmanage></li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：根据用户所属当前机构获取当前机构或下属机构(如果是总行返回全部列表)</li>
	 * </ul>
	 * 
	 * @param request
	 * @return
	 */
	protected List<Systemorganizationsmanage> getSelfAndChildrenOrgModel(
			HttpServletRequest request) {
		SystemorganizationsmanageServices organizationServices = (SystemorganizationsmanageServices) this
				.getBean("systemorganizationsmanageServices");
		return organizationServices.getSelfAndChildrenOrgModel(this
				.getOrganizationModel(request));
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Oct 15, 2010</li>
	 * <li>3、开发时间：6:08:16 PM</li>
	 * <li>4、返回类型：List<Systemorganizationsmanage></li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：根据用户所属当前机构获取当前机构或直接下属机构</li>
	 * </ul>
	 * 
	 * @param request
	 * @return
	 */
	protected List<Systemorganizationsmanage> getSelfAndZhiJieChildrenOrgModel(
			HttpServletRequest request) {
		SystemorganizationsmanageServices organizationServices = (SystemorganizationsmanageServices) this
				.getBean("systemorganizationsmanageServices");
		return organizationServices.getSelfAndZhiJieChildrenOrgModel(this
				.getOrganizationModel(request));
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Oct 24, 2010</li>
	 * <li>3、开发时间：4:57:09 PM</li>
	 * <li>4、返回类型：List<Systemorganizationsmanage></li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：根据机构号获取当前机构或直接下属机构</li>
	 * </ul>
	 * 
	 * @param namecode
	 * @return
	 */
	protected List<Systemorganizationsmanage> getSelfAndZhiJieChildrenOrgModel(
			String namecode) {
		SystemorganizationsmanageServices organizationServices = (SystemorganizationsmanageServices) this
				.getBean("systemorganizationsmanageServices");
		return organizationServices.getSelfAndZhiJieChildrenOrgModel(this
				.getOrganizationsByNameCode(namecode));
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Oct 14, 2010</li>
	 * <li>3、开发时间：1:10:57 PM</li>
	 * <li>4、返回类型：List<Systemorganizationsmanage></li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：获取所有的分行机构列表(包括河北省分行（总行）)</li>
	 * </ul>
	 * 
	 * @return
	 */
	protected List<Systemorganizationsmanage> getAllFenHOrgModel() {
		SystemorganizationsmanageServices organizationServices = (SystemorganizationsmanageServices) this
				.getBean("systemorganizationsmanageServices");
		return organizationServices.getFenHOrgModel();
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Oct 14, 2010</li>
	 * <li>3、开发时间：1:11:35 PM</li>
	 * <li>4、返回类型：List<Systemorganizationsmanage></li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：获取所有的支行机构列表</li>
	 * </ul>
	 * 
	 * @return
	 */
	protected List<Systemorganizationsmanage> getAllZhiHOrgModel() {
		SystemorganizationsmanageServices organizationServices = (SystemorganizationsmanageServices) this
				.getBean("systemorganizationsmanageServices");
		return organizationServices.getZhiHOrgModel();
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 17, 2010</li>
	 * <li>3、开发时间：11:39:26 AM</li>
	 * <li>4、返回类型：List<Systemorganizationsmanage></li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：根据机构号码获取机构列表</li>
	 * </ul>
	 * 
	 * @param organizationsmanage
	 * @return
	 */
	protected List<Systemorganizationsmanage> getSelfAndChildrenOrgModel(
			String nameCode) {
		SystemorganizationsmanageServices organizationServices = (SystemorganizationsmanageServices) this
				.getBean("systemorganizationsmanageServices");

		List<Systemorganizationsmanage> organizations = new ArrayList<Systemorganizationsmanage>();
		if (nameCode != "")
			if (this.getOrganizationsByNameCode(nameCode).getParentidentifier()
					.equals(SystemConstants.getZh_code())) {
				organizations = organizationServices
						.getSelfAndChildrenOrgModel(this
								.getOrganizationsByNameCode(nameCode));
			} else if (this.getOrganizationsByNameCode(nameCode)
					.getParentidentifier().equals(SystemConstants.getFh_code())) {
				organizations = organizationServices
						.getSelfAndChildrenOrgModel(this
								.getOrganizationsByNameCode(nameCode));
			} else {
				organizations = organizationServices
						.getSelfAndChildrenOrgModel(this
								.getOrganizationsByNameCode(nameCode));
			}
		return organizations;
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 18, 2010</li>
	 * <li>3、开发时间：2:28:37 PM</li>
	 * <li>4、返回类型：Systemrolesmanage</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：获取当前用户的系统权限</li>
	 * </ul>
	 * 
	 * @param request
	 * @return
	 */
	@SuppressWarnings("static-access")
	protected Authordistributionmanager getUserSystemAuthor(
			HttpServletRequest request) {
		AuthordistributionmanagerServices authordistributionServices = this
				.getBean(AuthordistributionmanagerServices.class);
		// return authordistributionServices.getSystemAuthor(this.getUserInfo(
		// request).getSystemGroup().getSystemrolesmanage());
		return authordistributionServices.getSystemAuthor(this.getUserInfo(
				request).getSystemRole());
	}

	/**
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 19, 2010</li>
	 * <li>3、开发时间：2:08:02 PM</li>
	 * <li>4、返回类型：Authordistributionmanager</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：根据标识符获取指定的系统角色的系统权限</li>
	 * </ul>
	 * 
	 * @param roleidentifier
	 * @return
	 */
	protected Authordistributionmanager getUserSystemAuthor(
			String roleidentifier) {
		AuthordistributionmanagerServices authordistributionServices = this
				.getBean(AuthordistributionmanagerServices.class);
		return authordistributionServices.getSystemAuthor(roleidentifier);
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 14, 2010</li>
	 * <li>3、开发时间：12:16:45 PM</li>
	 * <li>4、返回类型：List<Systemorganizationsmanage></li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：返回所有的机构列表 分组查询 所有的机构 按级别进行排序</li>
	 * </ul>
	 * 
	 * @return
	 */
	@SuppressWarnings("unchecked")
	protected List<Systemorganizationsmanage> getAllOrganizationModel() {
		SystemorganizationsmanageServices organizationServices = (SystemorganizationsmanageServices) this
				.getBean("systemorganizationsmanageServices");
		return organizationServices.findOrderAllList();
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 23, 2010</li>
	 * <li>3、开发时间：10:57:51 AM</li>
	 * <li>4、返回类型：List<Systemorganizationsmanage></li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：获取所有机构的级别代码</li>
	 * </ul>
	 * 
	 * @return
	 */
	protected Set<String> getAllOrganizationCodeModel() {

		List<Systemorganizationsmanage> organizations = this
				.getAllOrganizationModel();
		Set<String> organizationCodeSet = new HashSet<String>();
		for (Systemorganizationsmanage systemorganizationsmanage : organizations) {
			organizationCodeSet.add(systemorganizationsmanage.getLevelCode());
		}
		return organizationCodeSet;
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 14, 2010</li>
	 * <li>3、开发时间：12:07:46 PM</li>
	 * <li>4、返回类型：List<Systemorganizationsmanage></li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：根据用户所属当前机构获取当前机构的直接下属机构</li>
	 * </ul>
	 * 
	 * @param systemorganizationsmanage
	 * @return
	 */
	protected List<Systemorganizationsmanage> getChildrenOrgModel(
			Systemorganizationsmanage systemorganizationsmanage) {
		SystemorganizationsmanageServices organizationServices = (SystemorganizationsmanageServices) this
				.getBean("systemorganizationsmanageServices");
		return organizationServices
				.getChildrenOrgModel(systemorganizationsmanage);
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 14, 2010</li>
	 * <li>3、开发时间：12:14:03 PM</li>
	 * <li>4、返回类型：Systemorganizationsmanage</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：根据用户所属当前机构获取当前机构的直接上级机。如果是总行就直接返回总行</li>
	 * </ul>
	 * 
	 * @param systemorganizationsmanage
	 * @return
	 */
	protected Systemorganizationsmanage getZhiJieUpOrgModel(
			Systemorganizationsmanage systemorganizationsmanage) {
		SystemorganizationsmanageServices organizationServices = (SystemorganizationsmanageServices) this
				.getBean("systemorganizationsmanageServices");
		return organizationServices
				.getZhiJieUpOrgModel(systemorganizationsmanage);
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 17, 2010</li>
	 * <li>3、开发时间：10:32:14 AM</li>
	 * <li>4、返回类型：String</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：根据用户所属的机构号获取可以操作的机构号(本行或下属行)</li>
	 * </ul>
	 * 
	 * @param organizationsmanages
	 * @return
	 */
	public String getKeCaoZuoOrganizations(String nameCode) {
		SystemorganizationsmanageServices organizationServices = (SystemorganizationsmanageServices) this
				.getBean("systemorganizationsmanageServices");

		return organizationServices.getAvailiableOrganizations(this
				.getSelfAndChildrenOrgModel(StringUtil.nullToString(nameCode)));
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 17, 2010</li>
	 * <li>3、开发时间：2:45:44 PM</li>
	 * <li>4、返回类型：String</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：根据用户所属的机构获取可以操作的机构号(下属行)</li>
	 * </ul>
	 * 
	 * @param organization
	 * @return
	 */
	public String getKeCaoZuoChildrenOrgs(HttpServletRequest request) {
		SystemorganizationsmanageServices organizationServices = (SystemorganizationsmanageServices) this
				.getBean("systemorganizationsmanageServices");
		return organizationServices.getAvailiableOrganizations(this
				.getChildrenOrgModel(this.getUserInfo(request)
						.getSystemorganizationsmanage()));
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Oct 14, 2010</li>
	 * <li>3、开发时间：2:45:57 PM</li>
	 * <li>4、返回类型：String</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：根据机构代码获取可以操作的机构号(下属行)</li>
	 * </ul>
	 * 
	 * @param nameCode
	 * @return
	 */
	public String getKeCaoZuoChildrenOrgsByNameCode(String nameCode) {
		SystemorganizationsmanageServices organizationServices = (SystemorganizationsmanageServices) this
				.getBean("systemorganizationsmanageServices");
		return organizationServices
				.getAvailiableOrganizations(this.getChildrenOrgModel(this
						.getOrganizationsByNameCode(nameCode)));
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Oct 15, 2010</li>
	 * <li>3、开发时间：6:43:55 PM</li>
	 * <li>4、返回类型：String</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：根据列表获取可操作的机构号</li>
	 * </ul>
	 * 
	 * @param organizationsmanages
	 * @return
	 */
	public String getKeCaoZuoChildrenOrgsByList(
			List<Systemorganizationsmanage> organizationsmanages) {
		SystemorganizationsmanageServices organizationServices = (SystemorganizationsmanageServices) this
				.getBean("systemorganizationsmanageServices");
		return organizationServices
				.getAvailiableOrganizations(organizationsmanages);
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 17, 2010</li>
	 * <li>3、开发时间：3:08:50 PM</li>
	 * <li>4、返回类型：String</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：根据用户所属的机构获取可以操作的机构号(本行或下属行)</li>
	 * </ul>
	 * 
	 * @param request
	 * @return
	 */
	public String getKeCaoZuoSelfAndChildrenOrgs(HttpServletRequest request) {
		SystemorganizationsmanageServices organizationServices = (SystemorganizationsmanageServices) this
				.getBean("systemorganizationsmanageServices");
		return organizationServices.getAvailiableOrganizations(this
				.getSelfAndChildrenOrgModel(request));
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 17, 2010</li>
	 * <li>3、开发时间：11:07:55 AM</li>
	 * <li>4、返回类型：String</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：根据机构号获取机构</li>
	 * </ul>
	 * 
	 * @param nameCode
	 * @return
	 */
	public Systemorganizationsmanage getOrganizationsByNameCode(String nameCode) {
		SystemorganizationsmanageServices organizationServices = (SystemorganizationsmanageServices) this
				.getBean("systemorganizationsmanageServices");
		return organizationServices.findByNameCode(nameCode);

	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 13, 2010</li>
	 * <li>3、开发时间：12:01:33 AM</li>
	 * <li>4、返回类型：Systemorganizationsmanage</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：取得 网点机构信息 当前用户所属的机构</li>
	 * </ul>
	 * 
	 * @param request
	 * @return
	 */
	protected Systemorganizationsmanage getOrganizationModel(
			HttpServletRequest request) {
		HttpSession session = request.getSession();
		return (Systemorganizationsmanage) session.getAttribute("orgentity");
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 13, 2010</li>
	 * <li>3、开发时间：12:01:15 AM</li>
	 * <li>4、返回类型：String</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：获取系统时间</li>
	 * </ul>
	 * 
	 * @param request
	 * @return
	 */
	protected String getWorkdate(HttpServletRequest request) {
		HttpSession session = request.getSession();
		return session.getAttribute("workDate").toString();
	}

	// /**
	// * 判断双签用户 跟 登录用户是否同一人
	// *
	// * @throws MessageException
	// *
	// */
	// protected void checkUser(String userName, String orientName)
	// throws MessageException {
	// if (userName.toLowerCase().equals(orientName))
	// throw new MessageException("[双签用户] 和 [登录用户] 不能是同一人!!");
	// }

	/**
	 * 分页方法（把当前页放到分页信息中）
	 * 
	 * @param baseForm
	 * @deprecated Use {@link #setPageValue(BaseActionForm,boolean)} instead
	 */
	public void setPageValue(BaseActionForm baseForm) {
		setPageValue(baseForm, true);
	}

	/**
	 * 分页方法（把当前页放到分页信息中）
	 * 
	 * @param baseForm
	 * @param izPage
	 * 
	 */
	public void setPageValue(BaseActionForm baseForm, boolean izPage) {
		PageInfo pageInfo = baseForm.getPageInfo();
		int currentPage = 1;
		if (baseForm.getPage() != null && !baseForm.getPage().equals("")) {
			currentPage = new Integer(baseForm.getPage());
		}
		pageInfo.setIzPage(izPage);
		pageInfo.setPageNum(currentPage);
		/**
		 * 用户选择的每页的记录数
		 */
		int selectPageSize=baseForm.getPageInfo().getPageSize();
		if(baseForm.getPageSize()!=null&&!baseForm.getPageSize().equals("")){
			selectPageSize=new Integer(baseForm.getPageSize());
		}
		pageInfo.setPageSize(selectPageSize);
		
	}

	/**
	 * 分页方法（把当前页放到分页信息中）对XML上送接口的 分页设置
	 * 
	 * @param baseForm
	 * @param izPage
	 * 
	 */
	public static void setQueryPageValue(BaseActionForm baseForm, boolean izPage) {
		PageInfo pageInfo = baseForm.getPageInfo();
		int currentPage = 1;
		if (baseForm.getPage() != null && !baseForm.getPage().equals("")) {
			currentPage = new Integer(baseForm.getPage());
		}
		pageInfo.setIzPage(izPage);
		pageInfo.setPageNum(currentPage);
		pageInfo.setTotalSize(baseForm.getTotalSize());
		int totalpagenum = 0;
		if (baseForm.getTotalSize() <= Integer.parseInt(baseForm
				.getTurnPageShowNum())) {
			totalpagenum = 1;
		} else {
			totalpagenum = baseForm.getTotalSize()
					/ Integer.parseInt(baseForm.getTurnPageShowNum());
			int totalpagenumys = baseForm.getTotalSize()
					% Integer.parseInt(baseForm.getTurnPageShowNum());
			if (totalpagenumys != 0) {
				totalpagenum += 1;
			}
		}
		pageInfo.setTotalPageNum(totalpagenum);
	}

	public void setFenYe(BaseActionForm voform) {
		int page = 1;
		int pagesize = 10;

		if (voform.getPage() != null && !voform.getPage().equals("")) {
			page = new Integer(voform.getPage());
		}
		if (voform.getPageSize() != null && !voform.getPageSize().equals("")) {
			pagesize = new Integer(voform.getPageSize());
		}
		voform.setTurnPageBeginPos(String.valueOf((page - 1) * pagesize + 1));
		voform.setTurnPageShowNum(String.valueOf(pagesize));
	}

	public void setPageInfo(HttpServletRequest request, BaseActionForm baseForm) {
		request.setAttribute("PageInfo", baseForm.getPageInfo());
	}

	/**
	 * 分页方法（把后台XML传来的总条数 SET到PAGEINFO 用来分页）对XML返回接口的 分页设置
	 * 
	 * @param request
	 * @param baseForm
	 */
	public void setQueryPageInfo(HttpServletRequest request,
			BaseActionForm baseForm, boolean izPage) {
		PageInfo pageInfo = baseForm.getPageInfo();
		int currentPage = 1;
		if (baseForm.getPage() != null && !baseForm.getPage().equals("")) {
			currentPage = new Integer(baseForm.getPage());
		}
		pageInfo.setIzPage(izPage);
		pageInfo.setPageNum(currentPage);

		int totalpagenum = 0;
		if (pageInfo.getTotalSize() <= pageInfo.getPageSize()) {
			totalpagenum = 1;
		} else {
			totalpagenum = pageInfo.getTotalSize() / pageInfo.getPageSize();
			int totalpagenumys = pageInfo.getTotalSize()
					% pageInfo.getPageSize();
			if (totalpagenumys != 0) {
				totalpagenum += 1;
			}
		}
		pageInfo.setTotalPageNum(totalpagenum);
		request.setAttribute("PageInfo", baseForm.getPageInfo());
	}

	public void setObjectToRequest(HttpServletRequest request, String key,
			Object obj) {
		request.setAttribute(key, obj);
	}

	/**
	 * 通过用户代码取得用户名字
	 * 
	 * @param userCode
	 * @return
	 */
	public String getUserNameByUserCode(String userCode) {
		String userName = "";
		List<?> userList = null;
		if (userCode == null || "".equals(userCode.trim())) {
			userName = userCode;
		} else {
			SystemusersmanageServices systemusersmanageServices = (SystemusersmanageServices) this
					.getBean("SystemusersmanageServiceImpl");
			try {
				userList = systemusersmanageServices.findByUserCode(userCode);
				if (userList != null && userList.size() > 0) {
					Systemusersmanage systemusersmanage = (Systemusersmanage) userList
							.get(0);
					if (systemusersmanage != null) {
						userName = systemusersmanage.getUsername();
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return userName;
	}

	/**
	 * 根据状态代码取得状态的名字
	 * 
	 * @param statusCode
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static String getPrcStsNameByPrcStsCode(String prcStsCode) {
		Map m = getStatusCodeAndNameMap();
		String prcStsName = "";
		try {
			if(m!=null){
				if(m.get(prcStsCode.trim())!=null){
					prcStsName = m.get(prcStsCode.trim()).toString().trim();
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return prcStsName;
	}

	@SuppressWarnings("unchecked")
	public static Map getStatusCodeAndNameMap() {
		Map m = new HashMap();
		m.put("PR98", "待确认");
		m.put("PR90", "新建");
		m.put("PR81", "待复核");
		m.put("PR82", "待审核");
		m.put("PR83", "待审批");
		m.put("PR94", "已作废");
		m.put("PR95", "待组包");
		m.put("PR96", "待发送");
		m.put("PR97", "已发送");
		m.put("PR89", "待回执");
		m.put("PR88", "已回执");
		m.put("PR32", "已超期");
		m.put("PR11", "已轧查排队");
		m.put("PR12", "已清算排队");
		m.put("PR08", "已撤销");
		m.put("PR99", "故障");
		m.put("PR03", "已轧差");
		m.put("PR04", "已清算");
		m.put("PR09", "已拒绝");
		m.put("PR21", "已止付");
		m.put("PR22", "已冲正");
		m.put("PR13", "清算异常，待重新清算");
		m.put("PR23", "已整包退回");
		m.put("PR24", "NPC未受理");
		m.put("PR25", "已部分退回");
		m.put("PR91", "部分止付");
		m.put("PR05", "已成功");
		m.put("PR06", "待处理");
		m.put("PR07", "已处理");
		m.put("PR10", "已确认");
		m.put("PR00", "已转发");
		m.put("PR01", "待认证");
		m.put("DS01", "未发送");
		m.put("DS02", "已发送待确认");
		m.put("DS03", "已发送已确认");
		return m;
	}
}