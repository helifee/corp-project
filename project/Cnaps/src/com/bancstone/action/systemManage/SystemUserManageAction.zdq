package com.bancstone.action.systemManage;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bancstone.action.BaseAction;
import com.bancstone.common.utils.BeanUtil;
import com.bancstone.common.utils.StringUtil;
import com.bancstone.constants.MessageConstants;
import com.bancstone.constants.SystemConstants;
import com.bancstone.form.systemManage.SystemusersmanageForm;
import com.bancstone.hibernate.systemManage.Systemgroupsmanage;
import com.bancstone.hibernate.systemManage.Systemorganizationsmanage;
import com.bancstone.hibernate.systemManage.Systemrolesmanage;
import com.bancstone.hibernate.systemManage.Systemuserandgrouprelation;
import com.bancstone.hibernate.systemManage.Systemuserorganizationrelation;
import com.bancstone.hibernate.systemManage.Systemusersmanage;
import com.bancstone.service.systemManage.SystemgroupsmanageServices;
import com.bancstone.service.systemManage.SystemorganizationsmanageServices;
import com.bancstone.service.systemManage.SystemrolesmanageServices;
import com.bancstone.service.systemManage.SystemusersmanageServices;

public class SystemUserManageAction extends BaseAction<SystemusersmanageForm> {
	/**
	 * 根据条件模糊查询用户列表
	 * 
	 * @author 叶小光
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings( { "unchecked", "static-access" })
	public ActionForward queryUserList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SystemusersmanageForm systemusersmanageForm = (SystemusersmanageForm) form;
		Systemusersmanage systemusersmanage = new Systemusersmanage();
		SystemusersmanageServices systemusersmanageServices = (SystemusersmanageServices) this
				.getBean("SystemusersmanageServiceImpl");
		
		List userGroupList = null;
		List orgList = null;
		// 查询所有有效当前的用户组，返回到前台页面
		SystemrolesmanageServices systemrolesmanageServices = (SystemrolesmanageServices) this
		.getBean("systemrolesmanageServices");
		BeanUtil.copyProperties2Object(systemusersmanage, systemusersmanageForm);
		Systemgroupsmanage systemgroupsmanage = new Systemgroupsmanage();
		List<Systemusersmanage> userList = new ArrayList<Systemusersmanage>();
		this.setPageValue(systemusersmanageForm, true);
		try {

			systemusersmanageForm.setOrgcode(systemusersmanageForm
					.getOrganizationindentifier());// 设置机构号用于回显
			//机构列表
			orgList = this.getSelfAndZhiJieChildrenOrgModel(request);
			Systemusersmanage systemuser =  (Systemusersmanage)request.getSession().getAttribute("userentity");
			
			systemusersmanageForm.setSystemuser(systemuser);
			// 用户列表
			userList = systemusersmanageServices
					.findByExample(systemusersmanageForm);

			//取得角色列表
			userGroupList = systemrolesmanageServices.querySystemRoleList();

			request.setAttribute("userGroupList", userGroupList);
			request.setAttribute("organizationList", orgList);
			request.setAttribute("user", this.getUserInfo(request));
			request.setAttribute("userList", userList);
			request.setAttribute("userListSize", userList.size());
			
			this.setQueryPageInfo(request, systemusersmanageForm,true);
			return mapping.findForward("queryUserList");

		} catch (Exception e) {
			e.printStackTrace();
			// 查询失败
			return toFailedPage(mapping, request,
					MessageConstants.SYSTEM_USER_QUERY_ERROR);
		}
	}

	/**
	 * 新增用户
	 * 
	 * @author 叶小光
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward addUser(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SystemusersmanageForm systemusersmanageForm = (SystemusersmanageForm) form;
		Systemusersmanage systemusersmanage = new Systemusersmanage();
		Systemusersmanage exitusersmanage = null;
		Systemorganizationsmanage systemorganizationsmanage = new Systemorganizationsmanage();

		SystemusersmanageServices systemusersmanageServices = (SystemusersmanageServices) this
				.getBean("SystemusersmanageServiceImpl");
		BeanUtil
				.copyProperties2Object(systemusersmanage, systemusersmanageForm);
		SystemrolesmanageServices systemrolesmanageServices = (SystemrolesmanageServices) this
				.getBean("systemrolesmanageServices");
		SystemorganizationsmanageServices systemorganizationsmanageServices = (SystemorganizationsmanageServices) this
				.getBean("systemorganizationsmanageServices");
		List list =  systemusersmanageServices.findByUserName(systemusersmanageForm.getUsername());
		try {
			if (list.size() >0) {
				return toFailedPage(mapping, request, "用户【 "
						+ systemusersmanageForm.getUsername() + " 】已经存在!");
			} else {
				Systemrolesmanage systemRole = systemrolesmanageServices.
					findSystemRoleByIndentifier(systemusersmanageForm
							.getUsergrouptype());
				systemorganizationsmanage = systemorganizationsmanageServices
						.findSystemOrganizationByIndentifier(systemusersmanageForm
								.getOrganizationindentifier());
				// 赋值用户组和机构实体 进行保存
				systemusersmanage
						.setSystemorganizationsmanage(systemorganizationsmanage);
				systemusersmanage.setSystemRole(systemRole);
				systemusersmanage.setRoleindentifier(systemusersmanageForm
							.getUsergrouptype());
				systemusersmanageServices.save(systemusersmanage);
				// 添加成功
				return toReceiptPage(
						mapping,
						request,
						true,
						"sucess",
						"/systemManage/systemUserManage/systemUserManageAction.do?method=queryUserList",
						MessageConstants.SYSTEM_USER_ADD_SUCCESS);
			}
		} catch (Exception e) {
			e.printStackTrace();
			return toReceiptPage(
					mapping,
					request,
					true,
					"failed",
					"/systemManage/systemUserManage/systemUserManageAction.do?method=queryUserList",
					MessageConstants.SYSTEM_USER_ADD_FAILED);
		}
	}

	/**
	 * 准备修改用户信息和查询用户详细信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings( { "unchecked", "static-access" })
	public ActionForward modifyUserByIndentifierPrepare(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String indentifier = request.getParameter("indentifier");// 取得URL中的参数（ID）
		String typeValue = request.getParameter("type");// 取得URL中的参数，用来判断是查看明细还是准备修改
		SystemusersmanageServices systemusersmanageServices = (SystemusersmanageServices) this
				.getBean("SystemusersmanageServiceImpl");
		
		SystemrolesmanageServices systemrolesmanageServices = (SystemrolesmanageServices) this
		.getBean("systemrolesmanageServices");
		// 查询所有有效的机构
		SystemorganizationsmanageServices systemorganizationsmanageServices = (SystemorganizationsmanageServices) this
				.getBean("systemorganizationsmanageServices");
		Systemusersmanage systemusersmanage = new Systemusersmanage();
		List<Systemrolesmanage> groupList = new ArrayList<Systemrolesmanage>();
		
		// 机构对象
		Systemorganizationsmanage systemorganizationsmanage = new Systemorganizationsmanage();
		try {
			systemusersmanage = systemusersmanageServices.findById(indentifier);
		
			// 查询根据用户ID 查询中间表对应的机构ID 用来下拉框选中用
			Systemuserorganizationrelation oraganzationtempobj = systemusersmanageServices
					.findOrganizationByUserId(indentifier);

			// 把查询得到的对象返回到前台页面
			request.setAttribute("systemrole", systemusersmanage.getSystemRole());
			request.setAttribute("systemuserorganizationrelation",
					oraganzationtempobj);
			// 查询成功，返回到权限修改页面
			if (typeValue != null && typeValue.equals("modify")) {// 修改
				//取得角色列表
				groupList = systemrolesmanageServices.querySystemRoleList();
				List<Systemorganizationsmanage> organizationList = systemorganizationsmanageServices
						.findOrderAllList();// 取得所有 机构
				request.setAttribute("organizationList", organizationList);
				request.setAttribute("groupList", groupList);//角色列表
				request.setAttribute("systemusersmanage", systemusersmanage);
				request.setAttribute("user", this.getUserInfo(request));
				return new ActionForward(
						"/page/systemManager/systemusersmanage/modifyUser.jsp");
			} else {// 查看
				// 进行代码的过滤如：性别，是否有效，组，机构
				if (systemusersmanage != null && !"".equals(systemusersmanage)) {
					// 性别的过滤
					if (systemusersmanage.getUsersex() != null) {
						systemusersmanage.setUsersex(SystemConstants
								.getSexNameByNameCode(systemusersmanage
										.getUsersex()));
					}
					// 是否有效的过滤
					if (systemusersmanage.getUserisactivity() != null
							&& !""
									.equals(systemusersmanage
											.getUserisactivity())) {
						systemusersmanage.setUserisactivity(SystemConstants
								.getIsActivityNameByNameCode(systemusersmanage
										.getUserisactivity()));
					}

					// 机构的过滤
					if (systemusersmanage != null
							&& !"".equals(systemusersmanage)) {
						try {// 根据ID取得机构对象
							systemorganizationsmanage = systemorganizationsmanageServices
									.findSystemOrganizationByIndentifier(systemusersmanage
											.getOrganizationindentifier());
						} catch (Exception e) {
							e.printStackTrace();
						}
						if (systemorganizationsmanage != null
								&& !"".equals(systemorganizationsmanage)) {
							systemusersmanage
									.setOrganizationindentifier(systemorganizationsmanage
											.getName());
						}
					}
				}
				request.setAttribute("systemusersmanage", systemusersmanage);
				return new ActionForward(
						"/page/systemManager/systemusersmanage/userDetail.jsp");
			}
		} catch (Exception e) {
			e.printStackTrace();
			// 用户数据异常
			return toFailedPage(mapping, request,
					MessageConstants.SYSTEM_USER_QUERY_ERROR);
		}
	}

	/**
	 * 根据主键删除一条记录
	 * 
	 * @author 叶小光
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward deleteUserByIndentifier(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String indentifier = request.getParameter("indentifier");// 取得URL中的参数（ID）
		Systemusersmanage systemusersmanage = new Systemusersmanage();
		SystemusersmanageServices systemusersmanageServices = (SystemusersmanageServices) this
				.getBean("SystemusersmanageServiceImpl");
		try {
			systemusersmanage = systemusersmanageServices.findById(indentifier);
			systemusersmanageServices.delete(systemusersmanage);
			// 删除成功之后返回到查询列表页
			this.queryUserList(mapping, form, request, response);
			return toReceiptPage(
					mapping,
					request,
					true,
					"sucess",
					"/systemManage/systemUserManage/systemUserManageAction.do?method=queryUserList",
					MessageConstants.SYSTEM_USER_DELETE_SUCCESS);
		} catch (Exception e) {
			e.printStackTrace();
			// 用户数据异常
			return toReceiptPage(
					mapping,
					request,
					true,
					"failed",
					"/systemManage/systemUserManage/systemUserManageAction.do?method=queryUserList",
					MessageConstants.SYSTEM_USER_DELETE_FAILED);
		}
	}

	/**
	 * 准备添加用户，查询一些必要的信息
	 * 
	 * @author 叶小光
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("static-access")
	public ActionForward addUserPrepare(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// 取得用户组信息
		
		SystemrolesmanageServices systemrolesmanageServices = (SystemrolesmanageServices) this
		.getBean("systemrolesmanageServices");
		List<Systemrolesmanage> groupList = new ArrayList<Systemrolesmanage>();
		List<Systemorganizationsmanage> organizationList = new ArrayList<Systemorganizationsmanage>();
		try {
			groupList = systemrolesmanageServices.querySystemRoleList();//取得所有组
			organizationList = this.getAllOrganizationModel();// 取得所有 机构
			request.setAttribute("groupList", groupList);
			request.setAttribute("organizationList", organizationList);
			request.setAttribute("user", this.getUserInfo(request));
			// 查询成功
			return mapping.findForward("addUserPrepare");
		} catch (Exception e) {
			e.printStackTrace();
			// 查询机构或组信息失败
			return toFailedPage(mapping, request,
					MessageConstants.SYSTEM_USER_QUERY_ERROR);
		}
	}

	/**
	 * 修改用户信息。
	 * 
	 * @author 叶小光
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward modifyUser(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		SystemusersmanageForm systemusersmanageForm = (SystemusersmanageForm) form;
		Systemusersmanage systemusersmanage = null;
		SystemusersmanageServices systemusersmanageServices = (SystemusersmanageServices) this
				.getBean("SystemusersmanageServiceImpl");

		try {
			systemusersmanage = systemusersmanageServices
					.findById(systemusersmanageForm.getUserindetifier());
			BeanUtil.copyProperties2Object(systemusersmanage,
					systemusersmanageForm);
			/*
			 * //查询根据用户ID 查询中间表对应的组ID 用来下拉框选中用 Systemuserandgrouprelation
			 * goruptempobj=systemusersmanageServices.findGroupByUserId(systemusersmanageForm.getUserindetifier()); //
			 * 查询根据用户ID 查询中间表对应的机构ID 用来下拉框选中用 Systemuserorganizationrelation
			 * oraganzationtempobj=systemusersmanageServices.findOrganizationByUserId(systemusersmanageForm.getUserindetifier());
			 * //把界面上的选择项 赋值给PO //SystemuserorganizationrelationId
			 * sysId=oraganzationtempobj.getId();
			 * goruptempobj.getId().setTeamid(Long.parseLong(systemusersmanageForm.getUsergrouptype()));
			 * oraganzationtempobj.getId().setOrganizationindentifier(systemusersmanageForm.getOrganizationindentifier());
			 */
			// 查询所有有效当前的用户组，返回到前台页面
			SystemrolesmanageServices systemrolesmanageServices = (SystemrolesmanageServices) this
			.getBean("systemrolesmanageServices");
			// 查询所有当前的机构
			SystemorganizationsmanageServices systemorganizationsmanageServices = (SystemorganizationsmanageServices) this
					.getBean("systemorganizationsmanageServices");

			Systemrolesmanage systemRole = systemrolesmanageServices.
						findSystemRoleByIndentifier(systemusersmanageForm
							.getUsergrouptype());
			Systemorganizationsmanage systemorganizationsmanage = systemorganizationsmanageServices
					.findSystemOrganizationByIndentifier(systemusersmanageForm
							.getOrganizationindentifier());

			
			systemusersmanage.setSystemRole(systemRole);
			systemusersmanage.setRoleindentifier(systemusersmanageForm
					.getUsergrouptype());
			systemusersmanage
					.setSystemorganizationsmanage(systemorganizationsmanage);
			systemusersmanageServices.merge(systemusersmanage);
			// systemusersmanageServices.update(systemusersmanageForm.getUserindetifier());
			//this.queryUserList(mapping, form, request, response);
			// 修改成功
			return toReceiptPage(
					mapping,
					request,
					true,
					"sucess",
					"/systemManage/systemUserManage/systemUserManageAction.do?method=queryUserList",
					MessageConstants.SYSTEM_USER_MODIFY_SUCCESS);
			
		} catch (Exception e) {
			e.printStackTrace();
			// 修改用户信息失败
			return toReceiptPage(
					mapping,
					request,
					true,
					"sucess",
					"/systemManage/systemUserManage/systemUserManageAction.do?method=queryUserList",
					MessageConstants.SYSTEM_USER_MODIFY_FAILED);
		}
	}

	/**
	 * 查询所有的组
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward queryUserListPrepare(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		List userGroupList = new ArrayList();
		// 查询所有有效当前的用户组，返回到前台页面
		
		SystemrolesmanageServices systemrolesmanageServices = (SystemrolesmanageServices) this
			.getBean("systemrolesmanageServices");
		try {
			userGroupList = systemrolesmanageServices.querySystemRoleList();
			request.setAttribute("userGroupList", userGroupList);
			return new ActionForward(
					"/page/systemManager/systemusersmanage/queryUserList.jsp");
		} catch (Exception e) {
			e.printStackTrace();
			// 查询用户异常
			return toFailedPage(mapping, request,
					MessageConstants.SYSTEM_USER_QUERY_ERROR);
		}
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 21, 2010</li>
	 * <li>3、开发时间：1:08:08 PM</li>
	 * <li>4、返回类型：ActionForward</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：点击修改用户密码按钮时跳转到密码修改页面</li>
	 * </ul>
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("static-access")
	public ActionForward modifyUserPasswordView(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		SystemusersmanageServices systemusersmanageServices = (SystemusersmanageServices) this
				.getBean("SystemusersmanageServiceImpl");
		Systemusersmanage usersmanage = null;
		try {
			usersmanage = systemusersmanageServices.findById(this.getUserInfo(
					request).getUserindetifier());
			request.setAttribute("entity", usersmanage);
			return mapping.findForward("modifyUserPasswordView");
		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request,
					MessageConstants.SYSTEM_USER_LOAD);

		}
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 21, 2010</li>
	 * <li>3、开发时间：1:08:43 PM</li>
	 * <li>4、返回类型：ActionForward</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：修改用户密码</li>
	 * </ul>
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward modifyUserPassword(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		SystemusersmanageServices systemusersmanageServices = (SystemusersmanageServices) this
				.getBean("SystemusersmanageServiceImpl");
		SystemusersmanageForm usersmanageForm = (SystemusersmanageForm) form;
		Systemusersmanage usersmanage = this.getUserInfo(request);
		try {
			BeanUtil.copyProperties2Object(usersmanage, usersmanageForm);
			systemusersmanageServices.merge(usersmanage);
			return toReceiptPage(
					mapping,
					request,
					true,
					"sucess",
					"/systemManage/systemUserManage/systemUserManageAction.do?method=queryUserList",
					MessageConstants.SYSTEM_USER_MODIFY_PASSWORD_SUCCESS);
		} catch (Exception e) {
			e.printStackTrace();
			return toReceiptPage(
					mapping,
					request,
					true,
					"failed",
					"/systemManage/systemUserManage/systemUserManageAction.do?method=queryUserList",
					MessageConstants.SYSTEM_USER_MODIFY_PASSWORD_SUCCESS);
			

		}
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Sep 7, 2010</li>
	 * <li>3、开发时间：11:13:32 AM</li>
	 * <li>4、返回类型：ActionForward</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：用户密码重置</li>
	 * </ul>
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward resetPasswordByKey(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String identifier = request.getParameter("indentifier");
		SystemusersmanageServices systemusersmanageServices = (SystemusersmanageServices) this
				.getBean("SystemusersmanageServiceImpl");
		try {
			systemusersmanageServices.resetPasswordByKey(identifier);
			return toReceiptPage(
					mapping,
					request,
					true,
					"sucess",
					"/systemManage/systemUserManage/systemUserManageAction.do?method=queryUserList",
					"用户密码重置成功");
		} catch (Exception e) {
			e.printStackTrace();
			return toReceiptPage(
					mapping,
					request,
					true,
					"failed",
					"/systemManage/systemUserManage/systemUserManageAction.do?method=queryUserList",
					"用户密码重置失败");
		}
	}
}
