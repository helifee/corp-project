/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.bancstone.action.systemManage;

import java.io.IOException;
import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bancstone.action.BaseAction;
import com.bancstone.common.utils.BeanUtil;
import com.bancstone.common.utils.DateUtils;
import com.bancstone.constants.MessageConstants;
import com.bancstone.constants.SystemConstants;
import com.bancstone.form.systemManage.LoginSystemForm;
import com.bancstone.hibernate.systemManage.Systemusersmanage;
import com.bancstone.service.systemManage.SystemusersmanageServices;
import com.bancstone.service.systemManage.impl.CommonServices;
import com.cnaps.coreservices.BusinessServices;
import com.cnaps.coreservices.TransServices;
import com.cnaps.hvps.persistence.messages.Hvpspartyinfo;
import com.cnaps.hvps.persistence.messages.Hvpssysparainfo;
import com.cnaps.hvps.persistence.messages.Hvpssystemstatus;
import com.lowagie.text.html.HtmlEncoder;

/**
 * MyEclipse Struts Creation date: 04-01-2009
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="operation" validate="true"
 * @struts.action-forward name="faild" path="/login.jsp"
 * @struts.action-forward name="succ" path="/index.jsp"
 */
public class LoginSystemAction extends BaseAction {

	private static Logger log = Logger.getLogger(LoginSystemAction.class);
	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 12, 2010</li>
	 * <li>3、开发时间：10:47:52 AM</li>
	 * <li>4、返回类型：ActionForward</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：登陆系统时进行验证</li>
	 * </ul>
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings("static-access")
	public ActionForward loginValidate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		LoginSystemForm loginSystemForm = (LoginSystemForm) form;
		String extjsRPB = request
				.getParameter(SystemConstants.EXTJS_REQUEST_PARAMETER_BEAN);
		loginSystemForm = (LoginSystemForm) BeanUtil.JSONString2Bean(extjsRPB,
				LoginSystemForm.class);
		SystemusersmanageServices usersmanageServices = (SystemusersmanageServices) this
				.getBean("SystemusersmanageServiceImpl");
		Systemusersmanage user = usersmanageServices.getUser(loginSystemForm
				.getUsername(), loginSystemForm.getPassword());
		try {
			if (user == null) {
				loginSystemForm.setSuccess(false);
				loginSystemForm.setMsginfo("系统用户【不存在】,登录失败...请重新输入!");
				response
						.setContentType(SystemConstants.JSON_RESPONSE_CONTENT_TYPE);
				response.getWriter().write(
						BeanUtil.bean2JSONString(loginSystemForm));
				return null;
			} else {
				if (!((loginSystemForm.getPassword())
						.equals(user.getUserpass()))) {
					loginSystemForm.setSuccess(false);
					loginSystemForm.setMsginfo("系统用户【密码错误】,登录失败...请重新输入!");
					response.setContentType(SystemConstants.JSON_RESPONSE_CONTENT_TYPE);
					response.getWriter().write(
							BeanUtil.bean2JSONString(loginSystemForm));
					return null;
				} else if (!SystemConstants.IS_ACTIVITY_NAMECODE.equals(user
						.getUserisactivity())) {
					loginSystemForm.setSuccess(false);
					loginSystemForm.setMsginfo("系统用户【已冻结】,登录失败...请联系管理员! ");
					response.setContentType(SystemConstants.JSON_RESPONSE_CONTENT_TYPE);
					response.getWriter().write(
							BeanUtil.bean2JSONString(loginSystemForm));
					return null;
				} else if (!SystemConstants.IS_ACTIVITY_NAMECODE.equals(user
						.getSystemRole().getIsactivity())) {
					loginSystemForm.setSuccess(false);
					loginSystemForm.setMsginfo("系统用户角色【已冻结】,登录失败...请联系管理员! ");
					response.setContentType(SystemConstants.JSON_RESPONSE_CONTENT_TYPE);
					response.getWriter().write(
							BeanUtil.bean2JSONString(loginSystemForm));
					return null;
				} else if (this.getUserSystemAuthor(user.getSystemRole().getIdentifier()) == null
						|| (this.getUserSystemAuthor(user.getSystemRole().getIdentifier()) != null
								&& "0".equals(this.getUserSystemAuthor(user.getSystemRole().getIdentifier())
										.getMenuindentifiers()))) {
					loginSystemForm.setSuccess(false);
					loginSystemForm.setMsginfo("系统用户【未分配权限】,登录失败...请联系管理员! ");
					response.setContentType(SystemConstants.JSON_RESPONSE_CONTENT_TYPE);
					response.getWriter().write(
							BeanUtil.bean2JSONString(loginSystemForm));
					return null;
				} else {
					servlet.getServletContext().setAttribute(
							user.getUsername(), request.getSession());
					request.getSession().setAttribute("sc",servlet.getServletContext());
					request.getSession().setAttribute("userentity", user);
					
					CommonServices commonService = (CommonServices)this.getBean("CommonServices");
//					String workdate=DateUtils.getLogdate();//工作日期
					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
					String workdate= sdf.format(new Date());//工作日期
					String msgId = commonService.getSEQMsgId(workdate);
					//查询工作日期
					List list = CommonServices.querySystemstatus(msgId);
					String workDatehvps =workdate;
					String workDatebeps =workdate;
					String workStatehvps = ""; 
					for(int i=0;i<list.size();i++){
						Hvpssystemstatus obj = (Hvpssystemstatus)list.get(i);
						//临时判断条件，后期改造
						if(obj.getId()!=null && obj.getId()==1){
							workDatehvps =obj.getCursysdt();
							workStatehvps =obj.getCursyssts();
						}
						if(obj.getId()!=null && obj.getId()==2){
							workDatebeps =obj.getCursysdt();
						}
					}	
					
					//系统工作日期
					request.getSession().setAttribute("workDate",workdate);//当前机器工作日期
					request.getSession().setAttribute("workFormatDate",workdate);//当前机器工作日期
					request.getSession().setAttribute("workDatehvps",workDatehvps);//大额工作日期
					request.getSession().setAttribute("workDatebeps",workDatebeps);//小额工作日期
					//大额系统工作状态
					request.getSession().setAttribute("workStatehvps",workStatehvps);//大额工作状态
					
					
					//查询所属行行号
					String bankcode = user.getSystemorganizationsmanage().getBankNumber();
//					Hvpssysparainfo obj1 = CommonServices.querySystempara( msgId,"CNAPS101");
					//查询清算行行号
					Hvpspartyinfo obj2 = CommonServices.queryDirectBankCode(msgId, bankcode);
					
					//登录人所属行行号
					request.getSession().setAttribute("bankCode",bankcode);
					//登录人所属清算行行号
					request.getSession().setAttribute("bankInfo",obj2);
					//网点号
					String parentidentifier = "";
					if(user.getSystemorganizationsmanage().getParentidentifier()!=null){
						parentidentifier =user.getSystemorganizationsmanage().getParentidentifier();
					}
					String wholeorgcode=parentidentifier+user.getSystemorganizationsmanage().getNamecode();
					
					request.getSession().setAttribute("brnchCd",wholeorgcode);
					//终端号
					request.getSession().setAttribute("termId","01");
					//金额限制
					request.getSession().setAttribute("beginamt","20000");
					request.getSession().setAttribute("endamt","50000");
					
					request.getSession().setAttribute("orgentity",
							user.getSystemorganizationsmanage());
					//机构号
					request.getSession().setAttribute("orgcode",
								user.getSystemorganizationsmanage().getNamecode());
					
					
					request.getSession().setAttribute("username", user.getUsername());
					request.getSession().setAttribute("flag", "system0");
					loginSystemForm.setSuccess(true);
					response.setContentType(SystemConstants.JSON_RESPONSE_CONTENT_TYPE);
					response.getWriter().write(
							BeanUtil.bean2JSONString(loginSystemForm));
					
					return null;
				}
			}
		} catch (Exception e) {
			loginSystemForm.setSuccess(false);
			loginSystemForm.setMsginfo("登录验证失败! 失败原因:【" + e.getMessage() + "】");
			this.writeResponseJson(response, BeanUtil
					.bean2JSONString(loginSystemForm));
			return null;
		}
	}

	public ActionForward loginSystem(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		LoginSystemForm loginSystemForm = (LoginSystemForm) form;
		String username = loginSystemForm.getUsername();//用户名
		Systemusersmanage user = new Systemusersmanage();
		user.setUsername(username);
		try {
			servlet.getServletContext().setAttribute(
					user.getUsername(), request.getSession());
		} catch (Exception e) {
			
			e.printStackTrace();
			response.reset();
			response.setContentType("text/html; charset=gbk");
			response.getWriter().print("<script language=\"JavaScript\">");
			response.getWriter().print("alert('系统操作超时,请重新登录 !');");
			response.getWriter().print("window.close();");
			response.getWriter().print("parent.close();");
			response.getWriter().print(
							"var winFeatures=\"location=yes,menubar=yes,status=yes,toolbar=yes,resizable=yes,titlebar=yes,scrollbars=yes,directories=yes\";");
			response.getWriter().print("</script>");
			return null;
		}
		request.getSession().setAttribute("username", username);
		request.getSession().setAttribute("sc",servlet.getServletContext());
		request.getSession().setAttribute("userentity", user);
		request.getSession().setAttribute("flag", "system1");
		//权限菜单
		String promenus = "";
		if(null!=request.getParameter("menus")){
			promenus = request.getParameter("menus");
			promenus = URLDecoder.decode(promenus);
		}
		request.getSession().setAttribute("promenus", promenus);//菜单树列表
		
		CommonServices commonService = (CommonServices)this.getBean("CommonServices");
		String workdate=DateUtils.getLogdate();//工作日期
		String msgId = commonService.getSEQMsgId(workdate);
		//查询工作日期
		List list = CommonServices.querySystemstatus(msgId);
		String workDatehvps =workdate;
		String workDatebeps =workdate;
		String workStatehvps = ""; 
		for(int i=0;i<list.size();i++){
			Hvpssystemstatus obj = (Hvpssystemstatus)list.get(i);
			//临时判断条件，后期改造
			if(obj.getId()!=null && obj.getId()==1){
				workDatehvps =obj.getCursysdt();
				workStatehvps =obj.getCursyssts();
			}
			if(obj.getId()!=null && obj.getId()==2){
				workDatebeps =obj.getCursysdt();
			}
		}	
		
		//系统工作日期
		request.getSession().setAttribute("workDate",workdate);//当前机器工作日期
		request.getSession().setAttribute("workDatehvps",workDatehvps);//大额工作日期
		request.getSession().setAttribute("workDatebeps",workDatebeps);//小额工作日期
		//大额系统工作状态
		request.getSession().setAttribute("workStatehvps",workStatehvps);//大额工作状态
		
		
		String bankcode = loginSystemForm.getBankcode();//登录所属行行号
		String wholeorgcode =  loginSystemForm.getWholeorgcode();//全机构代码
		String orgcode = loginSystemForm.getOrgcode();//登录机构号
		
		String beginamt="20000";//金额下限
		String endamt="50000";//小额金额上限
		request.getSession().setAttribute("bankCode",bankcode);
		//查询清算行行号
		Hvpspartyinfo obj2 = CommonServices.queryDirectBankCode(msgId, bankcode);
		
		//登录人所属清算行行号
		request.getSession().setAttribute("bankInfo",obj2);
		//机构号 目前写死 以后由后台提供
		
		request.getSession().setAttribute("brnchCd",wholeorgcode);
		//终端号
		request.getSession().setAttribute("termId","01");//终端号
		request.getSession().setAttribute("beginamt",beginamt);//金额下限
		request.getSession().setAttribute("endamt",endamt);//金额上限
		request.getSession().setAttribute("orgcode",orgcode);//登录机构号
		request.getSession().setAttribute("wholecode", wholeorgcode);//全机构号
		
		
		return mapping.findForward("systemIndex");
//		return new ActionForward("/page/home/index.jsp?timStamp"+new Date());
//		return new ActionForward("/page/home/winMain.jsp?timStamp"+new Date());
	}

	
	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 27, 2010</li>
	 * <li>3、开发时间：9:29:49 AM</li>
	 * <li>4、返回类型：ActionForward</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：系统验证成功后跳转到首页</li>
	 * </ul>
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	@SuppressWarnings("static-access")
	public ActionForward login(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try {
			return mapping.findForward("systemIndex");
		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, "登录失败! 失败原因:【"
					+ e.getMessage() + "】");
		}
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 12, 2010</li>
	 * <li>3、开发时间：10:48:20 AM</li>
	 * <li>4、返回类型：ActionForward</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：重新登录系统</li>
	 * </ul>
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward reLogin(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession(false);
		if (session != null) {
			session.removeAttribute("userentity");
			session.removeAttribute("workDate");
			session.removeAttribute("orgentity");
			session.invalidate();
		}
		response.reset();
		try {
			return mapping.findForward("systemLogin");
		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, MessageConstants.LOGOUT_ERROR);
		}
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 21, 2010</li>
	 * <li>3、开发时间：12:09:48 PM</li>
	 * <li>4、返回类型：ActionForward</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：退出系统时清楚Session</li>
	 * </ul>
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward logout(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession(false);
		if (session != null) {
			session.removeAttribute("userentity");
			session.removeAttribute("workDate");
			session.removeAttribute("orgentity");
			session.removeAttribute("userentity");
			request.removeAttribute("username");
			session.invalidate();
		}
		response.reset();
		return null;
	}
	/**
	 * 跳转欢迎界面
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward gotoWelcome(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		CommonServices commonService = (CommonServices)this.getBean("CommonServices");
		String workdate=DateUtils.getLogdate();//工作日期
		String msgId = commonService.getSEQMsgId(workdate);
		try{
			//查询工作日期
			List list = CommonServices.querySystemstatus(msgId);
			String workDatehvps =workdate;
			String workDatebeps =workdate;
			String workStatehvps = ""; 
			for(int i=0;i<list.size();i++){
				Hvpssystemstatus obj = (Hvpssystemstatus)list.get(i);
				//临时判断条件，后期改造
				if(obj.getId()!=null && obj.getId()==1){
					workDatehvps =obj.getCursysdt();
					workStatehvps =obj.getCursyssts();
				}
				if(obj.getId()!=null && obj.getId()==2){
					workDatebeps =obj.getCursysdt();
				}
			}	
			
			//系统工作日期
			request.getSession().setAttribute("workDate",workdate);//当前机器工作日期
			request.getSession().setAttribute("workDatehvps",workDatehvps);//大额工作日期
			request.getSession().setAttribute("workDatebeps",workDatebeps);//小额工作日期
			//大额系统工作状态
			request.getSession().setAttribute("workStatehvps",workStatehvps);//大额工作状态
			
		}catch (Exception e) {
			e.printStackTrace();
		}
		return mapping.findForward("gotoWelcome");
	}
}