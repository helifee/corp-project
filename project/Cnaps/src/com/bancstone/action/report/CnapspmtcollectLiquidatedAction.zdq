package com.bancstone.action.report;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bancstone.action.BaseAction;
import com.bancstone.constants.SystemConstants;
import com.bancstone.hibernate.systemManage.Systemusersmanage;
import com.cnaps.common.AmoutEnty;
import com.cnaps.coreservices.ReportManagService;
import com.cnaps.excel.CreateCells_Liquidation;
import com.cnaps.hvps.form.transfer.TransProcessForm;
import com.cnaps.hvps.persistence.messages.ReportManagEntity;
public class CnapspmtcollectLiquidatedAction extends BaseAction {

	/**
	 * 业务汇总表已清算业务来往账列表查询
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings( { "static-access", "unchecked" })
	public ActionForward queryLiquidatedMsg(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try {
			ReportManagService reportManagService = (ReportManagService) this
					.getBean("ReportManagService");
			TransProcessForm voform = (TransProcessForm) form;
			String statusFlag=request.getParameter("statusFlag");//查询是否清算
			List liquidatedMsgList = new ArrayList();// 已清算账单清单
			List liquidatedMsgTempList = new ArrayList();// 已清算账单清单
			ReportManagEntity entity = null;
			if (voform.getPo().getWorkdt() != null
					&& !voform.getPo().getWorkdt().trim().equals("")) {
				this.setPageValue(voform, true);
				// 根据FORM查询符合条件的数据
				liquidatedMsgTempList = reportManagService.getliquidatedMsgList(voform,statusFlag);
				//msgid,pmtgrpid，InstdPty,instgpty,systemcd, direction,amount,dbtracct,cdtracct,Id,PrcSts
				Object obj[] = null;
				for(int i=0;i<liquidatedMsgTempList.size();i++){
					obj = (Object[]) liquidatedMsgTempList.get(i);;
					entity = new ReportManagEntity();
					entity.setMsgId(obj[0]==null?"":obj[0].toString());//报文标识号
					entity.setPmtGrpId(obj[1]==null?"":obj[1].toString());//支付交易组号
					entity.setInstdPty(obj[2]==null?"":obj[2].toString());//接收参与机构
					entity.setInstgPty(obj[3]==null?"":obj[3].toString());//发起参与机构
					entity.setSystemCd(SystemConstants.getSystemNameBySystemCode(obj[4]==null?"":obj[4].toString()));//系统类型
					entity.setDirection(SystemConstants.getDirectionNameByDirectionCode(obj[5]==null?"":obj[5].toString()));//来往标识
					entity.setAmount(obj[6]==null?"":obj[6].toString());//金额
					entity.setDbtrAcct(obj[7]==null?"":obj[7].toString());//付款人账号
					entity.setCdtrAcct(obj[8]==null?"":obj[8].toString());//收款人账号
					entity.setId(obj[9]==null?"":obj[9].toString());//ID主键
					entity.setPrcSts(SystemConstants.getPrcStsNameByPrcStsCode(obj[10]==null?"":obj[10].toString()));//处理状态
					liquidatedMsgList.add(entity);
				}
			}
			request.setAttribute("liquidatedMsgList", liquidatedMsgList);
			this.setPageInfo(request, voform);
			if(statusFlag!=null&&!statusFlag.trim().equals("")){
				if(statusFlag.trim().equals("1")){
					return mapping.findForward("queryLiquidatedList");// 查询已清算
				}else{
					return mapping.findForward("queryNotLiquidatedList");// 查询未清算
				}
			}
			return toFailedPage(mapping, request, "交易状态未知！");
		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
	}
	/**
	 * 导出查询出来的已清单
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward queryLiquidatedMsgExcel(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try {
			ReportManagService reportManagService = (ReportManagService) this
			.getBean("ReportManagService");
			TransProcessForm voform = (TransProcessForm) form;
			String statusFlag=request.getParameter("statusFlag");//查询是否清算
			List liquidatedMsgList = new ArrayList();// 已清算账单清单
			List liquidatedMsgTempList = null;// 已清算账单清单
			AmoutEnty ae=new AmoutEnty();
			if (voform.getPo().getWorkdt() != null
					&& !voform.getPo().getWorkdt().trim().equals("")) {
				this.setPageValue(voform, false);//设置成不分页
				// 根据FORM查询符合条件的数据
				liquidatedMsgTempList = reportManagService.getliquidatedMsgList(voform,statusFlag);
				DateFormat dtf=new DateFormat();
				liquidatedMsgList=dtf.getLiquidatedMsgList(liquidatedMsgTempList);
			}
			if (liquidatedMsgList!=null&&liquidatedMsgList.size() > 0) {
				CreateCells_Liquidation create = new CreateCells_Liquidation();
				Systemusersmanage userEntity=(Systemusersmanage)request.getSession().getAttribute("userentity");
				String userName=userEntity.getUsername();
				String workdt=request.getSession().getAttribute("workDate").toString();
				create.createExcel(response, userName, workdt, liquidatedMsgList, ExcelHeader.Excel_LIQUIDATEMSGlIST_NAME, "已清算交易清单");
				return null;
			} else {
				return toFailedPage(mapping, request,"找不到需要被导出的数据！");
			}
		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
	}
	
	/**
	 * 导出查询出来未清算的清单
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward queryLiquidatedNotMsgExcel(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try {
			ReportManagService reportManagService = (ReportManagService) this
			.getBean("ReportManagService");
			TransProcessForm voform = (TransProcessForm) form;
			String statusFlag=request.getParameter("statusFlag");//查询是否清算
			List liquidatedMsgList = new ArrayList();// 已清算账单清单
			List liquidatedMsgTempList = new ArrayList();// 已清算账单清单
			ReportManagEntity entity = null;
			AmoutEnty ae=new AmoutEnty();
			if (voform.getPo().getWorkdt() != null
					&& !voform.getPo().getWorkdt().trim().equals("")) {
				this.setPageValue(voform, false);
				// 根据FORM查询符合条件的数据
				liquidatedMsgTempList = reportManagService.getliquidatedMsgList(voform,statusFlag);
				//msgid,pmtgrpid,InstdPty,instgpty,systemcd, direction,amount,dbtracct,cdtracct,Id,status
				Object obj[] = null;
				for(int i=0;i<liquidatedMsgTempList.size();i++){
					obj = (Object[]) liquidatedMsgTempList.get(i);;
					entity = new ReportManagEntity();
					entity.setMsgId(obj[0]==null?"":obj[0].toString());//报文标识号
					entity.setPmtGrpId(obj[1]==null?"":obj[1].toString());//支付交易组号
					entity.setInstdPty(obj[2]==null?"":obj[2].toString());//接收参与机构
					entity.setInstgPty(obj[3]==null?"":obj[3].toString());//发起参与机构
					entity.setSystemCd(SystemConstants.getSystemNameBySystemCode(obj[4]==null?"":obj[4].toString()));//系统类型
					entity.setDirection(SystemConstants.getDirectionNameByDirectionCode(obj[5]==null?"":obj[5].toString()));//来往标识
					entity.setAmount(ae.formatAmount(obj[6]==null?"":obj[6].toString()));//金额
					entity.setDbtrAcct(obj[7]==null?"":obj[7].toString());//付款人账号
					entity.setCdtrAcct(obj[8]==null?"":obj[8].toString());//收款人账号
					entity.setId(obj[9]==null?"":obj[9].toString());//ID主键
					entity.setPrcSts(SystemConstants.getPrcStsNameByPrcStsCode(obj[10]==null?"":obj[10].toString()));//处理状态
					liquidatedMsgList.add(entity);
				}
			}
			if (liquidatedMsgList.size() > 0) {
				CreateCells_Liquidation create = new CreateCells_Liquidation();
				Systemusersmanage userEntity=(Systemusersmanage)request.getSession().getAttribute("userentity");
				String userName=userEntity.getUsername();
				String workdt=request.getSession().getAttribute("workDate").toString();
				create.createExcelForLiquidatedNot(response,userName,workdt, liquidatedMsgList);
				return null;
			} else {
				return toFailedPage(mapping, request,"找不到需要被导出的数据！");
			}
		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
	}
}
