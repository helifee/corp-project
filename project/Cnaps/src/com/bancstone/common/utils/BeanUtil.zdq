package com.bancstone.common.utils;

import java.beans.PropertyDescriptor;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.beanutils.ConvertUtils;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.beanutils.converters.SqlDateConverter;
import org.apache.commons.beanutils.converters.StringConverter;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.commons.validator.GenericValidator;

import com.bancstone.common.json.Json;
import com.bancstone.common.tree.ExtjsTree;
import com.bancstone.common.tree.TreeNode;

/**
 * 
 * <ul>
 * <li>1、开发日期：Jul 18, 2010</li>
 * <li>2、开发时间：5:55:30 PM</li>
 * <li>3、类型名称：BeanUtil</li>
 * <li>4、类型意图：JavaBean处理的助手类</li>
 * </ul>
 * 
 * @author 王亮
 * 
 */
public class BeanUtil extends org.apache.commons.beanutils.BeanUtils {
	@SuppressWarnings("unused")
	private final static Log log = LogFactory.getLog(BeanUtil.class);
	static {
		ConvertUtils.register(new SqlDateConverter(), java.sql.Date.class);
		ConvertUtils.register(new StringConverter(), String.class);
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 15, 2010</li>
	 * <li>3、开发时间：3:28:00 PM</li>
	 * <li>4、返回类型：void</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：复制对象属性值并赋值给目标对象对应的属性</li>
	 * </ul>
	 * 
	 * @param dest
	 * @param orig
	 */
	public static void copyProperties2Object(Object dest, Object orig) {
		PropertyDescriptor origDescriptors[] = PropertyUtils
				.getPropertyDescriptors(orig);
		for (int i = 0; i < origDescriptors.length; i++) {
			String name = origDescriptors[i].getName();
			if ("class".equals(name)) {
				continue; // No point in trying to set an object's class
			}
			if (PropertyUtils.isReadable(orig, name)
					&& PropertyUtils.isWriteable(dest, name)) {
				try {
					Object value = PropertyUtils.getSimpleProperty(orig, name);
					if (value != null
							&& !(value instanceof String && GenericValidator
									.isBlankOrNull((String) value))) {
						copyProperty(dest, name, value);
					}
				} catch (NoSuchMethodException e) {
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 15, 2010</li>
	 * <li>3、开发时间：3:23:14 PM</li>
	 * <li>4、返回类型：void</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：根据enNames数组指定的属性名称复制对象orig的属性值并添加到list列表中</li>
	 * </ul>
	 * 
	 * @param list
	 * @param orig
	 */
	@SuppressWarnings("unchecked")
	public static void copyProperties2List(List list, Object orig,
			String[] enNames) {
		@SuppressWarnings("unused")
		PropertyDescriptor origDescriptors[] = PropertyUtils
				.getPropertyDescriptors(orig);
		// for (int i = 0; i < origDescriptors.length; i++) {
		// String name = origDescriptors[i].getName();
		for (int i = 0; i < enNames.length; i++) {
			String name = enNames[i];
			if ("class".equals(name)) {
				continue; // No point in trying to set an object's class
			}
			if (PropertyUtils.isReadable(orig, name)) {
				try {
					Object value = PropertyUtils.getSimpleProperty(orig, name);
					// System.out.println(name + "===" + value);
					if (value != null
							&& !(value instanceof String && GenericValidator
									.isBlankOrNull((String) value))) {
						list.add(value);
					} else {
						// value无数据值时用" "填充
						list.add(" ");
					}
				} catch (NoSuchMethodException e) {
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 9, 2010</li>
	 * <li>3、开发时间：5:27:29 PM</li>
	 * <li>4、返回类型：void</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：复制对象orig的属性值并添加到list列表中</li>
	 * </ul>
	 * 
	 * @param list
	 * @param orig
	 */
	@SuppressWarnings("unchecked")
	public static void copyProperties2List(List list, Object orig) {
		PropertyDescriptor origDescriptors[] = PropertyUtils
				.getPropertyDescriptors(orig);
		for (int i = 0; i < origDescriptors.length; i++) {
			String name = origDescriptors[i].getName();
			if ("class".equals(name)) {
				continue; // No point in trying to set an object's class
			}
			if (PropertyUtils.isReadable(orig, name)) {
				try {
					Object value = PropertyUtils.getSimpleProperty(orig, name);
					if (value != null
							&& !(value instanceof String && GenericValidator
									.isBlankOrNull((String) value))) {
						list.add(value);
					}
				} catch (NoSuchMethodException e) {
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				}
			}
		}
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 18, 2010</li>
	 * <li>3、开发时间：5:00:37 PM</li>
	 * <li>4、返回类型：String</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：Object对象转换为JSON字符串</li>
	 * </ul>
	 * 
	 * @return
	 */
	public static String bean2JSONString(Object object) {
		return new Json(object).toString();

	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 29, 2010</li>
	 * <li>3、开发时间：9:25:49 PM</li>
	 * <li>4、返回类型：String</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：String转换为JSON字符串</li>
	 * </ul>
	 * 
	 * @param str
	 * @return
	 */
	public static String bean2JSONString(String str) {
		return new Json(str).toString();

	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 29, 2010</li>
	 * <li>3、开发时间：9:26:25 PM</li>
	 * <li>4、返回类型：String</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：Object[]数组转换为JSON字符串</li>
	 * </ul>
	 * 
	 * @param objects
	 * @return
	 */
	public static String bean2JSONString(Object[] objects) {
		return new Json(objects).toString();

	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 29, 2010</li>
	 * <li>3、开发时间：9:26:48 PM</li>
	 * <li>4、返回类型：String</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：List<?>数组转换为JSON字符串</li>
	 * </ul>
	 * 
	 * @param list
	 * @return
	 */
	public static String bean2JSONString(List<?> list) {
		return new Json(list).toString();

	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 29, 2010</li>
	 * <li>3、开发时间：9:27:13 PM</li>
	 * <li>4、返回类型：String</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：Map<String, Object>转换为JSON字符串</li>
	 * </ul>
	 * 
	 * @param map
	 * @return
	 */
	public static String bean2JSONString(Map<String, Object> map) {
		return new Json(map).toString();

	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 18, 2010</li>
	 * <li>3、开发时间：5:32:37 PM</li>
	 * <li>4、返回类型：String</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：返回JSON空串"{}"</li>
	 * </ul>
	 * 
	 * @return
	 */
	public static String bean2JSONString() {
		return new Json().toString();
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 18, 2010</li>
	 * <li>3、开发时间：5:14:15 PM</li>
	 * <li>4、返回类型：Class<?></li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：JSON字符串转换为JavaBean对象</li>
	 * </ul>
	 * 
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static Object JSONString2Bean(String jsonString, Class beanClass) {
		JSONObject jsonObject = JSONObject.fromObject(jsonString);
		return (Object) JSONObject.toBean(jsonObject, beanClass);
	}

	/**
	 * 从一个JSON 对象字符格式中得到一个java对象，其中beansList是一类的集合，形如： {"id" : idValue, "name" :
	 * nameValue, "aBean" : {"aBeanId" : aBeanIdValue, ...}, beansList:[{}, {},
	 * ...]}
	 * 
	 * @param jsonString
	 * @param clazz
	 * @param map
	 *            集合属性的类型 (key : 集合属性名, value : 集合属性类型class) eg: ("beansList" :
	 *            Bean.class)
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static Object JSONString2Bean(String jsonString, Class beanClass,
			Map classMap) {
		JSONObject jsonObject = JSONObject.fromObject(jsonString);
		return (Object) JSONObject.toBean(jsonObject, beanClass, classMap);
	}

	/**
	 * 从一个JSON数组得到一个java对象数组，形如： [{"id" : idValue, "name" : nameValue}, {"id" :
	 * idValue, "name" : nameValue}, ...]
	 * 
	 * @param object
	 * @param clazz
	 * @param map
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static Object[] JSONString2Objects(String jsonString, Class clazz,
			Map map) {
		JSONArray array = JSONArray.fromObject(jsonString);
		Object[] obj = new Object[array.size()];
		for (int i = 0; i < array.size(); i++) {
			JSONObject jsonObject = array.getJSONObject(i);
			obj[i] = JSONObject.toBean(jsonObject, clazz, map);
		}
		return obj;
	}

	/**
	 * 从一个JSON数组得到一个java对象数组，形如： [{"id" : idValue, "name" : nameValue}, {"id" :
	 * idValue, "name" : nameValue}, ...]
	 * 
	 * @param object
	 * @param clazz
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static Object[] JSONString2Objects(String jsonString, Class clazz) {
		JSONArray array = JSONArray.fromObject(jsonString);
		Object[] obj = new Object[array.size()];
		for (int i = 0; i < array.size(); i++) {
			JSONObject jsonObject = array.getJSONObject(i);
			obj[i] = JSONObject.toBean(jsonObject, clazz);
		}
		return obj;
	}

	/**
	 * 从一个JSON数组得到一个java对象集合
	 * 
	 * @param object
	 * @param clazz
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static List JSONString2List(String jsonString, Class clazz) {
		JSONArray array = JSONArray.fromObject(jsonString);
		List list = new ArrayList();
		for (Iterator iter = array.iterator(); iter.hasNext();) {
			JSONObject jsonObject = (JSONObject) iter.next();
			list.add(JSONObject.toBean(jsonObject, clazz));
		}
		return list;
	}

	/**
	 * 从一个JSON数组得到一个java对象集合，其中对象中包含有集合属性
	 * 
	 * @param object
	 * @param clazz
	 * @param map
	 *            集合属性的类型
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static List JSONString2List(String jsonString, Class clazz, Map map) {
		JSONArray array = JSONArray.fromObject(jsonString);
		List list = new ArrayList();
		for (Iterator iter = array.iterator(); iter.hasNext();) {
			JSONObject jsonObject = (JSONObject) iter.next();
			list.add(JSONObject.toBean(jsonObject, clazz, map));
		}
		return list;
	}

	/**
	 * 从json HASH表达式中获取一个map，该map支持嵌套功能 形如：{"id" : "johncon", "name" : "小强"}
	 * 注意commons
	 * -collections版本，必须包含org.apache.commons.collections.map.MultiKeyMap
	 * 
	 * @param object
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static Map JSONString2Map(String jsonString) {
		JSONObject jsonObject = JSONObject.fromObject(jsonString);
		Map map = new HashMap();
		for (Iterator iter = jsonObject.keys(); iter.hasNext();) {
			String key = (String) iter.next();
			map.put(key, jsonObject.get(key));
		}
		return map;
	}

	/**
	 * 从json数组中得到相应java数组 json形如：["123", "456"]
	 * 
	 * @param jsonString
	 * @return
	 */
	public static Object[] JSONString2Array(String jsonString) {
		JSONArray jsonArray = JSONArray.fromObject(jsonString);
		return jsonArray.toArray();
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 18, 2010</li>
	 * <li>3、开发时间：10:40:56 AM</li>
	 * <li>4、返回类型：String</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：构造一个带有checkbox的标准树实例</li>
	 * </ul>
	 * 
	 * @param root树的根节点.根据这个根节点从treeList列表中生成树
	 * @param treeList来自数据库的节点数据
	 * @return
	 */
	public static String toJsonCkeckTree(TreeNode root, List<TreeNode> treeList) {
		ExtjsTree extjsTree = new ExtjsTree(root, treeList);
		return extjsTree.toJsonCheckTree();
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 20, 2010</li>
	 * <li>3、开发时间：2:20:45 PM</li>
	 * <li>4、返回类型：String</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：根据数据源生成具有连接地址属性url的exjts 动态树字符串</li>
	 * </ul>
	 * 
	 * @param root
	 * @param treeList
	 * @return
	 */
	public static String toJsonUrlTree(TreeNode root, List<TreeNode> treeList) {
		ExtjsTree extjsTree = new ExtjsTree(root, treeList);
		return extjsTree.toJsonUrlTree();
	}

	/**
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Aug 18, 2010</li>
	 * <li>3、开发时间：10:46:44 AM</li>
	 * <li>4、返回类型：String</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：根据数据源生成标准的exjts 动态树字符串.返回标准树字符串.
	 * 
	 * </ul>
	 * 
	 * @param root树的根节点.根据这个根节点从treeList列表中生成树
	 * @param treeList来自数据库的节点数据
	 * @return
	 */
	public static String toJsonTree(TreeNode root, List<TreeNode> treeList) {
		ExtjsTree extjsTree = new ExtjsTree(root, treeList);
		return extjsTree.toJsonTree();
	}

}
