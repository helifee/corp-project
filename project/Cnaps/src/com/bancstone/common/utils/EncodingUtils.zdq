package com.bancstone.common.utils;

/**
 * 编码测试工具类
 * 
 * @author <a href='mailto:tengfei.lee@gmail.com'>Kenny Lee</a> <br/>2006-8-1
 *         15:28:05
 */
public class EncodingUtils {
	final static char[] digits = { '0', '1', '2', '3', '4', '5', '6', '7', '8',
			'9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',
			'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
			'z' };

	/**
	 * 返回一个int值的二进制表示的字符串
	 * 
	 * @param i
	 * @return
	 */
	public static String toBinaryString(int i) {
		return toUnsignedString(i, 32, 1);
	}

	/**
	 * 返回一个char值的二进制表示的字符串
	 * 
	 * @param c
	 * @return
	 */
	public static String toBinaryString(char c) {
		return toUnsignedString(c, 16, 1);
	}

	/**
	 * 返回一个字符串的二进制表示的字符串
	 * 
	 * @param s
	 * @return
	 */
	public static String toBinaryString(String s) {
		char[] cs = s.toCharArray();
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < cs.length; i++) {
			sb.append(toBinaryString(cs[i]));
			sb.append(":");
		}
		return sb.toString();
	}

	/**
	 * 返回一个byte[]的二进制表示的字符串
	 * 
	 * @param bs
	 * @return
	 */
	public static String toBinaryString(byte[] bs) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < bs.length; i++) {
			sb.append(toBinaryString(bs[i]));
			sb.append(":");
		}
		return sb.toString();
	}

	/**
	 * 返回一个byte的二进制表示的字符串
	 * 
	 * @param c
	 * @return
	 */
	public static String toBinaryString(byte c) {
		return toUnsignedString(c, 8, 1);
	}

	/**
	 * 返回一个int的十六进制表示的字符串
	 * 
	 * @param i
	 * @return
	 */
	public static String toHexString(int i) {
		return toUnsignedString(i, 8, 4);
	}

	/**
	 * 返回一个char的十六进制表示的字符串
	 * 
	 * @param c
	 * @return
	 */
	public static String toHexString(char c) {
		return toUnsignedString(c, 4, 4);
	}

	/**
	 * 返回一个byte的十六进制表示的字符串
	 * 
	 * @param b
	 * @return
	 */
	public static String toHexString(byte b) {
		return toUnsignedString(b, 2, 4);
	}

	/**
	 * 返回一个String的十六进制表示的字符串
	 * 
	 * @param s
	 * @return
	 */
	public static String toHexString(String s) {
		char[] cs = s.toCharArray();
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < cs.length; i++) {
			sb.append(toHexString(cs[i]));
			sb.append(":");
		}
		return sb.toString();
	}

	/**
	 * 返回一个byte[]的十六进制表示的字符串
	 * 
	 * @param bs
	 * @return
	 */
	public static String toHexString(byte[] bs) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < bs.length; i++) {
			sb.append(toHexString(bs[i]));
			sb.append(":");
		}
		return sb.toString();
	}

	private static String toUnsignedString(int i, int length, int shift) {
		char[] buf = new char[32];
		for (int j = 0; j < 32; j++) {
			buf[j] = '0';
		}
		int charPos = 32;
		int radix = 1 << shift;
		int mask = radix - 1;
		do {
			buf[--charPos] = digits[i & mask];
			i >>>= shift;
		} while (i != 0);

		return new String(buf, 32 - length, length);
	}

	/**
	 * 将原始数据编码为base64编码
	 */
	static public char[] encodeBase64(byte[] data) {
		char[] out = new char[((data.length + 2) / 3) * 4];

		for (int i = 0, index = 0; i < data.length; i += 3, index += 4) {
			boolean quad = false;
			boolean trip = false;
			int val = (0xFF & (int) data[i]);
			val <<= 8;
			if ((i + 1) < data.length) {
				val |= (0xFF & (int) data[i + 1]);
				trip = true;
			}
			val <<= 8;
			if ((i + 2) < data.length) {
				val |= (0xFF & (int) data[i + 2]);
				quad = true;
			}
			out[index + 3] = alphabet[(quad ? (val & 0x3F) : 64)];
			val >>= 6;
			out[index + 2] = alphabet[(trip ? (val & 0x3F) : 64)];
			val >>= 6;
			out[index + 1] = alphabet[val & 0x3F];
			val >>= 6;
			out[index + 0] = alphabet[val & 0x3F];
		}
		return out;
	}

	/**
	 * 将base64编码的数据解码成原始数据
	 */
	static public byte[] decodeBase64(char[] data) {
		int len = ((data.length + 3) / 4) * 3;
		if (data.length > 0 && data[data.length - 1] == '=')
			--len;
		if (data.length > 1 && data[data.length - 2] == '=')
			--len;
		byte[] out = new byte[len];
		int shift = 0;
		int accum = 0;
		int index = 0;
		for (int ix = 0; ix < data.length; ix++) {
			int value = codes[data[ix] & 0xFF];
			if (value >= 0) {
				accum <<= 6;
				shift += 6;
				accum |= value;
				if (shift >= 8) {
					shift -= 8;
					out[index++] = (byte) ((accum >> shift) & 0xff);
				}
			}
		}
		if (index != out.length)
			throw new Error("miscalculated data length!");
		return out;
	}

	static private char[] alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
			.toCharArray();

	static private byte[] codes = new byte[256];
	static {
		for (int i = 0; i < 256; i++)
			codes[i] = -1;
		for (int i = 'A'; i <= 'Z'; i++)
			codes[i] = (byte) (i - 'A');
		for (int i = 'a'; i <= 'z'; i++)
			codes[i] = (byte) (26 + i - 'a');
		for (int i = '0'; i <= '9'; i++)
			codes[i] = (byte) (52 + i - '0');
		codes['+'] = 62;
		codes['/'] = 63;
	}

	public static void main(String[] args) throws Exception {
		// 加密成base64
		String strSrc = "lishenghui";
		String strOut = new String(EncodingUtils
				.encodeBase64(strSrc.getBytes()));
		System.out.println(strOut);

		String strOut2 = new String(EncodingUtils.decodeBase64(strOut
				.toCharArray()));
		System.out.println(strOut2);
	}

	/*
	 * public static void main(String[] args) throws
	 * UnsupportedEncodingException { String testStr = "中国a";
	 *  // 转换为char数组
	 *  // char[] defaultChars = {'中','国'}; char[] defaultChars =
	 * testStr.toCharArray();
	 * 
	 * byte[] utfbytes2 =testStr.getBytes("GBK"); // 用UTF-8进行编码（encode） String
	 * utf1=new String(utfbytes2,"Utf-8"); byte[] utfbytes =
	 * StringCoding.encode("UTF-8", defaultChars, 0, defaultChars.length); //
	 * 用UTF-8进行解码（decode） String utf2=new String(utfbytes); char[]
	 * utfChars=StringCoding.decode("UTF-8", utfbytes, 0,utfbytes.length);
	 * System.out.println(toHexString(utfbytes));
	 * System.out.println(toHexString(utfbytes2));
	 * System.out.println(toHexString(utf1.getBytes()));
	 * System.out.println(toHexString(utf2.getBytes()));
	 *  }
	 */
}
