package com.bancstone.common.utils;

/**
 * 把将阿拉伯数字转换成中文大写的 只须调用format方法
 * 
 * @author USER
 */
public class MoneyUtil {
	private static final String[] pattern = { "零", "壹", "贰", "叁", "肆", "伍",
			"陆", "柒", "捌", "玖" };

	private static final String[] cPattern = { "", "拾", "佰", "仟", "万", "拾",
			"佰", "仟", "亿" };

	private static final String[] cfPattern = { "", "角", "分" };

	private static final String ZEOR = "零";

	public static String format(String money) {
		String moneyString = "";
		int js = 0;
		for (int f = 0; f < money.length(); f++) {
			if (money.charAt(f) == '.') {
				js = f;
			}
		}
		if (js == 0) {
			moneyString = money;
		} else {
			String str = money.substring(js, money.length());
			if (str.length() <= 3) {
				moneyString = money;
			} else {
				int kt = Integer.parseInt(String.valueOf(str.charAt(3)));
				if (kt >= 5) {
					int kf = Integer.parseInt(str.substring(1, 3)) + 1;
					String st = String.valueOf(kf);
					long l = Long.parseLong(money.substring(0, js));
					if (st.length() == 3) {
						long ls = l
								+ Long.parseLong(String.valueOf(st.charAt(0)));
						moneyString = "" + ls + "." + st.substring(1, 3);
					} else {
						moneyString = "" + l + "." + st.substring(0, 2);
					}
				} else {
					moneyString = money.substring(0, js + 3);
				}
			}
		}
		int dotPoint = moneyString.indexOf("."); // 判断是否为小数
		String moneyStr;
		if (dotPoint != -1) {
			moneyStr = moneyString.substring(0, moneyString.indexOf("."));
		} else {
			moneyStr = moneyString;
		}
		StringBuffer fraction = null; // 小数部分的处理,以及最后的yuan.
		StringBuffer ms = new StringBuffer();
		for (int i = 0; i < moneyStr.length(); i++) {
			ms.append(pattern[moneyStr.charAt(i) - 48]); // 按数组的编号加入对应大写汉字
		}
		int cpCursor = 1;
		for (int j = moneyStr.length() - 1; j > 0; j--) {
			ms.insert(j, cPattern[cpCursor]); // 在j之后加字符,不影响j对原字符串的相对位置
			cpCursor = cpCursor == 8 ? 1 : cpCursor + 1; // 亿位之后重新循环
		}
		while (ms.indexOf("零拾") != -1) { // 当十位为零时用一个"零"代替"零拾"
			ms.replace(ms.indexOf("零拾"), ms.indexOf("零拾") + 2, ZEOR);
		}
		while (ms.indexOf("零佰") != -1) { // 当百位为零时,同理
			ms.replace(ms.indexOf("零佰"), ms.indexOf("零佰") + 2, ZEOR);
		}
		while (ms.indexOf("零仟") != -1) { // 同理
			ms.replace(ms.indexOf("零仟"), ms.indexOf("零仟") + 2, ZEOR);
		}
		while (ms.indexOf("零万") != -1) { // 万需保留，中文习惯
			ms.replace(ms.indexOf("零万"), ms.indexOf("零万") + 2, "万");
		}
		while (ms.indexOf("零亿") != -1) { // 同上
			ms.replace(ms.indexOf("零亿"), ms.indexOf("零亿") + 2, "亿");
		}
		while (ms.indexOf("零零") != -1) {// 有连续数位出现零，即有以下情况，此时根据习惯保留一个零即可
			ms.replace(ms.indexOf("零零"), ms.indexOf("零零") + 2, ZEOR);
		}
		while (ms.indexOf("亿万") != -1) { // 特殊情况，如:100000000,根据习惯保留高位
			ms.replace(ms.indexOf("亿万"), ms.indexOf("亿万") + 2, "亿");
		}
		while (ms.lastIndexOf("零") == ms.length() - 1) { // 当结尾为零j，不必显示,经过处理也只可能出现一个零
			ms.delete(ms.lastIndexOf("零"), ms.lastIndexOf("零") + 1);
		}
		int end;
		if ((dotPoint = moneyString.indexOf(".")) != -1) { // 是小数的进入
			String fs = moneyString.substring(dotPoint + 1, moneyString
					.length());
			if (fs.indexOf("00") == -1 || fs.indexOf("00") >= 2) {// 若前两位小数全为零，则跳过操作
				end = fs.length() > 2 ? 2 : fs.length(); // 仅保留两位小数
				fraction = new StringBuffer(fs.substring(0, end));
				for (int j = 0; j < fraction.length(); j++) {
					fraction.replace(j, j + 1, MoneyUtil.pattern[fraction
							.charAt(j) - 48]); // 替换大写汉字
				}
				for (int i = fraction.length(); i > 0; i--) { // 插入中文标识
					fraction.insert(i, cfPattern[i]);
				}
				fraction.insert(0, "元"); // 为整数部分添加标识
			} else {
				fraction = new StringBuffer("元整");
			}
		} else {
			fraction = new StringBuffer("元整");
		}
		ms.append(fraction); // 加入小数部分
		String moneys = ms.toString();
		return moneys;
	}

	/**
	 * 传入String类型的金额返回格式为固定格式（0.00）
	 * 
	 * @param money
	 *            数字金额
	 * @return String类型金额
	 */
	public static String switchforstr(String money) {
		double mon = 0;
		String str = "";
		String rv = "";
		if (money.length() > 0 && money != "."
				&& money.indexOf(".") == money.lastIndexOf(".")) {
			mon = Double.parseDouble(money);
		}
		str = money + "";
		if (str.length() > 0 && mon > 0) {
			if (str.length() <= 1) {
				rv = str + ".00";
				System.out.println(rv);
			} else {
				if (str.substring(str.indexOf(".") + 1).length() == 1) {
					rv = str + "0";
				} else if (str.substring(str.indexOf(".") + 1).length() >= 2) {
					if (str.substring(0, str.indexOf(".") + 1).length() <= 1) {
						rv = "0"
								+ '.'
								+ str.substring(str.indexOf(".") + 1, str
										.indexOf(".") + 3);
					} else {
						rv = str.substring(0, str.indexOf("."))
								+ '.'
								+ str.substring(str.indexOf(".") + 1, str
										.indexOf(".") + 3);
					}
				}
			}
		} else {
			rv = "0.00";
		}
		return rv;
	}

	/**
	 * 金额格式转化方法
	 */
	public static String formatMoney(String money) {
		if (money.indexOf(".") == -1) {
			money = money + ".00";
		}
		String[] strall = money.split("\\.");
		System.out.println(strall[0].length());
		String pre = strall[0];
		int cd = pre.length();
		int s = cd % 3;
		int num = 0;
		if (s != 0) {
			num = cd / 3 + 1;
		} else {
			num = cd / 3;
		}
		String m = "";
		String str;
		for (int i = num; i > 0; i--) {
			if (cd >= 3) {
				str = money.substring(cd - 3, cd);
				System.out.println("ddd" + str);
			} else {
				str = money.substring(0, cd);
			}
			if (i == 1) {
				m = str + m;
			} else {
				m = "," + str + m;
			}
			if (cd >= 3) {
				cd = cd - 3;
			}
		}
		return m + "." + strall[1];
	}

	public static void main(String[] args) {
		System.out.println(MoneyUtil.switchforstr(".012"));
	}
}