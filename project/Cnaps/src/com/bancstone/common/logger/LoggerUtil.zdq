package com.bancstone.common.logger;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * 
 * <ul>
 * <li>1、开发日期：Jul 18, 2010</li>
 * <li>2、开发时间：9:28:18 PM</li>
 * <li>3、类型名称：SeamlogUtil</li>
 * <li>4、类型意图：Struts日志记录器操作助手类</li>
 * </ul>
 * 
 * @author 王亮
 * 
 */
public class LoggerUtil {
	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 18, 2010</li>
	 * <li>3、开发时间：9:28:59 PM</li>
	 * <li>4、返回类型：void</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：以Debug优先级输出调试信息</li>
	 * </ul>
	 * 
	 * @param log
	 * @param object
	 */
	public static void debug(Log log, Object object) {
		if (log.isDebugEnabled()) {
			log.debug("\n" + object);
		}
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 18, 2010</li>
	 * <li>3、开发时间：9:29:16 PM</li>
	 * <li>4、返回类型：void</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：以Debug优先级输出调试信息</li>
	 * </ul>
	 * 
	 * @param log
	 * @param object
	 * @param throwable
	 */
	public static void debug(Log log, Object object, Throwable throwable) {
		if (log.isDebugEnabled()) {
			log.debug("\n" + object, throwable);
		}
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 18, 2010</li>
	 * <li>3、开发时间：9:29:25 PM</li>
	 * <li>4、返回类型：void</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：以Error优先级输出调试信息</li>
	 * </ul>
	 * 
	 * @param log
	 * @param object
	 */
	public static void error(Log log, Object object) {
		if (log.isErrorEnabled()) {
			log.error("\n" + object);
		}
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 18, 2010</li>
	 * <li>3、开发时间：9:29:38 PM</li>
	 * <li>4、返回类型：void</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：以Error优先级输出调试信息<</li>
	 * </ul>
	 * 
	 * @param log
	 * @param object
	 * @param throwable
	 */
	public static void error(Log log, Object object, Throwable throwable) {
		if (log.isErrorEnabled()) {
			log.error("\n" + object, throwable);
		}
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 18, 2010</li>
	 * <li>3、开发时间：9:30:07 PM</li>
	 * <li>4、返回类型：void</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：以Fatal优先级输出调试信息</li>
	 * </ul>
	 * 
	 * @param log
	 * @param object
	 */
	public static void fatal(Log log, Object object) {
		if (log.isFatalEnabled()) {
			log.fatal("\n" + object);
		}
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 18, 2010</li>
	 * <li>3、开发时间：9:30:17 PM</li>
	 * <li>4、返回类型：void</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：以Fatal优先级输出调试信息</li>
	 * </ul>
	 * 
	 * @param log
	 * @param object
	 * @param throwable
	 */
	public static void fatal(Log log, Object object, Throwable throwable) {
		if (log.isFatalEnabled()) {
			log.fatal("\n" + object, throwable);
		}
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 18, 2010</li>
	 * <li>3、开发时间：9:30:25 PM</li>
	 * <li>4、返回类型：void</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：以Info优先级输出调试信息</li>
	 * </ul>
	 * 
	 * @param log
	 * @param object
	 */
	public static void info(Log log, Object object) {
		if (log.isInfoEnabled()) {
			log.info("\n" + object);
		}
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 18, 2010</li>
	 * <li>3、开发时间：9:30:34 PM</li>
	 * <li>4、返回类型：void</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：以Info优先级输出调试信息</li>
	 * </ul>
	 * 
	 * @param log
	 * @param object
	 * @param throwable
	 */
	public static void info(Log log, Object object, Throwable throwable) {
		if (log.isInfoEnabled()) {
			log.info("\n" + object, throwable);
		}
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 18, 2010</li>
	 * <li>3、开发时间：9:30:47 PM</li>
	 * <li>4、返回类型：void</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：以Trace优先级输出调试信息</li>
	 * </ul>
	 * 
	 * @param log
	 * @param object
	 */
	public static void trace(Log log, Object object) {
		if (log.isTraceEnabled()) {
			log.trace("\n" + object);
		}
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 18, 2010</li>
	 * <li>3、开发时间：9:30:56 PM</li>
	 * <li>4、返回类型：void</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：以Trace优先级输出调试信息</li>
	 * </ul>
	 * 
	 * @param log
	 * @param object
	 * @param throwable
	 */
	public static void trace(Log log, Object object, Throwable throwable) {
		if (log.isTraceEnabled()) {
			log.trace("\n" + object, throwable);
		}
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 18, 2010</li>
	 * <li>3、开发时间：9:31:07 PM</li>
	 * <li>4、返回类型：void</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：以Warn优先级输出调试信息</li>
	 * </ul>
	 * 
	 * @param log
	 * @param object
	 */
	public static void warn(Log log, Object object) {
		if (log.isWarnEnabled()) {
			log.warn("\n" + object);
		}
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 18, 2010</li>
	 * <li>3、开发时间：9:31:15 PM</li>
	 * <li>4、返回类型：void</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：以Warn优先级输出调试信息</li>
	 * </ul>
	 * 
	 * @param log
	 * @param object
	 * @param throwable
	 */
	public static void warn(Log log, Object object, Throwable throwable) {
		if (log.isWarnEnabled()) {
			log.warn("\n" + object, throwable);
		}
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 18, 2010</li>
	 * <li>3、开发时间：9:42:23 PM</li>
	 * <li>4、返回类型：Log</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：获得日志记录器对象</li>
	 * </ul>
	 * 
	 * @param clazz
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static Log getLog(Class clazz) {
		return LogFactory.getLog(clazz);
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 18, 2010</li>
	 * <li>3、开发时间：9:45:57 PM</li>
	 * <li>4、返回类型：Log</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：获得日志记录器对象</li>
	 * </ul>
	 * 
	 * @param string
	 * @return
	 */
	public static Log getLog(String string) {
		return LogFactory.getLog(string);
	}

	/**
	 * 
	 * <ul>
	 * <li>1、开发作者：王亮</li>
	 * <li>2、开发日期：Jul 18, 2010</li>
	 * <li>3、开发时间：9:44:17 PM</li>
	 * <li>4、返回类型：LogFactory</li>
	 * <li>5、方法含义：</li>
	 * <li>6、方法说明：获得日志记录器工厂对象</li>
	 * </ul>
	 * 
	 * @return
	 */
	public static LogFactory getLogFactory() {
		return LogFactory.getFactory();
	}

	/**
	 * 构造函数
	 */
	private LoggerUtil() {
		super();
	}
}
