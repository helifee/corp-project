package com.bancstone.common.filter;

import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

public class TokenFilter implements Filter {
	private long previous;
	private FilterConfig filterConfig;

	public void doFilter(ServletRequest servletRequest,
			ServletResponse servletResponse, FilterChain chain)
			throws IOException, ServletException {
		HttpServletRequest request = (HttpServletRequest) servletRequest;
		HttpServletResponse response = (HttpServletResponse) servletResponse;
		//注释：多媒体表单提交不起作用
       String sessionTockent = request.getSession().getAttribute("token") == null ? ""
				: (String) request.getSession().getAttribute("token");
		String requestTockent = request.getParameter("token") == null ? "" : request
				.getParameter("token");
		
		if (request.getParameter("token") != null
				&& !request.getParameter("token").equals("")) {
			if (!sessionTockent.equals(requestTockent)) {
				request.setAttribute("message", "不能重复提交表单数据！");
				request.getRequestDispatcher(
								"/page/common/warnningMessage.jsp").forward(
								request, response);
				return;
				
				// 如果session中的令牌与表单提交的隐藏表单域中的值一致
			} else {
				request.getSession().removeAttribute("token");
				request.getSession().setAttribute("token", "");// 清空session中的令牌的值
				
			}
		} 
		
		
		// 判断session中是否存储token字符串
		if (request.getSession().getAttribute("token") == null
				|| request.getSession().getAttribute("token").equals("")) {
			String tokenStr = this.generateToken(request);
			request.getSession().setAttribute("token", tokenStr);
		}
        
		
		
		
		chain.doFilter(request, response);
	}

	public void init(FilterConfig config) throws ServletException {
		this.filterConfig = config;

	}

	// 产生token字符串
	public synchronized String generateToken(HttpServletRequest request) {

		HttpSession session = request.getSession();
		try {
			byte id[] = session.getId().getBytes();
			long current = System.currentTimeMillis();
			if (current == previous) {
				current++;
			}
			previous = current;
			byte now[] = new Long(current).toString().getBytes();
			MessageDigest md = MessageDigest.getInstance("MD5");
			md.update(id);
			md.update(now);
			return toHex(md.digest());
		} catch (NoSuchAlgorithmException e) {
			return null;
		}

	}

	private String toHex(byte buffer[]) {
		StringBuffer sb = new StringBuffer(buffer.length * 2);
		for (int i = 0; i < buffer.length; i++) {
			sb.append(Character.forDigit((buffer[i] & 0xf0) >> 4, 16));
			sb.append(Character.forDigit(buffer[i] & 0x0f, 16));
		}
		return sb.toString();
	}

	public void destroy() {

	}

}
