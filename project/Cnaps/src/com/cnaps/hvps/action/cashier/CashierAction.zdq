package com.cnaps.hvps.action.cashier;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bancstone.action.BaseAction;
import com.bancstone.common.exception.PicpMessageException;
import com.bancstone.service.systemManage.impl.CommonServices;
import com.cnaps.coreservices.CommonXMLEntity;
import com.cnaps.coreservices.TransCodeEntity;
import com.cnaps.coreservices.TransServices;
import com.cnaps.hvps.form.transfer.PersonCrashSpanBankExchangeForm;
import com.cnaps.hvps.persistence.transfer.PersonCrashSpanBankExchange;

public class CashierAction  extends BaseAction<Object>{

	 /**
	 * 银行本票签发
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward sendMessage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		try {
			PersonCrashSpanBankExchangeForm voform = (PersonCrashSpanBankExchangeForm) form;
			//报文头
			String type = request.getParameter("type");
			String contrperson = request.getParameter("contrperson");//授权柜员
			PersonCrashSpanBankExchange po = voform.getPo();
			po.setWarrantyId(contrperson);
			String transactionid = TransCodeEntity.SEND_BEPS_CASHIER;//功能代码
			commSetToXML(voform,request,transactionid);
			//报文体
            po.setSignMd(type);
			//处理组装报文，发送解析
			TransServices transServices = (TransServices) this.getBean("transServices");
			CommonXMLEntity commonXMLEntity = null;
			commonXMLEntity = transServices.transProcess(voform, TransCodeEntity.SEND_BEPS_CASHIER,
				"transaction", "");
			// 发送交易报文 并解析得到回应的信息
			String reslutmessage = "";// 处理信息
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码："
						+ commonXMLEntity.getProcessCode() + "错误信息："
						+ commonXMLEntity.getProcessDes());
			} else {
				reslutmessage = "处理成功码：" + commonXMLEntity.getProcessCode()
						+ "银行本票签发成功, 支付交易组号为："+voform.getPo().getPaymentGrouppo()+"！";
			}
			return toSuccessPage(mapping, request, reslutmessage,po.getPaymentno(),voform.getSystemcd(),"");
		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}	
	}
	
	/**
	 * 查询所有的本票 ()
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	
	@SuppressWarnings({ "unchecked", "static-access" })
	public ActionForward querySendxml(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		try {//type=1现金解付
			// 界面查询条件
			PersonCrashSpanBankExchangeForm voform = (PersonCrashSpanBankExchangeForm) form;
			PersonCrashSpanBankExchange po = voform.getPo();
			String transactionid = TransCodeEntity.QUERYCD;//功能代码
			commSetToXML(voform,request,transactionid);
			//查询代码
			voform.setQueryCd(TransCodeEntity.QUERY_BEPS_CASHIER);
			//分页设置
			this.setFenYe(voform);
			TransServices transServices = (TransServices) this
					.getBean("transServices");
			commSetConditionsList(voform, po);
//			// 本票状态
			String billstatus=request.getParameter("billstatus");
			if (!StringUtils.isEmpty(billstatus)) {
				if(billstatus.equals("04"))
				{
					voform.getConditions().add("billstatus:00");
					voform.getConditions().add("billstatus:01");
				}else{
					voform.getConditions().add("billstatus:" + billstatus);
				}
			}
			CommonXMLEntity commonXMLEntity = transServices.transProcess(
					voform, voform.getTransactionId(), "transaction", voform
							.getQueryCd());
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}
			voform.setTotalSize(Integer.parseInt(commonXMLEntity
					.getRecordcount()));
			this.setQueryPageValue(voform, true);
			List List = commonXMLEntity.getResults();
			this.setPageInfo(request, voform);
			this.setObjectToRequest(request, "queryList", List);
			request.setAttribute("condition", po);
			request.setAttribute("type", request.getParameter("type"));
				return mapping.findForward("queryList");// 查询到所有银行本票的业务列表
		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
	}
	

	@SuppressWarnings("unchecked")
	private void commSetConditionsList( PersonCrashSpanBankExchangeForm form,PersonCrashSpanBankExchange entity){
		
	
		if(null!=form.getPo().getIssuedtstart()&&!"".equals(form.getPo().getIssuedtstart())){
			form.getFieldStart().add("startIssuedt:"+form.getPo().getIssuedtstart());
		}
		if(null!=form.getPo().getIssuedtend()&&!"".equals(form.getPo().getIssuedtend())){
			form.getFieldEnd().add("endIssuedt:"+form.getPo().getIssuedtend());
		}
		if(null!=form.getPo().getIssueamtstart()&&!"".equals(form.getPo().getIssueamtstart())){
			form.getFieldStart().add("startIssueAmt:"+form.getPo().getIssueamtstart());
		}
		if(null!=form.getPo().getIssueamtend()&&!"".equals(form.getPo().getIssueamtend())){
			form.getFieldEnd().add("endIssueAmt:"+form.getPo().getIssueamtend());
		}
		
		if(null!=form.getPo().getHonourno() &&!"".equals(form.getPo().getHonourno() )){
			form.getConditions().add("honourno:"+form.getPo().getHonourno()    );
		}
		
		if(null!=form.getPo().getBillTp() &&!"".equals(form.getPo().getBillTp() )){
			form.getConditions().add("BillTp:"+form.getPo().getBillTp()    );
		}
		
		
		
		
		
	}
	
	
	@SuppressWarnings("unchecked")
	public ActionForward gotoTransDetails(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
			try {
				// 界面查询条件
				PersonCrashSpanBankExchangeForm voform = (PersonCrashSpanBankExchangeForm) form;
				String transactionid = TransCodeEntity.QUERYCD;//功能代码
				commSetToXML(voform,request,transactionid);
				//查询代码
				voform.setQueryCd(TransCodeEntity.QUERY_BEPS_CASHIER);
				//分页设置
				this.setFenYe(voform);
				TransServices transServices = (TransServices) this.getBean("transServices");
				voform.getConditions().add("paymentgrouppo:"+request.getParameter("paymentgrouppo"));
				CommonXMLEntity commonXMLEntity = transServices.transProcess(
						voform, voform.getTransactionId(), "transaction", voform.getQueryCd());
				if (!commonXMLEntity.getProcessCode().equals("000000")) {
					throw new PicpMessageException("错误码：["
							+ commonXMLEntity.getProcessCode() + "] 错误信息：["
							+ commonXMLEntity.getProcessDes() + "]");
				}
				voform.setTotalSize(Integer.parseInt(commonXMLEntity.getRecordcount()));
				BaseAction.setQueryPageValue(voform, true);
				List list = commonXMLEntity.getResults();
				this.setPageInfo(request, voform);
				PersonCrashSpanBankExchange po=new PersonCrashSpanBankExchange();
				if (list.size() > 0) {
					po = (PersonCrashSpanBankExchange) list.get(0);
				}
				request.setAttribute("po", po);
				String mappingStr = "";
				String type=request.getParameter("type");
			if(null!=type&&!"".equals(type)){
				//type=1现金解付
				////type=2未用退回
				//type=3  挂失
				//type=4挂失维护
				//type=5节挂
System.out.println("----------------------------------------------------------------------------type : "+type);
				if(type.equals("1")) mappingStr="gotoCashJiefuPage";
				if(type.equals("2")) mappingStr="gotoReturnedPage";
				if(type.equals("3")) mappingStr="gotoGuaShiPage";
				if(type.equals("4")) mappingStr="gotoGuaShiWeiHuPage";
				if(type.equals("5")) mappingStr="gotoJieGuaPage";
				request.setAttribute("type", type);
			}
			return mapping.findForward(mappingStr);
		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
	}
}
