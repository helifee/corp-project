package com.cnaps.hvps.action.cashier;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bancstone.action.BaseAction;
import com.bancstone.common.exception.PicpMessageException;
import com.cnaps.coreservices.CommonXMLEntity;
import com.cnaps.coreservices.TransCodeEntity;
import com.cnaps.coreservices.TransServices;
import com.cnaps.hvps.form.draft.GuashiForm;
import com.cnaps.hvps.form.transfer.PersonCrashSpanBankExchangeForm;

public class CashGuashiAction extends BaseAction {
	
	public ActionForward sendMessage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		PersonCrashSpanBankExchangeForm voform = (PersonCrashSpanBankExchangeForm)form;
		
		try{
		String transactionid = TransCodeEntity.BEPS_CASHIER_GUASHI;//功能代码
		commSetToXML(voform,request,transactionid);
		//处理组装报文，发送解析
		TransServices transServices = (TransServices) this.getBean("transServices");
		CommonXMLEntity commonXMLEntity = null;
			commonXMLEntity = transServices.transProcess(voform, TransCodeEntity.BEPS_CASHIER_GUASHI,
					"transaction", "");
		
		// 发送交易报文 并解析得到回应的信息
		String reslutmessage = "";// 处理信息
		if (!commonXMLEntity.getProcessCode().equals("000000")) {
			throw new PicpMessageException("错误码："
					+ commonXMLEntity.getProcessCode() + "错误信息："
					+ commonXMLEntity.getProcessDes());
		} else {
			reslutmessage = "处理成功码：" + commonXMLEntity.getProcessCode()
					+ "银行本票申请挂失业务成功！";
		}

		return toSuccessPage(mapping, request, reslutmessage,voform.getPmtGrpId(),"","");


	} catch (Exception e) {
		e.printStackTrace();
		return toFailedPage(mapping, request, e.getMessage());
	}
		
	}
	public ActionForward sendMessagejiegua(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		PersonCrashSpanBankExchangeForm voform = (PersonCrashSpanBankExchangeForm)form;
		
		try{
		String transactionid = TransCodeEntity.BEPS_CASHIER_JIEGUA;//功能代码
		commSetToXML(voform,request,transactionid);
		//处理组装报文，发送解析
		TransServices transServices = (TransServices) this.getBean("transServices");
		CommonXMLEntity commonXMLEntity = null;
			commonXMLEntity = transServices.transProcess(voform, TransCodeEntity.BEPS_CASHIER_JIEGUA,
					"transaction", "");
		
		// 发送交易报文 并解析得到回应的信息
		String reslutmessage = "";// 处理信息
		if (!commonXMLEntity.getProcessCode().equals("000000")) {
			throw new PicpMessageException("错误码："
					+ commonXMLEntity.getProcessCode() + "错误信息："
					+ commonXMLEntity.getProcessDes());
		} else {
			reslutmessage = "处理成功码：" + commonXMLEntity.getProcessCode()
					+ "银行本票申请将解挂业务成功！";
		}

		return toSuccessPage(mapping, request, reslutmessage,voform.getPmtGrpId(),"","");


	} catch (Exception e) {
		e.printStackTrace();
		return toFailedPage(mapping, request, e.getMessage());
	}
		
	}
	
	public ActionForward sendProtect(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		PersonCrashSpanBankExchangeForm voform = (PersonCrashSpanBankExchangeForm)form;
		
		try{
		String transactionid = TransCodeEntity.BEPS_CASHIER_GUASHIPRODCT;//功能代码
		commSetToXML(voform,request,transactionid);
		//处理组装报文，发送解析
		TransServices transServices = (TransServices) this.getBean("transServices");
		CommonXMLEntity commonXMLEntity = null;
			commonXMLEntity = transServices.transProcess(voform, TransCodeEntity.BEPS_CASHIER_GUASHIPRODCT,
					"transaction", "");
		
		// 发送交易报文 并解析得到回应的信息
		String reslutmessage = "";// 处理信息
		if (!commonXMLEntity.getProcessCode().equals("000000")) {
			throw new PicpMessageException("错误码："
					+ commonXMLEntity.getProcessCode() + "错误信息："
					+ commonXMLEntity.getProcessDes());
		} else {
			reslutmessage = "处理成功码：" + commonXMLEntity.getProcessCode()
					+ "银行本票申请挂失业务成功！";
		}

		return toSuccessPage(mapping, request, reslutmessage,voform.getPmtGrpId(),"","");


	} catch (Exception e) {
		e.printStackTrace();
		return toFailedPage(mapping, request, e.getMessage());
	}
		
	}
}
