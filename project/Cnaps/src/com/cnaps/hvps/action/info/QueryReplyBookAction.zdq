package com.cnaps.hvps.action.info;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bancstone.action.BaseAction;
import com.bancstone.common.exception.PicpMessageException;
import com.cnaps.coreservices.CommonXMLEntity;
import com.cnaps.coreservices.TransCodeEntity;
import com.cnaps.coreservices.TransServices;
import com.cnaps.hvps.form.info.QueryreplybookForm;
import com.cnaps.hvps.persistence.info.Queryreplybook;

public class QueryReplyBookAction extends BaseAction{


	
	/**
	 * 查复书录入
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward sendMsg(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try{
			String business = request.getParameter("business");  // 标识 HVPS、BEPS、IBPS ……
			
			QueryreplybookForm voform = (QueryreplybookForm) form;
			
			//报文设置
			String transactionid = TransCodeEntity.QUERYREPLYBOOKAPP;//功能代码
			commSetToXML(voform,request,transactionid);
			
			TransServices transServices = (TransServices)this.getBean("transServices");
			CommonXMLEntity  commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(),"systemcontrols", 
					"");
			if(!commonXMLEntity.getProcessCode().equals("000000"))
			{
				throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
			}
			return toSuccessPage(mapping,request,"发送成功！");

		} catch (Exception e) {
			e.printStackTrace(); 
			return toFailedPage(mapping, request,e.getMessage());
		}
	}
	
	// 从菜单直接调整页面
	public ActionForward gotoPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try{
			String business = request.getParameter("business");  // 标识 HVPS、BEPS、IBPS ……			
			request.setAttribute("business",business);
			return mapping.findForward("input");
		} catch (Exception e) {
			e.printStackTrace(); 
			return toFailedPage(mapping, request,e.getMessage());
		}
	}
	
	// 查复书报文 查询
	public ActionForward querysendMsg(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try{
			String direction = request.getParameter("direction");
			QueryreplybookForm voform = (QueryreplybookForm) form;
			//报文头设置

			String transactionid = TransCodeEntity.QUERYCD;//功能代码
			commSetToXML(voform,request,transactionid);
			//查询代码
			voform.setQueryCd(TransCodeEntity.QUERYREPLYBOOKQ);
			//分页设置
			this.setFenYe(voform);
			//查询条件设置
			Queryreplybook hpo = voform.getPo();
			if(!"".equals(hpo.getMsgid()) && hpo.getMsgid() != null){
				voform.getConditions().add("msgid:"+hpo.getMsgid());
			}
			if(!"".equals(hpo.getWorkdate()) && hpo.getWorkdate() != null){
				voform.getConditions().add("workdate:"+hpo.getWorkdate());
			}
			if(!"".equals(hpo.getSystemCd()) && hpo.getSystemCd() != null){
				voform.getConditions().add("systemCd:"+hpo.getSystemCd());
			}
			if(!"".equals(hpo.getDirection()) && hpo.getDirection() != null){
				voform.getConditions().add("direction:"+hpo.getDirection());
			}
			voform.getConditions().add("direction:"+direction);
			//报文体组装发送
			TransServices transServices = (TransServices)this.getBean("transServices");
			CommonXMLEntity  commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(),"systemcontrols",voform.getQueryCd());
			if(!commonXMLEntity.getProcessCode().equals("000000")){
				throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
			}
			
			//设置分页信息。记录总条数
			if(commonXMLEntity.getRecordcount() == null){
				voform.setTotalSize(0);
			}else{
				voform.setTotalSize(Integer.parseInt(commonXMLEntity.getRecordcount()));
			}
		    this.setQueryPageValue(voform,true);
		    
			List<QueryreplybookForm>  List = commonXMLEntity.getResults();
			this.setPageInfo(request,voform);
			request.setAttribute("condition", hpo);
			request.setAttribute("direction", direction);//来往标识
			this.setObjectToRequest(request, "queryList",List);
			return mapping.findForward("queryList");

		} catch (Exception e) {
			e.printStackTrace(); 
			return toFailedPage(mapping, request,e.getMessage());
		}
	}
	
	// 明细浏览
	public ActionForward querysendMsgdetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try{
			String business = request.getParameter("business");  // 标识 HVPS、BEPS、IBPS ……
			
			QueryreplybookForm voform = (QueryreplybookForm) form;
			
			String transactionid = TransCodeEntity.QUERYCD;//功能代码
			commSetToXML(voform,request,transactionid);
			voform.setQueryCd(TransCodeEntity.QUERYREPLYBOOKQ);
			this.setFenYe(voform);
			
			// 查询明细条件
			String detailid = request.getParameter("detailid");
			voform.getConditions().add("id:"+detailid);
			
			TransServices transServices = (TransServices)this.getBean("transServices");
			CommonXMLEntity  commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(),"systemcontrols",voform.getQueryCd());
			if(!commonXMLEntity.getProcessCode().equals("000000")){
				throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
			}
			
			List<Queryreplybook>  list = commonXMLEntity.getResults();	
			Queryreplybook entity = new Queryreplybook();
			if(list.size()>0){
				entity = list.get(0);
			}
			request.setAttribute("po", entity);
			request.setAttribute("cnaps2jydm","1510931501");
			return mapping.findForward("detailInfo");

		} catch (Exception e) {
			e.printStackTrace(); 
			return toFailedPage(mapping, request,e.getMessage());
		}
	}
}
