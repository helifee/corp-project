/**
 * 
 */
package com.cnaps.hvps.action.transfer;

import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;

import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bancstone.action.BaseAction;
import com.bancstone.common.exception.PicpMessageException;
import com.bancstone.hibernate.systemManage.Systemusersmanage;
import com.bancstone.service.systemManage.impl.CommonServices;
import com.cnaps.coreservices.CommonXMLEntity;
import com.cnaps.coreservices.TransCodeEntity;
import com.cnaps.coreservices.TransServices;

import com.cnaps.hvps.form.transfer.RegularCreditForm;
import com.cnaps.hvps.form.transfer.RegularDebitForm;
import com.cnaps.hvps.persistence.messages.Hvpspartyinfo;
import com.cnaps.hvps.persistence.transfer.RegularCreditPersonDetail;
import com.cnaps.hvps.persistence.transfer.RegularDebitdetails;

/**
 * @包名   com.cnaps.hvps.action.transfer
 * @文件名 RegularDebitChildrenAction.java
 * @作者   zcx
 * @创建日期 Jul 26, 2011
 * @版本 V 1.0
 */
public class RegularDebitChildrenAction extends BaseAction {

	
	public List createPayerList(RegularDebitForm voform,String id,
			String workdate,InputStream is,String filetype,CommonServices commonService)
		throws PicpMessageException{
		List<RegularDebitdetails> list = new ArrayList<RegularDebitdetails>();
		
		jxl.Workbook rwb;
		try {
			rwb = Workbook.getWorkbook(is);
		
			Sheet rs = rwb.getSheet(0);
			
			Cell c11 = rs.getCell(1, 0);//列 ,行,参数循序 第一行第二列
			for (int rows = 1; rows < rs.getRows(); rows++) {
				RegularDebitdetails rdd = new RegularDebitdetails();
				rdd.setDbtracct(rs.getCell(0, rows).getContents());//付款人账号
				rdd.setDbtrnm(rs.getCell(1, rows).getContents());//付款人名称
				rdd.setDbtraddr(rs.getCell(2, rows).getContents());//付款人地址
				rdd.setDbtrbrnchnm(rs.getCell(3, rows).getContents());//付款行行名
				rdd.setDbtrbrnchid(rs.getCell(4, rows).getContents());//付款行行号
				rdd.setDbtrissuer(rs.getCell(5, rows).getContents());//付款人开户行行号
				rdd.setDbtrissuernm(rs.getCell(6, rows).getContents());//付款人开户行行名
				rdd.setDbtrmmbid(rs.getCell(7, rows).getContents());//付款清算行行号
				rdd.setDtlAmt(rs.getCell(8, rows).getContents());//单笔金额
				rdd.setAddtlinf(rs.getCell(9, rows).getContents());//附言
				rdd.setPmtagrmtnb(rs.getCell(10, rows).getContents());//扣款合同编号
				//产生端到端标识号号
				String msgId = commonService.getSEQMsgId(workdate);
				rdd.setEndToEndId(msgId);//端到端标识号
				rdd.setPrntid(id);//定期借记签发主表主键
				list.add(rdd);
			}
		}catch (Exception e) {
				e.printStackTrace();
				throw new PicpMessageException( "批量数据解析失败" + e.getMessage());
		} 
		return list;
	}
	public ActionForward batchSave(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		String prntId = request.getParameter("id");//定期借记签发主表主键
		String pmtkd = request.getParameter("pmtkd");//业务种类编码
		request.setAttribute("PrntId", prntId);
		request.setAttribute("pmtkd", pmtkd);

		RegularDebitForm voform = (RegularDebitForm) form;
		//报文头设置
		String transactionid = TransCodeEntity.RegularDebitAction_sendMsgcreatedetails_inpuchild;//功能代码
		commSetToXML(voform,request,transactionid);
		
		

		try {
			
			//产生端到端标识号号
			CommonServices commonService = (CommonServices) this.getBean("CommonServices");
			String workdate = request.getSession().getAttribute("workDate").toString();//工作日期
			
			InputStream is = voform.getZcxfiles().getInputStream();
			
			List<RegularDebitdetails> list = new ArrayList<RegularDebitdetails>();
			if (voform.getZcxfiles().getFileName().endsWith("xml")
					|| voform.getZcxfiles().getFileName().endsWith("XML")) {
				list = createPayerList(voform, prntId, workdate, is, "xml", commonService);
			} else if (voform.getZcxfiles().getFileName().endsWith("xls")){
				list = createPayerList(voform, prntId, workdate, is,"xls",commonService);
			}
			voform.getPo().setList(list);
			
			TransServices transServices = (TransServices) this.getBean("transServices");
			CommonXMLEntity commonXMLEntity = transServices.transProcess(voform, voform
					.getTransactionId(), "transaction", "");

			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}

			if (commonXMLEntity.getRecordcount() == null) {
				voform.setTotalSize(0);
			} else {
				voform.setTotalSize(Integer.parseInt(commonXMLEntity
						.getRecordcount()));
			}

			String forwardpath = "/RegularDebitChildrenAction.do?method=queryList";
			return new ActionForward(forwardpath);
		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}

		
	}

	public ActionForward queryList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		//界面查询条件
		RegularDebitForm voform = (RegularDebitForm) form;
		
		String prntId = request.getParameter("id");
		String pmtgrpid = request.getParameter("pmtgrpid");
		String pmtkd = request.getParameter("pmtkd");//业务种类编码
		request.setAttribute("PrntId", prntId);//主表主键
		request.setAttribute("pmtgrpid", pmtgrpid);//支付交易序号
		request.setAttribute("pmtkd", pmtkd);//业务种类
		
		//界面查询条件添加

		if (!StringUtils.isEmpty(voform.getPoDetails().getDtlAmt())
				&& !"".equals(voform.getPoDetails().getDtlAmt())) {
			voform.getConditions().add(
					"dtlAmt:" + voform.getPoDetails().getDtlAmt());//金额查询
		}
		if (!StringUtils.isEmpty(voform.getPoDetails().getDbtracct())
				&& !"".equals(voform.getPoDetails().getDbtracct())) {

			voform.getConditions().add(
					"dbtracct:" + voform.getPoDetails().getDbtracct());
		}
		voform.getConditions().add("PRNTID:" + prntId);
		String transactionid = TransCodeEntity.QUERYCD;// 功能代码
		commSetToXML(voform, request, transactionid);
		voform.setQueryCd(TransCodeEntity.RegularDebitAction_queryChild); 
		this.setFenYe(voform);
		CommonXMLEntity commonXMLEntity = null;
		try {

			TransServices transServices = (TransServices) this
					.getBean("transServices");
			commonXMLEntity = transServices.transProcess(voform, voform
					.getTransactionId(), "transaction", voform.getQueryCd());
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}

			if (commonXMLEntity.getRecordcount() == null) {
				voform.setTotalSize(0);
			} else {
				voform.setTotalSize(Integer.parseInt(commonXMLEntity
						.getRecordcount()));
			}

			this.setQueryPageValue(voform, true);
			List list = commonXMLEntity.getResults();

			this.setPageInfo(request, voform);
			this.setObjectToRequest(request, "queryList", list);
			
		} catch (Exception e) {
			e.printStackTrace();
			return mapping.findForward("queryList");
		}
		String checkflag = request.getParameter("checkflag");
		if ("checkflag".equals(checkflag)) {

			return mapping.findForward("checkflag");
		}

		return mapping.findForward("queryList");

	}

	public ActionForward personDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		//界面查询条件
		RegularDebitForm voform = (RegularDebitForm) form;
		String transactionid = TransCodeEntity.QUERYCD;// 功能代码
		commSetToXML(voform, request, transactionid);
		voform.setQueryCd(TransCodeEntity.RegularDebitAction_queryChild); // 查询付款人明细、查询需要修改的付款人信息
		String id = request.getParameter("id");
		voform.getConditions().add("id:" + id);

		this.setFenYe(voform);
		CommonXMLEntity commonXMLEntity = null;
		try {

			TransServices transServices = (TransServices) this
					.getBean("transServices");
			commonXMLEntity = transServices.transProcess(voform, voform
					.getTransactionId(), "transaction", voform.getQueryCd());
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}

			if (commonXMLEntity.getRecordcount() == null) {
				voform.setTotalSize(0);
			} else {
				voform.setTotalSize(Integer.parseInt(commonXMLEntity
						.getRecordcount()));
			}

			this.setQueryPageValue(voform, true);
			this.setPageInfo(request, voform);
			List<RegularDebitdetails> list = commonXMLEntity.getResults();
			RegularDebitdetails obj = new RegularDebitdetails();
			if(list.size()>0){
				obj = list.get(0);
			}
			request.setAttribute("po", obj);
			request.setAttribute("cnaps2jydm", "1510713306");
			request.setAttribute("poDetails",obj);

			

		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}

		String beforeModify = request.getParameter("beforeModify");
		if ("beforeModify".equals(beforeModify)) {

			return mapping.findForward("updatechild");

		}

		//return mapping.findForward("detailInfo");
		return mapping.findForward("payerinfo");

	}
	
	public ActionForward gotoDetailEdit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		//界面查询条件
		RegularDebitForm voform = (RegularDebitForm) form;
		String transactionid = TransCodeEntity.QUERYCD;// 功能代码
		commSetToXML(voform, request, transactionid);
		voform.setQueryCd(TransCodeEntity.RegularDebitAction_queryChild); // 查询付款人明细、查询需要修改的付款人信息
		String id = request.getParameter("id");
		String pmtkd = request.getParameter("pmtkd");//业务种类编码
		voform.getConditions().add("id:" + id);

		this.setFenYe(voform);
		CommonXMLEntity commonXMLEntity = null;
		try {

			TransServices transServices = (TransServices) this
					.getBean("transServices");
			commonXMLEntity = transServices.transProcess(voform, voform
					.getTransactionId(), "transaction", voform.getQueryCd());
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}

			if (commonXMLEntity.getRecordcount() == null) {
				voform.setTotalSize(0);
			} else {
				voform.setTotalSize(Integer.parseInt(commonXMLEntity
						.getRecordcount()));
			}

			this.setQueryPageValue(voform, true);
			this.setPageInfo(request, voform);
			List<RegularDebitdetails> list = commonXMLEntity.getResults();
			RegularDebitdetails obj = new RegularDebitdetails();
			if(list.size()>0){
				obj = list.get(0);
			}
			request.setAttribute("po", obj);
			request.setAttribute("cnaps2jydm", "1510713306");
			request.setAttribute("poDetails",obj);

			

		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}

		
		return mapping.findForward("modifypayer");

	}

	public ActionForward beForsaveChild(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		String PrntId = request.getParameter("id");
		String pmtgrpid = request.getParameter("pmtgrpid");
		String pmtkd = request.getParameter("pmtkd");
		request.setAttribute("PrntId", PrntId);//主表主键
		request.setAttribute("pmtgrpid", pmtgrpid);//支付交易组号
		request.setAttribute("pmtkd", pmtkd);//业务种类编码
		return mapping.findForward("addpayer");
	}

	public ActionForward saveChild(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		RegularDebitForm voform = (RegularDebitForm) form;
		String transactionid = TransCodeEntity.RegularDebitAction_sendMsgcreatedetails_inpuchild;// 功能代码
		commSetToXML(voform, request, transactionid);
		try {

			//报文标识号
			CommonServices commonService = (CommonServices) this
					.getBean("CommonServices");
			String workdate = request.getSession().getAttribute("workDate")
					.toString();//工作日期
			String msgId = commonService.getSEQMsgId(workdate);
			voform.getPoDetails().setEndToEndId(msgId);//端到端标识号
			
			TransServices transServices = (TransServices) this.getBean("transServices");

			List<RegularDebitdetails> list = new ArrayList<RegularDebitdetails>();

			list.add(voform.getPoDetails());

			voform.getPo().setList(list);

			CommonXMLEntity commonXMLEntity = transServices.transProcess(
					voform, voform.getTransactionId(), "transaction",
					"");

			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}


		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}

		return toSuccessPage(mapping, request, "收款人信息录入操作已成功！");

	}

	public ActionForward updateChild(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		RegularDebitForm voform = (RegularDebitForm) form;
		String transactionid = TransCodeEntity.RegularDebitAction_sendMsgInput_updatechild;// 功能代码
		commSetToXML(voform, request, transactionid);
		try {

//			commSetToXML(voform, "15107015", "BEPS"); // 付款人更新
//
//			String pmtgrpid = request.getParameter("pmtgrpid");
//			voform.setPmtGrpId(voform.getPoDetails().getPmtgrpid());//支付交易组号
//			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss");
//			voform.setSendDateTime(sdf.format(new Date()));//报文发送时间
//			voform.setBrnchCd("001");// 网点号
//			Systemusersmanage user = (Systemusersmanage) request.getSession()
//					.getAttribute("userentity");
//			voform.setOperTeller(user.getUsername());//操作员名字
//			voform.setTermId("001");
//			Hvpspartyinfo bankInfo = (Hvpspartyinfo) request.getSession()
//					.getAttribute("bankInfo");
//			voform.setOperBankCode(bankInfo.getBankcode());//发起行行号
//
			TransServices transServices = (TransServices) this
					.getBean("transServices");
			CommonXMLEntity commonXMLEntity = transServices.transProcess(
					voform, voform.getTransactionId(), "transaction",
					"");

			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}

			if (commonXMLEntity.getRecordcount() == null) {
				voform.setTotalSize(0);
			} else {
				voform.setTotalSize(Integer.parseInt(commonXMLEntity
						.getRecordcount()));
			}

			this.setPageInfo(request, voform);

		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}

		return toSuccessPage(mapping, request, "更新修改操作已成功！");
	}

	public ActionForward deleteChild(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		RegularDebitForm voform = (RegularDebitForm) form;
		String transactionid = TransCodeEntity.RegularDebitAction_sendMsgInput_delchild;// 功能代码
		commSetToXML(voform, request, transactionid);
		String id = request.getParameter("id");
		String PrntId = request.getParameter("PrntId");
		voform.getPoDetails().setId(id);
		voform.getPoDetails().setPrntid(PrntId);
		
		try {
			TransServices transServices = (TransServices) this
					.getBean("transServices");
			CommonXMLEntity commonXMLEntity = transServices.transProcess(
					voform, voform.getTransactionId(), "transaction",
					"");//"1510713308s"
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}


		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}

		return toSuccessPage(mapping, request, "删除操作已成功！");

	}

}
