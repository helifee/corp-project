/**
 * 
 */
package com.cnaps.hvps.action.transfer;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bancstone.action.BaseAction;
import com.bancstone.common.exception.PicpMessageException;
import com.bancstone.hibernate.systemManage.Systemusersmanage;
import com.bancstone.service.systemManage.impl.CommonServices;
import com.cnaps.coreservices.CommonXMLEntity;
import com.cnaps.coreservices.TransCodeEntity;
import com.cnaps.coreservices.TransServices;
import com.cnaps.hvps.form.collectionPayment.ActivePaymentForm;
import com.cnaps.hvps.form.collectionPayment.RealTimeCollectionPayForm;
import com.cnaps.hvps.form.transfer.RealAccountForm;
import com.cnaps.hvps.persistence.collectionPayment.BatchCustomers;
import com.cnaps.hvps.persistence.messages.Hvpspartyinfo;
import com.cnaps.hvps.persistence.transfer.RealAccount;

/**
 * @包名   com.cnaps.hvps.action.transfer
 * @文件名 RealAccountAction.java
 * @作者   zcx
 * @创建日期 Sep 9, 2011
 * @版本 V 1.0
 */
public class RealAccountAction extends BaseAction{
	
	
	public ActionForward  queryList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		 
		RealAccountForm voform = (RealAccountForm) form;
		RealAccount hpo = voform.getPo();
		 String id=request.getParameter("id");
		 
		 
		 
		 if (!StringUtils.isEmpty(id)&&!"".equals(id.trim())) 
			{
				
				voform.getConditions().add("id:"+id.trim());//
			}
			if (!StringUtils.isEmpty(hpo.getPmtGrpId() )&&!"".equals(hpo.getPmtGrpId().trim())) 
			{
				
				voform.getConditions().add("pmtgrpid:"+hpo.getPmtGrpId());//支付组号查询
			}
			
			
			if (!StringUtils.isEmpty(hpo.getCstmrAcctId())&&!"".equals(hpo.getCstmrAcctId().trim())) 
			{
				
				voform.getConditions().add("cstmracctid:"+hpo.getCstmrAcctId());// 
			}
			if (!StringUtils.isEmpty(hpo.getWorkDt())&&!"".equals(hpo.getWorkDt().trim())) 
			{
				
				voform.getConditions().add("workdt:"+hpo.getWorkDt());// 
			}
			

			 
		 
		 
		String business = request.getParameter("business");  // 标识 HVPS、BEPS、IBPS ……	
		commSetToXML(voform, TransCodeEntity.QUERYCD,business);
		
		//报文标识号
		CommonServices commonService = (CommonServices)this.getBean("CommonServices");
		String workdate=request.getSession().getAttribute("workDate").toString();//工作日期
		String  msgId= commonService.getSEQMsgId(workdate);
		voform.setMsgId(msgId);//报文标识号
		voform.setQueryCd("1510740102");//查询吗
	 
		this.setFenYe(voform);
		CommonXMLEntity commonXMLEntity=null;
			try {
		
				 	
				TransServices transServices = (TransServices)this.getBean("transServices");
			 	commonXMLEntity = transServices.transProcess(voform,  TransCodeEntity.QUERYCD,
		      			"transaction",voform.getQueryCd());//新版查询方法
				if(!commonXMLEntity.getProcessCode().equals("000000"))
				{
					throw new PicpMessageException("错误码：【"+commonXMLEntity.getProcessCode()+"】 错误信息：【"+commonXMLEntity.getProcessDes()+"】");
				}
			
			
			if(commonXMLEntity.getRecordcount() == null){
				voform.setTotalSize(0);
			}else{
				voform.setTotalSize(Integer.parseInt(commonXMLEntity.getRecordcount()));
			}
			
		    this.setQueryPageValue(voform,true);
			List<RealAccount> list = commonXMLEntity.getResults();  
			/*for(RealAccount ra:list){
				System.out.println(ra.getChckMd());
			}
			*/
			
			
			if(list!=null&&list.size()==1&&id!=null&&id.trim().equals(list.get(0).getId())){
			 	request.setAttribute("sap",  list.get(0));
			 	 
			 	return mapping.findForward("Detail");//跳转到明细页面

			}
			 	request.setAttribute("queryList",  list);
			 
			this.setPageInfo(request,voform);
		 		} catch ( Exception e) {
		 
			 e.printStackTrace();
				return mapping.findForward("queryList");
			}
		
			 
			  
		 		
		 
			 	
		return mapping.findForward("queryList");
	}
	
	
	
	
	
	
	
	public ActionForward saveRealAccount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		 
		 
		
		RealAccountForm pvpform = (RealAccountForm)form;
		 CommonXMLEntity commonXMLEntity;
		 SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss");
		 
		 pvpform.setBrnchCd("001");
		 Systemusersmanage user  =(Systemusersmanage) request.getSession().getAttribute("userentity");
		    pvpform.setOperTeller(user.getUsername());//操作员名字
		 pvpform.setTermId("001");
		 
		 pvpform.setSource("CNAPS2");
		 pvpform.setDestination("BEPS");
		 
			CommonServices commonService = (CommonServices)this.getBean("CommonServices");
			String workdate=request.getSession().getAttribute("workDate").toString();//工作日期
		  
			
		 pvpform.setSendDateTime(sdf.format(new Date()));
 	 	Hvpspartyinfo bankInfo =(Hvpspartyinfo)request.getSession().getAttribute("bankInfo");
			pvpform.setOperBankCode(bankInfo.getBankcode())	;//发起行行号
		    pvpform.setPmtGrpId(pvpform.getPo().getPmtGrpId());//支付交易组号
			 pvpform.getPo().setChckCdLen(pvpform.getPo().getChckCdVal().length()+"");
			 
			 pvpform.setTransactionId(TransCodeEntity.RealAccountAction_saveRealAccount);
			 
			pvpform.setQueryCd(TransCodeEntity.RealAccountAction_saveRealAccount);
	   String  reslutmessage="";	
   	  commSetToXML(pvpform,TransCodeEntity.RealAccountAction_saveRealAccount,"BEPS");
      	try {
      	  TransServices transServices = (TransServices)this.getBean("transServices");
   		
      	commonXMLEntity = transServices.transProcess(pvpform, TransCodeEntity.RealAccountAction_saveRealAccount,
      			"transaction",pvpform.getQueryCd()); 
		 
      		
      		if(!commonXMLEntity.getProcessCode().equals("000000"))
				{
					throw new PicpMessageException("错误码："+commonXMLEntity.getProcessCode()+"错误信息："+commonXMLEntity.getProcessDes());
				}else
				{
					 
						reslutmessage="处理成功码："+commonXMLEntity.getProcessCode()+"处理成功！";
				 
				}
      	 return toSuccessPage(mapping,request,reslutmessage+"您的支付交易组号是【"+pvpform.getPmtGrpId()+"】");
			} catch ( Exception e) {
				
				
				return toFailedPage(mapping, request,e.getMessage() );
			}
		}
}
