package com.cnaps.hvps.action.transfer;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bancstone.action.BaseAction;
import com.bancstone.common.exception.PicpMessageException;
import com.bancstone.hibernate.systemManage.Systemusersmanage;
import com.bancstone.service.systemManage.impl.CommonServices;
import com.cnaps.coreservices.CommonXMLEntity;
import com.cnaps.coreservices.TransCodeEntity;
import com.cnaps.coreservices.TransServices;
import com.cnaps.hvps.form.transfer.RegularCreditForm;
import com.cnaps.hvps.form.transfer.RegularDebitForm;
import com.cnaps.hvps.persistence.messages.Hvpspartyinfo;
import com.cnaps.hvps.persistence.transfer.RegularDebit;
import com.cnaps.hvps.persistence.transfer.RegularDebitdetails;

public class RegularDebitAction extends BaseAction {

	
	/**
	 * 生成支付组号和报文标识号 再进入录入页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */

	public ActionForward createMsgid(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		CommonServices commonService = (CommonServices) this
				.getBean("CommonServices");
		String workdate = request.getSession().getAttribute("workDate")
				.toString();// 工作日期
		String msgId = commonService.getSEQTransId(workdate);
		
		request.setAttribute("paymentno", msgId);//存储报文标识号
		return mapping.findForward("inputdetail");

	}
	
	/**
	 * 定期借记业务明细信息签发
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward inputParent(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		RegularDebitForm voform = (RegularDebitForm) form;
		// 报文头
		
		String transactionid = TransCodeEntity.RegularDebitAction_sendMsgcreatedetails_add;// 功能代码
		commSetToXML(voform, request, transactionid);
		voform.setPmtGrpId(voform.getPo().getPmtgrpid());// 支付交易组号
		
		try {

			TransServices transServices = (TransServices) this
					.getBean("transServices");
			CommonXMLEntity commonXMLEntity = transServices
					.transProcess(
							voform,
							TransCodeEntity.RegularDebitAction_sendMsgcreatedetails_add,
							"transaction",
							"");
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}
		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
		return toSuccessPage(mapping, request, "支付交易组号为【"
				+voform.getPo().getPmtgrpid() + "】");
	}

	/**
	 * 定期借记明细添加列表查询
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward queryList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		RegularDebitForm voform = (RegularDebitForm) form;
		// 报文头
		String transactionid = TransCodeEntity.QUERYCD;// 功能代码
		commSetToXML(voform, request, transactionid);

		voform.setQueryCd(TransCodeEntity.RegularDebitAction_queryParent);
		this.setFenYe(voform);
		
		String pmtgrpid = request.getParameter("pmtgrpid");//支付交易组号
		String id = request.getParameter("id");//
		RegularDebit hpo = voform.getPo();

		if (!"".equals(hpo.getPmtgrpid()) && hpo.getPmtgrpid() != null) {
			voform.getConditions().add("PmtGrpId:" + hpo.getPmtgrpid());
		}
		if (!"".equals(hpo.getCdtracct()) && hpo.getCdtracct() != null) {
			voform.getConditions().add("CdtrAcct:" + hpo.getCdtracct());
		}
		if (!"".equals(hpo.getProposercstmrid())
				&& hpo.getProposercstmrid() != null) {
			voform.getConditions().add(
					"ProposerCstmrId:" + hpo.getProposercstmrid());
		}

		if (pmtgrpid != null) {
			voform.getConditions().add("PmtGrpId:" + pmtgrpid); // 明细查看
		}
		
		try {
			
			
			TransServices transServices = (TransServices) this
					.getBean("transServices");
			CommonXMLEntity commonXMLEntity = transServices.transProcess(
					voform, voform.getTransactionId(), "transaction", voform
							.getQueryCd());
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}

			if (commonXMLEntity.getRecordcount() == null) {
				voform.setTotalSize(0);
			} else {
				voform.setTotalSize(Integer.parseInt(commonXMLEntity
						.getRecordcount()));
			}
			this.setQueryPageValue(voform, true);
			this.setPageInfo(request, voform);
			
			List<RegularDebit> list = commonXMLEntity.getResults();

			if (id != null && list != null && list.size() > 0
					&& id.equals(list.get(0).getId())) {
				request.setAttribute("sap", list.get(0));
				return mapping.findForward("debitDetail");// 跳转到明细页面
			}
			this.setObjectToRequest(request, "RegularDebit", list);
			
			String ispop = request.getParameter("ispop");
			request.setAttribute("ispop", ispop);
			return mapping.findForward("RegularDebit");

		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}

	}

	
	/**
	 * 定期借记明细添加列表查询
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward queryDetaisById(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		RegularDebitForm voform = (RegularDebitForm) form;
		// 报文头
		String transactionid = TransCodeEntity.QUERYCD;// 功能代码
		commSetToXML(voform, request, transactionid);

		voform.setQueryCd(TransCodeEntity.RegularDebitAction_queryParent);
		this.setFenYe(voform);
		
		String pmtgrpid = request.getParameter("pmtgrpid");//支付交易组号
		String id = request.getParameter("id");//
		RegularDebit hpo = voform.getPo();

		if (pmtgrpid != null) {
			voform.getConditions().add("PmtGrpId:" + pmtgrpid); // 明细查看
		}
		voform.getConditions().add("ID:" + id);// 按主键查询
		try {
			
			TransServices transServices = (TransServices) this
					.getBean("transServices");
			CommonXMLEntity commonXMLEntity = transServices.transProcess(
					voform, voform.getTransactionId(), "transaction", voform
							.getQueryCd());
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}

			List<RegularDebit> list = commonXMLEntity.getResults();
			RegularDebit obj = new RegularDebit();
			if (list.size() > 0) {
				obj = (RegularDebit)list.get(0);
			}
			request.setAttribute("sap", obj);
			return mapping.findForward("debitDetail");

		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}

	}
	/**
	 * 定期借记父表列表查询
	 * 
	 */
	
	public ActionForward deleteDebit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		RegularDebitForm voform = (RegularDebitForm) form;
		// 报文头
		String transactionid = TransCodeEntity.RegularDebitAction_sendMsgcreatedetails_del;// 功能代码
		commSetToXML(voform, request, transactionid);
		String id = request.getParameter("id");
		voform.getPo().setId(id);
		try {

			TransServices transServices = (TransServices) this
					.getBean("transServices");
			CommonXMLEntity commonXMLEntity = transServices
					.transProcess(
							voform,
							voform.getTransactionId(),
							"transaction","");
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}
			return toSuccessPage(mapping, request, "操作已成功！");
		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}

	}

	/*
	 * 
	 * 下面的方法已经被替换掉
	 */

	// ///////////////////////////////////////

	// ////////////////////////////////////////////////////////////
	/**
	 * 从菜单直接跳转页面
	 * 
	 */
	public ActionForward gotoPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try {
			String syspara = request.getParameter("syspara");
			request.setAttribute("syspara", syspara);
			saveToken(request);
			if (syspara.equals("fkradd")) {
				String prntid = request.getParameter("prntid");
				request.setAttribute("prntid", prntid);
				String pmtgrpid = request.getParameter("pmtgrpid");
				request.setAttribute("pmtgrpid", pmtgrpid);
				return mapping.findForward("RegularDebitPayer");
			} else if (syspara.equals("addmxjl")) {
				return mapping.findForward("RegularDebitMsg");
			} else if (syspara.equals("delmxjl")) {
				String id = request.getParameter("id");
				request.setAttribute("id", id);
				return mapping.findForward("commpage");
			} else if (syspara.equals("fkrdelete")) {
				String id = request.getParameter("id");
				request.setAttribute("id", id);
				String PrntId = request.getParameter("PrntId");
				request.setAttribute("PrntId", PrntId);
				return mapping.findForward("commpage");
			} else if (syspara.equals("RegularDebitLedger")
					|| syspara.equals("RegularDebitTransfer")) {
				return mapping.findForward("RegularDebitLedger");
			} else {
				return mapping.findForward("inputSigned");
			}
		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
	}

	/**
	 * 定期借记 明细建立/付款人 查询、明细浏览、修改页面跳转
	 */
	public ActionForward sendMsgDebit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try {
			RegularDebitForm voform = (RegularDebitForm) form;

			String syspara = request.getParameter("syspara");

			commSetToXML(voform, TransCodeEntity.QUERYCD, "BEPS");
			voform.setMsgId("123");// 报文标识号
			this.setFenYe(voform);

			if (syspara.equals("cx")) {
				voform.setQueryCd("1510713319"); // 明细建立查询"1510713305"
				RegularDebit hpo = voform.getPo();
				if (!"".equals(hpo.getPmtgrpid()) && hpo.getPmtgrpid() != null) {
					voform.getConditions().add("PmtGrpId:" + hpo.getPmtgrpid());
				}
				if (!"".equals(hpo.getCdtracct()) && hpo.getCdtracct() != null) {
					voform.getConditions().add("CdtrAcct:" + hpo.getCdtracct());
				}
				if (!"".equals(hpo.getAclmtamt()) && hpo.getAclmtamt() != null) {
					voform.getConditions().add("AclmtAmt:" + hpo.getAclmtamt());
				}
			} else if (syspara.equals("cxzfjyzh")) {
				voform
						.setQueryCd(TransCodeEntity.RegularDebitAction_queryParent);// voform.setQueryCd("1510713305");
																					// //
																					// 根据支付交易组号查询明细建立信息
				String pmtgrpid = request.getParameter("pmtgrpid");
				voform.getConditions().add("PmtGrpId:" + pmtgrpid);
			} else if (syspara.equals("fkrxx")) {
				voform.setQueryCd("1510713306"); // 查询付款人信息
				String PrntId = request.getParameter("id");
				String pmtgrpid = request.getParameter("pmtgrpid");
				if (!"".equals(PrntId) && PrntId != null) {
					voform.getConditions().add("PrntId:" + PrntId);
				}
				if (!"".equals(pmtgrpid) && pmtgrpid != null) {
					voform.getConditions().add("PmtGrpId:" + pmtgrpid);
				}
			} else if (syspara.equals("fkrmx") || syspara.equals("fkrmod")) {
				voform.setQueryCd("1510713306"); // 查询付款人明细、查询需要修改的付款人信息
				String id = request.getParameter("id");
				voform.getConditions().add("id:" + id);
			} else {
				voform
						.setQueryCd(TransCodeEntity.RegularDebitAction_queryParent);// voform.setQueryCd("1510713305");
																					// //
																					// modifymxjl
																					// 查询需要修改的明细建立信息
				String pmtgrpid = request.getParameter("pmtgrpid");
				voform.getConditions().add("PmtGrpId:" + pmtgrpid);
			}

			TransServices transServices = (TransServices) this
					.getBean("transServices");
			CommonXMLEntity commonXMLEntity = transServices.transProcess(
					voform, voform.getTransactionId(), "transaction", voform
							.getQueryCd());
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}

			if (commonXMLEntity.getRecordcount() == null) {
				voform.setTotalSize(0);
			} else {
				voform.setTotalSize(Integer.parseInt(commonXMLEntity
						.getRecordcount()));
			}

			if (syspara.equals("fkrxx")) {
				List<RegularDebitdetails> List = commonXMLEntity.getResults();
				this.setQueryPageValue(voform, true);
				this.setPageInfo(request, voform);
				String PrntId = request.getParameter("id");
				request.setAttribute("PrntId", PrntId);
				String pmtgrpid = request.getParameter("pmtgrpid");
				request.setAttribute("pmtgrpid", pmtgrpid);
				String fuhechax = request.getParameter("fuhechax"); // 供复核时，查询付款人信息
				request.setAttribute("fuhechax", fuhechax);
				request.setAttribute("RegularDebitdetails", List);
				return mapping.findForward("RegularDebitdetails");
			} else if (syspara.equals("cx")) {
				List<RegularDebit> List = commonXMLEntity.getResults();
				this.setQueryPageValue(voform, true);
				this.setPageInfo(request, voform);
				String ispop = request.getParameter("ispop");
				request.setAttribute("ispop", ispop);
				this.setObjectToRequest(request, "RegularDebit", List);
				return mapping.findForward("RegularDebit");
			} else if (syspara.equals("fkrmx")) {
				List<RegularDebitdetails> List = commonXMLEntity.getResults();
				request.setAttribute("po", List.get(0));
				request.setAttribute("cnaps2jydm", "1510713306");
				return mapping.findForward("detailInfo");
			} else if (syspara.equals("fkrmod")) {
				List<RegularDebitdetails> List = commonXMLEntity.getResults();
				request.setAttribute("poDetails", List.get(0));
				request.setAttribute("syspara", syspara);
				saveToken(request);
				return mapping.findForward("RegularDebitPayer");
			} else if (syspara.equals("cxzfjyzh")) {
				List<RegularDebit> List = commonXMLEntity.getResults();
				request.setAttribute("po", List);

				return mapping.findForward("RegularDebitSomething");
			} else {
				List<RegularDebit> List = commonXMLEntity.getResults(); // modifymxjl
				request.setAttribute("po", List.get(0));
				request.setAttribute("syspara", syspara);
				return mapping.findForward("RegularDebitMsg");
			}

		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
	}

	/**
	 * 定期借记 付款人信息修改、录入、删除
	 * 
	 */
	public ActionForward sendMsgInput(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try {
			RegularDebitForm voform = (RegularDebitForm) form;
			String syspara = request.getParameter("syspara");

			if (syspara.equals("fkrmod")) {
				commSetToXML(
						voform,
						TransCodeEntity.RegularDebitAction_sendMsgInput_updatechild,
						"BEPS"); // 付款人修改1510713307
				String pmtgrpid = request.getParameter("pmtgrpid");
				voform.setPmtGrpId(pmtgrpid);// 支付交易组号
				SimpleDateFormat sdf = new SimpleDateFormat(
						"yyyy-MM-dd'T'hh:mm:ss");
				voform.setSendDateTime(sdf.format(new Date()));// 报文发送时间
				voform.setBrnchCd("001");// 网点号
				Systemusersmanage user = (Systemusersmanage) request
						.getSession().getAttribute("userentity");
				voform.setOperTeller(user.getUsername());// 操作员名字
				voform.setTermId("001");
				Hvpspartyinfo bankInfo = (Hvpspartyinfo) request.getSession()
						.getAttribute("bankInfo");
				voform.setOperBankCode(bankInfo.getBankcode());// 发起行行号

				TransServices transServices = (TransServices) this
						.getBean("transServices");
				CommonXMLEntity commonXMLEntity = transServices
						.transProcess(
								voform,
								voform.getTransactionId(),
								"transaction",
								TransCodeEntity.RegularDebitAction_sendMsgInput_updatechild);// "1510713307"
				if (!commonXMLEntity.getProcessCode().equals("000000")) {
					throw new PicpMessageException("错误码：["
							+ commonXMLEntity.getProcessCode() + "] 错误信息：["
							+ commonXMLEntity.getProcessDes() + "]");
				}

			} else if (syspara.equals("delete")) {
				commSetToXML(voform, "1510713308", "BEPS"); // 付款人删除
				String id = request.getParameter("id");
				voform.getPoDetails().setId(id);
				String PrntId = request.getParameter("PrntId");
				voform.getPoDetails().setPrntid(PrntId);
				commSetToXML(
						voform,
						TransCodeEntity.RegularDebitAction_sendMsgInput_delchild,
						"BEPS"); // 付款人修改1510713307
				String pmtgrpid = request.getParameter("pmtgrpid");
				voform.setPmtGrpId(pmtgrpid);// 支付交易组号
				SimpleDateFormat sdf = new SimpleDateFormat(
						"yyyy-MM-dd'T'hh:mm:ss");
				voform.setSendDateTime(sdf.format(new Date()));// 报文发送时间
				voform.setBrnchCd("001");// 网点号
				Systemusersmanage user = (Systemusersmanage) request
						.getSession().getAttribute("userentity");
				voform.setOperTeller(user.getUsername());// 操作员名字
				voform.setTermId("001");
				Hvpspartyinfo bankInfo = (Hvpspartyinfo) request.getSession()
						.getAttribute("bankInfo");
				voform.setOperBankCode(bankInfo.getBankcode());// 发起行行号

				TransServices transServices = (TransServices) this
						.getBean("transServices");
				CommonXMLEntity commonXMLEntity = transServices
						.transProcess(
								voform,
								voform.getTransactionId(),
								"transaction",
								TransCodeEntity.RegularDebitAction_sendMsgInput_delchild);// "1510713308s"
				if (!commonXMLEntity.getProcessCode().equals("000000")) {
					throw new PicpMessageException("错误码：["
							+ commonXMLEntity.getProcessCode() + "] 错误信息：["
							+ commonXMLEntity.getProcessDes() + "]");
				}
			} else {
				commSetToXML(
						voform,
						TransCodeEntity.RegularDebitAction_sendMsgcreatedetails_inpuchild,
						"BEPS"); // 付款人录入"1510713309"
				String pmtgrpid = request.getParameter("pmtgrpid");
				voform.setPmtGrpId(pmtgrpid);// 支付交易组号
				SimpleDateFormat sdf = new SimpleDateFormat(
						"yyyy-MM-dd'T'hh:mm:ss");
				voform.setSendDateTime(sdf.format(new Date()));// 报文发送时间
				voform.setBrnchCd("001");// 网点号
				Systemusersmanage user = (Systemusersmanage) request
						.getSession().getAttribute("userentity");
				voform.setOperTeller(user.getUsername());// 操作员名字
				voform.setTermId("001");
				Hvpspartyinfo bankInfo = (Hvpspartyinfo) request.getSession()
						.getAttribute("bankInfo");
				voform.setOperBankCode(bankInfo.getBankcode());// 发起行行号

				// voform.getPo().getAgncycharge()

				voform.getPoDetails().setEndtoendid("111");

				TransServices transServices = (TransServices) this
						.getBean("transServices");
				CommonXMLEntity commonXMLEntity = transServices
						.transProcess(
								voform,
								voform.getTransactionId(),
								"transaction",
								TransCodeEntity.RegularDebitAction_sendMsgcreatedetails_inpuchild);// "1510713307"
				if (!commonXMLEntity.getProcessCode().equals("000000")) {
					throw new PicpMessageException("错误码：["
							+ commonXMLEntity.getProcessCode() + "] 错误信息：["
							+ commonXMLEntity.getProcessDes() + "]");
				}
			}

			return toSuccessPage(mapping, request, "操作已成功！");

		} catch (Exception e) {

			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
	}

	/**
	 * 定期借记 明细建立 录入、删除、修改 定期借记-总账 定期借记-转账 录入
	 * 
	 */
	public ActionForward sendMsgcreatedetails(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		try {

			RegularDebitForm voform = (RegularDebitForm) form;
			String syspara = request.getParameter("syspara");

			if (syspara.equals("addmxjl")) {
				commSetToXML(
						voform,
						TransCodeEntity.RegularDebitAction_sendMsgcreatedetails_add,
						"BEPS"); // 明细建立录入"1510713310"
				CommonServices commonService = (CommonServices) this
						.getBean("CommonServices");
				String workdate = request.getSession().getAttribute("workDate")
						.toString();// 工作日期
				String pmtgrpid = commonService.getSEQMsgId(workdate);

				voform.setPmtGrpId(pmtgrpid);// 支付交易组号
				SimpleDateFormat sdf = new SimpleDateFormat(
						"yyyy-MM-dd'T'hh:mm:ss");
				voform.setSendDateTime(sdf.format(new Date()));// 报文发送时间
				voform.setBrnchCd("001");// 网点号
				Systemusersmanage user = (Systemusersmanage) request
						.getSession().getAttribute("userentity");
				voform.setOperTeller(user.getUsername());// 操作员名字
				voform.setTermId("001");
				Hvpspartyinfo bankInfo = (Hvpspartyinfo) request.getSession()
						.getAttribute("bankInfo");
				voform.setOperBankCode(bankInfo.getBankcode());// 发起行行号
				TransServices transServices = (TransServices) this
						.getBean("transServices");
				CommonXMLEntity commonXMLEntity = transServices
						.transProcess(
								voform,
								TransCodeEntity.RegularDebitAction_sendMsgcreatedetails_add,
								"transaction",
								TransCodeEntity.RegularDebitAction_sendMsgcreatedetails_add);
				if (!commonXMLEntity.getProcessCode().equals("000000")) {
					throw new PicpMessageException("错误码：["
							+ commonXMLEntity.getProcessCode() + "] 错误信息：["
							+ commonXMLEntity.getProcessDes() + "]");
				}
			} else if (syspara.equals("input")) {
				commSetToXML(
						voform,
						TransCodeEntity.RegularDebitAction_sendMsgcreatedetails_turn,
						"BEPS"); // 定期借记-总账、定期借记-转账 录入"1510713311"
				voform.getPo().setSystemCd("beps");
				voform.setPmtGrpId(voform.getPo().getPmtgrpid());// 支付交易组号
				SimpleDateFormat sdf = new SimpleDateFormat(
						"yyyy-MM-dd'T'hh:mm:ss");
				voform.setSendDateTime(sdf.format(new Date()));// 报文发送时间
				voform.setBrnchCd("001");// 网点号
				Systemusersmanage user = (Systemusersmanage) request
						.getSession().getAttribute("userentity");
				voform.setOperTeller(user.getUsername());// 操作员名字
				voform.setTermId("001");
				Hvpspartyinfo bankInfo = (Hvpspartyinfo) request.getSession()
						.getAttribute("bankInfo");
				voform.setOperBankCode(bankInfo.getBankcode());// 发起行行号
				TransServices transServices = (TransServices) this
						.getBean("transServices");
				CommonXMLEntity commonXMLEntity = transServices
						.transProcess(
								voform,
								voform.getTransactionId(),
								"transaction",
								TransCodeEntity.RegularDebitAction_sendMsgcreatedetails_turn);
				if (!commonXMLEntity.getProcessCode().equals("000000")) {
					throw new PicpMessageException("错误码：["
							+ commonXMLEntity.getProcessCode() + "] 错误信息：["
							+ commonXMLEntity.getProcessDes() + "]");
				}

			} else if (syspara.equals("delete")) {
				commSetToXML(
						voform,
						TransCodeEntity.RegularDebitAction_sendMsgcreatedetails_del,
						"BEPS"); // 明细建立删除"1510713312"
				String id = request.getParameter("id");
				voform.getPo().setId(id);

				TransServices transServices = (TransServices) this
						.getBean("transServices");
				CommonXMLEntity commonXMLEntity = transServices
						.transProcess(
								voform,
								voform.getTransactionId(),
								"transaction",
								TransCodeEntity.RegularDebitAction_sendMsgcreatedetails_del);
				if (!commonXMLEntity.getProcessCode().equals("000000")) {
					throw new PicpMessageException("错误码：["
							+ commonXMLEntity.getProcessCode() + "] 错误信息：["
							+ commonXMLEntity.getProcessDes() + "]");
				}

			} else {
				commSetToXML(voform, "1510713313", "BEPS"); // 明细建立修改 modifymxjl
			}

			//saveToken(request);
			return toSuccessPage(mapping, request, "操作已成功！");
		} catch (Exception e) {

			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
	}
}
