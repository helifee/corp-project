package com.cnaps.hvps.action.transfer;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bancstone.action.BaseAction;
import com.bancstone.common.exception.PicpMessageException;
import com.cnaps.coreservices.CommonXMLEntity;
import com.cnaps.coreservices.TransCodeEntity;
import com.cnaps.coreservices.TransServices;
import com.cnaps.hvps.form.transfer.InstantTransferForm;
import com.cnaps.hvps.persistence.transfer.InstantTransfer;

@SuppressWarnings("unchecked")
public class InstantTransferAction extends BaseAction{
	public ActionForward querySendxml(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try{
			InstantTransferForm voform = (InstantTransferForm) form;
			//报文头设置

			String transactionid = TransCodeEntity.QUERYCD;//功能代码
			commSetToXML(voform,request,transactionid);
			//查询代码
			voform.setQueryCd(TransCodeEntity.InstantTransferAction_sendMsg_query);
			//分页设置
			this.setFenYe(voform);
			
			//查询条件设置
			// 支付交易组号开始值
			if (!StringUtils.isEmpty(voform.getStartid())) {
				voform.getFieldStart().add("TXID:" + voform.getStartid());
			}
			// 支付交易组号结束值
			if (!StringUtils.isEmpty(voform.getEndid())) {
				voform.getFieldEnd().add("TXID:" +voform.getEndid());
			}
			if(!StringUtils.isEmpty(voform.getPmttp())){
				voform.getConditions().add("PMTTPCLCTN:"+voform.getPmttp());
			}
			//startdate
			if(!StringUtils.isEmpty(voform.getStartdate())){
				voform.getFieldStart().add("WORKDT:"+voform.getStartdate());
			}
			if(!StringUtils.isEmpty(voform.getEnddate())){
				voform.getFieldEnd().add("WORKDT:"+voform.getEnddate());
			}
			if(!StringUtils.isEmpty(voform.getStartamount())){
				voform.getFieldStart().add("AMOUNT:"+voform.getStartamount());
			}
			if(!StringUtils.isEmpty(voform.getEndamount())){
				voform.getFieldEnd().add("AMOUNT:"+voform.getEndamount());
			}

			//报文体组装发送
			TransServices transServices = (TransServices)this.getBean("transServices");
			CommonXMLEntity  commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(),"transaction",voform.getQueryCd());
			if(!commonXMLEntity.getProcessCode().equals("000000")){
				throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
			}
			//设置分页信息。记录总条数
			if(commonXMLEntity.getRecordcount() == null){
				voform.setTotalSize(0);
			}else{
				voform.setTotalSize(Integer.parseInt(commonXMLEntity.getRecordcount()));
			}
		    setQueryPageValue(voform,true);
			List<InstantTransfer>  list = commonXMLEntity.getResults();
			this.setPageInfo(request,voform);
			this.setObjectToRequest(request, "queryList",list);
			return mapping.findForward("queryList");

		} catch (Exception e) {
			e.printStackTrace(); 
			return toFailedPage(mapping, request,e.getMessage());
		}
	}
	public ActionForward queryDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try{
			InstantTransferForm voform = (InstantTransferForm) form;
			//报文头设置

			String transactionid = TransCodeEntity.QUERYCD;//功能代码
			commSetToXML(voform,request,transactionid);
			//查询代码
			voform.setQueryCd(TransCodeEntity.InstantTransferAction_sendMsg_query);
			//分页设置
			this.setFenYe(voform);
			
			//查询条件设置
			// 支付交易组号开始值
			if (!StringUtils.isEmpty(voform.getStartid())) {
				voform.getFieldStart().add("PMTGRPID:" + voform.getStartid());
			}
			// 支付交易组号结束值
			if (!StringUtils.isEmpty(voform.getEndid())) {
				voform.getFieldEnd().add("PMTGRPID:" +voform.getEndid());
			}
			if(!StringUtils.isEmpty(voform.getPmttp())){
				voform.getConditions().add("PMTTP:"+voform.getPmttp());
			}
			//startdate
			if(!StringUtils.isEmpty(voform.getStartdate())){
				voform.getFieldStart().add("WORKDT:"+voform.getStartdate());
			}
			if(!StringUtils.isEmpty(voform.getEnddate())){
				voform.getFieldEnd().add("WORKDT:"+voform.getEnddate());
			}
			if(!StringUtils.isEmpty(voform.getStartamount())){
				voform.getFieldStart().add("AMOUNT:"+voform.getStartamount());
			}
			if(!StringUtils.isEmpty(voform.getEndamount())){
				voform.getFieldEnd().add("AMOUNT:"+voform.getEndamount());
			}

			//报文体组装发送
			TransServices transServices = (TransServices)this.getBean("transServices");
			CommonXMLEntity  commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(),"transaction",voform.getQueryCd());
			if(!commonXMLEntity.getProcessCode().equals("000000")){
				throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
			}
			//设置分页信息。记录总条数
			if(commonXMLEntity.getRecordcount() == null){
				voform.setTotalSize(0);
			}else{
				voform.setTotalSize(Integer.parseInt(commonXMLEntity.getRecordcount()));
			}
		    setQueryPageValue(voform,true);
			List<InstantTransfer>  list = commonXMLEntity.getResults();
			InstantTransfer po=list.get(0);
			this.setPageInfo(request,voform);
			this.setObjectToRequest(request, "po",po);
			return mapping.findForward("detail");

		} catch (Exception e) {
			e.printStackTrace(); 
			return toFailedPage(mapping, request,e.getMessage());
		}
	}
	
	
	
}
