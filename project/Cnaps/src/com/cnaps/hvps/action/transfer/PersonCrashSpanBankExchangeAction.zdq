package com.cnaps.hvps.action.transfer;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bancstone.action.BaseAction;
import com.bancstone.common.exception.PicpMessageException;
import com.bancstone.form.BaseActionForm;
import com.bancstone.hibernate.systemManage.Systemusersmanage;
import com.bancstone.service.systemManage.impl.CommonServices;
import com.cnaps.hvps.form.transfer.PersonCrashSpanBankExchangeForm;
import com.cnaps.hvps.form.transfer.PersonCrashSpanBankForm;
import com.cnaps.hvps.persistence.messages.Hvpspartyinfo;
import com.cnaps.coreservices.CommonXMLEntity;
import com.cnaps.coreservices.TransCodeEntity;
import com.cnaps.coreservices.TransServices;

/**
 * @包名   com.cnaps.beps.action
 * @文件名 PersonCrashSpanBankExchangeAction.java
 * @作者   zcx
 * @创建日期 May 5, 2011
 * @版本 V 1.0
 * 说明 个人现金跨行通兑  个人现金通兑  实时借记
 */
public class PersonCrashSpanBankExchangeAction extends BaseAction {
	/**
	 * <ul>
	 * <li>开发作者：zcx</li>
	 * <li> 方法说明： 个人现金/个人转账跨行通兑兑 签发  
	 *   由于转账交易和现金交易用到的实体类是一样的
	 * 
	 * </li>
	 * </ul>
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward sendCredit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		PersonCrashSpanBankExchangeForm pvpform = (PersonCrashSpanBankExchangeForm) form;
		CommonXMLEntity commonXMLEntity;
//		if(pvpform.getPo().getEndrsrnm()!=null){
//		pvpform.getPo().getPoo().setEndrsrNm(pvpform.getPo().getEndrsrnm());
//		}
		String cardcrash = request.getParameter("cardcrash");
		String exchangecode = "7131";//避免与付款签约131重复
		if ("crash".equals(cardcrash)) {
			pvpform.getPo().setSignMd("01");//签发模式为现金
		} else {
			pvpform.getPo().setSignMd("03");//签发模式为签发模式为转账
		}
		pvpform.setBusinesscode("15107131");
		pvpform.setMsgcode("beps.131.001.01"); // 报文号
		String username = request.getParameter("contrperson");//授权柜员
		pvpform.getPo().setWarrantyId(username);
		pvpform.setSource("CNAPS2");
		pvpform.setDestination("BEPS");
		CommonServices commonService = (CommonServices) this
				.getBean("CommonServices");
		String workdate = request.getSession().getAttribute("workDate")
				.toString();//工作日期
		String msgId = commonService.getSEQMsgId(workdate);
		pvpform.setMsgId(msgId);//报文标识号
		Systemusersmanage user = (Systemusersmanage) request.getSession().getAttribute("userentity");
		pvpform.setOperTeller(user.getUsername());//签发柜员
		//pvpform.setOperTeller(username);//授权柜员
		pvpform.setBrnchCd((String) request.getSession().getAttribute(
				"bankCode"));//网点号
		pvpform.setTermId("001");//终端号
		Hvpspartyinfo bankInfo = (Hvpspartyinfo) request.getSession()
				.getAttribute("bankInfo");
		pvpform.getPo().setDbtrMmbId(bankInfo.getDirectbankcode());//设置付款清算行行号

		pvpform.getPo().setEndToEndId(msgId);//设置端到端标识号
		 
		/*pvpform.getPo().setCdtrBrnchId(bankInfo.getDirectbankcode());//收款行行号
		pvpform.getPo().setCdtrBrnchNm(bankInfo.getBankname());//收款行行名
*/		pvpform.getPo().setProposerAcctTp(pvpform.getPo().getReceAccountType());
		pvpform.getPo().setSystemcd("BEPS");
		
		pvpform.setPmtGrpId(pvpform.getPo().getPaymentGroupNum());
		
		pvpform.setQueryCd("15107131");
		String reslutmessage = "";
		commSetToXML(pvpform,request,TransCodeEntity.SEND_BEPS_PersonCrashSpanBankExchangeAction_sendCredit);
		//commSetToXML(pvpform, exchangecode, "BEPS");
		try {
			TransServices transServices = (TransServices) this
					.getBean("transServices");

			pvpform.getPo().setId(12);
			//commonXMLEntity = transServices.busProcess(pvpform, "1510"+exchangecode, request.getRealPath("/"));
			commonXMLEntity = transServices
					.transProcess(
							pvpform,
							TransCodeEntity.SEND_BEPS_PersonCrashSpanBankExchangeAction_sendCredit,
							"transaction", pvpform.getQueryCd());//新版查询方法

			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码:"
						+ commonXMLEntity.getProcessCode() + ";错误信息:"
						+ commonXMLEntity.getProcessDes());
			} else {
				if ("crash".equals(cardcrash)) {
					if("debit".equals(request.getParameter("flag"))){
						reslutmessage = "实时借记业务签发成功,处理码:"
							+ commonXMLEntity.getProcessCode() + ";处理描述:"
							+ commonXMLEntity.getProcessDes() + ";";
					}
					else{
						reslutmessage = "个人现金通兑签发成功,处理码:"
							+ commonXMLEntity.getProcessCode() + ";处理描述:"
							+ commonXMLEntity.getProcessDes() + ";";

					}
					
				} else {
					if("debit".equals(request.getParameter("flag"))){
						reslutmessage = "实时借记业务签发成功,处理码:"
							+ commonXMLEntity.getProcessCode() + ";处理描述:"
							+ commonXMLEntity.getProcessDes() + ";";
					}
					else{
						reslutmessage = "个人卡折通兑签发成功,处理码:"
								+ commonXMLEntity.getProcessCode() + ";处理描述:"
								+ commonXMLEntity.getProcessDes() + ";";
					}

				}
			}
			return toSuccessPage(mapping, request, reslutmessage + ";支付交易组号： "
					+ pvpform.getPo().getPaymentGroupNum());
		} catch (Exception e) {

			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}

	}
}
