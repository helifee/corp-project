package com.cnaps.hvps.action.transfer;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bancstone.action.BaseAction;
import com.bancstone.common.exception.PicpMessageException;
import com.bancstone.common.utils.BeanUtil;
import com.bancstone.service.systemManage.impl.CommonServices;
import com.cnaps.coreservices.CommonXMLEntity;
import com.cnaps.coreservices.TransCodeEntity;
import com.cnaps.coreservices.TransServices;
import com.cnaps.hvps.form.transfer.TransferOfTransitForm;
import com.cnaps.hvps.persistence.transfer.TransferOfTransit;
import com.cnaps.hvps.persistence.transfer.TreasuryFundsTransferDebitPayment;
import com.cnaps.hvps.persistence.transfer.TreasuryTransfer;

/**
 * 国内转账汇款action
 * 
 * @author Administrator
 * 
 */
public class TransferOfTransitAction extends BaseAction {

	/**
	 * 生成支付组号和报文标识号 再进入录入页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */

	public ActionForward createMsgid(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		CommonServices commonService = (CommonServices) this
				.getBean("CommonServices");
		String workdate = request.getSession().getAttribute("workDate")
				.toString();// 工作日期
		String msgId = commonService.getSEQTransId(workdate);
		String signmd = request.getParameter("signmd");// 得到签发类型（现金 转账 卡折 总账）

		TransferOfTransit entity = new TransferOfTransit();
		entity.setPaymentno(msgId);
		request.setAttribute("entity", entity);
		if (signmd.equals("01")) { // 现金
			return mapping.findForward("createMsgid01");
		} else if (signmd.equals("02")) {// 卡折
			return mapping.findForward("createMsgid02");
		} else if (signmd.equals("03")) {// 转账
			return mapping.findForward("createMsgid03");
		} else { // 总账
			return mapping.findForward("createMsgid04");
		}

	}
	
	
	/**
	 * 生成支付组号和报文标识号 再进入跨境汇兑业务录入页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */

	public ActionForward createMsgidCrossborder(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		CommonServices commonService = (CommonServices) this
				.getBean("CommonServices");
		String workdate = request.getSession().getAttribute("workDate")
				.toString();// 工作日期
		String msgId = commonService.getSEQTransId(workdate);
		String signmd = request.getParameter("signmd");// 得到签发类型（现金 转账 卡折 总账）

		TransferOfTransit entity = new TransferOfTransit();
		entity.setPaymentno(msgId);
		request.setAttribute("entity", entity);
		if (signmd.equals("01")) { // 现金
			return mapping.findForward("createMsgidCrossborder01");
		} else if (signmd.equals("02")) {// 卡折
			return mapping.findForward("createMsgidCrossborder02");
		} else if (signmd.equals("03")) {// 转账
			return mapping.findForward("createMsgidCrossborder03");
		} else { // 总账
			return mapping.findForward("createMsgidCrossborder04");
		}

	}

	/**
	 * 客户发起业务发送给后台
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward sendMessage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		try {
			TransferOfTransitForm voform = (TransferOfTransitForm) form;
			System.out.println("授权柜员："+voform.getWarrantyId());
			// 报文头
			String transactionid = TransCodeEntity.SEND_HVPS_EXCHARGE;// 功能代码
			commSetToXML(voform, request, transactionid);
			voform.setBrnchcd(voform.getBrnchCd());
			// 报文体
			String signmd = request.getParameter("signmd");// 得到签发类型（现金 转账 卡折
			// 总账）
			voform.setSignmd(signmd);

			TransferOfTransit tot = new TransferOfTransit();
			// 如果业务类型是国库资金划拨的话 拿到交易明细里面的
			if (voform.getPmttp().equals("A104")) {
				voform.setNumOfTrnsctns(voform.getGkcount());//明细条数
				String[] collcode = request.getParameterValues("collcode");
				String[] adjustcode = request.getParameterValues("adjustcode");
				String[] amt = request.getParameterValues("amt");

				for (int i = 0; i < collcode.length; i++) {
					TreasuryTransfer treasuryTransfer = new TreasuryTransfer();
					treasuryTransfer.setCollcode(collcode[i]);
					treasuryTransfer.setAdjustcode(adjustcode[i]);
					treasuryTransfer.setAmt(amt[i]);
					tot.getTreasuryTransferList().add(treasuryTransfer);
				}
			}else if (voform.getPmttp().equals("A307")) {
				voform.setNumOfTrnsctns(voform.getGzcount());//明细条数
				String[] mx_gzdfgzyhdl = request.getParameterValues("po.gz_typecd");
				String[] mx_gzbjdm = request.getParameterValues("po.gz_cptlcd");
				String[] mx_gzbjje = request.getParameterValues("po.gz_cptlamt");
				String[] mx_gzlxdm = request.getParameterValues("po.gz_accrlcd");
				String[] mx_gzlxje = request.getParameterValues("po.gz_accrlamt");
				for (int i = 0; i < mx_gzdfgzyhdl.length; i++) {
					TreasuryTransfer treasuryTransfer = new TreasuryTransfer();
					treasuryTransfer.setTypecd(mx_gzdfgzyhdl[i]);//兑付国债银行大类
					treasuryTransfer.setCptlcd(mx_gzbjdm[i]);//本金代码
					treasuryTransfer.setCptlamt(mx_gzbjje[i]);//本金金额
					treasuryTransfer.setAccrlcd(mx_gzlxdm[i]);//利息代码
					treasuryTransfer.setAccrlamt(mx_gzlxje[i]);//利息金额
					tot.getTreasuryTransferListgk().add(treasuryTransfer);
				}
			}
			
			
			
//			System.out.println(voform.getChkCount() + "zhangshu");
//			System.out.println(voform.getJfremarkinfo() + "交费类型");
//			System.out.println(voform.getJfmsgid() + "msgid");
//			System.out.println(voform.getJfdate() + "riqi");
			// 去除为空的字段

			BeanUtil.copyProperties2Object(tot, voform);

			// 处理组装报文，发送解析
			TransServices transServices = (TransServices) this
					.getBean("transServices");
			CommonXMLEntity commonXMLEntity = transServices.transProcess(tot,
					TransCodeEntity.SEND_HVPS_EXCHARGE, "transaction", "");

			// 发送交易报文 并解析得到回应的信息
			String reslutmessage = "";// 处理信息
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码："
						+ commonXMLEntity.getProcessCode() + "错误信息："
						+ commonXMLEntity.getProcessDes());
			} else {
				reslutmessage = "处理成功码：" + commonXMLEntity.getProcessCode()
						+"普通贷记业务业务发送成功！";
			}

			return toSuccessPage(mapping, request, reslutmessage, voform
					.getPaymentno(), voform.getSystemcd(),voform.getPmttp());

		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
	}

	/**
	 * 发送查询报文 汇兑 国内转账汇款业务明细
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward sendDetailMessage(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		try {
			System.out.println("@@@");
			CommonServices commonService = (CommonServices) this
					.getBean("CommonServices");
			String workdate = request.getSession().getAttribute("workDate")
					.toString();// 工作日期
			String msgId = commonService.getSEQMsgId(workdate);

			// 界面查询条件
			TransferOfTransitForm voform = (TransferOfTransitForm) form;

			commSetToXML(voform, "1510000000", "SAPS");
			voform.setMsgId(msgId);// 报文标识号
			voform.setQueryCd("1510811102");
			this.setFenYe(voform);

			TransServices transServices = (TransServices) this
					.getBean("transServices");
			String pmtgrpid = request.getParameter("pmtgrpid");

			voform.getConditions().add("pmtgrpid:" + pmtgrpid);

			CommonXMLEntity commonXMLEntity = transServices.transProcess(
					voform, voform.getTransactionId(), "transaction", voform
							.getQueryCd());
			if (!commonXMLEntity.getProcessCode().equals("000000"))

			{
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}

			List<TransferOfTransit> list = commonXMLEntity.getResults();

			TransferOfTransit po = list.get(0);

			voform.setTotalSize(Integer.parseInt(commonXMLEntity
					.getRecordcount()));
			this.setQueryPageValue(voform, true);

			this.setPageInfo(request, voform);
			request.setAttribute("entity", po);
			return mapping.findForward("gotoDetailPage");

		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
	}

	/**
	 * 设置报文的公共部分
	 * 
	 * @param voform
	 */
	private void commSetToXML(TransferOfTransitForm voform) {
		voform.setSource("QDEB");
		voform.setDestination("HVPS");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		voform.setSendDateTime(sdf.format(new Date()));
		voform.setMsgId("");

	}

	/**
	 * 设置 传送到后台的XML 的条件List到FORM里
	 * 
	 * @param voform
	 * @param hpo
	 */
	@SuppressWarnings("unchecked")
	private void commSetConditionsList(TransferOfTransitForm voform,
			TransferOfTransit hpo) {

		if (!StringUtils.isEmpty(hpo.getAppcertno())) {
			voform.getConditions().add("txid:" + hpo.getAppcertno());
		}

	}
}
