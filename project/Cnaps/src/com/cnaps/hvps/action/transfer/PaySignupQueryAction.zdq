/**
 * 
 */
package com.cnaps.hvps.action.transfer;


import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bancstone.action.BaseAction;
import com.bancstone.common.exception.PicpMessageException;
import com.bancstone.constants.SystemConstants;
import com.bancstone.service.systemManage.impl.CommonServices;
import com.cnaps.coreservices.CommonXMLEntity;
import com.cnaps.coreservices.ReportManagService;
import com.cnaps.coreservices.TransCodeEntity;
import com.cnaps.coreservices.TransServices;
import com.cnaps.hvps.form.transfer.PaySignupCreateForm;
import com.cnaps.hvps.form.transfer.PaySignupQueryForm;
import com.cnaps.hvps.form.transfer.TransProcessForm;
import com.cnaps.hvps.persistence.messages.ReportManagEntity;
import com.cnaps.hvps.persistence.transfer.Signup;
import com.cnaps.hvps.persistence.transfer.TransProcessEntity;
import com.saps.entity.SAPSAccountQueueManagement;
import com.saps.entity.SAPSAccountQueueQuery;
import com.saps.form.SAPSAccountQueueQueryForm;

/**
 * @包名   com.cnaps.hvps.action.transfer
 * @文件名 PaySignupQuery.java
 * @作者   zcx
 * @创建日期 Jun 2, 2011
 * @版本 V 1.0
 */
public class PaySignupQueryAction extends BaseAction{
	/**
	 * <ul>
	 * <li>开发作者：zcx</li>
	  * <li> 方法说明： 付款签约查询列表  
	  *   
	  * 
	  * </li>
	 * </ul>
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward  queryList(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response)throws Exception {
		
		//界面查询条件
		PaySignupQueryForm voform = (PaySignupQueryForm) form;
		Signup hpo = voform.getPo();
			
		if (!StringUtils.isEmpty(hpo.getPayAccount())&&!"".equals(hpo.getPayAccount().trim())) 
		{
			System.out.println(hpo.getPayAccount().trim());
			voform.getConditions().add("payAccount:"+hpo.getPayAccount().trim());
		}
		if (!StringUtils.isEmpty(hpo.getSignUpType())&&!"".equals(hpo.getSignUpType().trim())) 
		{
			
			voform.getConditions().add("signUpType:"+hpo.getSignUpType().trim());
		}
		
		if (!StringUtils.isEmpty(hpo.getActiveDate())&&!"".equals( hpo.getActiveDate().trim())) 
		{
			
			voform.getConditions().add("activeDate:"+ hpo.getActiveDate().trim());
		}
		voform.getConditions().add("CONTRACTSTS:CS00");
		String business = request.getParameter("business");  // 标识 HVPS、BEPS、IBPS ……	
		String NoCreate1 = request.getParameter("flag"); 
		String NoCreate2 = (String)request.getAttribute("flag");
		String NoCreate = (NoCreate1==null ? NoCreate2 : NoCreate1);
		request.setAttribute("flag", NoCreate);
		
		
		        System.out.println(NoCreate+" ---"+"NoCreate".equals(NoCreate));
		commSetToXML(voform, TransCodeEntity.QUERYCD,business);
		
		CommonServices commonService = (CommonServices)this.getBean("CommonServices");
		String workdate=request.getSession().getAttribute("workDate").toString();//工作日期
		String  msgId= commonService.getSEQMsgId(workdate);
		voform.setMsgId(msgId);//报文标识号
		 
		voform.setQueryCd("1510720000");	//720000		
		this.setFenYe(voform);
		CommonXMLEntity commonXMLEntity=null;
			try {
		
				 	
				TransServices transServices = (TransServices)this.getBean("transServices");
				commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(),"clearingaccts",voform.getQueryCd());
				if(!commonXMLEntity.getProcessCode().equals("000000"))
				{
					throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
				}
			
			
			if(commonXMLEntity.getRecordcount() == null){
				voform.setTotalSize(0);
			}else{
				voform.setTotalSize(Integer.parseInt(commonXMLEntity.getRecordcount()));
			}
		 
		    this.setQueryPageValue(voform,true);
			List<Signup> list = commonXMLEntity.getResults();  
			
//			request.getSession().putValue("SignupQueryDetaillist",  "");
//			request.getSession().putValue("SignupQueryDetaillist",  list);
			request.setAttribute("queryList",  list);
			this.setPageInfo(request,voform);
			this.setObjectToRequest(request, "queryList", list);
			} catch ( Exception e) {
		         if("NoCreate".equals(NoCreate)){
		        	 return mapping.findForward("queryListNoCreate");
		         }
				//e.printStackTrace();
			//	return toFailedPage(mapping, request,e.getMessage());
				return mapping.findForward("queryList");
			}
		
			 if("NoCreate".equals(NoCreate)){
	        	 return mapping.findForward("queryListNoCreate");
	         }
			 
			return mapping.findForward("queryList");
			
		
	 
	}
	@SuppressWarnings({ "unchecked", "static-access" })
	public ActionForward  queryDetail(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response)throws Exception {
		  String id= request.getParameter("id");
		  HashMap map=new HashMap();
		  map.put("D", "-	通兑");
		  map.put("E", "-	通兑和账户查询");
		  map.put("F", "-	账户查询");
//		   List<Signup> list=(List<Signup>) request.getSession().getAttribute("SignupQueryDetaillist");
//		   for(Signup sap:list){
//			   if(sap.getId().equals(id)){
//			 	   request.setAttribute("sap", sap);
//				   break;
//			   }
		  
		
		//界面查询条件
			PaySignupQueryForm voform = (PaySignupQueryForm) form;
			voform.getConditions().add("id:"+id);
			voform.getConditions().add("CONTRACTSTS:CS00");
			String business = request.getParameter("business");  // 标识 HVPS、BEPS、IBPS ……	
			commSetToXML(voform, TransCodeEntity.QUERYCD,business);
			CommonServices commonService = (CommonServices)this.getBean("CommonServices");
			String workdate=request.getSession().getAttribute("workDate").toString();//工作日期
			String  msgId= commonService.getSEQMsgId(workdate);
			voform.setMsgId(msgId);//报文标识号
			voform.setQueryCd("1510720000");	//720000		
			this.setFenYe(voform);
			CommonXMLEntity commonXMLEntity=null;
				try {
					TransServices transServices = (TransServices)this.getBean("transServices");
					commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(),"clearingaccts",voform.getQueryCd());
					if(!commonXMLEntity.getProcessCode().equals("000000"))
					{
						throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
					}
			    this.setQueryPageValue(voform,true);
				List<Signup> list = commonXMLEntity.getResults();  
				Signup sap=new Signup();
				sap=(Signup)list.get(0);
				request.setAttribute("sap", sap);
				} catch ( Exception e) {
			         e.printStackTrace();
				}
		return mapping.findForward("detail");
		
	}
	@SuppressWarnings("unchecked")
	public ActionForward  queryRepair(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response)throws Exception {
		  String id= request.getParameter("id");
		  HashMap map=new HashMap();
		  map.put("A", "-	通兑");
		  map.put("B", "-	通兑和账户查询");
		  map.put("C", "-	账户查询");
//		   List<Signup> list=(List<Signup>) request.getSession().getAttribute("SignupQueryDetaillist");
//		   for(Signup sap:list){
//			   if(sap.getId().equals(id)){
//				   request.setAttribute("sap", sap);
//				   break;
//			   }
//			   
//		   }
		  PaySignupQueryForm voform = (PaySignupQueryForm) form;
			voform.getConditions().add("id:"+id);
			voform.getConditions().add("CONTRACTSTS:CS00");
			String business = request.getParameter("business");  // 标识 HVPS、BEPS、IBPS ……	
			commSetToXML(voform, TransCodeEntity.QUERYCD,business);
			CommonServices commonService = (CommonServices)this.getBean("CommonServices");
			String workdate=request.getSession().getAttribute("workDate").toString();//工作日期
			String  msgId= commonService.getSEQMsgId(workdate);
			voform.setMsgId(msgId);//报文标识号
			voform.setQueryCd("1510720000");	//720000		
			this.setFenYe(voform);
			CommonXMLEntity commonXMLEntity=null;
				try {
					TransServices transServices = (TransServices)this.getBean("transServices");
					commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(),"clearingaccts",voform.getQueryCd());
					if(!commonXMLEntity.getProcessCode().equals("000000"))
					{
						throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
					}
			    this.setQueryPageValue(voform,true);
				List<Signup> list = commonXMLEntity.getResults();  
				Signup sap=new Signup();
				sap=(Signup)list.get(0);
				request.setAttribute("sap", sap);
				} catch ( Exception e) {
			         e.printStackTrace();
				}
			return mapping.findForward("repair");
			
			}
	
		
	
}
