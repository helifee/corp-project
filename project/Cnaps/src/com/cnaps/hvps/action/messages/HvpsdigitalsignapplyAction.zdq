package com.cnaps.hvps.action.messages;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bancstone.action.BaseAction;
import com.bancstone.common.exception.PicpMessageException;
import com.cnaps.coreservices.CommonXMLEntity;
import com.cnaps.coreservices.TransCodeEntity;
import com.cnaps.coreservices.TransServices;
import com.cnaps.hvps.form.messages.HvpsdigitalsignapplyForm;
import com.cnaps.hvps.persistence.messages.Hvpsdigitalsignapply;

public class HvpsdigitalsignapplyAction extends BaseAction  {

	
	//数字证书绑定通知查询
	public ActionForward findList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try{
			HvpsdigitalsignapplyForm voform = (HvpsdigitalsignapplyForm) form;
			//报文头设置
			String transactionid = TransCodeEntity.QUERYCD;//功能代码
			commSetToXML(voform,request,transactionid);
			//查询码
			voform.setQueryCd(TransCodeEntity.CERTNTFCTNOTIFY_QUERY);	
			//分页设置
			this.setFenYe(voform);
			//查询条件设置s
			Hvpsdigitalsignapply hpo=voform.getPo();
			if(!"".equals(hpo.getMsgid()) && hpo.getMsgid() != null){
				voform.getConditions().add("msgid:"+hpo.getMsgid());
			}
			if(!"".equals(hpo.getWorkdate()) && hpo.getWorkdate() != null){
				voform.getConditions().add("workdate:"+hpo.getWorkdate());
			}
 
			TransServices transServices = (TransServices)this.getBean("transServices");
			CommonXMLEntity  commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(),"systemcontrols",voform.getQueryCd());
			if(!commonXMLEntity.getProcessCode().equals("000000")){
				throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
			}
			//分页设置
			if(commonXMLEntity.getRecordcount() == null){
				voform.setTotalSize(0);
			}else{
				voform.setTotalSize(Integer.parseInt(commonXMLEntity.getRecordcount()));
			}
			
		    this.setQueryPageValue(voform,true);
			List<Hvpsdigitalsignapply>  list = commonXMLEntity.getResults();
			this.setPageInfo(request,voform);
			this.setObjectToRequest(request, "queryList",list);
			request.setAttribute("condtion", hpo);//设置查询条件
			return mapping.findForward("queryList");

		} catch (Exception e) {
			e.printStackTrace(); 
			return toFailedPage(mapping, request,e.getMessage());
		}
		
	}
	
	//数字证书绑定通知查询明细浏览
	public ActionForward querysendMsg(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try{
		
			HvpsdigitalsignapplyForm voform = (HvpsdigitalsignapplyForm) form;
			//报文头设置
			String transactionid = TransCodeEntity.QUERYCD;//功能代码
			commSetToXML(voform,request,transactionid);
		
			voform.setQueryCd(TransCodeEntity.CERTNTFCTNOTIFY_QUERY);
			this.setFenYe(voform);
			
			// 查询明细条件
			String msgid = request.getParameter("msgid");
			voform.getConditions().add("msgid:"+msgid);
			
			TransServices transServices = (TransServices)this.getBean("transServices");
			CommonXMLEntity  commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(),"systemcontrols",voform.getQueryCd());
			if(!commonXMLEntity.getProcessCode().equals("000000"))
			{
				throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
			}
			
			List<Hvpsdigitalsignapply>  list = commonXMLEntity.getResults();	
			Hvpsdigitalsignapply entity = new Hvpsdigitalsignapply();
			if(list.size()>0){
				entity = (Hvpsdigitalsignapply)list.get(0);
			}
			request.setAttribute("po", entity);
			request.setAttribute("cnaps2jydm","1510990302");
			return mapping.findForward("detailInfo");

		} catch (Exception e) {
			e.printStackTrace(); 
			return toFailedPage(mapping, request,e.getMessage());
		}
	}
	
	// 数字证书绑定
	public ActionForward signApply(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try{
			HvpsdigitalsignapplyForm voform = (HvpsdigitalsignapplyForm) form;
			//报文头设置
			String transactionid = TransCodeEntity.CERTNTFCTNOTIFY;//功能代码
			commSetToXML(voform,request,transactionid);
			TransServices transServices = (TransServices)this.getBean("transServices");
			CommonXMLEntity  commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(),"systemcontrols","");
			if(!commonXMLEntity.getProcessCode().equals("000000")){
				throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
			}
			String msg = "";
			Hvpsdigitalsignapply hpo = voform.getPo();
			if(hpo.getChgtp().equals("CC00")){
				msg="数字证书绑定新增成功！";
			}else{
				msg="数字证书绑定撤销成功！";
			}
			return toSuccessPage(mapping,request,msg);

		} catch (Exception e) {
			e.printStackTrace(); 
			return toFailedPage(mapping, request,e.getMessage());
		}
		
	}
	
	// 从菜单直接调整页面
	public ActionForward gotoPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try{
			String business = request.getParameter("business");  // 标识 HVPS、BEPS、IBPS ……
			request.setAttribute("business",business);
			
			return mapping.findForward("input");

		} catch (Exception e) {
			e.printStackTrace(); 
			return toFailedPage(mapping, request,e.getMessage());
		}
		
	}

}
