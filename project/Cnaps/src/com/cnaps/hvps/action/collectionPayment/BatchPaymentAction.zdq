/**
 * 
 */
package com.cnaps.hvps.action.collectionPayment;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bancstone.action.BaseAction;
import com.bancstone.common.exception.PicpMessageException;
import com.bancstone.hibernate.systemManage.Systemusersmanage;
import com.bancstone.service.systemManage.impl.CommonServices;
import com.cnaps.coreservices.CommonXMLEntity;
import com.cnaps.coreservices.TransCodeEntity;
import com.cnaps.coreservices.TransServices;
import com.cnaps.hvps.form.cis.CisDetailForm;
import com.cnaps.hvps.form.collectionPayment.ActivePaymentForm;
import com.cnaps.hvps.form.collectionPayment.BatchPaymentForm;
import com.cnaps.hvps.persistence.cis.CisDetail;
import com.cnaps.hvps.persistence.collectionPayment.BatchCollection;
import com.cnaps.hvps.persistence.collectionPayment.BatchCollectionDetail;
import com.cnaps.hvps.persistence.collectionPayment.BatchPayment;
import com.cnaps.hvps.persistence.collectionPayment.BatchPaymentDetails;
import com.cnaps.hvps.persistence.messages.Hvpspartyinfo;

/**
 * @包名   com.cnaps.hvps.action.collectionPayment
 * @文件名 BatchPaymentAction.java
 * @作者   zcx
 * @创建日期 Sep 6, 2011
 * @版本 V 1.0
 */
public class BatchPaymentAction extends BaseAction{
	
	
	
	
	//代付查询
	public ActionForward queryList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		 
 
		 //界面查询条件
		BatchPaymentForm voform = (BatchPaymentForm) form;
		BatchPayment hpo = voform.getPo();
		 String id=request.getParameter("id");
		 
		 
		 
		 
		 if (!StringUtils.isEmpty(id)&&!"".equals(id.trim())) 
			{
				
				voform.getConditions().add("id:"+id.trim());//
			}
			if (!StringUtils.isEmpty(hpo.getPmtGrpId() )&&!"".equals(hpo.getPmtGrpId().trim())) 
			{
				
				voform.getConditions().add("pmtgrpid:"+hpo.getPmtGrpId());//支付组号查询
			}
			
			 
			if (!StringUtils.isEmpty(hpo.getBtchNb())&&!"".equals(hpo.getBtchNb().trim())) 
			{
				
				voform.getConditions().add("btchnb:"+hpo.getBtchNb());//付款人帐号
			}
			
			 
		 
		 
		String business = request.getParameter("business");  // 标识 HVPS、BEPS、IBPS ……	
		commSetToXML(voform, TransCodeEntity.QUERYCD,business);
		
		//报文标识号
		CommonServices commonService = (CommonServices)this.getBean("CommonServices");
		String workdate=request.getSession().getAttribute("workDate").toString();//工作日期
		String  msgId= commonService.getSEQMsgId(workdate);
		voform.setMsgId(msgId);//报文标识号
		voform.setQueryCd("1510738001");//查询吗		
		this.setFenYe(voform);
		CommonXMLEntity commonXMLEntity=null;
			try {
		
				 	
				TransServices transServices = (TransServices)this.getBean("transServices");
			 	commonXMLEntity = transServices.transProcess(voform,  TransCodeEntity.QUERYCD,
		      			"transaction",voform.getQueryCd());//新版查询方法
				if(!commonXMLEntity.getProcessCode().equals("000000"))
				{
					throw new PicpMessageException("错误码：【"+commonXMLEntity.getProcessCode()+"】 错误信息：【"+commonXMLEntity.getProcessDes()+"】");
				}
			
			
			if(commonXMLEntity.getRecordcount() == null){
				voform.setTotalSize(0);
			}else{
				voform.setTotalSize(Integer.parseInt(commonXMLEntity.getRecordcount()));
			}
			
		    this.setQueryPageValue(voform,true);
			List<BatchPayment> list = commonXMLEntity.getResults();  
			if(list!=null&&list.size()==1&&id!=null&&id.trim().equals(list.get(0).getId())){
			 	request.setAttribute("sap",  list.get(0));
			 	return mapping.findForward("batchPaymentDetail");//跳转到明细页面

			}
			 	request.setAttribute("queryList",  list);
			 
			this.setPageInfo(request,voform);
		 		} catch ( Exception e) {
		 
			 e.printStackTrace();
				return mapping.findForward("queryList");
			}
		
			 
			 
			 
			 
		 
			 	
		return mapping.findForward("queryList");
			
	}
	
	
	 	
	
	
	
	//代付子表查询
	public ActionForward querybatchPaymentChildrenList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		 
 
		 //界面查询条件
		BatchPaymentForm voform = (BatchPaymentForm) form;
		 
		 String parentid=request.getParameter("parentid");
		 String  id=request.getParameter("id");
		 
		 request.setAttribute("parentid", parentid);
		 if (!StringUtils.isEmpty(id)&&!"".equals(id.trim())) 
			{
				
				voform.getConditions().add("id:"+id.trim());//支付组号查询
			}
			 
		 
		 if (!StringUtils.isEmpty(parentid)&&!"".equals(parentid.trim())) 
			{
				
				voform.getConditions().add("parentid:"+parentid.trim());//支付组号查询
			}
			 
			
			 
		 
		 
		String business = request.getParameter("business");  // 标识 HVPS、BEPS、IBPS ……	
		commSetToXML(voform, TransCodeEntity.QUERYCD,business);
		
		//报文标识号
		CommonServices commonService = (CommonServices)this.getBean("CommonServices");
		String workdate=request.getSession().getAttribute("workDate").toString();//工作日期
		String  msgId= commonService.getSEQMsgId(workdate);
		voform.setMsgId(msgId);//报文标识号
		voform.setQueryCd("1510738002");//查询吗		
		this.setFenYe(voform);
		CommonXMLEntity commonXMLEntity=null;
			try {
		
				 	
				TransServices transServices = (TransServices)this.getBean("transServices");
			 	commonXMLEntity = transServices.transProcess(voform,  TransCodeEntity.QUERYCD,
		      			"transaction",voform.getQueryCd());//新版查询方法
				if(!commonXMLEntity.getProcessCode().equals("000000"))
				{
					throw new PicpMessageException("错误码：【"+commonXMLEntity.getProcessCode()+"】 错误信息：【"+commonXMLEntity.getProcessDes()+"】");
				}
			
			
			if(commonXMLEntity.getRecordcount() == null){
				voform.setTotalSize(0);
			}else{
				voform.setTotalSize(Integer.parseInt(commonXMLEntity.getRecordcount()));
			}
		 
		    this.setQueryPageValue(voform,true);
			List<BatchPaymentDetails> list = commonXMLEntity.getResults();  
			if(list!=null&&list.size()==1&&id!=null&&id.trim().equals(list.get(0).getId())){
			 	request.setAttribute("sap",  list.get(0));
			 	return mapping.findForward("payChildDetail");//跳转到明细页面

			}
			 	request.setAttribute("queryList",  list);
			 
			this.setPageInfo(request,voform);
		 		} catch ( Exception e) {
		 
			 e.printStackTrace();
				return mapping.findForward("querybatchPaymentChildrenList");
			}
		
			 
			 
			 
			 
		 
			 	
		return mapping.findForward("querybatchPaymentChildrenList");
			
	}
	
	
	 	
	
	
	
	
	
	
	
	
	
	
	
	
	////////////////////////////////////////////////////////////
	
	
	//批量代收
	////////////////////
	
	public ActionForward batchCollectionQuery(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		 
 
		 //界面查询条件
		BatchPaymentForm voform = (BatchPaymentForm) form;
		BatchPayment hpo = voform.getPo();
		 String id=request.getParameter("id");
		 
		 
		 
		 
		 if (!StringUtils.isEmpty(id)&&!"".equals(id.trim())) 
			{
				
				voform.getConditions().add("id:"+id.trim());// 
			}
		 if (!StringUtils.isEmpty(hpo.getPmtGrpId() )&&!"".equals(hpo.getPmtGrpId().trim())) 
			{
				
				voform.getConditions().add("pmtgrpid:"+hpo.getPmtGrpId());//支付组号查询
			}
			
			 
			if (!StringUtils.isEmpty(hpo.getBtchNb())&&!"".equals(hpo.getBtchNb().trim())) 
			{
				
				voform.getConditions().add("btchnb:"+hpo.getBtchNb()); 
			}
			
			 
		 
		 
		String business = request.getParameter("business");  // 标识 HVPS、BEPS、IBPS ……	
		commSetToXML(voform, TransCodeEntity.QUERYCD,business);
		
		//报文标识号
		CommonServices commonService = (CommonServices)this.getBean("CommonServices");
		String workdate=request.getSession().getAttribute("workDate").toString();//工作日期
		String  msgId= commonService.getSEQMsgId(workdate);
		voform.setMsgId(msgId);//报文标识号
		voform.setQueryCd("1510738201");//查询吗		
		this.setFenYe(voform);
		CommonXMLEntity commonXMLEntity=null;
			try {
		
				 	
				TransServices transServices = (TransServices)this.getBean("transServices");
			 	commonXMLEntity = transServices.transProcess(voform,  TransCodeEntity.QUERYCD,
		      			"transaction",voform.getQueryCd());//新版查询方法
				if(!commonXMLEntity.getProcessCode().equals("000000"))
				{
					throw new PicpMessageException("错误码：【"+commonXMLEntity.getProcessCode()+"】 错误信息：【"+commonXMLEntity.getProcessDes()+"】");
				}
			
			
			if(commonXMLEntity.getRecordcount() == null){
				voform.setTotalSize(0);
			}else{
				voform.setTotalSize(Integer.parseInt(commonXMLEntity.getRecordcount()));
			}
			
		    
			this.setQueryPageValue(voform,true);
			
		
			
			List<BatchCollection> list = commonXMLEntity.getResults();  
			if(list!=null&&list.size()==1&&id!=null&&id.trim().equals(list.get(0).getId())){
			 	request.setAttribute("sap",  list.get(0));
			 	System.out.println("====================");
			 	return mapping.findForward("batchCollectionDetail");//跳转到明细页面

			}
			 	request.setAttribute("queryList",  list);
			 
			this.setPageInfo(request,voform);
		 		} catch ( Exception e) {
		 
			 e.printStackTrace();
				return mapping.findForward("batchCollectionQueryqueryList");
			}
		
			 
			 
			 
			 
		 
			 	
		return mapping.findForward("batchCollectionQueryqueryList");
			
	}
	
	
	 	
	
	
	
	
	
	
	//批量代收子表查询

	@SuppressWarnings("unchecked")
	public ActionForward batchCollectionChildQuery(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		 
 
		 //界面查询条件
		BatchPaymentForm voform = (BatchPaymentForm) form;
		BatchPayment hpo = voform.getPo();
		 String id=request.getParameter("id");
		 
		 String parentId=request.getParameter("parentid");
		 
		 
		 if (!StringUtils.isEmpty(id)&&!"".equals(id.trim())) 
			{
				
				voform.getConditions().add("id:"+id.trim());// 
			}
		 
		 if (!StringUtils.isEmpty(parentId)&&!"".equals(parentId.trim())) 
			{
				
				voform.getConditions().add("parentid:"+parentId.trim());// 
			}
		 if (!StringUtils.isEmpty(hpo.getPmtGrpId() )&&!"".equals(hpo.getPmtGrpId().trim())) 
			{
				
				voform.getConditions().add("pmtgrpid:"+hpo.getPmtGrpId());//支付组号查询
			}
			
			 
			if (!StringUtils.isEmpty(hpo.getBtchNb())&&!"".equals(hpo.getBtchNb().trim())) 
			{
				
				voform.getConditions().add("btchnb:"+hpo.getBtchNb()); 
			}
			
			 
		 
		 
		String business = request.getParameter("business");  // 标识 HVPS、BEPS、IBPS ……	
		commSetToXML(voform, TransCodeEntity.QUERYCD,business);
		
		//报文标识号
		CommonServices commonService = (CommonServices)this.getBean("CommonServices");
		String workdate=request.getSession().getAttribute("workDate").toString();//工作日期
		String  msgId= commonService.getSEQMsgId(workdate);
		voform.setMsgId(msgId);//报文标识号
		voform.setQueryCd("1510738202");//查询吗		
		this.setFenYe(voform);
		CommonXMLEntity commonXMLEntity=null;
			try {
		
				 	
				TransServices transServices = (TransServices)this.getBean("transServices");
			 	commonXMLEntity = transServices.transProcess(voform,  TransCodeEntity.QUERYCD,
		      			"transaction",voform.getQueryCd());//新版查询方法
				if(!commonXMLEntity.getProcessCode().equals("000000"))
				{
					throw new PicpMessageException("错误码：【"+commonXMLEntity.getProcessCode()+"】 错误信息：【"+commonXMLEntity.getProcessDes()+"】");
				}
			
			
			if(commonXMLEntity.getRecordcount() == null){
				voform.setTotalSize(0);
			}else{
				voform.setTotalSize(Integer.parseInt(commonXMLEntity.getRecordcount()));
			}
			
		    
			this.setQueryPageValue(voform,true);
			

	
			List<BatchCollectionDetail> list = commonXMLEntity.getResults();  
			if(list!=null&&list.size()==1&&id!=null&&id.trim().equals(list.get(0).getId())){
			 	request.setAttribute("sap",  list.get(0));
			 	System.out.println("====================");
			 	return mapping.findForward("batchCollectionChildDetail");//跳转到明细页面

			}
			 	request.setAttribute("queryList",  list);
			 
			this.setPageInfo(request,voform);
		 		} catch ( Exception e) {
		 
			 e.printStackTrace();
				return mapping.findForward("batchCollectionChildQuery");
			}
		
			 
			 
			 
			 
		 
			 	
		return mapping.findForward("batchCollectionChildQuery");
			
	}
	
	
	 	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/*public ActionForward batchPayment(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
		BatchPaymentForm pvpform = (BatchPaymentForm)form;
		 CommonXMLEntity commonXMLEntity;
		 SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss");
		 
		 pvpform.setBrnchCd("001");
		 Systemusersmanage user  =(Systemusersmanage) request.getSession().getAttribute("userentity");
		    pvpform.setOperTeller(user.getUsername());//操作员名字
		 pvpform.setTermId("001");
		 
		 pvpform.setSource("CNAPS2");
		 pvpform.setDestination("BEPS");
		 
			CommonServices commonService = (CommonServices)this.getBean("CommonServices");
			String workdate=request.getSession().getAttribute("workDate").toString();//工作日期
		  
		 
		 pvpform.setSendDateTime(sdf.format(new Date()));
	 	Hvpspartyinfo bankInfo =(Hvpspartyinfo)request.getSession().getAttribute("bankInfo");
			pvpform.setOperBankCode(bankInfo.getBankcode())	;//发起行行号
		    pvpform.setPmtGrpId(commonService.getSEQMsgId(workdate));//支付序号
			 
		    pvpform.getPo().setPoo(pvpform.getPoo());
			 pvpform.setTransactionId(TransCodeEntity.BatchPaymentAction_batchPayment);
			 
			pvpform.setQueryCd(TransCodeEntity.BatchPaymentAction_batchPayment);
	   String  reslutmessage="";	
  	  commSetToXML(pvpform,TransCodeEntity.BatchPaymentAction_batchPayment,"BEPS");
     	try {
     	  TransServices transServices = (TransServices)this.getBean("transServices");
  		
     	commonXMLEntity = transServices.transProcess(pvpform, TransCodeEntity.BatchPaymentAction_batchPayment,
     			"transaction",pvpform.getQueryCd());//新版查询方法
		 
     		
     		if(!commonXMLEntity.getProcessCode().equals("000000"))
				{
					throw new PicpMessageException("错误码："+commonXMLEntity.getProcessCode()+"错误信息："+commonXMLEntity.getProcessDes());
				}else
				{
					 
						reslutmessage="处理成功码："+commonXMLEntity.getProcessCode()+"处理成功！";
				 
				}
     	 return toSuccessPage(mapping,request,reslutmessage+"您的支付交易组号是【"+pvpform.getPmtGrpId()+"】");
			} catch ( Exception e) {
				
				
				return toFailedPage(mapping, request,e.getMessage() );
			}

	}
	
	
	public ActionForward batchCollection(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	
		BatchPaymentForm pvpform = (BatchPaymentForm)form;
		 CommonXMLEntity commonXMLEntity;
		 SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'hh:mm:ss");
		 
		 pvpform.setBrnchCd("001");
		 Systemusersmanage user  =(Systemusersmanage) request.getSession().getAttribute("userentity");
		    pvpform.setOperTeller(user.getUsername());//操作员名字
		 pvpform.setTermId("001");
		 
		 pvpform.setSource("CNAPS2");
		 pvpform.setDestination("BEPS");
		 
			CommonServices commonService = (CommonServices)this.getBean("CommonServices");
			String workdate=request.getSession().getAttribute("workDate").toString();//工作日期
		  
		 
		 pvpform.setSendDateTime(sdf.format(new Date()));
	 	Hvpspartyinfo bankInfo =(Hvpspartyinfo)request.getSession().getAttribute("bankInfo");
			pvpform.setOperBankCode(bankInfo.getBankcode())	;//发起行行号
		    pvpform.setPmtGrpId(commonService.getSEQMsgId(workdate));//支付序号
			 
		    pvpform.getPo().setPoo(pvpform.getPoo());
			 pvpform.setTransactionId(TransCodeEntity.BatchPaymentAction_batchCollection);
			 
			pvpform.setQueryCd(TransCodeEntity.BatchPaymentAction_batchCollection);
	   String  reslutmessage="";	
  	  commSetToXML(pvpform,TransCodeEntity.BatchPaymentAction_batchCollection,"BEPS");
     	try {
     	  TransServices transServices = (TransServices)this.getBean("transServices");
  		
     	commonXMLEntity = transServices.transProcess(pvpform, TransCodeEntity.BatchPaymentAction_batchCollection,
     			"transaction",pvpform.getQueryCd());//新版查询方法
		 
     		
     		if(!commonXMLEntity.getProcessCode().equals("000000"))
				{
					throw new PicpMessageException("错误码："+commonXMLEntity.getProcessCode()+"错误信息："+commonXMLEntity.getProcessDes());
				}else
				{
					 
						reslutmessage="处理成功码："+commonXMLEntity.getProcessCode()+"处理成功！";
				 
				}
     	 return toSuccessPage(mapping,request,reslutmessage+"您的支付交易组号是【"+pvpform.getPmtGrpId()+"】");
			} catch ( Exception e) {
				
				
				return toFailedPage(mapping, request,e.getMessage() );
			}

	}

	
	*/
	
	
}
