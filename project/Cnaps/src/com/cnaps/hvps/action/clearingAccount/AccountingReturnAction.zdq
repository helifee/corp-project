package com.cnaps.hvps.action.clearingAccount;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bancstone.action.BaseAction;
import com.bancstone.common.exception.PicpMessageException;
import com.bancstone.service.systemManage.impl.CommonServices;
import com.cnaps.coreservices.CommonXMLEntity;
import com.cnaps.coreservices.TransCodeEntity;
import com.cnaps.coreservices.TransServices;
import com.cnaps.hvps.form.clearingAccount.AccountingReturnForm;
import com.cnaps.hvps.persistence.clearingAccount.AccountingReturn;

/**
 * 计费与返还通知查询
 * @author Administrator
 *
 */
public class AccountingReturnAction extends BaseAction{
	
	/**
	 * 发送查询报文 计费与返还通知查询
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward querySendxml(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		try{
			CommonServices commonService = (CommonServices)this.getBean("CommonServices");
			String workdate=request.getSession().getAttribute("workDate").toString();//工作日期
			String msgId = commonService.getSEQMsgId(workdate);
			
			//界面查询条件
            AccountingReturnForm voform = (AccountingReturnForm)form;
            AccountingReturn po = voform.getPo();
			commSetToXML(voform, TransCodeEntity.QUERYCD,"CMCS");
			voform.setMsgId(msgId);//报文标识号
			voform.setQueryCd(TransCodeEntity.BULLING_AND_INFORM_INQUIRES_RETURN);			
			this.setFenYe(voform);
 
			TransServices transServices = (TransServices)this.getBean("transServices");
			commSetConditionsList(voform,po);
			CommonXMLEntity  commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(), "clearingaccts", voform.getQueryCd());
			if(!commonXMLEntity.getProcessCode().equals("000000")){
				throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
			}
			voform.setTotalSize(Integer.parseInt(commonXMLEntity.getRecordcount()));
		    this.setQueryPageValue(voform,true);
			List  List = commonXMLEntity.getResults();
			this.setPageInfo(request,voform);
			this.setObjectToRequest(request, "queryList",List);
			request.setAttribute("condition", po);
			return mapping.findForward("queryList");
			
		} catch (Exception e) {
			 e.printStackTrace();
			return toFailedPage(mapping, request,e.getMessage());
		}
	}
	
	

	
	/**设置 传送到后台的XML 的条件List到FORM里
	 * @param voform
	 * @param hpo
	 */
	
	private void commSetConditionsList(AccountingReturnForm voform,AccountingReturn hpo){
		
		
		if (!StringUtils.isEmpty(hpo.getMsgId())) {
			voform.getConditions().add("msgid:"+hpo.getMsgId());
		}
		if (!StringUtils.isEmpty(hpo.getWorkDate())){
			voform.getConditions().add("workdate:"+hpo.getWorkDate());
		}

	}
	
	/**
	 * 发送明细报文
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward sendDetailMessage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		try{
			
			CommonServices commonService = (CommonServices)this.getBean("CommonServices");
			String workdate=request.getSession().getAttribute("workDate").toString();//工作日期
			String msgId = commonService.getSEQMsgId(workdate);
			//界面查询条件
			AccountingReturnForm voform = (AccountingReturnForm)form;
			commSetToXML(voform, TransCodeEntity.QUERYCD,"CMCS");
			voform.setMsgId(msgId);//报文标识号
			voform.setQueryCd(TransCodeEntity.BULLING_AND_INFORM_INQUIRES_RETURN);	
			this.setFenYe(voform);
			TransServices transServices = (TransServices)this.getBean("transServices");
			String id = request.getParameter("id");
			voform.getConditions().add("id:"+id);
			
			CommonXMLEntity  commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(), "clearingaccts", voform.getQueryCd());
			if(!commonXMLEntity.getProcessCode().equals("000000")){
				throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
			}
			List<AccountingReturn>  list = commonXMLEntity.getResults();
			AccountingReturn po= list.get(0);
			request.setAttribute("entity", po);
			return mapping.findForward("gotoDetailPage");
			
		} catch (Exception e) {
			 e.printStackTrace();
			return toFailedPage(mapping, request,e.getMessage());
		}
	}
	

}
