package com.cnaps.hvps.action.clearingAccount;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bancstone.action.BaseAction;
import com.bancstone.common.exception.PicpMessageException;
import com.cnaps.coreservices.CommonXMLEntity;
import com.cnaps.coreservices.TransCodeEntity;
import com.cnaps.coreservices.TransServices;
import com.cnaps.hvps.form.clearingAccount.NetDebitLimitWarningSetForm;
import com.cnaps.hvps.persistence.clearingAccount.NetDebitLimitWarningSet;

/**
 * 净借记限额可用额度预警值设置Action
 * @author Administrator
 *
 */
public class NetDebitLimitWarningSetAction extends BaseAction<Object> {
	
	
	/**
	 * 客户发起业务发送给后台 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward sendMessage(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
		try {
			NetDebitLimitWarningSetForm voform = (NetDebitLimitWarningSetForm) form;
			//报文设置
			String transactionid = TransCodeEntity.NetDebitLimitWarningSetAction_sendMsg;//功能代码
			commSetToXML(voform,request,transactionid);
			//报文体组装发送
			TransServices transServices = (TransServices)this.getBean("transServices");
			CommonXMLEntity  commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(),"clearingaccts","");
			if(!commonXMLEntity.getProcessCode().equals("000000")){
				throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
			}
			return toSuccessPage(mapping,request,"处理成功码："+commonXMLEntity.getProcessCode()+"; 净借记限额可用额度预警值设置报文发送成功！");
	
		} catch (Exception e) {
			// TODO: handle exception
			return toFailedPage(mapping,request,e.getMessage());
		}
	}

	/**
	 * 发送查询报文   
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward querySendxml(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try{
			
			NetDebitLimitWarningSetForm voform = (NetDebitLimitWarningSetForm) form;
			//报文头设置
			String transactionid = TransCodeEntity.QUERYCD;//功能代码
			commSetToXML(voform,request,transactionid);
			//查询代码
			voform.setQueryCd(TransCodeEntity.NetDebitLimitWarningSetAction_sendMsg_query);
			//分页设置
			this.setFenYe(voform);
			//查询条件设置
			NetDebitLimitWarningSet po = voform.getPo();
			commSetConditionsList(voform,po);
			//报文体组装发送
			TransServices transServices = (TransServices)this.getBean("transServices");
			CommonXMLEntity  commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(),"clearingaccts",voform.getQueryCd());
			if(!commonXMLEntity.getProcessCode().equals("000000")){
				throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
			}
			
			//设置分页信息。记录总条数
			if(commonXMLEntity.getRecordcount() == null){
				voform.setTotalSize(0);
			}else{
				voform.setTotalSize(Integer.parseInt(commonXMLEntity.getRecordcount()));
			}
		    setQueryPageValue(voform,true);
		    
			List<NetDebitLimitWarningSet>  List = commonXMLEntity.getResults();
			this.setPageInfo(request,voform);
			request.setAttribute("condition", po);
			this.setObjectToRequest(request, "queryList",List);
			return mapping.findForward("queryList");

		} catch (Exception e) {
			e.printStackTrace(); 
			return toFailedPage(mapping, request,e.getMessage());
		}
	}
	
	
	
	
	
	
	/**
	 * 设置报文的公共部分
	 * @param voform
	 */
	@SuppressWarnings("unused")
	private void commSetToXML(NetDebitLimitWarningSetForm voform)
	{
		voform.setSource("QDEB");
		voform.setDestination("HVPS");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		voform.setSendDateTime(sdf.format(new Date()));
		voform.setBusinesscode("15109354");
		voform.setMsgcode("nets.354.001.01");
		


	}
	
	/**设置 传送到后台的XML 的条件List到FORM里  查询条件
	 * @param voform
	 * @param hpo
	 */
	@SuppressWarnings("unchecked")
	private void commSetConditionsList(NetDebitLimitWarningSetForm voform,NetDebitLimitWarningSet hpo)
	{
		
		
		if (!StringUtils.isEmpty(hpo.getMsgid())) 
		{
			voform.getConditions().add("msgid:"+hpo.getMsgid());
		}
		if (!StringUtils.isEmpty(hpo.getWorkdate())) 
		{
			voform.getConditions().add("workdt:"+hpo.getWorkdate());
		}
		

	}
	
	
	
	
	/**
	 * 发送明细报文
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	
	@SuppressWarnings("unchecked")
	public ActionForward sendDetailMessage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try{			
			NetDebitLimitWarningSetForm voform = (NetDebitLimitWarningSetForm) form;
			//报文头设置
			String transactionid = TransCodeEntity.QUERYCD;//功能代码
			commSetToXML(voform,request,transactionid);
			//查询代码
			voform.setQueryCd(TransCodeEntity.NetDebitLimitWarningSetAction_sendMsg_query);
			//分页设置
			this.setFenYe(voform);
			//查询条件设置
			String id = request.getParameter("id");
			voform.getConditions().add("id:"+id);
			//报文体组装发送
			TransServices transServices = (TransServices)this.getBean("transServices");
			CommonXMLEntity  commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(),"clearingaccts",voform.getQueryCd());
			if(!commonXMLEntity.getProcessCode().equals("000000")){
				throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
			}
			
			//设置分页信息。记录总条数
			if(commonXMLEntity.getRecordcount() == null){
				voform.setTotalSize(0);
			}else{
				voform.setTotalSize(Integer.parseInt(commonXMLEntity.getRecordcount()));
			}
		    setQueryPageValue(voform,true);		    
			List<NetDebitLimitWarningSet>  list = commonXMLEntity.getResults();			
			NetDebitLimitWarningSet po= list.get(0);			
			voform.setTotalSize(Integer.parseInt(commonXMLEntity.getRecordcount()));
		    setQueryPageValue(voform,true) ;
			
			this.setPageInfo(request,voform);
			request.setAttribute("entity", po);
			return mapping.findForward("gotoDetailPage");			
		} catch (Exception e) {
			 e.printStackTrace();
			return toFailedPage(mapping, request,e.getMessage());
		}
	}
	
	
}
