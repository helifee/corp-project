package com.cnaps.hvps.action.clearingAccount;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bancstone.action.BaseAction;
import com.bancstone.common.exception.PicpMessageException;
import com.bancstone.service.systemManage.impl.CommonServices;
import com.cnaps.coreservices.CommonXMLEntity;
import com.cnaps.coreservices.TransCodeEntity;
import com.cnaps.coreservices.TransServices;
import com.cnaps.hvps.form.clearingAccount.SAPSNetDebitLimitNotifyForm;
import com.cnaps.hvps.persistence.clearingAccount.SAPSNetDebitLimitNotify;
/**
 * 净借记限额管理通知
 * @author Administrator
 *
 */
public class SAPSNetDebitLimitNotifyAction extends BaseAction{
	
	
	
	/**
	 * 发送查询报文 净借记限管理通知查询
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward querySendxml(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		try{
			
			CommonServices commonService = (CommonServices)this.getBean("CommonServices");
			String workdate=request.getSession().getAttribute("workDate").toString();//工作日期
			String  msgId= commonService.getSEQMsgId(workdate);
            String business = request.getParameter("business");  // 标识 HVPS、BEPS、IBPS ……
			
			//界面查询条件
            SAPSNetDebitLimitNotifyForm voform = (SAPSNetDebitLimitNotifyForm) form;
            SAPSNetDebitLimitNotify po = voform.getPo();
            
            String transactionid = TransCodeEntity.QUERYCD;//功能代码
            commSetToXML(voform,request,transactionid);
			//commSetToXML(voform, "1510000000",business);
			voform.setMsgId(msgId);//报文标识号
			voform.setQueryCd("1510535601");			
			this.setFenYe(voform);
			TransServices transServices = (TransServices)this.getBean("transServices");
			commSetConditionsList(voform,po);
			CommonXMLEntity  commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(), "clearingaccts", voform.getQueryCd());
			if(!commonXMLEntity.getProcessCode().equals("000000"))

			{
				throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
			}
			voform.setTotalSize(Integer.parseInt(commonXMLEntity.getRecordcount()));
		    this.setQueryPageValue(voform,true);
			List<SAPSNetDebitLimitNotify>  List = commonXMLEntity.getResults();
			this.setPageInfo(request,voform);
			this.setObjectToRequest(request, "queryList",List);
//			request.setAttribute("business", business);
			request.setAttribute("condition", po);
			return mapping.findForward("queryList");
			
		} catch (Exception e) {
			 e.printStackTrace();
			return toFailedPage(mapping, request,e.getMessage());
		}
	}
	
	
	/**
	 * 设置报文的公共部分
	 * @param voform
	 */
	private void commSetToXML(SAPSNetDebitLimitNotifyForm voform)
	{
		voform.setSource("QDEB");
		voform.setDestination("HVPS");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		voform.setSendDateTime(sdf.format(new Date()));
		voform.setBusinesscode("1510935001");
		voform.setMsgcode("nets.356.001.01");
		


	}
	
	/**设置 传送到后台的XML 的条件List到FORM里
	 * @param voform
	 * @param hpo
	 */
	@SuppressWarnings("unchecked")
	private void commSetConditionsList(SAPSNetDebitLimitNotifyForm voform,SAPSNetDebitLimitNotify hpo)
	{
		
		
		if (!StringUtils.isEmpty(hpo.getMsgid())) 
		{
			voform.getConditions().add("msgid:"+hpo.getMsgid());
		}
		if (!StringUtils.isEmpty(hpo.getWorkdate())) 
		{
			voform.getConditions().add("workdt:"+hpo.getWorkdate());
		}

	}
	
	
	
	/**
	 * 发送明细报文
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	
	public ActionForward sendDetailMessage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		try{
			
			CommonServices commonService = (CommonServices)this.getBean("CommonServices");
			String workdate=request.getSession().getAttribute("workDate").toString();//工作日期
			String  msgId= commonService.getSEQMsgId(workdate);
			
			//界面查询条件
			SAPSNetDebitLimitNotifyForm voform = (SAPSNetDebitLimitNotifyForm) form;
			String transactionid = TransCodeEntity.QUERYCD;//功能代码
			commSetToXML(voform,request,transactionid);
			//commSetToXML(voform, "1510000000","CMCS");
			voform.setMsgId(msgId);//报文标识号
			voform.setQueryCd("1510535601");			
			this.setFenYe(voform);
 
			TransServices transServices = (TransServices)this.getBean("transServices");
			String id = request.getParameter("id");

			voform.getConditions().add("msgid:"+id);
			
			CommonXMLEntity  commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(), "clearingaccts", voform.getQueryCd());
			if(!commonXMLEntity.getProcessCode().equals("000000"))

			{
				throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
			}
			
			List<SAPSNetDebitLimitNotify>  list = commonXMLEntity.getResults();
			
			SAPSNetDebitLimitNotify po= list.get(0);
			
			
			voform.setTotalSize(Integer.parseInt(commonXMLEntity.getRecordcount()));
		    this.setQueryPageValue(voform,true);
			
			this.setPageInfo(request,voform);
			request.setAttribute("entity", po);
			return mapping.findForward("gotoDetailPage");
			
		} catch (Exception e) {
			 e.printStackTrace();
			return toFailedPage(mapping, request,e.getMessage());
		}
	}
	

}
