package com.cnaps.hvps.action.clearingAccount;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bancstone.action.BaseAction;
import com.bancstone.common.exception.PicpMessageException;
import com.bancstone.service.systemManage.impl.CommonServices;
import com.cnaps.coreservices.CommonXMLEntity;
import com.cnaps.coreservices.TransCodeEntity;
import com.cnaps.coreservices.TransServices;
import com.cnaps.hvps.form.clearingAccount.SAPSNetDebitLimitAmountSubForm;
import com.cnaps.hvps.form.info.RealTimeReversalForm;
import com.cnaps.hvps.persistence.clearingAccount.SAPSNetDebitLimitAmountSub;
import com.cnaps.hvps.persistence.info.RealTimeReversal;
/**
 * 净借记限额圈存资金调增
 * @author Administrator
 *
 */
public class SAPSNetDebitLimitAmountSubAction extends BaseAction {

	/**
	 * 客户发起业务发送给后台 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward sendMessage(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		
//		try {
//			
//			CommonServices commonService = (CommonServices)this.getBean("CommonServices");
//			String workdate=request.getSession().getAttribute("workDate").toString();//工作日期
//			String  msgId= commonService.getSEQMsgId(workdate);
//		TransServices transServices = (TransServices)this.getBean("transServices");
//		String path = request.getSession().getServletContext().getRealPath("/");
//		SAPSNetDebitLimitAmountSubForm voform = (SAPSNetDebitLimitAmountSubForm)form;
//		CommonXMLEntity commonXMLEntity;
//		String reslutmessage="";//处理信息
//		commSetToXML(voform);
//		voform.setMsgid(msgId);
//		System.out.println("发起清算行号"+voform.getAdjustamount());
//		//发送交易报文 并解析得到回应的信息
//		commonXMLEntity = transServices.transProcess(voform,"15105377","clearingaccts", "");
//		commonXMLEntity.getProcessCode();
//		if(!commonXMLEntity.getProcessCode().equals("000000"))
//		{
//			throw new PicpMessageException("错误码："+commonXMLEntity.getProcessCode()+"错误信息："+commonXMLEntity.getProcessDes());
//		}else
//		{
//			reslutmessage="处理成功码："+commonXMLEntity.getProcessCode()+";  净借记限额圈存资金调减发送成功！";
//		}
//		
//		 return toSuccessPage(mapping,request,reslutmessage);
//	
//		} catch (Exception e) {
//			// TODO: handle exception
//			return toFailedPage(mapping,request,e.getMessage());
//		}
		

		try{
			SAPSNetDebitLimitAmountSubForm voform = (SAPSNetDebitLimitAmountSubForm) form;
			//报文设置
			String transactionid = TransCodeEntity.SAPSNetDebitLimitAmountSubAction_sendMsg;//功能代码
			commSetToXML(voform,request,transactionid);
			//报文体组装发送
			TransServices transServices = (TransServices)this.getBean("transServices");
			CommonXMLEntity  commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(),"clearingaccts","");
			if(!commonXMLEntity.getProcessCode().equals("000000")){
				throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
			}
			return toSuccessPage(mapping,request,"处理成功码："+commonXMLEntity.getProcessCode()+";  净借记限额圈存资金调减发送成功！");

		} catch (Exception e) {
			e.printStackTrace(); 
			return toFailedPage(mapping, request,e.getMessage());
		}
	}
	
	
	
	
	/**
	 * 发送查询报文 净借记限额申请录入查询
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public ActionForward querySendxml(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
//		try{
//			
//			CommonServices commonService = (CommonServices)this.getBean("CommonServices");
//			String workdate=request.getSession().getAttribute("workDate").toString();//工作日期
//			String  msgId= commonService.getSEQMsgId(workdate);
//            String business = request.getParameter("business");  // 标识 HVPS、BEPS、IBPS ……
//			
//			//界面查询条件
//            SAPSNetDebitLimitAmountSubForm voform = (SAPSNetDebitLimitAmountSubForm) form;
//            SAPSNetDebitLimitAmountSub po = voform.getPo();
//            String transactionid = TransCodeEntity.QUERYCD;//功能代码
//            commSetToXML(voform,request,transactionid);
//			//commSetToXML(voform, "1510000000",business);
//			voform.setMsgId(msgId);//报文标识号
//			voform.setQueryCd("1510537702");			
//			this.setFenYe(voform);
// 
//			TransServices transServices = (TransServices)this.getBean("transServices");
//			commSetConditionsList(voform,po);
//			CommonXMLEntity  commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(), "clearingaccts", voform.getQueryCd());
//			if(!commonXMLEntity.getProcessCode().equals("000000"))
//
//			{
//				throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
//			}
//			voform.setTotalSize(Integer.parseInt(commonXMLEntity.getRecordcount()));
//		    this.setQueryPageValue(voform,true);
//			List<SAPSNetDebitLimitAmountSub>  List = commonXMLEntity.getResults();
//			this.setPageInfo(request,voform);
//			this.setObjectToRequest(request, "queryList",List);
////			request.setAttribute("business", business);
//			request.setAttribute("condition", po);
//			return mapping.findForward("queryList");
//			
//		} catch (Exception e) {
//			 e.printStackTrace();
//			return toFailedPage(mapping, request,e.getMessage());
//		}
		try{
			SAPSNetDebitLimitAmountSubForm voform = (SAPSNetDebitLimitAmountSubForm) form;
			SAPSNetDebitLimitAmountSub po = voform.getPo();
			//报文头设置

			String transactionid = TransCodeEntity.QUERYCD;//功能代码
			commSetToXML(voform,request,transactionid);
			//查询代码
			voform.setQueryCd(TransCodeEntity.SAPSNetDebitLimitAmountSubAction_sendMsg_query);
			//分页设置
			this.setFenYe(voform);
			//查询条件设置
			commSetConditionsList(voform,po);
			//报文体组装发送
			TransServices transServices = (TransServices)this.getBean("transServices");
			CommonXMLEntity  commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(),"clearingaccts",voform.getQueryCd());
			if(!commonXMLEntity.getProcessCode().equals("000000")){
				throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
			}
			//设置分页信息。记录总条数
			if(commonXMLEntity.getRecordcount() == null){
				voform.setTotalSize(0);
			}else{
				voform.setTotalSize(Integer.parseInt(commonXMLEntity.getRecordcount()));
			}
		    setQueryPageValue(voform,true);
			List<SAPSNetDebitLimitAmountSub>  list = commonXMLEntity.getResults();
			this.setPageInfo(request,voform);
			String business = request.getParameter("business");
			request.setAttribute("business", business);
			request.setAttribute("condition", po);
			this.setObjectToRequest(request, "queryList",list);
			return mapping.findForward("queryList");

		} catch (Exception e) {
			e.printStackTrace(); 
			return toFailedPage(mapping, request,e.getMessage());
		}
	}
	
	
	
	
	
	
	/**
	 * 设置报文的公共部分
	 * @param voform
	 */
	@SuppressWarnings("unused")
	private void commSetToXML(SAPSNetDebitLimitAmountSubForm voform)
	{
		voform.setSource("QDEB");
		voform.setDestination("HVPS");
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		voform.setSendDateTime(sdf.format(new Date()));
		voform.setBusinesscode("15109377");
		voform.setMsgcode("nets.377.001.01");
		


	}
	
	/**设置 传送到后台的XML 的条件List到FORM里  查询条件
	 * @param voform
	 * @param hpo
	 */
	@SuppressWarnings("unchecked")
	private void commSetConditionsList(SAPSNetDebitLimitAmountSubForm voform,SAPSNetDebitLimitAmountSub hpo)
	{
		
		
		if (!StringUtils.isEmpty(hpo.getMsgid())) 
		{
			voform.getConditions().add("msgid:"+hpo.getMsgid());
		}
		if (!StringUtils.isEmpty(hpo.getWorkdate())) 
		{
			voform.getConditions().add("workt:"+hpo.getWorkdate());
		}
		

	}
	
	
	
	
	/**
	 * 发送明细报文
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	
	@SuppressWarnings("unchecked")
	public ActionForward sendDetailMessage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
//		try{
//			
//			CommonServices commonService = (CommonServices)this.getBean("CommonServices");
//			String workdate=request.getSession().getAttribute("workDate").toString();//工作日期
//			String  msgId= commonService.getSEQMsgId(workdate);
//			
//			//界面查询条件
//			SAPSNetDebitLimitAmountSubForm voform = (SAPSNetDebitLimitAmountSubForm) form;
//			String transactionid = TransCodeEntity.QUERYCD;//功能代码
//			commSetToXML(voform,request,transactionid);
//			//commSetToXML(voform, "1510000000","HVPS");
//			voform.setMsgId(msgId);//报文标识号
//			voform.setQueryCd("1510537702");			
//			this.setFenYe(voform);
// 
//			TransServices transServices = (TransServices)this.getBean("transServices");
//			String id = request.getParameter("id");
//
//			voform.getConditions().add("id:"+id);
//			
//			CommonXMLEntity  commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(), "clearingaccts", voform.getQueryCd());
//			if(!commonXMLEntity.getProcessCode().equals("000000"))
//
//			{
//				throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
//			}
//			
//			List<SAPSNetDebitLimitAmountSub>  list = commonXMLEntity.getResults();
//			
//			SAPSNetDebitLimitAmountSub po= list.get(0);
//			
//			
//			voform.setTotalSize(Integer.parseInt(commonXMLEntity.getRecordcount()));
//		    this.setQueryPageValue(voform,true);
//			
//			this.setPageInfo(request,voform);
//			request.setAttribute("entity", po);
//			return mapping.findForward("gotoDetailPage");
//			
//		} catch (Exception e) {
//			 e.printStackTrace();
//			return toFailedPage(mapping, request,e.getMessage());
//		}
		try{
			SAPSNetDebitLimitAmountSubForm voform = (SAPSNetDebitLimitAmountSubForm) form;
			//报文头设置

			String transactionid = TransCodeEntity.QUERYCD;//功能代码
			commSetToXML(voform,request,transactionid);
			//查询代码
			voform.setQueryCd(TransCodeEntity.SAPSNetDebitLimitAmountSubAction_sendMsg_query);
			//分页设置
			this.setFenYe(voform);
			//查询条件设置
			String id = request.getParameter("id");
            voform.getConditions().add("id:"+id);
			//报文体组装发送
			TransServices transServices = (TransServices)this.getBean("transServices");
			CommonXMLEntity  commonXMLEntity = transServices.transProcess(voform, voform.getTransactionId(),"clearingaccts",voform.getQueryCd());
			if(!commonXMLEntity.getProcessCode().equals("000000")){
				throw new PicpMessageException("错误码：["+commonXMLEntity.getProcessCode()+"] 错误信息：["+commonXMLEntity.getProcessDes()+"]");
			}
			//设置分页信息。记录总条数
			if(commonXMLEntity.getRecordcount() == null){
				voform.setTotalSize(0);
			}else{
				voform.setTotalSize(Integer.parseInt(commonXMLEntity.getRecordcount()));
			}
		    setQueryPageValue(voform,true);
			List<SAPSNetDebitLimitAmountSub>  list = commonXMLEntity.getResults();
			SAPSNetDebitLimitAmountSub po= list.get(0);
			this.setPageInfo(request,voform);
			request.setAttribute("entity", po);
			return mapping.findForward("gotoDetailPage");

		} catch (Exception e) {
			e.printStackTrace(); 
			return toFailedPage(mapping, request,e.getMessage());
		}
	}
	
}
