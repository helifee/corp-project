package com.cnaps.hvps.action.cis;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bancstone.action.BaseAction;
import com.bancstone.common.exception.PicpMessageException;
import com.bancstone.common.utils.BeanUtil;
import com.cnaps.coreservices.CommonXMLEntity;
import com.cnaps.coreservices.TransCodeEntity;
import com.cnaps.coreservices.TransServices;
import com.cnaps.hvps.form.cis.ChequeholdForm;
import com.cnaps.hvps.form.cis.CisCommonReceiptForm;

/**
 * @包名   com.cnaps.hvps.action.cis
 * @文件名 ChequeholdAction.java
 * @作者   zcx
 * @创建日期 Sep 1, 2011
 * @版本 V 1.0
 * 支票截留
 */
public class ChequeholdAction extends BaseAction {
	public ActionForward chequehold(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		String sessionTockent = request.getSession().getAttribute("token") == null ? ""
				: (String) request.getSession().getAttribute("token");
		String requestTockent = request.getParameter("token") == null ? ""
				: request.getParameter("token");

		if (request.getParameter("token") != null
				&& !request.getParameter("token").equals("")) {
			if (!sessionTockent.equals(requestTockent)) {
				request.setAttribute("message", "不能重复提交表单数据！");
				return new ActionForward("/page/common/warnningMessage.jsp");

				// 如果session中的令牌与表单提交的隐藏表单域中的值一致
			} else {
				request.getSession().removeAttribute("token");
				request.getSession().setAttribute("token", "");// 清空session中的令牌的值

			}
		}

		//报文设置
		ChequeholdForm pvpform = (ChequeholdForm) form;
		String transactionid = TransCodeEntity.ChequeholdAction_chequehold;//功能代码
		pvpform.setPmtGrpId(pvpform.getPo().getPmtgrpid());//支付交易组号
		pvpform.getPo().setProposerAcct(pvpform.getPo().getCdtrAcct());//申请人账号
		String[] endrsrNm = request.getParameterValues("po.endrsrNm");
		pvpform.getPo().setEndrsrNm(endrsrNm);//背书人名称
		pvpform.getPo().setImageTp("jpg");//图片名称
		commSetToXML(pvpform, request, transactionid);
		//报文体组装发送
		CommonXMLEntity commonXMLEntity = null;
		try {

			TransServices transServices = (TransServices) this
					.getBean("transServices");

			commonXMLEntity = transServices.transProcess(pvpform,
					TransCodeEntity.ChequeholdAction_chequehold, "transaction",
					"");

			String reslutmessage = "";
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码："
						+ commonXMLEntity.getProcessCode() + "错误信息："
						+ commonXMLEntity.getProcessDes());
			} else {

				reslutmessage = "处理成功码：" + commonXMLEntity.getProcessCode()
						+ "处理成功！";

			}
			return toSuccessPage(mapping, request, reslutmessage + "支付交易组号是【"
					+ pvpform.getPmtGrpId() + "】");
		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}

	}

	public ActionForward billhold(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		String sessionTockent = request.getSession().getAttribute("token") == null ? ""
				: (String) request.getSession().getAttribute("token");
		String requestTockent = request.getParameter("token") == null ? ""
				: request.getParameter("token");

		if (request.getParameter("token") != null
				&& !request.getParameter("token").equals("")) {
			if (!sessionTockent.equals(requestTockent)) {
				request.setAttribute("message", "不能重复提交表单数据！");
				return new ActionForward("/page/common/warnningMessage.jsp");

				// 如果session中的令牌与表单提交的隐藏表单域中的值一致
			} else {
				request.getSession().removeAttribute("token");
				request.getSession().setAttribute("token", "");// 清空session中的令牌的值

			}
		}

		//报文设置
		ChequeholdForm pvpform = (ChequeholdForm) form;
		String transactionid = TransCodeEntity.ChequeholdAction_billhold;//功能代码
		pvpform.setPmtGrpId(pvpform.getBill().getPmtgrpid());//支付交易组号
		pvpform.getBill().setProposerAcct(pvpform.getBill().getCdtrAcct());//申请人账号
		String[] endrsrNm = request.getParameterValues("po.endrsrNm");
		pvpform.getBill().setEndrsrNm(endrsrNm);//背书人名称
		commSetToXML(pvpform, request, transactionid);
		//报文体组装发送
		
		try {

			TransServices transServices = (TransServices) this
					.getBean("transServices");

			CommonXMLEntity commonXMLEntity  = transServices.transProcess(pvpform,
					TransCodeEntity.ChequeholdAction_billhold, "transaction",
					"");
			String reslutmessage = "";
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码："
						+ commonXMLEntity.getProcessCode() + "错误信息："
						+ commonXMLEntity.getProcessDes());
			} else {

				reslutmessage = "处理成功码：" + commonXMLEntity.getProcessCode()
						+ "处理成功！";

			}
			return toSuccessPage(mapping, request, reslutmessage + "支付交易组号是【"
					+ pvpform.getPmtGrpId() + "】");
		} catch (Exception e) {

			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}

	}

	public ActionForward photo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("view");
	}

	///
	public ActionForward createCisCommonReceipt(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		// 报文头
		String name = request.getParameter("po.txid");
		System.out.println("name " + name);

		ChequeholdForm pvpform = (ChequeholdForm) form;
		String transactionid = TransCodeEntity.CisCommonReceiptAction_CisCommonReceiptAction;// 功能代码

		BeanUtil.copyProperties2Object(pvpform.getCis().getCc(), pvpform
				.getCis());
		commSetToXML(pvpform, request, transactionid);

		pvpform.setPmtGrpId(pvpform.getCis().getTxid());// 支付交易组号
		String reslutmessage = "";
		CommonXMLEntity commonXMLEntity;
		try {
			TransServices transServices = (TransServices) this
					.getBean("transServices");

			commonXMLEntity = transServices
					.transProcess(
							pvpform,
							TransCodeEntity.CisCommonReceiptAction_CisCommonReceiptAction,
							"transaction", "");

			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码："
						+ commonXMLEntity.getProcessCode() + "错误信息："
						+ commonXMLEntity.getProcessDes());
			} else {

				reslutmessage = "处理成功码：" + commonXMLEntity.getProcessCode()
						+ "处理成功！";

			}
			return toSuccessPage(mapping, request, reslutmessage + " 【" + "】");
		} catch (Exception e) {

			return toFailedPage(mapping, request, e.getMessage());
		}
	}
}
