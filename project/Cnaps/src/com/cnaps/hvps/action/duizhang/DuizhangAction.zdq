package com.cnaps.hvps.action.duizhang;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.record.HCenterRecord;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bancstone.action.BaseAction;
import com.bancstone.common.exception.PicpMessageException;
import com.bancstone.service.systemManage.impl.CommonServices;
import com.cnaps.coreservices.CommonXMLEntity;
import com.cnaps.coreservices.DuizhangService;
import com.cnaps.coreservices.TransCodeEntity;
import com.cnaps.coreservices.TransServices;
import com.cnaps.hvps.persistence.duizhang.Bepscollectedchckntfy;
import com.cnaps.hvps.persistence.duizhang.Bepsdetailchckreq;
import com.cnaps.hvps.persistence.duizhang.CoreAcctProcess;
import com.cnaps.hvps.persistence.duizhang.CoreDuizhangEntity;
import com.cnaps.hvps.persistence.duizhang.DetailsCheckApp;
import com.cnaps.hvps.persistence.duizhang.DuizhangEntity;
import com.cnaps.hvps.persistence.duizhang.Hvpscollectedchckntfy;
import com.cnaps.hvps.persistence.duizhang.Hvpsdetailchckreq;
import com.cnaps.hvps.persistence.duizhang.TotalAcctEntity;

/**
 * 对账处理类
 * 
 * @author dell
 * 
 */
public class DuizhangAction extends BaseAction {

	/**
	 * 查询核对对账通知
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward checkNotifyQuery(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String systemcd = request.getParameter("systemcd");
		String chckdt = request.getParameter("chckdt");
		DuizhangService ds = (DuizhangService) this.getBean("DuizhangService");
		List list = ds.queryChkNotify(systemcd, chckdt);
		this.setObjectToRequest(request, "queryList", list);
		request.setAttribute("chckdt", chckdt);

		// 返回的路径
		String mappingforward = "";
		if ("HVPS".equals(systemcd)) {
			mappingforward = "checkNotifyHvpsQuery";
		} else {
			mappingforward = "checkNotifyBepsQuery";
		}
		return mapping.findForward(mappingforward);
	}

	/**
	 * 查询大额核对通知明细
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward checkNotifyDetails(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String systemcd = request.getParameter("systemcd");
		String msgId = request.getParameter("msgId");
		DuizhangService ds = (DuizhangService) this.getBean("DuizhangService");
		List list = ds.queryChkNotifyByMsgId(systemcd, msgId);

		// 返回的路径
		String mappingforward = "";
		if ("HVPS".equals(systemcd)) {
			Hvpscollectedchckntfy entity = (Hvpscollectedchckntfy) list.get(0);
			request.setAttribute("entity", entity);
			mappingforward = "checkNotifyHvpsDetails";
		} else {
			Bepscollectedchckntfy entity = (Bepscollectedchckntfy) list.get(0);
			request.setAttribute("entity", entity);
			mappingforward = "checkNotifyBepsDetails";
		}
		return mapping.findForward(mappingforward);
	}

	/**
	 * 查询核对登记明细
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward checkDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String systemcd = request.getParameter("systemcd");
		String chckdt = request.getParameter("chckdt");
		DuizhangService ds = (DuizhangService) this.getBean("DuizhangService");
		List list = ds.queryChkNotifyByChckDt(systemcd, chckdt);
		this.setObjectToRequest(request, "queryList", list);
		
		// 返回的路径
		String mappingforward = "";
		if ("HVPS".equals(systemcd)) {
			mappingforward = "checkDetailsHvpsQuery";
		} else {
			mappingforward = "checkDetailsBepsQuery";
		}
		return mapping.findForward(mappingforward);
	}

	
	/**
	 * 汇总对账
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward checkTotalAcct(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String systemcd = request.getParameter("systemcd");
		String chckDt = request.getParameter("chckdt");// 对账日期
		DuizhangService ds = (DuizhangService) this.getBean("DuizhangService");
		
		List list = new ArrayList();
		// 返回的路径
		String mappingforward = "";
		if ("HVPS".equals(systemcd)) {//大额汇总查询
			list = ds.checkTotalAcctHVPS(chckDt);
			mappingforward = "checkTotalAcctHVPS";
		} else {//小额汇总查询
			list = ds.checkTotalAcctBEPS(chckDt);
			mappingforward = "checkTotalAcctBEPS";
		}
		this.setObjectToRequest(request, "queryList", list);
		request.setAttribute("chckdt", chckDt);
		return mapping.findForward(mappingforward);
	}

	/**
	 * 明细对账
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward checkTotalAcctDetails(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String msgTpCd=request.getParameter("msgTpCd");
		if(null!=msgTpCd && msgTpCd.indexOf("}")>=0){
			msgTpCd=msgTpCd.substring(msgTpCd.length()-1, msgTpCd.length());
		};
		String systemcd = request.getParameter("systemcd");//
		String chckDt = request.getParameter("chckdt");// 对账日期
		String pmtTp = request.getParameter("pmtTp");// 业务类型编码
		DuizhangService ds = (DuizhangService) this.getBean("DuizhangService");
		TotalAcctEntity entity = new TotalAcctEntity();
		
		// 返回的路径
		String mappingforward="";
		if("HVPS".equals(systemcd)){	
			entity = ds.checkTotalAcctDetailsHVPS(msgTpCd,pmtTp, chckDt);
			entity.setMsgTpCd(msgTpCd);
			mappingforward = "totalAcctDetailsHVPS";
		}else{
			entity = ds.checkTotalAcctDetailsBEPS(pmtTp, chckDt);
			mappingforward = "totalAcctDetailsBEPS";
		}
		
		request.setAttribute("entity", entity);
		request.setAttribute("chckdt", chckDt);
		request.setAttribute("pmtTp", pmtTp);

		
		
		return mapping.findForward(mappingforward);
	}

	/**
	 * 发送大额明细核对申请
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward sendDetailsCheckHvps(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String chckDt = request.getParameter("chckdt");// 对账日期
		String pmtTp = request.getParameter("pmttp");// 业务类型编码
		String direction = request.getParameter("direction");// 来往标识
		String prcSts = request.getParameter("prcSts");// 业务状态
		try {
			CommonServices commonService = (CommonServices) this
					.getBean("CommonServices");
			String workdate = request.getSession().getAttribute("workDate")
					.toString();// 工作日期
			String msgId = commonService.getSEQMsgId(workdate);

			DetailsCheckApp entity = new DetailsCheckApp();
			entity.setSource("CNAPS2");
			entity.setDestination("hvps.712.001.01");
			entity.setTransactionId(TransCodeEntity.SENDDETAILSCHECKMSGHVPS);// 交易代码
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			entity.setSendDateTime(sdf.format(new Date()));
			entity.setMsgId(msgId);
			entity.setChckdt(chckDt);
			entity.setPmttp(pmtTp);
			entity.setDirection(direction);
			entity.setPrcSts(prcSts);
			TransServices transServices = (TransServices) this
					.getBean("transServices");
			CommonXMLEntity commonXMLEntity = transServices.transProcess(
					entity, entity.getTransactionId(), "transaction", "");
			String reslutmessage = "";
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码："
						+ commonXMLEntity.getProcessCode() + "错误信息："
						+ commonXMLEntity.getProcessDes());
			} else {
				reslutmessage = "处理成功码：" + commonXMLEntity.getProcessCode()
						+ "业务核对申请发送成功！";
			}
			return toSuccessPage(mapping, request, reslutmessage);

		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
	}
	/**
	 * 发送明细核对申请
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward sendDetailsDownloadHvps(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String orgnlmsgid = request.getParameter("orgnlmsgid");//原报文标识号
		String orgnlinstgpty = request.getParameter("orgnlinstgpty");//原发起参与机构
		String orgnlmsgtpcd = request.getParameter("orgnlmsgtpcd");// 原报文类型
		String sndrcvtp = request.getParameter("sndrcvtp");// 来往标识
		try {
			CommonServices commonService = (CommonServices) this
					.getBean("CommonServices");
			String workdate = request.getSession().getAttribute("workDate")
					.toString();// 工作日期
			String msgId = commonService.getSEQMsgId(workdate);

			DetailsCheckApp entity = new DetailsCheckApp();
			entity.setSource("CNAPS2");
			entity.setDestination("hvps.714.001.01");
			entity.setTransactionId(TransCodeEntity.SENDDETAILSDOWNLOADMSGHVPS);// 交易代码
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			entity.setSendDateTime(sdf.format(new Date()));
			entity.setMsgId(msgId);
			entity.setOrgnlmsgid(orgnlmsgid);
			entity.setOrgnlinstgpty(orgnlinstgpty);
			entity.setDirection(sndrcvtp);
			entity.setOrgnlmsgtpcd(orgnlmsgtpcd);
			TransServices transServices = (TransServices) this
					.getBean("transServices");
			CommonXMLEntity commonXMLEntity = transServices.transProcess(
					entity, entity.getTransactionId(), "transaction", "");
			String reslutmessage = "";
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码："
						+ commonXMLEntity.getProcessCode() + "错误信息："
						+ commonXMLEntity.getProcessDes());
			} else {
				reslutmessage = "处理成功码：" + commonXMLEntity.getProcessCode()
						+ "业务明细下载申请发送成功！";
			}
			return toSuccessPage(mapping, request, reslutmessage);

		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
	}
	/**
	 * 发送明细核对申请
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward sendDetailsDownloadBeps(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String orgnlmsgid = request.getParameter("orgnlmsgid");//原报文标识号
		String orgnlinstgpty = request.getParameter("orgnlinstgpty");//原发起参与机构
		String orgnlmsgtpcd = request.getParameter("orgnlmsgtpcd");// 原报文类型
		String sndrcvtp = request.getParameter("sndrcvtp");// 来往标识
		try {
			CommonServices commonService = (CommonServices) this
					.getBean("CommonServices");
			String workdate = request.getSession().getAttribute("workDate")
					.toString();// 工作日期
			String msgId = commonService.getSEQMsgId(workdate);

			DetailsCheckApp entity = new DetailsCheckApp();
			entity.setSource("CNAPS2");
			entity.setDestination("hvps.724.001.01");
			entity.setTransactionId(TransCodeEntity.SENDDETAILSDOWNLOADMSGBEPS);// 交易代码
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			entity.setSendDateTime(sdf.format(new Date()));
			entity.setMsgId(msgId);
			entity.setOrgnlmsgid(orgnlmsgid);
			entity.setOrgnlinstgpty(orgnlinstgpty);
			entity.setDirection(sndrcvtp);
			entity.setOrgnlmsgtpcd(orgnlmsgtpcd);
			TransServices transServices = (TransServices) this
					.getBean("transServices");
			CommonXMLEntity commonXMLEntity = transServices.transProcess(
					entity, entity.getTransactionId(), "transaction", "");
			String reslutmessage = "";
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码："
						+ commonXMLEntity.getProcessCode() + "错误信息："
						+ commonXMLEntity.getProcessDes());
			} else {
				reslutmessage = "处理成功码：" + commonXMLEntity.getProcessCode()
						+ "业务明细下载申请发送成功！";
			}
			return toSuccessPage(mapping, request, reslutmessage);

		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
	}
	
	/**
	 * 发送小额明细核对申请
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward sendDetailsCheckBeps(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String chckDt = request.getParameter("chckdt");// 对账日期
		String pmtTp = request.getParameter("pmttp");// 业务类型编码
		String direction = request.getParameter("direction");// 来往标识
		String prcSts = request.getParameter("prcSts");// 业务状态
		String netgRnd = request.getParameter("netgRnd");//轧差场次
		try {
			CommonServices commonService = (CommonServices) this
					.getBean("CommonServices");
			String workdate = request.getSession().getAttribute("workDate")
					.toString();// 工作日期
			String msgId = commonService.getSEQMsgId(workdate);

			DetailsCheckApp entity = new DetailsCheckApp();
			entity.setSource("CNAPS2");
			entity.setDestination("beps.722.001.01");
			entity.setTransactionId(TransCodeEntity.SENDDETAILSCHECKMSGBEPS);// 交易代码
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			entity.setSendDateTime(sdf.format(new Date()));
			entity.setMsgId(msgId);
			entity.setChckdt(chckDt);
			entity.setPmttp(pmtTp);
			entity.setDirection(direction);
			entity.setPrcSts(prcSts);
			entity.setNetgRnd(netgRnd);
			TransServices transServices = (TransServices) this
					.getBean("transServices");
			CommonXMLEntity commonXMLEntity = transServices.transProcess(
					entity, entity.getTransactionId(), "transaction", "");
			String reslutmessage = "";
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码："
						+ commonXMLEntity.getProcessCode() + "错误信息："
						+ commonXMLEntity.getProcessDes());
			} else {
				reslutmessage = "处理成功码：" + commonXMLEntity.getProcessCode()
						+ "业务核对申请发送成功！";
			}
			return toSuccessPage(mapping, request, reslutmessage);

		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
	}
	

	/**
	 * 明细核对申请查询
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward queryDetailsCheck(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String systemcd = request.getParameter("systemcd");
		String chckdt = request.getParameter("chckdt");
		DuizhangService ds = (DuizhangService) this.getBean("DuizhangService");
		List list = ds.queryDetailsChkApp(systemcd, chckdt);
		this.setObjectToRequest(request, "queryList", list);
		request.setAttribute("chckdt", chckdt);

		// 返回的路径
		String mappingforward = "";
		if ("HVPS".equals(systemcd)) {
			mappingforward = "detailscheckAppHvpsQuery";
		} else {
			mappingforward = "detailscheckAppBepsQuery";
		}
		return mapping.findForward(mappingforward);
	}
	
	/**
	 * 包明细下载申请查询
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward queryDetailsDownload(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String systemcd = request.getParameter("systemcd");
		String chckdt = request.getParameter("chckdt");
		DuizhangService ds = (DuizhangService) this.getBean("DuizhangService");
		List list = ds.queryDetailsDownloadApp(systemcd, chckdt);
		this.setObjectToRequest(request, "queryList", list);
		request.setAttribute("chckdt", chckdt);

		// 返回的路径
		String mappingforward = "";
		if ("HVPS".equals(systemcd)) {
			mappingforward = "detailsDownloadHvpsQuery";
		} else {
			mappingforward = "detailsDownloadBepsQuery";
		}
		return mapping.findForward(mappingforward);
	}
	
	/**
	 * 包明细下载申请查询
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward detailsDownloadDetl(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String systemcd = request.getParameter("systemcd");
		String msgid = request.getParameter("msgId");
		DuizhangService ds = (DuizhangService) this.getBean("DuizhangService");
		List list = ds.queryDetailsDownloadDetl(systemcd, msgid);
		this.setObjectToRequest(request, "queryList", list);
		

		// 返回的路径
		String mappingforward = "";
		if ("HVPS".equals(systemcd)) {
			mappingforward = "detailsDownloadDetlHvps";
		} else {
			mappingforward = "detailsDownloadDetlBeps";
		}
		return mapping.findForward(mappingforward);
	}
	
	/**
	 * 明细核对申请查询
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward detailsCheckDetl(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String systemcd = request.getParameter("systemcd");
		String msgId = request.getParameter("msgId");
		DuizhangService ds = (DuizhangService) this.getBean("DuizhangService");
		List list = ds.queryDetailsChkAppByMsgId(systemcd, msgId);
		
		// 返回的路径
		String mappingforward = "";
		if ("HVPS".equals(systemcd)) {
			Hvpsdetailchckreq entity = new Hvpsdetailchckreq();
			if(list.size()>0){
				 entity = (Hvpsdetailchckreq) list.get(0);
			}
			request.setAttribute("entity", entity);
			mappingforward = "detailsCheckDetlHvps";
		} else {
			Bepsdetailchckreq entity = new Bepsdetailchckreq();
			if(list.size()>0){
				 entity = (Bepsdetailchckreq) list.get(0);
			}
			request.setAttribute("entity", entity);
			mappingforward = "detailsCheckDetlBeps";
		}
		return mapping.findForward(mappingforward);
	}
	
	
	/**
	 * 明细核对申请查询
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward detailsCheckDuizhangDetl(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String systemcd = request.getParameter("systemcd");
		String msgId = request.getParameter("msgId");
		DuizhangService ds = (DuizhangService) this.getBean("DuizhangService");
		List list = ds.queryDetailsChkRecordByMsgId(systemcd, msgId);
		
		this.setObjectToRequest(request, "queryList", list);

		// 返回的路径
		String mappingforward = "";
		if ("HVPS".equals(systemcd)) {
			mappingforward = "detailsCheckRecHvps";
		} else {
			mappingforward = "detailsCheckRecBeps";
		}
		return mapping.findForward(mappingforward);
	}
	
	/**
	 * 跳转到业务明细核对界面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward gotoDetailsCheck(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String systemcd = request.getParameter("systemcd");
		String id = request.getParameter("id");
		String sndrcvtp = request.getParameter("sndrcvtp");//发送来往标识
		String chckdt = request.getParameter("chckdt");//对账日期
		String pmttp = request.getParameter("pmttp");//大额-业务类型编码；小额-报文类型编码
		String netgrnd = request.getParameter("netgrnd");//小额轧差场次
		DuizhangService ds = (DuizhangService) this.getBean("DuizhangService");
		List list = ds.checkDetailsAcctById(systemcd, id);
		
		this.setObjectToRequest(request, "queryList", list);
		request.setAttribute("sndrcvtp",sndrcvtp);
		request.setAttribute("chckdt",chckdt);
		request.setAttribute("pmttp",pmttp);
		request.setAttribute("netgrnd",netgrnd);
		// 返回的路径
		String mappingforward = "";
		if ("HVPS".equals(systemcd)) {
			mappingforward = "gotoDetailsCheckHvps";
		} else {
			mappingforward = "gotoDetailsCheckBeps";
		}
		return mapping.findForward(mappingforward);
	}
	
	
	/**
	 * 对账异常处理
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward duizhangExceptionproc(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String systemcd = request.getParameter("systemcd");
		String chckdt = request.getParameter("chckdt");
		DuizhangService ds = (DuizhangService) this.getBean("DuizhangService");
		TotalAcctEntity entity = ds.queryExceptionPrco(chckdt, systemcd);
		request.setAttribute("entity", entity);
		request.setAttribute("chckdt", chckdt);

		// 返回的路径
		String mappingforward = "";
		if ("HVPS".equals(systemcd)) {
			mappingforward = "exceptionProcHvpsQuery";
		} else {
			mappingforward = "exceptionProcBepsQuery";
		}
		return mapping.findForward(mappingforward);
	}
	/**
	 * 对账异常处理明细
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward duizhangExceptionprocDetal(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String systemcd = request.getParameter("systemcd");//系统编码
		String chckdt = request.getParameter("chckdt");//对账日期
		String pmttp = request.getParameter("pmttp");//大额-业务类型编码；小额-报文类型编码
		DuizhangService ds = (DuizhangService) this.getBean("DuizhangService");
		
		List list= ds.queryExceptionPrcoDetl(chckdt, pmttp, systemcd);
		
		this.setObjectToRequest(request, "queryList", list);
		request.setAttribute("chckdt", chckdt);

		// 返回的路径
		String mappingforward = "";
		if ("HVPS".equals(systemcd)) {
			mappingforward = "exceptionProcHvpsDetl";
		} else {
			mappingforward = "exceptionProcBepsDetl";
		}
		return mapping.findForward(mappingforward);
	}
	
	
	/**
	 * 核心对账
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward duizhangCoreAcct(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String chckDt = request.getParameter("chckdt");//对账日期
		DuizhangService ds = (DuizhangService) this.getBean("DuizhangService");
		List list= ds.checkCoreAcct(chckDt);
		this.setObjectToRequest(request, "queryList", list);
		request.setAttribute("chckdt", chckDt);

		// 返回的路径
		String mappingforward = "coreCheckAcct";
		
		return mapping.findForward(mappingforward);
	}
	
	/**
	 * 
	 * 发送核心对账申请
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward sendCoreAcctApp(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String chckDt = request.getParameter("chckdt");//对账日期
		DuizhangService ds = (DuizhangService) this.getBean("DuizhangService");
		TransServices transServices = (TransServices) this.getBean("transServices");
		request.setAttribute("chckdt", chckDt);

		CommonServices commonService = (CommonServices) this.getBean("CommonServices");
		String workdate = request.getSession().getAttribute("workDate").toString();// 工作日期
		String msgId = commonService.getSEQMsgId(workdate);
		
		DetailsCheckApp entity = new DetailsCheckApp();
		entity.setSource("CNAPS2");
		entity.setDestination("CORE");
		entity.setTransactionId("9000");//功能代码
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
		entity.setSendDateTime(sdf.format(new Date()));
		entity.setMsgId(msgId);
		entity.setChckdt(chckDt);//对账日期
		
		String reslutmessage = "";// 处理信息
		try {
			CommonXMLEntity commonXMLEntity =transServices.busCoreProcess(entity,TransCodeEntity.CORE_DUIZHANG ,"CORE");
			if (!commonXMLEntity.getProcessCode().equals("PR0000")) {
				throw new PicpMessageException("错误码："
						+ commonXMLEntity.getProcessCode() + "错误信息："
						+ commonXMLEntity.getProcessDes());
			} else {
				//对账文件名
				String remotefilepath  = commonXMLEntity.getAddtlInf();
				boolean result = ds.downloadCoreFile(remotefilepath);
				
				if(result){
					reslutmessage = "处理成功码：" + commonXMLEntity.getProcessCode()
					+ "对账申请发送成功！";
				}else{
					reslutmessage = "处理成功码：" + commonXMLEntity.getProcessCode()
					+ "对账文件下载失败，请重新发送";
				}
			}
			
			// 返回的路径
			
			return toSuccessPage(mapping, request, reslutmessage);
		} catch (PicpMessageException e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
	}
	
	/**
	 * 
	 * 补发核心对账
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward sendCoreBuFaApp(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String frontno = request.getParameter("frontno");//前台流水号

		
		DuizhangService ds = (DuizhangService) this.getBean("DuizhangService");
		CoreAcctProcess entity = ds.queryCoreAcctByFrontno(frontno);
		entity.setSource("CNAPS2");
		entity.setDestination("CORE");
		entity.setTransactionId("8000");//功能代码
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
		entity.setSendDateTime(sdf.format(new Date()));
		
		CommonServices commonService = (CommonServices) this.getBean("CommonServices");
		String workdate = request.getSession().getAttribute("workDate").toString();// 工作日期
		String msgId = commonService.getSEQMsgId(workdate);
		entity.setMsgId(msgId);
		
		String reslutmessage = "";// 处理信息
		try {
			TransServices transServices = (TransServices) this.getBean("transServices");
			CommonXMLEntity commonXMLEntity =transServices.busCoreProcess(entity, TransCodeEntity.CORE_RECORD,"BACKSERVER");
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码："
						+ commonXMLEntity.getProcessCode() + "错误信息："
						+ commonXMLEntity.getProcessDes());
			} else {
				reslutmessage = "处理成功码：" + commonXMLEntity.getProcessCode()
					+ "核心补发记账发送成功！";
			}
			
			// 返回的路径
			
			return toSuccessPage(mapping, request, reslutmessage);
		} catch (PicpMessageException e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
	}
	
	/**
	 * 
	 * 冲正核心对账
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward sendCoreChongzhengApp(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String backno = request.getParameter("backno");//对账日期
		
		DuizhangService ds = (DuizhangService) this.getBean("DuizhangService");
		CoreAcctProcess entity = ds.queryCoreAcctByBackno(backno);
		entity.setSource("CNAPS2");
		entity.setDestination("CORE");
		entity.setTransactionId("8000");//功能代码
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
		entity.setSendDateTime(sdf.format(new Date()));
		
		CommonServices commonService = (CommonServices) this.getBean("CommonServices");
		String workdate = request.getSession().getAttribute("workDate").toString();// 工作日期
		String msgId = commonService.getSEQMsgId(workdate);
		entity.setMsgId(msgId);
		String reslutmessage = "";// 处理信息
		try {
			TransServices transServices = (TransServices) this.getBean("transServices");
			CommonXMLEntity commonXMLEntity =transServices.busCoreProcess(entity, TransCodeEntity.CORE_RECORD,"BACKSERVER");
			if (!commonXMLEntity.getProcessCode().equals("PR0000")) {
				throw new PicpMessageException("错误码："
						+ commonXMLEntity.getProcessCode() + "错误信息："
						+ commonXMLEntity.getProcessDes());
			} else {
				//对账文件名
				String remotefilepath  = commonXMLEntity.getAddtlInf();
				boolean result = ds.downloadCoreFile(remotefilepath);
				
				if(result){
					reslutmessage = "处理成功码：" + commonXMLEntity.getProcessCode()
					+ "对账申请发送成功！";
				}else{
					reslutmessage = "处理成功码：" + commonXMLEntity.getProcessCode()
					+ "对账文件下载失败，请重新发送";
				}
			}
			
			// 返回的路径
			
			return toSuccessPage(mapping, request, reslutmessage);
		} catch (PicpMessageException e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
	}
}
