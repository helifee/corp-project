package com.cnaps.hvps.action.draft;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bancstone.action.BaseAction;
import com.bancstone.common.exception.PicpMessageException;
import com.bancstone.common.utils.BeanUtil;
import com.bancstone.service.systemManage.impl.CommonServices;
import com.cnaps.coreservices.BankdraftService;
import com.cnaps.coreservices.CommonXMLEntity;
import com.cnaps.coreservices.EncodeMsgEntity;
import com.cnaps.coreservices.TransCodeEntity;
import com.cnaps.coreservices.TransServices;
import com.cnaps.hvps.form.transfer.TransProcessForm;
import com.cnaps.hvps.form.transfer.TransferOfTransitForm;
import com.cnaps.hvps.persistence.draft.ApplyCapital;
import com.cnaps.hvps.persistence.transfer.TransProcessEntity;
import com.cnaps.hvps.persistence.transfer.TransferOfTransit;

/**
 * @author zhangxj
 * 方法列表：
 * 	页面跳转
 * 	汇票签发
 * 	汇票编押	
 * 	汇票核押
 * 	
 *
 */
public class MovefundAction extends BaseAction {

	/**
	 * 核押
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward decodeMsg(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TransferOfTransitForm voform = (TransferOfTransitForm) form;
		EncodeMsgEntity eme = voform.getEme();
		String returnMsg = null;
		TransServices transServices = (TransServices) this
				.getBean("transServices");
		try {

			returnMsg = transServices.sendEncodeMsg(eme);
			if (returnMsg.substring(0, 4).equals("0000")) {
				return toSuccessPage(mapping, request, "发送银行汇票核押成功！",
						null, "HVPS", "");
			}
			else{
				return toFailedPage(mapping, request, "发送银行汇票核押失败！错误码:"
						+returnMsg.substring(0, 4));
			}
		} catch (PicpMessageException e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}

	}

	/**
	 * 编押
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward encodeMsg(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		TransferOfTransitForm voform = (TransferOfTransitForm) form;
		EncodeMsgEntity eme = voform.getEme();
		String returnMsg = null;
		TransServices transServices = (TransServices) this
				.getBean("transServices");
		try {

			returnMsg = transServices.sendEncodeMsg(eme);
			if (returnMsg.substring(0, 4).equals("0000")) {
				return toSuccessPage(mapping, request, "发送银行汇票编押成功！汇票密押:" + returnMsg.substring(4, returnMsg.length()),
						null, "HVPS", "");
			}
			else{
				return toFailedPage(mapping, request, "发送银行汇票编押失败！错误码:"+returnMsg.substring(0, 4));
			}
		} catch (PicpMessageException e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
	}

	/**
	 * 生成支付组号和报文标识号 再进入录入页面
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */

	public ActionForward createMsgid(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String str = request.getParameter("id");
		CommonServices commonService = (CommonServices) this
				.getBean("CommonServices");
		String workdate = request.getSession().getAttribute("workDate")
				.toString();// 工作日期
		String msgId = commonService.getSEQTransId(workdate);

		TransferOfTransit entity = new TransferOfTransit();
		entity.setPaymentno(msgId);
		request.setAttribute("entity", entity);
		if (str.equals("01")) {
			return mapping.findForward("createMsgid01");
		} else if (str.equals("02")) {
			return mapping.findForward("createMsgid02");
		} else if (str.equals("03")) {
			return mapping.findForward("createMsgid03");
		} else {
			return mapping.findForward("createMsgid");
		}

	}

	/**
	 * 客户发起业务发送给后台
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward sendMessage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		try {
			TransferOfTransitForm voform = (TransferOfTransitForm) form;
			//报文头collectiondate
			voform.setIssuedt(new SimpleDateFormat("yyyy-MM-dd")
					.format(new Date()));//签发日期
			voform.setIssueracct(voform.getDbtracctid());//
			voform.setIssuernm(voform.getDbtrnm());//
			 //voform.setRcvrnm(voform.getDbtrnm());//

			String transactionid = TransCodeEntity.SEND_MovefundAction;//功能代码
			commSetToXML(voform, request, transactionid);

			//报文体
			//				String signmd = request.getParameter("signmd");//得到签发类型（现金 转账 卡折 总账）
			//				voform.setSignmd(signmd);
			//voform.setSignmd("03");

System.out.println(voform.getCashpaybrnch() + " <== 现金兑付行行号===============================银行汇票签发=========================================");

			TransferOfTransit tot = new TransferOfTransit();

			//去除为空的字段

			//将voform中同名字段值复制到po中
			BeanUtil.copyProperties2Object(tot, voform);

			//处理组装报文，发送解析
			TransServices transServices = (TransServices) this
					.getBean("transServices");
			CommonXMLEntity commonXMLEntity = null;
			commonXMLEntity = transServices.transProcess(tot,
					TransCodeEntity.SEND_MovefundAction, "transaction", "");

			// 发送交易报文 并解析得到回应的信息
			String reslutmessage = "";// 处理信息
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码："
						+ commonXMLEntity.getProcessCode() + "错误信息："
						+ commonXMLEntity.getProcessDes());
			} else {
				reslutmessage = "处理成功码：" + commonXMLEntity.getProcessCode()
						+ "签发银行汇票成功！";
			}

			return toSuccessPage(mapping, request, reslutmessage, voform
					.getPaymentno(), voform.getSystemcd(), "");

		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
	}

	/**
	 * 全额兑付通知查询--已废弃
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	@SuppressWarnings( { "static-access", "unchecked" })
	public ActionForward querydraftallMsg(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		try {
			BankdraftService bankdraftService = (BankdraftService) this
					.getBean("BankdraftService");
			TransProcessForm voform = (TransProcessForm) form;
			TransProcessEntity TransProcess = voform.getPo();
			List draftallList = new ArrayList();
			List draftallTempList = new ArrayList();
			ApplyCapital entity = null;

			// 根据FORM查询符合条件的数据
			this.setPageValue(voform, true);
			draftallTempList = bankdraftService.getDraftallList(voform);

			Object obj[] = null;
			for (int i = 0; i < draftallTempList.size(); i++) {
				obj = (Object[]) draftallTempList.get(i);
				;
				entity = new ApplyCapital();

				entity.setIssuedt(obj[0] == null ? "" : obj[0].toString());//出票日期        IssueDt
				entity.setNotesno(obj[1] == null ? "" : obj[1].toString());//票据号码        NotesNo
				entity.setBillseal(obj[2] == null ? "" : obj[2].toString());//汇票密押        BillSeal
				entity.setBilltp(obj[3] == null ? "" : obj[3].toString());//汇票种类        BillTp
				entity.setIssueamt(obj[4] == null ? "" : obj[4].toString());//出票金额        IssueAmt
				entity.setIssuerbk(obj[5] == null ? "" : obj[5].toString());//汇票签发行行号  IssuerBk
				entity.setHolderbk(obj[6] == null ? "" : obj[6].toString());//最后持票人开户行HolderBk
				entity.setHolderacct(obj[7] == null ? "" : obj[7].toString());//最后持票人账号  HolderAcct
				entity.setRmnngamt(obj[8] == null ? "" : obj[8].toString());//多余金额        RmnngAmt
				entity.setActntryamt(obj[9] == null ? "" : obj[9].toString());//实际结算金额    ActNtryAmt
				entity.setPaydt(obj[10] == null ? "" : obj[10].toString());//提示付款日期    PayDt
				draftallList.add(entity);

			}

			request.setAttribute("draftallList", draftallList);
			this.setPageInfo(request, voform);
			return mapping.findForward("draftallList");
		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
	}

}
