package com.cnaps.hvps.action.draft;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.bancstone.action.BaseAction;
import com.bancstone.common.exception.PicpMessageException;
import com.bancstone.service.systemManage.impl.CommonServices;
import com.cnaps.coreservices.CommonXMLEntity;
import com.cnaps.coreservices.TransCodeEntity;
import com.cnaps.coreservices.TransServices;
import com.cnaps.hvps.form.draft.ApplyCapitalForm;
import com.cnaps.hvps.persistence.draft.ApplyCapital;

/**
 * 申请清算银行汇票资金
 * 
 * @author Administrator
 * 
 */
public class ApplyCapitalAction extends BaseAction {

	/**
	 * 进入页面
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */

	 public ActionForward createMsgid(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
		 
		 CommonServices commonService = (CommonServices) this.getBean("CommonServices");
			String workdate = request.getSession().getAttribute("workDate").toString();// 工作日期
			String msgId = commonService.getSEQTransId(workdate);
			
			ApplyCapitalForm entity = new ApplyCapitalForm();
			entity.setPmtGrpId(msgId);
			request.setAttribute("entity", entity);
			
		  return mapping.findForward("createMsgid");
			
			
		}
	
	

	/** 发送申请清算银行汇票资金的报文
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward sendMessage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		ApplyCapitalForm voform = (ApplyCapitalForm) form;

		try {
			String transactionid = TransCodeEntity.SEND_APPLYCAPITAL;// 功能代码
			commSetToXML(voform, request, transactionid);
			// 处理组装报文，发送解析
			TransServices transServices = (TransServices) this
					.getBean("transServices");
			CommonXMLEntity commonXMLEntity = null;
			commonXMLEntity = transServices.transProcess(voform,
					TransCodeEntity.SEND_APPLYCAPITAL, "transaction", "");

			// 发送交易报文 并解析得到回应的信息
			String reslutmessage = "";// 处理信息
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码："
						+ commonXMLEntity.getProcessCode() + "错误信息："
						+ commonXMLEntity.getProcessDes());
			} else {
				reslutmessage = "发送申请清算银行汇票资金成功！";
			}
			return toSuccessPage(mapping,request,reslutmessage+commonXMLEntity.getMessageId());
			//return toSuccessPage(mapping, request, reslutmessage,"","","");

		} catch (Exception e) {
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}

	}
	
	
	
	/**
	 * 查询银行汇票申请资金
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	
	public ActionForward querySendxml(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		try {
		
			CommonServices commonService = (CommonServices) this
					.getBean("CommonServices");
			String workdate = request.getSession().getAttribute("workDate")
					.toString();// 工作日期
			String msgId = commonService.getSEQMsgId(workdate);


			// 界面查询条件
			ApplyCapitalForm voform = (ApplyCapitalForm) form;
			ApplyCapital po = voform.getPo();
			commSetToXML(voform, TransCodeEntity.QUERYCD, "CMCS");
			voform.setMsgId(msgId);// 报文标识号
			voform.setQueryCd(TransCodeEntity.APPLYCAPITAL_QUERYCD);
			this.setFenYe(voform);

			TransServices transServices = (TransServices) this
					.getBean("transServices");

			commSetConditionsList(voform, po);
			CommonXMLEntity commonXMLEntity = transServices.transProcess(
					voform, voform.getTransactionId(), "transaction", voform
							.getQueryCd());
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}
			voform.setTotalSize(Integer.parseInt(commonXMLEntity
					.getRecordcount()));
			this.setQueryPageValue(voform, true);
			List List = commonXMLEntity.getResults();
			this.setPageInfo(request, voform);
			this.setObjectToRequest(request, "queryList", List);
			request.setAttribute("condition", po);
		
				return mapping.findForward("queryList");//查询列表页面
				
		} catch (Exception e) {
			// TODO: handle exception
			
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
			
	}
	
	public ActionForward queryDetailById(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		try {
		
			CommonServices commonService = (CommonServices) this
					.getBean("CommonServices");
			String workdate = request.getSession().getAttribute("workDate")
					.toString();// 工作日期
			String msgId = commonService.getSEQMsgId(workdate);


			// 界面查询条件
			ApplyCapitalForm voform = (ApplyCapitalForm) form;
			commSetToXML(voform, TransCodeEntity.QUERYCD, "CMCS");
			voform.setMsgId(msgId);// 报文标识号
			voform.setQueryCd(TransCodeEntity.APPLYCAPITAL_QUERYCD);
			this.setFenYe(voform);

			TransServices transServices = (TransServices) this
					.getBean("transServices");

			//commSetConditionsList(voform, po);
			String id=request.getParameter("detailid");
			voform.getConditions().add("id:"+id);
			CommonXMLEntity commonXMLEntity = transServices.transProcess(
					voform, voform.getTransactionId(), "transaction", voform
							.getQueryCd());
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}
			voform.setTotalSize(Integer.parseInt(commonXMLEntity
					.getRecordcount()));
			this.setQueryPageValue(voform, true);
			List List = commonXMLEntity.getResults();
			ApplyCapital po=(ApplyCapital)List.get(0);
			this.setPageInfo(request, voform);
			request.setAttribute("po", po);
			return mapping.findForward("detail");//明细界面
				
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
	}
	
	
	private void commSetConditionsList(ApplyCapitalForm form,ApplyCapital entity){
		
		if(null!=form.getPo().getWorkdtstart()&&!"".equals(form.getPo().getWorkdtstart())){
			form.getFieldStart().add("WorkDt:"+form.getPo().getWorkdtstart());
		}
		if(null!=form.getPo().getIssuedtstart()&&!"".equals(form.getPo().getIssuedtstart())){
			form.getFieldStart().add("IssueDt:"+form.getPo().getIssuedtstart());
		}
		if(null!=form.getPo().getIssueamtstart()&&!"".equals(form.getPo().getIssueamtstart())){
			form.getFieldStart().add("IssueAmt:"+form.getPo().getIssueamtstart());
		}
		
		if(null!=form.getPo().getWorkdtend()&&!"".equals(form.getPo().getWorkdtend())){
			form.getFieldEnd().add("WorkDt:"+form.getPo().getWorkdtend());
		}
		if(null!=form.getPo().getIssuedtend()&&!"".equals(form.getPo().getIssuedtend())){
			form.getFieldEnd().add("IssueDt:"+form.getPo().getIssuedtend());
		}
		if(null!=form.getPo().getIssueamtend()&&!"".equals(form.getPo().getIssueamtend())){
			form.getFieldEnd().add("IssueAmt:"+form.getPo().getIssueamtend());
		}
		
		if(null!=form.getPo().getBilltp()&&!"".equals(form.getPo().getBilltp())){
			form.getConditions().add("BillTp:"+form.getPo().getBilltp());
		}
		if(null!=form.getPo().getStatus()&&!"".equals(form.getPo().getStatus())){
			form.getConditions().add("status:"+form.getPo().getStatus());
		}
		
	}
	/**
	 * 银行汇票部分金额兑付通知查询
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	
	public ActionForward querySendpartxml(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		try {
		
			CommonServices commonService = (CommonServices) this
					.getBean("CommonServices");
			String workdate = request.getSession().getAttribute("workDate")
					.toString();// 工作日期
			String msgId = commonService.getSEQMsgId(workdate);


			// 界面查询条件
			ApplyCapitalForm voform = (ApplyCapitalForm) form;
			ApplyCapital po = voform.getPo();
			commSetToXML(voform, TransCodeEntity.QUERYCD, "CMCS");
			voform.setMsgId(msgId);// 报文标识号
			voform.setQueryCd(TransCodeEntity.APPLYCAPITAL_QUERYCD);
			this.setFenYe(voform);

			TransServices transServices = (TransServices) this
					.getBean("transServices");

			commSetConditionsList(voform, po);
			CommonXMLEntity commonXMLEntity = transServices.transProcess(
					voform, voform.getTransactionId(), "transaction", voform
							.getQueryCd());
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}
			voform.setTotalSize(Integer.parseInt(commonXMLEntity
					.getRecordcount()));
			this.setQueryPageValue(voform, true);
			List List = commonXMLEntity.getResults();
			this.setPageInfo(request, voform);
			this.setObjectToRequest(request, "querypartList", List);
			System.out.print(List.size());
			request.setAttribute("condition", po);
		
				return mapping.findForward("querypartList");//查询列表页面
				
		} catch (Exception e) {
			// TODO: handle exception
			
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
			
	}
	
	/**
	 * 银行汇票未用退回
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	
	public ActionForward querySendreturnxml(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		try {
		
			CommonServices commonService = (CommonServices) this
					.getBean("CommonServices");
			String workdate = request.getSession().getAttribute("workDate")
					.toString();// 工作日期
			String msgId = commonService.getSEQMsgId(workdate);


			// 界面查询条件
			ApplyCapitalForm voform = (ApplyCapitalForm) form;
			ApplyCapital po = voform.getPo();
			commSetToXML(voform, TransCodeEntity.QUERYCD, "CMCS");
			voform.setMsgId(msgId);// 报文标识号
			voform.setQueryCd(TransCodeEntity.APPLYCAPITAL_QUERYCD);
			this.setFenYe(voform);

			TransServices transServices = (TransServices) this
					.getBean("transServices");

			commSetConditionsList(voform, po);
			CommonXMLEntity commonXMLEntity = transServices.transProcess(
					voform, voform.getTransactionId(), "transaction", voform
							.getQueryCd());
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}
			voform.setTotalSize(Integer.parseInt(commonXMLEntity
					.getRecordcount()));
			this.setQueryPageValue(voform, true);
			List List = commonXMLEntity.getResults();
			this.setPageInfo(request, voform);
			this.setObjectToRequest(request, "queryreturnList", List);
			request.setAttribute("condition", po);
		
				return mapping.findForward("queryreturnList");//查询列表页面
				
		} catch (Exception e) {
			// TODO: handle exception
			
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
			
	}
	/**
	 * 银行汇票签发登记簿
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward querylssueList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		try {
		
			CommonServices commonService = (CommonServices) this
					.getBean("CommonServices");
			String workdate = request.getSession().getAttribute("workDate")
					.toString();// 工作日期
			String msgId = commonService.getSEQMsgId(workdate);


			// 界面查询条件
			ApplyCapitalForm voform = (ApplyCapitalForm) form;
			ApplyCapital po = voform.getPo();
			commSetToXML(voform, TransCodeEntity.QUERYCD, "CMCS");
			voform.setMsgId(msgId);// 报文标识号
			voform.setQueryCd(TransCodeEntity.APPLYCAPITAL_QUERYCD);
			this.setFenYe(voform);

			TransServices transServices = (TransServices) this
					.getBean("transServices");

			commSetConditionsList(voform, po);
			CommonXMLEntity commonXMLEntity = transServices.transProcess(
					voform, voform.getTransactionId(), "transaction", voform
							.getQueryCd());
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}
			voform.setTotalSize(Integer.parseInt(commonXMLEntity
					.getRecordcount()));
			this.setQueryPageValue(voform, true);
			List List = commonXMLEntity.getResults();
			this.setPageInfo(request, voform);
			this.setObjectToRequest(request, "querylssueList", List);
			request.setAttribute("condition", po);
		
				return mapping.findForward("querylssueList");//查询列表页面
				
		} catch (Exception e) {
			// TODO: handle exception
			
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
			
	}
	/**
	 * 银行汇票挂失解挂
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 */
	public ActionForward querylossoruntieList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		try {
		
			CommonServices commonService = (CommonServices) this
					.getBean("CommonServices");
			String workdate = request.getSession().getAttribute("workDate")
					.toString();// 工作日期
			String msgId = commonService.getSEQMsgId(workdate);


			// 界面查询条件
			ApplyCapitalForm voform = (ApplyCapitalForm) form;
			ApplyCapital po = voform.getPo();
			commSetToXML(voform, TransCodeEntity.QUERYCD, "CMCS");
			voform.setMsgId(msgId);// 报文标识号
			voform.setQueryCd(TransCodeEntity.APPLYCAPITAL_QUERYCD);
			this.setFenYe(voform);
			
			if(!"".equals(po.getBillstatus()) && po.getBillstatus() != null){
				voform.getConditions().add("billstatus:"+po.getBillstatus());
			}
			TransServices transServices = (TransServices) this
					.getBean("transServices");

			commSetConditionsList(voform, po);
			CommonXMLEntity commonXMLEntity = transServices.transProcess(
					voform, voform.getTransactionId(), "transaction", voform
							.getQueryCd());
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}
			voform.setTotalSize(Integer.parseInt(commonXMLEntity
					.getRecordcount()));
			this.setQueryPageValue(voform, true);
			List List = commonXMLEntity.getResults();
			this.setPageInfo(request, voform);
			this.setObjectToRequest(request, "querylossoruntieList", List);
			request.setAttribute("condition", po);
		
				return mapping.findForward("querylossoruntieList");//查询列表页面
				
		} catch (Exception e) {
			// TODO: handle exception
			
			e.printStackTrace();
			return toFailedPage(mapping, request, e.getMessage());
		}
			
	}
}
