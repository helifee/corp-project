package com.cnaps.coreservices;

import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.List;

import org.apache.log4j.Logger;

import com.bancstone.common.exception.PicpMessageException;

public class BusinessServices implements TransServices {
  
   
	private static Logger log = Logger.getLogger(BusinessServices.class);

	/**
	 * 按照实体类组XML文件
	 * 
	 * @param sendmapfile
	 *            发送报文实体映射文件
	 * @param obj
	 *            报文实体对象
	 * @return 返回报文字符串
	 * @throws PicpMessageException
	 */
	public String buildXML(String sendmapfile, Object obj)
			throws PicpMessageException {
		return XMLProcess.createXML(sendmapfile, obj);
	}

	/**
	 * 发送报文并获得回执报文
	 * 
	 * @param xmlmsg
	 *            要发送的xml文件
	 * @param transtionId
	 *            功能代码
	 * @return 返回回执报文
	 * @throws PicpMessageException
	 * @throws IOException
	 */
	public String sendXMLMsg(String xmlmsg, String transtionId)
			throws PicpMessageException, IOException {
		String result = "";
		xmlmsg = transtionId + xmlmsg;
		int xmlmsglen = xmlmsg.getBytes("UTF-8").length;// 获得报文长度
		String sendMsg = getXMLLen(xmlmsglen) + xmlmsg;

		result = SendXMLHelp.sendXML(sendMsg);
		return result;
	}

	/**
	 * 发送报文并获得回执报文
	 * 
	 * @param xmlmsg
	 *            要发送的xml文件
	 * @param transtionId
	 *            功能代码
	 * @return 返回回执报文
	 * @throws PicpMessageException
	 * @throws IOException
	 */
	public String sendCoreXMLMsg(String xmlmsg, String transtionId)
			throws PicpMessageException, IOException {
		String result = "";
		xmlmsg = transtionId + xmlmsg;
		int xmlmsglen = xmlmsg.getBytes("UTF-8").length;// 获得报文长度
		String sendMsg = getXMLLen(xmlmsglen) + xmlmsg;

		result = SendXMLHelp.sendCoreXML(sendMsg);
		return result;
	}

	/**
	 * 发送报文并获得回执报文 加了类型判断 1为查询类的
	 * 
	 * @param xmlmsg
	 *            要发送的xml文件
	 * @param transtionId
	 *            功能代码
	 * @return 返回回执报文
	 * @throws PicpMessageException
	 * @throws IOException
	 */
	public String sendXMLMsg(String xmlmsg, String transtionId, int type)
			throws PicpMessageException, IOException {
		String result = "";

		int xmlmsglen = xmlmsg.getBytes("UTF-8").length;// 获得报文长度
		String sendMsg = "";
		if (type == 1) { // 查询类的通用报文
			sendMsg = getXMLLen(xmlmsglen) + "1510000000" + xmlmsg;
		} else {
			sendMsg = getXMLLen(xmlmsglen) + transtionId + xmlmsg;
		}

		result = SendXMLHelp.sendXML(sendMsg);
		return result;
	}

	

	/**
	 * 对报文按照映射文件进行解析
	 * 
	 * @param recvmapfile
	 *            解析报文映射文件
	 * @return 解析报文实体映射类
	 * @throws PicpMessageException
	 * @throws IOException
	 */
	public CommonXMLEntity xmlparse(String recvmapfile, String xmlMsg)
			throws PicpMessageException, IOException {
		CommonXMLEntity entity = new CommonXMLEntity();
		InputStream is = new ByteArrayInputStream(xmlMsg.getBytes("UTF-8"));
		// 返回报文长度
		// byte[] msglength = new byte[8];
		// int returnLen = is.read(msglength, 0, 8);
		// log.info("返回报文的交易码为:" + new String( msglength,"UTF-8"));
		entity = XMLProcess.xmlParse(recvmapfile, is);
		return entity;
	}
	
	
	
	/**
	 * 对报文按照映射文件进行解析
	 * 
	 * @param recvmapfile
	 *            解析报文映射文件
	 * @return 解析报文实体映射类
	 * @throws PicpMessageException
	 * @throws IOException
	 */
	public CommonXMLEntity xmlparse(String transtionId, byte[] xmlMsg)
			throws PicpMessageException, IOException {
		String path = this.getClass().getClassLoader().getResource("/").getFile();
		String recvmapfile = path+ "com/cnaps/coreservices/mapfiles/systemcontrols/REQ"
		+ transtionId + ".xml";
		CommonXMLEntity entity = new CommonXMLEntity();
		InputStream is = new ByteArrayInputStream(xmlMsg);
		// 返回报文长度
		// byte[] msglength = new byte[8];
		// int returnLen = is.read(msglength, 0, 8);
		// log.info("返回报文的交易码为:" + new String( msglength,"UTF-8"));
		entity = XMLProcess.xmlParse(recvmapfile, is);
		return entity;
	}
	/**
	 * 对报文按照映射文件进行解析
	 * 
	 * @param recvmapfile
	 *            解析报文映射文件
	 * @return 解析报文实体映射类
	 * @throws PicpMessageException
	 * @throws IOException
	 */
	public CommonXMLEntity xmlparse(String transtionId, InputStream is)
			throws PicpMessageException, IOException {
		String path = this.getClass().getClassLoader().getResource("/").getFile();
		String recvmapfile = path+ "com/cnaps/coreservices/mapfiles/systemcontrols/REQ"
		+ transtionId + ".xml";
		CommonXMLEntity entity = new CommonXMLEntity();
//		InputStream is = new ByteArrayInputStream(xmlMsg);
		// 返回报文长度
		// byte[] msglength = new byte[8];
		// int returnLen = is.read(msglength, 0, 8);
		// log.info("返回报文的交易码为:" + new String( msglength,"UTF-8"));
		entity = XMLProcess.xmlParse(recvmapfile, is);
		return entity;
	}
	
	/**
	 * 
	 * @param sendmapfile
	 *            上送报文映射文件
	 * @param recvmapfile
	 *            回执报文映射文件
	 * @param obj
	 *            上送报文实体对象
	 * @param transtionId
	 *            功能代码
	 * @return 回执报文实体对象
	 * @throws PicpMessageException
	 * @throws IOException
	 */
	public CommonXMLEntity busProcess(String sendmapfile, Object obj,
			String transtionId, String recvmapfile)
			throws PicpMessageException, IOException {

		String xmlMsg = buildXML(sendmapfile, obj);// 创建发送报文
		String returnStr = sendXMLMsg(xmlMsg, transtionId);// 发送处理
		CommonXMLEntity entity = xmlparse(recvmapfile, returnStr);// 解析应答报文
		return entity;
	}

	/**
	 * 
	 * @param obj
	 *            实体对象
	 * @param transtionId
	 *            交易码
	 * @return 报文实体对象
	 * @throws PicpMessageException
	 * @throws IOException
	 */
	public CommonXMLEntity busProcess(Object obj, String transtionId,
			String path) throws PicpMessageException {
		String sendmapfile = path + "mapfiles/REQ" + transtionId + ".xml";
		String recvmapfile = path + "mapfiles/RES" + transtionId + ".xml";
		log.info("发送实体映射文件：" + sendmapfile);
		log.info("接收实体映射文件：" + recvmapfile);
		String xmlMsg = buildXML(sendmapfile, obj);// 创建发送报文
		CommonXMLEntity entity = new CommonXMLEntity();
		try {
			String returnStr = sendXMLMsg(xmlMsg, transtionId);// 发送处理
			entity = xmlparse(recvmapfile, returnStr);
			
		} catch (IOException e) {
			e.printStackTrace();
			log.error("读写IO异常：" + e.getMessage());
			throw new PicpMessageException("读写IO异常：" + e.getMessage());
		}
		return entity;
	}

	/**
	 * 
	 * @param obj
	 *            实体对象
	 * @param transtionId
	 *            交易码
	 * @param packname
	 *            文件夹名
	 * @param querycd
	 *            查询代码
	 * @return 报文实体对象
	 * @throws PicpMessageException
	 * @throws IOException
	 */
	public CommonXMLEntity transProcess(Object obj, String transtionId,
			String packname, String querycd) throws PicpMessageException {
		String path = this.getClass().getClassLoader().getResource("/")
				.getFile();
		String sendmapfile = "";
		String recvmapfile = "";
		if ("transaction".equals(packname)) {
			if ("".equals(querycd)) {
				sendmapfile = path
						+ "com/cnaps/coreservices/mapfiles/transaction/REQ"
						+ transtionId + ".xml";
				recvmapfile = path
						+ "com/cnaps/coreservices/mapfiles/transaction/RES"
						+ transtionId + ".xml";
			} else {
				sendmapfile = path
						+ "com/cnaps/coreservices/mapfiles/transaction/REQ"
						+ querycd + ".xml";
				recvmapfile = path
						+ "com/cnaps/coreservices/mapfiles/transaction/RES"
						+ querycd + ".xml";
			}
		} else if ("systemcontrols".equals(packname)) {
			if ("".equals(querycd)) {
				sendmapfile = path
						+ "com/cnaps/coreservices/mapfiles/systemcontrols/REQ"
						+ transtionId + ".xml";
				recvmapfile = path
						+ "com/cnaps/coreservices/mapfiles/systemcontrols/RES"
						+ transtionId + ".xml";
			} else {
				sendmapfile = path
						+ "com/cnaps/coreservices/mapfiles/systemcontrols/REQ"
						+ querycd + ".xml";
				recvmapfile = path
						+ "com/cnaps/coreservices/mapfiles/systemcontrols/RES"
						+ querycd + ".xml";
			}
		} else if ("clearingaccts".equals(packname)) {
			if ("".equals(querycd)) {
				sendmapfile = path
						+ "com/cnaps/coreservices/mapfiles/clearingaccts/REQ"
						+ transtionId + ".xml";
				recvmapfile = path
						+ "com/cnaps/coreservices/mapfiles/clearingaccts/RES"
						+ transtionId + ".xml";
			} else {
				sendmapfile = path
						+ "com/cnaps/coreservices/mapfiles/clearingaccts/REQ"
						+ querycd + ".xml";
				recvmapfile = path
						+ "com/cnaps/coreservices/mapfiles/clearingaccts/RES"
						+ querycd + ".xml";
			}
		}

		log.info("发送实体映射文件：" + sendmapfile);
		log.info("接收实体映射文件：" + recvmapfile);
		String xmlMsg = buildXML(sendmapfile, obj);// 创建发送报文
		CommonXMLEntity entity = new CommonXMLEntity();
		try {
			String returnStr = sendXMLMsg(xmlMsg, transtionId);// 发送处理
			entity = xmlparse(recvmapfile, returnStr);
		} catch (IOException e) {
			e.printStackTrace();
			log.error("读写IO异常：" + e.getMessage());
			throw new PicpMessageException("读写IO异常：" + e.getMessage());
		}
		return entity;
	}

	/**
	 * 
	 * @param obj
	 *            实体对象
	 * @param transtionId
	 *            交易码
	 * @param packname
	 *            文件夹名
	 * @param querycd
	 *            查询代码
	 * @return 报文实体对象
	 * @throws PicpMessageException
	 * @throws IOException
	 */
	public CommonXMLEntity transQuery(Object obj, String transtionId,
			String packname, String querycd, String returnqueryCd)
			throws PicpMessageException {
		String path = this.getClass().getClassLoader().getResource("/")
				.getFile();
		String sendmapfile = "";
		String recvmapfile = "";
		if ("transaction".equals(packname)) {
			if ("".equals(querycd)) {
				sendmapfile = path
						+ "com/cnaps/coreservices/mapfiles/transaction/REQ"
						+ transtionId + ".xml";
				recvmapfile = path
						+ "com/cnaps/coreservices/mapfiles/transaction/RES"
						+ transtionId + ".xml";
			} else {
				sendmapfile = path
						+ "com/cnaps/coreservices/mapfiles/transaction/REQ"
						+ querycd + ".xml";
				recvmapfile = path
						+ "com/cnaps/coreservices/mapfiles/transaction/RES"
						+ returnqueryCd + ".xml";
			}
		}
		log.info("发送实体映射文件：" + sendmapfile);
		log.info("接收实体映射文件：" + recvmapfile);
		String xmlMsg = buildXML(sendmapfile, obj);// 创建发送报文
		CommonXMLEntity entity = new CommonXMLEntity();
		try {
			String returnStr = sendXMLMsg(xmlMsg, transtionId);// 发送处理
			entity = xmlparse(recvmapfile, returnStr);
			
		} catch (IOException e) {
			e.printStackTrace();
			log.error("读写IO异常：" + e.getMessage());
			throw new PicpMessageException("读写IO异常：" + e.getMessage());
		}
		return entity;
	}

	public CommonXMLEntity busProcess(Object obj, String transtionId,
			String querycd, String tmp) throws PicpMessageException {
		String path = this.getClass().getClassLoader().getResource("/")
				.getFile();
		String sendmapfile = path + "com/cnaps/coreservices/mapfiles/REQ"
				+ querycd + ".xml";
		String recvmapfile = path + "com/cnaps/coreservices/mapfiles/RES"
				+ querycd + ".xml";
		log.info("发送实体映射文件：" + sendmapfile);
		log.info("接收实体映射文件：" + recvmapfile);
		String xmlMsg = buildXML(sendmapfile, obj);// 创建发送报文
		CommonXMLEntity entity = new CommonXMLEntity();
		try {
			String returnStr = sendXMLMsg(xmlMsg, transtionId);// 发送处理
			entity = xmlparse(recvmapfile, returnStr);
		} catch (IOException e) {
			e.printStackTrace();
			log.error("读写IO异常：" + e.getMessage());
			throw new PicpMessageException("读写IO异常：" + e.getMessage());
		}
		return entity;
	}

	public CommonXMLEntity busProcess(Object obj, String transtionId)
			throws PicpMessageException {
		String path = this.getClass().getClassLoader().getResource("/")
				.getFile();
		String sendmapfile = path + "com/cnaps/coreservices/mapfiles/REQ"
				+ transtionId + ".xml";
		String recvmapfile = path + "com/cnaps/coreservices/mapfiles/RES"
				+ transtionId + ".xml";
		log.info("发送实体映射文件：" + sendmapfile);
		log.info("接收实体映射文件：" + recvmapfile);
		String xmlMsg = buildXML(sendmapfile, obj);// 创建发送报文
		CommonXMLEntity entity = new CommonXMLEntity();
		try {
			String returnStr = sendXMLMsg(xmlMsg, transtionId);// 发送处理
			entity = xmlparse(recvmapfile, returnStr);
			
		} catch (IOException e) {
			e.printStackTrace();
			log.error("读写IO异常：" + e.getMessage());
			throw new PicpMessageException("读写IO异常：" + e.getMessage());
		}
		return entity;
	}

	/**
	 * 核心发送
	 * @param obj
	 * @param transtionId
	 * @return
	 * @throws PicpMessageException
	 */
	public CommonXMLEntity busCoreProcess(Object obj, String transtionId,String direction)
			throws PicpMessageException {
		String path = this.getClass().getClassLoader().getResource("/")
				.getFile();
		String sendmapfile = path + "com/cnaps/coreservices/mapfiles/core/REQ"
				+ transtionId + ".xml";
		String recvmapfile = path + "com/cnaps/coreservices/mapfiles/core/RES"
				+ transtionId + ".xml";
		log.info("发送实体映射文件：" + sendmapfile);
		log.info("接收实体映射文件：" + recvmapfile);
		String xmlMsg = buildXML(sendmapfile, obj);// 创建发送报文
		CommonXMLEntity entity = new CommonXMLEntity();
		try {
			String returnStr = "";
			if("CORE".equals(direction)){
				returnStr = sendCoreXMLMsg(xmlMsg, transtionId);// 发送处理
			}else{
				returnStr = sendXMLMsg(xmlMsg, transtionId);// 发送处理
			}
			
			entity = xmlparse(recvmapfile, returnStr);
		} catch (IOException e) {
			e.printStackTrace();
			log.error("读写IO异常：" + e.getMessage());
			throw new PicpMessageException("读写IO异常：" + e.getMessage());
		}
		return entity;
	}

	/**
	 * 
	 * @param obj
	 *            实体对象
	 * @param transtionId
	 *            交易码
	 * @param type
	 *            类型
	 * @return 报文实体对象
	 * @throws PicpMessageException
	 * @throws IOException
	 */
	public CommonXMLEntity busProcess(Object obj, String transtionId,
			String path, int type) throws PicpMessageException {

		String sendmapfile = path + "mapfiles/REQ" + transtionId + ".xml";
		String recvmapfile = path + "mapfiles/RES" + transtionId + ".xml";
		log.info("发送实体映射文件：" + sendmapfile);
		log.info("接收实体映射文件：" + recvmapfile);
		String xmlMsg = buildXML(sendmapfile, obj);// 创建发送报文
		CommonXMLEntity entity = new CommonXMLEntity();
		try {
			String returnStr = sendXMLMsg(xmlMsg, transtionId, 1);// 发送处理
			entity = xmlparse(recvmapfile, returnStr);
		} catch (IOException e) {
			e.printStackTrace();
			log.error("读写IO异常：" + e.getMessage());
			throw new PicpMessageException("读写IO异常：" + e.getMessage());
		}
		return entity;
	}

	/**
	 * 转换报文长度为字符串 规则：报文长度为8位字符串，不足8位前补0
	 * 
	 * @param xmlmsglen
	 *            报文长度
	 * @return 报文长度的8位字符串
	 */
	public String getXMLLen(int xmlmsglen) {
		String len = String.valueOf(xmlmsglen);
		for (int i = 0; i < (8 - String.valueOf(xmlmsglen).length()); i++) {
			len = "0" + len;
		}
		return len;
	}

	public static void testCase1() {
		BusinessServices bs = new BusinessServices();
		String sendmapfile = "d:\\requestmap.xml";
		CommonXMLEntity obj = new CommonXMLEntity();
		obj.setSource("IBPS");
		obj.setDestination("CNAPS");
		obj.setTransactionId("19101000");
		obj.setMessageId("123");
		obj.setSendDateTime("20110118T1502");
		obj.setQueryCd("100215");
		obj.setTurnPageBeginPos("1");
		obj.setTurnPageShowNum("10");

		obj.setField("CMONDATANM:hvps1");
		// obj.setField("CMONDATAVAL:测试一");
		String recvmapfile = "d:\\responsemap.xml";
		try {
			CommonXMLEntity entity = bs.busProcess(sendmapfile, obj, obj
					.getTransactionId(), recvmapfile);
			List list = entity.getResults();
			System.out.println(entity.getSource());
			System.out.println(list.size());
		} catch (PicpMessageException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void writeFile(String sendMessage) {
		FileOutputStream fos = null;
		DataOutputStream dos = null;
		String file = "d:/test/sendxml.xml";
		try {
			fos = new FileOutputStream(file);
			dos = new DataOutputStream(fos);
			dos.write(sendMessage.getBytes("UTF-8"), 0, sendMessage
					.getBytes("UTF-8").length);
			dos.flush();
			dos.close();
			fos.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void writeFile1(String sendMessage) {
		FileOutputStream fos = null;
		DataOutputStream dos = null;
		String file = "d:/test/recvxml.xml";
		try {
			fos = new FileOutputStream(file);
			dos = new DataOutputStream(fos);
			dos.write(sendMessage.getBytes("UTF-8"), 0, sendMessage
					.getBytes("UTF-8").length);
			dos.flush();
			dos.close();
			fos.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	

	public static void testcase3() {
		FileOutputStream fos = null;
		DataOutputStream dos = null;
		String file = "d:/test.xml";
		try {
			fos = new FileOutputStream(file);
			byte[] b = new byte[1024];
			fos.write(b);
			CommonXMLEntity entity = new CommonXMLEntity();
			try {
				String path = BusinessServices.class.getProtectionDomain()
						.getCodeSource().getLocation().getFile();
				String recvmapfile = path
						+ "com/cnaps/coreservices/mapfiles/RES15105102.xml";
				BusinessServices bs = new BusinessServices();
				String str = "11101801" + new String(b);
				entity = bs.xmlparse(recvmapfile, str);
			} catch (IOException e) {
				e.printStackTrace();
				log.error("读写IO异常：" + e.getMessage());
				throw new PicpMessageException("读写IO异常：" + e.getMessage());
			}
			fos.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void test1() {
		// String path =
		// this.getClass().getClassLoader().getResource("/").getFile();
		String path = BusinessServices.class.getProtectionDomain()
				.getCodeSource().getLocation().getFile();
		System.out.println(path);
	}

	public static void main(String[] args) {
		
		//		String path = BusinessServices.class.getClassLoader().getResource("/").getFile();
		//		
		//		System.out.println(path);
		//		BusinessServices bs = new BusinessServices();
		//		bs.test1();
		//		System.out.println(bs.getServicesName("cnap111111111111111111111111")+"===");
		//		testCase();
		//		String path = BusinessServices.class.getProtectionDomain().getCodeSource().getLocation().getFile();
		//		System.out.println(path);
		//		testcase3();
		BusinessServices bs=new BusinessServices();
		EncodeMsgEntity eme=new EncodeMsgEntity();
		eme.setBusinessSizeCode("CT02");
		eme.setEncodeType("1");
		//eme.setBusinessSizeCode("CT03");
		eme.setCheckNum("88410399");   //0x00 0x01  0x12  0x22
		eme.setDbtrBrnchId("301100000015");
		eme.setIssuerBk("313191000011");
		eme.setMoneyNum("9888.50");
		eme.setNotesDt("2011-12-12");
		eme.setNotesNo("10412520");
		eme.setEncodeNo("0283536017");
		try {
			bs.sendEncodeMsg(eme);
		} catch (PicpMessageException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/* 
	 * 编押
	 * (non-Javadoc)
	 * @see com.cnaps.coreservices.TransServices#sendEncodeMsg(com.cnaps.coreservices.EncodeMsgEntity)
	 */
	@Override
	public String sendEncodeMsg(EncodeMsgEntity eme) throws PicpMessageException {
		String sendMsg = null,result = null;
		
		sendMsg=null;
		if(null!=eme.getEncodeType()){
			sendMsg=eme.getEncodeType();
		}
		else{
			result="操作类型错误!";
		}
		
		if(null!=eme.getBusinessSizeCode()){
			if("CT02".equals(eme.getBusinessSizeCode())){
				sendMsg+="|0x01";
			}
			else if("CT00".equals(eme.getBusinessSizeCode())){
				sendMsg+="|0x02";
			}
			else if("CT01".equals(eme.getBusinessSizeCode())){
				sendMsg+="|0x03";
			}
			else{
				sendMsg+="|0x04";
			}
		}
		else{
			 result+="|汇票种类错误";
		}
		
		if(null!=eme.getNotesDt()){
			sendMsg=sendMsg+"|"+(eme.getNotesDt().substring(0, 4)+eme.getNotesDt().substring(5, 7)+eme.getNotesDt().substring(8, 10));
		}
		else{
			 result+="|签发日期错误";
		}
		
		if(null!=eme.getNotesNo()&&eme.getNotesNo().length()==8){
			sendMsg+="|"+eme.getNotesNo();
		}
		else{
			 result+="|汇票号码错误:"+eme.getNotesNo();
		}
				if(null!=eme.getMoneyNum()){
			BigDecimal num=new BigDecimal(eme.getMoneyNum());
			DecimalFormat df=new DecimalFormat("###############");
			String str=df.format(num.multiply(new BigDecimal(100)));
			int n=15-str.length();
			for(int i=0;i<n;i++){
				str="0"+str;
			}
			sendMsg+=("|"+str);
		}
		else{
			result+="|金额错误:"+eme.getMoneyNum();
		}
		
		if(null!=eme.getIssuerBk()&&eme.getIssuerBk().length()<=12){
			int n=12-eme.getIssuerBk().length();
			String str1=eme.getIssuerBk();
			for(int i=0;i<n;i++){
				str1="0"+str1;
			}
			sendMsg+=("|"+str1);
		}
		else{
			result+="|签发网点号错误:"+eme.getIssuerBk();
		}
		
		if(null==eme.getDbtrBrnchId()){
			sendMsg+="|000000000000";
		}
		else if(eme.getDbtrBrnchId().length()<=12){
			int n=12-eme.getDbtrBrnchId().length();
			String str=eme.getDbtrBrnchId();
			for(int i=0;i<n;i++){
				str="0"+str;
			}
			sendMsg+="|"+str;
		}
		else{
			 result+="|兑付行号错误:"+eme.getDbtrBrnchId();
		}
		
		if("CT03".equals(eme.getBusinessSizeCode())){
			if(null!=eme.getCheckNum()){
				int len=eme.getCheckNum().length();
				String checkStr=eme.getCheckNum();
				for(int i=0;i<8-len;i++){
					checkStr="0"+checkStr;
				}
				String newCheckStr="0x"+checkStr.substring(0, 2)+"0x"+checkStr.substring(2, 4)+"0x"+checkStr.substring(4, 6)+"0x"+checkStr.substring(6, 8);
				sendMsg+="|"+newCheckStr;
			}
			else{
				result+="|查复书号错误:"+eme.getCheckNum();
			}
		}
		else{
			sendMsg+="|"+eme.getOtherMsg();
		}
		
		if("1".equals(eme.getEncodeType())){
			if(null!=eme.getEncodeNo()){
				sendMsg+="|"+eme.getEncodeNo();
			}
			else{
				result+="|汇票密押错误:"+eme.getEncodeNo();
			}
		}
		
		
		int len=sendMsg.length()+8;
		String lenStr=String.valueOf(len);
		int lenStrLen=lenStr.length();
		for(int i=0;i<(8-lenStrLen);i++){
			lenStr="0"+lenStr;
		}
		
		sendMsg=lenStr+sendMsg;
		
		if(null==result){
			result = SendXMLHelp.sendEncodeMsg(sendMsg);
		}
		return result;
	}
	
}
