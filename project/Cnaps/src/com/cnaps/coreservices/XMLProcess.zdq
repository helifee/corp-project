package com.cnaps.coreservices;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.Vector;

import org.apache.log4j.Logger;
import org.apache.struts.tiles.xmlDefinition.XmlParser;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.Node;
import org.dom4j.io.SAXReader;
import org.exolab.castor.mapping.Mapping;
import org.exolab.castor.xml.Marshaller;
import org.exolab.castor.xml.Unmarshaller;
import org.xml.sax.InputSource;

import com.bancstone.common.exception.PicpMessageException;

public class XMLProcess {

	private static Logger log = Logger.getLogger(XMLProcess.class);

	/**
	 * create document object
	 * @param file
	 * @return
	 */
	public static Document createDocument(String file){
		InputStream in =null;
		byte b[]=null;
		Document document=null;
		try {
			in = new BufferedInputStream(new FileInputStream(file));
			b=new byte[in.available()];
			in.read(b, 0, b.length);
			in.close();
			document = DocumentHelper.parseText(new String(b,"UTF-8"));
			
		}catch(Exception e) {
			e.printStackTrace();
			log.error("创建document时异常："+e.getMessage());
		} finally{
			try {
				in.close();
			} catch (IOException e) {
				e.printStackTrace();
				log.error("关闭流出错："+e.getMessage());
			}
		}
		return document;
	}
	
	/**
	 * create document object
	 * @param file
	 * @return
	 * @throws DocumentException 
	 * @throws Exception 
	 */
	public static Document createDocument(byte [] filedata) throws DocumentException {
		Document document=null;
		try {
			document = DocumentHelper.parseText(new String(filedata,"UTF-8"));
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			log.error("创建document时异常："+e.getMessage());
		} catch (DocumentException e) {
			e.printStackTrace();
			log.error("创建document时异常："+e.getMessage());
			throw e;
		}
		return document;
	}
	
	
	/**
	 * 组报文
	 * @param mappingfile 报文映射文件
	 * @param obj 实体类
	 * @return xml报文
	 * @throws PicpMessageException
	 */
	public static String createXML(String mappingfile, Object obj)
			throws PicpMessageException {
		String msgXml = "";
		Mapping map = new Mapping();
		try {
			
			map.loadMapping(mappingfile);
			StringWriter sw = new StringWriter();
			Marshaller mm = new Marshaller(sw);
			mm.setMapping(map);
			mm.marshal(obj);
			msgXml = sw.toString();
		} catch (Exception e) {
			e.printStackTrace();
			log.error("组报文时发生异常:" + e.getMessage());
			throw new PicpMessageException("组报文异常："+e.getMessage());
		}
		return msgXml;
	}

	/**
	 * 解报文
	 * @param mappingfile mappingfile 报文映射文件
	 * @param is 输入流文件
	 * @return 报文实体
	 * @throws PicpMessageException
	 */
	public static CommonXMLEntity xmlParse(String mappingfile,InputStream is )
		throws PicpMessageException {
		CommonXMLEntity entity = new CommonXMLEntity();
		Mapping mapping = new Mapping();
		try {
			mapping.loadMapping(mappingfile);
			Unmarshaller unmar = new Unmarshaller(mapping);
			entity = (CommonXMLEntity) unmar.unmarshal(new InputSource(is));
			//is.close();
		} catch (Exception e) {
			e.printStackTrace();
			log.error("解报文时发生异常:" + e.getMessage());
			throw new PicpMessageException("解报文异常:"+e.getMessage());
		}finally{
			try {
				is.close();
			} catch (IOException e) {
				e.printStackTrace();
				log.error("关闭输出流异常"+e.getMessage());
				throw new PicpMessageException("关闭输出流异常");
				
			}
		}
		return entity;
	}
	
	/**
	 * 解析行名行号信息报文
	 * @param document
	 * @return
	 * @throws MessageException
	 */
	public static List parsePartyInfo () throws PicpMessageException {
		
		SAXReader reader = new SAXReader();
    	File file = new File("D:\\CCMSZDT0401.XML");
    	Vector list = new Vector();
		try {
			Document document = reader.read(file);
	    	List<Element> nodeList=document.getRootElement().element("CCMS_BANK_DATA").elements("ROW");
	    	if(nodeList.size()<0){
				log.debug("查询结果有误!");
				System.out.println("查询结果为空！");
			}else{
				for(int i=0;i<nodeList.size();i++){
					Partyalterinfo partyInfo = new Partyalterinfo();
					Element element = (Element)nodeList.get(i);
					//行号
					String bank_bankcode = ((Node)element).getUniquePath()+"/BANKCODE";
					Node node = document.selectSingleNode(bank_bankcode);
					partyInfo.setPtyid(node.getText());
					log.info(node.getName()+"==="+node.getText());
					System.out.println(node.getName()+"==="+node.getText());
					//行名
					String bank_bankname = ((Node)element).getUniquePath()+"/BANKNAME";
					node = document.selectSingleNode(bank_bankname);
					partyInfo.setBankname(node.getText());
					log.info(node.getName()+"==="+node.getText());
					System.out.println(node.getName()+"==="+node.getText());
					//别名
					String bank_bankaliasename = ((Node)element).getUniquePath()+"/BANKALIASNAME";
					node = document.selectSingleNode(bank_bankaliasename);
					partyInfo.setBankaliasename(node.getText());
					log.info(node.getName()+"==="+node.getText());
					
					//参与机构类型
					String bank_ptytp = ((Node)element).getUniquePath()+"/BANKCATALOG";
					node = document.selectSingleNode(bank_ptytp);
					partyInfo.setPtytp(node.getText());
					log.info(node.getName()+"==="+node.getText());
					
					//行别代码
					String bank_bkctgycd = ((Node)element).getUniquePath()+"/BANKTYPE";
					node = document.selectSingleNode(bank_bkctgycd);
					partyInfo.setBkctgycd(node.getText());
					log.info(node.getName()+"==="+node.getText());
					
					//CCPC代码
					String bank_bankcenter = ((Node)element).getUniquePath()+"/BANKCENTER";
					node = document.selectSingleNode(bank_bankcenter);
					partyInfo.setBankcenter(node.getText());
					log.info(node.getName()+"==="+node.getText());
					
					//代理清算参与机构号
					String bank_sttlmagtid = ((Node)element).getUniquePath()+"/BANKAGENT";
					node = document.selectSingleNode(bank_sttlmagtid);
					partyInfo.setSttlmagtid(node.getText());
					log.info(node.getName()+"==="+node.getText());
					
					//状态
					String bank_status = ((Node)element).getUniquePath()+"/STATUS";
					node = document.selectSingleNode(bank_status);
					partyInfo.setStatus(node.getText());
					log.info(node.getName()+"==="+node.getText());
					
					//生效日期
					String bank_effdate = ((Node)element).getUniquePath()+"/EFFDATE";
					node = document.selectSingleNode(bank_effdate);
					partyInfo.setEffdate(node.getText());
					log.info(node.getName()+"==="+node.getText());
					
					//退出日期
					String bank_invdate = ((Node)element).getUniquePath()+"/INVDATE";
					node = document.selectSingleNode(bank_invdate);
					partyInfo.setInvdate(node.getText());
					log.info(node.getName()+"==="+node.getText());
					
					list.add(partyInfo);
				}
			}
	    	
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}
	
	public static void main(String[] args) {
//		System.out.println("fdfds");
//		Document document = createDocument("D:\\CCMSZDT0401.XML");
		try {
			XMLProcess.parsePartyInfo();
		} catch (PicpMessageException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
