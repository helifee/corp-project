package com.cnaps.coreservices;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.bancstone.common.dao.impl.GenericHibernateDaoSupportImpl;
import com.bancstone.hibernate.HibernateSessionFactory;
import com.cnaps.hvps.dao.DuizhangDao;
import com.cnaps.hvps.dao.PingzhengPringDao;
import com.cnaps.hvps.form.transfer.TransProcessForm;
import com.cnaps.hvps.persistence.duizhang.Bepscollectedchckinf;
import com.cnaps.hvps.persistence.duizhang.Bepscollectedchckntfy;
import com.cnaps.hvps.persistence.duizhang.DuizhangEntity;
import com.cnaps.hvps.persistence.duizhang.Hvpscollectedchckinf;
import com.cnaps.hvps.persistence.duizhang.Hvpscollectedchckntfy;
import com.cnaps.hvps.persistence.duizhang.Hvpsdetaildwnldreq;
import com.cnaps.hvps.persistence.duizhang.TotalAcctEntity;
import com.cnaps.hvps.persistence.transfer.ExchargeEntity;
import com.cnaps.hvps.persistence.transfer.TransProcessEntity;

public class PingzhengPrintService {

	private GenericHibernateDaoSupportImpl commondao = new GenericHibernateDaoSupportImpl();
	
	private PingzhengPringDao pzPrintDao = new PingzhengPringDao();

	public GenericHibernateDaoSupportImpl getCommondao() {
		return commondao;
	}

	public void setCommondao(GenericHibernateDaoSupportImpl commondao) {
		this.commondao = commondao;
	}

	public PingzhengPringDao getPzPrintDao() {
		return pzPrintDao;
	}

	public void setPzPrintDao(PingzhengPringDao pzPrintDao) {
		this.pzPrintDao = pzPrintDao;
	}
	
	public List queryPDList(TransProcessEntity entity){
		
		StringBuffer sql = new StringBuffer();
		//根据报文类型查询相关业务表
		if("O".equals(entity.getDirection())){//往账
			if("hvps.111.001.01".equals(entity.getMsgtpid())){
				sql.append("select o.PrintTimes,c.MsgTpId,o.pmttp,o.Pmtgrpid,o.Dbtrbrnchid,");
				sql.append("o.Dbtrissuer,o.Dbtrbrnchnm,o.Dbtracct,o.Dbtrnm,o.Dbtraddr,o.Cdtrbrnchid,");
				sql.append("o.Workdt,o.Cdtrissuer,o.Workdt,o.Cdtracct,o.Cdtrnm,o.Cdtraddr,o.Amount,o.Ustrd");
				sql.append(" from HVPS111DBTR o ");
				sql.append(" left join CNAPSPMTCOLLECT c on  o.PmtGrpId = c.PmtGrpId  where 1=1  ");
				
			}
		}else{//来账
			if("hvps.111.001.01".equals(entity.getMsgtpid())){
				sql.append("select o.PrintTimes,c.MsgTpId,o.pmttp,o.Pmtgrpid,o.Dbtrbrnchid,");
				sql.append("o.Dbtrissuer,o.Dbtrbrnchnm,o.Dbtracct,o.Dbtrnm,o.Dbtraddr,o.Cdtrbrnchid,");
				sql.append("o.Workdt,o.Cdtrissuer,o.Workdt,o.Cdtracct,o.Cdtrnm,o.Cdtraddr,o.Amount,o.Ustrd");
				sql.append(" from HVPS111CDTR o ");
				sql.append(" left join CNAPSPMTCOLLECT c on  o.PmtGrpId = c.PmtGrpId  where 1=1  ");
				
			}
		}
		
		if(entity.getStartdate()!=null&&(!"".equals(entity.getStartid()))){
			sql.append(" and o.WorkDt >= '"+entity.getStartdate()+"'  ");
		}
		if(entity.getEnddate()!=null&&(!"".equals(entity.getEnddate()))){
			sql.append(" and o.WorkDt <= '"+entity.getStartdate()+"'  ");
		}
		if(entity.getPmttp()!=null&&(!"".equals(entity.getPmttp()))){
			sql.append(" and c.MsgTpId= '"+entity.getPmttp()+"'  ");
		}
		if(entity.getStatus()!=null&&(!"".equals(entity.getStatus()))){
			sql.append(" and c.status= '"+entity.getStatus()+"'  ");
		}
		sql.append(" order by o.WorkDt desc ");
		
		return this.getPzPrintDao().queryHVPSPDList(sql.toString());
	}
	
	/**
	 * 大额凭证批量打印
	 * @param systemcd
	 * @param po
	 * @return
	 */
	public List queryPrintList(TransProcessEntity po ){
		List list = new ArrayList();
		list =  queryPDList(po);
		return list;
	}
	
	/**
	 * 更新打印次数
	 * @param entity
	 * @return
	 */
	public boolean updatePrinttimes(String pmtgrpid,String printtimes,String direction,String msgtpid){
		
		StringBuffer sql = new StringBuffer();
		//根据报文类型查询相关业务表
		if("O".equals(direction)){//往账
			if("hvps.111.001.01".equals(msgtpid)){
				sql.append(" update HVPS111DBTR o set o.PrintTimes='"+printtimes+"'");
				sql.append("  where o.Pmtgrpid='"+pmtgrpid+"'");
			}
		}else{//来账
			if("hvps.111.001.01".equals(msgtpid)){
				sql.append("update HVPS111CDTR o set o.PrintTimes='"+printtimes+"'");
				sql.append(" where o.Pmtgrpid='"+pmtgrpid+"'");
				
			}
		}
		
		return this.getPzPrintDao().updatePrinttimes(sql.toString());
	}
	/**
	 * 更新打印次数
	 * @param entity
	 * @return
	 */
	public boolean updatePrintimes(String pmgrpid,String printtime,String systemcd){
		
		StringBuffer sql = new StringBuffer();
		sql.append(" update");
		if(systemcd.equals("HVPS"))
		{
			sql.append(" HVPS111DBTR o ");
		}else if(systemcd.equals("BEPS"))
		{
			sql.append(" BEPS111DBTR o ");
		}
		sql.append(" set o.PrintTimes='"+printtime+"' where o.Pmtgrpid='"+pmgrpid+"'" );
	
		
		return this.getPzPrintDao().updatePrinttimes(sql.toString());
	}
	/**
	 * 根据ID查询需要打印的信息
	 * @param voform
	 * @return
	 */
	public List queryBySql(TransProcessForm voform){
		return this.getPzPrintDao().queryBySql(voform);
	}
	/**
	 * 查询需要打印的自由格式信息
	 * @param voform
	 * @return
	 */
	public List queryCcmsFreeMsgBySql(TransProcessForm voform){
		return this.getPzPrintDao().queryCcmsFreeMsgBySql(voform);
	}
	/**
	 * 查询需要打印的大小额汇兑信息
	 * @param entity
	 * @param SystemCd 大小额
	 * @param  PmtGrpId 支付交易组号 
	 * @return
	 */
	public List queryexchangeMsgBySql(TransProcessEntity entity,String SystemCd,String PmtGrpId){
	   return this.getPzPrintDao().queryexchangeMsgBySql(entity, SystemCd, PmtGrpId);
	}
	public List queryfundMsgBySql(TransProcessEntity entity,String SystemCd,String PmtGrpId){
		   return this.getPzPrintDao().queryfundMsgBySql(entity, SystemCd, PmtGrpId);
	}
}
