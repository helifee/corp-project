package com.cnaps.coreservices;

import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ResourceBundle;

import org.apache.commons.net.ftp.FTP;
import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPFile;
import org.apache.commons.net.ftp.FTPReply;
import org.apache.log4j.Logger;

import com.sun.xml.internal.messaging.saaj.util.ByteInputStream;
import com.sun.xml.internal.messaging.saaj.util.ByteOutputStream;


/**
 * java实现FTP上传
 * @author dell
 *
 */
public class FtpUpload {

	private static Logger logger = Logger.getLogger(FtpUpload.class);

	String localfilename;
	String remotefilename;
	FTPClient ftpClient;

	
	/**
	 * 连接服务器
	 * @param ip  ip地址
	 * @param port 端口
	 * @param user 用户名
	 * @param password 密码
	 * @param path 路径
	 */
	public void connectServer(String ip, int port, String user,String password) {

		try {
			ftpClient = new FTPClient();
			ftpClient.connect(ip, port);// 连接FTP服务器
			ftpClient.login(user, password);// 登陆FTP服务器
            if (!FTPReply.isPositiveCompletion(ftpClient.getReplyCode())) {
                System.out.println("未连接到FTP，用户名或密码错误。");
                ftpClient.disconnect();
            } else {
                System.out.println("FTP连接成功。");
            }
            
		} catch (IOException ex) {
			ex.printStackTrace();
			System.out.println("not login");
			System.out.println(ex);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 关闭服务器
	 */
	public void closeConnect() {
		try {
			ftpClient.disconnect();
			System.out.println("disconnect success");
		} catch (IOException ex) {
			ex.printStackTrace();
			System.out.println("not disconnect");
			System.out.println(ex);
		}
	}

	


	/**
	 * 文件上传
	 * @param path 远程路径
	 * @param localfilename 本地文件名
	 * @param remotefilename 远程文件名
	 * @throws Exception 
	 */
	public boolean  upload(String localpath,InputStream is,String remotefilename)  {
		boolean result = false;
		ResourceBundle rb = ResourceBundle.getBundle("Syspara");
		String ip = rb.getString("SocketServer");
		int port = 21;
		String user = rb.getString("user");
		String password = rb.getString("password");
		
		try {
			connectServer(ip, port, user, password);
			// 设置PassiveMode传输
			ftpClient.enterLocalPassiveMode();
	        // 设置以二进制流的方式传输
			ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
			ftpClient.setControlEncoding("UTF-8"); 
//	        FTPFile[] files = ftpClient.listFiles(new String(remoteFileName));
	        ftpClient.storeFile(remotefilename, is);
	        result = true;
	        
		} catch (IOException ex) {
			result = false;
			ex.printStackTrace();
			logger.debug("IO异常,上传失败："+ex.getMessage());
			System.out.println("not upload");
			System.out.println(ex);
		} catch (Exception e) {
			
			e.printStackTrace();
		}finally{
			try {
				is.close();
				
			} catch (IOException e) {
				e.printStackTrace();
			}
			closeConnect();
			
		}
		return result;
	}

	/**
	 * 文件上传
	 * @param path 远程路径
	 * @param dzfile 要上传的文件
	 * @param remotefilename 远程文件名
	 */
	public boolean  upload(String dzfile,String remotefilename) {
		boolean result = false;
		ResourceBundle rb = ResourceBundle.getBundle("Syspara");
		String ip = rb.getString("ftpsocket");
		int port = 21;
		String user = rb.getString("user");
		String password = rb.getString("password");
		ByteInputStream bis = null;
		try {
			
			connectServer(ip, port, user, password);
			// 设置PassiveMode传输
			ftpClient.enterLocalPassiveMode();
	        // 设置以二进制流的方式传输
			ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
			ftpClient.setControlEncoding("UTF-8");   

			 // 对远程目录的处理
            String remoteFileName  = remotefilename;
	         if (remotefilename.contains("/")) {
	        	 remoteFileName = remotefilename.substring(remotefilename.lastIndexOf("/") + 1);
	            // 创建服务器远程目录结构，创建失败直接返回
	            if (!CreateDirecroty(remotefilename)) {
	               throw new Exception("文件名录创建失败");
	            }
	        }
//	        System.out.println("文件是否存在："+ftpClient.changeWorkingDirectory("3424")); 
			
//	        FTPFile[] files = ftpClient.listFiles(new String(remoteFileName));
			bis = new ByteInputStream(dzfile.getBytes("utf-8"), 0, dzfile.getBytes("utf-8").length);
			
	        ftpClient.storeFile(remoteFileName,bis);
	       
			result = true;
		} catch (IOException ex) {
			result = false;
			ex.printStackTrace();
			logger.debug("IO异常,上传失败："+ex.getMessage());
			System.out.println("not upload");
			System.out.println(ex);
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			try {
				bis.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
			closeConnect();
			
		}
		return result;
	}
	

	
	/**
	 * 从远程服务器上下载图像文件
	 * @param remotePath 远程文件路径
	 * @param remoteFile 远程文件名称
	 * @return 远程文件字节数组
	 */
	public byte[] download(String remotePath, String remoteFile) {

		ResourceBundle rb = ResourceBundle.getBundle("Syspara");
		String ip = rb.getString("ftpsocket");
		int port = 21;
		String user = rb.getString("user");
		String password = rb.getString("password");
		
		
		byte[] returnbytes =null;
		InputStream is = null;
		DataInputStream dis = null;
		ByteOutputStream bos = null;
		try {

			connectServer(ip, port, user, password);
			// 设置PassiveMode传输
			ftpClient.enterLocalPassiveMode();
	        // 设置以二进制流的方式传输
			ftpClient.setFileType(FTP.BINARY_FILE_TYPE);
			
			is = ftpClient.retrieveFileStream(remotePath+"/"+remoteFile);
			bos = new ByteOutputStream();
			byte[] bytes = new byte[1024];
			int c;
			while ((c = is.read(bytes)) != -1) {
				bos.write(bytes, 0, c);
			}
			returnbytes = bos.getBytes();
			
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("not download");
		}finally{
			if(dis!=null){
				try {
					dis.close();
				} catch (IOException e) {
					
					e.printStackTrace();
				}
			}
			if(is!=null){
				try {
					is.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			
		}
		return returnbytes;
	}

	/**
	 * 创建远程服务器文件
	 * @param remote
	 * @return
	 * @throws IOException
	 */
	 public boolean CreateDirecroty(String remote) throws IOException {
	        boolean success = true;
	        String directory = remote.substring(0, remote.lastIndexOf("/") + 1);
	        // 如果远程目录不存在，则递归创建远程服务器目录
	        if (!directory.equalsIgnoreCase("/")
	                && !ftpClient.changeWorkingDirectory(new String(directory))) {
	        

	            int start = 0;
	            int end = 0;
	            if (directory.startsWith("/")) {
	                start = 1;
	            } else {
	                start = 0;
	            }
	            end = directory.indexOf("/", start);
	            while (true) {
	                String subDirectory = new String(remote.substring(0, end));
	           
	                if (!ftpClient.changeWorkingDirectory(subDirectory)) {
	                	
	                    if (ftpClient.makeDirectory(subDirectory)) {
	                    	  System.out.println("创建子目录:"+subDirectory);
	                    	ftpClient.changeWorkingDirectory(subDirectory);
	                    } else {
	                        System.out.println("创建目录失败");
	                        success = false;
	                        return success;
	                    }
	                }
	                start = end + 1;
	                end = directory.indexOf("/", start);
	                // 检查所有目录是否创建完毕
	                if (end <= start) {
	                    break;
	                }
	            }
	        }
	        return success;
	    }

	    public boolean uploadAll(String filename, String uploadpath)
	            throws Exception {
	        boolean success = false;

	        File file = new File(filename);
	        // 要上传的是否存在
	        if (!file.exists()) {
	            return success;
	        }
	        // 要上传的是否是文件夹
	        if (!file.isDirectory()) {
	            return success;
	        }
	        File[] flles = file.listFiles();
	        for (File files : flles) {
	            if (files.exists()) {
	                if (files.isDirectory()) {
	                    this.uploadAll(files.getAbsoluteFile().toString(),
	                            uploadpath);
	                } else {
	                    String local = files.getCanonicalPath().replaceAll("\\\\",
	                            "/");
	                    String remote = uploadpath
	                            + local.substring(local.indexOf("/") + 1);
	                    upload(local, remote);
	                    ftpClient.changeWorkingDirectory("/");
	                }
	            }
	        }
	        return true;
	    }


	 

	

	public static void main(String agrs[]) {

//		FtpUpload fu = new FtpUpload();
//		String imagepath = "/tmp/ftpdata/20111107";
//	
//		String imagename = "321-B-20111107171551421.jpg";
//	//	String imagename = "321-F-20111107171551406.jpg";
//		byte[] bytes = fu.download(imagepath, imagename);
//		System.out.println(bytes.length);
		FtpUpload du = new FtpUpload();
		ByteInputStream is = new ByteInputStream();
		du.upload("21321", "/tmp/ftpdata/rewrew/rewrew/234.jpg");
	}

}
