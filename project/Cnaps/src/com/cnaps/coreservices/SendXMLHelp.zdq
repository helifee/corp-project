package com.cnaps.coreservices;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.Socket;
import java.net.SocketException;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;
import java.util.ResourceBundle;

import org.apache.log4j.Logger;

import com.bancstone.common.exception.PicpMessageException;

/**
 * 发送socket工具类
 * 
 * @author dell
 * 
 */
public class SendXMLHelp {
	private static Logger log = Logger.getLogger(SendXMLHelp.class);

	private Socket socket ;
	
	public  void initSocket() throws PicpMessageException{
		String serverIp = "127.0.0.1";
		int portNo = 9002;
		String str = "";
		ResourceBundle rb = null;
		try {
			rb = ResourceBundle.getBundle("Syspara");//读取配置文件
			str = rb.getString("backserverip").trim();
			if (!str.equals("") && str != null) {
				serverIp = str;
			}
			str = rb.getString("backserverport").trim();
			if (!str.equals("") && str != null) {
				portNo = Integer.parseInt(str);
			}
		} catch (Exception e) {
			throw new PicpMessageException("读取配置文件错误");
		}
		try {
			 socket = new Socket(serverIp, portNo);
			
			int backtimeout = Integer.parseInt(rb.getString("backtimeout").trim());
			socket.setSoTimeout(backtimeout);// 设置超时时间
			log.info("socket connected successful!");
		}catch (UnknownHostException e) {
			log.error("异常："+e.getMessage());
			throw new PicpMessageException("未知socket服务主机");
		} catch (SocketTimeoutException ex) {
			ex.printStackTrace();
			log.error("异常："+ex.getMessage());
			throw new PicpMessageException("连接超时");
		} catch (IOException e) {
			e.printStackTrace();
			log.error("异常："+e.getMessage());
			throw new PicpMessageException("IO异常");
		}
	}
	
	/**
	 * 发送后台的适配器
	 * 
	 * @param message
	 * @return
	 * @throws MessageException
	 */
	public static String sendXML(String message) throws PicpMessageException {
		String serverIp = "127.0.0.1";
		int portNo = 9002;
		String str = "";
		String returnString = "";
		DataInputStream in = null;
		DataOutputStream out = null;
		ResourceBundle rb = null;
		try {
			rb = ResourceBundle.getBundle("Syspara");//读取配置文件
			str = rb.getString("backserverip").trim();
			if (!str.equals("") && str != null) {
				serverIp = str;
			}
			str = rb.getString("backserverport").trim();
			if (!str.equals("") && str != null) {
				portNo = Integer.parseInt(str);
			}
		} catch (Exception e) {
			throw new PicpMessageException("读取配置文件错误");
		}
		// 记录日志
		
		log.info("发送cnaps server的报文："+message);
		System.out.println("上送报文："+message);
		Socket socket = null;
		try {
			socket = new Socket(serverIp, portNo);			
			int backtimeout = Integer.parseInt(rb.getString("backtimeout").trim());
			socket.setSoTimeout(backtimeout);// 设置超时时间
			log.info("socket connected successful!");
			in = new DataInputStream(new BufferedInputStream(socket.getInputStream()));
			out = new DataOutputStream(new BufferedOutputStream(socket.getOutputStream()));
			String sendEncode = rb.getString("sendencode").trim();//发送字符集的设置
			byte[] outb = new byte[message.getBytes(sendEncode).length];
			outb = message.getBytes(sendEncode);
			out.write(outb);
			out.flush();
			// 报文长度
			byte[] msglength = new byte[8];
			in.readFully(msglength, 0, 8);
			int len = Integer.parseInt(new String(msglength));// 报文长度
			log.info("返回报文的长度为："+len);
			Thread.sleep(1);
			byte[] inb = new byte[len];
			in.readFully(inb, 0, len);
			String recvencode = rb.getString("recvencode").trim();//接收字符集的设置
			returnString = new String(inb,recvencode);
			
			log.info("响应报文："+returnString);
		
			
			System.out.println("回执报文头："+new String(msglength));
			System.out.println("回执报文："+returnString);
		} catch (UnknownHostException e) {
			log.error("异常："+e.getMessage());
			throw new PicpMessageException("未知socket服务主机");
		} catch (SocketTimeoutException ex) {
			ex.printStackTrace();
			log.error("异常："+ex.getMessage());
			throw new PicpMessageException("连接超时");
		} catch (IOException e) {
			e.printStackTrace();
			log.error("异常："+e.getMessage());
			throw new PicpMessageException("IO异常");

		} catch (InterruptedException e) {
			e.printStackTrace();
			log.error("异常："+e.getMessage());
			throw new PicpMessageException("IO异常");
		}catch (Exception e){
			e.printStackTrace();
			log.error("异常："+e.getMessage());
			throw new PicpMessageException("回执报文有误，解析异常");
		} finally {
			try {
				in.close();
				out.close();
				socket.close();
			} catch (Exception e) {
				e.printStackTrace();
				log.error("异常："+e.getMessage());
				throw new PicpMessageException("socket发送时出错,请检查是否与后台连接成功！");
			}
		}
		return returnString;
	}

	/**
	 * 发送核心的适配器
	 * 
	 * @param message
	 * @return
	 * @throws MessageException
	 */
	public static String sendCoreXML(String message) throws PicpMessageException {
		String serverIp = "127.0.0.1";
		int portNo = 9002;
		String str = "";
		String returnString = "";
		DataInputStream in = null;
		DataOutputStream out = null;
		ResourceBundle rb = null;
		try {
			rb = ResourceBundle.getBundle("Syspara");//读取配置文件
			str = rb.getString("coreserverip").trim();
			if (!str.equals("") && str != null) {
				serverIp = str;
			}
			str = rb.getString("coreserverport").trim();
			if (!str.equals("") && str != null) {
				portNo = Integer.parseInt(str);
			}
		} catch (Exception e) {
			throw new PicpMessageException("读取配置文件错误");
		}
		// 记录日志
		
		log.info("发送cnaps server的报文："+message);
		Socket socket = null;
		try {
			socket = new Socket(serverIp, portNo);			
			int backtimeout = Integer.parseInt(rb.getString("backtimeout").trim());
			socket.setSoTimeout(backtimeout);// 设置超时时间
			log.info("socket connected successful!");
			in = new DataInputStream(new BufferedInputStream(socket.getInputStream()));
			out = new DataOutputStream(new BufferedOutputStream(socket.getOutputStream()));
			String sendEncode = rb.getString("sendencode").trim();//发送字符集的设置
			byte[] outb = new byte[message.getBytes(sendEncode).length];
			outb = message.getBytes(sendEncode);
			out.write(outb);
			out.flush();
			// 报文长度
			byte[] msglength = new byte[8];
			in.readFully(msglength, 0, 8);
			int len = Integer.parseInt(new String(msglength));// 报文长度
			log.info("返回报文的长度为："+len);
			Thread.sleep(1);
			byte[] inb = new byte[len];
			in.readFully(inb, 0, len);
			String recvencode = rb.getString("recvencode").trim();//接收字符集的设置
			returnString = new String(inb,recvencode);
			
			log.info("响应报文："+returnString);
			
		} catch (UnknownHostException e) {
			log.error("异常："+e.getMessage());
			throw new PicpMessageException("未知socket服务主机");
		} catch (SocketTimeoutException ex) {
			ex.printStackTrace();
			log.error("异常："+ex.getMessage());
			throw new PicpMessageException("连接超时");
		} catch (IOException e) {
			e.printStackTrace();
			log.error("异常："+e.getMessage());
			throw new PicpMessageException("IO异常");

		} catch (InterruptedException e) {
			e.printStackTrace();
			log.error("异常："+e.getMessage());
			throw new PicpMessageException("IO异常");
		} finally {
			try {
				in.close();
				out.close();
				socket.close();
			} catch (Exception e) {
				e.printStackTrace();
				log.error("异常："+e.getMessage());
				throw new PicpMessageException("socket发送时出错,请检查是否与后台连接成功！");
			}
		}
		return returnString;
	}
	
	
	public static String sendEncodeMsg(String message) throws PicpMessageException {
		String serverIp = "127.0.0.1";
		int portNo = 9002;
		String str = "";
		String returnString = "";
		DataInputStream in = null;
		DataOutputStream out = null;
		ResourceBundle rb = null;
		try {
			rb = ResourceBundle.getBundle("Syspara");//读取配置文件
			str = rb.getString("encodeip").trim();
			if (!str.equals("") && str != null) {
				serverIp = str;
			}
			str = rb.getString("encodeport").trim();
			if (!str.equals("") && str != null) {
				portNo = Integer.parseInt(str);
			}
		} catch (Exception e) {
			throw new PicpMessageException("读取配置文件错误");
		}
		// 记录日志
		
		log.info("发送编押字符串："+message);
		System.out.println("上送报文："+message);
		Socket socket = null;
		try {
			socket = new Socket(serverIp, portNo);			
			int backtimeout = Integer.parseInt(rb.getString("backtimeout").trim());
			socket.setSoTimeout(backtimeout);// 设置超时时间
			log.info("socket connected successful!");
			in = new DataInputStream(new BufferedInputStream(socket.getInputStream()));
			out = new DataOutputStream(new BufferedOutputStream(socket.getOutputStream()));
			String sendEncode = rb.getString("sendencode").trim();//发送字符集的设置
			byte[] outb = new byte[message.getBytes(sendEncode).length];
			outb = message.getBytes(sendEncode);
			out.write(outb);
			out.flush();
			// 报文长度
			byte[] msglength = new byte[8];
			in.readFully(msglength, 0, 8);
			int len = Integer.parseInt(new String(msglength));// 报文长度
			log.info("返回报文的长度为："+len);
			Thread.sleep(1);
			byte[] inb = new byte[len-8];
			in.readFully(inb, 0, len-8);
			String recvencode = rb.getString("recvencode").trim();//接收字符集的设置
			returnString = new String(inb,recvencode);
			
			log.info("响应报文："+returnString);
		
			
			System.out.println("回执报文头："+new String(msglength));
			System.out.println("回执报文："+returnString);
		} catch (UnknownHostException e) {
			log.error("异常："+e.getMessage());
			throw new PicpMessageException("未知socket服务主机");
		} catch (SocketTimeoutException ex) {
			ex.printStackTrace();
			log.error("异常："+ex.getMessage());
			throw new PicpMessageException("连接超时");
		} catch (IOException e) {
			e.printStackTrace();
			log.error("异常："+e.getMessage());
			throw new PicpMessageException("IO异常");

		} catch (InterruptedException e) {
			e.printStackTrace();
			log.error("异常："+e.getMessage());
			throw new PicpMessageException("IO异常");
		}catch (Exception e){
			e.printStackTrace();
			log.error("异常："+e.getMessage());
			throw new PicpMessageException("回执报文有误，解析异常");
		} finally {
			try {
				in.close();
				out.close();
				socket.close();
			} catch (Exception e) {
				e.printStackTrace();
				log.error("异常："+e.getMessage());
				throw new PicpMessageException("socket发送时出错,请检查是否与后台连接成功！");
			}
		}
		return returnString;
	}
	
		public static void main(String[] args) {
			try {
				String str = sendXML("00000002he");
				System.out.println(str);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		public Socket getSocket() {
			return socket;
		}
		
		
		

		
}
