package com.cnaps.coreservices;

import java.io.File;
import java.io.FileInputStream;
import java.util.Properties;

import org.apache.log4j.Logger;


public class ReadConfigation {
	
	private static Logger logger = Logger.getLogger(ReadConfigation.class);
	
	private static  String PFILE = "Syspara.properties";
	private File m_file = null;

	private long m_lastModifiedTime = 0L;

	private Properties m_props = null;

	private static ReadConfigation m_instance = new ReadConfigation();

	private ReadConfigation() {
//		String path  = ReadConfigation.class.getProtectionDomain()
//		.getCodeSource().getLocation().getFile();
		String path = this.getClass().getClassLoader().getResource("/").getFile();
		PFILE= path+PFILE;
		this.m_file = new File(PFILE);
		this.m_lastModifiedTime = this.m_file.lastModified();
		if (this.m_lastModifiedTime == 0L) {
			System.err.println(PFILE+" file does not exist!");
			logger.debug(PFILE+" file does not exist!");
		}
		this.m_props = new Properties();
		try {
			this.m_props.load(new FileInputStream(PFILE));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static synchronized ReadConfigation getInstance() {
		return m_instance;
	}

	public String getConfigItem(String name, String defaultVal) {
		long newTime = this.m_file.lastModified();

		if (newTime == 0L) {
			if (this.m_lastModifiedTime == 0L){
				System.err.println(PFILE+" file does not exist!");
				logger.debug(PFILE+" file does not exist!");
			}else {
				System.err.println(PFILE+" file was deleted!!");
				logger.debug(PFILE+" file does not exist!");
			}
			return defaultVal;
		}
		if (newTime > this.m_lastModifiedTime) {
			this.m_props.clear();
			try {
				this.m_props.load(new FileInputStream(PFILE));
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		this.m_lastModifiedTime = newTime;
		String val = this.m_props.getProperty(name);
		if (val == null) {
			return defaultVal;
		}
		return val;
	}

	public String getConfigItem(String name) {
		return getConfigItem(name, "");
	}

	public String getString(String name) {
		return getConfigItem(name, "");
	}
	public static void main(String[] args) {
		ReadConfigation.getInstance().getConfigItem("ftpsocket");
	}
	
}