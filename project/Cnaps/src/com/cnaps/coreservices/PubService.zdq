/**
 * 
 */
package com.cnaps.coreservices;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.ResourceBundle;

import sun.net.TelnetInputStream;

import com.bancstone.common.dao.impl.GenericHibernateDaoSupportImpl;
import com.bancstone.common.exception.PicpMessageException;
import com.bancstone.form.BaseActionForm;
import com.cnaps.hvps.form.messages.HvpspartyinfoForm;
import com.cnaps.hvps.form.messages.HvpssysparainfoForm;
import com.cnaps.hvps.form.messages.HvpssystemstatusForm;
import com.cnaps.hvps.form.transfer.RegularCreditForm;
import com.cnaps.hvps.form.transfer.RegularDebitForm;
import com.cnaps.hvps.persistence.messages.Hvpspartyinfo;
import com.cnaps.hvps.persistence.messages.Hvpssysparainfo;
import com.cnaps.hvps.persistence.messages.Hvpssystemstatus;
import com.cnaps.hvps.persistence.pub.ChargeInfo;
import com.cnaps.hvps.persistence.pub.OthersBankAccountMsg;
import com.cnaps.hvps.persistence.pub.PubQueryAccount;
import com.cnaps.hvps.persistence.transfer.RegularCredit;
import com.cnaps.hvps.persistence.transfer.RegularDebit;

/**
 * @包名   com.cnaps.coreservices
 * @文件名 PubService.java
 * @作者   zcx
 * @创建日期 Sep 23, 2011
 * @版本 V 1.0
 */
public class PubService {
	private GenericHibernateDaoSupportImpl commondao = new GenericHibernateDaoSupportImpl();

	public GenericHibernateDaoSupportImpl getCommondao() {
		return commondao;
	}

	public void setCommondao(GenericHibernateDaoSupportImpl commondao) {
		this.commondao = commondao;
	}

	/**
	 * 生成报文标识号
	 * @param workdate
	 * @return
	 */
	public String getSEQMsgId(String workdate) {
		int seqmsgid = commondao.getSEQMsgId();
		String msgId = "1510" + workdate + getXMLLen(seqmsgid);
		return msgId;
	}

	/**
	 * 生成交易标识号
	 * @param workdate
	 * @return
	 */
	public String getSEQTransId(String workdate) {
		int seqmsgid = commondao.getSEQTransId();
		String msgId = "1510" + workdate + getXMLLen(seqmsgid);
		return msgId;
	}

	public String getXMLLen(int xmlmsglen) {
		String len = String.valueOf(xmlmsglen);
		for (int i = 0; i < (8 - String.valueOf(xmlmsglen).length()); i++) {
			len = "0" + len;
		}
		return len;
	}

	/**
	 * 查询系统参数
	 * @param transServices
	 * @param msgId
	 * @param condition
	 * @return
	 * @throws PicpMessageException
	 */
	public static Hvpssysparainfo querySystempara(String msgId, String condition)
			throws PicpMessageException {

		try {
			HvpssysparainfoForm voform = new HvpssysparainfoForm();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			voform.setSource("CNAPS2");
			voform.setDestination("CCMT");
			voform.setTransactionId(TransCodeEntity.QUERYCD);//交易代码
			voform.setSendDateTime(sdf.format(new Date()));
			voform.setTurnPageBeginPos("1");
			voform.setTurnPageShowNum("10");
			voform.setMsgId(msgId);//报文标识号
			voform.setQueryCd(TransCodeEntity.SYSTEM_PARAMETERS);
			voform.getConditions().add("cmondatacd:" + condition);
			TransServices transServices = new BusinessServices();
			CommonXMLEntity commonXMLEntity = transServices.transProcess(
					voform, voform.getTransactionId(), "systemcontrols", voform
							.getQueryCd());
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}
			List<Hvpssysparainfo> list = commonXMLEntity.getResults();
			Hvpssysparainfo po = list.get(0);

			return po;
		} catch (Exception e) {
			e.printStackTrace();
			Hvpssysparainfo hpo = new Hvpssysparainfo();
			hpo.setAltstyle("altstyle");
			hpo.setCmondatacd("cmondatacd");
			hpo.setWorkdate("2011511");

			//return hpo;
			throw new PicpMessageException("查询系统参数失败：" + e.getMessage());
		}
	}

	/**
	 * 查询系统参数
	 * @param transServices
	 * @param msgId
	 * @param condition
	 * @return
	 * @throws PicpMessageException
	 */
	public static Hvpssystemstatus querySystemstatus(String msgId)
			throws PicpMessageException {

		try {
			HvpssystemstatusForm voform = new HvpssystemstatusForm();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			voform.setSource("CNAPS2");
			voform.setDestination("CCMT");
			voform.setTransactionId(TransCodeEntity.QUERYCD);//交易代码
			voform.setSendDateTime(sdf.format(new Date()));
			voform.setTurnPageBeginPos("1");
			voform.setTurnPageShowNum("10");
			voform.setMsgId(msgId);//报文标识号
			voform.setQueryCd(TransCodeEntity.SYSTEM_STATUS);
			TransServices transServices = new BusinessServices();
			CommonXMLEntity commonXMLEntity = transServices.transProcess(
					voform, voform.getTransactionId(), "systemcontrols", voform
							.getQueryCd());
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}
			List<Hvpssystemstatus> list = commonXMLEntity.getResults();
			Hvpssystemstatus po = list.get(0);
			return po;
		} catch (Exception e) {
			e.printStackTrace();
			throw new PicpMessageException("查询系统参数失败：" + e.getMessage());
		}
	}

	/**
	 * 查询所属行的清算行行号
	 * @param transServices
	 * @param msgId
	 * @param condition
	 * @return
	 * @throws PicpMessageException
	 */
	public static Hvpspartyinfo queryDirectBankCode(String msgId,
			String condition) throws PicpMessageException {

		try {
			HvpspartyinfoForm voform = new HvpspartyinfoForm();
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
			voform.setSource("CNAPS2");
			voform.setDestination("CCMT");
			voform.setTransactionId(TransCodeEntity.QUERYCD);//交易代码
			voform.setSendDateTime(sdf.format(new Date()));
			voform.setTurnPageBeginPos("1");
			voform.setTurnPageShowNum("10");
			voform.setMsgId(msgId);//报文标识号
			voform.setQueryCd(TransCodeEntity.BANKCODE);
			voform.getConditions().add("BankCode:" + condition);
			TransServices transServices = new BusinessServices();
			CommonXMLEntity commonXMLEntity = transServices.transProcess(
					voform, voform.getTransactionId(), "systemcontrols", voform
							.getQueryCd());
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}
			List<Hvpspartyinfo> list = commonXMLEntity.getResults();

			Hvpspartyinfo po = list.get(0);
			return po;
		} catch (Exception e) {
			e.printStackTrace();
			throw new PicpMessageException("查询系统参数失败：" + e.getMessage());
		}
	}

	/**
	 * 查询定期贷记
	 * @param transServices
	 * @param msgId
	 * @param condition
	 * @return
	 * @throws PicpMessageException
	 */
	public static RegularCredit queryRegularCredit(String condition)
			throws PicpMessageException {
		RegularCredit po = new RegularCredit();
		RegularCreditForm voform = new RegularCreditForm();
		RegularCredit hpo = voform.getPo();
		voform.getConditions().add("pmtgrpid:" + condition);//支付组号查询

		commSetToXML(voform, TransCodeEntity.QUERYCD, "BEPS");
		voform.setMsgId("123");//报文标识号
		voform.setQueryCd(TransCodeEntity.SEND_BEPS_RegularCreditTurnAction_QUERYMSG); //"1510712502"	
		CommonXMLEntity commonXMLEntity = null;
		voform.setTurnPageBeginPos(1 + "");
		voform.setTurnPageShowNum(String.valueOf("10"));
		try {
			TransServices transServices = new BusinessServices();
			commonXMLEntity = transServices.transProcess(voform, voform
					.getTransactionId(), "transaction", voform.getQueryCd());
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}

			if (commonXMLEntity.getRecordcount() == null) {
				voform.setTotalSize(0);
			} else {
				voform.setTotalSize(Integer.parseInt(commonXMLEntity
						.getRecordcount()));
			}

			List list = commonXMLEntity.getResults();

			if (list.size() > 0) {
				po = (RegularCredit) list.get(0);
			}

			return po;

		} catch (Exception e) {
			e.printStackTrace();
			return po;
			//throw new PicpMessageException("查询系统参数失败：" + e.getMessage());
		}
	}

	/**
	 * 查询定期借记
	 * @param transServices
	 * @param msgId
	 * @param condition
	 * @return
	 * @throws PicpMessageException
	 */
	public static RegularDebit queryRegularDebit(String condition)
			throws PicpMessageException {
		RegularDebit po = new RegularDebit();
		RegularDebitForm voform = new RegularDebitForm();
		try {
			commSetToXML(voform, TransCodeEntity.QUERYCD, "BEPS");
			voform.setQueryCd(TransCodeEntity.RegularDebitAction_queryParent); // 明细建立查询"1510713305"

			RegularDebit hpo = voform.getPo();

			voform.setTurnPageBeginPos(1 + "");
			voform.setTurnPageShowNum(String.valueOf("10"));

			voform.getConditions().add("pmtgrpid:" + condition);//支付组号查询

			TransServices transServices = new BusinessServices();
			CommonXMLEntity commonXMLEntity = transServices.transProcess(
					voform, voform.getTransactionId(), "transaction", voform
							.getQueryCd());
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}

			if (commonXMLEntity.getRecordcount() == null) {
				voform.setTotalSize(0);
			} else {
				voform.setTotalSize(Integer.parseInt(commonXMLEntity
						.getRecordcount()));
			}
			List<RegularDebit> list = commonXMLEntity.getResults();

			if (list.size() > 0) {
				po = (RegularDebit) list.get(0);
			}

			return po;

		} catch (Exception e) {
			e.printStackTrace();
			return po;
			//throw new PicpMessageException("查询系统参数失败：" + e.getMessage());
		}
	}

	/**
	 * 查询用户信息
	 * @param transServices
	 * @param msgId
	 * @param condition
	 * @return
	 * @throws PicpMessageException
	 */
	public static PubQueryAccount QueryAccount(String condition)
			throws PicpMessageException {
		PubQueryAccount po = new PubQueryAccount();

		 
		RegularCreditForm voform = new RegularCreditForm();
		RegularCredit hpo = voform.getPo();
		voform.getConditions().add("acctid:" + condition);//支付组号查询

		commSetToXML(voform, TransCodeEntity.QUERYCD, "BEPS");
		voform.setMsgId("123");//报文标识号
		voform.setQueryCd(TransCodeEntity.PubQueryAccount); //"1510712502"	
		CommonXMLEntity commonXMLEntity = null;
		voform.setTurnPageBeginPos(1 + "");
		voform.setTurnPageShowNum(String.valueOf("10"));
		try {
			TransServices transServices = new BusinessServices();
			commonXMLEntity = transServices.transProcess(voform, voform
					.getTransactionId(), "transaction", voform.getQueryCd());
			if (!commonXMLEntity.getProcessCode().equals("000000")) {
				throw new PicpMessageException("错误码：["
						+ commonXMLEntity.getProcessCode() + "] 错误信息：["
						+ commonXMLEntity.getProcessDes() + "]");
			}

			if (commonXMLEntity.getRecordcount() == null) {
				voform.setTotalSize(0);
			} else {
				voform.setTotalSize(Integer.parseInt(commonXMLEntity
						.getRecordcount()));
			}

			List list = commonXMLEntity.getResults();

			if (list.size() > 0) {
				po = (PubQueryAccount) list.get(0);
			}

			return po;

		} catch (Exception e) {
			e.printStackTrace();
			//throw new PicpMessageException("查询系统参数失败：" + e.getMessage());
			return po;
		}

	}

	/**
	 * 查询收款人信息
	 * @param transServices
	 * @param msgId
	 * @param condition
	 * @return
	 * @throws PicpMessageException
	 */
	public static OthersBankAccountMsg queryOthersBankAccountMsg(
			String condition) throws PicpMessageException {
		OthersBankAccountMsg po = new OthersBankAccountMsg();
		try {
			po = (OthersBankAccountMsg) DealWEBServics.processWebService(
					"queryOthersBankAccountMsg", OthersBankAccountMsg.class,
					"urn:webservice:bancstone:com", "othersbankaccountmsg",
					condition);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return po;
	}

	/**
	 * 保存收款人信息
	 * @param transServices
	 * @param msgId
	 * @param condition
	 * @return
	 * @throws PicpMessageException
	 */
	public static OthersBankAccountMsg saveOthersBankAccountMsg(
			OthersBankAccountMsg obj) throws PicpMessageException {
		OthersBankAccountMsg po = new OthersBankAccountMsg();

		try {
			po = (OthersBankAccountMsg) DealWEBServics
					.processWebService("saveOthersBankAccountMsg",
							OthersBankAccountMsg.class,
							"urn:webservice:bancstone:com",
							"othersbankaccountmsg", obj);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return po;
	}

	public static void commSetToXML(BaseActionForm voform,
			String transactionid, String business) {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
		voform.setSource("CNAPS2");
		voform.setDestination(business);
		voform.setTransactionId(transactionid);//交易代码
		voform.setSendDateTime(sdf.format(new Date()));

	}
	/**
	 * 查询手续费
	 * @param msgtpcd 报文编码
	 * @param money 汇款金额
	 * @param pmttp 业务类型
	 * @param hvpsmoney 大额金额下限
	 * @param bepsmoney 小额金额上限
	 * @param sttlmprty 业务优先级
	 * @return 手续费信息
	 * @throws PicpMessageException
	 */
	public static  List<ChargeInfo> chargeQuery(
			String msgtpcd , String money ,String pmttp,String hvpsmoney ,String bepsmoney,String sttlmprty) throws PicpMessageException {
		 List<ChargeInfo> po = new ArrayList();
		try {
			ChargeInfo chargeinfo = new ChargeInfo();
			chargeinfo.setMsgtpcd(msgtpcd);//报文编码
			chargeinfo.setMoney(money);//汇款金额
			chargeinfo.setPmttp(pmttp);//业务类型
			chargeinfo.setHvpsmoney(hvpsmoney);//大额下限金额
			chargeinfo.setBepsmoney(bepsmoney);//小额上限金额
			chargeinfo.setSttlmprty(sttlmprty);//业务优先级
			Object obj[];
			obj =  DealWEBServics.processWebServiceArra("queryChargeMsgList", ChargeInfo.class, 
					"urn:webservice:bancstone:com", "chargeinfo", chargeinfo);
			
			 for(Object o:obj){
				 ChargeInfo df=  (ChargeInfo)o ;
				 if(df.getMsgtpcd()==null){
					 df.setMsgtpcd("beps");
				 }
				 if(df.getMsgtpcd().startsWith("hvps")){
					 df.setMsgtpcd("hvps");
				 }else{
					 df.setMsgtpcd("beps");
				 }
				 po.add(df);
			 }
		} catch (Exception e) {
			e.printStackTrace();
		}
		return po;
	}
	public static List<ChargeInfo> chargeQuerylist(
			List<ChargeInfo>  list) throws PicpMessageException {
		List<ChargeInfo> po = new ArrayList<ChargeInfo>();
		for(Object c:list){
			ChargeInfo cio=  (ChargeInfo)c;
		}
		try {
			po = (List<ChargeInfo>)DealWEBServics.processlist("queryChargeMsg", ChargeInfo.class, 
					"urn:webservice:bancstone:com", "chargeinfo", list);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return po;
	}
	
	/**
	 * 获得ftp信息
	 * @return
	 */
	public FtpEntity getFtpinfo(){
		FtpEntity ftpentity = new FtpEntity();
		ResourceBundle rb = ResourceBundle.getBundle("Syspara");//读取配置文件
		 String imageusr= rb.getString("user");
         String imagepwd= rb.getString("password");
         String imageip=  rb.getString("ftpsocket");
         SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
         String imagedir= rb.getString("imagedir")+"/"+sdf.format(new Date())+"SEND";
         ftpentity.setFtpuser(imageusr);
         ftpentity.setFtppwd(imagepwd);
         ftpentity.setFtpip(imageip);
         ftpentity.setImagedir(imagedir);
         return ftpentity;
	}
	
	
	public static void main(String[] args) {

	}
	
   
}
