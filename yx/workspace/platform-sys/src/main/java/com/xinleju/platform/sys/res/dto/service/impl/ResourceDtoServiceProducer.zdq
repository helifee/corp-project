package com.xinleju.platform.sys.res.dto.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.sys.base.dto.BaseProjectTypeDto;
import com.xinleju.platform.sys.base.entity.BaseProjectType;
import com.xinleju.platform.sys.res.dto.DataNodeDto;
import com.xinleju.platform.sys.res.dto.OperationDto;
import com.xinleju.platform.sys.res.dto.ResourceDto;
import com.xinleju.platform.sys.res.dto.service.ResourceDtoServiceCustomer;
import com.xinleju.platform.sys.res.entity.AppSystem;
import com.xinleju.platform.sys.res.entity.Resource;
import com.xinleju.platform.sys.res.service.AppSystemService;
import com.xinleju.platform.sys.res.service.OperationService;
import com.xinleju.platform.sys.res.service.ResourceService;
import com.xinleju.platform.sys.res.utils.InvalidCustomException;
import com.xinleju.platform.sys.res.utils.ResourceType;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * @author admin
 * 
 *
 */
 
public class ResourceDtoServiceProducer implements ResourceDtoServiceCustomer{
	private static Logger log = Logger.getLogger(ResourceDtoServiceProducer.class);
	@Autowired
	private ResourceService resourceService;
	
	@Autowired
	private AppSystemService appSystemService;
	
	@Autowired
	private OperationService operationService;

	public String save(String userInfo, String saveJson){
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   Resource resource=JacksonUtils.fromJson(saveJson, Resource.class);
		   Map<String,Object> map=JacksonUtils.fromJson(saveJson, HashMap.class);
		   //校验编码重复 add by gyh 2017-3-28
		   Map<String,Object> param=new HashMap<String,Object>();
		   param.put("code", resource.getCode());
		   param.put("appId", resource.getAppId());
		   Integer isc=resourceService.getCodeCount(param);
		   if(isc>0){
			   throw new InvalidCustomException("该业务系统下此菜单编码已存在，不可重复");
		   }
		 //排序号不输入，改为系统最大排序加1，同时维护全路径相关字段 add by gyh 2017-4-2
		   map.put("tableName", "pt_sys_res_resource");
		   Long maxSort=appSystemService.getMaxSort(map)+1L;//排序号自动加1
		   resource.setSort(maxSort);
		   //菜单全路径
		   if(resource.getParentId()!=null && StringUtils.isNotBlank(resource.getParentId())){
			   String parentId=(String)map.get("parentId");
			   Resource resP=resourceService.getObjectById(parentId);
			   resource.setPrefixId(resP.getPrefixId()+"/"+resource.getId());
			   resource.setPrefixName(resP.getPrefixName()+"/"+resource.getName());
			   resource.setPrefixSort(resP.getPrefixSort()+"-"+String.format("B%05d", maxSort));
		   }else{
			   String appId=(String)map.get("appId");
			   AppSystem app=appSystemService.getObjectById(appId);
			   resource.setPrefixId(app.getPrefixId()+"/"+resource.getId());
			   resource.setPrefixName(app.getPrefixName()+"/"+resource.getName());
			   resource.setPrefixSort(app.getPrefixSort()+"-"+String.format("B%05d", maxSort));
		   }
		   resourceService.save(resource);
		   info.setResult(JacksonUtils.toJson(resource));
		   info.setSucess(true);
		   info.setMsg("保存对象成功!");
		} catch (Exception e) {
		 log.error("保存对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("保存对象失败!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   Resource resource=JacksonUtils.fromJson(updateJson, Resource.class);
		   Map<String,Object> map=JacksonUtils.fromJson(updateJson, HashMap.class);
		   //校验编码重复 add by gyh 2017-3-28
		   Map<String,Object> param=new HashMap<String,Object>();
		   param.put("code", resource.getCode());
		   param.put("id", resource.getId());
		   param.put("appId", resource.getAppId());
		   Integer isc=resourceService.getCodeCount(param);
		   if(isc>0){
			   throw new InvalidCustomException("该业务系统下此菜单编码已存在，不可重复");
		   }
		   int result=   resourceService.updateMenu(resource);
		   info.setResult(JacksonUtils.toJson(result));
		   info.setSucess(true);
		   info.setMsg("更新对象成功!");
		} catch (Exception e) {
		 log.error("更新对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("更新对象失败!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   Resource resource=JacksonUtils.fromJson(deleteJson, Resource.class);
			   int result= resourceService.deleteObjectById(resource.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= resourceService.deleteAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	 {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			Map<String,Object> map=JacksonUtils.fromJson(getJson, HashMap.class);
//			Resource	result = resourceService.getObjectById(resource.getId());
			map.put("delflag", false);
			//update by gyh 
			List<ResourceDto> list=resourceService.queryListByCondition(map);
			if(list!=null &&list.size()>0){
				info.setResult(JacksonUtils.toJson(list.get(0)));
			}else{
				info.setResult(JacksonUtils.toJson(null));
			}
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				Page page=resourceService.getPage(map, (Integer)map.get("start"),  (Integer)map.get("limit"));
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=resourceService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
//				List list=resourceService.queryList(map);
				if (map.get("limit")!=null&&Integer.valueOf(map.get("limit").toString())==-1 && map.get("fristLimit")!=null) {
					map.put("limit", map.get("fristLimit"));
				}
				List<ResourceDto> list=resourceService.queryListByCondition(map);
				List<String> pIds=resourceService.selectAllParentId(map);
				if(list!=null&&list.size()>0){
					for (ResourceDto res : list) {
						String prefixSort = res.getPrefixSort();
						res.setMenuIcon(res.getIcon());
					/*	res.setIcon("");*/
						if(prefixSort!=null){
							String[] split = prefixSort.split("-");
							Long i=(long) split.length-1;
							res.setLevel(i);
							res.setExpanded(true);
							res.setLoaded(true);
							if(pIds.contains(res.getId())){
								res.setIsLeaf(false);
							}else{
								res.setIsLeaf(true); 
							};
						}
					}
				}

				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=resourceService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   Resource resource=JacksonUtils.fromJson(deleteJson, Resource.class);
			   //判断是否存在下级菜单或按钮  add by gyh 2017-4-10
			   Map<String,Object> map=new HashMap<String, Object>();
			   map.put("menuId", resource.getId());
			   Integer c=resourceService.selectSonNum(map);
			   if(c>0){
				   throw new InvalidCustomException("下级菜单被引用，不可删除");
			   }
			   int result= resourceService.deleteMeneAllSon(resource);
//			   int result= resourceService.deletePseudoObjectById(resource.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= resourceService.deletePseudoAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}
	//查询树（根据业务系统包括一个业务系统下的所有菜单和按钮--jqgrid树形表格用的数据）
	@Override
	public String getfuncPermissionButtonJqgridTreeByAppid(String userInfo, String paramater){
		DubboServiceResultInfo info=new DubboServiceResultInfo();
        try {
        	Map mapAppId = JacksonUtils.fromJson(paramater, HashMap.class);
        	Map map = new HashMap();
        	map.put("delflag", false);
        	//查询所有未删除的系统
        	List<AppSystem> listApp = appSystemService.queryListByCondition(map);
        	
        	//查询所有未删除的菜单
        	List<ResourceDto> listResourceDto = resourceService.queryListByCondition(map);
        	
        	//查询所有未删除的按钮
        	List<OperationDto> listOperationDto = operationService.queryListByCondition(map);
        	
        	
        	List<DataNodeDto> listReturn = new ArrayList<DataNodeDto>();
        	Long level=0l;
     	   Long num=1l;
        	for(AppSystem app: listApp){
        		//查询当前系统下
        		if(app.getId().equals((String)mapAppId.get("appId"))){
        			DataNodeDto dnd = new DataNodeDto();
	        		dnd.setId(app.getId());
	        		dnd.setName(app.getName());
	        		dnd.setCode(app.getCode());
	        		dnd.setResourceurl(app.getUrl());
	        		dnd.setType(ResourceType.APPSystem.getCode());
	        		dnd.setLevel("0");
	        		dnd.setExpanded(true);
	        		dnd.setIsLeaf(false);
	        		dnd.setLoaded(true);
	        		dnd.setLft(num);
	        		//获取一级菜单
//	        		List<DataNodeDto> list= qChildMenuByAppId(app.getId(),listResourceDto,num);
	        		Map<String,Object> mapr = qChildMenuByAppId(app.getId(),listResourceDto,num);
//	        		//获取子菜单
//	        		for(DataNodeDto d:list){
//	        			queryChildMenuAndButton(d,listResourceDto,listOperationDto);
//	        		}
//	        		dnd.setChildren(list);
	        		Long numr = (Long)mapr.get("num");
	        		List<DataNodeDto> list = (List<DataNodeDto>)mapr.get("list");
	        		dnd.setRgt(numr);
	        		listReturn.add(dnd);
	        		listReturn.addAll(list);
        		}
        		
        	}
        	
    	info.setResult(JacksonUtils.toJson(listReturn));
	    info.setSucess(true);
	    info.setMsg("获取树对象成功!");
	}catch(Exception e){
		log.error("获取树对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("获取树对象失败!");
		 info.setExceptionMsg(e.getMessage());
	}
	return JacksonUtils.toJson(info);
	}
	
	//获取一级菜单(jqgrid用)
	public Map<String,Object> qChildMenuByAppId(String id,List<ResourceDto> listResourceDto,Long num) throws Exception{
		Map<String,Object> map = new HashMap<String,Object>();
		List<DataNodeDto> list = new ArrayList<DataNodeDto>();
		for(ResourceDto rd:listResourceDto){
			
			if(id.equals(rd.getAppId()) &&(null == rd.getParentId() || "".equals(rd.getParentId()))){
				++num;
				DataNodeDto dnd = new DataNodeDto();
        		dnd.setId(rd.getId());
        		dnd.setName(rd.getName());
        		dnd.setCode(rd.getCode());
        		dnd.setResourceurl(rd.getUrl());
        		dnd.setType(ResourceType.RESOURCE.getCode());
        		dnd.setLevel("1");
        		dnd.setExpanded(true);
        		dnd.setIsLeaf(false);
        		dnd.setLoaded(true);
        		dnd.setLft(num);
        		dnd.setParentId(rd.getAppId());
        		++num;
        		dnd.setRgt(num);
        		list.add(dnd);
			}
		}
		
		map.put("num", num);
		map.put("list", list);
		return map;
	}
	
	//查询树（根据业务系统包括一个业务系统下的所有菜单和按钮）
	@Override
	public String getOperationTreeByAppId(String userInfo, String paramater){
			DubboServiceResultInfo info=new DubboServiceResultInfo();
	        try {
	        	Map mapAppId = JacksonUtils.fromJson(paramater, HashMap.class);
	        	
//	        	String[] appIdsList = appIds.split(",");
	        	
	        	Map mapApp = new HashMap();
	        	mapApp.put("appDelFlag", "0");
	        	mapApp.put("appStatus", "1");
	        	Map mapMenu = new HashMap();
	        	mapMenu.put("menuDelFlag", "0");
	        	mapMenu.put("menuStatus", "1");
	        	Map mapButton = new HashMap();
	        	mapButton.put("delflag", "0");
	        	if(null != mapAppId.get("appId") && !"".equals((String)mapAppId.get("appId"))){
	        		mapApp.put("appId", (String)mapAppId.get("appId"));
	        		mapMenu.put("appId", (String)mapAppId.get("appId"));
	        		mapButton.put("appId", (String)mapAppId.get("appId"));
	        	}
				mapMenu.put("isCustomForm",0);
//	        	Date t1 = new Date();
	        	//查询所有未删除、启用的系统
	        	List<AppSystem> listApp = appSystemService.queryListByCondition(mapApp);
//	        	Date t2 = new Date();
//				System.out.println("查询所有未删除、启用的系统用时：：：：：：：：："+(t2.getTime()-t1.getTime()));
	        	//查询所有未删除、启用的菜单
	        	List<ResourceDto> listResourceDto = resourceService.queryListByCondition(mapMenu);
//	        	Date t3 = new Date();
//				System.out.println("查询所有未删除、启用的菜单用时：：：：：：：：："+(t3.getTime()-t2.getTime()));
	        	//查询所有未删除的按钮
	        	List<OperationDto> listOperationDto = operationService.queryListByCondition(mapButton);
//	        	Date t4 = new Date();
//				System.out.println("查询所有未删除的按钮用时：：：：：：：：："+(t4.getTime()-t3.getTime()));
	        	
	        	List<DataNodeDto> listReturn = new ArrayList<DataNodeDto>();
	        	
	        	for(AppSystem app: listApp){
	        		//查询当前传递过来的系统下
//	        		for(String appId :appIdsList){
//	        			if(app.getId().equals(appId)){
		        			DataNodeDto dnd = new DataNodeDto();
			        		dnd.setId(app.getId());
			        		dnd.setName(app.getName());
			        		dnd.setCode(app.getCode());
			        		dnd.setResourceurl(app.getUrl());
			        		dnd.setAppId(app.getId());
			        		dnd.setResourceId("");
			        		dnd.setType(ResourceType.APPSystem.getCode());
			        		//获取一级菜单
			        		List<DataNodeDto> list= queryChildMenuByAppId(app.getId(),listResourceDto);
			        		
			        		//获取子菜单
			        		for(DataNodeDto d:list){
			        			queryChildMenuAndButton(d,listResourceDto,listOperationDto);
			        		}
			        		dnd.setChildren(list);
			        		listReturn.add(dnd);
//		        		}
//	        		}
	        	}
//	        	Date t5 = new Date();
//				System.out.println("处理数据用时：：：：：：：：："+(t5.getTime()-t4.getTime()));
	    	info.setResult(JacksonUtils.toJson(listReturn));
		    info.setSucess(true);
		    info.setMsg("获取树对象成功!");
		}catch(Exception e){
			log.error("获取树对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取树对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
	
	//获取所有菜单树（包括所有业务系统和所有菜单）
	@Override
	public String getResourceTreeAll(String userInfo, String paramater){
			DubboServiceResultInfo info=new DubboServiceResultInfo();
	        try {
	        	/*Map map = new HashMap();
	        	map.put("delflag", false);*/
	        	//update by gyh
	        	Map<String,Object> map = JacksonUtils.fromJson(paramater, HashMap.class);
	        	
	        	//查询所有未删除的系统
	        	List<AppSystem> listApp = appSystemService.queryListByCondition(map);
	        	
	        	//查询所有未删除的菜单
	        	List<ResourceDto> listResourceDto = resourceService.queryListByCondition(map);
	        	List<DataNodeDto> listReturn = new ArrayList<DataNodeDto>();
	        	
	        	for(AppSystem app: listApp){
	        		DataNodeDto dnd = new DataNodeDto();
	        		dnd.setId(app.getId());
	        		dnd.setName(app.getName());
	        		dnd.setCode(app.getCode());
	        		dnd.setResourceurl(app.getUrl());
	        		dnd.setType(ResourceType.APPSystem.getCode());
	        		//获取一级菜单
	        		List<DataNodeDto> list= queryChildMenuByAppId(app.getId(),listResourceDto);
	        		
	        		//获取子菜单
	        		for(DataNodeDto d:list){
	        			queryChildMenu(d,listResourceDto);
	        		}
	        		dnd.setChildren(list);
	        		listReturn.add(dnd);
	        	}
	        	
	    	info.setResult(JacksonUtils.toJson(listReturn));
		    info.setSucess(true);
		    info.setMsg("获取树对象成功!");
		}catch(Exception e){
			log.error("获取树对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取树对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
	
	//根据系统ID获取菜单，不带系统（只有菜单）
	@Override
	public String getResourceTree(String userInfo, String paramater){
			DubboServiceResultInfo info=new DubboServiceResultInfo();
	        try {
	        	Map map = JacksonUtils.fromJson(paramater, HashMap.class);
	        List<DataNodeDto> list=resourceService.queryResourceListByAppId(map);
	        Map mapCondition = new HashMap();
	        mapCondition.put("delflag", false);
	        //查询所有未删除的菜单
        	List<ResourceDto> listResourceDto = resourceService.queryListByCondition(map);
	        for (DataNodeDto dataCtrl : list) {
	        	queryResourceListAll(dataCtrl,listResourceDto);
	        	dataCtrl.setType(ResourceType.RESOURCE.getCode());
			}
	    	info.setResult(JacksonUtils.toJson(list));
		    info.setSucess(true);
		    info.setMsg("获取树对象成功!");
		}catch(Exception e){
			log.error("获取树对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取树对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
	
	//获取一级菜单
	public List<DataNodeDto> queryChildMenuByAppId(String id,List<ResourceDto> listResourceDto) throws Exception{
		List<DataNodeDto> list = new ArrayList<DataNodeDto>();
		for(ResourceDto rd:listResourceDto){
			if(id.equals(rd.getAppId()) &&(null == rd.getParentId() || "".equals(rd.getParentId()))){
				DataNodeDto dnd = new DataNodeDto();
        		dnd.setId(rd.getId());
        		dnd.setName(rd.getName());
        		dnd.setCode(rd.getCode());
        		dnd.setResourceurl(rd.getUrl());
        		dnd.setAppId(rd.getAppId());
        		dnd.setResourceId(rd.getId());
        		dnd.setType(ResourceType.RESOURCE.getCode());
        		list.add(dnd);
			}
		}
		return list;
	}
	
	//递归获取子菜单（带按钮）
	public DataNodeDto queryChildMenuAndButton(DataNodeDto dto,List<ResourceDto> listResourceDto,List<OperationDto> listOperationDto) throws Exception{
//			List<DataNodeDto> list = resourceService.queryResourceListByParentId(dto.getId());
		//查询菜单子节点（代替从数据库中进行查询）
		List<DataNodeDto> list = queryChildMenuNode(dto.getId(),listResourceDto);
		
		//查询菜单下的按钮
		List<DataNodeDto> listButton = queryChildMenuAndButtonNode(dto.getId(),listOperationDto);
		listButton.addAll(list);
		dto.setChildren(listButton);
		if(list!=null&&list.size()>0){
			for (DataNodeDto dataNodeDto : list) {
				queryChildMenuAndButton(dataNodeDto,listResourceDto,listOperationDto);
			}
			
		}else{
			return dto;
		}
		return dto;
	}
	
	//查询菜单下的按钮
	public List<DataNodeDto> queryChildMenuAndButtonNode(String resourceId,List<OperationDto> listOperationDto){
		List<DataNodeDto> listButtonChildNode = new ArrayList<DataNodeDto>();
		for(OperationDto o :listOperationDto){
			//获取一级按钮
			if(resourceId.equals(o.getResourceId()) && (null == o.getParentId() || o.getParentId().equals("")) ){
				DataNodeDto dnd = new DataNodeDto();
        		dnd.setId(o.getId());
        		dnd.setName(o.getName());
        		dnd.setCode(o.getCode());
        		dnd.setAppId(o.getAppId());
        		dnd.setResourceId(o.getResourceId());
        		dnd.setResourceurl(o.getUrl());
        		dnd.setType(ResourceType.OPERATION.getCode());
        		listButtonChildNode.add(dnd);
			}
		}
		//循环一级按钮获取下级按钮
		if(null!=listButtonChildNode &&listButtonChildNode.size()>0){
			for (DataNodeDto dataNodeDto : listButtonChildNode) {
				queryChildButtonMenu(dataNodeDto,listOperationDto);
			}
		}
		
		return listButtonChildNode;
	}
	
	//递归查询按钮下的按钮
	public DataNodeDto queryChildButtonMenu(DataNodeDto dto,List<OperationDto> listOperationDto){
		List<DataNodeDto> list = queryChildButtonNode(dto.getId(),listOperationDto);
		dto.setChildren(list);
		if(list!=null&&list.size()>0){
			for (DataNodeDto dataNodeDto : list) {
				queryChildButtonMenu(dataNodeDto,listOperationDto);
			}
			dto.setChildren(list);
		}else{
			return dto;
		}
		return dto;
	}
	
	//查询按钮下的子按钮
	
	public List<DataNodeDto> queryChildButtonNode(String parentId,List<OperationDto> listOperationDto){
		List<DataNodeDto> listButtonChildNode = new ArrayList<DataNodeDto>();
		for(OperationDto o :listOperationDto){
			//获取子按钮
			if(parentId.equals(o.getParentId())){
				DataNodeDto dnd = new DataNodeDto();
        		dnd.setId(o.getId());
        		dnd.setName(o.getName());
        		dnd.setCode(o.getCode());
        		dnd.setResourceurl(o.getUrl());
        		dnd.setType(ResourceType.OPERATION.getCode());
        		listButtonChildNode.add(dnd);
			}
		}
		return listButtonChildNode;
	}
	
	
	//递归获取子菜单
	public DataNodeDto queryChildMenu(DataNodeDto dto,List<ResourceDto> listResourceDto) throws Exception{
//		List<DataNodeDto> list = resourceService.queryResourceListByParentId(dto.getId());
		List<DataNodeDto> list = queryChildMenuNode(dto.getId(),listResourceDto);
		if(list!=null&&list.size()>0){
			for (DataNodeDto dataNodeDto : list) {
				queryChildMenu(dataNodeDto,listResourceDto);
			}
			dto.setChildren(list);
		}else{
			return dto;
		}
		return dto;
	}
	
	//查询菜单子节点（代替从数据库中进行查询）
	public List<DataNodeDto> queryChildMenuNode(String parentId,List<ResourceDto> list_org){
		List<DataNodeDto> listMenuChildNode = new ArrayList<DataNodeDto>();
		for(ResourceDto resourceDto:list_org){
			if(parentId.equals(resourceDto.getParentId())){
				DataNodeDto dnd = new DataNodeDto();
        		dnd.setId(resourceDto.getId());
        		dnd.setName(resourceDto.getName());
        		dnd.setCode(resourceDto.getCode());
        		dnd.setResourceurl(resourceDto.getUrl());
        		dnd.setAppId(resourceDto.getAppId());
        		dnd.setResourceId(resourceDto.getId());
        		dnd.setOpenmode(resourceDto.getOpenmode());
        		dnd.setType(ResourceType.RESOURCE.getCode());
        		listMenuChildNode.add(dnd);
			}
		}
		return listMenuChildNode;
	}
	
	public DataNodeDto queryResourceListAll(DataNodeDto dto,List<ResourceDto> listResourceDto) throws Exception{
//		List<DataNodeDto> list = resourceService.queryResourceListByParentId(dto.getId());
		List<DataNodeDto> list = queryChildMenuNode(dto.getId(),listResourceDto);
		if(list!=null&&list.size()>0){
			for (DataNodeDto dataNodeDto : list) {
				queryResourceListAll(dataNodeDto,listResourceDto);
				dataNodeDto.setType(ResourceType.RESOURCE.getCode());
			}
			dto.setChildren(list);
		}else{
			return dto;
		}
		return dto;
	}
	
	/**
	 * 上移下移，两条记录sort交换
	 */
	@Override
	public String upOrDown(String userInfo, String updateJson)  {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			Map<String,Object> map=JacksonUtils.fromJson(updateJson, HashMap.class);
			int result = resourceService.upOrDown(map);
			info.setResult(JacksonUtils.toJson(result));
			info.setSucess(true);
			info.setMsg("更新对象成功!");
		} catch (Exception e) {
			log.error("更新对象失败!"+e.getMessage());
			info.setSucess(false);
			info.setMsg("更新对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
}
