package com.xinleju.platform.flow.operation;

import java.sql.Timestamp;
import java.util.List;

import com.xinleju.platform.base.utils.IDGenerator;
import com.xinleju.platform.flow.dto.ApprovalSubmitDto;
import com.xinleju.platform.flow.enumeration.TaskStatus;
import com.xinleju.platform.flow.enumeration.TaskType;
import com.xinleju.platform.flow.model.ApproverUnit;
import com.xinleju.platform.flow.model.InstanceUnit;
import com.xinleju.platform.flow.model.TaskUnit;

/**
 * 沟通发起人操作：在本人下面加一条发起人并点亮，本身行完成
 * 发起人有三种可选操作：回复、接受、不接受
 * 1、回复：发起人行完成，下面再加一条本人行，本人再处理
 * 2、接受、不接受：发起人行完成，下面不再加本人行，即本人处理完毕
 * 
 * 整个过程中只有人员列变化，岗位与环节不变化！！！
 * 
 * @author daoqi
 *
 */
public class TalkToFQROperation extends DefaultOperation implements Operation{
	
	TalkToFQROperation() {
		super(OperationType.TALKTOFQR);
	}

//	@Override
//	public String action(InstanceUnit instanceUnit, ApprovalSubmitDto approvalDto)
//			throws Exception {
//		
//		//1、设置当前位置
//		setCurrentLocation(instanceUnit, approvalDto);
//
//		//2、完成当前人
//		completeCurrent(approvalDto);
//		
//		//3、插入发起人行
//		insertStarterLine(instanceUnit, approvalDto);
//		
//		save(instanceUnit);
//		
//		//5、发送待办消息
//		handleMessages(instanceUnit, approvalDto);
//		
//		//删除待办消息
//		completeMessage(approvalDto.getMsgId());
//		
//		return "success";
//	}
	

	@Override
	protected void operate(InstanceUnit instanceUnit, ApprovalSubmitDto approvalDto) throws Exception {
		//2、完成当前人
		completeCurrent(approvalDto);
		
		//3、插入发起人行
		insertStarterLine(instanceUnit, approvalDto);
	}


	private void insertStarterLine(InstanceUnit instanceUnit, ApprovalSubmitDto approvalDto) {
		List<ApproverUnit> currentApproverList = currentPost.getApprovers();
		ApproverUnit newApprover = new ApproverUnit();
		newApprover.setId(IDGenerator.getUUID());
		
		//发起人
		ApproverUnit starter = getStarter(instanceUnit);
		
		newApprover.setApproverId(starter.getApproverId());	
		newApprover.setApproverName(starter.getApproverName());
		newApprover.setDbAction(1);
		newApprover.setAcPostId(currentApprover.getAcPostId());
		newApprover.setOwner(currentApprover.getOwner());
		
		TaskUnit task = new TaskUnit();
		task.setDbAction(1);
		task.setTaskId(IDGenerator.getUUID());
		task.setTaskStatus(TaskStatus.RUNNING.getValue());
		task.setTaskType(TaskType.APPROVER.getValue());	//发起人的任务
		task.setStartTime(new Timestamp(System.currentTimeMillis()));
		task.setFromId(currentApprover.getApproverId());
		task.setFromName(currentApprover.getApproverName());
		newApprover.setTask(task);
		currentApproverList.add(currentApprover.getApproverSeq(), newApprover);
		
		//重新排序
		for(int i=0; i<currentApproverList.size(); i++) {
			currentApproverList.get(i).setApproverSeq(i + 1);
		}
	}

	private ApproverUnit getStarter(InstanceUnit instanceUnit) {
		ApproverUnit starter = instanceUnit.getAcList().get(0).getPosts().get(0).getApprovers().get(0);
		return starter;
	}

	private void completeCurrent(ApprovalSubmitDto approvalDto) {
		TaskUnit task = currentApprover.getTask();
		task.setTaskStatus(TaskStatus.FINISHED.getValue());
		task.setEndTime(new Timestamp(System.currentTimeMillis()));
		task.setTaskResult(approvalDto.getOperationType());
		task.setTaskResultName(approvalDto.getOperationName());
		task.setTaskComments("沟通发起人：" + approvalDto.getUserNote());
	}


}
