package com.jzy.hio.interceptor;

import java.lang.reflect.Method;

import org.aspectj.lang.annotation.Aspect;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.aop.AfterReturningAdvice;
import org.springframework.aop.MethodBeforeAdvice;
import org.springframework.aop.ThrowsAdvice;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;

@Aspect
@Order(-2)
@Configuration
public class PremissionAop implements MethodBeforeAdvice, AfterReturningAdvice, ThrowsAdvice {

	private Logger logger = LoggerFactory.getLogger(this.getClass());
	
//	@Pointcut("execution(* com.jzy.hio..controller.*.*(..) )")
//	public void checkPremission() {
//		System.out.println("xxx");
//	}
//
//	/**
//	 * 检测权限
//	 * @param thisJoinPoint
//	 */
//	@Before("checkPremission()")
//	public void before(JoinPoint thisJoinPoint) {
//		System.out.println("222");
//	}
	
//	@Pointcut("execution(* com.jzy.hio..controller.*.*(..) )")
	@Override
	public void before(Method method, Object[] arg1, Object target) throws Throwable {
		System.out.println("");
	}

	@Override
	public void afterReturning(Object arg0, Method method, Object[] arg2, Object arg3) throws Throwable {
		System.out.println(arg0);
	}
	

	public void afterThrowing(Method method, Object[] args, Object target, Exception ex) throws Throwable {
		ex.printStackTrace();
		logger.error("-----error", ex.getMessage());
	}

}
