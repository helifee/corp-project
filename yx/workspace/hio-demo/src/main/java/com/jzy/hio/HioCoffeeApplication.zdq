package com.jzy.hio;

import javax.servlet.MultipartConfigElement;

import org.springframework.boot.Banner.Mode;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.servlet.MultipartConfigFactory;
import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
import org.springframework.cloud.netflix.feign.EnableFeignClients;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.EnableAspectJAutoProxy;
import org.springframework.context.annotation.Import;
import org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;

import com.jzy.hio.base.BaseApplication;
import com.jzy.hio.base.datasource.DataSourceRegister;
import com.jzy.hio.base.datasource.DynamicDataSourceAop;
import com.jzy.hio.interceptor.PremissionAop;
import com.jzy.tools.login.LoginUtils;

@Import({ DataSourceRegister.class, DynamicDataSourceAop.class, PremissionAop.class })
// @MapperScan(value = { "com.jzy.hio.**.mapper.*", "com.jzy.hio.base.datasource.DataSourceBeanMapper"})
@EnableEurekaClient
@EnableFeignClients // 开启feign注解扫描、可以调用feign服务
@EnableCircuitBreaker
@SpringBootApplication
// 使用CGLIB代理。默认使用jdk
@EnableAspectJAutoProxy(proxyTargetClass = true, exposeProxy = true)
@EnableRedisHttpSession
public class HioCoffeeApplication extends BaseApplication {

	/**
	 * 加载SpringBeanUtil<br/>
	 * <br/>
	 *
	 */
	public static void main(String[] args) {
		SpringApplication application = new SpringApplication(HioCoffeeApplication.class);
		application.setBannerMode(Mode.OFF);
		application.run(args);
		// new SpringApplicationBuilder(HioPortalApplication.class).web(true).run(args);
		System.out.println("【【【【【【 PortalProvider微服务 】】】】】】已启动.");
	}

	@Bean
	public LoginUtils createLoginUtils() {
		LoginUtils loginUtils = getBeanFactory().createBean(LoginUtils.class);
		return loginUtils;
	}

	@Bean
	MultipartConfigElement multipartConfigElement() {
		MultipartConfigFactory factory = new MultipartConfigFactory();
		factory.setLocation("c:/tmp");
		return factory.createMultipartConfig();
	}

}
