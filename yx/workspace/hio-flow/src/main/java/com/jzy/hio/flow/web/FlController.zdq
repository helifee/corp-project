package com.jzy.hio.flow.web;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.flow.dto.tobedeleted.FlDto;
import com.jzy.hio.flow.entity.Fl;
import com.jzy.hio.flow.service.FlService;
import com.jzy.tools.data.JacksonUtils;

/**
 * 流程模板控制层
 * 
 * @author admin
 *
 */
@RestController
@RequestMapping("/flow/fl")
@Api(tags = { "流程模板" }, description = "fl")
public class FlController extends ResponseModel {

	private static Logger log = LoggerFactory.getLogger(FlController.class);

	@Autowired
	private FlService flService;

	/**
	 * 根据Id获取业务对象
	 * 
	 * @param id
	 *            业务对象主键
	 * 
	 * @return 业务对象
	 */
	@ApiOperation(value = "获取详情", notes = "获取详情")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "id", value = "id", required = true, dataType = "String") })
	@RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
	public MessageResult get(@PathVariable("id") String id) {

		try {
			Fl objectById = flService.getObjectById(id);
			return getSuccessResultModel(objectById);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel();
		}
	}

	/**
	 * 根据
	 * 
	 * @param code
	 * @return
	 */
	@ApiOperation(value = "查询默认流程模板", notes = "查询默认流程模板")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "businessObjectCode", value = "businessObjectCode", required = true, dataType = "String") })
	@RequestMapping(value = "/getDefaultFl/{businessObjectCode}", method = RequestMethod.GET)
	public MessageResult queryDefaultFl(@PathVariable("businessObjectCode") String businessObjectCode) {

		try {
			Fl queryDefaultFlow = flService.queryDefaultFlow(businessObjectCode);
			return getSuccessResultModel(queryDefaultFlow);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel();
		}
		/*
		 * MessageResult result=new MessageResult(); try { //当前登录用户 SecurityUserBeanInfo
		 * userBeanInfo = LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo);
		 * 
		 * String dubboResultInfo=flDtoServiceCustomer.queryDefaultFl(userJson,
		 * "{\"businessObjectCode\":\""+businessObjectCode+"\"}");
		 * DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); FlDto
		 * flDto=JacksonUtils.fromJson(resultInfo, FlDto.class);
		 * result.setResult(flDto);
		 * result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		 * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); } } catch (Exception e) {
		 * log.error("-----------"+e.getMessage()+"------------");
		 * ////e.printStackTrace();
		 * log.error("调用get方法:  【参数"+businessObjectCode+"】======"+"【"+e.getMessage()+"】"
		 * ); result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】"); } return
		 * result;
		 */
	}

	/**
	 * 返回分页对象
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value = "分页查询", notes = "分页查询")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "map", dataType = "Map", value = "limit query", required = true) })
	@RequestMapping(value = "/page", method = { RequestMethod.POST }, consumes = "application/json")
	public MessageResult page(@RequestBody Map<String, Object> map) {
		try {
			Page page = flService.getPage(map);
			return getSuccessResultModel(page);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel();
		}

		/*
		 * MessageResult result=new MessageResult(); String paramaterJson =
		 * JacksonUtils.toJson(map); try { //当前登录用户 SecurityUserBeanInfo userBeanInfo =
		 * LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo);
		 * 
		 * String dubboResultInfo=flDtoServiceCustomer.getPage(userJson, paramaterJson);
		 * DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); PageBeanInfo
		 * pageInfo=JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
		 * result.setResult(pageInfo);
		 * result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		 * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); } } catch (Exception e) {
		 * log.error("-----------"+e.getMessage()+"------------");
		 * ////e.printStackTrace();
		 * log.error("调用page方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
		 * result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】"); } return
		 * result;
		 */
	}

	/**
	 * 返回符合条件的列表
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value = "条件列表查询", notes = "条件列表查询")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "fl", dataType = "String", value = "condition query", required = true) })
	@RequestMapping(value = "/queryList", method = { RequestMethod.POST }, consumes = "application/json")
	public MessageResult queryList(@RequestBody Fl fl) {

		try {
			List<Fl> queryList = flService.queryList(fl);
			return getSuccessResultModel(queryList);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel();
		}

		/*
		 * MessageResult result=new MessageResult(); String paramaterJson =
		 * JacksonUtils.toJson(map); try { //当前登录用户 SecurityUserBeanInfo userBeanInfo =
		 * LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo);
		 * 
		 * String dubboResultInfo=flDtoServiceCustomer.queryList(userJson,
		 * paramaterJson); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); List<FlDto>
		 * list=JacksonUtils.fromJson(resultInfo, ArrayList.class,FlDto.class);
		 * result.setResult(list); result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		 * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); }
		 * 
		 * } catch (Exception e) {
		 * log.error("-----------"+e.getMessage()+"------------");
		 * ////e.printStackTrace();
		 * log.error("调用queryList方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+
		 * "】"); result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】"); } return
		 * result;
		 */
	}

	/**
	 * 保存实体对象
	 * 
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "保存实体对象", notes = "保存实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "t", value = "save", required = true, dataType = "String") })
	@RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
	public MessageResult save(@RequestBody Fl t) {

		try {
			int save = flService.save(t);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.SAVESUCCESS.getMsg());
			successResultModel.setResult(save);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.SAVEERROR.getMsg());
		}
		/*
		 * MessageResult result=new MessageResult(); try { //当前登录用户 SecurityUserBeanInfo
		 * userBeanInfo = LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo); String saveJson= JacksonUtils.toJson(t);
		 * String dubboResultInfo=flDtoServiceCustomer.save(userJson, saveJson);
		 * DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); FlDto
		 * flDto=JacksonUtils.fromJson(resultInfo, FlDto.class);
		 * result.setResult(flDto);
		 * result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
		 * result.setMsg(MessageInfo.SAVESUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.SAVEERROR.isResult());
		 * result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); } } catch (Exception e) {
		 * log.error("-----------"+e.getMessage()+"------------"); try {
		 * ////e.printStackTrace(); ObjectMapper mapper = new ObjectMapper(); String
		 * paramJson = mapper.writeValueAsString(t);
		 * log.error("调用save方法:  【参数"+paramJson+"】======"+"【"+e.getMessage()+"】");
		 * result.setSuccess(MessageInfo.SAVEERROR.isResult());
		 * result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+e.getMessage()+"】"); } catch
		 * (JsonProcessingException e1) { // TODO Auto-generated catch block
		 * ////e1.printStackTrace(); }
		 * 
		 * } return result;
		 */
	}

	/**
	 * 保存实体对象
	 * 
	 * @param t
	 * @return
	 */
	// @OpeLogInfo(node = "模板发布或暂存")
	@ApiOperation(value = "保存实体对象", notes = "保存实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "t", value = "save", required = true, dataType = "String") })
	@RequestMapping(value = "/saveAll", method = RequestMethod.POST, consumes = "application/json")
	public MessageResult saveAll(@RequestBody FlDto t) {

		try {
			flService.saveAll(t);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.SAVESUCCESS.getMsg());
			successResultModel.setResult(1);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.SAVEERROR.getMsg());
		}

		/*
		 * MessageResult result=new MessageResult(); try { //当前登录用户 SecurityUserBeanInfo
		 * userBeanInfo = LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo);
		 * 
		 * String saveJson= JacksonUtils.toJson(t); String
		 * dubboResultInfo=flDtoServiceCustomer.saveAll(userJson, saveJson);
		 * DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); FlDto
		 * flDto=JacksonUtils.fromJson(resultInfo, FlDto.class);
		 * result.setResult(flDto);
		 * result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
		 * result.setMsg(MessageInfo.SAVESUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.SAVEERROR.isResult());
		 * result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); } } catch (Exception e) {
		 * log.error("-----------"+e.getMessage()+"------------"); try {
		 * ////e.printStackTrace(); ObjectMapper mapper = new ObjectMapper(); String
		 * paramJson = mapper.writeValueAsString(t);
		 * log.error("调用save方法:  【参数"+paramJson+"】======"+"【"+e.getMessage()+"】");
		 * result.setSuccess(MessageInfo.SAVEERROR.isResult());
		 * result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+e.getMessage()+"】"); } catch
		 * (JsonProcessingException e1) { // TODO Auto-generated catch block
		 * ////e1.printStackTrace(); }
		 * 
		 * } return result;
		 */
	}

	/**
	 * 删除实体对象
	 * 
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "删除实体对象", notes = "删除实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "id", value = "id", required = true, dataType = "String") })
	@RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
	public MessageResult delete(@PathVariable("id") String id) {
		try {
			int deleteCount = flService.deleteObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deleteCount);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}

		/*
		 * MessageResult result=new MessageResult(); try { //当前登录用户 SecurityUserBeanInfo
		 * userBeanInfo = LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo);
		 * 
		 * String dubboResultInfo=flDtoServiceCustomer.deleteObjectById(userJson,
		 * "{\"id\":\""+id+"\"}"); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); FlDto
		 * flDto=JacksonUtils.fromJson(resultInfo, FlDto.class);
		 * result.setResult(flDto);
		 * result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
		 * result.setMsg(MessageInfo.DELETESUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.DELETEERROR.isResult());
		 * result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); } } catch (Exception e) {
		 * log.error("-----------"+e.getMessage()+"------------");
		 * ////e.printStackTrace();
		 * log.error("调用delete方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
		 * result.setSuccess(MessageInfo.DELETEERROR.isResult());
		 * result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】"); }
		 * 
		 * return result;
		 */
	}

	/**
	 * 删除实体对象
	 * 
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "删除实体对象", notes = "删除实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "ids", value = "ids", required = true, dataType = "String") })
	@RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
	public MessageResult deleteBatch(@PathVariable("ids") String ids) {

		try {
			int deleteCount = flService.deleteAllObjectByIds(Arrays.asList(ids.split(",")));
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deleteCount);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}

		/*
		 * MessageResult result=new MessageResult(); try { //当前登录用户 SecurityUserBeanInfo
		 * userBeanInfo = LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo);
		 * 
		 * String dubboResultInfo=flDtoServiceCustomer.deleteAllObjectByIds(userJson,
		 * "{\"id\":\""+ids+"\"}"); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); FlDto
		 * flDto=JacksonUtils.fromJson(resultInfo, FlDto.class);
		 * result.setResult(flDto);
		 * result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
		 * result.setMsg(MessageInfo.DELETESUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.DELETEERROR.isResult());
		 * result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); } } catch (Exception e) {
		 * log.error("-----------"+e.getMessage()+"------------");
		 * ////e.printStackTrace();
		 * log.error("调用delete方法:  【参数"+ids+"】======"+"【"+e.getMessage()+"】");
		 * result.setSuccess(MessageInfo.DELETEERROR.isResult());
		 * result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】"); }
		 * 
		 * return result;
		 */
	}

	/**
	 * 修改实体对象
	 * 
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "修改实体对象", notes = "修改实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", dataType = "String", name = "id", value = "id", required = true),
			@ApiImplicitParam(paramType = "body", dataType = "String", name = "map", value = "map", required = true) })
	@RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
	public MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {

		try {

			Fl fl = flService.getObjectById(id);
			String json = JacksonUtils.toJson(fl);
			Map<String, Object> oldMap = JacksonUtils.fromJson(json, HashMap.class);
			oldMap.putAll(map);
			String updateJson = JacksonUtils.toJson(oldMap);
			Fl fromJson = JacksonUtils.fromJson(updateJson, Fl.class);
			int updateCount = flService.update(fromJson);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.UPDATESUCCESS.getMsg());
			successResultModel.setResult(updateCount);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.UPDATESORTERROR.getMsg());
		}

		/*
		 * MessageResult result=new MessageResult(); FlDto flDto=null; try { //当前登录用户
		 * SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		 * String userJson = JacksonUtils.toJson(userBeanInfo);
		 * 
		 * String dubboResultInfo=flDtoServiceCustomer.getObjectById(userJson,
		 * "{\"id\":\""+id+"\"}"); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); Map<String,Object>
		 * oldMap=JacksonUtils.fromJson(resultInfo, HashMap.class); oldMap.putAll(map);
		 * oldMap.put("updateDate", new Timestamp(new Date().getTime())); String
		 * updateJson= JacksonUtils.toJson(oldMap); String
		 * updateDubboResultInfo=flDtoServiceCustomer.update(userJson, updateJson);
		 * DubboServiceResultInfo updateDubboServiceResultInfo=
		 * JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
		 * if(updateDubboServiceResultInfo.isSucess()){ Integer
		 * i=JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(),
		 * Integer.class); result.setResult(i);
		 * result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
		 * result.setMsg(MessageInfo.UPDATESUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.UPDATEERROR.isResult());
		 * result.setMsg(updateDubboServiceResultInfo.getMsg()+"【"+
		 * updateDubboServiceResultInfo.getExceptionMsg()+"】"); } }else{
		 * result.setSuccess(MessageInfo.UPDATEERROR.isResult());
		 * result.setMsg("不存在更新的对象"); } } catch (Exception e) {
		 * log.error("-----------"+e.getMessage()+"------------"); try{
		 * ////e.printStackTrace(); ObjectMapper mapper = new ObjectMapper(); String
		 * paramJson = mapper.writeValueAsString(flDto);
		 * log.error("调用update方法:  【参数"+id+","+paramJson+"】======"+"【"+e.getMessage()+
		 * "】"); result.setSuccess(MessageInfo.UPDATEERROR.isResult());
		 * result.setMsg(MessageInfo.UPDATEERROR.getMsg()+"【"+e.getMessage()+"】");
		 * }catch (JsonProcessingException e1) { // TODO Auto-generated catch block
		 * ////e1.printStackTrace(); }
		 * 
		 * } return result;
		 */
	}

	/**
	 * 批量修改模板属性
	 * 
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "保存实体对象", notes = "保存实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "map", value = "map", required = true, dataType = "String") })
	@RequestMapping(value = "/updateFlowsByids", method = RequestMethod.POST, consumes = "application/json")
	// @OpeLogInfo(node = "批量修改模板属性")
	public MessageResult updateFlowsByids(@RequestBody Map<String, Object> map) {

		try {

			Integer count = flService.updateFlowsByids(map);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.UPDATESUCCESS.getMsg());
			successResultModel.setResult(count);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.UPDATEERROR.getMsg());
		}

		/*
		 * MessageResult result=new MessageResult(); try { //当前登录用户 SecurityUserBeanInfo
		 * userBeanInfo = LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo);
		 * 
		 * String updateDubboResultInfo=flDtoServiceCustomer.updateFlowsByids(userJson,
		 * JacksonUtils.toJson(map)); DubboServiceResultInfo
		 * updateDubboServiceResultInfo= JacksonUtils.fromJson(updateDubboResultInfo,
		 * DubboServiceResultInfo.class); if(updateDubboServiceResultInfo.isSucess()){
		 * Integer i=JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(),
		 * Integer.class); result.setResult(i);
		 * result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
		 * result.setMsg(MessageInfo.UPDATESUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.UPDATEERROR.isResult());
		 * result.setMsg(updateDubboServiceResultInfo.getMsg()+"【"+
		 * updateDubboServiceResultInfo.getExceptionMsg()+"】"); } } catch (Exception e)
		 * { log.error("-----------"+e.getMessage()+"------------"); try{
		 * ////e.printStackTrace(); ObjectMapper mapper = new ObjectMapper(); String
		 * paramJson = mapper.writeValueAsString(map);
		 * log.error("调用update方法:  【参数"+paramJson+"】======"+"【"+e.getMessage()+"】");
		 * result.setSuccess(MessageInfo.UPDATEERROR.isResult());
		 * result.setMsg(MessageInfo.UPDATEERROR.getMsg()+"【"+e.getMessage()+"】");
		 * }catch (JsonProcessingException e1) { // TODO Auto-generated catch block
		 * ////e1.printStackTrace(); }
		 * 
		 * } return result;
		 */
	}

	/**
	 * 伪删除实体对象
	 * 
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "伪删除实体对象", notes = "伪删除实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", dataType = "String", name = "id", value = "id", required = true) })
	@RequestMapping(value = "/deletePseudo/{id}", method = RequestMethod.DELETE)
	public MessageResult deletePseudo(@PathVariable("id") String id) {

		try {

			int deleteCount = flService.deletePseudoObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deleteCount);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}

		/*
		 * MessageResult result=new MessageResult(); try { //当前登录用户 SecurityUserBeanInfo
		 * userBeanInfo = LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo);
		 * 
		 * String dubboResultInfo=flDtoServiceCustomer.deletePseudoObjectById(userJson,
		 * "{\"id\":\""+id+"\"}"); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); FlDto
		 * flDto=JacksonUtils.fromJson(resultInfo, FlDto.class);
		 * result.setResult(flDto);
		 * result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
		 * result.setMsg(MessageInfo.DELETESUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.DELETEERROR.isResult());
		 * result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); } } catch (Exception e) {
		 * log.error("-----------"+e.getMessage()+"------------");
		 * ////e.printStackTrace();
		 * log.error("调用deletePseudo方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
		 * result.setSuccess(MessageInfo.DELETEERROR.isResult());
		 * result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】"); }
		 * 
		 * return result;
		 */
	}

	/**
	 * 伪删除实体对象
	 * 
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "批量伪删除实体对象", notes = "批量伪删除实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", dataType = "String", name = "ids", value = "ids", required = true) })
	@RequestMapping(value = "/deletePseudoBatch/{ids}", method = RequestMethod.DELETE)
	public MessageResult deletePseudoBatch(@PathVariable("ids") String ids) {

		try {
			int deleteCount = flService.deletePseudoAllObjectByIds(Arrays.asList(ids.split(",")));
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deleteCount);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
		/*
		 * MessageResult result=new MessageResult(); try { //当前登录用户 SecurityUserBeanInfo
		 * userBeanInfo = LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo);
		 * 
		 * String
		 * dubboResultInfo=flDtoServiceCustomer.deletePseudoAllObjectByIds(userJson,
		 * "{\"id\":\""+ids+"\"}"); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); FlDto
		 * flDto=JacksonUtils.fromJson(resultInfo, FlDto.class);
		 * result.setResult(flDto);
		 * result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
		 * result.setMsg(MessageInfo.DELETESUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.DELETEERROR.isResult());
		 * result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); } } catch (Exception e) {
		 * log.error("-----------"+e.getMessage()+"------------");
		 * ////e.printStackTrace();
		 * log.error("调用deletePseudoBatch方法:  【参数"+ids+"】======"+"【"+e.getMessage()+"】")
		 * ; result.setSuccess(MessageInfo.DELETEERROR.isResult());
		 * result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】"); }
		 * 
		 * return result;
		 */
	}

	/**
	 * 根据条件获取流程模板列表
	 * 
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "根据条件获取流程模板列表", notes = "根据条件获取流程模板列表")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "fl", dataType = "String", value = "condition query", required = true) })
	@RequestMapping(value = "/queryFlList", method = { RequestMethod.POST }, consumes = "application/json")
	public MessageResult queryFlList(@RequestBody Map<String, Object> paramater) {

		try {
			Page page = flService.queryFlList(paramater);
			MessageResult successResultModel = getSuccessResultModel(page);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel();
		}
		/*
		 * MessageResult result=new MessageResult(); String paramaterJson =
		 * JacksonUtils.toJson(map); try { //当前登录用户 SecurityUserBeanInfo userBeanInfo =
		 * LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo);
		 * 
		 * String dubboResultInfo=flDtoServiceCustomer.queryFlList(userJson,
		 * paramaterJson); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); PageBeanInfo
		 * pageInfo=JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
		 * result.setResult(pageInfo);
		 * result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		 * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); }
		 * 
		 * } catch (Exception e) {
		 * log.error("-----------"+e.getMessage()+"------------");
		 * ////e.printStackTrace();
		 * log.error("调用queryFlList方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+
		 * "】"); result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】"); } return
		 * result;
		 */
	}

	/**
	 * 根据条件分组获取流程模板列表
	 * 
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "根据条件分组获取流程模板列表", notes = "根据条件分组获取流程模板列表")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "condition query", required = true) })
	@RequestMapping(value = "/queryFlByGroupList", method = { RequestMethod.POST }, consumes = "application/json")
	public MessageResult queryFlListByGroup(@RequestBody Map<String, Object> map) {

		try {

			Page queryFlByGroupList = flService.queryFlByGroupList(map);
			// MessageResult successResultModel = getSuccessResultModel(queryFlByGroupList);
			return getSuccessResultModel(queryFlByGroupList);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel();
		}
		/*
		 * MessageResult result=new MessageResult(); String paramaterJson =
		 * JacksonUtils.toJson(map); try { //当前登录用户 SecurityUserBeanInfo userBeanInfo =
		 * LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo);
		 * 
		 * String dubboResultInfo=flDtoServiceCustomer.queryFlByGroupList(userJson,
		 * paramaterJson); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); PageBeanInfo
		 * pageInfo=JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
		 * result.setResult(pageInfo);
		 * result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		 * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); }
		 * 
		 * } catch (Exception e) {
		 * log.error("-----------"+e.getMessage()+"------------");
		 * ////e.printStackTrace();
		 * log.error("调用queryFlList方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+
		 * "】"); result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】"); } return
		 * result;
		 */
	}

	/**
	 * 批量修改实体对象
	 * 
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "批量修改实体对象", notes = "批量修改实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "update Batch", required = true) })
	@RequestMapping(value = "/updateBatch", method = RequestMethod.PUT, consumes = "application/json")
	// @OpeLogInfo(node = "模板禁启用设置")
	public MessageResult updateBatch(@RequestBody Map<String, Object> map) {
		// MessageResult result=new MessageResult();
		// List<Map<String, Object>> updateList = new ArrayList<Map<String, Object>>();

		try {
			List<Fl> updateList = new ArrayList<Fl>();
			List<Map<String, Object>> putDataList = (List<Map<String, Object>>) map.get("putData");
			for (Map<String, Object> putData : putDataList) {
				Fl fl = flService.getObjectById(putData.get("id").toString());
				fl.setUpdateDate(new Timestamp(new Date().getTime()));
				updateList.add(fl);
			}
			flService.updateBatch(updateList);
			return getErrorResultModel(MessageInfo.UPDATESUCCESS.getMsg());
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.UPDATEERROR.getMsg());
		}

		/*
		 * String updateJsonList = null; try { boolean flag = true; //当前登录用户
		 * SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		 * String userJson = JacksonUtils.toJson(userBeanInfo);
		 * 
		 * for (Map<String, Object> puDataMap : putDataList) { String dubboResultInfo =
		 * flDtoServiceCustomer.getObjectById(userJson, "{\"id\":\"" +
		 * puDataMap.get("id") + "\"}"); DubboServiceResultInfo dubboServiceResultInfo =
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(!dubboServiceResultInfo.isSucess()){ flag = false; continue; } String
		 * resultInfo = dubboServiceResultInfo.getResult(); Map<String, Object> oldMap =
		 * JacksonUtils.fromJson(resultInfo, HashMap.class); oldMap.putAll(puDataMap);
		 * oldMap.put("updateDate", new Timestamp(new Date().getTime()));
		 * updateList.add(oldMap); }
		 * 
		 * updateJsonList= JacksonUtils.toJson(updateList);
		 * 
		 * if(flag){ String updateDubboResultInfo =
		 * flDtoServiceCustomer.updateBatch(userJson, updateJsonList);
		 * DubboServiceResultInfo updateDubboServiceResultInfo=
		 * JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
		 * if(updateDubboServiceResultInfo.isSucess()){ Integer
		 * i=JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(),
		 * Integer.class); result.setResult(i);
		 * result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
		 * result.setMsg(MessageInfo.UPDATESUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.UPDATEERROR.isResult());
		 * result.setMsg(updateDubboServiceResultInfo.getMsg()+"【"+
		 * updateDubboServiceResultInfo.getExceptionMsg()+"】"); } }else{
		 * result.setSuccess(MessageInfo.UPDATEERROR.isResult());
		 * result.setMsg("不存在更新的对象"); }
		 * 
		 * } catch (Exception e) {
		 * log.error("-----------"+e.getMessage()+"------------");
		 * ////e.printStackTrace();
		 * log.error("调用updateBatch方法:  【参数"+updateJsonList+"】======"+"【"+e.getMessage()
		 * +"】"); result.setSuccess(MessageInfo.UPDATEERROR.isResult());
		 * result.setMsg(MessageInfo.UPDATEERROR.getMsg()+"【"+e.getMessage()+"】"); }
		 * return result;
		 */
	}

	/**
	 * 设置默认模板
	 * 
	 * @param map
	 * @return
	 */
	@ApiOperation(value = " 设置默认模板", notes = " 设置默认模板")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "update Batch", required = true) })
	@RequestMapping(value = "/setDefaultFl", method = RequestMethod.POST, consumes = "application/json")
	// @OpeLogInfo(node="默认模板设置")
	public MessageResult setDefaultFl(@RequestBody Map<String, Object> map) {

		try {

			Boolean setDefaultFl = flService.setDefaultFl(map);
			return getSuccessResultModel(setDefaultFl);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel();
		}
		/*
		 * MessageResult result=new MessageResult(); FlDto flDto=null; String
		 * defaultFlId = (String) map.get("defaultFlId"); String businessObjectId =
		 * (String) map.get("businessObjectId"); try { //当前登录用户 SecurityUserBeanInfo
		 * userBeanInfo = LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo);
		 * 
		 * String dubboResultInfo=flDtoServiceCustomer.setDefaultFl(userJson,
		 * JacksonUtils.toJson(map)); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); Boolean udpateSuccess =
		 * JacksonUtils.fromJson(resultInfo, Boolean.class);
		 * result.setResult(udpateSuccess);
		 * result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		 * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); } } catch (Exception e) {
		 * log.error("-----------"+e.getMessage()+"------------"); ObjectMapper mapper =
		 * new ObjectMapper();
		 * log.error("调用setDefaultFl方法:  【参数"+map+"】======"+"【"+e.getMessage()+"】");
		 * result.setSuccess(MessageInfo.UPDATEERROR.isResult());
		 * result.setMsg(MessageInfo.UPDATEERROR.getMsg()+"【"+e.getMessage()+"】");
		 * 
		 * } return result;
		 */
	}

	/**
	 * 根据ID查询流程模板及相关属性
	 * 
	 * @param id
	 *            流程模板ID
	 * 
	 * @return 流程模板传输对象
	 */
	@ApiOperation(value = " 根据ID查询流程模板及相关属性", notes = "  根据ID查询流程模板及相关属性")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "id", dataType = "String", value = "id", required = true),
			@ApiImplicitParam(paramType = "query", name = "entryType", dataType = "String", value = "entryType", required = true) })
	@RequestMapping(value = "/getAll/{id}", method = RequestMethod.GET)
	public MessageResult getAll(@PathVariable("id") String id,
			@RequestParam(value = "entryType", required = false) Boolean entryType) {

		try {

			FlDto all = flService.getAll(id);
			return getSuccessResultModel(all);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel();
		}
		/*
		 * MessageResult result = new MessageResult(); try { //当前登录用户
		 * SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		 * String userJson = JacksonUtils.toJson(userBeanInfo); Map<String,Object>
		 * paramMap = new HashMap<String,Object>(); paramMap.put("id",id);
		 * paramMap.put("entryType",entryType); String dubboResultInfo =
		 * flDtoServiceCustomer.getAll(userJson, JacksonUtils.toJson(paramMap));
		 * DubboServiceResultInfo dubboServiceResultInfo =
		 * JacksonUtils.fromJson(dubboResultInfo,DubboServiceResultInfo.class); if
		 * (dubboServiceResultInfo.isSucess()) { String resultInfo =
		 * dubboServiceResultInfo.getResult(); FlDto flDto =
		 * JacksonUtils.fromJson(resultInfo, FlDto.class); result.setResult(flDto);
		 * result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		 * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); } else {
		 * result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg() + "【" +
		 * dubboServiceResultInfo.getExceptionMsg() + "】"); } } catch (Exception e) {
		 * log.error("-----------"+e.getMessage()+"------------");
		 * ////e.printStackTrace(); log.error("调用getAll方法:  【参数" + id + "】======" + "【"
		 * + e.getMessage() + "】"); result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】"); }
		 * return result;
		 */
	}

	/**
	 * 根据审批人查询对应的模板信息
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value = "根据审批人查询对应的模板信息", notes = "根据审批人查询对应的模板信息")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "id", required = true) })
	@RequestMapping(value = "/queryListByApprover", method = { RequestMethod.POST }, consumes = "application/json")
	public MessageResult queryListByApprover(@RequestBody Map<String, String> map) {

		try {
			List<FlDto> queryListByApprover = flService.queryListByApprover(map);
			return getSuccessResultModel(queryListByApprover);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel();
		}
		/*
		 * MessageResult result=new MessageResult(); String paramaterJson =
		 * JacksonUtils.toJson(map); try { //当前登录用户 SecurityUserBeanInfo userBeanInfo =
		 * LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo);
		 * 
		 * String dubboResultInfo=flDtoServiceCustomer.queryListByParticipant(userJson,
		 * paramaterJson); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); List<FlDto>
		 * list=JacksonUtils.fromJson(resultInfo, ArrayList.class,FlDto.class);
		 * result.setResult(list); result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		 * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); }
		 * 
		 * } catch (Exception e) {
		 * log.error("-----------"+e.getMessage()+"------------");
		 * ////e.printStackTrace();
		 * log.error("调用queryList方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+
		 * "】"); result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】"); } return
		 * result;
		 */
	}

	/**
	 * 返回符合条件的列表
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value = "条件列表查询", notes = "条件列表查询")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "condition query", required = true) })
	@RequestMapping(value = "/queryViewList", method = { RequestMethod.POST }, consumes = "application/json")
	public MessageResult queryViewList(@RequestBody Map<String, Object> map) {

		try {

			List<FlDto> queryViewList = flService.queryViewList(map);
			return getSuccessResultModel(queryViewList);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel();
		}
		/*
		 * MessageResult result=new MessageResult(); String paramaterJson =
		 * JacksonUtils.toJson(map); try { //当前登录用户 SecurityUserBeanInfo userBeanInfo =
		 * LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo);
		 * 
		 * String dubboResultInfo=flDtoServiceCustomer.queryViewList(userJson,
		 * paramaterJson); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); List<FlDto>
		 * list=JacksonUtils.fromJson(resultInfo, ArrayList.class,FlDto.class);
		 * result.setResult(list); result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		 * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); }
		 * 
		 * } catch (Exception e) {
		 * log.error("-----------"+e.getMessage()+"------------");
		 * ////e.printStackTrace();
		 * log.error("调用queryList方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+
		 * "】"); result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】"); } return
		 * result;
		 */
	}

	/**
	 * 返回符合条件的流程模板和业务对象列表
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value = "返回符合条件的流程模板和业务对象列表", notes = "返回符合条件的流程模板和业务对象列表")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "condition query", required = true) })
	@RequestMapping(value = "/queryFlowBusiObjectList", method = { RequestMethod.POST }, consumes = "application/json")
	public MessageResult queryFlowBusiObjectList(@RequestBody Map<String, Object> map) {

		try {
			List<FlDto> queryFlowBusiObjectList = flService.queryFlowBusiObjectList(map);
			return getSuccessResultModel(queryFlowBusiObjectList);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			return getErrorResultModel();
		}

		/*
		 * MessageResult result=new MessageResult(); String paramaterJson =
		 * JacksonUtils.toJson(map); try { //当前登录用户 SecurityUserBeanInfo userBeanInfo =
		 * LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo);
		 * 
		 * String dubboResultInfo=flDtoServiceCustomer.queryFlowBusiObjectList(userJson,
		 * paramaterJson); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); List<FlDto>
		 * list=JacksonUtils.fromJson(resultInfo, ArrayList.class,FlDto.class);
		 * result.setResult(list); result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		 * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); }
		 * 
		 * } catch (Exception e) {
		 * log.error("-----------"+e.getMessage()+"------------");
		 * ////e.printStackTrace();
		 * log.error("调用queryList方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+
		 * "】"); result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】"); } return
		 * result;
		 */
	}

	/**
	 * 根据实例id获取模板信息
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value = "根据实例id获取模板信息", notes = "根据实例id获取模板信息")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "condition query", required = true) })
	@RequestMapping(value = "/getFlowRetractForInstance", method = {
			RequestMethod.POST }, consumes = "application/json")
	public MessageResult getFlowRetractForInstance(@RequestBody Map<String, String> map) {

		try {
			Map<String, String> flowRetractForInstance = flService.getFlowRetractForInstance(map);
			return getSuccessResultModel(flowRetractForInstance);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel();
		}

		/*
		 * MessageResult result=new MessageResult(); String paramaterJson =
		 * JacksonUtils.toJson(map); try { //当前登录用户 SecurityUserBeanInfo userBeanInfo =
		 * LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo);
		 * 
		 * String
		 * dubboResultInfo=flDtoServiceCustomer.getFlowRetractForInstance(userJson,
		 * paramaterJson); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); Map<String, Object>
		 * list=JacksonUtils.fromJson(resultInfo, HashMap.class);
		 * result.setResult(list); result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		 * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); }
		 * 
		 * } catch (Exception e) {
		 * log.error("-----------"+e.getMessage()+"------------");
		 * ////e.printStackTrace();
		 * log.error("调用queryList方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+
		 * "】"); result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】"); } return
		 * result;
		 */
	}

	/**
	 * 根据流程模板编号字符串来逻辑删除对应的流程模板的所有版本
	 * 
	 * @param codeText
	 * @return
	 */
	@ApiOperation(value = "根据流程模板编号字符串来逻辑删除对应的流程模板的所有版本", notes = "根据流程模板编号字符串来逻辑删除对应的流程模板的所有版本")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "codeText", dataType = "String", value = "deleteFlowsByCodeText", required = true) })
	@RequestMapping(value = "/deleteFlowsByCodeText/{codeText}", method = RequestMethod.DELETE)
	// @OpeLogInfo(node = "删除模板")
	public MessageResult deleteFlowsByCodeText(@PathVariable("codeText") String codeText) {

		try {

			int deleteCount = flService.deleteFlowsByCodeText(codeText);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deleteCount);
			return getSuccessResultModel(successResultModel);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}

		/*
		 * MessageResult result=new MessageResult(); try { //当前登录用户 SecurityUserBeanInfo
		 * userBeanInfo = LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo);
		 * 
		 * String dubboResultInfo=flDtoServiceCustomer.deleteFlowsByCodeText(userJson,
		 * "{\"codeText\":\""+codeText+"\"}"); DubboServiceResultInfo
		 * dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo,
		 * DubboServiceResultInfo.class); if(dubboServiceResultInfo.isSucess()){ String
		 * resultInfo= dubboServiceResultInfo.getResult(); FlDto
		 * flDto=JacksonUtils.fromJson(resultInfo, FlDto.class);
		 * result.setResult(flDto);
		 * result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
		 * result.setMsg(MessageInfo.DELETESUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.DELETEERROR.isResult());
		 * result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); } } catch (Exception e) {
		 * log.error("-----------"+e.getMessage()+"------------");
		 * ////e.printStackTrace();
		 * log.error("调用deleteFlowsByCodeText方法:  【参数"+codeText+"】======"+"【"+e.
		 * getMessage()+"】"); result.setSuccess(MessageInfo.DELETEERROR.isResult());
		 * result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】"); }
		 * 
		 * return result;
		 */
	}
}
