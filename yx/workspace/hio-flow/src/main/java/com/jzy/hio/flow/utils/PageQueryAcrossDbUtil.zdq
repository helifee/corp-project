package com.jzy.hio.flow.utils;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.jzy.hio.base.service.BaseService;
import com.jzy.hio.base.utils.PageBeanInfo;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.feign.SysFeignService;
import com.jzy.hio.feign.dto.UserDto;
import com.jzy.hio.flow.dto.tobedeleted.SysNoticeMsgDto;
import com.jzy.hio.flow.service.SysNoticeMsgService;
import com.jzy.tools.data.JacksonUtils;

/**
 * 分页跨租户查询消息数据工具
 * 
 * @author daoqi
 *
 */
public class PageQueryAcrossDbUtil {

	private static Logger logger = LoggerFactory.getLogger(PageQueryAcrossDbUtil.class);
	
	private static final String TOTAL_ALLL = "totalAlll";

	public static PageBeanInfo<SysNoticeMsgDto> getMsgPage(BaseService dubboService,SysFeignService sysFeignService,List<String> tendCodes, SecurityUserBeanInfo userInfo,
			int start, int limit, String type,String sord) {
		SysNoticeMsgService msgDubboService = (SysNoticeMsgService)dubboService;
		Map<String, Object> params = generateParams(type, start, limit, userInfo);
		params.put("sord",sord);
		PageBeanInfo<SysNoticeMsgDto> page = new PageBeanInfo<SysNoticeMsgDto>();
		Map<String, Integer> totalMap = getTotal(msgDubboService, tendCodes, userInfo, params);
		page.setTotal(totalMap.get(TOTAL_ALLL));
		page.setStart(start);
		page.setLimit(limit);

		//计算每页面数据
		List<SysNoticeMsgDto> list = new ArrayList<SysNoticeMsgDto>();
		int L1 = 0;
		int L2 = 0;
		int startIndex = 0;
		int startIndexL1 = 0;
		int startIndexL2 = 0;

		int endIndex = 0;
		int endIndexL1 = 0;
		int endIndexL2 = 0;
		int max = start + limit;
		for(int i=0; i<tendCodes.size(); i++) {
			String tendCode = tendCodes.get(i);
			int total = totalMap.get(tendCode);
			L1 = L2;
			L2 = L2 + total;
			if(start >= L1 && start <= L2) {
				startIndex = i;
				startIndexL1 = L1;
				startIndexL2 = L2;
			}

			if(max >= L1 && max <= L2) {
				endIndex = i;
				endIndexL1 = L1;
				endIndexL2 = L2;
				break;
			}
		}
//		log.info("跨租户范围：" + tendCodes);
//		log.info("startIndex=" + startIndex);
//		log.info("startIndexL1=" + startIndexL1);
//		log.info("startIndexL2=" + startIndexL2);
//		log.info("endIndex=" + endIndex);
//		log.info("endIndexL1=" + endIndexL1);
//		log.info("endIndexL2=" + endIndexL2);
		//		int betweenCount = endIndex - startIndex;
		//		if(betweenCount == 0) {
		//			String tendCode = tendCodes.get(endIndex);
		//			userInfo.setTendCode(tendCode);
		//			int start0 = start - startIndexL1;
		//			params.put("start", start0);
		//			list.addAll(msgDubboService.queryMsgList(JacksonUtils.toJson(userInfo), params));
		//			
		//		} else if(betweenCount == 1) {
		//			
		//			
		//		} else {
		//			
		//		}

		//left
		int start0 = start - startIndexL1;
		int limit0 = limit;
		String tendCode0 = tendCodes.get(startIndex);
		userInfo.setTendCode(tendCode0);
		params.put("start", start0);
		params.put("limit", limit0);
		List<SysNoticeMsgDto> msgList = msgDubboService.queryMsgList(params);
		if(startIndex != 0) {
			addLoginInfoParam(sysFeignService, msgList, tendCode0, userInfo);			
		}
		list.addAll(msgList);

		//middle
		if(endIndex - startIndex > 1) {
			for(int i=startIndex + 1; i<endIndex; i++) {
				String tendCode = tendCodes.get(i);
				userInfo.setTendCode(tendCode);
				params.put("start", 0);
				params.put("limit", limit);
				msgList = msgDubboService.queryMsgList(params);
				addLoginInfoParam(sysFeignService, msgList, tendCode, userInfo);
				list.addAll(msgList);
			}
		}

		//right
		if(endIndex - startIndex >= 1) {
			int start2 = 0;
			int limit2 = max - endIndexL1;
			String tendCode2 = tendCodes.get(endIndex);
			userInfo.setTendCode(tendCode2);
			params.put("start", start2);
			params.put("limit", limit2);
			msgList = msgDubboService.queryMsgList(params);
			addLoginInfoParam(sysFeignService, msgList, tendCode2, userInfo);
			list.addAll(msgList);
		}

		page.setList(list);

		return page;
	}

	private static Map<String, Integer> getTotal(SysNoticeMsgService msgDubboService, List<String> tendCodes,
			SecurityUserBeanInfo userInfo, Map<String, Object> params) {
		Map<String, Integer> totalMap = new HashMap<String, Integer>();
		int totalAll = 0;
		for(String tendCode : tendCodes) {
			userInfo.setTendCode(tendCode);
			int total = msgDubboService.queryMsgTotal(params);
			totalMap.put(tendCode, total);
			totalAll = totalAll + total;
		}
		totalMap.put(TOTAL_ALLL, totalAll);

		return totalMap;
	}

	private static Map<String, Object> generateParams(String type, int start, int limit,
			SecurityUserBeanInfo userInfo) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("start", start);
		params.put("limit", limit);
		params.put("loginName", userInfo.getSecurityUserDto().getLoginName());
		if("DB".equals(type)) {
			List<String> opTypeList = new ArrayList<String>();
			opTypeList.add("DB");
			params.put("opType", opTypeList);

		} else if("DY".equals(type)) {
			List<String> opTypeList = new ArrayList<String>();
			opTypeList.add("DY");
			params.put("opType", opTypeList);

		} else if("YB".equals(type)) {
			List<String> opTypeList = new ArrayList<String>();
			opTypeList.add("YB");
			opTypeList.add("YY");
			params.put("opType", opTypeList);
			params.put("orderByField","deal_date");

		} else if("FQ".equals(type)) {
			List<String> opTypeList = new ArrayList<String>();
			opTypeList.add("FQ");
			params.put("opType", opTypeList);
		}
		return params;
	}

	public static PageBeanInfo<SysNoticeMsgDto> getMsgMorePage(BaseService dubboService,List<String> tendCodes,SysFeignService sysFeignService,SecurityUserBeanInfo userInfo, Map<String, Object> params) {
		SysNoticeMsgService msgDubboService = (SysNoticeMsgService)dubboService;
		PageBeanInfo<SysNoticeMsgDto> page = new PageBeanInfo<SysNoticeMsgDto>();
		Map<String, Integer> totalMap = getTotalMore(msgDubboService, tendCodes, userInfo, params);
		page.setTotal(totalMap.get(TOTAL_ALLL));

		int start = (int) params.get("start");
		int limit = (int) params.get("limit");
		page.setStart(start);
		page.setLimit(limit);

		//计算每页面数据
		List<SysNoticeMsgDto> list = new ArrayList<SysNoticeMsgDto>();
		int L1 = 0;
		int L2 = 0;
		int startIndex = 0;
		int startIndexL1 = 0;
		int startIndexL2 = 0;

		int endIndex = 0;
		int endIndexL1 = 0;
		int endIndexL2 = 0;
		int max = start + limit;
		for(int i=0; i<tendCodes.size(); i++) {
			String tendCode = tendCodes.get(i);
			int total = totalMap.get(tendCode);
			L1 = L2;
			L2 = L2 + total;
			if(start >= L1 && start <= L2) {
				startIndex = i;
				startIndexL1 = L1;
				startIndexL2 = L2;
			}

			//			if(max >= L1 && max <= L2) {
			if(max >= L1) {
				endIndex = i;
				endIndexL1 = L1;
				endIndexL2 = L2;
				//				break;
			}
		}

		//left
		int start0 = start - startIndexL1;
		int limit0 = limit;
		String tendCode0 = tendCodes.get(startIndex);
		userInfo.setTendCode(tendCode0);
		params.put("start", start0);
		params.put("limit", limit0);
		List<SysNoticeMsgDto> msgList = msgDubboService.queryMsgMoreList(params);
		getBussniessLock(msgList,userInfo,msgDubboService);
		if(startIndex != 0) {
			addLoginInfoParam(sysFeignService, msgList, tendCode0, userInfo);			
		}
		list.addAll(msgList);

		//middle
		if(endIndex - startIndex > 1) {
			for(int i=startIndex + 1; i<endIndex; i++) {
				String tendCode = tendCodes.get(i);
				userInfo.setTendCode(tendCode);
				params.put("start", 0);
				params.put("limit", limit);
				msgList = msgDubboService.queryMsgMoreList(params);
				getBussniessLock(msgList,userInfo,msgDubboService);
				addLoginInfoParam(sysFeignService, msgList, tendCode, userInfo);
				list.addAll(msgList);
			}
		}

		//right
		if(endIndex - startIndex >= 1) {
			int start2 = 0;
			int limit2 = max - endIndexL1;
			String tendCode2 = tendCodes.get(endIndex);
			userInfo.setTendCode(tendCode2);
			params.put("start", start2);
			params.put("limit", limit2);
			msgList = msgDubboService.queryMsgMoreList(params);
			getBussniessLock(msgList,userInfo,msgDubboService);
			addLoginInfoParam(sysFeignService, msgList, tendCode2, userInfo);
			list.addAll(msgList);
		}

		page.setList(list);

		return page;
	}
	//查询业务对象锁 begin
	public static  void getBussniessLock(List<SysNoticeMsgDto> msgList, SecurityUserBeanInfo userInfo,SysNoticeMsgService msgDubboService){
		//		Map<String,Object> msgMaps = new HashMap<>();
		Map<String,Object> msgInsMaps = new HashMap<>();
		Map<String,Object> newMap = new HashMap<>();
		List<String> instanceIds = new ArrayList<>();
		String instanceId = null;
		String msgId = null;
		for (int i = 0; i <msgList.size() ; i++) {
			SysNoticeMsgDto msg = msgList.get(i);
			msgId = msg.getId();
			//			msgMaps.put(msgId,msg);
			String paramJSON = msg.getMobibleParam();
			if(StringUtils.isNotBlank(paramJSON)){
				Map<String,Object> paramMap = JacksonUtils.fromJson(paramJSON, HashMap.class);
				if(paramMap.get("instanceId")!=null){
					instanceId = (String)paramMap.get("instanceId");
					instanceIds.add(instanceId);
					msgInsMaps.put(msgId,instanceId);
				}
			}

		}
		if(instanceIds.size()>0){
			newMap.put("instanceIds",instanceIds);
			//查询业务对象
			List<SysNoticeMsgDto> bussniessLocks = msgDubboService.getMsgBussniessObjects(newMap);
			String instId = null;
			Boolean ifMobile = null;
			Map<String,Object> insLockMaps = new HashMap<>();
			for (int i = 0; i <bussniessLocks.size() ; i++) {
				SysNoticeMsgDto b = bussniessLocks.get(i);
				instId = b.getInstanceId();
				ifMobile = b.getIfBussnissObjectLock();
				insLockMaps.put(instId,ifMobile);
			}
			for (int i = 0; i <msgList.size() ; i++) {
				SysNoticeMsgDto msg = msgList.get(i);
				msgId = msg.getId();
				if(msgInsMaps.get(msgId)!=null){
					String instId_ = (String)msgInsMaps.get(msgId);
					if(insLockMaps.get(instId_)!=null){
						msg.setIfBussnissObjectLock(Boolean.valueOf(insLockMaps.get(instId_).toString()));
					}
				}
			}
		}
		//end
	}
	//多租户查询待办待阅数量
	public static List<SysNoticeMsgDto> getMsgMoreSumData(BaseService dubboService,List<String> tendCodes, SecurityUserBeanInfo userInfo, Map<String, String> params) {
		SysNoticeMsgService msgDubboService = (SysNoticeMsgService)dubboService;
		SysNoticeMsgDto res = new SysNoticeMsgDto();
		for(String tendCode : tendCodes) {
			userInfo.setTendCode(tendCode);
			List<SysNoticeMsgDto> list=msgDubboService.queryTwoSumData(params);
			if(list!=null && list.size()>0 && list.get(0)!=null){
				SysNoticeMsgDto msgDto=list.get(0);
				int toDoSum=StringUtils.isBlank(res.getToDoSum())?0:Integer.valueOf(res.getToDoSum());
				int toReadSum=StringUtils.isBlank(res.getToReadSum())?0:Integer.valueOf(res.getToReadSum());
				int toDoSum_=StringUtils.isBlank(msgDto.getToDoSum())?0:Integer.valueOf(msgDto.getToDoSum());
				int toReadSum_=StringUtils.isBlank(msgDto.getToReadSum())?0:Integer.valueOf(msgDto.getToReadSum());
				res.setToDoSum((toDoSum+toDoSum_)+"");
				res.setToReadSum((toReadSum+toReadSum_)+"");
			}
		}
		List<SysNoticeMsgDto> list=new ArrayList<SysNoticeMsgDto>();
		list.add(res);
		return list;
	}

	//多租户查询待办待阅数量
	public static SysNoticeMsgDto getMsgMoreTotalData(BaseService dubboService, SysFeignService sysFeignService, 
			List<String> tendCodes, SecurityUserBeanInfo userInfo, Map<String, String> params) {
		SysNoticeMsgService msgDubboService = (SysNoticeMsgService)dubboService;
		SysNoticeMsgDto res = new SysNoticeMsgDto();
		for(String tendCode : tendCodes) {
			userInfo.setTendCode(tendCode);
			SysNoticeMsgDto msgDto=msgDubboService.queryTotalStatData(params);
			if(msgDto!=null){
				int toDoSum=StringUtils.isBlank(res.getToDoSum())?0:Integer.valueOf(res.getToDoSum());
				int toReadSum=StringUtils.isBlank(res.getToReadSum())?0:Integer.valueOf(res.getToReadSum());
				int toReadSum24=StringUtils.isBlank(res.getToDoSum24Hours())?0:Integer.valueOf(res.getToDoSum24Hours());
				int toDoSum_=StringUtils.isBlank(msgDto.getToDoSum())?0:Integer.valueOf(msgDto.getToDoSum());
				int toReadSum_=StringUtils.isBlank(msgDto.getToReadSum())?0:Integer.valueOf(msgDto.getToReadSum());
				int toReadSum24_=StringUtils.isBlank(msgDto.getToDoSum24Hours())?0:Integer.valueOf(msgDto.getToDoSum24Hours());
				res.setToDoSum((toDoSum+toDoSum_)+"");
				res.setToReadSum((toReadSum+toReadSum_)+"");
				res.setToDoSum24Hours((toReadSum24+toReadSum24_)+"");
			}
		}
		return res;
	}

	private static Map<String, Integer> getTotalMore(SysNoticeMsgService msgDubboService, List<String> tendCodes,
			SecurityUserBeanInfo userInfo, Map<String, Object> params) {
		Map<String, Integer> totalMap = new HashMap<String, Integer>();
		int totalAll = 0;
		for(String tendCode : tendCodes) {
			userInfo.setTendCode(tendCode);
			int total = msgDubboService.queryMsgMoreTotal(params);
			totalMap.put(tendCode, total);
			totalAll = totalAll + total;
		}
		totalMap.put(TOTAL_ALLL, totalAll);

		return totalMap;
	}

	/**
	 * 给从租户中查询的消息增加登陆信息
	 * 
	 * @param msgList
	 */
	private static void addLoginInfoParam(SysFeignService sysFeignService,List<SysNoticeMsgDto> msgList, String tendCode, SecurityUserBeanInfo userInfo) {
		if(CollectionUtils.isNotEmpty(msgList)) {
			String loginName = userInfo.getSecurityUserDto().getLoginName();
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("loginNames", loginName);
			String userId = null;
			try {
				String json = sysFeignService.getUserByUserLoginNames(map);
				List<UserDto> userList = JacksonUtils.fromJson(json, ArrayList.class, UserDto.class);
				userId = userList.get(0).getId();
			} catch (Exception e) {
//				log.error("调用addLoginInfoParam方法:======" + "【" + e.getMessage() + "】");
			}
			
//			log.info("跨租户查询消息：用户" + loginName + "在租户" + tendCode + "中的userId=" + userId);

			for(SysNoticeMsgDto msg : msgList) {
				String url = msg.getUrl() + "&tendCode=" + tendCode + "&uid=" + userId;
				String m_url = msg.getMobibleUrl() + "&tendCode=" + tendCode + "&uid=" + userId;
				msg.setUrl(url);
				msg.setMobibleUrl(m_url);

			}
		}
	}
}
