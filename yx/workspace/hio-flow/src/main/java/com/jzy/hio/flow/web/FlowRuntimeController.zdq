package com.jzy.hio.flow.web;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.flow.rt.model.ACUnit;
import com.jzy.hio.flow.service.FlService;
import com.jzy.hio.flow.service.InstanceService;
/**
 * 流程模板控制层
 * 
 * @author admin
 *
 */
@RestController
@RequestMapping("/flow")
@Api(tags = {"流程模板"},description = "flowRuntime")
public class FlowRuntimeController extends  ResponseModel {

	private static Logger log = LoggerFactory.getLogger(FlowRuntimeController.class);

	@Autowired
	private FlService flService;

	@Autowired
	private InstanceService instanceService;

	/**
	 * 获取流程审批路， 两种方式启动：
	 * 1、启动某个业务单据(businessId)的某个流程(flCode).
	 * 2、启动某个业务单据(businessId)所属的业务对象(businessObjectCode)的默认流程
	 * 
	 * 说明：businessId为第三方系统单据ID，不同系统间可能重复
	 * 
	 * @param map
	 * @return
	 */
	@ApiOperation(value= "分页查询",notes="分页查询")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "map",dataType = "Map",value = "limit query",required = true)})
	@RequestMapping(value = "/start", method = { RequestMethod.POST }, consumes = "application/json")
	public  MessageResult start(@RequestBody Map<String, Object> map) {

		try {
			Map<String, Object> start = flService.start(map);
			if(start == null) {
				return 	ResponseModel.getErrorResult();
			}
			return getSuccessResultModel(start);
		} catch (Exception e) {			
			log.error("-----------"+e.getMessage()+"------------");  		 		 
			e.printStackTrace();
			return getErrorResultModel();
		}

		/*	MessageResult result = new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			//当前登录用户
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);

			String dubboResultInfo = flDtoServiceCustomer.start(userInfo, paramaterJson);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo,
					DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				result.setResult(JacksonUtils.fromJson(dubboServiceResultInfo.getResult(),Map.class));
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(dubboServiceResultInfo.getMsg());
			} else {
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(dubboServiceResultInfo.getMsg());
			}
					} catch (Exception e) {			log.error("-----------"+e.getMessage()+"------------");  		 		 
			log.error("调用getPath方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;*/
	}
	@ApiOperation(value= "emulation",notes="emulation")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "map",dataType = "Map",value = "limit query",required = true)})
	@RequestMapping(value = "/emulation", method = { RequestMethod.POST }, consumes = "application/json")
	public  MessageResult emulation(@RequestBody Map<String, Object> map) {
		try {
			String emulation = flService.emulation(map);
			return getErrorResultModel(emulation);
		} catch (Exception e) {			
			log.error("-----------"+e.getMessage()+"------------");  		 		 
			e.printStackTrace();
			return getErrorResultModel();
		}
		/*MessageResult result = new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			//当前登录用户
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);

			String dubboResultInfo = flDtoServiceCustomer.emulation(userInfo, paramaterJson);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo,
					DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				result.setResult(JacksonUtils.fromJson(dubboServiceResultInfo.getResult(),List.class));
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(dubboServiceResultInfo.getMsg());
			} else {
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(dubboServiceResultInfo.getMsg());
			}
					} catch (Exception e) {			log.error("-----------"+e.getMessage()+"------------");  		 		 
			log.error("调用emulation方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;*/
	}

	/**
	 * 流程执行路径变更处理 1、一般指由管理员或配置的代理引起的流程实例路径或审批人变更
	 * 2、目前已有的路径变更类型有：代理（4种情况）、加签、替换代理人、撤回、一键审结
	 * 
	 * @param map
	 * @return
	 */
	@ApiOperation(value= "流程执行路径变更处理",notes="流程执行路径变更处理")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "map",dataType = "Map",value = "limit query",required = true)})
	@RequestMapping(value = "/processChange", method = { RequestMethod.POST }, consumes = "application/json")
	public  MessageResult processChange(@RequestBody Map<String, Object> map) {

		try {
			@SuppressWarnings("unchecked")
			List<ACUnit> acUnitList = (List<ACUnit>) map.get("approvalList");
			String fiId = (String) map.get("fiId");
			String changeType = (String)  map.get("changeType");
			boolean processChange = instanceService.processChange(null, fiId, changeType, acUnitList);
			return getSuccessResultModel(processChange);
		} catch (Exception e) {			
			log.error("-----------"+e.getMessage()+"------------");  		 		 
			e.printStackTrace();
			return getErrorResultModel();
		}

		/*		
		MessageResult result = new MessageResult();
		String paramJson = JacksonUtils.toJson(map);
		try {
			//当前登录用户
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userJson = JacksonUtils.toJson(userBeanInfo);

			String dubboResultInfo = instanceDtoServiceCustomer.processChange(userJson, paramJson);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo,
					DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				result.setResult(JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), Map.class));
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(dubboServiceResultInfo.getMsg());
			} else {
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(dubboServiceResultInfo.getMsg());
			}
					} catch (Exception e) {			log.error("-----------"+e.getMessage()+"------------");  		 		 
			log.error("调用processChange方法:  【参数" + paramJson + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;*/
	}
	@ApiOperation(value= "queryPostData",notes="queryPostData")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "map",dataType = "Map",value = "limit query",required = true)})
	@RequestMapping(value = "/queryPostData", method = { RequestMethod.POST }, consumes = "application/json")
	public  MessageResult queryPostData(@RequestBody Map<String, Object> map) {

		try {
			return getSuccessResultModel(map);
		} catch (Exception e) {			
			log.error("-----------"+e.getMessage()+"------------");  		 		 
			e.printStackTrace();
			return getErrorResultModel();
		}
		/*MessageResult result = new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			//当前登录用户
			//			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			//			String userJson = JacksonUtils.toJson(userBeanInfo);

			Map<String, Object> resultMap = new HashMap<String, Object>();
			result.setResult(JacksonUtils.toJson(resultMap));
			result.setSuccess(MessageInfo.GETSUCCESS.isResult());
			result.setMsg("查询人员岗位信息！");
					} catch (Exception e) {			log.error("-----------"+e.getMessage()+"------------");  		 		 
			log.error("调用queryPostData方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;*/
	}
	@ApiOperation(value= "queryBusinessData",notes="queryBusinessData")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "map",dataType = "Map",value = "limit query",required = true)})
	@RequestMapping(value = "/queryBusinessData", method = { RequestMethod.POST }, consumes = "application/json")
	public  MessageResult queryBusinessData(@RequestBody Map<String, Object> map) {

		try {

			Map<String, Object> resultMap = new HashMap<String, Object>();
			resultMap.put("flow_phone_data", "手机业务数据");
			Map<String, Object> dataMap = new HashMap<String, Object>();
			dataMap.put("flow_business_company_id", "业务单据公司ID");
			dataMap.put("flow_business_dept_id", "业务单据部门ID");
			dataMap.put("flow_business_project_id", "业务单据项目ID");
			dataMap.put("flow_business_project_branch_id", "业务单据分期ID");
			dataMap.put("start_user_id", "发起人ID");
			dataMap.put("IntegerVariable", 10);
			dataMap.put("StringVariable", "魏武龙");
			dataMap.put("BooleanVariable", true);
			dataMap.put("code", "日常报销");
			dataMap.put("name222", "测试");
			dataMap.put("name", "");
			resultMap.put("flow_business_variable_data", dataMap);
			resultMap.put("flow_business_data", "业务单据数据");
			return getSuccessResultModel("查询业务表单数据！");

		} catch (Exception e) {			
			log.error("-----------"+e.getMessage()+"------------");  		 		 
			e.printStackTrace();
			return getErrorResultModel();
		}

		/*MessageResult result = new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {

			Map<String, Object> resultMap = new HashMap<String, Object>();
			resultMap.put("flow_phone_data", "手机业务数据");
			Map<String, Object> dataMap = new HashMap<String, Object>();
			dataMap.put("flow_business_company_id", "业务单据公司ID");
			dataMap.put("flow_business_dept_id", "业务单据部门ID");
			dataMap.put("flow_business_project_id", "业务单据项目ID");
			dataMap.put("flow_business_project_branch_id", "业务单据分期ID");
			dataMap.put("start_user_id", "发起人ID");
			dataMap.put("IntegerVariable", 10);
			dataMap.put("StringVariable", "魏武龙");
			dataMap.put("BooleanVariable", true);
			dataMap.put("code", "日常报销");
			dataMap.put("name222", "测试");
			dataMap.put("name", "");
			resultMap.put("flow_business_variable_data", dataMap);
			resultMap.put("flow_business_data", "业务单据数据");
			result.setResult(JacksonUtils.toJson(resultMap));
			result.setSuccess(MessageInfo.GETSUCCESS.isResult());
			result.setMsg("查询业务表单数据！");
					} catch (Exception e) {			log.error("-----------"+e.getMessage()+"------------");  		 		 
			log.error("调用queryBusinessData方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}*/
	}

}
