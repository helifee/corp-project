package com.jzy.hio.flow.web;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.feign.FlowFeignService;
import com.jzy.hio.flow.entity.Ac;
import com.jzy.hio.flow.entity.BusinessObjectVariable;
import com.jzy.hio.flow.service.AcService;
import com.jzy.tools.data.JacksonUtils;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
/**
 * 流程模板环节控制层
 * @author admin
 *	
 */
@RestController
@RequestMapping("/flow/ac")
@Api(tags = {"模板环节"})
public class AcController  extends ResponseModel {

	private static Logger log = LoggerFactory.getLogger(AcController.class);

	@Autowired
	private AcService acService;

	@Autowired
	private FlowFeignService flowFeignService;

	/**
	 * 根据Id获取业务对象
	 * 
	 * @param id  业务对象主键
	 * 
	 * @return     业务对象
	 */

	@RequestMapping(value="/test",method=RequestMethod.GET)
	public  MessageResult test(){
		try {
			BusinessObjectVariable businessObjectVariable = new BusinessObjectVariable();
			businessObjectVariable.setCode("asdasd");
			businessObjectVariable.setComment("asdfdsfgdsgg");
			String json = JacksonUtils.toJson(businessObjectVariable);
			int saveBusinessObjectVariable = flowFeignService.saveBusinessObjectVariable(json);
			return getSuccessResultModel(saveBusinessObjectVariable);
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
	}

	@ApiOperation(value= "获取详情",notes="获取详情")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "id",value = "id",required = true,dataType = "String")})
	@RequestMapping(value="/get/{id}",method=RequestMethod.GET)
	public  MessageResult get(@PathVariable("id")  String id){
		try {
			Ac ac = acService.getObjectById(id);
			return getSuccessResultModel(ac);
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}

		//	MessageResult result = new MessageResult();
		//		try {
		//			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		//			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
		//			
		//			String dubboResultInfo=acDtoServiceCustomer.getObjectById(userInfo, "{\"id\":\""+id+"\"}");
		//			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		//			if(dubboServiceResultInfo.isSucess()){
		//				String resultInfo= dubboServiceResultInfo.getResult();
		//				AcDto acDto=JacksonUtils.fromJson(resultInfo, AcDto.class);
		//				result.setResult(acDto);
		//				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		//				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
		//			}else{
		//				result.setSuccess(MessageInfo.GETERROR.isResult());
		//				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
		//			}
		//		} catch (Exception e) {
		//			////e.printStackTrace();
		//		    log.error("调用get方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
		//			result.setSuccess(MessageInfo.GETERROR.isResult());
		//			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		//		}
		//		return result;
	}


	/**
	 * 返回分页对象
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "分页查询",notes="分页查询")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "map",value = "limit query",required = true,dataType = "Map")})
	@RequestMapping(value="/page",method={RequestMethod.POST}, consumes="application/json")
	public  MessageResult page(@RequestBody Map<String,Object> map){

		try {

			Page page = acService.getPage(map);
			return getSuccessResultModel(page);

		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}

		//		MessageResult result=new MessageResult();
		//		String paramaterJson = JacksonUtils.toJson(map);
		//		try {
		//			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		//			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
		//			
		//		    String dubboResultInfo=acDtoServiceCustomer.getPage(userInfo, paramaterJson);
		//		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		//			if(dubboServiceResultInfo.isSucess()){
		//				String resultInfo= dubboServiceResultInfo.getResult();
		//				PageBeanInfo pageInfo=JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
		//				result.setResult(pageInfo);
		//				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		//				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
		//			}else{
		//				result.setSuccess(MessageInfo.GETERROR.isResult());
		//				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
		//			}
		//		} catch (Exception e) {
		//			////e.printStackTrace();
		//		    log.error("调用page方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
		//			result.setSuccess(MessageInfo.GETERROR.isResult());
		//			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		//		}
	}
	/**
	 * 返回符合条件的列表
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "条件查询",notes="条件查询")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "ac",value = "condition query",required = true,dataType = "String")})
	@RequestMapping(value="/queryList",method={RequestMethod.POST}, consumes="application/json")
	public  MessageResult queryList(@RequestBody Ac ac){
		try {
			List<Ac> list = acService.queryList(ac);
			return  getSuccessResultModel(list);
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
		//		String paramaterJson = JacksonUtils.toJson(map);
		//		try {
		//			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		//			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
		//			
		//			String dubboResultInfo=acDtoServiceCustomer.queryList(userInfo, paramaterJson);
		//		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		//		    if(dubboServiceResultInfo.isSucess()){
		//				String resultInfo= dubboServiceResultInfo.getResult();
		//				List<AcDto> list=JacksonUtils.fromJson(resultInfo, ArrayList.class,AcDto.class);
		//				result.setResult(list);
		//				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		//				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
		//		    }else{
		//		    	result.setSuccess(MessageInfo.GETERROR.isResult());
		//				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
		//		    }
		//			
		//		} catch (Exception e) {
		//			////e.printStackTrace();
		//			log.error("调用queryList方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
		//			result.setSuccess(MessageInfo.GETERROR.isResult());
		//			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		//		}
	}


	/**
	 * 保存实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "保存",notes="保存")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "ac",value = "save",required = true,dataType = "String")})
	@RequestMapping(value="/save",method=RequestMethod.POST, consumes="application/json")
	public  MessageResult save(@RequestBody Ac ac){

		try {

			int save = acService.save(ac);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.SAVESUCCESS.getMsg());
			successResultModel.setResult(save);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.SAVEERROR.getMsg());
		}

		//		try {
		//			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		//			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
		//			
		//			String saveJson= JacksonUtils.toJson(t);
		//			String dubboResultInfo=acDtoServiceCustomer.save(userInfo, saveJson);
		//		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		//		    if(dubboServiceResultInfo.isSucess()){
		//				String resultInfo= dubboServiceResultInfo.getResult();
		//				AcDto acDto=JacksonUtils.fromJson(resultInfo, AcDto.class);
		//				result.setResult(acDto);
		//				result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
		//				result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
		//		    }else{
		//		    	result.setSuccess(MessageInfo.SAVEERROR.isResult());
		//				result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
		//		    }
		//		} catch (Exception e) {
		//			try {
		//				////e.printStackTrace();
		//			    ObjectMapper mapper = new ObjectMapper();
		//				String  paramJson = mapper.writeValueAsString(t);
		//				log.error("调用save方法:  【参数"+paramJson+"】======"+"【"+e.getMessage()+"】");
		//				result.setSuccess(MessageInfo.SAVEERROR.isResult());
		//				result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+e.getMessage()+"】");
		//			} catch (JsonProcessingException e1) {
		//				// TODO Auto-generated catch block
		//				////e1.printStackTrace();
		//			}
		//			
		//		}
	}

	/**
	 * 删除实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "分页查询",notes="分页查询")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "id",value = "id",required = true,dataType = "String")})
	@RequestMapping(value="/delete/{id}",method=RequestMethod.DELETE)
	public  MessageResult delete(@PathVariable("id")  String id){

		try {
			int deleteObjectById = acService.deleteObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deleteObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
		//		try {
		//			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		//			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
		//			
		//			String dubboResultInfo=acDtoServiceCustomer.deleteObjectById(userInfo, "{\"id\":\""+id+"\"}");
		//			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		//			if(dubboServiceResultInfo.isSucess()){
		//				String resultInfo= dubboServiceResultInfo.getResult();
		//				AcDto acDto=JacksonUtils.fromJson(resultInfo, AcDto.class);
		//				result.setResult(acDto);
		//				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
		//				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
		//			}else{
		//				result.setSuccess(MessageInfo.DELETEERROR.isResult());
		//				result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
		//			}
		//		} catch (Exception e) {
		//			////e.printStackTrace();
		//		    log.error("调用delete方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
		//			result.setSuccess(MessageInfo.DELETEERROR.isResult());
		//			result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】");
		//		}

	}

	/**
	 * 删除实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "批量删除",notes="批量删除")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "ids",value = "ids",required = true,dataType = "String")})
	@RequestMapping(value="/deleteBatch/{ids}",method=RequestMethod.DELETE)
	public  MessageResult deleteBatch(@PathVariable("ids")  String ids){
		try {
			List<String> deleteMethod =  Arrays.asList(ids.split(","));
			int count = acService.deleteAllObjectByIds(deleteMethod);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(count);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}

	}

	/**
	 * 修改修改实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "修改实体",notes="修改实体")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",dataType = "Ac",name = "ac",value = "ids",required = true)})
	@RequestMapping(value="/update",method=RequestMethod.POST,consumes="application/json")
	public  MessageResult update(@RequestBody Ac ac){

		try {
			int update = acService.update(ac);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.UPDATESUCCESS.getMsg());
			successResultModel.setResult(update);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.UPDATEERROR.getMsg());
		} 
		//		MessageResult result = new MessageResult();

		//		AcDto acDto=null;
		//		try {
		//			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		//			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
		//			
		//			String dubboResultInfo=acDtoServiceCustomer.getObjectById(userInfo, "{\"id\":\""+id+"\"}");
		//			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		//			if(dubboServiceResultInfo.isSucess()){
		//				 String resultInfo= dubboServiceResultInfo.getResult();
		//				 Map<String,Object> oldMap=JacksonUtils.fromJson(resultInfo, HashMap.class);
		//				 oldMap.putAll(map);
		//				 String updateJson= JacksonUtils.toJson(oldMap);
		//				 String updateDubboResultInfo=acDtoServiceCustomer.update(userInfo, updateJson);
		//				 DubboServiceResultInfo updateDubboServiceResultInfo= JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
		//				 if(updateDubboServiceResultInfo.isSucess()){
		//					 Integer i=JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class);
		//					 result.setResult(i);
		//					 result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
		//					 result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
		//				 }else{
		//					 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
		//					 result.setMsg(updateDubboServiceResultInfo.getMsg()+"【"+updateDubboServiceResultInfo.getExceptionMsg()+"】");
		//				 }
		//			}else{
		//				 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
		//				 result.setMsg("不存在更新的对象");
		//			}
		//		} catch (Exception e) {
		//			try{
		//			 ////e.printStackTrace();
		//			 ObjectMapper mapper = new ObjectMapper();
		//			 String  paramJson = mapper.writeValueAsString(acDto);
		//			 log.error("调用update方法:  【参数"+id+","+paramJson+"】======"+"【"+e.getMessage()+"】");
		//			 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
		//			 result.setMsg(MessageInfo.UPDATEERROR.getMsg()+"【"+e.getMessage()+"】");
		//			}catch (JsonProcessingException e1) {
		//				// TODO Auto-generated catch block
		//				////e1.printStackTrace();
		//			}
		//			
		//		}

	}

	/**
	 * 伪删除实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "伪删除",notes="伪删除")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",dataType = "String",name = "id",value = "id",required = true)})
	@RequestMapping(value="/deletePseudo/{id}",method=RequestMethod.DELETE)
	public  MessageResult deletePseudo(@PathVariable("id")  String id){

		try {
			int deletePseudoObjectById = acService.deletePseudoObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deletePseudoObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return  getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}

		// MessageResult result=new MessageResult();
		//		try {
		//			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		//			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
		//			
		//			String dubboResultInfo=acDtoServiceCustomer.deletePseudoObjectById(userInfo, "{\"id\":\""+id+"\"}");
		//			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		//			if(dubboServiceResultInfo.isSucess()){
		//				String resultInfo= dubboServiceResultInfo.getResult();
		//				AcDto acDto=JacksonUtils.fromJson(resultInfo, AcDto.class);
		//				result.setResult(acDto);
		//				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
		//				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
		//			}else{
		//				result.setSuccess(MessageInfo.DELETEERROR.isResult());
		//				result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
		//			}
		//		} catch (Exception e) {
		//			////e.printStackTrace();
		//		    log.error("调用deletePseudo方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
		//			result.setSuccess(MessageInfo.DELETEERROR.isResult());
		//			result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】");
		//		}

	}

	/**
	 * 伪删除实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "批量伪删除",notes="批量伪删除")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",dataType = "String",name = "ids",value = "ids",required = true)})
	@RequestMapping(value="/deletePseudoBatch/{ids}",method=RequestMethod.DELETE)
	public  MessageResult deletePseudoBatch(@PathVariable("ids")  String ids){

		try {
			String[] split = ids.split(",");
			List<String> asList = Arrays.asList(split);
			int deletePseudoObjectById = acService.deletePseudoAllObjectByIds(asList);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deletePseudoObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return  getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}

		//   	MessageResult result=new MessageResult();
		//		try {
		//			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		//			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
		//			
		//			String dubboResultInfo=acDtoServiceCustomer.deletePseudoAllObjectByIds(userInfo, "{\"id\":\""+ids+"\"}");
		//			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		//			if(dubboServiceResultInfo.isSucess()){
		//				String resultInfo= dubboServiceResultInfo.getResult();
		//				AcDto acDto=JacksonUtils.fromJson(resultInfo, AcDto.class);
		//				result.setResult(acDto);
		//				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
		//				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
		//			}else{
		//				result.setSuccess(MessageInfo.DELETEERROR.isResult());
		//				result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
		//			}
		//		} catch (Exception e) {
		//			////e.printStackTrace();
		//		    log.error("调用deletePseudoBatch方法:  【参数"+ids+"】======"+"【"+e.getMessage()+"】");
		//			result.setSuccess(MessageInfo.DELETEERROR.isResult());
		//			result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】");
		//		}

	}
	/*	@RequestMapping(value="/redisSet",method=RequestMethod.GET)
	public  MessageResult redisTest(@RequestParam("id")String id,@RequestParam("name")String name){
		redisClient.set(id, name);
		return getSuccessResultModel(null);

	}

	@RequestMapping(value="/redisGet",method=RequestMethod.GET)
	public  MessageResult redisGet(@RequestParam("id")String id,@RequestParam("name")String name){

		return getSuccessResultModel(redisClient.get(id));
	}*/
}
