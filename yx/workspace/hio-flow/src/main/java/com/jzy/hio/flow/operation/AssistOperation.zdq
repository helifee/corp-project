package com.jzy.hio.flow.operation;

import java.sql.Timestamp;
import java.util.List;

import org.apache.commons.collections.CollectionUtils;

import com.jzy.hio.base.utils.IDGenerator;
import com.jzy.hio.flow.dto.tobedeleted.ApprovalSubmitDto;
import com.jzy.hio.flow.enums.AutoPassType;
import com.jzy.hio.flow.enums.InstanceOperateType;
import com.jzy.hio.flow.enums.TaskStatus;
import com.jzy.hio.flow.enums.TaskType;
import com.jzy.hio.flow.rt.model.ApproverUnit;
import com.jzy.hio.flow.rt.model.InstanceUnit;
import com.jzy.hio.flow.rt.model.TaskUnit;
import com.jzy.hio.flow.utils.JavaBeanCopier;

/**
 * 协办操作
 * 1、职责不转换，最终还是本人审批
 * 2、可同时指定多人协定
 * 3、本人可以不用待协办人回复也可同意，流程往下走
 * 
 * @author daoqi
 *
 */
public class AssistOperation extends DefaultOperation implements Operation {

	public AssistOperation() {
		super(OperationType.ASSIST);
	}
	
	@Override
	protected void operate(InstanceUnit instanceUnit, ApprovalSubmitDto approvalDto) throws Exception {
		//3、跳过当前岗位中的竞争者
		super.jumpOver();
		
		//1、插入协办人列表
		insertAssisters(instanceUnit, approvalDto);
		
		//2、修改当前人的处理意见
		updateUserNote(approvalDto);
		
		//记录操作日志
		service.getInstanceLogService().saveLogData(instanceUnit.getId(), currentAc.getAcId(),
				currentApprover.getId(), currentApprover.getTask().getTaskId(), 
				InstanceOperateType.COOPERATE.getValue(), currentApprover.getApproverId() + "," 
				+ approvalDto.getAssisters(), null, null);		
	}

	private void updateUserNote(ApprovalSubmitDto approvalDto) {
		TaskUnit task = currentApprover.getTask();
		StringBuilder taskComments = new StringBuilder("协办到【");
		taskComments.append(approvalDto.getAssistersName()).append("】");
		task.setTaskResult(approvalDto.getOperationType());
		task.setTaskResultName(approvalDto.getOperationName());
		task.setTaskComments(taskComments.toString() + ":" + approvalDto.getUserNote());
		task.setEndTime(new Timestamp(System.currentTimeMillis()));
		task.setTaskStatus(TaskStatus.FINISHED.getValue());
	}

	private void insertAssisters(InstanceUnit instanceUnit, ApprovalSubmitDto approvalDto) {
		List<ApproverUnit> currentApproverList = currentPost.getApprovers();
		if(CollectionUtils.isEmpty(currentApproverList)) {
			return ;
		}
		
		//新增协办人本身行
		ApproverUnit newCurrentApprover = (ApproverUnit) JavaBeanCopier.copy(currentApprover);
		newCurrentApprover.setId(IDGenerator.getUUID());
		newCurrentApprover.setDbAction(1);
		newCurrentApprover.getTask().setTaskId(IDGenerator.getUUID());
		newCurrentApprover.getTask().setDbAction(1);
		newCurrentApprover.getTask().setStartTime(new Timestamp(System.currentTimeMillis()));
		newCurrentApprover.getTask().setFromId(currentApprover.getApproverId());	//本身增行也要设置来源，否则撤回任务时无法撤回
		newCurrentApprover.getTask().setFromName(currentApprover.getApproverName());
//		currentApproverList.add(currentApprover.getApproverSeq(), newCurrentApprover);
		currentApproverList.add(newCurrentApprover);
		
		String[] assister = approvalDto.getAssisters().split(",");
		String[] assisterName = approvalDto.getAssistersName().split(",");
		for(int i=0; i<assister.length; i++) {
			ApproverUnit newApprover = new ApproverUnit();
			newApprover.setId(IDGenerator.getUUID());
			newApprover.setApproverId(assister[i]);				//协办人userId, 32位!!!
			newApprover.setApproverName(assisterName[i]);
			newApprover.setDbAction(1);
			newApprover.setAcPostId(currentApprover.getAcPostId());
			newApprover.setOwner(currentApprover.getOwner());
			newApprover.setAutoPass(AutoPassType.NOT_PASS.getValue());
			
			TaskUnit task = new TaskUnit();
			task.setDbAction(1);
			task.setTaskId(IDGenerator.getUUID());
			task.setTaskStatus(TaskStatus.RUNNING.getValue());
			task.setTaskType(TaskType.ASSIST.getValue());	//协办人
			task.setStartTime(new Timestamp(System.currentTimeMillis()));
			task.setFromId(currentApprover.getApproverId());
			task.setFromName(currentApprover.getApproverName());
			newApprover.setTask(task);
//			currentApproverList.add(currentApprover.getApproverSeq() + 1, newApprover);
			currentApproverList.add(newApprover);
			
//			newMessage(instanceUnit, task, currentAc.getApprovalTypeId());
		}
		
		//重新排序
		for(int i=0; i<currentApproverList.size(); i++) {
			currentApproverList.get(i).setApproverSeq(i + 1);
		}
	}

//	@Override
//	public void handleMessages(InstanceUnit instanceUnit, ApprovalSubmitDto approvalDto) throws Exception {
//		super.sendMessages(instanceUnit.getMessages());
//		super.withDrawMessage(instanceUnit.getMessagesToDel());
//		completeMessage(approvalDto.getMsgId());	//协办不删除待办消息！！！
//	}

}
