package com.jzy.hio.flow.operation;

import java.util.concurrent.Executors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.jzy.hio.flow.dto.tobedeleted.ApprovalSubmitDto;
import com.jzy.hio.flow.dto.tobedeleted.UserDto;
import com.jzy.hio.flow.entity.SysNoticeMsg;
import com.jzy.hio.flow.enums.FlowMonitorPoint;
import com.jzy.hio.flow.rt.model.ACUnit;
import com.jzy.hio.flow.rt.model.ApproverUnit;
import com.jzy.hio.flow.rt.model.InstanceUnit;

/**
 * 结束操作
 * 
 * @author daoqi
 *
 */
public class EndOperation extends DefaultOperation implements Operation {
	
	private static Logger log = LoggerFactory.getLogger(EndOperation.class);
	
	public EndOperation() {
		super(OperationType.END);
	}

	/**
	 * 流程结束处理
	 */
	@Override
	public String action(InstanceUnit instanceUnit, 
			ApprovalSubmitDto approvalDto) throws Exception {
		this.setInstanceUnit(instanceUnit);

		//1、通知业务系统流程结束状态
		noticeBusinessSystem(instanceUnit, approvalDto);
		log.info("\n\n EndOperation action() is called. isDoArchive="+instanceUnit.isDoArchive());
		
		//2、归档流程加入全文检索
		if(instanceUnit.isDoArchive()) {
			log.info("\n\n addInstanceInfoIntoContentSearch will be called");
			Executors.newFixedThreadPool(5).execute(new Runnable() {

				@Override
				public void run() {
					addInstanceInfoIntoContentSearch(instanceUnit);
				}
				
			});
		}
		
		//3、监控处理
		monitorHandle(null, instanceUnit.getFlId(), FlowMonitorPoint.FLOW_END);
		
		//4、抄送人消息推送
		sendMsgToStarter(instanceUnit);
		
		return "success";
	}

	private void sendMsgToStarter(InstanceUnit instanceUnit) throws Exception {
		//给发起人发待阅消息 
		ACUnit startAc = instanceUnit.getAcList().get(0);
		ApproverUnit startApprover = startAc.getPosts().get(0).getApprovers().get(0);
		UserDto user = new UserDto(startApprover.getApproverId(), startApprover.getApproverName());
		SysNoticeMsg toReadMsg = createToReadMsg(instanceUnit, instanceUnit.getCustomFormURL(), user);

		service.getMsgService().saveAndNotifyOthers(toReadMsg);
	}
}
