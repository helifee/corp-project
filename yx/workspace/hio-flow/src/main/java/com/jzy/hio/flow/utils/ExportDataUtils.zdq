/**
 * Copyright &copy; 2012-2016WebCore All rights reserved.
 */
package com.jzy.hio.flow.utils;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Comment;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFClientAnchor;
import org.apache.poi.xssf.usermodel.XSSFRichTextString;

import com.jzy.hio.flow.dto.tobedeleted.InstanceDto;
import com.jzy.hio.flow.dto.tobedeleted.InstanceStatDto;
/**
 * 导出Excel文件（导出“XLSX”格式，支持大数据量导出   @see org.apache.poi.ss.SpreadsheetVersion）
 \* @author webcore_team
 * @version 2013-04-21
 */
public class ExportDataUtils {
			
	/**
	 * 工作薄对象
	 */
	private SXSSFWorkbook wb;
	
	/**
	 * 工作表对象
	 */
	private Sheet sheet;
	
	/**
	 * 样式列表
	 */
	private Map<String, CellStyle> styles;
	
	/**
	 * 当前行号
	 */
	private int rownum;
	
	/**
	 * 构造函数
	 * @param title 表格标题，传“空值”，表示无标题
	 * @param headers 表头数组
	 */
	public ExportDataUtils(String title, String[] headers) {
		List<String> headerList = new ArrayList<String>();
		for(String dataItem : headers){
			headerList.add(dataItem);
		}
		initialize(title, headerList);
	}
	
	/**
	 * 构造函数
	 * @param title 表格标题，传“空值”，表示无标题
	 * @param headerList 表头列表
	 */
	public ExportDataUtils(String title, List<String> headerList) {
		initialize(title, headerList);
	}
	
	/**
	 * 初始化函数
	 * @param title 表格标题，传“空值”，表示无标题
	 * @param headerList 表头列表
	 */
	private void initialize(String title, List<String> headerList) {
		this.wb = new SXSSFWorkbook(5000);
		this.sheet = wb.createSheet();
		this.styles = createStyles(wb);
		// Create title
		if (StringUtils.isNotBlank(title)){
			Row titleRow = sheet.createRow(rownum++);
			titleRow.setHeightInPoints(30);
			Cell titleCell = titleRow.createCell(0);
			titleCell.setCellStyle(styles.get("title"));
			titleCell.setCellValue(title);
			sheet.addMergedRegion(new CellRangeAddress(titleRow.getRowNum(),
					titleRow.getRowNum(), titleRow.getRowNum(), headerList.size()-1));
		}
		// Create header
		if (headerList == null){
			throw new RuntimeException("headerList not null!");
		}
		Row headerRow = sheet.createRow(rownum++);
		headerRow.setHeightInPoints(16);
		for (int i = 0; i < headerList.size(); i++) {
			Cell cell = headerRow.createCell(i);
			cell.setCellStyle(styles.get("header"));
			String[] ss = StringUtils.split(headerList.get(i), "**", 2);
			if (ss.length==2){
				cell.setCellValue(ss[0]);
				Comment comment = this.sheet.createDrawingPatriarch().createCellComment(
						new XSSFClientAnchor(0, 0, 0, 0, (short) 3, 3, (short) 5, 6));
				comment.setString(new XSSFRichTextString(ss[1]));
				cell.setCellComment(comment);
			}else{
				cell.setCellValue(headerList.get(i));
			}
			sheet.autoSizeColumn(i);
		}
		for (int i = 0; i < headerList.size(); i++) {  
			int colWidth = sheet.getColumnWidth(i)*2;
	        sheet.setColumnWidth(i, colWidth < 3000 ? 3000 : colWidth);  
		}
	}
	
	/**
	 * 创建表格样式
	 * @param wb 工作薄对象
	 * @return 样式列表
	 */
	private Map<String, CellStyle> createStyles(Workbook wb) {
		Map<String, CellStyle> styles = new HashMap<String, CellStyle>();
		
		CellStyle style = wb.createCellStyle();
		style.setAlignment(CellStyle.ALIGN_CENTER);
		style.setVerticalAlignment(CellStyle.VERTICAL_CENTER);
		Font titleFont = wb.createFont();
		titleFont.setFontName("Arial");
		titleFont.setFontHeightInPoints((short) 16);
		titleFont.setBoldweight(Font.BOLDWEIGHT_BOLD);
		style.setFont(titleFont);
		styles.put("title", style);

		style = wb.createCellStyle();
		style.setVerticalAlignment(CellStyle.VERTICAL_CENTER);
		style.setBorderRight(CellStyle.BORDER_THIN);
		style.setRightBorderColor(IndexedColors.GREY_50_PERCENT.getIndex());
		style.setBorderLeft(CellStyle.BORDER_THIN);
		style.setLeftBorderColor(IndexedColors.GREY_50_PERCENT.getIndex());
		style.setBorderTop(CellStyle.BORDER_THIN);
		style.setTopBorderColor(IndexedColors.GREY_50_PERCENT.getIndex());
		style.setBorderBottom(CellStyle.BORDER_THIN);
		style.setBottomBorderColor(IndexedColors.GREY_50_PERCENT.getIndex());
		Font dataFont = wb.createFont();
		dataFont.setFontName("Arial");
		dataFont.setFontHeightInPoints((short) 10);
		style.setFont(dataFont);
		styles.put("data", style);
		
		style = wb.createCellStyle();
		style.cloneStyleFrom(styles.get("data"));
		style.setAlignment(CellStyle.ALIGN_LEFT);
		styles.put("data1", style);

		style = wb.createCellStyle();
		style.cloneStyleFrom(styles.get("data"));
		style.setAlignment(CellStyle.ALIGN_CENTER);
		styles.put("data2", style);

		style = wb.createCellStyle();
		style.cloneStyleFrom(styles.get("data"));
		style.setAlignment(CellStyle.ALIGN_RIGHT);
		styles.put("data3", style);
		
		style = wb.createCellStyle();
		style.cloneStyleFrom(styles.get("data"));
//		style.setWrapText(true);
		style.setAlignment(CellStyle.ALIGN_CENTER);
		style.setFillForegroundColor(IndexedColors.GREY_50_PERCENT.getIndex());
		style.setFillPattern(CellStyle.SOLID_FOREGROUND);
		Font headerFont = wb.createFont();
		headerFont.setFontName("Arial");
		headerFont.setFontHeightInPoints((short) 10);
		headerFont.setBoldweight(Font.BOLDWEIGHT_BOLD);
		headerFont.setColor(IndexedColors.WHITE.getIndex());
		style.setFont(headerFont);
		styles.put("header", style);
		
		return styles;
	}

	/**
	 * 添加一行
	 * @return 行对象
	 */
	public Row addRow(){
		return sheet.createRow(rownum++);
	}
	
	/**
	 * 添加一行
	 * @return 行对象
	 */
	public void skipRows(int rowSum){
		rownum = rownum+rowSum;
	}
	

	/**
	 * 添加一个单元格
	 * @param row 添加的行
	 * @param column 添加列号
	 * @param val 添加值
	 * @return 单元格对象
	 */
	public Cell addCell(Row row, int column, Object val){
		return this.addCell(row, column, val, 0, Class.class);
	}
	
	/**
	 * 添加一个单元格
	 * @param row 添加的行
	 * @param column 添加列号
	 * @param val 添加值
	 * @param align 对齐方式（1：靠左；2：居中；3：靠右）
	 * @return 单元格对象
	 */
	public Cell addCell(Row row, int column, Object val, int align, Class<?> fieldType){
		Cell cell = row.createCell(column);
		String cellFormatString = "@";
		try {
			if(val == null){
				cell.setCellValue("");
			}/*else if(fieldType != Class.class){
				cell.setCellValue((String)fieldType.getMethod("setValue", Object.class).invoke(null, val));
			}*/else{
				if(val instanceof String) {
					cell.setCellValue((String) val);
				}else if(val instanceof Integer) {
					cell.setCellValue((Integer) val);
					cellFormatString = "0";
				}else if(val instanceof Long) {
					cell.setCellValue((Long) val);
					cellFormatString = "0";
				}else if(val instanceof Double) {
					cell.setCellValue((Double) val);
					cellFormatString = "0.00";
				}else if(val instanceof Float) {
					cell.setCellValue((Float) val);
					cellFormatString = "0.00";
				}else if(val instanceof Date) {
					cell.setCellValue((Date) val);
					cellFormatString = "yyyy-MM-dd HH:mm";
				}else {
					System.out.println("cell.setCellValue((String) val)=>>"+val);
					cell.setCellValue((String) val);
					//cell.setCellValue((String)Class.forName(this.getClass().getName().replaceAll(this.getClass().getSimpleName(), 
					//	"fieldtype."+val.getClass().getSimpleName()+"Type")).getMethod("setValue", Object.class).invoke(null, val));
				}
			}
			if (val != null){
				CellStyle style = styles.get("data_column_"+column);
				if (style == null){
					style = wb.createCellStyle();
					style.cloneStyleFrom(styles.get("data"+(align>=1&&align<=3?align:"")));
			        style.setDataFormat(wb.createDataFormat().getFormat(cellFormatString));
					styles.put("data_column_" + column, style);
				}
				cell.setCellStyle(style);
			}
		} catch (Exception ex) {
			cell.setCellValue(val.toString());
		}
		return cell;
	}
	
	/**
	 * 输出数据流
	 * @param os 输出数据流
	 */
	public ExportDataUtils write(OutputStream os) throws IOException{
		wb.write(os);
		return this;
	}
	
	/**
	 * 输出到客户端
	 * @param fileName 输出文件名
	 */
	public ExportDataUtils write(HttpServletResponse response, String fileName) throws IOException{
		response.reset();
		//contentType要设置正确
        //response.setContentType("application/octet-stream; charset=utf-8");
        response.setContentType("application/x-msdownload");
        //response.setHeader("Content-Disposition", "attachment; filename="+newFileName);
        response.addHeader("Content-Disposition", "attachment;filename="+ new String(fileName.getBytes("GB2312"),"ISO-8859-1"));
		write(response.getOutputStream());
		return this;
	}
	
	/**
	 * 输出到文件
	 * @param name 输出文件名
	 */
	public ExportDataUtils writeFile(String name) throws FileNotFoundException, IOException{
		FileOutputStream os = new FileOutputStream(name);
		this.write(os);
		return this;
	}
	
	/**
	 * 清理临时文件
	 */
	public ExportDataUtils dispose(){
		wb.dispose();
		return this;
	}

	public ExportDataUtils addUseTimesDataList(List<InstanceStatDto> list) {
		for (InstanceStatDto dtoData : list){
			int colunm = 0;
			Row row = this.addRow();
			this.addCell(row, colunm++, dtoData.getAppName(), 0, String.class);
			this.addCell(row, colunm++, dtoData.getFlowName(), 0, String.class);
			this.addCell(row, colunm++,  dtoData.getFlowCode(), 0, String.class);
			this.addCell(row, colunm++, dtoData.getBusiObjectName(), 0, String.class);
			this.addCell(row, colunm++, dtoData.getUserTimes(), 0, String.class);
		}
		return this;
	}

	public ExportDataUtils addOperateTimesDataList(List<InstanceStatDto> list) {
		for (InstanceStatDto dtoData : list){
			int colunm = 0;
			Row row = this.addRow();
			this.addCell(row, colunm++, dtoData.getStatWay(), 0, String.class);
			this.addCell(row, colunm++, dtoData.getSendBackSum(), 0, String.class);
			
			this.addCell(row, colunm++,  dtoData.getBackInstSum(), 0, String.class);
			this.addCell(row, colunm++,  dtoData.getCancelSum(), 0, String.class);
			this.addCell(row, colunm++, dtoData.getTransferSum(), 0, String.class);
			this.addCell(row, colunm++, dtoData.getCooperateSum(), 0, String.class);
			
			this.addCell(row, colunm++, dtoData.getBackTaskSum(), 0, String.class);
			this.addCell(row, colunm++, dtoData.getModifySum(), 0, String.class);
		}
		return this;
	}

	public ExportDataUtils addInstanceEffiencyDataList(List<InstanceStatDto> list) {
		for (InstanceStatDto dtoData : list){
			int colunm = 0;
			Row row = this.addRow();
			this.addCell(row, colunm++, dtoData.getStatWay(), 0, String.class);
			this.addCell(row, colunm++, dtoData.getAvgSum(), 0, String.class);
			this.addCell(row, colunm++,  dtoData.getMaxSum(), 0, String.class);
			this.addCell(row, colunm++,  dtoData.getMinSum(), 0, String.class);
		}
		return this;
	}

	public ExportDataUtils addTaskLengthDataList(List<InstanceStatDto> list) {
		for (InstanceStatDto dtoData : list){
			int colunm = 0;
			Row row = this.addRow();
			this.addCell(row, colunm++, dtoData.getStatWayName(), 0, String.class);
			this.addCell(row, colunm++, dtoData.getTaskSum(), 0, String.class);
			this.addCell(row, colunm++, dtoData.getAvgSum(), 0, String.class);
			this.addCell(row, colunm++,  dtoData.getMaxSum(), 0, String.class);
			this.addCell(row, colunm++,  dtoData.getMinSum(), 0, String.class);
		}
		return this;
	}

	//              
	//          
	public ExportDataUtils addTaskLengthDetailDataList(List<InstanceStatDto> list) {
		for (InstanceStatDto dtoData : list){
			int colunm = 0;
			Row row = this.addRow();
//			this.addCell(row, colunm++, dtoData.getOperatorName(), 0, String.class);
//			this.addCell(row, colunm++, dtoData.getHourSum(), 0, String.class);
//			this.addCell(row, colunm++, dtoData.getInstanceName(), 0, String.class);
//			this.addCell(row, colunm++,  dtoData.getAcName(), 0, String.class);
//			this.addCell(row, colunm++,  dtoData.getApproveType(), 0, String.class);
//
//			this.addCell(row, colunm++,  dtoData.getEndDate(), 0, String.class);
//			this.addCell(row, colunm++,  dtoData.getDayType(), 0, String.class);
//			this.addCell(row, colunm++,  dtoData.getOperationType(), 0, String.class);
//			this.addCell(row, colunm++,  dtoData.getStartCompanyName(), 0, String.class);
			// String header[] = {"流程标题","系统","业务对象","审批状态","","停留时长(小时)","接受时间","处理时间","处理人","处理人所在部门","处理人所在公司","流程模板","节点名称","发起人","发起人所在部门","发起人所在公司"};
			this.addCell(row, colunm++, dtoData.getInstanceName(), 0, String.class);
			this.addCell(row, colunm++, dtoData.getAppCode(), 0, String.class);
			this.addCell(row, colunm++, dtoData.getBusiObjectName(), 0, String.class);
			String operationType = "";
			if(Objects.equals(dtoData.getOperationType(),"DB")||Objects.equals(dtoData.getOperationType(),"DY")){
				operationType = "待审";
			}else{
				operationType = "已审";
			}
			this.addCell(row, colunm++,operationType, 0, String.class);
			this.addCell(row, colunm++,dtoData.getHourSum(), 0, String.class);
			this.addCell(row, colunm++,dtoData.getStartDate(), 0, String.class);
			this.addCell(row, colunm++,dtoData.getOperateTime(), 0, String.class);
            this.addCell(row, colunm++,dtoData.getOperatorName(), 0, String.class);
			this.addCell(row, colunm++,dtoData.getOperatorDeptName(), 0, String.class);
			this.addCell(row, colunm++,dtoData.getOperatorCompanyName(), 0, String.class);
			this.addCell(row, colunm++,dtoData.getFlowName(), 0, String.class);
			this.addCell(row, colunm++,dtoData.getAcName(), 0, String.class);
			this.addCell(row, colunm++,dtoData.getStartUserName(), 0, String.class);
			this.addCell(row, colunm++,dtoData.getFlowBusinessDeptName(), 0, String.class);
			this.addCell(row, colunm++,dtoData.getFlowBusinessCompanyName(), 0, String.class);
		}
		return this;
	}

	public ExportDataUtils addInstanceEfficiencyDetailList(List<InstanceStatDto> list) {
		for (InstanceStatDto dtoData : list){
			int colunm = 0;
			Row row = this.addRow();
			this.addCell(row, colunm++, dtoData.getCode(), 0, String.class);
			this.addCell(row, colunm++, dtoData.getName(), 0, String.class);
			this.addCell(row, colunm++, dtoData.getBusiObjectName(), 0, String.class);
			this.addCell(row, colunm++,  dtoData.getStartDate(), 0, String.class);
			this.addCell(row, colunm++,  dtoData.getStartUserName(), 0, String.class);
				 
			this.addCell(row, colunm++,  dtoData.getFlowBusinessDeptName(), 0, String.class);
			this.addCell(row, colunm++,  dtoData.getFlowBusinessCompanyName(), 0, String.class);
			this.addCell(row, colunm++,  dtoData.getFlowName(), 0, String.class);
			this.addCell(row, colunm++,  dtoData.getHourSum(), 0, String.class);
		}
		return this;
	}

	public ExportDataUtils addOperateTimesDetailList(List<InstanceDto> list) {
		for (InstanceDto dtoData : list){
			int colunm = 0;
			Row row = this.addRow();
			//变量编码-code  流程标题-name  业务对象-busiObjectName  发起时间-startDate  发起人startUserName
			//发起部门 -flowBusinessDeptName  发起公司 -flowBusinessCompanyName 流程模板-flowName   currentApprovers  status
			this.addCell(row, colunm++, dtoData.getCode(), 0, String.class);
			this.addCell(row, colunm++, dtoData.getName(), 0, String.class);
			this.addCell(row, colunm++, dtoData.getBusiObjectName(), 0, String.class);
			this.addCell(row, colunm++,  dtoData.getStartDate(), 0, String.class);
			this.addCell(row, colunm++,  dtoData.getStartUserName(), 0, String.class);
				 
			this.addCell(row, colunm++,  dtoData.getFlowBusinessDeptName(), 0, String.class);
			this.addCell(row, colunm++,  dtoData.getFlowBusinessCompanyName(), 0, String.class);
			this.addCell(row, colunm++,  dtoData.getFlowName(), 0, String.class);
			this.addCell(row, colunm++,  dtoData.getCurrentApprovers(), 0, String.class);
			String statusText = getStatusTextByStatus(dtoData.getStatus());
			this.addCell(row, colunm++,  statusText, 0, String.class);
		}
		return this;
	}

	private String getStatusTextByStatus(String status) {
		if("1".equals(status)){
			return "运行中";
		}else if("2".equals(status)){
			return "正常完成";
		}else if("3".equals(status)){
			return "撤回";
		}else if("4".equals(status)){
			return "打回";
		}else if("7".equals(status)){
			return "作废";
		}else if("9".equals(status)){
			return "挂起";
		}
	    return ""; 
	}

}
