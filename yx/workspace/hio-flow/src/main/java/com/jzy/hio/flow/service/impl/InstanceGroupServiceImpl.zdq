package com.jzy.hio.flow.service.impl;

import java.sql.Timestamp;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.base.utils.IDGenerator;
import com.jzy.hio.flow.entity.Instance;
import com.jzy.hio.flow.entity.InstanceAc;
import com.jzy.hio.flow.entity.InstanceGroup;
import com.jzy.hio.flow.entity.InstancePost;
import com.jzy.hio.flow.entity.InstanceTask;
import com.jzy.hio.flow.enums.ApproverStatus;
import com.jzy.hio.flow.mapper.InstanceAcDao;
import com.jzy.hio.flow.mapper.InstanceDao;
import com.jzy.hio.flow.mapper.InstanceGroupDao;
import com.jzy.hio.flow.mapper.InstancePostDao;
import com.jzy.hio.flow.mapper.InstanceTaskDao;
import com.jzy.hio.flow.mapper.SysNoticeMsgDao;
import com.jzy.hio.flow.service.InstanceGroupService;
import com.jzy.hio.flow.service.InstanceTaskService;


/**
 * @author admin
 * 
 * 
 */
@Service
public class InstanceGroupServiceImpl extends  BaseServiceImpl<String,InstanceGroup> implements InstanceGroupService{
	
	private static Logger log = LoggerFactory.getLogger(InstanceGroupServiceImpl.class);

	@Autowired
	private InstanceGroupDao instanceGroupDao;
	
	@Autowired
	private InstancePostDao instancePostDao;
	
	@Autowired
	private InstanceTaskDao instanceTaskDao;
	
	@Autowired
	private InstanceTaskService instanceTaskService;
	
	@Autowired
	private InstanceDao instanceDao;
	
	@Autowired
	private SysNoticeMsgDao sysNoticeMsgDao;
	
	@Autowired
	private InstanceAcDao instanceAcDao;

	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public void replaceInstanceGroup(List<InstanceGroup> groupList) throws Exception {
		if(groupList==null || groupList.size()==0){
			return;
		}
		for(InstanceGroup group : groupList){
			System.out.println("\n approver.Id="+group.getId() );
			InstanceGroup newGroup = this.getObjectById(group.getId());
			
			//处理实例的当前人信息
			this.updateCurrentApprover(newGroup, group);
			
			newGroup.setParticipantId(group.getParticipantId());
			newGroup.setParticipantName(group.getParticipantName());
			
			//处理当前审批人的消息
			String loginName = null;
			// TODO zhangdaoqiang 1225
//			User user = userService.getObjectById(group.getParticipantId());
//			if(user != null) {
//				loginName = user.getLoginName();
//			}
			int updateCnt = this.updateMsg(newGroup, loginName);
			log.info("替换当前审批时修改对应消息：" + updateCnt);
			
			int personCnt = queryPersonCntUnder(newGroup.getAcPostId());
			if(personCnt == 1) {
				//还需要更新InstancePost的postName
				String acPostId = newGroup.getAcPostId();
				InstancePost instancePost = instancePostDao.selectByPrimaryKey(acPostId);
				instancePost.setPostName(group.getPostName());
				instancePost.setPostId(group.getPostId());
				instancePostDao.updateByPrimaryKeySelective(instancePost);
				
			} else {
				
				if(!group.getPostId().equals(newGroup.getPostId())) {
					//
					InstancePost instancePost = instancePostDao.selectByPrimaryKey(newGroup.getAcPostId());
					instancePost.setLeftPerson(instancePost.getLeftPerson() - 1);
					int cnt = instancePostDao.updateByPrimaryKeySelective(instancePost);
					
					InstancePost post = new InstancePost();
					post.setId(IDGenerator.getUUID());
					post.setAcId(newGroup.getAcId());
					post.setPostId(group.getPostId());
					post.setPostName(group.getPostName());
					post.setStatus(group.getStatus());
					newGroup.setAcPostId(post.getId());
					instancePostDao.insert(post);
					
					InstanceAc instanceAc = instanceAcDao.selectByPrimaryKey(newGroup.getAcId());
					instanceAc.setLeftPost(instanceAc.getLeftPost() + 1);
					int icnt = instanceAcDao.updateByPrimaryKeySelective(instanceAc);
				}
			}
			
			newGroup.setPostId(group.getPostId());
			newGroup.setPostName(group.getPostName());
			int result = this.update(newGroup);
			
			//处理任务表中的审批人
//			Map<String, Object> params = new HashMap<String, Object>();
//			params.put("groupId", newGroup.getId());
			InstanceTask params = new InstanceTask();
			params.setGroupId(newGroup.getId());
			List<InstanceTask> taskList = instanceTaskDao.select(params);
			if(CollectionUtils.isNotEmpty(taskList)) {
				for(InstanceTask task : taskList) {
					task.setApproverId(newGroup.getParticipantId());
					task.setApproverName(newGroup.getParticipantName());
				}
			}
//			instanceTaskDao.updateBatch(taskList);
			instanceTaskService.updateBatch(taskList);
			
			System.out.println("\n ---- this.update(newGroup) result ="+result);
		}
	}

	private void updateCurrentApprover(InstanceGroup newGroup, InstanceGroup group) {
		if(ApproverStatus.RUNNING.getValue().equals(group.getStatus())) {
			String instanceId = group.getSource();	//source传过来的是instanceId
			// TODO zhangdaoqiang 1225
			Instance instance = null;//instanceDao.getObjectById(instanceId);
			String currentApproverIds = instance.getCurrentApproverIds();
			log.info("currentApproverIds=" + currentApproverIds);
			currentApproverIds = currentApproverIds.replaceFirst(newGroup.getParticipantId(), group.getParticipantId());
			log.info("currentApproverIds=" + currentApproverIds + ", newGroup.getParticipantId()=" 
					+newGroup.getParticipantId() + ", group.getParticipantId()=" + group.getParticipantId());
			String currentApprovers = instance.getCurrentApprovers();
			log.info("currentApprovers=" + currentApprovers);
			currentApprovers = currentApprovers.replace(newGroup.getParticipantName(), group.getParticipantName());
			log.info("currentApprovers=" + currentApprovers + ", newGroup.getParticipantName()=" 
					+newGroup.getParticipantName() + ", group.getParticipantName()=" + group.getParticipantName());
			instance.setCurrentApproverIds(currentApproverIds);
			instance.setCurrentApprovers(currentApprovers);
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("instanceId", instance.getId());
			params.put("currentApproverIds", currentApproverIds);
			params.put("currentApprovers", currentApprovers);
			params.put("status", instance.getStatus());
			// TODO zhangdaoqiang 1225
//			int updateCnt = instanceDao.update(Instance.class.getName() + ".sync", params);
//			log.info("替换审批人过程中修改流程中当前审批人信息：params=" + params + ", updateCnt=" + updateCnt);
		}
	}

	private int queryPersonCntUnder(String acPostId) throws Exception {
//		Map<String, Object> params = new HashMap<String, Object>();
//		params.put("acPostId", acPostId);
//		params.put("delflag", 0);
		InstanceGroup params = new InstanceGroup();
		params.setAcPostId(acPostId);
		params.setDelflag(false);
		List<InstanceGroup> list = this.queryList(params);
		return list.size();
	}

	private int updateMsg(InstanceGroup newGroup, String loginName) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("groupId", newGroup.getId());
		params.put("loginName", loginName);
		params.put("userId", newGroup.getParticipantId());
		params.put("userName", newGroup.getParticipantName());
		params.put("sendDate", new Timestamp(System.currentTimeMillis()));
		return sysNoticeMsgDao.updateMsg(params);
	}

//	@Override
//	public int update(String id, Map<String, Object> params) {
////		return instanceGroupDao.update(id, params);
//		return 0;
//	}
	
	@Override
	public List<InstanceGroup> queryListByInstanceId(Map<String, Object> paramMap) {
		return this.instanceGroupDao.queryListByInstanceId(paramMap);
	}

}
