package com.jzy.hio.flow.operation;

import java.sql.Timestamp;
import java.util.List;

import org.apache.commons.collections.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.jzy.hio.flow.dto.tobedeleted.ApprovalSubmitDto;
import com.jzy.hio.flow.entity.SysNoticeMsg;
import com.jzy.hio.flow.enums.FlowMonitorPoint;
import com.jzy.hio.flow.enums.InstanceOperateType;
import com.jzy.hio.flow.enums.InstanceStatus;
import com.jzy.hio.flow.enums.TaskStatus;
import com.jzy.hio.flow.exception.FlowException;
import com.jzy.hio.flow.rt.model.ACUnit;
import com.jzy.hio.flow.rt.model.ApproverUnit;
import com.jzy.hio.flow.rt.model.InstanceUnit;
import com.jzy.hio.flow.rt.model.PostUnit;
import com.jzy.hio.flow.rt.model.TaskUnit;

/**
 * 撤回流程操作
 * 
 * @author daoqi
 *
 */
public class WithdrawFlowOperation extends DefaultOperation implements Operation{

	private static Logger log = LoggerFactory.getLogger(WithdrawFlowOperation.class);
	
	public WithdrawFlowOperation() {
		super(OperationType.WITHDRAW_FLOW);
	}

	@Override
	public String action(InstanceUnit instanceUnit, ApprovalSubmitDto approvalDto)
			throws Exception {
		
		//记录流转日志
		ApproverUnit starter = instanceUnit.getAcList().get(0).getPosts().get(0).getApprovers().get(0);
		
		boolean isApproved = checkFlowIsApproved(instanceUnit.getId());
		if(isApproved) {
			log.info("流程已被 审批，现进行撤回操作：instanceId=" + instanceUnit.getId());
			withDrawFlow(instanceUnit);
			
		} else {
			log.info("进行无痕撤回流程");
			withDrawFlowNoTrace(instanceUnit);
		}
		
		//监控处理
		super.monitorHandle(null, instanceUnit.getFlId(), FlowMonitorPoint.FLOW_WITHDRAW);
		super.handleMessages(instanceUnit, approvalDto);
		
		//通知业务系统流程撤回状态
		super.noticeBusinessSystem(instanceUnit, approvalDto);

		//记录操作日志@zhengjiajie@20170704 发起人撤回流程都要记录操作日志
		//一定要记得先后顺序: 先删除消息,再记录撤回流程的日志
		service.getInstanceLogService().saveLogData(instanceUnit.getId(), null, null, null, 
				InstanceOperateType.DRAW_BACK_INSTANCE.getValue(), starter.getApproverId(), null, null);
		return "success";
	}

	/**
	 * 撤回流程 TODO zhangdaoqiang
	 * @param instanceUnit
	 * @throws Exception 
	 */
	public void withDrawFlow(InstanceUnit instanceUnit) throws Exception {
		
		//流程实例置撤回标志
		instanceUnit.setStatus(InstanceStatus.WITHDRAW.getValue());
		instanceUnit.setEndDate(new Timestamp(System.currentTimeMillis()));
		
		//实例中运行中的任务置为跳过
		for(ACUnit acUnit : instanceUnit.getAcList()) {
			int delPostCnt = 0;
			if(CollectionUtils.isEmpty(acUnit.getPosts())) {
				continue;
			}
			
			for(PostUnit post : acUnit.getPosts()) {
				
				int delPersonCnt = 0;
				List<ApproverUnit> approvers = post.getApprovers();
				if(CollectionUtils.isEmpty(approvers)) {
					continue;
				}
				for(ApproverUnit approver : approvers) {
					TaskUnit task = approver.getTask();
					if(task != null && TaskStatus.RUNNING.getValue().equals(task.getTaskStatus())) {
						task.setTaskStatus(TaskStatus.SKIP.getValue());
						task.setEndTime(new Timestamp(System.currentTimeMillis()));
						task.setDbAction(2);
						
						approver.setDbAction(2);
						delPersonCnt++;
						
						//收集待撤回消息ID
						instanceUnit.getMessagesToDel().add(task.getMsgId());
					}
				}
				if(delPersonCnt == approvers.size()) {
					post.setDbAction(2);
					delPostCnt++; 
				}
			}
			
			if(delPostCnt == acUnit.getPosts().size()) {
				acUnit.setDbAction(2);
			}
		}
		
		//保存模型
		log.info("保存模型");
		save(instanceUnit);
		
		//更新发起人消息标题增加[撤回]标识
		log.info("更新发起人消息标题增加[撤回]标识");
//		updateMsgOfStarter(instanceUnit);
		service.editLastStartMsgTitle(instanceUnit.getId(),"【撤回】");

		//删除消息
		log.info("删除消息");
		withDrawMessage(instanceUnit);
		
	}

	private void updateMsgOfStarter(InstanceUnit instanceUnit) throws Exception {
		ApproverUnit starter = instanceUnit.getAcList().get(0).getPosts().get(0).getApprovers().get(0);
		SysNoticeMsg msg = service.getMsgService().getObjectById(starter.getTask().getMsgId());
		if(msg != null) {
			msg.setTitle("【撤回】" + msg.getTitle());
			msg.setDelflag(false);
			int updateCnt = service.getMsgService().update(msg);
			log.info("更新消息成功：updateCnt=" + updateCnt);
			
		} else {
			//旧的数据可能会有这种情况
			log.info("发起人任务表的消息ID为空：instanceId=" + instanceUnit.getId() + ", starter=" + starter.getId());
		}

	}

	/**
	 * 第二个人没有审批，无痕撤回
	 * 
	 * @param instanceUnit
	 * @throws Exception 
	 */
	public void withDrawFlowNoTrace(InstanceUnit instanceUnit) throws Exception {
		this.setInstanceUnit(instanceUnit);
		
		//流程实例置撤回标志
		instanceUnit.setStatus(InstanceStatus.WITHDRAW.getValue());
		instanceUnit.setEndDate(new Timestamp(System.currentTimeMillis()));
		for(ACUnit acUnit : instanceUnit.getAcList()) {
			acUnit.setDbAction(2);
			if(CollectionUtils.isEmpty(acUnit.getPosts())) {
				continue;
			}
			for(PostUnit post : acUnit.getPosts()) {
				List<ApproverUnit> approvers = post.getApprovers();
				if(CollectionUtils.isEmpty(approvers)) {
					continue;
				}
				for(ApproverUnit approver : approvers) {
					approver.setDbAction(2);
					TaskUnit task = approver.getTask();
					task.setDbAction(2);
					post.setDbAction(2);
					
					if(task != null && TaskStatus.RUNNING.getValue().equals(task.getTaskStatus())) {
						//收集待撤回消息ID
						instanceUnit.getMessagesToDel().add(task.getMsgId());
					}
				}
			}
		}
		//更新发起人消息标题增加[撤回]标识
		log.info("更新发起人消息标题增加[撤回]标识");
		updateMsgOfStarter(instanceUnit);
		
		try {
			save(instanceUnit);
		} catch (Exception e) {
			log.info("无痕撤回时数据保存失败： " + e.getMessage());
			throw new FlowException("无痕撤回时数据保存失败： " + e.getMessage(), e);
		}
				
		//删除消息
		try {
			withDrawMessage(instanceUnit);
		} catch (Exception e) {
			log.info("无痕撤回时删除消息失败：消息ID=" + instanceUnit.getMessagesToDel() + e.getMessage());
			throw new FlowException("无痕撤回时删除消息失败：消息ID=" + instanceUnit.getMessagesToDel() + e.getMessage(), e);
		}
	}
	
	protected void withDrawMessage(InstanceUnit instanceUnit) throws Exception {
		List<String> msgIds = instanceUnit.getMessagesToDel();
		if(CollectionUtils.isNotEmpty(msgIds))  {
//			getService().getMsgService().deletePseudoAllObjectByIds(msgIds);
			
			//同步旧OA消息：删除待办
			log.info("撤回流程，同步旧OA消息：删除待办:" + msgIds);
			getService().getMsgService().deleteTodo(msgIds);
			
			//TODO zhangdaoqiang 记录操作日志
			try {
				service.getInstanceLogService().deleteOperateLogBySpecialAction(instanceUnit.getId(),
						null, null, null, null);
				
			} catch (Exception e) {
				throw new FlowException("记录流程日志异常：", e);
			}
		}
	}
	
	public boolean checkFlowIsApproved(String instanceId) {
		int finishedCount = service.getInstanceTaskService().queryFinishedTaskCount(instanceId);
		log.info("流程【" + instanceId + "】已完成任务数：" + finishedCount);
		return (finishedCount == 0) ? false : true;
	}

}
