package com.jzy.hio.flow.web;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.collections.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.flow.dto.tobedeleted.ApprovalList;
import com.jzy.hio.flow.dto.tobedeleted.ApprovalListDto;
import com.jzy.hio.flow.dto.tobedeleted.ApprovalSubmitDto;
import com.jzy.hio.flow.dto.tobedeleted.FlowApproveViewBean;
import com.jzy.hio.flow.dto.tobedeleted.FlowQueryBean;
import com.jzy.hio.flow.dto.tobedeleted.InstanceAcDto;
import com.jzy.hio.flow.dto.tobedeleted.InstanceDto;
import com.jzy.hio.flow.dto.tobedeleted.InstanceTransitionRecordDto;
import com.jzy.hio.flow.dto.tobedeleted.UserDto;
import com.jzy.hio.flow.entity.Instance;
import com.jzy.hio.flow.service.InstanceAccessibleService;
import com.jzy.hio.flow.service.InstanceService;
import com.jzy.tools.data.JacksonUtils;


/**
 * 流程实例控制层
 * @author admin
 *
 */
@RestController
@RequestMapping("/flow/instance")
@Api(tags = {"流程实例"},description = "instance")
public class InstanceController extends ResponseModel {

	private static Logger log = LoggerFactory.getLogger(InstanceController.class);

	@Autowired
	private InstanceService instanceService;
	@Autowired
	private InstanceAccessibleService instanceAccessibleService;

	/**
	 * 根据Id获取业务对象
	 * 
	 * @param id  业务对象主键
	 * 
	 * @return     业务对象
	 */
	@ApiOperation(value= "获取详情",notes="获取详情")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "id",value = "id",required = true,dataType = "String")})
	@RequestMapping(value="/get/{id}",method=RequestMethod.GET)
	public  MessageResult get(@PathVariable("id")  String id){

		try {

			Instance objectById = instanceService.getObjectById(id);

			return  getSuccessResultModel(objectById);
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel();
		}
	}


	/**
	 * 返回分页对象
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "分页查询",notes="分页查询")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "map",dataType = "Map",value = "limit query",required = true)})
	@RequestMapping(value="/page",method={RequestMethod.POST}, consumes="application/json")
	public  MessageResult page(@RequestBody Map<String,Object> map){
		try {

			Page page = instanceService.getPage(map);
			return  getSuccessResultModel(page);
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel();
		}
	}
	/**
	 * 返回符合条件的列表
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "条件列表查询",notes="条件列表查询")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "instance",dataType = "String",value = "condition query",required = true)})
	@RequestMapping(value="/queryList",method={RequestMethod.POST}, consumes="application/json")
	public  MessageResult queryList(@RequestBody  Instance instance){

		try {
			List<Instance> queryList = instanceService.queryList(instance);
			return  getSuccessResultModel(queryList);
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel();
		}
	}


	/**
	 * 返回符合条件的个人查询列表
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "条件列表查询",notes="条件列表查询")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "map",dataType = "String",value = "condition query",required = true)})
	@RequestMapping(value="/personalQueryList",method={RequestMethod.POST}, consumes="application/json")
	public  MessageResult personalQueryList(@RequestBody Map<String,Object> map){
		try {

			Page page = instanceService.personalQueryListByPageParam(map);
			//TODO 需要用户Id
			return  getSuccessResultModel(page);
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel();
		}

	}


	/**
	 * 保存实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "保存实体对象",notes="保存实体对象")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "t",value = "save",required = true,dataType = "String")})
	@RequestMapping(value="/save",method=RequestMethod.POST, consumes="application/json")
	public  MessageResult save(@RequestBody Instance t){

		try {

			int saveCount = instanceService.save(t);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.SAVESUCCESS.getMsg());
			successResultModel.setResult(saveCount);
			return successResultModel;
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.SAVEERROR.getMsg());
		}

	}

	/**
	 * 删除实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "删除实体对象",notes="删除实体对象")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "id",value = "id",required = true,dataType = "String")})
	@RequestMapping(value="/delete/{id}",method=RequestMethod.DELETE)
	public  MessageResult delete(@PathVariable("id")  String id){

		try {

			instanceService.deleteObjectById(id);
			return getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
		/*MessageResult result=new MessageResult();
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);

			String dubboResultInfo=instanceDtoServiceCustomer.deleteObjectById(userInfo, "{\"id\":\""+id+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				InstanceDto instanceDto=JacksonUtils.fromJson(resultInfo, InstanceDto.class);
				result.setResult(instanceDto);
				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.DELETEERROR.isResult());
				result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			////e.printStackTrace();
			log.error("调用delete方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.DELETEERROR.isResult());
			result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】");
		}

		return result;*/
	}


	/**
	 * 删除实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "批量删除实体对象",notes="批量删除实体对象")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "ids",value = "ids",required = true,dataType = "String")})
	@RequestMapping(value="/deleteBatch/{ids}",method=RequestMethod.DELETE)
	public  MessageResult deleteBatch(@PathVariable("ids")  String ids){

		try {

			int deleteCount = instanceService.deleteAllObjectByIds(Arrays.asList(ids.split(",")));
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deleteCount);
			return successResultModel;
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
		/*MessageResult result=new MessageResult();
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);

			String dubboResultInfo=instanceDtoServiceCustomer.deleteAllObjectByIds(userInfo, "{\"id\":\""+ids+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				InstanceDto instanceDto=JacksonUtils.fromJson(resultInfo, InstanceDto.class);
				result.setResult(instanceDto);
				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.DELETEERROR.isResult());
				result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			////e.printStackTrace();
			log.error("调用delete方法:  【参数"+ids+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.DELETEERROR.isResult());
			result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】");
		}

		return result;*/
	}

	/**
	 * 修改修改实体对象
	 * @param t
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@ApiOperation(value= "修改实体对象",notes="修改实体对象")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",dataType = "String",name = "id",value = "id",required = true),
		@ApiImplicitParam(paramType="body",dataType = "Map",name = "map",value = "map",required = true)})

	@RequestMapping(value="/update/{id}",method=RequestMethod.PUT,consumes="application/json")
	public  MessageResult update(@PathVariable("id")  String id,   @RequestBody Map<String,Object> map){
		try {

			Instance instance = instanceService.getObjectById(id);
			String json = JacksonUtils.toJson(instance);
			Map<String,Object> oldMap=JacksonUtils.fromJson(json, HashMap.class);
			oldMap.putAll(map);
			String updateJson= JacksonUtils.toJson(oldMap);
			Instance fromJson = JacksonUtils.fromJson(updateJson, Instance.class);
			int update = instanceService.update(fromJson);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.UPDATESUCCESS.getMsg());
			successResultModel.setResult(update);
			return successResultModel;
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.UPDATEERROR.getMsg());
		}
	}

	/**
	 * 伪删除实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "伪删除实体对象",notes="伪删除实体对象")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",dataType = "String",name = "id",value = "id",required = true)})
	@RequestMapping(value="/deletePseudo/{id}",method=RequestMethod.DELETE)
	public  MessageResult deletePseudo(@PathVariable("id")  String id){

		try {
			int deleteCount = instanceService.deletePseudoObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deleteCount);
			return successResultModel;
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
	}

	/**
	 * 伪删除实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "批量伪删除实体对象",notes="批量伪删除实体对象")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",dataType = "String",name = "ids",value = "ids",required = true)})
	@RequestMapping(value="/deletePseudoBatch/{ids}",method=RequestMethod.DELETE)
	public  MessageResult deletePseudoBatch(@PathVariable("ids")  String ids){

		try {
			int deleteCount = instanceService.deletePseudoAllObjectByIds(Arrays.asList(ids.split(",")));
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deleteCount);
			return successResultModel;
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
	}

	/**
	 * 流程审批页面数据查询
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= " 流程审批页面数据查询",notes=" 流程审批页面数据查询")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "params",dataType = "String",value = "condition query",required = true)})
	@RequestMapping(value="/queryApprovalList", method={RequestMethod.POST}, consumes="application/json")
	public  MessageResult queryApprovalList(@RequestBody Map<String,String> params){
		try {

			String instanceId = params.get("instanceId");
			String requestSource = params.get("requestSource");
			if(StringUtils.isEmpty(instanceId) || StringUtils.isEmpty(requestSource)) {

				return getErrorResultModel("参数为空！");
			}
			List<ApprovalList> queryApprovalList = instanceService.queryApprovalList(instanceId, requestSource, "0","0");
			return getSuccessResultModel(queryApprovalList);
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel();

		}
		/*		MessageResult result = new MessageResult();
		String instanceId = params.get("instanceId");
		String requestSource = params.get("requestSource");
		if(StringUtils.isEmpty(instanceId) || StringUtils.isEmpty(requestSource)) {
			result.setSuccess(false);
			result.setMsg("参数为空！");
			return result;
		}

		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			if(securityUserBeanInfo == null) {
				result.setSuccess(false);
				result.setMsg("非法用户请求！");
				return result;
			}

			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
			String dubboResultInfo = instanceDtoServiceCustomer.queryApprovalList(userInfo, instanceId, requestSource, "0");

			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			result.setSuccess(dubboServiceResultInfo.isSucess());
			result.setResult(JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), List.class, ApprovalList.class));
			result.setMsg(dubboServiceResultInfo.getMsg());

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			log.error("调用queryApprovalData方法:instanceId=" + instanceId, e);
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;*/

	}

	/**
	 * 获取节点审批类型
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= " 获取节点审批类型",notes=" 获取节点审批类型")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "params",dataType = "String",value = "condition query",required = true)})
	@RequestMapping(value="/queryApprovalTypeId", method={RequestMethod.POST}, consumes="application/json")
	public  MessageResult queryApprovalTypeId(@RequestBody Map<String,Object> params){
		try {

			String queryApprovalTypeId = instanceService.queryApprovalTypeId(params);
			return getSuccessResultModel(queryApprovalTypeId);
		} catch (Exception e) {                
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel();
		}
		/*
		try {
			MessageResult result = new MessageResult();
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			if(securityUserBeanInfo == null) {
				result.setSuccess(false);
				result.setMsg("非法用户请求！");
				return result;
			}

			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
			String dubboResultInfo = instanceDtoServiceCustomer.queryApprovalTypeId(userInfo, JacksonUtils.toJson(params));

			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			result.setSuccess(dubboServiceResultInfo.isSucess());
			result.setResult(dubboServiceResultInfo.getResult());
			result.setMsg(dubboServiceResultInfo.getMsg());

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			log.error("调用queryApprovalTypeId方法:params=" +  JacksonUtils.toJson(params), e);
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;*/
	}

	/**
	 * 管理员调整环节页面数据查询
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "管理员调整环节页面数据查询",notes="管理员调整环节页面数据查询")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "params",dataType = "String",value = "condition query",required = true)})
	@RequestMapping(value="/queryApprovalListAdmin", method={RequestMethod.POST}, consumes="application/json")
	public  MessageResult queryApprovalListAdmin(@RequestBody Map<String,String> params){

		String instanceId = params.get("instanceId");
		String requestSource = params.get("requestSource");
		if(StringUtils.isEmpty(instanceId) || StringUtils.isEmpty(requestSource)) {

			return getErrorResultModel("参数不能为空！");
		}
		try {
			List<ApprovalList> queryApprovalList = instanceService.queryApprovalList(instanceId, requestSource, "1","0");
			return getSuccessResultModel(queryApprovalList);
		} catch (Exception e) {                
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel();
		}
		/*	MessageResult result = new MessageResult();
		String instanceId = params.get("instanceId");
		String requestSource = params.get("requestSource");
		if(StringUtils.isEmpty(instanceId) || StringUtils.isEmpty(requestSource)) {
			result.setSuccess(false);
			result.setMsg("参数为空！");
			return result;
		}

		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			if(securityUserBeanInfo == null) {
				result.setSuccess(false);
				result.setMsg("非法用户请求！");
				return result;
			}

			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
			String dubboResultInfo = instanceDtoServiceCustomer.queryApprovalList(userInfo, instanceId, requestSource, "1");

			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			result.setSuccess(dubboServiceResultInfo.isSucess());
			result.setResult(JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), List.class, ApprovalList.class));
			result.setMsg(dubboServiceResultInfo.getMsg());

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			log.error("调用queryApprovalData方法:instanceId=" + instanceId, e);
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;*/
	}

	/**
	 * 业务系统查询流程审批记录，flow_view页面用
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "业务系统查询流程审批记录，flow_view页面用",notes="业务系统查询流程审批记录，flow_view页面用")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "params",dataType = "String",value = "condition query",required = true)})
	@RequestMapping(value="/queryApprovalListExternal", method={RequestMethod.POST}, consumes="application/json")
	public  MessageResult queryApprovalListExternal(@RequestBody Map<String,String> params){
		try {

			String flCode = params.get("flCode");
			String businessId = params.get("businessId");
			String appId = params.get("appId");
			String userId = params.get("userId");
			if(StringUtils.isEmpty(businessId)) {
				return  getErrorResultModel("businessId参数不能为空！");
			}
			ApprovalListDto queryApprovalListExternal = instanceService.queryApprovalListExternal(flCode, businessId, appId,userId);
			return getSuccessResultModel(queryApprovalListExternal);
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel();
		}
		/*
		MessageResult result = new MessageResult();

		SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		if(securityUserBeanInfo == null) {
			result.setSuccess(false);
			result.setMsg("非法用户请求！");
			return result;
		}

		String flCode = params.get("flCode");
		String businessId = params.get("businessId");
		String appId = params.get("appId");
		String userId = params.get("userId");
		if(StringUtils.isEmpty(businessId)) {
			result.setSuccess(false);
			result.setMsg("businessId参数为空！");
			return result;
		}

		if(StringUtils.isEmpty(userId)) {
			userId = securityUserBeanInfo.getSecurityUserDto().getId();
		}

		try {
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
			String dubboResultInfo = instanceDtoServiceCustomer.queryApprovalListExternal(userInfo, flCode, businessId, appId, userId);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			result.setSuccess(dubboServiceResultInfo.isSucess());
			result.setResult(JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), ApprovalListDto.class));
			result.setMsg(dubboServiceResultInfo.getMsg());

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			log.error("调用queryApprovalListExternal方法错误", e);
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;*/
	}

	/**
	 * 查询流程流转记录
	 * 现在查询的是审批记录中的完成条目） TODO zhangdaoqiang
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "审批记录中的完成条目",notes="审批记录中的完成条目")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "params",dataType = "String",value = "condition query",required = true)})
	@RequestMapping(value="/queryTransferList", method={RequestMethod.POST}, consumes="application/json")
	public  MessageResult queryTransferList(@RequestBody Map<String,String> params){

		try {
			String instanceId = params.get("instanceId");
			if(StringUtils.isEmpty(instanceId)) {

				return getErrorResultModel("instanceId 参数不能为空！");
			}
			List<InstanceTransitionRecordDto> queryTransferList = instanceService.queryTransferList(instanceId);
			return getSuccessResultModel(queryTransferList);
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel();
		}


		/*	MessageResult result = new MessageResult();
		String instanceId = params.get("instanceId");
		String requestSource = params.get("requestSource");
		if(StringUtils.isEmpty(instanceId)) {
			result.setSuccess(false);
			result.setMsg("参数为空！");
			return result;
		}

		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			if(securityUserBeanInfo == null) {
				result.setSuccess(false);
				result.setMsg("非法用户请求！");
				return result;
			}
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);

			String dubboResultInfo = instanceDtoServiceCustomer.queryTransferList(userInfo, instanceId, requestSource);

			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			result.setSuccess(dubboServiceResultInfo.isSucess());
			result.setResult(JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), List.class, InstanceTransitionRecordDto.class));
			result.setMsg(dubboServiceResultInfo.getMsg());

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			log.error("调用queryApprovalData方法:instanceId=" + instanceId, e);
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;*/
	}

	/**
	 * 查询下一步
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "查询下一步",notes="查询下一步")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "params",dataType = "String",value = "condition query",required = true)})
	@RequestMapping(value="/queryNext", method={RequestMethod.POST}, consumes="application/json")
	public  MessageResult queryNext(@RequestBody Map<String,String> params){

		try {
			String instanceId = params.get("instanceId");
			String taskId = params.get("taskId");
			if(StringUtils.isEmpty(instanceId) || StringUtils.isEmpty(taskId)) {
				return getErrorResultModel("参数不能为空！");
			}
			List<String> queryNext = instanceService.queryNext(instanceId, taskId);
			return getSuccessResultModel(queryNext);
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel();
		}
		/*	

		MessageResult result = new MessageResult();
		String instanceId = params.get("instanceId");
		String taskId = params.get("taskId");
		if(StringUtils.isEmpty(instanceId) || StringUtils.isEmpty(taskId)) {
			result.setSuccess(false);
			result.setMsg("参数为空！");
			return result;
		}

		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			if(securityUserBeanInfo == null) {
				result.setSuccess(false);
				result.setMsg("非法用户请求！");
				return result;
			}
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);

			String dubboResultInfo = instanceDtoServiceCustomer.queryNext(userInfo, instanceId, taskId);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			result.setSuccess(dubboServiceResultInfo.isSucess());
			result.setResult(JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), List.class, String.class));
			result.setMsg(dubboServiceResultInfo.getMsg());

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			log.error("调用queryApprovalData方法:instanceId=" + instanceId, e);
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;*/
	}	

	/**
	 * 查询已审批人
	 * 
	 * @param params
	 * @return
	 */
	@RequestMapping(value="/queryApproverDone", method={RequestMethod.POST}, consumes="application/json")
	public  MessageResult queryApproverBeReturn(@RequestBody Map<String,String> params){
		try {
			String instanceId = params.get("instanceId");
			if(StringUtils.isEmpty(instanceId) ) {
				return getErrorResultModel("参数不能为空！");
			}
			List<Map<String, String>> queryApproverBeReturn = instanceService.queryApproverBeReturn(instanceId);
			return getSuccessResultModel(queryApproverBeReturn);
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel();
		} 
		/*

		MessageResult result = new MessageResult();
		String instanceId = params.get("instanceId");
		String taskId = params.get("taskId");
		if(StringUtils.isEmpty(instanceId)) {
			result.setSuccess(false);
			result.setMsg("参数为空！");
			return result;
		}

		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			if(securityUserBeanInfo == null) {
				result.setSuccess(false);
				result.setMsg("非法用户请求！");
				return result;
			}
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);

			String dubboResultInfo = instanceDtoServiceCustomer.queryApproverBeReturn(userInfo, instanceId);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			result.setSuccess(dubboServiceResultInfo.isSucess());
			result.setResult(JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), List.class, Map.class));
			result.setMsg(dubboServiceResultInfo.getMsg());

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			log.error("调用queryApprovalData方法:instanceId=" + instanceId, e);
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;*/
	}	

	/**
	 * 流程审批处理
	 * 
	 * @param paramater
	 * @return
	 */
	@RequestMapping(value="/approval", method = RequestMethod.POST, consumes="application/json")
	public  MessageResult approval(@RequestBody ApprovalSubmitDto approvalDto, HttpServletRequest request){

		try {
			boolean approval = instanceService.approval(approvalDto);
			return getSuccessResultModel(approval);
		} catch (Exception e) {                
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel();
		} 

		/*		MessageResult result=new MessageResult();
		String approvalParams= JacksonUtils.toJson(approvalDto);
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();

			//保存baseUrl add by zhangdaoqiag
			if(StringUtils.isEmpty(securityUserBeanInfo.getBaseUrl())) {
				String baseUrl = request.getScheme() + "://" + request.getServerName() + ":"
						+ request.getServerPort() + request.getContextPath();
				securityUserBeanInfo.setBaseUrl(baseUrl);
			}

			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
			String dubboResultInfo = instanceDtoServiceCustomer.approval(userInfo, approvalParams);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			result.setSuccess(dubboServiceResultInfo.isSucess());
			result.setMsg(dubboServiceResultInfo.getMsg());

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			log.error("调用queryList方法:  【参数" + approvalParams+"】======" + "【" + e.getMessage()+"】");
			result.setSuccess(false);
			result.setMsg(e.getMessage());
		}
		return result;*/
	}

	/**
	 * 发起人撤回流程
	 * 
	 * @param paramater
	 * @return
	 */
	@RequestMapping(value="/withDrawFlow/{instanceId}", method = RequestMethod.GET, consumes="application/json")
	public  MessageResult withDrawFlow(@PathVariable("instanceId")  String instanceId){

		try {
			String doWithDrawFlow = instanceService.doWithDrawFlow(instanceId);
			return getSuccessResultModel(doWithDrawFlow);
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel("系统异常");
		} 
		/*MessageResult result=new MessageResult();
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
			String dubboResultInfo = instanceDtoServiceCustomer.withDrawFlow(userInfo, instanceId);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			result.setSuccess(dubboServiceResultInfo.isSucess());
			result.setResult(dubboServiceResultInfo.getResult());
			result.setMsg(dubboServiceResultInfo.getMsg());

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			log.error("调用withDrawFlow方法:  【参数" + instanceId+"】======" + "【" + e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【"+e.getMessage() + "】");
		}
		return result;*/
	}

	/**
	 * 审批人撤回任务
	 * 
	 * @param paramater
	 * @return
	 */
	@RequestMapping(value="/withDrawTask", method = RequestMethod.GET, consumes="application/json")
	public  MessageResult withDrawTask(String instanceId, String taskId){

		try {
			String doWithDrawTask = instanceService.doWithDrawTask(instanceId, taskId);
			return getSuccessResultModel(doWithDrawTask);
		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
		e.printStackTrace();
		return getErrorResultModel("系统异常");
		} 
		/*MessageResult result=new MessageResult();
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
			String dubboResultInfo = instanceDtoServiceCustomer.withDrawTask(userInfo, instanceId, taskId);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			result.setSuccess(dubboServiceResultInfo.isSucess());
			result.setResult(dubboServiceResultInfo.getResult());
			result.setMsg(dubboServiceResultInfo.getMsg());

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			log.error("调用isApproved方法:  【参数" + instanceId+"】======" + "【" + e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【"+e.getMessage() + "】");
		}
		return result;*/
	}

	/**
	 * 审批人撤回任务
	 * 
	 * @param paramater
	 * @return
	 */
	@RequestMapping(value="/getRelateInstances", method = RequestMethod.GET, consumes="application/json")
	public  MessageResult getRelateInstances(String instanceId){

		try {
			List<InstanceDto> relateInstances = instanceService.getRelateInstances(instanceId);
			return getSuccessResultModel(relateInstances);
		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
		e.printStackTrace();
		return getErrorResultModel("系统异常");
		} 
		/*MessageResult result=new MessageResult();
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
			String dubboResultInfo = instanceDtoServiceCustomer.getRelateInstances(userInfo, instanceId);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			result.setSuccess(dubboServiceResultInfo.isSucess());
			List<InstanceDto> instances = JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), List.class, InstanceDto.class);
			result.setResult(instances);
			result.setMsg(dubboServiceResultInfo.getMsg());

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			log.error("调用getRelateInstances方法:  【参数" + instanceId+"】======" + "【" + e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【"+e.getMessage() + "】");
		}
		return result;*/
	}

	/**
	 * 管理员功能：审结流程
	 * 
	 * @param paramater
	 * @return
	 */
	@RequestMapping(value="/finishApproval/{instanceId}", method = RequestMethod.POST, consumes="application/json")
	public  MessageResult finishApproval(@PathVariable("instanceId")  String instanceId){

		try {
			boolean doFinishApproval = instanceService.doFinishApproval(instanceId);
			return getSuccessResultModel(doFinishApproval);
		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
		e.printStackTrace();
		return getErrorResultModel();
		} 
		/*	MessageResult result=new MessageResult();
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
			String dubboResultInfo = instanceDtoServiceCustomer.finishApproval(userInfo, instanceId);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			result.setSuccess(dubboServiceResultInfo.isSucess());
			result.setResult(dubboServiceResultInfo.getResult());
			result.setMsg(dubboServiceResultInfo.getMsg());

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			log.error("调用finishApproval方法:  【参数" + instanceId+"】======" + "【" + e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【"+e.getMessage() + "】");
		}
		return result;*/
	}

	/**
	 * 管理员功能：跳过当前审批人
	 * 
	 * @param paramater
	 * @return
	 */
	@RequestMapping(value="/skipCurrentApprover/{instanceId}", method = RequestMethod.POST, consumes="application/json")
	public  MessageResult skipCurrentApprover(@PathVariable("instanceId")  String instanceId){

		try {
			boolean doSkipCurrentApprover = instanceService.doSkipCurrentApprover(instanceId);
			return getSuccessResultModel(doSkipCurrentApprover);
		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
		e.printStackTrace();
		return getErrorResultModel();
		} 
		/*	MessageResult result=new MessageResult();
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
			String dubboResultInfo = instanceDtoServiceCustomer.skipCurrentApprover(userInfo, instanceId);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			result.setSuccess(dubboServiceResultInfo.isSucess());
			result.setResult(dubboServiceResultInfo.getResult());
			result.setMsg(dubboServiceResultInfo.getMsg());

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			log.error("调用skipCurrentApprover方法:  【参数" + instanceId+"】======" + "【" + e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【"+e.getMessage() + "】");
		}
		return result;*/
	}

	/**
	 * 管理员功能：挂起的流程放行
	 * 
	 * @param paramater
	 * @return
	 */
	@RequestMapping(value="/letItGo/{instanceId}", method = RequestMethod.POST, consumes="application/json")
	public  MessageResult letItGo(@PathVariable("instanceId")  String instanceId){

		try {
			boolean doFlowRestart = instanceService.doFlowRestart(instanceId);
			return getSuccessResultModel(doFlowRestart);
		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
		e.printStackTrace();
		return getErrorResultModel();
		} 
		/*		MessageResult result=new MessageResult();
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
			String dubboResultInfo = instanceDtoServiceCustomer.flowRestart(userInfo, instanceId);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			result.setSuccess(dubboServiceResultInfo.isSucess());
			result.setResult(dubboServiceResultInfo.getResult());
			result.setMsg(dubboServiceResultInfo.getMsg());

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			log.error("调用letItGo方法:  【参数" + instanceId+"】======" + "【" + e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【"+e.getMessage() + "】");
		}
		return result;*/
	}

	/**
	 * 管理员功能：流程作废
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "管理员功能：流程作废",notes="管理员功能：流程作废")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "instanceId",dataType = "String",value = "condition query",required = true)})
	@RequestMapping(value="/cancelInstance/{instanceId}", method = RequestMethod.POST, consumes="application/json")
	public  MessageResult cancelInstance(@PathVariable("instanceId")  String instanceId){

		try {
			boolean doCancelInstance = instanceService.doCancelInstance(instanceId);
			return getSuccessResultModel(doCancelInstance);
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel();
		} 
		/*	MessageResult result=new MessageResult();
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
			String dubboResultInfo = instanceDtoServiceCustomer.cancelInstance(userInfo, instanceId);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			result.setSuccess(dubboServiceResultInfo.isSucess());
			result.setResult(dubboServiceResultInfo.getResult());
			result.setMsg(dubboServiceResultInfo.getMsg());

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			log.error("调用cancelInstance方法:  【参数" + instanceId+"】======" + "【" + e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【"+e.getMessage() + "】");
		}
		return result;*/
	}

	/**
	 * 管理员功能：传阅
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "管理员功能：传阅",notes="管理员功能：传阅")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "instanceId",dataType = "String",value = "instanceId",required = true),
		@ApiImplicitParam(paramType="body",name = "users",dataType = "String",value = "users",required = true)})
	@RequestMapping(value="/passAndRead/{instanceId}", method = RequestMethod.POST, consumes="application/json")
	public  MessageResult passAndRead(@PathVariable("instanceId")  String instanceId, 
			@RequestBody List<UserDto> users, HttpServletRequest request){

		try {
			boolean doPassAndRead = instanceService.doPassAndRead(instanceId, users);
			return getSuccessResultModel(doPassAndRead);
		} catch (Exception e) {                
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel();
		} 
		/*MessageResult result=new MessageResult();
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userJson = JacksonUtils.toJson(users);

			//保存baseUrl add by zhangdaoqiag
			if(StringUtils.isEmpty(securityUserBeanInfo.getBaseUrl())) {
				String baseUrl = request.getScheme() + "://" + request.getServerName() + ":"
						+ request.getServerPort() + request.getContextPath();
				securityUserBeanInfo.setBaseUrl(baseUrl);
			}
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);

			String dubboResultInfo = instanceDtoServiceCustomer.passAndRead(userInfo, instanceId, userJson);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			result.setSuccess(dubboServiceResultInfo.isSucess());
			result.setResult(dubboServiceResultInfo.getResult());
			result.setMsg(dubboServiceResultInfo.getMsg());

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			log.error("调用passAndRead方法:  【参数" + instanceId+"】======" + "【" + e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【"+e.getMessage() + "】");
		}
		return result;*/
	}

	/**
	 * 发起人功能：催办
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "发起人功能：催办",notes="发起人功能：催办")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "instanceId",dataType = "String",value = "instanceId",required = true)})
	@RequestMapping(value="/remind/{instanceId}", method = RequestMethod.POST, consumes="application/json")
	public  MessageResult remind(@PathVariable("instanceId")  String instanceId){

		try {
			boolean doRemind = instanceService.doRemind(instanceId);
			return getSuccessResultModel(doRemind);
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel();
		} 
		/*	MessageResult result=new MessageResult();
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
			String dubboResultInfo = instanceDtoServiceCustomer.remind(userInfo, instanceId);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			result.setSuccess(dubboServiceResultInfo.isSucess());
			result.setResult(dubboServiceResultInfo.getResult());
			result.setMsg(dubboServiceResultInfo.getMsg());

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			log.error("调用remind方法:  【参数" + instanceId+"】======" + "【" + e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【"+e.getMessage() + "】");
		}
		return result;*/
	}

	/**
	 * 流程收藏
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "流程收藏",notes="流程收藏")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "instanceId",value = "instanceId",dataType = "String",required = true)})
	@RequestMapping(value="/collection/{instanceId}", method = RequestMethod.POST, consumes="application/json")
	public  MessageResult collection(@PathVariable("instanceId")  String instanceId){


		try {
			boolean doRemind = instanceService.collection(instanceId);
			return getSuccessResultModel(doRemind);
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel();
		} 
		/*MessageResult result=new MessageResult();
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
			String dubboResultInfo = instanceDtoServiceCustomer.collection(userInfo, instanceId);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			result.setSuccess(dubboServiceResultInfo.isSucess());
			result.setResult(dubboServiceResultInfo.getResult());
			result.setMsg(dubboServiceResultInfo.getMsg());

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			log.error("调用collection方法:  【参数" + instanceId+"】======" + "【" + e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【"+e.getMessage() + "】");
		}
		return result;*/
	}

	/**
	 * 管理员功能：修改可阅人
	 * 
	 * @param type:add/delete/reset
	 * @return
	 */
	@ApiOperation(value= "管理员功能：修改可阅人",notes="管理员功能：修改可阅人")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "type",value = "type",dataType = "String",required = true),
		@ApiImplicitParam(paramType="path",name = "instanceId",value = "instanceId",dataType = "String",required = true),
		@ApiImplicitParam(paramType="body",name = "users",value = "users",dataType = "String",required = true)})
	@RequestMapping(value="/updateReader/{type}/{instanceId}", method = RequestMethod.POST, consumes="application/json")
	public  MessageResult updateReader(@PathVariable("type")  String type,
			@PathVariable("instanceId")  String instanceId, @RequestBody List<UserDto> users){

		try {
			boolean doUpdateReader = instanceAccessibleService.doUpdateReader(type, instanceId, users);
			return getSuccessResultModel(doUpdateReader);
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel();
		} 
		/*MessageResult result=new MessageResult();
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
			String userJson = JacksonUtils.toJson(users);
			String dubboResultInfo = instanceDtoServiceCustomer.updateReader(userInfo, type, instanceId, userJson);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			result.setSuccess(dubboServiceResultInfo.isSucess());
			result.setResult(dubboServiceResultInfo.getResult());
			result.setMsg(dubboServiceResultInfo.getMsg());

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			log.error("调用updateReader方法:  【参数" + instanceId+"】======" + "【" + e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【"+e.getMessage() + "】");
		}
		return result;*/
	}

	/**
	 * 管理员功能：调整环节
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "管理员功能：调整环节",notes="管理员功能：调整环节")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "approvalList",value = "approvalList",dataType = "String",required = true)})
	@RequestMapping(value="/adjustAc", method = RequestMethod.POST, consumes="application/json")
	public  MessageResult adjustAc(@RequestBody List<ApprovalList> approvalList){

		try {

			boolean doAdjustAc = instanceService.doAdjustAc(approvalList);
			return getSuccessResultModel(doAdjustAc);
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel();
		} 
		/*
		MessageResult result = new MessageResult();
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
			String dubboResultInfo = instanceDtoServiceCustomer.adjustAc(userInfo, JacksonUtils.toJson(approvalList));
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			result.setSuccess(dubboServiceResultInfo.isSucess());
			result.setResult(dubboServiceResultInfo.getResult());
			result.setMsg(dubboServiceResultInfo.getMsg());

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			log.error("调用adjustAc方法:【" + e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【"+e.getMessage() + "】");
		}
		return result;*/
	}
	/**
	 * 管理员功能：调整环节 -> 构造环节
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "管理员功能：调整环节 -> 构造环节",notes="管理员功能：调整环节 -> 构造环节")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "instanceAcDto",value = "instanceAcDto",dataType = "String",required = true)})
	@RequestMapping(value="/createAc", method=  RequestMethod.POST, consumes="application/json")
	public  MessageResult createAc(@RequestBody InstanceAcDto instanceAcDto){

		try {
			List<ApprovalList> doCreateAc = instanceService.doCreateAc(instanceAcDto);
			return getSuccessResultModel(doCreateAc);
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel();
		} 
		/*MessageResult result = new MessageResult();
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
			String dubboResultInfo = instanceDtoServiceCustomer.createAc(userInfo, JacksonUtils.toJson(instanceAcDto));
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);

			if(dubboServiceResultInfo.isSucess()){
				result.setSuccess(dubboServiceResultInfo.isSucess());
				result.setResult(dubboServiceResultInfo.getResult());
				result.setMsg(dubboServiceResultInfo.getMsg());
			}else{
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			log.error("调用createAc方法:【" + e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【"+e.getMessage() + "】");
		}
		return result;*/
	}

	/**
	 * 管理员功能：修改审批人
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "管理员功能：修改审批人",notes="管理员功能：修改审批人")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "approvalList",value = "approvalList",dataType = "String",required = true)})
	@RequestMapping(value="/updateApprover", method = RequestMethod.POST, consumes="application/json")
	public  MessageResult updateApprover(@RequestBody List<ApprovalList> approvalList){

		try {
			if(CollectionUtils.isEmpty(approvalList)) {

				return getErrorResultModel("请求参数为空！");
			}
			boolean doUpdateApprover = instanceService.doUpdateApprover(approvalList);
			return getSuccessResultModel(doUpdateApprover);
		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
		e.printStackTrace();
		return getErrorResultModel();
		} 
		/*
		MessageResult result = new MessageResult();

		if(CollectionUtils.isEmpty(approvalList)) {
			result.setSuccess(false);
			result.setMsg("请求参数为空！");
			return result;
		}

		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
			String dubboResultInfo = instanceDtoServiceCustomer.updateApprover(userInfo, JacksonUtils.toJson(approvalList));
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			result.setSuccess(dubboServiceResultInfo.isSucess());
			result.setResult(dubboServiceResultInfo.getResult());
			result.setMsg(dubboServiceResultInfo.getMsg());

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			log.error("调用updateApprover方法:【" + e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【"+e.getMessage() + "】");
		}
		return result;*/
	}

	/**
	 * 管理员功能：修改审批意见
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "管理员功能：修改审批意见",notes="管理员功能：修改审批意见")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "approvalList",value = "approvalList",dataType = "String",required = true)})
	@RequestMapping(value="/updateApprovalComments", method = RequestMethod.POST, consumes="application/json")
	public  MessageResult updateApprovalComments(@RequestBody List<ApprovalList> approvalList){

		try {

			if(CollectionUtils.isEmpty(approvalList)) {

				return getErrorResultModel("请求参数为空！");
			}
			boolean doUpdateApprovalComments = instanceService.doUpdateApprovalComments(approvalList);
			return getSuccessResultModel(doUpdateApprovalComments);
		} catch (Exception e) {               
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel();
		} 
		/*
		MessageResult result = new MessageResult();
		System.out.println("\n\n updateApprovalComments approvalList.size="+approvalList.size());
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
			String paramDataJson = JacksonUtils.toJson(approvalList);
			System.out.println("updateApprovalComments paramDataJson="+paramDataJson);

			String dubboResultInfo = instanceDtoServiceCustomer.updateApprovalComments(userInfo, paramDataJson);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			result.setSuccess(dubboServiceResultInfo.isSucess());
			result.setResult(dubboServiceResultInfo.getResult());
			result.setMsg(dubboServiceResultInfo.getMsg());

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			log.error("调用updateApprovalComments方法:【" + e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【"+e.getMessage() + "】");
		}
		return result;*/
	}

	/**
	 * 根据提交的实例化参数, 实现模板和环节参与人的相关数据的拷贝和保存
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "根据提交的实例化参数, 实现模板和环节参与人的相关数据的拷贝和保存",notes="根据提交的实例化参数, 实现模板和环节参与人的相关数据的拷贝和保存")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "t",value = "save",dataType = "String",required = true)})
	@RequestMapping(value="/saveAllInstanceData",method=RequestMethod.POST, consumes="application/json")
	public  MessageResult saveAllInstanceData(@RequestBody InstanceDto t){

		try {
			String saveAllInstanceData = instanceService.saveAllInstanceData(t);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.SAVESUCCESS.getMsg());
			successResultModel.setResult(saveAllInstanceData);
			return successResultModel;
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.SAVEERROR.getMsg());
		}
		/*MessageResult result=new MessageResult();
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);			
			String saveJson= JacksonUtils.toJson(t);
			log.error("===1、流程发起，保存实例数据");
			log.error("===1.1、保存数据开始：实例数据=" + saveJson + ", 当前用户=" + userInfo);
			HttpServletRequest  request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
			String hostHeader = request.getScheme()+"://"+request.getServerName()+":"+request.getServerPort()+request.getContextPath();
			System.out.println("----------------hostHeader hostHeader="+hostHeader);
			String dubboResultInfo=instanceDtoServiceCustomer.saveAllInstanceData(userInfo, saveJson, hostHeader);
			System.out.println("----------------saveAllInstanceData   dubboResultInfo="+dubboResultInfo);
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				Map<String,Object> res=JacksonUtils.fromJson(resultInfo, HashMap.class);
				result.setResult(res);
				result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
				result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.SAVEERROR.isResult());
				result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			try {
				////e.printStackTrace();
				ObjectMapper mapper = new ObjectMapper();
				String  paramJson = mapper.writeValueAsString(t);
				log.error("调用save方法:  【参数"+paramJson+"】======"+"【"+e.getMessage()+"】");
				result.setSuccess(MessageInfo.SAVEERROR.isResult());
				result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+e.getMessage()+"】");
			} catch (JsonProcessingException e1) {
				// TODO Auto-generated catch block
				////e1.printStackTrace();
			}

		}
		return result;*/
	}

	/**
	 * 根据审批人查询对应的信息信息
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "根据审批人查询对应的信息信息",notes="根据审批人查询对应的信息信息")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "map",value = "map",dataType = "String",required = true)})
	@RequestMapping(value="/queryListByApprover",method={RequestMethod.POST}, consumes="application/json")
	public  MessageResult queryListByApprover(@RequestBody Map<String,Object> map){

		try {
			Page page = instanceService.queryListByApprover(map);
			return getSuccessResultModel(page);
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.SAVEERROR.getMsg());
		}
		/*MessageResult result=new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);

			String dubboResultInfo=instanceDtoServiceCustomer.queryListByApprover(userInfo, paramaterJson);
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				//List<InstanceDto> list=JacksonUtils.fromJson(resultInfo, ArrayList.class,InstanceDto.class);
				PageBeanInfo pageInfo=JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
				result.setResult(pageInfo);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			////e.printStackTrace();
			log.error("调用queryList方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;*/
	}

	/**
	 * 根据审批人查询对应的信息信息
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= " 根据审批人查询对应的信息信息",notes=" 根据审批人查询对应的信息信息")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "map",value = "map",dataType = "String",required = true)})
	@RequestMapping(value="/queryInstanceBy",method={RequestMethod.POST}, consumes="application/json")
	public  MessageResult queryInstanceBy(@RequestBody Map<String, Object> map){

		try {
			Page queryListByApproverParam = instanceService.queryInstanceByPageParam(map);
			return getSuccessResultModel(queryListByApproverParam);
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.SAVEERROR.getMsg());
		}
		/*	MessageResult result=new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
			if(securityUserBeanInfo!=null && securityUserBeanInfo.getSecurityUserDto()!=null){
				String userId = securityUserBeanInfo.getSecurityUserDto().getId();
				map.put("userId", userId);
				paramaterJson = JacksonUtils.toJson(map);
			}else{
				System.out.println("\n queryInstanceBy >>> userBeanInfo==null 或 userBeanInfo.getSecurityUserDto()==null");
			}

			String dubboResultInfo=instanceDtoServiceCustomer.queryInstanceBy(userInfo, paramaterJson);
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				//List<InstanceDto> list=JacksonUtils.fromJson(resultInfo, ArrayList.class,InstanceDto.class);
				PageBeanInfo pageInfo=JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
				result.setResult(pageInfo);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}

		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			////e.printStackTrace();
			log.error("调用queryList方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;*/
	}

	@ApiOperation(value= "流程查看",notes=" 流程查看")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "params",value = "params",dataType = "String",required = true)})
	@RequestMapping(value="/flowView",method=RequestMethod.POST, consumes="application/json")
	public  MessageResult flowView(@RequestBody Map<String, String> params,HttpServletRequest req){

		try {
			String instanceId = params.get("instanceId");
			String sourceInstanceId = params.get("sourceInstanceId");
			String attachmentUrlId = params.get("attachmentUrl_id");
			Map<String,Object> paramMap = new HashMap<String,Object>();
			paramMap.put("instanceId",instanceId);
			paramMap.put("sourceInstanceId",sourceInstanceId);
			paramMap.put("attachmentUrl_id",attachmentUrlId);
			String userInfo = null;
			Boolean validateInstanceDataAuth = instanceService.validateInstanceDataAuth(paramMap, userInfo);
			if(!validateInstanceDataAuth){
				MessageResult errorResultModel = getErrorResultModel("没有流程查看权限！");
				errorResultModel.setCode("NO_AUTH");
				return errorResultModel;
			}
			String json = JacksonUtils.toJson(params);
			FlowQueryBean fromJson = JacksonUtils.fromJson(json, FlowQueryBean.class);
			FlowApproveViewBean flowView = instanceService.flowView(fromJson);
			Map<String,Object> resultMap = JacksonUtils.fromJson(JacksonUtils.toJson(flowView), Map.class);
			resultMap.put("currentSessionId",req.getSession().getId());

			return getSuccessResultModel(resultMap);
		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
		e.printStackTrace();
		return getErrorResultModel(MessageInfo.SAVEERROR.getMsg());
		}
		/*MessageResult result = new MessageResult();
		SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		if(securityUserBeanInfo == null) {
			result.setSuccess(false);
			result.setCode("relogin");
			result.setMsg("请重新登陆！");
			return result;
		}

		//验证流程查看权限
		String instanceId = params.get("instanceId");
		String sourceInstanceId = params.get("sourceInstanceId");
		String attachmentUrlId = params.get("attachmentUrl_id");
		Map<String,Object> paramMap = new HashMap<String,Object>();
		paramMap.put("instanceId",instanceId);
		paramMap.put("sourceInstanceId",sourceInstanceId);
		paramMap.put("attachmentUrl_id",attachmentUrlId);
		String dubboResultInfo1=instanceDtoServiceCustomer.validateInstanceDataAuth(JacksonUtils.toJson(securityUserBeanInfo), JacksonUtils.toJson(paramMap));
		DubboServiceResultInfo dubboServiceResultInfo1= JacksonUtils.fromJson(dubboResultInfo1, DubboServiceResultInfo.class);
		if(dubboServiceResultInfo1.isSucess()){
			String resultInfo= dubboServiceResultInfo1.getResult();
			Boolean instanceAccess = JacksonUtils.fromJson(resultInfo, Boolean.class);
			if(!instanceAccess){
				result.setSuccess(false);
				result.setCode("NO_AUTH");
				result.setMsg("没有流程查看权限！");
				return result;
			}
		}



		String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
		String dubboResultInfo = instanceDtoServiceCustomer.flowView(userInfo, JacksonUtils.toJson(params));

		DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		result.setSuccess(dubboServiceResultInfo.isSucess());
		Map<String,Object> resultMap = JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), Map.class);
		resultMap.put("currentSessionId",req.getSession().getId());
		result.setResult(resultMap);
		result.setMsg(dubboServiceResultInfo.getMsg());
		return result;*/
	}
	@ApiOperation(value= "认证实例数据",notes="认证校验实例数据")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "instanceId",value = "instanceId",dataType = "String",required = true),
		@ApiImplicitParam(paramType="query",name = "sourceInstanceId",value = "sourceInstanceId",dataType = "String",required = false)})
	@RequestMapping(value="/validateInstanceDataAuth/{instanceId}",method=RequestMethod.GET)
	public  MessageResult validateInstanceDataAuth(@PathVariable("instanceId")  String instanceId, @RequestParam(value = "sourceInstanceId",required = false) String sourceInstanceId){
		try {
			Map<String,Object> paramMap = new HashMap<String,Object>();
			paramMap.put("instanceId",instanceId);
			paramMap.put("sourceInstanceId",sourceInstanceId);
			Boolean validateInstanceDataAuth = instanceService.validateInstanceDataAuth(paramMap, null);
			return getSuccessResultModel(validateInstanceDataAuth);
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel();
		}
		/*	MessageResult result=new MessageResult();
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);

			Map<String,Object> paramMap = new HashMap<String,Object>();
			paramMap.put("instanceId",instanceId);
			paramMap.put("sourceInstanceId",sourceInstanceId);
			String dubboResultInfo=instanceDtoServiceCustomer.validateInstanceDataAuth(userInfo, JacksonUtils.toJson(paramMap));
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				Boolean instanceAccess = JacksonUtils.fromJson(resultInfo, Boolean.class);
				result.setResult(instanceAccess);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			////e.printStackTrace();
			log.error("调用validateInstanceDataAuth方法:  【参数"+instanceId+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;*/
	}

	/**
	 * 获取流程实例流转图数据
	 *
	 * @param instanceId  流程实例ID
	 *
	 * @return
	 */

	@ApiOperation(value= "获取流程实例流转图数据",notes="获取流程实例流转图数据")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "instanceId",value = "instanceId",required = true,dataType = "String")})
	@RequestMapping(value="/getInstanceGraph/{instanceId}",method=RequestMethod.GET)
	public  MessageResult getInstanceGraph(@PathVariable("instanceId")  String instanceId){

		try { 
			InstanceDto instanceGraph = instanceService.getInstanceGraph(instanceId);
			return getSuccessResultModel(instanceGraph);
		} catch (Exception e) {                 
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel();
		}
		/*MessageResult result=new MessageResult();
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);

			String dubboResultInfo=instanceDtoServiceCustomer.getInstanceGraph(userInfo, "{\"instanceId\":\""+instanceId+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				InstanceDto instanceDto=JacksonUtils.fromJson(resultInfo, InstanceDto.class);
				result.setResult(instanceDto);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {                 log.error("-----------"+e.getMessage()+"------------");
			////e.printStackTrace();
			log.error("调用getInstanceGraph方法:  【参数"+instanceId+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;*/
	}
}
