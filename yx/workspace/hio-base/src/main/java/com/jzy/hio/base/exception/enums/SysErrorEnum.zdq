package com.jzy.hio.base.exception.enums;

/**
 * @author chaoyang
 *
 */
public enum SysErrorEnum{

	/**
	规则：	数字
	模块范围	1-2位
	业务分类	3-4位
	具体异常	5-8位
	示例：	10010001
	模块	编码
	eureka中心	11
	gateway	12
	sys	13
	flow	14
	portal	15
	 */
	
	/**
	 * 10 系统通用异常
	 * 
	 * 系统异常
	 */
	systemError("10000001","system error "),
	
	/**
	 * 参数不合法
	 */
	parameterError("10000002","parameter illegality "),

	
	/**
	 * eureka 11
	 */
	eurekaError("11000001","eureka error"),

	
	/**
	 * gateway 12
	 */
	gatewayError("12000001","gateway error"),

	/**
	 * sys 13
	 */
	sysError("13000001","sys error"),

	/**
	 * flow 14
	 */
	flowError("14000001","flow error"),
	
	/**
	 * flow_excelExportError
	 */
	excelExportError("14000002","excel export error"),
	

	/**
	 * portal 15
	 */
	portalError("15000001","portal error"),

	/**
	 * hr 16
	 */
	hrError("16000001","hr error"),
	
	/**
	 * search 17
	 */
	searchError("16000001","search error");
	
	
	
	
	
	
	
    private String errorCode;
    
    private String errorMessage;
    
    private SysErrorEnum(String errorCode, String errorMessage) {
        this.errorCode = errorCode;
        this.errorMessage = errorMessage;
    }

    public String getErrorCode() {
        return errorCode;
    }

    public void setErrorCode(String errorCode) {
        this.errorCode = errorCode;
    }

    public String getErrorMessage() {
        return errorMessage;
    }

    public void setErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
    }
    
    public static String getMessage(String code) {
    	
    	SysErrorEnum[] values = SysErrorEnum.values();
    	for (SysErrorEnum sysErrorEnums : values) {
    		if(sysErrorEnums.getErrorCode().equals(code)) {
    			return sysErrorEnums.getErrorMessage();
    		}
		}
    	return " ";
    }
}
