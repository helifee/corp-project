package com.jzy.hio.base.utils;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

import javax.persistence.Column;

import org.apache.commons.lang.StringUtils;

import com.jzy.hio.base.entity.BaseEntity;

public class PageColumnParse {


	public static Map<String,String> columnMap = new HashMap<>();

	public synchronized static  Map<String,String>  getMap (){

		BaseEntity base = new BaseEntity();
		Class<? extends BaseEntity> class1 = base.getClass();
		Field[] declaredFields = class1.getDeclaredFields();
		for (Field field : declaredFields) {
			boolean annotationPresent = field.isAnnotationPresent(Column.class);
			if(annotationPresent) {
				Column annotation = field.getAnnotation(Column.class);
				if(StringUtils.isNotBlank(annotation.name())) {
					columnMap.put(annotation.name().replaceAll("_",""), annotation.name());
				}
			}
		}
		return columnMap;
	}

	public  static Map<String,String>  getClassColumnMap(Class clazz){
		Map<String,String> map = new HashMap<>();
		if(columnMap.size() == 0 || columnMap.isEmpty()) {

			map.putAll(getMap());
		}else {

			map.putAll(columnMap);
		}

		Field[] declaredFields = clazz.getDeclaredFields();
		for (Field field : declaredFields) {
			boolean annotationPresent = field.isAnnotationPresent(Column.class);
			if(annotationPresent) {
				Column annotation = field.getAnnotation(Column.class);
				if(StringUtils.isNotBlank(annotation.name())) {

					map.put(annotation.name().replaceAll("_",""), annotation.name());
				}
			}
		}

		return  map;
	}

}
