package com.jzy.hio.base.springmvc;

import java.lang.reflect.Method;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;

import org.springframework.context.annotation.Configuration;
import org.springframework.core.convert.ConversionService;
import org.springframework.core.convert.TypeDescriptor;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.ObjectToStringHttpMessageConverter;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.web.method.support.HandlerMethodReturnValueHandler;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;
import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;
import org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod;

import com.jzy.tools.data.JacksonUtils;

/**
 * 
 * @author wt.coffee<br/>
 * 		2018年3月5日下午2:47:49
 */
@Configuration
public class WebMvcConfiguration extends WebMvcConfigurationSupport {

	@Override
	protected void addInterceptors(InterceptorRegistry registry) {
		registry.addInterceptor(new LogInterceptor());
		super.addInterceptors(registry);
	}

	/**
	 * 改变ReturnValueHandlers的顺序<br>
	 * 加入自定义RequestResponseBodyMethodProcessorExt
	 * {@link ServletInvocableHandlerMethod#invokeAndHandle(org.springframework.web.context.request.ServletWebRequest, org.springframework.web.method.support.ModelAndViewContainer, Object...)
	 * 
	 * @link HandlerMethodReturnValueHandlerComposite#getReturnValueHandler(MethodParameter)}
	 */
	@SuppressWarnings("unchecked")
	public RequestMappingHandlerAdapter requestMappingHandlerAdapter() {
		RequestMappingHandlerAdapter handlerAdapter = super.requestMappingHandlerAdapter();
		List<HttpMessageConverter<?>> messageConverters = new ArrayList<>();
		StringHttpMessageConverter strConverter = new StringHttpMessageConverter(Charset.forName("UTF-8"));
		// MappingJackson2HttpMessageConverter jacksonConverter = new
		// MappingJackson2HttpMessageConverter();
		// jacksonConverter.setPrettyPrint(true);

		// requestMapping返回自定义对象
		messageConverters.add(new ObjectToStringHttpMessageConverter(new ConversionService() {

			@Override
			public Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {
				return null;
			}

			/**
			 * 两个参数值 类型 ResponseData、String
			 */
			@Override
			public <T> T convert(Object source, Class<T> targetType) {
				String result = JacksonUtils.toJson(source);
				return (T) result;
			}

			@Override
			public boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType) {
				return false;
			}

			/**
			 * 如果requestMapping的方法返回HIOException, sourceType参数值为HIOException targetType是String
			 */
			@Override
			public boolean canConvert(Class<?> sourceType, Class<?> targetType) {
				return true;
			}
		}));
		messageConverters.add(strConverter);
		// messageConverters.add(jacksonConverter);
		// 需要传入参数HttpMessageConverter列表
		RequestResponseBodyMethodProcessorExt processor = new RequestResponseBodyMethodProcessorExt(messageConverters);
		try {
			Method getDefaultReturnValueHandlers = handlerAdapter.getClass().getDeclaredMethod("getDefaultReturnValueHandlers");
			getDefaultReturnValueHandlers.setAccessible(true);
			List<HandlerMethodReturnValueHandler> defaultReturnValueHandlers = (List<HandlerMethodReturnValueHandler>) getDefaultReturnValueHandlers.invoke(handlerAdapter);
			defaultReturnValueHandlers.add(0, processor);
			handlerAdapter.setReturnValueHandlers(defaultReturnValueHandlers);
			// handlerAdapter.getReturnValueHandlers().add(0, processor);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return handlerAdapter;
	}
}
