package com.jzy.hio.base.service.aop;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.annotation.Order;

import com.jzy.hio.base.entity.BaseEntity2;
import com.jzy.hio.base.redis.RedisService;
import com.jzy.hio.base.utils.OrderValue;

/**
 * 数据库相关操作后 把数据存入redis
 * 
 * @author wt.coffee<br/>
 *         2018年3月7日上午9:26:02
 */
@Aspect
@Order(OrderValue.AOP_REDIS)
@Configuration
public class RedisAop {
	private Logger logger = LoggerFactory.getLogger(this.getClass());

	@Autowired
	private RedisService redisService;

	@Pointcut("execution(* com.jzy.hio..service.impl.*.save*(..))")
	public void insert() {
		System.out.println("insert");
	}

	/**
	 * Null return value from advice does not match primitive return type for: public int com.jzy.hio.base.service.impl.BaseServiceImpl.save(java.lang.Object)
	 * 
	 * @param thisJoinPoint
	 * @return
	 */
	@Around("execution(* com.jzy.hio..mapper.*.insert*(..))")
	public int after(ProceedingJoinPoint thisJoinPoint) {
		logger.info("准备调用mapper方法");
		Object[] args = thisJoinPoint.getArgs();
		int count = 0;
		try {
			Object resultValue = thisJoinPoint.proceed();
			count = Integer.valueOf(resultValue + "");
		} catch (Throwable e) {
			e.printStackTrace();
		}
		// 插入成功
		if (count == args.length) {
			for (Object entity : args) {
				redisService.put((BaseEntity2)entity);
			}
			// 存入redis
			throw new RuntimeException();
		} else {
			// 抛异常 回滚
			// throw new HioMybatisUpdateException();
		}
		return count;
	}
}
