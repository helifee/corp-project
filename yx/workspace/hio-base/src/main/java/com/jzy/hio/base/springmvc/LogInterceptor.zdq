package com.jzy.hio.base.springmvc;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

/**
 * 项目的日志记录拦截器, 记录所有的request请求和返回给app的ResponseBody数据<br>
 * 
 * @author coffee<br>
 *         2016年12月24日下午6:07:43
 */
public class LogInterceptor extends HandlerInterceptorAdapter {

	Logger logger = LoggerFactory.getLogger(LogInterceptor.class.getSimpleName());

	/**
	 * return true 表示调过拦截器, false表示拦截该请求, 然后请求便不会进入被调用
	 */
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
		String requestUri = request.getRequestURI();
		// if (requestUri == null || requestUri.contains(".")) {
		// super.preHandle(request, response, handler);
		// return false;// 不拦截
		// }
		logger.info(requestUri);
		logger.info(formatParams(request.getParameterMap()));
		return true;
	}

	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
		super.postHandle(request, response, handler, modelAndView);
		Object result = request.getAttribute("responseBody");
		logger.info(result + "");
	}

	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
		super.afterCompletion(request, response, handler, ex);
	}

	private String formatParams(Map<String, String[]> params) {
		StringBuilder sb = new StringBuilder();
		for (String name : params.keySet()) {
			if (sb.length() > 0) {
				sb.append("&");
			}
			sb.append(name).append("=");
			String[] values = params.get(name);
			for (int i = 0; i < values.length; i++) {
				String value = values[0];
				sb.append(value);
				if (values.length > 1 && i < values.length) {
					sb.append(",");
				}
			}
		}
		return sb.toString();
	}
}