package com.jzy.hio.api.gate;

//import com.jzy.hio.api.gate.filter.PreFilter;

import com.jzy.hio.api.gate.fallback.HioFallbackProvider;
import com.jzy.hio.api.gate.filter.ThrowExceptionFilter;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.web.servlet.MultipartConfigFactory;
import org.springframework.cloud.client.SpringCloudApplication;
import org.springframework.cloud.netflix.zuul.EnableZuulProxy;
import org.springframework.cloud.netflix.zuul.filters.route.ZuulFallbackProvider;
import org.springframework.context.annotation.Bean;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

import javax.servlet.MultipartConfigElement;

@EnableZuulProxy
@SpringCloudApplication
//@EnableOAuth2Sso
public class HioGatewayApplication {

	public static void main(String[] args) {
		new SpringApplicationBuilder(HioGatewayApplication.class)
				.web(true).run(args);
		System.out.println("【【【【【【 APIGate微服务 】】】】】】已启动.");
	}
//	@Bean
//	public ThrowExceptionFilter throwExceptionFilter(){
//		return 	new ThrowExceptionFilter();
//	}

	@Bean
	public ZuulFallbackProvider authFallbackProvider(){
		HioFallbackProvider myFallbackProvider = new HioFallbackProvider();
		myFallbackProvider.setRoute("v2r1-auth-server");
		return myFallbackProvider;
	}
	@Bean
	public ZuulFallbackProvider platformFallbackProvider(){
		HioFallbackProvider myFallbackProvider = new HioFallbackProvider();
		myFallbackProvider.setRoute("v2r1-platform-service");
		return myFallbackProvider;
	}


	@Bean
	public ZuulFallbackProvider FlowServiceFallbackProvider(){
		HioFallbackProvider myFallbackProvider = new HioFallbackProvider();
		myFallbackProvider.setRoute("v2r1-flow-service");
		return myFallbackProvider;
	}
	@Bean
	public ZuulFallbackProvider SysServiceFallbackProvider(){
		HioFallbackProvider myFallbackProvider = new HioFallbackProvider();
		myFallbackProvider.setRoute("v2r1-sys-service");
		return myFallbackProvider;
	}
	@Bean
	public ZuulFallbackProvider diskServiceFallbackProvider(){
		HioFallbackProvider myFallbackProvider = new HioFallbackProvider();
		myFallbackProvider.setRoute("v2r1-disk-service");
		return myFallbackProvider;
	}
	@Bean
	public ZuulFallbackProvider HrServiceFallbackProvider(){
		HioFallbackProvider myFallbackProvider = new HioFallbackProvider();
		myFallbackProvider.setRoute("v2r1-hr-service");
		return myFallbackProvider;
	}
	@Bean
	public ZuulFallbackProvider attachmentServiceFallbackProvider(){
		HioFallbackProvider myFallbackProvider = new HioFallbackProvider();
		myFallbackProvider.setRoute("v2r1-attachment-service");
		return myFallbackProvider;
	}

	@Bean
	public ZuulFallbackProvider crmServiceFallbackProvider(){
		HioFallbackProvider myFallbackProvider = new HioFallbackProvider();
		myFallbackProvider.setRoute("v2r1-crm-service");
		return myFallbackProvider;
	}

	@Bean
	public ZuulFallbackProvider oaServiceFallbackProvider(){
		HioFallbackProvider myFallbackProvider = new HioFallbackProvider();
		myFallbackProvider.setRoute("v2r1-oa-service");
		return myFallbackProvider;
	}
//	@Bean
//	public PreFilter preFilter(){
//		return new PreFilter();
//	}

	@Bean
	public CorsFilter corsFilter() {
		final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
		final CorsConfiguration config = new CorsConfiguration();
		config.setAllowCredentials(true); // 允许cookies跨域
		config.addAllowedOrigin("*");// #允许向该服务器提交请求的URI，*表示全部允许，在SpringMVC中，如果设成*，会自动转成当前请求头中的Origin
		config.addAllowedHeader("*");// #允许访问的头信息,*表示全部
		config.setMaxAge(18000L);// 预检请求的缓存时间（秒），即在这个时间段里，对于相同的跨域请求不会再预检了
		config.addAllowedMethod("OPTIONS");// 允许提交请求的方法，*表示全部允许
		config.addAllowedMethod("HEAD");
		config.addAllowedMethod("GET");// 允许Get的请求方法
		config.addAllowedMethod("PUT");
		config.addAllowedMethod("POST");
		config.addAllowedMethod("DELETE");
		config.addAllowedMethod("PATCH");
		source.registerCorsConfiguration("/**", config);
		return new CorsFilter(source);
	}

	@Bean
	MultipartConfigElement multipartConfigElement() {
		MultipartConfigFactory factory = new MultipartConfigFactory();
		factory.setLocation(System.getProperty("java.io.tmpdir"));
		return factory.createMultipartConfig();
	}

}