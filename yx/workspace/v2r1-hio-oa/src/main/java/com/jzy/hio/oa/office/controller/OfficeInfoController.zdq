package com.jzy.hio.oa.office.controller;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.controller.BaseOaController;
import com.jzy.hio.entity.OfficeInfo;
import com.jzy.hio.exception.HioException;
import com.jzy.hio.exception.HioMybatisGetException;
import com.jzy.hio.exception.HioMybatisQueryException;
import com.jzy.hio.exception.HioMybatisUpdateException;
import com.jzy.hio.oa.office.dto.OfficeInfoDto;
import com.jzy.hio.oa.office.service.OfficeInfoService;
import com.jzy.hio.utils.LoginUser;
import com.jzy.hio.utils.Page;

/**
 * 办公用品物品详情
 *
 * @author shangb
 * @date 2018年3月15日 上午10:43:35
 */
@RestController
@RequestMapping("office/officeInfo")
public class OfficeInfoController extends BaseOaController {
	
	private static Logger logger = LoggerFactory.getLogger(OfficeInfoController.class);
	
	@Autowired
	private OfficeInfoService officeInfoService;
	
	
	/**
	 * 根据Id获取物品详情，包括出入库信息
	 * 
	 * @param id
	 *            业务对象主键
	 * 
	 * @return 业务对象
	 */
	@RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
	public Object get(@PathVariable("id") String id) throws HioMybatisGetException {
		OfficeInfoDto officeInfoDto = officeInfoService.queryOfficeInfoById(id);
		return officeInfoDto;
	}
	
	/**
	 * 返回符合条件的用品详情列表
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/queryList", method = { RequestMethod.POST }, consumes = "application/json")
	public List queryList(@RequestBody OfficeInfo officeInfo) throws HioMybatisQueryException {
		officeInfo.setDelflag(0);
		List<OfficeInfo> officeInfoList = officeInfoService.queryList(officeInfo);
		return officeInfoList;
	}

	/**
	 * 分页返回符合条件的用品详情列表
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/page", method = RequestMethod.POST , consumes = "application/json")
	public Page page(@RequestBody OfficeInfoDto officeInfoDto) throws HioMybatisQueryException {
		/*if (map != null && StringUtils.isEmpty((String)map.get("houseId"))) {
			map.remove("houseId");
		}
		if (map != null && StringUtils.isEmpty((String)map.get("stockName"))) {
			map.remove("stockName");
		}
		
		Page page = officeInfoService.queryOfficeInfoPage(map);
		return page;*/
		LoginUser loginUser = getLoginUser();
		return officeInfoService.queryOfficeInfoPageNew(officeInfoDto, loginUser);
	}
	
	/**
	 * 修改物品详情
	 * 
	 * @param id
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
	public Object update(@PathVariable("id") String id, @RequestBody OfficeInfo officeInfo) throws HioMybatisUpdateException {
		// 根据名称、类别、规格、品牌查询数据库里是否存在
		List<OfficeInfo> officeInfoList = officeInfoService.existOfficeInfo(officeInfo);
		if (officeInfoList != null && officeInfoList.size() > 0) {//已经存在，更新库存
			for (OfficeInfo officeInfo2 : officeInfoList) {
				if (!id.equals(officeInfo2.getId())) {
					return HioException.officeInfoExistUpdate;
				}
			}
		}
		
		String state = officeInfo.getState();
		//查询该物品库存是否为0，true为0，false不为0
		boolean flag = officeInfoService.checkOfficeInfoStockCount(id, state);
		if (!flag) {
			return HioException.officeHouseStockCountNotZero;
		}
		officeInfo.setUpdateDate(new Date());
		return super.update(id, officeInfo);
	}
	
	/**
	 * 启用禁用物品详情
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/enableOrNot/{id}", method = RequestMethod.PUT, consumes = "application/json")
	public Object enableOrNot(@PathVariable("id") String id, @RequestBody OfficeInfo officeInfo) throws HioMybatisUpdateException {
		String state = officeInfo.getState();
		//查询该物品库存是否为0，true为0，false不为0
		boolean flag = officeInfoService.checkOfficeInfoStockCount(id, state);
		if (!flag) {
			return HioException.officeHouseStockCountNotZero;
		}
		officeInfo.setUpdateDate(new Date());
		return super.update(id, officeInfo);
	}

}
