/**
 * @Title MeetingReserveBoardroomController.java
 * @Package com.jzy.hio.oa.meeting.controller
 * @author shangb
 * @date 2018年3月26日 上午11:16:43
 * @version V1.0
 */

package com.jzy.hio.oa.meeting.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.controller.BaseOaController;
import com.jzy.hio.entity.MeetingReserveBoardroom;
import com.jzy.hio.exception.HioMybatisDeleteException;
import com.jzy.hio.exception.HioMybatisGetException;
import com.jzy.hio.exception.HioMybatisInsertException;
import com.jzy.hio.exception.HioMybatisQueryException;
import com.jzy.hio.exception.HioMybatisUpdateException;
import com.jzy.hio.oa.OaConstant;
import com.jzy.hio.oa.meeting.dto.MeetingReserveBoardroomDto;
import com.jzy.hio.oa.meeting.service.MeetingReserveBoardroomService;
import com.jzy.hio.utils.LoginUser;
import com.jzy.hio.utils.OaUserUtil;

/**
 *会议室预定记录
 * @author shangb
 * @date 2018年3月26日 上午11:16:43
 */
@RestController
@RequestMapping("meeting/meetingReserveBoardroom")
public class MeetingReserveBoardroomController extends BaseOaController {
	
	private static Logger logger = LoggerFactory.getLogger(MeetingReserveBoardroomController.class);
	
	@Autowired
	private MeetingReserveBoardroomService meetingReserveBoardroomService;
	
	@Autowired
	private OaUserUtil oaUserUtil;
	
	/**
	 * 根据Id获取会议室预定记录
	 * @param id 业务对象主键
	 * @return 业务对象
	 */
	@RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
	public Object get(@PathVariable("id") String id) throws HioMybatisGetException {
		MeetingReserveBoardroomDto meetingReserveBoardroomDto = meetingReserveBoardroomService.queryMeetingReserveBoardroomById(id);
		return meetingReserveBoardroomDto;
	}
	
	/**
	 * 保存会议室预定记录
	 * 
	 * @param json
	 * @return
	 */
	@RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
	public Object save(@RequestBody MeetingReserveBoardroom meetingReserveBoardroom) throws HioMybatisInsertException {
		logger.info("保存会议室预定记录");
		return super.save(meetingReserveBoardroom);
	}
	
	/**
	 * 修改会议室预定记录
	 * 
	 * @param id
	 * @param map
	 * @return·
	 */
	@RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
	public Object update(@PathVariable("id") String id, @RequestBody MeetingReserveBoardroom meetingReserveBoardroom) throws HioMybatisUpdateException {
		meetingReserveBoardroom.setUpdateDate(new Date());
		logger.info("修改会议室预定记录,id:{}",id);
		return super.update(id, meetingReserveBoardroom);
	}
	
	/**
	 * 删除会议室预定记录
	 *
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
	public Object delete(@PathVariable("id") String id) throws HioMybatisDeleteException {
		logger.info("删除会议室预定记录,id:{}",id);
		return super.deletePseudo(id);
	}

	/**
	 * 返回符合条件的会议室预定记录列表
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/queryList", method = { RequestMethod.POST }, consumes = "application/json")
	public List<MeetingReserveBoardroomDto> queryList(@RequestBody MeetingReserveBoardroom meetingReserveBoardroomParam) throws HioMybatisQueryException {
		List<MeetingReserveBoardroom> meetingReserveBoardroomList = meetingReserveBoardroomService.selectMeetingReserveBoardroomList(meetingReserveBoardroomParam);
		// 往前端返的list
		List<MeetingReserveBoardroomDto> meetingReserveBoardroomDtoList = new ArrayList<MeetingReserveBoardroomDto>();
		if (meetingReserveBoardroomList != null && meetingReserveBoardroomList.size() > 0) {
			LoginUser loginUser = getLoginUser();
			for (MeetingReserveBoardroom meetingReserveBoardroom : meetingReserveBoardroomList) {
				MeetingReserveBoardroomDto meetingReserveBoardroomDto = new MeetingReserveBoardroomDto();
				BeanUtils.copyProperties(meetingReserveBoardroom, meetingReserveBoardroomDto);
				String useUserid = meetingReserveBoardroom.getUseUserid();// 使用人
				//String useUserName = oaUserUtil.selectUserName(useUserid);// 根据一个userID查询一个userName
				//包含离职人员
				String useUserName = oaUserUtil.selectUserNameByTendIdAndStatus(useUserid,loginUser.getTendId(),OaConstant.OA_USER_QUERY_STATUS_3);
				meetingReserveBoardroomDto.setUseUserName(useUserName);
				meetingReserveBoardroomDtoList.add(meetingReserveBoardroomDto);
			}
		}
		return meetingReserveBoardroomDtoList;
	}
	
}
