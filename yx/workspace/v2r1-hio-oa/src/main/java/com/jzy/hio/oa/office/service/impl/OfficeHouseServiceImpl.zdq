
package com.jzy.hio.oa.office.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.jzy.hio.base.Base;
import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.entity.OfficeHouse;
import com.jzy.hio.entity.OfficeInfo;
import com.jzy.hio.exception.HioException;
import com.jzy.hio.exception.HioMybatisGetException;
import com.jzy.hio.exception.HioMybatisInsertException;
import com.jzy.hio.exception.HioMybatisQueryException;
import com.jzy.hio.exception.HioMybatisUpdateException;
import com.jzy.hio.oa.OaConstant;
import com.jzy.hio.oa.office.dto.OfficeHouseDto;
import com.jzy.hio.oa.office.mapper.OfficeHouseMapper;
import com.jzy.hio.oa.office.service.OfficeHouseService;
import com.jzy.hio.oa.office.service.OfficeInfoService;
import com.jzy.hio.utils.LoginUser;

@Service("officeHouseService")
public class OfficeHouseServiceImpl extends BaseServiceImpl<OfficeHouse> implements OfficeHouseService {

	private static Logger logger = LoggerFactory.getLogger(OfficeHouseServiceImpl.class);
	
	@Autowired
	private OfficeHouseMapper officeHouseMapper;
	
	@Autowired
	private OfficeInfoService officeInfoService;
	
	
	/**
	 * 根据id查询类别
	 */
	public OfficeHouseDto getOfficeHouseById(String id,LoginUser loginUser) throws HioMybatisQueryException{
		
		logger.debug(">>>>>>>>>>>>>>>>>>>>getOfficeHouseById>>>>>>>>>>>>>>>>id={}",id);
		
		OfficeHouseDto officeHouseDto = null;
		try {
			//调用查询方法
			OfficeHouse officeHouse = super.getObjectById(id);
			if(Base.isNotEmpty(officeHouse)){
				officeHouseDto = new OfficeHouseDto();
				//复制对象
				BeanUtils.copyProperties(officeHouse,officeHouseDto);
/*				if(Base.isNotEmpty(officeHouseDto) && Base.isNotEmpty(officeHouseDto.getParentId())){
					OfficeHouse officeHouseParent = super.getObjectById(officeHouseDto.getParentId());
					//父类别被禁用时,ParentId置null
					if(Base.isNotEmpty(officeHouseParent) 
							&& Base.isEquals(officeHouseParent.getState(),OaConstant.STATE_FALSE)){
						
						officeHouseDto.setParentId(null);
					}
				}*/
			}
		} catch (Exception e) {
			//
			logger.error(">>>>>>>>>>>>>>>>>>>>>查询物品类别信息出错!id={}>>>>>>>>>>>>>>>>>>>>>" + id);
			throw new HioMybatisGetException(e);
		}
		
		if(Base.isEmpty(officeHouseDto)){
			throw new HioMybatisQueryException("没有查询到数据!");
		}
		return officeHouseDto;
	}
	
	
	/**
	 * 保存
	 */
	@Override
	public Object saveOfficeHouse(OfficeHouse officeHouse,LoginUser loginUser) throws HioMybatisInsertException{
		
		if(Base.isEmpty(officeHouse)){
			throw new HioMybatisInsertException("物品类别为空!");
		}else if(Base.isEmpty(officeHouse.getTypeName())){
			throw new HioMybatisInsertException("物品类别的名称为空!");
		}else if(Base.isEmpty(officeHouse.getNumberCode())){
			throw new HioMybatisInsertException("物品类别的编码为空!");
		}
		//关键字段取空格
		officeHouse.setTypeName(officeHouse.getTypeName().trim());
		officeHouse.setNumberCode(officeHouse.getNumberCode().trim());
		//重名校验
		List <OfficeHouseDto> list = officeHouseMapper.queryOfficeHouseListCheck(officeHouse);
		
		if (Base.isNotEmpty(list)) {
			throw new HioMybatisInsertException(HioException.officeHouseTypeNameExist.getMessage());
		}
		if (StringUtils.isEmpty(officeHouse.getState())) {
			officeHouse.setState(OaConstant.STATE_TRUE);
		}
		return super.save(officeHouse);
	}
	
	/*修改用品类别，同时判断：禁用一级类别时把二级类别也禁用了;启用二级时，把对应的一级也启用*/
	@Override
	public Object updateOfficeHouse(OfficeHouse officeHouse) throws HioMybatisUpdateException{
		
		//非空校验
		if(Base.isEmpty(officeHouse) || Base.isEmpty(officeHouse.getId())){
			throw new HioMybatisUpdateException("物品类别或id为空!");
		}else if(Base.isEmpty(officeHouse.getTypeName())){
			throw new HioMybatisInsertException("物品类别的名称为空!");
		}else if(Base.isEmpty(officeHouse.getNumberCode())){
			throw new HioMybatisInsertException("物品类别的编码为空!");
		}
		//关键字段取空格
		officeHouse.setTypeName(officeHouse.getTypeName().trim());
		officeHouse.setNumberCode(officeHouse.getNumberCode().trim());
		//重名校验
		List <OfficeHouseDto> list = officeHouseMapper.queryOfficeHouseListCheck(officeHouse);
		
		if (Base.isNotEmpty(list)) {
			for (OfficeHouse oHouse : list) {
				//名称相同的校验
				if (Base.isEquals(officeHouse.getTypeName(),oHouse.getTypeName())
						&& (Base.isEquals(officeHouse.getParentId(),oHouse.getParentId())
								|| (Base.isEmpty(officeHouse.getParentId()) && Base.isEmpty(oHouse.getParentId()))
							)
						&& Base.isNotEquals(officeHouse.getId(),oHouse.getId())) {
					throw new HioMybatisUpdateException(HioException.officeHouseTypeNameExist.getMessage());
				}
			}
		}
		
		String state = officeHouse.getState();
		// 查询该物品类别下的所有物品库存是否为0，true为0，false不为0
		boolean flag = this.checkOfficeHouseOfficeInfoStockCount(officeHouse.getId(), state);
		if (!flag) {
			throw new HioMybatisUpdateException(HioException.officeHouseStockCountNotZero_1.getMessage());
		}	
		
		officeHouse.setUpdateDate(new Date());
		Integer count = super.update(officeHouse);
		logger.info("修改用品类别,类别id：{}",officeHouse.getId());
		
		// 禁用一级类别时把二级类别也禁用了;启用二级时，把对应的一级也启用
		OfficeHouse enableOrNotOfficeHouse = new OfficeHouse();
		enableOrNotOfficeHouse.setId(officeHouse.getId());
		enableOrNotOfficeHouse.setState(officeHouse.getState());
		// 禁用一级类别时把二级类别也禁用了;启用二级时，把对应的一级也启用
		enableOrNotOfficeHouse(enableOrNotOfficeHouse);
		return count;
	}
	
		
	/*查询该物品类别下的所有物品库存是否为0，true为0，false不为0*/
	@Override
	public boolean checkOfficeHouseOfficeInfoStockCount(String id, String state) {
		// 根节点
		OfficeHouse officeHouseDatabase = (OfficeHouse)super.getObjectById(id);
		List<OfficeHouse> officeHouseList = new ArrayList<OfficeHouse>();
		officeHouseList.add(officeHouseDatabase);
		// 一级菜单没有parentId，最多二级菜单
		// 为一级菜单时，需要查询出二级菜单
		if (StringUtils.isBlank(officeHouseDatabase.getParentId())) {
			OfficeHouse childOfficeHouse = new OfficeHouse();
			childOfficeHouse.setParentId(id);
			childOfficeHouse.setDelflag(0);
			List<OfficeHouse> officeHouseList2 = (List<OfficeHouse>)super.queryList(childOfficeHouse);
			if (officeHouseList2 != null && officeHouseList2.size() > 0) {
				officeHouseList.addAll(officeHouseList2);
			}
		}
		if (officeHouseList != null && officeHouseList.size() > 0) {
			for (OfficeHouse officeHouse : officeHouseList) {
				if (!state.equals(officeHouse.getState()) && state.equals(OaConstant.STATE_FALSE)) {
					OfficeInfo officeInfo = new OfficeInfo();
					officeInfo.setHouseId(officeHouse.getId());
					officeInfo.setDelflag(0);
					List<OfficeInfo> officeInfoList = officeInfoService.queryList(officeInfo);
					if (officeInfoList != null && officeInfoList.size() > 0) {
						for (OfficeInfo officeInfo2 : officeInfoList) {
							Integer stockCount = officeInfo2.getStockCount();
							if (0 != stockCount) {// 库存不为0，不让禁用
								logger.info("查询该物品类别下的所有物品库存不为0，物品类别为：{}",id);
								return false;
							}
						}
					}
				}
			}
		}
		logger.info("查询该物品类别下的所有物品库存为0，物品类别为：{}",id);
		return true;
	}
	
	/*禁用一级类别时把二级类别也禁用了;启用二级时，把对应的一级也启用*/
	@Override
	public Integer enableOrNotOfficeHouse(OfficeHouse officeHouse) {
		Integer count = 0;
		String id = officeHouse.getId();
		String state = officeHouse.getState();
		OfficeHouse officeHouseDatabase = (OfficeHouse)super.getObjectById(id);
		if (state.equals(OaConstant.STATE_FALSE)) {// 禁用
			// 一级菜单没有parentId，最多二级菜单
			// 为一级菜单时，需要查询出二级菜单
			if (StringUtils.isBlank(officeHouseDatabase.getParentId())) {// 1级，禁用一级类别时把二级类别也禁用了
				officeHouse.setUpdateDate(new Date());
				count = super.update(officeHouse);
				// 禁用二级
				OfficeHouse childOfficeHouse = new OfficeHouse();
				childOfficeHouse.setParentId(id);
				childOfficeHouse.setDelflag(0);
				List<OfficeHouse> officeHouseList2 = (List<OfficeHouse>)super.queryList(childOfficeHouse);
				if (officeHouseList2 != null && officeHouseList2.size() > 0) {
					for (OfficeHouse officeHouse2 : officeHouseList2) {
						officeHouse2.setState(state);// 状态 0是禁用
						officeHouse2.setUpdateDate(new Date());
						super.update(officeHouse2);// 禁用二级菜单
					}
				}
			} else {// 二级
				officeHouse.setUpdateDate(new Date());
				count = super.update(officeHouse);
			}
		} else {// 启用
			officeHouse.setUpdateDate(new Date());
			count = super.update(officeHouse);
			if (!StringUtils.isBlank(officeHouseDatabase.getParentId())) {// 为二级，启用二级时，把对应的一级也启用
				OfficeHouse parentOfficeHouse = new OfficeHouse();
				parentOfficeHouse.setId(officeHouseDatabase.getParentId());
				parentOfficeHouse.setState(OaConstant.STATE_TRUE);
				parentOfficeHouse.setUpdateDate(new Date());
				super.update(parentOfficeHouse);
			}
		}
		logger.info("禁用一级类别时把二级类别也禁用了;启用二级时，把对应的一级也启用,类别id：{}",id);
		return count;
	}
	
	/*递归查找子菜单*/
	@Override
	public List<OfficeHouseDto> getChildTree(String id, List<OfficeHouseDto> officeHouseDtoList) {
	    // 子菜单
	    List<OfficeHouseDto> childList = new ArrayList<OfficeHouseDto>();
	    for (OfficeHouseDto officeHouseDto : officeHouseDtoList) {
	        // 遍历所有节点，将父菜单id与传过来的id比较
	        if (StringUtils.isNotBlank(officeHouseDto.getParentId())) {
	            if (officeHouseDto.getParentId().equals(id)) {
	                childList.add(officeHouseDto);
	            }
	        }
	    }
	    // 把子菜单的子菜单再循环一遍
	    for (OfficeHouseDto officeHouseDto : childList) {// 没有url子菜单还有子菜单
            // 递归
            officeHouseDto.setOfficeHouseList(getChildTree(officeHouseDto.getId(), officeHouseDtoList));
	    } // 递归退出条件
	    if (childList.size() == 0) {
	        return null;
	    }
	    return childList;
	}
	
	/*OfficeHouse的list转成OfficeHouseDto的list*/
	@Override
	public List<OfficeHouseDto> officeHouseToOfficeHouseDto (List<OfficeHouse> officeHouseList) {
		List<OfficeHouseDto> officeHouseDtoList = new ArrayList<OfficeHouseDto>();
		if (officeHouseList != null && officeHouseList.size() > 0) {
			for (OfficeHouse officeHouse : officeHouseList) {
				OfficeHouseDto OfficeHouseDto = new OfficeHouseDto();
				BeanUtils.copyProperties(officeHouse, OfficeHouseDto);
				officeHouseDtoList.add(OfficeHouseDto);
			}
		}
		return officeHouseDtoList;
	}


	@Override
	public List<OfficeHouseDto> queryOfficeHouseTree(OfficeHouse officeHouse) {
		return officeHouseMapper.queryOfficeHouseTree(officeHouse);
	}

}
