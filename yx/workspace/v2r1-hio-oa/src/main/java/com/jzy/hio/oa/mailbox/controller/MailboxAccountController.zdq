package com.jzy.hio.oa.mailbox.controller;

import com.jzy.hio.base.BaseConstants;
import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.exception.HioException;
import com.jzy.hio.oa.mailbox.dto.UnreadMailResultDto;
import com.jzy.hio.oa.mailbox.entity.MailboxAccount;
import com.jzy.hio.oa.mailbox.param.MailboxAccountParam;
import com.jzy.hio.oa.mailbox.service.MailboxAccountService;
import com.jzy.hio.oa.mailbox.utils.MailboxConstant;
import com.jzy.hio.springmvc.ApiResponse;
import com.jzy.hio.utils.JacksonUtils;
import org.apache.http.HttpStatus;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import java.util.Base64;
import java.util.List;
import java.util.Optional;

/**
 * 邮箱账号Controller
 *
 * @author haoqipeng 2018-05-08
 */
@RestController
@RequestMapping("/mailboxAccount")
@RefreshScope
public class MailboxAccountController extends BaseController {

    @Autowired
    private MailboxAccountService mailboxAccountService;

    @Autowired
    private RestTemplate restTemplate;

    /**
     * 服务服务器
     */
    @Value("${mailbox.serverAddress}")
    private String mailBoxServerAddress;

    /**
     * 根据主键查询数据
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @Override
    @GetMapping("/get/{id}")
    public Object get(@PathVariable String id) {
        return super.get(id);
    }

    /**
     * 保存邮箱账号信息<br/>
     * 邮箱账号的域名设置已经存在的情况下，直接调用该接口，保存并绑定邮箱账号
     *
     * @param param 邮箱账号参数
     * @return 返回对象
     */
    @PostMapping("/save")
    public Object save(@RequestBody @Validated MailboxAccountParam param) {
        infoLog("邮箱账号保存操作，接口参数：{}", JacksonUtils.toJson(param));
        return doSave(param);
    }


    /**
     * 更新邮箱账号信息，目前只用于重置密码
     *
     * @param param 邮箱账号参数
     * @return 返回对象
     */
    @PostMapping("/update")
    public Object update(@RequestBody MailboxAccountParam param) {
        infoLog("邮箱账号更新操作，接口参数：{}", JacksonUtils.toJson(param));

        return doSave(param);
    }

    /**
     * 更新邮箱账号信息，目前只用于重置密码
     *
     * @param param 邮箱账号参数
     * @return 返回对象
     */
    @PostMapping("/updateByString")
    public Object updateByString(@RequestParam(name = "accountString") String accountJson) {

        MailboxAccountParam param = JacksonUtils.fromJson(accountJson, MailboxAccountParam.class);
        return doSave(param);
    }

    /**
     * 解除邮箱账号绑定信息
     *
     * @param mailboxAccountId 要解除邮箱账号的Id
     * @return 返回对象
     */
    @Override
    @DeleteMapping("/delete/{sid}")
    public Object delete(@PathVariable(name = "sid") String mailboxAccountId) {

        // 删除邮箱账号表
        mailboxAccountService.deleteObjectById(mailboxAccountId);
        return new ApiResponse(HttpStatus.SC_OK, "已解除邮箱账号绑定");
    }

    /**
     * 调用RailLoop接口获取未读邮件数，邮箱账号为当前登录租户的企业邮箱
     *
     * @return 返回对象
     */
    @GetMapping("/getUnreadCount/{tendId}")
    public Object getUnreadCount(@PathVariable String tendId) {

        return getUnreadMailBriefsInfo(tendId, 0);
    }

    /**
     * 调用RailLoop接口获取最新未读邮件列表，邮箱账号为当前登录租户的企业邮箱
     *
     * @param count 获取的条数
     * @return 返回对象
     */
    @PostMapping("/getLatestUnreadList/{tendId}/{count}")
    public Object getLatestUnreadList(@PathVariable String tendId, @PathVariable Integer count) {
        return getUnreadMailBriefsInfo(tendId, count);
    }

    /**
     * 查询当前用户的邮箱列表
     *
     * @return 当前登录用户的邮箱列表
     */
    @PostMapping("/getMailboxList")
    public Object getMailboxList() {
        MailboxAccount param = new MailboxAccount();
        param.setUserId(getUserIdIM());
        param.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
        List<MailboxAccount> mailboxAccountList = mailboxAccountService.queryList(param);
        return mailboxAccountList;
    }

    private Object doSave(MailboxAccountParam param) {
        // 密码和确认密码不相同，返回错误
        //if (!param.getConfirmPassword().equals(param.getPassword())) {
        //    return HioException.MAILBOX_CONFIRM_PASSWORD_NOT_RIGHT;
        //}
        // 保存
        return mailboxAccountService.saveOrUpdate(param);
    }

    private Object getUnreadMailBriefsInfo(String tendId, int count) {
        long st = System.currentTimeMillis();
        List<MailboxAccount> accountList = getMailboxAccountForTend(tendId);
        infoLog("查询邮件列表，查询当前租户【{}】的邮箱账号耗时：[{}]", tendId, System.currentTimeMillis() - st);
        if (accountList != null && accountList.size() > 0) {
            MailboxAccount curAccount = accountList.get(0);
            UnreadMailResultDto unreadMailResultDto = fetchUnreadMailResult(count, curAccount);
            infoLog("查询邮件列表，共耗时：[{}]", tendId, System.currentTimeMillis() - st);

            return unreadMailResultDto;
        }

        return HioException.MAILBOX_ACCOUNT_NOT_EXIST;
    }

    private UnreadMailResultDto fetchUnreadMailResult(Integer count, MailboxAccount curAccount) {
        long st = System.currentTimeMillis();
        String url = MailboxConstant.URL_GET_UNREAD_MAIL_LIST.replace("{#serverAddress}", mailBoxServerAddress)
                .replace("{#account}", Base64.getEncoder().encodeToString(curAccount.getAccount().getBytes()))
                .replace("{#password}", Base64.getEncoder().encodeToString(curAccount.getPassword().getBytes()))
                .replace("{#topN}", Optional.ofNullable(count).orElse(3).toString());
        infoLog("请求邮箱服务,url：{}", url);
        // 调用RainLoop接口
        ResponseEntity<String> mailResp = restTemplate.getForEntity(url, String.class);
        infoLog("请求邮箱服务,获取返回结果，耗时[{}]", System.currentTimeMillis() - st);
        st = System.currentTimeMillis();
        String resultString = mailResp.getBody();
        UnreadMailResultDto unreadMailResultDto = JacksonUtils.fromJson(resultString, UnreadMailResultDto.class);

        infoLog("请求邮箱服务,转换返回结果，耗时[{}]", System.currentTimeMillis() - st);

        return unreadMailResultDto;
    }

    private List<MailboxAccount> getMailboxAccountForTend(String tendId) {
        // 获取当前用户在指定租户的邮箱账号信息
        MailboxAccount pm = new MailboxAccount();
        pm.setTenantId(tendId);
        pm.setUserId(getUserIdIM());
        pm.setMailboxType(MailboxConstant.MAILBOX_TYPE_COMPANY);
        pm.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);

        return mailboxAccountService.queryList(pm);
    }

    public static void main(String[] args) {
        String url = MailboxConstant.URL_GET_UNREAD_MAIL_LIST.replace("{#serverAddress}", "http://10.17.4.10/api/fetch-brief.php")
                .replace("{#account}", "467140117@163.com")
                .replace("{#password}", Base64.getEncoder().encodeToString("pengqi365982".getBytes()))
                .replace("{#topN}", String.valueOf(3));
        // 调用RainLoop接口
        ResponseEntity<String> r = new RestTemplate().getForEntity(url, String.class);
        /// 临时切换测试
        //ResponseEntity<UnreadMailResultDto> r = new RestTemplate().getForEntity(url, UnreadMailResultDto.class);
        System.out.println(r.getBody());

        UnreadMailResultDto d = JacksonUtils.fromJson(r.getBody(), UnreadMailResultDto.class);

        System.out.println(JacksonUtils.toJson(d));

    }

    private void infoLog(String formatString, Object... params) {
        logger.info("\n\n\t\t【【【【【【【【" + formatString + "\n\n", params);
    }
}
