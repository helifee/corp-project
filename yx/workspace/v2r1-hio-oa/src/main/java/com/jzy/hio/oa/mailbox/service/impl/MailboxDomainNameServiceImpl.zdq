package com.jzy.hio.oa.mailbox.service.impl;

import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.oa.mailbox.entity.MailboxAccount;
import com.jzy.hio.oa.mailbox.entity.MailboxDomainName;
import com.jzy.hio.oa.mailbox.mapper.MailboxAccountMapper;
import com.jzy.hio.oa.mailbox.mapper.MailboxDomainNameMapper;
import com.jzy.hio.oa.mailbox.param.MailboxAccountAndDomainNameParam;
import com.jzy.hio.oa.mailbox.service.MailboxDomainNameService;
import com.jzy.hio.oa.mailbox.utils.CommonUtils;
import com.jzy.hio.oa.mailbox.utils.MailboxConstant;
import com.jzy.hio.utils.StringUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * 邮箱域名 Service 接口实现类
 *
 * @author haoqipeng 2018-05-08
 */
@Service
public class MailboxDomainNameServiceImpl extends BaseServiceImpl<MailboxDomainName> implements MailboxDomainNameService {

    @Autowired
    private MailboxDomainNameMapper mailboxDomainNameMapper;

    @Autowired
    private MailboxAccountMapper mailboxAccountMapper;

    @Override
    public int saveOrUpdate(MailboxAccountAndDomainNameParam param) {
        // 初始化
        MailboxDomainName mailboxDomainName = new MailboxDomainName();
        MailboxAccount mailboxAccount = new MailboxAccount();

        CommonUtils.copyProperties(param, mailboxDomainName);
        CommonUtils.copyProperties(param.getMailboxAccountParam(), mailboxAccount);

        mailboxAccount.setUserId(getUserIdIM());
        if (MailboxConstant.MAILBOX_TYPE_COMPANY.equals(mailboxAccount.getMailboxType())) {
            mailboxAccount.setTenantId(getTendId());
        }

        // 保存
        if (StringUtil.isBlank(param.getId())) {
            initBaseEntity(mailboxDomainName, true);
            initBaseEntity(mailboxAccount, true);
            mailboxAccountMapper.insert(mailboxAccount);
            return mailboxDomainNameMapper.insert(mailboxDomainName);
        } else {
            initBaseEntityForUpdate(mailboxDomainName);
            initBaseEntityForUpdate(mailboxAccount);
            mailboxAccountMapper.updateByPrimaryKeySelective(mailboxAccount);
            return mailboxDomainNameMapper.updateByPrimaryKeySelective(mailboxDomainName);
        }
    }

    @Override
    public Boolean checkDomainNameExist(String domainName) {
        MailboxDomainName param = new MailboxDomainName();
        param.setDomainName(domainName);
        int count = mailboxDomainNameMapper.selectCount(param);
        return count > 0;
    }
}
