
package com.jzy.hio.oa.meeting.service;

import java.util.List;
import java.util.Map;

import com.jzy.hio.base.service.BaseOaService;
import com.jzy.hio.entity.MeetingInfo;
import com.jzy.hio.exception.HioMybatisInsertException;
import com.jzy.hio.exception.HioMybatisQueryException;
import com.jzy.hio.exception.HioMybatisUpdateException;
import com.jzy.hio.oa.contract.dto.ResultMsg;
import com.jzy.hio.oa.meeting.dto.AccessoryIdDto;
import com.jzy.hio.oa.meeting.dto.MeetingInfoDto;
import com.jzy.hio.oa.meeting.dto.MeetingInfoParam;
import com.jzy.hio.utils.Page;
/**
 * 会议基本信息
 * 
 * @author shangb
 * @date 2018年5月2日 上午11:23:56
 */
public interface MeetingInfoService extends BaseOaService<MeetingInfo> {

	/**
	 * 新建会议，包括会议议程
	 * @author shangb
	 * @date 2018年3月28日 下午5:57:35
	 * @param json
	 * @return
	 */
	public Object saveMeetingInfoDto(MeetingInfoDto meetingInfoDto) throws HioMybatisInsertException;
	
	/**
	 *修改会议，包括会议议程
	 * @author shangb
	 * @date 2018年3月27日 下午2:54:43
	 * @param id
	 * @param json
	 * @return
	 */
	public Integer updateMeetingInfoDto(String id, MeetingInfoDto meetingInfoDto);

	/**
	 *查询会议状态
	 * @author shangb
	 * @date 2018年3月27日 下午8:24:10
	 * @param meetingInfo
	 * @return
	 */
	public String selectMeetingStatus(MeetingInfo meetingInfo);

	/**
	 *删除会议，包括会议议程
	 * @author shangb
	 * @date 2018年3月28日 上午11:04:42
	 * @param id
	 * @return
	 */
	public Integer deleteMeetingInfo(String id);

	/**
	 * 根据会议状态查询会议列表
	 * @author shangb
	 * @date 2018年3月29日 下午3:26:35
	 * @param map
	 * @return
	 */
	public Page getMeetingInfoByStatus(MeetingInfoParam meetingInfoParam);

	/**
	 * 调用吴飞发送cc消息的方法
	 * @author shangb
	 * @date 2018年4月24日 上午10:20:02
	 * @param ccUserIdList
	 * @param map cc上消息提醒显示得东西
	 */
	public void sendCcMessage(List<String> ccUserIdList, Map<String, Object> map, String msg);

	/**
	 * 查询出发送cc消息的userid的list，需去重
	 * 1、创建会议时发送给出创建人之外的所有相关人员
	 * @author shangb
	 * @date 2018年4月24日 上午11:09:58
	 * @param meetingInfo
	 * @return
	 */
	public List<String> makeCcUserIdList(MeetingInfoDto meetingInfoDto);

	/**
	 * 根据Id获取会议基本信息，包括按钮权限
	 * @author shangb
	 * @date 2018年5月3日 下午5:15:13
	 * @param id
	 * @return
	 */
	public MeetingInfoDto queryMeetingInfoById(String id);

	/**
	 * 分页返回符合条件的会议列表，包括按钮权限
	 * @author shangb
	 * @date 2018年5月3日 下午5:31:23
	 * @param meetingInfoParam
	 * @return
	 */
	public Page queryMeetingInfoPage(MeetingInfoParam meetingInfoParam);

	/**
	 * 根据表名bean生成Redis里的表主键id
	 * @author shangb
	 * @date 2018年5月4日 下午2:34:33
	 * @param type
	 * @return
	 */
	public AccessoryIdDto createRedisId(String type, Class typeClass);
	
	/**
	 * 
	 * <p>查询会议记录前校验权限<br>
	 * @author wliang
	 * @date 2018年6月25日 下午6:15:12 
	 * @param meetingInfo
	 * @return
	 * @throws HioMybatisQueryException
	 */
	public ResultMsg checkRightForMeetingDetail(MeetingInfo meetingInfo) throws HioMybatisQueryException;
	
	/**
	 * 
	 * <p>详情页面提交<br>
	 * @author wliang
	 * @date 2018年7月23日 下午8:56:44 
	 * @param meetingInfoDto
	 * @return
	 * @throws HioMybatisUpdateException
	 */
	public Integer updateMeetingToApprove(MeetingInfoDto meetingInfoDto) throws HioMybatisUpdateException;


}
