/**
 * @Title MeetingInfoController.java
 * @Package com.jzy.hio.oa.meeting.controller
 * @author shangb
 * @date 2018年3月26日 上午11:16:28
 * @version V1.0
 */

package com.jzy.hio.oa.meeting.controller;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.Base;
import com.jzy.hio.base.controller.BaseOaController;
import com.jzy.hio.entity.MeetingInfo;
import com.jzy.hio.exception.HioMybatisDeleteException;
import com.jzy.hio.exception.HioMybatisInsertException;
import com.jzy.hio.exception.HioMybatisQueryException;
import com.jzy.hio.exception.HioMybatisUpdateException;
import com.jzy.hio.oa.OaConstant;
import com.jzy.hio.oa.contract.dto.ResultMsg;
import com.jzy.hio.oa.meeting.dto.AccessoryIdDto;
import com.jzy.hio.oa.meeting.dto.MeetingInfoDto;
import com.jzy.hio.oa.meeting.dto.MeetingInfoParam;
import com.jzy.hio.oa.meeting.dto.TypeParam;
import com.jzy.hio.oa.meeting.service.MeetingAttendeesService;
import com.jzy.hio.oa.meeting.service.MeetingCopySendService;
import com.jzy.hio.oa.meeting.service.MeetingInfoService;
import com.jzy.hio.utils.LoginUser;
import com.jzy.hio.utils.OaUserUtil;
import com.jzy.hio.utils.Page;

/**
 *会议基本信息
 * @author shangb
 * @date 2018年3月26日 上午11:16:28
 */
@RestController
@RequestMapping("meeting/meetingInfo")
public class MeetingInfoController extends BaseOaController {
	
	private static Logger logger = LoggerFactory.getLogger(MeetingInfoController.class);

	@Autowired
	private MeetingInfoService meetingInfoService;
	
	@Autowired
	private MeetingAttendeesService meetingAttendeesService;
	
	@Autowired
	private MeetingCopySendService meetingCopySendService;
	
	@Autowired
	private OaUserUtil oaUserUtil;
	
	/**
	 * 根据Id获取会议基本信息，包括按钮权限
	 * @param id 业务对象主键
	 * @return 业务对象
	 */
	@RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
	public Object get(@PathVariable("id") String id) throws HioMybatisQueryException {
		MeetingInfoDto meetingInfoDto = meetingInfoService.queryMeetingInfoById(id);
		return meetingInfoDto;
	}
	
	/**
	 * 分页返回符合条件的会议列表，包括按钮权限
	 * 默认+按照会议状态排序：升序入参：orderBy m.status asc,m.begin_date asc，降序入参：orderBy m.status desc,m.begin_date desc
	 * 召开时间排序：升序orderBy begin_date asc,降序orderBy begin_date desc
	 * 按照距离开始时间排序：升序：distanceDate asc,降序：distanceDate desc
	 * 会议状态前端还是传0 1 2 3，会议状态：0草稿、1会议中、2未开始、3已结束
	 * 
	 * 查看页面可提供操作：
		草稿：创建人有“编辑+删除+提交+返回”；非创建人不显示草稿
		未开始：创建人有“编辑+删除+返回”；非创建人有“返回”
		会议中：未填写会议纪要则创建人和会议组织人显示“会议结束+返回”，纪要记录人显示“填写纪要+返回”，其他相关人显示“返回”；已填写会议纪要则创建人和会议组织人显示“会议结束+查看纪要+返回”，其他相关人显示“查看纪要+返回”
		已结束：未填写会议纪要则纪要记录人显示“填写纪要+返回”，其他相关人显示“返回”；已填写会议纪要则所有相关人员都显示“查看纪要+返回”
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/page", method = RequestMethod.POST , consumes = "application/json")
	public Object page(@RequestBody MeetingInfoParam meetingInfoParam) throws HioMybatisQueryException {
		Page page = meetingInfoService.queryMeetingInfoPage(meetingInfoParam);
		return page;
	}
	
	/**
	 * 保存会议
	 * 
	 * @param json
	 * @return
	 */
	@RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
	public Object save(@RequestBody MeetingInfoDto meetingInfoDto) throws HioMybatisInsertException {
		LoginUser loginUser = super.getLoginUser();// 获取当前登录用户
		String loginUserId = loginUser.getUserId();// 当前登录用户的userID
		meetingInfoDto.setLoginUserId(loginUserId);
		Object count = meetingInfoService.saveMeetingInfoDto(meetingInfoDto);
		return count;
	}
	
	/**
	 * 修改会议，包括会议议程
	 * 
	 * @param id
	 * @param map
	 * @return·
	 */
	@RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
	public Object update(@PathVariable("id") String id, @RequestBody MeetingInfoDto meetingInfoDto) throws HioMybatisUpdateException {
		LoginUser loginUser = super.getLoginUser();// 获取当前登录用户
		String loginUserId = loginUser.getUserId();// 当前登录用户的userID
		meetingInfoDto.setLoginUserId(loginUserId);
		Integer count = meetingInfoService.updateMeetingInfoDto(id, meetingInfoDto);
		return count;
	}
	
	/**
	 * 提交会议，结束会议
	 * 
	 * @param id
	 * @param map
	 * @return·
	 */
	@RequestMapping(value = "/updateStatus/{id}", method = RequestMethod.PUT, consumes = "application/json")
	public Object updateStatus(@PathVariable("id") String id, @RequestBody MeetingInfo meetingInfo) throws HioMybatisUpdateException {
		
		meetingInfo.setId(id);
		meetingInfo.setUpdateDate(new Date());
		MeetingInfo meeting = meetingInfoService.getObjectById(id);
		String emceeId = meeting.getEmceeId();// 主持人ID
		String meetingOrganizationId = meeting.getMeetingOrganizationId();// 会议组织人id
		String recorderId = meeting.getRecorderId();// 记录人员id
		// 通过会议ID查询计划会议参会人员userId
	    List<String> meetingAttendeesUserIdList = meetingAttendeesService.selectMeetingAttendeesUserIdListByMeetingId(id);
	    // 通过会议ID查询会议抄送人员userid
	    List<String> meetingCopySendIdList = meetingCopySendService.selectMeetingCopySendUserIdListByMeetingId(id);
	    if(Base.isEmpty(meeting.getMtTitle())
	    		|| Base.isEmpty(meeting.getOrganDepartId())
	    		|| Base.isEmpty(meeting.getBeginDate())
	    		|| Base.isEmpty(meeting.getEndDate())
	    		|| Base.isEmpty(emceeId)
	    		|| Base.isEmpty(meetingOrganizationId)
	    		|| Base.isEmpty(recorderId)
	    		|| Base.isEmpty(meetingAttendeesUserIdList) 		
	    		){
	    	
	    	throw new HioMybatisUpdateException("会议信息不完整,请完善会议信息!");
	    }else if(Base.isEquals(OaConstant.MEETING_STATUS_OVER, meetingInfo.getStatus())
	    		&& Base.isEquals(OaConstant.MEETING_STATUS_OVER, meeting.getStatus())){
	    	
	    	throw new HioMybatisUpdateException("会议已结束!");
	    	
	    }else if(Base.isEquals(OaConstant.MEETING_STATUS_NOT_BEGIN, meetingInfo.getStatus())
	    		&& Base.isEquals(OaConstant.MEETING_STATUS_NOT_BEGIN, meeting.getStatus())){
	    	
	    	throw new HioMybatisUpdateException("会议已提交!");
	    }
	    
	    //在详情页,提交的调用更新方法
	    if(Base.isEquals(OaConstant.MEETING_STATUS_NOT_BEGIN, meetingInfo.getStatus())){
	    	MeetingInfoDto meetingInfoDto = new MeetingInfoDto();
	    	meetingInfoDto.setStatus(OaConstant.MEETING_STATUS_NOT_BEGIN);
	    	meetingInfoDto.setId(id);
	    	return meetingInfoService.updateMeetingToApprove(meetingInfoDto);
	    }
	    
	    Integer count = meetingInfoService.update(meetingInfo);
	    
	    // 需要发送cc消息的userID的set
	    Set<String> ccUserIdSet = new HashSet<String>();
	    //接口按主键查询，非空校验
	    if(Base.isNotEmpty(emceeId)){
	    	 ccUserIdSet.add(emceeId);
	    }
	    if(Base.isNotEmpty(meetingOrganizationId)){
	    	ccUserIdSet.add(meetingOrganizationId);
	    }
	    if(Base.isNotEmpty(recorderId)){
	    	 ccUserIdSet.add(recorderId);
	    }
	    if(meetingAttendeesUserIdList != null && meetingAttendeesUserIdList.size() > 0) {
	    	for(String userId : meetingAttendeesUserIdList) {
	    		ccUserIdSet.add(userId);
	    	}
	    }
	    if(meetingCopySendIdList != null && meetingCopySendIdList.size() > 0) {
	    	for(String userId : meetingCopySendIdList) {
	    		ccUserIdSet.add(userId);
	    	}
	    }
	    Map<String,Object> map = new HashMap<String,Object>();
	    map.put("meetingType", 3);
	    map.put("operationUser", meeting.getUpdatePersonName());
	    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		String operationTime = sdf.format(meeting.getUpdateDate());
	    map.put("operationTime", operationTime);
	    List<String> userList = new ArrayList<String>();
		for(String userId : ccUserIdSet) {
			String imId = oaUserUtil.queryImUserIdByOaUserId(userId, getLoginUser().getTendId());
			userList.add(imId);
		}
		//手动结束会议的特殊标识
		map.put(OaConstant.OA_MEETING_MANUAL_OVER_KEY, OaConstant.OA_MEETING_MANUAL_OVER_VALUE);
	    meetingInfoService.sendCcMessage(userList, map, meeting.getMtTitle()+"结束");
		return count;
	}

	/**
	 * 删除会议，包括会议议程
	 *
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
	public Object delete(@PathVariable("id") String id) throws HioMybatisDeleteException {
		return meetingInfoService.deleteMeetingInfo(id);
	}
	
	/**
	 * 根据表名bean生成Redis里的表主键id
	 * 
	 * @author shangb
	 * @date 2018年4月23日 下午4:25:20
	 * @param type 类型:会议MeetingInfo，计划Plan，新闻News,会议纪要MeetingSummary
	 * @return
	 * @throws HioMybatisQueryException
	 */
	@RequestMapping(value = "/createRedisId", method = RequestMethod.POST , consumes = "application/json")
	public AccessoryIdDto createRedisId(@RequestBody TypeParam typeParam) throws HioMybatisQueryException {
		String type = typeParam.getType();
		Class typeClass = null;
		try {
			typeClass = Class.forName("com.jzy.hio.entity." + type);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		AccessoryIdDto accessoryIdDto = meetingInfoService.createRedisId(type, typeClass);
		return accessoryIdDto;
	}
	
	/**
	 * 
	 * <p>会议记录前校验权限<br>
	 * @author wliang
	 * @date 2018年6月25日 下午6:53:39 
	 * @param meetingInfoDto
	 * @return
	 * @throws HioMybatisQueryException
	 */
	@RequestMapping(value = "/checkRightForMeetingDetail", method = RequestMethod.POST, consumes = "application/json")
	public Object checkRightForMeetingDetail(@RequestBody MeetingInfo meetingInfo) throws HioMybatisQueryException {
		LoginUser loginUser = super.getLoginUser();// 获取当前登录用户
		//校验当前登陆人查看该会议的权限
		ResultMsg resultMsg = meetingInfoService.checkRightForMeetingDetail(meetingInfo);
		if(Base.isNotEmpty(resultMsg) && !resultMsg.isSuccess()){
			throw new HioMybatisQueryException(resultMsg.getMsg());
		}
		
		return resultMsg.isSuccess();
	}
	
	
}
