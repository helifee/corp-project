package com.jzy.hio.oa.mailbox.controller;

import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.oa.mailbox.param.MailboxAccountAndDomainNameParam;
import com.jzy.hio.oa.mailbox.service.MailboxDomainNameService;
import com.jzy.hio.utils.JacksonUtils;
import org.hibernate.validator.constraints.NotBlank;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.validation.Valid;

/**
 * 邮箱域名 Controller
 *
 * @author haoqipeng 2018-05-08
 */
@RestController
@RequestMapping("/mailboxDomainName")
public class MailboxDomainNameController extends BaseController {

    @Autowired
    private MailboxDomainNameService mailboxDomainNameService;

    /**
     * 根据主键查询数据
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @Override
    @GetMapping("/get/{id}")
    public Object get(@PathVariable String id) {
        return super.get(id);
    }

    /**
     * 保存邮箱账号和域名信息
     *
     * @param param 邮箱账号和域名参数
     * @return 返回对象
     */
    @PostMapping("/save")
    public Object save(@RequestBody @Valid MailboxAccountAndDomainNameParam param) {
        logger.info("\n\n\t\t【【【【【【【【邮箱域名保存操作，接口参数：{}\n\n", JacksonUtils.toJson(param));

        return doSave(param);
    }


    /**
     * 更新邮箱账号和域名信息
     *
     * @param param 邮箱账号和域名参数
     * @return 返回对象
     */
    @PostMapping("/update")
    public Object update(@RequestBody @Validated MailboxAccountAndDomainNameParam param) {
        logger.info("\n\n\t\t【【【【【【【【邮箱域名更新操作，接口参数：{}\n\n", JacksonUtils.toJson(param));
        return doSave(param);
    }

    /**
     * 调用RainLoop接口检查邮箱域名设置是否有效
     *
     * @param param 邮箱账号和域名参数
     * @return 域名有效返回true，无效返回false
     */
    @PostMapping("/checkMailboxDomainName")
    public Boolean checkMailboxDomainName(@RequestBody @Validated MailboxAccountAndDomainNameParam param) {

        // 根据提交参数调用RainLoop接口

        return null;
    }

    /**
     * 判断域名是否存在<br/>
     * 不存在时，需要前端表单输入域名设置信息
     *
     * @param domainName 要判断是否存在的域名
     * @return 域名存在返回true，不存在返回false
     */
    @GetMapping("checkDomainNameExist")
    public Boolean checkDomainNameExist(@RequestParam @NotBlank(message = "邮箱域名不能为空") String domainName) {
        // 根据域名字符串判断数据库表中是否存在
        return mailboxDomainNameService.checkDomainNameExist(domainName);
    }

    private Object doSave(MailboxAccountAndDomainNameParam param) {
        // 密码和确认密码不相同，返回错误
        //MailboxAccountParam mailboxAccountParam = param.getMailboxAccountParam();
        //if (mailboxAccountParam != null && !mailboxAccountParam.getConfirmPassword().equals(mailboxAccountParam.getPassword())) {
        //    return HioException.MAILBOX_CONFIRM_PASSWORD_NOT_RIGHT;
        //}

        // 保存
        return mailboxDomainNameService.saveOrUpdate(param);
    }
}
