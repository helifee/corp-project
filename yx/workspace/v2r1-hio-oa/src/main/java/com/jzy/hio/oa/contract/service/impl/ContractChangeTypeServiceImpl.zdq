package com.jzy.hio.oa.contract.service.impl;

import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.jzy.hio.base.Base;
import com.jzy.hio.base.service.impl.BaseOaServiceImpl;
import com.jzy.hio.entity.ContractChangeType;
import com.jzy.hio.exception.HioMybatisDeleteException;
import com.jzy.hio.exception.HioMybatisGetException;
import com.jzy.hio.exception.HioMybatisInsertException;
import com.jzy.hio.exception.HioMybatisUpdateException;
import com.jzy.hio.oa.OaConstant;
import com.jzy.hio.oa.contract.dto.ContractChangeTypeDto;
import com.jzy.hio.oa.contract.dto.ContractTypeDto;
import com.jzy.hio.oa.contract.dto.ResultMsg;
import com.jzy.hio.oa.contract.mapper.ContractChangeTypeMapper;
import com.jzy.hio.oa.contract.service.ContractChangeTypeService;
import com.jzy.hio.utils.DateUtil;
import com.jzy.hio.utils.LoginUser;
import com.jzy.hio.utils.Page;

/**
 * 
 * <p>合同变更类型实现接口<br>
 * @author wliang
 * @date 2018年4月25日 下午3:29:25
 */
@Service("contractChangeTypeService")
public class ContractChangeTypeServiceImpl extends BaseOaServiceImpl<ContractChangeType> implements ContractChangeTypeService {
	
	private static Logger logger = LoggerFactory.getLogger(ContractChangeTypeServiceImpl.class);
	
	@Autowired
	private ContractChangeTypeMapper contractChangeTypeMapper;

	/**
	 * 根据id合同变更类型信息
	 */
	@Override
	public ContractChangeTypeDto getContractChangeTypeById(String changeTypeId,LoginUser loginUser) throws HioMybatisGetException {
		
		logger.debug("getContractChangeTypeById---changeTypeId={}",changeTypeId);
		
		ContractChangeTypeDto contractChangeTypeDto = null;
		try {
			contractChangeTypeDto = contractChangeTypeMapper.getContractChangeTypeById(changeTypeId);
		} catch (Exception e) {
			//
			logger.error(">>>>>>>>>>>>>>>>>>>>>获取合同变更类型出错!id={}>>>>>>>>>>>>>>>>>>>>>",changeTypeId);
			throw new HioMybatisGetException(e);
		}
		
		
		return contractChangeTypeDto;
	}

	/**
	 * 新增合同变更类型信息
	 */
	@Override
	public int saveContractChangeType(ContractChangeTypeDto contractChangeTypeDto,LoginUser loginUser) throws HioMybatisInsertException {
		
		//名称重复校验
		ResultMsg resMsg = this.checkRepeatBeforeSaveOrUpdate(contractChangeTypeDto);
		if(Base.isNotEmpty(resMsg) && !resMsg.isSuccess()){
			throw new HioMybatisInsertException(resMsg.getMsg());
		}
		
		int count = 0;
		try {
			ContractChangeType contractChangeType = new ContractChangeType();
			//对象复制方法
			BeanUtils.copyProperties(contractChangeTypeDto,contractChangeType);
			//创建时间
			contractChangeType.setCreateDate(DateUtil.getDate(DateUtil.getCurDateTime()));
			//id
			if(Base.isEmpty(contractChangeType.getId())){
				contractChangeType.setId(generatePk());
			}
			
			//TODO 创建人
						
			//逻辑删除标识（0：正常；1：删除）
			contractChangeType.setDelflag(OaConstant.CONTRACT_DEL_FLAG_0);
			//并发版本
			contractChangeType.setConcurrencyVersion(OaConstant.CONTRACT_DEL_FLAG_0);
			count = save(contractChangeType);
			
		} catch (Exception e) {
			//
			logger.error(">>>>>>>>>>>>>>>>>>>>>新增合同变更类型出错!id={}>>>>>>>>>>>>>>>>>>>>>",contractChangeTypeDto.getId());
			throw new HioMybatisInsertException("新增合同变更类型出错!");
		}
		
		//
		return count;
	}

	/**
	 * 删除合同变更类型信息
	 */
	@Override
	public int deleteContractChangeTypeById(ContractChangeTypeDto contractChangeTypeDto,LoginUser loginUser) throws HioMybatisDeleteException{
		//删除前进行校验
		ResultMsg resultMsg = this.checkBeforeDeleteChangeType(contractChangeTypeDto.getId());
		int count = 0;
		if(resultMsg.isSuccess()){
			try {
				
				contractChangeTypeDto.setUpdateDate(DateUtil.getDate(DateUtil.getCurDateTime()));
				//变更类型没有上下级
				count = contractChangeTypeMapper.deleteContractChangeTypeById(contractChangeTypeDto);
				
			} catch (Exception e) {
				//
				logger.error(">>>>>>>>>>>>>>>>>>>>>删除合同变更类型出错!id={}>>>>>>>>>>>>>>>>>>>>>",contractChangeTypeDto.getId());
				throw new HioMybatisDeleteException("删除合同变更类型出错!");
			}
			
			
		}else{
			throw new HioMybatisDeleteException(resultMsg.getMsg());
		}
		
		return count;
	}

	/**
	 * 修改合同变更类型信息
	 */
	@Override
	public int updateContractChangeType(ContractChangeTypeDto contractChangeTypeDto,LoginUser loginUser) throws HioMybatisUpdateException {
		
		//名称重复校验
		ResultMsg resMsg = this.checkRepeatBeforeSaveOrUpdate(contractChangeTypeDto);
		if(Base.isNotEmpty(resMsg) && !resMsg.isSuccess()){
			throw new HioMybatisInsertException(resMsg.getMsg());
		}		
		
		int count = 0;
		try {
			ContractChangeType contractChangeType = new ContractChangeType();
			//对象复制方法
			BeanUtils.copyProperties(contractChangeTypeDto,contractChangeType);
			//更新时间
			contractChangeType.setUpdateDate(new Date());
			//并发版本
			contractChangeType.setConcurrencyVersion(contractChangeType.getConcurrencyVersion() == null?0:contractChangeType.getConcurrencyVersion() + 1);
			
			count = update(contractChangeType);
			
		} catch (Exception e) {
			//
			logger.error(">>>>>>>>>>>>>>>>>>>>>更新合同变更类型出错!id={}>>>>>>>>>>>>>>>>>>>>>",contractChangeTypeDto.getId());
			throw new HioMybatisUpdateException("更新合同变更类型出错!");
		}
		
		return count;
	}

	@Override
	public Page getContractChangeTypePage(ContractChangeTypeDto contractChangeTypeDto,LoginUser loginUser) throws HioMybatisGetException{
		//初始化page 页码、每页数据量
		pageStart(contractChangeTypeDto);
		//查询参数没有用到
		List<ContractChangeTypeDto> list = contractChangeTypeMapper.getContractChangeTypeList(contractChangeTypeDto);
		
		return super.pageReturn(list);
	}
	
	@Override
	public List<ContractChangeTypeDto> getContractChangeTypeList(
			ContractChangeTypeDto contractChangeTypeDto,LoginUser loginUser) throws HioMybatisGetException{
		
		//查询参数没有用到
		return contractChangeTypeMapper.getContractChangeTypeList(contractChangeTypeDto);
	}
	
	/**
	 * 
	 * <p> 合同变更类型删除前校验约束
	 *  已经被合同引用的变更类型不允许删除，提示“XXX已被使用，不允许删除。”<br>
	 * @author wliang
	 * @date 2018年4月24日 下午10:32:11 
	 * @param contractChangeTypeId
	 * @return
	 */
	public ResultMsg checkBeforeDeleteChangeType(String contractChangeTypeId){
		ResultMsg resultMsg = new ResultMsg();
		//resultMsg.setSuccess(true);
		StringBuffer msg = new StringBuffer();
		//查询类型被使用
		List<ContractChangeTypeDto> tList = contractChangeTypeMapper.getContractChangeTypeAndInfo(contractChangeTypeId);
		if(tList != null && tList.size() >= 1){
			//变更类型没有上下级，不用取子集
			msg.append(tList.get(0).getContractChangeType()).append("已被使用，不允许删除。");
			resultMsg.setSuccess(false);
			resultMsg.setMsg(msg.toString());
		}
		
		return resultMsg;
	}
	
	 /**
	   * 
	   * <p>合同变更类型名称重复校验<br>
	   * @author wliang
	   * @date 2018年4月26日 下午10:44:04 
	   * @param contractChangeTypeDto
	   * @return
	   */
	  public ResultMsg checkRepeatBeforeSaveOrUpdate(ContractChangeTypeDto contractChangeTypeDto){
		  //
		  ResultMsg resMsg = null;
		  List<ContractChangeTypeDto> oldDtoList = contractChangeTypeMapper.getContractChangeTypeByName(contractChangeTypeDto.getContractChangeType());
			if(Base.isNotEmpty(oldDtoList)){
				for(ContractChangeTypeDto dto : oldDtoList){
					if(Base.isEquals(dto.getContractChangeType(), contractChangeTypeDto.getContractChangeType())
							&& Base.isNotEquals(dto.getId(), contractChangeTypeDto.getId())){
						resMsg = new ResultMsg();
						resMsg.setMsg("存在相同名称的合同变更类型,请修改合同变更类型名称!");
						resMsg.setSuccess(false);
						return resMsg;
					}
				}
			}
			return resMsg;
	  }
	
	 protected Page pageReturn(List<? extends Object> list){
	     PageInfo<?> pageInfo = new PageInfo<>(list);
	     Page resultPage = super.getResultPage(pageInfo);
	     return resultPage;
	 }
	 
	 /**
	  * 
	  * <p>本次翻页起始下标和每页数据量
	  * @author wliang
	  * @date 2018年4月18日 下午4:18:56 
	  * @param contractChangeTypeDto
	  */
	 private void pageStart(ContractChangeTypeDto contractChangeTypeDto){
	     int pageNum = contractChangeTypeDto.getPageNum();
	     int pageCount = contractChangeTypeDto.getPageCount();
	     /*int pageStart = (pageNum - 1) * pageCount;
	     if (pageStart < 0) {
	         pageStart = 0;
	     }*/
	     PageHelper.startPage(pageNum, pageCount, true, false, null);
	 }
}
