package com.jzy.hio.oa.task.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.BaseConstants;
import com.jzy.hio.base.anno.TargetIM;
import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.exception.HioException;
import com.jzy.hio.oa.OaConstant;
import com.jzy.hio.oa.task.dto.QueryProjectTaskDto;
import com.jzy.hio.oa.task.dto.QueryTaskAuthDto;
import com.jzy.hio.oa.task.dto.QueryTaskDetailsDto;
import com.jzy.hio.oa.task.dto.QueryTaskIdDto;
import com.jzy.hio.oa.task.param.CancelFollowParam;
import com.jzy.hio.oa.task.param.DeleteTaskParam;
import com.jzy.hio.oa.task.param.FollowTaskParam;
import com.jzy.hio.oa.task.param.QueryProjectTaskParam;
import com.jzy.hio.oa.task.param.QueryTaskAuthParam;
import com.jzy.hio.oa.task.param.QueryTaskDetailsParam;
import com.jzy.hio.oa.task.param.QueryTaskListParam;
import com.jzy.hio.oa.task.param.SaveTaskParam;
import com.jzy.hio.oa.task.param.UpdateParam;
import com.jzy.hio.oa.task.param.UpdateStatusParam;
import com.jzy.hio.oa.task.service.TaskService;
import com.jzy.hio.utils.LoginUser;
import com.jzy.hio.utils.Page;

/**
 * 任务
 * 
 * @author wdy
 *
 */
@RestController
@RequestMapping("task")
public class TaskController extends BaseController {

	@Autowired
	private TaskService taskService;

	/**
	 * 查询任务id
	 * 
	 * @return
	 */
	@RequestMapping(value = "/queryTaskId", method = RequestMethod.POST, consumes = "application/json")
	public QueryTaskIdDto queryTaskId() {
		QueryTaskIdDto queryTaskIdDto = new QueryTaskIdDto();
		queryTaskIdDto.setTaskId(taskService.queryTaskId());
		queryTaskIdDto.setBusinessType(BaseConstants.AttachmentCategory.OA_TASK.getId());
		queryTaskIdDto.setApp(BaseConstants.App.OA.getId());
		return queryTaskIdDto;
	}

	/**
	 * 查询任务列表
	 * 
	 * @param queryTaskListParam
	 * @return
	 */
	@RequestMapping(value = "/getPage", method = RequestMethod.POST, consumes = "application/json")
	public Page queryScheduleMyTaskList(@RequestBody QueryTaskListParam queryTaskListParam) {

		Page page = new Page();

		LoginUser loginUser = getLoginUser();
		if (loginUser != null) {
			page = taskService.queryTaskList(queryTaskListParam, loginUser);
		} else {
			logger.info(">>>>>>>>未获取到登录信息>>>>>>>>>>");
		}

		return page;

	}

	/**
	 * 任务状态变更
	 */
	@RequestMapping(value = "/updateStatus", method = RequestMethod.POST, consumes = "application/json")
	public int updateStatus(@RequestBody UpdateStatusParam updateStatusParam) {

		LoginUser loginUser = getLoginUser();

		String imUserId = getUserIdIM();
		updateStatusParam.setImUserId(imUserId);

		if (loginUser != null) {
			return taskService.updateStatus(updateStatusParam, loginUser);
		} else {
			logger.info(">>>>>>>>未获取到登录信息>>>>>>>>>>");
			return 0;
		}
	}

	/**
	 * 任务删除
	 */
	@RequestMapping(value = "/delete", method = RequestMethod.POST, consumes = "application/json")
	public int delete(@RequestBody DeleteTaskParam deleteTaskParam) {

		LoginUser loginUser = getLoginUser();
		String imUserId = getUserIdIM();
		deleteTaskParam.setImUserId(imUserId);

		if (loginUser != null) {
			return taskService.delete(deleteTaskParam, loginUser);
		} else {
			logger.info(">>>>>>>>未获取到登录信息>>>>>>>>>>");
			return 0;
		}

	}

	/**
	 * 关注
	 */
	@RequestMapping(value = "/follow", method = RequestMethod.POST, consumes = "application/json")
	public int follow(@RequestBody FollowTaskParam followTaskParam) {

		LoginUser loginUser = getLoginUser();
		if (loginUser != null) {
			return taskService.follow(followTaskParam, loginUser);
		} else {
			logger.info(">>>>>>>>未获取到登录信息>>>>>>>>>>");
			return 0;
		}

	}

	/**
	 * 取消关注
	 */
	@RequestMapping(value = "/cancelFollow", method = RequestMethod.POST, consumes = "application/json")
	public int cancelFollow(@RequestBody CancelFollowParam cancelFollowParam) {

		LoginUser loginUser = getLoginUser();
		if (loginUser != null) {
			return taskService.cancelFollow(cancelFollowParam, loginUser);
		} else {
			logger.info(">>>>>>>>未获取到登录信息>>>>>>>>>>");
			return 0;
		}

	}

	/**
	 * 保存任务
	 */
	@RequestMapping(value = "/saveTask", method = RequestMethod.POST, consumes = "application/json")
	public int saveTask(@RequestBody @Validated SaveTaskParam saveTaskParam) {

		LoginUser loginUser = getLoginUser();

		String imUserId = getUserIdIM();
		saveTaskParam.setImUserId(imUserId);

		if (loginUser != null) {
			return taskService.saveTask(saveTaskParam, loginUser, true);
		} else {
			logger.info(">>>>>>>>未获取到登录信息>>>>>>>>>>");
			return 0;
		}

	}

	/**
	 * 查询任务详情
	 * 
	 * @param queryTaskDetailsParam
	 * @return
	 */
	@RequestMapping(value = "/queryTaskDetails", method = RequestMethod.POST, consumes = "application/json")
	public QueryTaskDetailsDto queryTaskDetails(@RequestBody QueryTaskDetailsParam queryTaskDetailsParam) {

		QueryTaskDetailsDto queryTaskDetailsDto = new QueryTaskDetailsDto();

		LoginUser loginUser = getLoginUser();
		
		if (loginUser != null) {
			
			boolean admin = false;
			List<String> roleIds = loginUser.getRoleIds();
			
			if (loginUser.isSuper()) {
				admin = true;
			} else {
				for (String roleId : roleIds) {
					if (isEquals(roleId, OaConstant.ADMINROLEID)) {
						admin = true;
						logger.info("*********************************有任务管理员权限***********************");
						break;
					}
				}
			}

			if (!admin) {

				/**
				 * 判断是否具备Role权限
				 *
				 * @param menuCode
				 *            传入OaSysMenu表的code字段
				 * @return
				 */
				admin = isRolePermission(BaseConstants.MYSQL_MENU_CODE_TASK_MANAGE);
			}

			queryTaskDetailsDto = taskService.queryTaskDetails(queryTaskDetailsParam, loginUser,admin);
			
		} else {
			logger.info(">>>>>>>>未获取到登录信息>>>>>>>>>>");

		}
		
		return queryTaskDetailsDto;
	}

	/**
	 * IM端查询任务详情(暂不使用)
	 * 
	 * @param queryTaskDetailsParam
	 * @return
	 */
	@TargetIM
	@GetMapping(value = "/queryTaskDetails/{taskId}/{tendId}")
	public QueryTaskDetailsDto queryTaskDetails(@PathVariable("taskId") String taskId, @PathVariable("tendId") String tendId) {

		QueryTaskDetailsDto queryTaskDetailsDto = new QueryTaskDetailsDto();

		QueryTaskDetailsParam queryTaskDetailsParam = new QueryTaskDetailsParam();
		queryTaskDetailsParam.setTaskId(taskId);

		LoginUser loginUser = getLoginUser();
		String imUserId = getUserIdIM();
		
		logger.info(">>>>>>>>>imUserId:>>{}>>>>>>>>>>>",imUserId);
		
		if (loginUser != null) {
			
			boolean admin = false;
			List<String> roleIds = loginUser.getRoleIds();
			
			if (loginUser.isSuper()) {
				admin = true;
			} else {
				for (String roleId : roleIds) {
					if (isEquals(roleId, OaConstant.ADMINROLEID)) {
						admin = true;
						logger.info("*********************************有任务管理员权限***********************");
						break;
					}
				}
			}

			if (!admin) {

				/**
				 * 判断是否具备Role权限
				 *
				 * @param menuCode
				 *            传入OaSysMenu表的code字段
				 * @return
				 */
				admin = isRolePermission(BaseConstants.MYSQL_MENU_CODE_TASK_MANAGE);
			}

			queryTaskDetailsDto = taskService.queryImTaskDetails(tendId, queryTaskDetailsParam, loginUser,imUserId,admin);
		} else {
			logger.info(">>>>>>>>未获取到登录信息>>>>>>>>>>");

		}
		return queryTaskDetailsDto;
	}

	/**
	 * 查询任务管理列表
	 * 
	 * @param queryTaskDetailsParam
	 * @return
	 */
	@RequestMapping(value = "/queryAdminTaskList", method = RequestMethod.POST, consumes = "application/json")
	public Page queryAdminTaskList(@RequestBody QueryTaskListParam queryTaskListParam) {

		LoginUser loginUser = getLoginUser();
		List<String> roleIds = loginUser.getRoleIds();
		
		boolean admin = false;
		
		if (loginUser.isSuper()) {
			admin = true;
		} else {
			for (String roleId : roleIds) {
				if (isEquals(roleId, OaConstant.ADMINROLEID)) {
					admin = true;
					logger.info("*********************************有任务管理员权限***********************");
					break;
				}
			}
		}

		if (!admin) {

			/**
			 * 判断是否具备Role权限
			 *
			 * @param menuCode
			 *            传入OaSysMenu表的code字段
			 * @return
			 */
			admin = isRolePermission(BaseConstants.MYSQL_MENU_CODE_TASK_MANAGE);
		}

		// 如果没有任务管理列表权限，报没有权限
		if (!admin) {
			throw new HioException("您无权访问该应用请联系系统管理员");
		}

		return taskService.queryAdminTaskList(queryTaskListParam);
	}

	/**
	 * 根据任务id更新任务
	 * 
	 * @param updateStatusParam
	 * @return
	 */
	@RequestMapping(value = "/updateTask", method = RequestMethod.POST, consumes = "application/json")
	public int updateTask(@RequestBody UpdateParam updateParam) {

		LoginUser loginUser = getLoginUser();

		String imUserId = getUserIdIM();
		updateParam.setImUserId(imUserId);

		if (loginUser != null) {
			return taskService.updateTask(updateParam, loginUser);
		} else {
			logger.info(">>>>>>>>未获取到登录信息>>>>>>>>>>");
			return 0;
		}

	}

	/**
	 * 查询任务对应操作权限
	 * 
	 * @param queryTaskAuthParam
	 *            查询任务对应操作权限输入对象
	 */
	@RequestMapping(value = "/queryTaskAuth", method = RequestMethod.POST, consumes = "application/json")
	public QueryTaskAuthDto queryTaskAuth(@RequestBody QueryTaskAuthParam queryTaskAuthParam) {

		QueryTaskAuthDto queryTaskAuthDto = new QueryTaskAuthDto();
		LoginUser loginUser = getLoginUser();
		if (loginUser != null) {
			
			boolean admin = false;
			List<String> roleIds = loginUser.getRoleIds();
			
			if (loginUser.isSuper()) {
				admin = true;
			} else {
				for (String roleId : roleIds) {
					if (isEquals(roleId, OaConstant.ADMINROLEID)) {
						admin = true;
						logger.info("*********************************有任务管理员权限***********************");
						break;
					}
				}
			}

			if (!admin) {

				/**
				 * 判断是否具备Role权限
				 *
				 * @param menuCode
				 *            传入OaSysMenu表的code字段
				 * @return
				 */
				admin = isRolePermission(BaseConstants.MYSQL_MENU_CODE_TASK_MANAGE);
			}
			
			queryTaskAuthDto = taskService.queryTaskAuth(queryTaskAuthParam,loginUser,admin);
		} else {
			logger.info(">>>>>>>>未获取到登录信息>>>>>>>>>>");
		}

		return queryTaskAuthDto;
	}

	/**
	 * 查询项目中任务列表
	 */
	@RequestMapping(value = "/queryProjectTaskList", method = RequestMethod.POST, consumes = "application/json")
	public Page queryProjectTaskList(@RequestBody QueryProjectTaskParam queryProjectTaskParam) {

		Page page = new Page();

		return taskService.queryProjectTaskList(queryProjectTaskParam);
	}
}
