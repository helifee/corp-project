
package com.jzy.hio.oa.project.service.impl;

import java.util.List;

import com.jzy.hio.base.BaseConstants;
import com.jzy.hio.entity.ProjectStageTaskInfo;
import com.jzy.hio.exception.HioMybatisInsertException;
import com.jzy.hio.exception.HioMybatisQueryException;
import com.jzy.hio.oa.OaConstant;
import com.jzy.hio.oa.project.dto.ProjectStageTaskInfoDto;
import com.jzy.hio.oa.project.dto.ProjectStageTaskInfoParam;
import com.jzy.hio.oa.project.mapper.ProjectStageTaskInfoMapper;
import com.jzy.hio.oa.project.service.ProjectInfoService;
import com.jzy.hio.oa.project.service.ProjectStageGroupService;
import com.jzy.hio.oa.project.service.ProjectStageTaskInfoService;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.oa.project.mapper.ProjectStageGroupMapper;

/**
 * 项目阶段分组
 * 
 * @author yangning
 */
@Service("projectStageTaskInfoService")
public class ProjectStageTaskInfoServiceImpl extends BaseServiceImpl<ProjectStageTaskInfo> implements ProjectStageTaskInfoService {

	@Autowired
	ProjectStageTaskInfoMapper projectStageTaskInfoMapper;
	@Autowired
	ProjectStageGroupMapper projectStageGroupMapper;

	@Autowired
	ProjectStageGroupService projectStageGroupService;
	@Autowired
	ProjectInfoService projectInfoService;

	/**
	 * 保存项目分组中任务
	 * 
	 * @param
	 * @return
	 * @throws Exception
	 */
	@Override
	public int saveProjectStageTaskInfo(ProjectStageTaskInfoDto projectStageTaskInfoDto) throws HioMybatisInsertException {

		String permission = projectInfoService.queryProjectPermission(projectStageTaskInfoDto.getProjectId(), OaConstant.PROJECTINPERSON, getLoginUser());
		int result = 0;

		if (OaConstant.PROJECTADMIN.equals(permission) || OaConstant.PROJECTCREATEPERSON.equals(permission) || OaConstant.PROJECTRESPONSIBLEPERSON.equals(permission)
				|| OaConstant.PROJECTPARTICIPANTPERSON.equals(permission)) {
			ProjectStageTaskInfoDto projectStageTaskInfo = new ProjectStageTaskInfoDto();
			BeanUtils.copyProperties(projectStageTaskInfoDto, projectStageTaskInfo);
			/**
			 * 不是在分组上创建的任务,默认放到第一个分组上
			 */
			if (isEmpty(projectStageTaskInfo.getStageGroupId())) {
				projectStageTaskInfo.setStageGroupId(projectStageGroupMapper.queryProjectStageGroupListByStageId(projectStageTaskInfo.getStageId()).get(0).getId());

			}
			ProjectStageTaskInfoParam projectStageTaskInfoParam = new ProjectStageTaskInfoParam();
			projectStageTaskInfoParam.setProjectStageGroupId(projectStageTaskInfo.getStageGroupId());
			List<ProjectStageTaskInfo> taskInfoList = projectStageTaskInfoMapper.queryTaskInfoList(projectStageTaskInfoParam);
			if (isNotEmpty(taskInfoList)) {
				double first = 0;
				double second = taskInfoList.get(0).getTaskOrder();
				projectStageTaskInfo.setGroupTaskOrder((first + second) / 2);
			} else {
				projectStageTaskInfo.setGroupTaskOrder(100);
			}
			result = save(projectStageTaskInfo);
			projectStageGroupService.updateRedisData(projectStageTaskInfo.getStageId());
		} else {
			logger.error("您当前无创建任务的权限!");
			throw new HioMybatisQueryException("您当前无创建任务的权限!");
		}
		return result;

	}

	/**
	 * 修改项目分组中任务
	 * 
	 * @param projectStageTaskInfoDto
	 * @return
	 * @throws HioMybatisInsertException
	 */
	@Override
	public int updateProjectStageTaskInfo(ProjectStageTaskInfoDto projectStageTaskInfoDto) throws HioMybatisInsertException {

		String permission = projectInfoService.queryProjectPermission(projectStageTaskInfoDto.getProjectId(), OaConstant.PROJECTINPERSON, getLoginUser());
		int result = 0;
		if (OaConstant.PROJECTADMIN.equals(permission) || OaConstant.PROJECTCREATEPERSON.equals(permission) || OaConstant.PROJECTRESPONSIBLEPERSON.equals(permission)
				|| OaConstant.PROJECTPARTICIPANTPERSON.equals(permission)) {
			ProjectStageTaskInfoDto projectStageTaskInfo = new ProjectStageTaskInfoDto();
			BeanUtils.copyProperties(projectStageTaskInfoDto, projectStageTaskInfo);
			if (isEmpty(projectStageTaskInfo.getStageGroupId())) {
				projectStageTaskInfo.setStageGroupId(projectStageGroupMapper.queryProjectStageGroupListByStageId(projectStageTaskInfo.getStageId()).get(0).getId());
			}
			result = update(projectStageTaskInfo);
			projectStageGroupService.updateRedisData(projectStageTaskInfo.getStageId());
		} else {
			logger.error("您当前无修改任务的权限!");
			throw new HioMybatisQueryException("您当前无修改任务的权限!");
		}
		return result;

	}

	/**
	 * 删除项目分组中任务
	 * 
	 * @param projectStageTaskInfoDto
	 * @return
	 * @throws HioMybatisInsertException
	 */
	@Override
	public int deleteProjectStageTaskInfo(ProjectStageTaskInfoDto projectStageTaskInfoDto) throws HioMybatisInsertException {

		String permission = projectInfoService.queryProjectPermission(projectStageTaskInfoDto.getProjectId(), OaConstant.PROJECTINPERSON, getLoginUser());
		int result = 0;

		if (OaConstant.PROJECTADMIN.equals(permission) || OaConstant.PROJECTCREATEPERSON.equals(permission) || OaConstant.PROJECTRESPONSIBLEPERSON.equals(permission)
				|| OaConstant.PROJECTPARTICIPANTPERSON.equals(permission)) {
		ProjectStageTaskInfoDto projectStageTaskInfo = new ProjectStageTaskInfoDto();
		BeanUtils.copyProperties(projectStageTaskInfoDto, projectStageTaskInfo);
		projectStageTaskInfo.setDelflag(BaseConstants.MYSQL_DELFLAG_DELETED);
		result = update(projectStageTaskInfo);
		projectStageGroupService.updateRedisData(projectStageTaskInfo.getStageId());

		} else {
			logger.error("您当前无删除任务的权限!");
			throw new HioMybatisQueryException("您当前无删除任务的权限!");
		}
		return result;

	}

	/**
	 * 拖拽排序
	 * 
	 * @param drapProjectStageGroupParam
	 * @return
	 */
	@Override
	public Object dragProjectStageTaskInfo(ProjectStageTaskInfoParam drapProjectStageGroupParam) throws HioMybatisQueryException {


		String permission = projectInfoService.queryProjectPermission(drapProjectStageGroupParam.getProjectId(), OaConstant.PROJECTINPERSON, getLoginUser());
		int result = 0;

		if (OaConstant.PROJECTADMIN.equals(permission) || OaConstant.PROJECTCREATEPERSON.equals(permission) || OaConstant.PROJECTRESPONSIBLEPERSON.equals(permission)
				|| OaConstant.PROJECTPARTICIPANTPERSON.equals(permission)) {

		String id = drapProjectStageGroupParam.getId();
		String firstSort = drapProjectStageGroupParam.getFirstSort();
		String afterSort = drapProjectStageGroupParam.getAfterSort();
		String stageId = drapProjectStageGroupParam.getProjectStageId();
		String stageGroupId = drapProjectStageGroupParam.getProjectStageGroupId();

		if (!"".equals(firstSort) && !"".equals(afterSort)) {
			ProjectStageTaskInfo projectStageTaskInfo = getObjectById(id);
			double first = Double.parseDouble(firstSort);
			double second = Double.parseDouble(afterSort);
			projectStageTaskInfo.setStageGroupId(stageGroupId);
			projectStageTaskInfo.setTaskOrder((second - first) / 2 + first);
			result = update(projectStageTaskInfo);
		}
		if ("".equals(firstSort)) {
			ProjectStageTaskInfo projectStageTaskInfo = getObjectById(id);
			double first = 0;
			double second = Double.parseDouble(afterSort);
			projectStageTaskInfo.setStageGroupId(stageGroupId);
			projectStageTaskInfo.setTaskOrder((second - first) / 2 + first);
			result = update(projectStageTaskInfo);
		}
		if ("".equals(afterSort)) {
			ProjectStageTaskInfo projectStageTaskInfo = getObjectById(id);
			double first = Double.parseDouble(firstSort);
			projectStageTaskInfo.setStageGroupId(stageGroupId);
			projectStageTaskInfo.setTaskOrder(first + 1);
			result = update(projectStageTaskInfo);
		}

		projectStageGroupService.updateRedisData(stageId);
		} else {
			logger.error("您当前无排序任务的权限!");
			throw new HioMybatisQueryException("您当前无排序任务的权限!");
		}
		return result;
	}

}
