package com.jzy.hio.oa.schedule.controller;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.anno.TargetIM;
import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.exception.HioMybatisInsertException;
import com.jzy.hio.oa.dictionary.dto.SysDictionaryDto;
import com.jzy.hio.oa.dictionary.service.SysDictionaryService;
import com.jzy.hio.oa.schedule.dto.QueryScheduleDetailsDto;
import com.jzy.hio.oa.schedule.dto.QueryScheduleIndexDto;
import com.jzy.hio.oa.schedule.dto.QueryScheduleIndexListDto;
import com.jzy.hio.oa.schedule.dto.QueryScheduleListDto;
import com.jzy.hio.oa.schedule.dto.SharedCalendarDto;
import com.jzy.hio.oa.schedule.dto.SharedCreatePersonDto;
import com.jzy.hio.oa.schedule.param.BuildScheduleParam;
import com.jzy.hio.oa.schedule.param.DeleteScheduleParam;
import com.jzy.hio.oa.schedule.param.QueryImScheduleDetailsParam;
import com.jzy.hio.oa.schedule.param.QueryScheduleDetailsParam;
import com.jzy.hio.oa.schedule.param.QueryScheduleListParam;
import com.jzy.hio.oa.schedule.param.ScheduleAuthParam;
import com.jzy.hio.oa.schedule.param.SharedCalendarParam;
import com.jzy.hio.oa.schedule.param.UpdateScheduleParam;
import com.jzy.hio.oa.schedule.service.ScheduleService;
import com.jzy.hio.oa.task.param.QueryScheduleTaskListParam;
import com.jzy.hio.utils.LoginUser;

/**
 * 日程
 * @author wdy
 *
 */
@RestController
@RequestMapping("schedule")
public class ScheduleController extends BaseController{

	private static Logger logger = LoggerFactory.getLogger(ScheduleController.class);

	@Autowired
	private ScheduleService scheduleService;
	@Autowired
	private SysDictionaryService sysDictionaryService;

	/**
	 * 新建日程
	 * 
	 * @param buildScheduleParam
	 * @return
	 */
	@RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
	public Object save(@RequestBody BuildScheduleParam buildScheduleParam) throws HioMybatisInsertException {
		try {
			LoginUser loginUser = getLoginUser();

			if(loginUser != null){
				return scheduleService.save(buildScheduleParam,loginUser);
			}else{
				logger.info(">>>>>>>>未获取到登录信息>>>>>>>>>>");
				return 0;
			}

		} catch (Exception e) {
			logger.error("新建日程失败!" + e.getMessage());
			throw new HioMybatisInsertException(e);
		}
	}

	/**
	 * 查询日程详情
	 * @param queryScheduleDetailsReqDto 
	 * @return
	 */
	@RequestMapping(value = "/queryScheduleDetails", method = RequestMethod.POST, consumes = "application/json")
	public QueryScheduleDetailsDto queryScheduleDetails(@RequestBody QueryScheduleDetailsParam queryScheduleDetailsParam){

		QueryScheduleDetailsDto queryScheduleDetailsDto = new QueryScheduleDetailsDto();
		
		LoginUser loginUser = getLoginUser();

		if(loginUser != null){
			Boolean isSuper = isSuper(getTendId(), loginUser.getUserId());//判断登录用户是否是管理员
			queryScheduleDetailsDto = scheduleService.queryScheduleDetails(queryScheduleDetailsParam,loginUser,isSuper);
		}else{
			logger.info(">>>>>>>>未获取到登录信息>>>>>>>>>>");
		}
		return queryScheduleDetailsDto;

	}
	
	/**
	 * IM端查询日程详情
	 * @param queryScheduleDetailsReqDto 
	 * @return
	 */
	@TargetIM
	@RequestMapping(value = "/queryImScheduleDetails", method = RequestMethod.POST, consumes = "application/json")
	public QueryScheduleDetailsDto queryImScheduleDetails(@RequestBody QueryImScheduleDetailsParam queryImScheduleDetailsParam){

		QueryScheduleDetailsDto queryScheduleDetailsDto = new QueryScheduleDetailsDto();
		
		LoginUser loginUser = getLoginUser();

		if(loginUser != null){
			Boolean isSuper = isSuper(getTendId(), loginUser.getUserId());//判断登录用户是否是管理员
			queryScheduleDetailsDto = scheduleService.queryImScheduleDetails(queryImScheduleDetailsParam.getTendId(),queryImScheduleDetailsParam,loginUser,isSuper);
		}else{
			logger.info(">>>>>>>>未获取到登录信息>>>>>>>>>>");
		}
		return queryScheduleDetailsDto;

	}

	/**
	 * 编辑日程
	 * 
	 * @param buildScheduleParam
	 * @return
	 */
	@RequestMapping(value = "/update", method = RequestMethod.POST, consumes = "application/json")
	public Object update(@RequestBody UpdateScheduleParam updateScheduleParam) throws HioMybatisInsertException {
		try {
			LoginUser loginUser = getLoginUser();
			if(loginUser != null){
				return scheduleService.update(updateScheduleParam,loginUser);
			}else{
				logger.info(">>>>>>>>未获取到登录信息>>>>>>>>>>");
				return 0;
			}
		} catch (Exception e) {
			logger.error("编辑日程失败!" + e.getMessage());
			throw new HioMybatisInsertException(e);
		}
	}

	/**
	 * 删除日程
	 * 
	 * @param buildScheduleParam
	 * @return
	 */
	@RequestMapping(value = "/delete", method = RequestMethod.POST, consumes = "application/json")
	public Object delete(@RequestBody DeleteScheduleParam deleteScheduleParam) throws HioMybatisInsertException {
		try {
			
			LoginUser loginUser = getLoginUser();
//			if(loginUser != null){
				return scheduleService.delete(deleteScheduleParam,loginUser);
//			}else{
//				logger.info(">>>>>>>>未获取到登录信息>>>>>>>>>>");
//				return 0;
//			}
		} catch (Exception e) {
			logger.error("删除日程失败!" + e.getMessage());
			throw new HioMybatisInsertException(e);
		}
	}

	/**
	 * 查询共享日历共享人信息
	 * @return
	 */
	@RequestMapping(value = "/querySharedCalendar", method = RequestMethod.POST, consumes = "application/json")
	public SharedCalendarDto querySharedCalendar(){

		LoginUser loginUser = getLoginUser();

		if(loginUser != null){
			return scheduleService.querySharedCalendar(loginUser);
		}else{
			logger.info(">>>>>>>>未获取到登录信息>>>>>>>>>>");
			SharedCalendarDto sharedCalendarDto = new SharedCalendarDto();
			return sharedCalendarDto;
		}
	}

	/**
	 * 查询日程列表
	 * @param queryScheduleListParam
	 * @return
	 */
	@RequestMapping(value = "/queryScheduleList", method = RequestMethod.POST, consumes = "application/json")
	public QueryScheduleListDto queryScheduleList(@RequestBody QueryScheduleListParam queryScheduleListParam){

		LoginUser loginUser = getLoginUser();

		if(loginUser != null){
			return scheduleService.queryNewScheduleList(queryScheduleListParam,loginUser);
		}else{
			logger.info(">>>>>>>>未获取到登录信息>>>>>>>>>>");
			QueryScheduleListDto queryScheduleListDto = new QueryScheduleListDto();
			return queryScheduleListDto;
		}

	}

	/**
	 * 共享日历
	 * @param sharedCalendarParam
	 * @return
	 */
	@RequestMapping(value = "/sharedCalendar", method = RequestMethod.POST, consumes = "application/json")
	public int sharedCalendar(@RequestBody SharedCalendarParam sharedCalendarParam) {

		LoginUser loginUser = getLoginUser();

		if(loginUser != null){
			return scheduleService.sharedCalendar(sharedCalendarParam,loginUser);
		}else{
			logger.info(">>>>>>>>未获取到登录信息>>>>>>>>>>");
			return 0;
		}
	}

	/**
	 * 查询日程共享创建人列表
	 * @author wdy
	 *
	 */
	@RequestMapping(value = "/querySharedCreatePersonList", method = RequestMethod.POST, consumes = "application/json")
	public List<SharedCreatePersonDto> querySharedCreatePersonList(@RequestBody QueryScheduleTaskListParam queryScheduleTaskListParam) {
		
		LoginUser loginUser = getLoginUser();
		

		if(loginUser != null){
			Boolean isSuper = isSuper(getTendId(), loginUser.getUserId());//是否是管理员
			return scheduleService.querySharedCreatePersonList(queryScheduleTaskListParam,loginUser);
		}else{
			logger.info(">>>>>>>>未获取到登录信息>>>>>>>>>>");
			List<SharedCreatePersonDto> list = new ArrayList<SharedCreatePersonDto>();
			return list;
		}
	}

	/**
	 * 日程权限查询
	 * @param scheduleAuthParam
	 * @return
	 */
	@RequestMapping(value = "/queryScheduleAuth", method = RequestMethod.POST, consumes = "application/json")
	public Boolean queryScheduleAuth(@RequestBody @Validated ScheduleAuthParam scheduleAuthParam ){
		return scheduleService.queryScheduleAuth(scheduleAuthParam);
	}

	/**
	 * 查询提醒开始前时间列表
	 * @return
	 */
	@RequestMapping(value = "/querySysDictionaryList", method = RequestMethod.POST, consumes = "application/json")
	public List<SysDictionaryDto> querySysDictionaryList(){

		return sysDictionaryService.querySysDictionaryList();
	}
	
	/**
	 * 查询首页是否有日程
	 */
	@RequestMapping(value = "/queryScheduleIndexCount", method = RequestMethod.POST, consumes = "application/json")
	public QueryScheduleIndexListDto queryScheduleIndexCount(@RequestBody QueryScheduleListParam queryScheduleListParam){
		
		LoginUser loginUser = getLoginUser();
		
		return scheduleService.queryScheduleIndexCount(queryScheduleListParam,loginUser);
	}
	
	/**
	 * 查询首页日程列表
	 */
	@RequestMapping(value = "/queryScheduleIndexList", method = RequestMethod.POST, consumes = "application/json")
	public QueryScheduleListDto queryScheduleIndexList(@RequestBody QueryScheduleListParam queryScheduleListParam){
		
		LoginUser loginUser = getLoginUser();
		
		return scheduleService.queryScheduleIndexList(queryScheduleListParam,loginUser);
	}
}
