
package com.jzy.hio.oa.project.service.impl;

import com.jzy.hio.exception.HioMybatisQueryException;
import com.jzy.hio.oa.OaConstant;
import com.jzy.hio.oa.project.dto.ProjectInfoDto;
import com.jzy.hio.oa.project.dto.ProjectOperationDto;
import com.jzy.hio.oa.project.service.ProjectInfoService;
import com.jzy.hio.oa.project.service.ProjectOperationService;
import com.jzy.hio.utils.LoginUser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.jzy.hio.annotation.DataSource;
import com.jzy.hio.oa.project.dto.ProjectConcernDto;
import com.jzy.hio.oa.project.service.ProjectConcernService;

/**
 * 按钮权限
 * @author yangning
 */
@Service("projectOperationService")
public class ProjectOperationServiceImpl implements ProjectOperationService {

	private static Logger logger = LoggerFactory.getLogger(ProjectOperationServiceImpl.class);

	@Autowired
	private ProjectConcernService projectConcernService;
	@Autowired
	private ProjectInfoService projectInfoService;

	@Override
	public ProjectOperationDto queryProjectOperation(String projectId, LoginUser loginUser) throws HioMybatisQueryException {

		ProjectOperationDto projectOperationDto = new ProjectOperationDto();
		String permission = projectInfoService.queryProjectPermission(projectId,OaConstant.PROJECTINPERSON , loginUser);
		ProjectInfoDto projectInfo = projectInfoService.getProjectInfoById(loginUser.getTendId(),projectId);

		/**
		 * 关注按钮
		 */
		ProjectConcernDto projectConcernDto = new ProjectConcernDto();
		projectConcernDto.setProjectId(projectId);
		projectConcernDto.setConcernPersonId(loginUser.getUserId());
		int contentCount = projectConcernService.queryProjectContentCount(projectConcernDto);
		if (contentCount > 0) {
			projectOperationDto.setFollow(OaConstant.PROJECTYES);
		} else {
			projectOperationDto.setFollow(OaConstant.PROJECTNO);
		}
		if ( OaConstant.PROJECTADMIN.equals(permission) ||
				OaConstant.PROJECTCREATEPERSON.equals(permission) ||
				OaConstant.PROJECTRESPONSIBLEPERSON.equals(permission)) {
			projectOperationDto.setUpdate(OaConstant.PROJECTYES);
			projectOperationDto.setProjectDelete(OaConstant.PROJECTYES);





			projectOperationDto.setProjectFinish(OaConstant.PROJECTYES);
			projectOperationDto.setProjectCancelFinish(OaConstant.PROJECTNO);

			projectOperationDto.setProjectRevoke(OaConstant.PROJECTYES);
			projectOperationDto.setProjectActivation(OaConstant.PROJECTNO);





			projectOperationDto.setCreateTask(OaConstant.PROJECTYES);
			projectOperationDto.setCreateApprove(OaConstant.PROJECTYES);
			projectOperationDto.setCreateDocument(OaConstant.PROJECTYES);



			projectOperationDto.setCreateStage(OaConstant.PROJECTYES);
			projectOperationDto.setUpdateStage(OaConstant.PROJECTYES);
			projectOperationDto.setDeleteStage(OaConstant.PROJECTYES);

			projectOperationDto.setCreateStageGroup(OaConstant.PROJECTYES);
			projectOperationDto.setUpdateStageGroup(OaConstant.PROJECTYES);
			projectOperationDto.setDeleteStageGroup(OaConstant.PROJECTYES);

			projectOperationDto.setDragStageGroup(OaConstant.PROJECTYES);
			projectOperationDto.setDragStageGroupTaskInfo(OaConstant.PROJECTYES);







			// 0进行中、1已延期、2未启动、3已完成、4已撤销。ProjectInfoStautsConstant
			if (OaConstant.PROJECTSTATUSFINISHED.equals(projectInfo.getProjectStatus())) {
				projectOperationDto.setUpdate(OaConstant.PROJECTNO);
				projectOperationDto.setProjectRevoke(OaConstant.PROJECTNO);
				projectOperationDto.setProjectActivation(OaConstant.PROJECTNO);
				projectOperationDto.setProjectFinish(OaConstant.PROJECTNO);
				projectOperationDto.setProjectCancelFinish(OaConstant.PROJECTYES);
			}
			if (OaConstant.PROJECTSTATUSCANCEL.equals(projectInfo.getProjectStatus())) {
				projectOperationDto.setProjectRevoke(OaConstant.PROJECTNO);
				projectOperationDto.setProjectActivation(OaConstant.PROJECTYES);
				projectOperationDto.setProjectFinish(OaConstant.PROJECTNO);
				projectOperationDto.setProjectCancelFinish(OaConstant.PROJECTNO);
			}
		} else if(OaConstant.PROJECTPARTICIPANTPERSON.equals(permission)){
			projectOperationDto.setCreateTask(OaConstant.PROJECTYES);

			projectOperationDto.setCreateStage(OaConstant.PROJECTNO);
			projectOperationDto.setUpdateStage(OaConstant.PROJECTNO);
			projectOperationDto.setDeleteStage(OaConstant.PROJECTNO);

			projectOperationDto.setCreateStageGroup(OaConstant.PROJECTYES);
			projectOperationDto.setUpdateStageGroup(OaConstant.PROJECTYES);
			projectOperationDto.setDeleteStageGroup(OaConstant.PROJECTYES);

			projectOperationDto.setDragStageGroup(OaConstant.PROJECTYES);
			projectOperationDto.setDragStageGroupTaskInfo(OaConstant.PROJECTYES);


			projectOperationDto.setUpdate(OaConstant.PROJECTNO);
			projectOperationDto.setProjectDelete(OaConstant.PROJECTNO);
			projectOperationDto.setProjectFinish(OaConstant.PROJECTNO);
			projectOperationDto.setProjectCancelFinish(OaConstant.PROJECTNO);
			projectOperationDto.setProjectRevoke(OaConstant.PROJECTNO);
			projectOperationDto.setProjectActivation(OaConstant.PROJECTNO);
		}
		else {

			projectOperationDto.setCreateTask(OaConstant.PROJECTNO);

			projectOperationDto.setCreateStage(OaConstant.PROJECTNO);
			projectOperationDto.setUpdateStage(OaConstant.PROJECTNO);
			projectOperationDto.setDeleteStage(OaConstant.PROJECTNO);

			projectOperationDto.setCreateStageGroup(OaConstant.PROJECTNO);
			projectOperationDto.setUpdateStageGroup(OaConstant.PROJECTNO);
			projectOperationDto.setDeleteStageGroup(OaConstant.PROJECTNO);

			projectOperationDto.setDragStageGroup(OaConstant.PROJECTNO);
			projectOperationDto.setDragStageGroupTaskInfo(OaConstant.PROJECTNO);



			projectOperationDto.setUpdate(OaConstant.PROJECTNO);
			projectOperationDto.setProjectDelete(OaConstant.PROJECTNO);
			projectOperationDto.setProjectFinish(OaConstant.PROJECTNO);
			projectOperationDto.setProjectCancelFinish(OaConstant.PROJECTNO);
			projectOperationDto.setProjectRevoke(OaConstant.PROJECTNO);
			projectOperationDto.setProjectActivation(OaConstant.PROJECTNO);
		}
		return projectOperationDto;
	}
}
