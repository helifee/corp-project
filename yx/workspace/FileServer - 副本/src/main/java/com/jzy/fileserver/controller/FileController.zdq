package com.jzy.fileserver.controller;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.AntPathMatcher;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.HandlerMapping;

import com.jzy.fileserver.controller.params.FileSendParam;
import com.jzy.fileserver.domain.Result;
import com.jzy.fileserver.service.FileService;
import com.jzy.fileserver.utils.FilePathUtils;

/**
 * 文件上传下载接口
 *
 * Created by daoqi on 2018年8月6日
 */
@RestController
public class FileController {

    @Autowired
    private FileService fileService;
	
	/**
	 * 文件秒传
	 * 
	 * @param fileSendParam
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/fileSecondSend", method = RequestMethod.POST)
	public Result fileSecondSend(@RequestBody FileSendParam fileSendParam) {
		return fileService.secondSend(fileSendParam);
	}
	
    /**
     * 文档上传接口
     * 
     * @param applicationCode
     * @param fileMd5
     * @param file
     * @return
     */
    @ResponseBody
    @RequestMapping(value = "/upload", method = RequestMethod.POST)
    public Result fileUpload(@RequestParam("applicationCode") String applicationCode,
    		@RequestParam("fileMd5") String fileMd5, @RequestParam("file") MultipartFile file) {
    	String fileName = file.getOriginalFilename();
//    	String fileName = fileMd5 + file.getOriginalFilename();	//测试用
		System.out.println("file upload " + fileName);
    	
    	Result secondSendResult = fileService.secondSend(new FileSendParam(applicationCode, fileMd5, fileName));
    	if(secondSendResult.isSuccess()) {
    		return Result.success(secondSendResult.getResult(), "文件秒传成功");
    	}
    	
        if (file.isEmpty()) {
        	return Result.fail("上传失败，文件是空的.");
        }
        
        //文件保存
        String fileLocation = FilePathUtils.getFullName(fileName);
        try {
            File dest = new File(fileLocation);
            if(!dest.getParentFile().exists()) {
            	dest.getParentFile().mkdirs();
            }
			BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(dest));
            out.write(file.getBytes());
            out.flush();
            out.close();
        } catch (FileNotFoundException e) {
            return Result.fail("上传失败" + e.getMessage());
            
        } catch (IOException e) {
            e.printStackTrace();
            return Result.fail("上传失败," + e.getMessage());
        }
        
        //文件管理信息处理
        long fileId = fileService.saveUserFile(applicationCode, fileMd5, fileName, fileLocation);
        
		return Result.success(fileId, "上传成功");
    }
    
    /**
     * 文件批量上传
     * 
     * @param request
     * @return
     */
    @RequestMapping(value = "/upload/batch", method = RequestMethod.POST)
    @ResponseBody
    public Result fileUploadBatch(HttpServletRequest request) {
        List<MultipartFile> files = ((MultipartHttpServletRequest) request).getFiles("file");
        MultipartFile file = null;
        BufferedOutputStream stream = null;
        for (int i = 0; i < files.size(); ++i) {
            file = files.get(i);
            if (!file.isEmpty()) {
            	return Result.fail("上传失败，文件是空的.");
            }
            
            try {
                byte[] bytes = file.getBytes();
                File dest = new File(file.getOriginalFilename());
				stream = new BufferedOutputStream(new FileOutputStream(dest));
                stream.write(bytes);
                stream.close();
            } catch (Exception e) {
                stream = null;
                return Result.fail("上传失败," + e.getMessage());
            }
            
        }
        return Result.success(null, "上传成功");
    }
    
    /**
     * 下载文件
     * 
     * @param applicationCode
     * @param imagePath
     * @param response
     */
    @RequestMapping(value = "/file/**", method = RequestMethod.GET)
    @ResponseBody
    public void download(HttpServletRequest request, HttpServletResponse response) {
		String pattern = (String) request.getAttribute(HandlerMapping.BEST_MATCHING_PATTERN_ATTRIBUTE);
		String relativePath = new AntPathMatcher().extractPathWithinPattern(pattern, request.getServletPath());
        File file = new File(FilePathUtils.toAbsolutePath(relativePath));
        if (file.exists()){
            fileService.download(file, response);
        }
    }
    
}
