package com.jzy.fileserver.docfile;


import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FileEventService {

  public interface Iface {

    public int send_message(int site, int confID, int serviceType, int messageType, String content) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void send_message(int site, int confID, int serviceType, int messageType, String content, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.send_message_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int send_message(int site, int confID, int serviceType, int messageType, String content) throws org.apache.thrift.TException
    {
      send_send_message(site, confID, serviceType, messageType, content);
      return recv_send_message();
    }

    public void send_send_message(int site, int confID, int serviceType, int messageType, String content) throws org.apache.thrift.TException
    {
      send_message_args args = new send_message_args();
      args.setSite(site);
      args.setConfID(confID);
      args.setServiceType(serviceType);
      args.setMessageType(messageType);
      args.setContent(content);
      sendBase("send_message", args);
    }

    public int recv_send_message() throws org.apache.thrift.TException
    {
      send_message_result result = new send_message_result();
      receiveBase(result, "send_message");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "send_message failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void send_message(int site, int confID, int serviceType, int messageType, String content, org.apache.thrift.async.AsyncMethodCallback<send_message_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      send_message_call method_call = new send_message_call(site, confID, serviceType, messageType, content, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class send_message_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int site;
      private int confID;
      private int serviceType;
      private int messageType;
      private String content;
      public send_message_call(int site, int confID, int serviceType, int messageType, String content, org.apache.thrift.async.AsyncMethodCallback<send_message_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.site = site;
        this.confID = confID;
        this.serviceType = serviceType;
        this.messageType = messageType;
        this.content = content;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("send_message", org.apache.thrift.protocol.TMessageType.CALL, 0));
        send_message_args args = new send_message_args();
        args.setSite(site);
        args.setConfID(confID);
        args.setServiceType(serviceType);
        args.setMessageType(messageType);
        args.setContent(content);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_send_message();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("send_message", new send_message());
      return processMap;
    }

    public static class send_message<I extends Iface> extends org.apache.thrift.ProcessFunction<I, send_message_args> {
      public send_message() {
        super("send_message");
      }

      public send_message_args getEmptyArgsInstance() {
        return new send_message_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public send_message_result getResult(I iface, send_message_args args) throws org.apache.thrift.TException {
        send_message_result result = new send_message_result();
        result.success = iface.send_message(args.site, args.confID, args.serviceType, args.messageType, args.content);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class send_message_args implements org.apache.thrift.TBase<send_message_args, send_message_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("send_message_args");

    private static final org.apache.thrift.protocol.TField SITE_FIELD_DESC = new org.apache.thrift.protocol.TField("site", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField CONF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("confID", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SERVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceType", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField MESSAGE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("messageType", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new send_message_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new send_message_argsTupleSchemeFactory());
    }

    public int site; // required
    public int confID; // required
    public int serviceType; // required
    public int messageType; // required
    public String content; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SITE((short)1, "site"),
      CONF_ID((short)2, "confID"),
      SERVICE_TYPE((short)3, "serviceType"),
      MESSAGE_TYPE((short)4, "messageType"),
      CONTENT((short)5, "content");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SITE
            return SITE;
          case 2: // CONF_ID
            return CONF_ID;
          case 3: // SERVICE_TYPE
            return SERVICE_TYPE;
          case 4: // MESSAGE_TYPE
            return MESSAGE_TYPE;
          case 5: // CONTENT
            return CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SITE_ISSET_ID = 0;
    private static final int __CONFID_ISSET_ID = 1;
    private static final int __SERVICETYPE_ISSET_ID = 2;
    private static final int __MESSAGETYPE_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SITE, new org.apache.thrift.meta_data.FieldMetaData("site", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CONF_ID, new org.apache.thrift.meta_data.FieldMetaData("confID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SERVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("serviceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MESSAGE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("messageType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(send_message_args.class, metaDataMap);
    }

    public send_message_args() {
    }

    public send_message_args(
      int site,
      int confID,
      int serviceType,
      int messageType,
      String content)
    {
      this();
      this.site = site;
      setSiteIsSet(true);
      this.confID = confID;
      setConfIDIsSet(true);
      this.serviceType = serviceType;
      setServiceTypeIsSet(true);
      this.messageType = messageType;
      setMessageTypeIsSet(true);
      this.content = content;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public send_message_args(send_message_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.site = other.site;
      this.confID = other.confID;
      this.serviceType = other.serviceType;
      this.messageType = other.messageType;
      if (other.isSetContent()) {
        this.content = other.content;
      }
    }

    public send_message_args deepCopy() {
      return new send_message_args(this);
    }

    @Override
    public void clear() {
      setSiteIsSet(false);
      this.site = 0;
      setConfIDIsSet(false);
      this.confID = 0;
      setServiceTypeIsSet(false);
      this.serviceType = 0;
      setMessageTypeIsSet(false);
      this.messageType = 0;
      this.content = null;
    }

    public int getSite() {
      return this.site;
    }

    public send_message_args setSite(int site) {
      this.site = site;
      setSiteIsSet(true);
      return this;
    }

    public void unsetSite() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SITE_ISSET_ID);
    }

    /** Returns true if field site is set (has been assigned a value) and false otherwise */
    public boolean isSetSite() {
      return EncodingUtils.testBit(__isset_bitfield, __SITE_ISSET_ID);
    }

    public void setSiteIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SITE_ISSET_ID, value);
    }

    public int getConfID() {
      return this.confID;
    }

    public send_message_args setConfID(int confID) {
      this.confID = confID;
      setConfIDIsSet(true);
      return this;
    }

    public void unsetConfID() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFID_ISSET_ID);
    }

    /** Returns true if field confID is set (has been assigned a value) and false otherwise */
    public boolean isSetConfID() {
      return EncodingUtils.testBit(__isset_bitfield, __CONFID_ISSET_ID);
    }

    public void setConfIDIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFID_ISSET_ID, value);
    }

    public int getServiceType() {
      return this.serviceType;
    }

    public send_message_args setServiceType(int serviceType) {
      this.serviceType = serviceType;
      setServiceTypeIsSet(true);
      return this;
    }

    public void unsetServiceType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVICETYPE_ISSET_ID);
    }

    /** Returns true if field serviceType is set (has been assigned a value) and false otherwise */
    public boolean isSetServiceType() {
      return EncodingUtils.testBit(__isset_bitfield, __SERVICETYPE_ISSET_ID);
    }

    public void setServiceTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVICETYPE_ISSET_ID, value);
    }

    public int getMessageType() {
      return this.messageType;
    }

    public send_message_args setMessageType(int messageType) {
      this.messageType = messageType;
      setMessageTypeIsSet(true);
      return this;
    }

    public void unsetMessageType() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGETYPE_ISSET_ID);
    }

    /** Returns true if field messageType is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageType() {
      return EncodingUtils.testBit(__isset_bitfield, __MESSAGETYPE_ISSET_ID);
    }

    public void setMessageTypeIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGETYPE_ISSET_ID, value);
    }

    public String getContent() {
      return this.content;
    }

    public send_message_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SITE:
        if (value == null) {
          unsetSite();
        } else {
          setSite((Integer)value);
        }
        break;

      case CONF_ID:
        if (value == null) {
          unsetConfID();
        } else {
          setConfID((Integer)value);
        }
        break;

      case SERVICE_TYPE:
        if (value == null) {
          unsetServiceType();
        } else {
          setServiceType((Integer)value);
        }
        break;

      case MESSAGE_TYPE:
        if (value == null) {
          unsetMessageType();
        } else {
          setMessageType((Integer)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SITE:
        return Integer.valueOf(getSite());

      case CONF_ID:
        return Integer.valueOf(getConfID());

      case SERVICE_TYPE:
        return Integer.valueOf(getServiceType());

      case MESSAGE_TYPE:
        return Integer.valueOf(getMessageType());

      case CONTENT:
        return getContent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SITE:
        return isSetSite();
      case CONF_ID:
        return isSetConfID();
      case SERVICE_TYPE:
        return isSetServiceType();
      case MESSAGE_TYPE:
        return isSetMessageType();
      case CONTENT:
        return isSetContent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof send_message_args)
        return this.equals((send_message_args)that);
      return false;
    }

    public boolean equals(send_message_args that) {
      if (that == null)
        return false;

      boolean this_present_site = true;
      boolean that_present_site = true;
      if (this_present_site || that_present_site) {
        if (!(this_present_site && that_present_site))
          return false;
        if (this.site != that.site)
          return false;
      }

      boolean this_present_confID = true;
      boolean that_present_confID = true;
      if (this_present_confID || that_present_confID) {
        if (!(this_present_confID && that_present_confID))
          return false;
        if (this.confID != that.confID)
          return false;
      }

      boolean this_present_serviceType = true;
      boolean that_present_serviceType = true;
      if (this_present_serviceType || that_present_serviceType) {
        if (!(this_present_serviceType && that_present_serviceType))
          return false;
        if (this.serviceType != that.serviceType)
          return false;
      }

      boolean this_present_messageType = true;
      boolean that_present_messageType = true;
      if (this_present_messageType || that_present_messageType) {
        if (!(this_present_messageType && that_present_messageType))
          return false;
        if (this.messageType != that.messageType)
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(send_message_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      send_message_args typedOther = (send_message_args)other;

      lastComparison = Boolean.valueOf(isSetSite()).compareTo(typedOther.isSetSite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSite()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.site, typedOther.site);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConfID()).compareTo(typedOther.isSetConfID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConfID()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.confID, typedOther.confID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServiceType()).compareTo(typedOther.isSetServiceType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServiceType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceType, typedOther.serviceType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessageType()).compareTo(typedOther.isSetMessageType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageType, typedOther.messageType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(typedOther.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, typedOther.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("send_message_args(");
      boolean first = true;

      sb.append("site:");
      sb.append(this.site);
      first = false;
      if (!first) sb.append(", ");
      sb.append("confID:");
      sb.append(this.confID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("serviceType:");
      sb.append(this.serviceType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageType:");
      sb.append(this.messageType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class send_message_argsStandardSchemeFactory implements SchemeFactory {
      public send_message_argsStandardScheme getScheme() {
        return new send_message_argsStandardScheme();
      }
    }

    private static class send_message_argsStandardScheme extends StandardScheme<send_message_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, send_message_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SITE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.site = iprot.readI32();
                struct.setSiteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONF_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.confID = iprot.readI32();
                struct.setConfIDIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SERVICE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.serviceType = iprot.readI32();
                struct.setServiceTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MESSAGE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.messageType = iprot.readI32();
                struct.setMessageTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, send_message_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SITE_FIELD_DESC);
        oprot.writeI32(struct.site);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CONF_ID_FIELD_DESC);
        oprot.writeI32(struct.confID);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SERVICE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.serviceType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MESSAGE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.messageType);
        oprot.writeFieldEnd();
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class send_message_argsTupleSchemeFactory implements SchemeFactory {
      public send_message_argsTupleScheme getScheme() {
        return new send_message_argsTupleScheme();
      }
    }

    private static class send_message_argsTupleScheme extends TupleScheme<send_message_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, send_message_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSite()) {
          optionals.set(0);
        }
        if (struct.isSetConfID()) {
          optionals.set(1);
        }
        if (struct.isSetServiceType()) {
          optionals.set(2);
        }
        if (struct.isSetMessageType()) {
          optionals.set(3);
        }
        if (struct.isSetContent()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetSite()) {
          oprot.writeI32(struct.site);
        }
        if (struct.isSetConfID()) {
          oprot.writeI32(struct.confID);
        }
        if (struct.isSetServiceType()) {
          oprot.writeI32(struct.serviceType);
        }
        if (struct.isSetMessageType()) {
          oprot.writeI32(struct.messageType);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, send_message_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.site = iprot.readI32();
          struct.setSiteIsSet(true);
        }
        if (incoming.get(1)) {
          struct.confID = iprot.readI32();
          struct.setConfIDIsSet(true);
        }
        if (incoming.get(2)) {
          struct.serviceType = iprot.readI32();
          struct.setServiceTypeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.messageType = iprot.readI32();
          struct.setMessageTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
      }
    }

  }

  public static class send_message_result implements org.apache.thrift.TBase<send_message_result, send_message_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("send_message_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new send_message_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new send_message_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(send_message_result.class, metaDataMap);
    }

    public send_message_result() {
    }

    public send_message_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public send_message_result(send_message_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public send_message_result deepCopy() {
      return new send_message_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public send_message_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof send_message_result)
        return this.equals((send_message_result)that);
      return false;
    }

    public boolean equals(send_message_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(send_message_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      send_message_result typedOther = (send_message_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("send_message_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class send_message_resultStandardSchemeFactory implements SchemeFactory {
      public send_message_resultStandardScheme getScheme() {
        return new send_message_resultStandardScheme();
      }
    }

    private static class send_message_resultStandardScheme extends StandardScheme<send_message_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, send_message_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, send_message_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class send_message_resultTupleSchemeFactory implements SchemeFactory {
      public send_message_resultTupleScheme getScheme() {
        return new send_message_resultTupleScheme();
      }
    }

    private static class send_message_resultTupleScheme extends TupleScheme<send_message_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, send_message_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, send_message_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
