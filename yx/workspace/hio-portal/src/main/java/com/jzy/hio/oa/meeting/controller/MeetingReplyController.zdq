package com.jzy.hio.oa.meeting.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.utils.LoginUtils;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.oa.meeting.dto.MeetingReplyDto;
import com.jzy.hio.oa.meeting.entity.MeetingReply;
import com.jzy.hio.oa.meeting.service.MeetingReplyService;
import com.jzy.tools.data.JacksonUtils;


/**
 * 与会人员表控制层
 * @author wangw
 *
 */
@RestController
@Api(tags = {"与会人员相关接口"})
@RequestMapping("/meeting/meetingReply")
public class MeetingReplyController extends ResponseModel{

	private static Logger log = LoggerFactory.getLogger(MeetingReplyController.class);

	@Autowired
	private MeetingReplyService meetingReplyService;
	/**
	 * 根据Id获取业务对象
	 *
	 * @param id  业务对象主键
	 *
	 * @return     业务对象
	 */
	@ApiOperation(value = "根据Id获取与会人员详情",notes = "根据Id获与会人员详情")
	@ApiImplicitParams(@ApiImplicitParam(name = "id",value = "与会人员信息id",required = true,dataType = "String",paramType = "path"))
	@RequestMapping(value="/get/{id}",method= RequestMethod.GET)
	public MessageResult get(@PathVariable("id")  String id){
		try {
			MeetingReply meetingReply = meetingReplyService.getObjectById(id);
			return getSuccessResultModel(meetingReply);
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
		
		
		/*MessageResult result=new MessageResult();
		try {
			String dubboResultInfo=meetingReplyDtoServiceCustomer.getObjectById(getUserJson(), "{\"id\":\""+id+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				MeetingReplyDto meetingReplyDto=JacksonUtils.fromJson(resultInfo, MeetingReplyDto.class);
				result.setResult(meetingReplyDto);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {
			//e.printStackTrace();
		    log.error("调用get方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;*/
	}


	/**
	 * 返回分页对象
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value = "查询会与会人员信息分页列表",notes = "查询与会人员信息分页列表")
   	@ApiImplicitParam(name = "map",value = "",required = true,dataType = "JSON")
	@RequestMapping(value="/page",method={RequestMethod.POST}, consumes="application/json")
	public MessageResult page(@RequestBody Map<String,Object> map){
		try {
			Page page = meetingReplyService.getPage(map);
			return getSuccessResultModel(page);
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
		
		/*MessageResult result=new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {
		    String dubboResultInfo=meetingReplyDtoServiceCustomer.getPage(getUserJson(), paramaterJson);
		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				PageBeanInfo pageInfo=JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
				result.setResult(pageInfo);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {
			//e.printStackTrace();
		    log.error("调用page方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;*/
	}
	/**
	 * 返回符合条件的列表
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value = "查询条件返回符合条件列表",notes = "查询条件返回符合条件列表")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "meetingReply",value = "condition query",required = true,dataType = "String")})
	@RequestMapping(value="/queryList",method={RequestMethod.POST}, consumes="application/json")
	public MessageResult queryList(@RequestBody MeetingReply meetingReply){
		try {
			List<MeetingReply> list = meetingReplyService.queryList(meetingReply);
			return  getSuccessResultModel(list); 
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
		
		/*MessageResult result=new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			String dubboResultInfo=meetingReplyDtoServiceCustomer.queryList(getUserJson(), paramaterJson);
		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		    if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				List<MeetingReplyDto> list=JacksonUtils.fromJson(resultInfo, ArrayList.class,MeetingReplyDto.class);
				result.setResult(list);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
		    }else{
		    	result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
		    }

		} catch (Exception e) {
			//e.printStackTrace();
			log.error("调用queryList方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;*/
	}


	/**
	 * 保存实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "保存meetingReply实体",notes = "保存meetingReply实体")
   	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "meetingReply",value = "save",required = true,dataType = "String")})
	@RequestMapping(value="/save",method= RequestMethod.POST, consumes="application/json")
	public MessageResult save(@RequestBody MeetingReply meetingReply){
		try {
			int save = meetingReplyService.save(meetingReply);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.SAVESUCCESS.getMsg());
			successResultModel.setResult(save);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.SAVEERROR.getMsg());
		}
		
		/*MessageResult result=new MessageResult();
		try {
			SimpleDateFormat dateFormater = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			t.setId(IDGenerator.getUUID());
			t.setReplyDate(dateFormater.format(new Date()));
			t.setUserId(userBeanInfo.getSecurityUserDto().getId());
			t.setUserName(userBeanInfo.getSecurityUserDto().getRealName());
			String saveJson= JacksonUtils.toJson(t);
			String dubboResultInfo=meetingReplyDtoServiceCustomer.save(getUserJson(), saveJson);
		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		    if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				MeetingReplyDto meetingReplyDto=JacksonUtils.fromJson(resultInfo, MeetingReplyDto.class);
				result.setResult(meetingReplyDto);
				result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
				result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
		    }else{
		    	result.setSuccess(MessageInfo.SAVEERROR.isResult());
				result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
		    }
		} catch (Exception e) {
			try {
				//e.printStackTrace();
			    ObjectMapper mapper = new ObjectMapper();
				String  paramJson = mapper.writeValueAsString(t);
				log.error("调用save方法:  【参数"+paramJson+"】======"+"【"+e.getMessage()+"】");
				result.setSuccess(MessageInfo.SAVEERROR.isResult());
				result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+e.getMessage()+"】");
			} catch (JsonProcessingException e1) {
				// TODO Auto-generated catch block
				//e1.printStackTrace();
			}

		}
		return result;*/
	}

	/**
	 * 删除实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "删除meetingReply实体",notes = "删除meetingReply实体")
	@ApiImplicitParam(name = "id",value = "meetingReply id",required = true,dataType = "String",paramType = "path")
	@RequestMapping(value="/delete/{id}",method= RequestMethod.DELETE)
	public MessageResult delete(@PathVariable("id")  String id){
		try {
			int deleteObjectById = meetingReplyService.deleteObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deleteObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
		
		/*MessageResult result=new MessageResult();
		try {
			String dubboResultInfo=meetingReplyDtoServiceCustomer.deleteObjectById(getUserJson(), "{\"id\":\""+id+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				MeetingReplyDto meetingReplyDto=JacksonUtils.fromJson(resultInfo, MeetingReplyDto.class);
				result.setResult(meetingReplyDto);
				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.DELETEERROR.isResult());
				result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {
			//e.printStackTrace();
		    log.error("调用delete方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.DELETEERROR.isResult());
			result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】");
		}

		return result;*/
	}


	/**
	 * 删除实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "删除meetingReply实体",notes = "删除meetingReply实体")
	@ApiImplicitParam(name = "id",value = "meetingReply id",required = true,dataType = "String",paramType = "path")
	@RequestMapping(value="/deleteBatch/{ids}",method= RequestMethod.DELETE)
	public MessageResult deleteBatch(@PathVariable("ids")  String ids){
		try {
			List<String> deleteMethod =  Arrays.asList(ids.split(","));
			int count = meetingReplyService.deleteAllObjectByIds(deleteMethod);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(count);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
		
		
		/*MessageResult result=new MessageResult();
		try {
			String dubboResultInfo=meetingReplyDtoServiceCustomer.deleteAllObjectByIds(getUserJson(), "{\"id\":\""+ids+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				MeetingReplyDto meetingReplyDto=JacksonUtils.fromJson(resultInfo, MeetingReplyDto.class);
				result.setResult(meetingReplyDto);
				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.DELETEERROR.isResult());
				result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {
			//e.printStackTrace();
		    log.error("调用delete方法:  【参数"+ids+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.DELETEERROR.isResult());
			result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】");
		}

		return result;*/
	}

	/**
	 * 修改修改实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "修改meetingReply实体",notes = "修改meetingReply实体")
	@ApiImplicitParam(name = "id",value = "meetingReply id",required = true,dataType = "String",paramType = "path")
	@RequestMapping(value="/update/{id}",method= RequestMethod.PUT,consumes="application/json")
	public MessageResult update(@PathVariable("id")  String id, @RequestBody Map<String,Object> map){
		try {
			MeetingReply meetingReply = meetingReplyService.getObjectById(id);
			String json = JacksonUtils.toJson(meetingReply);
			Map<String,Object> oldMap= JacksonUtils.fromJson(json, HashMap.class);
			oldMap.putAll(map);
			String updateJson= JacksonUtils.toJson(oldMap);
			MeetingReply fromJson = JacksonUtils.fromJson(updateJson, MeetingReply.class);
			int updateCount = meetingReplyService.update(fromJson);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.UPDATESUCCESS.getMsg());
			successResultModel.setResult(updateCount);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.UPDATEERROR.getMsg());
		}
		
		
		/*MessageResult result=new MessageResult();
		MeetingReplyDto meetingReplyDto=null;
		try {
			String dubboResultInfo=meetingReplyDtoServiceCustomer.getObjectById(getUserJson(), "{\"id\":\""+id+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				 String resultInfo= dubboServiceResultInfo.getResult();
				 Map<String,Object> oldMap=JacksonUtils.fromJson(resultInfo, HashMap.class);
				 oldMap.putAll(map);
				 String updateJson= JacksonUtils.toJson(oldMap);
				 String updateDubboResultInfo=meetingReplyDtoServiceCustomer.update(null, updateJson);
				 DubboServiceResultInfo updateDubboServiceResultInfo= JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
				 if(updateDubboServiceResultInfo.isSucess()){
					 Integer i=JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class);
					 result.setResult(i);
					 result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
					 result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
				 }else{
					 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
					 result.setMsg(updateDubboServiceResultInfo.getMsg()+"【"+updateDubboServiceResultInfo.getExceptionMsg()+"】");
				 }
			}else{
				 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				 result.setMsg("不存在更新的对象");
			}
		} catch (Exception e) {
			try{
			 //e.printStackTrace();
			 ObjectMapper mapper = new ObjectMapper();
			 String  paramJson = mapper.writeValueAsString(meetingReplyDto);
			 log.error("调用update方法:  【参数"+id+","+paramJson+"】======"+"【"+e.getMessage()+"】");
			 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
			 result.setMsg(MessageInfo.UPDATEERROR.getMsg()+"【"+e.getMessage()+"】");
			}catch (JsonProcessingException e1) {
				// TODO Auto-generated catch block
				//e1.printStackTrace();
			}

		}
		return result;*/
	}
	

	/**
	 * 返回符合条件的列表
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value = "查询回复记录中该人员最新的一条回复记录信息",notes = "查询回复记录中该人员最新的一条回复记录信息")
   	@ApiImplicitParam(name = "map",value = "",required = true,dataType = "JSON")
	@RequestMapping(value="/queryMeetingReployByNew",method={RequestMethod.POST}, consumes="application/json")
	public MessageResult queryMeetingReployByNew(@RequestBody Map<String,Object> map){
		try {
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			map.put("userId", userBeanInfo.getSecurityUserDto().getId());
			MeetingReplyDto meetingReplyDto  = meetingReplyService.queryMeetingReployByNew(getUserJson(), map);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.QUERYSUCCESS.getMsg());
			successResultModel.setResult(meetingReplyDto);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return  getSuccessResultModel(MessageInfo.QUERYERROR.getMsg());
		}
		
		/*MessageResult result=new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			map.put("userId", userBeanInfo.getSecurityUserDto().getId());
			String dubboResultInfo=meetingReplyDtoServiceCustomer.queryMeetingReployByNew(getUserJson(), map);
		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		    if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				MeetingReplyDto meetingReplyDto=JacksonUtils.fromJson(resultInfo,MeetingReplyDto.class);
				result.setResult(meetingReplyDto);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
		    }else{
		    	result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
		    }

		} catch (Exception e) {
			//e.printStackTrace();
			log.error("调用queryMeetingReployByNew方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;*/
	}
	
	
	 
	
	/**
	 * 返回符合条件的列表
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value = "查询回复记录中该人员最新的一条回复记录信息",notes = "查询回复记录中该人员最新的一条回复记录信息")
   	@ApiImplicitParam(name = "map",value = "",required = true,dataType = "JSON")
	@RequestMapping(value="/operationMeeting",method={RequestMethod.POST}, consumes="application/json")
	public MessageResult operationMeeting(@RequestBody Map<String,Object> map){
		try {
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			map.put("userId", userBeanInfo.getSecurityUserDto().getId());
			MeetingReplyDto meetingReplyDto  = meetingReplyService.queryMeetingReployByNew(getUserJson(), map);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.QUERYSUCCESS.getMsg());
			successResultModel.setResult(meetingReplyDto);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return  getSuccessResultModel(MessageInfo.QUERYERROR.getMsg());
		}
		
		
		
		/*MessageResult result=new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			map.put("userId", userBeanInfo.getSecurityUserDto().getId());
			String dubboResultInfo=meetingReplyDtoServiceCustomer.queryMeetingReployByNew(getUserJson(), map);
		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		    if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				MeetingReplyDto meetingReplyDto=JacksonUtils.fromJson(resultInfo,MeetingReplyDto.class);
				result.setResult(meetingReplyDto);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
		    }else{
		    	result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
		    }

		} catch (Exception e) {
			//e.printStackTrace();
			log.error("调用queryMeetingReployByNew方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;*/
	}
	
	
	/**
	 * 返回符合条件的列表
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value = "查询与会人员id和名称的集合信息",notes = "查询与会人员id和名称的集合信息")
   	@ApiImplicitParam(name = "map",value = "",required = true,dataType = "JSON")
	@RequestMapping(value="/getUserInfoByMeetingId",method={RequestMethod.POST}, consumes="application/json")
	public MessageResult getUserInfoByMeetingId(@RequestBody Map<String,Object> map){
		try {
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			map.put("userId", userBeanInfo.getSecurityUserDto().getId());
			MeetingReplyDto meetingReplyDto=meetingReplyService.getUserInfoByMeetingId(getUserJson(), map);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.QUERYSUCCESS.getMsg());
			successResultModel.setResult(meetingReplyDto);
			return successResultModel;

		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return  getSuccessResultModel(MessageInfo.QUERYERROR.getMsg());
		}
		
		
		/*MessageResult result=new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			map.put("userId", userBeanInfo.getSecurityUserDto().getId());
			
			String dubboResultInfo=meetingReplyDtoServiceCustomer.getUserInfoByMeetingId(getUserJson(), map);
		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		    if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				MeetingReplyDto meetingReplyDto=JacksonUtils.fromJson(resultInfo,MeetingReplyDto.class);
				result.setResult(meetingReplyDto);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
		    }else{
		    	result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
		    }

		} catch (Exception e) {
			//e.printStackTrace();
			log.error("调用queryMeetingReployByNew方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;*/
	}
	
	
	
	/**
	 * 催办会议给所有未回复的人员发一条待阅
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value = "查询所有未回复的人员发一条待阅信息",notes = "查询所有未回复的人员发一条待阅信息")
   	@ApiImplicitParam(name = "map",value = "",required = true,dataType = "JSON")
	@RequestMapping(value="/reminderMeeting",method={RequestMethod.POST}, consumes="application/json")
	public MessageResult reminderMeeting(@RequestBody Map<String,Object> map){
		String paramaterJson = JacksonUtils.toJson(map);
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		try {
			String userId = userBeanInfo.getSecurityUserDto().getId();
			map.put("userId", userId);
			int count = meetingReplyService.reminderMeeting(getUserJson(), paramaterJson);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.QUERYSUCCESS.getMsg());
			successResultModel.setResult(count);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return  getSuccessResultModel(MessageInfo.QUERYERROR.getMsg());
		}
		
		/*MessageResult result=new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		try {
			String userId = userBeanInfo.getSecurityUserDto().getId();
			map.put("userId", userId);
			String dubboResultInfo=meetingReplyDtoServiceCustomer.reminderMeeting(getUserJson(), paramaterJson);
		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		    if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				List<MeetingDto> list=JacksonUtils.fromJson(resultInfo, ArrayList.class,MeetingDto.class);
				result.setResult(list);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
		    }else{
		    	result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
		    }

		} catch (Exception e) {
			//e.printStackTrace();
			log.error("调用getAllMeetingByParameter方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;*/
	}

	 private String getUserJson(){
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userJson = JacksonUtils.toJson(userBeanInfo);
			return userJson;
	  }

}
