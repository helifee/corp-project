package com.jzy.hio.oa.servey.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.base.utils.DubboServiceResultInfo;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.base.utils.SecurityUserDto;
import com.jzy.hio.oa.servey.dto.ServeyQuestionDto;
import com.jzy.hio.oa.servey.dto.service.ServeyDtoServiceCustomer;
import com.jzy.hio.oa.servey.dto.service.ServeyQuestionDtoServiceCustomer;
import com.jzy.hio.oa.servey.entity.Servey;
import com.jzy.hio.oa.servey.service.ServeyService;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.tools.login.LoginUtils;

/**
 * 调查问卷控制层
 * 
 * @author admin
 *
 */
@Controller
@RequestMapping("/servey/serveyCreate")
public class ServeyCreateController extends BaseController<ServeyService> {

	@Autowired
	private ServeyDtoServiceCustomer serveyDtoServiceCustomer;

	@Autowired
	private ServeyQuestionDtoServiceCustomer serveyQuestionDtoServiceCustomer;

	@Autowired
	private ServeyService serveyService;

	@Override
	@RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
	public @ResponseBody MessageResult save(@RequestBody String json) {
		MessageResult result = new MessageResult();
		try {
			Map<String, Object> map = json2map(json);
			Object saveObj = serveyService.saveServey(getUserInfoJson(), map);
			result.setResult(saveObj, "保存对象成功!");
		} catch (Exception e) {
			log.error("保存对象失败!" + e.getMessage());
			result.setError("保存对象失败!");
		}
		return result;
	}

	/**
	 * 保存实体对象
	 * 
	 * @param t
	 * @return
	 */
	@RequestMapping(value = "/createServey", method = RequestMethod.POST, consumes = "application/json")
	public @ResponseBody MessageResult createServey(@RequestBody Map<String, Object> map) {
		String paramaterJson = JacksonUtils.toJson(map);
		return this.save(paramaterJson);
	}

	@Override
	public MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> paramMap) {
		if (super.isEmpty(paramMap)) {
			return getEmptyResult();
		}
		MessageResult result = new MessageResult();
		try {
			// 数据库中的老数据
			Servey oldObj = service.getObjectById(id);
			Map<String, Object> oldMap = obj2map(oldObj);
			oldMap.putAll(paramMap);
			//
			int updateResult = service.updateServey(getUserInfoJson(), oldMap);
			result.setResult(updateResult, "更新对象成功!");
		} catch (Exception e) {
			log.error("更新对象失败!" + e.getMessage());
			result.setError("更新对象失败!");
		}
		return result;
	}

	@Override
	public MessageResult get(@PathVariable("id") String id) {
		MessageResult result = new MessageResult();
		try {
			Object object = service.getServeyById(id);
			result.setResult(object, "获取对象成功!");
		} catch (Exception e) {
			log.error("获取对象失败!" + e.getMessage());
			result.setError("获取对象失败!");
		}
		return result;
	}

	/**
	 * 分页查询、注意以下调用 getServeyByPage(map)
	 */
	@RequestMapping(value = "/page", method = { RequestMethod.POST }, consumes = "application/json")
	@Override
	public MessageResult page(Map<String, Object> map) {
		MessageResult result = new MessageResult();
		try {
			if (map != null && map.size() > 0) {
				Page page = service.getServeyByPage(map);
				String pageJson = JacksonUtils.toJson(page);
				result.setResult(page, "获取分页对象成功!");
			} else {
				Page page = service.getPage(new HashMap(), null, null);
				result.setResult(page, "获取分页对象成功!");
			}
		} catch (Exception e) {
			log.error("获取分页对象失败!" + e.getMessage());
			result.setError("获取分页对象失败!");
		}
		return result;
	}

	/**
	 * 返回分页对象
	 * 
	 * @param map
	 * @return
	 */
	public MessageResult pageByUser(@RequestBody Map<String, Object> map) {
		SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		map.put("createPersonId", securityUserBeanInfo.getSecurityUserDto().getId());
		return this.page(map);// this调用当前类的page
	}

	/**
	 * 返回符合条件的列表
	 *
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/queryServeyQuestionList", method = { RequestMethod.POST }, consumes = "application/json")
	public @ResponseBody MessageResult queryServeyQuestionList(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			String dubboResultInfo = serveyQuestionDtoServiceCustomer.queryList(getUserInfoJson(), paramaterJson);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				String resultInfo = dubboServiceResultInfo.getResult();
				List<ServeyQuestionDto> list = JacksonUtils.fromJson(resultInfo, ArrayList.class, ServeyQuestionDto.class);
				result.setResult(list);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			} else {
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.error("调用queryList方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;
	}

	@RequestMapping(value = "/getStartFlowInfo", method = RequestMethod.POST, consumes = "application/json")
	public @ResponseBody MessageResult getStartFlowInfo(@RequestBody Map<String, Object> resmap) {
		MessageResult result = new MessageResult();
		String id = (String) resmap.get("businessId");
		SecurityUserBeanInfo securityUserBeanInfo = new SecurityUserBeanInfo();
		if (resmap.get("token") != null) {// 加入白名单处理获取表单流程业务变量查询
			String token = String.valueOf(resmap.get("token"));
			String[] args = token.split("@");
			if (args.length == 2) {
				securityUserBeanInfo.setTendCode(args[1]);
			}
		} else {
			securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		}
		try {
			String dubboResultInfo = serveyDtoServiceCustomer.getStartFlowInfo(JacksonUtils.toJson(securityUserBeanInfo), id);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				String resultInfo = dubboServiceResultInfo.getResult();
				result.setResult(resultInfo);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			} else {
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
			}
		} catch (Exception e) {
			log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;
	}

	@RequestMapping(value = "/updateStatus", method = RequestMethod.POST, consumes = "application/json")
	public @ResponseBody MessageResult updateCount(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		SecurityUserBeanInfo securityUserBeanInfo = new SecurityUserBeanInfo();
		if (map.get("token") != null) {// 加入白名单处理获取新闻/知识表单流程业务回调
			String token = String.valueOf(map.get("token"));
			String[] args = token.split("@");
			if (args.length == 2) {
				securityUserBeanInfo.setTendCode(args[1]);
				SecurityUserBeanInfo securityUserBeanInfo1 = LoginUtils.getSecurityUserBeanInfo();
				SecurityUserDto securityUserDto = null;
				if (securityUserBeanInfo1 == null) {
					Map<String, Object> paramMap = new HashMap<String, Object>();
					paramMap.put("loginName", args[0]);
					// String userDubboInfoStr = userDtoServiceCustomer.queryList(JacksonUtils.toJson(securityUserBeanInfo),JacksonUtils.toJson(paramMap));
					// DubboServiceResultInfo userDubboInfo = JacksonUtils.fromJson(userDubboInfoStr,DubboServiceResultInfo.class);
					// if(userDubboInfo.isSucess()){
					// String userInfo = userDubboInfo.getResult();
					// List<SecurityUserDto> userDtos = JacksonUtils.fromJson(userInfo,List.class,SecurityUserDto.class);
					// if(userDtos!=null&&userDtos.size()>0){
					// securityUserDto = userDtos.get(0);
					// }
					// }

				} else {
					securityUserDto = securityUserBeanInfo1.getSecurityUserDto();
				}
				securityUserBeanInfo.setSecurityUserDto(securityUserDto);
			}
		} else {
			securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		}
		try {
			String dubboResultInfo = serveyDtoServiceCustomer.updateStatus(JacksonUtils.toJson(securityUserBeanInfo), paramaterJson);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				Integer i = JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), Integer.class);
				result.setResult(i);
				result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
				result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
			} else {
				result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				result.setMsg(dubboServiceResultInfo.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
			}
		} catch (Exception e) {
			log.error("调用update方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.UPDATEERROR.isResult());
			result.setMsg(MessageInfo.UPDATEERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;
	}

	@RequestMapping(value = "/investigationOver", method = RequestMethod.POST, consumes = "application/json")
	public @ResponseBody MessageResult investigationOver(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			String dubboResultInfo = serveyDtoServiceCustomer.noticeJob(getUserInfoJson(), paramaterJson);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				Integer i = JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), Integer.class);
				result.setResult(i);
				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
			} else {
				result.setSuccess(MessageInfo.DELETEERROR.isResult());
				result.setMsg(dubboServiceResultInfo.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
			}
		} catch (Exception e) {
			log.error("调用investigationOver方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.DELETEERROR.isResult());
			result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;
	}

	@RequestMapping(value = "/remindersNotInvestigators", method = RequestMethod.POST, consumes = "application/json")
	public @ResponseBody MessageResult remindersNotInvestigators(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			String dubboResultInfo = serveyDtoServiceCustomer.remindersNotInvestigators(getUserInfoJson(), paramaterJson);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				Integer i = JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), Integer.class);
				result.setResult(i);
				result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
				result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
			} else {
				result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				result.setMsg(dubboServiceResultInfo.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
			}
		} catch (Exception e) {
			log.error("调用remindersNotInvestigators方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.UPDATEERROR.isResult());
			result.setMsg(MessageInfo.UPDATEERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;
	}

	@RequestMapping(value = "/updateThruDate", method = RequestMethod.POST, consumes = "application/json")
	public @ResponseBody MessageResult updateThruDate(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			String dubboResultInfo = serveyDtoServiceCustomer.updateThruDate(getUserInfoJson(), paramaterJson);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				Integer i = JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), Integer.class);
				result.setResult(i);
				result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
				result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
			} else {
				result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				result.setMsg(dubboServiceResultInfo.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
			}
		} catch (Exception e) {
			log.error("调用updateThruDate方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.UPDATEERROR.isResult());
			result.setMsg(MessageInfo.UPDATEERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;
	}

}
