package com.jzy.hio.oa.office.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.base.utils.SecurityUserDto;
import com.jzy.hio.oa.office.dto.OfficeOutDto;
import com.jzy.hio.oa.office.dto.service.OfficeOutDtoServiceCustomer;
import com.jzy.hio.oa.office.entity.OfficeOut;
import com.jzy.hio.oa.office.service.OfficeOutService;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.tools.login.LoginUtils;

/**
 * 出库表控制层
 * 
 * @author admin
 *
 */
@Controller
@RequestMapping("/officeOut")
public class OfficeOutController extends BaseController<OfficeOutService>{

	private static Logger log = LoggerFactory.getLogger(OfficeOutController.class);

	@Autowired
	private OfficeOutDtoServiceCustomer officeOutDtoServiceCustomer;
	
	@Autowired
	private OfficeOutService officeOutService;

	// @Autowired
	// private UserDtoServiceCustomer userDtoServiceCustomer;
	//
	// @Autowired
	// private AuthenticationDtoServiceCustomer authenticationDtoServiceCustomer;






	/**
	 * 返回分页对象
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/getOfficeOutpage", method = { RequestMethod.POST }, consumes = "application/json")
	public @ResponseBody MessageResult getOfficeOutpage(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		try {
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			if (userBeanInfo != null) {
				SecurityUserDto securityUserDto = userBeanInfo.getSecurityUserDto();
				if (securityUserDto != null && !Objects.equals(securityUserDto.getType(), "2")) {
					map.put("userId", securityUserDto.getId());// 非管理员只查看经办人
				} else {
					// 当前用户是管理员 全量查询
					map.put("userId", "-1");
				}
			}
			Page page = officeOutService.getOfficeOutpage(map);
			result.setResult(page, MessageInfo.GETSUCCESS.getMsg());
		} catch (Exception e) {

			log.error("调用page方法:  【参数" + JacksonUtils.toJson(map) + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;
		
		
		/*try {
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			// userBeanInfo.getSecurityDirectDeptDto().getName()
			String userJson = JacksonUtils.toJson(userBeanInfo);
			if (userBeanInfo != null) {
				SecurityUserDto securityUserDto = userBeanInfo.getSecurityUserDto();
				if (securityUserDto != null && !Objects.equals(securityUserDto.getType(), "2")) {
					map.put("userId", securityUserDto.getId());// 非管理员只查看经办人
				} else {
					// 当前用户是管理员 全量查询
					map.put("userId", "-1");
				}
			}
			String paramaterJson = JacksonUtils.toJson(map);
			String dubboResultInfo = officeOutDtoServiceCustomer.getOfficeOutpage(getUserJson(), paramaterJson);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				String resultInfo = dubboServiceResultInfo.getResult();
				PageBeanInfo pageInfo = JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
				result.setResult(pageInfo);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			} else {
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
			}
		} catch (Exception e) {

			log.error("调用page方法:  【参数" + JacksonUtils.toJson(map) + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;*/
	}
	
	/**
	 * 保存实体对象
	 * @param t
	 * @return
	 */
	@Override
	@RequestMapping(value="/save",method= RequestMethod.POST, consumes="application/json")
	public @ResponseBody MessageResult save(@RequestBody String json){
		MessageResult result=new MessageResult();
		try {
			OfficeOutDto officeInfoOut=JacksonUtils.fromJson(json, OfficeOutDto.class);
			officeOutService.saveOfficeOutDto(officeInfoOut);
			result.setResult(JacksonUtils.toJson(officeInfoOut), MessageInfo.SAVESUCCESS.getMsg());
		} catch (Exception e) {
			log.error("保存对象失败!" + e.getMessage());
			result.setError("保存对象失败!");
		}
		return result;
	}


	/**
	 * 保存实体对象
	 * 
	 * @param t
	 * @return
	 */
	@RequestMapping(value = "/saveBatch", method = RequestMethod.POST, consumes = "application/json")
	public @ResponseBody MessageResult saveBatch(@RequestBody List<OfficeOut> list) {
		MessageResult result = new MessageResult();
		try {
			int count = officeOutService.saveBatch(list);
			result.setResult(count, MessageInfo.SAVESUCCESS.getMsg());
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;
		
		
		/*try {
			String saveJson = JacksonUtils.toJson(t);
			String dubboResultInfo = officeOutDtoServiceCustomer.saveBatch(getUserJson(), saveJson);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				String resultInfo = dubboServiceResultInfo.getResult();
				OfficeOutDto officeInfoOutDto = JacksonUtils.fromJson(resultInfo, OfficeOutDto.class);
				result.setResult(officeInfoOutDto);
				result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
				result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
			} else {
				result.setSuccess(MessageInfo.SAVEERROR.isResult());
				result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
			}
		} catch (Exception e) {
			try {

				ObjectMapper mapper = new ObjectMapper();
				String paramJson = mapper.writeValueAsString(t);
				log.error("调用save方法:  【参数" + paramJson + "】======" + "【" + e.getMessage() + "】");
				result.setSuccess(MessageInfo.SAVEERROR.isResult());
				result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + e.getMessage() + "】");
			} catch (JsonProcessingException e1) {
				// TODO Auto-generated catch block
				// e1.printStackTrace();
			}

		}
		return result;*/
	}




	/**
	 * 修改数量
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/updateCount", method = RequestMethod.POST, consumes = "application/json")
	public @ResponseBody MessageResult updateCount(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		try {
			int count = officeOutService.updateCount(map);
			result.setResult(count, MessageInfo.UPDATESUCCESS.getMsg());
		} catch (Exception e) {
			log.error("调用update方法:  【参数" + JacksonUtils.toJson(map) + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.UPDATEERROR.isResult());
			result.setMsg(MessageInfo.UPDATEERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;
		
		
		/*String paramaterJson = JacksonUtils.toJson(map);
		SecurityUserBeanInfo securityUserBeanInfo = new SecurityUserBeanInfo();
		if (map.get("token") != null) {// 加入白名单处理获取新闻/知识表单流程业务回调
			String token = String.valueOf(map.get("token"));
			String[] args = token.split("@");
			if (args.length == 2) {
				securityUserBeanInfo.setTendCode(args[1]);
				SecurityUserBeanInfo securityUserBeanInfo1 = LoginUtils.getSecurityUserBeanInfo();
				SecurityUserDto securityUserDto = null;
				if (securityUserBeanInfo1 == null) {
					Map<String, Object> paramMap = new HashMap<String, Object>();
					paramMap.put("loginName", args[0]);
					// String userDubboInfoStr = userDtoServiceCustomer.queryList(JacksonUtils.toJson(securityUserBeanInfo),JacksonUtils.toJson(paramMap));
					// DubboServiceResultInfo userDubboInfo = JacksonUtils.fromJson(userDubboInfoStr,DubboServiceResultInfo.class);
					// if(userDubboInfo.isSucess()){
					// String userInfo = userDubboInfo.getResult();
					// List<SecurityUserDto> userDtos = JacksonUtils.fromJson(userInfo,List.class,SecurityUserDto.class);
					// if(userDtos!=null&&userDtos.size()>0){
					// securityUserDto = userDtos.get(0);
					// }
					// }

				} else {
					securityUserDto = securityUserBeanInfo1.getSecurityUserDto();
				}
				securityUserBeanInfo.setSecurityUserDto(securityUserDto);
			}
		} else {
			securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		}
		try {
			String dubboResultInfo = officeOutDtoServiceCustomer.updateCount(JacksonUtils.toJson(securityUserBeanInfo), paramaterJson);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				Integer i = JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), Integer.class);
				result.setResult(i);
				result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
				result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
			} else {
				result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				result.setMsg(dubboServiceResultInfo.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
			}

		} catch (Exception e) {
			log.error("调用update方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.UPDATEERROR.isResult());
			result.setMsg(MessageInfo.UPDATEERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;*/
	}

	@RequestMapping(value = "/updateCountOver", method = RequestMethod.POST, consumes = "application/json")
	public @ResponseBody MessageResult updateCountOver(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		try {
			int count = officeOutService.updateCountOver(map);
			if(count == 5){
				   result.setError("库存不足，审结失败!");
			   }else{
				   result.setResult(count, MessageInfo.UPDATESUCCESS.getMsg());
			 }
		} catch (Exception e) {
			log.error("调用updateCountOver方法:  【参数" + JacksonUtils.toJson(map) + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.UPDATEERROR.isResult());
			result.setMsg(MessageInfo.UPDATEERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;
		
		
		
		/*String paramaterJson = JacksonUtils.toJson(map);
		try {
			String dubboResultInfo = officeOutDtoServiceCustomer.updateCountOver(getUserJson(), paramaterJson);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				Integer i = JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), Integer.class);
				result.setResult(i);
				result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
				result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
			} else {
				result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				result.setMsg(dubboServiceResultInfo.getMsg());
			}

		} catch (Exception e) {
			log.error("调用update方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.UPDATEERROR.isResult());
			result.setMsg(MessageInfo.UPDATEERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;*/
	}






	@RequestMapping(value = "/getUserInfo", method = RequestMethod.GET)
	public @ResponseBody MessageResult getUserInfo() {
		MessageResult result = new MessageResult();
		String userJson = getUserJson();
		Map securityUserDto = JacksonUtils.fromJson(userJson, Map.class);
		result.setResult(securityUserDto, "获取对象成功！");
		return result;
	}

	private String getUserJson() {
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		// userBeanInfo.getSecurityDirectDeptDto().getName()
		String userJson = JacksonUtils.toJson(userBeanInfo);
		return userJson;
	}

	@RequestMapping(value = "/getOfficeOut/{id}", method = RequestMethod.GET)
	public @ResponseBody MessageResult getOfficeOut(@PathVariable("id") String id) {
		MessageResult result = new MessageResult();
		try {
			OfficeOutDto officeOutDto = officeOutService.getOfficeOutDto(id);
			result.setResult(officeOutDto, MessageInfo.GETSUCCESS.getMsg());
		} catch (Exception e) {
			log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;
		
		/*try {
			String dubboResultInfo = officeOutDtoServiceCustomer.getOfficeOut(getUserJson(), "{\"id\":\"" + id + "\"}");
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				String resultInfo = dubboServiceResultInfo.getResult();
				OfficeOutDto officeOutDto = JacksonUtils.fromJson(resultInfo, OfficeOutDto.class);
				result.setResult(officeOutDto);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			} else {
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
			}
		} catch (Exception e) {

			log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;*/
	}

	@RequestMapping(value = "/getStartFlowInfo", method = RequestMethod.POST, consumes = "application/json")
	public @ResponseBody MessageResult getStartFlowInfo(@RequestBody Map<String, Object> resmap) {
		MessageResult result = new MessageResult();
		String id = (String) resmap.get("businessId");
		SecurityUserBeanInfo securityUserBeanInfo = new SecurityUserBeanInfo();
		if (resmap.get("token") != null) {// 加入白名单处理获取新闻/知识表单流程业务回调
			String token = String.valueOf(resmap.get("token"));
			String[] args = token.split("@");
			if (args.length == 2) {
				securityUserBeanInfo.setTendCode(args[1]);
				SecurityUserBeanInfo securityUserBeanInfo1 = LoginUtils.getSecurityUserBeanInfo();
				SecurityUserDto securityUserDto = null;
				if (securityUserBeanInfo1 == null) {
					Map<String, Object> paramMap = new HashMap<String, Object>();
					paramMap.put("loginName", args[0]);
					// String userDubboInfoStr = userDtoServiceCustomer.queryList(JacksonUtils.toJson(securityUserBeanInfo),JacksonUtils.toJson(paramMap));
					// DubboServiceResultInfo userDubboInfo = JacksonUtils.fromJson(userDubboInfoStr,DubboServiceResultInfo.class);
					// if(userDubboInfo.isSucess()){
					// String userInfo = userDubboInfo.getResult();
					// List<SecurityUserDto> userDtos = JacksonUtils.fromJson(userInfo,List.class,SecurityUserDto.class);
					// if(userDtos!=null&&userDtos.size()>0){
					// securityUserDto = userDtos.get(0);
					// }
					// }
				} else {
					securityUserDto = securityUserBeanInfo1.getSecurityUserDto();
				}
				securityUserBeanInfo.setSecurityUserDto(securityUserDto);
				this.setUserAuthInfo(securityUserBeanInfo, securityUserDto);
			}
		} else {
			securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		}
		try {
			Map map = officeOutService.getStartFlowInfo(securityUserBeanInfo, id);
			result.setResult(map, MessageInfo.GETSUCCESS.getMsg());
		} catch (Exception e) {
			log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;
		
		
		/*String id = (String) resmap.get("businessId");
		SecurityUserBeanInfo securityUserBeanInfo = new SecurityUserBeanInfo();
		if (resmap.get("token") != null) {// 加入白名单处理获取新闻/知识表单流程业务回调
			String token = String.valueOf(resmap.get("token"));
			String[] args = token.split("@");
			if (args.length == 2) {
				securityUserBeanInfo.setTendCode(args[1]);
				SecurityUserBeanInfo securityUserBeanInfo1 = LoginUtils.getSecurityUserBeanInfo();
				SecurityUserDto securityUserDto = null;
				if (securityUserBeanInfo1 == null) {
					Map<String, Object> paramMap = new HashMap<String, Object>();
					paramMap.put("loginName", args[0]);
					// String userDubboInfoStr = userDtoServiceCustomer.queryList(JacksonUtils.toJson(securityUserBeanInfo),JacksonUtils.toJson(paramMap));
					// DubboServiceResultInfo userDubboInfo = JacksonUtils.fromJson(userDubboInfoStr,DubboServiceResultInfo.class);
					// if(userDubboInfo.isSucess()){
					// String userInfo = userDubboInfo.getResult();
					// List<SecurityUserDto> userDtos = JacksonUtils.fromJson(userInfo,List.class,SecurityUserDto.class);
					// if(userDtos!=null&&userDtos.size()>0){
					// securityUserDto = userDtos.get(0);
					// }
					// }
				} else {
					securityUserDto = securityUserBeanInfo1.getSecurityUserDto();
				}
				securityUserBeanInfo.setSecurityUserDto(securityUserDto);
				this.setUserAuthInfo(securityUserBeanInfo, securityUserDto);
			}
		} else {
			securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		}
		try {
			String dubboResultInfo = officeOutDtoServiceCustomer.getStartFlowInfo(JacksonUtils.toJson(securityUserBeanInfo), id);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				String resultInfo = dubboServiceResultInfo.getResult();
				result.setResult(resultInfo);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			} else {
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
			}
		} catch (Exception e) {

			log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;*/
	}

	private void setUserAuthInfo(SecurityUserBeanInfo securityUserBeanInfo, SecurityUserDto securityUserDto) {
		try {
			// String authenticationInfodubboResultInfo = authenticationDtoServiceCustomer.getUserAuthenticationInfoWithoutResource(JacksonUtils.toJson(securityUserBeanInfo),
			// JacksonUtils.toJson(securityUserDto));
			// DubboServiceResultInfo authenticationInfodubboServiceResultInfo= JacksonUtils.fromJson(authenticationInfodubboResultInfo, DubboServiceResultInfo.class);
			// if(authenticationInfodubboServiceResultInfo.isSucess()){
			// String authenticationInforesultInfo= authenticationInfodubboServiceResultInfo.getResult();
			// AuthenticationDto authenticationDto=JacksonUtils.fromJson(authenticationInforesultInfo, AuthenticationDto.class);
			// //获取用户标准岗位
			// List<SecurityStandardRoleDto> securityStandardRoleDtoList =
			// JacksonUtils.fromJson(JacksonUtils.toJson(authenticationDto.getStandardRoleDtoList()),ArrayList.class,SecurityStandardRoleDto.class);
			// securityUserBeanInfo.setSecurityStandardRoleDtoList(securityStandardRoleDtoList);
			//
			// //获取用户通用角色
			// List<SecurityStandardRoleDto> securityCurrencyRoleDtoList =
			// JacksonUtils.fromJson(JacksonUtils.toJson(authenticationDto.getCurrencyRoleDtoList()),ArrayList.class,SecurityStandardRoleDto.class);
			// securityUserBeanInfo.setSecurityCurrencyRoleDtoList(securityCurrencyRoleDtoList);
			//
			// //获取用户岗位
			// List<SecurityPostDto> securityPostDtoList = JacksonUtils.fromJson(JacksonUtils.toJson(authenticationDto.getPostDtoList()),ArrayList.class,SecurityPostDto.class);
			// securityUserBeanInfo.setSecurityPostDtoList(securityPostDtoList);
			// /* //当前用户的菜单清单（未授权和已授权的）
			// List<SecurityResourceDto> SecurityResourceDtoList =
			// JacksonUtils.fromJson(JacksonUtils.toJson(authenticationDto.getResourceDtoList()),ArrayList.class,SecurityResourceDto.class);
			// securityUserBeanRelationInfo.setResourceDtoList(SecurityResourceDtoList);*/
			// //当前用户所在组织的类型
			// String securityOrganizationType = authenticationDto.getOrganizationType();
			// securityUserBeanInfo.setSecurityOrganizationType(securityOrganizationType);
			// //当前用户的一级公司
			// SecurityOrganizationDto securityTopCompanyDto = JacksonUtils.fromJson(JacksonUtils.toJson(authenticationDto.getTopCompanyDto()),SecurityOrganizationDto.class);
			// securityUserBeanInfo.setSecurityTopCompanyDto(securityTopCompanyDto);
			// //当前用户的直属公司
			// SecurityOrganizationDto securityDirectCompanyDto = JacksonUtils.fromJson(JacksonUtils.toJson(authenticationDto.getDirectCompanyDto()),SecurityOrganizationDto.class);
			// securityUserBeanInfo.setSecurityDirectCompanyDto(securityDirectCompanyDto);
			// //当前用户的一级部门
			// SecurityOrganizationDto securityTopDeptDto = JacksonUtils.fromJson(JacksonUtils.toJson(authenticationDto.getTopDeptDto()),SecurityOrganizationDto.class);
			// securityUserBeanInfo.setSecurityTopDeptDto(securityTopDeptDto);
			// //当前用户的直属部门
			// SecurityOrganizationDto securityDirectDeptDto = JacksonUtils.fromJson(JacksonUtils.toJson(authenticationDto.getDirectDeptDto()),SecurityOrganizationDto.class);
			// securityUserBeanInfo.setSecurityDirectDeptDto(securityDirectDeptDto);
			// //当前用户的项目
			// SecurityOrganizationDto securityGroupDto = JacksonUtils.fromJson(JacksonUtils.toJson(authenticationDto.getGroupDto()),SecurityOrganizationDto.class);
			// securityUserBeanInfo.setSecurityGroupDto(securityGroupDto);
			// //当前用户的分期
			// SecurityOrganizationDto securityBranchDto = JacksonUtils.fromJson(JacksonUtils.toJson(authenticationDto.getBranchDto()),SecurityOrganizationDto.class);
			// securityUserBeanInfo.setSecurityBranchDto(securityBranchDto);
			// }
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
