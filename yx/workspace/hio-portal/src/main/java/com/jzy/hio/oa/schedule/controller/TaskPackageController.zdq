package com.jzy.hio.oa.schedule.controller;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.oa.schedule.dto.TaskPackageDto;
import com.jzy.hio.oa.schedule.entity.TaskPackage;
import com.jzy.hio.oa.schedule.service.TaskPackageService;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.tools.login.LoginUtils;

/**
 * 日程管理、任务包
 * 
 * @author coffee<br/>
 *         2018年2月2日下午7:27:59
 */
@Controller
@RequestMapping("/taskPackage")
public class TaskPackageController extends BaseController<TaskPackageService> {

	@Autowired
	private TaskPackageService taskPackageService;

	public @ResponseBody MessageResult save(@RequestBody String json) {
		MessageResult result = new MessageResult();
		try {
			TaskPackageDto taskPackageDto = JacksonUtils.fromJson(json, TaskPackageDto.class);
			taskPackageService.saveObject(taskPackageDto);
			result.setResult(null, "保存对象成功!");
		} catch (Exception e) {
			log.error("保存对象失败!" + e.getMessage());
			result.setError("保存对象失败!");
		}
		return result;
	}

	@Override
	public MessageResult get(@PathVariable("id") String id) {
		MessageResult result = new MessageResult();
		try {
			TaskPackageDto task = taskPackageService.getTaskPackageDtoById(id);
			result.setResult(task, "获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			log.error("获取对象失败!" + e.getMessage());
			result.setError("获取对象失败!");
		}
		return result;
	}

	public @ResponseBody MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> paramMap) {
		MessageResult result = new MessageResult();
		try {
			// 数据库中的老数据
			Object oldObj = service.getObjectById(id);
			Map<String, Object> oldMap = obj2map(oldObj);
			// //之所以不直接把json转化为map是因为json中的时间类型传过来的是时间戳、先转化为entity会把时间戳转化为date、然后在转化为json可以保证数据类型的正确性
			// Class beanClass = ClassUtils.getGenericClass(service.getClass(), 1);
			// Object entity = JacksonUtils.fromJson(json, beanClass);
			// Map<String, Object> paramMap = obj2map(entity);
			oldMap.putAll(paramMap);
			//
			TaskPackageDto taskPackageDto = map2obj(oldMap, TaskPackageDto.class);
			int updateResult = taskPackageService.updateBean(taskPackageDto);
			result.setResult(updateResult, "更新对象成功!");
		} catch (Exception e) {
			log.error("更新对象失败!" + e.getMessage());
			result.setError("更新对象失败!");
		}
		return result;
	}

	/**
	 * 返回分页对象
	 * 
	 * @param paramater
	 * @return
	 */
	@RequestMapping(value = "/getTaskPackagePage", method = { RequestMethod.POST }, consumes = "application/json")
	public @ResponseBody MessageResult page(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		try {
			String userId = userBeanInfo.getSecurityUserDto().getId();
			if (isNotEmpty(map)) {
				map.put("userId", userId);
				Page page = taskPackageService.getTaskPackagePage(map);
				result.setResult(page, "获取分页对象成功!");
			} else {
				Page page = taskPackageService.getTaskPackagePage(new HashMap());
				result.setResult(page, "获取分页对象成功!");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error("调用page方法:  【参数" + map + "】======" + "【" + e.getMessage() + "】");
			result.setError("获取分页对象失败");
		}
		return result;
	}

	/**
	 * 任务包 列表界面选中记录、点击发布 <br/>
	 * 
	 * @author coffee 2018年2月2日下午7:41:09<br/>
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/publishMessage/{id}", method = RequestMethod.PUT)
	public @ResponseBody MessageResult publishMessage(@PathVariable("id") String id) {
		MessageResult result = new MessageResult();
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userJson = JacksonUtils.toJson(userBeanInfo);
		try {
			TaskPackage taskPackage = taskPackageService.getObjectById(id);
			int pushresult = taskPackageService.publishMessage(userJson, taskPackage);
			result.setResult(pushresult, "更新对象成功!");
		} catch (Exception e) {
			log.error("更新对象失败!" + e.getMessage());
			result.setError("更新对象失败!");
		}
		return result;
	}

	@RequestMapping(value = "/updateStatus", method = RequestMethod.PUT, consumes = "application/json")
	public @ResponseBody MessageResult updateStatus(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		try {
			int status = taskPackageService.updateStatus(map);
			result.setResult(status, "更新对象成功!");
		} catch (Exception e) {
			log.error("更新对象失败!" + e.getMessage());
			result.setError("更新对象失败!");
		}
		return result;
	}

	@RequestMapping(value = "/sendTaskAgain", method = RequestMethod.POST)
	public @ResponseBody MessageResult sendTaskAgain(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		try {
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userJson = JacksonUtils.toJson(userBeanInfo);
			int status = taskPackageService.sendTaskAgain(userJson, map);
			result.setResult(status, "更新对象成功!");
		} catch (Exception e) {
			log.error("更新对象失败!" + e.getMessage());
			result.setResult("更新对象失败!");
		}
		return result;
	}

	@RequestMapping(value = "/reminder/{id}", method = RequestMethod.POST)
	public @ResponseBody MessageResult reminder(@PathVariable("id") String id) {
		MessageResult result = new MessageResult();
		try {
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userJson = JacksonUtils.toJson(userBeanInfo);
			Map<String, Object> map = new HashMap<>();
			map.put("taskPackageId", id);
			int reminderResult = taskPackageService.reminder(userJson, map);
			result.setResult(reminderResult, "更新对象成功!");
		} catch (Exception e) {
			log.error("更新对象失败!" + e.getMessage());
			result.setError("");
		}

		return result;
	}
}
