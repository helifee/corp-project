package com.jzy.hio.oa.content.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.utils.IDGenerator;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.oa.content.dto.ContentChildTreeData;
import com.jzy.hio.oa.content.entity.ContentChild;
import com.jzy.hio.oa.content.service.ContentChildService;
import com.jzy.tools.data.JacksonUtils;


/**
 * 分类表控制层
 *
 * @author admin
 */
@RestController
@Api(tags = {"分类相关接口"})
@RequestMapping("/content/contentChild")
public class ContentChildController extends ResponseModel {

	private Logger log = LoggerFactory.getLogger(ContentChildController.class);

    @Autowired
    private ContentChildService contentChildService;

    /**
     * 根据Id获取业务对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @ApiOperation(value = "根据Id获取分类信息详情",notes = "根据Id获取分类信息详情")
	@ApiImplicitParams(@ApiImplicitParam(name = "id",value = "权限分类信息id",required = true,dataType = "String",paramType = "path"))
    @RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
    public MessageResult get(@PathVariable("id") String id) {
    	try {
    		ContentChild contentChild = contentChildService.getObjectById(id);
			return getSuccessResultModel(contentChild);
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
    	
        /*MessageResult result = new MessageResult();
        try {
            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
            String userJson = JacksonUtils.toJson(userBeanInfo);
            String dubboResultInfo = contentChildDtoServiceCustomer.getObjectById(userJson, "{\"id\":\"" + id + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                ContentChildDto contentChildDto = JacksonUtils.fromJson(resultInfo, ContentChildDto.class);
                result.setResult(contentChildDto);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }


    /**
     * 返回分页对象
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "查询权限分类信息分页列表",notes = "查询权限分类信息分页列表")
	@ApiImplicitParam(name = "map",value = "",required = true,dataType = "JSON")
    @RequestMapping(value = "/page", method = {RequestMethod.POST}, consumes = "application/json")
    public MessageResult page(@RequestBody Map<String, Object> map) {
    	try {
			Page page = contentChildService.getPage(map);
			return getSuccessResultModel(page);
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
    	
        /*MessageResult result = new MessageResult();
        String paramaterJson = JacksonUtils.toJson(map);
        try {
            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
            String userJson = JacksonUtils.toJson(userBeanInfo);
            String dubboResultInfo = contentChildDtoServiceCustomer.getPage(userJson, paramaterJson);
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                PageBeanInfo pageInfo = JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
                result.setResult(pageInfo);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用page方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }

    /**
     * 返回符合条件的列表
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "查询条件返回符合条件列表",notes = "查询条件返回符合条件列表")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "contentChild",value = "condition query",required = true,dataType = "String")})
    @RequestMapping(value = "/queryList", method = {RequestMethod.POST}, consumes = "application/json")
    public MessageResult queryList(@RequestBody ContentChild contentChild) {
    	try {
			List<ContentChild> list = contentChildService.queryList(contentChild);
			return  getSuccessResultModel(list); 
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
    	
        /*MessageResult result = new MessageResult();
        String paramaterJson = JacksonUtils.toJson(map);
        try {
            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
            String userJson = JacksonUtils.toJson(userBeanInfo);
            String dubboResultInfo = contentChildDtoServiceCustomer.queryList(userJson, paramaterJson);
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                List<ContentChildDto> list = JacksonUtils.fromJson(resultInfo, ArrayList.class, ContentChildDto.class);
                result.setResult(list);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }

        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用queryList方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }

    /**
     * 保存实体对象
     *
     * @param t
     * @return
     */
    @ApiOperation(value = "保存contentChild实体",notes = "保存contentChild实体")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "contentChild",value = "save",required = true,dataType = "String")})
    @RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
    public MessageResult save(@RequestBody ContentChild contentChild) {
    	try {
			int save = contentChildService.save(contentChild);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.SAVESUCCESS.getMsg());
			successResultModel.setResult(save);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.SAVEERROR.getMsg());
		}
    	
    	/*MessageResult result = new MessageResult();
        try {
            String saveJson = JacksonUtils.toJson(t);
            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
            String userJson = JacksonUtils.toJson(userBeanInfo);
            String dubboResultInfo = contentChildDtoServiceCustomer.save(userJson, saveJson);
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                //ContentChildDto contentChildDto = JacksonUtils.fromJson(resultInfo, ContentChildDto.class);
                Map<String,Object> contentChildDto = JacksonUtils.fromJson(resultInfo, HashMap.class);
                contentChildDto.put("pid",contentChildDto.get("parentId"));
                contentChildDto.put("pName",contentChildDto.get("parentName"));
                result.setResult(contentChildDto);
                result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
                result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.SAVEERROR.isResult());
                String exceptionMsg = dubboServiceResultInfo.getMsg()!=null?dubboServiceResultInfo.getMsg():"【" + dubboServiceResultInfo.getExceptionMsg() + "】";
                result.setMsg(MessageInfo.SAVEERROR.getMsg() + exceptionMsg);
            }
        } catch (Exception e) {
            try {
                //e.printStackTrace();
                ObjectMapper mapper = new ObjectMapper();
                String paramJson = mapper.writeValueAsString(t);
                log.error("调用save方法:  【参数" + paramJson + "】======" + "【" + e.getMessage() + "】");
                result.setSuccess(MessageInfo.SAVEERROR.isResult());
                result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + e.getMessage() + "】");
            } catch (JsonProcessingException e1) {
                // TODO Auto-generated catch block
                //e1.printStackTrace();
            }
        }
        return result;*/
    }

    /**
     * 删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "删除contentChild实体",notes = "删除contentChild实体")
	@ApiImplicitParam(name = "id",value = "contentChild id",required = true,dataType = "String",paramType = "path")
    @RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
    public MessageResult delete(@PathVariable("id") String id) {
    	try {
			int deleteObjectById = contentChildService.deleteObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deleteObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
    	
    	/*MessageResult result = new MessageResult();
        try {
            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
            String userJson = JacksonUtils.toJson(userBeanInfo);
            String dubboResultInfo = contentChildDtoServiceCustomer.deleteObjectById(userJson, "{\"id\":\"" + id + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                ContentChildDto contentChildDto = JacksonUtils.fromJson(resultInfo, ContentChildDto.class);
                result.setResult(contentChildDto);
                result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
                result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.DELETEERROR.isResult());
                result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用delete方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.DELETEERROR.isResult());
            result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
        }

        return result;*/
    }

    /**
     * 删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "删除contentChild实体",notes = "删除contentChild实体")
	@ApiImplicitParam(name = "ids",value = "contentChild ids",required = true,dataType = "String",paramType = "path")
    @RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
    public MessageResult deleteBatch(@PathVariable("ids") String ids) {
    	try {
			List<String> deleteMethod =  Arrays.asList(ids.split(","));
			int count = contentChildService.deleteAllObjectByIds(deleteMethod);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(count);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
    	
    	/*MessageResult result = new MessageResult();
        try {
            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
            String userJson = JacksonUtils.toJson(userBeanInfo);
            String dubboResultInfo = contentChildDtoServiceCustomer.deleteAllObjectByIds(userJson, "{\"id\":\"" + ids + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                ContentChildDto contentChildDto = JacksonUtils.fromJson(resultInfo, ContentChildDto.class);
                result.setResult(contentChildDto);
                result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
                result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.DELETEERROR.isResult());
                result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用delete方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.DELETEERROR.isResult());
            result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
        }

        return result;*/
    }

    /**
     * 修改修改实体对象
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "修改contentChild实体",notes = "修改contentChild实体")
	@ApiImplicitParam(name = "id",value = "contentChild id",required = true,dataType = "String",paramType = "path")
    @RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
    public MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
    	try {
			ContentChild contentChild = contentChildService.getObjectById(id);
			String json = JacksonUtils.toJson(contentChild);
			Map<String,Object> oldMap= JacksonUtils.fromJson(json, HashMap.class);
			oldMap.putAll(map);
			String updateJson= JacksonUtils.toJson(oldMap);
			ContentChild fromJson = JacksonUtils.fromJson(updateJson, ContentChild.class);
			int updateCount = contentChildService.update(fromJson);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.UPDATESUCCESS.getMsg());
			successResultModel.setResult(updateCount);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.UPDATEERROR.getMsg());
		}
    	
    	/*MessageResult result = new MessageResult();
        ContentChildDto contentChildDto = null;
        try {
            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
            String userJson = JacksonUtils.toJson(userBeanInfo);
            String dubboResultInfo = contentChildDtoServiceCustomer.getObjectById(userJson, "{\"id\":\"" + id + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                Map<String, Object> oldMap = JacksonUtils.fromJson(resultInfo, HashMap.class);
                oldMap.putAll(map);
                String updateJson = JacksonUtils.toJson(oldMap);
                String updateDubboResultInfo = contentChildDtoServiceCustomer.update(userJson, updateJson);
                DubboServiceResultInfo updateDubboServiceResultInfo = JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
                if (updateDubboServiceResultInfo.isSucess()) {
                    Integer i = JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class);
                    result.setResult(i);
                    result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
                    result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
                } else {
                    result.setSuccess(MessageInfo.UPDATEERROR.isResult());
                    String exceptionMsg = dubboServiceResultInfo.getMsg()!=null?dubboServiceResultInfo.getMsg():"【" + dubboServiceResultInfo.getExceptionMsg() + "】";
                    result.setMsg(updateDubboServiceResultInfo.getMsg() + exceptionMsg );
                }
            } else {
                result.setSuccess(MessageInfo.UPDATEERROR.isResult());
                result.setMsg("不存在更新的对象");
            }
        } catch (Exception e) {
            try {
                //e.printStackTrace();
                ObjectMapper mapper = new ObjectMapper();
                String paramJson = mapper.writeValueAsString(contentChildDto);
                log.error("调用update方法:  【参数" + id + "," + paramJson + "】======" + "【" + e.getMessage() + "】");
                result.setSuccess(MessageInfo.UPDATEERROR.isResult());
                result.setMsg(MessageInfo.UPDATEERROR.getMsg() + "【" + e.getMessage() + "】");
            } catch (JsonProcessingException e1) {
                // TODO Auto-generated catch block
                //e1.printStackTrace();
            }

        }
        return result;*/
    }

    /**
     * 根据父id获取目录结构树，如果ID为空，则查询所有目录结构
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @ApiOperation(value = "根据Id获取信息详情",notes = "根据Id获取信息详情")
	@ApiImplicitParams(@ApiImplicitParam(name = "id",value = "父id",required = true,dataType = "String",paramType = "path"))
    @RequestMapping(value = "/getContentChildTree/{id}", method = RequestMethod.GET)
    public MessageResult getContentChildTree(@PathVariable("id") String id) {
    	try {
    		List<ContentChildTreeData> trerList = contentChildService.getContentList(id);
			return  getSuccessResultModel(trerList); 
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
    	
    	
       /* MessageResult result = new MessageResult();
        try {
            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
            String userJson = JacksonUtils.toJson(userBeanInfo);
            String dubboResultInfo = contentChildDtoServiceCustomer.getContentList(userJson, "{\"id\":\"" + id + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                List<ContentChildTreeData> contentList = JacksonUtils.fromJson(resultInfo, ArrayList.class, ContentChildTreeData.class);
                result.setResult(contentList);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用getContentList方法:  【参数】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }

    @RequestMapping(value = "/getGuuid", method = RequestMethod.GET)
    public MessageResult getGuuid() {
        MessageResult result = new MessageResult();
        result.setResult(IDGenerator.getUUID());
        result.setSuccess(MessageInfo.GETSUCCESS.isResult());
        result.setMsg(MessageInfo.GETSUCCESS.getMsg());
        return result;
    }

    /**
     * 根据父id获取目录结构树，如果ID为空，则查询所有目录结构
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @ApiOperation(value = "根据Id获取信息详情",notes = "根据Id获取信息详情")
   	@ApiImplicitParams(@ApiImplicitParam(name = "id",value = "父id",required = true,dataType = "String",paramType = "path"))
    @RequestMapping(value = "/getContentChildTreeById/{id}", method = RequestMethod.POST)
    public MessageResult getContentChildTreeById(@PathVariable("id") String id) {
    	try {
    		List<ContentChildTreeData> trerList = contentChildService.getContentChildTreeById(id);
			return  getSuccessResultModel(trerList); 
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
    	
        /*MessageResult result = new MessageResult();
        try {
            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
            String userJson = JacksonUtils.toJson(userBeanInfo);
            String dubboResultInfo = contentChildDtoServiceCustomer.getContentChildTreeById(userJson, "{\"contentType\":\"" + id + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                List<ContentChildTreeData> contentList = JacksonUtils.fromJson(resultInfo, ArrayList.class, ContentChildTreeData.class);
                result.setResult(contentList);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用getContentList方法:  【参数】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }

    /**
     * 根据父id获取目录结构树，只查询一层父类结构
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @ApiOperation(value = "根据Id获取信息详情",notes = "根据Id获取信息详情")
   	@ApiImplicitParams(@ApiImplicitParam(name = "id",value = "父id",required = true,dataType = "String",paramType = "path"))
    @RequestMapping(value = "/getContentParentTreeById/{id}", method = RequestMethod.GET)
    public MessageResult getContentParentTreeById(@PathVariable("id") String id) {
    	try {
    		List<ContentChildTreeData> trerList = contentChildService.getContentParentTreeById(id);
			return  getSuccessResultModel(trerList); 
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
    	
    	
        /*MessageResult result = new MessageResult();
        try {
            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
            String userJson = JacksonUtils.toJson(userBeanInfo);
            String dubboResultInfo = contentChildDtoServiceCustomer.getContentParentTreeById(userJson, "{\"id\":\"" + id + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                List<ContentChildTreeData> contentList = JacksonUtils.fromJson(resultInfo, ArrayList.class, ContentChildTreeData.class);
                result.setResult(contentList);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用getContentList方法:  【参数】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }

    /**
     * 根据父id获取获取该父类下面的目录对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @ApiOperation(value = "根据Id获取信息详情",notes = "根据Id获取信息详情")
   	@ApiImplicitParams(@ApiImplicitParam(name = "id",value = "父id",required = true,dataType = "String",paramType = "path"))
    @RequestMapping(value = "/getContentChildByContentTypeId/{id}", method = RequestMethod.GET)
    public MessageResult getContentChildByContentTypeId(@PathVariable("id") String id) {
    	try {
    		List<ContentChild> trerList = contentChildService.getContentChildByContentTypeId(id);
			return  getSuccessResultModel(trerList); 
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
    	
        /*MessageResult result = new MessageResult();
        try {
            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
            String userJson = JacksonUtils.toJson(userBeanInfo);
            String dubboResultInfo = contentChildDtoServiceCustomer.getContentChildByContentTypeId(userJson, "{\"parentId\":\"" + id + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                List<ContentChildDto> contentList = JacksonUtils.fromJson(resultInfo, ArrayList.class, ContentChildDto.class);
                result.setResult(contentList);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用getContentList方法:  【参数】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }

    @ApiOperation(value = "查询知识目录树结构列表",notes = "查询知识目录树结构列表")
	@ApiImplicitParam(name = "map",value = "",required = true,dataType = "JSON")
    @RequestMapping(value = "/queryTreeList", method = {RequestMethod.POST}, consumes = "application/json")
    public MessageResult queryTreeList(@RequestBody Map<String, Object> paramMap) {
    	try {
    		List<Map<String,Object>> trerList = contentChildService.queryTreeList(paramMap);
			return  getSuccessResultModel(trerList); 
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
    	
    	
        /*MessageResult result = new MessageResult();
        try {
          SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
            String userJson = JacksonUtils.toJson(userBeanInfo);
            String paramaterJson = JacksonUtils.toJson(paramMap);
            String dubboResultInfo = contentChildDtoServiceCustomer.queryTreeList(userJson, paramaterJson);
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                List<Map<String,Object>> list = JacksonUtils.fromJson(resultInfo, List.class, Map.class);

                result.setResult(list);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }

        } catch (Exception e) {
            //e.printStackTrace();
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/

    }
    
    /**
     * 返回符合条件的列表
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "查询知识目录树结构列表",notes = "查询知识目录树结构列表")
	@ApiImplicitParam(name = "map",value = "",required = true,dataType = "JSON")
    @RequestMapping(value = "/queryChildList", method = {RequestMethod.POST}, consumes = "application/json")
    public MessageResult queryContentChildList(@RequestBody Map<String, Object> map) {
    	try {
    		List<ContentChild> trerList = contentChildService.queryChildList(map);
			return  getSuccessResultModel(trerList); 
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
    	
    	/*MessageResult result = new MessageResult();
        String paramaterJson = JacksonUtils.toJson(map);
        try {
            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
            String userJson = JacksonUtils.toJson(userBeanInfo);
            String dubboResultInfo = contentChildDtoServiceCustomer.queryContentChildList(userJson, paramaterJson);
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                List<ContentChildDto> list = JacksonUtils.fromJson(resultInfo, ArrayList.class, ContentChildDto.class);
                result.setResult(list);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }

        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用queryList方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }

}
