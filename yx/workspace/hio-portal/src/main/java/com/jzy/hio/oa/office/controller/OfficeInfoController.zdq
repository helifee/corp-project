package com.jzy.hio.oa.office.controller;

import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.oa.office.dto.OfficeInfoDto;
import com.jzy.hio.oa.office.entity.OfficeInfo;
import com.jzy.hio.oa.office.service.OfficeInfoService;
import com.jzy.tools.data.JacksonUtils;



/**
 * 办公用品结存表控制层
 * @author wangw
 *
 */
@Controller
@RequestMapping("/office/officeInfo")
public class OfficeInfoController extends BaseController<OfficeInfoService>{

	private static Logger log = LoggerFactory.getLogger(OfficeInfoController.class);

	@Autowired
	private OfficeInfoService officeInfoService;
	
	@RequestMapping(value="/getOfficeInfopage",method={RequestMethod.POST}, consumes="application/json")
	public @ResponseBody
    MessageResult getOfficeInfopage(@RequestBody Map<String,Object> map){
		MessageResult result=new MessageResult();
		try {
			Page page = officeInfoService.getOfficeInfopage(map);
			result.setResult(page, MessageInfo.QUERYSUCCESS.getMsg());
		} catch (Exception e) {
//			////e.printStackTrace();
			log.error("-----------"+e.getMessage()+"------------");   			
			result.setError(e.getMessage());
		}
		return result;
		
		
		/*SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userJson = JacksonUtils.toJson(userBeanInfo);
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			String dubboResultInfo=officeInfoDtoServiceCustomer.getOfficeInfopage(userJson, paramaterJson);
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				PageBeanInfo pageInfo=JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
				result.setResult(pageInfo);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {
//			////e.printStackTrace();
			log.error("调用page方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;*/
	}
	
	
	@RequestMapping(value="/getOfficeInfopageByCurrentUser",method={RequestMethod.POST}, consumes="application/json")
	public @ResponseBody
    MessageResult getOfficeInfopageByCurrentUser(@RequestBody Map<String,Object> map){
		MessageResult result=new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			Page page = officeInfoService.getOfficeInfopageByCurrentUser(paramaterJson);
			result.setResult(page, MessageInfo.QUERYSUCCESS.getMsg());
		} catch (Exception e) {
//			////e.printStackTrace();
			log.error("调用page方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;
		
		/*SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userJson = JacksonUtils.toJson(userBeanInfo);
		
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			String dubboResultInfo=officeInfoDtoServiceCustomer.getOfficeInfopageByCurrentUser(userJson, paramaterJson);
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				PageBeanInfo pageInfo=JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
				result.setResult(pageInfo);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {
//			////e.printStackTrace();
			log.error("调用page方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;*/
	}


	
	/**
	 * 批量保存post
	 * @param paramater
	 * @return
	 */
	@RequestMapping(value="/saveBatch",method={RequestMethod.POST}, consumes="application/json")
	public @ResponseBody
    MessageResult saveBatch(@RequestBody List<OfficeInfo> list){
		MessageResult result=new MessageResult();
		try {
			int count = officeInfoService.saveBatch(list);
			result.setResult(count, MessageInfo.SAVESUCCESS.getMsg());
		} catch (Exception e) {
			////e.printStackTrace();
			log.error("-----------"+e.getMessage()+"------------");   			
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;
		
		
		
	   /* String paramaterJson = JacksonUtils.toJson(map);
		try {
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userJson = JacksonUtils.toJson(userBeanInfo);
			String dubboResultInfo=officeInfoDtoServiceCustomer.saveBatch(userJson, paramaterJson);
			
		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		    if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				result.setResult(resultInfo);
				result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
				result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
		    }else{
		    	result.setSuccess(MessageInfo.SAVEERROR.isResult());
				result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
		    }
			
		} catch (Exception e) {
			////e.printStackTrace();
			log.error("调用saveBatch方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;*/
	}
	
	


	/**
	 * 调整库存，并记录历史
	 * @param t
	 * @return
	 */
	@RequestMapping(value="/updateCount",method= RequestMethod.PUT,consumes="application/json")
	public @ResponseBody
    MessageResult updateCount(@RequestBody Map<String,Object> map){
		MessageResult result=new MessageResult();
		try {
			Integer count =officeInfoService.updateCount(map);
			result.setResult(String.valueOf(count), MessageInfo.UPDATESUCCESS.getMsg());
		} catch (Exception e) {
			////e.printStackTrace();			
			log.error("调用updateCount方法:  参数【"+JacksonUtils.toJson(map)+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.UPDATEERROR.isResult());
			result.setMsg(MessageInfo.UPDATEERROR.getMsg()+"【"+e.getMessage()+"】");

		}
		return result;
		
		
		/*try {
			String updateDubboResultInfo=officeInfoDtoServiceCustomer.updateCount(getUserJson(), JacksonUtils.toJson(map));
			DubboServiceResultInfo updateDubboServiceResultInfo= JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
			if(updateDubboServiceResultInfo.isSucess()){
				Integer i=JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class);
				result.setResult(i);
				result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
				result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				result.setMsg(updateDubboServiceResultInfo.getMsg()+"【"+updateDubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {
			////e.printStackTrace();			
			log.error("调用updateCount方法:  参数【"+JacksonUtils.toJson(map)+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.UPDATEERROR.isResult());
			result.setMsg(MessageInfo.UPDATEERROR.getMsg()+"【"+e.getMessage()+"】");

		}
		return result;*/
	}
	
	

	/**
	 * 根据办公用品id获取办公用品下面的结构树，如果ID为空，则查询所有目录结构
	 *
	 * @param id  业务对象主键
	 *
	 * @return     业务对象
	 */
	@RequestMapping(value="/getOfficeInfoTreeById/{id}",method= RequestMethod.GET)
	public @ResponseBody
    MessageResult getOfficeInfoTreeById(@PathVariable("id")  String id){
		MessageResult result=new MessageResult();
		try {
			List<OfficeInfoDto> dubboResultInfo = officeInfoService.getOfficeInfoTreeById(id);
			result.setResult(dubboResultInfo, MessageInfo.GETSUCCESS.getMsg());
		} catch (Exception e) {
			////e.printStackTrace();
		    log.error("调用getContentList方法:  【参数】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;
		
		
		/*try {
			String dubboResultInfo=officeInfoDtoServiceCustomer.getOfficeInfoTreeById(getUserJson(), "{\"id\":\""+id+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				List<OfficeInfoDto> officeInfoList = JacksonUtils.fromJson(resultInfo, ArrayList.class,OfficeInfoDto.class);
				result.setResult(officeInfoList);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {
			////e.printStackTrace();
		    log.error("调用getContentList方法:  【参数】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;*/
	}


}
