package com.jzy.hio.oa.shortcutmenu.controller;

import java.io.ByteArrayInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.Base64;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.oa.shortcutmenu.entity.ShortcutMenu;
import com.jzy.hio.oa.shortcutmenu.service.ShortcutMenuService;
import com.jzy.hio.oa.util.CompressImgUtil;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.tools.login.LoginUtils;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

/**
 * 快捷菜单控制层
 *
 * @author admin
 */
@RestController
@Api(tags = { "快捷菜单相关接口" })
@RequestMapping("/shortcutMenu")
public class ShortcutMenuController extends ResponseModel {

	private static Logger log = LoggerFactory.getLogger(ShortcutMenuController.class);

	@Autowired
	private ShortcutMenuService shortcutMenuService;

	/**
	 * 根据Id获取业务对象
	 *
	 * @param id
	 *            业务对象主键
	 * @return 业务对象
	 */
	@ApiOperation(value = "根据Id获取快捷菜单详情", notes = "根据Id获取快捷菜单详情")
	@ApiImplicitParams(@ApiImplicitParam(name = "id", value = "快捷菜单id", required = true, dataType = "String", paramType = "path"))
	@RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
	public MessageResult get(@PathVariable("id") String id) {
		try {
			ShortcutMenu shortcutMenu = shortcutMenuService.getObjectById(id);
			return getSuccessResultModel(shortcutMenu);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel();
		}

		/*
		 * MessageResult result = new MessageResult(); try { SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo(); String userInfo =
		 * JacksonUtils.toJson(securityUserBeanInfo);
		 * 
		 * String dubboResultInfo = shortcutMenuDtoServiceCustomer.getObjectById(userInfo, "{\"id\":\"" + id + "\"}"); DubboServiceResultInfo dubboServiceResultInfo =
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if (dubboServiceResultInfo.isSucess()) { String resultInfo = dubboServiceResultInfo.getResult();
		 * ShortcutMenuDto shortcutMenuDto = JacksonUtils.fromJson(resultInfo, ShortcutMenuDto.class); result.setResult(shortcutMenuDto);
		 * result.setSuccess(MessageInfo.GETSUCCESS.isResult()); result.setMsg(MessageInfo.GETSUCCESS.getMsg()); } else { result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】"); } } catch (Exception e) { e.printStackTrace();
		 * log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】"); result.setSuccess(MessageInfo.GETERROR.isResult()); result.setMsg(MessageInfo.GETERROR.getMsg()
		 * + "【" + e.getMessage() + "】"); } return result;
		 */
	}

	/**
	 * 返回分页对象
	 *
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "查询快捷菜单分页列表", notes = "查询快捷菜单分页列表")
	@ApiImplicitParam(name = "map", value = "", required = true, dataType = "JSON")
	@RequestMapping(value = "/page", method = { RequestMethod.POST }, consumes = "application/json")
	public MessageResult page(@RequestBody Map<String, Object> map) {
		try {
			Page page = shortcutMenuService.getPage(map);
			return getSuccessResultModel(page);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel();
		}

		/*
		 * MessageResult result = new MessageResult(); String paramaterJson = JacksonUtils.toJson(map); try { String dubboResultInfo =
		 * shortcutMenuDtoServiceCustomer.getPage(getSecurityUserInfo(), paramaterJson); DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo,
		 * DubboServiceResultInfo.class); if (dubboServiceResultInfo.isSucess()) { String resultInfo = dubboServiceResultInfo.getResult(); PageBeanInfo pageInfo =
		 * JacksonUtils.fromJson(resultInfo, PageBeanInfo.class); result.setResult(pageInfo); result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		 * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); } else { result.setSuccess(MessageInfo.GETERROR.isResult()); result.setMsg(MessageInfo.GETERROR.getMsg() + "【" +
		 * dubboServiceResultInfo.getExceptionMsg() + "】"); } } catch (Exception e) { e.printStackTrace(); log.error("调用page方法:  【参数" + paramaterJson + "】======" + "【" +
		 * e.getMessage() + "】"); result.setSuccess(MessageInfo.GETERROR.isResult()); result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】"); } return result;
		 */
	}

	/**
	 * 返回符合条件的列表
	 *
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "查询条件返回符合条件列表", notes = "查询条件返回符合条件列表")
	@ApiImplicitParams({ @ApiImplicitParam(paramType = "body", name = "shortcutMenu", value = "save", required = true, dataType = "String") })
	@RequestMapping(value = "/queryList", method = { RequestMethod.POST }, consumes = "application/json")
	public MessageResult queryList(@RequestBody ShortcutMenu shortcutMenu) {
		try {
			List<ShortcutMenu> list = shortcutMenuService.queryList(shortcutMenu);
			return getSuccessResultModel(list);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel();
		}

		/*
		 * MessageResult result = new MessageResult(); String paramaterJson = null; try { SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		 * map.put("ownerId", securityUserBeanInfo.getSecurityUserDto().getId()); paramaterJson = JacksonUtils.toJson(map);
		 * 
		 * String userInfo = JacksonUtils.toJson(securityUserBeanInfo); String dubboResultInfo = shortcutMenuDtoServiceCustomer.queryList(userInfo, paramaterJson);
		 * DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if (dubboServiceResultInfo.isSucess()) { String
		 * resultInfo = dubboServiceResultInfo.getResult(); List<ShortcutMenuDto> list = JacksonUtils.fromJson(resultInfo, ArrayList.class, ShortcutMenuDto.class); if(list != null
		 * && list.size()>0){ for(int i = 0; i < list.size(); i++){ if(list.get(i).getIcon() != null){
		 * list.get(i).setIconShow(Base64.getEncoder().encodeToString(list.get(i).getIcon())); } } } result.setResult(list); result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		 * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); } else { result.setSuccess(MessageInfo.GETERROR.isResult()); result.setMsg(MessageInfo.GETERROR.getMsg() + "【" +
		 * dubboServiceResultInfo.getExceptionMsg() + "】"); }
		 * 
		 * } catch (Exception e) { e.printStackTrace(); log.error("调用queryList方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
		 * result.setSuccess(MessageInfo.GETERROR.isResult()); result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】"); } return result;
		 */
	}

	/**
	 * 删除实体对象
	 *
	 * @param id
	 * @return
	 */
	@ApiOperation(value = "删除shortcutMenu实体", notes = "删除shortcutMenu实体")
	@ApiImplicitParam(name = "id", value = "shortcutMenu id", required = true, dataType = "String", paramType = "path")
	@RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
	public MessageResult delete(@PathVariable("id") String id) {
		String[] ids = id.split("_");
		String adminUser = ids.length > 1 ? ids[1] : null;
		id = ids[0];
		int deleteObjectById = 0;
		try {
			if (adminUser != null) {
				deleteObjectById = shortcutMenuService.deleteObjectById(id);
			} else {
				deleteObjectById = shortcutMenuService.deletePseudoObjectById(id);
			}
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deleteObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}

		/*
		 * MessageResult result = new MessageResult(); try {
		 * 
		 * String dubboResultInfo = null; String[] ids = id.split("_"); String adminUser = ids.length>1?ids[1]:null; id = ids[0]; if (adminUser!=null){
		 * 
		 * dubboResultInfo = shortcutMenuDtoServiceCustomer.deleteObjectById(getSecurityUserInfo(), "{\"id\":\"" + id + "\"}"); }else{ dubboResultInfo =
		 * shortcutMenuDtoServiceCustomer.deletePseudoObjectById(getSecurityUserInfo(),"{\"id\":\"" + id + "\"}"); }
		 * 
		 * DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if (dubboServiceResultInfo.isSucess()) { String
		 * resultInfo = dubboServiceResultInfo.getResult(); ShortcutMenuDto shortcutMenuDto = JacksonUtils.fromJson(resultInfo, ShortcutMenuDto.class);
		 * result.setResult(shortcutMenuDto); result.setSuccess(MessageInfo.DELETESUCCESS.isResult()); result.setMsg(MessageInfo.DELETESUCCESS.getMsg()); } else {
		 * result.setSuccess(MessageInfo.DELETEERROR.isResult()); result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】"); } } catch
		 * (Exception e) { e.printStackTrace(); log.error("调用delete方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】"); result.setSuccess(MessageInfo.DELETEERROR.isResult());
		 * result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】"); }
		 * 
		 * return result;
		 */
	}

	/**
	 * 删除实体对象
	 *
	 * @param ids
	 * @return
	 */
	@ApiOperation(value = "删除shortcutMenu实体", notes = "删除shortcutMenu实体")
	@ApiImplicitParam(name = "ids", value = "shortcutMenu ids", required = true, dataType = "String", paramType = "path")
	@RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
	public MessageResult deleteBatch(@PathVariable("ids") String ids) {
		try {
			List<String> deleteMethod = Arrays.asList(ids.split(","));
			int count = shortcutMenuService.deleteAllObjectByIds(deleteMethod);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(count);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}

		/*
		 * MessageResult result = new MessageResult(); try { String dubboResultInfo = shortcutMenuDtoServiceCustomer.deleteAllObjectByIds(getSecurityUserInfo(), "{\"id\":\"" + ids
		 * + "\"}"); DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if (dubboServiceResultInfo.isSucess()) {
		 * String resultInfo = dubboServiceResultInfo.getResult(); ShortcutMenuDto shortcutMenuDto = JacksonUtils.fromJson(resultInfo, ShortcutMenuDto.class);
		 * result.setResult(shortcutMenuDto); result.setSuccess(MessageInfo.DELETESUCCESS.isResult()); result.setMsg(MessageInfo.DELETESUCCESS.getMsg()); } else {
		 * result.setSuccess(MessageInfo.DELETEERROR.isResult()); result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】"); } } catch
		 * (Exception e) { e.printStackTrace(); log.error("调用delete方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】"); result.setSuccess(MessageInfo.DELETEERROR.isResult());
		 * result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】"); }
		 * 
		 * return result;
		 */
	}

	/**
	 * 修改修改实体对象
	 *
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "修改shortcutMenu实体", notes = "修改shortcutMenu实体")
	@ApiImplicitParam(name = "id", value = "shortcutMenu id", required = true, dataType = "String", paramType = "path")
	@RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
	public MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
		try {
			ShortcutMenu shortcutMenu = shortcutMenuService.getObjectById(id);
			String json = JacksonUtils.toJson(shortcutMenu);
			Map<String, Object> oldMap = JacksonUtils.fromJson(json, HashMap.class);
			oldMap.putAll(map);
			String updateJson = JacksonUtils.toJson(oldMap);
			ShortcutMenu fromJson = JacksonUtils.fromJson(updateJson, ShortcutMenu.class);
			int updateCount = shortcutMenuService.update(fromJson);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.UPDATESUCCESS.getMsg());
			successResultModel.setResult(updateCount);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.UPDATEERROR.getMsg());
		}

		/*
		 * MessageResult result = new MessageResult(); ShortcutMenuDto shortcutMenuDto = null; try { String dubboResultInfo =
		 * shortcutMenuDtoServiceCustomer.getObjectById(getSecurityUserInfo(), "{\"id\":\"" + id + "\"}"); DubboServiceResultInfo dubboServiceResultInfo =
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if (dubboServiceResultInfo.isSucess()) { String resultInfo = dubboServiceResultInfo.getResult();
		 * Map<String, Object> oldMap = JacksonUtils.fromJson(resultInfo, HashMap.class); oldMap.putAll(map); String updateJson = JacksonUtils.toJson(oldMap); String
		 * updateDubboResultInfo = shortcutMenuDtoServiceCustomer.update(getSecurityUserInfo(), updateJson); DubboServiceResultInfo updateDubboServiceResultInfo =
		 * JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class); if (updateDubboServiceResultInfo.isSucess()) { Integer i =
		 * JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class); result.setResult(i); result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
		 * result.setMsg(MessageInfo.UPDATESUCCESS.getMsg()); } else { result.setSuccess(MessageInfo.UPDATEERROR.isResult()); result.setMsg(updateDubboServiceResultInfo.getMsg() +
		 * "【" + updateDubboServiceResultInfo.getExceptionMsg() + "】"); } } else { result.setSuccess(MessageInfo.UPDATEERROR.isResult()); result.setMsg("不存在更新的对象"); } } catch
		 * (Exception e) { try { e.printStackTrace(); ObjectMapper mapper = new ObjectMapper(); String paramJson = mapper.writeValueAsString(shortcutMenuDto);
		 * log.error("调用update方法:  【参数" + id + "," + paramJson + "】======" + "【" + e.getMessage() + "】"); result.setSuccess(MessageInfo.UPDATEERROR.isResult());
		 * result.setMsg(MessageInfo.UPDATEERROR.getMsg() + "【" + e.getMessage() + "】"); } catch (JsonProcessingException e1) { // TODO Auto-generated catch block
		 * e1.printStackTrace(); }
		 * 
		 * } return result;
		 */
	}

	/**
	 * 伪删除实体对象
	 *
	 * @param id
	 * @return
	 */
	@ApiOperation(value = "伪修改shortcutMenu实体", notes = "伪修改shortcutMenu实体")
	@ApiImplicitParam(name = "id", value = "shortcutMenu id", required = true, dataType = "String", paramType = "path")
	@RequestMapping(value = "/deletePseudo/{id}", method = RequestMethod.DELETE)
	public MessageResult deletePseudo(@PathVariable("id") String id) {
		try {
			int deletePseudoObjectById = shortcutMenuService.deletePseudoObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deletePseudoObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getSuccessResultModel(MessageInfo.DELETEERROR.getMsg());
		}

		/*
		 * MessageResult result = new MessageResult(); try { String dubboResultInfo = shortcutMenuDtoServiceCustomer.deletePseudoObjectById(getSecurityUserInfo(), "{\"id\":\"" + id
		 * + "\"}"); DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if (dubboServiceResultInfo.isSucess()) {
		 * String resultInfo = dubboServiceResultInfo.getResult(); ShortcutMenuDto shortcutMenuDto = JacksonUtils.fromJson(resultInfo, ShortcutMenuDto.class);
		 * result.setResult(shortcutMenuDto); result.setSuccess(MessageInfo.DELETESUCCESS.isResult()); result.setMsg(MessageInfo.DELETESUCCESS.getMsg()); } else {
		 * result.setSuccess(MessageInfo.DELETEERROR.isResult()); result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】"); } } catch
		 * (Exception e) { e.printStackTrace(); log.error("调用deletePseudo方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
		 * result.setSuccess(MessageInfo.DELETEERROR.isResult()); result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】"); }
		 * 
		 * return result;
		 */
	}

	/**
	 * 伪删除实体对象
	 *
	 * @param ids
	 * @return
	 */
	@ApiOperation(value = "伪修改shortcutMenu实体", notes = "伪修改 shortcutMenu实体")
	@ApiImplicitParam(name = "ids", value = "shortcutMenu ids", required = true, dataType = "String", paramType = "path")
	@RequestMapping(value = "/deletePseudoBatch/{ids}", method = RequestMethod.DELETE)
	public MessageResult deletePseudoBatch(@PathVariable("ids") String ids) {
		try {
			String[] split = ids.split(",");
			List<String> asList = Arrays.asList(split);
			int deletePseudoObjectById = shortcutMenuService.deletePseudoAllObjectByIds(asList);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deletePseudoObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getSuccessResultModel(MessageInfo.DELETEERROR.getMsg());
		}

		/*
		 * MessageResult result = new MessageResult(); try { String dubboResultInfo = shortcutMenuDtoServiceCustomer.deletePseudoAllObjectByIds(getSecurityUserInfo(), "{\"id\":\""
		 * + ids + "\"}"); DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if
		 * (dubboServiceResultInfo.isSucess()) { String resultInfo = dubboServiceResultInfo.getResult(); ShortcutMenuDto shortcutMenuDto = JacksonUtils.fromJson(resultInfo,
		 * ShortcutMenuDto.class); result.setResult(shortcutMenuDto); result.setSuccess(MessageInfo.DELETESUCCESS.isResult()); result.setMsg(MessageInfo.DELETESUCCESS.getMsg()); }
		 * else { result.setSuccess(MessageInfo.DELETEERROR.isResult()); result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】"); } }
		 * catch (Exception e) { e.printStackTrace(); log.error("调用deletePseudoBatch方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
		 * result.setSuccess(MessageInfo.DELETEERROR.isResult()); result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】"); }
		 * 
		 * return result;
		 */
	}

	@RequestMapping(value = "/getUserInfo", method = RequestMethod.GET)
	public MessageResult getUserInfo() {
		MessageResult result = new MessageResult();
		try {
			/*
			 * SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo(); String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
			 */
			result.setResult(getSecurityUserInfo());
			result.setSuccess(MessageInfo.GETSUCCESS.isResult());
			result.setMsg(MessageInfo.GETSUCCESS.getMsg());
		} catch (Exception e) {
			e.printStackTrace();
			log.error("调用getUserInfo方法:  【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;
	}

	/**
	 * 保存实体对象
	 *
	 * @param request
	 * @return
	 */
	@ApiOperation(value = "保存shortcutMenu实体", notes = "保存shortcutMenu实体")
	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public void save(MultipartHttpServletRequest request, HttpServletResponse response) {
		MessageResult result = new MessageResult();
		ShortcutMenu t = new ShortcutMenu();
		PrintWriter pw = null;
		Boolean isReturn = true;
		try {
			response.setContentType("text/html;charset=UTF-8");
			pw = response.getWriter();
			MultipartFile uploadfile = request.getFile("icon");
			if (uploadfile != null) {
				long length = uploadfile.getSize();
				if (length > 1 * 1024 * 1024) {
					result.setSuccess(false);
					result.setMsg("图片尺寸不能大于1M");
					pw.print(JacksonUtils.toJson(result));
					pw.flush();
					isReturn = false;
				}
			}
			if (isReturn) {
				String id = request.getParameter("id");
				String name = request.getParameter("name");
				String code = request.getParameter("code");
				String adminUser = request.getParameter("adminUser");
				Boolean innerLink = null;
				if (request.getParameter("innerLink") != null) {
					innerLink = Boolean.valueOf(request.getParameter("innerLink"));
				}
				String resourceId = request.getParameter("resourceId");
				String resourceName = request.getParameter("resourceName");
				String linkAddr = request.getParameter("linkAddr");
				String isDelPic = request.getParameter("isDelPic");
				String sortNum = request.getParameter("sortNum");
				byte[] headpic = {};
				if ("1".equals(isDelPic) && uploadfile != null) {
					InputStream is = uploadfile.getInputStream();
					headpic = new byte[is.available()];
					is.read(headpic);
					is.close();
				}
				t.setId(id);
				t.setName(name);
				t.setCode(code);
				t.setResourceId(resourceId);
				t.setResourceName(resourceName);
				t.setLinkAddr(linkAddr);
				t.setInnerLink(innerLink);

				t.setIcon(headpic);
				t.setDelflag(false);
				t.setSortNum(sortNum != null ? Integer.parseInt(sortNum) : null);
				SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
				if (!StringUtils.isBlank(adminUser)) {
					t.setOwnerId(adminUser);
				} else {
					t.setOwnerId(securityUserBeanInfo.getSecurityUserDto().getId());
					t.setOwner(securityUserBeanInfo.getSecurityUserDto().getRealName());
				}

				int save = shortcutMenuService.save(t);
				result = getSuccessResultModel(MessageInfo.SAVESUCCESS.getMsg());
				result.setResult(save);
				pw.print(JacksonUtils.toJson(result));
				pw.flush();
			}
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			result.setSuccess(MessageInfo.SAVEERROR.isResult());
			result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + e.getMessage() + "】");
			pw.print(JacksonUtils.toJson(result));
			pw.flush();
		} finally {
			try {
				pw.close();
			} catch (Exception e) {
			}
		}
	}

	/**
	 * 门户首页展示
	 *
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/getShortcutMenuPortal", method = RequestMethod.GET, produces = "text/html; charset=utf-8")
	@ResponseBody
	public String getShortcutMenuPortal(HttpServletRequest request) {
		StringBuffer buffer = new StringBuffer();
		String html = "";
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String adminUser = request.getParameter("adminUser");
			if (StringUtils.isNotBlank(adminUser)) {
				map.put("ownerId", adminUser);
			} else {
				map.put("ownerId", securityUserBeanInfo.getSecurityUserDto().getId());
			}

			map.put("sidx", "sortNum");
			map.put("sord", "asc");
			map.put("delflag", 0);
			// map.put("limit", 1);

			List<ShortcutMenu> list = shortcutMenuService.queryListByExample(map);
			// DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			String loginName = securityUserBeanInfo.getSecurityUserDto().getLoginName();
			String sessionId = request.getSession().getId();
			buffer.append("<div class=\"scm-glyphicons\" id=\"shortcutMenuListDiv\">\n");
			buffer.append("<ul class=\"scm-glyphicons-list clearfix\">\n");
			if (list != null && list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					ShortcutMenu shortcutMenu = list.get(i);
					String iconShow = null;
					if (shortcutMenu.getIcon() != null) {
						// ShortcutMenuDto shortcutMenuDto = JacksonUtils.fromJson(JacksonUtils.toJson(shortcutMenu), ShortcutMenuDto.class);
						byte[] icon1 = shortcutMenu.getIcon();
						byte[] icon2 = icon1;// icon1!=null? CompressImgUtil.compressImg2(icon1,42,42):null;
						if (icon1 != null && icon1.length > 32 * 1024) {
							icon2 = icon1 != null ? CompressImgUtil.compressImg2(icon1, 42, 42) : null;
						}
						iconShow = icon2 != null ? "data:image/jpeg;base64," + Base64.getEncoder().encodeToString(shortcutMenu.getIcon())
								: "../../common/img/default2.png";
					}
					String linkAddr = shortcutMenu.getLinkAddr();
					if (linkAddr.contains("#[userName]")) {
						linkAddr = linkAddr.replace("#[userName]", loginName);
					}
					if (linkAddr.contains("#[sessionId]")) {
						linkAddr = linkAddr.replace("#[sessionId]", sessionId);
					}

					buffer.append("<li  data-id=\"" + shortcutMenu.getId() + "\" title=\"" + shortcutMenu.getName() + "\">\n");
					buffer.append(
							"<a href=\"javascript:void(0)\" data-href=\"" + linkAddr + "\" data-linktype=\"" + shortcutMenu.getInnerLink() + "\"><img src=\"" + iconShow + "\">");
					buffer.append("<span class=\"glyphicon-class\">" + shortcutMenu.getName() + "</span></a>\n");
					buffer.append(
							"<span class=\"removeShortcutSpan imgPosition del_menuBd\" title=\"删除\" onclick=\"removeShortcutMenu('" + shortcutMenu.getId() + "')\"></span>\n");
					buffer.append("</li>\n");
				}
			}
			if (list == null || list.size() < 12) {
				buffer.append("<li  title=\"添加\" class=\"shorcut-add-item\">\n");
				buffer.append(
						"<a href=\"javascript:void(0)\" onclick=\"window.open('/platform-app/oa/shortcutMenu/shortcutMenu_edit.html?adminUser='+$.xljUtils.getUrlParams().adminUser+'&sortNum='+($('#shortcutMenuListDiv li').length-1))\"><img src=\"/platform-app/image/oa/addmore.png\" >");
				buffer.append("<span class=\"glyphicon-class\">添加</span></a>\n");
				buffer.append("</li>\n");
			}
			buffer.append("</ul>\n</div>\n");
			buffer.append("<script type=\"text/javascript\">\n");
			buffer.append("$(function(){\n" + "       $('#shortcutMenuListDiv>ul>li>a').on('click',function(){\n" + "          // debugger;\n "
					+ "           var href = $(this).attr('data-href');\n" + "           var linkType = $(this).attr('data-linkType');\n" + "           if(linkType=='false'){\n"
					+ "               window.open(href);\n" + "           }else{\n" + "               var aLink = href;\n" + "		        if(aLink.indexOf(\"?\") >= 0){\n"
					+ "               aLink = aLink.substring(aLink.indexOf('?'));\n" + "               aLink = aLink.replace('?', '').replace(/&/g, '\",\"');\n"
					+ "               aLink = aLink.replace(/=/g, '\":\"');\n" + "               var menuUrlObj ;\n" + "               if (aLink != \"\") {\n"
					+ "                   menuUrlObj = JSON.parse('{\"' + aLink + '\"}');\n" + "               }\n"
					+ "               if(menuUrlObj._proCode&&!menuUrlObj._menuCode){\n" + "                   window.parent.switchPro(menuUrlObj._proCode);\n"
					+ "               }else if(menuUrlObj._proCode&&menuUrlObj._menuCode){\n"
					+ "                   window.parent.switchPro(menuUrlObj._proCode,menuUrlObj._menuCode);\n" + "               }else{\n"
					+ "                   window.location.href = href;\n" + "               }\n" + "            }else{\n" + "           	window.location.href = href;\n"
					+ "            }\n" + "           }\n" + "       });\n" + "       $('#shortcutMenuListDiv ul').sortable({\n" + "           items:'li:not(.shorcut-add-item)',\n"
					+ "           cancel:'.shorcut-add-item',\n" + "           update:function(event,ui){\n"
					+ "               var liArr = $('#shortcutMenuListDiv ul li:not(.shorcut-add-item)');\n" + "               var shortCutIds = [];\n"
					+ "               $.each(liArr,function(i,liObj){\n" + "                   shortCutIds.push($(liObj).attr('data-id'));\n" + "               });\n"
					+ "               $.ajax({\n" + "                   url:serviceUrl + 'oa/shortcutMenu/updateSort',\n" + "                   type:'POST',\n"
					+ "                   dataType:'JSON',\n" + "                   contentType: 'application/json',\n"
					+ "                   data:JSON.stringify({shortcutIds:shortCutIds.join(',')}),\n" + "                   success:function(data){}\n" + "               \n"
					+ "               });\n" + "       }});\n" + "       $('#shortcutMenuListDiv ul li.shorcut-add-item').disableSelection();\n" + "});\n");
			buffer.append("function removeShortcutMenu(id) {\n" + "    var allUrl = serviceUrl + 'oa/shortcutMenu/delete/' + id;\n"
					+ "    if ($.xljUtils.getUrlParams().adminUser) {\n" + "        allUrl += '_' + $.xljUtils.getUrlParams().adminUser;\n" + "    }\n"
					+ "    $.xljUtils.confirm('blue','确定要删除当前快捷菜单么？',function () {\n" + "        $.ajax({\n" + "            url: allUrl,\n" + "            type: 'DELETE',\n"
					+ "            dataType: 'JSON',\n" + "            success: function (resultData) {\n" + "                if (resultData && resultData.success) {\n"
					+ "                    divRefresh();\n" + "                    $.xljUtils.tip('green', \"数据删除成功！\");\n" + "                } else {\n"
					+ "                    $.xljUtils.tip('red', \"删除数据失败！\");\n" + "                }\n" + "            }\n" + "        });\n" + "    },true);\n" + "    \n"
					+ "}");

			buffer.append("function divRefresh(){\n" + "$.ajaxSetup ({ cache: false });\n" + "\t var adminUser=$.xljUtils.getUrlParams().adminUser;\n"
					+ "\t if(adminUser&&adminUser!='undefined'&&adminUser!=''){\n"
					+ "\t $(\"#shortcutMenuListDiv\").parent().load(serviceUrl + \"oa/shortcutMenu/getShortcutMenuPortal?adminUser=\"+adminUser);\n" + "\t }else{"
					+ "\t $(\"#shortcutMenuListDiv\").parent().load(serviceUrl + \"oa/shortcutMenu/getShortcutMenuPortal\");\n" + "\t }\n" + "\t}\n");
			buffer.append("</script>");
			html = buffer.toString();
		} catch (Exception e) {
			e.printStackTrace();
			log.error("调用getShortcutMenuPortal方法出错：" + e.getMessage());
		}
		return html;

		/*
		 * String paramaterJson = null; StringBuffer buffer = new StringBuffer(); String html = ""; try { Map<String,Object> map = new HashMap<String, Object>();
		 * SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo(); String adminUser = request.getParameter("adminUser");
		 * if(StringUtils.isNotBlank(adminUser)){ map.put("ownerId", adminUser); }else{ map.put("ownerId", securityUserBeanInfo.getSecurityUserDto().getId()); }
		 * 
		 * map.put("sidx", "sortNum"); map.put("sord", "asc"); map.put("delflag", false); paramaterJson = JacksonUtils.toJson(map); String userInfo =
		 * JacksonUtils.toJson(securityUserBeanInfo); String dubboResultInfo = shortcutMenuDtoServiceCustomer.queryList(userInfo, paramaterJson); DubboServiceResultInfo
		 * dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); String loginName =
		 * securityUserBeanInfo.getSecurityUserDto().getLoginName(); String sessionId = request.getSession().getId();
		 * buffer.append("<div class=\"scm-glyphicons\" id=\"shortcutMenuListDiv\">\n"); buffer.append("<ul class=\"scm-glyphicons-list clearfix\">\n"); if
		 * (dubboServiceResultInfo.isSucess()) { String resultInfo = dubboServiceResultInfo.getResult(); List<ShortcutMenuDto> list = JacksonUtils.fromJson(resultInfo,
		 * ArrayList.class, ShortcutMenuDto.class); if(list != null && list.size()>0){ for(int i = 0; i < list.size(); i++){ ShortcutMenuDto shortcutMenuDto = list.get(i); String
		 * iconShow = null; if(shortcutMenuDto.getIcon() != null){ byte[] icon1 = shortcutMenuDto.getIcon(); byte[] icon2 = icon1;//icon1!=null?
		 * CompressImgUtil.compressImg2(icon1,42,42):null; if(icon1!=null&&icon1.length>32*1024){ icon2 = icon1!=null? CompressImgUtil.compressImg2(icon1,42,42):null; } iconShow =
		 * icon2!=null?"data:image/jpeg;base64,"+Base64.getEncoder().encodeToString(icon2):"../../common/img/default2.png"; } String linkAddr = shortcutMenuDto.getLinkAddr();
		 * if(linkAddr.contains("#[userName]")){ linkAddr = linkAddr.replace("#[userName]", loginName); } if(linkAddr.contains("#[sessionId]")){ linkAddr =
		 * linkAddr.replace("#[sessionId]", sessionId); }
		 * 
		 * buffer.append("<li  data-id=\""+shortcutMenuDto.getId()+"\" title=\""+shortcutMenuDto.getName()+"\">\n");
		 * buffer.append("<a href=\"javascript:void(0)\" data-href=\""+linkAddr+"\" data-linktype=\""+shortcutMenuDto.getInnerLink()+"\"><img src=\""+ iconShow+"\">");
		 * buffer.append("<span class=\"glyphicon-class\">"+shortcutMenuDto.getName()+"</span></a>\n");
		 * buffer.append("<span class=\"removeShortcutSpan imgPosition del_menuBd\" title=\"删除\" onclick=\"removeShortcutMenu('"+shortcutMenuDto.getId()+"')\"></span>\n");
		 * buffer.append("</li>\n"); } }
		 * 
		 * if(list == null || list.size() < 12){ buffer.append("<li  title=\"添加\" class=\"shorcut-add-item\">\n"); buffer.
		 * append("<a href=\"javascript:void(0)\" onclick=\"window.open('/platform-app/oa/shortcutMenu/shortcutMenu_edit.html?adminUser='+$.xljUtils.getUrlParams().adminUser+'&sortNum='+($('#shortcutMenuListDiv li').length-1))\"><img src=\"/platform-app/image/oa/addmore.png\" >"
		 * ); buffer.append("<span class=\"glyphicon-class\">添加</span></a>\n"); buffer.append("</li>\n"); } } buffer.append("</ul>\n</div>\n");
		 * buffer.append("<script type=\"text/javascript\">\n"); buffer.append("$(function(){\n" + "       $('#shortcutMenuListDiv>ul>li>a').on('click',function(){\n" +
		 * "          // debugger;\n " + "           var href = $(this).attr('data-href');\n" + "           var linkType = $(this).attr('data-linkType');\n" +
		 * "           if(linkType=='false'){\n" + "               window.open(href);\n" + "           }else{\n" + "               var aLink = href;\n" +
		 * "		        if(aLink.indexOf(\"?\") >= 0){\n" + "               aLink = aLink.substring(aLink.indexOf('?'));\n" +
		 * "               aLink = aLink.replace('?', '').replace(/&/g, '\",\"');\n" + "               aLink = aLink.replace(/=/g, '\":\"');\n" +
		 * "               var menuUrlObj ;\n" + "               if (aLink != \"\") {\n" + "                   menuUrlObj = JSON.parse('{\"' + aLink + '\"}');\n" +
		 * "               }\n" + "               if(menuUrlObj._proCode&&!menuUrlObj._menuCode){\n" + "                   window.parent.switchPro(menuUrlObj._proCode);\n" +
		 * "               }else if(menuUrlObj._proCode&&menuUrlObj._menuCode){\n" + "                   window.parent.switchPro(menuUrlObj._proCode,menuUrlObj._menuCode);\n" +
		 * "               }else{\n" + "                   window.location.href = href;\n" + "               }\n" + "            }else{\n" +
		 * "           	window.location.href = href;\n" + "            }\n" + "           }\n" + "       });\n" + "       $('#shortcutMenuListDiv ul').sortable({\n" +
		 * "           items:'li:not(.shorcut-add-item)',\n" + "           cancel:'.shorcut-add-item',\n" + "           update:function(event,ui){\n" +
		 * "               var liArr = $('#shortcutMenuListDiv ul li:not(.shorcut-add-item)');\n" + "               var shortCutIds = [];\n" +
		 * "               $.each(liArr,function(i,liObj){\n" + "                   shortCutIds.push($(liObj).attr('data-id'));\n" + "               });\n" +
		 * "               $.ajax({\n" + "                   url:hostUrl + 'oa/shortcutMenu/updateSort',\n" + "                   type:'POST',\n" +
		 * "                   dataType:'JSON',\n" + "                   contentType: 'application/json',\n" +
		 * "                   data:JSON.stringify({shortcutIds:shortCutIds.join(',')}),\n" + "                   success:function(data){}\n" + "               \n" +
		 * "               });\n"+ "       }});\n" + "       $('#shortcutMenuListDiv ul li.shorcut-add-item').disableSelection();\n" + "});\n");
		 * buffer.append("function removeShortcutMenu(id) {\n" + "    var allUrl = serviceUrl + 'oa/shortcutMenu/delete/' + id;\n" + "    if ($.xljUtils.getUrlParams().adminUser) {\n"
		 * + "        allUrl += '_' + $.xljUtils.getUrlParams().adminUser;\n" + "    }\n" + "    $.xljUtils.confirm('blue','确定要删除当前快捷菜单么？',function () {\n" + "        $.ajax({\n" +
		 * "            url: allUrl,\n" + "            type: 'DELETE',\n" + "            dataType: 'JSON',\n" + "            success: function (resultData) {\n" +
		 * "                if (resultData && resultData.success) {\n" + "                    divRefresh();\n" + "                    $.xljUtils.tip('green', \"数据删除成功！\");\n" +
		 * "                } else {\n" + "                    $.xljUtils.tip('red', \"删除数据失败！\");\n" + "                }\n" + "            }\n" + "        });\n" +
		 * "    },true);\n" + "    \n" + "}");
		 * 
		 * buffer.append("function divRefresh(){\n" + "$.ajaxSetup ({ cache: false });\n" + "\t var adminUser=$.xljUtils.getUrlParams().adminUser;\n" +
		 * "\t if(adminUser&&adminUser!='undefined'&&adminUser!=''){\n" +
		 * "\t $(\"#shortcutMenuListDiv\").parent().load(\"/platform-app/oa/shortcutMenu/getShortcutMenuPortal?adminUser=\"+adminUser);\n"+ "\t }else{" +
		 * "\t $(\"#shortcutMenuListDiv\").parent().load(\"/platform-app/oa/shortcutMenu/getShortcutMenuPortal\");\n" + "\t }\n" + "\t}\n"); buffer.append("</script>"); html =
		 * buffer.toString(); } catch (Exception e) { log.error("调用getShortcutMenuPortal方法出错："+e.getMessage()); } return html;
		 */
	}

	@ApiOperation(value = "修改shortcutMenu实体", notes = "修改shortcutMenu实体")
	@ApiImplicitParam(name = "map", value = "", required = true, dataType = "JSON")
	@RequestMapping(value = "/updateSort", method = { RequestMethod.POST }, consumes = "application/json")
	public MessageResult updateSort(@RequestBody Map<String, Object> map) {
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			map.put("ownerId", securityUserBeanInfo.getSecurityUserDto().getId());
			int updateCount = shortcutMenuService.updateSort(map);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.UPDATESUCCESS.getMsg());
			successResultModel.setResult(updateCount);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.UPDATEERROR.getMsg());
		}

		/*
		 * MessageResult result = new MessageResult(); String paramaterJson = JacksonUtils.toJson(map); try { SecurityUserBeanInfo securityUserBeanInfo =
		 * LoginUtils.getSecurityUserBeanInfo(); map.put("ownerId", securityUserBeanInfo.getSecurityUserDto().getId()); paramaterJson = JacksonUtils.toJson(map); String
		 * dubboResultInfo = shortcutMenuDtoServiceCustomer.updateSort(getSecurityUserInfo(), paramaterJson); DubboServiceResultInfo dubboServiceResultInfo =
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if (dubboServiceResultInfo.isSucess()) { String resultInfo = dubboServiceResultInfo.getResult();
		 * PageBeanInfo pageInfo = JacksonUtils.fromJson(resultInfo, PageBeanInfo.class); result.setResult(pageInfo); result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		 * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); } else { result.setSuccess(MessageInfo.GETERROR.isResult()); result.setMsg(MessageInfo.GETERROR.getMsg() + "【" +
		 * dubboServiceResultInfo.getExceptionMsg() + "】"); }
		 * 
		 * 
		 * } catch (Exception e) { e.printStackTrace(); log.error("调用updateSort方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
		 * result.setSuccess(MessageInfo.GETERROR.isResult()); result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】"); } return result;
		 */
	}

	private String getSecurityUserInfo() {
		SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userInfo = JacksonUtils.toJson(securityUserBeanInfo);

		return userInfo;
	}
}
