package com.jzy.hio.oa.feedback.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.oa.feedback.entity.FeedBack;
import com.jzy.hio.oa.feedback.service.FeedBackService;
import com.jzy.tools.data.JacksonUtils;


/**
 * 反馈控制层
 * @author admin
 *
 */
@RestController
@Api(tags = {"反馈相关接口"})
@RequestMapping("/feedBack")
public class FeedBackController extends ResponseModel {

	private static Logger log = LoggerFactory.getLogger(FeedBackController.class);
	
	@Autowired
	private FeedBackService feedBackService;
	
	
	  /**
     * 根据Id获取业务对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
	@ApiOperation(value = "根据Id获取反馈详情",notes = "根据Id获取反馈详情")
	@ApiImplicitParams(@ApiImplicitParam(name = "id",value = "反馈id",required = true,dataType = "String",paramType = "path"))
	@RequestMapping(value="/get/{id}",method= RequestMethod.GET)
	public MessageResult get(@PathVariable("id")  String id){
		try {
    		FeedBack feedBack = feedBackService.getObjectById(id);
			return getSuccessResultModel(feedBack);
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
		
		
		/*MessageResult result=new MessageResult();
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userJson = JacksonUtils.toJson(userBeanInfo);
		try {
			String dubboResultInfo=feedBackDtoServiceCustomer.getObjectById(userJson, "{\"id\":\""+id+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				FeedBackDto feedBackDto=JacksonUtils.fromJson(resultInfo, FeedBackDto.class);
				result.setResult(feedBackDto);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"��"+dubboServiceResultInfo.getExceptionMsg()+"��");
			}
		} catch (Exception e) {
			e.printStackTrace();
		    log.error("����get����:  ������"+id+"��======"+"��"+e.getMessage()+"��");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"��"+e.getMessage()+"��");
		}
		return result;*/
	}
	
	
	/**
     * 返回分页对象
     *
     * @param
     * @return
     */
    @ApiOperation(value = "查询反馈分页列表",notes = "查询反馈分页列表")
	@ApiImplicitParam(name = "map",value = "",required = true,dataType = "JSON")
	@RequestMapping(value="/page",method={RequestMethod.POST}, consumes="application/json")
	public MessageResult page(@RequestBody Map<String,Object> map){
		try {
			Page page = feedBackService.getPage(map);
			return getSuccessResultModel(page);
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
		
		
		/*MessageResult result=new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userJson = JacksonUtils.toJson(userBeanInfo);
		try {
		    String dubboResultInfo=feedBackDtoServiceCustomer.getPage(userJson, paramaterJson);
		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				PageBeanInfo pageInfo=JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
				result.setResult(pageInfo);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"��"+dubboServiceResultInfo.getExceptionMsg()+"��");
			}
		} catch (Exception e) {
			e.printStackTrace();
		    log.error("����page����:  ������"+paramaterJson+"��======"+"��"+e.getMessage()+"��");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"��"+e.getMessage()+"��");
		}
		return result;*/
	}
    
    /**
     * 返回分页对象
     *
     * @param
     * @return
     */
    @ApiOperation(value = "查询反馈分页列表",notes = "查询反馈分页列表")
	@ApiImplicitParam(name = "map",value = "",required = true,dataType = "JSON")
	@RequestMapping(value="/getFeedBackPage",method={RequestMethod.POST}, consumes="application/json")
	public MessageResult getFeedBackPage(@RequestBody Map<String,Object> map){
		try {
			Page page = feedBackService.getFeedBackPage(map);
			return getSuccessResultModel(page);
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
		
		
		/*MessageResult result=new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userJson = JacksonUtils.toJson(userBeanInfo);
		try {
			String dubboResultInfo=feedBackDtoServiceCustomer.getFeedBackPage(userJson, paramaterJson);
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				PageBeanInfo pageInfo=JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
				result.setResult(pageInfo);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+dubboServiceResultInfo.getExceptionMsg());
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error("查询失败");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+e.getMessage());
		}
		return result;*/
	}
    
    
    /**
     * 返回符合条件的列表
     *
     * @param
     * @return
     */
    @ApiOperation(value = "查询条件返回符合条件列表",notes = "查询条件返回符合条件列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "feedBack",value = "save",required = true,dataType = "String")})
	@RequestMapping(value="/queryList",method={RequestMethod.POST}, consumes="application/json")
	public MessageResult queryList(@RequestBody FeedBack feedBack){
		try {
			List<FeedBack> list = feedBackService.queryList(feedBack);
			return  getSuccessResultModel(list); 
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
		
		
		/*MessageResult result=new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userJson = JacksonUtils.toJson(userBeanInfo);
		try {
			String dubboResultInfo=feedBackDtoServiceCustomer.queryList(userJson, paramaterJson);
		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		    if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				List<FeedBackDto> list=JacksonUtils.fromJson(resultInfo, ArrayList.class,FeedBackDto.class);
				result.setResult(list);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
		    }else{
		    	result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"��"+dubboServiceResultInfo.getExceptionMsg()+"��");
		    }
			
		} catch (Exception e) {
			e.printStackTrace();
			log.error("����queryList����:  ������"+paramaterJson+"��======"+"��"+e.getMessage()+"��");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"��"+e.getMessage()+"��");
		}
		return result;*/
	}


    /**
     * 保存实体对象
     *
     * @param t
     * @return
     */
    @ApiOperation(value = "保存feedBack实体",notes = "保存feedBack实体")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "feedBack",value = "save",required = true,dataType = "String")})
	@RequestMapping(value="/save",method= RequestMethod.POST, consumes="application/json")
	public MessageResult save(@RequestBody FeedBack feedBack){
    	try {
			int save = feedBackService.save(feedBack);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.SAVESUCCESS.getMsg());
			successResultModel.setResult(save);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.SAVEERROR.getMsg());
		}
    	
    	
    	/*MessageResult result=new MessageResult();
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userJson = JacksonUtils.toJson(userBeanInfo);
		try {
			String saveJson= JacksonUtils.toJson(t);
			String dubboResultInfo=feedBackDtoServiceCustomer.save(userJson, saveJson);
		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		    if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				FeedBackDto feedBackDto=JacksonUtils.fromJson(resultInfo, FeedBackDto.class);
				result.setResult(feedBackDto);
				result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
				result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
		    }else{
		    	result.setSuccess(MessageInfo.SAVEERROR.isResult());
				result.setMsg(MessageInfo.SAVEERROR.getMsg()+"��"+dubboServiceResultInfo.getExceptionMsg()+"��");
		    }
		} catch (Exception e) {
			try {
				e.printStackTrace();
			    ObjectMapper mapper = new ObjectMapper();
				String  paramJson = mapper.writeValueAsString(t);
				log.error("����save����:  ������"+paramJson+"��======"+"��"+e.getMessage()+"��");
				result.setSuccess(MessageInfo.SAVEERROR.isResult());
				result.setMsg(MessageInfo.SAVEERROR.getMsg()+"��"+e.getMessage()+"��");
			} catch (JsonProcessingException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}
		return result;*/
	}
	
    /**
     * 删除实体对象
     *
     * @param t
     * @return
     */
    @ApiOperation(value = "删除feedBack实体",notes = "删除feedBack实体")
	@ApiImplicitParam(name = "id",value = "feedBack id",required = true,dataType = "String",paramType = "path")
	@RequestMapping(value="/delete/{id}",method= RequestMethod.DELETE)
	public MessageResult delete(@PathVariable("id")  String id){
    	try {
			int deleteObjectById = feedBackService.deleteObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deleteObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
    	
		/*MessageResult result=new MessageResult();
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userJson = JacksonUtils.toJson(userBeanInfo);
		try {
			String dubboResultInfo=feedBackDtoServiceCustomer.deleteObjectById(userJson, "{\"id\":\""+id+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				FeedBackDto feedBackDto=JacksonUtils.fromJson(resultInfo, FeedBackDto.class);
				result.setResult(feedBackDto);
				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.DELETEERROR.isResult());
				result.setMsg(MessageInfo.DELETEERROR.getMsg()+"��"+dubboServiceResultInfo.getExceptionMsg()+"��");
			}
		} catch (Exception e) {
			e.printStackTrace();
		    log.error("����delete����:  ������"+id+"��======"+"��"+e.getMessage()+"��");
			result.setSuccess(MessageInfo.DELETEERROR.isResult());
			result.setMsg(MessageInfo.DELETEERROR.getMsg()+"��"+e.getMessage()+"��");
		}
		
		return result;*/
	}
	
	
    /**
     * 删除实体对象
     *
     * @param
     * @return
     */
    @ApiOperation(value = "删除feedBack实体",notes = "删除feedBack实体")
	@ApiImplicitParam(name = "ids",value = "feedBack ids",required = true,dataType = "String",paramType = "path")
	@RequestMapping(value="/deleteBatch/{ids}",method= RequestMethod.DELETE)
	public MessageResult deleteBatch(@PathVariable("ids")  String ids){
    	try {
			List<String> deleteMethod =  Arrays.asList(ids.split(","));
			int count = feedBackService.deleteAllObjectByIds(deleteMethod);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(count);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
    	
    	
		/*MessageResult result=new MessageResult();
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userJson = JacksonUtils.toJson(userBeanInfo);
		try {
			String dubboResultInfo=feedBackDtoServiceCustomer.deleteAllObjectByIds(userJson, "{\"id\":\""+ids+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				FeedBackDto feedBackDto=JacksonUtils.fromJson(resultInfo, FeedBackDto.class);
				result.setResult(feedBackDto);
				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.DELETEERROR.isResult());
				result.setMsg(MessageInfo.DELETEERROR.getMsg()+"��"+dubboServiceResultInfo.getExceptionMsg()+"��");
			}
		} catch (Exception e) {
			e.printStackTrace();
		    log.error("����delete����:  ������"+ids+"��======"+"��"+e.getMessage()+"��");
			result.setSuccess(MessageInfo.DELETEERROR.isResult());
			result.setMsg(MessageInfo.DELETEERROR.getMsg()+"��"+e.getMessage()+"��");
		}
		
		return result;*/
	}
	
    /**
     * 修改修改实体对象
     *
     * @param
     * @return
     */
    @ApiOperation(value = "修改feedBack实体",notes = "修改feedBack实体")
	@ApiImplicitParam(name = "id",value = "feedBack id",required = true,dataType = "String",paramType = "path")
	@RequestMapping(value="/update/{id}",method= RequestMethod.PUT,consumes="application/json")
	public MessageResult update(@PathVariable("id")  String id, @RequestBody Map<String,Object> map){
    	try {
    		FeedBack feedBack = feedBackService.getObjectById(id);
			String json = JacksonUtils.toJson(feedBack);
			Map<String,Object> oldMap= JacksonUtils.fromJson(json, HashMap.class);
			oldMap.putAll(map);
			String updateJson= JacksonUtils.toJson(oldMap);
			FeedBack fromJson = JacksonUtils.fromJson(updateJson, FeedBack.class);
			int updateCount = feedBackService.update(fromJson);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.UPDATESUCCESS.getMsg());
			successResultModel.setResult(updateCount);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.UPDATEERROR.getMsg());
		}
    	
		/*MessageResult result=new MessageResult();
		FeedBackDto feedBackDto=null;
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userJson = JacksonUtils.toJson(userBeanInfo);
		try {
			String dubboResultInfo=feedBackDtoServiceCustomer.getObjectById(userJson, "{\"id\":\""+id+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				 String resultInfo= dubboServiceResultInfo.getResult();
				 Map<String,Object> oldMap=JacksonUtils.fromJson(resultInfo, HashMap.class);
				 oldMap.putAll(map);
				 String updateJson= JacksonUtils.toJson(oldMap);
				 String updateDubboResultInfo=feedBackDtoServiceCustomer.update(userJson, updateJson);
				 DubboServiceResultInfo updateDubboServiceResultInfo= JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
				 if(updateDubboServiceResultInfo.isSucess()){
					 Integer i=JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class);
					 result.setResult(i);
					 result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
					 result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
				 }else{
					 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
					 result.setMsg(updateDubboServiceResultInfo.getMsg()+"��"+updateDubboServiceResultInfo.getExceptionMsg()+"��");
				 }
			}else{
				 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				 result.setMsg("�����ڸ��µĶ���");
			}
		} catch (Exception e) {
			try{
			 e.printStackTrace();
			 ObjectMapper mapper = new ObjectMapper();
			 String  paramJson = mapper.writeValueAsString(feedBackDto);
			 log.error("����update����:  ������"+id+","+paramJson+"��======"+"��"+e.getMessage()+"��");
			 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
			 result.setMsg(MessageInfo.UPDATEERROR.getMsg()+"��"+e.getMessage()+"��");
			}catch (JsonProcessingException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		}
		return result;*/
	}

    /**
     * 伪删除实体对象
     *
     * @param
     * @return
     */
    @ApiOperation(value = "伪修改feedBack实体",notes = "伪修改feedBack实体")
	@ApiImplicitParam(name = "id",value = "feedBack id",required = true,dataType = "String",paramType = "path")
	@RequestMapping(value="/deletePseudo/{id}",method= RequestMethod.DELETE)
	public MessageResult deletePseudo(@PathVariable("id")  String id){
    	try {
			int deletePseudoObjectById = feedBackService.deletePseudoObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deletePseudoObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return  getSuccessResultModel(MessageInfo.DELETEERROR.getMsg());
		}
    	
    	/*MessageResult result=new MessageResult();
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userJson = JacksonUtils.toJson(userBeanInfo);
		try {
			String dubboResultInfo=feedBackDtoServiceCustomer.deletePseudoObjectById(userJson, "{\"id\":\""+id+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				FeedBackDto feedBackDto=JacksonUtils.fromJson(resultInfo, FeedBackDto.class);
				result.setResult(feedBackDto);
				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.DELETEERROR.isResult());
				result.setMsg(MessageInfo.DELETEERROR.getMsg()+"��"+dubboServiceResultInfo.getExceptionMsg()+"��");
			}
		} catch (Exception e) {
			e.printStackTrace();
		    log.error("����deletePseudo����:  ������"+id+"��======"+"��"+e.getMessage()+"��");
			result.setSuccess(MessageInfo.DELETEERROR.isResult());
			result.setMsg(MessageInfo.DELETEERROR.getMsg()+"��"+e.getMessage()+"��");
		}
		
		return result;*/
	}
	
	
    /**
     * 伪删除实体对象
     *
     * @param
     * @return
     */
    @ApiOperation(value = "伪修改feedBack实体",notes = "伪修改 feedBack实体")
	@ApiImplicitParam(name = "ids",value = "feedBack ids",required = true,dataType = "String",paramType = "path")
	@RequestMapping(value="/deletePseudoBatch/{ids}",method= RequestMethod.DELETE)
	public MessageResult deletePseudoBatch(@PathVariable("ids")  String ids){
		try {
			String[] split = ids.split(",");
			List<String> asList = Arrays.asList(split);
			int deletePseudoObjectById = feedBackService.deletePseudoAllObjectByIds(asList);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deletePseudoObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return  getSuccessResultModel(MessageInfo.DELETEERROR.getMsg());
		}
		
		/*MessageResult result=new MessageResult();
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userJson = JacksonUtils.toJson(userBeanInfo);
		try {
			String dubboResultInfo=feedBackDtoServiceCustomer.deletePseudoAllObjectByIds(userJson, "{\"id\":\""+ids+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				FeedBackDto feedBackDto=JacksonUtils.fromJson(resultInfo, FeedBackDto.class);
				result.setResult(feedBackDto);
				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.DELETEERROR.isResult());
				result.setMsg(MessageInfo.DELETEERROR.getMsg()+"��"+dubboServiceResultInfo.getExceptionMsg()+"��");
			}
		} catch (Exception e) {
			e.printStackTrace();
		    log.error("����deletePseudoBatch����:  ������"+ids+"��======"+"��"+e.getMessage()+"��");
			result.setSuccess(MessageInfo.DELETEERROR.isResult());
			result.setMsg(MessageInfo.DELETEERROR.getMsg()+"��"+e.getMessage()+"��");
		}
		
		return result;*/
	}
	
}
