package com.jzy.hio.oa.content.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.utils.LoginUtils;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.oa.content.entity.ContentDictionary;
import com.jzy.hio.oa.content.service.ContentDictionaryService;
import com.jzy.tools.data.JacksonUtils;


/**
 * 数据字典控制层
 *
 * @author admin
 */
@RestController
@Api(tags = {"数据字典相关接口"})
@RequestMapping("/dictionary/contentDictionary")
public class ContentDictionaryController extends ResponseModel {

	private static Logger log = LoggerFactory.getLogger(ContentDictionaryController.class);

    @Autowired
    private ContentDictionaryService contentDictionaryService;

    /**
     * 根据Id获取业务对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @ApiOperation(value = "根据Id获取数据字典详情",notes = "根据Id获取数据字典详情")
   	@ApiImplicitParams(@ApiImplicitParam(name = "id",value = "数据字典信息id",required = true,dataType = "String",paramType = "path"))
    @RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
    public MessageResult get(@PathVariable("id") String id) {
    	try {
    		ContentDictionary contentDictionary = contentDictionaryService.getObjectById(id);
			return getSuccessResultModel(contentDictionary);
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
    	
    	
        /*MessageResult result = new MessageResult();
        try {
            String dubboResultInfo = contentDictionaryDtoServiceCustomer.getObjectById(getUserJson(), "{\"id\":\"" + id + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                ContentDictionaryDto contentDictionaryDto = JacksonUtils.fromJson(resultInfo, ContentDictionaryDto.class);
                result.setResult(contentDictionaryDto);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }


    /**
     * 返回分页对象
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "查询数据字典信息分页列表",notes = "查询数据字典信息分页列表")
   	@ApiImplicitParam(name = "map",value = "",required = true,dataType = "JSON")
    @RequestMapping(value = "/page", method = {RequestMethod.POST}, consumes = "application/json")
    public MessageResult page(@RequestBody Map<String, Object> map) {
    	try {
			Page page = contentDictionaryService.getPage(map);
			return getSuccessResultModel(page);
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
    	
    	
        /*MessageResult result = new MessageResult();
        String paramaterJson = JacksonUtils.toJson(map);
        try {
            String dubboResultInfo = contentDictionaryDtoServiceCustomer.getPage(getUserJson(), paramaterJson);
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                PageBeanInfo pageInfo = JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
                result.setResult(pageInfo);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用page方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }

    /**
     * 返回符合条件的列表
     *
     * @param paramater
     * @return
     */
    @ApiOperation(value = "查询条件返回符合条件列表",notes = "查询条件返回符合条件列表")
   	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "contentDictionary",value = "condition query",required = true,dataType = "String")})
    @RequestMapping(value = "/queryList", method = {RequestMethod.POST}, consumes = "application/json")
    public MessageResult queryList(@RequestBody ContentDictionary contentDictionary) {
    	try {
			List<ContentDictionary> list = contentDictionaryService.queryList(contentDictionary);
			return  getSuccessResultModel(list); 
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
    	
    	/*MessageResult result = new MessageResult();
        String paramaterJson = JacksonUtils.toJson(map);
        try {
            String dubboResultInfo = contentDictionaryDtoServiceCustomer.queryList(getUserJson(), paramaterJson);
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                List<ContentDictionaryDto> list = JacksonUtils.fromJson(resultInfo, ArrayList.class, ContentDictionaryDto.class);
                result.setResult(list);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }

        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用queryList方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }


    /**
     * 保存实体对象
     *
     * @param t
     * @return
     */
    @ApiOperation(value = "保存contentDictionary实体",notes = "保存contentDictionary实体")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "contentDictionary",value = "save",required = true,dataType = "String")})
    @RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
    public MessageResult save(@RequestBody ContentDictionary contentDictionary) {
    	try {
			int save = contentDictionaryService.save(contentDictionary);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.SAVESUCCESS.getMsg());
			successResultModel.setResult(save);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.SAVEERROR.getMsg());
		}
    	
        /*MessageResult result = new MessageResult();
        try {
            String saveJson = JacksonUtils.toJson(t);
            String dubboResultInfo = contentDictionaryDtoServiceCustomer.save(getUserJson(), saveJson);
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                ContentDictionaryDto contentDictionaryDto = JacksonUtils.fromJson(resultInfo, ContentDictionaryDto.class);
                result.setResult(contentDictionaryDto);
                result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
                result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.SAVEERROR.isResult());
                String msg = dubboServiceResultInfo.getExceptionMsg()==null?dubboServiceResultInfo.getMsg():"未知错误，保存失败！";
                result.setMsg(msg);
                result.setCode(dubboServiceResultInfo.getCode());
            }
        } catch (Exception e) {
            try {
                //e.printStackTrace();
                ObjectMapper mapper = new ObjectMapper();
                String paramJson = mapper.writeValueAsString(t);
                log.error("调用save方法:  【参数" + paramJson + "】======" + "【" + e.getMessage() + "】");
                result.setSuccess(MessageInfo.SAVEERROR.isResult());
                result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + e.getMessage() + "】");
            } catch (JsonProcessingException e1) {
                // TODO Auto-generated catch block
                //e1.printStackTrace();
            }

        }
        return result;*/
    }

    /**
     * 删除实体对象
     *
     * @param t
     * @return
     */
    @ApiOperation(value = "删除contentDictionary实体",notes = "删除contentDictionary实体")
	@ApiImplicitParam(name = "id",value = "contentDictionary id",required = true,dataType = "String",paramType = "path")
    @RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
    public MessageResult delete(@PathVariable("id") String id) {
    	try {
			int deleteObjectById = contentDictionaryService.deleteObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deleteObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
    	
        /*MessageResult result = new MessageResult();
        try {
            String dubboResultInfo = contentDictionaryDtoServiceCustomer.deleteObjectById(getUserJson(), "{\"id\":\"" + id + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                ContentDictionaryDto contentDictionaryDto = JacksonUtils.fromJson(resultInfo, ContentDictionaryDto.class);
                result.setResult(contentDictionaryDto);
                result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
                result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.DELETEERROR.isResult());
                result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用delete方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.DELETEERROR.isResult());
            result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
        }

        return result;*/
    }


    /**
     * 删除实体对象
     *
     * @param t
     * @return
     */
    @ApiOperation(value = "删除contentDictionary实体",notes = "删除contentDictionary实体")
   	@ApiImplicitParam(name = "ids",value = "contentDictionary ids",required = true,dataType = "String",paramType = "path")
    @RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
    public MessageResult deleteBatch(@PathVariable("ids") String ids) {
    	try {
			List<String> deleteMethod =  Arrays.asList(ids.split(","));
			int count = contentDictionaryService.deleteAllObjectByIds(deleteMethod);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(count);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
    	
    	
        /*MessageResult result = new MessageResult();
        try {
            String dubboResultInfo = contentDictionaryDtoServiceCustomer.deleteAllObjectByIds(getUserJson(), "{\"id\":\"" + ids + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                ContentDictionaryDto contentDictionaryDto = JacksonUtils.fromJson(resultInfo, ContentDictionaryDto.class);
                result.setResult(contentDictionaryDto);
                result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
                result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.DELETEERROR.isResult());
                result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用delete方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.DELETEERROR.isResult());
            result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
        }

        return result;*/
    }

    /**
     * 修改修改实体对象
     *
     * @param t
     * @return
     */
    @ApiOperation(value = "修改contentDictionary实体",notes = "修改contentDictionary实体")
   	@ApiImplicitParam(name = "id",value = "contentDictionary id",required = true,dataType = "String",paramType = "path")
    @RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
    public MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
    	try {
    		ContentDictionary contentDictionary = contentDictionaryService.getObjectById(id);
			String json = JacksonUtils.toJson(contentDictionary);
			Map<String,Object> oldMap= JacksonUtils.fromJson(json, HashMap.class);
			oldMap.putAll(map);
			String updateJson= JacksonUtils.toJson(oldMap);
			ContentDictionary fromJson = JacksonUtils.fromJson(updateJson, ContentDictionary.class);
			int updateCount = contentDictionaryService.update(fromJson);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.UPDATESUCCESS.getMsg());
			successResultModel.setResult(updateCount);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.UPDATEERROR.getMsg());
		}
    	
    	/*MessageResult result = new MessageResult();
        ContentDictionaryDto contentDictionaryDto = null;
        try {
            String dubboResultInfo = contentDictionaryDtoServiceCustomer.getObjectById(getUserJson(), "{\"id\":\"" + id + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                Map<String, Object> oldMap = JacksonUtils.fromJson(resultInfo, HashMap.class);
                oldMap.putAll(map);
                String updateJson = JacksonUtils.toJson(oldMap);
                String updateDubboResultInfo = contentDictionaryDtoServiceCustomer.update(getUserJson(), updateJson);
                DubboServiceResultInfo updateDubboServiceResultInfo = JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
                if (updateDubboServiceResultInfo.isSucess()) {
                    Integer i = JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class);
                     MessageResult result2 = this.get(id);
                    result.setResult(result2.getResult());
                    result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
                    result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());

                } else {
                    result.setSuccess(MessageInfo.UPDATEERROR.isResult());
                    String msg = updateDubboServiceResultInfo.getMsg()!=null?updateDubboServiceResultInfo.getMsg():"未知错误，保存失败！";
                    result.setMsg(msg);
                    result.setCode(updateDubboServiceResultInfo.getCode());
                }
            } else {
                result.setSuccess(MessageInfo.UPDATEERROR.isResult());
                result.setMsg("不存在更新的对象");
            }
        } catch (Exception e) {
            try {
                //e.printStackTrace();
                ObjectMapper mapper = new ObjectMapper();
                String paramJson = mapper.writeValueAsString(contentDictionaryDto);
                log.error("调用update方法:  【参数" + id + "," + paramJson + "】======" + "【" + e.getMessage() + "】");
                result.setSuccess(MessageInfo.UPDATEERROR.isResult());
                result.setMsg(MessageInfo.UPDATEERROR.getMsg() + "【" + e.getMessage() + "】");
            } catch (JsonProcessingException e1) {
                // TODO Auto-generated catch block
                //e1.printStackTrace();
            }

        }
        return result;*/
    }

    /**
     * 伪删除实体对象
     *
     * @param t
     * @return
     */
    @ApiOperation(value = "伪删除实体对象contentDictionary实体",notes = "伪删除实体对象contentDictionary实体")
    @ApiImplicitParams({@ApiImplicitParam(paramType="path",dataType = "String",name = "id",value = "id",required = true)})
    @RequestMapping(value = "/deletePseudo/{id}", method = RequestMethod.DELETE)
    public MessageResult deletePseudo(@PathVariable("id") String id) {
    	try {
			int deletePseudoObjectById = contentDictionaryService.deletePseudoObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deletePseudoObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return  getSuccessResultModel(MessageInfo.DELETEERROR.getMsg());
		}
    	
    	
    	/*MessageResult result = new MessageResult();
        try {
            String dubboResultInfo = contentDictionaryDtoServiceCustomer.deletePseudoObjectById(getUserJson(), "{\"id\":\"" + id + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                ContentDictionaryDto contentDictionaryDto = JacksonUtils.fromJson(resultInfo, ContentDictionaryDto.class);
                result.setResult(contentDictionaryDto);
                result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
                result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.DELETEERROR.isResult());
                String msg = dubboServiceResultInfo.getExceptionMsg()==null?dubboServiceResultInfo.getMsg():dubboServiceResultInfo.getExceptionMsg();
                result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + msg + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用deletePseudo方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.DELETEERROR.isResult());
            result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
        }

        return result;*/
    }


    /**
     * 伪删除实体对象
     *
     * @param t
     * @return
     */
    @ApiOperation(value = "伪删除实体对象contentDictionary实体多个",notes = "伪删除实体对象contentDictionary实体多个")
    @ApiImplicitParams({@ApiImplicitParam(paramType="path",dataType = "String",name = "ids",value = "ids",required = true)})
    @RequestMapping(value = "/deletePseudoBatch/{ids}", method = RequestMethod.DELETE)
    public MessageResult deletePseudoBatch(@PathVariable("ids") String ids) {
    	try {
			String[] split = ids.split(",");
			List<String> asList = Arrays.asList(split);
			int deletePseudoObjectById = contentDictionaryService.deletePseudoAllObjectByIds(asList);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deletePseudoObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return  getSuccessResultModel(MessageInfo.DELETEERROR.getMsg());
		}
        /*MessageResult result = new MessageResult();
        try {
            String dubboResultInfo = contentDictionaryDtoServiceCustomer.deletePseudoAllObjectByIds(getUserJson(), "{\"id\":\"" + ids + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                ContentDictionaryDto contentDictionaryDto = JacksonUtils.fromJson(resultInfo, ContentDictionaryDto.class);
                result.setResult(contentDictionaryDto);
                result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
                result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.DELETEERROR.isResult());
                result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用deletePseudoBatch方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.DELETEERROR.isResult());
            result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
        }

        return result;*/
    }

    @ApiOperation(value = "返回分页对象",notes = "返回分页对象node")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "map",value = "limit query",required = true,dataType = "Map")})
    @RequestMapping(value = "/queryDictionaryTree", method = {RequestMethod.POST}, consumes = "application/json")
    public MessageResult queryDictionaryTree(@RequestBody Map<String,Object> map) {
    	
    	try {
    		List<Map<String, Object>> list = contentDictionaryService.queryDictionaryTree(map);
			return  getSuccessResultModel(list); 
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
    	
        /*MessageResult result = new MessageResult();
        String paramaterJson = JacksonUtils.toJson(map);
        try {
            String dubboResultInfo = contentDictionaryDtoServiceCustomer.queryDictionaryTree(getUserJson(), paramaterJson);
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                List<ContentDictionaryDto> list = JacksonUtils.fromJson(resultInfo, ArrayList.class, ContentDictionaryDto.class);
                result.setResult(list);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }

        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用queryDictionaryTree方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }

    /**
     * 获取数据字典树结构
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
   /* @Deprecated
    @RequestMapping(value = "/getContentDictionaryTreeById/{id}", method = RequestMethod.GET)
    public
    @ResponseBody
    MessageResult getContentDictionaryTreeById(@PathVariable("id") String id) {
        MessageResult result = new MessageResult();
        try {
            String dubboResultInfo = contentDictionaryDtoServiceCustomer.getContentDictionaryTreeById(getUserJson(), "{\"id\":\"" + id + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                List<ContentChildTreeData> contentList = JacksonUtils.fromJson(resultInfo, ArrayList.class, ContentChildTreeData.class);
                result.setResult(contentList);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用getContentList方法:  【参数】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;
    }*/

}
