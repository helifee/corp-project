package com.jzy.hio.oa.meeting.controller;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.oa.content.dto.ContentChildTreeData;
import com.jzy.hio.oa.meeting.dto.MeetingTypeDto;
import com.jzy.hio.oa.meeting.entity.MeetingType;
import com.jzy.hio.oa.meeting.service.MeetingTypeService;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.hio.base.controller.BaseController;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * 会议类型表控制层
 * @author wangw
 *
 */
@RestController
@Api(tags = {"会议类型相关接口"})
@RequestMapping("/meeting/meetingType")
public class MeetingTypeController extends BaseController<MeetingTypeService>{

	private static Logger log = LoggerFactory.getLogger(MeetingTypeController.class);

	@Autowired
	private MeetingTypeService meetingTypeService;
	
	
	
	/**
	 * 保存实体对象
	 * 
	 * @param t
	 * @return
	 */
	@Override
	@RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
	public @ResponseBody MessageResult save(@RequestBody String json) {
		MessageResult result = new MessageResult();
		try {
			MeetingType meetingType=JacksonUtils.fromJson(json, MeetingType.class);
			int resultInfo = meetingTypeService.saveMeetingType(meetingType);
			if (resultInfo == 5) {
				result.setError("保存对象失败，数据库已存在");
			}else {
				result.setResult(JacksonUtils.toJson(meetingType), MessageInfo.SAVESUCCESS.getMsg());
			}
			
		} catch (Exception e) {
			log.error("保存对象失败!" + e.getMessage());
			result.setError("保存对象失败!");
		}
		return result;
	}
	


	/**
	 * 修改修改实体对象
	 * @param t
	 * @return
	 */
	@Override
	@ApiOperation(value = "修改meetingType实体",notes = "修改meetingType实体")
	@ApiImplicitParam(name = "id",value = "meetingType id",required = true,dataType = "String",paramType = "path")
	@RequestMapping(value="/update/{id}",method= RequestMethod.PUT,consumes="application/json")
	public MessageResult update(@PathVariable("id")  String id, @RequestBody Map<String,Object> map){
		MessageResult result = new MessageResult();
		try {
			MeetingType meetingType = meetingTypeService.getObjectById(id);
			String json = JacksonUtils.toJson(meetingType);
			Map<String,Object> oldMap= JacksonUtils.fromJson(json, HashMap.class);
			oldMap.putAll(map);
			String updateJson= JacksonUtils.toJson(oldMap);
			MeetingType fromJson = JacksonUtils.fromJson(updateJson, MeetingType.class);
			int updateCount = meetingTypeService.updateMeetingType(fromJson);
			result.setResult(String.valueOf(updateCount), MessageInfo.UPDATESUCCESS.getMsg());
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			result.setError(MessageInfo.UPDATEERROR.getMsg());
		}
		return result;
		
		/*MessageResult result=new MessageResult();
		MeetingTypeDto meetingTypeDto=null;
		try {
			String dubboResultInfo=meetingTypeDtoServiceCustomer.getObjectById(getUserJson(), "{\"id\":\""+id+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				 String resultInfo= dubboServiceResultInfo.getResult();
				 Map<String,Object> oldMap=JacksonUtils.fromJson(resultInfo, HashMap.class);
				 oldMap.putAll(map);
				 String updateJson= JacksonUtils.toJson(oldMap);
				 String updateDubboResultInfo=meetingTypeDtoServiceCustomer.update(getUserJson(), updateJson);
				 DubboServiceResultInfo updateDubboServiceResultInfo= JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
				 if(updateDubboServiceResultInfo.isSucess()){
					 Integer i=JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class);
					 result.setResult(i);
					 result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
					 result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
				 }else{
					 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
					 result.setMsg(updateDubboServiceResultInfo.getMsg()+"【"+updateDubboServiceResultInfo.getExceptionMsg()+"】");
				 }
			}else{
				 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				 result.setMsg("不存在更新的对象");
			}
		} catch (Exception e) {
			try{
			 //e.printStackTrace();
			 ObjectMapper mapper = new ObjectMapper();
			 String  paramJson = mapper.writeValueAsString(meetingTypeDto);
			 log.error("调用update方法:  【参数"+id+","+paramJson+"】======"+"【"+e.getMessage()+"】");
			 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
			 result.setMsg(MessageInfo.UPDATEERROR.getMsg()+"【"+e.getMessage()+"】");
			}catch (JsonProcessingException e1) {
				// TODO Auto-generated catch block
				//e1.printStackTrace();
			}

		}
		return result;*/
	}
	
	
	/**
	 * 返回符合条件的列表
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value = "查询会议类型树信息",notes = "查询会议类型树信息")
   	@ApiImplicitParam(name = "map",value = "",required = true,dataType = "JSON")
	@RequestMapping(value="/getTypetree",method={RequestMethod.POST}, consumes="application/json")
	public MessageResult getTypetree(@RequestBody Map<String,Object> map){
		MessageResult result = new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			List<MeetingTypeDto> list = meetingTypeService.getTypetree(paramaterJson);
			result.setResult(list, MessageInfo.QUERYSUCCESS.getMsg());
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			result.setError(e.getMessage());
		}
		return result;
		
		
		/*MessageResult result=new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userJson = JacksonUtils.toJson(userBeanInfo);
			String dubboResultInfo=meetingTypeDtoServiceCustomer.getTypetree(userJson, paramaterJson);
		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		    if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				List<MeetingTypeDto> list=JacksonUtils.fromJson(resultInfo, ArrayList.class,MeetingTypeDto.class);
				result.setResult(list);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
		    }else{
		    	result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
		    }
			
		} catch (Exception e) {
			////e.printStackTrace();
			log.error("调用queryList方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;*/
	}

	
	/**
	 * 修改会议类别的启用禁用
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "根据Id修改meetingType实体",notes = "根据Id修改meetingType实体")
	@ApiImplicitParams(@ApiImplicitParam(name = "id",value = "与会会议类型信息id",required = true,dataType = "String",paramType = "path"))
	@RequestMapping(value="/updateStatus/{id}",method= RequestMethod.PUT,consumes="application/json")
	public MessageResult updateStatus(@PathVariable("id")  String id){
		MessageResult result = new MessageResult();
		try {
			MeetingType meetingType = meetingTypeService.getObjectById(id);
			int count = meetingTypeService.updateStatus(meetingType);
			result.setResult(String.valueOf(count), MessageInfo.UPDATESTATUSSUCCESS.getMsg());
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");
			result.setMsg(e.getMessage());
		}
		return result;
		
		/*MessageResult result=new MessageResult();
		try {
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userJson = JacksonUtils.toJson(userBeanInfo);
			String dubboResultInfo=meetingTypeDtoServiceCustomer.updateStatus(userJson, "{\"id\":\""+id+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				int i=JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), Integer.class);
				result.setResult(i);
				result.setSuccess(MessageInfo.UPDATESTATUSSUCCESS.isResult());
				result.setMsg(MessageInfo.UPDATESTATUSSUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.UPDATESTATUSERROR.isResult());
				result.setMsg(MessageInfo.UPDATESTATUSERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {
			////e.printStackTrace();
		    log.error("调用修改状态方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.UPDATESTATUSERROR.isResult());
			result.setMsg(MessageInfo.UPDATESTATUSERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		
		return result;*/
	}
	
	@ApiOperation(value = "根据Id修改meetingType实体",notes = "根据Id修改meetingType实体")
	@ApiImplicitParams(@ApiImplicitParam(name = "id",value = "会议类型记录信息id",required = true,dataType = "String",paramType = "path"))
	@RequestMapping(value="/updateChildStatusByParentId/{id}",method= RequestMethod.PUT,consumes="application/json")
	public MessageResult updateChildStatusByParentId(@PathVariable("id")  String id){
		MessageResult result = new MessageResult();
		try {
			MeetingType meetingType = new MeetingType();
			meetingType.setId(id);
			int resultCount = meetingTypeService.updateChildStatusByParentIdNew(meetingType);
			result.setResult(resultCount, MessageInfo.UPDATESTATUSSUCCESS.getMsg());
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");
			result.setError(e.getMessage());
		}
		return result;
		
		/*MessageResult result=new MessageResult();
		try {
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userJson = JacksonUtils.toJson(userBeanInfo);
			String dubboResultInfo=meetingTypeDtoServiceCustomer.updateChildStatusByParentIdNew(userJson, "{\"id\":\""+id+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				int i=JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), Integer.class);
				result.setResult(i);
				result.setSuccess(MessageInfo.UPDATESTATUSSUCCESS.isResult());
				result.setMsg(MessageInfo.UPDATESTATUSSUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.UPDATESTATUSERROR.isResult());
				result.setMsg(MessageInfo.UPDATESTATUSERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {
			////e.printStackTrace();
		    log.error("调用修改状态方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.UPDATESTATUSERROR.isResult());
			result.setMsg(MessageInfo.UPDATESTATUSERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		
		return result;*/
	}
	
	
	/**
	 * 获取会议类别的树结构
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value = "查询会议类别的树结构信息",notes = "查询会议类别的树结构信息")
   	@ApiImplicitParam(name = "map",value = "",required = true,dataType = "JSON")
	@RequestMapping(value="/getMeetingTypeTree",method={RequestMethod.POST}, consumes="application/json")
	public MessageResult getMeetingTypeTree(@RequestBody Map<String,Object> map){
		MessageResult result = new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			//查询菜单树
			List<ContentChildTreeData> list = meetingTypeService.getMeetingTypeTree(paramaterJson);
			result.setResult(list, MessageInfo.QUERYSUCCESS.getMsg());
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			result.setError(e.getMessage());
		}
		return result;
	}
	
	
	/**
	 * 获取会议类别的树结构
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value = "查询会议类别的树结构",notes = "查询会议类别的树结构")
   	@ApiImplicitParam(name = "map",value = "",required = true,dataType = "JSON")
	@RequestMapping(value="/judgeChildIdByTargetId",method={RequestMethod.POST}, consumes="application/json")
	public MessageResult judgeChildIdByTargetId(@RequestBody Map<String,Object> map){
		MessageResult result = new MessageResult();
		try {
			//查询菜单树
			int count = meetingTypeService.judgeChildIdByTargetId(map);
			result.setResult(count, MessageInfo.QUERYSUCCESS.getMsg());
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");
			result.setError(e.getMessage());
		}
		return result;
		
		
		/*MessageResult result=new MessageResult();
		try {
			//查询菜单树
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userJson = JacksonUtils.toJson(userBeanInfo);
			String dubboResultInfo=meetingTypeDtoServiceCustomer.judgeChildIdByTargetId(userJson, map);
		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		    if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				result.setResult(resultInfo);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
		    }else{
		    	result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
		    }
			
		} catch (Exception e) {
			////e.printStackTrace();
			log.error("调用judgeChildIdByTargetId方法:  【参数"+map+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;*/
	}
	
	
	/**
	 * 验证对象是否存在
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "验证对象是否存在",notes = "验证对象是否存在")
   	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "meetingType",value = "judgeRepeatObject",required = true,dataType = "String")})
	@RequestMapping(value="/judgeRepeatObject",method= RequestMethod.POST, consumes="application/json")
	public MessageResult judgeRepeatObject(@RequestBody MeetingType meetingType){
		MessageResult result = new MessageResult();
		try {
			int count = meetingTypeService.judgeRepeatObject(meetingType);
			result.setResult(String.valueOf(count), MessageInfo.QUERYSUCCESS.getMsg());
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");
			result.setError(e.getMessage());
		}
		return result;
		
		
		/*MessageResult result=new MessageResult();
		try {
			String saveJson= JacksonUtils.toJson(t);
			String dubboResultInfo=meetingTypeDtoServiceCustomer.judgeRepeatObject(getUserJson(), saveJson);
		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		    if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				result.setResult(resultInfo);
				result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
				result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
		    }else{
		    	result.setSuccess(MessageInfo.SAVEERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
		    }
		} catch (Exception e) {
			try {
				//e.printStackTrace();
			    ObjectMapper mapper = new ObjectMapper();
				String  paramJson = mapper.writeValueAsString(t);
				log.error("调用judgeRepeatObject方法:  【参数"+paramJson+"】======"+"【"+e.getMessage()+"】");
				result.setSuccess(MessageInfo.SAVEERROR.isResult());
				result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+e.getMessage()+"】");
			} catch (JsonProcessingException e1) {
				// TODO Auto-generated catch block
				//e1.printStackTrace();
			}
		}
		return result;*/
	}

	
	
	/**
	 * 批量设置领导岗位
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "批量设置领导岗位信息",notes = "批量设置领导岗位信息")
   	@ApiImplicitParam(name = "map",value = "",required = true,dataType = "JSON")
	@RequestMapping(value="/updateBatchFlow",method= RequestMethod.PUT,consumes="application/json")
	public MessageResult updateBatchLeaderId(@RequestBody Map<String,Object> map){
		MessageResult result = new MessageResult();
		try {
			Integer count = meetingTypeService.updateBatchFlow(map);
			result.setResult(count, MessageInfo.UPDATESUCCESS.getMsg());
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");
			result.setError(e.getMessage());
		}
		return result;
		
		
		/*MessageResult result=new MessageResult();
		String updateJson= JacksonUtils.toJson(map);
		try {
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userJson = JacksonUtils.toJson(userBeanInfo);
			String updateDubboResultInfo=meetingTypeDtoServiceCustomer.updateBatchFlow(userJson, updateJson);
			DubboServiceResultInfo updateDubboServiceResultInfo= JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
			if(updateDubboServiceResultInfo.isSucess()){
				Integer i=JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class);
				result.setResult(i);
				result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
				result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				result.setMsg(updateDubboServiceResultInfo.getMsg()+"【"+updateDubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error("调用updateBatchFlow方法:  【参数"+updateJson+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.UPDATEERROR.isResult());
			result.setMsg(MessageInfo.UPDATEERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;*/
	}
	

}
