package com.jzy.hio.oa.servey.dto.service.impl;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.jzy.hio.base.utils.DubboServiceResultInfo;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.oa.servey.dto.ServeyCategoryDto;
import com.jzy.hio.oa.servey.dto.service.ServeyCategoryDtoServiceCustomer;
import com.jzy.hio.oa.servey.entity.ServeyCategory;
import com.jzy.hio.oa.servey.service.ServeyCategoryService;
import com.jzy.hio.oa.servey.service.ServeyService;

/**
 * @author admin
 * 
 *
 */
@Service
public class ServeyCategoryDtoServiceProducer implements ServeyCategoryDtoServiceCustomer {
	private static Logger log = Logger.getLogger(ServeyCategoryDtoServiceProducer.class);
	@Autowired
	private ServeyCategoryService serveyCategoryService;

//	@Autowired
	private ServeyService serveyService;

	public String save(String userInfo, String saveJson) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			ServeyCategory serveyCategory = JacksonUtils.fromJson(saveJson, ServeyCategory.class);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("name", serveyCategory.getName());
			map.put("parentId", serveyCategory.getParentId());
			List list = serveyCategoryService.queryListByExample(map);
			if (list != null && list.size() > 0) {
				info.setResult(JacksonUtils.toJson(serveyCategory));
				info.setSucess(false);
				info.setMsg("名称重复，请修改!");
				info.setExceptionMsg("名称重复，请修改!");
			} else {
				serveyCategoryService.save(serveyCategory);
				info.setResult(JacksonUtils.toJson(serveyCategory));
				info.setSucess(true);
				info.setMsg("保存对象成功!");
			}
		} catch (Exception e) {
			log.error("保存对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("保存对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			ServeyCategory serveyCategory = JacksonUtils.fromJson(updateJson, ServeyCategory.class);
			Map<String, String> map = new HashMap<>();
			map.put("name", serveyCategory.getName());
			map.put("parentId", serveyCategory.getParentId());
			// List<String> ids = new ArrayList<>();
			// ids.addAll(map.values());
			// List<ServeyCategory> list =
			// serveyCategoryService.deletePseudoAllObjectByIds(ids);
			// int result = serveyCategoryService.deletePseudoAllObjectByIds(ids);
			// if (result > 0 && !(list.get(0).getId().equals(serveyCategory.getId()))) {
			// info.setResult(JacksonUtils.toJson(serveyCategory));
			// info.setSucess(false);
			// info.setMsg("名称重复，请修改!");
			// info.setExceptionMsg("名称重复，请修改!");
			// } else {
			int result = serveyCategoryService.update(serveyCategory);
			info.setResult(JacksonUtils.toJson(result));
			info.setSucess(true);
			info.setMsg("更新对象成功!");
			// }
		} catch (Exception e) {
			log.error("更新对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("更新对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			ServeyCategory serveyCategory = JacksonUtils.fromJson(deleteJson, ServeyCategory.class);
			int result = serveyCategoryService.deleteObjectById(serveyCategory.getId());
			info.setResult(JacksonUtils.toJson(result));
			info.setSucess(true);
			info.setMsg("删除对象成功!");
		} catch (Exception e) {
			log.error("更新对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("删除更新对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			if (StringUtils.isNotBlank(deleteJsonList)) {
				Map map = JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				int result = serveyCategoryService.deleteServeyCategoryByParentId(map);
				if (result == 1) {
					info.setResult(JacksonUtils.toJson(result));
					info.setSucess(true);
					info.setMsg("删除对象成功!");
				} else {
					info.setResult(JacksonUtils.toJson(deleteJsonList));
					info.setSucess(false);
					info.setMsg("问卷已被引用!");
					info.setExceptionMsg("问卷已被引用!");
				}
			}
		} catch (Exception e) {
			log.error("删除对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("删除更新对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			ServeyCategory serveyCategory = JacksonUtils.fromJson(getJson, ServeyCategory.class);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("idVal", serveyCategory.getId());
			List<Map<String, Object>> result = serveyCategoryService.getServeyCategoryById(map);
			ServeyCategoryDto serveyCategoryDto = new ServeyCategoryDto();
			if (result != null && result.size() > 0) {
				serveyCategoryDto.setId(getStr(result.get(0).get("id")));
				serveyCategoryDto.setName(getStr(result.get(0).get("name")));
				serveyCategoryDto.setParentId(getStr(result.get(0).get("parentId")));
				serveyCategoryDto.setParentName(getStr(result.get(0).get("parentName")));
				serveyCategoryDto.setDescription(getStr(result.get(0).get("description")));
				int concurrencyVersion = 0;
				if (getStr(result.get(0).get("concurrencyVersion")) != null) {
					concurrencyVersion = Integer.valueOf(getStr(result.get(0).get("concurrencyVersion")));
				}
				serveyCategoryDto.setConcurrencyVersion(concurrencyVersion);
			}
			info.setResult(JacksonUtils.toJson(serveyCategoryDto));
			info.setSucess(true);
			info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			log.error("获取对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("获取对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			if (StringUtils.isNotBlank(paramater)) {
				Map map = JacksonUtils.fromJson(paramater, HashMap.class);
				Page page = serveyCategoryService.getServeyCategoryByPage(map);
				info.setResult(JacksonUtils.toJson(page));
				info.setSucess(true);
				info.setMsg("获取分页对象成功!");
			} else {
				Page page = serveyCategoryService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
				info.setSucess(true);
				info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			log.error("获取分页对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("获取分页对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			if (StringUtils.isNotBlank(paramater)) {
				Map map = JacksonUtils.fromJson(paramater, HashMap.class);
//				List list = serveyCategoryService.deletePseudoAllObjectByIds(map);
//				info.setResult(JacksonUtils.toJson(list));
				info.setSucess(true);
				info.setMsg("获取列表对象成功!");
			} else {
				List list = serveyCategoryService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
				info.setSucess(true);
				info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			log.error("获取列表对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("获取列表对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			ServeyCategory serveyCategory = JacksonUtils.fromJson(deleteJson, ServeyCategory.class);
			int result = serveyCategoryService.deletePseudoObjectById(serveyCategory.getId());
			info.setResult(JacksonUtils.toJson(result));
			info.setSucess(true);
			info.setMsg("删除对象成功!");
		} catch (Exception e) {
			log.error("更新对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("删除更新对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo, String deleteJsonList) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			if (StringUtils.isNotBlank(deleteJsonList)) {
				Map map = JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				List<String> list = Arrays.asList(map.get("id").toString().split(","));
				int result = serveyCategoryService.deletePseudoAllObjectByIds(list);
				info.setResult(JacksonUtils.toJson(result));
				info.setSucess(true);
				info.setMsg("删除对象成功!");
			}
		} catch (Exception e) {
			log.error("删除对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("删除更新对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	public String getStr(Object obj) {
		String str = null;
		if (obj != null) {
			str = String.valueOf(obj);
		}
		return str;
	}
}
