package com.jzy.hio.oa.bbs.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.base.utils.ErrorInfoCode;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.oa.bbs.entity.BbsTopic;
import com.jzy.hio.oa.bbs.service.BbsTopicService;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.tools.login.LoginUtils;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

/**
 * 主题（帖子）控制层
 *
 * @author admin
 */
@RestController
@Api(tags = {"主题（帖子）相关接口"})
@RequestMapping("/bbs/topic")
public class BbsTopicController extends BaseController<BbsTopicService> {

    @Autowired
    private BbsTopicService bbsTopicService;

    /**
     * @Description:查询用户信息
     * @author:zhangfangzhi
     * @date 2017年6月23日 下午2:15:26
     * @version V1.0
     */
    @ApiOperation(value = "查询用户信息", notes = "查询用户信息")
    @RequestMapping(value = "/getUserInfo", method = RequestMethod.GET)
    public MessageResult getUserInfo() {
        MessageResult result = new MessageResult();
        try {
            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
            result.setResult(userBeanInfo.getSecurityUserDto());
            result.setSuccess(MessageInfo.GETSUCCESS.isResult());
            result.setMsg(MessageInfo.GETSUCCESS.getMsg());
        } catch (Exception e) {
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
            result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
        }
        return result;
    }

    /**
     * 论坛管理、所有帖子
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "查询主题（帖子）分页列表", notes = "查询主题（帖子）分页列表")
    @ApiImplicitParam(name = "map", value = "", required = true, dataType = "JSON")
    public MessageResult page(@RequestBody Map<String, Object> map) {
        try {
            Page page = bbsTopicService.queryPage(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, page);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

        /*
         * MessageResult result=new MessageResult(); String paramaterJson = JacksonUtils.toJson(map); try { String dubboResultInfo=bbsTopicDtoServiceCustomer.getPage(getUserJson(),
         * paramaterJson); DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
         * if(dubboServiceResultInfo.isSucess()){ String resultInfo= dubboServiceResultInfo.getResult(); PageBeanInfo pageInfo=JacksonUtils.fromJson(resultInfo,
         * PageBeanInfo.class); result.setResult(pageInfo); result.setSuccess(MessageInfo.GETSUCCESS.isResult()); result.setMsg(MessageInfo.GETSUCCESS.getMsg()); }else{
         * result.setSuccess(MessageInfo.GETERROR.isResult()); result.setMsg(MessageInfo.GETERROR.getMsg()); result.setCode (dubboServiceResultInfo.getCode ()); } } catch
         * (Exception e) { result.setSuccess(MessageInfo.GETERROR.isResult()); result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
         * result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue()); } return result;
         */
    }

    /**
     * 论坛管理 <br/>
     * <p>
     * <pre>
     * 发表的
     * {status=PUBLISHED, sortFields={"stick":"desc","sortNum":"asc","createDate":"desc"}, _search=false, nd=1517486340074, rows=20, page=1, sidx=id, sord=desc, start=0, limit=20, createPersonId=aa00d0ae42134f0b99c96f37931eee78, delflag=false}
     * 参与的讨论
     * {status=PUBLISHED, oper=reply, sortFields={"stick":"desc","sortNum":"asc","createDate":"desc"}, _search=false, nd=1517486306820, rows=20, page=1, sidx=id, sord=desc, start=0, limit=20}
     * 草稿
     * {status=DRAFT, sortFields={"stick":"desc","sortNum":"asc","createDate":"desc"}, _search=false, nd=1517486542785, rows=20, page=1, sidx=id, sord=desc, start=0, limit=20, createPersonId=aa00d0ae42134f0b99c96f37931eee78, delflag=false}
     * </pre>
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "查询mine主题（帖子）分页列表", notes = "查询mine主题（帖子）分页列表")
    @ApiImplicitParam(name = "map", value = "", required = true, dataType = "JSON")
    @RequestMapping(value = "/mine/page", method = {RequestMethod.POST}, consumes = "application/json")
    public MessageResult minePage(@RequestBody Map<String, Object> map) {
        try {
            Page page = bbsTopicService.getMinePage(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, page);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

        /*
         * MessageResult result=new MessageResult(); String paramaterJson = JacksonUtils.toJson(map); try { String
         * dubboResultInfo=bbsTopicDtoServiceCustomer.getMinePage(getUserJson(), paramaterJson); DubboServiceResultInfo dubboServiceResultInfo=
         * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if(dubboServiceResultInfo.isSucess()){ String resultInfo= dubboServiceResultInfo.getResult();
         * PageBeanInfo pageInfo=JacksonUtils.fromJson(resultInfo, PageBeanInfo.class); result.setResult(pageInfo); result.setSuccess(MessageInfo.GETSUCCESS.isResult());
         * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); }else{ result.setSuccess(MessageInfo.GETERROR.isResult()); result.setMsg(MessageInfo.GETERROR.getMsg()); result.setCode
         * (dubboServiceResultInfo.getCode ()); } } catch (Exception e) { result.setSuccess(MessageInfo.GETERROR.isResult()); result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
         * result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue()); } return result;
         */
    }

    /**
     * @Description:帖子收藏
     * @author:zhangfangzhi
     * @date 2017年6月23日 上午8:55:13
     * @version V1.0
     */
    @ApiOperation(value = "收藏帖子", notes = "收藏帖子")
    @ApiImplicitParam(name = "ids", value = "bbs topic ids", required = true, dataType = "String", paramType = "path")
    @RequestMapping(value = "/addFavorite/{ids}", method = RequestMethod.POST, consumes = "application/json")
    public MessageResult addFavorite(@PathVariable("ids") String ids) {
        try {
            List<String> addIds = Arrays.asList(ids.split(","));
            int save = bbsTopicService.addFavorite(addIds);
            MessageResult successResultModel = ResponseModel.getResult(MessageInfo.SAVESUCCESS, save);
            successResultModel.setResult(save);
            return successResultModel;
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult(MessageInfo.SAVEERROR.getMsg());
        }

        /*
         * MessageResult result=new MessageResult(); try { String dubboResultInfo=bbsTopicDtoServiceCustomer.addFavorite(getUserJson(), "{\"id\":\""+ids+"\"}");
         * DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if(dubboServiceResultInfo.isSucess()){ String
         * resultInfo= dubboServiceResultInfo.getResult(); BbsTopicDto BbsTopicDto=JacksonUtils.fromJson(resultInfo, BbsTopicDto.class); result.setResult(BbsTopicDto);
         * result.setSuccess(MessageInfo.SAVESUCCESS.isResult()); result.setMsg(MessageInfo.SAVESUCCESS.getMsg()); }else{ result.setSuccess(MessageInfo.SAVEERROR.isResult());
         * result.setMsg(MessageInfo.SAVEERROR.getMsg()); } } catch (Exception e) { try { ObjectMapper mapper = new ObjectMapper(); String paramJson =
         * mapper.writeValueAsString(ids); log.error("调用save方法:  【参数"+paramJson+"】======"+"【"+e.getMessage()+"】"); result.setSuccess(MessageInfo.SAVEERROR.isResult());
         * result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName()); result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue()); } catch (JsonProcessingException e1) { }
         *
         * } return result;
         */
    }

    /**
     * 计算帖子点击量
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "添加点击量帖子", notes = "添加点击量帖子")
    @ApiImplicitParam(name = "id", value = "bbs topic id", required = true, dataType = "String", paramType = "path")
    @RequestMapping(value = "/hit/{id}", method = RequestMethod.PUT, consumes = "application/json")
    public MessageResult clickNum(@PathVariable("id") String id) {
        try {
            int count = bbsTopicService.updateClickNum(id);
            MessageResult successResultModel = ResponseModel.getResult(MessageInfo.DELETESUCCESS, count);
            successResultModel.setResult(count);
            return successResultModel;
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult(MessageInfo.GETERROR.getMsg());
        }

        /*
         * MessageResult result=new MessageResult(); try { String updateDubboResultInfo=bbsTopicDtoServiceCustomer.updateClickNum(getUserJson(),id); DubboServiceResultInfo
         * updateDubboServiceResultInfo= JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class); result.setSuccess (updateDubboServiceResultInfo.isSucess ());
         * result.setMsg (updateDubboServiceResultInfo.getMsg ()); result.setResult (updateDubboServiceResultInfo.getResult ()); } catch (Exception e) {
         * log.error("调用click方法:  【参数"+id); result.setSuccess(MessageInfo.UPDATEERROR.isResult()); result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
         * result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue()); } return result;
         */
    }

    /**
     * 返回主题明细分页对象
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "返回主题明细分页对象", notes = "返回主题明细分页对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/detail/page", method = {RequestMethod.POST}, consumes = "application/json")
    public MessageResult detailPage(@RequestBody Map<String, Object> map) {
        try {
            Page page = bbsTopicService.queryDetailPage(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, page);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

        /*
         * MessageResult result=new MessageResult(); String paramaterJson = JacksonUtils.toJson(map); try { String
         * dubboResultInfo=bbsTopicDtoServiceCustomer.getDetailPage(getUserJson(), paramaterJson); DubboServiceResultInfo dubboServiceResultInfo=
         * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if(dubboServiceResultInfo.isSucess()){ String resultInfo= dubboServiceResultInfo.getResult();
         * PageBeanInfo pageInfo=JacksonUtils.fromJson(resultInfo, PageBeanInfo.class); result.setResult(pageInfo); result.setSuccess(MessageInfo.GETSUCCESS.isResult());
         * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); }else{ result.setSuccess(MessageInfo.GETERROR.isResult()); result.setMsg(MessageInfo.GETERROR.getMsg()); } } catch
         * (Exception e) { log.error("调用page方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】"); result.setSuccess(MessageInfo.GETERROR.isResult());
         * result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName()); result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue()); } return result;
         */
    }

    /**
     * 修改修改实体对象
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "修改修改实体对象", notes = "修改修改实体对象")
    @ApiImplicitParam(name = "id", value = "bbs topic id", required = true, dataType = "String", paramType = "path")
    @RequestMapping(value = "/updateStatus/{id}", method = RequestMethod.POST, consumes = "application/json")
    public MessageResult updateStatus(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
        try {
            BbsTopic bbsTopic = bbsTopicService.getObjectById(id);
            String json = JacksonUtils.toJson(bbsTopic);
            Map<String, Object> oldMap = JacksonUtils.fromJson(json, HashMap.class);
            oldMap.putAll(map);
            String updateJson = JacksonUtils.toJson(oldMap);
            String updateResultInfo = bbsTopicService.updateState(updateJson);
            MessageResult successResultModel = ResponseModel.getResult(MessageInfo.UPDATESUCCESS, updateJson);
            successResultModel.setResult(updateResultInfo);
            return successResultModel;
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult(MessageInfo.UPDATEERROR.getMsg());
        }

        /*
         * MessageResult result=new MessageResult(); try { String dubboResultInfo=bbsTopicDtoServiceCustomer .getObjectById(getUserJson(), "{\"id\":\""+id+"\"}");
         * DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if(dubboServiceResultInfo.isSucess()){ String
         * updateJson= JacksonUtils.toJson(map); String updateDubboResultInfo=bbsTopicDtoServiceCustomer.updateStatus(getUserJson(), updateJson); DubboServiceResultInfo
         * updateDubboServiceResultInfo= JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class); result.setCode (updateDubboServiceResultInfo.getCode ());
         * result.setSuccess (updateDubboServiceResultInfo.isSucess ()); result.setResult (updateDubboServiceResultInfo.getResult ()); result.setMsg
         * (updateDubboServiceResultInfo.getMsg ()); }else{ result.setSuccess(MessageInfo.UPDATEERROR.isResult()); result.setMsg("不存在更新的对象"); result.setCode
         * (ErrorInfoCode.NULL_ERROR.getValue ()); } } catch (Exception e) { result.setSuccess(MessageInfo.UPDATEERROR.isResult());
         * result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName()); result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
         *
         * } return result;
         */
    }

    private String getUserJson() {
        SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();

        String userJson = JacksonUtils.toJson(userBeanInfo);
        return userJson;
    }

    /**
     * 首页portal综合信息论坛模块列表
     *
     * @return
     */
    @ApiOperation(value = "首页portal综合信息论坛模块列表", notes = "首页portal综合信息论坛模块列表")
    @RequestMapping(value = "/getBbsForumForPortal", method = RequestMethod.GET)
    public MessageResult getBbsForumForPortal() {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("portalPermission", "1");
        map.put("sidx", "sortNum");
        map.put("sord", "asc");
        map.put("delflag", false);
        try {
            Page page = bbsTopicService.queryPage(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, page);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

        /*
         * MessageResult result=new MessageResult(); Map<String,Object> map = new HashMap<String,Object>(); map.put("portalPermission","1"); map.put("sidx","sortNum");
         * map.put("sord","asc"); map.put("delflag",false); String paramaterJson = JacksonUtils.toJson(map); try { String
         * dubboResultInfo=bbsForumDtoServiceCustomer.queryList(getUserJson(), paramaterJson); DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo,
         * DubboServiceResultInfo.class); if(dubboServiceResultInfo.isSucess()){ String resultInfo= dubboServiceResultInfo.getResult(); List<BbsForumDto>
         * list=JacksonUtils.fromJson(resultInfo, ArrayList.class, BbsForumDto.class); result.setResult(list); result.setSuccess(MessageInfo.GETSUCCESS.isResult());
         * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); }else{ result.setSuccess(MessageInfo.GETERROR.isResult());
         * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】"); }
         *
         * } catch (Exception e) {
         *
         * log.error("调用queryList方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】"); result.setSuccess(MessageInfo.GETERROR.isResult());
         * result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName()); result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue()); } return result;
         */
    }

    /**
     * 首页portal综合信息论坛模块列表
     *
     * @return
     */
    @ApiOperation(value = "首页portal综合信息论坛模块列表", notes = "首页portal综合信息论坛模块列表")
    @ApiImplicitParam(name = "forumId", value = "forumId id", required = true, dataType = "String", paramType = "path")
    @RequestMapping(value = "/getBbsForumItemForPortal/{forumId}", method = RequestMethod.GET)
    public MessageResult getBbsForumItemForPortal(@PathVariable("forumId") String forumId) {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("forumId", forumId);
        map.put("status", "PUBLISHED");
        map.put("screen", false);
        map.put("start", 0);
        map.put("limit", 10);
        map.put("delflag", false);
        List<Map<String, Object>> orderByList = new ArrayList<Map<String, Object>>();
        Map<String, Object> orderByMap = new HashMap<String, Object>();
        orderByMap.put("stick", "desc");
        orderByMap.put("sortNum", "asc");
        orderByList.add(orderByMap);
        map.put("orderby", orderByList);
        try {
            Page page = bbsTopicService.getPage(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, page);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

        /*
         * MessageResult result=new MessageResult(); Map<String,Object> map = new HashMap<String,Object>(); map.put("forumId",forumId); map.put("status","PUBLISHED");
         * map.put("screen",false); map.put("start",0); map.put("limit",10); map.put("delflag",false);
         * map.put("sortFields","{\"stick\":\"desc\",\"sortNum\": \"asc\",\"createDate\":\"desc\"}"); String paramaterJson = JacksonUtils.toJson(map); try { String
         * dubboResultInfo=bbsTopicDtoServiceCustomer.getPage(getUserJson(), paramaterJson); DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo,
         * DubboServiceResultInfo.class); if(dubboServiceResultInfo.isSucess()){ String resultInfo= dubboServiceResultInfo.getResult(); PageBeanInfo
         * pageInfo=JacksonUtils.fromJson(resultInfo, PageBeanInfo.class); result.setResult(pageInfo); result.setSuccess(MessageInfo.GETSUCCESS.isResult());
         * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); }else{ result.setSuccess(MessageInfo.GETERROR.isResult()); result.setMsg(MessageInfo.GETERROR.getMsg()); result.setCode
         * (dubboServiceResultInfo.getCode ()); } } catch (Exception e) { result.setSuccess(MessageInfo.GETERROR.isResult()); result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
         * result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue()); } return result;
         */
    }
    

	/**
	 * 保存实体对象
	 * @param t
	 * @return
	 */
    @Override
	@RequestMapping(value="/save",method= RequestMethod.POST, consumes="application/json")
	public MessageResult save(@RequestBody String json){
    	MessageResult result = new MessageResult();
    	try {
    		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			result = bbsTopicService.saveBbsTopic(JacksonUtils.toJson(userBeanInfo),json);
		} catch (Exception e) {
			log.error("保存对象失败!" + e.getMessage());
			result.setError("保存对象失败!");
		}
        return result;
		
		/*MessageResult result=new MessageResult();
		try {
			String saveJson= JacksonUtils.toJson(t);
			String dubboResultInfo=bbsTopicDtoServiceCustomer.save(getUserJson(), saveJson);
		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		    if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				BbsTopicDto BbsTopicDto=JacksonUtils.fromJson(resultInfo, BbsTopicDto.class);
				result.setResult(BbsTopicDto);
				result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
				result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
		    }else{
		    	result.setSuccess(dubboServiceResultInfo.isSucess ());
				result.setMsg(dubboServiceResultInfo.getMsg ());
				result.setCode (dubboServiceResultInfo.getCode ());
		    }
		} catch (Exception e) {
			try {
			    ObjectMapper mapper = new ObjectMapper();
				String  paramJson = mapper.writeValueAsString(t);
				log.error("调用save方法:  【参数"+paramJson+"】======"+"【"+e.getMessage()+"】");
				result.setSuccess(MessageInfo.SAVEERROR.isResult());
				result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
				result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
			} catch (JsonProcessingException e1) {
			}
			
		}
		return result;*/
	}
    
    
    /**
	 * 修改修改实体对象
	 * @param map
	 * @return
	 */
    @Override
	@ApiOperation(value = "修改 bbs topic实体",notes = "修改 bbs topic实体")
	@ApiImplicitParam(name = "id",value = "bbs topic id",required = true,dataType = "String",paramType = "path")
	@RequestMapping(value="/update/{id}",method= RequestMethod.POST,consumes="application/json")
	public MessageResult update(@PathVariable("id")  String id, @RequestBody Map<String,Object> map){
    	MessageResult result = new MessageResult();
    	try {
    		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			BbsTopic bbsTopic = bbsTopicService.getObjectById(id);
			String json = JacksonUtils.toJson(bbsTopic);
			Map<String,Object> oldMap= JacksonUtils.fromJson(json, HashMap.class);
			oldMap.putAll(map);
			String updateJson= JacksonUtils.toJson(oldMap);
			BbsTopic fromJson = JacksonUtils.fromJson(updateJson, BbsTopic.class);
			result = bbsTopicService.updateBbsTopic(JacksonUtils.toJson(userBeanInfo), updateJson) ;
		} catch (Exception e) {
			log.error("修改对象失败!" + e.getMessage());
			result.setError("修改对象失败!");
		}
		return result;
		
		/*MessageResult result=new MessageResult();
		BbsTopicDto BbsTopicDto=null;
		try {
			String dubboResultInfo=bbsTopicDtoServiceCustomer.getObjectById(getUserJson(), "{\"id\":\""+id+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				 String resultInfo= dubboServiceResultInfo.getResult();
				 Map<String,Object> oldMap=JacksonUtils.fromJson(resultInfo, HashMap.class);
				 oldMap.putAll(map);
				 String updateJson= JacksonUtils.toJson(oldMap);
				 String updateDubboResultInfo=bbsTopicDtoServiceCustomer.update(getUserJson(), updateJson);
				 DubboServiceResultInfo updateDubboServiceResultInfo= JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
				 if(updateDubboServiceResultInfo.isSucess()){
					 Integer i=JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class);
					 result.setResult(i);
					 result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
					 result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
				 }else{
					 result.setSuccess(updateDubboServiceResultInfo.isSucess ());
					 result.setMsg(updateDubboServiceResultInfo.getMsg ());
					 result.setCode (updateDubboServiceResultInfo.getCode ());
				 }
			}else{
				 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				 result.setMsg("不存在更新的对象");
			}
		} catch (Exception e) {
			try{
			 ObjectMapper mapper = new ObjectMapper();
			 String  paramJson = mapper.writeValueAsString(BbsTopicDto);
			 log.error("调用update方法:  【参数"+id+","+paramJson+"】======"+"【"+e.getMessage()+"】");
			 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
				result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
			}catch (JsonProcessingException e1) {
			}
			
		}
		return result;*/
	}

}
