package com.jzy.hio.oa.office.service.impl;

import java.beans.BeanInfo;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.base.utils.DubboServiceResultInfo;
import com.jzy.hio.base.utils.LoginUtils;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.SecurityOrganizationDto;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.feign.SysFeignService;
import com.jzy.hio.oa.content.dto.ContentChildTreeData;
import com.jzy.hio.oa.content.dto.OrgnazationDto;
import com.jzy.hio.oa.office.dto.OfficeHouseDto;
import com.jzy.hio.oa.office.entity.OfficeHouse;
import com.jzy.hio.oa.office.mapper.OfficeHouseDao;
import com.jzy.hio.oa.office.service.OfficeHouseService;
import com.jzy.hio.oa.sys.utils.SortType;
import com.jzy.hio.oa.sys.utils.StatusType;
import com.jzy.hio.oa.sys.utils.UserType;
import com.jzy.tools.data.JacksonUtils;
import tk.mybatis.mapper.entity.Example;

/**
 * @author wangw
 * 
 * 
 */
@Service
public class OfficeHouseServiceImpl extends  BaseServiceImpl<String,OfficeHouse> implements OfficeHouseService{
	

	@Autowired
	private OfficeHouseDao officeHouseDao;
	
	@Autowired
	private SysFeignService sysFeignService;
	
	@Override
	public List<OfficeHouse> queryListOfficeHouse(String program) throws Exception{
		// TODO Auto-generated method stub
		return officeHouseDao.queryListOfficeHouse(program);
	}

	@Override
	public List<ContentChildTreeData> getOfficeHouseTreeById(String id) throws Exception{
		// 实例返回结果集对象
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		// 获取用户对象
		SecurityUserBeanInfo user = LoginUtils.getSecurityUserBeanInfo();
		// 公司
		List<SecurityOrganizationDto> comList = new ArrayList<SecurityOrganizationDto>();

		Map<String, Object> pMap = new HashMap<String, Object>();
		pMap.put("delflag", false);
		pMap.put("sidx", "sort_number");
		pMap.put("state", "1");
		List<OfficeHouse> officeHouseList = super.queryListByExample(pMap);

		List<ContentChildTreeData> officeHouseResultList = new ArrayList<ContentChildTreeData>();

		Boolean isAdministrators = user.getSecurityUserDto().getType().equals(UserType.ORDINARY.getCode()) ? false
				: true;
		if (!isAdministrators) {// 判断是否管理员
			comList.add(user.getSecurityDirectCompanyDto());
		} else {
			Map<String, Object> oMap = new HashMap<String, Object>();
			oMap.put("isLeaf", true);
//			String oJson = orgnazationOutServiceCustomer.getAllCompanyList(userInfo, JacksonUtils.toJson(oMap));
//			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(oJson,
//					DubboServiceResultInfo.class);
//			if (dubboServiceResultInfo.isSucess()) {
//				String resultInfo = dubboServiceResultInfo.getResult();
//				List<OrgnazationDto> olist = JacksonUtils.fromJson(resultInfo, ArrayList.class,
//						OrgnazationDto.class);
//				if (olist.size() > 0) {
//					for (OrgnazationDto org : olist) {
//						SecurityOrganizationDto securityDirectCompanyDto = new SecurityOrganizationDto();
//						securityDirectCompanyDto.setId(org.getId());
//						securityDirectCompanyDto.setName(org.getName());
//						securityDirectCompanyDto.setParentId(org.getParentId());
//						comList.add(securityDirectCompanyDto);
//					}
//				}
//			}
//			List<Orgnazation> list = orgnazationOutServiceCustomer.queryListByExample(oMap);
//			if (list.size() > 0) {
//				for (Orgnazation org : list) {
//					SecurityOrganizationDto securityDirectCompanyDto = new SecurityOrganizationDto();
//					securityDirectCompanyDto.setId(org.getId());
//					securityDirectCompanyDto.setName(org.getName());
//					securityDirectCompanyDto.setParentId(org.getParentId());
//					comList.add(securityDirectCompanyDto);
//				}
//			}
			
			String jsonList = sysFeignService.queryListByMap(oMap);
			List<OrgnazationDto> olist = JacksonUtils.fromJson(jsonList, ArrayList.class, OrgnazationDto.class);
			for (OrgnazationDto org : olist) {
				SecurityOrganizationDto securityDirectCompanyDto = new SecurityOrganizationDto();
				securityDirectCompanyDto.setId(org.getId());
				securityDirectCompanyDto.setName(org.getName());
				securityDirectCompanyDto.setParentId(org.getParentId());
				comList.add(securityDirectCompanyDto);
			}
		}
		for (SecurityOrganizationDto securityOrganization : comList) {// 挂接组织机构
			ContentChildTreeData contentChildTreeData = new ContentChildTreeData();
			contentChildTreeData.setName(securityOrganization.getName());
			contentChildTreeData.setParentName("");

			contentChildTreeData.setpId("");
			contentChildTreeData.setId(securityOrganization.getId());
			contentChildTreeData.setParentId(securityOrganization.getParentId());

			contentChildTreeData.setOwnedCompany(securityOrganization.getId());
			officeHouseResultList.add(contentChildTreeData);

			if (officeHouseList.size() > 0) {
				for (OfficeHouse officeHouseTemp : officeHouseList) {
					ContentChildTreeData bean = new ContentChildTreeData();
					bean.setName(officeHouseTemp.getTypeName());
					bean.setParentName("");
					bean.setpId(officeHouseTemp.getId());
					bean.setId(securityOrganization.getId() + "@" + officeHouseTemp.getId());
					bean.setParentId(officeHouseTemp.getParentNodeId().equals("0") ? securityOrganization.getId()
							: securityOrganization.getId() + "@" + officeHouseTemp.getParentNodeId());

					bean.setOwnedCompany(securityOrganization.getId());
					officeHouseResultList.add(bean);
				}
			}
		}
		return officeHouseResultList;	
	}

	@Override
	public List<OfficeHouse> queryOfficeHouseByParentId(String program)throws Exception {
		// TODO Auto-generated method stub
		return officeHouseDao.queryOfficeHouseByParentId(program);
	}

	/* (non-Javadoc)
	 * @see com.jzy.hio.oa.office.service.OfficeHouseService#getOfficeHousepage(java.util.Map)
	 */
	@Override
	public Page getOfficeHousepage(Map<String,Object> map)throws Exception {
	  Page p=new Page();
	  List<Map<String,Object>> list=officeHouseDao.getOfficeHousepage(map);
	  Integer total=officeHouseDao.getOfficeHousepageCount();
	  p.setLimit((Integer) map.get("limit"));
	  p.setList(list);
	  p.setStart((Integer) map.get("start"));
	  p.setTotal(total);
	  return p;
	}

	/* (non-Javadoc)
	 * @see com.jzy.hio.oa.office.service.OfficeHouseService#saveOfficeHouse(com.jzy.hio.oa.office.entity.OfficeHouse)
	 */
	@Override
	public List<OfficeHouseDto> queryTreeList(Map<String, Object> map)throws Exception {
	   	List<OfficeHouseDto> list=new ArrayList<OfficeHouseDto>();
	   	List<Map<String, Object>> baseList = officeHouseDao.queryTreeList(null);
		List<String> parentIds = officeHouseDao.getParentIdsList(null);
		for (Map<String, Object> beanMap : baseList) {
			OfficeHouseDto beanDto=new OfficeHouseDto();
			beanDto = JacksonUtils.fromJson(JacksonUtils.toJson(beanMap),OfficeHouseDto.class);
			String sort = beanDto.getSortNumber();
			String[] split = sort.split("-");
			Long i=(long) split.length;
			beanDto.setLevel(i);
			beanDto.setExpanded(false);
			beanDto.setLoaded(true);
			String id = beanDto.getId();
			if(parentIds.contains(id)){
				beanDto.setIsLeaf(false);
			}else{
				beanDto.setIsLeaf(true);
			}
			list.add(beanDto);
		}
	   return list;
	}
	public Map<String,Object> getbaseProjectTypeList(String id,List<OfficeHouseDto> list,Long level,Long num)throws Exception {
		  Map<String,Object> map=new HashMap<String, Object>();
		  Map<String,Object> resultmap=new HashMap<String, Object>();
		  map.put("parentId", id);
		  List<Map<String, Object>> baseEntryList = officeHouseDao.queryTreeList(map);
		  if(baseEntryList!=null&&baseEntryList.size()>0){
			  ++level;
			  for (Map<String, Object> entryMap : baseEntryList) {
				  ++num;
				  OfficeHouseDto entryDto=new OfficeHouseDto();
				  //transMapToBean(entryMap,entryDto);
				  entryDto = JacksonUtils.fromJson(JacksonUtils.toJson(entryMap),OfficeHouseDto.class);
				  entryDto.setLft(num);
				  entryDto.setLevel(level);
				  entryDto.setIsLeaf(false);
				  entryDto.setExpanded(false);
				  entryDto.setLoaded(true);
				  list.add(entryDto);
				  Map<String, Object> projectTypeList = getbaseProjectTypeList(entryMap.get("id").toString(),list,level,num);
				  num= (Long) projectTypeList.get("num");
				  entryDto.setRgt(num);
				  String isleaf = (String)projectTypeList.get("isleaf");
	    		  if("1".equals(isleaf)){
	    			  entryDto.setIsLeaf(true);
				  }else{
					  entryDto.setIsLeaf(false);
				  }
			}
			  ++num;
		  }else{
			  resultmap.put("isleaf", "1");
			  ++num;
		  }
		  resultmap.put("num", num);
		  resultmap.put("list", list);
		  return resultmap;
	  }
	public static void transMapToBean(Map<String, Object> map, Object obj) throws Exception {  
		  
		BeanInfo beanInfo = Introspector.getBeanInfo(obj.getClass());  
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();  
  
        for (PropertyDescriptor property : propertyDescriptors) {  
            String key = property.getName();  
            if (map.containsKey(key)) {  
                Object value = map.get(key);  
                // 得到property对应的setter方法  
                Method setter = property.getWriteMethod();  
                setter.invoke(obj, value);  
            }  
        }  
    }

	@Override
	public int updateStatus(OfficeHouse entryBean,Boolean bl) throws Exception {
		String status = entryBean.getState().toString();
		if(StatusType.StatusClosed.getCode().equals(status)){//启用状态改为禁用
			//对子集全部启用禁用 
			this.updateChirdStatus(entryBean,status);
			entryBean.setState(status);
			officeHouseDao.updateByPrimaryKeySelective(entryBean);
		}else if(StatusType.StatusOpen.getCode().equals(status)){//禁用状态改为启用
			//对父集全部启用启用
			this.updateParentStatus(entryBean,status);
			entryBean.setState(status);
			officeHouseDao.updateByPrimaryKeySelective(entryBean);
			if(bl){
				//对子集全部启用禁用 
				this.updateChirdStatus(entryBean,status);
			}
		}
		return 1;
	}
	/**
	 * author:liyong
	 * describe: 修改子节点所有状态
	 * param:object
	 */
	public void updateChirdStatus(OfficeHouse object,String status){
		 Map<String,Object> param=new HashMap<>();
		 param.put("parentNodeId", object.getId());
		 Example example = super.map2example(param);
		 List<OfficeHouse> projectList = officeHouseDao.selectByExample(example);
		 if(projectList!=null&&projectList.size()>0){
			 for (OfficeHouse entry : projectList) {
				 updateChirdStatus(entry,status);
				 entry.setState(status);
				 officeHouseDao.updateByPrimaryKeySelective(entry);
			 }
		 }
	}
	/**
	 * author:liuf
	 * describe: 修改父节点状态
	 * param:object
	 */
	public void  updateParentStatus(OfficeHouse object,String status){
		 String parentId = object.getParentNodeId();
		 OfficeHouse entry = officeHouseDao.selectByPrimaryKey(parentId);
		 if(entry!=null){
		 	updateParentStatus(entry,status);
		 	entry.setState(status);
		 	officeHouseDao.updateByPrimaryKeySelective(entry);
		 }
	}

	@Override
	public String updateSort(OfficeHouse object, Map<String, Object> map)throws Exception {
		String  sortType= String.valueOf(map.get("sortType"));
		String sort1 = object.getSortNumber();
		String parentId = object.getParentNodeId();
		Map<String,Object> param=new HashMap<>();
		List<OfficeHouse> rulerList = officeHouseDao.getEntryListByParentId(parentId);
		if(SortType.SHIFTUP.getCode().equals(sortType)){
			for (int i = 0; i < rulerList.size(); i++) {
				String sort2 = rulerList.get(i).getSortNumber();
				if(sort2.equals(sort1)&&i==0){
					return "已经移到顶部！";
				}
				if(sort2.equals(sort1)&&i!=0){
					String sort3 = rulerList.get(i-1).getSortNumber();
					param.clear();
					param.put("oldSort", sort3);
					param.put("newSort", sort2);
					param.put("prefixId",rulerList.get(i-1).getPrefixId());
					officeHouseDao.updateAllNodes(param);
					param.clear();
					param.put("oldSort", sort2);
					param.put("newSort", sort3);
					param.put("prefixId",rulerList.get(i).getPrefixId());
					officeHouseDao.updateAllNodes(param);
					return "上移成功！";
				}
			}
		}else if(SortType.SHIFTDOWN.getCode().equals(sortType)){
			for (int i = 0; i < rulerList.size(); i++) {
				String sort2 = rulerList.get(i).getSortNumber();
				if(sort2.equals(sort1)&&i==rulerList.size()-1){
					return "已经移到底部！";
				}
				if(sort2.equals(sort1)&&i!=rulerList.size()-1){
					String sort3 = rulerList.get(i+1).getSortNumber();
					param.clear();
					param.put("oldSort", sort3);
					param.put("newSort", sort2);
					param.put("prefixId",rulerList.get(i+1).getPrefixId());
					officeHouseDao.updateAllNodes(param);
					param.clear();
					param.put("oldSort", sort2);
					param.put("newSort", sort3);
					param.put("prefixId",rulerList.get(i).getPrefixId());
					officeHouseDao.updateAllNodes(param);
					return "下移成功！";
				}
			}
		}else if(SortType.STICK.getCode().equals(sortType)){
		}else if(SortType.TOBOTTOM.getCode().equals(sortType)){
		}
		return "";
	}

	@Override
	public List<Map<String, Object>> getSortNum(Map<String, Object> paramater)throws Exception {
		return officeHouseDao.getSortNum(paramater);
	}

	@Override
	public void updateAllNodes(Map<String, Object> paramater)throws Exception {
		 officeHouseDao.updateAllNodes(paramater);
	}
	@Override
	public void updateAllPrefixId(Map<String, Object> paramater)throws Exception {
		officeHouseDao.updateAllPrefixId(paramater);
	}
	@Override
	public int updateBatchStatus(OfficeHouse entry) throws Exception {
		officeHouseDao.updateByPrimaryKeySelective(entry);
		if(StatusType.StatusOpen.getCode().equals(entry.getState().toString())){
			this.updateParentStatus(entry,StatusType.StatusOpen.getCode());
		}else if(StatusType.StatusClosed.getCode().equals(entry.getState().toString())){
			this.updateChirdStatus(entry,StatusType.StatusClosed.getCode());
		}
		return 1;
	}

	@Override
	public List<ContentChildTreeData> getOfficeHouseTree(String id) {
		Map<String, Object> map = new HashMap<String, Object>();
		List<ContentChildTreeData> officeHouseResultList = new ArrayList<ContentChildTreeData>();
		map.put("delflag", false);
		map.put("sidx", "sort_number");
		map.put("state", "1");
		List<OfficeHouse> officeHouseChildList = this.queryListByExample(map);
		if (officeHouseChildList.size() > 0) {
			for (OfficeHouse officeHouseTemp : officeHouseChildList) {
				ContentChildTreeData contentChildTreeData = new ContentChildTreeData();
				contentChildTreeData.setpId(officeHouseTemp.getParentNodeId());
				contentChildTreeData.setName(officeHouseTemp.getTypeName());
				contentChildTreeData.setId(officeHouseTemp.getId());
				contentChildTreeData.setParentId(officeHouseTemp.getParentNodeId());
				officeHouseResultList.add(contentChildTreeData);
			}
		}
		return officeHouseResultList;
	}

	@Override
	public String getRulerSortNum(Map<String, Object> paramater) throws Exception{
		String sort = "";
		List<Map<String, Object>> list = this.getSortNum(paramater);
		if (list.size() > 0) {
			String sortNumber = (String) list.get(0).get("SORT");
			if (sortNumber.indexOf("-") >= 0) {
				int dotIndex = sortNumber.lastIndexOf('-');
				sort = sortNumber.substring(0, dotIndex + 1)
						+ String.format("%04d", Integer.valueOf(sortNumber.substring(dotIndex + 1)) + 1);
			} else {
				sort = "$"
						+ String.format("%04d", Integer.valueOf(sortNumber.substring(1, sortNumber.length())) + 1);
			}
		} else {
			OfficeHouse bean = super.getObjectById((String) paramater.get("parentId"));
			if (null == bean) {
				sort = "$" + String.format("%04d", 1);
			} else {
				String sortNumber = bean.getSortNumber();
				sort = sortNumber + "-" + String.format("%04d", 1);
				;
			}
		}
		return sort;
	}

	@Override
	public String updateEntity(String updateJson, String oldJson) throws Exception {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		Map<String, Object> map = JacksonUtils.fromJson(updateJson, HashMap.class);
		Map<String, Object> oldMap = JacksonUtils.fromJson(oldJson, HashMap.class);
		// 判断是否更改父级节点 是则重新获取序号
		if (!oldMap.get("parentNodeId").equals(map.get("parentNodeId"))) {
			Map<String, Object> pMap = new HashMap<String, Object>();
			pMap.put("parentId", map.get("parentNodeId"));
			String sortNum = getRulerSortNum(pMap);
			map.put("sortNumber", sortNum);

			OfficeHouse object = super.getObjectById((String) map.get("parentNodeId"));
			String prefixId = "";
			if (null != object) {
				prefixId = object.getPrefixId() + "-" + (String) map.get("parentNodeId");
			} else {
				prefixId = (String) map.get("parentNodeId");
			}
			map.put("prefixId", prefixId);
			// 修改排序
			pMap.clear();
			pMap.put("oldSort", oldMap.get("sortNumber"));
			pMap.put("newSort", sortNum);
			pMap.put("prefixId", oldMap.get("prefixId"));
			this.updateAllNodes(pMap);
			// 修改排序id
			pMap.clear();
			pMap.put("oldSort", oldMap.get("prefixId"));
			pMap.put("newSort", prefixId);
			pMap.put("prefixId", oldMap.get("prefixId"));
			this.updateAllPrefixId(pMap);
		}
		oldMap.putAll(map);
		OfficeHouse entry = JacksonUtils.fromJson(JacksonUtils.toJson(oldMap), OfficeHouse.class);
		int result = this.updateBatchStatus(entry);
		info.setResult(JacksonUtils.toJson(result));
		info.setSucess(true);
		info.setMsg("更新对象成功!");	
		return JacksonUtils.toJson(info);
	}
	
	
	
	
}