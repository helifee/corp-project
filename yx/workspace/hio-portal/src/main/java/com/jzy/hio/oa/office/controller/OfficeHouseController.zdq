package com.jzy.hio.oa.office.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.base.utils.ErrorInfoCode;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.oa.content.dto.ContentChildTreeData;
import com.jzy.hio.oa.meeting.entity.MeetingType;
import com.jzy.hio.oa.office.dto.OfficeHouseDto;
import com.jzy.hio.oa.office.entity.OfficeHouse;
import com.jzy.hio.oa.office.service.OfficeHouseService;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.tools.login.LoginUtils;



/**
 * 用品分类名称控制层
 * @author wangw
 *
 */
@Controller
@RequestMapping("/office/officeHouse")
public class OfficeHouseController extends BaseController<OfficeHouseService>{

	private static Logger log = LoggerFactory.getLogger(OfficeHouseController.class);

	@Autowired
	private OfficeHouseService officeHouseService;
	

	/**
	 * 保存实体对象
	 * 
	 * @param t
	 * @return
	 */
	@Override
	@RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
	public @ResponseBody MessageResult save(@RequestBody String json) {
		MessageResult result = new MessageResult();
		try {
			OfficeHouse officeHouse = JacksonUtils.fromJson(json, OfficeHouse.class);
			officeHouse.setDelflag(false);
			OfficeHouse bean = officeHouseService.getObjectById(officeHouse.getParentNodeId());
			if (null == bean) {
				officeHouse.setPrefixId(officeHouse.getId());
			} else {
				officeHouse.setPrefixId(bean.getPrefixId() + "-" + officeHouse.getId());
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("parentId", officeHouse.getParentNodeId());
			String sortNum = officeHouseService.getRulerSortNum(map);
			officeHouse.setSortNumber(sortNum);
			officeHouseService.save(officeHouse);
			result.setResult(JacksonUtils.toJson(officeHouse), MessageInfo.SAVESUCCESS.getMsg());
		} catch (Exception e) {
			log.error("保存对象失败!" + e.getMessage());
			result.setError("保存对象失败!");
		}
		return result;
	}
	


	/**
	 * 返回分页对象
	 * @param paramater
	 * @return
	 */
	@RequestMapping(value="/getOfficeHousepage",method={RequestMethod.POST}, consumes="application/json")
	public @ResponseBody
    MessageResult getOfficeHousepage(@RequestBody Map<String,Object> map){
		MessageResult result=new MessageResult();
		try {
		    Page page = officeHouseService.getOfficeHousepage(map);
		    result.setResult(page, MessageInfo.QUERYSUCCESS.getMsg());
		} catch (Exception e) {
			////e.printStackTrace();
			log.error("-----------"+e.getMessage()+"------------");   			
			result.setError(e.getMessage());
		}
		return result;
		
		
		
		/*String paramaterJson = JacksonUtils.toJson(map);
		try {
		    String dubboResultInfo=officeHouseDtoServiceCustomer.getOfficeHousepage(getUserJson(), paramaterJson);
		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				PageBeanInfo pageInfo=JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
				result.setResult(pageInfo);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {
			////e.printStackTrace();
		    log.error("调用page方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;*/
	}


	
	/**
	 * 修改修改实体对象
	 * @param id
	 * @return
	 */
	@RequestMapping(value="/updateEntity/{id}",method= RequestMethod.PUT,consumes="application/json")
	public @ResponseBody
    MessageResult updateBatchStatus(@PathVariable("id")  String id, @RequestBody Map<String,Object> map){
		MessageResult result=new MessageResult();
		try {
			OfficeHouse officeHouse = officeHouseService.getObjectById(id);
			if (null != officeHouse) {
				String updateJson= JacksonUtils.toJson(map);
				String oldJson= JacksonUtils.toJson(officeHouse);
				officeHouseService.updateEntity(updateJson,oldJson);
				result.setResult(updateJson, MessageInfo.UPDATESUCCESS.getMsg());
			}
			else {
				 result.setCode(ErrorInfoCode.NULL_ERROR.getValue());
				 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				 result.setMsg("不存在更新的对象");
			}
		}catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			result.setError(e.getMessage());
		}
		return result;
		
		/*MessageResult result=new MessageResult();
		EntryDto entryDto=null;
		try {
			//获取用户对象
			SecurityUserBeanInfo user=LoginUtils.getSecurityUserBeanInfo();
			//用户对象转json
			String userJson = JacksonUtils.toJson(user);
			String dubboResultInfo=officeHouseDtoServiceCustomer.getObjectById(userJson, "{\"id\":\""+id+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				 String resultInfo= dubboServiceResultInfo.getResult();
				 @SuppressWarnings("unchecked")
				 Map<String,Object> oldMap=JacksonUtils.fromJson(resultInfo, HashMap.class);
				 String updateJson= JacksonUtils.toJson(map);
				 String oldJson= JacksonUtils.toJson(oldMap);
				 String updateDubboResultInfo=officeHouseDtoServiceCustomer.updateEntity(userJson, updateJson,oldJson);
				 DubboServiceResultInfo updateDubboServiceResultInfo= JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
				 if(updateDubboServiceResultInfo.isSucess()){
					 Integer i=JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class);
					 result.setResult(i);
					 result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
					 result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
				 }else{
					 result.setCode(updateDubboServiceResultInfo.getResult());
				     result.setSuccess(updateDubboServiceResultInfo.isSucess());
				     result.setMsg(updateDubboServiceResultInfo.getMsg());
				 }
			}else{
				 result.setCode(ErrorInfoCode.NULL_ERROR.getValue());
				 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				 result.setMsg("不存在更新的对象");
			}
		}catch (Exception e) {
			try{
			 ////e.printStackTrace();
			 ObjectMapper mapper = new ObjectMapper();
			 String  paramJson = mapper.writeValueAsString(entryDto);
			 log.error("调用update方法:  【参数"+id+","+paramJson+"】======"+"【"+e.getMessage()+"】");
			 result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
			 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
			 result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
			}catch (JsonProcessingException e1) {
				// TODO Auto-generated catch block
				//e1.printStackTrace();
			}
		}
		return result;*/
	}
	





	/**
	 * 根据父id获取目录结构树，如果ID为空，则查询所有目录结构
	 *
	 * @param id  业务对象主键
	 *
	 * @return     业务对象queryListOfficeHouseTree
	 */
	@RequestMapping(value="/queryListOfficeHouse/{id}",method= RequestMethod.GET)
	public @ResponseBody
    MessageResult queryListOfficeHouse(@PathVariable("id")  String ids){
		MessageResult result=new MessageResult();
		try {
			List<OfficeHouse> list = officeHouseService.queryListOfficeHouse(ids);
			result.setResult(list, MessageInfo.QUERYSUCCESS.getMsg());
		} catch (Exception e) {
			////e.printStackTrace();
		    log.error("调用getContentList方法:  【参数】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;
		
		
		/*try {
			String dubboResultInfo=officeHouseDtoServiceCustomer.queryListOfficeHouse(getUserJson(), "{\"id\":\""+ids+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
 			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				List<OfficeHouseDto> contentList = JacksonUtils.fromJson(resultInfo, ArrayList.class,OfficeHouseDto.class);
				result.setResult(contentList);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {
			////e.printStackTrace();
		    log.error("调用getContentList方法:  【参数】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;*/
	}


	/**
	 * 根据父id获取目录结构树，只查询一层父类结构
	 *
	 * @param id  业务对象主键
	 *
	 * @return     业务对象
	 */
	@RequestMapping(value="/getOfficeHouseTree/{id}",method= RequestMethod.GET)
	public @ResponseBody
    MessageResult getOfficeHouseTreeById(@PathVariable("id")  String id){
		MessageResult result=new MessageResult();
		try {
			List<ContentChildTreeData> list = officeHouseService.getOfficeHouseTree(id);
			result.setResult(list, MessageInfo.QUERYSUCCESS.getMsg());
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;
		
		
		
		/*try {
			String dubboResultInfo= officeHouseDtoServiceCustomer.getOfficeHouseTree(getUserJson(), "{\"parentNodeId\":\""+id+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				List<ContentChildTreeData> contentList = JacksonUtils.fromJson(resultInfo, ArrayList.class,ContentChildTreeData.class);
				result.setResult(contentList);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {
			////e.printStackTrace();
		    log.error("调用getContentList方法:  【参数】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;*/
	}
	@RequestMapping(value="/getOfficeHouseTreeList",method= RequestMethod.POST, consumes="application/json")
	public @ResponseBody
    MessageResult getOfficeHouseTreeList(@RequestBody Map<String,Object> map){
		MessageResult result=new MessageResult();
		String id = (String) map.get("id");
		try {
			List<ContentChildTreeData> list = officeHouseService.getOfficeHouseTree(id);
			result.setResult(list, MessageInfo.QUERYSUCCESS.getMsg());
		} catch (Exception e) {
			////e.printStackTrace();
			log.error("-----------"+e.getMessage()+"------------");   
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;
		
		
		/*try {
			String dubboResultInfo= officeHouseDtoServiceCustomer.getOfficeHouseTree(getUserJson(), "{\"parentNodeId\":\""+id+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				List<ContentChildTreeData> contentList = JacksonUtils.fromJson(resultInfo, ArrayList.class,ContentChildTreeData.class);
				result.setResult(contentList);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {
			////e.printStackTrace();
			log.error("调用getContentList方法:  【参数】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;*/
	}

	/**
	 * 根据父id获取目录结构树，只查询一层父类结构
	 *
	 * @param id  业务对象主键
	 *
	 * @return     业务对象
	 */
	@RequestMapping(value="/getOfficeHouseTreeById/{id}",method= RequestMethod.GET)
	public @ResponseBody
    MessageResult getContentParentTreeById(@PathVariable("id")  String id){
		MessageResult result=new MessageResult();
		try {
			List<ContentChildTreeData> list = officeHouseService.getOfficeHouseTreeById(id);
			result.setResult(list, MessageInfo.QUERYSUCCESS.getMsg());
		} catch (Exception e) {
			////e.printStackTrace();
			log.error("-----------"+e.getMessage()+"------------");   
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;
		
		
		/*try {
			String dubboResultInfo= officeHouseDtoServiceCustomer.getOfficeHouseTreeById(getUserJson(), "{\"parentNodeId\":\""+id+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				List<ContentChildTreeData> contentList = JacksonUtils.fromJson(resultInfo, ArrayList.class,ContentChildTreeData.class);
				result.setResult(contentList);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {
			////e.printStackTrace();
		    log.error("调用getContentList方法:  【参数】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;*/
	}
	 private String getUserJson(){
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userJson = JacksonUtils.toJson(userBeanInfo);
			return userJson;
	 }
	 
	 /**
	 * 获取树列表数据
	 * @param map
	 * @return
	 */
	@RequestMapping(value="/queryTreeList",method={RequestMethod.POST}, consumes="application/json")
	public @ResponseBody
    MessageResult queryTreeList(@RequestBody String paramaterJson){
		MessageResult result=new MessageResult();
		try {
			Map<String,Object> param = JacksonUtils.fromJson(paramaterJson, HashMap.class);
			List<OfficeHouse> list = officeHouseService.queryListByExample(param);
			result.setResult(list, MessageInfo.QUERYSUCCESS.getMsg());
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;
		
		
		/*try {
			//获取用户对象
			SecurityUserBeanInfo user=LoginUtils.getSecurityUserBeanInfo();
			//用户对象转json
			String userJson = JacksonUtils.toJson(user);
			String dubboResultInfo=officeHouseDtoServiceCustomer.queryTreeList(userJson, paramaterJson);
		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		    if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				List<OfficeHouseDto> list=JacksonUtils.fromJson(resultInfo, ArrayList.class,OfficeHouseDto.class);
				for(OfficeHouseDto beanDto : list){
					beanDto.setType("officetype");
				}
				result.setResult(list);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
		    }else{
				result.setCode(dubboServiceResultInfo.getResult());
			    result.setSuccess(dubboServiceResultInfo.isSucess());
			    result.setMsg(dubboServiceResultInfo.getMsg());
		    }
			
		} catch (Exception e) {
			////e.printStackTrace();
			log.error("调用queryList方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
			result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return result;*/
	}

	/**
	 * 获取树列表数据
	 * @param map
	 * @return
	 */
	@RequestMapping(value="/queryTreeGridList",method={RequestMethod.POST}, consumes="application/json")
	public @ResponseBody
    MessageResult queryTreeGridList(@RequestBody Map<String,Object> map){
		MessageResult result=new MessageResult();
		try {
			List<OfficeHouseDto> list = officeHouseService.queryTreeList(map);
			result.setResult(list, MessageInfo.QUERYSUCCESS.getMsg());
		} catch (Exception e) {
			////e.printStackTrace();
			log.error("-----------"+e.getMessage()+"------------");   
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;
		
		
		/*try {
			//获取用户对象
			SecurityUserBeanInfo user=LoginUtils.getSecurityUserBeanInfo();
			//用户对象转json
			String userJson = JacksonUtils.toJson(user);
			String dubboResultInfo=officeHouseDtoServiceCustomer.queryTreeGridList(userJson, paramaterJson);
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				List<OfficeHouseDto> list=JacksonUtils.fromJson(resultInfo, ArrayList.class,OfficeHouseDto.class);
				result.setResult(list);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			}else{
				result.setCode(dubboServiceResultInfo.getResult());
				result.setSuccess(dubboServiceResultInfo.isSucess());
				result.setMsg(dubboServiceResultInfo.getMsg());
			}

		} catch (Exception e) {
			////e.printStackTrace();
			log.error("调用queryList方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
			result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return result;*/
	}

	/**
	 * 对业务对象设置启用 禁用
	 * @param id
	 * @return
	 */
	@RequestMapping(value="/updateStatus",method= RequestMethod.POST, consumes="application/json")
	public @ResponseBody
    MessageResult updateStatus(@RequestBody Map<String,Object> map){
		MessageResult result = new MessageResult();
		try {
			OfficeHouse entryBean = officeHouseService.getObjectById((String) map.get("id"));
			entryBean.setState(map.get("state").toString());
			int count = officeHouseService.updateStatus(entryBean, (Boolean) map.get("isRelation"));
			result.setResult(count, MessageInfo.UPDATESUCCESS.getMsg());
		} catch (Exception e) {
			////e.printStackTrace();
			log.error("-----------"+e.getMessage()+"------------");   
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
			result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		
		return result;
		
		
		/*try {
			//获取用户对象
			SecurityUserBeanInfo user=LoginUtils.getSecurityUserBeanInfo();
			//用户对象转json
			String userJson = JacksonUtils.toJson(user);
			String dubboResultInfo=officeHouseDtoServiceCustomer.updateStatus(userJson, paramaterJson);
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				int i=JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), Integer.class);
				result.setResult(i);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
		    }else{
				result.setCode(dubboServiceResultInfo.getResult());
			    result.setSuccess(dubboServiceResultInfo.isSucess());
			    result.setMsg(dubboServiceResultInfo.getMsg());
		    }
			
		} catch (Exception e) {
			////e.printStackTrace();
			log.error("调用updateStatus方法:  【参数:"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
			result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		
		return result;*/
	}


	/**
	 * 对规则排序(上移/下移/置顶/置底)
	 * @param t
	 * @return
	 */
	@RequestMapping(value="/updateSort/{id}",method= RequestMethod.PUT,consumes="application/json")
	public @ResponseBody
    MessageResult updateSort(@PathVariable("id")  String id, @RequestBody Map<String,Object> map){
		MessageResult result=new MessageResult();
		try {
			OfficeHouse object = officeHouseService.getObjectById(id);
			String resultInfo = officeHouseService.updateSort(object, map);
			if (!"".equals(result)) {
				result.setResult(JacksonUtils.toJson(result),MessageInfo.UPDATESUCCESS.getMsg());
			} else {
				result.setError("更新对象失败!");
			}
		} catch (Exception e) {
			////e.printStackTrace();
			log.error("调用updateStatus方法:  【参数id"+id+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
			result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return result;
		
		
		/*try {
			//获取用户对象
			SecurityUserBeanInfo user=LoginUtils.getSecurityUserBeanInfo();
			//用户对象转json
			String userJson = JacksonUtils.toJson(user);
			String dubboResultInfo=officeHouseDtoServiceCustomer.updateSort(userJson, "{\"id\":\""+id+"\"}",map);
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getMsg();
				result.setResult(resultInfo);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(resultInfo);
		    }else{
				result.setCode(dubboServiceResultInfo.getResult());
			    result.setSuccess(dubboServiceResultInfo.isSucess());
			    result.setMsg(dubboServiceResultInfo.getMsg());
		    }
			
		} catch (Exception e) {
			////e.printStackTrace();
			log.error("调用updateStatus方法:  【参数id"+id+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
			result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return result;*/	
	}
}
