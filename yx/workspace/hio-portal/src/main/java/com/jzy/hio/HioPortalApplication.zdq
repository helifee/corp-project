package com.jzy.hio;

import javax.servlet.MultipartConfigElement;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.Banner.Mode;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.servlet.MultipartConfigFactory;
import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
import org.springframework.cloud.netflix.feign.EnableFeignClients;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;

import com.jzy.hio.base.BaseApplication;
import com.jzy.hio.base.datasource.DataSourceRegister;
import com.jzy.hio.base.service.aop.DynamicDataSourceAop;
import com.jzy.tools.login.LoginUtils;

@Import({ DataSourceRegister.class, DynamicDataSourceAop.class })
@MapperScan(value = { "com.jzy.hio.oa.**.mapper", "com.jzy.hio.base.mapper" })
@EnableEurekaClient
@EnableFeignClients // 开启feign注解扫描、可以调用feign服务
@EnableCircuitBreaker
@SpringBootApplication
@Configuration
// @ComponentScan
// @Configuration //这是一个配置类，与@Service、@Component的效果类似。spring会扫描到这个类，@Bean才会生效，将ThreadPoolBean这个返回值类注册到spring上下文环境中
// @EnableConfigurationProperties(MyWebServerConfigurationProperties.class) //通过这个注解, 将MyWebServerConfigurationProperties这个类的配置到上下文环境中,本类中使用的@Autowired注解注入才能生效
public class HioPortalApplication extends BaseApplication {

	/**
	 * 加载SpringBeanUtil<br/>
	 * <br/>
	 *
	 */
	public static void main(String[] args) {
		SpringApplication application = new SpringApplication(HioPortalApplication.class);
		application.setBannerMode(Mode.OFF);
		application.run(args);
		// new SpringApplicationBuilder(HioPortalApplication.class).web(true).run(args);
		System.out.println("【【【【【【 PortalProvider微服务 】】】】】】已启动.");
	}

	@Bean
	public LoginUtils createLoginUtils() {
		LoginUtils loginUtils = getBeanFactory().createBean(LoginUtils.class);
		return loginUtils;
	}

	@Bean
	MultipartConfigElement multipartConfigElement() {
		MultipartConfigFactory factory = new MultipartConfigFactory();
		factory.setLocation("c:/tmp");
		return factory.createMultipartConfig();
	}
}
