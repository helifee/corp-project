package com.jzy.hio.oa.office.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.SecurityOrganizationDto;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.oa.office.dto.OfficeOutDto;
import com.jzy.hio.oa.office.dto.OfficeOutInfoDto;
import com.jzy.hio.oa.office.entity.OfficeInfo;
import com.jzy.hio.oa.office.entity.OfficeOut;
import com.jzy.hio.oa.office.entity.OfficeOutInfo;
import com.jzy.hio.oa.office.mapper.OfficeOutDao;
import com.jzy.hio.oa.office.service.OfficeInfoService;
import com.jzy.hio.oa.office.service.OfficeOutInfoService;
import com.jzy.hio.oa.office.service.OfficeOutService;

/**
 * @author admin
 * 
 * 
 */

@Service
public class OfficeOutServiceImpl extends  BaseServiceImpl<String,OfficeOut> implements OfficeOutService{
	

	@Autowired
	private OfficeOutDao officeOutDao;
	
	@Autowired
	private OfficeOutInfoService officeOutInfoService;
	
	@Autowired
	private OfficeInfoService officeInfoService;
	/* (non-Javadoc)
	 * @see com.jzy.hio.oa.office.service.OfficeOutService#getOfficeOutpage(java.util.Map)
	 */
	@Override
	public Page getOfficeOutpage(Map map) throws Exception {
		Page p=new Page();
		List<Map<String,Object>> list=	officeOutDao.getOfficeOutpage(map);
		Integer total=officeOutDao.getOfficeOutpageCount(map);
		p.setLimit((Integer) map.get("limit"));
		p.setList(list);
		p.setStart((Integer) map.get("start"));
		p.setTotal(total);
		return p;
	}

	/* (non-Javadoc)
	 * @see com.jzy.hio.oa.office.service.OfficeOutService#getOfficeOutDto(java.lang.String)
	 */
	@Override
	public OfficeOutDto getOfficeOutDto(String id) throws Exception {
		OfficeOutDto officeOutDto=new OfficeOutDto();
		OfficeOut officeOut = officeOutDao.selectByPrimaryKey(id);
		BeanUtils.copyProperties(officeOut, officeOutDto);
		List<OfficeOutInfoDto> officeOutInfoDtoList=new ArrayList<OfficeOutInfoDto>();
		List<OfficeOutInfo> list=officeOutInfoService.queryListByOutId(id);
		for (OfficeOutInfo officeOutInfo : list) {
			OfficeOutInfoDto officeOutInfoDto=new OfficeOutInfoDto();
			BeanUtils.copyProperties(officeOutInfo, officeOutInfoDto);
			officeOutInfoDtoList.add(officeOutInfoDto);
		}
		officeOutDto.setList(officeOutInfoDtoList);
		return officeOutDto;
				
	}

	/* (non-Javadoc)
	 * @see com.jzy.hio.oa.office.service.OfficeOutService#saveOfficeOutDto(com.jzy.hio.oa.office.dto.OfficeOutDto)
	 */
	@Override
	public void saveOfficeOutDto(OfficeOutDto officeInfoOut) throws Exception {
		// TODO Auto-generated method stub
		List<OfficeOutInfoDto> list = officeInfoOut.getList();
		for (OfficeOutInfoDto officeOutInfoDto : list) {
			OfficeOutInfo officeOutInfo=	new OfficeOutInfo();
			BeanUtils.copyProperties(officeOutInfoDto, officeOutInfo);
			officeOutInfoService.save(officeOutInfo);
		}
		OfficeOut officeOut =new OfficeOut();
		BeanUtils.copyProperties(officeInfoOut, officeOut);
		officeOutDao.insertSelective(officeOut);
	}

	/* (non-Javadoc)
	 * @see com.jzy.hio.oa.office.service.OfficeOutService#updateOfficeOutDto(com.jzy.hio.oa.office.dto.OfficeOutDto)
	 */
	@Override
	public int updateOfficeOutDto(OfficeOutDto officeInfoOut) throws Exception {
		String id = officeInfoOut.getId();
		List<OfficeOutInfo> list=officeOutInfoService.queryListByOutId(id);
		List<String> ids=new ArrayList<>();
		for (OfficeOutInfo officeOutInfo : list) {
			String officeOutInfoId = officeOutInfo.getId();
			ids.add(officeOutInfoId);
		}
		//批量新增
		if(ids!=null&&ids.size()>0){
			officeOutInfoService.deleteAllObjectByIds(ids);
		}
		List<OfficeOutInfoDto>  newofficeOutInfoDto= officeInfoOut.getList();
		for (OfficeOutInfoDto officeOutInfoDto : newofficeOutInfoDto) {
			OfficeOutInfo officeOutInfo=	new OfficeOutInfo();
			BeanUtils.copyProperties(officeOutInfoDto, officeOutInfo);
			officeOutInfoService.save(officeOutInfo);
		}
		OfficeOut officeOut=new OfficeOut();
		BeanUtils.copyProperties(officeInfoOut, officeOut);
		//修改主表
		int result = officeOutDao.updateByPrimaryKeySelective(officeOut);
		return result;
	}

	/* (non-Javadoc)
	 * @see com.jzy.hio.oa.office.service.OfficeOutService#updateStockCount(java.lang.String)
	 */
	@Override
	public int updateCount(Map param) throws Exception {
		String id = (String) param.get("businessId");
		String status = (String) param.get("status");
		String instanceId = (String) param.get("instanceId");
		OfficeOut officeOut = officeOutDao.selectByPrimaryKey(id);
		officeOut.setInstanceId(instanceId);
		List<OfficeOutInfo> list=officeOutInfoService.queryListByOutId(id);
		if(status.equals("2")){
			for (OfficeOutInfo officeOutInfo : list) {
				String officeinfoId = officeOutInfo.getOfficeinfoId();
				Integer num = officeOutInfo.getOfficeinfoNum();
				OfficeInfo officeInfo = officeInfoService.getObjectById(officeinfoId);
				Integer stockCount = Integer.parseInt(officeInfo.getStockCount());
				Map<String,Object> map=new HashMap<String, Object>();
				Integer newStockCount=stockCount-num;
				map.put("officeinfoId", officeinfoId);
				map.put("stockCount", newStockCount);
				officeInfoService.updateOfficeInfoCount(map);
			}
			officeOut.setStatus("2");
			officeOutDao.updateByPrimaryKeySelective(officeOut);
		}else if(status.equals("1")){
			for (OfficeOutInfo officeOutInfo : list) {
				String officeinfoId = officeOutInfo.getOfficeinfoId();
				Integer num = officeOutInfo.getOfficeinfoNum();
				OfficeInfo officeInfo = officeInfoService.getObjectById(officeinfoId);
				Integer outStockCount = Integer.parseInt(officeInfo.getOutStockCount());
				Map<String,Object> map=new HashMap<String, Object>();
				Integer newStockCount=outStockCount-num;
				map.put("officeinfoId", officeinfoId);
				map.put("outStockCount", newStockCount);
				officeInfoService.updateOfficeInfoCount(map);
			}
			officeOut.setStatus("1");
			officeOutDao.updateByPrimaryKeySelective(officeOut);
		}else{
			for (OfficeOutInfo officeOutInfo : list) {
				String officeinfoId = officeOutInfo.getOfficeinfoId();
				Integer num = officeOutInfo.getOfficeinfoNum();
				OfficeInfo officeInfo = officeInfoService.getObjectById(officeinfoId);
				Integer outStockCount = Integer.parseInt(officeInfo.getOutStockCount());
				Map<String,Object> map=new HashMap<String, Object>();
				Integer newStockCount=outStockCount+num;
				map.put("officeinfoId", officeinfoId);
				map.put("backOutStockCount", newStockCount);
				officeInfoService.updateOfficeInfoCount(map);
			}
			officeOut.setStatus(status);
			officeOutDao.updateByPrimaryKeySelective(officeOut);
		}
	  return 0;
	}

	/* (non-Javadoc)
	 * @see com.jzy.hio.oa.office.service.OfficeOutService#getStartFlowInfo(java.lang.String)
	 */
	@Override
	public Map getStartFlowInfo(SecurityUserBeanInfo securityUserBeanInfo,String id) throws Exception {
		   OfficeOutDto officeOutDto = this.getOfficeOutDto(id);
	    Map<String,Object> flowData = this.getOfficeOutDtoJSON(officeOutDto);
		Map<String,Object>map=new HashMap<String, Object>();
		map.put("flow_phone_data", flowData);
		map.put("flow_business_data", officeOutDto);
		//userMap.get(key)
		//SecurityUserDto
		Map<String,Object>param=new HashMap<String, Object>();
		SecurityOrganizationDto securityDirectCompanyDto = securityUserBeanInfo.getSecurityDirectCompanyDto();
		if(securityDirectCompanyDto!=null){
			String companyId=securityDirectCompanyDto.getId();
			String companyName=securityDirectCompanyDto.getName();
			param.put("flow_business_company_id", companyId);
			param.put("flow_business_company_name", companyName);
		}else{
			param.put("flow_business_company_id", null);
			param.put("flow_business_company_name", null);
			
		}
		SecurityOrganizationDto securityDirectDeptDto = securityUserBeanInfo.getSecurityDirectDeptDto();
		if(securityDirectDeptDto!=null){
			String deptId=securityDirectDeptDto.getId();
			String deptName=securityDirectDeptDto.getName();
			param.put("flow_business_dept_id", deptId);
			param.put("flow_business_dept_name", deptName);
		}else{
			param.put("flow_business_dept_id", null);
			param.put("flow_business_dept_name", null);
		}
		SecurityOrganizationDto securityGroupDto = securityUserBeanInfo.getSecurityGroupDto();
		if(securityGroupDto!=null){
			String projectId=securityGroupDto.getId();
			String projectName=securityGroupDto.getName();
			param.put("flow_business_project_id", projectId);
			param.put("flow_business_project_name", projectName);
		}else{
			param.put("flow_business_project_id", null);
			param.put("flow_business_project_name", null);
		}
		SecurityOrganizationDto securityBranchDto = securityUserBeanInfo.getSecurityBranchDto();
		if(securityBranchDto!=null){
			String branchId=securityBranchDto.getId();
			String branchName=securityBranchDto.getName();
			param.put("flow_business_project_branch_id", branchId);
			param.put("flow_business_project_branch_name", branchName);
		}else{
			param.put("flow_business_project_branch_id", null);
			param.put("flow_business_project_branch_name", null);
		}
		String createPersonId = officeOutDto.getCreatePersonId();
		param.put("start_user_id", securityUserBeanInfo.getSecurityUserDto().getId());
		param.put("start_user_name", securityUserBeanInfo.getSecurityUserDto().getRealName());
		param.put("theme",officeOutDto.getTheme());
		map.put("flow_business_variable_data", param);
		return map;
	}

	/**
	 * @param id
	 * @return
	 */
	private Map<String,Object> getOfficeOutDtoJSON(  OfficeOutDto officeOutDto ) throws Exception {
		Map<String,	Object>resultMap=new HashMap<String, Object>();
		Map<String,Object> map1=new HashMap<>();
		Map<String,Object> map2=new HashMap<>();
		Map<String,Object> map3=new HashMap<>();
		Map<String,Object> map4=new HashMap<>();
		List<Map<String,Object>> list=new ArrayList<Map<String,Object>>();
	     map1.put("name","申请主题");
	     map1.put("value",officeOutDto.getTheme());
	     map2.put("name", "申请人");
	     map2.put("value", officeOutDto.getCreatePersonName());
	     map3.put("name", "申请部门");
	     map3.put("value", officeOutDto.getCreateOrgName());
	     map4.put("name", "备注说明");
	     map4.put("value", officeOutDto.getRemark());
	     list.add(map1);
	     list.add(map2);
	     list.add(map3);
	     list.add(map4);
	     List<OfficeOutInfoDto> OfficeOutInfoDtoList = officeOutDto.getList();
	     int i=1;
	    for (OfficeOutInfoDto officeOutInfoDto : OfficeOutInfoDtoList) {
	    	Map<String,Object> map5=new HashMap<>();
			Map<String,Object> map6=new HashMap<>();
			Map<String,Object> map7=new HashMap<>();
			Map<String,Object> map8=new HashMap<>();
			Map<String,Object> map9=new HashMap<>();
			map5.put("name", "序号");
			map5.put("value", i);
			map6.put("name", "名称");
			map6.put("value", officeOutInfoDto.getStockName());
			map7.put("name", "所属类型");
			map7.put("value", officeOutInfoDto.getTypeName());
			map8.put("name", "规格");
			map8.put("value", officeOutInfoDto.getStockSpecifications());
			map9.put("name", "可领数量");
			map9.put("value", officeOutInfoDto.getOutStockCount());
			map9.put("name", "领用数量");
			map9.put("value", officeOutInfoDto.getOfficeinfoNum());
			list.add(map5);
			list.add(map6);
			list.add(map7);
			list.add(map8);
			list.add(map9);
			i=i+1;
		}
		resultMap.put("dataList", list);
		   return resultMap;
	}

	/* (non-Javadoc)
	 * @see com.jzy.hio.oa.office.service.OfficeOutService#updateCountOver(java.util.Map)
	 */
	@Override
	public int updateCountOver(Map param) throws Exception {
		int i=0;
		String id = (String) param.get("businessId");
		OfficeOut officeOut = officeOutDao.selectByPrimaryKey(id);
		List<OfficeOutInfo> list=officeOutInfoService.queryListByOutId(id);
			for (OfficeOutInfo officeOutInfo : list) {
				String officeinfoId = officeOutInfo.getOfficeinfoId();
				Integer num = officeOutInfo.getOfficeinfoNum();
				OfficeInfo officeInfo = officeInfoService.getObjectById(officeinfoId);
				Integer stockCount = Integer.parseInt(officeInfo.getStockCount());
				Integer outStockCount = Integer.parseInt(officeInfo.getOutStockCount());
				Integer newoutStockCount=outStockCount-num;
				if(newoutStockCount<0){
					i=5;
					break;
				}else{
					officeInfo.setOutStockCount(String.valueOf(newoutStockCount));
					Integer newStockCount=stockCount-num;
					officeInfo.setStockCount(String.valueOf(newStockCount));
					officeInfoService.update(officeInfo);
				}
			}
			if(i==5){
				return i;
			}else{
				officeOut.setInstanceId("");
				officeOut.setStatus("2");
				officeOutDao.updateByPrimaryKeySelective(officeOut);
				return 0;
			}
	}

	/* (non-Javadoc)
	 * @see com.jzy.hio.oa.office.service.OfficeOutService#updateOutStockCount(java.lang.String)
	 */

	

}
