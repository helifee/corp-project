package com.jzy.hio.oa.bbs.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.oa.bbs.entity.BbsCollectionType;
import com.jzy.hio.oa.bbs.service.BbsCollectionTypeService;
import com.jzy.tools.data.JacksonUtils;

/**
 * 论坛收藏夹表控制层
 * 
 * @author admin
 *
 */
@RestController
@RequestMapping("/bbs/collectionType")
@Api(tags = { "论坛收藏夹分类相关接口" })
public class BbsCollectionTypeController extends ResponseModel {

	private static Logger log = LoggerFactory.getLogger(BbsCollectionTypeController.class);

	@Autowired
	private BbsCollectionTypeService bbsCollectionTypeService;

	/**
	 * 根据Id获取业务对象
	 * 
	 * @param id
	 *            业务对象主键
	 * 
	 * @return 业务对象
	 */
	@ApiOperation(value = "根据Id获取业务对象--", notes = "根据Id获取业务对象note--")
	@ApiImplicitParams(@ApiImplicitParam(name = "id", value = "帖子id--", required = true, dataType = "String",paramType = "path"))
	@RequestMapping(value="/get/{id}",method=RequestMethod.GET)
	public @ResponseBody MessageResult get(@PathVariable("id") String id) {
		try {
			BbsCollectionType bbsCollectionType = bbsCollectionTypeService.getObjectById(id);
			return getSuccessResultModel(bbsCollectionType);
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
		
		/*MessageResult result = new MessageResult();
		try {
			String dubboResultInfo = bbsCollectionTypeDtoServiceCustomer.getObjectById(null, "{\"id\":\"" + id + "\"}");
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo,
					DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				String resultInfo = dubboServiceResultInfo.getResult();
				BbsCollectionTypeDto bbsCollectionTypeDto = JacksonUtils.fromJson(resultInfo,
						BbsCollectionTypeDto.class);
				result.setResult(bbsCollectionTypeDto);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			} else {
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;*/
	}

	/**
	 * 返回分页对象
	 * 
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "返回分页对象",notes = "返回分页对象node")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "map",value = "limit query",required = true,dataType = "Map")})
	@RequestMapping(value="/page", method={RequestMethod.POST}, consumes="application/json")
	public MessageResult page(@RequestBody Map<String, Object> map) {
		try {
			Page page = bbsCollectionTypeService.getPage(map);
			return getSuccessResultModel(page);
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
		
		/*MessageResult result = new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			String dubboResultInfo = bbsCollectionTypeDtoServiceCustomer.getPage(null, paramaterJson);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo,
					DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				String resultInfo = dubboServiceResultInfo.getResult();
				PageBeanInfo pageInfo = JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
				result.setResult(pageInfo);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			} else {
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error("调用page方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;*/
	}

	/**
	 * 返回符合条件的列表
	 * 
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "返回符合条件的列表bbsCollectType",notes = "返回符合条件的列表bbsCollectType")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "bbsCollectionType",dataType = "String",value = "condition query",required = true)})
	@RequestMapping(value="/queryList", method={RequestMethod.POST}, consumes="application/json")
	public MessageResult queryList(@RequestBody BbsCollectionType bbsCollectionType) {
		try {
			List<BbsCollectionType> list = bbsCollectionTypeService.queryList(bbsCollectionType);
			return  getSuccessResultModel(list); 
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
		
		/*MessageResult result = new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			String dubboResultInfo = bbsCollectionTypeDtoServiceCustomer.queryList(null, paramaterJson);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo,
					DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				String resultInfo = dubboServiceResultInfo.getResult();
				List<BbsCollectionTypeDto> list = JacksonUtils.fromJson(resultInfo, ArrayList.class,
						BbsCollectionTypeDto.class);
				result.setResult(list);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			} else {
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
			}

		} catch (Exception e) {
			e.printStackTrace();
			log.error("调用queryList方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;*/
	}

	/**
	 * 保存实体对象
	 * 
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "保存bbsCollectType实体",notes = "保存bbsCollectType实体")
    @ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "bbsCollectionType",value = "save",required = true,dataType = "String")})
    @RequestMapping(value="/save",method=RequestMethod.POST, consumes="application/json")
	public MessageResult save(@RequestBody BbsCollectionType bbsCollectionType) {
		try {
			int save = bbsCollectionTypeService.save(bbsCollectionType);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.SAVESUCCESS.getMsg());
			successResultModel.setResult(save);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.SAVEERROR.getMsg());
		}
		
		/*MessageResult result = new MessageResult();
		try {
			String saveJson = JacksonUtils.toJson(t);
			String dubboResultInfo = bbsCollectionTypeDtoServiceCustomer.save(null, saveJson);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo,
					DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				String resultInfo = dubboServiceResultInfo.getResult();
				BbsCollectionTypeDto bbsCollectionTypeDto = JacksonUtils.fromJson(resultInfo,
						BbsCollectionTypeDto.class);
				result.setResult(bbsCollectionTypeDto);
				result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
				result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
			} else {
				result.setSuccess(MessageInfo.SAVEERROR.isResult());
				result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
			}
		} catch (Exception e) {
			try {
				e.printStackTrace();
				ObjectMapper mapper = new ObjectMapper();
				String paramJson = mapper.writeValueAsString(t);
				log.error("调用save方法:  【参数" + paramJson + "】======" + "【" + e.getMessage() + "】");
				result.setSuccess(MessageInfo.SAVEERROR.isResult());
				result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + e.getMessage() + "】");
			} catch (JsonProcessingException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

		}
		return result;*/
	}

	/**
	 * 删除实体对象
	 * 
	 * @param id
	 * @return
	 */
	@ApiOperation(value = "删除bbsCollectType实体",notes = "删除bbsCollectType实体")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "id",value = "id",required = true,dataType = "String")})
	@RequestMapping(value="/delete/{id}",method=RequestMethod.DELETE)
	public MessageResult delete(@PathVariable("id") String id) {
		try {
			int deleteObjectById = bbsCollectionTypeService.deleteObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deleteObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
		
		/*MessageResult result = new MessageResult();
		try {
			String dubboResultInfo = bbsCollectionTypeDtoServiceCustomer.deleteObjectById(null,
					"{\"id\":\"" + id + "\"}");
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo,
					DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				String resultInfo = dubboServiceResultInfo.getResult();
				BbsCollectionTypeDto bbsCollectionTypeDto = JacksonUtils.fromJson(resultInfo,
						BbsCollectionTypeDto.class);
				result.setResult(bbsCollectionTypeDto);
				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
			} else {
				result.setSuccess(MessageInfo.DELETEERROR.isResult());
				result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error("调用delete方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.DELETEERROR.isResult());
			result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
		}

		return result;*/
	}

	/**
	 * 删除实体对象
	 * 
	 * @param ids
	 * @return
	 */
	@ApiOperation(value = "删除bbsCollectType实体",notes = "删除bbsCollectType实体")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "ids",value = "ids",required = true,dataType = "String")})
	@RequestMapping(value="/deleteBatch/{ids}",method=RequestMethod.DELETE)
	public MessageResult deleteBatch(@PathVariable("ids") String ids) {
		try {
			List<String> deleteMethod =  Arrays.asList(ids.split(","));
			int count = bbsCollectionTypeService.deleteAllObjectByIds(deleteMethod);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(count);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
		
		/*MessageResult result = new MessageResult();
		try {
			String dubboResultInfo = bbsCollectionTypeDtoServiceCustomer.deleteAllObjectByIds(null,
					"{\"id\":\"" + ids + "\"}");
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo,
					DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				String resultInfo = dubboServiceResultInfo.getResult();
				BbsCollectionTypeDto bbsCollectionTypeDto = JacksonUtils.fromJson(resultInfo,
						BbsCollectionTypeDto.class);
				result.setResult(bbsCollectionTypeDto);
				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
			} else {
				result.setSuccess(MessageInfo.DELETEERROR.isResult());
				result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error("调用delete方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.DELETEERROR.isResult());
			result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
		}

		return result;*/
	}

	/**
	 * 修改修改实体对象
	 * 
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "修改保存bbsCollectType实体",notes = "修改保存bbsCollectType实体")
    @ApiImplicitParams({@ApiImplicitParam(name = "id",value = "id",required = true,dataType = "Integer",paramType = "path"),@ApiImplicitParam(name = "map",value = "thi is map",dataType = "JSON")})
    @RequestMapping(value="/update/{id}",method=RequestMethod.POST,consumes="application/json")
	public MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
		try {
			BbsCollectionType bbsCollectionType = bbsCollectionTypeService.getObjectById(id);
			String json = JacksonUtils.toJson(bbsCollectionType);
			Map<String,Object> oldMap= JacksonUtils.fromJson(json, HashMap.class);
			oldMap.putAll(map);
			String updateJson= JacksonUtils.toJson(oldMap);
			BbsCollectionType fromJson = JacksonUtils.fromJson(updateJson, BbsCollectionType.class);
			int updateCount = bbsCollectionTypeService.update(fromJson);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.UPDATESUCCESS.getMsg());
			successResultModel.setResult(updateCount);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.UPDATEERROR.getMsg());
		}
		
		/*MessageResult result = new MessageResult();
		BbsCollectionTypeDto bbsCollectionTypeDto = null;
		try {
			String dubboResultInfo = bbsCollectionTypeDtoServiceCustomer.getObjectById(null, "{\"id\":\"" + id + "\"}");
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo,
					DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				String resultInfo = dubboServiceResultInfo.getResult();
				Map<String, Object> oldMap = JacksonUtils.fromJson(resultInfo, HashMap.class);
				oldMap.putAll(map);
				String updateJson = JacksonUtils.toJson(oldMap);
				String updateDubboResultInfo = bbsCollectionTypeDtoServiceCustomer.update(null, updateJson);
				DubboServiceResultInfo updateDubboServiceResultInfo = JacksonUtils.fromJson(updateDubboResultInfo,
						DubboServiceResultInfo.class);
				if (updateDubboServiceResultInfo.isSucess()) {
					Integer i = JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class);
					result.setResult(i);
					result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
					result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
				} else {
					result.setSuccess(MessageInfo.UPDATEERROR.isResult());
					result.setMsg(updateDubboServiceResultInfo.getMsg() + "【"
							+ updateDubboServiceResultInfo.getExceptionMsg() + "】");
				}
			} else {
				result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				result.setMsg("不存在更新的对象");
			}
		} catch (Exception e) {
			try {
				e.printStackTrace();
				ObjectMapper mapper = new ObjectMapper();
				String paramJson = mapper.writeValueAsString(bbsCollectionTypeDto);
				log.error("调用update方法:  【参数" + id + "," + paramJson + "】======" + "【" + e.getMessage() + "】");
				result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				result.setMsg(MessageInfo.UPDATEERROR.getMsg() + "【" + e.getMessage() + "】");
			} catch (JsonProcessingException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

		}
		return result;*/
	}

	/**
	 * 伪删除实体对象
	 * 
	 * @param id
	 * @return
	 */
	@ApiOperation(value = "伪删除实体对象bbsCollectType实体",notes = "伪删除实体对象bbsCollectType实体")
    @ApiImplicitParams({@ApiImplicitParam(paramType="path",dataType = "String",name = "id",value = "id",required = true)})
	@RequestMapping(value="/deletePseudo/{id}",method= RequestMethod.DELETE)
	public MessageResult deletePseudo(@PathVariable("id") String id) {
		try {
			int deletePseudoObjectById = bbsCollectionTypeService.deletePseudoObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deletePseudoObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return  getSuccessResultModel(MessageInfo.DELETEERROR.getMsg());
		}
		
		/*MessageResult result = new MessageResult();
		try {
			String dubboResultInfo = bbsCollectionTypeDtoServiceCustomer.deletePseudoObjectById(null,
					"{\"id\":\"" + id + "\"}");
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo,
					DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				String resultInfo = dubboServiceResultInfo.getResult();
				BbsCollectionTypeDto bbsCollectionTypeDto = JacksonUtils.fromJson(resultInfo,
						BbsCollectionTypeDto.class);
				result.setResult(bbsCollectionTypeDto);
				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
			} else {
				result.setSuccess(MessageInfo.DELETEERROR.isResult());
				result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error("调用deletePseudo方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.DELETEERROR.isResult());
			result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
		}

		return result;*/
	}

	/**
	 * 伪删除实体对象
	 * 
	 * @param ids
	 * @return
	 */
	@ApiOperation(value = "伪删除实体对象bbsCollectType实体多个",notes = "伪删除实体对象bbsCollectType实体多个")
    @ApiImplicitParams({@ApiImplicitParam(paramType="path",dataType = "String",name = "ids",value = "ids",required = true)})
	@RequestMapping(value="/deletePseudoBatch/{ids}",method= RequestMethod.DELETE)
	public MessageResult deletePseudoBatch(@PathVariable("ids") String ids) {
		try {
			String[] split = ids.split(",");
			List<String> asList = Arrays.asList(split);
			int deletePseudoObjectById = bbsCollectionTypeService.deletePseudoAllObjectByIds(asList);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deletePseudoObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return  getSuccessResultModel(MessageInfo.DELETEERROR.getMsg());
		}
		
		/*MessageResult result = new MessageResult();
		try {
			String dubboResultInfo = bbsCollectionTypeDtoServiceCustomer.deletePseudoAllObjectByIds(null,
					"{\"id\":\"" + ids + "\"}");
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo,
					DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				String resultInfo = dubboServiceResultInfo.getResult();
				BbsCollectionTypeDto bbsCollectionTypeDto = JacksonUtils.fromJson(resultInfo,
						BbsCollectionTypeDto.class);
				result.setResult(bbsCollectionTypeDto);
				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
			} else {
				result.setSuccess(MessageInfo.DELETEERROR.isResult());
				result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
			}
		} catch (Exception e) {
			e.printStackTrace();
			log.error("调用deletePseudoBatch方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.DELETEERROR.isResult());
			result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
		}

		return result;*/
	}
}
