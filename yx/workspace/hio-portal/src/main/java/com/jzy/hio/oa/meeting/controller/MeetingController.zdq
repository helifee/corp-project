package com.jzy.hio.oa.meeting.controller;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.base.utils.DubboServiceResultInfo;
import com.jzy.hio.base.utils.ErrorInfoCode;
import com.jzy.tools.login.LoginUtils;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.PageBeanInfo;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.oa.meeting.dto.MeetingDto;
import com.jzy.hio.oa.meeting.entity.Meeting;
import com.jzy.hio.oa.meeting.service.MeetingService;
import com.jzy.tools.data.JacksonUtils;

/**
 * 会议基本信息控制层
 *
 * @author wangw
 */
@RestController
@RequestMapping("/meeting/meeting")
public class MeetingController extends BaseController<MeetingService> {

	private static Logger log = Logger.getLogger(MeetingController.class);

	@Autowired
	private MeetingService meetingService;

	/*@Autowired
	
	 * private UserDtoServiceCustomer userDtoServiceCustomer;
	 * 
	 * @Autowired private AuthenticationDtoServiceCustomer authenticationDtoServiceCustomer;
	 */
	
	
	
	/**
     * 根据Id获取业务对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
	@Override
	@RequestMapping(value="/get/{id}",method=RequestMethod.GET)
	public @ResponseBody MessageResult get(@PathVariable("id") String id) {
		 MessageResult result = new MessageResult();
	        try {
	            MeetingDto meetingDto = meetingService.getMeetingAndAgendaById(id);
	            result.setResult(meetingDto, "获取对象成功!");
			} catch (Exception e) {
				log.error("获取对象失败!" + e.getMessage());
				result.setError("获取对象失败!");
			}	
	        return result;
	}
	
	
	  /**
     * 返回分页对象
     *
     * @param paramater
     * @return
     */
	@Override
    @RequestMapping(value = "/page", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody MessageResult page(@RequestBody Map<String, Object> map) {
        MessageResult result = new MessageResult();
        try {
            Page page = meetingService.getMeetingByPage(map);
            result.setResult(page, MessageInfo.QUERYSUCCESS.getMsg());
        } catch (Exception e) {
        	log.error("-----------" + e.getMessage() + "------------");
			result.setError(e.getMessage());
        }
        return result;
    }
	
	

	/**
	 * 会议管理列表
	 *
	 * @param paramater
	 * @return
	 */
	@RequestMapping(value = "/meetingManagerList", method = { RequestMethod.POST }, consumes = "application/json")
	public @ResponseBody MessageResult meetingManagerList(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		try {
			List list = meetingService.meetingManagerList(getUserJson(), map);
			result.setResult(list, MessageInfo.QUERYSUCCESS.getMsg());
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			result.setError(e.getMessage());
		}
		return result;
	}
	
	 /**
     * 保存实体对象
     *
     * @param t
     * @return
     */
	@Override
    @RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
    public @ResponseBody MessageResult save(@RequestBody String json) {
        MessageResult result = new MessageResult();
        try {
        	MeetingDto meetingDto = JacksonUtils.fromJson(json, MeetingDto.class);
            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
            meetingDto.setCreateUserId(userBeanInfo.getSecurityUserDto().getId());
            meetingDto.setCreateUserName(userBeanInfo.getSecurityUserDto().getRealName());
            String saveJson = JacksonUtils.toJson(meetingDto);
            meetingService.saveMeeting(getUserJson(), saveJson);
            result.setResult(JacksonUtils.toJson(meetingDto), MessageInfo.SAVESUCCESS.getMsg());
		} catch (Exception e) {
			log.error("保存对象失败!" + e.getMessage());
			result.setError("保存对象失败!");
		}
        return result;
    }
	
	
    /**
     * 修改修改实体对象
     *
     * @param t
     * @return
     */
	@Override
    @RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
    public @ResponseBody MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
        MessageResult result = new MessageResult();
        try {
            Meeting meeting = meetingService.getObjectById(id);
            String json = JacksonUtils.toJson(meeting);
			Map<String,Object> oldMap= JacksonUtils.fromJson(json, HashMap.class);
			oldMap.putAll(map);
			String updateJson= JacksonUtils.toJson(oldMap);
			int updateCount = meetingService.updateMeeting(updateJson);
			result.setResult(String.valueOf(updateCount), MessageInfo.UPDATESUCCESS.getMsg());
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			result.setError(MessageInfo.UPDATEERROR.getMsg());
		}
		return result;
    }

	

	/**
	 * 会议撤回
	 *
	 * @param t
	 * @return
	 */
	@RequestMapping(value = "/withdraw/{id}", method = RequestMethod.PUT, consumes = "application/json")
	public @ResponseBody MessageResult withdraw(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		try {
			Meeting meeting = meetingService.getObjectById(id);
			if (null != meeting) {
				String date = new SimpleDateFormat("yyyy-MM-dd HH:mm").format(new Date());
				Date now = new SimpleDateFormat("yyyy-MM-dd HH:mm").parse(date);
				Date beginDate = new SimpleDateFormat("yyyy-MM-dd HH:mm").parse(meeting.getBeginDate());
				boolean b = false;
				b = beginDate.after(now);
				if (meeting != null && !meeting.getStatus().equals("2")) {
					result.setSuccess(MessageInfo.UPDATEERROR.isResult());
					result.setMsg("不是待开会议，不能撤回！");
				} else if (!b) {
					result.setSuccess(MessageInfo.UPDATEERROR.isResult());
					result.setMsg("会议已经开始或者会议已经结束！");
				} else if (meeting != null && meeting.getStatus().equals("2") && b) {
					Meeting _meeting = JacksonUtils.fromJson(JacksonUtils.toJson(map), Meeting.class);
					meetingService.update(_meeting);
					result.setResult(null, MessageInfo.UPDATESUCCESS.getMsg());
				}
			} else {
				result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				result.setMsg("不存在更新的对象");
			}
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			result.setError(e.getMessage());

		}
		return result;
	}

	/**
	 * 会后管理-会议归档
	 *
	 * @param t
	 * @return
	 */
	@RequestMapping(value = "/archiveMeeting/{ids}", method = RequestMethod.PUT, consumes = "application/json")
	public @ResponseBody MessageResult archiveMeeting(@PathVariable("ids") String ids, @RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		try {
			int count = meetingService.archiveMeeting(getUserJson(), ids, map);
			if (count > 0) {
				result.setResult(count, MessageInfo.UPDATESUCCESS.getMsg());
			} else {
				result.setError("没有要更新的数据");
			}
		} catch (Exception e) {
			log.error("调用archiveMeeting方法:  【参数" + ids + "," + map + "】======" + "【" + e.getMessage() + "】");
			result.setError(e.getMessage());
		}
		return result;
	}

	/**
	 * author:wangw 上传会议纪要后，修改数据状态
	 */
	@RequestMapping(value = "/uploadMeetingSummary/{id}", method = RequestMethod.GET, consumes = "application/json")
	public MessageResult uploadMeetingSummary(@PathVariable("id") String ids) {
		MessageResult result = new MessageResult();
		try {
			int update = meetingService.uploadMeetingSummary(getUserJson(), ids);
			result.setResult(update, MessageInfo.UPDATESUCCESS.getMsg());
		} catch (Exception e) {
			// e.printStackTrace();
			log.error("调用archiveMeeting方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.UPDATEERROR.isResult());
			result.setMsg(MessageInfo.UPDATEERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;

	}

	private String getUserJson() {
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userJson = JacksonUtils.toJson(userBeanInfo);
		return userJson;
	}

	/**
	 * 修改修改实体对象
	 *
	 * @param t
	 * @return
	 */
	@RequestMapping(value = "/updateMeeingStatusOfNoticeMsg/{id}", method = RequestMethod.PUT, consumes = "application/json")
	public @ResponseBody MessageResult updateMeeingStatusOfNoticeMsg(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		try {
			int count = meetingService.updateMeeingStatusOfNoticeMsg(getUserJson(), map);
			result.setResult(count, MessageInfo.UPDATESUCCESS.getMsg());
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			result.setError(e.getMessage());
		}
		return result;
	}

	/**
	 * 返回符合条件的列表
	 *
	 * @param paramater
	 * @return
	 */
	@RequestMapping(value = "/getAllMeetingByParameter", method = { RequestMethod.POST }, consumes = "application/json")
	public @ResponseBody MessageResult getAllMeetingByParameter(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		try {
			String userId = userBeanInfo.getSecurityUserDto().getId();
			map.put("userId", userId);
			List<Meeting> list = meetingService.getAllMeetingByParameter(getUserJson(), map);
			result.setResult(list, MessageInfo.QUERYSUCCESS.getMsg());
		} catch (Exception e) {
			// e.printStackTrace();
			log.error("调用getAllMeetingByParameter方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;
	}

	/**
	 * 催办会议，取消会议，变更会议的操作
	 *
	 * @param paramater
	 * @return
	 */
	@RequestMapping(value = "/operationMeeting", method = { RequestMethod.POST }, consumes = "application/json")
	public @ResponseBody MessageResult operationMeeting(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		try {
			String userId = userBeanInfo.getSecurityUserDto().getId();
			map.put("userId", userId);
			String dubboResultInfo = meetingService.operationMeeting(getUserJson(), map);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				String resultInfo = dubboServiceResultInfo.getResult();
				result.setResult(resultInfo, MessageInfo.GETSUCCESS.getMsg());
			} else {
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
			}

		} catch (Exception e) {
			// e.printStackTrace();
			log.error("调用getAllMeetingByParameter方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;
	}

	/**
	 * 获取会议纪要人参加的会议列表
	 *
	 * @param paramater
	 * @return
	 */
	@RequestMapping(value = "/getAllMeetingByRecordUser", method = { RequestMethod.POST }, consumes = "application/json")
	public @ResponseBody MessageResult getAllMeetingByRecordUser(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		try {
			String userId = userBeanInfo.getSecurityUserDto().getId();
			map.put("userId", userId);
			List list = meetingService.getAllMeetingByRecordUser(getUserJson(), map);
			result.setResult(list, MessageInfo.QUERYSUCCESS.getMsg());
		} catch (Exception e) {
			// e.printStackTrace();
			log.error("调用getAllMeetingByParameter方法:  【参数" + JacksonUtils.toJson(map) + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;
	}

	/**
	 * 暂存数据
	 *
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/temporary/save", method = RequestMethod.POST, consumes = "application/json")
	public @ResponseBody MessageResult saveTemporary(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		try {
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			map.put("createUserId", userBeanInfo.getSecurityUserDto().getId());
			map.put("createUserName", userBeanInfo.getSecurityUserDto().getRealName());
			String saveJson = JacksonUtils.toJson(map);
			String dubboResultInfo = meetingService.saveTemporary(getUserJson(), saveJson);
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				String resultInfo = dubboServiceResultInfo.getResult();
				MeetingDto MeetingDto = JacksonUtils.fromJson(resultInfo, MeetingDto.class);
				result.setResult(MeetingDto, MessageInfo.SAVESUCCESS.getMsg());
			} else {
				result.setSuccess(dubboServiceResultInfo.isSucess());
				result.setMsg(dubboServiceResultInfo.getMsg());
				result.setCode(dubboServiceResultInfo.getCode());
			}
		} catch (Exception e) {
			try {
				ObjectMapper mapper = new ObjectMapper();
				String paramJson = mapper.writeValueAsString(map);
				log.error("调用save方法:  【参数" + paramJson + "】======" + "【" + e.getMessage() + "】");
				result.setSuccess(MessageInfo.SAVEERROR.isResult());
				result.setMsg(MessageInfo.SAVEERROR.getMsg());
				result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
			} catch (JsonProcessingException e1) {
			}
		}
		return result;
	}

	/*
	 * @RequestMapping(value = "/getStartFlowInfo", method = RequestMethod.POST, consumes = "application/json") public @ResponseBody MessageResult getStartFlowInfo(@RequestBody
	 * Map<String, Object> resmap) { MessageResult result = new MessageResult(); String id = (String) resmap.get("businessId"); SecurityUserBeanInfo securityUserBeanInfo = new
	 * SecurityUserBeanInfo(); if(resmap.get("token")!=null){//加入白名单处理获取表单流程业务变量查询 String token = String.valueOf(resmap.get("token")); String[] args = token.split("@");
	 * if(args.length==2){ securityUserBeanInfo.setTendCode(args[1]); SecurityUserBeanInfo securityUserBeanInfo1 = LoginUtils.getSecurityUserBeanInfo(); SecurityUserDto
	 * securityUserDto = null; if (securityUserBeanInfo1 == null) { Map<String,Object> paramMap = new HashMap<String,Object>(); paramMap.put("loginName",args[0]);
	 * securityUserBeanInfo.setTendCode(args[1]); String userDubboInfoStr =
	 * userDtoServiceCustomer.queryList(JacksonUtils.toJson(securityUserBeanInfo),JacksonUtils.toJson(paramMap)); DubboServiceResultInfo userDubboInfo =
	 * JacksonUtils.fromJson(userDubboInfoStr,DubboServiceResultInfo.class); if(userDubboInfo.isSucess()){ String userInfo = userDubboInfo.getResult(); List<SecurityUserDto>
	 * userDtos = JacksonUtils.fromJson(userInfo,List.class,SecurityUserDto.class); if(userDtos!=null&&userDtos.size()>0){ securityUserDto = userDtos.get(0); } } }else{
	 * 
	 * securityUserDto = securityUserBeanInfo1.getSecurityUserDto(); } securityUserBeanInfo.setSecurityUserDto(securityUserDto);
	 * this.setUserAuthInfo(securityUserBeanInfo,securityUserDto); } }else{ securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo(); } try { String dubboResultInfo =
	 * meetingDtoServiceCustomer.getStartFlowInfo(JacksonUtils.toJson(securityUserBeanInfo), id); DubboServiceResultInfo dubboServiceResultInfo =
	 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if (dubboServiceResultInfo.isSucess()) { String resultInfo = dubboServiceResultInfo.getResult();
	 * result.setResult(resultInfo); result.setSuccess(MessageInfo.GETSUCCESS.isResult()); result.setMsg(MessageInfo.GETSUCCESS.getMsg()); } else {
	 * result.setSuccess(MessageInfo.GETERROR.isResult()); result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】"); } } catch (Exception
	 * e) {
	 * 
	 * log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】"); result.setSuccess(MessageInfo.GETERROR.isResult()); result.setMsg(MessageInfo.GETERROR.getMsg() +
	 * "【" + e.getMessage() + "】"); } return result; }
	 */

	/*
	 * @RequestMapping(value = "/updateStatus", method = RequestMethod.POST, consumes = "application/json") public @ResponseBody MessageResult updateCount(@RequestBody Map<String,
	 * Object> map) { MessageResult result = new MessageResult(); String paramaterJson = JacksonUtils.toJson(map); SecurityUserBeanInfo securityUserBeanInfo = new
	 * SecurityUserBeanInfo(); if(map.get("token")!=null){//加入白名单处理获取新闻/知识表单流程业务回调 String token = String.valueOf(map.get("token")); String[] args = token.split("@");
	 * if(args.length==2){ securityUserBeanInfo.setTendCode(args[1]); SecurityUserBeanInfo securityUserBeanInfo1 = LoginUtils.getSecurityUserBeanInfo(); SecurityUserDto
	 * securityUserDto = null; if (securityUserBeanInfo1 == null) { Map<String,Object> paramMap = new HashMap<String,Object>(); paramMap.put("loginName",args[0]); String
	 * userDubboInfoStr = userDtoServiceCustomer.queryList(JacksonUtils.toJson(securityUserBeanInfo),JacksonUtils.toJson(paramMap)); DubboServiceResultInfo userDubboInfo =
	 * JacksonUtils.fromJson(userDubboInfoStr,DubboServiceResultInfo.class); if(userDubboInfo.isSucess()){ String userInfo = userDubboInfo.getResult(); List<SecurityUserDto>
	 * userDtos = JacksonUtils.fromJson(userInfo,List.class,SecurityUserDto.class); if(userDtos!=null&&userDtos.size()>0){ securityUserDto = userDtos.get(0);
	 * 
	 * } }
	 * 
	 * }else{ securityUserDto = securityUserBeanInfo1.getSecurityUserDto(); } securityUserBeanInfo.setSecurityUserDto(securityUserDto); } }else{ securityUserBeanInfo =
	 * LoginUtils.getSecurityUserBeanInfo(); } try { String dubboResultInfo = meetingDtoServiceCustomer.updateStatus(JacksonUtils.toJson(securityUserBeanInfo), paramaterJson);
	 * DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if (dubboServiceResultInfo.isSucess()) { Integer i =
	 * JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), Integer.class); result.setResult(i); result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
	 * result.setMsg(MessageInfo.UPDATESUCCESS.getMsg()); } else { result.setSuccess(MessageInfo.UPDATEERROR.isResult()); result.setMsg(dubboServiceResultInfo.getMsg() + "【" +
	 * dubboServiceResultInfo.getExceptionMsg() + "】"); }
	 * 
	 * } catch (Exception e) { log.error("调用update方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】"); result.setSuccess(MessageInfo.UPDATEERROR.isResult());
	 * result.setMsg(MessageInfo.UPDATEERROR.getMsg() + "【" + e.getMessage() + "】"); } return result; }
	 */

	@RequestMapping(value = "/getUserInfo", method = RequestMethod.GET)
	public @ResponseBody MessageResult getUserInfo() {
		MessageResult result = new MessageResult();
		try {
			SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			result.setResult(securityUserBeanInfo.getSecurityUserDto(), MessageInfo.GETSUCCESS.getMsg());
		} catch (Exception e) {
			e.printStackTrace();
			log.error("调用getUserInfo方法:  【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;
	}

	/**
	 * 拷贝录入和会议变更的时候要复制附件
	 *
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/attachment/save", method = RequestMethod.POST, consumes = "application/json")
	public @ResponseBody MessageResult saveAttachment(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		try {
			String saveJson = JacksonUtils.toJson(map);
			int saveResult = meetingService.saveAttachment(saveJson);
			result.setResult(saveResult, MessageInfo.SAVESUCCESS.getMsg());
		} catch (Exception e) {
			try {
				ObjectMapper mapper = new ObjectMapper();
				String paramJson = mapper.writeValueAsString(map);
				log.error("调用save方法:  【参数" + paramJson + "】======" + "【" + e.getMessage() + "】");
				result.setSuccess(MessageInfo.SAVEERROR.isResult());
				result.setMsg(MessageInfo.SAVEERROR.getMsg());
				result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
			} catch (JsonProcessingException e1) {
			}
		}
		return result;
	}

	/**
	 * 获取potal页面的会议列表，
	 *
	 * @param paramater
	 * @return
	 */
	@RequestMapping(value = "/potalPage", method = { RequestMethod.POST }, consumes = "application/json")
	public @ResponseBody MessageResult poatlPage(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			Page page = meetingService.getPotalPage(map);
			result.setResult(page, MessageInfo.GETSUCCESS.getMsg());
		} catch (Exception e) {
			// e.printStackTrace();
			log.error("调用page方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;
	}

	/**
	 * 录入会议纪要时获取到的部分会议的业务对象
	 *
	 * @param id
	 *            业务对象主键
	 * @return 业务对象
	 */
	@RequestMapping(value = "/getMeetingInfo/{id}", method = RequestMethod.GET)
	public @ResponseBody MessageResult getMeetingInfo(@PathVariable("id") String id) {
		MessageResult result = new MessageResult();
		try {
			MeetingDto meetingDto = meetingService.getMeetingSummInfoById(id);
			result.setResult(meetingDto, MessageInfo.GETSUCCESS.getMsg());
		} catch (Exception e) {
			// e.printStackTrace();
			log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;
	}

	@RequestMapping(value = "/getMeetingPortal", method = RequestMethod.GET, produces = "text/html; charset=utf-8")
	@ResponseBody
	public String getMeetingPortal(HttpServletRequest request) {
		String contextPath = request.getContextPath();
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("limit", 5);
		paramMap.put("start", 0);
		String html = "暂无数据！";
		try {
			DubboServiceResultInfo info = new DubboServiceResultInfo();
			try {
				if (isNotEmpty(paramMap)) {
					SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");// 设置日期格式
					String currentTime = df.format(new Date());// new Date()为获取当前系统时间
					paramMap.put("currentTime", currentTime);
					SecurityUserBeanInfo userBeanInfo = JacksonUtils.fromJson(getUserInfoJson(), SecurityUserBeanInfo.class);
					paramMap.put("userId", userBeanInfo.getSecurityUserDto().getId());
					Page page = meetingService.getPotalPage(paramMap);

					info.setResult(JacksonUtils.toJson(page));
					info.setSucess(true);
					info.setMsg("获取分页对象成功!");
				} else {
					Page page = meetingService.getPage(new HashMap(), null, null);
					info.setResult(JacksonUtils.toJson(page));
					info.setSucess(true);
					info.setMsg("获取分页对象成功!");
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				log.error("获取分页对象失败!" + e.getMessage());
				info.setSucess(false);
				info.setMsg("获取分页对象失败!");
				info.setExceptionMsg(e.getMessage());
			}

			if (info.isSucess()) {
				String resultInfo = info.getResult();
				PageBeanInfo pageInfo = JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
				List<Map<String, Object>> list = pageInfo.getList();

				StringBuffer buf = new StringBuffer();
				buf.append("<ul class=\"rules_list\" id=\"oaMettingSchedule\">");
				for (Map<String, Object> map : list) {
					String id = (String) map.get("id");
					String title = (String) map.get("title");
					String status = (String) map.get("status");
					String beginTime = (String) map.get("beginTime");
					String beginTimeStr = "";
					beginTime = beginTime.substring(0, 10);

					String url = contextPath + "/meeting/meeting/meeting_view.html?act=view&id=" + id + "&update=false";
					if ("0".equals(status)) {
						url = contextPath + "/meeting/meeting/meeting_edit.html?act=update&id=" + id + "&update=true";
					}
					buf.append("<li>");
					buf.append("<a href=\"" + url + "\" target=\"_blank\" title=\"" + title + "\"><i></i>" + title + "</a>");
					buf.append("<span class=\"date\">" + beginTime + "</span>");
					buf.append("</li>");

				}
				buf.append("</ul>");
				html = buf.toString();
			}

		} catch (Exception e) {
			log.error("调用getMeetingPortal出错：" + e.getMessage());
			return "服务器错误！";
		}
		return html;
	}

	/*
	 * private void setUserAuthInfo(SecurityUserBeanInfo securityUserBeanInfo,SecurityUserDto securityUserDto){ try { String authenticationInfodubboResultInfo =
	 * authenticationDtoServiceCustomer.getUserAuthenticationInfoWithoutResource(JacksonUtils.toJson(securityUserBeanInfo), JacksonUtils.toJson(securityUserDto));
	 * DubboServiceResultInfo authenticationInfodubboServiceResultInfo= JacksonUtils.fromJson(authenticationInfodubboResultInfo, DubboServiceResultInfo.class);
	 * if(authenticationInfodubboServiceResultInfo.isSucess()){ String authenticationInforesultInfo= authenticationInfodubboServiceResultInfo.getResult(); AuthenticationDto
	 * authenticationDto=JacksonUtils.fromJson(authenticationInforesultInfo, AuthenticationDto.class); //获取用户标准岗位 List<SecurityStandardRoleDto> securityStandardRoleDtoList =
	 * JacksonUtils.fromJson(JacksonUtils.toJson(authenticationDto.getStandardRoleDtoList()),ArrayList.class,SecurityStandardRoleDto.class);
	 * securityUserBeanInfo.setSecurityStandardRoleDtoList(securityStandardRoleDtoList);
	 * 
	 * //获取用户通用角色 List<SecurityStandardRoleDto> securityCurrencyRoleDtoList =
	 * JacksonUtils.fromJson(JacksonUtils.toJson(authenticationDto.getCurrencyRoleDtoList()),ArrayList.class,SecurityStandardRoleDto.class);
	 * securityUserBeanInfo.setSecurityCurrencyRoleDtoList(securityCurrencyRoleDtoList);
	 * 
	 * //获取用户岗位 List<SecurityPostDto> securityPostDtoList = JacksonUtils.fromJson(JacksonUtils.toJson(authenticationDto.getPostDtoList()),ArrayList.class,SecurityPostDto.class);
	 * securityUserBeanInfo.setSecurityPostDtoList(securityPostDtoList); //当前用户的菜单清单（未授权和已授权的） List<SecurityResourceDto> SecurityResourceDtoList =
	 * JacksonUtils.fromJson(JacksonUtils.toJson(authenticationDto.getResourceDtoList()),ArrayList.class,SecurityResourceDto.class);
	 * securityUserBeanRelationInfo.setResourceDtoList(SecurityResourceDtoList); //当前用户所在组织的类型 String securityOrganizationType = authenticationDto.getOrganizationType();
	 * securityUserBeanInfo.setSecurityOrganizationType(securityOrganizationType); //当前用户的一级公司 SecurityOrganizationDto securityTopCompanyDto =
	 * JacksonUtils.fromJson(JacksonUtils.toJson(authenticationDto.getTopCompanyDto()),SecurityOrganizationDto.class);
	 * securityUserBeanInfo.setSecurityTopCompanyDto(securityTopCompanyDto); //当前用户的直属公司 SecurityOrganizationDto securityDirectCompanyDto =
	 * JacksonUtils.fromJson(JacksonUtils.toJson(authenticationDto.getDirectCompanyDto()),SecurityOrganizationDto.class);
	 * securityUserBeanInfo.setSecurityDirectCompanyDto(securityDirectCompanyDto); //当前用户的一级部门 SecurityOrganizationDto securityTopDeptDto =
	 * JacksonUtils.fromJson(JacksonUtils.toJson(authenticationDto.getTopDeptDto()),SecurityOrganizationDto.class); securityUserBeanInfo.setSecurityTopDeptDto(securityTopDeptDto);
	 * //当前用户的直属部门 SecurityOrganizationDto securityDirectDeptDto = JacksonUtils.fromJson(JacksonUtils.toJson(authenticationDto.getDirectDeptDto()),SecurityOrganizationDto.class);
	 * securityUserBeanInfo.setSecurityDirectDeptDto(securityDirectDeptDto); //当前用户的项目 SecurityOrganizationDto securityGroupDto =
	 * JacksonUtils.fromJson(JacksonUtils.toJson(authenticationDto.getGroupDto()),SecurityOrganizationDto.class); securityUserBeanInfo.setSecurityGroupDto(securityGroupDto);
	 * //当前用户的分期 SecurityOrganizationDto securityBranchDto = JacksonUtils.fromJson(JacksonUtils.toJson(authenticationDto.getBranchDto()),SecurityOrganizationDto.class);
	 * securityUserBeanInfo.setSecurityBranchDto(securityBranchDto); } }catch (Exception e){ e.printStackTrace(); } }
	 */
}
