package com.jzy.hio.oa.favorite.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.base.utils.IDGenerator;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.oa.favorite.entity.Favorite;
import com.jzy.hio.oa.favorite.service.FavoriteService;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.tools.login.LoginUtils;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;


/**
 * 我的收藏控制层
 *
 * @author admin
 */
@RestController
@Api(tags = {"我的收藏相关接口"})
@RequestMapping("/favorite")
public class FavoriteController extends BaseController<FavoriteService>  {

	private static Logger log = LoggerFactory.getLogger(FavoriteController.class);

    @Autowired
    private FavoriteService favoriteService;


    /**
     * 返回分页对象
     *
     * @param
     * @return
     */
    @Override
    @ApiOperation(value = "查询收藏分页列表",notes = "查询收藏分页列表")
	@ApiImplicitParam(name = "map",value = "",required = true,dataType = "JSON")
    @RequestMapping(value = "/page", method = {RequestMethod.POST}, consumes = "application/json")
    public MessageResult page(@RequestBody Map<String, Object> map) {
    	MessageResult result = new MessageResult();
    	String paramaterJson = JacksonUtils.toJson(map);
    	Page page = null;
    	try {
	    	if(StringUtils.isNotBlank(paramaterJson)){
				Map paramMap = JacksonUtils.fromJson(paramaterJson, HashMap.class);
				page = favoriteService.getPage(paramMap, (Integer)paramMap.get("start"),  (Integer)paramMap.get("limit"));
			}else{
				page = favoriteService.getPage(new HashMap(), null, null);
			}
	    	result.setResult(page, "获取分页对象成功!");
    	} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			result.setError("获取分页对象失败!");
		}
    	return result;
    	
        /*MessageResult result = new MessageResult();
        String paramaterJson = JacksonUtils.toJson(map);
        try {
            SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
            String userInfo = JacksonUtils.toJson(securityUserBeanInfo);

            String dubboResultInfo = favoriteDtoServiceCustomer.getPage(userInfo, paramaterJson);
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                PageBeanInfo pageInfo = JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
                result.setResult(pageInfo);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            e.printStackTrace();
            log.error("调用page方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }

    /**
     * 返回符合条件的列表
     *
     * @param
     * @return
     */
    @Override
    @ApiOperation(value = "查询条件返回符合条件列表",notes = "查询条件返回符合条件列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "paramater",value = "condition query",required = true,dataType = "String")})
    @RequestMapping(value = "/queryList", method = {RequestMethod.POST}, consumes = "application/json")
    public MessageResult queryList(@RequestBody Map<String, Object> paramater) {
    	MessageResult result = new MessageResult();
    	List<Favorite> list = new ArrayList<Favorite>();
    	Map<String,Object> map = new HashMap<String,Object>();
    	try {
    		Favorite favorite=JacksonUtils.fromJson(JacksonUtils.toJson(paramater), Favorite.class);
    		SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
    		favorite.setCreatePersonId(securityUserBeanInfo.getSecurityUserDto().getId());
    		if (favorite != null) {
    			if (favorite.getCode() != null && StringUtils.isNotBlank(favorite.getCode())){
        			map = JacksonUtils.fromJson(JacksonUtils.toJson(favorite), HashMap.class);
        			list=favoriteService.queryListByExample(map);
        		} else {
        			map.put("code","ROOT_FAVORITE");
        			List rootList = favoriteService.queryListByExample(map);
    				if (rootList == null || rootList.size() == 0) {
    					Map<String,Object> saveMap = new HashMap<String,Object>();
    					saveMap.put("id", IDGenerator.getUUID());
    					saveMap.put("code", "ROOT_FAVORITE");
    					saveMap.put("name", "收藏夹");
    					saveMap.put("isFavorite", true);
    					//获取用户id
    		 		    String userId = securityUserBeanInfo.getSecurityUserDto().getId();
    		 		    String userName = securityUserBeanInfo.getSecurityUserDto().getRealName();
    					Favorite _favorite=JacksonUtils.fromJson(JacksonUtils.toJson(saveMap), Favorite.class);
    					_favorite.setCreatePersonId(userId);
    					_favorite.setCreatePersonName(userName);
    					favoriteService.saveFavorite(_favorite);
    				}
    				map.remove("code");
    				list=favoriteService.queryListByExample(map);
        		}
    		} else {
    			list = favoriteService.queryList(favorite);
    		}
    		result.setResult(list, MessageInfo.QUERYSUCCESS.getMsg());
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");  
			e.printStackTrace();
			result.setError(MessageInfo.QUERYERROR.getMsg());
		}
        return result;
    	
       /* MessageResult result = new MessageResult();
        String paramaterJson =null;
        try {
            SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
            String userInfo = JacksonUtils.toJson(securityUserBeanInfo);

            map.put("createPersonId",securityUserBeanInfo.getSecurityUserDto().getId());
            paramaterJson = JacksonUtils.toJson(map);
            String dubboResultInfo = favoriteDtoServiceCustomer.queryList(userInfo, paramaterJson);
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                List<FavoriteDto> list = JacksonUtils.fromJson(resultInfo, ArrayList.class, FavoriteDto.class);
                result.setResult(list);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }

        } catch (Exception e) {
            e.printStackTrace();
            log.error("调用queryList方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }


    /**
     * 保存实体对象
     *
     * @param t
     * @return
     */
    @Override
    @ApiOperation(value = "保存favorite实体",notes = "保存favorite实体")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "favorite",value = "save",required = true,dataType = "String")})
    @RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
    public MessageResult save(@RequestBody String json) {
    	MessageResult result = new MessageResult();
    	try {
    		Favorite favorite = JacksonUtils.fromJson(json, Favorite.class);
    	    SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
    		//获取用户id
 		    String userId = securityUserBeanInfo.getSecurityUserDto().getId();
 		    String userName = securityUserBeanInfo.getSecurityUserDto().getRealName();
 		    favorite.setCreatePersonId(userId);
 		    favorite.setCreatePersonName(userName);
		    int save = favoriteService.saveFavorite(favorite);
			result.setResult(save, MessageInfo.SAVESUCCESS.getMsg());
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			result.setError("保存对象失败!");
		}
    	return result;
    	
       /* MessageResult result = new MessageResult();
        try {
            SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
            String userInfo = JacksonUtils.toJson(securityUserBeanInfo);

            String saveJson = JacksonUtils.toJson(t);
            String dubboResultInfo = favoriteDtoServiceCustomer.save(userInfo, saveJson);
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                FavoriteDto favoriteDto = JacksonUtils.fromJson(resultInfo, FavoriteDto.class);
                result.setResult(favoriteDto);
                result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
                result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.SAVEERROR.isResult());
                result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            try {
                e.printStackTrace();
                ObjectMapper mapper = new ObjectMapper();
                String paramJson = mapper.writeValueAsString(t);
                log.error("调用save方法:  【参数" + paramJson + "】======" + "【" + e.getMessage() + "】");
                result.setSuccess(MessageInfo.SAVEERROR.isResult());
                result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + e.getMessage() + "】");
            } catch (JsonProcessingException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }

        }
        return result;*/
    }




    @RequestMapping(value="/getUserInfo",method= RequestMethod.GET)
    public MessageResult getUserInfo(){
        MessageResult result=new MessageResult();
        try {
			/*SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userInfo = JacksonUtils.toJson(securityUserBeanInfo);*/
            result.setResult(getSecurityUserInfo());
            result.setSuccess(MessageInfo.GETSUCCESS.isResult());
            result.setMsg(MessageInfo.GETSUCCESS.getMsg());
        } catch (Exception e) {
            e.printStackTrace();
            log.error("调用getUserInfo方法:  【"+e.getMessage()+"】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
        }
        return result;
    }

    private String getSecurityUserInfo() {
        SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
        String userInfo = JacksonUtils.toJson(securityUserBeanInfo);

        return userInfo;
    }

}
