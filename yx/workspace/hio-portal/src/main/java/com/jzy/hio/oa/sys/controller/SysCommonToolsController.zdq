package com.jzy.hio.oa.sys.controller;

import java.io.InputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.base.utils.DubboServiceResultInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.oa.sys.dto.SysCommonToolsDto;
import com.jzy.hio.oa.sys.entity.SysCommonTools;
import com.jzy.hio.oa.sys.service.SysCommonToolsService;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.tools.login.LoginUtils;

/**
 * 常用工具表控制层
 * 
 * @author admin
 * 
 */
@Controller
@RequestMapping("/sys/sysCommonTools")
public class SysCommonToolsController extends BaseController<SysCommonToolsService> {

	@Autowired
	private SysCommonToolsService sysCommonToolsService;

	/**
	 * 回显图片
	 * 
	 * @param paramater
	 * @return
	 */
	/*
	 * @RequestMapping(value = "/showPic/{id}", method = RequestMethod.GET) public @ResponseBody MessageResult showPic(@PathVariable("id") String id) {
	 * 
	 * }
	 */

	/**
	 * 返回符合条件的列表
	 * 
	 * @return
	 */
	@RequestMapping(value = "/getCommonToolsList", method = { RequestMethod.POST }, consumes = "application/json")
	public @ResponseBody MessageResult getCommonToolsList() {
		MessageResult result = new MessageResult();
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			if (map.size() > 0) {
				List<SysCommonTools> list = sysCommonToolsService.getCommonToolsList(map);
				result.setResult(list, "获取列表对象成功!");
			} else {
				List list = sysCommonToolsService.queryList(null);
				result.setResult(list, "获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			log.error("获取列表对象失败!" + e.getMessage());
			result.setError("获取列表对象失败!");
		}
		return result;
	}

	/**
	 * 保存实体对象
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public void save(MultipartHttpServletRequest request, HttpServletResponse response) {
		PrintWriter pw = null;
		Boolean isReturn = false;
		try {
			response.setContentType("text/html;charset=UTF-8");
			pw = response.getWriter();
			MultipartFile uploadfile = request.getFile("pic");
			MessageResult result = new MessageResult();
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userJson = JacksonUtils.toJson(userBeanInfo);
			if (null != uploadfile) {
				long length = uploadfile.getSize();
				if (length > 1 * 1024 * 1024) {
					result.setSuccess(false);
					result.setMsg("图片尺寸不能大于1M");
					pw.print(JacksonUtils.toJson(result));
					pw.flush();
					isReturn = true;
				}
			}
			if (!isReturn) {
				String id = request.getParameter("id");
				String name = request.getParameter("name");
				String code = request.getParameter("code");
				String isDelPic = request.getParameter("isDelPic");
				byte[] headpic = {};
				if (null != uploadfile) {
					InputStream is = uploadfile.getInputStream();
					headpic = new byte[is.available()];
					is.read(headpic);
					is.close();
				}
				SysCommonToolsDto sysCommonToolsDto = new SysCommonToolsDto();
				sysCommonToolsDto.setCode(code);
				sysCommonToolsDto.setId(id);
				sysCommonToolsDto.setName(name);
				sysCommonToolsDto.setPic(headpic);
				sysCommonToolsDto.setDelflag(false);
				String saveJson = JacksonUtils.toJson(sysCommonToolsDto);
				try {
					SysCommonTools sysCommonTools = JacksonUtils.fromJson(saveJson, SysCommonTools.class);
					sysCommonToolsService.saveCommonTools(sysCommonTools);
					result.setResult(sysCommonTools, "保存对象成功!");
				} catch (Exception e) {
					log.error("保存对象失败!" + e.getMessage());
					result.setResult("保存对象失败!");
				}
				pw.print(JacksonUtils.toJson(result));
				pw.flush();
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			try {
				pw.close();
			} catch (Exception e) {
			}
		}
	}

	/**
	 * 修改修改实体对象
	 * 
	 * @return
	 */
	@RequestMapping(value = "/update")
	public void update(MultipartHttpServletRequest request, HttpServletResponse response) {
		PrintWriter pw = null;
		Boolean isReturn = false;
		try {
			response.setContentType("text/html;charset=UTF-8");
			pw = response.getWriter();
			MultipartFile uploadfile = request.getFile("pic");
			MessageResult result = new MessageResult();
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userJson = JacksonUtils.toJson(userBeanInfo);
			if (null != uploadfile) {
				long length = uploadfile.getSize();
				if (length > 1 * 1024 * 1024) {
					result.setSuccess(false);
					result.setMsg("图片尺寸不能大于1M");
					pw.print(JacksonUtils.toJson(result));
					pw.flush();
					isReturn = true;
				}
			}
			if (!isReturn) {
				SysCommonToolsDto sysCommonToolsDto = new SysCommonToolsDto();
				String id = request.getParameter("id");
				SysCommonTools tmp = sysCommonToolsService.getObjectById(id);
				String resultInfo = JacksonUtils.toJson(tmp);
				sysCommonToolsDto = JacksonUtils.fromJson(resultInfo, SysCommonToolsDto.class);
				String name = request.getParameter("name");
				String code = request.getParameter("code");
				String url = request.getParameter("url");
				String isDelPic = request.getParameter("isDelPic");
				sysCommonToolsDto.setCode(code);
				sysCommonToolsDto.setId(id);
				sysCommonToolsDto.setName(name);
				sysCommonToolsDto.setUrl(url);
				byte[] headpic = {};
				if (null != uploadfile) {
					if (uploadfile.getSize() > 0) {
						InputStream is = uploadfile.getInputStream();
						headpic = new byte[is.available()];
						is.read(headpic);
						is.close();
						sysCommonToolsDto.setPic(headpic);
					}
				} else if ("0".equals(isDelPic)) {
					sysCommonToolsDto.setPic(null);
				}
				sysCommonToolsDto.setDelflag(false);
				String updateJson = JacksonUtils.toJson(sysCommonToolsDto);
				try {
					SysCommonTools sysCommonTools = JacksonUtils.fromJson(updateJson, SysCommonTools.class);
					int updateResult = sysCommonToolsService.update(sysCommonTools);
					result.setResult(updateResult, "更新对象成功!");
				} catch (Exception e) {
					log.error("更新对象失败!" + e.getMessage());
					result.setError("更新对象失败!");
				}
				pw.print(JacksonUtils.toJson(result));
				pw.flush();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				pw.close();
			} catch (Exception e) {
			}
		}
	}

	/**
	 * 排序(上移/下移/置顶/置底)
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/updateSort/{id}", method = RequestMethod.PUT, consumes = "application/json")
	public @ResponseBody MessageResult updateSort(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		String updateJson = "{\"id\":\"" + id + "\"}";
		try {
			SysCommonTools sysCommonTools = JacksonUtils.fromJson(updateJson, SysCommonTools.class);
			SysCommonTools object = sysCommonToolsService.getObjectById(sysCommonTools.getId());
			int updateResult = sysCommonToolsService.updateSort(object, map);
			result.setResult(updateResult, "更新对象成功!");
		} catch (Exception e) {
			log.error("更新对象失败!" + e.getMessage());
			result.setError("更新对象失败!");
		}
		return result;
	}

	/**
	 * 门户首页展示
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping(value = "/getCommonToolsPortal", method = RequestMethod.GET, produces = "text/html; charset=utf-8")
	@ResponseBody
	public String getCommonToolsPortal(HttpServletRequest request) {
		String html = "";
		StringBuffer buffer = new StringBuffer();
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			buffer.append("<ul class=\"toolicons clearfix\" id=\"oaCommonTools\">\n");
			DubboServiceResultInfo info = new DubboServiceResultInfo();
			try {
				if (map.size() > 0) {
					List<SysCommonTools> list = sysCommonToolsService.getCommonToolsList(map);
					info.setResult(JacksonUtils.toJson(list));
					info.setSucess(true);
					info.setMsg("获取列表对象成功!");
				} else {
					List list = sysCommonToolsService.queryList(null);
					info.setResult(JacksonUtils.toJson(list));
					info.setSucess(true);
					info.setMsg("获取列表对象成功!");
				}
			} catch (Exception e) {
				log.error("获取列表对象失败!" + e.getMessage());
				info.setSucess(false);
				info.setMsg("获取列表对象失败!");
				info.setExceptionMsg(e.getMessage());
			}
			if (info.isSucess()) {
				String resultInfo = info.getResult();
				List<SysCommonToolsDto> list = JacksonUtils.fromJson(resultInfo, ArrayList.class, SysCommonToolsDto.class);
				for (SysCommonToolsDto commonToolsDto : list) {
					byte[] icon1 = commonToolsDto.getPic();
					byte[] icon2 = icon1;// icon1!=null? CompressImgUtil.compressImg2(icon1,50,50):null;
					if (icon1 != null && icon1.length > 32 * 1024) {
						// icon2 = icon1!=null? CompressImgUtil.compressImg2(icon1,50,50):null;
					}
					String base64Img = icon2 != null ? "data:image/jpeg;base64," + Base64.getEncoder().encodeToString(icon2) : "../../common/img/default2.png";
					buffer.append("<li>\n<a href=\"javascript:void(0);\" onclick=\"downloadPackage('" + commonToolsDto.getId() + "')\">\n" + "<img src=\"" + base64Img
							+ "\" style=\"width:50px;height:50px;\" title=\"" + commonToolsDto.getName() + "\">\n<span>" + commonToolsDto.getName() + "</span></a>\n</li>\n");
				}
			}
			buffer.append("</ul>");
			buffer.append("<script type=\"text/javascript\">\n" + "\tfunction downloadPackage(id){\n" + "\t\t$.xljUtils.xljDownLoad('1',id,'1');\n" + "\t}\n</script>");
			html = buffer.toString();
		} catch (Exception e) {
			log.error("调用getCommonToolsPortal方法出错：" + e.getMessage());
			return html;
		}

		return html;
	}
}
