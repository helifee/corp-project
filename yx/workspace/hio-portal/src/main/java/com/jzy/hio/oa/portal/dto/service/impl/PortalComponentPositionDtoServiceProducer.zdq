package com.jzy.hio.oa.portal.dto.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.jzy.hio.base.utils.DubboServiceResultInfo;
import com.jzy.hio.base.utils.IDGenerator;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.oa.portal.dto.service.PortalComponentPositionDtoServiceCustomer;
import com.jzy.hio.oa.portal.entity.PortalComponentPosition;
import com.jzy.hio.oa.portal.service.PortalComponentPositionService;

/**
 * @author admin
 */
@Service
public class PortalComponentPositionDtoServiceProducer implements PortalComponentPositionDtoServiceCustomer {
    private static Logger log = Logger.getLogger(PortalComponentPositionDtoServiceProducer.class);
    @Autowired
    private PortalComponentPositionService portalComponentPositionService;

    public String save(String userInfo, String saveJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            PortalComponentPosition portalComponentPosition = JacksonUtils.fromJson(saveJson, PortalComponentPosition.class);
            if (portalComponentPosition.getId() == null) {
                portalComponentPosition.setId(IDGenerator.getUUID());
            }
            portalComponentPositionService.save(portalComponentPosition);
            info.setResult(JacksonUtils.toJson(portalComponentPosition));
            info.setSucess(true);
            info.setMsg("保存对象成功!");
        } catch (Exception e) {
            log.error("保存对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("保存对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String saveBatch(String userInfo, String saveJsonList) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            List<Map<String,Object>> list = JacksonUtils.fromJson(saveJsonList, ArrayList.class,Map.class);
            portalComponentPositionService.savePositionBatch(list);
            info.setResult(JacksonUtils.toJson(list));
            info.setSucess(true);
            info.setMsg("保存对象成功!");
        } catch (Exception e) {
            log.error("保存对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("保存对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }
    @Override
    public String saveBatchForPersonal(String userInfo, String saveJsonList) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            Map<String,Object> paramMap = JacksonUtils.fromJson(userInfo,HashMap.class);
            Map<String,Object> securityUserDto = (Map<String,Object>) paramMap.get("securityUserDto");
            //获取用户id
            String userId = (String) securityUserDto.get("id");
            List<Map<String,Object>> list = JacksonUtils.fromJson(saveJsonList, ArrayList.class,Map.class);
            portalComponentPositionService.saveBatchForPersonal(userId,list);

            info.setResult(JacksonUtils.toJson(list));
            info.setSucess(true);
            info.setMsg("保存对象成功!");
        } catch (Exception e) {
            log.error("保存对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("保存对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String updateBatch(String userInfo, String updateJsonList) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public String update(String userInfo, String updateJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            PortalComponentPosition portalComponentPosition = JacksonUtils.fromJson(updateJson, PortalComponentPosition.class);
            int result = portalComponentPositionService.update(portalComponentPosition);
            info.setResult(JacksonUtils.toJson(result));
            info.setSucess(true);
            info.setMsg("更新对象成功!");
        } catch (Exception e) {
            log.error("更新对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("更新对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String deleteObjectById(String userInfo, String deleteJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            PortalComponentPosition portalComponentPosition = JacksonUtils.fromJson(deleteJson, PortalComponentPosition.class);
            int result = portalComponentPositionService.deleteObjectById(portalComponentPosition.getId());
            info.setResult(JacksonUtils.toJson(result));
            info.setSucess(true);
            info.setMsg("删除对象成功!");
        } catch (Exception e) {
            log.error("更新对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("删除更新对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String deleteAllObjectByIds(String userInfo, String deleteJsonList) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            if (StringUtils.isNotBlank(deleteJsonList)) {
                Map map = JacksonUtils.fromJson(deleteJsonList, HashMap.class);
                List<String> list = Arrays.asList(map.get("id").toString().split(","));
                int result = portalComponentPositionService.deleteAllObjectByIds(list);
                info.setResult(JacksonUtils.toJson(result));
                info.setSucess(true);
                info.setMsg("删除对象成功!");
            }
        } catch (Exception e) {
            log.error("删除对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("删除更新对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String getObjectById(String userInfo, String getJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            PortalComponentPosition portalComponentPosition = JacksonUtils.fromJson(getJson, PortalComponentPosition.class);
            PortalComponentPosition result = portalComponentPositionService.getObjectById(portalComponentPosition.getId());
            info.setResult(JacksonUtils.toJson(result));
            info.setSucess(true);
            info.setMsg("获取对象成功!");
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String getPage(String userInfo, String paramater) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            if (StringUtils.isNotBlank(paramater)) {
                Map map = JacksonUtils.fromJson(paramater, HashMap.class);
                Page page = portalComponentPositionService.getPage(map, (Integer) map.get("start"), (Integer) map.get("limit"));
                info.setResult(JacksonUtils.toJson(page));
                info.setSucess(true);
                info.setMsg("获取分页对象成功!");
            } else {
                Page page = portalComponentPositionService.getPage(new HashMap(), null, null);
                info.setResult(JacksonUtils.toJson(page));
                info.setSucess(true);
                info.setMsg("获取分页对象成功!");
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取分页对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取分页对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String queryList(String userInfo, String paramater) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            if (StringUtils.isNotBlank(paramater)) {
                Map map = JacksonUtils.fromJson(paramater, HashMap.class);
                List list = portalComponentPositionService.queryListByExample(map);
                info.setResult(JacksonUtils.toJson(list));
                info.setSucess(true);
                info.setMsg("获取列表对象成功!");
            } else {
                List list = portalComponentPositionService.queryList(null);
                info.setResult(JacksonUtils.toJson(list));
                info.setSucess(true);
                info.setMsg("获取列表对象成功!");
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取列表对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取列表对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String getCount(String userInfo, String paramater) {
        // TODO Auto-generated method stub
        return null;
    }

	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo,
			String deleteJsonList) {
		// TODO Auto-generated method stub
		return null;
	}


    public String findComponentsByPortalId(String userInfo,String paramJson){
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            if (StringUtils.isNotBlank(paramJson)) {
                Map map = JacksonUtils.fromJson(paramJson, HashMap.class);
                String portalPageId = (String) map.get("portalPageId");
                List list = portalComponentPositionService.findComponentsByPortalId(portalPageId);
                info.setResult(JacksonUtils.toJson(list));
                info.setSucess(true);
                info.setMsg("获取列表对象成功!");
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取列表对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取列表对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    };
}
