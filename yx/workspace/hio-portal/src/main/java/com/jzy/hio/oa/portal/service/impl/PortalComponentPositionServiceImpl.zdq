package com.jzy.hio.oa.portal.service.impl;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.base.utils.IDGenerator;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.hio.oa.portal.entity.PortalComponentPosition;
import com.jzy.hio.oa.portal.entity.PortalPage;
import com.jzy.hio.oa.portal.mapper.PortalComponentPositionDao;
import com.jzy.hio.oa.portal.service.PortalComponentPositionService;
import com.jzy.hio.oa.portal.service.PortalPageService;

/**
 * @author admin
 *
 *
 */
@Service
public class PortalComponentPositionServiceImpl extends  BaseServiceImpl<String,PortalComponentPosition> implements PortalComponentPositionService{


	@Autowired
	private PortalComponentPositionDao portalComponentPositionDao;

    @Autowired
    private PortalPageService portalPageService;

	@Override
	public List<Map<String, Object>> findComponentsByPortalId(String portalPageId) {
		return portalComponentPositionDao.findComponentsByPortalId(portalPageId);
	}

    @Override
    public int saveBatch(List<PortalComponentPosition> objectList) {
		return portalComponentPositionDao.insertList(objectList);
    }

	@Override
	public int saveBatchForPersonal(String userId, List<Map<String,Object>> list) throws Exception {
		int num = 0;
        String originPortalPageId = null;
        String newPortalPageId = null;
        if(list!=null&&list.size()>0){
            originPortalPageId = (String) (list.get(0).get("portalPageId"));
            //查找源portal
            PortalPage portalPage = portalPageService.getObjectById(originPortalPageId);
            String portalPageOwner = portalPage.getPortalPageOwner();
            //判断源portal的拥有人是否与登录用户相同，不相同则创建新的portal否则不执行portal保存
            if(!portalPageOwner.equals(userId)){
                String code = portalPage.getPortalPageCode();
                Date date = new Date();
                DateFormat format = new SimpleDateFormat("yyyyMMdd");
                String dateStr = format.format(date);

                portalPage.setOriginPortalPageId(originPortalPageId);
                portalPage.setPortalPageOwner(userId);
                portalPage.setId(IDGenerator.getUUID());
                portalPage.setPortalPageCode(code+"_"+dateStr);
                portalPageService.save(portalPage);
                newPortalPageId = portalPage.getId();
            }else{
                newPortalPageId = portalPage.getId();
            }
        }else{
            return num;
        }

        for (Map<String,Object> portalPositionMap:list) {
            PortalComponentPosition oldPortalPosition = this.getObjectById((String) portalPositionMap.get("id"));
            //判断位置信息中的portalPageId是否与当前portalPageId相等
            //如果不相等则新建一条
            if(oldPortalPosition==null || !oldPortalPosition.getPortalPageId().equals(newPortalPageId)){
                //重置位置id
                portalPositionMap.put("id",IDGenerator.getUUID());
                portalPositionMap.put("portalPageId",newPortalPageId);
                oldPortalPosition = null;
            }

            if (oldPortalPosition != null) {
                //String json = JacksonUtils.toJson(portalPosition);
                String oldJson = JacksonUtils.toJson(oldPortalPosition);
                //Map<String, Object> map = JacksonUtils.fromJson(json, HashMap.class);
                Map<String, Object> oldMap = JacksonUtils.fromJson(oldJson, HashMap.class);
                oldMap.putAll(portalPositionMap);

                String updateJson = JacksonUtils.toJson(oldMap);

                PortalComponentPosition updatePortalPosition = JacksonUtils.fromJson(updateJson, PortalComponentPosition.class);
                int result = this.update(updatePortalPosition);
                num += result;
            } else {
                String json = JacksonUtils.toJson(portalPositionMap);
                PortalComponentPosition portalPosition = JacksonUtils.fromJson(json, PortalComponentPosition.class);
                int result = this.save(portalPosition);
                num += result;
            }
        }
		return num;
	}

    @Override
    public int savePositionBatch(List<Map<String, Object>> objectList) throws Exception {
        int num = 0;
        for (Map<String,Object> portalPositionMap:objectList) {
            PortalComponentPosition oldPortalPosition = this.getObjectById((String) portalPositionMap.get("id"));
            if (oldPortalPosition != null) {
                String oldJson = JacksonUtils.toJson(oldPortalPosition);
                Map<String, Object> oldMap = JacksonUtils.fromJson(oldJson, HashMap.class);
                oldMap.putAll(portalPositionMap);

                String updateJson = JacksonUtils.toJson(oldMap);

                PortalComponentPosition updatePortalPosition = JacksonUtils.fromJson(updateJson, PortalComponentPosition.class);
                int result = this.update(updatePortalPosition);
                num += result;
            } else {
                String mapJson = JacksonUtils.toJson(portalPositionMap);
                PortalComponentPosition portalPosition = JacksonUtils.fromJson(mapJson,PortalComponentPosition.class);
                int result = this.save(portalPosition);
                num += result;
            }
        }
        return num;
    }
}
