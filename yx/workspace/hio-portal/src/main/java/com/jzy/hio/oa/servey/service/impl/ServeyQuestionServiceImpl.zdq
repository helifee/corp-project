package com.jzy.hio.oa.servey.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.beanutils.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.oa.servey.dto.ServeyQuestionDto;
import com.jzy.hio.oa.servey.entity.ServeyQuestion;
import com.jzy.hio.oa.servey.entity.ServeyQuestionOption;
import com.jzy.hio.oa.servey.entity.ServeySubQuestion;
import com.jzy.hio.oa.servey.mapper.ServeyQuestionDao;
import com.jzy.hio.oa.servey.mapper.ServeyQuestionOptionDao;
import com.jzy.hio.oa.servey.mapper.ServeySubQuestionDao;
import com.jzy.hio.oa.servey.service.ServeyQuestionService;

/**
 * @author admin
 * 
 * 
 */

@Service
public class ServeyQuestionServiceImpl extends  BaseServiceImpl<String,ServeyQuestion> implements ServeyQuestionService{
	

	@Autowired
	private ServeyQuestionDao serveyQuestionDao;
	
	@Autowired
	private ServeySubQuestionDao serveySubQuestionDao;
	
	@Autowired
	private ServeyQuestionOptionDao serveyQuestionOptionDao;

	public ServeyQuestionDto getServeyQuestionById(String id) throws Exception{
		ServeyQuestionDto serveyQuestionDto = new ServeyQuestionDto();
		ServeyQuestion serveyQuestion = serveyQuestionDao.selectByPrimaryKey(id);
		BeanUtils.copyProperties(serveyQuestionDto,serveyQuestion);
		Map<String,Object> map = new HashMap<String, Object>();
		map.put("question_id", id);
		map.put("sidx", "questionCode");
		List<ServeySubQuestion> serveySubQuestionList = serveySubQuestionDao.selectByExample(map);
		Map<String,Object> serveyQuestionOptionmap = new HashMap<String, Object>();
		serveyQuestionOptionmap.put("questionId", id);
		serveyQuestionOptionmap.put("sidx", "sequenceNum");
		List<ServeyQuestionOption> serveyQuestionOptionList = serveyQuestionOptionDao.selectByExample(serveyQuestionOptionmap);
		String problemIdText = "";
		String problemIdNums = "";
		for(int i = 0; i < serveySubQuestionList.size();i++){
			problemIdText += serveySubQuestionList.get(i).getQuestion_content() + "、";
			problemIdNums += serveySubQuestionList.get(i).getQuestionCode() + "、";
		}
		if(!problemIdText.equals("")){
			serveyQuestionDto.setProblemIdText(problemIdText.substring(0,problemIdText.length() - 1));
			serveyQuestionDto.setProblemIdNums(problemIdNums);
		}
		String optionIdText = "";
		String weightFactorInfos = "";
		String optionIdNums = "";
		for(int i = 0; i < serveyQuestionOptionList.size();i++){
			if(serveyQuestionOptionList.get(i).getOptionType() != null && serveyQuestionOptionList.get(i).getOptionType() == 1){
				serveyQuestionDto.setQuestionOther("1");
			}else{
				optionIdText += serveyQuestionOptionList.get(i).getDescription() + "、";
				optionIdNums += serveyQuestionOptionList.get(i).getSequenceNum() + "、";
			}
			Integer weightFactor = serveyQuestionOptionList.get(i).getWeightFactor();
			if(weightFactor != null){
				weightFactorInfos = weightFactorInfos + weightFactor + "、";
			}else{
				weightFactorInfos = weightFactorInfos + 0 + "、";
			}
			
		}
		if(!optionIdText.equals("")){
			serveyQuestionDto.setOptionIdText(optionIdText.substring(0,optionIdText.length() - 1));
			serveyQuestionDto.setOptionIdNums(optionIdNums);
		}
		if(!weightFactorInfos.equals("")){
			serveyQuestionDto.setWeightFactorInfos(weightFactorInfos.substring(0,weightFactorInfos.length() - 1));
		}
		return serveyQuestionDto;
	}
	
	public Page getServeyQuestionPage(Map map) throws Exception{
		Page page=new Page();
		List<Map<String,Object>> list = serveyQuestionDao.getServeyQuestionPage(map);
		Map<String,Map<String,Object>> strMap = new LinkedHashMap<String, Map<String,Object>>();
		if(list != null && list.size() > 0){
			for(int i = 0; i < list.size();i++){
				Map<String,Object> objMap = list.get(i);
				String questionId = "";
				if(objMap.get("id") != null){
					questionId = String.valueOf(objMap.get("id"));
				}
				Map<String,Object> questionMap =strMap.get(questionId); 
				if(questionMap != null){
					if(objMap.get("subQuestionId") != null){
						Map<Object,List<Object>> subQuestionMap = (Map<Object, List<Object>>) questionMap.get("subQuestionMap");
						if(subQuestionMap.get(objMap.get("optionId")) != null){
							Object questionContent = questionMap.get("questionContent") + "、" +objMap.get("questionContent");
							Object questionCode = questionMap.get("questionCode") + "、" +objMap.get("questionCode");
							questionMap.put("questionContent", questionContent);
							questionMap.put("questionCode", questionCode);
						}
					}
					if(objMap.get("optionId") != null){
						Map<Object,List<Object>> optionMap = (Map<Object, List<Object>>) questionMap.get("optionMap");
						if(optionMap.get(objMap.get("subQuestionId")) != null){
							if(objMap.get("optionType") != null && String.valueOf(objMap.get("optionType")).equals("1")){
								questionMap.put("questionOther", "1");
							}else{
								Object sequenceNum = questionMap.get("sequenceNum") + "、" +objMap.get("sequenceNum");
								Object description = questionMap.get("description") + "、" +objMap.get("description");
								Object weightFactor = questionMap.get("weightFactor") + "、" +objMap.get("weightFactor");
								questionMap.put("sequenceNum", sequenceNum);
								questionMap.put("description", description);
								questionMap.put("weightFactor", weightFactor);
							}
						}
					}
					strMap.put(questionId, questionMap);
				}else{
					questionMap = objMap;
					Map<Object,List<Object>> subQuestionMap = new HashMap<Object, List<Object>>();
					Map<Object,List<Object>> optionMap = new HashMap<Object, List<Object>>();
					if(objMap.get("subQuestionId") != null){
						List<Object> subQuestionList = new ArrayList<Object>();
						subQuestionList.add(objMap.get("questionContent"));
						subQuestionMap.put(objMap.get("optionId"), subQuestionList);
						questionMap.put("subQuestionMap", subQuestionMap);
					}
					if(objMap.get("optionId") != null){
						List<Object> optionList = new ArrayList<Object>();
						optionList.add(objMap.get("description"));
						optionMap.put(objMap.get("subQuestionId"), optionList);
						questionMap.put("optionMap", optionMap);
					}
					questionMap.put("questionOther", "0");
					strMap.put(questionId, questionMap);
				}
			}
		}
		
		List<Map<String,Object>> valueList = new ArrayList<Map<String,Object>>();
		
		for (String key : strMap.keySet()) {
			Map<String,Object> m = strMap.get(key);
			m.remove("subQuestionMap");
			m.remove("optionMap");
			valueList.add(m);
		}
		
		Integer count = serveyQuestionDao.getServeyQuestionCount(map);
		page.setLimit((Integer) map.get("limit") );
		page.setList(valueList);
		page.setStart((Integer) map.get("start"));
		page.setTotal(count);
		return page;
	}
	
	public static void main(String[] args) {
		Map<Object, Object> m = new LinkedHashMap<Object, Object>();
		m.put(null, "1");
		System.out.println(m.get(null));
	}

}
