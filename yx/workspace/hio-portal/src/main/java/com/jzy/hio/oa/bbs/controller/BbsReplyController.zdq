package com.jzy.hio.oa.bbs.controller;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.oa.bbs.entity.BbsReply;
import com.jzy.hio.oa.bbs.service.BbsReplyService;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.tools.login.LoginUtils;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;


/**
 * 回复（帖子回复）控制层
 * @author admin
 *
 */
@RestController
@RequestMapping("/bbs/reply")
@Api(tags = {"回复（帖子回复）相关接口"})
public class BbsReplyController extends ResponseModel {

	private static Logger log = LoggerFactory.getLogger(BbsReplyController.class);
	
	@Autowired
	private BbsReplyService bbsReplyService;
	/**
	 * 根据Id获取业务对象
	 * 
	 * @param id  业务对象主键
	 * 
	 * @return     业务对象
	 */
	@ApiOperation(value = "根据Id获取业务对象",notes = "根据Id获取业务对象")
	@ApiImplicitParam(name = "id",value = "id",required = true,dataType = "String",paramType = "path")
	@RequestMapping(value="/get/{id}",method= RequestMethod.GET)
	public MessageResult get(@PathVariable("id")  String id){
		try {
			BbsReply bbsReply = bbsReplyService.getObjectById(id);
			return getSuccessResultModel(bbsReply);
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
		
		/*MessageResult result=new MessageResult();
		try {
			String dubboResultInfo=bbsReplyDtoServiceCustomer.getBeanById(getUserJson(), "{\"id\":\""+id+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				Map resultMap = JacksonUtils.fromJson (dubboServiceResultInfo.getResult(),Map.class);
				result.setResult(resultMap);
				result.setSuccess(dubboServiceResultInfo.isSucess ());
				result.setMsg(dubboServiceResultInfo.getMsg());
			}else{
				result.setSuccess(dubboServiceResultInfo.isSucess ());
				result.setMsg(dubboServiceResultInfo.getMsg ());
				result.setCode (ErrorInfoCode.SYSTEM_ERROR.getValue ());
			}
		} catch (Exception e) {
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
			result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return result;*/
	}

	/**
	 * 根据Id获取业务对象
	 *
	 * @param id  业务对象主键
	 *
	 * @return     业务对象
	 */
	@ApiOperation(value = "根据Id获取业务对象",notes = "根据Id获取业务对象")
	@ApiImplicitParam(name = "id",value = "id",required = true,dataType = "String",paramType = "path")
	@RequestMapping(value="/quote/{id}",method= RequestMethod.POST)
	public MessageResult quote(@PathVariable("id")  String id){
		try {
			Map beanMap = bbsReplyService.getBeanById(id);
			return getSuccessResultModel(beanMap);
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
		
		/*MessageResult result=new MessageResult();
		try {
			String dubboResultInfo=bbsReplyDtoServiceCustomer.getBeanById(getUserJson(), JacksonUtils.toJson (map));
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				Map resultMap = JacksonUtils.fromJson (dubboServiceResultInfo.getResult(),Map.class);
				result.setResult(resultMap);
				result.setSuccess(dubboServiceResultInfo.isSucess ());
				result.setMsg(dubboServiceResultInfo.getMsg());
			}else{
				result.setSuccess(dubboServiceResultInfo.isSucess ());
				result.setMsg(dubboServiceResultInfo.getMsg ());
				result.setCode (ErrorInfoCode.SYSTEM_ERROR.getValue ());
			}
		} catch (Exception e) {
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
			result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return result;*/
	}
	/**
	 * 返回分页对象
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "返回分页对象",notes = "返回分页对象")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "map",value = "limit query",required = true,dataType = "Map")})
	@RequestMapping(value="/page", method={RequestMethod.POST}, consumes="application/json")
	public MessageResult page(@RequestBody Map<String,Object> map){
		try {
			Page page = bbsReplyService.getPage(map);
			return getSuccessResultModel(page);
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
		
		/*MessageResult result=new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {
		    String dubboResultInfo=bbsReplyDtoServiceCustomer.getPage(getUserJson(), paramaterJson);
		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				PageBeanInfo pageInfo=JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
				result.setResult(pageInfo);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {
		    log.error("调用page方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
			result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return result;*/
	}
	/**
	 * 返回符合条件的列表
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "返回符合条件的列表",notes = "返回符合条件的列表")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "bbsReply",dataType = "String",value = "condition query",required = true)})
	@RequestMapping(value="/queryList", method={RequestMethod.POST}, consumes="application/json")
	public MessageResult queryList(@RequestBody BbsReply bbsReply){
		try {
			List<BbsReply> list = bbsReplyService.queryList(bbsReply);
			return  getSuccessResultModel(list); 
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
		
		/*MessageResult result=new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			String dubboResultInfo=bbsReplyDtoServiceCustomer.queryList(getUserJson(), paramaterJson);
		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		    if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				List<BbsReplyDto> list=JacksonUtils.fromJson(resultInfo, ArrayList.class, BbsReplyDto.class);
				result.setResult(list);
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
		    }else{
		    	result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
		    }
			
		} catch (Exception e) {
			log.error("调用queryList方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
			result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return result;*/
	}


	/**
	 * 保存实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "保存实体对象",notes = "保存实体对象")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "bbsReply",value = "save",required = true,dataType = "String")})
	@RequestMapping(value="/save",method=RequestMethod.POST, consumes="application/json")
	public MessageResult save(@RequestBody BbsReply bbsReply){
		try {
			int save = bbsReplyService.save(bbsReply);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.SAVESUCCESS.getMsg());
			successResultModel.setResult(save);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.SAVEERROR.getMsg());
		}
		
		/*MessageResult result=new MessageResult();
		try {
			String saveJson= JacksonUtils.toJson(t);
			String dubboResultInfo=bbsReplyDtoServiceCustomer.save(getUserJson(), saveJson);
		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		    if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				BbsReplyDto bbsReplyDto=JacksonUtils.fromJson(resultInfo, BbsReplyDto.class);
				result.setResult(bbsReplyDto);
				result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
				result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
		    }else{
		    	result.setSuccess(MessageInfo.SAVEERROR.isResult());
				result.setMsg(dubboServiceResultInfo.getMsg ());
				result.setCode (dubboServiceResultInfo.getCode ());
		    }
		} catch (Exception e) {
				result.setSuccess(MessageInfo.SAVEERROR.isResult());
				result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
				result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return result;*/
	}
	
	/**
	 * 删除实体对象
	 * @param id
	 * @return
	 */
	@ApiOperation(value = "删除实体对象",notes = "删除实体对象")
	@ApiImplicitParams(@ApiImplicitParam(name = "id",value = "id",required = true,dataType = "String",paramType = "path"))
	@RequestMapping(value="/delete/{id}",method=RequestMethod.DELETE)
	public MessageResult delete(@PathVariable("id")  String id){
		try {
			int deleteObjectById = bbsReplyService.deleteObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deleteObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
		
		/*MessageResult result=new MessageResult();
		try {
			String dubboResultInfo=bbsReplyDtoServiceCustomer.deleteObjectById(getUserJson(), "{\"id\":\""+id+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				BbsReplyDto bbsReplyDto=JacksonUtils.fromJson(resultInfo, BbsReplyDto.class);
				result.setResult(bbsReplyDto);
				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.DELETEERROR.isResult());
				result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {
		    log.error("调用delete方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.DELETEERROR.isResult());
			result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
			result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		
		return result;*/
	}
	
	
	/**
	 * 删除实体对象
	 * @param ids
	 * @return
	 */
	@ApiOperation(value = "删除实体对象",notes = "删除实体对象")
	@ApiImplicitParams(@ApiImplicitParam(name = "ids",value = "ids",required = true,dataType = "String",paramType = "path"))
	@RequestMapping(value="/deleteBatch/{ids}",method=RequestMethod.DELETE)
	public MessageResult deleteBatch(@PathVariable("ids")  String ids){
		try {
			List<String> deleteMethod =  Arrays.asList(ids.split(","));
			int count = bbsReplyService.deleteAllObjectByIds(deleteMethod);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(count);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
		
		/*MessageResult result=new MessageResult();
		try {
			String dubboResultInfo=bbsReplyDtoServiceCustomer.deleteAllObjectByIds(getUserJson(), "{\"id\":\""+ids+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				BbsReplyDto bbsReplyDto=JacksonUtils.fromJson(resultInfo, BbsReplyDto.class);
				result.setResult(bbsReplyDto);
				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.DELETEERROR.isResult());
				result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {
		    log.error("调用delete方法:  【参数"+ids+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.DELETEERROR.isResult());
			result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
			result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		
		return result;*/
	}
	
	/**
	 * 修改修改实体对象
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "修改修改实体对象",notes = "修改修改实体对象")
	@ApiImplicitParams(@ApiImplicitParam(name = "id",value = "id",required = true,dataType = "String",paramType = "path"))
	@RequestMapping(value="/update/{id}",method=RequestMethod.POST,consumes="application/json")
	public MessageResult update(@PathVariable("id")  String id, @RequestBody Map<String,Object> map){
		try {
			BbsReply bbsReply = bbsReplyService.getObjectById(id);
			String json = JacksonUtils.toJson(bbsReply);
			Map<String,Object> oldMap= JacksonUtils.fromJson(json, HashMap.class);
			oldMap.putAll(map);
			String updateJson= JacksonUtils.toJson(oldMap);
			BbsReply fromJson = JacksonUtils.fromJson(updateJson, BbsReply.class);
			int updateCount = bbsReplyService.update(fromJson);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.UPDATESUCCESS.getMsg());
			successResultModel.setResult(updateCount);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.UPDATEERROR.getMsg());
		}
		
		/*MessageResult result=new MessageResult();
		BbsReplyDto bbsReplyDto=null;
		try {
			String dubboResultInfo=bbsReplyDtoServiceCustomer.getObjectById(getUserJson(), "{\"id\":\""+id+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				 String resultInfo= dubboServiceResultInfo.getResult();
				 Map<String,Object> oldMap=JacksonUtils.fromJson(resultInfo, HashMap.class);
				 oldMap.putAll(map);
				 String updateJson= JacksonUtils.toJson(oldMap);
				 String updateDubboResultInfo=bbsReplyDtoServiceCustomer.update(getUserJson(), updateJson);
				 DubboServiceResultInfo updateDubboServiceResultInfo= JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
				 if(updateDubboServiceResultInfo.isSucess()){
					 Integer i=JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class);
					 result.setResult(i);
					 result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
					 result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
				 }else{
					 result.setSuccess(updateDubboServiceResultInfo.isSucess ());
					 result.setMsg(updateDubboServiceResultInfo.getMsg());
					 result.setCode (updateDubboServiceResultInfo.getCode ());
				 }
			}else{
				 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				 result.setMsg("不存在更新的对象");
			}
		} catch (Exception e) {
			    result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
				result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());

		}
		return result;*/
	}

	/**
	 * 伪删除实体对象
	 * @param id
	 * @return
	 */
	@ApiOperation(value = "伪删除实体对象",notes = "伪删除实体对象")
	@ApiImplicitParams(@ApiImplicitParam(name = "id",value = "id",required = true,dataType = "String",paramType = "path"))
	@RequestMapping(value="/deletePseudo/{id}",method= RequestMethod.DELETE)
	public MessageResult deletePseudo(@PathVariable("id")  String id){
		try {
			int deletePseudoObjectById = bbsReplyService.deletePseudoObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deletePseudoObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return  getSuccessResultModel(MessageInfo.DELETEERROR.getMsg());
		}
		/*MessageResult result=new MessageResult();
		try {
			String dubboResultInfo=bbsReplyDtoServiceCustomer.deletePseudoObjectById(getUserJson(), "{\"id\":\""+id+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				BbsReplyDto bbsReplyDto=JacksonUtils.fromJson(resultInfo, BbsReplyDto.class);
				result.setResult(bbsReplyDto);
				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.DELETEERROR.isResult());
				result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {
		    log.error("调用deletePseudo方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.DELETEERROR.isResult());
			result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
			result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		
		return result;*/
	}
	
	
	/**
	 * 伪删除实体对象
	 * @param ids
	 * @return
	 */
	@ApiOperation(value = "伪删除实体对象",notes = "伪删除实体对象")
	@ApiImplicitParams(@ApiImplicitParam(name = "ids",value = "ids",required = true,dataType = "String",paramType = "path"))
	@RequestMapping(value="/deletePseudoBatch/{ids}",method= RequestMethod.DELETE)
	public MessageResult deletePseudoBatch(@PathVariable("ids")  String ids){
		try {
			String[] split = ids.split(",");
			List<String> asList = Arrays.asList(split);
			int deletePseudoObjectById = bbsReplyService.deletePseudoAllObjectByIds(asList);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deletePseudoObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return  getSuccessResultModel(MessageInfo.DELETEERROR.getMsg());
		}
		
		/*MessageResult result=new MessageResult();
		try {
			String dubboResultInfo=bbsReplyDtoServiceCustomer.deletePseudoAllObjectByIds(getUserJson(), "{\"id\":\""+ids+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String resultInfo= dubboServiceResultInfo.getResult();
				BbsReplyDto bbsReplyDto=JacksonUtils.fromJson(resultInfo, BbsReplyDto.class);
				result.setResult(bbsReplyDto);
				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
			}else{
				result.setSuccess(MessageInfo.DELETEERROR.isResult());
				result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
			}
		} catch (Exception e) {
		    log.error("调用deletePseudoBatch方法:  【参数"+ids+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.DELETEERROR.isResult());
			result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
			result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		
		return result;*/
	}


	/**
	 * 修改修改实体对象
	 * @param id
	 * @return
	 */
	@ApiOperation(value = "修改修改实体对象",notes = "修改修改实体对象")
	@ApiImplicitParams(@ApiImplicitParam(name = "id",value = "id",required = true,dataType = "String",paramType = "path"))
	@RequestMapping(value="/praise/{id}",method=RequestMethod.POST,consumes="application/json")
	public MessageResult praise(@PathVariable("id")  String id){
		try {
			String updateResultInfo=bbsReplyService.updatePraiseNum(getUserJson(), id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.UPDATESUCCESS.getMsg());
			successResultModel.setResult(updateResultInfo);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.UPDATEERROR.getMsg());
		}
		
		
		/*MessageResult result=new MessageResult();
		try {
				String updateDubboResultInfo=bbsReplyDtoServiceCustomer.updatePraiseNum(getUserJson(),  "{\"id\":\""+id+"\"}");
				DubboServiceResultInfo updateDubboServiceResultInfo= JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
				if(updateDubboServiceResultInfo.isSucess()){
					Integer i=JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class);
					result.setResult(i);
					result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
					result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
				}else{
					result.setSuccess(updateDubboServiceResultInfo.isSucess ());
					result.setMsg(updateDubboServiceResultInfo.getMsg ());
					result.setResult (updateDubboServiceResultInfo.getResult ());
				}
		} catch (Exception e) {
				result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
				result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());

		}
		return result;*/
	}

	/**
	 * 修改修改实体对象
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "修改修改实体对象",notes = "修改修改实体对象")
	@ApiImplicitParams(@ApiImplicitParam(name = "id",value = "id",required = true,dataType = "String",paramType = "path"))
	@RequestMapping(value="/updateStatus/{id}",method=RequestMethod.POST, consumes="application/json")
	public MessageResult updateStatus(@PathVariable("id")  String id, @RequestBody Map<String,Object> map){
		try {
			BbsReply bbsReply = bbsReplyService.getObjectById(id);
			String json = JacksonUtils.toJson(bbsReply);
			Map<String,Object> oldMap= JacksonUtils.fromJson(json, HashMap.class);
			oldMap.putAll(map);
			String updateJson= JacksonUtils.toJson(oldMap);
			String updateResultInfo = bbsReplyService.updateState(updateJson);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.UPDATESUCCESS.getMsg());
			successResultModel.setResult(updateResultInfo);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.UPDATEERROR.getMsg());
		}
		
		/*MessageResult result=new MessageResult();
		try {
			String dubboResultInfo=bbsReplyDtoServiceCustomer.getObjectById(getUserJson(), "{\"id\":\""+id+"\"}");
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				String updateJson= JacksonUtils.toJson(map);
				String updateDubboResultInfo=bbsReplyDtoServiceCustomer.updateStatus(getUserJson(), updateJson);
				DubboServiceResultInfo updateDubboServiceResultInfo= JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
					result.setSuccess(updateDubboServiceResultInfo.isSucess ());
					result.setMsg(updateDubboServiceResultInfo.getMsg());
					result.setResult (updateDubboServiceResultInfo.getResult ());
			}else{
				result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				result.setMsg("不存在更新的对象");
				result.setCode (ErrorInfoCode.NULL_ERROR.getValue ());
			}
		} catch (Exception e) {
				result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
				result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return result;*/
	}
	
	private String getUserJson() {
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();

		String userJson = JacksonUtils.toJson(userBeanInfo);
		return userJson;
	}
}
