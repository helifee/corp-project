package com.jzy.hio.oa.portal.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.base.utils.IDGenerator;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.OpeLogInfo;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.oa.portal.dto.PortalPageDto;
import com.jzy.hio.oa.portal.entity.PortalPage;
import com.jzy.hio.oa.portal.service.PortalPageService;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.tools.login.LoginUtils;

/**
 * 站点表控制层
 *
 * @author admin
 */
@Controller
@RequestMapping("/portal/portalPage")
public class PortalPageController extends BaseController<PortalPageService> {

	@Autowired
	private PortalPageService portalPageService;

	/**
	 *
	 * @return
	 */
	@RequestMapping(value = "/getPortalWithPermision", method = RequestMethod.GET)
	@ResponseBody
	public MessageResult getPortalWithPermision() {
		MessageResult result = new MessageResult();
		SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
		try {
			Map<String, Object> paramMap = JacksonUtils.fromJson(userInfo, HashMap.class);
			PortalPage portalPage = portalPageService.getPortalWithPermision(paramMap);
			result.setResult(handle(portalPage), "获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			log.error("获取对象失败!" + e.getMessage());
			result.setError("获取对象失败!");
		}
		return result;
	}

	/**
	 *
	 * @return
	 */
	@RequestMapping(value = "/getPortalListWithPermision", method = RequestMethod.GET)
	@ResponseBody
	public MessageResult getPortalListWithPermision() {
		MessageResult result = new MessageResult();
		SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
		try {
			Map<String, Object> paramMap = JacksonUtils.fromJson(userInfo, HashMap.class);
			List<PortalPage> list = portalPageService.getPortalListWithPermision(paramMap);
			result.setResult(handle(list), "获取对象成功!");
		} catch (Exception e) {
			log.error("获取对象失败!" + e.getMessage());
			result.setError("获取对象失败!");
		}
		return result;
	}

	/**
	 * 界面里用的id是originPortalPageId的值 <br/>
	 * 
	 * @author coffee 2018年2月7日下午7:07:48<br/>
	 * 
	 * @param list
	 */
	private Object handle(Object obj) {
//		List<PortalPage> list = new ArrayList<>();
//		if (obj instanceof List) {
//			list.addAll((List<PortalPage>) obj);
//		}
//		if (obj instanceof PortalPage) {
//			list.add((PortalPage) obj);
//		}
//		for (PortalPage page : list) {
//			page.setId(page.getOriginPortalPageId());
//		}
		return obj;
	}

	/**
	 * 复制站点实体对象
	 *
	 * @param t
	 *            站点实体对象复制
	 * @return
	 */
	@RequestMapping(value = "/copy/{id}", method = RequestMethod.PUT, consumes = "application/json")
	@ResponseBody
	@OpeLogInfo(node = "门户复制", sysCode = "OA")
	public MessageResult SaveAndCopy(@PathVariable("id") String id, @RequestBody PortalPageDto t) {
		MessageResult result = new MessageResult();
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("originId", id);
		paramMap.put("portalPage", t);
		String saveJson = JacksonUtils.toJson(paramMap);
		try {
			Map<String, Object> saveParamMap = JacksonUtils.fromJson(saveJson, HashMap.class);
			String preId = (String) saveParamMap.get("originId");
			Map map = (Map) saveParamMap.get("portalPage");
			String mapJson = JacksonUtils.toJson(map);

			PortalPage portalPage = JacksonUtils.fromJson(mapJson, PortalPage.class);
			if (portalPage.getId() == null) {
				portalPage.setId(IDGenerator.getUUID());
			}
			Map<String, Object> map2 = new HashMap<String, Object>();
			// paramMap.put("id",portalPage.getId());
			map2.put("portalPageCode", portalPage.getPortalPageCode());
			List<PortalPage> oldPortalPages = portalPageService.queryListByExample(map2);
			// 校验站点编码唯一性：根据站点编码查询数据库，
			// 如果数据库存在记录则对比查询结果中第一条数据的id与当前存储id是否一致，
			// 如果一致则表明是数据更新，否则表明站点编码已被其他站点使用
			if (oldPortalPages == null || oldPortalPages.size() == 0 || oldPortalPages.get(0).getId().equals(portalPage.getId())) {
				// 复制站点及站点position
				portalPageService.saveAndCopy(portalPage, preId);
				result.setResult(portalPage, "保存对象成功!");
			} else {
				result.setError("站点编码已存在，请更换!");
			}
		} catch (Exception e) {
			log.error("保存对象失败!" + e.getMessage());
			result.setError("保存对象失败!");
		}
		return result;
	}

	/**
	 * 更新门户启用禁用状态
	 *
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/updatePortalStatus", method = RequestMethod.POST, consumes = "application/json")
	@ResponseBody
	@OpeLogInfo(sysCode = "OA", node = "门户状态更新")
	public MessageResult updatePortalStatus(@RequestBody Map<String, Object> paramMap) {
		MessageResult result = new MessageResult();
		Boolean status = (Boolean) paramMap.get("status");
		try {
			List<PortalPage> portalPageList = portalPageService.updatePortalStatus(paramMap);
			String message = (status != null && status) ? "门户启用成功！" : "门户禁用成功";
			result.setResult(portalPageList, message);
		} catch (Exception e) {
			log.error("状态更新失败!" + e.getMessage());
			result.setError("状态更新失败!");
		}
		return result;
	}
}
