package com.jzy.hio.oa.office.dto.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.jzy.hio.base.utils.DubboServiceResultInfo;
import com.jzy.hio.base.utils.ErrorInfoCode;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.hio.base.utils.LoginUtils;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.SecurityOrganizationDto;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.oa.content.dto.ContentChildTreeData;
import com.jzy.hio.oa.office.dto.OfficeHouseDto;
import com.jzy.hio.oa.office.dto.service.OfficeHouseDtoServiceCustomer;
import com.jzy.hio.oa.office.entity.OfficeHouse;
import com.jzy.hio.oa.office.service.OfficeHouseService;
import com.jzy.hio.oa.office.service.OfficeInfoService;
import com.jzy.hio.oa.sys.utils.UserType;

/**
 * @author wangw
 *
 *
 */
@Service
public class OfficeHouseDtoServiceProducer implements OfficeHouseDtoServiceCustomer {
	private static Logger log = Logger.getLogger(OfficeHouseDtoServiceProducer.class);
	@Autowired
	private OfficeHouseService officeHouseService;
//	@Autowired
//	private OrgnazationService orgnazationOutServiceCustomer;
	@Autowired
	private OfficeInfoService officeInfoService;

	public String save(String userInfo, String saveJson) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			OfficeHouse officeHouse = JacksonUtils.fromJson(saveJson, OfficeHouse.class);
			officeHouse.setDelflag(false);
			OfficeHouse bean = officeHouseService.getObjectById(officeHouse.getParentNodeId());
			if (null == bean) {
				officeHouse.setPrefixId(officeHouse.getId());
			} else {
				officeHouse.setPrefixId(bean.getPrefixId() + "-" + officeHouse.getId());
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("parentId", officeHouse.getParentNodeId());
			String sortNum = getRulerSortNum(userInfo, map);
			officeHouse.setSortNumber(sortNum);
			officeHouseService.save(officeHouse);
			info.setResult(JacksonUtils.toJson(officeHouse));
			info.setSucess(true);
			info.setMsg("保存对象成功!");
		} catch (Exception e) {
			// e.printStackTrace();
			log.error("保存对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("保存对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getRulerSortNum(String userinfo, Map<String, Object> paramater) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		String sort = "";
		try {
			List<Map<String, Object>> list = officeHouseService.getSortNum(paramater);
			if (list.size() > 0) {
				String sortNumber = (String) list.get(0).get("SORT");
				if (sortNumber.indexOf("-") >= 0) {
					int dotIndex = sortNumber.lastIndexOf('-');
					sort = sortNumber.substring(0, dotIndex + 1)
							+ String.format("%04d", Integer.valueOf(sortNumber.substring(dotIndex + 1)) + 1);
				} else {
					sort = "$"
							+ String.format("%04d", Integer.valueOf(sortNumber.substring(1, sortNumber.length())) + 1);
				}
			} else {
				OfficeHouse bean = officeHouseService.getObjectById((String) paramater.get("parentId"));
				if (null == bean) {
					sort = "$" + String.format("%04d", 1);
				} else {
					String sortNumber = bean.getSortNumber();
					sort = sortNumber + "-" + String.format("%04d", 1);
					;
				}
			}
			info.setResult(String.valueOf(sort));
			info.setSucess(true);
			info.setMsg("获取对象成功!");
		} catch (Exception e) {
			log.error("获取对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("获取对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return sort;
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			OfficeHouse officeHouse = JacksonUtils.fromJson(updateJson, OfficeHouse.class);
			int result = officeHouseService.update(officeHouse);
			info.setResult(JacksonUtils.toJson(result));
			info.setSucess(true);
			info.setMsg("更新对象成功!");
		} catch (Exception e) {
			log.error("更新对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("更新对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			OfficeHouse officeHouse = JacksonUtils.fromJson(deleteJson, OfficeHouse.class);
			int result = officeHouseService.deleteObjectById(officeHouse.getId());
			info.setResult(JacksonUtils.toJson(result));
			info.setSucess(true);
			info.setMsg("删除对象成功!");
		} catch (Exception e) {
			log.error("更新对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("删除更新对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			if (StringUtils.isNotBlank(deleteJsonList)) {
				Map map = JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				List<String> list = Arrays.asList(map.get("id").toString().split(","));
				int result = officeHouseService.deleteAllObjectByIds(list);
				info.setResult(JacksonUtils.toJson(result));
				info.setSucess(true);
				info.setMsg("删除对象成功!");
			}
		} catch (Exception e) {
			log.error("删除对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("删除更新对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			OfficeHouse officeHouse = JacksonUtils.fromJson(getJson, OfficeHouse.class);
			OfficeHouse result = officeHouseService.getObjectById(officeHouse.getId());
			OfficeHouseDto officeHouseDto = JacksonUtils.fromJson(JacksonUtils.toJson(result), OfficeHouseDto.class);
			if (null != officeHouseDto.getParentNodeId() && !"".equals(officeHouseDto.getParentNodeId())) {
				OfficeHouse pBean = officeHouseService.getObjectById(officeHouseDto.getParentNodeId());
				if (null != pBean) {
					officeHouseDto.setTypeParentName(pBean.getTypeName());
				}
			}
			info.setResult(JacksonUtils.toJson(officeHouseDto));
			info.setSucess(true);
			info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			log.error("获取对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("获取对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			if (StringUtils.isNotBlank(paramater)) {
				Map map = JacksonUtils.fromJson(paramater, HashMap.class);
				Page page = officeHouseService.getPage(map, (Integer) map.get("start"), (Integer) map.get("limit"));
				info.setResult(JacksonUtils.toJson(page));
				info.setSucess(true);
				info.setMsg("获取分页对象成功!");
			} else {
				Page page = officeHouseService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
				info.setSucess(true);
				info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			log.error("获取分页对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("获取分页对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			if (StringUtils.isNotBlank(paramater)) {
				Map map = JacksonUtils.fromJson(paramater, HashMap.class);
				List list = officeHouseService.queryListByExample(map);
				info.setResult(JacksonUtils.toJson(list));
				info.setSucess(true);
				info.setMsg("获取列表对象成功!");
			} else {
				List list = officeHouseService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
				info.setSucess(true);
				info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			log.error("获取列表对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("获取列表对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo, String deleteJsonList) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			if (StringUtils.isNotBlank(deleteJsonList)) {
				@SuppressWarnings("unchecked")
				Map<String, Object> map = JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				List<String> list = Arrays.asList(map.get("id").toString().split(","));
				Map<String, Object> pMap = new HashMap<String, Object>();
				Boolean bl = false;
				for (String str : list) {
					pMap.clear();
					pMap.put("stockHouseId", str);
					List<Map<String, String>> officeInfoList = officeInfoService.getOfficeInfoCount(pMap);
					if (officeInfoList.size() > 0) {
						info.setResult(ErrorInfoCode.SYSTEM_ERROR.getValue());
						info.setSucess(false);
						info.setMsg(officeInfoList.get(0).get("typeName") + "分类下存在档案，不能删除!");
						bl = true;
						break;
					}
				}
				if (!bl) {
					int result = officeHouseService.deletePseudoAllObjectByIds(list);
					info.setResult(JacksonUtils.toJson(result));
					info.setSucess(true);
					info.setMsg("删除对象成功!");
				}
			} else {
				info.setResult(ErrorInfoCode.PARAMETER_ERROR.getValue());
				info.setSucess(false);
				info.setMsg("请求参数为空!");
			}
		} catch (Exception e) {
			// e.printStackTrace();
			log.error("删除对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("删除更新对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryListOfficeHouse(String userInfo, String id) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			if (StringUtils.isNotBlank(id)) {
				Map map = JacksonUtils.fromJson(id, HashMap.class);
				String ids = (String) map.get("id");
				List<OfficeHouse> houseList = officeHouseService.queryListOfficeHouse(ids);
				info.setResult(JacksonUtils.toJson(houseList));
				info.setSucess(true);
				info.setMsg("获取用品分类树成功!");
			}
		} catch (Exception e) {
			log.error("删除对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("删除更新对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getOfficeHouseTreeById(String userInfo, String id) {
		// TODO Auto-generated method stub
		// 实例返回结果集对象
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			// 获取用户对象
			SecurityUserBeanInfo user = LoginUtils.getSecurityUserBeanInfo();
			// 公司
			List<SecurityOrganizationDto> comList = new ArrayList<SecurityOrganizationDto>();

			Map<String, Object> pMap = new HashMap<String, Object>();
			pMap.put("delflag", false);
			pMap.put("sidx", "sort_number");
			pMap.put("state", "1");
			List<OfficeHouse> officeHouseList = officeHouseService.queryListByExample(pMap);

			List<ContentChildTreeData> officeHouseResultList = new ArrayList<ContentChildTreeData>();

			Boolean isAdministrators = user.getSecurityUserDto().getType().equals(UserType.ORDINARY.getCode()) ? false
					: true;
			if (!isAdministrators) {// 判断是否管理员
				comList.add(user.getSecurityDirectCompanyDto());
			} else {
				Map<String, Object> oMap = new HashMap<String, Object>();
				oMap.put("isLeaf", true);
//				String oJson = orgnazationOutServiceCustomer.getAllCompanyList(userInfo, JacksonUtils.toJson(oMap));
//				DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(oJson,
//						DubboServiceResultInfo.class);
//				if (dubboServiceResultInfo.isSucess()) {
//					String resultInfo = dubboServiceResultInfo.getResult();
//					List<OrgnazationDto> olist = JacksonUtils.fromJson(resultInfo, ArrayList.class,
//							OrgnazationDto.class);
//					if (olist.size() > 0) {
//						for (OrgnazationDto org : olist) {
//							SecurityOrganizationDto securityDirectCompanyDto = new SecurityOrganizationDto();
//							securityDirectCompanyDto.setId(org.getId());
//							securityDirectCompanyDto.setName(org.getName());
//							securityDirectCompanyDto.setParentId(org.getParentId());
//							comList.add(securityDirectCompanyDto);
//						}
//					}
//				}
//				List<Orgnazation> list = orgnazationOutServiceCustomer.queryListByExample(oMap);
//				if (list.size() > 0) {
//					for (Orgnazation org : list) {
//						SecurityOrganizationDto securityDirectCompanyDto = new SecurityOrganizationDto();
//						securityDirectCompanyDto.setId(org.getId());
//						securityDirectCompanyDto.setName(org.getName());
//						securityDirectCompanyDto.setParentId(org.getParentId());
//						comList.add(securityDirectCompanyDto);
//					}
//				}
			}
			for (SecurityOrganizationDto securityOrganization : comList) {// 挂接组织机构
				ContentChildTreeData contentChildTreeData = new ContentChildTreeData();
				contentChildTreeData.setName(securityOrganization.getName());
				contentChildTreeData.setParentName("");

				contentChildTreeData.setpId("");
				contentChildTreeData.setId(securityOrganization.getId());
				contentChildTreeData.setParentId(securityOrganization.getParentId());

				contentChildTreeData.setOwnedCompany(securityOrganization.getId());
				officeHouseResultList.add(contentChildTreeData);

				if (officeHouseList.size() > 0) {
					for (OfficeHouse officeHouseTemp : officeHouseList) {
						ContentChildTreeData bean = new ContentChildTreeData();
						bean.setName(officeHouseTemp.getTypeName());
						bean.setParentName("");
						bean.setpId(officeHouseTemp.getId());
						bean.setId(securityOrganization.getId() + "@" + officeHouseTemp.getId());
						bean.setParentId(officeHouseTemp.getParentNodeId().equals("0") ? securityOrganization.getId()
								: securityOrganization.getId() + "@" + officeHouseTemp.getParentNodeId());

						bean.setOwnedCompany(securityOrganization.getId());
						officeHouseResultList.add(bean);
					}
				}
			}
			info.setResult(JacksonUtils.toJson(officeHouseResultList));
			info.setSucess(true);
			info.setMsg("获取知识目录结构树成功!");
		} catch (Exception e) {
			log.error("获取知识目录结构树失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("获取知识目录结构树失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.jzy.hio.oa.office.dto.service.OfficeHouseDtoServiceCustomer#
	 * getOfficeHousepage(java.lang.String, java.lang.String)
	 */
	@Override
	public String getOfficeHousepage(String userJson, String paramater) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			if (StringUtils.isNotBlank(paramater)) {
				Map<String, Object> map = JacksonUtils.fromJson(paramater, HashMap.class);
				Page page = officeHouseService.getOfficeHousepage(map);
				info.setResult(JacksonUtils.toJson(page));
				info.setSucess(true);
				info.setMsg("获取分页对象成功!");
			} else {
				Page page = officeHouseService.getOfficeHousepage(new HashMap<String, Object>());
				info.setResult(JacksonUtils.toJson(page));
				info.setSucess(true);
				info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			log.error("获取分页对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("获取分页对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryTreeList(String userJson, String paramaterJson) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			@SuppressWarnings("unchecked")
			Map<String, Object> map = JacksonUtils.fromJson(paramaterJson, HashMap.class);
			List<OfficeHouse> list = officeHouseService.queryListByExample(map);
			if (list != null && !list.isEmpty()) {
				info.setResult(JacksonUtils.toJson(list));
				info.setSucess(true);
				info.setMsg("获取树对象成功!");
			} else {
				info.setResult(ErrorInfoCode.NULL_ERROR.getValue());
				info.setSucess(false);
				info.setMsg("树对象为空!");
			}
		} catch (Exception e) {
			log.error("获取列表对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("获取列表对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryTreeGridList(String userJson, String paramaterJson) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			@SuppressWarnings("unchecked")
			Map<String, Object> map = JacksonUtils.fromJson(paramaterJson, HashMap.class);
			List<OfficeHouseDto> list = officeHouseService.queryTreeList(map);
			if (list != null && !list.isEmpty()) {
				info.setResult(JacksonUtils.toJson(list));
				info.setSucess(true);
				info.setMsg("获取树对象成功!");
			} else {
				info.setResult(ErrorInfoCode.NULL_ERROR.getValue());
				info.setSucess(false);
				info.setMsg("树对象为空!");
			}
		} catch (Exception e) {
			log.error("获取列表对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("获取列表对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String updateStatus(String userJson, String paramaterJson) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			@SuppressWarnings("unchecked")
			Map<String, Object> map = JacksonUtils.fromJson(paramaterJson, HashMap.class);
			OfficeHouse entryBean = officeHouseService.getObjectById((String) map.get("id"));
			entryBean.setState(map.get("state").toString());
			int result = officeHouseService.updateStatus(entryBean, (Boolean) map.get("isRelation"));
			info.setResult(JacksonUtils.toJson(result));
			info.setSucess(true);
			info.setMsg("更新状态成功!");
		} catch (Exception e) {
			log.error("更新状态失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("更新状态失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String updateSort(String userJson, String updateJson, Map<String, Object> map) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			OfficeHouse ruler = JacksonUtils.fromJson(updateJson, OfficeHouse.class);
			OfficeHouse object = officeHouseService.getObjectById(ruler.getId());
			String result = officeHouseService.updateSort(object, map);
			if (!"".equals(result)) {
				info.setResult(JacksonUtils.toJson(result));
				info.setSucess(true);
				info.setMsg(result);
			} else {
				info.setSucess(false);
				info.setMsg("更新对象失败!");
			}
		} catch (Exception e) {
			log.error("更新对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("更新对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String updateEntity(String userJson, String updateJson, String oldJson) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			Map<String, Object> map = JacksonUtils.fromJson(updateJson, HashMap.class);
			Map<String, Object> oldMap = JacksonUtils.fromJson(oldJson, HashMap.class);
			// 判断是否更改父级节点 是则重新获取序号
			if (!oldMap.get("parentNodeId").equals(map.get("parentNodeId"))) {
				Map<String, Object> pMap = new HashMap<String, Object>();
				pMap.put("parentId", map.get("parentNodeId"));
				String sortNum = getRulerSortNum(userJson, pMap);
				map.put("sortNumber", sortNum);

				OfficeHouse object = officeHouseService.getObjectById((String) map.get("parentNodeId"));
				String prefixId = "";
				if (null != object) {
					prefixId = object.getPrefixId() + "-" + (String) map.get("parentNodeId");
				} else {
					prefixId = (String) map.get("parentNodeId");
				}
				map.put("prefixId", prefixId);
				// 修改排序
				pMap.clear();
				pMap.put("oldSort", oldMap.get("sortNumber"));
				pMap.put("newSort", sortNum);
				pMap.put("prefixId", oldMap.get("prefixId"));
				officeHouseService.updateAllNodes(pMap);
				// 修改排序id
				pMap.clear();
				pMap.put("oldSort", oldMap.get("prefixId"));
				pMap.put("newSort", prefixId);
				pMap.put("prefixId", oldMap.get("prefixId"));
				officeHouseService.updateAllPrefixId(pMap);
			}
			oldMap.putAll(map);
			OfficeHouse entry = JacksonUtils.fromJson(JacksonUtils.toJson(oldMap), OfficeHouse.class);
			int result = officeHouseService.updateBatchStatus(entry);
			info.setResult(JacksonUtils.toJson(result));
			info.setSucess(true);
			info.setMsg("更新对象成功!");
		} catch (Exception e) {
			log.error("更新对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("更新对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getOfficeHouseTree(String userJson, String id) {
		// 实例返回结果集对象
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			Map<String, Object> map = new HashMap<String, Object>();
			List<ContentChildTreeData> officeHouseResultList = new ArrayList<ContentChildTreeData>();
			map.put("delflag", false);
			map.put("sidx", "sort_number");
			map.put("state", "1");
			List<OfficeHouse> officeHouseChildList = officeHouseService.queryListByExample(map);
			if (officeHouseChildList.size() > 0) {
				for (OfficeHouse officeHouseTemp : officeHouseChildList) {
					ContentChildTreeData contentChildTreeData = new ContentChildTreeData();
					contentChildTreeData.setpId(officeHouseTemp.getParentNodeId());
					contentChildTreeData.setName(officeHouseTemp.getTypeName());
					contentChildTreeData.setId(officeHouseTemp.getId());
					contentChildTreeData.setParentId(officeHouseTemp.getParentNodeId());
					officeHouseResultList.add(contentChildTreeData);
				}
			}
			info.setResult(JacksonUtils.toJson(officeHouseResultList));
			info.setSucess(true);
			info.setMsg("获取知识目录结构树成功!");
		} catch (Exception e) {
			log.error("获取知识目录结构树失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("获取知识目录结构树失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

}