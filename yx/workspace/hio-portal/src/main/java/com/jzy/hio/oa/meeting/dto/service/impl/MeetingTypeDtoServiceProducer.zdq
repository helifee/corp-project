package com.jzy.hio.oa.meeting.dto.service.impl;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.jzy.hio.base.utils.DubboServiceResultInfo;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.oa.content.dto.ContentChildTreeData;
import com.jzy.hio.oa.meeting.dto.MeetingTypeDto;
import com.jzy.hio.oa.meeting.dto.service.MeetingTypeDtoServiceCustomer;
import com.jzy.hio.oa.meeting.entity.MeetingType;
import com.jzy.hio.oa.meeting.service.MeetingTypeService;
import com.jzy.hio.oa.util.SortUtil;

/**
 * @author wangw
 *
 *
 */
@Service
public class MeetingTypeDtoServiceProducer implements MeetingTypeDtoServiceCustomer{
	private static Logger log = Logger.getLogger(MeetingTypeDtoServiceProducer.class);
	@Autowired
	private MeetingTypeService meetingTypeService;

	public String save(String userInfo, String saveJson){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   MeetingType meetingType=JacksonUtils.fromJson(saveJson, MeetingType.class);
			   int result = meetingTypeService.saveMeetingType(meetingType);
			   info.setResult(JacksonUtils.toJson(meetingType));
			   if(result==5){
				   info.setSucess(false);
				   info.setMsg("保存对象失败，数据库已存在"); 
			   }else{
				   info.setSucess(true);
				   info.setMsg("保存对象成功!");
			   }
			} catch (Exception e) {
			 log.error("保存对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("保存对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   MeetingType meetingType=JacksonUtils.fromJson(updateJson, MeetingType.class);
			   //int result=   meetingTypeService.update(meetingType);
			   int result=  meetingTypeService.updateMeetingType(meetingType);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   MeetingType meetingType=JacksonUtils.fromJson(deleteJson, MeetingType.class);
			   int result= meetingTypeService.deleteObjectById(meetingType.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= meetingTypeService.deleteAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	 {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			MeetingType meetingType=JacksonUtils.fromJson(getJson, MeetingType.class);
			MeetingType	result = meetingTypeService.getObjectById(meetingType.getId());
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				Page page=meetingTypeService.getPage(map, (Integer)map.get("start"),  (Integer)map.get("limit"));
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=meetingTypeService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				//获取是否查询全部的标志
				if(map.get("all") != null && !"".equals(map.get("all"))){
					
				}else{
					//查询会议类别的时候，过滤到已经禁用的类别
					map.put("status", "1");
				}
				List list=meetingTypeService.queryListByExample(map);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=meetingTypeService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson) {
		  DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   MeetingType meetingType=JacksonUtils.fromJson(deleteJson, MeetingType.class);
			   MeetingType object= meetingTypeService.getObjectById(meetingType.getId());
			   int result=   meetingTypeService.deletePseudoMeetingTypeById(meetingType.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo,
			String deleteJsonList) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getTypetree(String userinfo, String paramaterJson) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
        try {
	        Map<String,Object> map = JacksonUtils.fromJson(paramaterJson, HashMap.class);
	        String status = (String) map.get("status");
	        List<MeetingTypeDto> list=meetingTypeService.queryMeetingType(status);
	     	info.setResult(JacksonUtils.toJson(list));
		    info.setSucess(true);
		    info.setMsg("获取树对象成功!");
			System.out.println(JacksonUtils.toJson(list));
		}catch(Exception e){
			log.error("获取树对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取树对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String updateStatus(String userinfo, String updateJson) {
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   MeetingType meetingType=JacksonUtils.fromJson(updateJson, MeetingType.class);
			   MeetingType object= meetingTypeService.getObjectById(meetingType.getId());
			   int result=  meetingTypeService.updateStatus(object);
			   info.setMsg("更新对象成功");
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}
	
	@Override
	public String updateChildStatusByParentIdNew(String userinfo, String updateJson) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   MeetingType meetingType=JacksonUtils.fromJson(updateJson, MeetingType.class);
			   MeetingType object= meetingTypeService.getObjectById(meetingType.getId());
			   int result=  meetingTypeService.updateChildStatusByParentIdNew(object);
			   info.setMsg("更新对象成功");
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getMeetingTypeTree(String userInfo, String parm) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            if (StringUtils.isNotBlank(parm)) {
                List<ContentChildTreeData> list = meetingTypeService.getMeetingTypeTree(parm);
                SortUtil.sortList(list, "createDate", true);
                info.setResult(JacksonUtils.toJson(list));
                info.setSucess(true);
                info.setMsg("获取列表对象成功!");
            } else {
                info.setResult(null);
                info.setSucess(false);
                info.setMsg("获取列表对象失败，大类id为空!");
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取列表对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取列表对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
	}

	@Override
	public String judgeChildIdByTargetId(String userInfo, Map map)
			throws Exception {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            if (map.get("parentId") != null && !"".equals(map.get("parentId")) && map.get("childId") != null && !"".equals(map.get("childId"))) {
                int exitNumber = meetingTypeService.judgeChildIdByTargetId(map);
                info.setResult(JacksonUtils.toJson(exitNumber));
                info.setSucess(true);
                info.setMsg("获取列表对象成功!");
            } else {
                info.setResult(null);
                info.setSucess(false);
                info.setMsg("获取列表对象失败，参数可能存在空，请查看!");
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取列表对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取列表对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
	}

	@Override
	public String judgeRepeatObject(String userInfo, String parm)
			throws Exception {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   MeetingType meetingType=JacksonUtils.fromJson(parm, MeetingType.class);
			   int result = meetingTypeService.judgeRepeatObject(meetingType);
			   info.setResult(String.valueOf(result));
			   info.setSucess(true);
			   info.setMsg("保存对象成功!");
			} catch (Exception e) {
			 log.error("保存对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("保存对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String updateBatchFlow(String userInfo, String paramater) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			Map<String,Object> map = JacksonUtils.fromJson(paramater, HashMap.class);
			if(!map.containsKey("list")||map.get("list")==null||StringUtils.isBlank(map.get("list").toString())){
				info.setResult(null);
                info.setSucess(false);
                info.setMsg("参数不可为空!");
			}else{
				Integer i = meetingTypeService.updateBatchFlow(map);
				info.setResult(JacksonUtils.toJson(i));
				info.setSucess(true);
				info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			log.error("获取列表对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("获取列表对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	


}
