package com.jzy.hio.oa.content.controller;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.oa.content.entity.OaEnumProperties;
import com.jzy.hio.oa.content.service.OaEnumPropertiesService;
import com.jzy.tools.data.JacksonUtils;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

/**
 * 扩展属性枚举管理表控制层
 * 
 * @author admin
 *
 */
@RestController
@Api(tags = { "扩展属性枚举管理相关接口" })
@RequestMapping("/content/oaEnumProperties")
public class OaEnumPropertiesController extends ResponseModel {

	private static Logger log = LoggerFactory.getLogger(OaEnumPropertiesController.class);

	@Autowired
	private OaEnumPropertiesService oaEnumPropertiesService;

	/**
	 * 根据Id获取业务对象
	 *
	 * @param id
	 *            业务对象主键
	 *
	 * @return 业务对象
	 */
	@ApiOperation(value = "根据Id获取扩展属性枚举详情", notes = "根据Id获取扩展属性枚举详情")
	@ApiImplicitParams(@ApiImplicitParam(name = "id", value = "扩展属性枚举信息id", required = true, dataType = "String", paramType = "path"))
	@RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
	public MessageResult get(@PathVariable("id") String id) {
		try {
			OaEnumProperties oaEnumProperties = oaEnumPropertiesService.getObjectById(id);
			return getSuccessResultModel(oaEnumProperties);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel();
		}

		/*
		 * MessageResult result=new MessageResult(); try { String dubboResultInfo=oaEnumPropertiesDtoServiceCustomer.getObjectById(getUserJson(), "{\"id\":\""+id+"\"}");
		 * DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if(dubboServiceResultInfo.isSucess()){ String
		 * resultInfo= dubboServiceResultInfo.getResult(); OaEnumPropertiesDto oaEnumPropertiesDto=JacksonUtils.fromJson(resultInfo, OaEnumPropertiesDto.class);
		 * result.setResult(oaEnumPropertiesDto); result.setSuccess(MessageInfo.GETSUCCESS.isResult()); result.setMsg(MessageInfo.GETSUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.GETERROR.isResult()); result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】"); } } catch (Exception
		 * e) { //e.printStackTrace(); log.error("调用get方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】"); result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】"); } return result;
		 */
	}

	/**
	 * 返回分页对象
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value = "查询扩展属性枚举信息分页列表", notes = "查询扩展属性枚举信息分页列表")
	@ApiImplicitParam(name = "map", value = "", required = true, dataType = "JSON")
	@RequestMapping(value = "/page", method = { RequestMethod.POST }, consumes = "application/json")
	public MessageResult page(@RequestBody Map<String, Object> map) {
		try {
			Page page = oaEnumPropertiesService.getPage(map);
			return getSuccessResultModel(page);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel();
		}

		/*
		 * MessageResult result=new MessageResult(); String paramaterJson = JacksonUtils.toJson(map); try { String
		 * dubboResultInfo=oaEnumPropertiesDtoServiceCustomer.getPage(getUserJson(), paramaterJson); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if(dubboServiceResultInfo.isSucess()){ String resultInfo= dubboServiceResultInfo.getResult();
		 * PageBeanInfo pageInfo=JacksonUtils.fromJson(resultInfo, PageBeanInfo.class); result.setResult(pageInfo); result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		 * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); }else{ result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】"); } } catch (Exception e) { //e.printStackTrace();
		 * log.error("调用page方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】"); result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】"); } return result;
		 */
	}

	/**
	 * 返回符合条件的列表
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value = "查询条件返回符合条件列表", notes = "查询条件返回符合条件列表")
	@ApiImplicitParams({ @ApiImplicitParam(paramType = "body", name = "oaEnumProperties", value = "condition query", required = true, dataType = "String") })
	@RequestMapping(value = "/queryList", method = { RequestMethod.POST }, consumes = "application/json")
	public MessageResult queryList(@RequestBody OaEnumProperties oaEnumProperties) {
		try {
			List<OaEnumProperties> list = oaEnumPropertiesService.queryList(oaEnumProperties);
			return getSuccessResultModel(list);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel();
		}

		/*
		 * MessageResult result=new MessageResult(); String paramaterJson = JacksonUtils.toJson(map); try { String
		 * dubboResultInfo=oaEnumPropertiesDtoServiceCustomer.queryList(getUserJson(), paramaterJson); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if(dubboServiceResultInfo.isSucess()){ String resultInfo= dubboServiceResultInfo.getResult();
		 * List<OaEnumPropertiesDto> list=JacksonUtils.fromJson(resultInfo, ArrayList.class,OaEnumPropertiesDto.class); result.setResult(list);
		 * result.setSuccess(MessageInfo.GETSUCCESS.isResult()); result.setMsg(MessageInfo.GETSUCCESS.getMsg()); }else{ result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】"); }
		 * 
		 * } catch (Exception e) { //e.printStackTrace(); log.error("调用queryList方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
		 * result.setSuccess(MessageInfo.GETERROR.isResult()); result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】"); } return result;
		 */
	}

	/**
	 * 保存实体对象
	 * 
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "保存oaEnumProperties实体", notes = "保存oaEnumProperties实体")
	@ApiImplicitParams({ @ApiImplicitParam(paramType = "body", name = "oaEnumProperties", value = "save", required = true, dataType = "String") })
	@RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
	public MessageResult save(@RequestBody OaEnumProperties oaEnumProperties) {
		try {
			int save = oaEnumPropertiesService.save(oaEnumProperties);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.SAVESUCCESS.getMsg());
			successResultModel.setResult(save);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.SAVEERROR.getMsg());
		}

		/*
		 * MessageResult result=new MessageResult(); try { String saveJson= JacksonUtils.toJson(t); String dubboResultInfo=oaEnumPropertiesDtoServiceCustomer.save(getUserJson(),
		 * saveJson); DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if(dubboServiceResultInfo.isSucess()){
		 * String resultInfo= dubboServiceResultInfo.getResult(); OaEnumPropertiesDto oaEnumPropertiesDto=JacksonUtils.fromJson(resultInfo, OaEnumPropertiesDto.class);
		 * result.setResult(oaEnumPropertiesDto); result.setSuccess(MessageInfo.SAVESUCCESS.isResult()); result.setMsg(MessageInfo.SAVESUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.SAVEERROR.isResult()); result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】"); } } catch (Exception
		 * e) { try { //e.printStackTrace(); ObjectMapper mapper = new ObjectMapper(); String paramJson = mapper.writeValueAsString(t);
		 * log.error("调用save方法:  【参数"+paramJson+"】======"+"【"+e.getMessage()+"】"); result.setSuccess(MessageInfo.SAVEERROR.isResult());
		 * result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+e.getMessage()+"】"); } catch (JsonProcessingException e1) { // TODO Auto-generated catch block //e1.printStackTrace(); }
		 * 
		 * } return result;
		 */
	}

	/**
	 * 删除实体对象
	 * 
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "删除oaEnumProperties实体", notes = "删除oaEnumProperties实体")
	@ApiImplicitParam(name = "id", value = "oaEnumProperties id", required = true, dataType = "String", paramType = "path")
	@RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
	public MessageResult delete(@PathVariable("id") String id) {
		try {
			int deleteObjectById = oaEnumPropertiesService.deleteObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deleteObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}

		/*
		 * MessageResult result=new MessageResult(); try { String dubboResultInfo=oaEnumPropertiesDtoServiceCustomer.deleteObjectById(getUserJson(), "{\"id\":\""+id+"\"}");
		 * DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if(dubboServiceResultInfo.isSucess()){ String
		 * resultInfo= dubboServiceResultInfo.getResult(); OaEnumPropertiesDto oaEnumPropertiesDto=JacksonUtils.fromJson(resultInfo, OaEnumPropertiesDto.class);
		 * result.setResult(oaEnumPropertiesDto); result.setSuccess(MessageInfo.DELETESUCCESS.isResult()); result.setMsg(MessageInfo.DELETESUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.DELETEERROR.isResult()); result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】"); } } catch
		 * (Exception e) { //e.printStackTrace(); log.error("调用delete方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】"); result.setSuccess(MessageInfo.DELETEERROR.isResult());
		 * result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】"); }
		 * 
		 * return result;
		 */
	}

	/**
	 * 删除实体对象
	 * 
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "删除oaEnumProperties实体", notes = "删除oaEnumProperties实体")
	@ApiImplicitParam(name = "ids", value = "oaEnumProperties ids", required = true, dataType = "String", paramType = "path")
	@RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
	public MessageResult deleteBatch(@PathVariable("ids") String ids) {
		try {
			List<String> deleteMethod = Arrays.asList(ids.split(","));
			int count = oaEnumPropertiesService.deleteAllObjectByIds(deleteMethod);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(count);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}

		/*
		 * MessageResult result=new MessageResult(); try { String dubboResultInfo=oaEnumPropertiesDtoServiceCustomer.deleteAllObjectByIds(getUserJson(), "{\"id\":\""+ids+"\"}");
		 * DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if(dubboServiceResultInfo.isSucess()){ String
		 * resultInfo= dubboServiceResultInfo.getResult(); OaEnumPropertiesDto oaEnumPropertiesDto=JacksonUtils.fromJson(resultInfo, OaEnumPropertiesDto.class);
		 * result.setResult(oaEnumPropertiesDto); result.setSuccess(MessageInfo.DELETESUCCESS.isResult()); result.setMsg(MessageInfo.DELETESUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.DELETEERROR.isResult()); result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】"); } } catch
		 * (Exception e) { //e.printStackTrace(); log.error("调用delete方法:  【参数"+ids+"】======"+"【"+e.getMessage()+"】"); result.setSuccess(MessageInfo.DELETEERROR.isResult());
		 * result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】"); }
		 * 
		 * return result;
		 */
	}

	/**
	 * 修改修改实体对象
	 * 
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "修改oaEnumProperties实体", notes = "修改oaEnumProperties实体")
	@ApiImplicitParam(name = "id", value = "oaEnumProperties id", required = true, dataType = "String", paramType = "path")
	@RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
	public MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
		try {
			OaEnumProperties oaEnumProperties = oaEnumPropertiesService.getObjectById(id);
			String json = JacksonUtils.toJson(oaEnumProperties);
			Map<String, Object> oldMap = JacksonUtils.fromJson(json, HashMap.class);
			oldMap.putAll(map);
			String updateJson = JacksonUtils.toJson(oldMap);
			OaEnumProperties fromJson = JacksonUtils.fromJson(updateJson, OaEnumProperties.class);
			int updateCount = oaEnumPropertiesService.update(fromJson);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.UPDATESUCCESS.getMsg());
			successResultModel.setResult(updateCount);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.UPDATEERROR.getMsg());
		}

		/*
		 * MessageResult result=new MessageResult(); OaEnumPropertiesDto oaEnumPropertiesDto=null; try { String
		 * dubboResultInfo=oaEnumPropertiesDtoServiceCustomer.getObjectById(getUserJson(), "{\"id\":\""+id+"\"}"); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if(dubboServiceResultInfo.isSucess()){ String resultInfo= dubboServiceResultInfo.getResult();
		 * Map<String,Object> oldMap=JacksonUtils.fromJson(resultInfo, HashMap.class); oldMap.putAll(map); String updateJson= JacksonUtils.toJson(oldMap); String
		 * updateDubboResultInfo=oaEnumPropertiesDtoServiceCustomer.update(getUserJson(), updateJson); DubboServiceResultInfo updateDubboServiceResultInfo=
		 * JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class); if(updateDubboServiceResultInfo.isSucess()){ Integer
		 * i=JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class); result.setResult(i); result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
		 * result.setMsg(MessageInfo.UPDATESUCCESS.getMsg()); }else{ result.setSuccess(MessageInfo.UPDATEERROR.isResult());
		 * result.setMsg(updateDubboServiceResultInfo.getMsg()+"【"+updateDubboServiceResultInfo.getExceptionMsg()+"】"); } }else{
		 * result.setSuccess(MessageInfo.UPDATEERROR.isResult()); result.setMsg("不存在更新的对象"); } } catch (Exception e) { try{ //e.printStackTrace(); ObjectMapper mapper = new
		 * ObjectMapper(); String paramJson = mapper.writeValueAsString(oaEnumPropertiesDto); log.error("调用update方法:  【参数"+id+","+paramJson+"】======"+"【"+e.getMessage()+"】");
		 * result.setSuccess(MessageInfo.UPDATEERROR.isResult()); result.setMsg(MessageInfo.UPDATEERROR.getMsg()+"【"+e.getMessage()+"】"); }catch (JsonProcessingException e1) { //
		 * TODO Auto-generated catch block //e1.printStackTrace(); }
		 * 
		 * } return result;
		 */
	}

	/**
	 * 伪删除实体对象
	 * 
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "伪删除实体对象oaEnumProperties实体", notes = "伪删除实体对象oaEnumProperties实体")
	@ApiImplicitParams({ @ApiImplicitParam(paramType = "path", dataType = "String", name = "id", value = "id", required = true) })
	@RequestMapping(value = "/deletePseudo/{id}", method = RequestMethod.DELETE)
	public MessageResult deletePseudo(@PathVariable("id") String id) {
		try {
			int deletePseudoObjectById = oaEnumPropertiesService.deletePseudoObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deletePseudoObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getSuccessResultModel(MessageInfo.DELETEERROR.getMsg());
		}

		/*
		 * MessageResult result=new MessageResult(); try { String dubboResultInfo=oaEnumPropertiesDtoServiceCustomer.deletePseudoObjectById(getUserJson(), "{\"id\":\""+id+"\"}");
		 * DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if(dubboServiceResultInfo.isSucess()){ String
		 * resultInfo= dubboServiceResultInfo.getResult(); OaEnumPropertiesDto oaEnumPropertiesDto=JacksonUtils.fromJson(resultInfo, OaEnumPropertiesDto.class);
		 * result.setResult(oaEnumPropertiesDto); result.setSuccess(MessageInfo.DELETESUCCESS.isResult()); result.setMsg(MessageInfo.DELETESUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.DELETEERROR.isResult()); result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】"); } } catch
		 * (Exception e) { //e.printStackTrace(); log.error("调用deletePseudo方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】"); result.setSuccess(MessageInfo.DELETEERROR.isResult());
		 * result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】"); }
		 * 
		 * return result;
		 */
	}

	/**
	 * 伪删除实体对象
	 * 
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "伪删除实体对象oaEnumProperties实体多个", notes = "伪删除实体对象oaEnumProperties实体多个")
	@ApiImplicitParams({ @ApiImplicitParam(paramType = "path", dataType = "String", name = "ids", value = "ids", required = true) })
	@RequestMapping(value = "/deletePseudoBatch/{ids}", method = RequestMethod.DELETE)
	public MessageResult deletePseudoBatch(@PathVariable("ids") String ids) {
		try {
			String[] split = ids.split(",");
			List<String> asList = Arrays.asList(split);
			int deletePseudoObjectById = oaEnumPropertiesService.deletePseudoAllObjectByIds(asList);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deletePseudoObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return getSuccessResultModel(MessageInfo.DELETEERROR.getMsg());
		}

		/*
		 * MessageResult result=new MessageResult(); try { String dubboResultInfo=oaEnumPropertiesDtoServiceCustomer.deletePseudoAllObjectByIds(getUserJson(),
		 * "{\"id\":\""+ids+"\"}"); DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo= dubboServiceResultInfo.getResult(); OaEnumPropertiesDto oaEnumPropertiesDto=JacksonUtils.fromJson(resultInfo,
		 * OaEnumPropertiesDto.class); result.setResult(oaEnumPropertiesDto); result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
		 * result.setMsg(MessageInfo.DELETESUCCESS.getMsg()); }else{ result.setSuccess(MessageInfo.DELETEERROR.isResult());
		 * result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】"); } } catch (Exception e) { //e.printStackTrace();
		 * log.error("调用deletePseudoBatch方法:  【参数"+ids+"】======"+"【"+e.getMessage()+"】"); result.setSuccess(MessageInfo.DELETEERROR.isResult());
		 * result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】"); }
		 * 
		 * return result;
		 */
	}
}
