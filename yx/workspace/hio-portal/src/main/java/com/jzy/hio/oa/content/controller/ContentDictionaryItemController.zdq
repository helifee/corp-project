package com.jzy.hio.oa.content.controller;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.oa.content.entity.ContentDictionaryItem;
import com.jzy.hio.oa.content.service.ContentDictionaryItemService;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.tools.login.LoginUtils;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;


/**
 * 数据字典项控制层
 *
 * @author admin
 */
@RestController
@Api(tags = {"数据字典项相关接口"})
@RequestMapping("/dictionary/contentDictionaryItem")
public class ContentDictionaryItemController extends ResponseModel {

	private static Logger log = LoggerFactory.getLogger(ContentDictionaryItemController.class);

    @Autowired
    private ContentDictionaryItemService contentDictionaryItemService;

    /**
     * 根据Id获取业务对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @ApiOperation(value = "根据Id获取数据字典项详情",notes = "根据Id获取数据字典项详情")
   	@ApiImplicitParams(@ApiImplicitParam(name = "id",value = "数据字典信息id",required = true,dataType = "String",paramType = "path"))
    @RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
    public MessageResult get(@PathVariable("id") String id) {
    	try {
    		ContentDictionaryItem contentDictionaryItem = contentDictionaryItemService.getObjectById(id);
			return getSuccessResultModel(contentDictionaryItem);
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
    	
    	
        /*MessageResult result = new MessageResult();
        try {
            String dubboResultInfo = contentDictionaryItemDtoServiceCustomer.getObjectById(getUserJson(), "{\"id\":\"" + id + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                ContentDictionaryItemDto contentDictionaryItemDto = JacksonUtils.fromJson(resultInfo, ContentDictionaryItemDto.class);
                result.setResult(contentDictionaryItemDto);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }


    /**
     * 返回分页对象
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "查询数据字典项信息分页列表",notes = "查询数据字典项信息分页列表")
   	@ApiImplicitParam(name = "map",value = "",required = true,dataType = "JSON")
    @RequestMapping(value = "/page", method = {RequestMethod.POST}, consumes = "application/json")
    public MessageResult page(@RequestBody Map<String, Object> map) {
    	try {
			Page page = contentDictionaryItemService.getPage(map);
			return getSuccessResultModel(page);
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
    	
        /*MessageResult result = new MessageResult();
        String paramaterJson = JacksonUtils.toJson(map);
        try {
            String dubboResultInfo = contentDictionaryItemDtoServiceCustomer.queryVaguePage(getUserJson(), paramaterJson);
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                PageBeanInfo pageInfo = JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
                result.setResult(pageInfo);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用page方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }

    /**
     * 返回符合条件的列表
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "查询条件返回符合条件列表",notes = "查询条件返回符合条件列表")
   	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "contentDictionaryItem",value = "condition query",required = true,dataType = "String")})
    @RequestMapping(value = "/queryList", method = {RequestMethod.POST}, consumes = "application/json")
    public MessageResult queryList(@RequestBody ContentDictionaryItem contentDictionaryItem) {
    	try {
			List<ContentDictionaryItem> list = contentDictionaryItemService.queryList(contentDictionaryItem);
			return  getSuccessResultModel(list); 
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
    	
        /*MessageResult result = new MessageResult();
        String paramaterJson = JacksonUtils.toJson(map);
        try {
            String dubboResultInfo = contentDictionaryItemDtoServiceCustomer.queryList(getUserJson(), paramaterJson);
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                List<ContentDictionaryItemDto> list = JacksonUtils.fromJson(resultInfo, ArrayList.class, ContentDictionaryItemDto.class);
                result.setResult(list);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }

        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用queryList方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }


    /**
     * 保存实体对象
     *
     * @param t
     * @return
     */
    @ApiOperation(value = "保存contentDictionaryItem实体",notes = "保存contentDictionaryItem实体")
   	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "contentDictionaryItem",value = "save",required = true,dataType = "String")})
    @RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
    public MessageResult save(@RequestBody ContentDictionaryItem contentDictionaryItem) {
    	try {
			int save = contentDictionaryItemService.save(contentDictionaryItem);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.SAVESUCCESS.getMsg());
			successResultModel.setResult(save);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.SAVEERROR.getMsg());
		}
    	
    	
        /*MessageResult result = new MessageResult();
        try {
            String saveJson = JacksonUtils.toJson(t);
            String dubboResultInfo = contentDictionaryItemDtoServiceCustomer.save(getUserJson(), saveJson);
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                ContentDictionaryItemDto contentDictionaryItemDto = JacksonUtils.fromJson(resultInfo, ContentDictionaryItemDto.class);
                result.setResult(contentDictionaryItemDto);
                result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
                result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.SAVEERROR.isResult());
                result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            try {
                //e.printStackTrace();
                ObjectMapper mapper = new ObjectMapper();
                String paramJson = mapper.writeValueAsString(t);
                log.error("调用save方法:  【参数" + paramJson + "】======" + "【" + e.getMessage() + "】");
                result.setSuccess(MessageInfo.SAVEERROR.isResult());
                result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + e.getMessage() + "】");
            } catch (JsonProcessingException e1) {
                // TODO Auto-generated catch block
                //e1.printStackTrace();
            }

        }
        return result;*/
    }

    /**
     * 删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "删除contentDictionaryItem实体",notes = "删除contentDictionaryItem实体")
	@ApiImplicitParam(name = "id",value = "contentDictionaryItem id",required = true,dataType = "String",paramType = "path")
    @RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
    public MessageResult delete(@PathVariable("id") String id) {
    	try {
			int deleteObjectById = contentDictionaryItemService.deleteObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deleteObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
    	
    	
        /*MessageResult result = new MessageResult();
        try {
            String dubboResultInfo = contentDictionaryItemDtoServiceCustomer.deleteObjectById(getUserJson(), "{\"id\":\"" + id + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                ContentDictionaryItemDto contentDictionaryItemDto = JacksonUtils.fromJson(resultInfo, ContentDictionaryItemDto.class);
                result.setResult(contentDictionaryItemDto);
                result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
                result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.DELETEERROR.isResult());
                result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用delete方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.DELETEERROR.isResult());
            result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
        }

        return result;*/
    }


    /**
     * 删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "删除contentDictionaryItem实体",notes = "删除contentDictionaryItem实体")
   	@ApiImplicitParam(name = "ids",value = "contentDictionaryItem ids",required = true,dataType = "String",paramType = "path")
    @RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
    public MessageResult deleteBatch(@PathVariable("ids") String ids) {
    	try {
			List<String> deleteMethod =  Arrays.asList(ids.split(","));
			int count = contentDictionaryItemService.deleteAllObjectByIds(deleteMethod);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(count);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
    	
    	
        /*MessageResult result = new MessageResult();
        try {
            String dubboResultInfo = contentDictionaryItemDtoServiceCustomer.deleteAllObjectByIds(getUserJson(), "{\"id\":\"" + ids + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                ContentDictionaryItemDto contentDictionaryItemDto = JacksonUtils.fromJson(resultInfo, ContentDictionaryItemDto.class);
                result.setResult(contentDictionaryItemDto);
                result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
                result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.DELETEERROR.isResult());
                result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用delete方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.DELETEERROR.isResult());
            result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
        }

        return result;*/
    }

    /**
     * 修改修改实体对象
     *
     * @param id
     * @param map
     * @return
     */
    @ApiOperation(value = "修改contentDictionaryItem实体",notes = "修改contentDictionaryItem实体")
   	@ApiImplicitParam(name = "id",value = "contentDictionaryItem id",required = true,dataType = "String",paramType = "path")
    @RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
    public MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
    	try {
    		ContentDictionaryItem contentDictionaryItem = contentDictionaryItemService.getObjectById(id);
			String json = JacksonUtils.toJson(contentDictionaryItem);
			Map<String,Object> oldMap= JacksonUtils.fromJson(json, HashMap.class);
			oldMap.putAll(map);
			String updateJson= JacksonUtils.toJson(oldMap);
			ContentDictionaryItem fromJson = JacksonUtils.fromJson(updateJson, ContentDictionaryItem.class);
			int updateCount = contentDictionaryItemService.update(fromJson);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.UPDATESUCCESS.getMsg());
			successResultModel.setResult(updateCount);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.UPDATEERROR.getMsg());
		}
    	
       /* MessageResult result = new MessageResult();
        ContentDictionaryItemDto contentDictionaryItemDto = null;
        try {
            String dubboResultInfo = contentDictionaryItemDtoServiceCustomer.getObjectById(getUserJson(), "{\"id\":\"" + id + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                Map<String, Object> oldMap = JacksonUtils.fromJson(resultInfo, HashMap.class);
                oldMap.putAll(map);
                String updateJson = JacksonUtils.toJson(oldMap);
                String updateDubboResultInfo = contentDictionaryItemDtoServiceCustomer.update(getUserJson(), updateJson);
                DubboServiceResultInfo updateDubboServiceResultInfo = JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
                if (updateDubboServiceResultInfo.isSucess()) {
                    Integer i = JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class);
                    result.setResult(i);
                    result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
                    result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
                } else {
                    result.setSuccess(MessageInfo.UPDATEERROR.isResult());
                    result.setMsg(updateDubboServiceResultInfo.getMsg() + "【" + updateDubboServiceResultInfo.getExceptionMsg() + "】");
                }
            } else {
                result.setSuccess(MessageInfo.UPDATEERROR.isResult());
                result.setMsg("不存在更新的对象");
            }
        } catch (Exception e) {
            try {
                //e.printStackTrace();
                ObjectMapper mapper = new ObjectMapper();
                String paramJson = mapper.writeValueAsString(contentDictionaryItemDto);
                log.error("调用update方法:  【参数" + id + "," + paramJson + "】======" + "【" + e.getMessage() + "】");
                result.setSuccess(MessageInfo.UPDATEERROR.isResult());
                result.setMsg(MessageInfo.UPDATEERROR.getMsg() + "【" + e.getMessage() + "】");
            } catch (JsonProcessingException e1) {
                // TODO Auto-generated catch block
                //e1.printStackTrace();
            }

        }
        return result;*/
    }

    /**
     * 伪删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "伪删除实体对象contentDictionaryItem实体",notes = "伪删除实体对象contentDictionaryItem实体")
    @ApiImplicitParams({@ApiImplicitParam(paramType="path",dataType = "String",name = "id",value = "id",required = true)})
    @RequestMapping(value = "/deletePseudo/{id}", method = RequestMethod.DELETE)
    public MessageResult deletePseudo(@PathVariable("id") String id) {
    	try {
			int deletePseudoObjectById = contentDictionaryItemService.deletePseudoObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deletePseudoObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return  getSuccessResultModel(MessageInfo.DELETEERROR.getMsg());
		}
    	
        /*MessageResult result = new MessageResult();
        try {
            String dubboResultInfo = contentDictionaryItemDtoServiceCustomer.deletePseudoObjectById(getUserJson(), "{\"id\":\"" + id + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                ContentDictionaryItemDto contentDictionaryItemDto = JacksonUtils.fromJson(resultInfo, ContentDictionaryItemDto.class);
                result.setResult(contentDictionaryItemDto);
                result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
                result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.DELETEERROR.isResult());
                result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用deletePseudo方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.DELETEERROR.isResult());
            result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
        }

        return result;*/
    }


    /**
     * 伪删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "伪删除实体对象contentDictionaryItem实体多个",notes = "伪删除实体对象contentDictionaryItem实体多个")
    @ApiImplicitParams({@ApiImplicitParam(paramType="path",dataType = "String",name = "ids",value = "ids",required = true)})
    @RequestMapping(value = "/deletePseudoBatch/{ids}", method = RequestMethod.DELETE)
    public MessageResult deletePseudoBatch(@PathVariable("ids") String ids) {
    	try {
			String[] split = ids.split(",");
			List<String> asList = Arrays.asList(split);
			int deletePseudoObjectById = contentDictionaryItemService.deletePseudoAllObjectByIds(asList);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deletePseudoObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return  getSuccessResultModel(MessageInfo.DELETEERROR.getMsg());
		}
    	
    	
        /*MessageResult result = new MessageResult();
        try {
            String dubboResultInfo = contentDictionaryItemDtoServiceCustomer.deletePseudoAllObjectByIds(getUserJson(), "{\"id\":\"" + ids + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                ContentDictionaryItemDto contentDictionaryItemDto = JacksonUtils.fromJson(resultInfo, ContentDictionaryItemDto.class);
                result.setResult(contentDictionaryItemDto);
                result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
                result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.DELETEERROR.isResult());
                result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用deletePseudoBatch方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.DELETEERROR.isResult());
            result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
        }

        return result;*/
    }

    /**
     * 根据数据字典名称和code获取该字典下面的枚举值
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "查询条件返回符合条件列表",notes = "查询条件返回符合条件列表")
    @ApiImplicitParam(name = "map",value = "",required = true,dataType = "JSON")
    @RequestMapping(value = "/queryListDictionaryItem", method = {RequestMethod.POST}, consumes = "application/json")
    public MessageResult queryListDictionaryItem(@RequestBody Map<String, Object> map) {
    	String paramaterJson = JacksonUtils.toJson(map);
    	try {
            List<ContentDictionaryItem> list = contentDictionaryItemService.queryListDictionaryItem(getUserJson(),paramaterJson);
            return  getSuccessResultModel(list); 
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
    	
       /* MessageResult result = new MessageResult();
        String paramaterJson = JacksonUtils.toJson(map);
        try {
            String dubboResultInfo = contentDictionaryItemDtoServiceCustomer.queryListDictionaryItem(getUserJson(), paramaterJson);
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                List<ContentDictionaryItemDto> list = JacksonUtils.fromJson(resultInfo, ArrayList.class, ContentDictionaryItemDto.class);
                result.setResult(list);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }

        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用queryList方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }

    private String getUserJson() {
        SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
        String userJson = JacksonUtils.toJson(userBeanInfo);
        return userJson;
    }

    /**
     * 保存所有对象
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "保存对象",notes = "保存对象")
    @ApiImplicitParam(name = "map",value = "",required = true,dataType = "JSON")
    @RequestMapping(value = "/saveAllDictionaryItem", method = RequestMethod.POST, consumes = "application/json")
    public MessageResult saveAllDictionaryItem(@RequestBody Map<String, Object> map) {
        try {
            List<ContentDictionaryItem> list = contentDictionaryItemService.saveAllDictionaryItem(map);
            return  getSuccessResultModel(list); 
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
    	
    	/*MessageResult result = new MessageResult();
        String paramaterJson = JacksonUtils.toJson(map);
        try {
    	
        /*MessageResult result = new MessageResult();
        try {
            //获取用户对象
            SecurityUserBeanInfo user = LoginUtils.getSecurityUserBeanInfo();
            //用户对象转json
            String userJson = JacksonUtils.toJson(user);
            String saveJson = JacksonUtils.toJson(map);
            String dubboResultInfo = contentDictionaryItemDtoServiceCustomer.saveAllDictionaryItem(userJson, saveJson);
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                List<ContentDictionaryItemDto> dictionaryItemList = JacksonUtils.fromJson(resultInfo, List.class,ContentDictionaryItemDto.class);
                result.setResult(dictionaryItemList);
                result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
                result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.SAVEERROR.isResult());
                result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            try {
                //e.printStackTrace();
                ObjectMapper mapper = new ObjectMapper();
                String paramJson = mapper.writeValueAsString(map);
                log.error("调用saveAllDictionaryItem方法:  【参数" + paramJson + "】======" + "【" + e.getMessage() + "】");
                result.setSuccess(MessageInfo.SAVEERROR.isResult());
                result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + e.getMessage() + "】");
            } catch (JsonProcessingException e1) {
                // TODO Auto-generated catch block
                //e1.printStackTrace();
            }

        }
        return result;*/
    }

}
