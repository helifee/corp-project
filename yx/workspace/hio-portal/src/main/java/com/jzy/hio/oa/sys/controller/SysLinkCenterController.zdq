package com.jzy.hio.oa.sys.controller;

import java.io.InputStream;
import java.io.PrintWriter;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.base.utils.DubboServiceResultInfo;
//import com.jzy.hio.oa.util.CompressImgUtil;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.oa.sys.dto.SysLinkCenterDto;
import com.jzy.hio.oa.sys.dto.service.SysLinkCenterDtoServiceCustomer;
import com.jzy.hio.oa.sys.entity.SysLinkCenter;
import com.jzy.hio.oa.sys.service.SysLinkCenterService;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.tools.login.LoginUtils;

/**
 * 链接中心表控制层
 * 
 * @author admin
 *
 */
@Controller
@RequestMapping("sys/sysLinkCenter")
public class SysLinkCenterController extends BaseController<SysLinkCenterService> {

	@Autowired
	private SysLinkCenterDtoServiceCustomer sysLinkCenterDtoServiceCustomer;
	@Autowired
	private SysLinkCenterService sysLinkCenterService;

	// 查询二维码数据
	@RequestMapping(value = "/getQRcode", method = RequestMethod.GET)
	public @ResponseBody MessageResult getQRcode() {
		MessageResult result = new MessageResult();
		try {
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userJson = JacksonUtils.toJson(userBeanInfo);

			DubboServiceResultInfo info = new DubboServiceResultInfo();
			try {
				SysLinkCenter sysLinkCenter = sysLinkCenterService.getQRcode();
				info.setResult(JacksonUtils.toJson(sysLinkCenter));
				info.setSucess(true);
				info.setMsg("获取对象成功!");
			} catch (Exception e) {
				// TODO Auto-generated catch block
				log.error("获取对象失败!" + e.getMessage());
				info.setSucess(false);
				info.setMsg("获取对象失败!");
				info.setExceptionMsg(e.getMessage());
			}

			if (info.isSucess()) {
				String resultInfo = info.getResult();
				SysLinkCenterDto sysLinkCenterDto = JacksonUtils.fromJson(resultInfo, SysLinkCenterDto.class);
				byte[] icon = sysLinkCenterDto.getIcon();
				byte[] icon2 = icon;
				if (icon != null && icon.length > 32 * 1024) {
					// icon2 = CompressImgUtil.compressImg2(icon,240,120);
				}
				sysLinkCenterDto.setIcon(icon2);
				result.setResult(sysLinkCenterDto, "获取对象成功!");
			} else {
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setError("获取对象失败!");
			}
		} catch (Exception e) {
			// e.printStackTrace();
			log.error("调用get方法:  ======" + "【" + e.getMessage() + "】");
			result.setError("获取对象失败!");
		}
		return result;
	}

	@RequestMapping(value = "/save", method = RequestMethod.POST)
	public void save(MultipartHttpServletRequest request, HttpServletResponse response) {
		PrintWriter pw = null;
		Boolean isReturn = false;
		try {
			response.setContentType("text/html;charset=UTF-8");
			pw = response.getWriter();
			MultipartFile uploadfile = request.getFile("icon");
			MessageResult result = new MessageResult();
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userJson = JacksonUtils.toJson(userBeanInfo);
			if (null != uploadfile) {
				long length = uploadfile.getSize();
				if (length > 1 * 1024 * 1024) {
					result.setSuccess(false);
					result.setMsg("图片尺寸不能大于1M");
					pw.print(JacksonUtils.toJson(result));
					pw.flush();
					isReturn = true;
				}
			}
			if (!isReturn) {
				String id = request.getParameter("id");
				String isDelPic = request.getParameter("isDelPic");
				String name = request.getParameter("name");
				String code = request.getParameter("code");
				String url = request.getParameter("url");
				String parentId = request.getParameter("parentId");

				String parentName = request.getParameter("parentName");
				String type = request.getParameter("type");
				String state = request.getParameter("state");
				String remark = request.getParameter("remark");

				byte[] headpic = {};
				if (null != uploadfile) {
					InputStream is = uploadfile.getInputStream();
					headpic = new byte[is.available()];
					is.read(headpic);
					is.close();
				}

				SysLinkCenterDto sysLinkCenterDto = new SysLinkCenterDto();
				sysLinkCenterDto.setCode(code);
				sysLinkCenterDto.setId(id);
				sysLinkCenterDto.setName(name);
				sysLinkCenterDto.setState(state);
				sysLinkCenterDto.setParentId(parentId);
				sysLinkCenterDto.setUrl(url);
				sysLinkCenterDto.setType(type);
				sysLinkCenterDto.setIcon(headpic);
				sysLinkCenterDto.setRemark(remark);
				sysLinkCenterDto.setDelflag(false);
				sysLinkCenterDto.setParentName(parentName);
				String saveJson = JacksonUtils.toJson(sysLinkCenterDto);

				DubboServiceResultInfo info = new DubboServiceResultInfo();
				try {
					SysLinkCenter sysLinkCenter = JacksonUtils.fromJson(saveJson, SysLinkCenter.class);
					int i = sysLinkCenterService.saveLinkCenter(sysLinkCenter);
					if (i == 5) {
						info.setSucess(false);
						info.setMsg("编码重复,保存失败");
					} else if (i == 6) {
						info.setSucess(false);
						info.setMsg("二维码链接只允许启用一个");
					} else {
						info.setResult(JacksonUtils.toJson(sysLinkCenter));
						info.setSucess(true);
						info.setMsg("保存对象成功!");
					}

				} catch (Exception e) {
					log.error("保存对象失败!" + e.getMessage());
					info.setSucess(false);
					info.setMsg("保存对象失败!");
					info.setExceptionMsg(e.getMessage());
				}

				if (info.isSucess()) {
					String resultInfo = info.getResult();
					SysLinkCenterDto sysLinkCenterDtoResult = JacksonUtils.fromJson(resultInfo, SysLinkCenterDto.class);
					result.setResult(sysLinkCenterDtoResult);
					result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
					result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
				} else {
					result.setSuccess(MessageInfo.SAVEERROR.isResult());
					result.setMsg(info.getMsg());
				}
				pw.print(JacksonUtils.toJson(result));
				pw.flush();
			}
		} catch (Exception ex) {
			ex.printStackTrace();
		} finally {
			try {
				pw.close();
			} catch (Exception e) {
			}
		}
	}

	@RequestMapping(value = "/update", method = RequestMethod.POST)
	public void update(MultipartHttpServletRequest request, HttpServletResponse response) {
		PrintWriter pw = null;
		Boolean isReturn = false;
		try {
			response.setContentType("text/html;charset=UTF-8");
			pw = response.getWriter();
			MultipartFile uploadfile = request.getFile("icon");
			MessageResult result = new MessageResult();
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userJson = JacksonUtils.toJson(userBeanInfo);
			if (null != uploadfile) {
				long length = uploadfile.getSize();
				if (length > 1 * 1024 * 1024) {
					result.setSuccess(false);
					result.setMsg("图片尺寸不能大于1M");
					pw.print(JacksonUtils.toJson(result));
					pw.flush();
					isReturn = true;
				}
			}
			if (!isReturn) {
				String id = request.getParameter("id");
				SysLinkCenter sysLinkCenter = sysLinkCenterService.getObjectById(id);

				String resultInfo = JacksonUtils.toJson(sysLinkCenter);
				SysLinkCenterDto sysLinkCenterDto = JacksonUtils.fromJson(resultInfo, SysLinkCenterDto.class);
				String name = request.getParameter("name");
				String code = request.getParameter("code");
				String url = request.getParameter("url");
				String parentId = request.getParameter("parentId");
				String parentName = request.getParameter("parentName");
				String isDelPic = request.getParameter("isDelPic");
				String state = request.getParameter("state");
				String type = request.getParameter("type");
				String remark = request.getParameter("remark");
				sysLinkCenterDto.setCode(code);
				sysLinkCenterDto.setId(id);
				sysLinkCenterDto.setName(name);
				sysLinkCenterDto.setState(state);
				sysLinkCenterDto.setParentId(parentId);
				sysLinkCenterDto.setRemark(remark);
				sysLinkCenterDto.setType(type);
				sysLinkCenterDto.setUrl(url);
				sysLinkCenterDto.setDelflag(false);
				sysLinkCenterDto.setParentName(parentName);
				if (null != uploadfile) {
					if (uploadfile.getSize() > 0) {
						InputStream is = uploadfile.getInputStream();
						byte[] headpic = new byte[is.available()];
						is.read(headpic);
						is.close();
						sysLinkCenterDto.setIcon(headpic);
					}
				} else if ("0".equals(isDelPic)) {
					sysLinkCenterDto.setIcon(null);
				}
				String updateJson = JacksonUtils.toJson(sysLinkCenterDto);
				try {
					SysLinkCenter sysLinkCenter2 = JacksonUtils.fromJson(updateJson, SysLinkCenter.class);
					int updateResult = sysLinkCenterService.updateSysLinkCenter(sysLinkCenter2);
					result.setResult(updateResult, "更新对象成功!");
					if (updateResult == 5) {
						result.setError("编码重复,保存失败");
					}
				} catch (Exception e) {
					log.error("更新对象失败!" + e.getMessage());
					result.setError("更新对象失败!");
				}
			} else {
				result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				result.setMsg("不存在更新的对象");
			}
			pw.print(JacksonUtils.toJson(result));
			pw.flush();
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				pw.close();
			} catch (Exception e) {
			}
		}
	}

	/**
	 * 对排序(上移/下移)
	 * 
	 * @param t
	 * @return
	 */
	@RequestMapping(value = "/updateSort/{id}", method = RequestMethod.PUT, consumes = "application/json")
	public @ResponseBody MessageResult updateSort(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		String updateJson = "{\"id\":\"" + id + "\"}";
		try {
			SysLinkCenter sysLinkCenter = JacksonUtils.fromJson(updateJson, SysLinkCenter.class);
			SysLinkCenter centerobject = sysLinkCenterService.getObjectById(sysLinkCenter.getId());
			int updateResult = sysLinkCenterService.updateSort(centerobject, map);
			result.setResult(updateResult, "更新对象成功!");
		} catch (Exception e) {
			log.error("更新对象失败!" + e.getMessage());
			result.setError("更新对象失败!");
		}
		return result;
	}

	@RequestMapping(value = "/updateStatus/{id}", method = RequestMethod.PUT, consumes = "application/json")
	public @ResponseBody MessageResult updateStatus(@PathVariable("id") String id) {
		MessageResult result = new MessageResult();
		String updateJson = "{\"id\":\"" + id + "\"}";
		try {

			SysLinkCenter sysLinkCenterBean = JacksonUtils.fromJson(updateJson, SysLinkCenter.class);
			SysLinkCenter sysLinkCenter = sysLinkCenterService.getObjectById(sysLinkCenterBean.getId());
			int updateResult = sysLinkCenterService.updateStatus(sysLinkCenter);
			if (updateResult == 6) {
				result.setError("二维码链接只允许启用一个");
			} else {
				result.setResult(updateResult, "更新状态成功!");
			}
		} catch (Exception e) {
			log.error("更新状态失败!" + e.getMessage());
			result.setError("更新状态失败!");
		}
		return result;
	}

	/**
	 * 分组查询
	 */
	/**
	 * 返回符合条件的列表
	 * 
	 * @param paramater
	 * @return
	 */
	@RequestMapping(value = "/queryListGroup", method = { RequestMethod.POST }, consumes = "application/json")
	public @ResponseBody MessageResult queryListGroup(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		try {
			if (isNotEmpty(map)) {
				List list = sysLinkCenterService.queryListGroup(map);
				result.setResult(list, "获取列表对象成功!");
			} else {
				List list = sysLinkCenterService.queryListGroup(null);
				result.setResult(list, "获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			log.error("获取列表对象失败!" + e.getMessage());
			result.setError("获取列表对象失败!");
		}
		return result;
	}

}
