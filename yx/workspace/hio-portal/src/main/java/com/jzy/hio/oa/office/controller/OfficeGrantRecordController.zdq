package com.jzy.hio.oa.office.controller;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.oa.office.service.OfficeGrantRecordService;



/**
 * 办公用品出库表控制层
 * @author wangw
 *
 */
@Controller
@RequestMapping("/office/officeGrantRecord")
public class OfficeGrantRecordController extends BaseController<OfficeGrantRecordService>{

	private static Logger log = LoggerFactory.getLogger(OfficeGrantRecordController.class);

	@Autowired
	private OfficeGrantRecordService officeGrantRecordService;



	/**
	 * 修改修改实体对象
	 * @param id
	 * @param map
	 * @return
	 */
	@RequestMapping(value="/updateGrantRecordAndInfo/{id}",method= RequestMethod.PUT,consumes="application/json")
	public @ResponseBody
    MessageResult updateGrantRecordAndInfo(@PathVariable("id")  String id, @RequestBody Map<String,Object> map){
		return super.update(id, map);
		/*MessageResult result=new MessageResult();
		OfficeGrantRecordDto officeGrantRecordDto=null;
		try {
			OfficeGrantRecord officeGrantRecord=officeGrantRecordService.getObjectById(id);
			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if(dubboServiceResultInfo.isSucess()){
				 String resultInfo= dubboServiceResultInfo.getResult();
				 Map<String,Object> oldMap=JacksonUtils.fromJson(resultInfo, HashMap.class);
				 oldMap.putAll(map);
				 String updateJson= JacksonUtils.toJson(oldMap);
				 String updateDubboResultInfo=officeGrantRecordDtoServiceCustomer.update(null, updateJson);
				 DubboServiceResultInfo updateDubboServiceResultInfo= JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
				 if(updateDubboServiceResultInfo.isSucess()){
					 Integer i=JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class);
					 result.setResult(i);
					 result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
					 result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
				 }else{
					 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
					 result.setMsg(updateDubboServiceResultInfo.getMsg()+"【"+updateDubboServiceResultInfo.getExceptionMsg()+"】");
				 }
			}else{
				 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				 result.setMsg("不存在更新的对象");
			}
		} catch (Exception e) {
			try{
			 //e.printStackTrace();
			 ObjectMapper mapper = new ObjectMapper();
			 String  paramJson = mapper.writeValueAsString(officeGrantRecordDto);
			 log.error("调用update方法:  【参数"+id+","+paramJson+"】======"+"【"+e.getMessage()+"】");
			 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
			 result.setMsg(MessageInfo.UPDATEERROR.getMsg()+"【"+e.getMessage()+"】");
			}catch (JsonProcessingException e1) {
				// TODO Auto-generated catch block
				//e1.printStackTrace();
			}

		}
		return result;*/
	}



}
