//package com.jzy.hio.oa.meeting.dto.service.impl;
//
//import java.text.ParseException;
//import java.text.SimpleDateFormat;
//import java.util.Arrays;
//import java.util.Date;
//import java.util.HashMap;
//import java.util.List;
//import java.util.Map;
//
//import org.apache.commons.lang.StringUtils;
//import org.apache.log4j.Logger;
//import org.springframework.beans.factory.annotation.Autowired;
//
//import com.jzy.hio.base.utils.DubboServiceResultInfo;
//import com.jzy.hio.base.utils.IDGenerator;
//import com.jzy.tools.data.JacksonUtils;
//import com.jzy.hio.base.utils.Page;
//import com.jzy.hio.base.utils.SecurityUserBeanInfo;
//import com.jzy.hio.oa.meeting.dto.MeetingReplyDto;
//import com.jzy.hio.oa.meeting.dto.service.MeetingReplyDtoServiceCustomer;
//import com.jzy.hio.oa.meeting.entity.Meeting;
//import com.jzy.hio.oa.meeting.entity.MeetingReply;
//import com.jzy.hio.oa.meeting.service.MeetingReplyService;
//import com.jzy.hio.oa.meeting.service.MeetingService;
//import com.jzy.hio.oa.meeting.utils.MeetingStatusType;
//import com.jzy.hio.oa.schedule.entity.WorkSchedule;
//import com.jzy.hio.oa.schedule.service.WorkScheduleService;
//import com.xinleju.platform.flow.dto.SysNoticeMsgDto;
//import com.xinleju.platform.flow.dto.service.SysNoticeMsgDtoServiceCustomer;
//import com.xinleju.platform.sys.org.dto.service.UserDtoServiceCustomer;
//
///**
// * @author wangw
// * 
// *
// */
// 
//public class MeetingReplyDtoServiceProducer implements MeetingReplyDtoServiceCustomer{
//	private static Logger log = Logger.getLogger(MeetingReplyDtoServiceProducer.class);
//	@Autowired
//	private MeetingReplyService meetingReplyService;
//	@Autowired
//	private MeetingService meetingService;
//	@Autowired
//	private SysNoticeMsgDtoServiceCustomer sysNoticeMsgDtoServiceCustomer;
//	@Autowired
//	private WorkScheduleService workScheduleService;
//	@Autowired
//	private UserDtoServiceCustomer userDtoServiceCustomer;
//	public String save(String userInfo, String saveJson){
//		// TODO Auto-generated method stub
//	   DubboServiceResultInfo info=new DubboServiceResultInfo();
//	   SecurityUserBeanInfo securityUserBeanInfo=JacksonUtils.fromJson(userInfo, SecurityUserBeanInfo.class);
//	   try {
//		   MeetingReply meetingReply=JacksonUtils.fromJson(saveJson, MeetingReply.class);
//		   meetingReplyService.save(meetingReply);
//		   //保存完回复记录后，待办消失方式：  回复后消失 。  会议结束后消失（处理待办时，给出一个提示“？？”）。，如果会议属性是回复后消失的话，此时代办要变为已办
//		   
//		   Meeting meeting = meetingService.getObjectById(meetingReply.getMeetingId());
//		   //0代表回复后消失
//		   if(StringUtils.isNotBlank(meeting.getNotifiyWay()) && "1".equals(meeting.getNotifiyWay()) && "0".equals(meeting.getDisappearWay())){
//			   //会议中待办消失方式为  回复后消失，直接把该人的待办消失
//			   Map<String,String> noticeMap = new HashMap<String,String>();
//			   noticeMap.put("businessId", meetingReply.getMeetingId());
//			   noticeMap.put("userId", securityUserBeanInfo.getSecurityUserDto().getId());
//			   noticeMap.put("newStatus", "YB");
//			   noticeMap.put("oldStatus", "DB");
//			   String noticeMapJson= JacksonUtils.toJson(noticeMap);
//			   String noticeList =   sysNoticeMsgDtoServiceCustomer.queryList (userInfo,noticeMapJson);
//			   DubboServiceResultInfo noticeInfo = JacksonUtils.fromJson (noticeList,DubboServiceResultInfo.class);
//			   List<SysNoticeMsgDto> li = JacksonUtils.fromJson (noticeInfo.getResult (),List.class,SysNoticeMsgDto.class);
//			   if(li!=null&&!li.isEmpty ()){
//			   	   noticeMap.put("id",li.get (0).getId ());
//			   }
//			   noticeMapJson= JacksonUtils.toJson(noticeMap);
//			   String resultJson =   sysNoticeMsgDtoServiceCustomer.updateStatusOfNoticeMsg(userInfo, noticeMapJson);
//		   }
//		   //如果点击参加要给参加的人发一个日程，如果再点击不参加，要把推送的日程清除掉,1代表参加，0代表不参加
//		   if(meetingReply.getJoinFlag() != null && "1".equals(meetingReply.getJoinFlag())){
//			   try {
//				   //如果点击参加的话，判断一下该人员是都有日程，如果有，则不推送，日程不存在，则推送
//				   Map<String, Object> mapWork = new HashMap<String, Object>();
//				   mapWork.put("businessId",meeting.getId());
//				   mapWork.put("taskOwnerId", securityUserBeanInfo.getSecurityUserDto().getId());
//				   List<WorkSchedule> list = workScheduleService.queryList(mapWork);
//				   if(list.size() > 0){
//				   }else{
//					   this.savetWorkSchedule(userInfo,meeting);
//				   }
//				} catch (Exception e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				}
//		   }else if(meetingReply.getJoinFlag() != null && "0".equals(meetingReply.getJoinFlag())){
//			   //点击不参加时，要查询该用户是否有日程推送，如果有，要取消
//			   Map<String, Object> mapWork = new HashMap<String, Object>();
//			   mapWork.put("businessId",meeting.getId());
//			   mapWork.put("taskOwnerId", securityUserBeanInfo.getSecurityUserDto().getId());
//			   List<WorkSchedule> list = workScheduleService.queryList(mapWork);
//			   if(list.size() > 0){
//				   WorkSchedule workSchedule = workScheduleService.queryList(mapWork).get(0);
//				   workScheduleService.deleteObjectById(workSchedule.getId());
//			   }
//		   }
//		   info.setResult(JacksonUtils.toJson(meetingReply));
//		   info.setSucess(true);
//		   info.setMsg("保存对象成功!");
//		} catch (Exception e) {
//		 log.error("保存对象失败!"+e.getMessage());
//		 info.setSucess(false);
//		 info.setMsg("保存对象失败!");
//		 info.setExceptionMsg(e.getMessage());
//		}
//	   return JacksonUtils.toJson(info);
//	}
//	
//	
//	
//	public String listToString(List list, char separator) {    
//		StringBuilder sb = new StringBuilder();    
//		for (int i = 0; i < list.size(); i++) {        
//			sb.append(list.get(i)).append(separator);    
//			}    
//		return sb.toString().substring(0,sb.toString().length()-1);
//	}
//	
//	public void savetWorkSchedule(String userInfo,Meeting meeting) throws Exception{
//		SecurityUserBeanInfo securityUserBeanInfo=JacksonUtils.fromJson(userInfo, SecurityUserBeanInfo.class);
//		WorkSchedule workSchedule = new WorkSchedule();
//		String noticeId = IDGenerator.getUUID();
//		workSchedule.setId(noticeId);
//		workSchedule.setContent(meeting.getTitle());
//		workSchedule.setType("MEETING");
//		workSchedule.setBeginTime(meeting.getBeginTime());
//		workSchedule.setEndTime(meeting.getEndTime());
//		workSchedule.setTaskOwner(securityUserBeanInfo.getSecurityUserDto().getRealName());
//		workSchedule.setTaskOwnerId(securityUserBeanInfo.getSecurityUserDto().getId());
//		workSchedule.setSource("OA");
//		workSchedule.setBusinessId(meeting.getId());
//		
//		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm");//设置日期格式
//		String currentTime = df.format(new Date());// new Date()为获取当前系统时间
//		String beginData = meeting.getBeginTime() ;//开始时间
//        String endData = meeting.getEndTime() ;//结束时间
//        try {
//			if(df.parse(beginData).getTime() > df.parse(currentTime).getTime()){
//				workSchedule.setStatus(MeetingStatusType.NOTBEGIN.getCode());
//			}else if(df.parse(beginData).getTime() < df.parse(currentTime).getTime() && df.parse(endData).getTime() > df.parse(currentTime).getTime()){
//				workSchedule.setStatus(MeetingStatusType.HAVEING.getCode());
//			}else if(df.parse(endData).getTime() < df.parse(currentTime).getTime()){
//				workSchedule.setStatus(MeetingStatusType.ISOVER.getCode());
//			}
//		} catch (ParseException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//        workScheduleService.save(workSchedule);
//	}
//	
//	
//	//会议取消删除所有的待办和待阅
//		public void deleteStatusOfNoticeMsg(String userInfo, Map map,String flag){
//			SecurityUserBeanInfo securityUserBeanInfo=JacksonUtils.fromJson(userInfo, SecurityUserBeanInfo.class);
//			Map<String,String> noticeMap = new HashMap<String,String>();
//			noticeMap.put("businessId", map.get("meetingId").toString());
//			noticeMap.put("userId", map.get("userId").toString());
//			String noticeMapJson= JacksonUtils.toJson(noticeMap);
//			sysNoticeMsgDtoServiceCustomer.deleteOpTypeDataByParamMap(userInfo, noticeMapJson);
//			
//		}
//	
//	
//	//代办人处理后，更新待办状态
//	public void updateStatusOfNoticeMsg(String userInfo, Map map,String flag){
//		SecurityUserBeanInfo securityUserBeanInfo=JacksonUtils.fromJson(userInfo, SecurityUserBeanInfo.class);
//		Map<String,String> noticeMap = new HashMap<String,String>();
//		if("cancel".equals(flag)){
//			noticeMap.put("newStatus", "DY");
//		}else{
//			noticeMap.put("newStatus", "YB");
//		}
//		noticeMap.put("oldStatus", "DB");
//		//noticeMap.put("id", map.get("noticeId").toString());
//		noticeMap.put("businessId", map.get("meetingId").toString());
//		noticeMap.put("extendInfo", "meeting");
//		noticeMap.put("userId", securityUserBeanInfo.getSecurityUserDto().getId());
//		String noticeMapJson= JacksonUtils.toJson(noticeMap);
//		sysNoticeMsgDtoServiceCustomer.updateStatusOfNoticeMsg(userInfo, noticeMapJson);
//	}
//
//	@Override
//	public String saveBatch(String userInfo, String saveJsonList)
//			 {
//		// TODO Auto-generated method stub
//		return null;
//	}
//
//	@Override
//	public String updateBatch(String userInfo, String updateJsonList)
//			 {
//		// TODO Auto-generated method stub
//		return null;
//	}
//
//	@Override
//	public String update(String userInfo, String updateJson)  {
//		// TODO Auto-generated method stub
//		   DubboServiceResultInfo info=new DubboServiceResultInfo();
//		   try {
//			   MeetingReply meetingReply=JacksonUtils.fromJson(updateJson, MeetingReply.class);
//			   int result=   meetingReplyService.update(meetingReply);
//			   info.setResult(JacksonUtils.toJson(result));
//			   info.setSucess(true);
//			   info.setMsg("更新对象成功!");
//			} catch (Exception e) {
//			 log.error("更新对象失败!"+e.getMessage());
//			 info.setSucess(false);
//			 info.setMsg("更新对象失败!");
//			 info.setExceptionMsg(e.getMessage());
//			}
//		   return JacksonUtils.toJson(info);
//	}
//
//	@Override
//	public String deleteObjectById(String userInfo, String deleteJson)
//	{
//		// TODO Auto-generated method stub
//		   DubboServiceResultInfo info=new DubboServiceResultInfo();
//		   try {
//			   MeetingReply meetingReply=JacksonUtils.fromJson(deleteJson, MeetingReply.class);
//			   int result= meetingReplyService.deleteObjectById(meetingReply.getId());
//			   info.setResult(JacksonUtils.toJson(result));
//			   info.setSucess(true);
//			   info.setMsg("删除对象成功!");
//			} catch (Exception e) {
//			 log.error("更新对象失败!"+e.getMessage());
//			 info.setSucess(false);
//			 info.setMsg("删除更新对象失败!");
//			 info.setExceptionMsg(e.getMessage());
//			}
//		   return JacksonUtils.toJson(info);
//	}
//
//	@Override
//	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
//   {
//		// TODO Auto-generated method stub
//		 DubboServiceResultInfo info=new DubboServiceResultInfo();
//		   try {
//			   if (StringUtils.isNotBlank(deleteJsonList)) {
//				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
//				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
//				   int result= meetingReplyService.deleteAllObjectByIds(list);
//				   info.setResult(JacksonUtils.toJson(result));
//				   info.setSucess(true);
//				   info.setMsg("删除对象成功!");
//				}
//			} catch (Exception e) {
//			 log.error("删除对象失败!"+e.getMessage());
//			 info.setSucess(false);
//			 info.setMsg("删除更新对象失败!");
//			 info.setExceptionMsg(e.getMessage());
//			}
//		   return JacksonUtils.toJson(info);
//	}
//
//	@Override
//	public String getObjectById(String userInfo, String getJson)
//	 {
//		// TODO Auto-generated method stub
//		DubboServiceResultInfo info=new DubboServiceResultInfo();
//		try {
//			MeetingReply meetingReply=JacksonUtils.fromJson(getJson, MeetingReply.class);
//			MeetingReply	result = meetingReplyService.getObjectById(meetingReply.getId());
//			info.setResult(JacksonUtils.toJson(result));
//		    info.setSucess(true);
//		    info.setMsg("获取对象成功!");
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			 log.error("获取对象失败!"+e.getMessage());
//			 info.setSucess(false);
//			 info.setMsg("获取对象失败!");
//			 info.setExceptionMsg(e.getMessage());
//		}
//		return JacksonUtils.toJson(info);
//	}
//
//	@Override
//	public String getPage(String userInfo, String paramater) {
//		// TODO Auto-generated method stub
//		DubboServiceResultInfo info=new DubboServiceResultInfo();
//		try {
//			if(StringUtils.isNotBlank(paramater)){
//				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
//				Page page=meetingReplyService.getPage(map, (Integer)map.get("start"),  (Integer)map.get("limit"));
//				info.setResult(JacksonUtils.toJson(page));
//			    info.setSucess(true);
//			    info.setMsg("获取分页对象成功!");
//			}else{
//				Page page=meetingReplyService.getPage(new HashMap(), null, null);
//				info.setResult(JacksonUtils.toJson(page));
//			    info.setSucess(true);
//			    info.setMsg("获取分页对象成功!");
//			}
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			 log.error("获取分页对象失败!"+e.getMessage());
//			 info.setSucess(false);
//			 info.setMsg("获取分页对象失败!");
//			 info.setExceptionMsg(e.getMessage());
//		}
//		return JacksonUtils.toJson(info);
//	}
//
//	@Override
//	public String queryList(String userInfo, String paramater){
//		// TODO Auto-generated method stub
//		DubboServiceResultInfo info=new DubboServiceResultInfo();
//		try {
//			if(StringUtils.isNotBlank(paramater)){
//				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
//				List list=meetingReplyService.queryListByExample(map);
//				info.setResult(JacksonUtils.toJson(list));
//			    info.setSucess(true);
//			    info.setMsg("获取列表对象成功!");
//			}else{
//				List list=meetingReplyService.queryList(null);
//				info.setResult(JacksonUtils.toJson(list));
//			    info.setSucess(true);
//			    info.setMsg("获取列表对象成功!");
//			}
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			 log.error("获取列表对象失败!"+e.getMessage());
//			 info.setSucess(false);
//			 info.setMsg("获取列表对象失败!");
//			 info.setExceptionMsg(e.getMessage());
//		}
//		return JacksonUtils.toJson(info);
//	}
//
//	@Override
//	public String getCount(String userInfo, String paramater)  {
//		// TODO Auto-generated method stub
//		return null;
//	}
//
//	@Override
//	public String deletePseudoObjectById(String userInfo, String deleteJson) {
//		// TODO Auto-generated method stub
//		return null;
//	}
//
//	@Override
//	public String deletePseudoAllObjectByIds(String userInfo,
//			String deleteJsonList) {
//		// TODO Auto-generated method stub
//		return null;
//	}
//
//	@Override
//	public String queryMeetingReployByNew(String userInfo,
//			Map paramaterJson) {
//		// TODO Auto-generated method stub
//		DubboServiceResultInfo info=new DubboServiceResultInfo();
//		try {
//			MeetingReplyDto result = meetingReplyService.queryMeetingReployByNew(userInfo, paramaterJson);
//			info.setResult(JacksonUtils.toJson(result));
//		    info.setSucess(true);
//		    info.setMsg("获取对象成功!");
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			 log.error("获取对象失败!"+e.getMessage());
//			 info.setSucess(false);
//			 info.setMsg("获取对象失败!");
//			 info.setExceptionMsg(e.getMessage());
//		}
//		return JacksonUtils.toJson(info);
//	}
//
//	@Override
//	public String getUserInfoByMeetingId(String userInfo, Map paramaterJson) {
//		// TODO Auto-generated method stub
//		DubboServiceResultInfo info=new DubboServiceResultInfo();
//		try {
//			MeetingReplyDto result = meetingReplyService.getUserInfoByMeetingId(userInfo, paramaterJson);
//			info.setResult(JacksonUtils.toJson(result));
//		    info.setSucess(true);
//		    info.setMsg("获取对象成功!");
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			 log.error("获取对象失败!"+e.getMessage());
//			 info.setSucess(false);
//			 info.setMsg("获取对象失败!");
//			 info.setExceptionMsg(e.getMessage());
//		}
//		return JacksonUtils.toJson(info);
//	}
//
//	@Override
//	public String reminderMeeting(String userInfo, String parm) {
//		DubboServiceResultInfo info=new DubboServiceResultInfo();
//		try {
//			int	result = meetingReplyService.reminderMeeting(userInfo,parm);
//			info.setResult(JacksonUtils.toJson(result));
//		    info.setSucess(true);
//		    info.setMsg("获取对象成功!");
//		} catch (Exception e) {
//			// TODO Auto-generated catch block
//			 log.error("获取对象失败!"+e.getMessage());
//			 info.setSucess(false);
//			 info.setMsg("获取对象失败!");
//			 info.setExceptionMsg(e.getMessage());
//		}
//		return JacksonUtils.toJson(info);
//	}
//
//
//}
