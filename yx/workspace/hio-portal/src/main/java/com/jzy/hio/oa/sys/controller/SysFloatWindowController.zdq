package com.jzy.hio.oa.sys.controller;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.base.utils.ErrorInfoCode;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.oa.sys.entity.SysFloatWindow;
import com.jzy.hio.oa.sys.service.SysFloatWindowService;

/**
 * 浮动窗口表控制层
 * 
 * @author admin
 *
 */
@Controller
@RequestMapping("/sys/sysFloatWindow")
public class SysFloatWindowController extends BaseController<SysFloatWindowService> {

	@Autowired
	private SysFloatWindowService sysFloatWindowService;

	// private attachment

	@Override
	public MessageResult get(@PathVariable("id") String id) {
		MessageResult result = new MessageResult();
		try {
			if (Objects.equals(id, "portal")) { // 首页浮动窗口数据
				Map<String, Object> map = new HashMap<>();
				map.put("state", 0);
				map.put("delflag", 0);
				List<SysFloatWindow> sysFloatWindows = sysFloatWindowService.queryListByExample(map);
				if (sysFloatWindows != null && !sysFloatWindows.isEmpty()) {
					SysFloatWindow floatWindow = sysFloatWindows.get(0);
					if (System.currentTimeMillis() >= floatWindow.getAutomaticTime().getTime()) {
						if (floatWindow.getExpiredTime() == null || System.currentTimeMillis() < floatWindow.getExpiredTime().getTime()) {
							Map<String, Object> postMap = new HashMap<>();
							postMap.put("businessId", Arrays.asList(new String[] { floatWindow.getId() }));
							postMap.put("appId", "floatWindow");
							postMap.put("categoryId", "1");
							// String resultJson = attachmentDtoServiceCustomer.queryListByObject(userInfo, JacksonUtils.toJson(postMap));
							// DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(resultJson, DubboServiceResultInfo.class);
							// List<AttachmentDto> attachmentDtos = JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), List.class, AttachmentDto.class);
							// if (attachmentDtos != null && !attachmentDtos.isEmpty()) {
							// AttachmentDto attachmentDto = attachmentDtos.get(0);
							// floatWindow.setFile(attachmentDto.getUrl());
							// }
							result.setResult(floatWindow, "获取对象成功!");
							return result;
						}
					}
				}
				result.setError("对象数据为空!");
			} else {
				return super.get(id);
			}
		} catch (Exception e) {
			log.error("获取对象失败!" + e.getMessage());
			result.setError("对象数据为空!");
		}
		return result;
	}

	/**
	 * 模糊查询： 名称或编码
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/fuzzySearch", method = RequestMethod.POST, consumes = "application/json")
	public @ResponseBody MessageResult fuzzySearch(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		try {
			if (map != null && map.size() > 0) {
				List<?> list = sysFloatWindowService.fuzzySearch(map);
				if (list != null && !list.isEmpty()) {
					result.setResult(list);
					result.setSuccess("模糊查询对象成功!");
				} else {
					result.setCode(ErrorInfoCode.NULL_ERROR.getValue());
					result.setSuccess(false);
					result.setMsg("列表数据为空!");
				}
			} else {
				result.setCode(ErrorInfoCode.PARAMETER_ERROR.getValue());
				result.setSuccess(false);
				result.setMsg("请求参数为空!");
			}
		} catch (Exception e) {
			log.error("模糊查询对象失败!" + e.getMessage());
			result.setError("模糊查询对象失败!");
		}
		return result;
	}
}
