package com.jzy.hio.oa.office.dto.service.impl;

import java.io.File;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.jzy.hio.base.utils.DubboServiceResultInfo;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.oa.office.dto.OfficeRecordDto;
import com.jzy.hio.oa.office.dto.service.OfficeRecordDtoServiceCustomer;
import com.jzy.hio.oa.office.entity.OfficeInfo;
import com.jzy.hio.oa.office.entity.OfficeRecord;
import com.jzy.hio.oa.office.service.OfficeInfoService;
import com.jzy.hio.oa.office.service.OfficeRecordService;


/**
 * @author wangw
 *
 *
 */
@Service
public class OfficeRecordDtoServiceProducer implements OfficeRecordDtoServiceCustomer{
	private static Logger log = Logger.getLogger(OfficeRecordDtoServiceProducer.class);
	@Autowired
	private OfficeRecordService officeRecordService;
	@Autowired
	private OfficeInfoService officeInfoService;

	public String save(String userInfo, String saveJson){
		// TODO Auto-generated method stub
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   OfficeRecord officeRecord=JacksonUtils.fromJson(saveJson, OfficeRecord.class);
		   officeRecord.setDelflag(false);
		   officeRecordService.save(officeRecord);
		   info.setResult(JacksonUtils.toJson(officeRecord));
		   info.setSucess(true);
		   info.setMsg("保存对象成功!");
		} catch (Exception e) {
		 log.error("保存对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("保存对象失败!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList){
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			if (StringUtils.isNotBlank(saveJsonList)) {
				List<OfficeRecordDto> list = JacksonUtils.fromJson(saveJsonList, List.class,OfficeRecordDto.class);
				List<OfficeRecord> OfficeRecordInfo = new ArrayList<OfficeRecord>();
				if(list.size() > 0){
					for (OfficeRecordDto officeRecordDto : list) {
						String saveJson= JacksonUtils.toJson(officeRecordDto);
						OfficeRecord officeRecord=JacksonUtils.fromJson(saveJson, OfficeRecord.class);
						OfficeRecordInfo.add(officeRecord);
					}
					
					officeRecordService.saveBatch(OfficeRecordInfo);
				}
				info.setResult("保存成功");
				info.setSucess(true);
				info.setMsg("保存对象成功!");
			} else {
				info.setResult("参数为空");
				info.setSucess(false);
				info.setMsg("保存对象失败!");
			}
		} catch (Exception e) {
			log.error("保存对象失败!" + e.getMessage());
			info.setSucess(false);
			info.setMsg("保存对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   OfficeRecord officeRecord=JacksonUtils.fromJson(updateJson, OfficeRecord.class);
			   int result=   officeRecordService.update(officeRecord);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   OfficeRecord officeRecord=JacksonUtils.fromJson(deleteJson, OfficeRecord.class);
			   int result= officeRecordService.deleteObjectById(officeRecord.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= officeRecordService.deleteAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	 {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			OfficeRecord officeRecord=JacksonUtils.fromJson(getJson, OfficeRecord.class);
			OfficeRecord	result = officeRecordService.getObjectById(officeRecord.getId());
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				Page page=officeRecordService.getofficeRecordByPage(map);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=officeRecordService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				List list=officeRecordService.queryListByExample(map);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=officeRecordService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}


	@Override
	public String updateOfficeRecordAndInfo(String userInfo, String updateJson) {
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			    //首先更新入库表，然后再更新结存表
			   OfficeRecord officeRecord=JacksonUtils.fromJson(updateJson, OfficeRecord.class);
			   int result=   officeRecordService.update(officeRecord);

			   //获取结存表对象
			   OfficeInfo officeinfo = officeInfoService.getObjectById( officeRecord.getStockInfoId());
			   Long oldStockCount = Long.parseLong(officeinfo.getStockCount());
			   officeinfo.setStockCount(String.valueOf(oldStockCount+Long.parseLong(officeRecord.getInCount())));
			   int officeinforesult=  officeInfoService.update(officeinfo);

			   info.setResult(JacksonUtils.toJson(result+officeinforesult));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo,
			String deleteJsonList) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String importOfficeRecordByExcel(InputStream in,
			String fileName) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		/*ImportExcelUtil importExcelUtil = new ImportExcelUtil();
		List<List<Object>> listob = null;
		List<OfficeRecord> officeRecordList = new ArrayList<OfficeRecord>();
		try {
			listob = importExcelUtil.getBankListByExcel(in, fileName);
			in.close();
			//定义结存表中  用户编号为key，入库数量为value，同一种用户编号下面，value值一直相加
			Map<String,Integer> stockMap = new HashMap<String,Integer>();

			//该处可调用service相应方法进行数据保存到数据库中，现只对数据输出
	        for (int i = 0; i < listob.size(); i++) {
	            List<Object> lo = listob.get(i);
	            OfficeRecord vo = new OfficeRecord();
	            vo.setId(IDGenerator.getUUID());
	            vo.setStockName(String.valueOf(lo.get(0)));
	            vo.setHouseName(String.valueOf(lo.get(1)));
	            vo.setStockNum(String.valueOf(lo.get(2)));
	            //入库数量
	            vo.setInCount(String.valueOf(lo.get(3)));
	            officeRecordList.add(vo);
	            //同一种用户编号的入库数量一直累加
	            if(stockMap.containsKey(String.valueOf(lo.get(2)))){
	            	stockMap.put(String.valueOf(lo.get(2)), stockMap.get(String.valueOf(lo.get(2)))+Integer.parseInt(String.valueOf(lo.get(3))));
	            }else{
	            	stockMap.put(String.valueOf(lo.get(2)), Integer.parseInt(String.valueOf(lo.get(3))));
	            }
	        }
	        if(officeRecordList.size() > 0){
	        	officeRecordService.saveBatch(officeRecordList);
	        }

	        //更新完入库表后，要根据用品编号跟新结存表
	        if(stockMap.size() > 0){
	        	officeInfoService.updateOfficeInfoByStockNum(stockMap);
	        }

	        info.setResult(JacksonUtils.toJson(officeRecordList));
		    info.setSucess(true);
		    info.setMsg("获取列表对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}*/
		return JacksonUtils.toJson(info);
	}





	@Override
	public String exportOfficeRecordByExcel(File file, String sheetName,
			List<OfficeRecordDto> lis) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		/*List<OfficeRecord> officeRecordList = new ArrayList<OfficeRecord>();
		try {

			Workbook wb = null;
	        Row row = null;
	        Cell cell = null;

	        FileInputStream fis = new FileInputStream(file);
	        wb = new ImportExcelUtil().getWorkbook(fis, file.getName());    //获取工作薄
	        Sheet sheet = wb.getSheet(sheetName);

	        //循环插入数据
	        int lastRow = sheet.getLastRowNum()+1;    //插入数据的数据ROW
	        ExportExcel exportExcel = new ExportExcel();
	        CellStyle cs = exportExcel.setSimpleCellStyle(wb);    //Excel单元格样式
	        // 插入数据
	        for (int i = 0; i < officeRecordList.size(); i++) {
	            row = sheet.createRow(lastRow+i); //创建新的ROW，用于数据插入

	            //按项目实际需求，在该处将对象数据插入到Excel中
	            OfficeRecord vo  = officeRecordList.get(i);
	            if(null==vo){
	                break;
	            }
	            //Cell赋值开始
//	            cell = row.createCell(0);
//	            cell.setCellValue(vo.getCode());
//	            cell.setCellStyle(cs);
//
//	            cell = row.createCell(1);
//	            cell.setCellValue(vo.getName());
//	            cell.setCellStyle(cs);
//
//	            cell = row.createCell(2);
//	            cell.setCellValue(vo.getDate());
//	            cell.setCellStyle(cs);
//
//	            cell = row.createCell(3);
//	            cell.setCellValue(vo.getMoney());
//	            cell.setCellStyle(cs);
	        }
	        info.setResult(JacksonUtils.toJson(officeRecordList));
		    info.setSucess(true);
		    info.setMsg("获取列表对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}*/
		return JacksonUtils.toJson(info);
	}

	
	
	
	
	@Override
	public String saveOfficeRecordByExcel(String username, Map map) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   String dubboResultInfo = officeRecordService.saveOfficeRecordByExcel(username,map);
			   DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			   if(dubboServiceResultInfo.isSucess()){
				   String resultInfo= dubboServiceResultInfo.getResult();
			       info.setResult(JacksonUtils.toJson(resultInfo));
			       info.setSucess(true);
			       info.setMsg("保存对象成功!");
			   }
			} catch (Exception e) {
			 log.error("保存对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("保存对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}




}
