package com.jzy.hio.base.controller;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeansException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jzy.hio.Version;
import com.jzy.hio.base.Base;
import com.jzy.hio.base.anno.TODO;
import com.jzy.hio.base.anno.TargetVersion;
import com.jzy.hio.base.service.BaseService;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.util.ClassUtils;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.tools.login.LoginUtils;

/**
 * 
 * @author coffee<br/>
 *         2018年1月26日上午10:37:29
 */
@SuppressWarnings({ "rawtypes", "unchecked" })
@TargetVersion(Version.v001)
public abstract class BaseController<T extends BaseService> implements ApplicationContextAware {

	protected Logger log = LoggerFactory.getLogger(getClass());

	/**
	 * 如果需要调用子类独有的方法、则需要在子类中注入实现类<br/>
	 * 
	 * <pre>
	 * &#64;Autuwired
	 * ServeyService service;
	 * service.getContentTypeByPage()
	 * </pre>
	 */
	@TODO("aop只会拦截BaseService里面的方法、实现类的无法拦截、导致切库失败、原因未知")
	protected T service;

	private ApplicationContext context;

	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
		this.context = applicationContext;
		try {
			Class service = ClassUtils.getGenericClass(this.getClass(), 0);
			this.service = (T) context.getBean(service);
			// this.service = (T) BeanUtils.instantiate(Class.forName(className));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public BaseController() {

	}

	/**
	 * 根据Id获取业务对象
	 * 
	 * @param id
	 *            业务对象主键
	 * 
	 * @return 业务对象
	 */
	@RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
	public @ResponseBody MessageResult get(@PathVariable("id") String id) {
		MessageResult result = new MessageResult();
		try {
			Object object = service.getObjectById(id);
			result.setResult(object, "获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			log.error("获取对象失败!" + e.getMessage());
			result.setError("获取对象失败!");
		}
		return result;
	}

	/**
	 * 返回符合条件的列表
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/queryList", method = { RequestMethod.POST }, consumes = "application/json")
	public @ResponseBody MessageResult queryList(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		try {
			if (map != null && map.size() > 0) {
				List list = service.queryListByExample(map);
				result.setResult(list, "获取列表对象成功!");
			} else {
				List list = service.queryList(null);
				result.setResult(list, "获取列表对象成功!");
			}
		} catch (Exception e) {
			e.printStackTrace();
			result.setError("获取列表对象失败!");
		}
		return result;
	}

	/**
	 * 返回分页对象
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/page", method = { RequestMethod.POST }, consumes = "application/json")
	public @ResponseBody MessageResult page(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		try {
			if (map != null && map.size() > 0) {
				Page page = service.getPage(map);
				result.setResult(page, "获取分页对象成功!");
			} else {
				Page page = service.getPage(new HashMap(), null, null);
				result.setResult(page, "获取分页对象成功!");
			}
		} catch (Exception e) {
			log.error("获取分页对象失败!" + e.getMessage());
			result.setError("获取分页对象失败!");
		}
		return result;
	}

	/**
	 * 返回分页对象
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/pageByUser", method = { RequestMethod.POST }, consumes = "application/json")
	public @ResponseBody MessageResult pageByUser(@RequestBody Map<String, Object> map) {
		SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		map.put("createPersonId", securityUserBeanInfo.getSecurityUserDto().getId());
		return page(map);// 如果父类的page被覆盖，为啥不调用子类的page方法？？
	}

	/**
	 * 保存实体对象
	 * 
	 * @param t
	 * @return
	 */
	@RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
	public @ResponseBody MessageResult save(@RequestBody String json) {
		MessageResult result = new MessageResult();
		try {
			Class beanClass = ClassUtils.getGenericClass(service.getClass(), 1);
			Object entity = JacksonUtils.fromJson(json, beanClass);
			// service.saveServey(userInfo,map);
			service.save(entity);
			result.setResult(null, "保存对象成功!");
		} catch (Exception e) {
			log.error("保存对象失败!" + e.getMessage());
			result.setError("保存对象失败!");
		}
		return result;
	}

	/**
	 * 修改修改实体对象
	 * 
	 * @param id
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
	public @ResponseBody MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> paramMap) {
		MessageResult result = new MessageResult();
		try {
			// 数据库中的老数据
			Object oldObj = service.getObjectById(id);
			Map<String, Object> oldMap = obj2map(oldObj);
			// //之所以不直接把json转化为map是因为json中的时间类型传过来的是时间戳、先转化为entity会把时间戳转化为date、然后在转化为json可以保证数据类型的正确性
			Class beanClass = ClassUtils.getGenericClass(service.getClass(), 1);
			// Object entity = JacksonUtils.fromJson(json, beanClass);
			// Map<String, Object> paramMap = obj2map(entity);
			oldMap.putAll(paramMap);
			// 转成实体对象做修改
			Object updateObject = this.map2obj(oldMap, beanClass);
			int updateResult = service.update(updateObject);
			result.setResult(updateResult, "更新对象成功!");
		} catch (Exception e) {
			log.error("更新对象失败!" + e.getMessage());
			result.setError("更新对象失败!");
		}
		return result;
	}

	/**
	 * 删除实体对象
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
	public @ResponseBody MessageResult delete(@PathVariable("id") String id) {
		MessageResult result = new MessageResult();
		try {
			int delResult = service.deleteObjectById(id);
			if (delResult > 0) {
				result.setResult(delResult, "删除对象成功!");
			} else {
				result.setError("删除对象失败!");
			}
		} catch (Exception e) {
			log.error("删除对象失败!" + e.getMessage());
			result.setError("删除对象失败!");
		}
		return result;
	}

	/**
	 * 删除实体对象
	 * 
	 * @param ids
	 * @return
	 */
	@RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
	public @ResponseBody MessageResult deleteBatch(@PathVariable("ids") String ids) {
		MessageResult result = new MessageResult();
		try {
			if (ids != null && ids.length() > 0) {
				List<String> list = Arrays.asList(ids.split(","));
				int delResult = service.deleteAllObjectByIds(list);
				result.setResult(delResult, "删除对象成功!");
			}
		} catch (Exception e) {
			log.error("删除对象失败!" + e.getMessage());
			result.setError("删除对象失败!");
		}
		return result;
	}

	/**
	 * 伪删除实体对象
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/deletePseudo/{id}", method = RequestMethod.DELETE)
	public @ResponseBody MessageResult deletePseudo(@PathVariable("id") String id) {
		MessageResult result = new MessageResult();
		try {
			int delResult = service.deletePseudoObjectById(id);
			if (delResult > 0) {
				result.setResult(delResult, "删除对象成功!");
			} else {
				result.setError("删除对象失败!");
			}
		} catch (Exception e) {
			log.error("更新对象失败!" + e.getMessage());
			result.setError("删除对象出错");
		}
		return result;
	}

	/**
	 * 伪删除实体对象
	 * 
	 * @param ids
	 * @return
	 */
	@RequestMapping(value = "/deletePseudoBatch/{ids}", method = RequestMethod.DELETE)
	public @ResponseBody MessageResult deletePseudoBatch(@PathVariable("ids") String ids) {
		MessageResult result = new MessageResult();
		try {
			List<String> list = Arrays.asList(ids.split(","));
			int delResult = service.deletePseudoAllObjectByIds(list);
			if (delResult > 0) {
				result.setResult(delResult, "删除对象成功!");
			} else {
				result.setError("删除对象失败!");
			}
		} catch (Exception e) {
			log.error("删除对象失败!" + e.getMessage());
			result.setError("删除更新对象失败!");
		}
		return result;
	}

	/**
	 * 获取用户信息
	 * 
	 * @return 用户信息JSON格式字符串
	 */
	protected String getUserInfoJson() {
		SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
		return userInfo;
	}

	protected MessageResult getEmptyResult() {
		MessageResult empty = new MessageResult();
		empty.setSuccess(true);
		return empty;
	}

	/******************************** 以下是工具方法 *****************************************************/
	public String getStr(Object obj) {
		return Base.getStr(obj);
	}

	public static String obj2json(Object obj) {
		return Base.obj2json(obj);
	}

	public static Map<String, Object> json2map(String json) {
		return Base.json2map(json);
	}

	public Map<String, Object> obj2map(Object obj) {
		return Base.obj2map(obj);
	}

	public <T> T map2obj(Map<String, Object> map, Class<T> clazz) {
		return Base.map2obj(map, clazz);
	}

	/**
	 * 判断对象是否为空、适用于集合、自定义Object、String <br/>
	 * 
	 * @param obj
	 *            <br/>
	 * @return 2018年1月31日上午11:14:34
	 */
	protected boolean isNotEmpty(Object obj) {
		return Base.isNotEmpty(obj);
	}

	/**
	 * 判断对象是否为空、适用于集合、自定义Object、String <br/>
	 * 
	 * @param obj
	 *            <br/>
	 * @return 2018年1月31日上午11:14:34
	 */
	protected boolean isEmpty(Object obj) {
		return Base.isEmpty(obj);
	}

	public String getStr(Map<?, ?> param, String key) {
		Object obj = param.get(key);
		if (obj == null) {
			return null;
		} else {
			return String.valueOf(obj);
		}
	}

	/******************************** 工具方法 【End】 *****************************************************/
}
