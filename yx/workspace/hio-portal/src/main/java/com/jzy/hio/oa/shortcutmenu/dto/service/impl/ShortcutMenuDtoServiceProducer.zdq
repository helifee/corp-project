package com.jzy.hio.oa.shortcutmenu.dto.service.impl;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.jzy.hio.base.utils.DubboServiceResultInfo;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.oa.shortcutmenu.dto.service.ShortcutMenuDtoServiceCustomer;
import com.jzy.hio.oa.shortcutmenu.entity.ShortcutMenu;
import com.jzy.hio.oa.shortcutmenu.service.ShortcutMenuService;

/**
 * @author admin
 */

public class ShortcutMenuDtoServiceProducer implements ShortcutMenuDtoServiceCustomer {
    private static Logger log = Logger.getLogger(ShortcutMenuDtoServiceProducer.class);
    @Autowired
    private ShortcutMenuService shortcutMenuService;
//    @Autowired
//    private FuncPermissionDtoServiceCustomer funcPermissionDtoServiceCustomer;
    @Autowired
    private ShortcutMenuDtoServiceCustomer shortcutMenuDtoServiceCustomer;

    public String save(String userInfo, String saveJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
           ShortcutMenu shortcutMenu = JacksonUtils.fromJson(saveJson, ShortcutMenu.class);

            //验证编码重复
            Map<String,Object> paramMap = new HashMap<String,Object>();
            paramMap.put("code",shortcutMenu.getCode());
            paramMap.put("resourceId",shortcutMenu.getResourceId());
            paramMap.put("ownerId",shortcutMenu.getOwnerId());
            List<ShortcutMenu> oldList = this.shortcutMenuService.queryListByExample(paramMap);
            if (oldList.size() > 0) {
                if("SHORTCUT_ADMIN".equals(shortcutMenu.getOwnerId())){
                    info.setResult(JacksonUtils.toJson(shortcutMenu));
                    info.setSucess(false);
                    info.setMsg("快捷菜单编码重复!");
                }else{
                    ShortcutMenu oldShortcutMenu = oldList.get(0);
                    if(!oldShortcutMenu.getDelflag()){
                        info.setResult(JacksonUtils.toJson(shortcutMenu));
                        info.setSucess(false);
                        info.setMsg("快捷菜单编码重复!");
                    }else{
                        oldShortcutMenu.setDelflag(false);
                        oldShortcutMenu.setCode(shortcutMenu.getCode());
                        oldShortcutMenu.setName(shortcutMenu.getName());
                        oldShortcutMenu.setOwner(shortcutMenu.getOwner());
                        oldShortcutMenu.setOwnerId(shortcutMenu.getOwnerId());
                        oldShortcutMenu.setInnerLink(shortcutMenu.getInnerLink());
                        oldShortcutMenu.setIcon(shortcutMenu.getIcon());
                        oldShortcutMenu.setLinkAddr(shortcutMenu.getLinkAddr());
                        shortcutMenuService.update(oldShortcutMenu);
                        info.setResult(JacksonUtils.toJson(shortcutMenu));
                        info.setSucess(true);
                        info.setMsg("保存对象成功!");
                    }
                }

            }else{
                shortcutMenuService.save(shortcutMenu);
                info.setResult(JacksonUtils.toJson(shortcutMenu));
                info.setSucess(true);
                info.setMsg("保存对象成功!");
            }

            //如果是管理员权限则为拥有此菜单权限的人员复制一份
            if (info.isSucess()&&"SHORTCUT_ADMIN".equals(shortcutMenu.getOwnerId())){
                new Thread(()->{
                    Map<String,Object> menuMap = new HashMap<String,Object>();
                    menuMap.put("menuId",shortcutMenu.getResourceId());
//                    String dubboInfo =  funcPermissionDtoServiceCustomer.queryUsersByMenuId(userInfo,JacksonUtils.toJson(menuMap));
//                    DubboServiceResultInfo dubboServiceResultInfo2 = JacksonUtils.fromJson(dubboInfo,DubboServiceResultInfo.class);
//                    String dubboResult = dubboServiceResultInfo2.getResult();
//                    List<Map<String,Object>> userMaps = JacksonUtils.fromJson(dubboResult,List.class,Map.class);

//                    for (Map<String,Object> userMap :userMaps) {
//                        String userId = (String) userMap.get("userId");
//                        String userName = (String) userMap.get("userName");
//                        shortcutMenu.setId(IDGenerator.getUUID ());
//                        shortcutMenu.setOwnerId(userId);
//                        shortcutMenu.setOwner(userName);
//                        String resultInfo = shortcutMenuDtoServiceCustomer.save(userInfo,JacksonUtils.toJson(shortcutMenu));
//                        log.info("快捷菜单复制至【"+userName+"】,复制结果："+resultInfo);
//                    }
                }).start();
            }

        } catch (Exception e) {
            log.error("保存对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("保存对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String saveBatch(String userInfo, String saveJsonList) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public String updateBatch(String userInfo, String updateJsonList) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public String update(String userInfo, String updateJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            ShortcutMenu shortcutMenu = JacksonUtils.fromJson(updateJson, ShortcutMenu.class);
            int result = shortcutMenuService.update(shortcutMenu);
            info.setResult(JacksonUtils.toJson(result));
            info.setSucess(true);
            info.setMsg("更新对象成功!");
        } catch (Exception e) {
            log.error("更新对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("更新对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String deleteObjectById(String userInfo, String deleteJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            ShortcutMenu shortcutMenu = JacksonUtils.fromJson(deleteJson, ShortcutMenu.class);
            int result = shortcutMenuService.deleteObjectById(shortcutMenu.getId());
            info.setResult(JacksonUtils.toJson(result));
            info.setSucess(true);
            info.setMsg("删除对象成功!");
        } catch (Exception e) {
            log.error("更新对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("删除更新对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String deleteAllObjectByIds(String userInfo, String deleteJsonList) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            if (StringUtils.isNotBlank(deleteJsonList)) {
                Map map = JacksonUtils.fromJson(deleteJsonList, HashMap.class);
                List<String> list = Arrays.asList(map.get("id").toString().split(","));
                int result = shortcutMenuService.deleteAllObjectByIds(list);
                info.setResult(JacksonUtils.toJson(result));
                info.setSucess(true);
                info.setMsg("删除对象成功!");
            }
        } catch (Exception e) {
            log.error("删除对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("删除更新对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String getObjectById(String userInfo, String getJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            ShortcutMenu shortcutMenu = JacksonUtils.fromJson(getJson, ShortcutMenu.class);
            ShortcutMenu result = shortcutMenuService.getObjectById(shortcutMenu.getId());
            info.setResult(JacksonUtils.toJson(result));
            info.setSucess(true);
            info.setMsg("获取对象成功!");
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String getPage(String userInfo, String paramater) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            if (StringUtils.isNotBlank(paramater)) {
                Map map = JacksonUtils.fromJson(paramater, HashMap.class);
                Page page = shortcutMenuService.getPage(map, (Integer) map.get("start"), (Integer) map.get("limit"));
                info.setResult(JacksonUtils.toJson(page));
                info.setSucess(true);
                info.setMsg("获取分页对象成功!");
            } else {
                Page page = shortcutMenuService.getPage(new HashMap(), null, null);
                info.setResult(JacksonUtils.toJson(page));
                info.setSucess(true);
                info.setMsg("获取分页对象成功!");
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取分页对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取分页对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String queryList(String userInfo, String paramater) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            if (StringUtils.isNotBlank(paramater)) {
                Map map = JacksonUtils.fromJson(paramater, HashMap.class);
                List list = shortcutMenuService.queryListByExample(map);
                info.setResult(JacksonUtils.toJson(list));
                info.setSucess(true);
                info.setMsg("获取列表对象成功!");
            } else {
                List list = shortcutMenuService.queryList(null);
                info.setResult(JacksonUtils.toJson(list));
                info.setSucess(true);
                info.setMsg("获取列表对象成功!");
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取列表对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取列表对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String getCount(String userInfo, String paramater) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public String deletePseudoObjectById(String userInfo, String deleteJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            ShortcutMenu shortcutMenu = JacksonUtils.fromJson(deleteJson, ShortcutMenu.class);
            int result = shortcutMenuService.deletePseudoObjectById(shortcutMenu.getId());
            info.setResult(JacksonUtils.toJson(result));
            info.setSucess(true);
            info.setMsg("删除对象成功!");
        } catch (Exception e) {
            log.error("更新对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("删除更新对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String deletePseudoAllObjectByIds(String userInfo, String deleteJsonList) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            if (StringUtils.isNotBlank(deleteJsonList)) {
                Map map = JacksonUtils.fromJson(deleteJsonList, HashMap.class);
                List<String> list = Arrays.asList(map.get("id").toString().split(","));
                int result = shortcutMenuService.deletePseudoAllObjectByIds(list);
                info.setResult(JacksonUtils.toJson(result));
                info.setSucess(true);
                info.setMsg("删除对象成功!");
            }
        } catch (Exception e) {
            log.error("删除对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("删除更新对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String updateSort(String userInfo,String paramater){
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            if (StringUtils.isNotBlank(paramater)) {
                Map map = JacksonUtils.fromJson(paramater, HashMap.class);
                int updateResult = shortcutMenuService.updateSort(map);
                info.setResult(JacksonUtils.toJson(updateResult));
                info.setSucess(true);
                info.setMsg("获取列表对象成功!");
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取列表对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取列表对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }


}
