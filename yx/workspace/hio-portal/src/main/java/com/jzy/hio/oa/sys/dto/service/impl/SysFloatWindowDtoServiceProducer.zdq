package com.jzy.hio.oa.sys.dto.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.jzy.hio.base.utils.DubboServiceResultInfo;
import com.jzy.hio.base.utils.ErrorInfoCode;
import com.jzy.hio.base.utils.IDGenerator;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.oa.sys.dto.service.SysFloatWindowDtoServiceCustomer;
import com.jzy.hio.oa.sys.entity.SysFloatWindow;
import com.jzy.hio.oa.sys.service.SysFloatWindowService;

/**
 * @author admin
 * 
 *
 */
@Service
public class SysFloatWindowDtoServiceProducer implements SysFloatWindowDtoServiceCustomer{
	private static Logger log = Logger.getLogger(SysFloatWindowDtoServiceProducer.class);
	@Autowired
	private SysFloatWindowService sysFloatWindowService;
//	@Autowired
//	private AttachmentDtoServiceCustomer attachmentDtoServiceCustomer;

	public String save(String userInfo, String saveJson){
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   SysFloatWindow sysFloatWindow=JacksonUtils.fromJson(saveJson, SysFloatWindow.class);
		   if(sysFloatWindow.getId()==null){
			   sysFloatWindow.setId(IDGenerator.getUUID());
		   }
		   sysFloatWindow.setCreateTime(new Date());
		   SecurityUserBeanInfo userBeanInfo = JacksonUtils.fromJson(userInfo, SecurityUserBeanInfo.class);
		   if(userBeanInfo!=null&&userBeanInfo.getSecurityUserDto()!=null){
			   sysFloatWindow.setCreater(userBeanInfo.getSecurityUserDto().getLoginName());
		   }
		   if(sysFloatWindow.getState()==null){
			   sysFloatWindow.setState(false);
		   }
		   //检验编码唯一行
		   if(StringUtils.isNotBlank(sysFloatWindow.getSerialNo())){
			  final Integer num =  sysFloatWindowService.checkSerialNo(sysFloatWindow);
			  if(num == 1){

				  sysFloatWindowService.save(sysFloatWindow);
				   info.setResult(JacksonUtils.toJson(sysFloatWindow));
				   info.setSucess(true);
				   info.setMsg("保存对象成功!");
			  }else{
				   info.setCode(ErrorInfoCode.UNIQUE_ERROR.getValue());
				   info.setSucess(false);
				   info.setMsg("对象编码重复!");
			  }
			   
		   }
		} catch (Exception e) {
		 log.error("保存对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("保存对象失败!");
		 info.setExceptionMsg(e.getMessage());
		 info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   SysFloatWindow sysFloatWindow=JacksonUtils.fromJson(updateJson, SysFloatWindow.class);
			   //校验编码唯一
			   final Integer num = sysFloatWindowService.checkSerialNo(sysFloatWindow);
			   if(num==1){
				   SecurityUserBeanInfo userBeanInfo = JacksonUtils.fromJson(userInfo, SecurityUserBeanInfo.class);
				   if(userBeanInfo!=null&&userBeanInfo.getSecurityUserDto()!=null){
					   sysFloatWindow.setModifier(userBeanInfo.getSecurityUserDto().getLoginName());
					   sysFloatWindow.setModifyTime(new Date());
				   }
				   int result=   sysFloatWindowService.update(sysFloatWindow);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("更新对象成功!");
			   }else{
				   info.setCode(ErrorInfoCode.UNIQUE_ERROR.getValue());
				   info.setSucess(false);
				   info.setMsg("对象编号重复!");
			   }
			  
			}catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   SysFloatWindow sysFloatWindow=JacksonUtils.fromJson(deleteJson, SysFloatWindow.class);
			   int result= sysFloatWindowService.deleteObjectById(sysFloatWindow.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			}catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= sysFloatWindowService.deleteAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}else{
					info.setCode(ErrorInfoCode.PARAMETER_ERROR.getValue());
					   info.setSucess(false);
					   info.setMsg("请求参数为空!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	 {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			SysFloatWindow sysFloatWindow=JacksonUtils.fromJson(getJson, SysFloatWindow.class);
			if(Objects.equals (sysFloatWindow.getId (),"portal")){ //首页浮动窗口数据
                Map map  = new HashMap ();
				map.put ("state",true);
				map.put ("delflag",false);
			List<SysFloatWindow> sysFloatWindows = 	sysFloatWindowService.queryListByExample (map);
				if(sysFloatWindows!=null&&!sysFloatWindows.isEmpty ()){
				  SysFloatWindow floatWindow = sysFloatWindows.get (0);
					if(System.currentTimeMillis ()>=floatWindow.getAutomaticTime ().getTime ()
							){
                        if(floatWindow.getExpiredTime ()==null||System.currentTimeMillis ()<floatWindow.getExpiredTime ().getTime ()){
							Map<String, Object> postMap = new HashMap ();
							postMap.put ("businessId", Arrays.asList (new String[]{floatWindow.getId ()}));
							postMap.put ("appId", "floatWindow");
							postMap.put ("categoryId", "1");
//							String resultJson = attachmentDtoServiceCustomer.queryListByObject (userInfo, JacksonUtils.toJson (postMap));
//							DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson (resultJson, DubboServiceResultInfo.class);
//							List<AttachmentDto> attachmentDtos = JacksonUtils.fromJson (dubboServiceResultInfo.getResult (), List.class, AttachmentDto.class);
//							if(attachmentDtos!=null&&!attachmentDtos.isEmpty ()){
//								AttachmentDto attachmentDto = attachmentDtos.get (0);
//								floatWindow.setFile (attachmentDto.getUrl ());
//							}
							info.setResult(JacksonUtils.toJson(floatWindow));
							info.setSucess(true);
							info.setMsg("获取对象成功!");
						}else{
							info.setCode(ErrorInfoCode.NULL_ERROR.getValue());
							info.setSucess(false);
							info.setMsg("对象数据为空!");
						}
					}else{
						info.setCode(ErrorInfoCode.NULL_ERROR.getValue());
						info.setSucess(false);
						info.setMsg("对象数据为空!");
					}
				}else{
					info.setCode(ErrorInfoCode.NULL_ERROR.getValue());
					info.setSucess(false);
					info.setMsg("对象数据为空!");
				}
			}else{
				SysFloatWindow	result = sysFloatWindowService.getObjectById(sysFloatWindow.getId());
				if(result!=null){
					info.setResult(JacksonUtils.toJson(result));
					info.setSucess(true);
					info.setMsg("获取对象成功!");
				}else{
					info.setCode(ErrorInfoCode.NULL_ERROR.getValue());
					info.setSucess(false);
					info.setMsg("对象数据为空!");
				}
			}
		}catch (Exception e) {
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				Page page=sysFloatWindowService.getPage(map, (Integer)map.get("start"),  (Integer)map.get("limit"));
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=sysFloatWindowService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		}catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		List list = new ArrayList();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				 list=sysFloatWindowService.queryListByExample(map);
			}else{
				list=sysFloatWindowService.queryList(null);
			}
			if (list != null && !list.isEmpty()) {
				Collections.sort(list, new Comparator<SysFloatWindow>() {
					@Override
					public int compare(SysFloatWindow o1, SysFloatWindow o2) {
						if (o1.getCreateTime().getTime() > o2.getCreateTime()
								.getTime()) {
							return -1;
						} else if (o1.getCreateTime().getTime() == o2
								.getCreateTime().getTime()) {
							return 0;
						} else {
							return 1;
						}
					}
				});
					info.setResult(JacksonUtils.toJson(list));
					info.setSucess(true);
					info.setMsg("获取列表数据成功!");
			}else{
				info.setCode(ErrorInfoCode.NULL_ERROR.getValue());
				info.setSucess(false);
				info.setMsg("列表数据为空!");
			}
		}catch (Exception e) {
			// TODO Auto-generated catch block
			 e.printStackTrace();
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
			return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   SysFloatWindow sysFloatWindow=JacksonUtils.fromJson(deleteJson, SysFloatWindow.class);
			   int result= sysFloatWindowService.deletePseudoObjectById(sysFloatWindow.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			}catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo, String deleteJsonList)
   {
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= sysFloatWindowService.deletePseudoAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}else{
					   info.setCode(ErrorInfoCode.PARAMETER_ERROR.getValue());
					   info.setSucess(false);
					   info.setMsg("请求参数为空!");
				}
			}catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
			}
		   return JacksonUtils.toJson(info);
	}
	/**
	 * 窗口模糊查询：名字或编码
	 */
	@Override
	public String fuzzySearch(String userInfo, String paramaterJson) {
		
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(paramaterJson)) {
				   Map map=JacksonUtils.fromJson(paramaterJson, HashMap.class);
				   List list= sysFloatWindowService.fuzzySearch(map);
				   if(list!=null&&!list.isEmpty()){
					   info.setResult(JacksonUtils.toJson(list));
					   info.setSucess(true);
					   info.setMsg("模糊查询对象成功!"); 
				   }else{
					   info.setCode(ErrorInfoCode.NULL_ERROR.getValue());
					   info.setSucess(false);
					   info.setMsg("列表数据为空!"); 
				   }
				  
				}else{
					   info.setCode(ErrorInfoCode.PARAMETER_ERROR.getValue());
					   info.setSucess(false);
					   info.setMsg("请求参数为空!");
				}
			}catch (Exception e) {
				 log.error("模糊查询对象失败!"+e.getMessage());
				 info.setSucess(false);
				 info.setMsg("模糊查询对象失败!");
				 info.setExceptionMsg(e.getMessage());
				 info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
			}
		   return JacksonUtils.toJson(info);
	}



}
