package com.jzy.hio.oa.sys.dto.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.jzy.hio.base.utils.DubboServiceResultInfo;
import com.jzy.hio.base.utils.ErrorInfoCode;
import com.jzy.hio.base.utils.IDGenerator;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.oa.sys.dto.service.SysNaviMenuDtoServiceCustomer;
import com.jzy.hio.oa.sys.entity.SysNaviMenu;
import com.jzy.hio.oa.sys.service.SysNaviMenuService;

/**
 * @author admin
 * 
 *
 */
@Service
public class SysNaviMenuDtoServiceProducer implements SysNaviMenuDtoServiceCustomer{
	private static Logger log = Logger.getLogger(SysNaviMenuDtoServiceProducer.class);
	@Autowired
	private SysNaviMenuService sysNaviMenuService;
//	@Value("#{configuration['privateKey']}")
	private String privateKey;
//	@Value("#{configuration['LLOA_privateKey']}")
	private String LLOAPrivateKey;


	public String save(String userInfo, String saveJson){
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   SysNaviMenu sysNaviMenu=JacksonUtils.fromJson(saveJson, SysNaviMenu.class);
		   if(sysNaviMenu.getId()==null){
			   sysNaviMenu.setId(IDGenerator.getUUID());
		   }
		   int sid = sysNaviMenuService.getMaxSidByPid(sysNaviMenu.getParentId());
			   sysNaviMenu.setSort(sid+1);
		   //编号唯一性校验
		   final Integer num = sysNaviMenuService.checkSerialNo(sysNaviMenu);
		   if(num==1){
			   sysNaviMenuService.save(sysNaviMenu);

			   //当所属门户选择不存在于父级菜单所属门户时更新父级菜单所属门户
			   updateParentNaviMenu(sysNaviMenu);

			   info.setResult(JacksonUtils.toJson(sysNaviMenu));
			   info.setSucess(true);
			   info.setMsg("保存对象成功!");

		   }else{
			   info.setSucess(false);
			   info.setMsg("对象编码重复!");
			   info.setCode(ErrorInfoCode.UNIQUE_ERROR.getValue());
		   }
		  
		} catch (Exception e) {
		 log.error("保存对象失败!"+e.getMessage());
		 e.printStackTrace();
		 info.setSucess(false);
		 info.setMsg("保存对象失败!");
		 info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	/**
	 * //当所属门户选择不存在于父级菜单所属门户时更新父级菜单所属门户
	 * @param sysNaviMenu
	 * @throws Exception
	 */
	private void updateParentNaviMenu(SysNaviMenu sysNaviMenu) throws Exception{
		String parentId = sysNaviMenu.getParentId();
		String portalId = sysNaviMenu.getPortalId();
		String portalName = sysNaviMenu.getPortalName();
		if (StringUtils.isNotBlank(parentId)&&StringUtils.isNotBlank(portalId)){
			SysNaviMenu parentNaviMenu = sysNaviMenuService.getObjectById(sysNaviMenu.getParentId());
			String pPortalId = parentNaviMenu.getPortalId();
			String pPortalName = parentNaviMenu.getPortalName();
			String[] portalIdArr = portalId.split(",");
			String[] portalNameArr = portalName.split(",");
			boolean saveFlag = false;
			for (int i = 0; i < portalIdArr.length; i++) {
				if(!pPortalId.contains(portalIdArr[i])){
					pPortalId += "," + portalIdArr[i];
					pPortalName += "," + portalNameArr[i];
					saveFlag = true;
				};
			}
			if(saveFlag){
				if(pPortalId.indexOf(",")==0){
					pPortalId = pPortalId.substring(1);
					pPortalName = pPortalName.substring(1);
				}
				parentNaviMenu.setPortalId(pPortalId);
				parentNaviMenu.setPortalName(pPortalName);
				sysNaviMenuService.update(parentNaviMenu);
			}

		}
	}
	@Override
	public String saveBatch(String userInfo, String saveJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   SysNaviMenu sysNaviMenu = JacksonUtils.fromJson (updateJson,SysNaviMenu.class);
			   Map<String,Object> naviMenuMap=JacksonUtils.fromJson(updateJson, Map.class);
			   //编号唯一性校验
			   final Integer num = sysNaviMenuService.checkSerialNo(sysNaviMenu);
			   if(num==1){
				   int result = sysNaviMenuService.updateNaviMenu(sysNaviMenu);
				   if(sysNaviMenu.getState ()&& Objects.equals (naviMenuMap.get ("isChildren"),true)){
					   sysNaviMenuService.updateChildrenState (sysNaviMenu);
				   }
				   //当所属门户选择不存在于父级菜单所属门户时更新父级菜单所属门户
				   updateParentNaviMenu(sysNaviMenu);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("更新对象成功!");
			   }else{
				   info.setCode(ErrorInfoCode.UNIQUE_ERROR.getValue());
				   info.setSucess(false);
				   info.setMsg("对象编码重复!");
			   }
			   
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   SysNaviMenu sysNaviMenu=JacksonUtils.fromJson(deleteJson, SysNaviMenu.class);
			   int result= sysNaviMenuService.deleteObjectById(sysNaviMenu.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= sysNaviMenuService.deleteAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}else{
					info.setCode(ErrorInfoCode.PARAMETER_ERROR.getValue());
					info.setSucess(false);
					info.setMsg("请求参数为空!");
					
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	 {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			SysNaviMenu sysNaviMenu=JacksonUtils.fromJson(getJson, SysNaviMenu.class);
			SysNaviMenu	result = sysNaviMenuService.getObjectById(sysNaviMenu.getId());
			if(result!=null){
				info.setResult(JacksonUtils.toJson(result));
			    info.setSucess(true);
			    info.setMsg("获取对象成功!");
			}else{
				info.setCode(ErrorInfoCode.NULL_ERROR.getValue());
				info.setSucess(false);
				info.setMsg("对象数据为空!");
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				Page page=sysNaviMenuService.getPage(map, (Integer)map.get("start"),  (Integer)map.get("limit"));
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=sysNaviMenuService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			List list = new ArrayList();
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				 list=sysNaviMenuService.queryListByExample(map);
			}else{
				 list=sysNaviMenuService.queryList(null);
			}
			if(list!=null&&!list.isEmpty()){
				info.setResult(JacksonUtils.toJson(list));
				info.setSucess(true);
				info.setMsg("获取列表对象成功!");
			}else{
				info.setCode(ErrorInfoCode.NULL_ERROR.getValue());
				info.setSucess(false);
				info.setMsg("列表对象为空!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   SysNaviMenu sysNaviMenu=JacksonUtils.fromJson(deleteJson, SysNaviMenu.class);
			   int result= sysNaviMenuService.deletePseudoObjectById(sysNaviMenu.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
			 
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= sysNaviMenuService.deletePseudoAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}else{
					 info.setCode(ErrorInfoCode.PARAMETER_ERROR.getValue());
					 info.setSucess(false);
					 info.setMsg("请求参数为空!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
			}
		   return JacksonUtils.toJson(info);
	}
	/**
	 * 获取菜单树
	 */
	@Override
	public String getTree(String userInfo, String state) {
		
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try{
			List rootList = new ArrayList();
		    //state=1 portal页获取展示菜单树 ；state2  后台定义获取整体菜单树
		    rootList = "1".equals(state)?sysNaviMenuService.queryZTreeMenu():sysNaviMenuService.queryRootMenu(state);
			 if(rootList!=null&&!rootList.isEmpty()){
			    	info.setResult(JacksonUtils.toJson(rootList));
				    info.setSucess(true);
				    info.setMsg("获取列表数据成功!");
			    }else{
			    	info.setCode(ErrorInfoCode.NULL_ERROR.getValue());
					info.setSucess(false);
					info.setMsg("列表数据为空!");
			    }
		   
		}catch(Exception e){
			log.error("获取列表数据失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表数据失败!");
			 info.setExceptionMsg(e.getMessage());
			 info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return JacksonUtils.toJson(info);
	}
    /**
     * 菜单位移：  上移
     */
	@Override
	public String toPre(String userInfo, String paramer) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
			try{
				SysNaviMenu arg = JacksonUtils.fromJson(paramer, SysNaviMenu.class);
				int result = sysNaviMenuService.updateToPre(arg);
				if(result!=-1){
					info.setResult(JacksonUtils.toJson(result));
					info.setSucess(true);
					info.setMsg("上移成功！");
				}else{
					info.setResult(JacksonUtils.toJson(result));
					info.setSucess(true);
					info.setMsg("已经移到顶部！");
				}
			}catch(Exception e){
				log.error("上移失败！"+e.getMessage());
				 info.setSucess(false);
				 info.setMsg("上移失败!");
				 info.setExceptionMsg(e.getMessage());
				 info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
			}
			return JacksonUtils.toJson(info);
	}
	  /**
     * 菜单位移：  下移
     */
	@Override
	public String toNext(String userInfo, String paramer) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try{
			SysNaviMenu arg = JacksonUtils.fromJson(paramer, SysNaviMenu.class);
			int result = sysNaviMenuService.updateToNext(arg);
			if(result!=-1){
				info.setResult(JacksonUtils.toJson(result));
				info.setSucess(true);
				info.setMsg("下移成功！");
			}else{
				info.setResult(JacksonUtils.toJson(result));
				info.setSucess(true);
				info.setMsg("已经移到底部！");
			}
		}catch(Exception e){
			log.error("下移失败！"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("下移失败!");
			 info.setExceptionMsg(e.getMessage());
			 info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return JacksonUtils.toJson(info);
	}
    /**
     * 菜单模糊查询：  名称 或者 菜单名称
     */
	@Override
	public String fuzzySearch(String userInfo, String paramaterJson) {
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(paramaterJson)) {
				   Map map=JacksonUtils.fromJson(paramaterJson, HashMap.class);
				   List list= sysNaviMenuService.fuzzySearch(map);
				   if(list!=null&&!list.isEmpty()){
					   info.setResult(JacksonUtils.toJson(list));
					   info.setSucess(true);
					   info.setMsg("模糊查询对象成功!");
				   }else{
					   info.setCode(ErrorInfoCode.NULL_ERROR.getValue());
					   info.setSucess(false);
					   info.setMsg("列表数据为空!"); 
				   }
				}else{
					  info.setCode(ErrorInfoCode.PARAMETER_ERROR.getValue());
					   info.setSucess(false);
					   info.setMsg("请求参数为空!");
				}
			} catch (Exception e) {
			 log.error("模糊查询对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("模糊查询对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
			}
		   return JacksonUtils.toJson(info);
	}
	public Map<String,String> getKey(){
	    Map<String,String> keyMap = new HashMap<> ();
		keyMap.put ("privateKey",privateKey);
		keyMap.put ("LLOAPrivateKey",LLOAPrivateKey);
		return keyMap;
	}

	@Override
	public String queryListByPortalId(String userInfo, String parameterJson) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			List list = new ArrayList();
			if(StringUtils.isNotBlank(parameterJson)){
				Map map=JacksonUtils.fromJson(parameterJson, HashMap.class);
				list=sysNaviMenuService.queryListByPortalId(map);
			}else{
				list=sysNaviMenuService.queryListByPortalId(null);
			}
			if(list!=null&&!list.isEmpty()){
				info.setResult(JacksonUtils.toJson(list));
				info.setSucess(true);
				info.setMsg("获取列表对象成功!");
			}else{
				info.setCode(ErrorInfoCode.NULL_ERROR.getValue());
				info.setSucess(false);
				info.setMsg("列表对象为空!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			log.error("获取列表对象失败!"+e.getMessage());
			info.setSucess(false);
			info.setMsg("获取列表对象失败!");
			info.setExceptionMsg(e.getMessage());
			info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return JacksonUtils.toJson(info);
	}
}
