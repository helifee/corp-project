package com.jzy.hio.oa.content.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.utils.IDGenerator;
import com.jzy.hio.base.utils.LoginUtils;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.oa.content.entity.ContentRowAttribute;
import com.jzy.hio.oa.content.service.ContentRowAttributeService;
import com.jzy.tools.data.JacksonUtils;


/**
 * 数据项属性设置控制层
 *
 * @author admin
 */
@RestController
@Api(tags = {"数据项属性设置相关接口"})
@RequestMapping("/content/contentRowAttribute")
public class ContentRowAttributeController extends ResponseModel {

	private static Logger log = LoggerFactory.getLogger(ContentRowAttributeController.class);

    @Autowired
    private ContentRowAttributeService contentRowAttributeService;

    /**
     * 根据Id获取业务对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @ApiOperation(value = "根据Id获取数据项属性详情",notes = "根据Id获取数据项属性详情")
   	@ApiImplicitParams(@ApiImplicitParam(name = "id",value = "数据项属性信息id",required = true,dataType = "String",paramType = "path"))
    @RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
    public MessageResult get(@PathVariable("id") String id) {
    	try {
    		ContentRowAttribute contentRowAttribute = contentRowAttributeService.getObjectById(id);
			return getSuccessResultModel(contentRowAttribute);
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
    	
    	
        /*MessageResult result = new MessageResult();
        try {
            String dubboResultInfo = contentRowAttributeDtoServiceCustomer.getObjectById(getUserJson(), "{\"id\":\"" + id + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                ContentRowAttributeDto contentRowAttributeDto = JacksonUtils.fromJson(resultInfo, ContentRowAttributeDto.class);
                result.setResult(contentRowAttributeDto);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }


    /**
     * 返回分页对象
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "查询数据项属性信息分页列表",notes = "查询数据项属性信息分页列表")
   	@ApiImplicitParam(name = "map",value = "",required = true,dataType = "JSON")
    @RequestMapping(value = "/page", method = {RequestMethod.POST}, consumes = "application/json")
    public MessageResult page(@RequestBody Map<String, Object> map) {
    	try {
			Page page = contentRowAttributeService.getPage(map);
			return getSuccessResultModel(page);
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
    	
    	/*MessageResult result = new MessageResult();
        String paramaterJson = JacksonUtils.toJson(map);
        try {
            String dubboResultInfo = contentRowAttributeDtoServiceCustomer.getPage(getUserJson(), paramaterJson);
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                PageBeanInfo pageInfo = JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
                result.setResult(pageInfo);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用page方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }

    /**
     * 返回符合条件的列表
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "查询条件返回符合条件列表",notes = "查询条件返回符合条件列表")
   	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "contentRowAttribute",value = "condition query",required = true,dataType = "String")})
    @RequestMapping(value = "/queryList", method = {RequestMethod.POST}, consumes = "application/json")
    public MessageResult queryList(@RequestBody ContentRowAttribute contentRowAttribute) {
    	try {
			List<ContentRowAttribute> list = contentRowAttributeService.queryList(contentRowAttribute);
			return  getSuccessResultModel(list); 
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
    	
    	
        /*MessageResult result = new MessageResult();
        String paramaterJson = JacksonUtils.toJson(map);
        try {
            String dubboResultInfo = contentRowAttributeDtoServiceCustomer.queryList(getUserJson(), paramaterJson);
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                List<ContentRowAttributeDto> list = JacksonUtils.fromJson(resultInfo, ArrayList.class, ContentRowAttributeDto.class);
                result.setResult(list);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }

        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用queryList方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }


    /**
     * 保存实体对象
     *
     * @param t
     * @return
     */
    @ApiOperation(value = "保存contentRowAttribute实体",notes = "保存contentRowAttribute实体")
   	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "contentRowAttribute",value = "save",required = true,dataType = "String")})
    @RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
    public MessageResult save(@RequestBody ContentRowAttribute contentRowAttribute) {
    	try {
			int save = contentRowAttributeService.save(contentRowAttribute);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.SAVESUCCESS.getMsg());
			successResultModel.setResult(save);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.SAVEERROR.getMsg());
		}
    	
    	
        /*MessageResult result = new MessageResult();
        try {
            String saveJson = JacksonUtils.toJson(t);
            String save = contentRowAttributeDtoServiceCustomer.save(getUserJson(), saveJson);
            String dubboResultInfo = save;
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                ContentRowAttributeDto contentRowAttributeDto = JacksonUtils.fromJson(resultInfo, ContentRowAttributeDto.class);
                result.setResult(contentRowAttributeDto);
                result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
                result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.SAVEERROR.isResult());
                String msg = dubboServiceResultInfo.getExceptionMsg()==null?dubboServiceResultInfo.getMsg():dubboServiceResultInfo.getExceptionMsg();
                result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + msg + "】");
            }
        } catch (Exception e) {
            try {
                //e.printStackTrace();
                ObjectMapper mapper = new ObjectMapper();
                String paramJson = mapper.writeValueAsString(t);
                log.error("调用save方法:  【参数" + paramJson + "】======" + "【" + e.getMessage() + "】");
                result.setSuccess(MessageInfo.SAVEERROR.isResult());
                result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + e.getMessage() + "】");
            } catch (JsonProcessingException e1) {
                // TODO Auto-generated catch block
                //e1.printStackTrace();
            }

        }
        return result;*/
    }

    /**
     * 删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "删除contentRowAttribute实体",notes = "删除contentRowAttribute实体")
	@ApiImplicitParam(name = "id",value = "contentRowAttribute id",required = true,dataType = "String",paramType = "path")
    @RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
    public MessageResult delete(@PathVariable("id") String id) {
    	try {
			int deleteObjectById = contentRowAttributeService.deleteObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deleteObjectById);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
    	
       /* MessageResult result = new MessageResult();
        try {
            String dubboResultInfo = contentRowAttributeDtoServiceCustomer.deleteObjectById(getUserJson(), "{\"id\":\"" + id + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                ContentRowAttributeDto contentRowAttributeDto = JacksonUtils.fromJson(resultInfo, ContentRowAttributeDto.class);
                result.setResult(contentRowAttributeDto);
                result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
                result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.DELETEERROR.isResult());
                result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用delete方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.DELETEERROR.isResult());
            result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
        }

        return result;*/
    }


    /**
     * 删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "删除contentRowAttribute实体",notes = "删除contentRowAttribute实体")
   	@ApiImplicitParam(name = "ids",value = "contentRowAttribute ids",required = true,dataType = "String",paramType = "path")
    @RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
    public MessageResult deleteBatch(@PathVariable("ids") String ids) {
    	try {
			List<String> deleteMethod =  Arrays.asList(ids.split(","));
			int count = contentRowAttributeService.deleteAllObjectByIds(deleteMethod);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(count);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
    	
    	
        /*MessageResult result = new MessageResult();
        try {
            String dubboResultInfo = contentRowAttributeDtoServiceCustomer.deleteAllObjectByIds(getUserJson(), "{\"id\":\"" + ids + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                ContentRowAttributeDto contentRowAttributeDto = JacksonUtils.fromJson(resultInfo, ContentRowAttributeDto.class);
                result.setResult(contentRowAttributeDto);
                result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
                result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.DELETEERROR.isResult());
                result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用delete方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.DELETEERROR.isResult());
            result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
        }

        return result;*/
    }

    /**
     * 修改修改实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "修改contentRowAttribute实体",notes = "修改contentRowAttribute实体")
   	@ApiImplicitParam(name = "id",value = "contentRowAttribute id",required = true,dataType = "String",paramType = "path")
    @RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
    public MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
    	try {
    		ContentRowAttribute contentRowAttribute = contentRowAttributeService.getObjectById(id);
			String json = JacksonUtils.toJson(contentRowAttribute);
			Map<String,Object> oldMap= JacksonUtils.fromJson(json, HashMap.class);
			oldMap.putAll(map);
			String updateJson= JacksonUtils.toJson(oldMap);
			ContentRowAttribute fromJson = JacksonUtils.fromJson(updateJson, ContentRowAttribute.class);
			int updateCount = contentRowAttributeService.update(fromJson);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.UPDATESUCCESS.getMsg());
			successResultModel.setResult(updateCount);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.UPDATEERROR.getMsg());
		}
    	
    	
    	
        /*MessageResult result = new MessageResult();
        ContentRowAttributeDto contentRowAttributeDto = null;
        try {
            String dubboResultInfo = contentRowAttributeDtoServiceCustomer.getObjectById(getUserJson(), "{\"id\":\"" + id + "\"}");
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                Map<String, Object> oldMap = JacksonUtils.fromJson(resultInfo, HashMap.class);
                oldMap.putAll(map);
                String updateJson = JacksonUtils.toJson(oldMap);
                String updateDubboResultInfo = contentRowAttributeDtoServiceCustomer.update(getUserJson(), updateJson);
                DubboServiceResultInfo updateDubboServiceResultInfo = JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
                if (updateDubboServiceResultInfo.isSucess()) {
                    Integer i = JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class);
                    result.setResult(i);
                    result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
                    result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
                } else {
                    result.setSuccess(MessageInfo.UPDATEERROR.isResult());
                    String msg = updateDubboServiceResultInfo.getExceptionMsg()==null?updateDubboServiceResultInfo.getMsg():updateDubboServiceResultInfo.getExceptionMsg();
                    result.setMsg(updateDubboServiceResultInfo.getMsg() + "【" + msg + "】");
                }
            } else {
                result.setSuccess(MessageInfo.UPDATEERROR.isResult());
                result.setMsg("不存在更新的对象");
            }
        } catch (Exception e) {
            try {
                //e.printStackTrace();
                ObjectMapper mapper = new ObjectMapper();
                String paramJson = mapper.writeValueAsString(contentRowAttributeDto);
                log.error("调用update方法:  【参数" + id + "," + paramJson + "】======" + "【" + e.getMessage() + "】");
                result.setSuccess(MessageInfo.UPDATEERROR.isResult());
                result.setMsg(MessageInfo.UPDATEERROR.getMsg() + "【" + e.getMessage() + "】");
            } catch (JsonProcessingException e1) {
                // TODO Auto-generated catch block
                //e1.printStackTrace();
            }

        }
        return result;*/
    }

    /**
     * author:wangw
     * 删除实体对象
     *
     * @param t
     * @return oper 是操作类型  增删改查
     */
    @ApiOperation(value = "保存contentRowAttribute实体",notes = "保存contentRowAttribute实体")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "contentRowAttribute",value = "contentRowAttribute",required = true,dataType = "String")})
    @RequestMapping(value = "/saveOrUpdateRow", method = RequestMethod.POST)
    public MessageResult saveOrUpdateRow(@RequestBody ContentRowAttribute contentRowAttribute, String oper) {
    	MessageResult result = new MessageResult();
        if (!"".equals(oper) && null != oper) {
            if ("del".equals(oper)) {
            	try {
            		int deletePseudoObjectById = contentRowAttributeService.deletePseudoObjectById(contentRowAttribute.getId());
            		MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
            		successResultModel.setResult(deletePseudoObjectById);
            		return successResultModel;
            	} catch (Exception e) {
        			log.error("-----------"+e.getMessage()+"------------");   			
        			e.printStackTrace();
        			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
        		}
            } else if ("add".equals(oper)) {
            	try {
	            	contentRowAttribute.setId(IDGenerator.getUUID());
	            	int save = contentRowAttributeService.save(contentRowAttribute);
	    			MessageResult successResultModel = getSuccessResultModel(MessageInfo.SAVESUCCESS.getMsg());
	    			successResultModel.setResult(save);
	    			return successResultModel;
            	} catch (Exception e) {
        			log.error("-----------"+e.getMessage()+"------------");   			
        			e.printStackTrace();
        			return getErrorResultModel(MessageInfo.SAVEERROR.getMsg());
        		}
            	
            } else if ("edit".equals(oper)) {
            	try {
            		ContentRowAttribute _contentRowAttribute = contentRowAttributeService.getObjectById(contentRowAttribute.getId());
        			String json = JacksonUtils.toJson(_contentRowAttribute);
        			Map<String,Object> oldMap= JacksonUtils.fromJson(json, HashMap.class);
        			oldMap.put("code", contentRowAttribute.getFieldCode());
        			String updateJson= JacksonUtils.toJson(oldMap);
        			ContentRowAttribute fromJson = JacksonUtils.fromJson(updateJson, ContentRowAttribute.class);
        			int updateCount = contentRowAttributeService.update(fromJson);
        			MessageResult successResultModel = getSuccessResultModel(MessageInfo.UPDATESUCCESS.getMsg());
        			successResultModel.setResult(updateCount);
        			return successResultModel;
        		} catch (Exception e) {
        			log.error("-----------"+e.getMessage()+"------------");
        			e.printStackTrace();
        			return getErrorResultModel(MessageInfo.UPDATEERROR.getMsg());
        		}
            }

        }
        return result;
    	
    	
        /*MessageResult result = new MessageResult();
        if (StringUtils.isNotEmpty(oper)) {
            if ("del".equals(oper)) {
                String dubboResultInfo = contentRowAttributeDtoServiceCustomer.deleteObjectById(getUserJson(), "{\"id\":\"" + t.getId() + "\"}");
                DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
                if (dubboServiceResultInfo.isSucess()) {
                    String resultInfo = dubboServiceResultInfo.getResult();
                    ContentRowAttributeDto customArchivesDto = JacksonUtils.fromJson(resultInfo, ContentRowAttributeDto.class);
                    result.setResult(customArchivesDto);
                    result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
                    result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
                } else {
                    result.setSuccess(MessageInfo.DELETEERROR.isResult());
                    result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
                }
            } else if ("add".equals(oper)) {
                t.setId(IDGenerator.getUUID());
                // t.setContentTypeId(contentTypeId.split(",")[0]);
                String saveJson = JacksonUtils.toJson(t);
                String dubboResultInfo = contentRowAttributeDtoServiceCustomer.save(getUserJson(), saveJson);
                DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
                if (dubboServiceResultInfo.isSucess()) {
                    String resultInfo = dubboServiceResultInfo.getResult();
                    ContentRowAttributeDto customArchivesDto = JacksonUtils.fromJson(resultInfo, ContentRowAttributeDto.class);
                    result.setResult(customArchivesDto);
                    result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
                    result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
                } else {
                    result.setSuccess(MessageInfo.SAVEERROR.isResult());
                    result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
                }
            } else if ("edit".equals(oper)) {
                String dubboResultInfo = contentRowAttributeDtoServiceCustomer.getObjectById(getUserJson(), "{\"id\":\"" + t.getId() + "\"}");
                DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
                if (dubboServiceResultInfo.isSucess()) {
                    String resultInfo = dubboServiceResultInfo.getResult();
                    Map<String, Object> oldMap = JacksonUtils.fromJson(resultInfo, HashMap.class);
                    oldMap.put("code", t.getFieldCode());
                    String updateJson = JacksonUtils.toJson(oldMap);
                    String updateDubboResultInfo = contentRowAttributeDtoServiceCustomer.update(getUserJson(), updateJson);
                    DubboServiceResultInfo updateDubboServiceResultInfo = JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
                    if (updateDubboServiceResultInfo.isSucess()) {
                        Integer i = JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class);
                        result.setResult(i);
                        result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
                        result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
                    } else {
                        result.setSuccess(MessageInfo.UPDATEERROR.isResult());
                        result.setMsg(updateDubboServiceResultInfo.getMsg() + "【" + updateDubboServiceResultInfo.getExceptionMsg() + "】");
                    }
                } else {
                    result.setSuccess(MessageInfo.UPDATEERROR.isResult());
                    result.setMsg("不存在更新的对象");
                }
            }

        }
        return result;*/

    }


    /**
     * 返回分页对象,不带任何分页信息
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "查询数据字典信息分页列表",notes = "查询数据字典信息分页列表")
   	@ApiImplicitParam(name = "map",value = "",required = true,dataType = "JSON")
    @RequestMapping(value = "/pageInfo", method = {RequestMethod.POST}, consumes = "application/json")
    public MessageResult pageInfo(@RequestBody Map<String, Object> map) {
    	try {
			Page page = contentRowAttributeService.getContentRowAttributeByPage(map);
			return getSuccessResultModel(page);
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
		}
    	
        /*MessageResult result = new MessageResult();
        String paramaterJson = JacksonUtils.toJson(map);
        try {
            String dubboResultInfo = contentRowAttributeDtoServiceCustomer.getPageInfo(getUserJson(), paramaterJson);
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                PageBeanInfo pageInfo = JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
                result.setResult(pageInfo);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用page方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }


    /**
     * 根据大类Id获取数据属性对象
     *
     * @param contentTypeId 业务对象主键
     * @return 业务对象
     */
    @ApiOperation(value = "伪删除实体对象contentRowAttribute实体",notes = "伪删除实体对象contentRowAttribute实体")
    @ApiImplicitParams({@ApiImplicitParam(paramType="path",dataType = "String",name = "id",value = "id",required = true)})
    @RequestMapping(value = "/queryContentRowAttributeList/{contentTypeId}", method = RequestMethod.GET)
    public MessageResult queryContentRowAttributeList(@PathVariable("contentTypeId") String contentTypeId) {
        try {
        	List<ContentRowAttribute> list = contentRowAttributeService.queryContentRowAttributeList(contentTypeId);
        	return  getSuccessResultModel(list); 
        } catch (Exception e) {
        	log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel();
        }
    	
        /*MessageResult result = new MessageResult();
        try {
            String dubboResultInfo = contentRowAttributeDtoServiceCustomer.queryContentRowAttributeList(getUserJson(), contentTypeId);
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                List<ContentRowAttributeDto> list = JacksonUtils.fromJson(resultInfo, ArrayList.class, ContentRowAttributeDto.class);
                result.setResult(list);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用queryContentRowAttributeList方法:  【参数" + contentTypeId + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }


    /**
     * 批量修改修改实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "修改contentRowAttribute实体",notes = "修改contentRowAttribute实体")
    @ApiImplicitParam(name = "id",value = "contentDictionary id",required = true,dataType = "String",paramType = "path")
    @RequestMapping(value = "/updateBatchAttribute/{id}", method = RequestMethod.PUT, consumes = "application/json")
    public MessageResult updateBatchAttribute(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
    	try {
    		map.put("ids", id);
			int upate = contentRowAttributeService.updateBatchAttribute(map);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.UPDATESUCCESS.getMsg());
			successResultModel.setResult(upate);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.UPDATEERROR.getMsg());
		}
    	
    	
        /*MessageResult result = new MessageResult();
        ContentRowAttributeDto contentRowAttributeDto = null;
        map.put("ids", id);
        try {
            String dubboResultInfo = contentRowAttributeDtoServiceCustomer.updateBatchAttribute(getUserJson(), JacksonUtils.toJson(map));
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                Integer i = JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), Integer.class);
                result.setResult(i);
                result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
                result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.UPDATEERROR.isResult());
                result.setMsg("不存在更新的对象");
            }
        } catch (Exception e) {
            try {
                //e.printStackTrace();
                ObjectMapper mapper = new ObjectMapper();
                String paramJson = mapper.writeValueAsString(contentRowAttributeDto);
                log.error("调用update方法:  【参数" + id + "," + paramJson + "】======" + "【" + e.getMessage() + "】");
                result.setSuccess(MessageInfo.UPDATEERROR.isResult());
                result.setMsg(MessageInfo.UPDATEERROR.getMsg() + "【" + e.getMessage() + "】");
            } catch (JsonProcessingException e1) {
                // TODO Auto-generated catch block
                //e1.printStackTrace();
            }

        }
        return result;*/
    }

    /**
     * 根据大类ID获取列表页查询条件
     *
     * @param contentTypeId 业务对象主键
     * @return 业务对象
     */
    @RequestMapping(value = "/queryContentRowQueryAttributeList/{contentTypeId}", method = RequestMethod.POST)
    public MessageResult queryContentRowQueryAttributeList(@PathVariable("contentTypeId") String contentTypeId, @RequestBody Map<String, Object> map) {
    	 try {
         	List<ContentRowAttribute> list = contentRowAttributeService.queryContentRowQueryAttributeList(contentTypeId);
         	return  getSuccessResultModel(list); 
         } catch (Exception e) {
         	log.error("-----------"+e.getMessage()+"------------");   			
 			e.printStackTrace();
 			return getErrorResultModel();
         }
    	
    	
    	
    	/*MessageResult result = new MessageResult();
        map.put("contentTypeId", contentTypeId);
        try {
            String dubboResultInfo = contentRowAttributeDtoServiceCustomer.queryContentRowQueryAttributeList(getUserJson(), JacksonUtils.toJson(map));
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                List<ContentRowAttributeDto> list = JacksonUtils.fromJson(resultInfo, ArrayList.class, ContentRowAttributeDto.class);
                result.setResult(list);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            //e.printStackTrace();
            log.error("调用queryContentRowQueryAttributeList方法:  【参数" + contentTypeId + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;*/
    }


    /**
     * 修改修改实体对象
     *
     * @param id
     * @return
     */
    @RequestMapping(value = "/sortAttr/{id}", method = RequestMethod.PUT, consumes = "application/json")
    public MessageResult sortAttr(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
    	try {
    		map.put("id", id);
         	int update = contentRowAttributeService.updateAttrSort(map);
         	MessageResult successResultModel = getSuccessResultModel(MessageInfo.UPDATESUCCESS.getMsg());
			successResultModel.setResult(update);
			return successResultModel;
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.UPDATEERROR.getMsg());
		}
    	
    	
    	
        /*MessageResult result = new MessageResult();
        try {
            String saveJson = JacksonUtils.toJson(map);
            String save = contentRowAttributeDtoServiceCustomer.updateAttrSort(getUserJson(), saveJson);
            String dubboResultInfo = save;
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                ContentRowAttributeDto contentRowAttributeDto = JacksonUtils.fromJson(resultInfo, ContentRowAttributeDto.class);
                result.setResult(contentRowAttributeDto);
                result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
                result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.SAVEERROR.isResult());
                String msg = dubboServiceResultInfo.getExceptionMsg()==null?dubboServiceResultInfo.getMsg():dubboServiceResultInfo.getExceptionMsg();
                result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + msg + "】");
            }
        } catch (Exception e) {
            try {
                //e.printStackTrace();
                ObjectMapper mapper = new ObjectMapper();
                String paramJson = mapper.writeValueAsString(map);
                log.error("调用sortAttr方法:  【参数" + paramJson + "】======" + "【" + e.getMessage() + "】");
                result.setSuccess(MessageInfo.SAVEERROR.isResult());
                result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + e.getMessage() + "】");
            } catch (JsonProcessingException e1) {
                // TODO Auto-generated catch block
                //e1.printStackTrace();
            }

        }
        return result;*/
    }

}
