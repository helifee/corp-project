package com.jzy.hio.oa.office.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.ss.usermodel.Workbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.base.utils.DubboServiceResultInfo;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.oa.office.dto.OfficeRecordDto;
import com.jzy.hio.oa.office.dto.service.OfficeRecordDtoServiceCustomer;
import com.jzy.hio.oa.office.entity.OfficeRecord;
import com.jzy.hio.oa.office.service.OfficeRecordService;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.tools.login.LoginUtils;
//import com.jzy.hio.oa.office.util.ExportExcelUtil;
//import com.jzy.hio.oa.office.util.ImportExcelUtil;

/**
 * 办公用品入库表控制层
 * 
 * @author wangw
 *
 */
@Controller
@RequestMapping("/office/officeRecord")
public class OfficeRecordController extends BaseController<OfficeRecordService> {

	private static Logger log = LoggerFactory.getLogger(OfficeRecordController.class);

	@Autowired
	private OfficeRecordDtoServiceCustomer officeRecordDtoServiceCustomer;
	
	@Autowired
	private OfficeRecordService officeRecordService;
	
	
	
	/**
	 * 返回分页对象
	 * @param paramater
	 * @return
	 */
	@Override
	@RequestMapping(value="/page",method={RequestMethod.POST}, consumes="application/json")
	public @ResponseBody MessageResult page(@RequestBody Map<String,Object> map){
		MessageResult result=new MessageResult();
		try {
			Page page = officeRecordService.getofficeRecordByPage(map);
			result.setResult(page, "获取分页对象成功!");
		} catch (Exception e) {
			log.error("获取分页对象失败!" + e.getMessage());
			result.setError("获取分页对象失败!");
		}
		return result;
	}
	
	

	/**
	 * 修改修改实体对象
	 * 
	 * @param t
	 * @return
	 */
	@RequestMapping(value = "/updateOfficeRecordAandInfo/{id}", method = RequestMethod.PUT, consumes = "application/json")
	public @ResponseBody MessageResult updateOfficeRecordAandInfo(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		OfficeRecordDto officeRecordDto = null;
		try {
			String dubboResultInfo = officeRecordDtoServiceCustomer.getObjectById(getUserJson(), "{\"id\":\"" + id + "\"}");
			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				String resultInfo = dubboServiceResultInfo.getResult();
				Map<String, Object> oldMap = JacksonUtils.fromJson(resultInfo, HashMap.class);
				oldMap.putAll(map);
				String updateJson = JacksonUtils.toJson(oldMap);
				String updateDubboResultInfo = officeRecordDtoServiceCustomer.updateOfficeRecordAndInfo(getUserJson(), updateJson);
				DubboServiceResultInfo updateDubboServiceResultInfo = JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
				if (updateDubboServiceResultInfo.isSucess()) {
					Integer i = JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class);
					result.setResult(i);
					result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
					result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
				} else {
					result.setSuccess(MessageInfo.UPDATEERROR.isResult());
					result.setMsg(updateDubboServiceResultInfo.getMsg() + "【" + updateDubboServiceResultInfo.getExceptionMsg() + "】");
				}
			} else {
				result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				result.setMsg("不存在更新的对象");
			}
		} catch (Exception e) {
			try {
				//// e.printStackTrace();
				ObjectMapper mapper = new ObjectMapper();
				String paramJson = mapper.writeValueAsString(officeRecordDto);
				log.error("调用update方法:  【参数" + id + "," + paramJson + "】======" + "【" + e.getMessage() + "】");
				result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				result.setMsg(MessageInfo.UPDATEERROR.getMsg() + "【" + e.getMessage() + "】");
			} catch (JsonProcessingException e1) {
				// TODO Auto-generated catch block
				// e1.printStackTrace();
			}

		}
		return result;
	}

	/**
	 * 批量保存post
	 * 
	 * @param paramater
	 * @return
	 */
	@RequestMapping(value = "/saveBatch", method = { RequestMethod.POST }, consumes = "application/json")
	public @ResponseBody MessageResult saveBatch(@RequestBody List<OfficeRecord> list) {
		MessageResult result = new MessageResult();
		try {
			int count = officeRecordService.saveBatch(list);
			result.setResult(count, MessageInfo.SAVESUCCESS.getMsg());
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");   			
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;
		
		
		/*String paramaterJson = JacksonUtils.toJson(list);
		try {
			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
			String userJson = JacksonUtils.toJson(userBeanInfo);
			String dubboResultInfo = officeRecordDtoServiceCustomer.saveBatch(userJson, paramaterJson);

			DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if (dubboServiceResultInfo.isSucess()) {
				String resultInfo = dubboServiceResultInfo.getResult();
				result.setResult(resultInfo);
				result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
				result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
			} else {
				result.setSuccess(MessageInfo.SAVEERROR.isResult());
				result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
			}

		} catch (Exception e) {
			//// e.printStackTrace();
			log.error("调用saveBatch方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;*/
	}

	/**
	 * 描述：通过传统方式form表单提交方式导入excel文件
	 * 
	 * @param request
	 * @throws Exception
	 */
	@RequestMapping(value = "importOfficeRecordByExcel", method = { RequestMethod.GET, RequestMethod.POST })
	public @ResponseBody MessageResult importOfficeRecordByExcel(HttpServletRequest request) throws Exception {
		MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;
		System.out.println("通过传统方式form表单提交方式导入excel文件！");

		MessageResult result = new MessageResult();
		MultipartFile file = multipartRequest.getFile("upfile");
		if (file.isEmpty()) {
			throw new Exception("文件不存在！");
		}
		try {
			// Map<String, Object> map = ImportExcelUtil.importOfficeRecordByExcel(file.getInputStream(), file.getOriginalFilename());
			Map<String, Object> map = null;
			file.getInputStream().close();
			// String dubboResultInfo=officeRecordDtoServiceCustomer.saveOfficeRecordByExcel(getUserJson(),map);
			file.getInputStream().close();
			List<OfficeRecordDto> ListResult = null;
			// DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			if (map.get("officeRecordList").toString() != null && !"".equals(map.get("officeRecordList").toString())) {
				ListResult = (List<OfficeRecordDto>) map.get("officeRecordList");
				/*
				 * String resultInfo= dubboServiceResultInfo.getResult(); Map mapResult=JacksonUtils.fromJson(resultInfo, Map.class);
				 */
			}
			result.setResult(ListResult);
			result.setSuccess(MessageInfo.GETSUCCESS.isResult());
			result.setMsg(MessageInfo.GETSUCCESS.getMsg());

		} catch (Exception e) {
			//// e.printStackTrace();
			file.getInputStream().close();
			log.error("调用importOfficeRecordByExcel方法:  【参数" + file.getOriginalFilename() + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;

	}

	/**
	 * 描述：通过 jquery.form.js 插件提供的ajax方式导出Excel
	 * 
	 * @param request
	 * @param response
	 * @throws Exception
	 */
	@RequestMapping(value = "ExportOfficeRecordModel/{ids}", method = { RequestMethod.GET, RequestMethod.POST })
	public String ajaxUploadExcel(HttpServletRequest request, HttpServletResponse response, @PathVariable("ids") String ids) throws Exception {
		System.out.println("通过 jquery.form.js 提供的ajax方式导出文件！");
		OutputStream os = null;
		Workbook wb = null; // 工作薄

		try {
			// 模拟数据库取值
			List<OfficeRecordDto> lo = new ArrayList<OfficeRecordDto>();

			String[] idsTem = ids.split(",");
			if (idsTem.length > 0) {
				for (String idTem : idsTem) {
					String dubboResultInfo = officeRecordDtoServiceCustomer.getObjectById(getUserJson(), "{\"id\":\"" + idTem + "\"}");
					DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
					if (dubboServiceResultInfo.isSucess()) {
						String resultInfo = dubboServiceResultInfo.getResult();
						OfficeRecordDto officeRecordDto = JacksonUtils.fromJson(resultInfo, OfficeRecordDto.class);
						lo.add(officeRecordDto);
					}
				}
			}

			/*
			 * for (int i = 0; i < 8; i++) { OfficeRecordDto vo = new OfficeRecordDto(); // vo.setCode("110"+i); // vo.setDate("2015-11-0"+i); // vo.setMoney("1000"+i+".00"); //
			 * vo.setName("北京中支0"+i); lo.add(vo); }
			 */
			// 导出Excel文件数据
			// ExportExcelUtil util = new ExportExcelUtil();
			// File file =util.getExcelDemoFile("/ExcelDemoFile/template.xlsx");
			// String sheetName="sheet1";
			// wb = util.writeNewExcel(file, sheetName,lo);
			//
			// String fileName="template.xlsx";
			// response.setContentType("application/vnd.ms-excel");
			// response.setHeader("Content-disposition", "attachment;filename="+ URLEncoder.encode(fileName, "utf-8"));
			// os = response.getOutputStream();
			// wb.write(os);
		} catch (Exception e) {
			//// e.printStackTrace();
		} finally {
			os.flush();
			os.close();
			// wb.close();
		}
		return null;
	}

	/**
	 * 描述：导出excel模板
	 * 
	 * @param request
	 * @param response
	 * @throws Exception
	 */
	@RequestMapping(value = "downloadOfficeRecordModel", method = { RequestMethod.GET })
	public void downloadOfficeRecordModel(HttpServletRequest request, HttpServletResponse response) throws Exception {
		response.setContentType("text/html;charset=UTF-8");
		BufferedInputStream in = null;
		BufferedOutputStream out = null;
		request.setCharacterEncoding("UTF-8");
		String rootpath = request.getSession().getServletContext().getRealPath("/");
		/*
		 * String fileName = request.getParameter("f"); fileName="officeRecord.xlsx";
		 */
		String fileName = "办公用品导入模板.xlsx";
		String inName = rootpath + "template\\" + fileName;
		// String outName=rootpath + "template\\办公用品导入模板-" + ImportExcelUtil.randomInteger(1000)+".xlsx";
		try {
			// 复制文件
			// ImportExcelUtil.copyFile(inName, outName);
			// //设置下拉菜单
			// String[] dlData=null;
			// Map<String,Object> map=new HashMap<String, Object>();
			// map.put("delflag", 0);
			// String dubboResultInfo=officeHouseDtoServiceCustomer.queryList(getUserJson(), JacksonUtils.toJson(map));
			// DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
			// if(dubboServiceResultInfo.isSucess()){
			// String resultInfo= dubboServiceResultInfo.getResult();
			// List<OfficeHouseDto> list=JacksonUtils.fromJson(resultInfo, List.class,OfficeHouseDto.class);
			// if (list!=null&&list.size()>0) {
			// dlData=new String[list.size()];
			// for (int i=0;i<list.size();i++) {
			// OfficeHouseDto houseDto=list.get(i);
			// dlData[i]=houseDto.getTypeName();
			// }
			// }
			// }
			// if (dlData!=null&&dlData.length>0) {
			// ExportExcelUtil.setDataValidation(outName, dlData);
			// }
			// File f = new File(outName);
			// response.setContentType("application/x-excel");
			// response.setCharacterEncoding("UTF-8");
			// response.setHeader("content-disposition", "attachment;filename=" + URLEncoder.encode(fileName, "UTF-8"));
			// response.setHeader("Content-Length",String.valueOf(f.length()));
			// in = new BufferedInputStream(new FileInputStream(f));
			// out = new BufferedOutputStream(response.getOutputStream());
			// byte[] data = new byte[1024];
			// int len = 0;
			// while (-1 != (len=in.read(data, 0, data.length))) {
			// out.write(data, 0, len);
			// }
			// ImportExcelUtil.deleteFile(outName);
		} catch (Exception e) {
			//// e.printStackTrace();
		} finally {
			if (in != null) {
				in.close();
			}
			if (out != null) {
				out.close();
			}
			// System.out.println(ImportExcelUtil.deleteFile(outName));
		}

	}

	private String getUserJson() {
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userJson = JacksonUtils.toJson(userBeanInfo);
		return userJson;
	}
}
