package com.jzy.hio.oa.schedule.service.impl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.base.utils.IDGenerator;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.oa.schedule.entity.WorkSchedule;
import com.jzy.hio.oa.schedule.mapper.WorkScheduleDao;
import com.jzy.hio.oa.schedule.service.WorkScheduleService;
import com.jzy.hio.base.utils.LoginUtils;

/**
 * @author admin
 */
@Service
public class WorkScheduleServiceImpl extends BaseServiceImpl<String, WorkSchedule> implements WorkScheduleService {

	@Autowired
	private WorkScheduleDao workScheduleDao;

	@Override
	public int save(WorkSchedule workSchedule) {
		String id = workSchedule.getId();
		if (StringUtils.isBlank(id)) {
			workSchedule.setId(IDGenerator.getUUID());
		}
		String periodProceeding = workSchedule.getPeriodProceeding();
		if ("1".equals(periodProceeding)) {
			int saveCount = 0;
			String periodBeginTime = workSchedule.getPeriodBeginTime();
			String periodEndTime = workSchedule.getPeriodEndTime();
			String beginTime = workSchedule.getBeginTime();
			String endTime = workSchedule.getEndTime();
			String repetitionFrequency = workSchedule.getRepetitionFrequency();
			String frequencyType = workSchedule.getFrequencyType();
			List<Map<String, String>> list = null;
			if ("MONTH".equals(frequencyType)) {
				list = getMonthPeriod(periodBeginTime, periodEndTime, repetitionFrequency, beginTime, endTime);
			} else if ("WEEK".equals(frequencyType)) {
				list = getWeekOrDayPerod(periodBeginTime, periodEndTime, repetitionFrequency, beginTime, endTime);
			} else {
				list = getWeekOrDayPerod(periodBeginTime, periodEndTime, null, beginTime, endTime);
			}
			if (list != null) {
				for (Map<String, String> map : list) {
					workSchedule.setId(IDGenerator.getUUID());
					workSchedule.setBeginTime(map.get("beginTime"));
					workSchedule.setEndTime(map.get("endTime"));

					saveCount += super.save(workSchedule);
				}
			}

			return saveCount;
		} else {
			return super.save(workSchedule);
		}

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.jzy.hio.oa.schedule.service.WorkScheduleService#getWorkSchedulePage(java.util.Map)
	 */
	@Override
	public Page getWorkSchedulePage(Map map) throws Exception {
		// 分页显示
		Page page = new Page();
		// 获取分页list 数据
		List<Map<String, Object>> list = workScheduleDao.getWorkSchedulePage(map);
		// 获取条件的总数据量
		Integer count = workScheduleDao.getWorkSchedulePageCount(map);
		page.setLimit((Integer) map.get("limit"));
		page.setList(list);
		page.setStart((Integer) map.get("start"));
		page.setTotal(count);
		// 封装成page对象 传到前台
		return page;
	}

	/**
	 * 获取月周期事件分类
	 * 
	 * @param periodBeginTime
	 * @param periodEndTime
	 * @param repetitionFrequency
	 * @param beginTime
	 * @param endTime
	 * @return
	 */
	private static List<Map<String, String>> getMonthPeriod(String periodBeginTime, String periodEndTime, String repetitionFrequency, String beginTime, String endTime) {
		String sY = periodBeginTime.split("-")[0];
		String sM = periodBeginTime.split("-")[1];
		String sD = periodBeginTime.split("-")[2];

		String sY1 = periodEndTime.split("-")[0];
		String sM1 = periodEndTime.split("-")[1];
		String sD1 = periodEndTime.split("-")[2];

		Calendar calendar = Calendar.getInstance();
		calendar.set(Integer.parseInt(sY), Integer.parseInt(sM) - 1, Integer.parseInt(sD));

		Calendar calendar1 = Calendar.getInstance();
		calendar1.set(Integer.parseInt(sY1), Integer.parseInt(sM1) - 1, Integer.parseInt(sD1));

		int y = calendar.get(Calendar.YEAR);
		int m = calendar.get(Calendar.MONTH) + 1;
		int d = calendar.get(Calendar.DAY_OF_MONTH);
		if (d > Integer.parseInt(repetitionFrequency)) {
			calendar.set(y, m + 1 - 1, Integer.parseInt(repetitionFrequency));
		} else {
			calendar.set(y, m - 1, Integer.parseInt(repetitionFrequency));
		}

		y = calendar.get(Calendar.YEAR);

		int y1 = calendar1.get(Calendar.YEAR);
		int m1 = calendar1.get(Calendar.MONTH) + 1;
		int d1 = calendar1.get(Calendar.DAY_OF_MONTH);
		if (d1 < Integer.parseInt(repetitionFrequency)) {
			calendar1.set(y1, m1 - 1 - 1, Integer.parseInt(repetitionFrequency));
		} else {
			calendar1.set(y1, m1 - 1, Integer.parseInt(repetitionFrequency));
		}

		y1 = calendar1.get(Calendar.YEAR);

		Calendar tempBeginStart = calendar;
		Calendar tempEndStart = null;
		int tempY = y;
		List<Map<String, String>> mapList = new ArrayList<Map<String, String>>();
		for (int i = 0; i <= y1 - y; i++) {

			Calendar tempStart = Calendar.getInstance();
			tempStart.set(tempY, 0, Integer.parseInt(repetitionFrequency));

			Calendar tempEnd = Calendar.getInstance();
			tempEnd.set(tempY, 11, Integer.parseInt(repetitionFrequency));

			if (tempBeginStart.compareTo(tempStart) < 0) {
				tempBeginStart = tempStart;
			}

			if (tempEndStart == null || tempEndStart.compareTo(tempEnd) < 0) {
				tempEndStart = tempEnd;
			}

			if (tempEndStart.compareTo(calendar1) > 0) {
				tempEndStart = calendar1;
			}

			int tempBeginMonth = tempBeginStart.get(Calendar.MONTH) + 1;
			int tempEndStartMonth = tempEndStart.get(Calendar.MONTH) + 1;

			int tempMonth = tempBeginMonth;
			for (int j = 0; j <= (tempEndStartMonth - tempBeginMonth); j++) {
				Calendar start = Calendar.getInstance();
				start.set(tempY, tempMonth - 1, Integer.parseInt(repetitionFrequency));
				int month = start.get(Calendar.MONTH) + 1;
				Map<String, String> map = new HashMap<String, String>();
				map.put("beginTime", start.get(Calendar.YEAR) + "-" + (month < 10 ? ("0" + month) : month) + "-"
						+ (start.get(Calendar.DAY_OF_MONTH) < 10 ? ("0" + start.get(Calendar.DAY_OF_MONTH)) : start.get(Calendar.DAY_OF_MONTH)) + " " + beginTime);
				map.put("endTime", start.get(Calendar.YEAR) + "-" + (month < 10 ? ("0" + month) : month) + "-"
						+ (start.get(Calendar.DAY_OF_MONTH) < 10 ? ("0" + start.get(Calendar.DAY_OF_MONTH)) : start.get(Calendar.DAY_OF_MONTH)) + " " + endTime);
				mapList.add(map);
				tempMonth++;
			}
			tempY++;
		}
		return mapList;
	}

	private static List<Map<String, String>> getWeekOrDayPerod(String periodBeginTime, String periodEndTime, String repetitionFrequency, String beginTime, String endTime) {
		String sY = periodBeginTime.split("-")[0];
		String sM = periodBeginTime.split("-")[1];
		String sD = periodBeginTime.split("-")[2];

		String sY1 = periodEndTime.split("-")[0];
		String sM1 = periodEndTime.split("-")[1];
		String sD1 = periodEndTime.split("-")[2];

		Calendar calendar = Calendar.getInstance();
		calendar.set(Integer.parseInt(sY), Integer.parseInt(sM) - 1, Integer.parseInt(sD), 0, 0, 0);

		Calendar calendar1 = Calendar.getInstance();
		calendar1.set(Integer.parseInt(sY1), Integer.parseInt(sM1) - 1, Integer.parseInt(sD1), 0, 0, 0);

		if (repetitionFrequency != null) {
			int weekDay = Integer.parseInt(repetitionFrequency) + 1;

			int beginWeekDay = calendar.get(Calendar.DAY_OF_WEEK);
			if (weekDay >= beginWeekDay) {
				// 开始时间加
				calendar.add(Calendar.DATE, Math.abs(weekDay - beginWeekDay));
			} else {
				calendar.add(Calendar.DATE, 7);
				calendar.add(Calendar.DATE, -Math.abs(weekDay - beginWeekDay));
			}

			int endWeekDay = calendar1.get(Calendar.DAY_OF_WEEK);
			if (weekDay <= endWeekDay) {
				// 结束时间减
				calendar1.add(Calendar.DATE, -Math.abs(weekDay - endWeekDay));
			} else {
				calendar1.add(Calendar.DATE, -7);
				calendar1.add(Calendar.DATE, Math.abs(weekDay - endWeekDay));
			}

		}

		Calendar tempCalendar = calendar;
		List<Map<String, String>> mapList = new ArrayList<Map<String, String>>();
		while (tempCalendar.compareTo(calendar1) <= 0) {
			int y = tempCalendar.get(Calendar.YEAR);
			int m = tempCalendar.get(Calendar.MONTH) + 1;
			int d = tempCalendar.get(Calendar.DAY_OF_MONTH);
			Map<String, String> map = new HashMap<String, String>();
			map.put("beginTime", y + "-" + (m < 10 ? ("0" + m) : m) + "-" + (d < 10 ? ("0" + d) : d) + " " + beginTime);
			map.put("endTime", y + "-" + (m < 10 ? ("0" + m) : m) + "-" + (d < 10 ? ("0" + d) : d) + " " + endTime);
			mapList.add(map);
			if (repetitionFrequency != null) {
				tempCalendar.add(Calendar.DATE, 7);
			} else {
				tempCalendar.add(Calendar.DATE, 1);
			}

		}

		return mapList;
	}

	public static void main(String[] args) {

		List<Map<String, String>> list = getMonthPeriod("2017-06-16", "2018-06-18", "5", "08:00:00", "09:00:00");
		System.out.println(list);
		Calendar calendar = Calendar.getInstance();
		// calendar.set(2017,0,3);
		calendar.set(Calendar.YEAR, 2017);
		calendar.set(Calendar.MONTH, 12);
		calendar.set(Calendar.DATE, 1);
		System.out.println(calendar.get(Calendar.MONTH));
		// calendar.add(Calendar.DATE,-Math.abs(5-5));
		// System.out.println(calendar.get(Calendar.WEEK_OF_MONTH));
	}

	@Override
	public List<WorkSchedule> getScheduleByDate(Map map) throws Exception {
		String selectDate = (String) map.get("selectDate");
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("taskOwnerId", map.get("taskOwnerId"));
		if (selectDate != null) {
			paramMap.put("beginTime", selectDate + " 00:00:00");
			paramMap.put("endTime", selectDate + " 23:59:59");
		}
		return workScheduleDao.getScheduleByDate(paramMap);
	}

	@Override
	public List<Integer> getScheduleDaysForMonth(String month) throws Exception {
		List<Integer> result = new ArrayList<>();
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("taskOwnerId", LoginUtils.getSecurityUserBeanInfo().getSecurityUserDto().getId());
		paramMap.put("month", month);
		// List<WorkSchedule> list = workScheduleDao.queryList(WorkSchedule.class.getName() + ".getScheduleDaysForMonth", paramMap);
		List<WorkSchedule> list = workScheduleDao.selectByExample(paramMap);

		if (list != null && list.size() > 0) {
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
			Calendar calendar = Calendar.getInstance();
			calendar.setTime(sdf.parse(month));
			for (WorkSchedule ws : list) {
				int toDay = -1, fromDay = -1;
				if (ws.getBeginTime().substring(0, 7).compareTo(month) < 0) {
					fromDay = 1;
					toDay = Integer.parseInt(ws.getEndTime().substring(8));
				} else if (ws.getEndTime().substring(0, 7).compareTo(month) > 0) {
					fromDay = Integer.parseInt(ws.getBeginTime().substring(8));
					toDay = calendar.getMaximum(Calendar.DAY_OF_MONTH);
				} else {
					fromDay = Integer.parseInt(ws.getBeginTime().substring(8));
					toDay = Integer.parseInt(ws.getEndTime().substring(8));
				}

				for (int i = fromDay; i <= toDay; i++) {
					if (!result.contains(i)) {
						result.add(i);
					}
				}
			}
		}

		return result;
	}

	@Override
	public Map<Integer, Boolean> getScheduleForMonth(Map<String, String> map) throws Exception {
		String month = map.get("month");
		String nowDateTimes = map.get("nowDate");
		Map<Integer, Boolean> result = new HashMap<Integer, Boolean>();
		List<Integer> days = new ArrayList<>();
		List<Integer> colorType = new ArrayList<>();
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("taskOwnerId", LoginUtils.getSecurityUserBeanInfo().getSecurityUserDto().getId());
		paramMap.put("month", month);
		// List<WorkSchedule> list = workScheduleDao.queryList(WorkSchedule.class.getName() + ".getScheduleDaysForMonth", paramMap);
		List<WorkSchedule> list = queryListByExample(paramMap);
		if (list != null && list.size() > 0) {
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
			Calendar calendar = Calendar.getInstance();
			calendar.setTime(sdf.parse(month));
			for (WorkSchedule ws : list) {
				int toDay = -1, fromDay = -1;
				if (ws.getBeginTime().substring(0, 7).compareTo(month) < 0) {
					fromDay = 1;
					toDay = Integer.parseInt(ws.getEndTime().substring(8, 10));
				} else if (ws.getEndTime().substring(0, 7).compareTo(month) > 0) {
					fromDay = Integer.parseInt(ws.getBeginTime().substring(8, 10));
					toDay = calendar.getMaximum(Calendar.DAY_OF_MONTH);
				} else {
					fromDay = Integer.parseInt(ws.getBeginTime().substring(8, 10));
					toDay = Integer.parseInt(ws.getEndTime().substring(8, 10));
				}
				for (int i = fromDay; i <= toDay; i++) {
					if (ws.getType().equals("TASK")) {
						if (ws.getStatus().equals("1")) {
							result.put(i, true);
						} else if (result.size() > 0 && result.containsKey(i) && result.get(i)) {
							result.put(i, true);
						} else {
							result.put(i, false);
						}
					} else {
						calendar.setTimeInMillis(Long.valueOf(nowDateTimes));
						SimpleDateFormat ss = new SimpleDateFormat("yyyy-MM-dd");
						String nt = ss.format(calendar.getTime());

						String st = month + "-";
						if (i < 10) {
							st = st + "0" + i;
						} else {
							st = st + i;
						}
						if (st.compareTo(nt) < 0) {
							if (result.size() > 0 && result.containsKey(i) && result.get(i)) {
							} else {
								result.put(i, false);
							}
						} else if (st.compareTo(nt) > 0) {
							result.put(i, true);
						} else {
							ss = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
							nt = ss.format(calendar.getTime());
							if (nt.compareTo(ws.getBeginTime().substring(0, 10) + " 00:00:00") >= 0 && nt.compareTo(ws.getEndTime()) < 0) {
								result.put(i, true);
							} else {
								if (result.size() > 0 && result.containsKey(i) && result.get(i)) {
									continue;
								}
								result.put(i, false);
							}
						}
					}
				}
			}
		}

		return result;
	}
}
