package com.jzy.hio.oa.bbs.dto.service.impl;

import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.jzy.hio.base.utils.DubboServiceResultInfo;
import com.jzy.hio.base.utils.ErrorInfoCode;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.oa.bbs.dto.service.BbsReplyDtoServiceCustomer;
import com.jzy.hio.oa.bbs.entity.BbsReply;
import com.jzy.hio.oa.bbs.service.BbsReplyService;
import com.jzy.tools.data.JacksonUtils;

/**
 * @author admin
 * 
 *
 */
@Component
public class BbsReplyDtoServiceProducer implements BbsReplyDtoServiceCustomer{
	private static Logger log = Logger.getLogger(BbsReplyDtoServiceProducer.class);
	@Autowired
	private BbsReplyService bbsReplyService;

	public String save(String userInfo, String saveJson){
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   BbsReply bbsReply =JacksonUtils.fromJson(saveJson, BbsReply.class);
		   SecurityUserBeanInfo userBeanInfo = JacksonUtils.fromJson (userInfo,SecurityUserBeanInfo.class);
		   return  bbsReplyService.saveBean(userBeanInfo,bbsReply);
		} catch (Exception e) {
		 info.setSucess(false);
		 info.setMsg("帖子回复失败!");
		 info.setExceptionMsg(e.getMessage());
		 info.setCode (ErrorInfoCode.SYSTEM_ERROR.getValue ());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   BbsReply bbsReply =JacksonUtils.fromJson(updateJson, BbsReply.class);
			   SecurityUserBeanInfo userBeanInfo = JacksonUtils.fromJson (userInfo,SecurityUserBeanInfo.class);
			        bbsReply.setLastContentEditor (userBeanInfo.getSecurityUserDto ().getRealName ());
			   	    bbsReply.setLastContentEditTime (new Date ());
			   int result=   bbsReplyService.update(bbsReply );
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   BbsReply bbsReply =JacksonUtils.fromJson(deleteJson, BbsReply.class);
			   int result= bbsReplyService.deleteObjectById(bbsReply .getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
//				   int result= bbsReplyService.deleteAllObjectByIds(list);
//				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	 {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			BbsReply bbsReply =JacksonUtils.fromJson(getJson, BbsReply.class);
			BbsReply result = bbsReplyService.getObjectById (bbsReply .getId());
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
	@Override
	public String getBeanById(String userInfo, String getJson)
	{
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			Map<String, Object> result;
			Map map = JacksonUtils.fromJson (getJson,Map.class);
			String id = String.valueOf (map.get ("id"));
			if(map.containsKey ("from")){
				map.put ("user",JacksonUtils.fromJson (userInfo,SecurityUserBeanInfo.class));
				result = bbsReplyService.getBeanByMap (map);
			}else {
				 result = bbsReplyService.getBeanById (id);
			}
			info.setResult(JacksonUtils.toJson(result));
			info.setSucess(true);
			info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			log.error("获取对象失败!"+e.getMessage());
			info.setSucess(false);
			info.setMsg("获取对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
	@Override
	public String getPage(String userInfo, String paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
//				Page page=bbsReplyService.getPage(map, (Integer)map.get("start"),  (Integer)map.get("limit"));
				Page page=bbsReplyService.queryPage(map);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取评论列表成功!");
			}else{
//				Page page=bbsReplyService.getPage(new HashMap(), null, null);
//				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取评论列表成功!");
			}
		} catch (Exception e) {
			 log.error("获取评论列表失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取评论列表失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
//				List list=bbsReplyService.queryList(map);
//				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
//				List list=bbsReplyService.queryList(null);
//				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   BbsReply bbsReply =JacksonUtils.fromJson(deleteJson, BbsReply.class);
//			   int result= bbsReplyService.deletePseudoObjectById(bbsReply .getId());
//			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
//				   int result= bbsReplyService.deletePseudoAllObjectByIds(list);
//				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	/**
	 * 点赞
	 * @param userJson
	 * @return
     */
	@Override
	public String updatePraiseNum(String userJson, String updateJson)throws Exception {
		BbsReply bbsReply =JacksonUtils.fromJson(updateJson, BbsReply.class);

		return bbsReplyService.updatePraiseNum(userJson,bbsReply .getId());
	}

	/**
	 * 更新回复状态
	 * @param userJson
	 * @param updateJson
	 * @return
	 * @throws Exception
     */
	@Override
	public String updateStatus(String userJson, String updateJson) throws Exception {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			return bbsReplyService.updateState(updateJson);
		} catch (Exception e) {
			info.setSucess(false);
			info.setMsg("更新对象失败!");
			info.setExceptionMsg(e.getMessage());
			info.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return JacksonUtils.toJson(info);
	}
}
