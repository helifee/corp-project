package com.jzy.hio.mycat;

import java.util.Properties;

import org.apache.ibatis.cache.CacheKey;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.plugin.Interceptor;
import org.apache.ibatis.plugin.Intercepts;
import org.apache.ibatis.plugin.Invocation;
import org.apache.ibatis.plugin.Plugin;
import org.apache.ibatis.plugin.Signature;
import org.apache.ibatis.session.ResultHandler;
import org.apache.ibatis.session.RowBounds;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

/**
 * mycat 切库
 * 
 * @author wt.coffee
 * @date 2018年4月9日下午4:11:06
 */

@Intercepts({ @Signature(type = org.apache.ibatis.executor.Executor.class, method = "update", //
		args = { MappedStatement.class, Object.class }),
		// 对应BaseService#queryList(T)
		@Signature(type = org.apache.ibatis.executor.Executor.class, method = "query", //
				args = { MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class }),
		// 对应BaseService#queryListByExample
		@Signature(type = org.apache.ibatis.executor.Executor.class, method = "query", //
				args = { MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class, //
						CacheKey.class, BoundSql.class }) //
})
@Component
public class DatasourceInterceptor implements Interceptor {

	Logger logger = LoggerFactory.getLogger(this.getClass());

	@Override
	public Object intercept(Invocation invocation) throws Throwable {
		Object[] args = invocation.getArgs();
		if (args.length == 6) {
			BoundSql boundSql = (BoundSql) args[5];
			Sql2Mycat.handleBoundSql(boundSql);
		} else if (args.length == 2) {
			MappedStatement ms = (MappedStatement) args[0];
			Sql2Mycat.handleSqlSource(ms);
		}else {
			MappedStatement ms = (MappedStatement) args[0];
			Sql2Mycat.handleSqlSource(ms);
		}
		return invocation.proceed();
	}

	@Override
	public Object plugin(Object target) {
		return Plugin.wrap(target, this);
	}

	@Override
	public void setProperties(Properties properties) {
		// System.out.println(properties);
		logger.info("{}", properties);
	}

}
