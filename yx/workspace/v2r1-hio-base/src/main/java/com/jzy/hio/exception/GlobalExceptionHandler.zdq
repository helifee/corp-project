package com.jzy.hio.exception;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.validation.BindException;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import org.springframework.web.servlet.NoHandlerFoundException;

import com.jzy.hio.config.YmlConfig;
import com.jzy.hio.springmvc.ApiResponse;

/**
 * 全局的的异常拦截器
 *
 * @author wt.coffee<br />
 *         2018年3月5日下午2:42:09
 */
@RestControllerAdvice
public class GlobalExceptionHandler {

	@Autowired
	private YmlConfig config;

	Logger logger = LoggerFactory.getLogger(getClass());

	// /**
	// * 重复请求、不给前端提示--即不返回任何数据
	// *
	// * @param e
	// * @return
	// */
	// @ExceptionHandler({ HioHttpRequestDuplicateException.class })
	// public void dealHttpRequestDuplicate(HioException e) {
	//
	// }

	/**
	 * <pre>
	 * 处理权限异常、请求接口权限不足
	 * 重复请求
	 * </pre>
	 * 
	 * @param e
	 * @return
	 */
	@ExceptionHandler({ HioPermissionException.class, HioHttpRequestDuplicateException.class })
	public Object dealPermission(HioException e) {
		ApiResponse<?> resp = new ApiResponse<>();
		resp.setStatus(e.getCode());
		String message = getMessage(e);
		resp.setMessage(message);
		return resp;
	}

	private String getMessage(HioException e) {
		String message = config.getMessage(e.getCode());
		if (message != null) {
			return message;
		} else {
			return e.getException();
		}
	}

	/**
	 * 处理Exception异常(主要是代码方面的错误)
	 *
	 * @param e
	 * @return
	 */
	@ExceptionHandler(Exception.class)
	public Object dealException(Exception e) {
		e.printStackTrace();
		logger.error("程序出错  ", e);
		ApiResponse<?> resp = new ApiResponse<>();
		if (e instanceof NoHandlerFoundException) {
			resp.setStatus(HttpStatus.NOT_FOUND.value());
			resp.setMessage(HttpStatus.NOT_FOUND.getReasonPhrase());
		} else if (e instanceof BindException) {
			BindException bindException = (BindException) e;
			resp.setStatus(HioException.REQUEST_PARAM_INVALID);
			resp.setMessage(bindException.getFieldError().getField() + bindException.getFieldError().getDefaultMessage());
		} else if (e instanceof MethodArgumentNotValidException) {
			MethodArgumentNotValidException methodArgumentNotValidException = (MethodArgumentNotValidException) e;
			resp.setStatus(HioException.REQUEST_PARAM_INVALID);
			// haoqipeng 校验消息去掉英文属性名
			// resp.setMessage(methodArgumentNotValidException.getBindingResult().getFieldError().getField()
			// + methodArgumentNotValidException.getBindingResult().getFieldError().getDefaultMessage());
			resp.setMessage(methodArgumentNotValidException.getBindingResult().getFieldError().getDefaultMessage());
		} else {
			// if(e instanceof BadSqlGrammarException) {
			// }
			resp.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());
			String message = config.getMessage(resp.getStatus());
			if (message != null) {
				resp.setMessage(message);
			} else {
				resp.setMessage(e.getMessage());
			}
		}
		return resp;
	}

	/**
	 * 处理HioException异常 (主要是业务方面的异常)
	 *
	 * @param e
	 * @return
	 */
	@ExceptionHandler(HioException.class)
	public Object dealHioException(HioException e) {
		logger.error("程序出错 HioException {}", e);
		ApiResponse<?> resp = new ApiResponse<>();
		resp.setStatus(e.getCode());
		String message = getMessage(e);
		resp.setMessage(message);
		return resp;
	}

	@ExceptionHandler(ApiException.class)
	public Object dealApiException(ApiException e) {
		logger.error("业务异常: {}, {}", e.getCode(), e.getMessage());
		ApiResponse<?> resp = new ApiResponse<>();
		resp.setStatus(e.getCode());
		String message = e.getMessage();
		resp.setMessage(message);
		return resp;
	}

}
