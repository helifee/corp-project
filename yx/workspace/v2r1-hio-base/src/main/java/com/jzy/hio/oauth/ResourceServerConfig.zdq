package com.jzy.hio.oauth;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;
import org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManager;
import org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter;
import org.springframework.security.oauth2.provider.error.DefaultWebResponseExceptionTranslator;
import org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint;
import org.springframework.security.oauth2.provider.error.WebResponseExceptionTranslator;
import org.springframework.security.oauth2.provider.token.DefaultTokenServices;
import org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore;
import org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter;

import com.jzy.hio.utils.JacksonUtils;

import javax.servlet.http.HttpServletResponse;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by cuipeng on 2018/1/23.
 */
@Configuration
@EnableResourceServer
public class ResourceServerConfig extends ResourceServerConfigurerAdapter {
	@Autowired
	private RedisConnectionFactory connectionFactory;

	@Bean
	public RedisTokenStore tokenStore() {
		return new RedisTokenStore(connectionFactory);
	}

	// @Autowired
	// private AuthenticationManager authenticationManager;
	// @Resource
	// OAuth2AuthenticationProcessingFilter f;
	@Override
	public void configure(HttpSecurity http) throws Exception {
		//解决Spring Boot不允许加载iframe问题
		http.headers().frameOptions().disable();
		http.authorizeRequests().antMatchers(
				"/loginBeforeScan",
				"/demo*",
				"/druid/**",
				"/scanUUID",
				"/message/send",
				"/redis/get", // 取redis值
				"/disk/personalFile/initializeSpace",
				"/checkSmsCode",
				"/findPassword",
				"/repetitionMobile",
				"/registerAlready",
				"/refreshAccessToken",
				"/*.png",
				"/validateCode*",
				"/validateCode/*",
				"/smscode*",
				"/register",
				"/login",
				"/customer/download/template",
				"/contact/download/template",
				"/product/download/template",
				"/user/download/template",
				"/user/download/error",
				"/user/queryUserWorkStatus",
				"/user/queryUserByOrgAndRoleAndUser",
				"/tenantInfo/getTenantCompanyList",
				"/user/queryImUserIdByOaUserId",
				"/s",
				"/redis/syncImUserIdAndUserId",
				"/friendInfo/sendWorkApply",
				"/pu/**",
				"/userInfo/openThird",
//				"/pu/organization/save",
//				"/pu/syncUser",
				"/tenantInfo/syncTendToRedis",			//同步租户信息到redis
				"/tendUser/syncTendUserToRedis",		//同步租户用户关系到redis
				"/userInfo/syncUserInfoToRedis",		//同步人员信息到redis
				"/tenantInfo/getTenantCompanyInfo",
				"personnelSize/sync2list",		//同步人员规模到redis
				"/diskCompanyInit/createCommonDirectory",
				"/diskCompanyFile/resetSpace",
				"/user/queryUserByOrgAndRoleAndUser",
				"/user/getOaUserIdByImUserId","/organization/queryNameByOrgAndRoleAndUser").permitAll().and().csrf().disable().exceptionHandling()
				.authenticationEntryPoint((request, response, authException) -> response.sendError(HttpServletResponse.SC_UNAUTHORIZED)).and().authorizeRequests().anyRequest()
				.authenticated().and().httpBasic();

		OAuth2AuthenticationProcessingFilter f = new OAuth2AuthenticationProcessingFilter();
		OAuth2AuthenticationEntryPoint oAuth2AuthenticationEntryPoint = new OAuth2AuthenticationEntryPoint();
		oAuth2AuthenticationEntryPoint.setExceptionTranslator(webResponseExceptionTranslator());
		f.setAuthenticationEntryPoint(oAuth2AuthenticationEntryPoint);
		OAuth2AuthenticationManager o = new OAuth2AuthenticationManager();
		DefaultTokenServices dt = new DefaultTokenServices();
		dt.setTokenStore(tokenStore());
		o.setTokenServices(tokenServices());
		f.setAuthenticationManager(o);

		http.addFilterBefore(f, AbstractPreAuthenticatedProcessingFilter.class);
	}

	// @Primary
	@Bean
	public DefaultTokenServices tokenServices() {
		DefaultTokenServices defaultTokenServices = new DefaultTokenServices();
		// defaultTokenServices.setAccessTokenValiditySeconds(-1);
		// defaultTokenServices.setRefreshTokenValiditySeconds(-1);
		defaultTokenServices.setSupportRefreshToken(true);
		defaultTokenServices.setReuseRefreshToken(true);
		defaultTokenServices.setTokenStore(tokenStore());
		return defaultTokenServices;
	}

	@Bean
	public WebResponseExceptionTranslator webResponseExceptionTranslator() {
		return new DefaultWebResponseExceptionTranslator() {
			@Override
			public ResponseEntity translate(Exception e) throws Exception {
				ResponseEntity responseEntity = super.translate(e);
				OAuth2Exception body = (OAuth2Exception) responseEntity.getBody();
				HttpHeaders headers = new HttpHeaders();
				headers.setAll(responseEntity.getHeaders().toSingleValueMap());
				// do something with header or response
				if (401 == responseEntity.getStatusCode().value()) {
					Map r = new HashMap();
					r.put("message", "Invalid access token");
					r.put("status", 2900);
					String resp = JacksonUtils.toJson(r);
					return new ResponseEntity(resp, headers, responseEntity.getStatusCode());
				} else {
					return new ResponseEntity(body, headers, responseEntity.getStatusCode());
				}

			}
		};
	}

}
// AuthenticationManager oauthAuthenticationManager = authenticationManager;
// OAuth2AuthenticationProcessingFilter resourcesServerFilter = new OAuth2AuthenticationProcessingFilter();//<1>
// resourcesServerFilter.setAuthenticationEntryPoint(oAuth2AuthenticationEntryPoint);
// resourcesServerFilter.setAuthenticationManager(oauthAuthenticationManager);//<2>
// http.addFilterBefore(resourcesServerFilter,
// AbstractPreAuthenticatedProcessingFilter.class);
// if (eventPublisher != null) {
// resourcesServerFilter.setAuthenticationEventPublisher(eventPublisher);
// }
// if (tokenExtractor != null) {
// resourcesServerFilter.setTokenExtractor(tokenExtractor);//<3>
// }
// resourcesServerFilter = postProcess(resourcesServerFilter);