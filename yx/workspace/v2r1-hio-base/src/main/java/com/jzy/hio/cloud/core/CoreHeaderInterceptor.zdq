package com.jzy.hio.cloud.core;

import java.util.Arrays;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.StringUtils;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;

import com.netflix.hystrix.strategy.concurrency.HystrixRequestContext;
import com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableDefault;

/**
 * 使用处理器拦截器解决变量传递问题 Created by wf on 2018/1/22
 */
public class CoreHeaderInterceptor extends HandlerInterceptorAdapter {
	private static final Logger logger = LoggerFactory.getLogger(CoreHeaderInterceptor.class);

	public static final String HEADER_LABEL = "Authorization";// "x-label";hio-authorization
	public static final String HEADER_LABEL_SPLIT = ",";

	/**
	 * hystrix有一个线程池隔离的能力，会创建另一个线程去请求服务， 拥有更好的控制并发访问量、以及服务降级等能力，但是会出现一个问题，就是线程变量(ThreadLocal)的传递问题
	 * 使用com.netflix.hystrix.strategy.concurrency.HystrixRequestVariableDefault对象解决线程变量(ThreadLocal)的传递问题
	 */
	public static final HystrixRequestVariableDefault<List<String>> label = new HystrixRequestVariableDefault<List<String>>();

	/**
	 * 在这里可以封装用户登录
	 * 
	 * @param labels
	 */
	public static void initHystrixRequestContext(String labels) {
		// logger.info("label: " + labels);
		if (!HystrixRequestContext.isCurrentThreadInitialized()) {
			HystrixRequestContext.initializeContext();
		}
		if (!StringUtils.isEmpty(labels)) {
			CoreHeaderInterceptor.label.set(Arrays.asList(labels.split(CoreHeaderInterceptor.HEADER_LABEL_SPLIT)));
		} else {
			CoreHeaderInterceptor.label.set(null);
		}
	}

	public static void shutdownHystrixRequestContext() {
		if (HystrixRequestContext.isCurrentThreadInitialized()) {
			HystrixRequestContext.getContextForCurrentThread().shutdown();
		}
	}

	/**
	 * 预处理
	 * 
	 * @param request
	 * @param response
	 * @param handler
	 * @return true表示继续流程 （如调用下一个拦截器或处理器）
	 * @throws Exception
	 */
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
		// logger.info("===========HandlerInterceptor1 preHandl");
		// logger.info("===========request.getHeader"+(request.getHeader(CoreHeaderInterceptor.HEADER_LABEL)));
		if (request.getHeader(CoreHeaderInterceptor.HEADER_LABEL) == null || "".equals(request.getHeader(CoreHeaderInterceptor.HEADER_LABEL))) {
			// 获取资源access_token
			String access_token = request.getParameter("access_token");
			if (access_token == null || access_token.trim().length() == 0) {
				access_token = request.getParameter("accessToken");
			}
			if (access_token != null) {
				CoreHeaderInterceptor.initHystrixRequestContext("Bearer " + access_token);
			} else {
				CoreHeaderInterceptor.initHystrixRequestContext(request.getHeader(CoreHeaderInterceptor.HEADER_LABEL));
			}
		} else {
			CoreHeaderInterceptor.initHystrixRequestContext(request.getHeader(CoreHeaderInterceptor.HEADER_LABEL));
		}
		// LoginUtils.setSecurityUserBeanInfo();
		return true;
	}

	/**
	 * 后处理
	 * 
	 * @param request
	 * @param response
	 * @param handler
	 * @param modelAndView
	 * @throws Exception
	 */
	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
		// logger.info("===========HandlerInterceptor1 postHandle");
		CoreHeaderInterceptor.shutdownHystrixRequestContext();
	}

}
