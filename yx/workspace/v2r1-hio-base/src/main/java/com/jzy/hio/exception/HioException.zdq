package com.jzy.hio.exception;

/**
 * 子类在构造方法中 需要重新赋值 字段: exception和code
 * 
 * @author coffee<br>
 * @date 2018年3月5日上午9:30:51
 */
public class HioException extends RuntimeException {

	private static final long serialVersionUID = 1918593524536858536L;

	public static final int SUCCESS = 200;
	public static final int SERVER_INTERNAL = 500;
	/**
	 * 非法session
	 */
	public static final int SESSION_INVALID = 501;
	/**
	 * 接口权限不足
	 */
	public static final int PERMISSION = 502;
	/**
	 * http重复请求
	 */
	public static final int HTTP_REQUEST_DUPLICATE = 503;

	public static final int MYBATIS_INSERT_FAILED = 601;// 数据库插入失败
	public static final int MYBATIS_DELETE_FAILED = 602;// 数据库删除失败
	public static final int MYBATIS_DELETE_PSEUDO_FAILED = 603;// 数据库插入失败
	public static final int MYBATIS_UPDATE_FAILED = 604;// 数据库插入失败
	public static final int MYBATIS_QUERY_FAILED = 605;
	public static final int MYBATIS_GET_FAILED = 606;// 获取单条数据
	public static final int MYBATIS_PAGE_FAILED = 607;// 分页
	public static final int REDIS_SET_FAILED = 701;// redis存储失败
	public static final int REDIS_DELETE_FAILED = 702;// redis存储失败
	public static final int REDIS_SYNC_FAILED = 703;// redis同步失败
	public static final int REQUEST_PARAM_INVALID = 801; // 参数校验非法

	/**
	 * 1000 以上是业务异常
	 */
	private static final int sysIndex = 1000;
	public static final Emun sysPremission = new Emun(sysIndex + 1, "权限不足");
	private static final int sysRoleIndex = 1100;
	public static final Emun sysRoleExist = new Emun(sysRoleIndex + 1, "角色已经存在");
	public static final Emun sysRoleSuperModidyForbid = new Emun(sysRoleIndex + 2, "系统管理员无法修改用户名");
	public static final Emun sysRoleDeleteForbid = new Emun(sysRoleIndex + 3, "该角色存在用户无法删除");
	public static final Emun sysRoleUserDeleteForbid = new Emun(sysRoleIndex + 4, "无法删除该用户");

	// 登录返回码
	public static final Emun loginGetUserInfoFailed = new Emun(1195, "获取用户信息失败");
	public static final Emun loginGetRoleButtonFailed = new Emun(1196, "获取角色按钮失败");
	public static final Emun loginGetUserIdOAFailed = new Emun(1197, "获取用户ID(OA)失败");
	public static final Emun loginInValidToken = new Emun(1198, "非法token");
	public static final Emun loginQrCodeExpired = new Emun(1199, "二维码失效");
	// 好友邀请，同事、外部联系人邀请，好友相关返回码
	public static final Emun sendFriendApply = new Emun(2001, "邀请发送失败");
	public static final Emun sendWorkApply = new Emun(2001, "邀请发送失败！");
	public static final Emun sendTimeOut = new Emun(2004, "您的邀请信息已失效！");
	public static final Emun saveFriendOrWork = new Emun(2005, "保存失败！");
	public static final Emun alreadyCompany = new Emun(2044, "您已属于该企业！");
	public static final Emun healreadyCompany = new Emun(2049, "对方已经是您该公司的员工！");
	public static final Emun healreadyOutCompany = new Emun(2060, "对方已经是该公司的外部联系人！");
	public static final Emun alreadyFriend = new Emun(2043, "对方已经是您的好友！");
	public static final Emun requestRecordOut = new Emun(2045, "邀请已过期！");
	public static final Emun friendList = new Emun(2006, "查询好友失败！");
	public static final Emun friendTotalCount = new Emun(2007, "获取好友总数失败！");
	public static final Emun delFriend = new Emun(2008, "删除好友失败！");
	public static final Emun addBlack = new Emun(2009, "添加黑名单失败！");
	public static final Emun blackList = new Emun(2010, "查询黑名单失败！");
	public static final Emun delBlack = new Emun(2011, "删除黑名单失败！");
	public static final Emun selectShareFriend = new Emun(2012, "请选择共享手机号好友！");
	public static final Emun setShareStatus = new Emun(2013, "请传入共享手机号状态！");
	public static final Emun setShareFaile = new Emun(2014, "设置是否共享手机号失败！");

	// 用户相关返回码
	public static final Emun getUserInfoNoRegister = new Emun(2015, "该用户没有注册！");
	public static final Emun getUserInfoFaile = new Emun(2017, "查询用户卡片失败！");
	public static final Emun valiPwdUpdPhoneNotNull = new Emun(2018, "密码不能为空！");
	public static final Emun valiPwdUpdPhoneError = new Emun(2020, "用户密码不正确！");
	public static final Emun valiPwdUpdPhoneException = new Emun(2021, "修改手机号之前的验证密码失败！");
	public static final Emun sendValidCodeTimeOut = new Emun(2022, "您的操作已超时，请重新输入密码！");
	public static final Emun sendValidCodeMobileNotNull = new Emun(2023, "手机号不能为空！");
	public static final Emun sendValidCodeMobileError = new Emun(2024, "请输入正确的手机号！");
	public static final Emun sendValidCodeMobileAlready = new Emun(2025, "该手机号码已注册，请使用其他手机号码！");
	public static final Emun sendValidCodeException = new Emun(2027, "验证码发送失败！");
	public static final Emun updPhoneNoValidateError = new Emun(2029, "您的验证码不正确，请核实！");
	public static final Emun updPhoneNoValidateTimeOut = new Emun(2030, "您的验证码已过期，请重新获取！");
	public static final Emun updPhoneNoException = new Emun(2032, "修改手机号失败！");
	public static final Emun changeStatusSelectStatus = new Emun(2033, "请选择切换的状态！");
	public static final Emun changeStatusException = new Emun(2034, "个人状态切换失败！");
	public static final Emun mobileNoRegister = new Emun(2036, "该手机号未注册！");
	public static final Emun queryOnlineFriend = new Emun(2038, "查询在线好友失败！");
	public static final Emun queryOnlineWorker = new Emun(2039, "查询在线同事失败！");
	public static final Emun changeRegion = new Emun(2035, "验证失败！");
	public static final Emun getSimpleUserInfoFaile = new Emun(2040, "查询用户信息失败！");
	public static final Emun nameCanNotEmpty = new Emun(2046, "请填写昵称！");
	public static final Emun nameLengthOut = new Emun(2048, "姓名不能超过20个汉字或字符！");
	public static final Emun mobileLengthOut = new Emun(2063, "请输入正确的手机号！");
	public static final Emun contentLengthOut = new Emun(2062, "请求信息不能超过50个汉字或字符！");
	public static final Emun nickNameLengthOut = new Emun(2061, "昵称不能超过20个汉字或字符！");
	public static final Emun aliasNameLengthOut = new Emun(2058, "备注不能超过20个汉字或字符！");
	public static final Emun noAddOwer = new Emun(2059, "不能添加自己！");

	public static final Emun userHasInvited = new Emun(2047, "该用户在系统已经是您的未激活同事，重发邀请成功!");
	public static final Emun userWorkOnline = new Emun(2051, "该用户在系统已经是您的同事，邀请失败!");
	public static final Emun userWorkLevae = new Emun(2052, "该用户在系统属于离职状态，请到web端修改为在职!");
	public static final Emun userNoInvite = new Emun(2053, "该用户在系统属于未邀请人员，邀请成功!");
	public static final Emun userHasInvitedExternal = new Emun(2050, "该用户在系统已经是您的未激活外部联系人，重发邀请成功!");
	public static final Emun userHasInvitedExternalOnline = new Emun(2054, "该用户在系统已经是您的外部联系人，邀请失败!");

	public static final Emun tendIdDoesNotExist = new Emun(2055, "该企业已经不存在!");
	public static final Emun emailLengthOut = new Emun(2056, "邮箱长度不能大于64个字符!");
	public static final Emun positionLengthOut = new Emun(2057, "职位长度不能大于20个字符!");

	// 用户租户相关返回码
	public static final Emun EDITMAINTENDEXCEPTION = new Emun(2037, "修改主企业失败");
	public static final String EDITMAINTENDSUCCESS = "修改主企业成功！";
	public static final String DELUSERTENDSUCCESS = "删除用户企业关系成功！";
	public static final Emun DELUSERTENDEXCEPTION = new Emun(2041, "删除用户企业关系失败!");
	public static final String UPDATEUSERTENDSUCCESS = "修改用户企业关系成功！";
	public static final Emun UPDATEUSERTENDEXCEPTION = new Emun(2042, "修改用户企业关系失败!");

	// =====================================流程返回码========================= //
	// 流程返回码范围：1200 - 1299
	// =====================================新闻返回码========================= //
	public static final Emun newsTypeNotDelete = new Emun(1600, "当前栏目中有文章，该栏目不允许删除！");
	public static final Emun newsTypeNotExist = new Emun(1601, "操作失败，该栏目不存在！");
	public static final Emun newsTypeNameIsNull = new Emun(1602, "新闻栏目名称不能为空！");
	public static final Emun newsIsNull = new Emun(1603, "新闻已不存在或您的访问权限被取消！");
	public static final Emun newsTypeExist = new Emun(1603, "该新闻栏目已存在，不允许重复创建！");

	// =====================================网盘返回码========================= //
	public static final Emun diskValidateDateNotPass = new Emun(1300, "校验数据不通过");
	public static final Emun diskValidateParamsNotIsBlank = new Emun(1301, "相关参数不能为空");
	public static final Emun diskFileNameExist = new Emun(1302, "文件名称已存在");
	public static final Emun diskNoDownLoadAuthority = new Emun(1303, "没有下载权限");
	public static final Emun diskNoEditAuthority = new Emun(1304, "没有编辑权限");
	public static final Emun diskNoDeleteAuthority = new Emun(1305, "没有删除权限");
	public static final Emun diskInitializeSpace = new Emun(1306, "初始网盘空间异常");
	public static final Emun diskNoPreviewAuthority = new Emun(1307, "没有预览权限");
	public static final Emun diskNoUploadAuthority = new Emun(1308, "没有上传权限");
	public static final Emun diskDirectoryNoExist = new Emun(1309, "目录不存在");
	public static final Emun diskDataNoExist = new Emun(1310, "文件不存在");
	public static final Emun diskHbaseFAILED = new Emun(1311, "Hbase异常");
	public static final Emun diskHDFSFAILED = new Emun(1312, "HDFS异常");
	public static final Emun diskDownLoadFAILED = new Emun(1313, "下载异常");
	public static final Emun diskNoFileId = new Emun(1314, "不存在此文件");
	public static final Emun previewFileFailed = new Emun(1315, "预览文件异常");
	public static final Emun fileConverterFailed = new Emun(1316, "转换预览文件异常");
	public static final Emun fileUploadFDFSFailed = new Emun(1317, "上传FDFS异常");
	public static final Emun isNotRootDirectory = new Emun(1318, "不是根目录");
	public static final Emun isCannotDelete = new Emun(1319, "根目录的文件夹不可以删除");
	public static final Emun previewFileExtendNameIsNull = new Emun(1320, "预览文件类型为空");
	public static final Emun previewFileExtendNameNotConformity = new Emun(1321, "预览文件类型不匹配");
	public static final Emun diskUploadWrong = new Emun(1322, "网盘文件上传异常");
	public static final Emun diskDataNotExist = new Emun(1323, "数据不存在");
	public static final Emun diskCopyFolderEquleFailed = new Emun(1324, "目标与源文件夹相同，请选择其它文件夹");
	public static final Emun diskMoveRootFolderFailed = new Emun(1325, "根目录文件夹不可以移动");
	public static final Emun isCannotRename = new Emun(1326, "公共文件夹不可以重命名");
	public static final Emun diskRootFolderNoExist = new Emun(1327, "根目录不存在");
	public static final Emun diskNoSpace = new Emun(1328, "网盘没有可用空间");
	public static final Emun diskOnlySendFile = new Emun(1329, "只能发送文件");
	public static final Emun diskSpaceQueryError = new Emun(1330, "查询企业网盘空间失败");
	public static final Emun diskProjectNoEditAuthority = new Emun(1331, "项目文件夹不可以操作");
	public static final Emun diskFileFailed = new Emun(1332, "删除文件异常");
	public static final Emun diskRenameFailed = new Emun(1333, "重命名文件或文件夹异常");
	public static final Emun diskMoveFailed = new Emun(1334, "移动文件或文件夹异常");
	public static final Emun diskCopyFailed = new Emun(1335, "复制文件或文件夹异常");
	public static final Emun diskCanotFavoriteDirectory = new Emun(1336, "文件夹不可收藏");
	public static final Emun diskNoDeleteAuthorityOrNoFile = new Emun(1337, "没有删除权限或者没有要删除的文件");
	public static final Emun diskNewDirectoryFailed = new Emun(1338, "新建文件夹异常");
	public static final Emun diskInitializeSpaceFailed = new Emun(1339, "初始化网盘空间异常");
	public static final Emun diskQueryDiskSpaceFailed = new Emun(1340, "查询网盘空间异常");
	public static final Emun diskQueryPageListFailed = new Emun(1341, "查询个人网盘文件分页异常");
	public static final Emun diskCopyRootFolderFailed = new Emun(1342, "根目录文件夹不可以复制");
	public static final Emun diskReNameRootFolderFailed = new Emun(1343, "根目录文件夹不可以重命名");
	public static final Emun diskErrorInterface = new Emun(1344, "接口调用错误");
	public static final Emun diskQueryDirectoryFileTotalNumAndTotalSizeFailed = new Emun(1345, "查询文件夹下文件总数量和总大小异常");
	public static final Emun diskNoOperationAuthority = new Emun(1346, "没有网盘操作权限，请联系管理员");
	public static final Emun DISK_SEARCH_INDICES_NOT_EXIST = new Emun(1347, "无法定位当前用户的索引数据，检索失败");
	public static final Emun DISK_QUERY_TREE_FAILED = new Emun(1348, "查询树形列表异常");
	public static final Emun DISK_TURN_STORAGE_FAILED = new Emun(1349, "转存异常");
	public static final Emun diskMoveFolderNotMoveChildFolder = new Emun(1350, "不可以移动文件夹到自己的子文件夹，请选择其它文件夹");
	public static final Emun diskMoveFolderEquleFailed = new Emun(1351, "目标与源文件夹相同，请选择其它文件夹");
	public static final Emun diskRequestFeignFailed = new Emun(1352, "调用Feign接口异常");
	public static final Emun diskNoTransferDirectoryAuthority = new Emun(1353, "没有该目录的操作权限，不可以转存文件到该目录");
	public static final Emun diskSpaceDeleteFailed = new Emun(1354, "网盘空间删除失败");
	public static final Emun diskQueryFailed = new Emun(1355, "查询失败");
	public static final Emun diskEditDirectoryAuthorizeFailed = new Emun(1356, "设置目录权限失败");
	public static final Emun diskTurnRootDirectoryFailed = new Emun(1357, "无法转存根目录");
	
	// ======================办公用品返回码======================================
	public static final Emun officeHouseStockCountNotZero = new Emun(1400, "该物品库存不为0，不能禁用！");
	public static final Emun officeHouseStockCountNotZero_1 = new Emun(1411, "该类别下物品库存不为0，不能禁用！");
	public static final Emun officeHouseTypeNameExist = new Emun(1401, "类别名称已经存在！");
	public static final Emun officeInfoExistUpdate = new Emun(1402, "物品名称、所属类别、规格、品牌都相同的物品只能入库一次！");
	public static final Emun officeInCodeTooMax = new Emun(1403, "入库单编号太大，不允许生成！");
	public static final Emun officeOutCodeTooMax = new Emun(1404, "出库单编号太大，不允许生成！");
	public static final Emun officeHouseStateForbidden = new Emun(1405, "类别已经被禁用！");
	public static final Emun officeInfoStateForbidden = new Emun(1406, "物品已经被禁用！");
	public static final Emun officeHouseNotExist = new Emun(1407, "类别不存在");
	public static final Emun officeinfoNumToMax = new Emun(1408, "出库数量已经超出库存量！");
	public static final Emun orderByError = new Emun(1409, "排序入参错误！");
	public static final Emun officeInfoNotExist = new Emun(1410, "物品不存在！");
	// ======================会议返回码======================================
	public static final Emun meetingBoardroomNotExist = new Emun(1500, "会议室不存在！");
	public static final Emun meetingBoardroomExistMeetingInfo = new Emun(1501, "会议室里有未开始或者会议中的会议时不让删除!");
	public static final Emun meetingSummaryExist = new Emun(1502, "该会议已经有会议纪要！");
	public static final Emun typeNotTrue = new Emun(1503, "type不正确！");
	// ======================日志返回码======================================
	public static final Emun dateIsEmpty = new Emun(1600, "日期不存在！");
	public static final Emun journalExist = new Emun(1601, "当天日志已存在！");
	public static final Emun typeNotExist = new Emun(1602, "type为空！");
	public static final Emun journalIsNull = new Emun(1603, "日志已不存在或您的访问权限被取消！");

	// =====================================附件返回码========================= //
	public static final Emun attachmentValidateDateNotPass = new Emun(1700, "校验数据不通过");
	public static final Emun attachmentValidateParamsNotIsBlank = new Emun(1701, "相关参数不能为空");
	public static final Emun attachmentValidateFileSize = new Emun(1702, "上传文件大小只能小于等于20MB");

	// ======================计划返回码======================================
	public static final Emun planExist = new Emun(1800, "当天计划已存在，操作失败！");
	public static final Emun planIsNull = new Emun(1801, "计划已不存在或您的访问权限被取消！");

	// ======================业务无关的异常返回码======================================
	public static final Emun dataInsertFailed = new Emun(1900, "数据保存失败！");
	public static final Emun dataUpdateFailed = new Emun(1901, "数据更新失败！");
	public static final Emun paramNotExist = new Emun(1902, "参数不允许为空！");
	public static final Emun systemIsBusy = new Emun(1903, "系统繁忙，请稍后再试！");

	// ======================邮箱返回码======================================

	/**
	 * 2101：确认密码与密码不一致
	 */
	public static final Emun MAILBOX_CONFIRM_PASSWORD_NOT_RIGHT = new Emun(2101, "确认密码与密码不一致");
	public static final Emun MAILBOX_ACCOUNT_NOT_EXIST = new Emun(2102, "未绑定邮箱账号");

	///
	private int code;
	/**
	 * {@link GlobalExceptionHandler}捕获的异常 会获取exception字段信息
	 */
	protected String exception;

	/**
	 * 不推荐使用、因为没有详细的log信息 不利于排错 <br>
	 * 由 {@link #HioException(String)}代替
	 */
	@Deprecated
	public HioException() {
		this("未知错误");
	}

	/**
	 * 业务中的异常<br>
	 * 可预知的错误、需要尽可能详细的填写错误信息、方便日志追踪
	 * 
	 * @param exception
	 */
	public HioException(String exception) {
		super(exception);
		this.exception = exception;
		code = sysIndex;
	}

	public HioException(Emun emun) {
		super(emun.getMessage());
		code = emun.status;
		exception = emun.getMessage();
	}

	/**
	 * 程序出错<br>
	 * 一般项目出现未知错误的时候 调用该构造参数
	 * 
	 * @param e
	 */
	public HioException(Exception e) {
		super(e);
		code = SERVER_INTERNAL;
	}

	public HioException(String exception, int code) {
		super(exception);
		this.exception = exception;
		this.code = code;
	}

	public HioException(String message, Throwable cause) {
		super(message, cause);
	}

	public int getCode() {
		return code;
	}

	public void setCode(int code) {
		this.code = code;
	}

	public String getException() {
		return exception;
	}

	public void setException(String exception) {
		this.exception = exception;
	}

	public static class Emun {
		private int status;
		private String message;

		public Emun(int status, String message) {
			super();
			this.status = status;
			this.message = message;
		}

		public int getStatus() {
			return status;
		}

		public void setStatus(int status) {
			this.status = status;
		}

		public String getMessage() {
			return message;
		}

		public void setMessage(String message) {
			this.message = message;
		}
	}
}
