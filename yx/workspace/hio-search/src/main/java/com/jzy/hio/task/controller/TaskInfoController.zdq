package com.jzy.hio.task.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.BeanCreationException;
import org.springframework.beans.factory.BeanDefinitionStoreException;
import org.springframework.beans.factory.CannotLoadBeanClassException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.task.entity.TaskInfo;
import com.jzy.hio.task.service.TaskInfoService;
import com.jzy.tools.data.JacksonUtils;

/**
 * 任务定义信息控制层
 * @author admin
 *
 */
@RestController
@RequestMapping("/univ/task/taskInfo")
@Api(tags = {"任务定义信息"})
public class TaskInfoController extends ResponseModel {
	
	private final static Logger log = LoggerFactory.getLogger(TaskInfoController.class);
	
	@Autowired
	private TaskInfoService taskInfoService;
	
	/**
	 * 根据Id获取业务对象
	 * 
	 * @param id 业务对象主键
	 * 
	 * @return 业务对象
	 */
	@RequestMapping(value="/get/{id}",method=RequestMethod.GET)
	public @ResponseBody MessageResult get(@PathVariable("id")  String id){
		MessageResult result=new MessageResult();
		try {
			TaskInfo taskInfo = taskInfoService.getObjectById(id);
			if(taskInfo != null) {
				result.setResult(taskInfo, MessageInfo.QUERYSUCCESS.getMsg());
				result.setSuccess(MessageInfo.QUERYSUCCESS.isResult());
			}else {
				result.setSuccess(MessageInfo.QUERYERROR.isResult());
				result.setMsg(MessageInfo.QUERYERROR.getMsg());
			}
		} catch (Exception e) {
			log.error("调用get方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.QUERYERROR.isResult());
			result.setMsg(MessageInfo.QUERYERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;
	}
	
	/**
	 * 返回分页对象
	 * @param map
	 * @return
	 */
	@RequestMapping(value="/page",method={RequestMethod.POST}, consumes="application/json")
	public MessageResult page(@RequestBody Map<String,Object> map){
		MessageResult result=new MessageResult();
		try {
			Page page = taskInfoService.getTaskInfoByPage(map);
			if(page != null) {
				result.setResult(page, MessageInfo.QUERYSUCCESS.getMsg());
				result.setSuccess(MessageInfo.QUERYSUCCESS.isResult());
			}else {
				result.setSuccess(MessageInfo.QUERYERROR.isResult());
				result.setMsg(MessageInfo.QUERYERROR.getMsg());
			}
		} catch (Exception e) { 			
			log.error("调用page方法:  【参数"+map.toString()+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.QUERYERROR.isResult());
			result.setMsg(MessageInfo.QUERYERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;
	}
	
	/**
	 * 返回符合条件的列表
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "条件列表查询",notes="条件列表查询")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "agent",dataType = "String",value = "condition query",required = true)})
	@RequestMapping(value="/queryList",method={RequestMethod.POST}, consumes="application/json")
	public  MessageResult queryList(@RequestBody TaskInfo taskInfo){
		try {
			List<TaskInfo> queryList =  taskInfoService.queryList(taskInfo);
			return getSuccessResultModel(queryList);
		} catch (Exception e) {
			log.error("调用queryList方法:  【参数"+taskInfo.toString()+"】======"+"【"+e.getMessage()+"】");
			e.printStackTrace();
			return getErrorResultModel();
		}
		
//		MessageResult result=new MessageResult();
//		String paramaterJson = JacksonUtils.toJson(map);
//		try {
//			String dubboResultInfo=taskInfoDtoServiceCustomer.queryList(getUserInfo(), paramaterJson);
//		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//		    if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				List<TaskInfoDto> list=JacksonUtils.fromJson(resultInfo, ArrayList.class,TaskInfoDto.class);
//				result.setResult(list);
//				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
//				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
//		    }else{
//		    	result.setSuccess(MessageInfo.GETERROR.isResult());
//				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//		    }
//			
//		} catch (Exception e) {
//			log.error("调用queryList方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.GETERROR.isResult());
//			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
//		}
//		return result;
		
	}
	
	/**
	 * 保存实体对象
	 * @param taskInfo
	 * @return
	 */
	@RequestMapping(value="/save",method=RequestMethod.POST, consumes="application/json")
	public  MessageResult save(@RequestBody TaskInfo taskInfo){
		MessageResult result=new MessageResult();
		String taskFor = null;
		try {
			taskFor = taskInfo.getIsForPlatform()?"平台":"业务系统";
			//编码唯一性验证
			TaskInfo existTiCode = new TaskInfo();
			existTiCode.setCode(taskInfo.getCode());
			List<TaskInfo> queryList =  taskInfoService.queryList(existTiCode);
			if(queryList != null && queryList.size() > 0) {
				result.setSuccess(MessageInfo.SAVEERROR.isResult());
				result.setMsg("自动任务的编码重复，请重新输入");
			}else {
				int count = taskInfoService.save(taskInfo);
				if(count == 1) {
					result.setResult(count, MessageInfo.SAVESUCCESS.getMsg());
					result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
				}else {
					result.setSuccess(MessageInfo.SAVEERROR.isResult());
					result.setMsg(MessageInfo.SAVEERROR.getMsg());
				}
			}
		}catch(Exception e) {
			if (e instanceof BeanCreationException) {
				if (e.getCause() instanceof CannotLoadBeanClassException) {
					result.setCode("0001");
					result.setMsg(taskFor + "任务类["+((CannotLoadBeanClassException)e.getCause()).getBeanClassName()+"]不存在");
				} else if (e.getCause() instanceof NoSuchMethodException) {
					result.setCode("0002");
					String method = e.getCause().getMessage();
					String fullMethodName = method.substring(0, method.indexOf('('));
					String methodName = fullMethodName.substring(fullMethodName.lastIndexOf('.') + 1);
					String rightName = methodName + method.substring(method.indexOf('('));
					result.setMsg(taskFor + "任务方法[" + rightName + "]不存在");
				} else {
					result.setMsg("保存任务失败!");
				}
			} else if (e instanceof CannotLoadBeanClassException) {
				result.setCode("0001");
				result.setMsg(taskFor + "任务类["+((CannotLoadBeanClassException)e).getBeanClassName()+"]不存在");
			} else if (e instanceof BeanDefinitionStoreException) {
				result.setCode("0003");
				result.setMsg(e.getMessage());
			} else {
				result.setMsg("保存任务失败!");
			}
			log.error("调用save方法:  【参数"+taskInfo.toString()+"】======"+"【"+e.getMessage()+"】");
		}
		return result;
	}
	
	/**
	 * 删除实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "删除",notes="删除")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "id",value = "id",required = true,dataType = "String")})
	@RequestMapping(value="/delete/{id}",method=RequestMethod.DELETE)
	public MessageResult delete(@PathVariable("id")  String id){
		try {
			int deleteCount = taskInfoService.deleteObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deleteCount);
			return successResultModel;
		} catch (Exception e) { 			
			log.error("调用delete方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
		
//		MessageResult result=new MessageResult();
//		try {
//			String dubboResultInfo=taskInfoDtoServiceCustomer.deleteObjectById(getUserInfo(), "{\"id\":\""+id+"\"}");
//			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//			if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				TaskInfoDto taskInfoDto=JacksonUtils.fromJson(resultInfo, TaskInfoDto.class);
//				result.setResult(taskInfoDto);
//				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
//				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
//			}else{
//				result.setSuccess(MessageInfo.DELETEERROR.isResult());
//				result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//			}
//		} catch (Exception e) {
//			////e.printStackTrace();
//		    log.error("调用delete方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.DELETEERROR.isResult());
//			result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】");
//		}
//		
//		return result;
	}
	
	
	/**
	 * 批量删除实体对象
	 * @param ids
	 * @return
	 */
	@RequestMapping(value="/deleteBatch/{ids}",method=RequestMethod.DELETE)
	public  MessageResult deleteBatch(@PathVariable("ids")  String ids){
		MessageResult result = new MessageResult();
		try {
			List<String> deleteMethod =  Arrays.asList(ids.split(","));
			int count = taskInfoService.deleteAllObjectByIds(deleteMethod);
			if(count == 1) {
				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
				result.setResult(count, MessageInfo.DELETESUCCESS.getMsg());
			}else {
				result.setSuccess(MessageInfo.DELETEERROR.isResult());
				result.setMsg(MessageInfo.DELETEERROR.getMsg());
			}
		} catch (Exception e) { 			
			log.error("调用delete方法:  【参数"+ids+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.DELETEERROR.isResult());
			result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;
	}
	
	/**
	 * 修改实体对象
	 * @param id
	 * @param map
	 * @return 
	 */
	@RequestMapping(value="/update/{id}",method=RequestMethod.PUT,consumes="application/json")
	public MessageResult update(@PathVariable("id")  String id, @RequestBody Map<String,Object> map){
		MessageResult result = new MessageResult();
		String taskFor = null;
		try {
			TaskInfo queryTaskInfo = taskInfoService.getObjectById(id);
			String json = JacksonUtils.toJson(queryTaskInfo);
			Map<String,Object> oldMap=JacksonUtils.fromJson(json, HashMap.class);
			oldMap.putAll(map);
			String updateJson= JacksonUtils.toJson(oldMap);
			TaskInfo taskInfo = JacksonUtils.fromJson(updateJson, TaskInfo.class);
			taskFor = taskInfo.getIsForPlatform()?"平台":"业务系统";
			int count = taskInfoService.update(taskInfo);
			if(count == 1) {
				result.setResult(count, MessageInfo.UPDATESUCCESS.getMsg());
				result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
			}else {
				result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				result.setMsg(MessageInfo.UPDATEERROR.getMsg());
			}
		}catch(Exception e) {
			if (e instanceof BeanCreationException) {
				if (e.getCause() instanceof CannotLoadBeanClassException) {
					result.setCode("0001");
					result.setMsg(taskFor + "任务类["+((CannotLoadBeanClassException)e.getCause()).getBeanClassName()+"]不存在");
				} else if (e.getCause() instanceof NoSuchMethodException) {
					result.setCode("0002");
					String method = e.getCause().getMessage();
					String fullMethodName = method.substring(0, method.indexOf('('));
					String methodName = fullMethodName.substring(fullMethodName.lastIndexOf('.') + 1);
					String rightName = methodName + method.substring(method.indexOf('('));
					result.setMsg(taskFor + "任务方法[" + rightName + "]不存在");
				} else {
					result.setMsg("更新任务失败!");
				}
			} else if (e instanceof CannotLoadBeanClassException) {
				result.setCode("0001");
				result.setMsg(taskFor + "任务类["+((CannotLoadBeanClassException)e).getBeanClassName()+"]不存在");
			} else if (e instanceof BeanDefinitionStoreException) {
				result.setCode("0003");
				result.setMsg(e.getMessage());
			} else {
				result.setMsg("更新任务失败!");
			}
			log.error("调用update方法:  【参数"+id+"，"+map.toString()+"】======"+"【"+e.getMessage()+"】");
		}
		return result;
	}
	
	/**
	 * 暂停||恢复
	 * @param ids
	 * @param map
	 * @return
	 */
	@RequestMapping(value="/updateTaskState/{ids}",method=RequestMethod.PUT,consumes="application/json")
	public @ResponseBody MessageResult updateTaskState(@PathVariable("ids") String ids, @RequestBody Map<String,Object> map){
		MessageResult result=new MessageResult();
		try {
			String updateMapJson = JacksonUtils.toJson(map);
			if (StringUtils.isNotBlank(ids) && StringUtils.isNotBlank(updateMapJson)) {
				Map<String, Object> updateMap = JacksonUtils.fromJson(updateMapJson, HashMap.class);
				List<String> list = Arrays.asList(ids.split(","));
				int count = taskInfoService.updateTaskState(list, updateMap);
				Boolean active = (Boolean) map.get("active");
				if(count > 0){
					 result.setSuccess(true);
					 result.setMsg(active == true?"任务恢复成功":"任务暂停成功");
				 }else{
					 result.setSuccess(false);
					 result.setMsg(active == true?"任务恢复失败":"任务暂停失败");
				 }
			}
		} catch (Exception e) {
			log.error("调用updateTaskState方法:  【参数" + ids + "，map" + map.toString() + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.UPDATEERROR.isResult());
			result.setMsg(MessageInfo.UPDATEERROR.getMsg() + "【" + e.getMessage() + "】");
		}
		return result;
	}
	
	/**
	 * 立即执行任务操作
	 * 
	 * @param t 
	 * @return
	 */
	@RequestMapping(value="/executeNow/{ids}",method=RequestMethod.GET,consumes="application/json")
	public @ResponseBody MessageResult executeNow(@PathVariable("ids") String ids){
		MessageResult result=new MessageResult();
		try {
			if (StringUtils.isNotBlank(ids)) {
				List<String> list = Arrays.asList(ids.split(","));
				int executeResult = taskInfoService.executeNow(list);
				if(executeResult == 0){
					 result.setSuccess(true);
					 result.setMsg("任务立即执行成功");
				 }else{
					 result.setSuccess(false);
					 result.setMsg("任务立即执行失败");
				 }
			}
		} catch (Exception e) {
			log.error("调用executeNow方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
			result.setSuccess(MessageInfo.UPDATEERROR.isResult());
			result.setMsg("立即执行失败【" + e.getMessage() + "】");
		}
		return result;
	}
	
}
