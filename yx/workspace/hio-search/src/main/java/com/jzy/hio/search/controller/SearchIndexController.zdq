package com.jzy.hio.search.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.utils.LoginUtils;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.search.entity.SearchIndex;
import com.jzy.hio.search.service.SearchIndexService;
import com.jzy.tools.data.JacksonUtils;


/**
 * 索引表控制层
 * @author admin
 *
 */
@RestController
@RequestMapping("/univ/search/searchIndex")
@Api(tags = {"索引"},description = "searchIndex")
public class SearchIndexController extends ResponseModel {

	private static Logger log = LoggerFactory.getLogger(SearchIndexController.class);
	
	@Autowired
	private SearchIndexService searchIndexService;
	
	
	/**
	 * 根据Id获取业务对象
	 * @param id 业务对象主键
	 * @return 业务对象
	 */
	@ApiOperation(value= "获取详情",notes="获取详情")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "id",value = "id",required = true,dataType = "String")})
	@RequestMapping(value="/get/{id}",method=RequestMethod.GET)
	public MessageResult get(@PathVariable("id") String id){
		try {
			SearchIndex si = searchIndexService.getObjectById(id);
			return this.getResultMOdelWithData(MessageInfo.GETSUCCESS, si);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return this.getResultMOdel(MessageInfo.GETERROR);
		}
	}
	
	
	/**
	 * 返回分页对象
	 * @param map
	 * @return
	 */
	@ApiOperation(value= "分页查询",notes="分页查询")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "map",value = "limit query",required = true,dataType = "Map")})
	@RequestMapping(value="/page",method={RequestMethod.POST}, consumes="application/json")
	public MessageResult page(@RequestBody Map<String,Object> map){
		try {
			Page page = searchIndexService.getPage(map);
			return this.getResultMOdelWithData(MessageInfo.GETSUCCESS, page);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return this.getResultMOdel(MessageInfo.GETERROR);
		}
	}
	
	
	/**
	 * 返回分页对象
	 * @param map
	 * @return
	 */
	@ApiOperation(value= "分页查询",notes="分页查询")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "map",value = "limit query",required = true,dataType = "Map")})
	@RequestMapping(value="/pageFullTextQuery",method={RequestMethod.POST}, consumes="application/json")
	public MessageResult pageFullTextQuery(@RequestBody Map<String,Object> map){
		try {
			SecurityUserBeanInfo userInfo = LoginUtils.getSecurityUserBeanInfo();
			// 租户ID作为ES索引Index
			map.put("esDocIndex", userInfo.getTendId());
			Page page = searchIndexService.getPageFullTextQuery(map);
			
			return this.getResultMOdelWithData(MessageInfo.GETSUCCESS, page);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return this.getResultMOdel(MessageInfo.GETERROR);
		}
	}
	
	
	/**
	 * 返回符合条件的列表
	 * @param searchIndex
	 * @return
	 */
	@ApiOperation(value= "条件列表查询",notes="条件列表查询")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "searchIndex",dataType = "String",value = "condition query",required = true)})
	@RequestMapping(value="/queryList",method={RequestMethod.POST}, consumes="application/json")
	public MessageResult queryList(@RequestBody SearchIndex searchIndex){
		try {
			List<SearchIndex> resultList = searchIndexService.queryList(searchIndex);
			return this.getResultMOdelWithData(MessageInfo.GETSUCCESS, resultList);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return this.getResultMOdel(MessageInfo.GETERROR);
		}
	}
	
	
	/**
	 * 保存实体对象
	 * @param si
	 * @return
	 */
	@ApiOperation(value= "保存",notes="保存")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "dto",value = "save",required = true,dataType = "String")})
	@RequestMapping(value="/save",method=RequestMethod.POST, consumes="application/json")
	public MessageResult save(@RequestBody SearchIndex si){
		try {
			searchIndexService.saveDef(si);
			return this.getResultMOdelWithData(MessageInfo.SAVESUCCESS, si);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return this.getResultMOdel(MessageInfo.SAVEERROR);
		}
	}
	
	
	/**
	 * 删除实体对象
	 * @param id
	 * @return
	 */
	@ApiOperation(value= "删除",notes="删除")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "id",value = "id",required = true,dataType = "String")})
	@RequestMapping(value="/delete/{id}",method=RequestMethod.DELETE)
	public  MessageResult delete(@PathVariable("id") String id){
		try {
			int deleteCount = searchIndexService.deleteObjectByIdDef(id);
			return this.getResultMOdelWithData(MessageInfo.DELETESUCCESS, deleteCount);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return this.getResultMOdel(MessageInfo.DELETEERROR);
		}
	}
	
	
	/**
	 * 批量删除实体对象
	 * @param ids
	 * @return
	 */
	@ApiOperation(value= "批量删除",notes="批量删除")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "ids",value = "ids",required = true,dataType = "String")})
	@RequestMapping(value="/deleteBatch/{ids}",method=RequestMethod.DELETE)
	public  MessageResult deleteBatch(@PathVariable("ids") String ids){
		try {
			List<String> deleteMethod =  Arrays.asList(ids.split(","));
			int count = searchIndexService.deleteAllObjectByIds(deleteMethod);
			return this.getResultMOdelWithData(MessageInfo.DELETESUCCESS, count);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return this.getResultMOdel(MessageInfo.DELETEERROR);
		}
	}
	
	
	/**
	 * 修改实体对象
	 * @param map
	 * @return
	 */
	@ApiOperation(value= "修改",notes="修改")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",dataType = "String",name = "id",value = "id",required = true),
		@ApiImplicitParam(paramType="body",dataType = "String",name = "map",value = "map",required = true)})
	@RequestMapping(value="/update/{id}",method=RequestMethod.PUT,consumes="application/json")
	public MessageResult update1(@PathVariable("id") String id, @RequestBody Map<String,Object> map){
		try {
			SearchIndex si = searchIndexService.getObjectById(id);
			String json = JacksonUtils.toJson(si);
			@SuppressWarnings("unchecked")
			Map<String,Object> oldMap = JacksonUtils.fromJson(json, HashMap.class);
			oldMap.putAll(map);
			String updateJson= JacksonUtils.toJson(oldMap);
			si = JacksonUtils.fromJson(updateJson, SearchIndex.class);
			int count = searchIndexService.updateDef(si);
			return this.getResultMOdelWithData(MessageInfo.UPDATESUCCESS, count);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return this.getResultMOdel(MessageInfo.UPDATEERROR);
		}
	}
	
	
	/**
	 * 伪删除实体对象
	 * @param id
	 * @return
	 */
	@ApiOperation(value= "伪删除",notes="伪删除")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",dataType = "String",name = "id",value = "id",required = true)})
	@RequestMapping(value="/deletePseudo/{id}",method=RequestMethod.DELETE)
	public  MessageResult deletePseudo(@PathVariable("id") String id){
		try {
			int count = searchIndexService.deletePseudoObjectById(id);
			return this.getResultMOdelWithData(MessageInfo.DELETESUCCESS, count);
		} catch (Exception e) {
			log.error("-----------"+e.getMessage()+"------------");
			e.printStackTrace();
			return this.getResultMOdel(MessageInfo.DELETEERROR);
		}
	}
	
	
	/**
	 * 伪删除实体对象
	 * @param ids
	 * @return
	 */
	@ApiOperation(value= "伪批量删除",notes="伪批量删除")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",dataType = "String",name = "ids",value = "ids",required = true)})
	@RequestMapping(value="/deletePseudoBatch/{ids}",method=RequestMethod.DELETE)
	public  MessageResult deletePseudoBatch(@PathVariable("ids") String ids){
		try {
			List<String> list = Arrays.asList(ids.split(","));
			int deleteCount = searchIndexService.deletePseudoAllObjectByIds(list);
			return this.getResultMOdelWithData(MessageInfo.DELETESUCCESS, deleteCount);
		} catch (Exception e) {	
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return this.getResultMOdel(MessageInfo.DELETEERROR);
		}
	}
	
	
	/**
	 * 初始化索引映射
	 * @return
	 */
	@ApiOperation(value= "初始化索引映射",notes="初始化索引映射")
	@RequestMapping(value="/initIndexMapping",method=RequestMethod.GET)
	public MessageResult deletePseudoBatch(){
		try {
			SecurityUserBeanInfo userInfo = LoginUtils.getSecurityUserBeanInfo();
			searchIndexService.initIndexMapping(userInfo.getTendId());
			return this.getResultMOdel(MessageInfo.GETSUCCESS);
		} catch (Exception e) {	
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return this.getResultMOdel(MessageInfo.GETERROR);
		}
	}
	
	
}
