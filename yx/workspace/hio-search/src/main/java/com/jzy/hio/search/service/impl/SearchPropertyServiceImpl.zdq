package com.jzy.hio.search.service.impl;

import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.search.entity.SearchProperty;
import com.jzy.hio.search.mapper.SearchPropertyDao;
import com.jzy.hio.search.service.SearchPropertyService;
import com.jzy.tools.data.JacksonUtils;

/**
 * @author haoqp
 * 
 * 
 */
@Transactional
@Service
public class SearchPropertyServiceImpl extends  BaseServiceImpl<String,SearchProperty> implements SearchPropertyService{
	

	private static Logger log = LoggerFactory.getLogger(SearchPropertyServiceImpl.class);
	
	@Autowired
	private SearchPropertyDao searchPropertyDao;

	@Override
	public MessageResult saveDef(SearchProperty searchProperty) {
		MessageResult info = new MessageResult();
		try {
			SearchProperty sp = new SearchProperty();
			sp.setCode(searchProperty.getCode());
			int count = searchPropertyDao.selectCount(sp);
			if (count > 0) {
				info.setSuccess(false);
				info.setMsg("检索属性的编码重复，请重新输入");
			} else {
				sp.setCode(null);
				sp.setName(searchProperty.getName());
				count = searchPropertyDao.selectCount(sp);
				// 名称唯一性验证
				if (count > 0) {
					info.setSuccess(false);
					info.setMsg("检索属性的名称重复，请重新输入");
				} else {
					super.save(searchProperty);
					info.setSuccess(true);
					info.setResult(JacksonUtils.toJson(searchProperty));
					info.setMsg("保存检索属性对象成功!");
				}
			}
			
		} catch (Exception e) {
			log.error("保存对象失败!" + e.getMessage());
			info.setSuccess(false);
			info.setMsg("保存对象失败!");
		}
		return info;
	}
	
	public MessageResult updateDef(SearchProperty searchProperty) {
		MessageResult info = new MessageResult();
		try {
			
			// 编码唯一性验证
			Map<String, Object> paramMap = new HashMap<>();
			paramMap.put("id", searchProperty.getId());
			paramMap.put("code", searchProperty.getCode());
			int count = searchPropertyDao.getCountForUpdate(paramMap);
			if (count > 0) {
				info.setSuccess(false);
				info.setMsg("检索属性的编码重复，请重新输入");
			} else {
				paramMap.remove("code");
				paramMap.put("name", searchProperty.getName());
				count = searchPropertyDao.getCountForUpdate(paramMap);
				// 名称唯一性验证
				if (count > 0) {
					info.setSuccess(false);
					info.setMsg("检索属性的名称重复，请重新输入");
				} else {
					int result = super.update(searchProperty);
					info.setResult(JacksonUtils.toJson(result));
					info.setSuccess(true);
					info.setMsg("更新检索属性对象成功!");
				}
			}
			
		} catch (Exception e) {
			log.error("更新对象失败!" + e.getMessage());
			info.setSuccess(false);
			info.setMsg("更新对象失败!");
		}
		return info;
	
	}


}
