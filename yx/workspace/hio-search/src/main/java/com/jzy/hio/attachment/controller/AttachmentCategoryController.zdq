package com.jzy.hio.attachment.controller;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.attachment.entity.AttachmentCategory;
import com.jzy.hio.attachment.service.AttachmentCategoryService;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.tools.data.JacksonUtils;

import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

/**
 * 附件分类控制层
 * @author haoqp
 *
 */
@RestController
@RequestMapping("/univ/attachment/attachmentCategory")
public class AttachmentCategoryController extends ResponseModel {
	
	private static Logger log = LoggerFactory.getLogger(AttachmentCategoryController.class);
	
	@Autowired
	private AttachmentCategoryService attachmentCategoryService;
	
	/**
	 * 根据Id获取业务对象
	 * 
	 * @param id 业务对象主键
	 * 
	 * @return 业务对象
	 */
	@RequestMapping(value="/get/{id}",method=RequestMethod.GET)
	public MessageResult get(@PathVariable("id")  String id){
		MessageResult result=new MessageResult();
		try {
			AttachmentCategory	attachmentCategory = attachmentCategoryService.getObjectById(id);
			if(attachmentCategory != null) {
				result.setResult(attachmentCategory, MessageInfo.GETSUCCESS.getMsg());
				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
			}else {
				result.setSuccess(MessageInfo.GETERROR.isResult());
				result.setMsg(MessageInfo.GETERROR.getMsg());
			}
		} catch (Exception e) {
			log.error("调用get方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.GETERROR.isResult());
			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;
	}
	
	/**
	 * 返回分页对象
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "分页查询",notes="分页查询")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "map",value = "limit query",required = true,dataType = "Map")})
	@RequestMapping(value="/page",method={RequestMethod.POST}, consumes="application/json")
	public MessageResult page(@RequestBody Map<String,Object> map){
		try {
			Page page = attachmentCategoryService.getPage(map);
			return getSuccessResultModel(page);
		} catch (Exception e) { 			
			log.error("调用page方法:  【参数"+map.toString()+"】======"+"【"+e.getMessage()+"】");
			return getErrorResultModel();
		}
	}
	
	/**
	 * 返回符合条件的列表
	 * @param attachmentCategory
	 * @return
	 */
	@RequestMapping(value="/queryList",method={RequestMethod.POST}, consumes="application/json")
	public MessageResult queryList(@RequestBody AttachmentCategory attachmentCategory){
//		MessageResult result=new MessageResult();
		try {
			List<AttachmentCategory> queryList =  attachmentCategoryService.queryList(attachmentCategory);
			if(queryList != null && queryList.size() > 0) {
//				result.setResult(queryList, MessageInfo.QUERYSUCCESS.getMsg());
//				result.setSuccess(MessageInfo.QUERYSUCCESS.isResult());
				return ResponseModel.getResult(MessageInfo.QUERYSUCCESS, queryList);
			}else {
				return ResponseModel.getResult(MessageInfo.GETERROR, "查询数据失败!");
//				result.setSuccess(MessageInfo.QUERYERROR.isResult());
//				result.setMsg(MessageInfo.QUERYERROR.getMsg());
			}
		} catch (Exception e) {
			log.error("调用queryList方法:  【参数"+attachmentCategory.toString()+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.QUERYERROR.isResult());
//			result.setMsg(MessageInfo.QUERYERROR.getMsg()+"【"+e.getMessage()+"】");
			return ResponseModel.getResult(MessageInfo.GETERROR, "查询数据失败!");
		}
//		return result;
	}
	
	/**
	 * 保存
	 * @param attachmentCategory
	 * @return
	 */
	@RequestMapping(value="/save",method=RequestMethod.POST, consumes="application/json")
	public  MessageResult save(@RequestBody AttachmentCategory attachmentCategory){
		MessageResult result = new MessageResult();
		try {
			// 编码唯一性验证
			AttachmentCategory existAcCode = new AttachmentCategory();
			existAcCode.setCode(attachmentCategory.getCode());
			List<AttachmentCategory> acList = attachmentCategoryService.queryList(existAcCode);
			if (acList != null && acList.size() > 0) {
				result.setSuccess(MessageInfo.SAVEERROR.isResult());
				result.setMsg("附件分类编码重复，请重新输入");
			}else {
				// 名称唯一性验证
				AttachmentCategory existAcName = new AttachmentCategory();
				existAcName.setName(attachmentCategory.getName());
				acList = attachmentCategoryService.queryList(existAcName);
				if (acList != null && acList.size() > 0) {
					result.setSuccess(MessageInfo.SAVEERROR.isResult());
					result.setMsg("附件分类编码重复，请重新输入");
				} else {
					int count = attachmentCategoryService.save(attachmentCategory);
					if(count == 1) {
						result.setResult(count, MessageInfo.SAVESUCCESS.getMsg());
						result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
					}else {
						result.setSuccess(MessageInfo.SAVEERROR.isResult());
						result.setMsg(MessageInfo.SAVEERROR.getMsg());
					}
				}
			}
		} catch (Exception e) { 			
			log.error("调用save方法:  【参数"+attachmentCategory.toString()+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.SAVEERROR.isResult());
			result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;
	}
	
	/**
	 * 删除
	 * @param id
	 * @return
	 */
	@RequestMapping(value="/delete/{id}",method=RequestMethod.DELETE)
	public MessageResult delete(@PathVariable("id")  String id){
		MessageResult result=new MessageResult();
		try {
			int deleteCount = attachmentCategoryService.deleteObjectById(id);
			if(deleteCount == 1) {
				result.setResult(deleteCount, MessageInfo.DELETESUCCESS.getMsg());
				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
			}else {
				result.setSuccess(MessageInfo.DELETEERROR.isResult());
				result.setMsg(MessageInfo.DELETEERROR.getMsg());
			}
		} catch (Exception e) { 			
			log.error("调用delete方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.DELETEERROR.isResult());
			result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;
	}
	
	
	/**
	 * 删除实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "批量删除",notes="批量删除")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "ids",value = "ids",required = true,dataType = "String")})
	@RequestMapping(value="/deleteBatch/{ids}",method=RequestMethod.DELETE)
	public  MessageResult deleteBatch(@PathVariable("ids")  String ids){
		try {
			List<String> deleteMethod =  Arrays.asList(ids.split(","));
			int count = attachmentCategoryService.deleteAllObjectByIds(deleteMethod);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(count);
			return successResultModel;
		} catch (Exception e) { 			
			log.error("调用delete方法:  【参数"+ids+"】======"+"【"+e.getMessage()+"】");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
		
//		MessageResult result=new MessageResult();
//		try {
//			SecurityUserBeanInfo userInfo = LoginUtils.getSecurityUserBeanInfo();
//			String dubboResultInfo=attachmentCategoryDtoServiceCustomer.deleteAllObjectByIds(JacksonUtils.toJson(userInfo), "{\"id\":\""+ids+"\"}");
//			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//			if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				AttachmentCategoryDto attachmentCategoryDto=JacksonUtils.fromJson(resultInfo, AttachmentCategoryDto.class);
//				result.setResult(attachmentCategoryDto);
//				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
//				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
//			}else{
//				result.setSuccess(MessageInfo.DELETEERROR.isResult());
//				result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//			}
//		} catch (Exception e) {
//			////e.printStackTrace();
//		    log.error("调用delete方法:  【参数"+ids+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.DELETEERROR.isResult());
//			result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】");
//		}
//		
//		return result;
	}
	
	/**
	 * 修改
	 * @param id
	 * @param map
	 * @return
	 */
	@RequestMapping(value="/update/{id}",method=RequestMethod.POST,consumes="application/json")
	public MessageResult update(@PathVariable("id") String id, @RequestBody Map<String,Object> map){
		MessageResult result = new MessageResult();
		try {
			AttachmentCategory attachmentCategory = attachmentCategoryService.getObjectById(id);
			String json = JacksonUtils.toJson(attachmentCategory);
			Map<String,Object> oldMap=JacksonUtils.fromJson(json, HashMap.class);
			oldMap.putAll(map);
			String updateJson= JacksonUtils.toJson(oldMap);
			AttachmentCategory fromJson = JacksonUtils.fromJson(updateJson, AttachmentCategory.class);
			// 编码唯一性验证
		    Map<String, Object> parameter = new HashMap<>();
		    parameter.put("id", attachmentCategory.getId());
		    parameter.put("code", attachmentCategory.getCode());
		    int count = attachmentCategoryService.getCountOfCodeForUpdate(parameter);
		    if (count > 0) {
		    	result.setSuccess(MessageInfo.UPDATEERROR.isResult());
		    	result.setMsg("附件分类编码重复，请重新输入");
		    } else {
		       parameter.remove("code");
			   parameter.put("name", attachmentCategory.getName());
			   count = attachmentCategoryService.getCountOfCodeForUpdate(parameter);
			   if (count > 0) {
				   result.setSuccess(MessageInfo.UPDATEERROR.isResult());
				   result.setMsg("附件分类编码重复，请重新输入");
			   } else {
					int updateCount = attachmentCategoryService.update(fromJson);
					if(updateCount == 1) {
						result.setResult(updateCount, MessageInfo.UPDATESUCCESS.getMsg());
						result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
					}else {
						result.setSuccess(MessageInfo.UPDATEERROR.isResult());
						result.setMsg(MessageInfo.UPDATEERROR.getMsg());
					}
			   }
		    }
		} catch (Exception e) { 			
			log.error("调用update方法:  【参数id："+id+"；"+map.toString()+"】======"+"【"+e.getMessage()+"】");
			result.setSuccess(MessageInfo.UPDATEERROR.isResult());
			result.setMsg(MessageInfo.UPDATEERROR.getMsg()+"【"+e.getMessage()+"】");
		}
		return result;
	}
	
	/**
	 * 伪删除实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "流程附件分类伪删除",notes="流程附件分类伪删除")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",dataType = "String",name = "id",value = "id",required = true)})
	@RequestMapping(value="/deletePseudo/{id}",method=RequestMethod.DELETE)
	public  MessageResult deletePseudo(@PathVariable("id")  String id){
		
		try {
			attachmentCategoryService.deletePseudoObjectById(id);
			return getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
		} catch (Exception e) { 			
			log.error("调用deletePseudo方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}

//		MessageResult result=new MessageResult();
//		try {
//			SecurityUserBeanInfo userInfo = LoginUtils.getSecurityUserBeanInfo();
//			String dubboResultInfo=attachmentCategoryDtoServiceCustomer.deletePseudoObjectById(JacksonUtils.toJson(userInfo), "{\"id\":\""+id+"\"}");
//			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//			if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				AttachmentCategoryDto attachmentCategoryDto=JacksonUtils.fromJson(resultInfo, AttachmentCategoryDto.class);
//				result.setResult(attachmentCategoryDto);
//				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
//				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
//			}else{
//				result.setSuccess(MessageInfo.DELETEERROR.isResult());
//				result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//			}
//		} catch (Exception e) {
//			////e.printStackTrace();
//		    log.error("调用deletePseudo方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.DELETEERROR.isResult());
//			result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】");
//		}
//		
//		return result;
	}
	
	/**
	 * 伪删除实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "伪批量删除附件分类实体",notes="伪批量删除附件分类实体")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",dataType = "Ac",name = "ac",value = "ids",required = true)})
	@RequestMapping(value="/deletePseudoBatch/{ids}",method=RequestMethod.DELETE)
	public  MessageResult deletePseudoBatch(@PathVariable("ids")  String ids){

		try {

			List<String> list = Arrays.asList(ids.split(","));
			int deleteCount = attachmentCategoryService.deletePseudoAllObjectByIds(list);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deleteCount);
			return successResultModel;
		} catch (Exception e) { 			
			log.error("调用deletePseudoBatch方法:  【参数"+ids+"】======"+"【"+e.getMessage()+"】");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}

//		MessageResult result=new MessageResult();
//		try {
//			SecurityUserBeanInfo userInfo = LoginUtils.getSecurityUserBeanInfo();
//			String dubboResultInfo=attachmentCategoryDtoServiceCustomer.deletePseudoAllObjectByIds(JacksonUtils.toJson(userInfo), "{\"id\":\""+ids+"\"}");
//			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//			if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				AttachmentCategoryDto attachmentCategoryDto=JacksonUtils.fromJson(resultInfo, AttachmentCategoryDto.class);
//				result.setResult(attachmentCategoryDto);
//				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
//				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
//			}else{
//				result.setSuccess(MessageInfo.DELETEERROR.isResult());
//				result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//			}
//		} catch (Exception e) {
//			////e.printStackTrace();
//		    log.error("调用deletePseudoBatch方法:  【参数"+ids+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.DELETEERROR.isResult());
//			result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】");
//		}
//		
//		return result;
	
	}
	
}
