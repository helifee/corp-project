package com.jzy.hio.attachment.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.core.MediaType;

import org.csource.common.NameValuePair;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.attachment.dto.AttachmentTempDto;
import com.jzy.hio.attachment.entity.AttachmentTemp;
import com.jzy.hio.attachment.mapper.AttachmentTempDao;
import com.jzy.hio.attachment.service.AttachmentTempService;
import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.base.utils.FastDFSClient;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.tools.data.JacksonUtils;

/**
 * @author haoqp
 * 
 * 
 */
@RestController
@RequestMapping("/univ/attachmentTempServiceImpl")
@Transactional
@Service
public class AttachmentTempServiceImpl extends  BaseServiceImpl<String,AttachmentTemp> implements AttachmentTempService{
	
	private static Logger log = LoggerFactory.getLogger(AttachmentTempServiceImpl.class);
	
	@Autowired
	private AttachmentTempDao attachmentTempDao;

	@Override
	public int saveFileUpload(List<AttachmentTempDto> list) throws Exception {
		FastDFSClient fastDFSClient = new FastDFSClient();
		NameValuePair[] metaList = new NameValuePair[3];
		List<AttachmentTemp> entityList = new ArrayList<>();
		AttachmentTemp entity;
		for (AttachmentTempDto dto : list) {
			entity = new AttachmentTemp();
			BeanUtils.copyProperties(dto, entity, "fileBytes");
			entityList.add(entity);
			metaList[0] = new NameValuePair("fileName",dto.getName());
			metaList[1] = new NameValuePair("fileExtName", dto.getExtendName());
			metaList[2] = new NameValuePair("fileLength",dto.getFileSize().toString());
			fastDFSClient.upload(dto.getFileBytes(), dto.getExtendName(), metaList);
		}
		return super.saveBatch(entityList);
	}
	
	@RequestMapping(value="save", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON)
    public int save(@RequestBody String saveJson){
		int count = 0;
		AttachmentTemp attachmentTemp = null;
        try {
            attachmentTemp = JacksonUtils.fromJson(saveJson, AttachmentTemp.class);
            count = super.save(attachmentTemp);
            //attachmentTemp = super.getObjectById(attachmentTemp.getId());
//            if(count == 1) {
//            	result.setResult(count,MessageInfo.SAVESUCCESS.getMsg());
//                result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
//            }else{
//            	result.setSuccess(MessageInfo.SAVEERROR.isResult());
//				result.setMsg(MessageInfo.SAVEERROR.getMsg());
//            }
        } catch (Exception e) {
        	log.error("调用save方法:  【参数"+attachmentTemp.toString()+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.SAVEERROR.isResult());
//			result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+e.getMessage()+"】");
        }
        return count;
    }
	
	

}
