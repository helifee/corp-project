package com.jzy.hio.task.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.task.entity.TaskParameters;
import com.jzy.hio.task.service.TaskParametersService;
import com.jzy.tools.data.JacksonUtils;

/**
 * 
 * 任务参数控制层
 * @author admin
 *
 */
@RestController
@RequestMapping("/univ/task/taskParameters")
@Api(tags = {"任务参数信息"},description = "taskParameters")
public class TaskParametersController extends ResponseModel{
	
	private static Logger log = LoggerFactory.getLogger(TaskParametersController.class);
	
	@Autowired
	private TaskParametersService taskParametersService;
	
	/**
	 * 根据Id获取业务对象
	 * 
	 * @param id  业务对象主键
	 * 
	 * @return     业务对象
	 */
	@ApiOperation(value= "获取详情",notes="获取详情")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "id",value = "id",required = true,dataType = "String")})
	@RequestMapping(value="/get/{id}",method=RequestMethod.GET)
	public @ResponseBody MessageResult get(@PathVariable("id")  String id){
		try {
			TaskParameters taskParameters = taskParametersService.getObjectById(id);
			return getSuccessResultModel(taskParameters);
		} catch (Exception e) {
			log.error("调用get方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
			e.printStackTrace();
			return getErrorResultModel();
		}
	}
	
	/**
	 * 返回分页对象
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "分页查询",notes="分页查询")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "map",value = "limit query",required = true,dataType = "Map")})
	@RequestMapping(value="/page",method={RequestMethod.POST}, consumes="application/json")
	public MessageResult page(@RequestBody Map<String,Object> map){
		try {
			Page page = taskParametersService.getPage(map);
			return getSuccessResultModel(page);
		} catch (Exception e) { 			
			log.error("调用page方法:  【参数"+map.toString()+"】======"+"【"+e.getMessage()+"】");
			e.printStackTrace();
			return getErrorResultModel();
		}
	}
	
	/**
	 * 返回符合条件的列表
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "条件列表查询",notes="条件列表查询")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "agent",dataType = "String",value = "condition query",required = true)})
	@RequestMapping(value="/queryList",method={RequestMethod.POST}, consumes="application/json")
	public  MessageResult queryList(@RequestBody TaskParameters taskParameters){
		try {
			List<TaskParameters> queryList =  taskParametersService.queryList(taskParameters);
			return getSuccessResultModel(queryList);
		} catch (Exception e) {
			log.error("调用queryList方法:  【参数"+taskParameters.toString()+"】======"+"【"+e.getMessage()+"】");
			e.printStackTrace();
			return getErrorResultModel();
		}
	}
	
	/**
	 * 保存实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "保存",notes="保存")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "ac",value = "save",required = true,dataType = "String")})
	@RequestMapping(value="/save",method=RequestMethod.POST, consumes="application/json")
	public  MessageResult save(@RequestBody TaskParameters taskParameters){
		try {
			MessageResult successResultModel = new MessageResult();
			int count = taskParametersService.save(taskParameters);
			successResultModel = getSuccessResultModel(MessageInfo.SAVESUCCESS.getMsg());
			successResultModel.setResult(count);
			return successResultModel;
		}catch(Exception e) {
			MessageResult errorResultModel = getErrorResultModel(MessageInfo.SAVEERROR.getMsg());
			log.error("调用save方法:  【参数"+taskParameters.toString()+"】======"+"【"+e.getMessage()+"】");
			e.printStackTrace();
			return errorResultModel;
		}
	}

	/**
	 * 删除实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "删除",notes="删除")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "id",value = "id",required = true,dataType = "String")})
	@RequestMapping(value="/delete/{id}",method=RequestMethod.DELETE)
	public MessageResult delete(@PathVariable("id")  String id){
		try {
			int deleteCount = taskParametersService.deleteObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deleteCount);
			return successResultModel;
		} catch (Exception e) { 			
			log.error("调用delete方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
	}
	
	/**
	 * 删除实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "批量删除",notes="批量删除")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "ids",value = "ids",required = true,dataType = "String")})
	@RequestMapping(value="/deleteBatch/{ids}",method=RequestMethod.DELETE)
	public  MessageResult deleteBatch(@PathVariable("ids")  String ids){
		try {
			List<String> deleteMethod =  Arrays.asList(ids.split(","));
			int count = taskParametersService.deleteAllObjectByIds(deleteMethod);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(count);
			return successResultModel;
		} catch (Exception e) { 			
			log.error("调用delete方法:  【参数"+ids+"】======"+"【"+e.getMessage()+"】");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
	}
	
	/**
	 * 修改实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "修改任务日志实体",notes="修改任务日志实体")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",dataType = "String",name = "id",value = "id",required = true),
	@ApiImplicitParam(paramType="body",dataType = "String",name = "map",value = "map",required = true)})
	@RequestMapping(value="/update/{id}",method=RequestMethod.PUT,consumes="application/json")
	public MessageResult update(@PathVariable("id")  String id, @RequestBody Map<String,Object> map){
		try {
			TaskParameters queryTaskParameters = taskParametersService.getObjectById(id);
			String json = JacksonUtils.toJson(queryTaskParameters);
			Map<String,Object> oldMap=JacksonUtils.fromJson(json, HashMap.class);
			oldMap.putAll(map);
			String updateJson= JacksonUtils.toJson(oldMap);
			TaskParameters taskParameters = JacksonUtils.fromJson(updateJson, TaskParameters.class);
			MessageResult successResultModel = new MessageResult();
			int count = taskParametersService.update(taskParameters);
			successResultModel = getSuccessResultModel(MessageInfo.SAVESUCCESS.getMsg());
			successResultModel.setResult(count);
			return successResultModel;
		}catch(Exception e) {
			MessageResult errorResultModel = getErrorResultModel(MessageInfo.SAVEERROR.getMsg());
			log.error("调用update方法:  【参数"+id+","+map.toString()+"】======"+"【"+e.getMessage()+"】");
			e.printStackTrace();
			return errorResultModel;
		}
	}
	
}
