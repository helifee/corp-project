package com.jzy.hio.task.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.task.entity.TaskLog;
import com.jzy.hio.task.service.TaskLogService;
import com.jzy.tools.data.JacksonUtils;

/**
 * 
 * 任务日志控制层
 * @author admin
 *
 */
@RestController
@RequestMapping("/univ/task/taskLog")
@Api(tags = {"任务定义信息"},description = "taskInfo")
public class TaskLogController extends ResponseModel {
	
	private static Logger log = LoggerFactory.getLogger(TaskLogController.class);
	
	@Autowired
	private TaskLogService taskLogService;
	
	/**
	 * 根据Id获取业务对象
	 * 
	 * @param id  业务对象主键
	 * 
	 * @return     业务对象
	 */
	@ApiOperation(value= "获取详情",notes="获取详情")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "id",value = "id",required = true,dataType = "String")})
	@RequestMapping(value="/get/{id}",method=RequestMethod.GET)
	public @ResponseBody MessageResult get(@PathVariable("id")  String id){
		try {
			TaskLog taskLog = taskLogService.getObjectById(id);
			return getSuccessResultModel(taskLog);
		} catch (Exception e) {
			log.error("调用get方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
			e.printStackTrace();
			return getErrorResultModel();
		}
		
//		MessageResult result=new MessageResult();
//		try {
//			String dubboResultInfo=taskLogDtoServiceCustomer.getObjectById(getUserInfo(), "{\"id\":\""+id+"\"}");
//			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//			if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				TaskLogDto taskLogDto=JacksonUtils.fromJson(resultInfo, TaskLogDto.class);
//				result.setResult(taskLogDto);
//				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
//				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
//			}else{
//				result.setSuccess(MessageInfo.GETERROR.isResult());
//				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//			}
//		} catch (Exception e) {
//			////e.printStackTrace();
//		    log.error("调用get方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.GETERROR.isResult());
//			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
//		}
//		return result;
	}
	
	/**
	 * 返回分页对象
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "分页查询",notes="分页查询")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "map",value = "limit query",required = true,dataType = "Map")})
	@RequestMapping(value="/page",method={RequestMethod.POST}, consumes="application/json")
	public MessageResult page(@RequestBody Map<String,Object> map){
		try {
			Page page = taskLogService.getPage(map);
			return getSuccessResultModel(page);
		} catch (Exception e) { 			
			log.error("调用page方法:  【参数"+map.toString()+"】======"+"【"+e.getMessage()+"】");
			e.printStackTrace();
			return getErrorResultModel();
		}
		
//		MessageResult result=new MessageResult();
//		String paramaterJson = JacksonUtils.toJson(map);
//		try {
//		    String dubboResultInfo=taskLogDtoServiceCustomer.getPage(getUserInfo(), paramaterJson);
//		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//			if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				PageBeanInfo pageInfo=JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
//				result.setResult(pageInfo);
//				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
//				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
//			}else{
//				result.setSuccess(MessageInfo.GETERROR.isResult());
//				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//			}
//		} catch (Exception e) {
//			////e.printStackTrace();
//		    log.error("调用page方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.GETERROR.isResult());
//			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
//		}
//		return result;
	}
	
	/**
	 * 返回符合条件的列表
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value= "条件列表查询",notes="条件列表查询")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "agent",dataType = "String",value = "condition query",required = true)})
	@RequestMapping(value="/queryList",method={RequestMethod.POST}, consumes="application/json")
	public  MessageResult queryList(@RequestBody TaskLog taskLog){
		try {
			List<TaskLog> queryList =  taskLogService.queryList(taskLog);
			return getSuccessResultModel(queryList);
		} catch (Exception e) {
			log.error("调用queryList方法:  【参数"+taskLog.toString()+"】======"+"【"+e.getMessage()+"】");
			e.printStackTrace();
			return getErrorResultModel();
		}
	}
	
	/**
	 * 保存实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "保存",notes="保存")
	@ApiImplicitParams({@ApiImplicitParam(paramType="body",name = "ac",value = "save",required = true,dataType = "String")})
	@RequestMapping(value="/save",method=RequestMethod.POST, consumes="application/json")
	public  MessageResult save(@RequestBody TaskLog taskLog){
		try {
			MessageResult successResultModel = new MessageResult();
			int count = taskLogService.save(taskLog);
			successResultModel = getSuccessResultModel(MessageInfo.SAVESUCCESS.getMsg());
			successResultModel.setResult(count);
			return successResultModel;
		}catch(Exception e) {
			MessageResult errorResultModel = getErrorResultModel(MessageInfo.SAVEERROR.getMsg());
			log.error("调用save方法:  【参数"+taskLog.toString()+"】======"+"【"+e.getMessage()+"】");
			e.printStackTrace();
			return errorResultModel;
		}
	}
	
	/**
	 * 删除实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "删除",notes="删除")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "id",value = "id",required = true,dataType = "String")})
	@RequestMapping(value="/delete/{id}",method=RequestMethod.DELETE)
	public MessageResult delete(@PathVariable("id")  String id){
		try {
			int deleteCount = taskLogService.deleteObjectById(id);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(deleteCount);
			return successResultModel;
		} catch (Exception e) { 			
			log.error("调用delete方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
	}
	
	/**
	 * 删除实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "批量删除",notes="批量删除")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",name = "ids",value = "ids",required = true,dataType = "String")})
	@RequestMapping(value="/deleteBatch/{ids}",method=RequestMethod.DELETE)
	public  MessageResult deleteBatch(@PathVariable("ids")  String ids){
		try {
			List<String> deleteMethod =  Arrays.asList(ids.split(","));
			int count = taskLogService.deleteAllObjectByIds(deleteMethod);
			MessageResult successResultModel = getSuccessResultModel(MessageInfo.DELETESUCCESS.getMsg());
			successResultModel.setResult(count);
			return successResultModel;
		} catch (Exception e) { 			
			log.error("调用delete方法:  【参数"+ids+"】======"+"【"+e.getMessage()+"】");
			e.printStackTrace();
			return getErrorResultModel(MessageInfo.DELETEERROR.getMsg());
		}
	}
	
	/**
	 * 修改实体对象
	 * @param t
	 * @return
	 */
	@ApiOperation(value= "修改任务日志实体",notes="修改任务日志实体")
	@ApiImplicitParams({@ApiImplicitParam(paramType="path",dataType = "String",name = "id",value = "id",required = true),
	@ApiImplicitParam(paramType="body",dataType = "String",name = "map",value = "map",required = true)})
	@RequestMapping(value="/update/{id}",method=RequestMethod.PUT,consumes="application/json")
	public MessageResult update(@PathVariable("id")  String id, @RequestBody Map<String,Object> map){
		try {
			TaskLog queryTaskLog = taskLogService.getObjectById(id);
			String json = JacksonUtils.toJson(queryTaskLog);
			Map<String,Object> oldMap=JacksonUtils.fromJson(json, HashMap.class);
			oldMap.putAll(map);
			String updateJson= JacksonUtils.toJson(oldMap);
			TaskLog taskLog = JacksonUtils.fromJson(updateJson, TaskLog.class);
			MessageResult successResultModel = new MessageResult();
			int count = taskLogService.update(taskLog);
			successResultModel = getSuccessResultModel(MessageInfo.SAVESUCCESS.getMsg());
			successResultModel.setResult(count);
			return successResultModel;
		}catch(Exception e) {
			MessageResult errorResultModel = getErrorResultModel(MessageInfo.SAVEERROR.getMsg());
			log.error("调用update方法:  【参数"+id+","+map.toString()+"】======"+"【"+e.getMessage()+"】");
			e.printStackTrace();
			return errorResultModel;
		}
	}
}
