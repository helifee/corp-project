package com.jzy.hio.flow.controller;

import com.jzy.hio.flow.entity.param.FlowCustomFormParam;
import com.jzy.hio.flow.entity.param.FlowFormParam;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.exception.HioException;
import com.jzy.hio.flow.entity.FlowCustomForm;
import com.jzy.hio.flow.service.FlowCustomFormService;

/**
 * 自定义表单定义
 * @author daoqi
 */
@RestController
@RequestMapping("/customForm")
public class FlowCustomFormController extends BaseController {

	@Autowired
	private FlowCustomFormService flowCustomFormService;
	
	/**
	 * 保存修改自定义表单
	 *
	 * @param flowCustomForm
	 * @return
	 */
	@RequestMapping("/saveCustomForm")
	public Object saveFlowCustomForm(@RequestBody @Validated FlowCustomForm flowCustomForm) {
		return flowCustomFormService.saveCustomForm(flowCustomForm);
	}

	/**
	 * 获取自定义表单
	 *
	 * @param flowTemplateCode
	 * @return
	 */
	@RequestMapping("/getCustomForm")
	public Object getFlowCustomForm(String flowTemplateCode) {
		if(StringUtils.isBlank(flowTemplateCode)) {
			throw new HioException("流程模板编码不能为空！");
		}
		return flowCustomFormService.getCustomFormByTemplateCode(flowTemplateCode);
	}
	
	/**
	 * 查询指定自定义表单中的流程属性
	 *
	 * @param flowTemplateCode
	 * @return
	 */
	@RequestMapping("/queryFlowPropertiesBy")
	public Object queryFlowPropertiesBy(String flowTemplateCode) {
		if(StringUtils.isBlank(flowTemplateCode)) {
			throw new HioException("流程模板编码不能为空！");
		}
		return flowCustomFormService.queryFlowPropertiesBy(flowTemplateCode);
	}

	@RequestMapping("/getExpression")
	public Object getExpression(@RequestBody FlowFormParam FlowFormParam){
		return flowCustomFormService.getExpression(FlowFormParam);
	}
}
