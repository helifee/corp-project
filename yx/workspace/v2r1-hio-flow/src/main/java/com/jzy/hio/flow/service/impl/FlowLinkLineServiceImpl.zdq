package com.jzy.hio.flow.service.impl;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.googlecode.aviator.AviatorEvaluator;
import com.googlecode.aviator.exception.ExpressionSyntaxErrorException;
import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.flow.entity.FlowLinkLine;
import com.jzy.hio.flow.entity.dto.FormItem;
import com.jzy.hio.flow.service.FlowCustomFormService;
import com.jzy.hio.flow.service.FlowLinkLineService;
import com.jzy.hio.flow.utils.ExpressionTranslator;
import com.jzy.hio.flow.utils.GeneralExpressionTranslator;

@Service
public class FlowLinkLineServiceImpl extends BaseServiceImpl<FlowLinkLine> implements FlowLinkLineService {

    @Autowired
    private FlowCustomFormService flowCustomFormService;

    @Override
    public boolean validate(String expression) {
        String innerExpression = translate(expression);
        try {
            AviatorEvaluator.compile(innerExpression);
            System.out.println(innerExpression);
            return true;
        } catch (ExpressionSyntaxErrorException e) {
            return false;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }

    }

    private String translate(String expression) {
        ExpressionTranslator translator = new GeneralExpressionTranslator();
        return translator.translate(expression);
    }

    @Override
    public Object flowFormVariable(String code) {
        //流程模板类型(1,固定表单，2 自定义表单)
//        FlowTemplate flowTemplate = (FlowTemplate) flowTemplateDao.getFlowTemplateByCode(code);
//        if (1 == flowTemplate.getType()) {
//            //TODO    固定表单url获取变量
//
//        } else if (2 == flowTemplate.getType()) {
            //自定义表单变量
            List<FormItem> customFormProperties = flowCustomFormService.queryFlowPropertiesBy(code);
//        }

        return customFormProperties;
    }
}
