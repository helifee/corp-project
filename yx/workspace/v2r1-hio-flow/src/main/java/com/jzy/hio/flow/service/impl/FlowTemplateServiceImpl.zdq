package com.jzy.hio.flow.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import com.jzy.hio.ApiFeignResponse;
import com.jzy.hio.base.BaseConstants;
import com.jzy.hio.feign.SysFeignService;
import com.jzy.hio.flow.entity.*;
import com.jzy.hio.flow.entity.dto.FlowStartViewDto;
import com.jzy.hio.flow.entity.enums.FlowApproverEnum;
import com.jzy.hio.flow.mapper.*;
import com.jzy.hio.sys.organization.dto.FlowUserDto;
import com.jzy.hio.sys.organization.param.SkyDriveParam;
import com.jzy.hio.utils.IDGenerator;
import com.jzy.hio.utils.LoginUser;
import org.apache.commons.lang.StringEscapeUtils;
import org.apache.commons.lang.StringUtils;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jzy.hio.base.Base;
import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.exception.HioException;
import com.jzy.hio.flow.entity.dto.FlowTemplateAcDto;
import com.jzy.hio.flow.entity.dto.FlowTemplateChildDto;
import com.jzy.hio.flow.entity.dto.FlowTemplateDto;
import com.jzy.hio.flow.entity.enums.FlowNodeType;
import com.jzy.hio.flow.entity.enums.FlowTemplateAcType;
import com.jzy.hio.flow.entity.param.FlowStartParam;
import com.jzy.hio.flow.entity.param.FlowTemplateAcParam;
import com.jzy.hio.flow.entity.param.FlowTemplateConfigParam;
import com.jzy.hio.flow.entity.param.FlowTemplateParam;
import com.jzy.hio.flow.service.FlowTemplateService;
import com.jzy.hio.flow.utils.FlowConstants;
import com.jzy.hio.utils.JacksonUtils;

@Service
public class FlowTemplateServiceImpl extends BaseServiceImpl<FlowTemplate> implements FlowTemplateService {

    private Logger logger = LoggerFactory.getLogger(FlowTemplateServiceImpl.class);

    @Autowired
    private FlowTemplateDao flowTemplateDao;

    @Autowired
    private FlowCustomFormDao flowCustomFormDao;

    @Autowired
    private FlowTemplateAcDao flowTemplateAcDao;

    @Autowired
    private FlowTemplateApproverDao flowTemplateApproverDao;

    @Autowired
    private FlowTemplateAcCopyDao flowTemplateAcCopyDao;

    @Autowired
    private FlowLinkLineDao flowLinkLineDao;

    @Autowired
    private FlowTemplateRoleDao flowTemplateRoleDao;

    @Autowired
    private SysFeignService sysFeignService;

    @Autowired
    private FlowInstanceDao flowInstanceDao;


//    /**
//     * 创建审批
//     *
//     * @param flowTemplate   流程模板
//     * @param flowCustomForm 自定义表单
//     * @return
//     */
//    @Override
//    public String saveAll(FlowTemplate flowTemplate, FlowCustomForm flowCustomForm, FlowTemplateParam flowTemplateParam,FlowTemplateRoleDTO flowTemplateRoleDTO) {
//        flowTemplate.setId(generatePk());
//        int insert = flowTemplateDao.insert(flowTemplate);
//
//        flowCustomForm.setFlowTemplateId(flowTemplate.getId());
//        flowCustomForm.setId(generatePk());
//        flowCustomForm.setFlowTemplateName(flowTemplate.getName());
//        flowCustomFormDao.insert(flowCustomForm);
//
//        //环节Json
//        String acJson = flowTemplateParam.getAc();
//        //连线Json
//        String LinkLineJson = flowTemplateParam.getStep();
//
//        //存流程环节
//        saveFlowTemplateDto(acJson, flowTemplate.getId());
//
//        //存连线
//        saveFlowLinkLine(LinkLineJson, flowTemplate.getId());
//
//        //保存审批权限
//        List<FlowTemplateRole> personList = flowTemplateRoleDTO.getPersonList();
//        List<FlowTemplateRole> departmentList = flowTemplateRoleDTO.getDepartmentList();
//        List<FlowTemplateRole> roleList = flowTemplateRoleDTO.getRoleList();
//        flowTemplateRoleDao.insertList(personList);
//        flowTemplateRoleDao.insertList(departmentList);
//        flowTemplateRoleDao.insertList(roleList);
//        return null;
//    }
//
//    /**
//     * 存连线
//     *
//     * @param linkLineJson
//     * @param id
//     * @return
//     */
//    private Object saveFlowLinkLine(String linkLineJson, String id) {
//        List<FlowLinkLine> lineArrayList = JacksonUtils.fromJson(linkLineJson, ArrayList.class, FlowLinkLine.class);
//        for(FlowLinkLine flowLinkLine : lineArrayList){
//            flowLinkLine.setId(generatePk());
//            flowLinkLine.setFlowTemplateId(id);
//            String conditionFormula = flowLinkLine.getConditionFormula();
//            if (StringUtils.isNotBlank(conditionFormula)) {
//                conditionFormula = conditionFormula.replaceAll("\'", "\\\\'");
//            }
//            String formulaValue = flowLinkLine.getFormulaValue();
//            if (StringUtils.isNotBlank(formulaValue)) {
//                formulaValue = formulaValue.replaceAll("\'", "\\\\'");
//            }
//            flowLinkLine.setConditionFormula(conditionFormula);
//            flowLinkLine.setFormulaValue(formulaValue);
//
//            flowLinkLineDao.insert(flowLinkLine);
//        }
//        return null;
//    }
//
//    /**
//     * 存流程环节
//     *
//     * @param acJson
//     * @param id
//     * @return
//     */
//    private Object saveFlowTemplateDto(String acJson, String id) {
//        List<FlowTemplateAcParam> list = JacksonUtils.fromJson(acJson, ArrayList.class, FlowTemplateAcParam.class);
//
//        List<FlowTemplateApprover> approverList = new ArrayList<>();
//        List<FlowTemplateAcCopy> acCopyList = new ArrayList<>();
//        for (FlowTemplateAcParam flowTemplateAcDto : list) {
//            FlowTemplateAc flowTemplateAc = new FlowTemplateAc();
//            BeanUtils.copyProperties(flowTemplateAcDto, flowTemplateAc);
//            flowTemplateAc.setId(generatePk());
//            flowTemplateAc.setFlowTemplateId(id);
//            //审批人
//            String participant = flowTemplateAcDto.getParticipant();
//            //抄送人
//            String ccPerson = flowTemplateAcDto.getCcPerson();
//            List<FlowTemplateApprover> list1 = JacksonUtils.fromJson(participant, ArrayList.class, FlowTemplateApprover.class);
//            if (list1 != null) {
//                approverList.addAll(list1);
//            }
//            List<FlowTemplateAcCopy> list2 = JacksonUtils.fromJson(ccPerson, ArrayList.class, FlowTemplateAcCopy.class);
//            if (list2 != null) {
//                acCopyList.addAll(list2);
//            }
//            //存环节
//            flowTemplateAc.setId(generatePk());
//            int insert = flowTemplateAcDao.insert(flowTemplateAc);
//        }
//
//        //存环节审批人
//        for (FlowTemplateApprover flowTemplateApprover: approverList) {
//            flowTemplateApprover.setId(generatePk());
//            flowTemplateApprover.setFlowTemplateId(id);
//            flowTemplateApproverDao.insert(flowTemplateApprover);
//        }
//
//        //存环节抄送人
//        for (FlowTemplateAcCopy flowAcCopy:acCopyList) {
//            flowAcCopy.setId(generatePk());
//            flowAcCopy.setFlowTemplateId(id);
//            flowTemplateAcCopyDao.insert(flowAcCopy);
//        }
//
//        return null;
//    }

    /**
     * 保存流程模板配置
     *
     * @param flowTemplateConfigParam
     */
    @Override
    public Object saveFlowTemplateConfigParam(FlowTemplateConfigParam flowTemplateConfigParam) {
        int result = 0;
        String stepJson = flowTemplateConfigParam.getStep();
        String acJson = flowTemplateConfigParam.getAc();
        List<FlowTemplateAcParam> list = JacksonUtils.fromJson(acJson, ArrayList.class, FlowTemplateAcParam.class);
        List<FlowTemplateApprover> approverList = new ArrayList<>();
        List<FlowTemplateAcCopy> acCopyList = new ArrayList<>();
        logger.info("code=" + flowTemplateConfigParam.getCode());
        if (flowTemplateConfigParam.getCode() == null) {
            throw new HioException("参数为空！");
        }
        FlowTemplate flowTemplate = flowTemplateDao.getFlowTemplateByCode(flowTemplateConfigParam.getCode());
        if (flowTemplate == null) {
            throw new HioException("模板已被修改，请返回重试！");
        }

        //环节list
        List<FlowTemplateAcDto> acListNew = new ArrayList<>();
        //连线list
        List<FlowLinkLine> linkLineListNew = new ArrayList<>();
        //审批人list
        List<FlowTemplateApprover> approverListNew = new ArrayList<>();

        for (FlowTemplateAcParam flowTemplateAcParam : list) {
            FlowTemplateAc flowTemplateAc = new FlowTemplateAc();
            BeanUtils.copyProperties(flowTemplateAcParam, flowTemplateAc);
            //审批人
            String participant = flowTemplateAcParam.getParticipant();
            //抄送人
            String ccPerson = flowTemplateAcParam.getCcPerson();
            List<FlowTemplateApprover> list1 = JacksonUtils.fromJson(participant, ArrayList.class, FlowTemplateApprover.class);
            if (list1 != null) {
                approverList.addAll(list1);
            }
            List<FlowTemplateAcCopy> list2 = JacksonUtils.fromJson(ccPerson, ArrayList.class, FlowTemplateAcCopy.class);
            if (list2 != null) {
                acCopyList.addAll(list2);
            }
            //存环节
            flowTemplateAc.setCreateDate(new Date());
            flowTemplateAc.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);

            FlowTemplateAcDto flowTemplateAcDtoNew = new FlowTemplateAcDto();
            BeanUtils.copyProperties(flowTemplateAc, flowTemplateAcDtoNew);
            flowTemplateAcDtoNew.setFlowTemplateAcId(flowTemplateAc.getId());
            acListNew.add(flowTemplateAcDtoNew);
            flowTemplateAc.setFlowTemplateId(flowTemplate.getId());
            flowTemplateAcDao.insert(flowTemplateAc);
        }

        //存环节审批人
        logger.info("审批人信息为" + JacksonUtils.toJson(approverList));
        for (FlowTemplateApprover flowTemplateApprover : approverList) {
            flowTemplateApprover.setId(Base.generatePk(FlowTemplateApprover.class));
            flowTemplateApprover.setCreateDate(new Date());
            flowTemplateApprover.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
            flowTemplateApprover.setFlowTemplateId(flowTemplate.getId());
            approverListNew.add(flowTemplateApprover);
            flowTemplateApproverDao.insert(flowTemplateApprover);
        }

        //存环节抄送人
        logger.info("抄送人信息为" + JacksonUtils.toJson(acCopyList));
        for (FlowTemplateAcCopy flowAcCopy : acCopyList) {
            flowAcCopy.setId(Base.generatePk(FlowTemplateAcCopy.class));
            flowAcCopy.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
            flowAcCopy.setCreateDate(new Date());
            flowAcCopy.setFlowTemplateId(flowTemplate.getId());
            flowTemplateAcCopyDao.insert(flowAcCopy);
        }

        List<FlowLinkLine> lineArrayList = JacksonUtils.fromJson(stepJson, ArrayList.class, FlowLinkLine.class);
        for (FlowLinkLine flowLinkLine : lineArrayList) {
            flowLinkLine.setId(Base.generatePk(FlowLinkLine.class));
            String condition = flowLinkLine.getConditionFormula();
            String conditionName = flowLinkLine.getConditionName();
            flowLinkLine.setConditionFormula(condition);
            flowLinkLine.setConditionName(conditionName);
            flowLinkLine.setCreateDate(new Date());
            flowLinkLine.setFlowTemplateId(flowTemplate.getId());

            linkLineListNew.add(flowLinkLine);
            result = flowLinkLineDao.insert(flowLinkLine);
        }


        //模板上开始节点后的第一个节点，审批人如果设置为“发起人”，在模板上作标记
        //     流程是否自动完结:1:自动完成0：不自动完结
        flowAutoComplate(flowTemplate, acListNew, linkLineListNew, approverListNew);

        //校验模板是否完整
//        boolean flowFlag = checkFlowTemplateAc(acListNew, linkLineListNew);
//        if (flowFlag) {
//            return result;
//        } else {
//            throw new HioException(FlowConstants.FLOW_INFORMATION.getMessage(), FlowConstants.FLOW_INFORMATION.getStatus());
//
//        }
        return result;
    }

    /**
     *  模板中配置了 发起人  在模板中做标记
     * @param flowTemplate
     * @param approverListNew
     */
//    private void flowAutoComplate(FlowTemplate flowTemplate,List<FlowTemplateApprover> approverListNew) {
//        AtomicBoolean flag = new AtomicBoolean(false);
//        approverListNew.forEach(flowTemplateApprover -> {
//            if (flowTemplateApprover.getApprovalType() == 5){
//                flag.set(true);
//            }
//        });
//
//        //流程是否自动完结:1:自动完成0：不自动完结
//        if (flag.get()) {
//            flowTemplate.setFlowAutoComplate("1");
//            flowTemplateDao.updateByPrimaryKeySelective(flowTemplate);
//        } else {
//            flowTemplate.setFlowAutoComplate("0");
//            flowTemplateDao.updateByPrimaryKeySelective(flowTemplate);
//        }
//    }


    /**
     * 模板上开始节点后的第一个节点，审批人如果设置为“发起人F”，在模板上作标记
     * 流程是否自动完结:1:自动完成0：不自动完结
     *
     * @param flowTemplate    基本信息
     * @param acListNew       环节list
     * @param linkLineListNew 连线list
     * @param approverListNew 审批人list
     */
    public void flowAutoComplate(FlowTemplate flowTemplate, List<FlowTemplateAcDto> acListNew, List<FlowLinkLine> linkLineListNew, List<FlowTemplateApprover> approverListNew) {
        Map<String, FlowTemplateAcDto> acMap = new HashMap<>();
        //开始节点关联的下一个节点id
        String targetLine = "";
        for (FlowTemplateAcDto flowTemplateAcDto : acListNew) {
            acMap.put(flowTemplateAcDto.getFlowTemplateAcId(), flowTemplateAcDto);
            if (FlowNodeType.START.getType().equals(flowTemplateAcDto.getNodeType())) {
                for (FlowLinkLine flowLinkLine : linkLineListNew) {
                    if (flowTemplateAcDto.getFlowTemplateAcId().equals(flowLinkLine.getStartLine())) {
                        targetLine = flowLinkLine.getTargetLine();
                    }
                }
            }
        }
//        //  1.查询环节信息
//        List<FlowTemplateAcDto> acList = flowTemplateAcDao.getAcList(flowTemplateId);
//        //  2.查询连线信息
//        List<FlowLinkLine> lineListByTemplate = flowLinkLineDao.getLineListByTemplateId(flowTemplateId);
//        String targetLine = "";
//        for (FlowTemplateAcDto flowTemplateAcDto : acList) {
//            if (FlowNodeType.START.getType().equals(flowTemplateAcDto.getNodeType())) {
//                for (FlowLinkLine flowLinkLine : lineListByTemplate) {
//                    if (flowTemplateAcDto.getFlowTemplateAcId().equals(flowLinkLine.getStartLine())) {
//                        targetLine = flowLinkLine.getTargetLine();
//                    }
//                }
//            }
//        }
        //查询开始节点的下一个节点
//      FlowTemplateAc flowTemplateAc = flowTemplateAcDao.selectByPrimaryKey(targetLine);
        FlowTemplateAcDto flowTemplateAcDto = acMap.get(targetLine);
        boolean flag = false;
        if (flowTemplateAcDto != null) {
            if (FlowNodeType.PROCESS.getType().equals(flowTemplateAcDto.getNodeType())) {
                //  3.查询审批人信息
                if (null != approverListNew || approverListNew.size() > 0) {
                    for (FlowTemplateApprover flowTemplateApprover : approverListNew) {
                        if (flowTemplateApprover.getFlowAcId().equals(flowTemplateAcDto.getFlowTemplateAcId())
                                && FlowApproverEnum.INITIATOR.getType() == flowTemplateApprover.getApprovalType()) {
                            flag = true;
                            break;
                        }
                    }
                }
            }
        }
        //流程是否自动完结:1:自动完成0：不自动完结
        if (flag) {
            flowTemplate.setFlowAutoComplate("1");
            flowTemplateDao.updateByPrimaryKeySelective(flowTemplate);
        } else {
            flowTemplate.setFlowAutoComplate("0");
            flowTemplateDao.updateByPrimaryKeySelective(flowTemplate);
        }
    }

    /**
     * 校验环节是否完整
     * 1.开始结束环节是否有（只允许有一个开始一个结束），2.最少有一个审批环节，3.每个审批选择人员最少有一个审批人，4.连线是否完整，
     *
     * @param acListNew       环节list
     * @param linkLineListNew 连线list
     */
    private boolean checkFlowTemplateAc(List<FlowTemplateAcDto> acListNew, List<FlowLinkLine> linkLineListNew) {

        //nodeType：  1：开始    2：审批    3：结束    4：聚合网关    5：条件网关
        boolean acFlag = false;

        if (acListNew.size() > 1 && linkLineListNew.size() > 1) {
            //节点个数
            int startNum = 0;
            int approvalNum = 0;
            int endlNum = 0;
            int closelNum = 0;
            int conditionNum = 0;
            for (FlowTemplateAcDto flowTemplateAcDto : acListNew) {
                if (FlowNodeType.START.getType() == flowTemplateAcDto.getNodeType()) {
                    startNum += 1;
                }
                if (FlowNodeType.PROCESS.getType() == flowTemplateAcDto.getNodeType()) {
                    approvalNum += 1;
                }
                if (FlowNodeType.END.getType() == flowTemplateAcDto.getNodeType()) {
                    endlNum += 1;
                }
                if (FlowNodeType.JOIN.getType() == flowTemplateAcDto.getNodeType()) {
                    closelNum += 1;
                }
                if (FlowNodeType.FORK.getType() == flowTemplateAcDto.getNodeType()) {
                    conditionNum += 1;
                }
            }
            if (1 == startNum && 1 == endlNum && approvalNum >= 1) {
                if (linkLineListNew.size() >= startNum + approvalNum + closelNum + 2 * conditionNum) {
                    acFlag = true;
                }
            }
        }
        return acFlag;
    }

    @Override
    public FlowTemplateConfigParam getFlowTemplateConfigParam(String code) {
        logger.info("code=" + code);
        if (code == null) {
            throw new HioException("参数为空！");
        }
        FlowTemplateConfigParam flowTemplateConfigParam = new FlowTemplateConfigParam();
        //  1.查询环节信息
        List<FlowTemplateAcDto> acList = flowTemplateAcDao.getAcList(code);
        //  2.查询连线信息
        List<FlowLinkLine> lineListByTemplate = flowLinkLineDao.getLineListByFlowTemplateCode(code);
        //  3.查询审批人信息
        List<FlowTemplateApprover> approverList = flowTemplateApproverDao.getApproverList(code);
        //  4.查询抄送人信息
        List<FlowTemplateAcCopy> templateAcCopyList = flowTemplateAcCopyDao.getTemplateAcCopyList(code);

//        ApiFeignResponse<List<FlowUserDto>> listApiFeignResponse1 = sysFeignService.queryPositionNameByUserIds(new SkyDriveParam());


        //抄送人
        List<String> copyUserId = templateAcCopyList.stream().map(FlowTemplateAcCopy::getUserId).collect(Collectors.toList());
        logger.info("查询(抄送人)ID" + JacksonUtils.toJson(copyUserId));
        SkyDriveParam skyDriveParamCopy=new SkyDriveParam();
        skyDriveParamCopy.setUserIds(copyUserId);
        skyDriveParamCopy.setTendId(getTendId());
        skyDriveParamCopy.setStatus(3);

        ApiFeignResponse<List<FlowUserDto>> copyUserResult = sysFeignService.queryPositionNameByUserIds(skyDriveParamCopy);
        if (copyUserResult.getStatus() == 500) {
            logger.info("调用Feign接口失败");
            throw new HioException("查询失败！");
        } else {
            logger.info("调用Feign接口返回(抄送人)" + JacksonUtils.toJson(copyUserResult));
        }

        Map<String, FlowUserDto> copyUserMap = new HashMap<>();
        copyUserResult.getResult().forEach(flowUserDto -> {
            copyUserMap.put(flowUserDto.getUserId(),flowUserDto);
        });
        if (copyUserMap.size() == 0) {

        } else {
            templateAcCopyList.forEach(flowTemplateAcCopy -> flowTemplateAcCopy.setName(copyUserMap.get(flowTemplateAcCopy.getUserId()).getUserName()));
        }


        //审批人
        List<String> approverUserId = approverList.stream().filter(flowTemplateApprover -> flowTemplateApprover.getApprovalType() == 3).map(FlowTemplateApprover::getApproverId).collect(Collectors.toList());
        logger.info("查询（审批人）ID" + JacksonUtils.toJson(approverUserId));
        SkyDriveParam skyDriveParamApprover=new SkyDriveParam();
        skyDriveParamApprover.setUserIds(approverUserId);
        skyDriveParamApprover.setStatus(3);
        skyDriveParamApprover.setTendId(getTendId());

        ApiFeignResponse<List<FlowUserDto>> approverResult = sysFeignService.queryPositionNameByUserIds(skyDriveParamApprover);
        if (approverResult.getStatus() == 500) {
            logger.info("调用Feign接口失败");
            throw new HioException("查询失败！");
        } else {
            logger.info("调用Feign接口返回（审批人）" + JacksonUtils.toJson(approverResult));
        }

        Map<String, FlowUserDto> approverUserMap = new HashMap<>();
        approverResult.getResult().forEach(flowUserDto -> {
            approverUserMap.put(flowUserDto.getUserId(),flowUserDto);
        });

        if(approverUserMap.size()==0){

        }else {
            approverList.stream().filter(flowTemplateApprover -> flowTemplateApprover.getApprovalType() == 3).collect(Collectors.toList()).
                    forEach(flowTemplateApprover -> flowTemplateApprover.setApprovalTypeName(approverUserMap.get(flowTemplateApprover.getApproverId()).getUserName()));
        }


//       ///处理抄送人（IMuserID  内外部联系人）
//        if (templateAcCopyList.size() > 0) {
//            List<UserOrExternalParam> apiPram = new ArrayList<>();
//            for (FlowTemplateAcCopy flowTemplateAcCopy : templateAcCopyList) {
//                if (flowTemplateAcCopy.getUserType() == 0) {
//                    //内部
//                    UserOrExternalParam userOrExternalParam = new UserOrExternalParam();
//                    userOrExternalParam.setImUserId(flowTemplateAcCopy.getImUserId());
//                    userOrExternalParam.setType(BaseConstants.USER_ORGANIZATION);
//                    apiPram.add(userOrExternalParam);
//                } else if (flowTemplateAcCopy.getUserType() == 1) {
//                    //外部
//                    UserOrExternalParam userOrExternalParam = new UserOrExternalParam();
//                    userOrExternalParam.setImUserId(flowTemplateAcCopy.getImUserId());
//                    userOrExternalParam.setType(BaseConstants.USER_EXTERNAL);
//                    apiPram.add(userOrExternalParam);
//                }
//            }
//            Map<String, FlowUserAndExternalDto> userMap1 = new HashMap<>();
//            FlowUserAndExternalQueryParam apiParam = new FlowUserAndExternalQueryParam();
//            apiParam.setUsers(apiPram);
//            apiParam.setTendId(getLoginUser().getTendId());
//            ApiFeignResponse<List<FlowUserAndExternalDto>> listApiFeignResponse = sysFeignService.queryUserOrExternalUserByIMUserId(apiParam);
//            logger.info("当前用户:" + getLoginUser().getUserId() + "调用Feign接口查询数据:" + JacksonUtils.toJson(apiParam));
//            for (FlowUserAndExternalDto flowUserAndExternalDto : listApiFeignResponse.getResult()) {
//                userMap1.put(flowUserAndExternalDto.getImUserId(), flowUserAndExternalDto);
//            }
//            for (FlowTemplateAcCopy flowTemplateAcCopy : templateAcCopyList) {
//                flowTemplateAcCopy.setName(userMap1.get(flowTemplateAcCopy.getImUserId()).getName());
//            }
//
//        }
//
//        //处理审批人（IMuserID  内外部联系人）
//        if (approverList.size() > 0) {
//            List<UserOrExternalParam> apiPram = new ArrayList<>();
//            for (FlowTemplateApprover flowTemplateApprover : approverList) {
//                if (flowTemplateApprover.getUserType() == 0 && flowTemplateApprover.getApprovalType() == 3) {
//                    //内部
//                    UserOrExternalParam userOrExternalParam = new UserOrExternalParam();
//                    userOrExternalParam.setImUserId(flowTemplateApprover.getImUserId());
//                    userOrExternalParam.setType(BaseConstants.USER_ORGANIZATION);
//                    apiPram.add(userOrExternalParam);
//                } else if (flowTemplateApprover.getUserType() == 1 && flowTemplateApprover.getApprovalType() == 3) {
//                    //外部
//                    UserOrExternalParam userOrExternalParam = new UserOrExternalParam();
//                    userOrExternalParam.setImUserId(flowTemplateApprover.getImUserId());
//                    userOrExternalParam.setType(BaseConstants.USER_EXTERNAL);
//                    apiPram.add(userOrExternalParam);
//                }
//            }
//            Map<String, FlowUserAndExternalDto> userMap2 = new HashMap<>();
//            FlowUserAndExternalQueryParam apiParam = new FlowUserAndExternalQueryParam();
//            apiParam.setUsers(apiPram);
//            apiParam.setTendId(getLoginUser().getTendId());
//            ApiFeignResponse<List<FlowUserAndExternalDto>> listApiFeignResponse = sysFeignService.queryUserOrExternalUserByIMUserId(apiParam);
//            if (listApiFeignResponse.getStatus() == 500) {
//                logger.error("当前用户:" + getLoginUser().getUserId() + "调用Feign接口失败");
//                throw new HioException("查询失败！");
//            } else {
//                logger.info("当前用户:" + getLoginUser().getUserId() + "调用Feign接口返回" + JacksonUtils.toJson(listApiFeignResponse));
//            }
//            for (FlowUserAndExternalDto flowUserAndExternalDto : listApiFeignResponse.getResult()) {
//                userMap2.put(flowUserAndExternalDto.getImUserId(), flowUserAndExternalDto);
//            }
//            for (FlowTemplateApprover flowTemplateApprover : approverList) {
//                if (flowTemplateApprover.getApprovalType() == FlowApproverEnum.USER.getType()) {
//                    flowTemplateApprover.setApprovalTypeName(userMap2.get(flowTemplateApprover.getImUserId()).getName());
//                }
//            }
//        }
        //处理环节
        Map<String, FlowTemplateAcDto> acDtoMap = new HashMap<>();
        List<FlowTemplateAcDto> acListNew = new ArrayList<>();
        for (FlowTemplateAcDto flowTemplateAcDto : acList) {
            FlowTemplateAcDto flowTemplateAcDtoNew = new FlowTemplateAcDto();
            BeanUtils.copyProperties(flowTemplateAcDto, flowTemplateAcDtoNew);
            flowTemplateAcDtoNew.setFlowTemplateAcId(IDGenerator.getUUID());
            acDtoMap.put(flowTemplateAcDto.getFlowTemplateAcId(), flowTemplateAcDtoNew);
            acListNew.add(flowTemplateAcDtoNew);
        }

        //  处理审批人
        for (FlowTemplateAcDto flowTemplateAcDto : acList) {
            flowTemplateConfigParam.setSid(flowTemplateAcDto.getFlowTemplateAcId());
            List<FlowTemplateApprover> flowTemplateApprovers = new ArrayList<>();
            for (FlowTemplateApprover flowTemplateApprover : approverList) {
                if (flowTemplateAcDto.getFlowTemplateAcId().equals(flowTemplateApprover.getFlowAcId())) {
                    flowTemplateApprover.setFlowAcId(acDtoMap.get(flowTemplateApprover.getFlowAcId()).getFlowTemplateAcId());
                    flowTemplateApprovers.add(flowTemplateApprover);
                }
            }
            flowTemplateAcDto.setParticipant(flowTemplateApprovers);
        }

        for (FlowTemplateAcDto flowTemplateAcDto : acListNew) {
            List<FlowTemplateApprover> flowTemplateApprovers = new ArrayList<>();
            for (FlowTemplateApprover flowTemplateApprover : approverList) {
                if (flowTemplateAcDto.getFlowTemplateAcId().equals(flowTemplateApprover.getFlowAcId())) {
                    flowTemplateApprovers.add(flowTemplateApprover);
                }
            }
            flowTemplateAcDto.setParticipant(flowTemplateApprovers);
        }

        //处理抄送人
        for (FlowTemplateAcDto flowTemplateAcDto : acList) {
            List<FlowTemplateAcCopy> flowTemplateAcCopies = new ArrayList<>();
            for (FlowTemplateAcCopy flowTemplateAcCopy : templateAcCopyList) {
                if (flowTemplateAcDto.getFlowTemplateAcId().equals(flowTemplateAcCopy.getFlowAcId())) {
                    flowTemplateAcCopy.setFlowAcId(acDtoMap.get(flowTemplateAcCopy.getFlowAcId()).getFlowTemplateAcId());
                    flowTemplateAcCopies.add(flowTemplateAcCopy);
                }
            }
            flowTemplateAcDto.setCcPerson(flowTemplateAcCopies);
        }

        for (FlowTemplateAcDto flowTemplateAcDto : acListNew) {
            List<FlowTemplateAcCopy> flowTemplateAcCopies = new ArrayList<>();
            for (FlowTemplateAcCopy flowTemplateAcCopy : templateAcCopyList) {
                if (flowTemplateAcDto.getFlowTemplateAcId().equals(flowTemplateAcCopy.getFlowAcId())) {
                    flowTemplateAcCopies.add(flowTemplateAcCopy);
                }
            }
            flowTemplateAcDto.setCcPerson(flowTemplateAcCopies);
        }

        //处理连线
        List<FlowLinkLine> flowLinkLineNew = new ArrayList<>();
        for (FlowLinkLine flowLinkLine : lineListByTemplate) {
            String conditionFormula = flowLinkLine.getConditionFormula();
            String conditionName = flowLinkLine.getConditionName();
            flowLinkLine.setConditionFormulaNew(conditionFormula);
            flowLinkLine.setConditionNameNew(conditionName);
            if (conditionFormula != null && conditionName != null) {
                flowLinkLine.setConditionName( conditionName.replaceAll("\"", ""));
                flowLinkLine.setConditionFormula(conditionFormula.replaceAll("\"", ""));
            }
            String startLine = flowLinkLine.getStartLine();
            String targetLine = flowLinkLine.getTargetLine();
            if (StringUtils.isNotBlank(startLine)) {
                flowLinkLine.setStartLine(acDtoMap.get(startLine).getFlowTemplateAcId());
            }

            if (StringUtils.isNotBlank(targetLine)) {
                flowLinkLine.setTargetLine(acDtoMap.get(targetLine).getFlowTemplateAcId());
            }
            flowLinkLine.setId(Base.generatePk(FlowLinkLine.class));
            flowLinkLineNew.add(flowLinkLine);

        }

        //  5.创建画布XML       // 创建空 Document 对象。
        Document document = DocumentHelper.createDocument();
        Element root = document.addElement("mxGraphModel").addElement("root");
        root.addElement("mxCell").addAttribute("id", "0");
        root.addElement("mxCell").addAttribute("id", "1").addAttribute("parent", "0");

        parseNodeToXMLElement(root, acListNew, "ac");
        parseNodeToXMLElement(root, flowLinkLineNew, "step");

        flowTemplateConfigParam.setAc(JacksonUtils.toJson(acListNew));
        flowTemplateConfigParam.setStep(JacksonUtils.toJson(lineListByTemplate));
        flowTemplateConfigParam.setGraphXml(document.asXML());

        return flowTemplateConfigParam;
    }

    /**
     * 将流程图元数据解析为可展示的XML
     *
     * @param root
     * @param elements
     * @param type
     * @throws Exception
     */
    private void parseNodeToXMLElement(Element root, Object elements, String type) {
        if (root != null && elements != null && StringUtils.isNotBlank(type)) {
            if ("ac".equals(type)) {
                List<FlowTemplateAcDto> acs = (List<FlowTemplateAcDto>) elements;
                for (FlowTemplateAcDto flowTemplateAcDto : acs) {
                    Element cellElem = root.addElement("mxCell")
                            .addAttribute("vertex", "1")
                            .addAttribute("parent", "1")
                            .addAttribute("id", flowTemplateAcDto.getFlowTemplateAcId())
                            .addAttribute("value", flowTemplateAcDto.getName())
                            .addAttribute("label", flowTemplateAcDto.getName())
                            .addAttribute("description", flowTemplateAcDto.getName());

                    String name = flowTemplateAcDto.getName();
                    Integer nodeSort = flowTemplateAcDto.getNodeSort();
                    Integer nodeId = flowTemplateAcDto.getNodeId();
                    Integer approvalType = flowTemplateAcDto.getApprovalType();
                    Integer nodeType = flowTemplateAcDto.getNodeType();
                    String overdueHandle = flowTemplateAcDto.getOverdueHandle();
                    Integer overdueTime = flowTemplateAcDto.getOverdueTime();
                    Map<String, Object> extraMap = new HashMap<String, Object>();
                    extraMap.put("name", name);
                    extraMap.put("nodeSort", nodeSort);
                    extraMap.put("nodeId", nodeId);
                    extraMap.put("approvalType", approvalType);
                    extraMap.put("nodeType", nodeType);
                    extraMap.put("overdueHandle", overdueHandle);
                    extraMap.put("overdueTime", overdueTime);
                    String extra = JacksonUtils.toJson(extraMap);
                    cellElem.addAttribute("extra", extra);

                    //环节审批人

                    List<FlowTemplateApprover> flowTemplateApproverList = flowTemplateAcDto.getParticipant();
                    if (null != flowTemplateApproverList) {
                        String participant = JacksonUtils.toJson(flowTemplateApproverList);
                        cellElem.addAttribute("participant", participant);
                    }

                    //环节抄送人
                    List<FlowTemplateAcCopy> flowTemplateAcCopyList = flowTemplateAcDto.getCcPerson();
                    if (null != flowTemplateAcCopyList) {
                        String ccPerson = JacksonUtils.toJson(flowTemplateAcCopyList);
                        cellElem.addAttribute("ccPerson", ccPerson);
                    }

                    if (FlowTemplateAcType.START.getAcType() == flowTemplateAcDto.getNodeType()) {
                        cellElem.addAttribute("style", FlowTemplateAcType.START.getNodeType())
                                .addAttribute("nodeType", FlowTemplateAcType.START.getNodeType());
                    } else if (FlowTemplateAcType.TASK.getAcType() == flowTemplateAcDto.getNodeType()) {
                        cellElem.addAttribute("style", FlowTemplateAcType.TASK.getNodeType())
                                .addAttribute("nodeType", FlowTemplateAcType.TASK.getNodeType());
                    } else if (FlowTemplateAcType.FORK.getAcType() == flowTemplateAcDto.getNodeType()) {
                        cellElem.addAttribute("style", FlowTemplateAcType.FORK.getNodeType())
                                .addAttribute("nodeType", FlowTemplateAcType.FORK.getNodeType());
                    } else if (FlowTemplateAcType.JOIN.getAcType() == flowTemplateAcDto.getNodeType()) {
                        cellElem.addAttribute("style", FlowTemplateAcType.JOIN.getNodeType())
                                .addAttribute("nodeType", FlowTemplateAcType.JOIN.getNodeType());
                    } else if (FlowTemplateAcType.END.getAcType() == flowTemplateAcDto.getNodeType()) {
                        cellElem.addAttribute("style", FlowTemplateAcType.END.getNodeType())
                                .addAttribute("nodeType", FlowTemplateAcType.END.getNodeType());
                    }

                    cellElem.addElement("mxGeometry")
                            .addAttribute("x", String.valueOf(flowTemplateAcDto.getX()))
                            .addAttribute("y", String.valueOf(flowTemplateAcDto.getY()))
                            .addAttribute("width", String.valueOf(flowTemplateAcDto.getWidth()))
                            .addAttribute("height", String.valueOf(flowTemplateAcDto.getHeight()))
                            .addAttribute("as", "geometry");


                }
            } else if ("step".equals(type)) {
                List<FlowLinkLine> lineList = (List<FlowLinkLine>) elements;
                for (FlowLinkLine flowLinkLine : lineList) {
                    Element cellElem = root.addElement("mxCell")
                            .addAttribute("style", "defaultEdge")
                            .addAttribute("edge", "1")
                            .addAttribute("parent", "1")
                            .addAttribute("source", flowLinkLine.getStartLine())
                            .addAttribute("target", flowLinkLine.getTargetLine())
                            .addAttribute("id", flowLinkLine.getId())
                            .addAttribute("value", StringEscapeUtils.unescapeHtml(flowLinkLine.getName()));
                    String condition = flowLinkLine.getConditionFormula();
                    String conditionName = flowLinkLine.getConditionName();
                    String conditionFormulaNew = flowLinkLine.getConditionFormulaNew();
                    String conditionNameNew = flowLinkLine.getConditionNameNew();
                    if (StringUtils.isNotBlank(condition)) {
                        cellElem.addAttribute("conditionFormula", condition);
                    }

                    if (StringUtils.isNotBlank(conditionName)) {
                        cellElem.addAttribute("conditionName", conditionName);
                    }

                    if (StringUtils.isNotBlank(conditionFormulaNew)) {
                        cellElem.addAttribute("conditionFormulaNew", conditionFormulaNew);
                    }

                    if (StringUtils.isNotBlank(conditionNameNew)) {
                        cellElem.addAttribute("conditionNameNew", conditionNameNew);
                    }
                    cellElem.addElement("mxGeometry")
                            .addAttribute("relative", "1")
                            .addAttribute("as", "geometry");
                }

            }
        }
    }


    @Override
    @Transactional
    public Object updateFlowTemplateConfigParam(FlowTemplateConfigParam flowTemplateConfigParam) {
        int result = 0;
        //获取模板配置   1.获取连线
        //              2.获取环节
        //              3.获取审批人
        //              4.获取抄送人
//        List<FlowLinkLine> lineList = flowLinkLineDao.getLineListByFlowTemplateCode(flowTemplateId);
//        List<FlowTemplateAc> acList = flowTemplateAcDao.findAcByTemplateId(flowTemplateId);
//        if (null == lineList || null == acList) {
//            String stepJson = flowTemplateConfigParam.getStep();
//            String acJson = flowTemplateConfigParam.getAc();
//            List<FlowTemplateAcParam> list = JacksonUtils.fromJson(acJson, ArrayList.class, FlowTemplateAcParam.class);
//            List<FlowTemplateApprover> approverListNew = new ArrayList<>();
//            List<FlowTemplateAcCopy> acCopyListNew = new ArrayList<>();
//            for (FlowTemplateAcParam flowTemplateAcDto : list) {
//                FlowTemplateAc flowTemplateAc = new FlowTemplateAc();
//                BeanUtils.copyProperties(flowTemplateAcDto, flowTemplateAc);
//                flowTemplateAc.setId(Base.generatePk(FlowTemplateAc.class));
//                //审批人
//                String participant = flowTemplateAcDto.getParticipant();
//                //抄送人
//                String ccPerson = flowTemplateAcDto.getCcPerson();
//                List<FlowTemplateApprover> list1 = JacksonUtils.fromJson(participant, ArrayList.class, FlowTemplateApprover.class);
//                if (list1 != null) {
//                    approverListNew.addAll(list1);
//                }
//                List<FlowTemplateAcCopy> list2 = JacksonUtils.fromJson(ccPerson, ArrayList.class, FlowTemplateAcCopy.class);
//                if (list2 != null) {
//                    acCopyListNew.addAll(list2);
//                }
//                //存环节
//                flowTemplateAc.setId(Base.generatePk(FlowTemplateAc.class));
//                flowTemplateAc.setCreateDate(new Date());
//                flowTemplateAcDao.insert(flowTemplateAc);
//            }
//
//            //存环节审批人
//            for (FlowTemplateApprover flowTemplateApprover : approverListNew) {
//                flowTemplateApprover.setId(Base.generatePk(FlowTemplateApprover.class));
//                flowTemplateApprover.setCreateDate(new Date());
//                flowTemplateApproverDao.insert(flowTemplateApprover);
//            }
//
//            //存环节抄送人
//            for (FlowTemplateAcCopy flowAcCopy : acCopyListNew) {
//                flowAcCopy.setId(Base.generatePk(FlowTemplateAcCopy.class));
//                flowAcCopy.setCreateDate(new Date());
//                flowTemplateAcCopyDao.insert(flowAcCopy);
//            }
//
//            //存连线信息
//            List<FlowLinkLine> lineArrayList = JacksonUtils.fromJson(stepJson, ArrayList.class, FlowLinkLine.class);
//            for (FlowLinkLine flowLinkLine : lineArrayList) {
//                flowLinkLine.setId(Base.generatePk(FlowLinkLine.class));
//                String condition = flowLinkLine.getConditionFormula();
//                if (StringUtils.isNotBlank(condition)) {
//                    condition = condition.replaceAll("\'", "\\\\'");
//                }
//                String conditionName = flowLinkLine.getConditionName();
//                if (StringUtils.isNotBlank(conditionName)) {
//                    conditionName = conditionName.replaceAll("\'", "\\\\'");
//                }
//                flowLinkLine.setConditionFormula(condition);
//                flowLinkLine.setConditionName(conditionName);
//                flowLinkLine.setCreateDate(new Date());
//                return flowLinkLineDao.insert(flowLinkLine);
//            }
//        } else {
        //获取模板基本信息 添加新基本信息
        LoginUser loginUser = getLoginUser();
        logger.info("code=" + flowTemplateConfigParam.getCode());
        if (flowTemplateConfigParam.getCode() == null) {
            throw new HioException("参数为空！");
        }
        FlowTemplate flowTemplate = flowTemplateDao.getFlowTemplateByCode(flowTemplateConfigParam.getCode());
        if (flowTemplate == null){
            throw new HioException("模板已被修改，请返回重试！");
        }
        FlowTemplate flowTemplateOld = new FlowTemplate();
        BeanUtils.copyProperties(flowTemplate, flowTemplateOld);
        flowTemplate.setId(Base.generatePk(FlowTemplate.class));
        flowTemplate.setCreateDate(new Date());
        flowTemplate.setCreatePersonName(getUserNameOA());
        flowTemplate.setCreatePersonId(loginUser.getUserId());
        flowTemplate.setUpdateDate(new Date());
        flowTemplate.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
        flowTemplateDao.insert(flowTemplate);

        //删除旧基本信息flowTemplateOld
        flowTemplateOld.setDelflag(BaseConstants.MYSQL_DELFLAG_DELETED);
        flowTemplateOld.setUpdateDate(new Date());
        flowTemplateDao.updateByPrimaryKeySelective(flowTemplateOld);

        //删除旧的连线信息
        flowLinkLineDao.updateLinkLineByTemId(flowTemplateOld.getId());

        updateInstanceTemplateId(flowTemplateOld.getId(),flowTemplate.getId());

        //环节list
        List<FlowTemplateAcDto> acListNew = new ArrayList<>();
        //连线list
        List<FlowLinkLine> linkLineListNew = new ArrayList<>();
        //审批人list
        List<FlowTemplateApprover> approverListNew = new ArrayList<>();


        String stepJson = flowTemplateConfigParam.getStep();
        String acJson = flowTemplateConfigParam.getAc();
        List<FlowTemplateAcParam> list = JacksonUtils.fromJson(acJson, ArrayList.class, FlowTemplateAcParam.class);
        List<FlowTemplateApprover> approverList = new ArrayList<>();
        List<FlowTemplateAcCopy> acCopyListNew = new ArrayList<>();
        for (FlowTemplateAcParam flowTemplateAcDto : list) {
            FlowTemplateAc flowTemplateAc = new FlowTemplateAc();
            BeanUtils.copyProperties(flowTemplateAcDto, flowTemplateAc);
            //审批人
            String participant = flowTemplateAcDto.getParticipant();
            //抄送人
            String ccPerson = flowTemplateAcDto.getCcPerson();
            List<FlowTemplateApprover> list1 = JacksonUtils.fromJson(participant, ArrayList.class, FlowTemplateApprover.class);
            if (list1 != null) {
                approverList.addAll(list1);
            }
            List<FlowTemplateAcCopy> list2 = JacksonUtils.fromJson(ccPerson, ArrayList.class, FlowTemplateAcCopy.class);
            if (list2 != null) {
                acCopyListNew.addAll(list2);
            }
            //存环节
            flowTemplateAc.setUpdateDate(new Date());
            flowTemplateAc.setFlowTemplateId(flowTemplate.getId());
            flowTemplateAc.setY(flowTemplateAcDto.getY());
            flowTemplateAc.setCreatePersonId(getUserIdOA());
            flowTemplateAc.setCreatePersonName(getUserNameOA());
            FlowTemplateAcDto flowTemplateAcDtoNew = new FlowTemplateAcDto();
            BeanUtils.copyProperties(flowTemplateAc, flowTemplateAcDtoNew);
            flowTemplateAcDtoNew.setFlowTemplateAcId(flowTemplateAc.getId());
            acListNew.add(flowTemplateAcDtoNew);
            flowTemplateAcDao.insert(flowTemplateAc);
        }

        //存环节审批人
        logger.info("审批人信息为" + JacksonUtils.toJson(approverList));
        for (FlowTemplateApprover flowTemplateApprover : approverList) {
            flowTemplateApprover.setId(Base.generatePk(FlowTemplateApprover.class));
            flowTemplateApprover.setUpdateDate(new Date());
            flowTemplateApprover.setCreatePersonId(getUserIdOA());
            flowTemplateApprover.setCreatePersonName(getUserNameOA());
            flowTemplateApprover.setFlowTemplateId(flowTemplate.getId());
            approverListNew.add(flowTemplateApprover);
            flowTemplateApproverDao.insert(flowTemplateApprover);
        }

        //存环节抄送人
        logger.info("抄送人信息为" + JacksonUtils.toJson(acCopyListNew));
        for (FlowTemplateAcCopy flowAcCopy : acCopyListNew) {
            flowAcCopy.setId(Base.generatePk(FlowTemplateAcCopy.class));
            flowAcCopy.setUpdateDate(new Date());
            flowAcCopy.setCreatePersonId(getLoginUser().getUserId());
            flowAcCopy.setCreatePersonName(getUserNameOA());
            flowAcCopy.setFlowTemplateId(flowTemplate.getId());
            flowTemplateAcCopyDao.insert(flowAcCopy);
        }

        //存连线信息
        List<FlowLinkLine> lineArrayList = JacksonUtils.fromJson(stepJson, ArrayList.class, FlowLinkLine.class);
        for (FlowLinkLine flowLinkLine : lineArrayList) {
            flowLinkLine.setId(Base.generatePk(FlowLinkLine.class));
//            String condition = flowLinkLine.getConditionFormula();
//            if (StringUtils.isNotBlank(condition)) {
//                condition = condition.replaceAll("\'", "\\\\'");
//            }
//            String conditionName = flowLinkLine.getConditionName();
//            if (StringUtils.isNotBlank(conditionName)) {
//                conditionName = conditionName.replaceAll("\'", "\\\\'");
//            }
//            flowLinkLine.setConditionFormula(condition);
//            flowLinkLine.setConditionName(conditionName);

            flowLinkLine.setUpdateDate(new Date());
            flowLinkLine.setCreatePersonId(getUserIdOA());
            flowLinkLine.setCreatePersonName(getUserNameOA());
            flowLinkLine.setFlowTemplateId(flowTemplate.getId());
            linkLineListNew.add(flowLinkLine);
            result = flowLinkLineDao.insert(flowLinkLine);
        }

        //模板上开始节点后的第一个节点，审批人如果设置为“发起人”，在模板上作一下标记
//流程是否自动完结:1:自动完成0：不自动完结
        flowAutoComplate(flowTemplate, acListNew, linkLineListNew, approverListNew);


        return result;
    }

    @Override
    public Object draggingSorting(Map<String, Object> map) {
        Object firstSort = map.get("firstSort");
        Object afterSort = map.get("afterSort");
        Object flowTemplateId = map.get("flowTemplateId");
        Object flowCategoryId = map.get("flowCategoryId");
        int result = 0;
        if (!"".equals(firstSort) && !"".equals(afterSort)) {
            FlowTemplate flowTemplate = flowTemplateDao.selectByPrimaryKey(flowTemplateId);
            double first = Double.parseDouble((String) firstSort);
            double second = Double.parseDouble((String) afterSort);
            flowTemplate.setSort((second - first) / 2 + first);
            flowTemplate.setFlowCategoryId((String) flowCategoryId);
            flowTemplate.setUpdateDate(new Date());
            result = flowTemplateDao.updateByPrimaryKeySelective(flowTemplate);
        }
        if ("".equals(firstSort)) {
            FlowTemplate flowTemplate = flowTemplateDao.selectByPrimaryKey(flowTemplateId);
            double first = 0;
            double second = Double.parseDouble((String) afterSort);
            flowTemplate.setSort((second - first) / 2 + first);
            flowTemplate.setFlowCategoryId((String) flowCategoryId);
            flowTemplate.setUpdateDate(new Date());
            result = flowTemplateDao.updateByPrimaryKeySelective(flowTemplate);
        }
        if ("".equals(afterSort)) {
            FlowTemplate flowTemplate = flowTemplateDao.selectByPrimaryKey(flowTemplateId);
            double first = Double.parseDouble((String) firstSort);
            flowTemplate.setSort(first + 1);
            flowTemplate.setFlowCategoryId((String) flowCategoryId);
            flowTemplate.setUpdateDate(new Date());
            result = flowTemplateDao.updateByPrimaryKeySelective(flowTemplate);
        }
        return result;
    }

    /**
     * 固定表单 不判断自定义表单
     * 自定义表单
     *
     * @param flowTemplateParam
     */
    @Override
    public Object enabledDisable(FlowTemplateParam flowTemplateParam) {
        int result = 0;
        //获取模板基本信息
        logger.info("code=" + flowTemplateParam.getCode());
        if (flowTemplateParam.getCode() == null) {
            throw new HioException("未找到模板！");
        }
        FlowTemplate flowTemplate = flowTemplateDao.getFlowTemplateByCode(flowTemplateParam.getCode());
        //      1：启用 2：禁用 默认 2
        if (1 == flowTemplate.getState()) {
            flowTemplate.setState(2);
            result = flowTemplateDao.updateByPrimaryKeySelective(flowTemplate);
        } else {
            boolean checkFloCustomForm = checkFloCustomForm(flowTemplate.getCode());
            boolean checkFlowTemplateConfig = checkFlowTemplateConfig(flowTemplate.getCode());
            boolean checkFlowTemplateRole = checkFlowTemplateRole(flowTemplate.getCode());
            //流程模板类型(1,固定表单，2 自定义表单)
            //流程发起方式    (F：自由流 T：模板)
            if ("F".equals(flowTemplate.getFreeOrTemplate())) {
                if (true == checkFloCustomForm && true == checkFlowTemplateRole) {
                    flowTemplate.setState(1);
                    result = flowTemplateDao.updateByPrimaryKeySelective(flowTemplate);
                }
                if (false == checkFloCustomForm) {
                    throw new HioException(FlowConstants.FORM_INFORMATION.getMessage(), FlowConstants.FORM_INFORMATION.getStatus());
                }
                if (false == checkFlowTemplateRole) {
                    throw new HioException(FlowConstants.ROLE_INFORMATION.getMessage(), FlowConstants.ROLE_INFORMATION.getStatus());
                }
            } else if ("T".equals(flowTemplate.getFreeOrTemplate())) {
                if (true == checkFloCustomForm && true == checkFlowTemplateConfig && true == checkFlowTemplateRole) {
                    flowTemplate.setState(1);
                    result = flowTemplateDao.updateByPrimaryKeySelective(flowTemplate);
                }
                if (false == checkFloCustomForm) {
                    throw new HioException(FlowConstants.FORM_INFORMATION.getMessage(), FlowConstants.FORM_INFORMATION.getStatus());
                }
                if (false == checkFlowTemplateConfig) {
                    throw new HioException(FlowConstants.FLOW_INFORMATION.getMessage(), FlowConstants.FLOW_INFORMATION.getStatus());
                }
                if (false == checkFlowTemplateRole) {
                    throw new HioException(FlowConstants.ROLE_INFORMATION.getMessage(), FlowConstants.ROLE_INFORMATION.getStatus());
                }
            }

        }
        return result;
    }


    /**
     * 判断自定义表单信息是否完整
     *
     * @param code
     * @return
     */
    public boolean checkFloCustomForm(String code) {
        boolean flag = false;
        //获取自定义表单信息
        List<FlowCustomForm> customForms = flowCustomFormDao.getCustomFormByTemplateCode(code);
        if (customForms != null || customForms.size() > 1) {
            flag = true;
        }
        return flag;
    }

    /**
     * 判断流程模板信息是否完整
     *
     * @param flowTemplateCode
     * @return
     */
    public boolean checkFlowTemplateConfig(String flowTemplateCode) {
        boolean flag = false;
        //获取流程环节
        List<FlowTemplateAcDto> acList = flowTemplateAcDao.getAcList(flowTemplateCode);
        List<FlowTemplateAcDto> acListNew = new ArrayList<>();
        List<FlowTemplateApprover> approverList = flowTemplateApproverDao.getApproverList(flowTemplateCode);
        Map<String, List<FlowTemplateApprover>> collect = approverList.stream().collect(Collectors.groupingBy(FlowTemplateApprover::getFlowAcId));
        //获取连线
        List<FlowLinkLine> lineList = flowLinkLineDao.getLineListByFlowTemplateCode(flowTemplateCode);

        if (null != acList && null != lineList) {
            //nodeType：  1：开始    2：审批    3：结束    4：聚合网关    5：条件网关
            //节点个数
            int startNum = 0;
            int approvalNum = 0;
            int endlNum = 0;
            int closelNum = 0;
            int conditionNum = 0;
            for (FlowTemplateAcDto flowTemplateAcDto : acList) {
                if (FlowNodeType.START.getType().equals(flowTemplateAcDto.getNodeType())) {
                    startNum += 1;
                }
                if (FlowNodeType.PROCESS.getType().equals(flowTemplateAcDto.getNodeType())) {
                    acListNew.add(flowTemplateAcDto);
                    approvalNum += 1;
                }
                if (FlowNodeType.END.getType().equals(flowTemplateAcDto.getNodeType())) {
                    endlNum += 1;
                }
                if (FlowNodeType.JOIN.getType().equals(flowTemplateAcDto.getNodeType())) {
                    closelNum += 1;
                }
                if (FlowNodeType.FORK.getType().equals(flowTemplateAcDto.getNodeType())) {
                    conditionNum += 1;
                }
            }
            if (1 == startNum && 1 == endlNum && approvalNum >= 1) {
                if (lineList.size() >= startNum + approvalNum + closelNum + 2 * conditionNum) {
                    flag = true;
                }
            }
            for (FlowTemplateAcDto flowTemplateAcDto : acListNew) {
                List<FlowTemplateApprover> approverList1 = collect.get(flowTemplateAcDto.getFlowTemplateAcId());
                if (approverList1 == null) {
                    flag = false;
                    throw new HioException("缺少审批人! 请配置审批人!");
                }
            }
        }
        return flag;
    }

    /**
     * 判断流程模板权限是否完整
     *
     * @param code
     * @return
     */
    public boolean checkFlowTemplateRole(String code) {
        boolean flag = false;
        List<FlowTemplateRole> templateRoleList = flowTemplateRoleDao.getTemplateRoleList(code);
        if (templateRoleList.size() > 0) {
            flag = true;
        }
        return flag;
    }


    /**
     * 存模板基本信息
     *
     * @param flowTemplateParam
     */
    @Override
    public FlowTemplateDto saveFlowTemplate(FlowTemplateParam flowTemplateParam) {
        LoginUser loginUser = getLoginUser();
        FlowTemplateDto flowTemplateDto = new FlowTemplateDto();
        FlowTemplate flowTemplate = new FlowTemplate();
        BeanUtils.copyProperties(flowTemplateParam, flowTemplate);
        if ("".equals(flowTemplateParam.getSid()) || null == flowTemplateParam.getSid()) {
            flowTemplate.setId(Base.generatePk(FlowTemplate.class));
            flowTemplate.setState(2);
            flowTemplate.setSort((double) (flowTemplateDao.selectAll().size() + 1));
            flowTemplate.setCode(flowTemplate.getId());
            flowTemplate.setCreateDate(new Date());
            flowTemplate.setUpdateDate(new Date());
            flowTemplate.setCreatePersonId(loginUser.getUserId());
            flowTemplate.setCreatePersonName(getUserNameOA());
            flowTemplate.setStartSign(1);
            flowTemplate.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
            //名称重复校验
            int count = flowTemplateDao.getTemplateNameNum(flowTemplate);
            if (count > 0) {
                throw new HioException("流程名称重复！请重新输入");
            }
            flowTemplateDao.insert(flowTemplate);
            flowTemplateDto.setCode(flowTemplate.getId());
        } else {
            flowTemplate.setId(Base.generatePk(FlowTemplate.class));
            FlowTemplate flowTemplateByCode = flowTemplateDao.getFlowTemplateByCode(flowTemplateParam.getCode());
            flowTemplate.setSort(flowTemplateByCode.getSort());
            flowTemplate.setState(flowTemplateByCode.getState());
            flowTemplate.setCode(flowTemplateParam.getCode());
            flowTemplate.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
            flowTemplate.setCreateDate(new Date());
            flowTemplate.setUpdateDate(new Date());
            flowTemplate.setCreatePersonName(getUserNameOA());
            flowTemplate.setCreatePersonId(getUserIdOA());
            flowTemplate.setFlowAutoComplate(flowTemplateByCode.getFlowAutoComplate());
            flowTemplate.setStartSign(flowTemplateByCode.getStartSign());
            FlowTemplate flowTemplateOld = new FlowTemplate();
            flowTemplateOld.setId(flowTemplateParam.getSid());
            flowTemplateOld.setName(flowTemplateParam.getName());
            int count = flowTemplateDao.getTemplateNameNum(flowTemplateOld);
            if (count > 0) {
                throw new HioException("流程名称重复！请重新输入");
            }

            updateInstanceTemplateId(flowTemplateParam.getSid(),flowTemplate.getId());

            flowTemplateDao.insert(flowTemplate);
            flowTemplateDto.setCode(flowTemplateParam.getCode());

//            FlowTemplate flowTemplateOld = flowTemplateDao.selectByPrimaryKey(flowTemplateParam.getSid());
//            flowTemplateOld.setUpdateDate(new Date());
//            flowTemplateOld.setDelflag(true);
//            flowTemplateDao.updateByPrimaryKeySelective(flowTemplateOld);


//            //获取自定义表单信息
//            FlowCustomForm flowCustomForm = flowCustomFormDao.selectCustomFormByFtId(flowTemplate.getId());
//            if (null == flowCustomForm) {
//
//            } else {
//                flowCustomForm.setId(Base.generatePk(FlowCustomForm.class));
//                flowCustomForm.setUpdateDate(new Date());
//                flowCustomForm.setFlowTemplateId(flowTemplate.getId());
//                flowCustomFormDao.insert(flowCustomForm);
//            }

            //获取模板配置
            List<FlowLinkLine> lineList = flowLinkLineDao.getLineListByFlowTemplateCode(flowTemplateParam.getCode());
            List<FlowTemplateAcDto> acList = flowTemplateAcDao.getAcList(flowTemplateParam.getCode());
            List<FlowTemplateApprover> approverList = flowTemplateApproverDao.getApproverList(flowTemplateParam.getCode());
            List<FlowTemplateAcCopy> acCopyList = flowTemplateAcCopyDao.getTemplateAcCopyList(flowTemplateParam.getCode());

            Map<String, String> acDtoMap = new HashMap<>();
            if (null == acList) {

            } else {
                for (FlowTemplateAcDto flowTemplateAcDto : acList) {
                    FlowTemplateAc flowTemplateAc = new FlowTemplateAc();
                    BeanUtils.copyProperties(flowTemplateAcDto, flowTemplateAc);
                    flowTemplateAc.setId(Base.generatePk(FlowTemplateAc.class));
                    flowTemplateAc.setUpdateDate(new Date());
                    flowTemplateAc.setFlowTemplateId(flowTemplate.getId());
                    acDtoMap.put(flowTemplateAcDto.getFlowTemplateAcId(), flowTemplateAc.getId());
                    flowTemplateAcDao.insert(flowTemplateAc);
                }
            }

            if (null == approverList) {

            } else {
                for (FlowTemplateApprover flowTemplateApprover : approverList) {
                    flowTemplateApprover.setId(Base.generatePk(FlowTemplateApprover.class));
                    flowTemplateApprover.setUpdateDate(new Date());
                    flowTemplateApprover.setFlowTemplateId(flowTemplate.getId());
                    flowTemplateApprover.setFlowAcId(acDtoMap.get(flowTemplateApprover.getFlowAcId()));
                    flowTemplateApproverDao.insert(flowTemplateApprover);
                }
            }

            if (null == acCopyList) {

            } else {
                for (FlowTemplateAcCopy flowTemplateAcCopy : acCopyList) {
                    flowTemplateAcCopy.setId(Base.generatePk(FlowTemplateAcCopy.class));
                    flowTemplateAcCopy.setUpdateDate(new Date());
                    flowTemplateAcCopy.setFlowTemplateId(flowTemplate.getId());
                    flowTemplateAcCopy.setFlowAcId(acDtoMap.get(flowTemplateAcCopy.getFlowAcId()));
                    flowTemplateAcCopyDao.insert(flowTemplateAcCopy);
                }
            }

            if (null == lineList) {

            } else {
                for (FlowLinkLine flowLinkLine : lineList) {
                    flowLinkLine.setStartLine(acDtoMap.get(flowLinkLine.getStartLine()));
                    flowLinkLine.setTargetLine(acDtoMap.get(flowLinkLine.getTargetLine()));
                    flowLinkLine.setId(Base.generatePk(FlowLinkLine.class));
                    flowLinkLine.setUpdateDate(new Date());
                    flowLinkLine.setFlowTemplateId(flowTemplate.getId());
                    flowLinkLineDao.insert(flowLinkLine);
                }
            }

            //删除旧基本信息
            super.deletePseudoObjectById(flowTemplateParam.getSid());
//            //获取权限信息
//            List<FlowTemplateRole> roleList = flowTemplateRoleDao.getTemplateRoleList(flowTemplate.getId());
//            if (null == roleList) {
//
//            } else {
//                for (FlowTemplateRole flowTemplateRole : roleList) {
//                    flowTemplateRole.setId(Base.generatePk(FlowTemplateRole.class));
//                    flowTemplateRole.setUpdateDate(new Date());
//                    flowTemplateRole.setFlowTemplateId(flowTemplate.getId());
//                    result = flowTemplateRoleDao.insert(flowTemplateRole);
//                }
//            }
        }
        return flowTemplateDto;
    }

    /**
     * 设计页面预览
     *
     * @param flowTemplateParam
     * @return
     */
    @Override
    public Object previewTemplate(FlowTemplateParam flowTemplateParam) {
        //2.流程模板（审批流程动态变化）设计页面预览
        //3.模板基本信息
        logger.info("code=" + flowTemplateParam.getCode());
        if (flowTemplateParam.getCode() == null) {
            throw new HioException("参数为空！");
        }
        FlowTemplate flowTemplate = flowTemplateDao.getFlowTemplateByCode(flowTemplateParam.getCode());
        FlowTemplateChildDto flowTemplateChildDto = new FlowTemplateChildDto();
        BeanUtils.copyProperties(flowTemplate, flowTemplateChildDto);
        List<FlowCustomForm> customFormByTemplateCode = flowCustomFormDao.getCustomFormByTemplateCode(flowTemplateParam.getCode());
        flowTemplateChildDto.setCustomForm(customFormByTemplateCode);
        flowTemplateChildDto.setStartDate(new Date());
        return flowTemplateChildDto;
    }


    @Override
    public Object flowStartView(FlowStartParam flowStartParam) {
        FlowStartViewDto flowStartViewDto = new FlowStartViewDto();
        //1、查询模板信息
        logger.info("flowTemplateCode=" + flowStartParam.getTemplateCode());
        if (flowStartParam.getTemplateCode() == null) {
            throw new HioException("参数为空！");
        }
        FlowTemplate flowTemplate = flowTemplateDao.getFlowTemplateByCode(flowStartParam.getTemplateCode());
        //判断终端类型    PC 和 手机端
//        String terminalType = flowStartParam.getTerminalType();
        //判断自定义表单  固定表单     流程模板类型(1,固定表单，2 自定义表单)      流程发起方式    (F：自由流 T：模板)
//        if (2 == flowTemplate.getType()) {
//            if ("Pc".equals(terminalType)) {
//                //判断执行动作    新增，修改
//                String actionType = flowStartParam.getActionType();
//                if ("Add".equals(actionType)) {
//                    flowTemplateChildDto.setFreeOrTemplate(flowTemplate.getFreeOrTemplate());
//                    flowTemplateChildDto.setFormUrlPcNew("********************");
//                } else if ("Update".equals(actionType)) {
//                    flowTemplateChildDto.setFreeOrTemplate(flowTemplate.getFreeOrTemplate());
//                    flowTemplateChildDto.setFormUrlPcEdit("*******************");
//                    flowTemplateChildDto.setBusinessId(flowStartParam.getBusinessId());
//                }
//            } else if ("Phone".equals(terminalType)) {
//                String actionType = flowStartParam.getActionType();
//                if ("Add".equals(actionType)) {
//                    flowTemplateChildDto.setFreeOrTemplate(flowTemplate.getFreeOrTemplate());
//                    flowTemplateChildDto.setFormUrlPcNew("**********************");
//                } else if ("Update".equals(actionType)) {
//                    flowTemplateChildDto.setFreeOrTemplate(flowTemplate.getFreeOrTemplate());
//                    flowTemplateChildDto.setFormUrlPcEdit("**********************");
//                    flowTemplateChildDto.setBusinessId(flowStartParam.getBusinessId());
//                }
//            }
//        } else if (1 == flowTemplate.getType()) {
//            if ("Pc".equals(terminalType)) {
//                //判断执行动作    新增，修改
//                String actionType = flowStartParam.getActionType();
//                if ("Add".equals(actionType)) {
//                    flowTemplateChildDto.setFreeOrTemplate(flowTemplate.getFreeOrTemplate());
//                } else if ("Update".equals(actionType)) {
//                    flowTemplateChildDto.setFreeOrTemplate(flowTemplate.getFreeOrTemplate());
//                    flowTemplateChildDto.setBusinessId(flowStartParam.getBusinessId());
//                }
//            } else if ("Phone".equals(terminalType)) {
//                String actionType = flowStartParam.getActionType();
//                if ("Add".equals(actionType)) {
//                    flowTemplateChildDto.setFreeOrTemplate(flowTemplate.getFreeOrTemplate());
//                } else if ("Update".equals(actionType)) {
//                    flowTemplateChildDto.setFreeOrTemplate(flowTemplate.getFreeOrTemplate());
//                    flowTemplateChildDto.setBusinessId(flowStartParam.getBusinessId());
//                }
//            }
//        }
        flowStartViewDto.setFreeOrTemplate(flowTemplate.getFreeOrTemplate());
        flowStartViewDto.setTemplateName(flowTemplate.getName());
        flowStartViewDto.setDescription(flowTemplate.getDescription());
        flowStartViewDto.setType("file");
        flowStartViewDto.setAppId(BaseConstants.App.FLOW.getId());
        flowStartViewDto.setCategoryId(BaseConstants.AttachmentCategory.FLOW_INSTANCE.getId());
        flowStartViewDto.setBusinessId(IDGenerator.getUUID());
        flowStartViewDto.setStartTime(new Date());
        return flowStartViewDto;
    }

    @Override
    public Object getFlowTemplateById(String code) {
        if (code.equals("0")) {
            FlowTemplate flowTemplateByCode = flowTemplateDao.getFlowTemplateByCode(code);
            return flowTemplateByCode;
        } else {
            if (flowTemplateDao.getFlowTemplateByCode(code) == null) {
                return null;
            }else {
                FlowTemplate flowTemplateByCode = flowTemplateDao.getFlowTemplateByCode(code);
                return flowTemplateByCode;
            }
        }
    }

    @Override
    public Object deleteFlowTemplate(FlowTemplateParam flowTemplateParam) {
        FlowTemplate flowTemplate = flowTemplateDao.getFlowTemplateByCode(flowTemplateParam.getCode());
        int i = super.deletePseudoObjectById(flowTemplate.getId());
        flowTemplateAcDao.updateAcByTemId(flowTemplate.getId());
        flowLinkLineDao.updateLinkLineByTemId(flowTemplate.getId());
        flowTemplateApproverDao.updateApproverByTemId(flowTemplate.getId());
        flowTemplateAcCopyDao.updateAcCopyByTemId(flowTemplate.getId());
        flowTemplateRoleDao.updateRoleByTemCode(flowTemplateParam.getCode());
        flowCustomFormDao.updateCustomFormByTemCode(flowTemplateParam.getCode());
        return i;
    }

    //修改流程草稿  关联的模板id
    public void updateInstanceTemplateId(String templateIdOld, String templateIdNew) {
       flowInstanceDao.updateInstanceDraft(templateIdOld,templateIdNew);
    }
}