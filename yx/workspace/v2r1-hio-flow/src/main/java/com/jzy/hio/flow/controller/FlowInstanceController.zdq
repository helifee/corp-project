package com.jzy.hio.flow.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.flow.entity.dto.ApprovalCountDto;
import com.jzy.hio.flow.entity.dto.ApprovalDto;
import com.jzy.hio.flow.entity.dto.InstanceDetailsDto;
import com.jzy.hio.flow.entity.param.AddLabelParam;
import com.jzy.hio.flow.entity.param.ApprovalCountParam;
import com.jzy.hio.flow.entity.param.ApprovalParam;
import com.jzy.hio.flow.entity.param.CopyParam;
import com.jzy.hio.flow.entity.param.FlowApprovalParam;
import com.jzy.hio.flow.entity.param.FlowRejectParam;
import com.jzy.hio.flow.entity.param.FlowSimulationParam;
import com.jzy.hio.flow.entity.param.FlowSubmitParam;
import com.jzy.hio.flow.entity.param.InstanceDetailsParam;
import com.jzy.hio.flow.entity.param.UpdateApproverParam;
import com.jzy.hio.flow.param.FlowByProjectParam;
import com.jzy.hio.flow.service.FlowInstanceService;
import com.jzy.hio.utils.Page;

/**
 * 流程实例
 *
 * @author chaoyang
 *
 */
@RestController
@RequestMapping("/instance")
public class FlowInstanceController {

	@Autowired
	private FlowInstanceService flowInstanceService;

	@Autowired
	private RedisTemplate<String,String> redis;
	
	@RequestMapping("/getPage")
	public Object getInstanceList(@RequestBody @Validated ApprovalParam approvalParam) {

		Page queryApprovalList = flowInstanceService.getInstanceList(approvalParam);

		return queryApprovalList;
	}

	/**
	 * 流程提交
	 *
	 * @param instanceParam
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/start")
	public Object start(@RequestBody @Validated FlowSubmitParam flowSubmitParam) throws Exception {
		String instanceId = flowInstanceService.startFlow(flowSubmitParam);
		return instanceId;
	}

	/**
	 * 流程草稿保存
	 *
	 * @param instanceParam
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/draftSave")
	public Object draftSave(@RequestBody @Validated FlowSubmitParam instanceParam) throws Exception {
		String result = flowInstanceService.saveDraft(instanceParam);
		return result;
	}

	/**
	 * 审批详情页面
	 *
	 * @param instanceDetailsParam
	 * @return
	 */
	@RequestMapping("/flowView")
	public Object flowView(@RequestBody @Validated InstanceDetailsParam instanceDetailsParam) {
		
		InstanceDetailsDto result =  flowInstanceService.flowView(instanceDetailsParam);
		 
		return result;
	}

	/**
	 * 审批退回
	 *
	 * @param instanceDetailsParam
	 * @return
	 */
	@RequestMapping("/withdraw/{instanceId}")
	public Object withdraw(@PathVariable("instanceId") String instanceId) {
		int result = flowInstanceService.withdraw(instanceId);
		return result;
	}

	/**
	 * 跳过
	 *
	 * @param instanceDetailsParam
	 * @return
	 */
	@RequestMapping("/skip/{instanceId}")
	public Object approvalSkip(@PathVariable("instanceId") String instanceId) {
		int result = flowInstanceService.approvalSkip(instanceId);
		return result;
	}

	/**
	 * 审批抄送
	 *
	 * @param instanceDetailsParam
	 * @return
	 */
	@RequestMapping("/copy")
	public Object flowCopy(@RequestBody @Validated CopyParam copyParam) {
		int result = flowInstanceService.flowCopy(copyParam);
		return result;
	}

	/**
	 * 审批已经抄送
	 *
	 * @param instanceDetailsParam
	 * @return
	 */
	@RequestMapping("/alreadyCopy/{instanceId}")
	public Object flowCopy(@PathVariable("instanceId") String instanceId ) {
		 
		List<String> alreadySendApproverList = flowInstanceService.alreadyCopy(instanceId);
		return alreadySendApproverList;
	}

	/**
	 * 流程审批同意
	 *
	 * @param instanceId
	 * @return
	 */
	@RequestMapping("/approve")
	public Object approve(@RequestBody @Validated FlowApprovalParam flowApprovalParam) {

		int  result = flowInstanceService.approve(flowApprovalParam);
 
		return result;
	}

	/**
	 * 流程前加签
	 *
	 * @param instanceId
	 * @return
	 */
	@RequestMapping("/frontAddLabel")
	public Object frontAddLabel(@RequestBody @Validated AddLabelParam addLabelParam) {

		int result = flowInstanceService.frontAddLabel(addLabelParam);
		return result;
	}

	/**
	 * 流程后加签
	 *
	 * @param instanceId
	 * @return
	 */
	@RequestMapping("/afterAddLabel")
	public Object afterAddLabel(@RequestBody @Validated AddLabelParam addLabelParam) {

		int result = flowInstanceService.afterAddLabel(addLabelParam);
		return result;
	}

	/**
	 * 流程驳回或者退回
	 *
	 * @param instanceId
	 * @return
	 */
	@RequestMapping("/reject")
	public Object reject(@RequestBody @Validated FlowRejectParam flowRejectParam) {

		int result = flowInstanceService.reject(flowRejectParam);

		return result;
	}

	/**
	 * 修改审批人
	 *
	 * @param instanceId
	 * @return
	 */
	@RequestMapping("/update/approver")
	public Object updateApprover(@RequestBody @Validated UpdateApproverParam updateApproverParam) {

		int result = flowInstanceService.updateApprover(updateApproverParam);
		return result;
	}

	/**
	 * 首页 我的审批信息
	 * 
	 * @param instanceId
	 * @return
	 */
	@RequestMapping("/approval/list/{state}")
	public Object approvalList(@PathVariable("state") int state) {

		List<ApprovalDto> approvalList = flowInstanceService.approvalList(state);

		return approvalList;
	}

	/**
	 * 首页 我的审批信息 count
	 * 
	 * @author yangning
	 *
	 * @param instanceId
	 * @return
	 */
	@RequestMapping("/approval/listCount/{state}")
	public Object approvalListCount(@PathVariable("state") int state) {

		int count = flowInstanceService.approvalListCount(state);

		return count;
	}

	/**
	 * 提供feign接口 查询实例
	 *
	 * @param instanceId
	 * @return
	 */
	@RequestMapping("/getInstanceListByProjectId")
	public Object getInstanceListByProjectId(@RequestBody @Validated FlowByProjectParam flowByProjectParam) {

		Page<ApprovalDto> page = flowInstanceService.getInstanceListByProjectId(flowByProjectParam);

		return page;
	}

	/**
	 * 移动端：查询当前人的待审、待阅总数
	 *
	 * @param approvalCountParam
	 * @author yangning
	 * @return
	 */
	@RequestMapping("/approval/count")
	public Object approvalCount(@RequestBody ApprovalCountParam approvalCountParam) {

		List<ApprovalCountDto> totalCount = flowInstanceService.mobileQueryCount(approvalCountParam.getTendList());

		return totalCount;
	}

	/**
	 * 模板预览
	 *
	 * @param flowSimulationParam
	 * @return
	 */
	@RequestMapping("/flowSimulate")
	public Object flowSimulate(@RequestBody FlowSimulationParam flowSimulationParam) {
		return flowInstanceService.flowSimulate(flowSimulationParam);
	}
	
	/**
	 * 模板预览
	 *
	 * @param flowSimulationParam
	 * @return
	 */
	@RequestMapping("/test")
	public Object test() {
		 redis.opsForValue().set("zhang:zhang", "123");
		
		return 1;
	}

}