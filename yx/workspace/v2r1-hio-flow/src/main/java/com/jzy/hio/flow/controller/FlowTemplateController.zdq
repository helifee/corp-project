package com.jzy.hio.flow.controller;

import com.jzy.hio.base.Base;
import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.flow.entity.FlowTemplateAc;
import com.jzy.hio.flow.entity.param.FlowStartParam;
import com.jzy.hio.flow.entity.param.FlowTemplateConfigParam;
import com.jzy.hio.flow.entity.param.FlowTemplateParam;
import com.jzy.hio.flow.service.FlowTemplateRoleService;
import com.jzy.hio.flow.service.FlowTemplateService;
import com.jzy.hio.utils.IDGenerator;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.IdGenerator;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Map;

/**
 * 流程模板
 */
@RestController
@RequestMapping("/template")
public class FlowTemplateController extends BaseController {

    @Autowired
    private FlowTemplateService flowTemplateService;

    @Autowired
    private FlowTemplateRoleService flowTemplateRoleService;

    /**
     * 保存模板基本信息
     *
     * @param flowTemplateParam
     * @return
     */
    @RequestMapping("/saveTemplate")
    public Object saveFlowTemplate(@RequestBody FlowTemplateParam flowTemplateParam) {
        return flowTemplateService.saveFlowTemplate(flowTemplateParam);
    }


    /**
     * 获取模板基本信息
     *
     * @param code 业务对象code
     * @return
     */
    @RequestMapping("/getFlowTemplateById")
    public Object getFlowTemplateById(String code) {
        return flowTemplateService.getFlowTemplateById(code);
    }


    /**
     * 保存流程模板配置
     *
     * @param flowTemplateConfigParam
     * @return
     */
    @RequestMapping("/saveFlowTemplateConfigParam")
    public Object saveFlowTemplateConfigParam(@RequestBody FlowTemplateConfigParam flowTemplateConfigParam) {
        if ("".equals(flowTemplateConfigParam.getSid())) {
            return flowTemplateService.saveFlowTemplateConfigParam(flowTemplateConfigParam);
        } else {
            return updateFlowTemplateConfigParam(flowTemplateConfigParam);
        }

    }

    /**
     * 根据模板id查连线和环节,审批人和抄送人
     *
     * @param code 模板code
     * @return
     */
    @RequestMapping("/getFlowTemplateParam")
    public Object getFlowTemplateConfigParam(String code) {
        FlowTemplateConfigParam flowTemplateConfigParam = flowTemplateService.getFlowTemplateConfigParam(code);
        return flowTemplateConfigParam;
    }

    /**
     * 单独修改流程模板配置
     *
     * @param flowTemplateConfigParam
     * @return
     */
    public Object updateFlowTemplateConfigParam(FlowTemplateConfigParam flowTemplateConfigParam) {
        return flowTemplateService.updateFlowTemplateConfigParam(flowTemplateConfigParam);
    }


    /**
     * 拖拽排序（审批）
     * @param map map.put("firstSort","1");   map.put("afterSort","2");    map.put("flowTemplateId","10003");
     *            map.put("flowCategoryId","12132")
     * @return
     */
    @RequestMapping("/draggingSorting")
    public Object draggingSorting(@RequestBody Map<String, Object> map) {
        return flowTemplateService.draggingSorting(map);
    }

    /**
     * 启用禁用
     *
     * @param flowTemplateParam
     * @return
     */
    @RequestMapping("/enabledDisable")
    public Object enabledDisable(@RequestBody FlowTemplateParam flowTemplateParam) {
        return flowTemplateService.enabledDisable(flowTemplateParam);
    }

    /**
     * 预览
     *
     * @param flowTemplateParam
     * @return
     */
    @RequestMapping("/previewTemplate")
    public Object previewTemplate(@RequestBody FlowTemplateParam flowTemplateParam) {
        return flowTemplateService.previewTemplate(flowTemplateParam);
    }


    /**
     * 删除审批
     *
     * @param flowTemplateParam
     * @return
     */
    @RequestMapping("/deleteFlowTemplate")
    public Object deleteFlowTemplate(@RequestBody FlowTemplateParam flowTemplateParam) {
        return flowTemplateService.deleteFlowTemplate(flowTemplateParam);
    }

    /**
     * 获取uuid
     *
     * @return
     */
    @RequestMapping("/getGuuids")
    public Object getGuuids() {
        return IDGenerator.getUUID();
    }


    /**
     * 发起页面流程发起
     *
     * @param flowStartParam
     * @return
     */
    @RequestMapping("/flowStartView")
    public Object flowStartView(@RequestBody FlowStartParam flowStartParam) {
        return flowTemplateService.flowStartView(flowStartParam);
    }
//
//
//    @RequestMapping("/test")
//    public Object test(){
//        boolean templateRole = flowTemplateRoleService.getTemplateRole("1001","hio_tend019","100561");
//        return templateRole;
//    }
//    /**
//     * 新建流程审批
//     */
//    @RequestMapping("/saveAll")
//    public ApiResponse saveAll(@RequestBody String json) {
//        ApiResponse apiResponse = new ApiResponse();
//        Map<String, Object> map = json2map(json);
//        String stringFlowTemplate = (String) map.get("flowTemplate");
//        String stringFlowCustomForm = (String) map.get("flowCustomForm");
//        String stringFlowTemplateDto = (String) map.get("flowTemplateDto");
//        String stringFlowTemplateRole = (String) map.get("flowTemplateRole");
//        FlowTemplate flowTemplate = json2obj(stringFlowTemplate, FlowTemplate.class);
//        FlowCustomForm flowCustomForm = json2obj(stringFlowCustomForm, FlowCustomForm.class);
//        FlowTemplateParam flowTemplateDto = json2obj(stringFlowTemplateDto, FlowTemplateParam.class);
////        FlowTemplateRole flowTemplateRole = json2obj(stringFlowTemplateRole, FlowTemplateRole.class);
//        FlowTemplateRoleDTO flowTemplateRoleDTO = json2obj(stringFlowTemplateRole, FlowTemplateRoleDTO.class);
//        flowTemplateService.saveAll(flowTemplate, flowCustomForm, flowTemplateDto, flowTemplateRoleDTO);
//        return apiResponse;
//    }


}
