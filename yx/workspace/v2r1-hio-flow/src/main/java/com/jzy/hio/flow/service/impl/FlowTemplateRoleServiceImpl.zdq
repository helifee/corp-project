package com.jzy.hio.flow.service.impl;

import com.jzy.hio.ApiFeignResponse;
import com.jzy.hio.base.Base;
import com.jzy.hio.base.BaseConstants;
import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.exception.HioException;
import com.jzy.hio.feign.SysFeignService;
import com.jzy.hio.flow.entity.*;
import com.jzy.hio.flow.entity.dto.FlowTemplateRoleDto;
import com.jzy.hio.flow.entity.enums.FlowTemplateRoleEnum;
import com.jzy.hio.flow.entity.param.FlowTemplateRoleParam;
import com.jzy.hio.flow.mapper.*;
import com.jzy.hio.flow.service.FlowTemplateRoleService;
import com.jzy.hio.sys.organization.dto.GeneralDto;
import com.jzy.hio.sys.organization.dto.OrgRoleUserDto;
import com.jzy.hio.sys.user.param.OAUserParam;
import com.jzy.hio.utils.JacksonUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.stream.Collectors;

@Service
public class FlowTemplateRoleServiceImpl extends BaseServiceImpl<FlowTemplateRole> implements FlowTemplateRoleService {
    @Autowired
    private FlowTemplateRoleDao flowTemplateRoleDao;
    @Autowired
    private SysFeignService sysFeignService;

    @Autowired
    private FlowTemplateDao flowTemplateDao;

    @Override
    public Object updateFlowTemplateRole(FlowTemplateRoleParam flowTemplateRoleParam) {
        String code = flowTemplateRoleParam.getCode();
        int result = 0;
        logger.info("code=" + flowTemplateRoleParam.getCode());
        if (code == null) {
            throw new HioException("参数为空！");
        }

        FlowTemplate flowTemplate = flowTemplateDao.getFlowTemplateByCode(code);
        if (flowTemplate == null){
            throw new HioException("模板已被修改，请返回重试！");
        }
        //获取权限信息
        List<FlowTemplateRole> templateRoleList = flowTemplateRoleDao.getTemplateRoleList(code);
        if (templateRoleList.size() < 1) {
            List<FlowTemplateRole> personList = flowTemplateRoleParam.getPersonList();
            List<FlowTemplateRole> departmentList = flowTemplateRoleParam.getDepartmentList();
            List<FlowTemplateRole> roleList = flowTemplateRoleParam.getRoleList();
            if (personList.size() == 0 && departmentList.size() == 0 && roleList.size() == 0) {
                result = 1;
            } else {
                for (FlowTemplateRole flowTemplateRole : personList) {
                    flowTemplateRole.setId(Base.generatePk(FlowTemplateRole.class));
                    flowTemplateRole.setCreateDate(new Date());
                    flowTemplateRole.setCreatePersonId(getLoginUser().getUserId());
                    flowTemplateRole.setCreatePersonName(getUserNameOA());
                    flowTemplateRole.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
                    result = flowTemplateRoleDao.insert(flowTemplateRole);
                }
                for (FlowTemplateRole flowTemplateRole : departmentList) {
                    if (flowTemplateRole.getRoot() == true) {
                        flowTemplateRole.setId(Base.generatePk(FlowTemplateRole.class));
                        flowTemplateRole.setCreateDate(new Date());
                        flowTemplateRole.setCreatePersonId(getLoginUser().getUserId());
                        flowTemplateRole.setCreatePersonName(getUserNameOA());
                        flowTemplateRole.setChooseType(FlowTemplateRoleEnum.ALLUSER.getType());
                        flowTemplateRole.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
                        result = flowTemplateRoleDao.insert(flowTemplateRole);
                    } else if (flowTemplateRole.getRoot() == false) {
                        flowTemplateRole.setId(Base.generatePk(FlowTemplateRole.class));
                        flowTemplateRole.setCreateDate(new Date());
                        flowTemplateRole.setCreatePersonId(getLoginUser().getUserId());
                        flowTemplateRole.setCreatePersonName(getUserNameOA());
                        flowTemplateRole.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
                        result = flowTemplateRoleDao.insert(flowTemplateRole);
                    }
                }
                for (FlowTemplateRole flowTemplateRole : roleList) {
                    flowTemplateRole.setId(Base.generatePk(FlowTemplateRole.class));
                    flowTemplateRole.setCreateDate(new Date());
                    flowTemplateRole.setCreatePersonId(getLoginUser().getUserId());
                    flowTemplateRole.setCreatePersonName(getUserNameOA());
                    flowTemplateRole.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
                    result = flowTemplateRoleDao.insert(flowTemplateRole);
                }
            }
        } else {
            for (FlowTemplateRole flowTemplateRole : templateRoleList) {
                flowTemplateRoleDao.updateRoleByTemCode(flowTemplateRole.getFlowTemplateId());
            }
            List<FlowTemplateRole> personList = flowTemplateRoleParam.getPersonList();
            List<FlowTemplateRole> departmentList = flowTemplateRoleParam.getDepartmentList();
            List<FlowTemplateRole> roleList = flowTemplateRoleParam.getRoleList();

            if (personList.size() == 0 && departmentList.size() == 0 && roleList.size() == 0) {
                result = 1;
            } else {
                for (FlowTemplateRole flowTemplateRole : personList) {
                    flowTemplateRole.setId(Base.generatePk(FlowTemplateRole.class));
                    flowTemplateRole.setCreateDate(new Date());
                    flowTemplateRole.setCreatePersonId(getLoginUser().getUserId());
                    flowTemplateRole.setCreatePersonName(getUserNameOA());
                    flowTemplateRole.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
                    result = flowTemplateRoleDao.insert(flowTemplateRole);
                }
                for (FlowTemplateRole flowTemplateRole : departmentList) {
                    if (flowTemplateRole.getRoot() == true) {
                        flowTemplateRole.setId(Base.generatePk(FlowTemplateRole.class));
                        flowTemplateRole.setCreateDate(new Date());
                        flowTemplateRole.setCreatePersonId(getLoginUser().getUserId());
                        flowTemplateRole.setCreatePersonName(getUserNameOA());
                        flowTemplateRole.setChooseType(FlowTemplateRoleEnum.ALLUSER.getType());
                        flowTemplateRole.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
                        result = flowTemplateRoleDao.insert(flowTemplateRole);
                    } else if (flowTemplateRole.getRoot() == false) {
                        flowTemplateRole.setId(Base.generatePk(FlowTemplateRole.class));
                        flowTemplateRole.setCreateDate(new Date());
                        flowTemplateRole.setCreatePersonId(getLoginUser().getUserId());
                        flowTemplateRole.setCreatePersonName(getUserNameOA());
                        flowTemplateRole.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
                        result = flowTemplateRoleDao.insert(flowTemplateRole);
                    }
                }
                for (FlowTemplateRole flowTemplateRole : roleList) {
                    flowTemplateRole.setId(Base.generatePk(FlowTemplateRole.class));
                    flowTemplateRole.setCreateDate(new Date());
                    flowTemplateRole.setCreatePersonId(getLoginUser().getUserId());
                    flowTemplateRole.setCreatePersonName(getUserNameOA());
                    flowTemplateRole.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
                    result = flowTemplateRoleDao.insert(flowTemplateRole);
                }
            }

//            //获取模板基本信息 添加新基本信息
//            FlowTemplate flowTemplate = flowTemplateDao.selectByPrimaryKey(flowTemplateId);
//            List<FlowTemplateRole> flowTemplateRoleList = flowTemplateRoleDao.getTemplateRoleList(code);
//            for (FlowTemplateRole flowTemplateRole : flowTemplateRoleList) {
//                super.deletePseudoObjectById(flowTemplateRole.getId());
//            }
//
//            //添加新的数据
//            List<FlowTemplateRole> personList = flowTemplateRoleParam.getPersonList();
//            List<FlowTemplateRole> departmentList = flowTemplateRoleParam.getDepartmentList();
//            List<FlowTemplateRole> roleList = flowTemplateRoleParam.getRoleList();
//            for (FlowTemplateRole flowTemplateRole : personList) {
//                flowTemplateRole.setId(Base.generatePk(FlowTemplateRole.class));
//                flowTemplateRole.setCreateDate(new Date());
//                flowTemplateRole.setFlowTemplateId(flowTemplate.getCode());
//                flowTemplateRole.setDelflag(false);
//                flowTemplateRoleDao.insert(flowTemplateRole);
//            }
//            for (FlowTemplateRole flowTemplateRole : departmentList) {
//                flowTemplateRole.setId(Base.generatePk(FlowTemplateRole.class));
//                flowTemplateRole.setCreateDate(new Date());
//                flowTemplateRole.setFlowTemplateId(flowTemplate.getCode());
//                flowTemplateRole.setDelflag(false);
//                flowTemplateRoleDao.insert(flowTemplateRole);
//            }
//            for (FlowTemplateRole flowTemplateRole : roleList) {
//                flowTemplateRole.setId(Base.generatePk(FlowTemplateRole.class));
//                flowTemplateRole.setCreateDate(new Date());
//                flowTemplateRole.setFlowTemplateId(flowTemplate.getCode());
//                flowTemplateRole.setDelflag(false);
//                result = flowTemplateRoleDao.insert(flowTemplateRole);
//            }
        }
        return result;
    }

    @Override
    public Object getFlowTemplateRole(String code) {
        logger.info("code=" + code);
        if (code == null) {
            throw new HioException("参数传入为空！");
        }
        List<FlowTemplateRole> templateRoleList = flowTemplateRoleDao.getTemplateRoleList(code);

        FlowTemplateRoleDto flowTemplateRoleDto = new FlowTemplateRoleDto();
        List<FlowTemplateRole> departmentList = new ArrayList<>();
        List<FlowTemplateRole> roleList = new ArrayList<>();
        List<FlowTemplateRole> personList = new ArrayList<>();
//        Map<Integer, List<FlowTemplateRole>> collect = templateRoleList.stream().collect(Collectors.groupingBy(FlowTemplateRole::getChooseType));
        for (FlowTemplateRole flowTemplateRole : templateRoleList) {
            if (1 == flowTemplateRole.getChooseType()) {
                departmentList.add(flowTemplateRole);
                flowTemplateRoleDto.setDepartmentList(departmentList);
            }
            if (2 == flowTemplateRole.getChooseType()) {
                roleList.add(flowTemplateRole);
                flowTemplateRoleDto.setRoleList(roleList);
            }
            if (3 == flowTemplateRole.getChooseType()) {
                personList.add(flowTemplateRole);
                flowTemplateRoleDto.setPersonList(personList);
            }
            if (4 == flowTemplateRole.getChooseType()) {
                ApiFeignResponse<GeneralDto> generalDtoApiFeignResponse = sysFeignService.queryOrganizationNameById(getTendId(), flowTemplateRole.getRootId());
                GeneralDto generalDto = generalDtoApiFeignResponse.getResult();
                flowTemplateRole.setRoot(true);
                flowTemplateRole.setRootName(generalDto.getName());
                departmentList.add(flowTemplateRole);
                flowTemplateRoleDto.setDepartmentList(departmentList);
            }
        }

        return flowTemplateRoleDto;
    }

    @Override
    public boolean getTemplateRole(String userId, String tendId, String flowTemplateCode) {
        if (flowTemplateCode == null) {
            logger.info("传入flowTemplateCode为空");
            throw new HioException("参数为空！");
        }

        AtomicBoolean flag = new AtomicBoolean(false);
        OAUserParam oaUserParam = new OAUserParam();
        List<String> userList = new ArrayList();
        userList.add(userId);
        oaUserParam.setTendId(tendId);
        oaUserParam.setUserIds(userList);
        oaUserParam.setContainsParentUserOrg(true);

        ApiFeignResponse<List<OrgRoleUserDto>> listApiFeignResponse = sysFeignService.queryOrgAndRoleByUserIds(oaUserParam);
        logger.info("调用Feign:通过用户ID集合查询角色,部门:" + JacksonUtils.toJson(listApiFeignResponse));
        if (listApiFeignResponse.getStatus() == 500) {
            throw new HioException("查询出错！");
        }

        List<OrgRoleUserDto> result = listApiFeignResponse.getResult();
        List<GeneralDto> organizations = new ArrayList<>();
        List<GeneralDto> roles = new ArrayList<>();
        for (OrgRoleUserDto orgRoleUserDto : result) {
            organizations = orgRoleUserDto.getOrganizations();
            roles = orgRoleUserDto.getRoles();
        }

        List<FlowTemplateRole> templateRoleList = flowTemplateRoleDao.getTemplateRoleList(flowTemplateCode);
        Map<Integer, List<FlowTemplateRole>> templateRoleMap = templateRoleList.stream().collect(Collectors.groupingBy(FlowTemplateRole::getChooseType));
        List<FlowTemplateRole> listOrgRole = templateRoleMap.get(FlowTemplateRoleEnum.DEPARTMENT.getType());
        List<FlowTemplateRole> listRoleRole = templateRoleMap.get(FlowTemplateRoleEnum.ROLE.getType());
        List<FlowTemplateRole> listUserRole = templateRoleMap.get(FlowTemplateRoleEnum.USER.getType());
        List<FlowTemplateRole> allUserRole = templateRoleMap.get(FlowTemplateRoleEnum.ALLUSER.getType());

        //查出对应的模板
        FlowTemplate flowTemplate = flowTemplateDao.getFlowTemplateByCode(flowTemplateCode);
        if (flowTemplate == null) {
            return false;
        }
        //组织
        if (listOrgRole!=null){
            List<GeneralDto> finalOrganizations = organizations;
            listOrgRole.forEach(flowTemplateRole -> finalOrganizations.forEach(generalDto -> {
                if (flowTemplateRole.getRootId().equals(generalDto.getSid()) && flowTemplate.getState() == 1){
                    flag.set(true);
                }
            }));
        }

        //角色
        if (listRoleRole != null) {
            List<GeneralDto> finalRoles = roles;
            listRoleRole.forEach(flowTemplateRole -> finalRoles.forEach(generalDto -> {
                if (flowTemplateRole.getRootId().equals(generalDto.getSid()) && flowTemplate.getState() == 1) {
                    flag.set(true);
                }
            }));
        }


        //人员
        if (listUserRole != null) {
            listUserRole.forEach(flowTemplateRole -> {
                if (flowTemplateRole.getRootId().equals(userId) && flowTemplate.getState() == 1) {
                    flag.set(true);
                }
            });
        }

        if (allUserRole != null && allUserRole.size() >= 1) {
            flag.set(true);
        }
        return flag.get();
    }
}
