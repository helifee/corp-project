package com.jzy.hio.flow.service.impl;

import java.util.List;

import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.jzy.hio.annotation.DataSource;
import com.jzy.hio.base.entity.BaseEntity;
import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.flow.entity.FlowCopy;
import com.jzy.hio.flow.entity.dto.ApprovalDto;
import com.jzy.hio.flow.entity.param.ApprovalParam;
import com.jzy.hio.flow.mapper.FlowCopyDao;
import com.jzy.hio.flow.service.FlowCopyService;
import com.jzy.hio.flow.utils.FlowConstants;
import com.jzy.hio.flow.utils.TransitionUserNameUtils;
import com.jzy.hio.utils.Page;

@Service
public class FlowCopyServiceImpl extends BaseServiceImpl<BaseEntity> implements FlowCopyService {

	@Autowired
	private FlowCopyDao flowCopyDao;

	@Autowired
	private TransitionUserNameUtils transitionUserNameUtils;

	@Override
	public Page getFlowCopyList(ApprovalParam approvalParam) {
		approvalParam.setCreatePerson(getUserIdOA());
		Integer totalCount = flowCopyDao.getCountFlowCopyList(approvalParam);
		Page page = new Page();
		page.setPageNum(approvalParam.getPageNum());
		page.setPageCount(approvalParam.getPageCount());
		page.setTotal(totalCount);
		if (totalCount != null && totalCount.intValue() != 0) {
			page.setPageTotal(totalCount % approvalParam.getPageCount() == 0 ? totalCount / approvalParam.getPageCount()
					: totalCount / approvalParam.getPageCount() + 1);
			int pageNum = approvalParam.getPageNum().intValue() == 0 ? 1 : approvalParam.getPageNum();
			pageNum = (pageNum - 1) * approvalParam.getPageCount();
			approvalParam.setPageNum(pageNum);
			List<ApprovalDto> flowCopyList = flowCopyDao.getFlowCopyList(approvalParam);
			if (CollectionUtils.isNotEmpty(flowCopyList)) {
				
				transitionUserNameUtils.extractApprover(flowCopyList);
				flowCopyList = transitionUserNameUtils.getList(flowCopyList, getLoginUser().getTendId());
				if (approvalParam.getIsRead() == FlowConstants.FLOW_COPY_UNREAD) {
					transitionUserNameUtils.arrivalTimeCalculation(flowCopyList);
				}
			}
			page.setList(flowCopyList);
		}
		return page;
	}

	@Override
	public Integer queryMyUnreadCount(@DataSource String tendId, FlowCopy flowCopy) {

		ApprovalParam approvalParam = new ApprovalParam();
		approvalParam.setCreatePerson(flowCopy.getCopyUser());
		approvalParam.setIsRead(flowCopy.getIsRead());

		return flowCopyDao.getCountFlowCopyList(approvalParam);

	}

}
