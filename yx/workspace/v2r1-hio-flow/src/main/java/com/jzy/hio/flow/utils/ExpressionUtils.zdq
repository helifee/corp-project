package com.jzy.hio.flow.utils;

import java.util.*;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.esotericsoftware.minlog.Log;
import com.googlecode.aviator.AviatorEvaluator;
import com.googlecode.aviator.exception.ExpressionSyntaxErrorException;
import com.jzy.hio.exception.HioException;

/**
 * 表达式工具类
 *
 * @author daoqi
 *
 */
public class ExpressionUtils {

	private static Logger logger = LoggerFactory.getLogger(ExpressionUtils.class);

	/**
	 * 表达式正确性检查
	 *
	 * @param expression
	 * @return
	 * @throws
	 */
	public static boolean validate(String expression) {

		ExpressionTranslator translator = new GeneralExpressionTranslator();
		String innerExpression = translator.translate(expression);

		try {
			AviatorEvaluator.compile(innerExpression);
//			log.info("表达式校验成功：" + expression);
			return true;

		} catch(ExpressionSyntaxErrorException e) {
//			log.error("表达式校验失败：" + expression, e);
			return false;
		} catch(Exception e) {
//			log.error("表达式校验异常！", e);
			throw new HioException(e);
		}

	}

	/**
	 * 条件表达式执行
	 *
	 * @param expression
	 * @param list
	 * @return
	 * @throws
	 */
	public static boolean evaluate(String expression, List<Map<String,Object>> list) {
        boolean success = true;
        boolean flag = false;
		if (StringUtils.isNotBlank(expression) && list != null) {
            ExpressionTranslator translator = new GeneralExpressionTranslator();
			try {
				for (Map<String, Object> env:list) {
					String innerExpression = translator.translate(expression, env);
					String[] split = expression.split("and|or");
					for (int i = 0; i <split.length ; i++) {
						flag=false;
						String expressionString = split[i].substring(expression.indexOf("[") + 1, expression.indexOf("]"));
						Iterator<Map.Entry<String, Object>> iterator = env.entrySet().iterator();
						while (iterator.hasNext()) {
							Map.Entry<String, Object> next = iterator.next();
							String key = next.getKey();
							if (key.equals(expressionString)){
								flag = true;
								break;
							}
						}
					}
					if (flag){
						success = (boolean) AviatorEvaluator.execute(innerExpression, env, true);
						translator.clearTempKeys(env);
						if (success){
							return true;
						}
					}else {
						success= false;
					}
				}
//				log.info("表达式执行：innerExpression=" + innerExpression + ", env=" + env);
			} catch (Exception e) {
//				log.error("表达式执行错误：innerExpression=" + innerExpression + "env=" + env + e.getMessage());
				Log.error(e.getMessage());
				success = false;
			}
		}
		return success;
	}
	

	public static void main(String[] args) {
		String expression = "([code_001] like '\"100\"')";
		Map<String, Object> env = new HashMap<String, Object>();
		env.put("code_001", "1000	");
//		env.put("operatorName", "123");
//		env.put("sid", "100205");
//		env.put("name", "zhangdaoqiang");
//		env.put("wdg_466377","1");
		List<Map<String,Object>> list=new ArrayList<>();
		list.add(env);

		boolean success = ExpressionUtils.evaluate(expression, list);
//		boolean success = ExpressionUtils.evaluate(expression, env);
		System.out.println(success);
	}

}
