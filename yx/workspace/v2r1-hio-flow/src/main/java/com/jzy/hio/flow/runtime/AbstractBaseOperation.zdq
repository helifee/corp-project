package com.jzy.hio.flow.runtime;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.jzy.hio.ApiFeignResponse;
import com.jzy.hio.base.Base;
import com.jzy.hio.base.BaseConstants;
import com.jzy.hio.base.RedisKeyConstant;
import com.jzy.hio.exception.HioException;
import com.jzy.hio.flow.entity.FlowChangeApprover;
import com.jzy.hio.flow.entity.FlowCopy;
import com.jzy.hio.flow.entity.FlowCustomForm;
import com.jzy.hio.flow.entity.FlowCustomFormInstance;
import com.jzy.hio.flow.entity.FlowInstance;
import com.jzy.hio.flow.entity.FlowInstanceAc;
import com.jzy.hio.flow.entity.FlowInstanceApprovalRecord;
import com.jzy.hio.flow.entity.FlowTemplate;
import com.jzy.hio.flow.entity.FlowTemplateApprover;
import com.jzy.hio.flow.entity.FlowVariables;
import com.jzy.hio.flow.entity.dto.FlowInstanceInfo;
import com.jzy.hio.flow.entity.dto.FlowMessage;
import com.jzy.hio.flow.entity.dto.FormItem;
import com.jzy.hio.flow.entity.dto.InstanceDetailsDto;
import com.jzy.hio.flow.entity.enums.FlowApprovalTypeEnum;
import com.jzy.hio.flow.entity.enums.FlowApproverEnum;
import com.jzy.hio.flow.entity.enums.FlowCopyType;
import com.jzy.hio.flow.entity.enums.FlowNodeType;
import com.jzy.hio.flow.entity.enums.FlowStartMode;
import com.jzy.hio.flow.entity.enums.FlowStateEnum;
import com.jzy.hio.flow.entity.enums.InstanceAcSource;
import com.jzy.hio.flow.entity.enums.InstanceApproverState;
import com.jzy.hio.flow.entity.enums.InstanceNodeState;
import com.jzy.hio.flow.entity.param.AddLabelParam;
import com.jzy.hio.flow.entity.param.CopyParam;
import com.jzy.hio.flow.entity.param.FlowApprovalParam;
import com.jzy.hio.flow.entity.param.FlowRejectParam;
import com.jzy.hio.flow.entity.param.FlowSubmitParam;
import com.jzy.hio.flow.entity.param.InstanceDetailsParam;
import com.jzy.hio.flow.entity.param.UpdateApproverParam;
import com.jzy.hio.flow.mapper.FlowCopyDao;
import com.jzy.hio.flow.mapper.FlowFollowInstanceDao;
import com.jzy.hio.flow.mapper.FlowInstanceAcDao;
import com.jzy.hio.flow.mapper.FlowTemplateDao;
import com.jzy.hio.flow.service.FlowCustomFormInstanceService;
import com.jzy.hio.flow.service.FlowCustomFormService;
import com.jzy.hio.flow.service.impl.FlowInstanceServiceImpl;
import com.jzy.hio.flow.utils.FlowConstants;
import com.jzy.hio.flow.utils.RealValue;
import com.jzy.hio.platform.dto.tenantcompanyinfo.TenantCompanyInfoDto;
import com.jzy.hio.platform.message.param.IMToUserParam;
import com.jzy.hio.platform.message.param.ImNoticeMsgSendParam;
import com.jzy.hio.platform.message.param.ImNoticeMsgsParam;
import com.jzy.hio.platform.message.param.MessageEnum;
import com.jzy.hio.platform.message.param.MsgTypeEnum;
import com.jzy.hio.platform.message.param.SendMsgTypeEnum;
import com.jzy.hio.redis.JedisUtil;
import com.jzy.hio.sys.organization.dto.FlowPositionDto;
import com.jzy.hio.sys.organization.dto.FlowUserDto;
import com.jzy.hio.sys.user.dto.IMUserDetailInfoDto;
import com.jzy.hio.sys.user.dto.UserDto;
import com.jzy.hio.sys.user.param.UserStatusParam;
import com.jzy.hio.utils.JacksonUtils;
import com.jzy.hio.utils.LoginUser;

/**
 * 流程运行时操作基类
 *
 * 线程池 TODO
 *
 * @author daoqi
 *
 */
public abstract class AbstractBaseOperation implements Operation {

	protected static final String DELIMITER = ",";

	private static final String LABEL_OR_FREE = "label_or_free";

	protected static final String SUCCESS = "SUCCESS";

	protected Logger logger = LoggerFactory.getLogger(AbstractBaseOperation.class);

	protected OperateType type;

	protected FlowInstanceServiceImpl service;

	protected FlowVariables flowVariables = new FlowVariables();

	public AbstractBaseOperation() {
		super();
	}

	public AbstractBaseOperation(OperateType type) {
		super();
		this.type = type;
	}

	@Override
	public String action(FlowSubmitParam flowSubmitParam) {

		// 1、生成内部流程变量结构：
		generateFlowVarialbes(flowSubmitParam);

		return null;
	}

	@Override
	public InstanceDetailsDto detailOperation(InstanceDetailsParam instanceDetailsParam) {

		return null;
	}

	@Override
	public String copyOperation(CopyParam copyParam) {

		return null;
	}

	@Override
	public String passAction(FlowApprovalParam flowApprovalParam) {

		return null;
	}

	@Override
	public String rejectAction(FlowRejectParam flowRejectParam) {

		return null;
	}

	@Override
	public String addLabelAction(AddLabelParam AddLabelParam) {

		return null;
	}

	@Override
	public String skipOperation(String instanceId) {

		return null;
	}

	@Override
	public String withDrawOperation(String instanceId) {

		return null;
	}

	@Override
	public String replaceApproverOperateation(UpdateApproverParam updateApproverParam) {

		return null;
	}

	/**
	 * 通知流程运行状态
	 */
	protected void noticeInstanceStatus(int status) {
		FlowCustomFormInstanceService formInstanceService = this.getService().getFlowCustomFormInstanceService();
		String customFormId = this.getFlowVariables().getFlowCustomForm().getId();
		String businessId = this.getFlowVariables().getBusinessId();
		formInstanceService.updateFormInstanceStatus(customFormId, businessId, status);
	}

	/**
	 * 流程运行时数据保存
	 *
	 * @param flowVariables
	 * @return
	 */
	protected int save(FlowVariables flowVariables) {

		return 0;
	}

	protected void generateFlowVarialbes(FlowSubmitParam flowSubmitParam) {

		FlowTemplateDao templateDao = this.getService().getFlowTemplateDao();
		FlowTemplate template = null;
		FlowInstance flowInstance = null;
		// 加载模板信息
		if (this.getFlowVariables().isBusinessDataExist()) {
			String instanceId = flowSubmitParam.getInstanceId();
			flowInstance = this.getService().getFlowInstanceDao().selectByPrimaryKey(instanceId);
			flowVariables.setBusinessId(flowInstance.getBusinessId());
			flowVariables.setInstanceId(instanceId);

			if (flowVariables.getTemplate() == null) {
				template = templateDao.getTemplatebyInstanceId(instanceId);
				flowVariables.setTemplate(template);
			}

		} else {
			String templateId = flowSubmitParam.getTemplateId();
			if (StringUtils.isNotBlank(templateId)) {
				if (flowVariables.getTemplate() == null) {
					template = templateDao.selectByPrimaryKey(templateId);
					flowVariables.setTemplate(template);
				}
			}
		}

		// 加载表单定义信息 TODO 合并数据库操作
		String customFormId = flowSubmitParam.getCustomFormId();
		if (StringUtils.isBlank(customFormId)) {
			FlowInstance instance = this.getFlowVariables().getInstance();
			customFormId = instance.getCustomFormId();
		}
		if (StringUtils.isNotBlank(customFormId)) {
			FlowCustomFormService flowCustomFormService = this.getService().getFlowCustomFormService();
			FlowCustomForm flowCustomForm = flowCustomFormService.getObjectById(customFormId);
			flowVariables.setFlowCustomForm(flowCustomForm);
		}

		flowVariables.setBusinessData(flowSubmitParam.getBusinessData());

		if (flowVariables.getCurrentUser() == null) {

			flowVariables.setCurrentUser(getService().getLoginUser());
		}

		flowVariables.setInstanceStartPerson(flowVariables.getCurrentUser().getUserId());

		logger.info("生成内部流程变量：flowVariables = " + Base.obj2json(flowVariables));
	}

	/**
	 * 筛选未发送过审批消息的人
	 *
	 * @param flowVariables
	 * @param copyUserIds
	 * @param sendOutList
	 */
	protected void setCopyAndFilterCopyPerson(FlowVariables flowVariables, List<String> copyUserIds,
			List<String> sendOutList) {

		if (CollectionUtils.isEmpty(copyUserIds)) {

			return;
		}
		logger.info("筛选 没有抄送的抄送人");
		Set<String> set = new HashSet<String>();
		if (CollectionUtils.isNotEmpty(sendOutList)) {

			set.addAll(sendOutList);
		}

		flowVariables.setMsgType(String.valueOf(MessageEnum.TOREAD.getValue()));
		this.newMessage(copyUserIds, flowVariables);

		List<FlowCopy> copyList = flowVariables.getCopyList();

		String currentUserId = flowVariables.getCurrentUser().getUserId();
		for (String userId : copyUserIds) {
			// 筛选出 没有抄送的审批人
			if (set.add(userId)) {
				FlowCopy flowCopy = new FlowCopy();
				flowCopy.setId(Base.generatePk(FlowCopy.class));
				flowCopy.setCopyUser(userId);
				flowCopy.setFlowInstanceId(flowVariables.getInstanceId());
				flowCopy.setCreateDate(new Date());
				flowCopy.setIsRead(FlowConstants.UNREAD);
				flowCopy.setSource(FlowCopyType.TEMPLATE_AC_COPY.getType());
				flowCopy.setCreatePersonId(currentUserId);
				flowCopy.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);

				copyList.add(flowCopy);
			}
		}

		flowVariables.setCopyList(copyList);
	}

	/**
	 * 封装消息
	 *
	 * @param userIds
	 * @param flowVariables
	 */
	protected void newMessage(List<String> userIds, FlowVariables flowVariables) {
		if (CollectionUtils.isNotEmpty(userIds)) {
			for (String userId : userIds) {
				newMessage(userId, flowVariables);
			}
		}
	}

	/**
	 * 封装消息体
	 *
	 * @param userId
	 * @param flowVariables
	 */
	protected void newMessage(String userId, FlowVariables flowVariables) {
		LoginUser currentUser = flowVariables.getCurrentUser();
		FlowMessage message = new FlowMessage();
		message.setToUserId(userId);
		message.setFromUserId(currentUser.getUserId());
		if (null != flowVariables.getTemplate()) {
			message.setTitile(flowVariables.getTemplate().getName());
		}

		String mobileUrl = "/mobiledist/#/m_approve/m_approve_approve?instanceId=" + flowVariables.getInstanceId()
				+ "&tendId=" + currentUser.getTendId();

		String pcUrl = "/ccdist/#/approve/detail/" + flowVariables.getInstanceId() + "?tendId="
				+ currentUser.getTendId();
		message.setPcUrl(pcUrl);
		message.setMobileUrl(mobileUrl);
		message.setInstanceId(flowVariables.getInstanceId());

		if (flowVariables.isSendType()) {
			message.setSendType(SendMsgTypeEnum.CMD.getValue());
		} else {
			message.setSendType(SendMsgTypeEnum.TEXT.getValue());
		}

		message.setInstanceId(flowVariables.getInstanceId());
		message.setTendId(currentUser.getTendId());
		message.setMsgType(flowVariables.getMsgType());
		message.setFlowStartTime(flowVariables.getStartDate());
		message.setFlowStarter(flowVariables.getInstanceStartPersonName());
		message.setFlowStarterDept(flowVariables.getInstanceStartPersonDept());
		String tenantId = JedisUtil.fetchIndexMobile(RedisKeyConstant.tenantToInfo, currentUser.getTendId());
		String tenantJson = JedisUtil.fetchRow("tenant_company_info", tenantId);
		TenantCompanyInfoDto tenantCompanyInfoDto = Base.json2obj(tenantJson, TenantCompanyInfoDto.class);
		message.setTendName(tenantCompanyInfoDto.getName());
		flowVariables.getMessages().add(message);
	}

	/**
	 * 发送消息
	 *
	 * @param messages
	 */
	protected void sendMessages(List<FlowMessage> messages) {

		if (CollectionUtils.isEmpty(messages)) {
			return;
		}

		logger.info("------发送消息业务处理开始-----------");

		UserStatusParam userStatusParam = new UserStatusParam();
		String tendId = messages.get(0).getTendId();
		List<String> userIdList = messages.stream().map(FlowMessage::getToUserId).collect(Collectors.toList());

		userStatusParam.setUserIds(userIdList);
		userStatusParam.setTendId(tendId);

		Map<String, FlowUserDto> idsTransitionName = this.getService().getTransitionUserNameUtils()
				.idsTransitionName(userIdList, tendId);

		List<ImNoticeMsgsParam> noticeMsgList = new ArrayList<>();
		for (FlowMessage message : messages) {
			ArrayList<IMToUserParam> arrayList = new ArrayList<>();

			IMToUserParam imToUserParam = new IMToUserParam();
			ImNoticeMsgsParam imNoticeMsg = new ImNoticeMsgsParam();

			FlowUserDto flowUserDto = idsTransitionName.get(message.getToUserId());
			boolean isExternal = false;
			if (flowUserDto != null) {
				Integer userType = flowUserDto.getUserType();
				if (userType != null && userType == BaseConstants.MYSQL_USER_TYPE_COMMON
						&& flowUserDto.getDelflag() == 0
						&& flowUserDto.getWorkStatus().equals(BaseConstants.UserWorkStatus.JOB.getWorkStatus())) {
					imToUserParam.setToUserId(flowUserDto.getImUserId());
				} else if (userType != null && userType == BaseConstants.MYSQL_USER_TYPE_EXTERNAL
						&& flowUserDto.getDelflag() == 0) {
					imToUserParam.setToUserId(flowUserDto.getImUserId());
					isExternal = true;
				} else {
					continue;
				}
			} else {
				imToUserParam.setToUserId(message.getToUserId());
			}

			arrayList.add(imToUserParam);
			imNoticeMsg.setTendId(message.getTendId());
			imNoticeMsg.setTendName(message.getTendName());
			imNoticeMsg.setFromUserId(message.getFromUserId());
			imNoticeMsg.setModuleType(message.getMsgType());
			imNoticeMsg.setModuleName(MessageEnum.queryDes(message.getMsgType()));
			Map<String, Object> extMap = new HashMap<>(10);
			extMap.put("instanceId", message.getInstanceId());
			if (SendMsgTypeEnum.CMD.getValue().equals(message.getSendType())) {
				extMap.put("tendId", message.getTendId());
				extMap.put("moduleType", MessageEnum.PENDING.getValue());
				imNoticeMsg.setMsg(MessageEnum.DEL_MSG.getDes());
			} else {
				extMap.put("pcUrl", message.getPcUrl());
				extMap.put("instanceName", message.getTitile());
				extMap.put("tendId", message.getTendId());
				extMap.put("flowStarterDept", message.getFlowStarterDept());
				extMap.put("flowStartTime", message.getFlowStartTime());
				extMap.put("flowStarter", message.getFlowStarter());
				extMap.put("tendName", message.getTendName());
				extMap.put("mobileUrl", message.getMobileUrl() + "&external=" + isExternal);
				imNoticeMsg.setMsg(message.getTitile());
			}

			if (isExternal) {
				imNoticeMsg.setMsgType(MsgTypeEnum.OUT.getValue());
			} else {
				imNoticeMsg.setMsgType(MsgTypeEnum.WORK.getValue());
			}

			imNoticeMsg.setExt(extMap);
			imNoticeMsg.setSendMsgType(message.getSendType());

			imNoticeMsg.setToUsers(arrayList);
			imNoticeMsg.setOpenStatus(1);

			noticeMsgList.add(imNoticeMsg);
		}

		ImNoticeMsgSendParam imNoticeMsgSendParam = new ImNoticeMsgSendParam();
		imNoticeMsgSendParam.setMsgs(noticeMsgList);
		logger.info("---------调用消息服务发送审批消息-开始-----共发送{}", noticeMsgList.size() + " 条数据");

		ApiFeignResponse<?> sendMessage = this.getService().getMessageFeignService().sendMessage(imNoticeMsgSendParam);

		logger.info("-----调用消息服务发送审批消息-结束-----{}", sendMessage.getMessage() + "    " + sendMessage.getStatus());

	}

	/**
	 * 生成用于条件表达式判断的变量
	 *
	 * @return
	 */
	protected List<Map<String, Object>> generateEnv() {
		List<List<FormItem>> list = new ArrayList<>();
		List<Map<String, Object>> mapList = new ArrayList<>();

		List<FormItem> formItems = this.getFlowVariables().getBusinessData();

		List<FormItem> formItemsNewList = new ArrayList<>();
		List<FormItem> formItemsNew = new ArrayList<>();

		formItems.forEach(formItem -> {
			if (formItem.getValue() != null && "java.util.ArrayList".equals(formItem.getValue().getClass().getName())) {
				formItemsNewList.add(formItem);
			} else {
				formItemsNew.add(formItem);
			}
		});
		if (formItemsNewList.size() != 0) {
			for (FormItem formItem : formItemsNewList) {
				List<String> value = (List) formItem.getValue();
				for (String s : value) {
					List<FormItem> itemList = new ArrayList<>();
					FormItem formItemNew = new FormItem();
					formItemNew.setCode(formItem.getCode());
					formItemNew.setValue(s);
					formItemNew.setValueType(formItem.getValueType());
					itemList.addAll(formItemsNew);
					itemList.add(formItemNew);
					list.add(itemList);
				}
			}
		}
		Map<String, Object> env = null;
		if (CollectionUtils.isNotEmpty(list)) {
			for (List<FormItem> formItemList : list) {
				env = new HashMap<>();
				for (FormItem item : formItemList) {
					env.put(new String(item.getCode()), RealValue.getRealValue(item));
				}
				mapList.add(env);
			}
		} else {
			env = new HashMap<>();
			for (FormItem item : formItemsNew) {
				env.put(new String(item.getCode()), RealValue.getRealValue(item));
			}
			mapList.add(env);
		}
		return mapList;
	}

	///////////////////////////////////// 以下为数据库相关操作///////////////////////////////////////////

	/**
	 * 删除流程实例
	 *
	 * @param instanceId
	 * @return
	 */
	protected int deleteFlowInstance(String instanceId) {

		return this.getService().deletePseudoObjectById(instanceId);
	}

	/**
	 * 删除指定实例的抄送人
	 *
	 * @param instanceId
	 * @return
	 */
	protected int deleteCCPersonOf(String instanceId) {
		FlowCopyDao flowCopyDao = this.getService().getFlowCopyDao();
		return flowCopyDao.deleteAllByInstranceId(instanceId);
	}

	/**
	 * 删除指定流程实例的关注
	 *
	 * @param instanceId
	 * @return
	 */
	protected int deleteFollowBy(String instanceId) {
		FlowFollowInstanceDao flowFollowInstanceDao = this.getService().getFlowFollowInstanceDao();
		return flowFollowInstanceDao.deleteFollowBy(instanceId);
	}

	/**
	 * 保存业务数据
	 *
	 * @return
	 */
	protected void saveBusinessData(FlowCustomFormInstance formInstance) {
		FlowCustomFormInstanceService customFormInstanceService = this.getService().getFlowCustomFormInstanceService();
		customFormInstanceService.saveCustomForm(formInstance);
	}

	/**
	 * 删除业务数据
	 *
	 * @param businessId
	 * @return
	 */
	public int deleteBusinessData(String customFormId, String businessId) {
		FlowCustomFormInstanceService customFormInstanceService = this.getService().getFlowCustomFormInstanceService();
		return customFormInstanceService.deleteFormInstance(customFormId, businessId);
	}

	protected FlowVariables getFlowVariables(LoginUser loginUser, String instanceId, FlowInstanceInfo instanceInfo,
			boolean isQueryChangeApprover) {

		FlowTemplate flowTemplate = new FlowTemplate();
		flowTemplate.setIsRepeat(instanceInfo.getIsRepeat());
		flowTemplate.setId(instanceInfo.getTemplateId());
		flowTemplate.setName(instanceInfo.getTemplateName());
		flowVariables.setInstanceStartPerson(instanceInfo.getCreatePersonId());
		flowVariables.setInstanceId(instanceId);
		flowVariables.setTemplate(flowTemplate);
		flowVariables.setInstanceAcList(instanceInfo.getInstanceAcList());
		flowVariables.setBusinessId(instanceInfo.getBusinessId());
		flowVariables.setCurrentUser(loginUser);

		List<String> idList = new ArrayList<>(1);
		idList.add(instanceInfo.getCreatePersonId());

		logger.info("调用feign接口查询当前用户的基本信息开始 flwInstanceServiceImpl,当前用户:{}", flowVariables.getInstanceStartPerson());
		Map<String, FlowUserDto> idsTransitionName = this.getService().getTransitionUserNameUtils()
				.idsTransitionName(idList, loginUser.getTendId());
		logger.info("调用feign接口查询当前用户的基本信息结束 flwInstanceServiceImpl ,当前用户信息:{}",
				JacksonUtils.toJson(idsTransitionName.get(flowVariables.getInstanceStartPerson())));
		FlowUserDto flowUserDto = idsTransitionName.get(flowVariables.getInstanceStartPerson());

		flowVariables.setInstanceStartPersonName(flowUserDto.getUserName());

		List<FlowPositionDto> positions = flowUserDto.getPositions();
		List<String> positionNames = positions.stream().map(FlowPositionDto::getOrganizationName)
				.collect(Collectors.toList());
		if (CollectionUtils.isNotEmpty(positionNames)) {
			flowVariables.setInstanceStartPersonDept(positionNames.get(0));
		}

		flowVariables.setStartDate(instanceInfo.getStartDate());
		List<FlowInstanceAc> instanceAcList = instanceInfo.getInstanceAcList();
		List<Integer> collect = instanceAcList.stream().map(FlowInstanceAc::getSort).filter(sort -> sort != null)
				.collect(Collectors.toList());
		if (CollectionUtils.isNotEmpty(collect)) {
			if (collect.size() == 1) {
				flowVariables.setSort(collect.get(0));
			} else {

				Collections.sort(collect);
				flowVariables.setSort(collect.get(collect.size() - 1));
			}
		}

		FlowCustomForm flowCustomForm = this.getService().getFlowInstanceDao()
				.queryCustomFormIdByInstanceId(instanceId);
		flowVariables.setFlowCustomForm(flowCustomForm);

		// 模板来的需要查询是否有修改审批人记录
		String freeOrTemplate = instanceInfo.getFreeOrTemplate();
		if (FlowStartMode.TEMPLATE.getCode().equals(freeOrTemplate) && isQueryChangeApprover) {
			List<FlowChangeApprover> instanceChangeApproverList = this.getService().getFlowChangeApproverDao()
					.queryInstanceChangeApproverList(instanceInfo.getInstanceId());
			flowVariables.setChangeApproverList(instanceChangeApproverList);
		}

		return flowVariables;
	}

	/**
	 * 获取当前审批环节
	 *
	 * @param flowVariables
	 * @param instanceAcId
	 * @return
	 */
	protected FlowInstanceAc getCurrentInstanceAc(FlowVariables flowVariables, String instanceAcId) {

		List<FlowInstanceAc> instanceAcList = flowVariables.getInstanceAcList();

		FlowInstanceAc flowInstanceAc = instanceAcList.stream()
				.filter(instanceAc -> instanceAcId.equals(instanceAc.getId())).findFirst().get();
		flowVariables.setCurrentInstranceAc(flowInstanceAc);
		return flowInstanceAc;

	}

	/**
	 * 保存实例环节
	 *
	 * @param instanceNodes
	 * @return
	 */
	protected int saveInstanceNodes(List<FlowInstanceAc> instanceNodes) {
		FlowInstanceAcDao flowInstanceAcDao = this.getService().getFlowInstanceAcDao();
		return flowInstanceAcDao.insertList(instanceNodes);
	}

	/**
	 * 通知流程运行状态
	 *
	 * @param flowVariables
	 */
	protected void noticeInstanceStatus(int status, FlowVariables flowVariables) {

		String customFormId = flowVariables.getFlowCustomForm().getId();

		String businessId = flowVariables.getBusinessId();

		this.getService().getFlowCustomFormInstanceService().updateFormInstanceStatus(customFormId, businessId, status);
	}

	/**
	 * 封装下一环节的审批人,封装 要执行的环节
	 *
	 * @param flowVariables
	 * @return
	 */
	protected int setNextApprover(FlowVariables flowVariables) {
		logger.info("开始解析下一环节审批人,当前实例id:{}", flowVariables.getInstanceId());
		// 查询一共有多少环节和人
		Map<String, List<FlowTemplateApprover>> nextInstanceAcApprover = nextInstanceAc(flowVariables);
		if (nextInstanceAcApprover.size() == 0) {
			logger.info("下一环节是结束", flowVariables.getCurrentInstranceAc().getId());
			return 1;
		}

		flowVariables.setSort(flowVariables.getSort() + 1);

		Iterator<Entry<String, List<FlowTemplateApprover>>> iterator = nextInstanceAcApprover.entrySet().iterator();

		List<String> haveApprovalList = null;
		// 重复审批人跳过
		Integer isRepeat = flowVariables.getTemplate().getIsRepeat();
		if (isRepeat != null && isRepeat.intValue() != 0 && isRepeat == FlowConstants.SKIP
				&& !flowVariables.isRejectOperation()) {
			String instanceId = flowVariables.getInstanceId();
			haveApprovalList = this.getService().getFlowInstanceApprovalRecordDao().queryHaveApproval(instanceId);
		}
		while (iterator.hasNext()) {

			boolean isLABEL_OR_FREE = false;

			boolean acApprover_isNull = false;

			int approverCount = 0;
			List<String> approverIds = null;
			Entry<String, List<FlowTemplateApprover>> entry = iterator.next();
			String instanceAcId = entry.getKey();
			// 是否是加签或者自由流
			if (instanceAcId.contains(LABEL_OR_FREE)) {
				logger.debug("当前环节是加签来的,环节Id:{} ", instanceAcId);
				isLABEL_OR_FREE = true;
				instanceAcId = instanceAcId.split(LABEL_OR_FREE)[0];
				List<FlowInstanceApprovalRecord> queryApporverList = this.getService()
						.getFlowInstanceApprovalRecordDao()
						.queryApporverList(instanceAcId, flowVariables.getInstanceId());
				approverIds = queryApporverList.stream().map(FlowInstanceApprovalRecord::getApprovalUser)
						.collect(Collectors.toList());

			} else {
				logger.debug("当前环节模板来的,环节Id:{} ", instanceAcId);
				List<FlowTemplateApprover> list = entry.getValue();
				approverIds = approverAnalysis(list, flowVariables);
				approverCount = approverIds.size();
			}
			if (CollectionUtils.isEmpty(approverIds)) {
				acApprover_isNull = true;
			}

			boolean skip = isSkip(flowVariables, isRepeat, instanceAcId, acApprover_isNull);

			// 环节内重复跳过
			if (skip) {
				logger.debug("当前模板设置重复跳过 ");
				ArrayList<String> repeatApproverList = new ArrayList<>();
				filterDuplicationApprover(haveApprovalList, approverIds, repeatApproverList);

				// 生成重复审批人 通过 记录
				if (CollectionUtils.isNotEmpty(repeatApproverList) && !isLABEL_OR_FREE) {

					generateApprover(flowVariables, repeatApproverList,
							InstanceApproverState.ALREADY_APPROVAL.getState(), instanceAcId, acApprover_isNull);
					// 修改加签或自由流 审批记录为已完成
				} else if (CollectionUtils.isNotEmpty(repeatApproverList) && isLABEL_OR_FREE) {
					generateUpdateApprover(flowVariables, repeatApproverList,
							InstanceApproverState.ALREADY_APPROVAL.getState(), instanceAcId);
				}

				// 全部重复
				if (CollectionUtils.isEmpty(approverIds)) {
					logger.debug("当前环节全部是重复审批人,环节Id:{}", instanceAcId);

					// 修改当前 环节为自动跳过审批 递归下一个环节
					generateUpdateInstanceAc(flowVariables, instanceAcId, InstanceNodeState.AUTOMATIC_PASS.getState(),
							0);

					// 设置 currentInstanceAc
					getCurrentInstanceAc(flowVariables, instanceAcId);

					// 判断是否进入下一个环节
					boolean isExecute = isJudgeExecuteNextAc(flowVariables);
					while (isExecute) {
						logger.info("审批人全部重复,继续下一环节,此环节Id: {}", flowVariables.getCurrentInstranceAc().getId());

						isJudgeExecuteNextAc(flowVariables);
					}
				} else {

					logger.debug("当前环节 有重复审批人,环节Id:{}", instanceAcId);

					if (!isLABEL_OR_FREE) {
						generateApprover(flowVariables, approverIds, InstanceApproverState.NO_APPROVAL.getState(),
								instanceAcId, acApprover_isNull);
						// 如果是加签来的 修改状态即可
					} else {
						generateUpdateApprover(flowVariables, approverIds, InstanceApproverState.NO_APPROVAL.getState(),
								instanceAcId);
					}

					generateUpdateInstanceAc(flowVariables, instanceAcId, InstanceNodeState.HAVE_ARRIV.getState(),
							approverCount);

				}

				// 重复不跳过
			} else {

				logger.debug("当前实例 对应模板 审批重复不跳过,环节Id:{}", instanceAcId);

				if (!isLABEL_OR_FREE) {
					generateApprover(flowVariables, approverIds, InstanceApproverState.NO_APPROVAL.getState(),
							instanceAcId, acApprover_isNull);
					// 如果是加签来的 修改状态即可
				} else {
					generateUpdateApprover(flowVariables, approverIds, InstanceApproverState.NO_APPROVAL.getState(),
							instanceAcId);
				}

				generateUpdateInstanceAc(flowVariables, instanceAcId, InstanceNodeState.HAVE_ARRIV.getState(),
						approverCount);
			}

		}

		return 1;
	}

	/**
	 * 查询环节
	 *
	 * @param flowVariables
	 * @return <实例环节Id:未解析的环节上的审批人>
	 */
	protected Map<String, List<FlowTemplateApprover>> nextInstanceAc(FlowVariables flowVariables) {
		logger.debug("解析模板环节对应的 审批人 开始 ------- 当前实例id:{}", flowVariables.getInstanceId());
		List<FlowInstanceAc> acList = getInstanceAcListByIds(flowVariables);
		Map<String, List<FlowTemplateApprover>> acMap = new HashMap<>(8);
		for (FlowInstanceAc flowInstanceAc : acList) {
			if (flowInstanceAc.getSource() == InstanceAcSource.ADD_LABEL_SOURCE.getType()
					|| flowInstanceAc.getSource() == InstanceAcSource.FREE_SOURCE.getType()) {

				if (flowInstanceAc.getSource() == InstanceAcSource.FREE_SOURCE.getType()
						&& flowInstanceAc.getNodeType() == FlowNodeType.END.getType()) {

					flowSuccess(flowVariables, FlowStateEnum.SUCCESS.getState());
					noticeInstanceStatus(FlowStateEnum.SUCCESS.getState(), flowVariables);
				} else {
					acMap.put(flowInstanceAc.getId() + LABEL_OR_FREE, null);
				}

			} else {
				flowVariables.setCurrentInstranceAc(flowInstanceAc);
				nextAcApprover(acMap, flowVariables);
			}
		}
		return acMap;

	}

	/**
	 * 查询环节审批人
	 *
	 * @param acMap
	 * @param flowVariables
	 * @return
	 */
	protected void nextAcApprover(Map<String, List<FlowTemplateApprover>> acMap, FlowVariables flowVariables) {
		FlowInstanceAc flowInstanceAc = flowVariables.getCurrentInstranceAc();
		String templateId = flowVariables.getTemplate().getId();

		if (flowInstanceAc.getNodeType() == FlowNodeType.PROCESS.getType()) {
			logger.debug("解析模板环节对应的 审批人  ------- 当前实例id:{}", flowVariables.getInstanceId(), "  环节Id:{}",
					flowInstanceAc.getId());
			String templateNodeId = flowInstanceAc.getTemplateNodeId();
			FlowTemplateApprover templateApprover = new FlowTemplateApprover();
			templateApprover.setFlowTemplateId(templateId);
			templateApprover.setFlowAcId(templateNodeId);
			templateApprover.setDelflag(0);

			List<FlowTemplateApprover> templateApproverList = getTemplateApproverList(templateId, templateNodeId);

			acMap.put(flowInstanceAc.getId(), templateApproverList);

		} else if (flowInstanceAc.getNodeType() == FlowNodeType.JOIN.getType()) {

			Integer leftNodeCount = flowInstanceAc.getLeftNodeCount();
			leftNodeCount = leftNodeCount - FlowConstants.MINUS_THE_NUMBER_OF_UNARRIVED;
			// 聚合环节
			if (leftNodeCount == 0) {
				// 继续下一个实例环节
				flowVariables.setCurrentInstranceAc(flowInstanceAc);
				acMap.putAll(nextInstanceAc(flowVariables));
			} else {
				flowInstanceAc.setLeftNodeCount(leftNodeCount);
				flowInstanceAc.setUpdateDate(new Date());
				this.getService().getFlowInstanceAcDao().updateByPrimaryKeySelective(flowInstanceAc);
			}

		} else if (flowInstanceAc.getNodeType() == FlowNodeType.END.getType()) {

			flowSuccess(flowVariables, FlowStateEnum.SUCCESS.getState());
			if (flowVariables.isSkipOperation()) {
				noticeInstanceStatus(FlowStateEnum.SKIP.getState(), flowVariables);
			} else {
				noticeInstanceStatus(FlowStateEnum.SUCCESS.getState(), flowVariables);
			}
		}

	}

	/**
	 * 是否跳过当前审批
	 *
	 * @param flowVariables
	 * @param isRepeat
	 * @param instanceAcId
	 * @return
	 */

	protected boolean isSkip(FlowVariables flowVariables, Integer isRepeat, String instanceAcId,
			boolean acApprover_isNull) {
		FlowInstanceAc instanceAc = getCurrentInstanceAc(flowVariables, instanceAcId);
		if (flowVariables.isRejectOperation()) {
			return false;
		}
		if (acApprover_isNull) {
			return false;
		}

		Integer noSkip = instanceAc.getNoSkip();
		if (noSkip != null && noSkip == FlowConstants.FLOW_NO_SKIP) {

			return false;
		}

		if (isRepeat != null && isRepeat == FlowConstants.SKIP) {

			return true;
		}

		return false;
	}

	protected void generateUpdateApprover(FlowVariables flowVariables, List<String> approverIds, Integer state,
			String instanceAcId) {
		Date date = new Date();
		for (String approverId : approverIds) {
			FlowInstanceApprovalRecord flowInstanceApprovalRecord = new FlowInstanceApprovalRecord();
			flowInstanceApprovalRecord.setFlowInstanceAcId(instanceAcId);
			flowInstanceApprovalRecord.setFlowInstanceId(flowVariables.getInstanceId());
			flowInstanceApprovalRecord.setUpdateDate(date);
			flowInstanceApprovalRecord.setCreateDate(date);
			flowInstanceApprovalRecord.setState(state);
			flowInstanceApprovalRecord.setApprovalUser(approverId);
			flowVariables.getUpdateApproverList().add(flowInstanceApprovalRecord);
		}
		
		flowVariables.setMsgType(MessageEnum.PENDING.getValue());
		if (InstanceApproverState.ALREADY_APPROVAL.getState() != state) {

			this.newMessage(approverIds, flowVariables);
		}
	}

	protected void generateUpdateInstanceAc(FlowVariables flowVariables, String instanceAcId, int state,
			int approverCount) {
		FlowInstanceAc flowInstanceAc = new FlowInstanceAc();
		flowInstanceAc.setUpdateDate(new Date());
		flowInstanceAc.setId(instanceAcId);
		flowInstanceAc.setState(state);
		flowInstanceAc.setSort(flowVariables.getSort());
		FlowInstanceAc currentInstanceAc = getCurrentInstanceAc(flowVariables, instanceAcId);

		if (approverCount > 1 && currentInstanceAc.getType() == FlowApprovalTypeEnum.SHEN_QIAN.getType()) {
			flowInstanceAc.setType(FlowApprovalTypeEnum.HUI_QIAN.getType());
		}
		flowVariables.getUpdateInstanceAcList().add(flowInstanceAc);
	}

	/**
	 * 生成审批人记录
	 *
	 * @param repeatApproverList
	 * @param state
	 * @param instanceAcId
	 */
	protected void generateApprover(FlowVariables flowVariables, List<String> approverIds, Integer state,
			String instanceAcId, boolean instanceAcUserIsNull) {

		if (CollectionUtils.isEmpty(approverIds) && instanceAcUserIsNull) {
			approverIds.add("");
		}
		List<FlowInstanceApprovalRecord> approverList = new ArrayList<>();
		Date date = new Date();
		for (String approverId : approverIds) {
			FlowInstanceApprovalRecord approvalRecord = new FlowInstanceApprovalRecord();
			approvalRecord.setId(Base.generatePk(FlowInstanceApprovalRecord.class));
			approvalRecord.setCreateDate(date);
			approvalRecord.setUpdateDate(date);
			approvalRecord.setApprovalUser(approverId);
			approvalRecord.setFlowInstanceAcId(instanceAcId);
			approvalRecord.setFlowInstanceId(flowVariables.getInstanceId());
			approvalRecord.setState(state);
			approvalRecord.setDelflag(0);

			approverList.add(approvalRecord);
		}
		if (InstanceApproverState.NO_APPROVAL.getState() == state) {

			flowVariables.setMsgType(MessageEnum.PENDING.getValue());
			this.newMessage(approverIds, flowVariables);
		}

		flowVariables.getSaveApproverList().addAll(approverList);
	}

	/**
	 * 过滤重复审批人
	 *
	 * @param haveApprovalList
	 * @param approverIds
	 * @param repeatApproverList
	 * @return
	 */
	protected List<String> filterDuplicationApprover(List<String> haveApprovalList, List<String> approverIds,
			ArrayList<String> repeatApproverList) {

		HashSet<String> hashSet = new HashSet<String>();

		if (CollectionUtils.isEmpty(haveApprovalList)) {
			return approverIds;
		}

		hashSet.addAll(haveApprovalList);

		for (Iterator<String> iterator = approverIds.iterator(); iterator.hasNext();) {
			String approverId = (String) iterator.next();
			boolean result = hashSet.add(approverId);
			if (!result) {
				repeatApproverList.add(approverId);
				iterator.remove();
			}
		}
		return approverIds;
	}

	/**
	 * 解析模板审批人
	 *
	 * @param approverList
	 * @param flowVariables
	 * @return
	 */
	protected List<String> approverAnalysis(List<FlowTemplateApprover> approverList, FlowVariables flowVariables) {
		logger.info("开始解析模板审批人 ");
		List<String> userIds = new ArrayList<>();
		Set<String> oldApprover = new HashSet<>();
		Set<String> newApprover = new HashSet<>();

		LoginUser currentUser = flowVariables.getCurrentUser();
		for (FlowTemplateApprover flowTemplateApprover : approverList) {

			if (flowTemplateApprover.getApprovalType() == FlowApproverEnum.USER.getType()) {
				userIds.add(flowTemplateApprover.getApproverId());

			} else if (flowTemplateApprover.getApprovalType() == FlowApproverEnum.SUPERIORS.getType()) {
				// 调用feign接口查询上级Id
				logger.info(" 开始调用feign接口查询上级Id");
				ApiFeignResponse<IMUserDetailInfoDto> orgLeaderUserInfo = this.getService().getSysFeignService()
						.getOrgLeaderUserInfo(currentUser.getTendId(), flowVariables.getInstanceStartPerson());
				if (orgLeaderUserInfo.getStatus() == 200) {
					IMUserDetailInfoDto iMUserDetailInfoDto = orgLeaderUserInfo.getResult();
					if (iMUserDetailInfoDto != null) {
						userIds.add(iMUserDetailInfoDto.getId());
					}
				} else {
					logger.error("  调用feign接口查询上级Id 失败");
					throw new HioException(FlowConstants.FLOW_INVOKING_SERVICE_FAILURE_BY_SYS.getMessage(),
							FlowConstants.FLOW_INVOKING_SERVICE_FAILURE_BY_SYS.getStatus());
				}

			} else if (flowTemplateApprover.getApprovalType() == FlowApproverEnum.DEPT_ROLE.getType()) {
				// 调用feign接口查询 角色 + 部门 所有人交集
				logger.info(" 开始调用feign接口查询 角色 + 部门 所有人交集");
				String[] typeIds = flowTemplateApprover.getApproverId().split(DELIMITER);
				HashMap<String, Object> hashMap = new HashMap<>(2);
				hashMap.put("organizationId", typeIds[1]);
				hashMap.put("roleId", typeIds[0]);
				hashMap.put("tendId", flowVariables.getCurrentUser().getTendId());
				ApiFeignResponse<List<UserDto>> userList = this.getService().getSysFeignService()
						.getUserListByOrgAndRoleId(hashMap);
				if (userList.getStatus() == 200) {
					List<UserDto> resultList = userList.getResult();
					if (CollectionUtils.isNotEmpty(resultList)) {
						for (UserDto userDto : resultList) {
							userIds.add(userDto.getId());
						}
					}
				} else {
					logger.error("当前用户Id:{}" + flowVariables.getCurrentUser().getUserId(),
							"  调用feign接口查询 角色 + 部门 所有人并集 失败 ");
					throw new HioException(FlowConstants.FLOW_INVOKING_SERVICE_FAILURE_BY_SYS.getMessage(),
							FlowConstants.FLOW_INVOKING_SERVICE_FAILURE_BY_SYS.getStatus());
				}

			} else if (flowTemplateApprover.getApprovalType() == FlowApproverEnum.INITIATOR.getType()) {
				logger.info("当前审批人是发起人   ");

				userIds.add(flowVariables.getInstanceStartPerson());

			} else if (flowTemplateApprover.getApprovalType() == FlowApproverEnum.CURRENT_DEPT_ROLE.getType()) {
				// 调用feign接口查询 当前用户的部门+角色所有人
				logger.info("当前用户Id:{}" + flowVariables.getCurrentUser(), " 开始调用 feign接口查询 当前用户的部门+角色所有人");
				HashMap<String, Object> hashMap = new HashMap<>(3);
				hashMap.put("userId", flowVariables.getInstanceStartPerson());
				hashMap.put("roleId", flowTemplateApprover.getApproverId());
				hashMap.put("tendId", flowVariables.getCurrentUser().getTendId());
				ApiFeignResponse<List<UserDto>> userList = this.getService().getSysFeignService()
						.getUserListByOrgAndRoleId(hashMap);

				if (userList.getStatus() == 200) {
					List<UserDto> resultList = userList.getResult();
					if (CollectionUtils.isNotEmpty(resultList)) {
						for (UserDto userDto : resultList) {
							userIds.add(userDto.getId());
						}
					}
				} else {
					logger.error("当前用户Id:{}", flowVariables.getCurrentUser().getUserId(),
							" 调用 feign接口查询 当前用户的部门+角色所有人 失败 ");
					throw new HioException(FlowConstants.FLOW_INVOKING_SERVICE_FAILURE_BY_SYS.getMessage(),
							FlowConstants.FLOW_INVOKING_SERVICE_FAILURE_BY_SYS.getStatus());

				}
			}

			// 是否修改了模板的审批人
			if (CollectionUtils.isNotEmpty(flowVariables.getChangeApproverList())) {

				List<FlowChangeApprover> collect = flowVariables
						.getChangeApproverList().stream().filter(templateAcApprover -> templateAcApprover
								.getTemplateAcId().equals(flowTemplateApprover.getFlowAcId()))
						.collect(Collectors.toList());
				if (CollectionUtils.isNotEmpty(collect)) {
					List<String> oldUserIds = collect.stream().map(FlowChangeApprover::getOldApprover)
							.collect(Collectors.toList());
					oldApprover.addAll(oldUserIds);
					List<String> newUserIds = collect.stream().map(FlowChangeApprover::getNewApprover)
							.collect(Collectors.toList());
					newApprover.addAll(newUserIds);

				}

			}

		}
		userIds.removeAll(oldApprover);
		userIds.addAll(newApprover);
		return userIds;
	}

	/**
	 * 获取下一审批环节 列表
	 *
	 * @param flowVariables
	 * @return
	 */
	protected List<FlowInstanceAc> getInstanceAcListByIds(FlowVariables flowVariables) {
		List<FlowInstanceAc> list = new ArrayList<>();
		String[] nodeIds = flowVariables.getCurrentInstranceAc().getNextNodeIds().split(DELIMITER);
		List<FlowInstanceAc> instanceAcList = flowVariables.getInstanceAcList();
		for (String nodeId : nodeIds) {
			for (FlowInstanceAc flowInstanceAc : instanceAcList) {
				if (flowInstanceAc.getId().equals(nodeId)) {
					list.add(flowInstanceAc);
				}
			}
		}
		return list;
	}

	/**
	 * 判断是否执行下个环节
	 *
	 * @param flowVariables
	 * @return
	 */
	protected boolean isJudgeExecuteNextAc(FlowVariables flowVariables) {
		FlowInstanceAc currentInstranceAc = flowVariables.getCurrentInstranceAc();
		String nextNodeIds = currentInstranceAc.getNextNodeIds();

		if (StringUtils.isBlank(nextNodeIds)) {
			logger.error("当前环节的Id:{}", currentInstranceAc.getId() + "nextIds 是空的，请核查流程整体环节");
			throw new HioException(FlowConstants.FLOW_AC_CALCULATE_ERROR.getMessage(),
					FlowConstants.FLOW_AC_CALCULATE_ERROR.getStatus());
		}

		if (nextNodeIds.split(DELIMITER).length == 1) {
			FlowInstanceAc nextInstanceAc = getCurrentInstanceAc(flowVariables, nextNodeIds);

			Integer leftNodeCount = nextInstanceAc.getLeftNodeCount();
			leftNodeCount = leftNodeCount - FlowConstants.MINUS_THE_NUMBER_OF_UNARRIVED;

			// 下一环节是审批环节或聚合环节（且所有前面的分支都走完了）
			if (leftNodeCount == 0) {
				if (nextInstanceAc.getNodeType() == FlowNodeType.JOIN.getType()) {
					// 继续下一个实例环节
					flowVariables.setCurrentInstranceAc(nextInstanceAc);
				} else {
					flowVariables.setCurrentInstranceAc(currentInstranceAc);
				}
				setNextApprover(flowVariables);
			} else {
				nextInstanceAc.setLeftNodeCount(leftNodeCount);
				this.getService().getFlowInstanceAcDao().updateByPrimaryKeySelective(nextInstanceAc);
			}

			return false;
		} else {
			// 继续下一个实例环节
			setNextApprover(flowVariables);
			return true;
		}
	}

	/**
	 * 流程完成
	 *
	 * @param flowVariables
	 * @param state
	 */
	protected void flowSuccess(FlowVariables flowVariables, int state) {
		logger.debug("流程结束 操作 修改 流程状态 当前实例id:{}", flowVariables.getInstanceId());
		List<String> copyUserIds = new ArrayList<>();
		Date date = new Date();
		FlowInstance instance = new FlowInstance();
		instance.setId(flowVariables.getInstanceId());
		instance.setUpdateDate(date);
		instance.setState(flowVariables.isSkipOperation() == false ? FlowStateEnum.SUCCESS.getState()
				: FlowStateEnum.SKIP.getState());
		this.getService().getFlowInstanceDao().updateByPrimaryKeySelective(instance);

		if (FlowStateEnum.RUN.getState() == state) {
			List<String> queryFlowFormCopy = queryFlowFormCopy(flowVariables);
			if(CollectionUtils.isNotEmpty(queryFlowFormCopy)) {
				copyUserIds.addAll(queryFlowFormCopy);
			}
		}

		copyUserIds.add(flowVariables.getInstanceStartPerson());
		flowVariables.setMsgType(MessageEnum.TOREAD.getValue());

		// 流程结束发送抄送
		List<FlowInstanceAc> instanceAcList = flowVariables.getInstanceAcList();
		if (CollectionUtils.isNotEmpty(instanceAcList)) {
			for (FlowInstanceAc ac : instanceAcList) {
				if (FlowNodeType.END.getType() == ac.getNodeType()) {
					List<String> queryCopyUserIds = this.getService().getFlowTemplateAcCopyDao()
							.queryCopyUserIds(ac.getTemplateNodeId());
					copyUserIds.addAll(queryCopyUserIds);
					break;
				}
			}
		}

		setCopyAndFilterCopyPerson(flowVariables, copyUserIds, null);

	}

	/**
	 * 流程抄送处理
	 *
	 * @param flowVariables
	 * @return
	 */
	protected List<String> queryFlowFormCopy(FlowVariables flowVariables) {
		FlowCopy flowCopy = new FlowCopy();
		flowCopy.setFlowInstanceId(flowVariables.getInstanceId());
		flowCopy.setSource(FlowCopyType.FORM_COPY.getType());
		List<FlowCopy> copyUserList = this.getService().getFlowCopyDao().select(flowCopy);
		List<String> formUserIds = null;
		if (CollectionUtils.isNotEmpty(copyUserList)) {

			formUserIds = copyUserList.stream().map(FlowCopy::getCopyUser).collect(Collectors.toList());
			return formUserIds;
		}
		return formUserIds;
	}

	/**
	 * 执行流程审批结果信息
	 *
	 * @param flowVariables
	 */
	protected void insertApprovalInfo(FlowVariables flowVariables) {

		logger.info("已完成当前环节 === 开始发送 当前环节完成的抄送消息,和下一审批人 审批的消息");
		// 保存审批人
		if (CollectionUtils.isNotEmpty(flowVariables.getSaveApproverList())) {

			this.getService().getFlowInstanceApprovalRecordDao().insertList(flowVariables.getSaveApproverList());
		}
		// 保存环节抄送
		if (CollectionUtils.isNotEmpty(flowVariables.getCopyList())) {

			this.getService().getFlowCopyDao().insertList(flowVariables.getCopyList());
		}

		// 修改环节状态
		if (CollectionUtils.isNotEmpty(flowVariables.getUpdateInstanceAcList())) {

			this.getService().getFlowInstanceAcDao()
					.updateBatchInstanceAcState(flowVariables.getUpdateInstanceAcList());
		}

		// 修改加签的审批人状态
		if (CollectionUtils.isNotEmpty(flowVariables.getUpdateApproverList())) {

			this.getService().getFlowInstanceApprovalRecordDao()
					.updateApproverState(flowVariables.getUpdateApproverList());
		}

		if (CollectionUtils.isNotEmpty(flowVariables.getMessages())) {
			List<FlowMessage> messagesList = flowVariables.getMessages();
			this.sendMessages(messagesList);
		}
	}

	/**
	 * 插入实例环节审批人
	 *
	 * @param ids
	 * @param flowInstanceAc
	 * @param createUser
	 * @param isTrue
	 */
	protected void insertInstanceAcApprover(List<String> ids, FlowInstanceAc flowInstanceAc, String createUser,
			boolean isTrue) {
		List<FlowInstanceApprovalRecord> list = new ArrayList<>();
		for (String approver : ids) {
			FlowInstanceApprovalRecord flowInstanceApprovalRecord = new FlowInstanceApprovalRecord();
			flowInstanceApprovalRecord.setApprovalUser(approver);
			flowInstanceApprovalRecord.setId(Base.generatePk(FlowInstanceApprovalRecord.class));
			flowInstanceApprovalRecord.setCreateDate(new Date());
			flowInstanceApprovalRecord.setCreatePersonId(createUser);
			flowInstanceApprovalRecord.setFlowInstanceAcId(flowInstanceAc.getId());
			flowInstanceApprovalRecord.setFlowInstanceId(flowInstanceAc.getFlowIntanceId());
			flowInstanceApprovalRecord.setDelflag(0);
			flowInstanceApprovalRecord.setState(isTrue == true ? InstanceApproverState.NO_APPROVAL.getState()
					: InstanceApproverState.WAIT_APPROVAL.getState());
			list.add(flowInstanceApprovalRecord);
		}
		this.getService().getFlowInstanceApprovalRecordDao().insertList(list);
	}

	public void getTengId(LoginUser loginUser) {
		HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes())
				.getRequest();
		String headerId = request.getHeader(BaseConstants.HTTP_PARAM_TENDID);
		if (StringUtils.isNotBlank(headerId)) {
			loginUser.setTendId(headerId);
		}
	}

	protected List<FlowTemplateApprover> getTemplateApproverList(String templateId, String templateNodeId) {
		if (CollectionUtils.isEmpty(flowVariables.getTemplateApproverList())) {
			FlowTemplateApprover templateApprover = new FlowTemplateApprover();
			templateApprover.setFlowTemplateId(templateId);
			templateApprover.setDelflag(0);
			List<FlowTemplateApprover> approverList = this.getService().getFlowTemplateApproverDao()
					.select(templateApprover);
			flowVariables.getTemplateApproverList().addAll(approverList);
		}

		List<FlowTemplateApprover> list = new ArrayList<>();
		for (FlowTemplateApprover flowTemplateApprover : flowVariables.getTemplateApproverList()) {
			if (flowTemplateApprover.getFlowAcId().equals(templateNodeId)) {
				list.add(flowTemplateApprover);
			}
		}
		return list;
		/*
		 * return flowVariables.getTemplateApproverList().stream() .filter(approver ->
		 * approver.getFlowAcId().equals(templateNodeId)).collect(Collectors.toList());
		 */
	}

	public FlowInstanceServiceImpl getService() {
		return service;
	}

	public void setService(FlowInstanceServiceImpl service) {
		this.service = service;
	}

	@Override
	public FlowVariables getFlowVariables() {
		return flowVariables;
	}

	public void setFlowVariables(FlowVariables flowVariables) {
		this.flowVariables = flowVariables;
	}

}
