package com.jzy.hio.flow.entity;

import java.util.List;

import javax.persistence.Column;
import javax.persistence.Table;
import javax.persistence.Transient;

/**
 * 流程实例环节
 */
@Table(name = "flow_instance_ac")
public class FlowInstanceAc  extends FlowBaseEntity{

    /**
     *流程实例Id
     */
    @Column(name = "flow_instance_id")
    private String flowIntanceId;
    
    /**
     * 加签名称 或者 模板 名称
     */
    @Column(name = "name")
    private String name;

    /**
     *状态（0未通过当前环节，1已通过当前环节,，2驳回）
     */
    @Column(name = "state")
    private Integer state;

    /**
     *审批类型（审批、会签）
     */
    @Column(name = "type")
    private Integer type;

    /**
     *环节排序号
     */
    @Column(name = "sort")
    private Integer sort;
    /**
     *节点类型
     */
    @Column(name = "node_type")
    private Integer nodeType;
    
    /**
     *0模板、1加签、2驳回 
     */
    @Column(name = "source")
    private Integer source;
    
    /**
     *模板环节ID
     */
    @Column(name = "template_node_id")
    private String templateNodeId;
    /**
     *前置环节IDs
     */
    @Column(name = "pre_node_ids")
    private String preNodeIds;
    
    /**
     * 驳回来的重复审批人 不跳过 = 1 不跳过
     */
    @Column(name = "noSkip")
    private Integer noSkip;
    
    
    @Transient
    private List<String> preNodeIdList;
    
    /**
     *后置环节IDs
     */
    @Column(name = "next_node_ids")
    private String nextNodeIds;
    
    @Transient
    private List<String> nextNodeIdList;
    

	/**
     *剩余未到达数据
     */
    @Column(name = "left_node_count")
    private Integer leftNodeCount;
    
    /**
     * 节点在流程图中的深度
     */
    @Transient
    private int level;
    
    public Integer getNoSkip() {
		return noSkip;
	}

	public void setNoSkip(Integer noSkip) {
		this.noSkip = noSkip;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public Integer getNodeType() {
		return nodeType;
	}

	public void setNodeType(Integer nodeType) {
		this.nodeType = nodeType;
	}

	public Integer getSource() {
		return source;
	}

	public void setSource(Integer source) {
		this.source = source;
	}

	public String getTemplateNodeId() {
		return templateNodeId;
	}

	public void setTemplateNodeId(String templateNodeId) {
		this.templateNodeId = templateNodeId;
	}

	public String getPreNodeIds() {
		return preNodeIds;
	}

	public void setPreNodeIds(String preNodeIds) {
		this.preNodeIds = preNodeIds;
	}

	public String getNextNodeIds() {
		return nextNodeIds;
	}

	public void setNextNodeIds(String nextNodeIds) {
		this.nextNodeIds = nextNodeIds;
	}

	public Integer getLeftNodeCount() {
		return leftNodeCount;
	}

	public void setLeftNodeCount(Integer leftNodeCount) {
		this.leftNodeCount = leftNodeCount;
	}

	public String getFlowIntanceId() {
        return flowIntanceId;
    }

    public void setFlowIntanceId(String flowIntanceId) {
        this.flowIntanceId = flowIntanceId == null ? null : flowIntanceId.trim();
    }

    public Integer getState() {
        return state;
    }

    public void setState(Integer state) {
        this.state = state;
    }

    public Integer getType() {
        return type;
    }

    public void setType(Integer type) {
        this.type = type;
    }

    public Integer getSort() {
        return sort;
    }

    public void setSort(Integer sort) {
        this.sort = sort;
    }

	public List<String> getPreNodeIdList() {
		return preNodeIdList;
	}

	public void setPreNodeIdList(List<String> preNodeIdList) {
		this.preNodeIdList = preNodeIdList;
	}

	public List<String> getNextNodeIdList() {
		return nextNodeIdList;
	}

	public void setNextNodeIdList(List<String> nextNodeIdList) {
		this.nextNodeIdList = nextNodeIdList;
	}

	@Override
	public String toString() {
		return "FlowInstanceAc [id=" + super.getId() + ", preNodeIds=" + preNodeIds + ", nextNodeIds=" + nextNodeIds + ", leftNodeCount="
				+ leftNodeCount + "]";
	}

	public int getLevel() {
		return level;
	}

	public void setLevel(int level) {
		if(level > this.level) {
			this.level = level;
		}
	}
}