package com.jzy.hio.flow.controller;

import com.jzy.hio.base.BaseConstants;
import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.exception.HioException;
import com.jzy.hio.exception.HioMybatisDeleteException;
import com.jzy.hio.exception.HioMybatisGetException;
import com.jzy.hio.flow.entity.FlowCategory;
import com.jzy.hio.flow.entity.FlowTemplate;
import com.jzy.hio.flow.entity.dto.FlowCategoryDto;
import com.jzy.hio.flow.entity.param.FlowCategoryParam;
import com.jzy.hio.flow.service.FlowCategoryService;
import com.jzy.hio.utils.LoginUser;

import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Date;
import java.util.List;
import java.util.Map;

/**
 * 流程分类
 */
@RestController
@RequestMapping("/category")
public class FlowCategoryController extends BaseController {

	@Autowired
	private FlowCategoryService flowCategoryService;

	/**
	 * 新建表单分类
	 *
	 * @param flowCategoryParam
	 * @return
	 */
	@RequestMapping("/saveFlowCategory")
	public Object saveFlowCategory(@RequestBody FlowCategoryParam flowCategoryParam) {
		LoginUser loginUser = getLoginUser();
		if ("".equals(flowCategoryParam.getSid()) || null == flowCategoryParam.getSid()) {
			FlowCategory flowCategory = new FlowCategory();
			BeanUtils.copyProperties(flowCategoryParam, flowCategory);
			flowCategory.setId(generatePk());
			flowCategory.setCreateDate(new Date());
			flowCategory.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
			int count = flowCategoryService.getCategoryName(flowCategory);
			if (count > 0) {
				throw new HioException("分类名称重复！");
			}
			List<FlowCategory> flowCategories = flowCategoryService.queryList();
			if (CollectionUtils.isNotEmpty(flowCategories)) {
				flowCategory.setSort(flowCategories.get(0).getSort() + 1);
			} else {
				flowCategory.setSort(1.0);
			}
			flowCategory.setCreatePersonId(loginUser.getUserId());
			return flowCategoryService.save(flowCategory);
		} else {
			FlowCategory flowCategory = new FlowCategory();
			BeanUtils.copyProperties(flowCategoryParam, flowCategory);
			flowCategory.setId(flowCategoryParam.getSid());
			flowCategory.setCreatePersonId(loginUser.getUserId());
			int count = flowCategoryService.getCategoryName(flowCategory);
			if (count > 0) {
				throw new HioException("分类名称重复！");
			}
			return flowCategoryService.update(flowCategory);
		}
	}

	/**
	 * 查所有的表单分类
	 *
	 * @return
	 * @throws HioException
	 */
	@RequestMapping("/queryListFlowCategory")
	public List<FlowCategory> queryList() throws HioException {
		return flowCategoryService.queryList();
	}

	/**
	 * 查表单分类+子节点
	 * 
	 * @return
	 */
	@RequestMapping("/getFlowCategoryChildList")
	public Object getFlowCategoryandChild() {
		List<FlowCategoryDto> flowCategoryandChild = flowCategoryService.getFlowCategoryandChild();
		return flowCategoryandChild;
	}

	/**
	 * 移动端+查询
	 * @param flowCategoryParam
	 * @return
	 */
	@RequestMapping("/getAllList")
	public Object getAllList(@RequestBody FlowCategoryParam flowCategoryParam) {
		List<FlowCategoryDto> flowCategoryandChild = flowCategoryService.getAllList(flowCategoryParam);
		return flowCategoryandChild;
	}

	/**
	 * 查询我的表单分类
	 *
	 * @return
	 * @throws HioException
	 */
	@RequestMapping("/getMyFlowCateGoryTemplate")
	public Object getMyFlowCateGoryTemplate(String sign) throws HioException {
		LoginUser loginUser = getLoginUser();
		List<FlowCategoryDto> flowCategories = flowCategoryService.getMyFlowCateGoryTemplate(loginUser.getUserId(),
				sign);
//		return flowCategoryService.getAll(sign);
		return flowCategories;
	}

	/**
	 * 删除表单分类
	 */
	/**
	 * @param flowCategoryParam
	 * @return
	 * @throws HioMybatisDeleteException
	 */
	@RequestMapping("/deleteFlowCategory")
	public Object deleteFlowCategory(@RequestBody FlowCategoryParam flowCategoryParam) {
		List<FlowTemplate> list = flowCategoryService.queryTemplate(flowCategoryParam);
		if (list.size() > 0) {
			throw new HioException("此分类下有审批！");
		}
		return super.deletePseudo(flowCategoryParam.getSid());
	}

	/**
	 * @param sid
	 *            业务对象主键
	 * @return
	 * @throws HioMybatisGetException
	 */
	@RequestMapping("/getById")
	@Override
	public Object get(String sid) throws HioMybatisGetException {
		return flowCategoryService.getObjectById(sid);
	}

	/**
	 * 分类拖拽排序 firstSort 前一个Sort afterSort 后一个sort flowCategortId 自己的id
	 * map.put("firstSort","1"); map.put("afterSort","2");
	 * map.put("flowCategoryId","12132")
	 *
	 * @param map
	 * @return
	 */
	@RequestMapping("/dragCategory")
	public Object dragCategory(@RequestBody Map<String, Object> map) {
		return flowCategoryService.dragCategory(map);
	}

//	@RequestMapping("/test")
//	public Object test(String sign){
//		return flowCategoryService.getAll(sign);
//	}
}
