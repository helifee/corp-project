package com.jzy.hio.sys.sys.res.controller;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.OpeLogInfo;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.sys.sys.res.entity.DataItem;
import com.jzy.hio.sys.sys.res.service.DataItemService;
import com.jzy.tools.data.JacksonUtils;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;


/**
 * 数据对象控制项控制层
 *
 * @author admin
 */
@Controller
@RequestMapping("/sys/res/dataItem")
@Api(tags = "数据对象控制项控制层", description = "")
public class DataItemController {

    private static Logger log = LoggerFactory.getLogger(DataItemController.class);

    @Autowired
    private DataItemService dataItemService;

    /**
     * 根据Id获取业务对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @ApiOperation(value = "根据Id获取业务对象", notes = "根据Id获取业务对象")
    @ApiImplicitParams(@ApiImplicitParam(name = "id", value = "业务对象主键", required = true, dataType = "String", paramType = "path"))
    @RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
    public @ResponseBody
    MessageResult get(@PathVariable("id") String id) {
        try {
            DataItem data = dataItemService.getObjectById(id);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, data);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 返回分页对象
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "返回分页对象", notes = "返回分页对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/page", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult page(@RequestBody Map<String, Object> map) {
        try {
            Page beanPage = dataItemService.getPage(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, beanPage);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 返回符合条件的列表
     *
     * @param dataItem
     * @return
     */
    @ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "dataItem", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/queryList", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryList(@RequestBody DataItem dataItem) {
        try {
            List<DataItem> results = dataItemService.queryList(dataItem);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, results);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 查询作用域业务对象和控制点
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "查询作用域业务对象和控制点", notes = "查询作用域业务对象和控制点")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/queryDataItemAndPointList", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryDataItemAndPointList(@RequestBody Map<String, Object> map) {
        try {
            List<Map<String, Object>> results = dataItemService.queryDataItemAndPointList(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, results);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 查询作用域业务对象和控制点(控制点对象)和控制点授权
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "查询作用域业务对象和控制点(控制点对象)和控制点授权", notes = "查询作用域业务对象和控制点(控制点对象)和控制点授权")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/queryDataItemAndPointObjList", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryDataItemAndPointObjList(@RequestBody Map<String, Object> map) {
        try {
            List<Map<String, Object>> results = dataItemService.queryDataItemAndPointAuthList(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, results);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 保存实体对象
     *
     * @param dataItem
     * @return
     */
    @ApiOperation(value = "保存实体对象", notes = "保存实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "dataItem", value = "save", required = true, dataType = "String")})
    @RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
    @OpeLogInfo(node = "新增数据权限")
    public @ResponseBody
    MessageResult save(@RequestBody DataItem dataItem) {
        try {
            int save = dataItemService.save(dataItem);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 新增数据权限作用域
     *
     * @param dataItem
     * @return
     */
    @ApiOperation(value = "新增数据权限作用域", notes = "新增数据权限作用域")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "dataItem", value = "save", required = true, dataType = "String")})
    @RequestMapping(value = "/saveDataItem", method = RequestMethod.POST, consumes = "application/json")
    @OpeLogInfo(node = "新增数据权限")
    public @ResponseBody
    MessageResult saveDataItem(@RequestBody DataItem dataItem) {
        try {
            DataItem save = dataItemService.saveDataItem(dataItem);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "id", value = " id", required = true, dataType = "String")})
    @RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
    @OpeLogInfo(node = "根据id删除数据权限")
    public @ResponseBody
    MessageResult delete(@PathVariable("id") String id) {
        try {
            int save = dataItemService.deleteObjectById(id);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "ids", value = " ids", required = true, dataType = "String")})
    @RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
    @OpeLogInfo(node = "根据ids批量数据权限")
    public @ResponseBody
    MessageResult deleteBatch(@PathVariable("ids") String ids) {
        try {
            int save = dataItemService.deleteAllObjectByIds(Arrays.asList(ids));
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 修改修改实体对象
     *
     * @param id
     * @param map
     * @return
     */
    @ApiOperation(value = "修改修改实体对象", notes = "修改修改实体对象")
    @ApiImplicitParams({@ApiImplicitParam(name = "id", value = "id", required = true, dataType = "Integer", paramType = "path"), @ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
    @OpeLogInfo(node = "根据id修改数据权限")
    public @ResponseBody
    MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
        try {
            DataItem data = dataItemService.getObjectById(id);
            String json = JacksonUtils.toJson(data);
            Map<String, Object> oldMap = JacksonUtils.fromJson(json, HashMap.class);
            oldMap.putAll(map);
            String updateJson = JacksonUtils.toJson(oldMap);
            DataItem fromJson = JacksonUtils.fromJson(updateJson, DataItem.class);
            int updateCount = dataItemService.update(fromJson);
            return ResponseModel.getResult(MessageInfo.UPDATESUCCESS, updateCount);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 校验appId+itemCode是否已存在，不可重复
     *
     * @param dataItem
     * @return
     */

    @ApiOperation(value = "校验appId+itemCode是否已存在，不可重复", notes = "校验appId+itemCode是否已存在，不可重复")
    @ApiImplicitParams({@ApiImplicitParam(name = "dataItem", value = "dataItem", dataType = "JSON")})
    @RequestMapping(value = "/checkRepeat", method = RequestMethod.POST, consumes = "application/json")
    public @ResponseBody
    MessageResult checkRepeat(@RequestBody DataItem dataItem) {
        try {
            int save = dataItemService.checkRepeat(dataItem);
            return ResponseModel.getResult(MessageInfo.QUERYSUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


}
