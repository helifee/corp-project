package com.jzy.hio.sys.sys.org.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.sys.sys.org.dto.OrgnazationNodeDto;
import com.jzy.hio.sys.sys.org.entity.Root;
import com.jzy.hio.sys.sys.org.service.RootService;
import com.jzy.tools.data.JacksonUtils;


/**
 * 根目录控制层
 *
 * @author admin
 */
@Controller
@RequestMapping("/sys/org/root")
@Api(tags = "根目录控制层", description = "")
public class RootController {

    private static Logger log = LoggerFactory.getLogger(RootController.class);

    @Autowired
    private RootService rootService;

    /**
     * 根据Id获取业务对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @ApiOperation(value = "根据Id获取业务对象", notes = "根据Id获取业务对象")
    @ApiImplicitParams(@ApiImplicitParam(name = "id", value = "业务对象主键", required = true, dataType = "String", paramType = "path"))
    @RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
    public @ResponseBody
    MessageResult get(@PathVariable("id") String id) {
        try {
            Root data = rootService.getObjectById(id);
            return ResponseModel.getResult(MessageInfo.GETERROR, data);
        } catch (Exception e) {
            log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 返回分页对象
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "返回分页对象", notes = "返回分页对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/page", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult page(@RequestBody Map<String, Object> map) {
        try {
            Page beanPage = rootService.getPage(map);
            return ResponseModel.getResult(MessageInfo.GETERROR, beanPage);
        } catch (Exception e) {
            log.error("调用page方法:  【参数" + map + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 返回符合条件的列表
     *
     * @param root
     * @return
     */
    @ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "root", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/queryList", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryList(@RequestBody Root root) {
        try {
            List<Root> results = rootService.queryList(root);
            return ResponseModel.getResult(MessageInfo.GETERROR, results);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 保存实体对象
     *
     * @param root
     * @return
     */
    @ApiOperation(value = "保存实体对象", notes = "保存实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "root", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
    public @ResponseBody
    MessageResult save(@RequestBody Root root) {
        try {
            int save = rootService.save(root);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "id", value = " id", required = true, dataType = "String")})
    @RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult delete(@PathVariable("id") String id) {
        try {
            int save = rootService.deleteObjectById(id);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            log.error("调用delete方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "ids", value = " ids", required = true, dataType = "String")})
    @RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult deleteBatch(@PathVariable("ids") String ids) {
        try {
            int save = rootService.deleteAllObjectByIds(Arrays.asList(ids));
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 修改修改实体对象
     *
     * @param id
     * @param map
     * @return
     */
    @ApiOperation(value = "修改修改实体对象", notes = "修改修改实体对象")
    @ApiImplicitParams({@ApiImplicitParam(name = "id", value = "id", required = true, dataType = "Integer", paramType = "path"), @ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
    public @ResponseBody
    MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
        try {
            Root data = rootService.getObjectById(id);
            String json = JacksonUtils.toJson(data);
            Map<String, Object> oldMap = JacksonUtils.fromJson(json, HashMap.class);
            oldMap.putAll(map);
            String updateJson = JacksonUtils.toJson(oldMap);
            Root fromJson = JacksonUtils.fromJson(updateJson, Root.class);
            int updateCount = rootService.update(fromJson);
            return ResponseModel.getResult(MessageInfo.UPDATESUCCESS, updateCount);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 获取符合条件的根目录下树列表
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "获取符合条件的根目录下树列表", notes = "获取符合条件的根目录下树列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/getTree", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult getTree(@RequestBody Map<String, Object> map) {
        try {
            List<OrgnazationNodeDto> save = rootService.getTree(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
//        MessageResult result = new MessageResult();
//        String paramaterJson = JacksonUtils.toJson(map);
//        try {
//            //暂时查询的是一级根目录下的树
//            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
//            String userJson = JacksonUtils.toJson(userBeanInfo);
//            String dubboResultInfo = rootDtoServiceCustomer.getTree(userJson, paramaterJson);
//            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//            if (dubboServiceResultInfo.isSucess()) {
//                String resultInfo = dubboServiceResultInfo.getResult();
//                List<OrgnazationNodeDto> list = JacksonUtils.fromJson(resultInfo, ArrayList.class, OrgnazationNodeDto.class);
//                result.setResult(list);
//                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
//                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
//            } else {
//                result.setSuccess(MessageInfo.GETERROR.isResult());
//                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
//            }
//
//        } catch (Exception e) {
//            ////e.printStackTrace();
//            log.error("调用getTree方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
//            result.setSuccess(MessageInfo.GETERROR.isResult());
//            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
//        }
//        return result;
    }

    /**
     * 获取符合条件的根目录下树列表
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "获取符合条件的根目录下树列表", notes = "获取符合条件的根目录下树列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/getOrgTreeByType", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult getOrgTreeByType(@RequestBody Map<String, Object> map) {
        try {
            List<OrgnazationNodeDto> save = rootService.getOrgTreeByType(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }
}
