package com.jzy.hio.sys.sys.base.controller;

import java.util.Arrays;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.utils.LoginUtils;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.sys.sys.base.dto.CustomFormInstanceDto;
import com.jzy.hio.sys.sys.base.entity.CustomFormInstance;
import com.jzy.hio.sys.sys.base.service.CustomFormInstanceService;
import com.jzy.tools.data.JacksonUtils;

import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

/**
 * 自定义表单实例控制层
 * 
 * @author admin
 *
 */
@RestController
@RequestMapping("/sys/base/customFormInstance")
public class CustomFormInstanceController {

	private static Logger					log	= LoggerFactory.getLogger(CustomFormInstanceController.class);

	@Autowired
	private CustomFormInstanceService		customFormInstanceService;

	@Autowired
	protected RedisTemplate<String, String>	redisTemplate;

	/**
	 * 根据Id获取业务对象
	 *
	 * @param id
	 *            业务对象主键
	 *
	 * @return 业务对象
	 */
	@RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
	@ApiOperation(value = "根据Id获取业务对象", notes = "根据Id获取业务对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "id", dataType = "String", value = "id", required = true) })
	public @ResponseBody MessageResult get(@PathVariable("id") String id) {
		try {
			return customFormInstanceService.getBeanById(id);
		} catch (Exception e) {
			//// e.printStackTrace();
			log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.CREATERROR, "查询数据失败！");
		}
	}

	/**
	 * @Description:获取实例对象（包括模板格式）
	 * @author:zhangfangzhi
	 * @date 2017年3月30日 下午4:21:52
	 * @version V1.0
	 */
	@RequestMapping(value = "/getInstance/{id}/{customFormId}", method = RequestMethod.GET)
	@ApiOperation(value = "获取实例对象（包括模板格式）", notes = "获取实例对象（包括模板格式）")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "id", dataType = "String", value = "id", required = true),
			@ApiImplicitParam(paramType = "path", name = "customFormId", dataType = "String", value = "customFormId", required = true) })
	public @ResponseBody MessageResult getInstance(@PathVariable("id") String id,
			@PathVariable("customFormId") String customFormId) {
		try {
			return customFormInstanceService.getInstanceByFormId(id, customFormId);
		} catch (Exception e) {
			//// e.printStackTrace();
			log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.GETERROR, "查询数据失败！");
		}

	}

	/**
	 * 返回分页对象
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/page", method = { RequestMethod.POST }, consumes = "application/json")
	@ApiOperation(value = "返回分页对象", notes = "返回分页对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "map", required = true) })
	public @ResponseBody MessageResult page(@RequestBody Map<String, Object> map) {
		try {
			return ResponseModel.getResult(MessageInfo.GETSUCCESS, customFormInstanceService.getPageForForm(map));
		} catch (Exception e) {
			//// e.printStackTrace();
			log.error("调用page方法:  【参数" + JacksonUtils.toJson(map) + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.GETERROR, "查询数据失败！");
		}
	}

	/**
	 * @Description:我的发起（手机端）
	 * @author:zhangfangzhi
	 * @date 2018年1月19日 下午7:12:16
	 * @version V1.0
	 */
	@RequestMapping(value = "/myFormPage", method = { RequestMethod.POST }, consumes = "application/json")
	@ApiOperation(value = "我的发起（手机端）", notes = "我的发起（手机端）")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "map", required = true) })
	public @ResponseBody MessageResult myFormPage(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		map.put("operatorId", securityUserBeanInfo.getSecurityUserDto().getId());
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			// TODO 后续补充
			/*
			 * String dubboResultInfo = customFormInstanceDtoServiceCustomer
			 * .getMyFormPage(JacksonUtils.toJson(securityUserBeanInfo), paramaterJson);
			 * DubboServiceResultInfo dubboServiceResultInfo =
			 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if
			 * (dubboServiceResultInfo.isSucess()) { String resultInfo =
			 * dubboServiceResultInfo.getResult(); PageBeanInfo pageInfo =
			 * JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
			 * result.setResult(pageInfo);
			 * result.setSuccess(MessageInfo.GETSUCCESS.isResult());
			 * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); } else {
			 * result.setSuccess(MessageInfo.GETERROR.isResult());
			 * result.setMsg(MessageInfo.GETERROR.getMsg() + "【" +
			 * dubboServiceResultInfo.getExceptionMsg() + "】"); }
			 */
			return result;
		} catch (Exception e) {
			//// e.printStackTrace();
			log.error("调用page方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.GETERROR, "查询数据失败！");
		}
	}

	/**
	 * @Description:付款管理查询（分页）
	 * @author:zhangfangzhi
	 * @date 2017年11月6日 下午4:35:48
	 * @version V1.0
	 */
	@RequestMapping(value = "/fundPage", method = { RequestMethod.POST }, consumes = "application/json")
	@ApiOperation(value = "付款管理查询（分页）", notes = "付款管理查询（分页）")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "map", required = true) })
	public @ResponseBody MessageResult fundPage(@RequestBody Map<String, Object> map) {
		try {
			return ResponseModel.getResult(MessageInfo.GETSUCCESS, customFormInstanceService.getFundPageForForm(map));
		} catch (Exception e) {
			//// e.printStackTrace();
			log.error("调用page方法:  【参数" + JacksonUtils.toJson(map) + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.GETERROR, "查询数据失败！");
		}
	}

	/**
	 * 返回符合条件的列表
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/queryList", method = { RequestMethod.POST }, consumes = "application/json")
	@ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "map", required = true) })
	public @ResponseBody MessageResult queryList(@RequestBody Map<String, Object> map) {
		String paramaterJson = JacksonUtils.toJson(map);
		try {
			CustomFormInstance customFormInstance = JacksonUtils.fromJson(paramaterJson, CustomFormInstance.class);
			return ResponseModel.getResult(MessageInfo.GETSUCCESS,
					customFormInstanceService.queryList(customFormInstance));
		} catch (Exception e) {
			//// e.printStackTrace();
			log.error("调用queryList方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.GETERROR, "查询数据失败！");
		}
	}

	/**
	 * 保存实体对象
	 * 
	 * @param t
	 * @return
	 */
	@RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
	@ApiOperation(value = "保存实体对象", notes = "保存实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "bean", dataType = "String", value = "bean", required = true) })
	public @ResponseBody MessageResult save(@RequestBody CustomFormInstanceDto t) {
		try {
			t.setDelflag(false);
			t.setStatus("0");
			String saveJson = JacksonUtils.toJson(t);
			CustomFormInstance customFormInstance = JacksonUtils.fromJson(saveJson, CustomFormInstance.class);
			return ResponseModel.getResult(MessageInfo.SAVESUCCESS, customFormInstanceService.save(customFormInstance));
		} catch (Exception e) {
			log.error("调用save方法:  【参数" + JacksonUtils.toJson(t) + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.SAVEERROR, "保存数据失败！");
		}
	}

	/**
	 * 删除实体对象
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
	@ApiOperation(value = "删除实体对象", notes = "删除实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "id", dataType = "String", value = "id", required = true) })
	public @ResponseBody MessageResult delete(@PathVariable("id") String id) {
		try {
			return customFormInstanceService.deleteBeanById(id);
		} catch (Exception e) {
			//// e.printStackTrace();
			log.error("调用delete方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.DELETEERROR, "删除数据失败！");
		}

	}

	/**
	 * 批量删除实体对象
	 * 
	 * @param ids
	 * @return
	 */
	@RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
	@ApiOperation(value = "批量删除实体对象", notes = "批量删除实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "ids", dataType = "String", value = "ids", required = true) })
	public @ResponseBody MessageResult deleteBatch(@PathVariable("ids") String ids) {
		try {
			return customFormInstanceService.deleteAllBeanByIds(Arrays.asList(ids.split(",")));
		} catch (Exception e) {
			//// e.printStackTrace();
			log.error("调用delete方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.DELETEERROR, "删除数据失败！");
		}
	}

	/**
	 * 修改修改实体对象
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
	@ApiOperation(value = "修改实体对象", notes = "修改实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", dataType = "String", name = "id", value = "id", required = true),
			@ApiImplicitParam(paramType = "body", dataType = "String", name = "map", value = "map", required = true) })
	public @ResponseBody MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
		try {
			return customFormInstanceService.updateBean(id, map);
		} catch (Exception e) {
			log.error(
					"调用update方法:  【参数" + id + "," + JacksonUtils.toJson(map) + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.UPDATEERROR, "修改数据失败！");
		}
	}

	/**
	 * @Description:流程回调修改状态
	 * @author:zhangfangzhi
	 * @date 2017年4月20日 下午7:32:16
	 * @version V1.0
	 */
	// @RequestMapping(value="/updateStatus/{id}",method=RequestMethod.PUT,consumes="application/json")
	// public @ResponseBody MessageResult updateStatus(@PathVariable("id") String
	// id, @RequestBody Map<String,Object> map){
	// MessageResult result=new MessageResult();
	// CustomFormInstanceDto customFormInstanceDto=null;
	// SecurityUserBeanInfo securityUserBeanInfo =
	// LoginUtils.getSecurityUserBeanInfo();
	// try {
	// map.put("id", id);
	// String updateJson= JacksonUtils.toJson(map);
	// String
	// updateDubboResultInfo=customFormInstanceDtoServiceCustomer.updateStatus(JacksonUtils.toJson(securityUserBeanInfo),
	// updateJson);
	// DubboServiceResultInfo updateDubboServiceResultInfo=
	// JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
	// if(updateDubboServiceResultInfo.isSucess()){
	// Integer i=JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(),
	// Integer.class);
	// result.setResult(i);
	// result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
	// result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
	// }else{
	// result.setSuccess(MessageInfo.UPDATEERROR.isResult());
	// result.setMsg(updateDubboServiceResultInfo.getMsg()+"【"+updateDubboServiceResultInfo.getExceptionMsg()+"】");
	// }
	// } catch (Exception e) {
	// try{
	// ////e.printStackTrace();
	// ObjectMapper mapper = new ObjectMapper();
	// String paramJson = mapper.writeValueAsString(customFormInstanceDto);
	// log.error("调用update方法:
	// 【参数"+id+","+paramJson+"】======"+"【"+e.getMessage()+"】");
	// result.setSuccess(MessageInfo.UPDATEERROR.isResult());
	// result.setMsg(MessageInfo.UPDATEERROR.getMsg()+"【"+e.getMessage()+"】");
	// }catch (JsonProcessingException e1) {
	// // TODO Auto-generated catch block
	// //e1.printStackTrace();
	// }
	//
	// }
	// return result;
	// }

	/**
	 * @Description:流程回调修改状态
	 * @author:zhangfangzhi
	 * @date 2017年4月20日 下午7:32:16
	 * @version V1.0
	 */
	@RequestMapping(value = "/updateStatus", method = { RequestMethod.POST }, consumes = "application/json")
	public @ResponseBody MessageResult updateStatus(@RequestBody Map<String, Object> map) {
		String paramaterJson = JacksonUtils.toJson(map);

		SecurityUserBeanInfo securityUserBeanInfo = new SecurityUserBeanInfo();
		if (map.get("token") != null) {// 加入白名单处理获取自定义表单流程业务变量查询
			String token = String.valueOf(map.get("token"));
			String[] args = token.split("@");
			if (args.length == 2) {
				securityUserBeanInfo.setTendCode(args[1]);
			}
		} else {
			securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		}
		log.info("流程调用状态变更参数：" + map);
		try {
			return customFormInstanceService.updateBeanStatus(map);
		} catch (Exception e) {
			//// e.printStackTrace();
			log.error("调用queryList方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.GETERROR, "查询数据失败！");
		}
	}

	/**
	 * 伪删除实体对象
	 * 
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/deletePseudo/{id}", method = RequestMethod.DELETE)
	@ApiOperation(value = "伪删除实体对象", notes = "伪删除实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", dataType = "String", name = "id", value = "id", required = true) })
	public @ResponseBody MessageResult deletePseudo(@PathVariable("id") String id) {
		try {
			return customFormInstanceService.deletePseudoBeanById(id);
		} catch (Exception e) {
			//// e.printStackTrace();
			log.error("调用deletePseudo方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.DELETEERROR, "删除数据失败！");
		}
	}

	/**
	 * 批量伪删除实体对象
	 * 
	 * @param ids
	 * @return
	 */
	@RequestMapping(value = "/deletePseudoBatch/{ids}", method = RequestMethod.DELETE)
	@ApiOperation(value = "批量伪删除实体对象", notes = "批量伪删除实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", dataType = "String", name = "ids", value = "ids", required = true) })
	public @ResponseBody MessageResult deletePseudoBatch(@PathVariable("ids") String ids) {
		try {
			return customFormInstanceService.deletePseudoAllBeanByIds(ids);
		} catch (Exception e) {
			//// e.printStackTrace();
			log.error("调用deletePseudoBatch方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.DELETEERROR, "删除数据失败！");
		}
	}

	/**
	 * @Description:获取流程变量值
	 * @author:zhangfangzhi
	 * @date 2017年4月13日 下午8:40:42
	 * @version V1.0
	 */
	// @RequestMapping(value="/getVariable/{id}",method=RequestMethod.GET)
	// public @ResponseBody MessageResult getVariable(@PathVariable("id") String
	// id){
	// MessageResult result=new MessageResult();
	// SecurityUserBeanInfo securityUserBeanInfo =
	// LoginUtils.getSecurityUserBeanInfo();
	// try {
	// String
	// dubboResultInfo=customFormInstanceDtoServiceCustomer.getVariableById(JacksonUtils.toJson(securityUserBeanInfo),
	// "{\"id\":\""+id+"\"}");
	// DubboServiceResultInfo dubboServiceResultInfo=
	// JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
	// if(dubboServiceResultInfo.isSucess()){
	// result.setResult(dubboServiceResultInfo.getResult());
	// result.setSuccess(MessageInfo.GETSUCCESS.isResult());
	// result.setMsg(MessageInfo.GETSUCCESS.getMsg());
	// }else{
	// result.setSuccess(MessageInfo.GETERROR.isResult());
	// result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
	// }
	// } catch (Exception e) {
	// ////e.printStackTrace();
	// log.error("调用getVariable方法: 【参数"+id+"】======"+"【"+e.getMessage()+"】");
	// result.setSuccess(MessageInfo.GETERROR.isResult());
	// result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
	// }
	// return result;
	// }

	/**
	 * @Description:获取流程变量值
	 * @author:zhangfangzhi
	 * @date 2017年4月20日 下午7:32:16
	 * @version V1.0
	 */
	@RequestMapping(value = "/getVariable", method = { RequestMethod.POST }, consumes = "application/json")
	@ApiOperation(value = "获取流程变量值", notes = "获取流程变量值")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", dataType = "String", name = "map", value = "map", required = true) })
	public @ResponseBody MessageResult getVariable(@RequestBody Map<String, Object> map) {
		MessageResult result = new MessageResult();
		String paramaterJson = JacksonUtils.toJson(map);
		SecurityUserBeanInfo securityUserBeanInfo = new SecurityUserBeanInfo();
		if (map.get("token") != null) {// 加入白名单处理获取自定义表单流程业务变量查询
			String token = String.valueOf(map.get("token"));
			String[] args = token.split("@");
			if (args.length == 2) {
				securityUserBeanInfo.setTendCode(args[1]);
			}
		} else {
			securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		}
		try {
			return customFormInstanceService.getVariableById(JacksonUtils.toJson(map));
		} catch (Exception e) {
			//// e.printStackTrace();
			log.error("调用queryList方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.GETERROR, "查询数据失败！");
		}
	}

	/**
	 * @Description:测试接口
	 * @author:zhangfangzhi
	 * @date 2018年1月19日 下午1:55:33
	 * @version V1.0
	 */
	/*
	 * @RequestMapping(value = "/getInvalid", method = { RequestMethod.POST },
	 * consumes = "application/json") public @ResponseBody MessageResult
	 * getInvalid(@RequestBody Map<String, Object> map) { MessageResult result = new
	 * MessageResult(); String paramaterJson = JacksonUtils.toJson(map);
	 * SecurityUserBeanInfo securityUserBeanInfo = new SecurityUserBeanInfo(); if
	 * (map.get("token") != null) {// 加入白名单处理获取自定义表单流程业务变量查询 String token =
	 * String.valueOf(map.get("token")); String[] args = token.split("@"); if
	 * (args.length == 2) { securityUserBeanInfo.setTendCode(args[1]); } } else {
	 * securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo(); } try { //
	 * String //
	 * dubboResultInfo=customFormInstanceDtoServiceCustomer.getVariableById(
	 * JacksonUtils.toJson(securityUserBeanInfo), // paramaterJson); //
	 * DubboServiceResultInfo dubboServiceResultInfo= //
	 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
	 * DubboServiceResultInfo dubboServiceResultInfo = new DubboServiceResultInfo();
	 * dubboServiceResultInfo.setSucess(false);
	 * dubboServiceResultInfo.setMsg("失败了了了了了了！！！！！！！！！！");
	 * dubboServiceResultInfo.setResult("失败了！！！！！！！！！"); if
	 * (dubboServiceResultInfo.isSucess()) {
	 * result.setResult(dubboServiceResultInfo.getResult());
	 * result.setSuccess(MessageInfo.GETSUCCESS.isResult());
	 * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); } else {
	 * result.setSuccess(MessageInfo.GETERROR.isResult());
	 * result.setMsg(dubboServiceResultInfo.getMsg()); } } catch (Exception e) {
	 * //// e.printStackTrace(); log.error("调用queryList方法:  【参数" + paramaterJson +
	 * "】======" + "【" + e.getMessage() + "】");
	 * result.setSuccess(MessageInfo.GETERROR.isResult());
	 * result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】"); }
	 * return result; }
	 */

	/**
	 * @Description:导入资金平台 (新架构下不需要)
	 * @author:zhangfangzhi
	 * @date 2017年11月7日 下午2:21:28
	 * @version V1.0
	 */
	/*
	 * @RequestMapping(value = "/importFundPayment/{ids}", method =
	 * RequestMethod.POST) public @ResponseBody MessageResult
	 * importFundPayment(@PathVariable("ids") String ids) { MessageResult result =
	 * new MessageResult(); SecurityUserBeanInfo securityUserBeanInfo =
	 * LoginUtils.getSecurityUserBeanInfo(); try { String dubboResultInfo =
	 * customFormInstanceDtoServiceCustomer
	 * .importFundPayment(JacksonUtils.toJson(securityUserBeanInfo), "{\"id\":\"" +
	 * ids + "\"}"); DubboServiceResultInfo dubboServiceResultInfo =
	 * fromJson(dubboResultInfo, DubboServiceResultInfo.class); if
	 * (dubboServiceResultInfo.isSucess()) {
	 * result.setResult(dubboServiceResultInfo.getResult());
	 * result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
	 * result.setMsg(MessageInfo.SAVESUCCESS.getMsg()); } else {
	 * result.setSuccess(MessageInfo.SAVEERROR.isResult());
	 * result.setMsg(dubboServiceResultInfo.getMsg()); } } catch (Exception e) { try
	 * { ObjectMapper mapper = new ObjectMapper(); String paramJson =
	 * mapper.writeValueAsString(ids); log.error("调用save方法:  【参数" + paramJson +
	 * "】======" + "【" + e.getMessage() + "】");
	 * result.setSuccess(MessageInfo.SAVEERROR.isResult());
	 * result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + e.getMessage() + "】"); }
	 * catch (JsonProcessingException e1) { // TODO Auto-generated catch block //
	 * e1.printStackTrace(); } } return result; }
	 */

	/**
	 * @Description:资金平台同步 （新架构下不需要）
	 * @author:zhangfangzhi
	 * @date 2017年11月8日 下午2:09:58
	 * @version V1.0
	 */
	/*
	 * @RequestMapping(value = "/synFund", method = { RequestMethod.POST }, consumes
	 * = "application/json") public @ResponseBody MessageResult synFund(@RequestBody
	 * Map<String, Object> map) { MessageResult result = new MessageResult();
	 * SecurityUserBeanInfo securityUserBeanInfo =
	 * LoginUtils.getSecurityUserBeanInfo(); try { String dubboResultInfo =
	 * customFormInstanceDtoServiceCustomer
	 * .synFund(JacksonUtils.toJson(securityUserBeanInfo),
	 * JacksonUtils.toJson(map)); DubboServiceResultInfo dubboServiceResultInfo =
	 * fromJson(dubboResultInfo, DubboServiceResultInfo.class); if
	 * (dubboServiceResultInfo.isSucess()) { String resultInfo =
	 * dubboServiceResultInfo.getResult(); CustomFormInstanceDto
	 * customFormInstanceDto = fromJson(resultInfo, CustomFormInstanceDto.class);
	 * result.setResult(customFormInstanceDto);
	 * result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
	 * result.setMsg(MessageInfo.SAVESUCCESS.getMsg()); } else {
	 * result.setSuccess(MessageInfo.SAVEERROR.isResult());
	 * result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" +
	 * dubboServiceResultInfo.getExceptionMsg() + "】"); } } catch (Exception e) {
	 * try { ObjectMapper mapper = new ObjectMapper(); String paramJson =
	 * mapper.writeValueAsString(JacksonUtils.toJson(map));
	 * log.error("调用save方法:  【参数" + paramJson + "】======" + "【" + e.getMessage() +
	 * "】"); result.setSuccess(MessageInfo.SAVEERROR.isResult());
	 * result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + e.getMessage() + "】"); }
	 * catch (JsonProcessingException e1) { // TODO Auto-generated catch block //
	 * e1.printStackTrace(); } } return result; }
	 */
}
