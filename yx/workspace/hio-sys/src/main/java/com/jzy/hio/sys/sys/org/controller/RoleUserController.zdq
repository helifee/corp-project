package com.jzy.hio.sys.sys.org.controller;

import java.util.*;
import java.util.concurrent.TimeUnit;


import com.alibaba.druid.support.json.JSONUtils;
import com.jzy.hio.base.utils.*;
import com.jzy.tools.login.LoginUtils;
import com.jzy.hio.sys.sys.org.entity.RoleUser;
import com.jzy.hio.sys.sys.org.entity.RoleUserPostScope;
import com.jzy.hio.sys.sys.org.service.RoleUserService;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jzy.hio.sys.sys.org.dto.RoleUserDto;
import com.jzy.tools.data.JacksonUtils;


/**
 * 用户虚拟角色关联表控制层
 *
 * @author admin
 */
@Controller
@RequestMapping("/sys/org/roleUser")
@Api(tags = "用户虚拟角色关联表控制层", description = "")
public class RoleUserController {

    private static Logger log = LoggerFactory.getLogger(RoleUserController.class);

    @Autowired
    private RoleUserService roleUserService;

    @Autowired
    private RedisTemplate<String, String> redisTemplate;

    /**
     * 根据Id获取业务对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @ApiOperation(value = "根据Id获取业务对象", notes = "根据Id获取业务对象")
    @ApiImplicitParams(@ApiImplicitParam(name = "id", value = "业务对象主键", required = true, dataType = "String", paramType = "path"))
    @RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
    public @ResponseBody
    MessageResult get(@PathVariable("id") String id) {
        try {
            RoleUser data = roleUserService.getObjectById(id);
            return ResponseModel.getResult(MessageInfo.GETERROR, data);
        } catch (Exception e) {
            log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 返回分页对象
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "返回分页对象", notes = "返回分页对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/page", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult page(@RequestBody Map<String, Object> map) {
        try {
            Page beanPage = roleUserService.getPage(map);
            return ResponseModel.getResult(MessageInfo.GETERROR, beanPage);
        } catch (Exception e) {
            log.error("调用page方法:  【参数" + map + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 返回符合条件的列表
     *
     * @param roleUser
     * @return
     */
    @ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "roleUser", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/queryList", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryList(@RequestBody RoleUser roleUser) {
        try {
            List<RoleUser> results = roleUserService.queryList(roleUser);
            return ResponseModel.getResult(MessageInfo.GETERROR, results);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 保存实体对象
     *
     * @param roleUser
     * @return
     */
    @ApiOperation(value = "保存实体对象", notes = "保存实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "roleUser", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
    public @ResponseBody
    MessageResult save(@RequestBody RoleUser roleUser) {
        try {
            int save = roleUserService.save(roleUser);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 批量保存roleUser
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "批量保存roleUser", notes = "批量保存roleUser")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/saveBatchRoleUser", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult saveBatchRoleUser(@RequestBody Map<String, Object> map) {
        try {
            int save = roleUserService.saveBatchRoleUser(map);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 批量保存roleUserPost
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "批量保存roleUserPost", notes = "批量保存roleUserPost")
    @RequestMapping(value = "/saveBatchRoleUserPost", method = {RequestMethod.POST}, consumes = "application/json")
    @OpeLogInfo(node = "角色引入对象")
    public @ResponseBody
    MessageResult saveBatchRoleUserPost(@RequestBody Map<String, Object> map) {
        try {
            int save = roleUserService.saveBatchRoleUserPost(map);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "id", value = " id", required = true, dataType = "String")})
    @RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult delete(@PathVariable("id") String id) {
        try {
            int save = roleUserService.deleteObjectById(id);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            log.error("调用delete方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "ids", value = " ids", required = true, dataType = "String")})
    @RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult deleteBatch(@PathVariable("ids") String ids) {
        try {
            int save = roleUserService.deletePseudoAllObjectByIds(Arrays.asList(ids));
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 修改修改实体对象
     *
     * @param id
     * @param map
     * @return
     */
    @ApiOperation(value = "修改修改实体对象", notes = "修改修改实体对象")
    @ApiImplicitParams({@ApiImplicitParam(name = "id", value = "id", required = true, dataType = "Integer", paramType = "path"), @ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
    public @ResponseBody
    MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
        try {
            RoleUser data = roleUserService.getObjectById(id);
            String json = JacksonUtils.toJson(data);
            Map<String, Object> oldMap = JacksonUtils.fromJson(json, HashMap.class);
            oldMap.putAll(map);
            String updateJson = JacksonUtils.toJson(oldMap);
            RoleUser fromJson = JacksonUtils.fromJson(updateJson, RoleUser.class);
            int updateCount = roleUserService.update(fromJson);
            return ResponseModel.getResult(MessageInfo.UPDATESUCCESS, updateCount);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 伪删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "伪删除实体对象", notes = "伪删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "id", value = " id", required = true, dataType = "String")})
    @RequestMapping(value = "/deletePseudo/{id}", method = RequestMethod.DELETE)
    @OpeLogInfo(node = "角色移除对象")
    public @ResponseBody
    MessageResult deletePseudo(@PathVariable("id") String id) {
        try {
            int save = roleUserService.deletePseudoObjectById(id);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            log.error("调用delete方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 伪删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "ids", value = " ids", required = true, dataType = "String")})
    @RequestMapping(value = "/deletePseudoBatch/{ids}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult deletePseudoBatch(@PathVariable("ids") String ids) {
        try {
            int save = roleUserService.deletePseudoAllObjectByIds(Arrays.asList(ids));
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 查询通用角色引用对象列表
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "查询通用角色引用对象列表", notes = "查询通用角色引用对象列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/queryRoleRefListByRoleId", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryRoleRefListByRoleId(@RequestBody Map<String, Object> map) {
        try {
            List<RoleUserDto> save = roleUserService.queryRoleRefListByRoleId(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 查询用户岗位组织树
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "查询通用角色引用对象列表", notes = "查询通用角色引用对象列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/selectUserPostTree", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult selectUserPostTree(@RequestBody Map<String, Object> map) {
        MessageResult result = new MessageResult();
        String userPostSelector = (String) map.get("userPostSelector");
        map.remove("userPostSelector");
        try {
            ValueOperations<String, String> valueOperations = redisTemplate.opsForValue();
            String userPostTree = null;
            if (userPostSelector != null && !"".equals(userPostSelector)) {
                userPostTree = valueOperations.get(userPostSelector + "_" + LoginUtils.getSecurityUserBeanInfo().getTendCode());
            }
            if (userPostTree != null) {
                List<Map<String, Object>> list = JacksonUtils.fromJson(userPostTree, ArrayList.class);
                result.setResult(list);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            } else {
                List<Map<String, Object>> resultInfo = roleUserService.selectUserPostTree(map);
                if (userPostSelector != null && !"".equals(userPostSelector)) {
                    valueOperations.set(userPostSelector + "_" + LoginUtils.getSecurityUserBeanInfo().getTendCode(), JSONUtils.toJSONString(resultInfo), 2 * 60 * 60 * 1000L, TimeUnit.MILLISECONDS);
                }
                result.setResult(resultInfo);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            }
        } catch (Exception e) {
            ////e.printStackTrace();
            log.error("调用queryList方法:  【参数" + map + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;
    }

    /**
     * 查询用户岗位树
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "查询用户岗位树", notes = "查询用户岗位树")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/selectUserOrgTree", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult selectUserOrgTree(@RequestBody Map<String, Object> map) {
        try {
            List<Map<String, Object>> save = roleUserService.selectUserOrgTree(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

}
