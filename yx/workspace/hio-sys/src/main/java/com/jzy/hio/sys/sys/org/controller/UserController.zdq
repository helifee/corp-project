package com.jzy.hio.sys.sys.org.controller;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.jzy.hio.base.utils.DubboServiceResultInfo;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.sys.sys.org.entity.TendProductDto;
import com.jzy.hio.sys.sys.org.service.TendManagerTendProductService;
import com.jzy.tools.login.LoginUtils;
import org.apache.commons.collections.MapUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jzy.hio.base.utils.IDGenerator;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.sys.sys.log.entity.LogDubbo;
import com.jzy.hio.sys.sys.log.service.LogDubboService;
import com.jzy.hio.sys.sys.org.dto.OrgnazationNodeDto;
import com.jzy.hio.sys.sys.org.dto.UserDto;
import com.jzy.hio.sys.sys.org.entity.Orgnazation;
import com.jzy.hio.sys.sys.org.entity.User;
import com.jzy.hio.sys.sys.org.service.OrgnazationService;
import com.jzy.hio.sys.sys.org.service.PostService;
import com.jzy.hio.sys.sys.org.service.UserService;
import com.jzy.hio.sys.sys.security.dto.AuthenticationDto;
import com.jzy.tools.data.JacksonUtils;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

/**
 * 用户表控制层
 *
 * @author sy
 */
@Controller
@RequestMapping("/sys/org/user")
@Api(tags = "用户表控制层", description = "")
public class UserController {

    private static Logger log = LoggerFactory.getLogger(UserController.class);

    @Autowired
    private UserService userService;
    @Autowired
    private LogDubboService logDubboService;
    @Autowired
    private OrgnazationService orgnazationService;
    @Autowired
    private PostService postService;
    @Autowired
    private TendManagerTendProductService tendManagerTendProductService;

    /**
     * 根据Id获取业务对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @ApiOperation(value = "根据Id获取业务对象", notes = "根据Id获取业务对象")
    @ApiImplicitParams(@ApiImplicitParam(name = "id", value = "业务对象主键", required = true, dataType = "String", paramType = "path"))
    @RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
    public @ResponseBody
    MessageResult get(@PathVariable("id") String id) {
        try {
            User user = userService.getObjectById(id);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, user);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 查询用户的的使用范围
     *
     * @return 业务对象
     */
    @RequestMapping(value = "/ApplicableScope", method = RequestMethod.GET)
    public @ResponseBody
    MessageResult getApplicableScope() {
        try {
            String tendCode = LoginUtils.getSecurityUserBeanInfo().getTendCode();
            List<TendProductDto> results = tendManagerTendProductService.getProductByTendCode(tendCode);
            for (TendProductDto tendProductDto : results) {
                tendProductDto.setProCode(tendProductDto.getCode());
                Integer haveNum = userService.getAuthNum(tendProductDto.getProCode());
                Integer noHaveNum = tendProductDto.getPronumber() - haveNum;
                tendProductDto.setHaveNum(haveNum);
                tendProductDto.setNoHaveNum(noHaveNum);
            }
            return ResponseModel.getResult(MessageInfo.QUERYSUCCESS, results);
        } catch (Exception e) {
            log.info("查询使用范围失败" + "【" + e.getMessage() + "】");
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 返回分页对象
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "返回分页对象", notes = "返回分页对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/page", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult page(@RequestBody Map<String, Object> map) {

        try {

            Page page = userService.getPage(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, page);

        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            //e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 返回符合条件的列表
     *
     * @param user
     * @return
     */
    @ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "user", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/queryList", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryList(@RequestBody User user) {

        try {

            List<User> queryList = userService.queryList(user);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, queryList);

        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            //e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

    }

    /**
     * 第三方档案系统获取人员和组织机构数据接口
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "第三方档案系统获取人员和组织机构数据接口", notes = "第三方档案系统获取人员和组织机构数据接口")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/queryUserOrOrgList", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryUserOrOrgList(@RequestBody Map<String, Object> map) {

        try {
            String dataType = (String) map.get("dataType");
            if (dataType.equals("user")) {
                User user = new User();
                List<User> queryList = userService.queryList(user);
                return ResponseModel.getResult(MessageInfo.GETSUCCESS, queryList);
            } else {
                Orgnazation orgnazation = new Orgnazation();
                List<Orgnazation> queryList = orgnazationService.queryList(orgnazation);
                return ResponseModel.getResult(MessageInfo.GETSUCCESS, queryList);
            }
        } catch (Exception e) {
            ////e.printStackTrace();
            String paramaterJson = JacksonUtils.toJson(map);
            log.error("调用第三方档案系统获取人员和组织机构数据接口方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
        }
        return null;


    }


    /**
     * 保存实体对象
     *
     * @param user {"id":"8cb1a1c3da1b481e8a2590ba787b4d54","realName":"kimchou","loginName":"kimchou","password":"111111","belongOrgId":"270e63630180475fb700e2b76fd8f844","sort":"1","mobile":"18579076156","weChat":"18579076156","email":"18579076156@qq.com","entryDate":1517932800000,"leaveDate":1517932800000,"workTime":1517932800000,"type":"2","isMale":"1","status":"1","remark":"asasasas","applicableScope":"01,02","delflag":false}
     * @return
     */
    @ApiOperation(value = "保存实体对象", notes = "保存实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "user", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
    public @ResponseBody
    MessageResult save(@RequestBody User user) {
        try {
            int count = userService.saveUser(user);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS, count);
        } catch (Exception e) {
            log.error("调用save方法:" + "【" + e.getMessage() + "】");
            //e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 批量保存用户排序号
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "批量保存用户排序号", notes = "批量保存用户排序号")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/saveUsersSort", method = RequestMethod.POST, consumes = "application/json")
    public @ResponseBody
    MessageResult saveUsersSort(@RequestBody Map<String, Object> map) {

        try {
            int count = userService.saveUsersSort(map);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS, count);
        } catch (Exception e) {
            log.error("调用saveUsersSort方法:" + "【" + e.getMessage() + "】");
            //e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

    }

    /**
     * 删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "id", value = " id", required = true, dataType = "String")})
    @RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult delete(@PathVariable("id") String id) {

        try {
            int count = userService.deleteObjectById(id);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, count);
        } catch (Exception e) {
            log.error("调用delete方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            //e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

    }


    /**
     * 删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "ids", value = " ids", required = true, dataType = "String")})
    @RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult deleteBatch(@PathVariable("ids") String ids) {

        try {
            List<String> deleteMethod = Arrays.asList(ids.split(","));
            int count = userService.deleteAllObjectByIds(deleteMethod);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, count);
        } catch (Exception e) {
            log.error("调用delete方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
            //e.printStackTrace();
            return ResponseModel.getErrorResult();
        }


    }

    /**
     * 伪删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "id", value = " id", required = true, dataType = "String")})
    @RequestMapping(value = "/deletePseudo/{id}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult deletePseudo(@PathVariable("id") String id) {

        try {
            userService.deletePseudoObjectById(id);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, MessageInfo.DELETESUCCESS.getMsg());
        } catch (Exception e) {
            log.error("调用deletePseudo方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            //e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

    }


    /**
     * 伪删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "ids", value = " ids", required = true, dataType = "String")})
    @RequestMapping(value = "/deletePseudoBatch/{ids}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult deletePseudoBatch(@PathVariable("ids") String ids) {

        try {

            List<String> list = Arrays.asList(ids.split(","));
            int count = userService.deletePseudoAllObjectByIds(list);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, count);
        } catch (Exception e) {
            log.error("调用deletePseudoBatch方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
            //e.printStackTrace();
            return ResponseModel.getErrorResult();
        }


    }


    /**
     * 修改修改实体对象
     *
     * @param id
     * @param map
     * @return
     */
    @ApiOperation(value = "修改修改实体对象", notes = "修改修改实体对象")
    @ApiImplicitParams({@ApiImplicitParam(name = "id", value = "id", required = true, dataType = "Integer", paramType = "path"), @ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
    public @ResponseBody
    MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {

        try {

            User user = userService.getObjectById(id);
            String json = JacksonUtils.toJson(user);
            Map<String, Object> oldMap = JacksonUtils.fromJson(json, HashMap.class);
            oldMap.putAll(map);
            String updateJson = JacksonUtils.toJson(oldMap);
            User fromJson = JacksonUtils.fromJson(updateJson, User.class);
            int count = userService.update(fromJson);
            return ResponseModel.getResult(MessageInfo.UPDATESUCCESS, count);
        } catch (Exception e) {
            log.error("调用update方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            //e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

    }

    /**
     * 记录调用dubbo日志
     *
     * @param startTime     开始调用时间
     * @param endTime       结束调用时间
     * @param returnContent 返回内容
     * @param dubboMethod   调用方法
     */
    public void saveDubboLog(Long startTime, Long endTime, String returnContent, String dubboMethod) {

        try {
            LogDubbo logDubbo = new LogDubbo();
            logDubbo.setId(IDGenerator.getUUID());
            logDubbo.setStartTime(new Timestamp(startTime));
            logDubbo.setEndTime(new Timestamp(endTime));
            logDubbo.setExecuteTime(endTime - startTime);
            logDubbo.setReturnContent(returnContent);
            logDubbo.setDubboMethod(dubboMethod);
            logDubbo.setSysCode("/sys/org/user");
            logDubboService.save(logDubbo);

        } catch (Exception e) {
            ////e.printStackTrace();
            log.error("/sys/org/user--存储调用dubbo日志异常错误【" + e.getMessage() + "】");
        }

    }

    /**
     * 根据组织结构查询所有人
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "根据组织结构查询所有人", notes = "根据组织结构查询所有人")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/queryUserListByOrgId", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryUserListByOrgId(@RequestBody Map<String, Object> map) {


        try {

            List<UserDto> queryList = userService.selectUserByQuery(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, queryList);

        } catch (Exception e) {
            log.error("调用queryUserListByOrgId方法:" + "【" + e.getMessage() + "】");
            //e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

    }

    /**
     * 根据组织结构查询所有人-
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "根据组织结构查询所有人-", notes = "根据组织结构查询所有人-")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/queryUserListByOrgIdForPortal", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryUserListByOrgIdForPortal(@RequestBody Map<String, Object> map) {

        try {

            List<UserDto> queryList = userService.selectUserByQuery(map);
            MessageResult messageResult = ResponseModel.getResult(MessageInfo.GETSUCCESS, queryList);
            Boolean hasPost = (Boolean) map.get("hasPost");
            if (hasPost != null && hasPost) {
                List<UserDto> userDtoList = new ArrayList<UserDto>();
                int count = 0;

                for (UserDto user : queryList) {
                    count++;
                    if (count > 10) {
                        break;
                    }

                    Map<String, Object> postParam = new HashMap<String, Object>();
                    postParam.put("userId", user.getId());
                    List<Map<String, Object>> postMapList = postService.queryPostRoleListByUserId(postParam);
                    if (!postMapList.isEmpty()) {
                        user.setPostName((String) postMapList.get(0).get("roleName"));
                    }
                    userDtoList.add(user);

                }
                messageResult.setResult(userDtoList);

            } else {
                messageResult.setResult(queryList);
            }

            return messageResult;

        } catch (Exception e) {
            log.error("调用queryUserListByOrgIdForPortal方法:" + "【" + e.getMessage() + "】");
            //e.printStackTrace();
            return ResponseModel.getErrorResult();
        }


    }

    /**
     * 根据岗位查询用户列表
     *
     * @param map {"postId":"f61fde7a32154775a8ce85e2361402de","_search":false,"nd":1517985363377,"rows":-1,"page":1,"sidx":"","sord":"asc","start":0,"limit":-1}
     * @return {"msg":"查询成功！","result":[{"id":"8b331ea6e10e4295b0d21028e28e38c9","delflag":false,"realName":"kimchou-test","isMale":"1","loginName":"","password":"123456","type":"1","email":"zd@qq.com","birthday":"2018-02-06 16:03:06","mobile":"18579076156","remark":"asas","status":"1","belongOrgId":"1fadc6e6f5a34b40bc59d5add3364df5","belongOrgName":"测试公司","prefixName":"测试公司","workTime":"2018-02-06 17:54:29","disableTime":"2018-02-06 16:03:07","weChat":"199","sort":1}],"success":true}
     */
    @ApiOperation(value = "根据岗位查询用户列表", notes = "根据岗位查询用户列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/queryUserListByPostId", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryUserListByPostId(@RequestBody Map<String, Object> map) {
        try {
            List<UserDto> queryList = userService.queryUserListByPostId(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, queryList);
        } catch (Exception e) {
            log.error("调用queryUserListByPostId方法:" + "【" + e.getMessage() + "】");
            //e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 根据角色查询用户列表
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "根据角色查询用户列表", notes = "根据角色查询用户列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/queryUserListByRoleId", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryUserListByRoleId(@RequestBody Map<String, Object> map) {

        try {

            List<UserDto> queryList = userService.queryUserListByRoleId(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, queryList);

        } catch (Exception e) {
            log.error("调用queryUserListByRoleId方法:" + "【" + e.getMessage() + "】");
            //e.printStackTrace();
            return ResponseModel.getErrorResult();
        }


    }

    /**
     * 根据虚拟角色查询用户列表
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "根据虚拟角色查询用户列表", notes = "根据虚拟角色查询用户列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/queryRoleUserByRoleId", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryRoleUserByRoleId(@RequestBody Map<String, Object> map) {

        try {

            List<UserDto> queryList = userService.queryRoleUserByRoleId(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, queryList);

        } catch (Exception e) {
            log.error("调用queryRoleUserByRoleId方法:" + "【" + e.getMessage() + "】");
            //e.printStackTrace();
            return ResponseModel.getErrorResult();
        }


    }

    /**
     * 获取符合条件的用户树列表
     *
     * @param map {"rootDelFlag":0,"orgDelFlag":0,"userDelFlag":0,"rootStatus":1,"userStatus":1,"orgStatus":1}
     * @return
     */
    @ApiOperation(value = "获取符合条件的用户树列表", notes = "获取符合条件的用户树列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/getUserTree", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult getUserTree(@RequestBody Map<String, Object> map) {
        try {
            List<OrgnazationNodeDto> queryList = userService.getUserTree(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, queryList);
        } catch (Exception e) {
            log.error("调用getUserTree方法:" + "【" + e.getMessage() + "】");
            //e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 获取当前登录用户
     *
     * @return 业务对象
     */
    @ApiOperation(value = "获取当前登录用户", notes = "获取当前登录用户")
    @RequestMapping(value = "/getMyInfo", method = RequestMethod.GET)
    public @ResponseBody
    MessageResult getMyInfo() {
        try {
            UserDto result = userService.getMyInfo();
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, result);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }


    }

    /**
     * 修改密码
     */
    @ApiOperation(value = "修改密码", notes = "修改密码")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/updateMyPwd", method = RequestMethod.POST)
    public @ResponseBody
    MessageResult updateMyPwd(@RequestBody Map<String, Object> map) {
        try {
            int result = userService.updatePwd(map);
            return ResponseModel.getResult(MessageInfo.UPDATESUCCESS, result);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 根据用户Id，获取用户的公司，部门，项目，分期
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "根据用户Id，获取用户的公司，部门，项目，分期", notes = "根据用户Id，获取用户的公司，部门，项目，分期")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/getOrgInfoByUserId", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult getOrgInfoByUserId(@RequestBody Map<String, Object> map) {
        try {
            AuthenticationDto result = userService.getOrgInfoByUserId(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, result);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

    }

    /**
     * 根据用户Id返回用户信息（可以多个）
     *
     * @param map
     * @return
     */

    @ApiOperation(value = "根据用户Id返回用户信息（可以多个）", notes = "根据用户Id返回用户信息（可以多个）")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/getUserInfoByUserIds", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult getUserInfoByUserIds(@RequestBody Map<String, Object> map) {
        try {
            List<Map<String, String>> result = userService.getUserInfoByUserIds(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, result);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 根据搜索条件查询用户及其岗位
     *
     * @param map
     * @return
     */

    @ApiOperation(value = "根据搜索条件查询用户及其岗位", notes = "根据搜索条件查询用户及其岗位")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/queryUserAndPostsByUname", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryUserAndPostsByUname(@RequestBody Map<String, Object> map) {
        try {
            List<Map<String, Object>> result = userService.queryUserAndPostsByUname(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, result);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 根据loginNames获取人员DTO
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "根据loginNames获取人员DTO", notes = "根据loginNames获取人员DTO")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/getUserByUserLoginNames", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult getUserByUserLoginNames(@RequestBody Map<String, Object> map) {

        try {

            List<UserDto> queryList = userService.getUserByUserLoginNames(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, queryList);

        } catch (Exception e) {
            log.error("调用getUserByUserLoginNames方法:" + "【" + e.getMessage() + "】");
            //e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }
}
