package com.jzy.hio.sys.sys.base.controller;

import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.OpeLogInfo;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.sys.sys.base.dto.BaseProjectTypeDto;
import com.jzy.hio.sys.sys.base.entity.BaseProjectType;
import com.jzy.hio.sys.sys.base.service.BaseProjectTypeService;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

/**
 * 产品类型控制层
 * 
 * @author admin
 *
 */
@Controller
@RequestMapping("/sys/base/baseProjectType")
@Api(tags = "产品类型控制层", description = "")
public class BaseProjectTypeController {

	private static Logger			log	= LoggerFactory.getLogger(BaseProjectTypeController.class);

	// @Autowired
	// private BaseProjectTypeDtoServiceCustomer baseProjectTypeDtoServiceCustomer;

	@Autowired
	private BaseProjectTypeService	baseProjectTypeService;

	/**
	 * 根据Id获取业务对象
	 * 
	 * @param id
	 *            业务对象主键
	 * 
	 * @return 业务对象
	 */
	@ApiOperation(value = "根据Id获取业务对象", notes = "根据Id获取业务对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "id", dataType = "String", value = "id", required = true) })
	@RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
	public @ResponseBody MessageResult get(@PathVariable("id") String id) {
		try {
			BaseProjectType result = baseProjectTypeService.getObjectById(id);
			return ResponseModel.getResult(MessageInfo.GETSUCCESS, result);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return ResponseModel.getErrorResult();
		}

		/*
		 * MessageResult result=new MessageResult(); try { SecurityUserBeanInfo
		 * userBeanInfo = LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo); String
		 * dubboResultInfo=baseProjectTypeDtoServiceCustomer.getObjectById(userJson,
		 * "{\"id\":\""+id+"\"}"); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); BaseProjectTypeDto
		 * baseProjectTypeDto=JacksonUtils.fromJson(resultInfo,
		 * BaseProjectTypeDto.class); result.setResult(baseProjectTypeDto);
		 * result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		 * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); } } catch (Exception e) { ////e.printStackTrace();
		 * log.error("调用get方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
		 * result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】"); } return
		 * result;
		 */
	}

	/**
	 * 返回分页对象
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value = "返回分页对象", notes = "返回分页对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "map", required = true) })
	@RequestMapping(value = "/page", method = { RequestMethod.POST }, consumes = "application/json")
	public @ResponseBody MessageResult page(@RequestBody Map<String, Object> map) {
		try {
			Page page = baseProjectTypeService.getPage(map, (Integer) map.get("start"), (Integer) map.get("limit"));
			return ResponseModel.getResult(MessageInfo.GETSUCCESS, page);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return ResponseModel.getErrorResult();
		}

		/*
		 * MessageResult result=new MessageResult(); String paramaterJson =
		 * JacksonUtils.toJson(map); try { SecurityUserBeanInfo userBeanInfo =
		 * LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo); String
		 * dubboResultInfo=baseProjectTypeDtoServiceCustomer.getPage(userJson,
		 * paramaterJson); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); PageBeanInfo
		 * pageInfo=JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
		 * result.setResult(pageInfo);
		 * result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		 * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); } } catch (Exception e) { ////e.printStackTrace();
		 * log.error("调用page方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
		 * result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】"); } return
		 * result;
		 */
	}

	/**
	 * 返回符合条件的列表
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "map", required = true) })
	@RequestMapping(value = "/queryList", method = { RequestMethod.POST }, consumes = "application/json")
	public @ResponseBody MessageResult queryList(@RequestBody Map<String, Object> map) {
		try {
			List list = baseProjectTypeService.queryListByExample(map);
			return ResponseModel.getResult(MessageInfo.GETSUCCESS, list);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return ResponseModel.getErrorResult();
		}

		/*
		 * MessageResult result=new MessageResult(); String paramaterJson =
		 * JacksonUtils.toJson(map); try { SecurityUserBeanInfo userBeanInfo =
		 * LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo); String
		 * dubboResultInfo=baseProjectTypeDtoServiceCustomer.queryList(userJson,
		 * paramaterJson); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); List<BaseProjectTypeDto>
		 * list=JacksonUtils.fromJson(resultInfo,
		 * ArrayList.class,BaseProjectTypeDto.class); result.setResult(list);
		 * result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		 * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); }
		 * 
		 * } catch (Exception e) { ////e.printStackTrace();
		 * log.error("调用queryList方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+
		 * "】"); result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】"); } return
		 * result;
		 */
	}

	/**
	 * 保存实体对象
	 * 
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "保存实体对象", notes = "保存实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "bean", dataType = "String", value = "bean", required = true) })
	@RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
	@OpeLogInfo(node = "新增产品类型")
	public @ResponseBody MessageResult save(@RequestBody BaseProjectType t) {
		try {
			int result = baseProjectTypeService.saveBaseProjectType(t);
			return ResponseModel.getResult(MessageInfo.SAVESUCCESS, result);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return ResponseModel.getErrorResult();
		}

		/*
		 * MessageResult result=new MessageResult(); try { SecurityUserBeanInfo
		 * userBeanInfo = LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo); String saveJson= JacksonUtils.toJson(t);
		 * String dubboResultInfo=baseProjectTypeDtoServiceCustomer.save(userJson,
		 * saveJson); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); BaseProjectTypeDto
		 * baseProjectTypeDto=JacksonUtils.fromJson(resultInfo,
		 * BaseProjectTypeDto.class); result.setResult(baseProjectTypeDto);
		 * result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
		 * result.setMsg(dubboServiceResultInfo.getMsg()); }else{
		 * result.setSuccess(MessageInfo.SAVEERROR.isResult());
		 * result.setMsg(dubboServiceResultInfo.getMsg()); } } catch (Exception e) { try
		 * { ////e.printStackTrace(); ObjectMapper mapper = new ObjectMapper(); String
		 * paramJson = mapper.writeValueAsString(t);
		 * log.error("调用save方法:  【参数"+paramJson+"】======"+"【"+e.getMessage()+"】");
		 * result.setSuccess(MessageInfo.SAVEERROR.isResult());
		 * result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+e.getMessage()+"】"); } catch
		 * (JsonProcessingException e1) { // TODO Auto-generated catch block
		 * //e1.printStackTrace(); }
		 * 
		 * } return result;
		 */
	}

	/**
	 * 删除实体对象
	 * 
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "删除实体对象", notes = "删除实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "id", value = "id", required = true, dataType = "String") })
	@RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
	public @ResponseBody MessageResult delete(@PathVariable("id") String id) {
		try {
			int result = baseProjectTypeService.deleteObjectById(id);
			return ResponseModel.getResult(MessageInfo.DELETESUCCESS, result);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return ResponseModel.getErrorResult();
		}

		/*
		 * MessageResult result=new MessageResult(); try { SecurityUserBeanInfo
		 * userBeanInfo = LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo); String
		 * dubboResultInfo=baseProjectTypeDtoServiceCustomer.deleteObjectById(userJson,
		 * "{\"id\":\""+id+"\"}"); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); BaseProjectTypeDto
		 * baseProjectTypeDto=JacksonUtils.fromJson(resultInfo,
		 * BaseProjectTypeDto.class); result.setResult(baseProjectTypeDto);
		 * result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
		 * result.setMsg(MessageInfo.DELETESUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.DELETEERROR.isResult());
		 * result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); } } catch (Exception e) { ////e.printStackTrace();
		 * log.error("调用delete方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
		 * result.setSuccess(MessageInfo.DELETEERROR.isResult());
		 * result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】"); }
		 * 
		 * return result;
		 */
	}

	/**
	 * 删除实体对象
	 * 
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "删除实体对象", notes = "删除实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "ids", value = "ids", required = true, dataType = "String") })
	@RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
	@OpeLogInfo(node = "删除产品类型")
	public @ResponseBody MessageResult deleteBatch(@PathVariable("ids") String ids) {
		try {
			int result = baseProjectTypeService.deletePseudoProjectTypeById(ids);
			return ResponseModel.getResult(MessageInfo.DELETESUCCESS, result);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return ResponseModel.getErrorResult();
		}

		/*
		 * MessageResult result=new MessageResult(); try { SecurityUserBeanInfo
		 * userBeanInfo = LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo); String
		 * dubboResultInfo=baseProjectTypeDtoServiceCustomer.deletePseudoObjectById(
		 * userJson, "{\"id\":\""+ids+"\"}"); DubboServiceResultInfo
		 * dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo,
		 * DubboServiceResultInfo.class); if(dubboServiceResultInfo.isSucess()){ String
		 * resultInfo= dubboServiceResultInfo.getResult(); BaseProjectTypeDto
		 * baseProjectTypeDto=JacksonUtils.fromJson(resultInfo,
		 * BaseProjectTypeDto.class); result.setResult(baseProjectTypeDto);
		 * result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
		 * result.setMsg(MessageInfo.DELETESUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.DELETEERROR.isResult());
		 * result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); } } catch (Exception e) { ////e.printStackTrace();
		 * log.error("调用delete方法:  【参数"+ids+"】======"+"【"+e.getMessage()+"】");
		 * result.setSuccess(MessageInfo.DELETEERROR.isResult());
		 * result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】"); }
		 * 
		 * return result;
		 */
	}

	/**
	 * 修改修改实体对象
	 * 
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "修改修改实体对象", notes = "修改修改实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(name = "id", value = "id", required = true, dataType = "Integer", paramType = "path"),
			@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON") })
	@RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
	@OpeLogInfo(node = "修改产品类型")
	public @ResponseBody MessageResult update(@PathVariable("id") String id,
			@RequestBody BaseProjectType baseProjectType) {
		try {
			BaseProjectType oldBaseProjectType = baseProjectTypeService.getObjectById(id);
			BeanUtils.copyProperties(baseProjectType, oldBaseProjectType);
			int updateCount = 0;
			if (oldBaseProjectType != null) {
				updateCount = baseProjectTypeService.updateProjectType(oldBaseProjectType);
			}
			return ResponseModel.getResult(MessageInfo.UPDATESUCCESS, updateCount);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return ResponseModel.getErrorResult();
		}

		/*
		 * MessageResult result=new MessageResult(); BaseProjectTypeDto
		 * baseProjectTypeDto=null; try { SecurityUserBeanInfo userBeanInfo =
		 * LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo); String
		 * dubboResultInfo=baseProjectTypeDtoServiceCustomer.getObjectById(userJson,
		 * "{\"id\":\""+id+"\"}"); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); Map<String,Object>
		 * oldMap=JacksonUtils.fromJson(resultInfo, HashMap.class); oldMap.putAll(map);
		 * String updateJson= JacksonUtils.toJson(oldMap); String
		 * updateDubboResultInfo=baseProjectTypeDtoServiceCustomer.update(userJson,
		 * updateJson); DubboServiceResultInfo updateDubboServiceResultInfo=
		 * JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
		 * if(updateDubboServiceResultInfo.isSucess()){ Integer
		 * i=JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(),
		 * Integer.class); result.setResult(i);
		 * result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
		 * result.setMsg(MessageInfo.UPDATESUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.UPDATEERROR.isResult());
		 * result.setMsg(updateDubboServiceResultInfo.getMsg()); } }else{
		 * result.setSuccess(MessageInfo.UPDATEERROR.isResult());
		 * result.setMsg("不存在更新的对象"); } } catch (Exception e) { try{
		 * ////e.printStackTrace(); ObjectMapper mapper = new ObjectMapper(); String
		 * paramJson = mapper.writeValueAsString(baseProjectTypeDto);
		 * log.error("调用update方法:  【参数"+id+","+paramJson+"】======"+"【"+e.getMessage()+
		 * "】"); result.setSuccess(MessageInfo.UPDATEERROR.isResult());
		 * result.setMsg(MessageInfo.UPDATEERROR.getMsg()+"【"+e.getMessage()+"】");
		 * }catch (JsonProcessingException e1) { // TODO Auto-generated catch block
		 * //e1.printStackTrace(); }
		 * 
		 * } return result;
		 */
	}

	/**
	 * 对产品类型排序(上移/下移/置顶/置底)
	 * 
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "修改产品类型排序 上移 下移 置顶 置底", notes = "修改产品类型排序 上移 下移 置顶 置底")
	@ApiImplicitParams({
			@ApiImplicitParam(name = "id", value = "id", required = true, dataType = "Integer", paramType = "path"),
			@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON") })
	@RequestMapping(value = "/updateSort/{id}", method = RequestMethod.PUT, consumes = "application/json")
	@OpeLogInfo(node = "修改产品类型排序 上移 下移 置顶 置底")
	public @ResponseBody MessageResult updateSort(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
		try {
			BaseProjectType object = baseProjectTypeService.getObjectById(id);
			int updateCount = baseProjectTypeService.updateSort(object, map);
			return ResponseModel.getResult(MessageInfo.UPDATESUCCESS, updateCount);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return ResponseModel.getErrorResult();
		}

		/*
		 * MessageResult result=new MessageResult(); try { SecurityUserBeanInfo
		 * userBeanInfo = LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo); String
		 * dubboResultInfo=baseProjectTypeDtoServiceCustomer.updateSort(userJson,
		 * "{\"id\":\""+id+"\"}",map); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); int
		 * i=JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), Integer.class);
		 * result.setResult(i);
		 * result.setSuccess(MessageInfo.UPDATESORTSUCCESS.isResult());
		 * result.setMsg(MessageInfo.UPDATESORTSUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.UPDATESORTERROR.isResult());
		 * result.setMsg(MessageInfo.UPDATESORTERROR.getMsg()+"【"+dubboServiceResultInfo
		 * .getExceptionMsg()+"】"); } } catch (Exception e) { ////e.printStackTrace();
		 * log.error("调用修改状态方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
		 * result.setSuccess(MessageInfo.UPDATESORTERROR.isResult());
		 * result.setMsg(MessageInfo.UPDATESORTERROR.getMsg()+"【"+e.getMessage()+"】"); }
		 * 
		 * return result;
		 */
	}

	/**
	 * 修改产品类型名称
	 * 
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "修改产品类型名称", notes = "修改产品类型名称")
	@ApiImplicitParams({
			@ApiImplicitParam(name = "id", value = "id", required = true, dataType = "Integer", paramType = "path"),
			@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON") })
	@RequestMapping(value = "/updateName/{id}", method = RequestMethod.PUT, consumes = "application/json")
	@OpeLogInfo(node = "修改产品类型名称")
	public @ResponseBody MessageResult updateName(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
		try {
			BaseProjectType object = baseProjectTypeService.getObjectById(id);
			int updateCount = baseProjectTypeService.updateName(object, map);
			return ResponseModel.getResult(MessageInfo.UPDATESUCCESS, updateCount);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return ResponseModel.getErrorResult();
		}

		/*
		 * MessageResult result=new MessageResult(); try { SecurityUserBeanInfo
		 * userBeanInfo = LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo); String
		 * dubboResultInfo=baseProjectTypeDtoServiceCustomer.updateName(userJson,
		 * "{\"id\":\""+id+"\"}",map); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); int
		 * i=JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), Integer.class);
		 * result.setResult(i); result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
		 * result.setMsg(MessageInfo.UPDATESUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.UPDATEERROR.isResult());
		 * result.setMsg(dubboServiceResultInfo.getMsg()); } } catch (Exception e) {
		 * ////e.printStackTrace();
		 * log.error("调用修改状态方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
		 * result.setSuccess(MessageInfo.UPDATEERROR.isResult());
		 * result.setMsg(MessageInfo.UPDATEERROR.getMsg()+"【"+e.getMessage()+"】"); }
		 * 
		 * return result;
		 */

	}

	/**
	 * 修改产品类型的启用禁用
	 * 
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "修改产品类型的启用禁用", notes = "修改产品类型的启用禁用")
	@ApiImplicitParams({
			@ApiImplicitParam(name = "id", value = "id", required = true, dataType = "Integer", paramType = "path"),
			@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON") })
	@RequestMapping(value = "/updateStatus/{id}", method = RequestMethod.PUT, consumes = "application/json")
	@OpeLogInfo(node = "修改产品类型状态")
	public @ResponseBody MessageResult updateStatus(@PathVariable("id") String id,
			@RequestBody Map<String, Object> map) {
		try {
			BaseProjectType object = baseProjectTypeService.getObjectById(id);
			int updateCount = baseProjectTypeService.updateStatus(object, map);
			return ResponseModel.getResult(MessageInfo.UPDATESUCCESS, updateCount);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return ResponseModel.getErrorResult();
		}

		/*
		 * MessageResult result=new MessageResult(); try { SecurityUserBeanInfo
		 * userBeanInfo = LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo); String paramJson = JacksonUtils.toJson
		 * (paramMap); String
		 * dubboResultInfo=baseProjectTypeDtoServiceCustomer.updateStatus(userJson,
		 * paramJson); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); int
		 * i=JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), Integer.class);
		 * result.setResult(i);
		 * result.setSuccess(MessageInfo.UPDATESTATUSSUCCESS.isResult());
		 * result.setMsg(MessageInfo.UPDATESTATUSSUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.UPDATESTATUSERROR.isResult());
		 * result.setMsg(MessageInfo.UPDATESTATUSERROR.getMsg()+"【"+
		 * dubboServiceResultInfo.getExceptionMsg()+"】"); } } catch (Exception e) {
		 * ////e.printStackTrace();
		 * log.error("调用修改状态方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
		 * result.setSuccess(MessageInfo.UPDATESTATUSERROR.isResult());
		 * result.setMsg(MessageInfo.UPDATESTATUSERROR.getMsg()+"【"+e.getMessage()+"】");
		 * }
		 * 
		 * return result;
		 */
	}

	/**
	 * 返回符合条件的列表
	 * 
	 * @param paramater
	 * @return
	 */
	@ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "map", required = true) })
	@RequestMapping(value = "/getTypetree", method = { RequestMethod.POST }, consumes = "application/json")
	public @ResponseBody MessageResult getTypetree(@RequestBody Map<String, Object> map) {
		try {
			List<BaseProjectTypeDto> list = baseProjectTypeService.queryBaseProjecType(map);
			return ResponseModel.getResult(MessageInfo.GETSUCCESS, list);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return ResponseModel.getErrorResult();
		}

		/*
		 * MessageResult result=new MessageResult(); String paramaterJson =
		 * JacksonUtils.toJson(map); try { SecurityUserBeanInfo userBeanInfo =
		 * LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo); String
		 * dubboResultInfo=baseProjectTypeDtoServiceCustomer.getTypetree(userJson,
		 * paramaterJson); DubboServiceResultInfo dubboServiceResultInfo=
		 * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		 * if(dubboServiceResultInfo.isSucess()){ String resultInfo=
		 * dubboServiceResultInfo.getResult(); List<BaseProjectTypeDto>
		 * list=JacksonUtils.fromJson(resultInfo,
		 * ArrayList.class,BaseProjectTypeDto.class); result.setResult(list);
		 * result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		 * result.setMsg(MessageInfo.GETSUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); }
		 * 
		 * } catch (Exception e) { ////e.printStackTrace();
		 * log.error("调用queryList方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+
		 * "】"); result.setSuccess(MessageInfo.GETERROR.isResult());
		 * result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】"); } return
		 * result;
		 */
	}

	/**
	 * 伪删除实体对象
	 * 
	 * @param t
	 * @return
	 */
	@ApiOperation(value = "伪删除实体对象", notes = "伪删除实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "id", value = "id", required = true, dataType = "String") })
	@RequestMapping(value = "/deletePseudo/{id}", method = RequestMethod.DELETE)
	public @ResponseBody MessageResult deletePseudo(@PathVariable("id") String id) {
		try {
			int result = baseProjectTypeService.deletePseudoProjectTypeById(id);
			return ResponseModel.getResult(MessageInfo.DELETESUCCESS, result);
		} catch (Exception e) {
			log.error("-----------" + e.getMessage() + "------------");
			e.printStackTrace();
			return ResponseModel.getErrorResult();
		}

		/*
		 * MessageResult result=new MessageResult(); try { SecurityUserBeanInfo
		 * userBeanInfo = LoginUtils.getSecurityUserBeanInfo(); String userJson =
		 * JacksonUtils.toJson(userBeanInfo); String
		 * dubboResultInfo=baseProjectTypeDtoServiceCustomer.deletePseudoObjectById(
		 * userJson, "{\"id\":\""+id+"\"}"); DubboServiceResultInfo
		 * dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo,
		 * DubboServiceResultInfo.class); if(dubboServiceResultInfo.isSucess()){ String
		 * resultInfo= dubboServiceResultInfo.getResult(); BaseProjectTypeDto
		 * baseProjectTypeDto=JacksonUtils.fromJson(resultInfo,
		 * BaseProjectTypeDto.class); result.setResult(baseProjectTypeDto);
		 * result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
		 * result.setMsg(MessageInfo.DELETESUCCESS.getMsg()); }else{
		 * result.setSuccess(MessageInfo.DELETEERROR.isResult());
		 * result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.
		 * getExceptionMsg()+"】"); } } catch (Exception e) { ////e.printStackTrace();
		 * log.error("调用delete方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
		 * result.setSuccess(MessageInfo.DELETEERROR.isResult());
		 * result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】"); }
		 * 
		 * return result;
		 */
	}

}