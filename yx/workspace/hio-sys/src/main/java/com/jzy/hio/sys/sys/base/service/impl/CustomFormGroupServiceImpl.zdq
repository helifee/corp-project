package com.jzy.hio.sys.sys.base.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.base.utils.DubboServiceResultInfo;
import com.jzy.hio.base.utils.IDGenerator;
import com.jzy.hio.sys.sys.base.dto.CustomFormDto;
import com.jzy.hio.sys.sys.base.dto.CustomFormGroupDto;
import com.jzy.hio.sys.sys.base.dto.CustomFormNodeDto;
import com.jzy.hio.sys.sys.base.entity.CustomFormGroup;
import com.jzy.hio.sys.sys.base.mapper.CustomFormGroupDao;
import com.jzy.hio.sys.sys.base.service.CustomFormGroupService;
import com.jzy.hio.sys.sys.res.dto.OperationDto;
import com.jzy.hio.sys.sys.res.dto.ResourceDto;
import com.jzy.hio.sys.sys.res.entity.AppSystem;
import com.jzy.hio.sys.sys.res.entity.Operation;
import com.jzy.hio.sys.sys.res.entity.Resource;
import com.jzy.hio.sys.sys.res.service.AppSystemService;
import com.jzy.hio.sys.sys.res.service.OperationService;
import com.jzy.hio.sys.sys.res.service.ResourceService;
import com.jzy.hio.sys.sys.res.utils.InvalidCustomException;
import com.jzy.tools.data.JacksonUtils;


/**
 * @author admin
 */

@RestController
@RequestMapping("sys/customFormGroupServiceImpl")
@Service
public class CustomFormGroupServiceImpl extends BaseServiceImpl<String, CustomFormGroup> implements CustomFormGroupService {


    @Autowired
    private CustomFormGroupDao customFormGroupDao;


//	@Autowired
//	private EntryDtoServiceCustomer entryDtoServiceCustomer;

    //菜单注册服务
//    @Autowired
//    private ResourceDtoServiceCustomer resourceDtoServiceCustomer;
//	@Autowired
//	private BusinessObjectService businessObjectService;
    //功能点注册
//    @Autowired
//    private OperationDtoServiceCustomer operationDtoServiceCustomer;

    @Autowired
    private OperationService operationService;

    @Autowired
    private ResourceService resourceService;

    @Autowired
    private AppSystemService appSystemService;

    private static Logger log = LoggerFactory.getLogger(CustomFormGroupServiceImpl.class);

    @Override
    public List<CustomFormDto> getTree(Map<String, Object> map) {
        return customFormGroupDao.getTree(map);
    }

    @Override
    public Integer queryMaxSort() {
        return customFormGroupDao.queryMaxSort();
    }

    @Override
    public List<CustomFormNodeDto> queryCustomGroupSort(Map map) {
        return customFormGroupDao.queryCustomGroupSort(map);
    }

    @Override
    public List<CustomFormNodeDto> queryCustomSort() {
        return customFormGroupDao.queryCustomSort();
    }

    @Override
    public Integer getCustomFormCountByGroupId(String id) {
        return customFormGroupDao.getCustomFormCountByGroupId(id);
    }

    @Override
    public String validateBeforeSave(CustomFormGroup customFormGroup) {
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        CustomFormGroupDto customFormGroupDtoVal = this.validateIsExist(customFormGroup);
        try {
            if (customFormGroupDtoVal.isCodeExist() || customFormGroupDtoVal.isNameExist()) {
                info.setResult(JacksonUtils.toJson(customFormGroupDtoVal));
                info.setSucess(true);
                info.setMsg("编码或名称重复！");
            } else {
//                CustomFormGroup customFormGroup = JacksonUtils.fromJson(saveJson, CustomFormGroup.class);
                Integer maxSort = customFormGroupDao.queryMaxSort();
                customFormGroup.setSort(maxSort == null ? 1L : Long.valueOf(maxSort + 1l));
                customFormGroup.setDelflag(false);
                customFormGroup.setResourceId(IDGenerator.getUUID());
                customFormGroupDao.insert(customFormGroup);

                CustomFormGroup customFormGroupNew = customFormGroupDao.selectByPrimaryKey(customFormGroup.getId());

                //自定义表单分类推送菜单
                try {
                    this.registerMenu(customFormGroup);
                } catch (Exception e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
//				final String entryJson;
//				try {
//					EntryDto entryDto=new EntryDto();
//					entryDto.setId(customFormGroupNew.getId());
//					entryDto.setCode(customFormGroupNew.getCode());
//					entryDto.setName(customFormGroupNew.getName());
//					entryDto.setStatus(1);
//					entryDto.setDelflag(false);
//					entryDto.setIsInner(1);
//					entryDto.setParentId("0");
//					entryJson= JacksonUtils.toJson(entryDto);
//					new Thread(new Runnable(){
//						@Override
//						public void run() {
//							entryDtoServiceCustomer.save(userInfo, entryJson);
//						}
//					}).start();
//				} catch (Exception e) {
//					//e.printStackTrace();
//				}

                BeanUtils.copyProperties(customFormGroupNew, customFormGroupDtoVal);
                info.setResult(JacksonUtils.toJson(customFormGroupDtoVal));
                info.setSucess(true);
                info.setMsg("保存成功！");
            }
        } catch (DataAccessException e) {
            //e.printStackTrace();
            info.setSucess(false);
            info.setMsg("保存失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }


    /**
     * @throws Exception
     * @Description:推送菜单
     * @author:zhangfangzhi
     * @date 2017年7月12日 下午3:05:51
     * @version V1.0
     */
    private String registerMenu(CustomFormGroup customForm) throws Exception {
        Map<String, Object> map2 = new HashMap<String, Object>();
//		Resource	result = resourceService.getObjectById(resource.getId());
        map2.put("delflag", false);
        map2.put("id", customForm.getResourceId());
        //update by gyh
        List<ResourceDto> list = resourceService.queryListByCondition(map2);
//		if(list!=null &&list.size()>0){
//			info.setResult(JacksonUtils.toJson(list.get(0)));
//		}else{
//			info.setResult(JacksonUtils.toJson(null));
//		}
//    	String menuResult = resourceDtoServiceCustomer.getObjectById(userInfo, "{\"id\":\"" + customForm.getResourceId() + "\"}");
//        Map<String, Object> menuResultMap = JacksonUtils.fromJson(menuResult, HashMap.class);
//        String menuStr = (String) menuResultMap.get("result");
//        Map<String, Object> oldMenuMap = JacksonUtils.fromJson(menuStr, HashMap.class);
        String registerMenuResult = null;
        Resource resource = new Resource();
        resource.setId(customForm.getResourceId());//编码
        resource.setCode(customForm.getCode() + "_MENU");//菜单编码
        resource.setName(customForm.getName());//菜单名称
        resource.setUrl(null);//菜单url
        resource.setAppId("9d6cba61c4b24a5699c339a49471a0e7");//应用Id
        if (customForm.getParentId() != null && "0".equals(customForm.getParentId())) {
            resource.setParentId("23087b7b97324c93afd817a5c400b8ea");//一级分类
        } else {
            CustomFormGroup customFormGroupParent = customFormGroupDao.selectByPrimaryKey(customForm.getParentId());
            resource.setParentId(customFormGroupParent.getResourceId());//二级分类
        }
        resource.setStatus("1");//状态
        resource.setSort(customForm.getSort());//排序
        resource.setOpenmode("0");//打开方式
        resource.setRemark("");//说明
        resource.setIsoutmenu("0");//是否外部链接
//        Map<String, Object> resourceMap = new HashMap<String, Object>();
//    	resourceMap.put("id", customForm.getResourceId());//编码
//    	resourceMap.put("code", customForm.getCode()+"_MENU");//菜单编码
//    	resourceMap.put("name", customForm.getName());//菜单名称
//    	resourceMap.put("url", null);//菜单url
//    	resourceMap.put("appId", "9d6cba61c4b24a5699c339a49471a0e7");//应用Id
//    	if(customForm.getParentId()!=null && "0".equals(customForm.getParentId())){
//    		resourceMap.put("parentId", "23087b7b97324c93afd817a5c400b8ea");//一级分类
//    	}else{
//    		CustomFormGroup customFormGroupParent=customFormGroupDao.selectByPrimaryKey(customForm.getParentId());
//    		resourceMap.put("parentId", customFormGroupParent.getResourceId());//二级分类
//    	}
//    	resourceMap.put("status", 1);//状态
//    	resourceMap.put("sort", customForm.getSort());//排序
//    	resourceMap.put("openmode", 0);//打开方式
//    	resourceMap.put("remark", "");//说明
//    	resourceMap.put("isoutmenu", 0);//是否外部链接
        if (list != null && list.size() > 0) {
            //校验编码重复 add by gyh 2017-3-28
            Map<String, Object> param = new HashMap<String, Object>();
            param.put("code", customForm.getCode() + "_MENU");
            param.put("id", customForm.getResourceId());
            param.put("appId", "9d6cba61c4b24a5699c339a49471a0e7");
            Integer isc = resourceService.getCodeCount(param);
            if (isc > 0) {
                throw new InvalidCustomException("该业务系统下此菜单编码已存在，不可重复");
            }
            BeanUtils.copyProperties(list.get(0), resource);
            int result = resourceService.updateMenu(resource);
//        if (oldMenuMap != null) {
//            oldMenuMap.putAll(resourceMap);
//            registerMenuResult = resourceDtoServiceCustomer.update(userInfo, JacksonUtils.toJson(oldMenuMap));
        } else {
//        	Resource resource=JacksonUtils.fromJson(saveJson, Resource.class);
// 		   Map<String,Object> resourceMap=JacksonUtils.fromJson(saveJson, HashMap.class);
            //校验编码重复 add by gyh 2017-3-28
            Map<String, Object> param = new HashMap<String, Object>();
            param.put("code", customForm.getCode() + "_MENU");
            param.put("appId", "9d6cba61c4b24a5699c339a49471a0e7");
            Integer isc = resourceService.getCodeCount(param);
            if (isc > 0) {
                throw new InvalidCustomException("该业务系统下此菜单编码已存在，不可重复");
            }
            //排序号不输入，改为系统最大排序加1，同时维护全路径相关字段 add by gyh 2017-4-2
// 		   resourceMap.put("tableName", "pt_sys_res_resource");
            Map<String, Object> tableNameMap = new HashMap<String, Object>();
            tableNameMap.put("tableName", "pt_sys_res_resource");
            Long maxSort = appSystemService.getMaxSort(tableNameMap) + 1L;//排序号自动加1
            resource.setSort(maxSort);
            //菜单全路径
            if (resource.getParentId() != null && StringUtils.isNotBlank(resource.getParentId())) {
                String parentId = (String) resource.getParentId();
                Resource resP = resourceService.getObjectById(parentId);
                resource.setPrefixId(resP.getPrefixId() + "/" + resource.getId());
                resource.setPrefixName(resP.getPrefixName() + "/" + resource.getName());
                resource.setPrefixSort(resP.getPrefixSort() + "-" + String.format("B%05d", maxSort));
            } else {
                String appId = (String) resource.getAppId();
                AppSystem app = appSystemService.getObjectById(appId);
                resource.setPrefixId(app.getPrefixId() + "/" + resource.getId());
                resource.setPrefixName(app.getPrefixName() + "/" + resource.getName());
                resource.setPrefixSort(app.getPrefixSort() + "-" + String.format("B%05d", maxSort));
            }
            resourceService.save(resource);
//            registerMenuResult = resourceDtoServiceCustomer.save(userInfo, JacksonUtils.toJson(resourceMap));
        }

        //为新注册的菜单注册一个查询按钮
        Map<String, Object> operationMap = new HashMap<String, Object>();
        operationMap.put("name", "查询");
        operationMap.put("code", customForm.getCode() + "_QUERY");
        operationMap.put("appId", "9d6cba61c4b24a5699c339a49471a0e7");
        operationMap.put("resourceId", customForm.getResourceId());
        operationMap.put("type", "1");
        registOperation(operationMap, customForm.getCode() + "_QUERY", customForm.getResourceId());

        DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(registerMenuResult, DubboServiceResultInfo.class);
        if (!dubboServiceResultInfo.isSucess()) {
            throw new RuntimeException("菜单注册失败！");
        }

        return registerMenuResult;


//        String menuResult = resourceDtoServiceCustomer.getObjectById(userInfo, "{\"id\":\"" + customForm.getResourceId() + "\"}");
//        Map<String, Object> menuResultMap = JacksonUtils.fromJson(menuResult, HashMap.class);
//        String menuStr = (String) menuResultMap.get("result");
//        Map<String, Object> oldMenuMap = JacksonUtils.fromJson(menuStr, HashMap.class);
//        String registerMenuResult = null;
//        Map<String, Object> resourceMap = new HashMap<String, Object>();
//    	resourceMap.put("id", customForm.getResourceId());//编码
//    	resourceMap.put("code", customForm.getCode()+"_MENU");//菜单编码
//    	resourceMap.put("name", customForm.getName());//菜单名称
//    	resourceMap.put("url", null);//菜单url
//    	resourceMap.put("appId", "9d6cba61c4b24a5699c339a49471a0e7");//应用Id
//    	if(customForm.getParentId()!=null && "0".equals(customForm.getParentId())){
//    		resourceMap.put("parentId", "23087b7b97324c93afd817a5c400b8ea");//一级分类
//    	}else{
//    		CustomFormGroup customFormGroupParent=customFormGroupDao.getObjectById(customForm.getParentId());
//    		resourceMap.put("parentId", customFormGroupParent.getResourceId());//二级分类
//    	}
//    	resourceMap.put("status", 1);//状态
//    	resourceMap.put("sort", customForm.getSort());//排序
//    	resourceMap.put("openmode", 0);//打开方式
//    	resourceMap.put("remark", "");//说明
//    	resourceMap.put("isoutmenu", 0);//是否外部链接
//        if (oldMenuMap != null) {
//            oldMenuMap.putAll(resourceMap);
//            registerMenuResult = resourceDtoServiceCustomer.update(userInfo, JacksonUtils.toJson(oldMenuMap));
//        } else {
//            registerMenuResult = resourceDtoServiceCustomer.save(userInfo, JacksonUtils.toJson(resourceMap));
//        }
//        
//        //为新注册的菜单注册一个查询按钮
//        Map<String, Object> operationMap = new HashMap<String, Object>();
//        operationMap.put("name", "查询");
//        operationMap.put("code", customForm.getCode() + "_QUERY");
//        operationMap.put("appId", "9d6cba61c4b24a5699c339a49471a0e7");
//        operationMap.put("resourceId", customForm.getResourceId());
//        operationMap.put("type", "1");
//        registOperation(userInfo, operationMap);
//
//        DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(registerMenuResult, DubboServiceResultInfo.class);
//        if (!dubboServiceResultInfo.isSucess()) {
//            throw new RuntimeException("菜单注册失败！");
//        }
//
//        return registerMenuResult;
    }

    /**
     * 向系统中动态注册操作按钮
     *
     * @param userInfo
     * @param operationMap
     * @return
     * @throws Exception
     */
    private String registOperation(Map<String, Object> operationMap, String code, String resourceId) throws Exception {
        if (operationMap.get("limit") != null && Integer.valueOf(operationMap.get("limit").toString()) == -1) {
            operationMap.put("limit", 50);
        }
        List<OperationDto> list = operationService.queryListByCondition(operationMap);
//    	String operationResult = operationDtoServiceCustomer.queryList(userInfo, JacksonUtils.toJson(operationMap));
//        Map<String, Object> operationResultMap = JacksonUtils.fromJson(operationResult, HashMap.class);

//        String oldoperationStr = (String) operationResultMap.get("result");
//        List<Map<String, Object>> list = JacksonUtils.fromJson(oldoperationStr, ArrayList.class, HashMap.class);
//        Map<String, Object> oldoperationResultMap = null;//
        OperationDto operationDto = null;
        if (list != null && list.size() > 0) {
            operationDto = list.get(0);
        }

        Operation operation = new Operation();
        BeanUtils.copyProperties(operationDto, operation);
        String registerOperationResult = null;
        if (operationDto != null) {
            operation.setName("查询");
            operation.setCode(code);
            operation.setAppId("9d6cba61c4b24a5699c339a49471a0e7");
            operation.setResourceId(resourceId);
            operation.setType("1");
//            oldoperationResultMap.putAll(operationMap);
//            Operation operation=JacksonUtils.fromJson(updateJson, Operation.class);
            //校验编码重复 add by gyh 2017-3-28
            Map<String, Object> param = new HashMap<String, Object>();
            param.put("code", operationDto.getCode());
            param.put("id", operationDto.getId());
            param.put("menuId", operationDto.getResourceId());
            Integer isc = operationService.getCodeCount(param);
            if (isc > 0) {
                throw new InvalidCustomException("该菜单下此按钮编码已存在，不可重复");
            }
//			   int result=   operationService.update(operation);
            int result = operationService.updateButton(operation);
//            registerOperationResult = operationDtoServiceCustomer.update(userInfo, JacksonUtils.toJson(oldoperationResultMap));
        } else {
//        	Operation operation=JacksonUtils.fromJson(saveJson, Operation.class);
            //校验编码重复 add by gyh 2017-3-28
            Map<String, Object> param = new HashMap<String, Object>();
            param.put("code", operation.getCode());
            param.put("menuId", operation.getResourceId());
            Integer isc = operationService.getCodeCount(param);
            if (isc > 0) {
                throw new InvalidCustomException("该菜单下此按钮编码已存在，不可重复");
            }
            //排序号不输入，改为系统最大排序加1，同时维护全路径相关字段 add by gyh 2017-4-2
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("tableName", "pt_sys_res_operation");
            Long maxSort = appSystemService.getMaxSort(map) + 1L;//排序号自动加1
            operation.setSort(maxSort);
            //菜单全路径
            if (operation.getParentId() != null && StringUtils.isNotBlank(operation.getParentId())) {
                String parentId = operation.getParentId();
                Operation opeP = operationService.getObjectById(parentId);
                operation.setPrefixId(opeP.getPrefixId() + "/" + operation.getId());
                operation.setPrefixName(opeP.getPrefixName() + "/" + operation.getName());
                operation.setPrefixSort(opeP.getPrefixSort() + "-" + String.format("C%05d", operation.getSort()));
            } else {
                String menuId = operation.getResourceId();
                Resource res = resourceService.getObjectById(menuId);
                operation.setPrefixId(res.getPrefixId() + "/" + operation.getId());
                operation.setPrefixName(res.getPrefixName() + "/" + operation.getName());
                operation.setPrefixSort(res.getPrefixSort() + "-" + String.format("C%05d", maxSort));
            }
            operationService.save(operation);

            operationMap.put("id", IDGenerator.getUUID());
//            registerOperationResult = operationDtoServiceCustomer.save(userInfo, JacksonUtils.toJson(operationMap));
        }

        DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(registerOperationResult, DubboServiceResultInfo.class);
        if (!dubboServiceResultInfo.isSucess()) {
            throw new RuntimeException("按钮注册失败！");
        }
        return registerOperationResult;

        /*String operationResult = operationDtoServiceCustomer.queryList(userInfo, JacksonUtils.toJson(operationMap));
        Map<String, Object> operationResultMap = JacksonUtils.fromJson(operationResult, HashMap.class);

        String oldoperationStr = (String) operationResultMap.get("result");
        List<Map<String, Object>> list = JacksonUtils.fromJson(oldoperationStr, ArrayList.class, HashMap.class);
        Map<String, Object> oldoperationResultMap = null;//
        if (list != null && list.size() > 0) {
            oldoperationResultMap = list.get(0);
        }

        String registerOperationResult = null;
        if (oldoperationResultMap != null) {
            oldoperationResultMap.putAll(operationMap);
            registerOperationResult = operationDtoServiceCustomer.update(userInfo, JacksonUtils.toJson(oldoperationResultMap));
        } else {
            operationMap.put("id", IDGenerator.getUUID());
            registerOperationResult = operationDtoServiceCustomer.save(userInfo, JacksonUtils.toJson(operationMap));
        }

        DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(registerOperationResult, DubboServiceResultInfo.class);
        if (!dubboServiceResultInfo.isSucess()) {
            throw new RuntimeException("按钮注册失败！");
        }
        return registerOperationResult;*/
    }

    private CustomFormGroupDto validateIsExist(CustomFormGroup customFormGroup) {
//        CustomFormGroup customFormGroup = JacksonUtils.fromJson(saveJson, CustomFormGroup.class);
        Integer isExistCode = customFormGroupDao.validateIsExistCode(customFormGroup);
        Integer isExistName = customFormGroupDao.validateIsExistName(customFormGroup);
        CustomFormGroupDto customFormGroupDto = new CustomFormGroupDto();
        if (isExistCode != null && isExistCode > 0) {
            customFormGroupDto.setCodeExist(true);
        }
        if (isExistName != null && isExistName > 0) {
            customFormGroupDto.setNameExist(true);
        }
        return customFormGroupDto;
    }

    @Override
    public String validateBeforeUpdate(CustomFormGroup customFormGroup) {
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        CustomFormGroupDto customFormGroupDtoVal = this.validateIsExist(customFormGroup);
        try {
            if (customFormGroupDtoVal.isCodeExist() || customFormGroupDtoVal.isNameExist()) {
                info.setResult(JacksonUtils.toJson(customFormGroupDtoVal));
                info.setSucess(true);
                info.setMsg("编码或名称重复！");
            } else {
//                CustomFormGroup customFormGroup = JacksonUtils.fromJson(updateJson, CustomFormGroup.class);
                int result = customFormGroupDao.updateByPrimaryKey(customFormGroup);

                CustomFormGroup customFormGroupNew = customFormGroupDao.selectByPrimaryKey(customFormGroup.getId());

                //自定义表单分类推送菜单
                try {
                    this.registerMenu(customFormGroup);
                } catch (Exception e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
//				Map<String,Object> map=new HashMap<String,Object>();
//				map.put("name", customFormGroup.getName());
//				map.put("code", customFormGroup.getCode());
//				String dubboResultInfo=entryDtoServiceCustomer.getObjectById(userInfo, "{\"id\":\""+customFormGroup.getId()+"\"}");
//				DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//				if(dubboServiceResultInfo.isSucess()){
//					String resultInfo= dubboServiceResultInfo.getResult();
//					Map<String,Object> oldMap=JacksonUtils.fromJson(resultInfo, HashMap.class);
//					oldMap.putAll(map);
//					String updateJsonEntry= JacksonUtils.toJson(oldMap);
//					entryDtoServiceCustomer.update(userInfo, updateJsonEntry);
//				}

                BeanUtils.copyProperties(customFormGroupNew, customFormGroupDtoVal);
                info.setResult(JacksonUtils.toJson(customFormGroupDtoVal));
                info.setSucess(true);
                info.setMsg("更新对象成功!");
            }
        } catch (DataAccessException e) {
            //e.printStackTrace();
            info.setSucess(false);
            info.setMsg("保存失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public int deleteCustomGroupById(String id) {
        int result = 0;
        try {
//			result = customFormGroupDao.deletePseudoObjectById(id);
//			entryDtoServiceCustomer.deletePseudoObjectById(userInfo, "{\"id\":\""+id+"\"}");
            result = this.deleteButtonAndResourceById(id);
        } catch (Exception e) {
            log.error("删除对象失败!" + e.getMessage());
        }
        return result;
    }

    /**
     * @Description:删除按钮、菜单、表单分类
     * @author:zhangfangzhi
     * @date 2017年7月12日 下午5:09:38
     * @version V1.0
     */
    private int deleteButtonAndResourceById(String id) throws Exception {
        CustomFormGroup customForm = customFormGroupDao.selectByPrimaryKey(id);
        //先删除注册的按钮，如果按钮删除不成功则此数据无法删除
        Map<String, Object> pMap = new HashMap<String, Object>();
        pMap.put("resourceId", customForm.getResourceId());
        if (pMap.get("limit") != null && Integer.valueOf(pMap.get("limit").toString()) == -1) {
            pMap.put("limit", 50);
        }
        List<OperationDto> list = operationService.queryListByCondition(pMap);
//		String operationResult = operationDtoServiceCustomer.queryList(userInfo, JacksonUtils.toJson(pMap));
//        Map<String, Object> operationResultMap = JacksonUtils.fromJson(operationResult, HashMap.class);

//        String oldoperationStr = (String) operationResultMap.get("result");
//        List<Map<String, Object>> list = JacksonUtils.fromJson(oldoperationStr, ArrayList.class, HashMap.class);
//        Map<String, Object> oldoperationResultMap = null;//
        OperationDto operationDto = null;
        if (list != null && list.size() > 0) {
//            oldoperationResultMap = list.get(0);
            operationDto = list.get(0);
        }

        String delOperationResult = null;
        if (operationDto != null) {
//            delOperationResult = operationDtoServiceCustomer.deletePseudoObjectById(userInfo, "{\"id\":\"" + oldoperationResultMap.get("id") + "\"}");
            //判断是否存在下级按钮  add by gyh 2017-4-10
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("buttonId", operationDto.getId());
            Integer c = operationService.selectSonNum(map);
            if (c > 0) {
                throw new InvalidCustomException("存在下级按钮，不可删除");
            }
            int result = operationService.deletePseudoObjectById(operationDto.getId());
        }
//        if (delOperationResult != null) {
//            DubboServiceResultInfo delOperationResultInfo = JacksonUtils.fromJson(delOperationResult, DubboServiceResultInfo.class);
//            if (!delOperationResultInfo.isSucess()) {
//                throw new Exception("按钮删除失败！");
//            }
//        }

        //再删除注册的菜单，如果菜单删除不成功则此数据无法删除
        Map<String, Object> map = new HashMap<String, Object>();
//		Resource	result = resourceService.getObjectById(resource.getId());
        map.put("delflag", false);
        map.put("id", customForm.getResourceId());
        //update by gyh
        List<ResourceDto> ResourceDtoList = resourceService.queryListByCondition(map);
//		if(list!=null &&list.size()>0){
//			info.setResult(JacksonUtils.toJson(list.get(0)));
//		}else{
//			info.setResult(JacksonUtils.toJson(null));
//		}

//        String menuResult = resourceDtoServiceCustomer.getObjectById(userInfo, "{\"id\":\"" + customForm.getResourceId() + "\"}");
//        DubboServiceResultInfo menuResultInfo = JacksonUtils.fromJson(menuResult, DubboServiceResultInfo.class);
//        if (!menuResultInfo.isSucess()) {
//            throw new Exception("数据删除失败！");
//        }

//        String menuObj = menuResultInfo.getResult();
//        Map<String, Object> menuMap = JacksonUtils.fromJson(menuObj, HashMap.class);
//        String delMenuResult = null;
        int result;
        if (ResourceDtoList != null && ResourceDtoList.size() > 0) {
//            delMenuResult = resourceDtoServiceCustomer.deletePseudoObjectById(userInfo, "{\"id\":\"" + customForm.getResourceId() + "\"}");
            Map<String, Object> map2 = new HashMap<String, Object>();
            map2.put("menuId", ResourceDtoList.get(0).getId());
            Integer c = resourceService.selectSonNum(map2);
            if (c > 0) {
                throw new InvalidCustomException("下级菜单被引用，不可删除");
            }
            Resource resource = new Resource();
            BeanUtils.copyProperties(ResourceDtoList.get(0), resource);
            result = resourceService.deleteMeneAllSon(resource);
        }
//        if (result != null) {
//            DubboServiceResultInfo delMenuResultInfo = JacksonUtils.fromJson(delMenuResult, DubboServiceResultInfo.class);
//            if (!delMenuResultInfo.isSucess()) {
//                throw new Exception("菜单删除失败！");
//            }
//        }
        //删除业务对象的分类
        // TODO
//		BusinessObjectDto businessObjectDto = businessObjectService.getObjectByCode (customForm.getCode ());
//		if(businessObjectDto!=null){
//			businessObjectService.deletePseudoObjectById (businessObjectDto.getId ());
//		}
        return customFormGroupDao.deleteByPrimaryKey(id);
    }

    @Override
    public String saveGenerateData(CustomFormGroup customFormGroup) {
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            Map<String, Object> idMaps = this.getLevelOneMaps();
//			CustomFormGroup customFormGroup=JacksonUtils.fromJson(saveJson, CustomFormGroup.class);
            if (customFormGroup.getName() != null && !"".equals(customFormGroup.getName())) {
                String[] rowStrs = customFormGroup.getName().split(";");
                for (int i = 0; i < rowStrs.length; i++) {
                    String[] groupStrs = rowStrs[i].split(",");
                    CustomFormGroup customFormGroupNew = new CustomFormGroup();
                    customFormGroupNew.setId(IDGenerator.getUUID());
                    customFormGroupNew.setCode(groupStrs[3]);
                    customFormGroupNew.setName(groupStrs[2]);
                    customFormGroupNew.setDelflag(false);
                    customFormGroupNew.setSort(1000L + i);
                    customFormGroupNew.setCreateCompanyName("TestCustomFormGenerateData");//生成数据标识字段
                    customFormGroupNew.setResourceId(IDGenerator.getUUID());
                    if ("1".equals(customFormGroup.getCode())) {
                        customFormGroupNew.setParentId("0");
                    } else {
                        if (idMaps == null || idMaps.get(groupStrs[1]) == null) {
                            continue;
                        }
                        CustomFormGroup customFormGroupLevelOne = (CustomFormGroup) idMaps.get(groupStrs[1]);

                        customFormGroupNew.setParentId(customFormGroupLevelOne.getId());
                    }
                    customFormGroupDao.insert(customFormGroupNew);

                    //自定义表单分类推送菜单
                    try {
                        this.registerMenu(customFormGroupNew);
                    } catch (Exception e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }

//					EntryDto entryDto=new EntryDto();
//					entryDto.setId(customFormGroupNew.getId());
//					entryDto.setCode(customFormGroupNew.getCode());
//					entryDto.setName(customFormGroupNew.getName());
//					entryDto.setStatus(1);
//					entryDto.setDelflag(false);
//					entryDto.setCreateCompanyName("TestCustomFormGenerateData");
//					entryDto.setIsInner(1);
//					entryDto.setParentId("0");
//					String entryJson= JacksonUtils.toJson(entryDto);
//					entryDtoServiceCustomer.save(userInfo, entryJson);
                }
                info.setSucess(true);
                info.setMsg("保存成功！");
            }
        } catch (DataAccessException e) {
            //e.printStackTrace();
            info.setSucess(false);
            info.setMsg("保存失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    private Map<String, Object> getLevelOneMaps() {
        Map<String, Object> resultMap = new HashMap<String, Object>();
//		Map<String, Object> paramMap=new HashMap<String, Object>();
//		paramMap.put("parentId", "0");
//		paramMap.put("delflag", "0");
        CustomFormGroup customFormGroup2 = new CustomFormGroup();
        customFormGroup2.setParentId("0");
        customFormGroup2.setDelflag(false);
        List<CustomFormGroup> list = customFormGroupDao.selectByExample(customFormGroup2);
        if (list != null && list.size() > 0) {
            for (int i = 0; i < list.size(); i++) {
                CustomFormGroup customFormGroup = list.get(i);
                resultMap.put(customFormGroup.getCode(), customFormGroup);
            }
        }
        return resultMap;
    }

    @Override
    public Integer getCustomFormGroupCountByPID(String id) {
        return customFormGroupDao.getCustomFormGroupCountByPID(id);
    }


    @RequestMapping("/queryListForQuickEntry")
    @Override
    public List queryListForQuickEntry(Map map) {
        return customFormGroupDao.queryListForQuickEntry(map);
    }

    @Override
    public int updateSort(CustomFormGroup object, Map<String, Object> map) {
        String sortType = String.valueOf(map.get("sortType"));
        Long sort1 = object.getSort();
        String parentId = object.getParentId();
        map.clear();
        map.put("parentId", parentId);
        List<CustomFormGroup> rulerList = customFormGroupDao.queryListForQuickEntry(map);
        if ("1".equals(sortType)) {
            for (int i = 0; i < rulerList.size(); i++) {
                Long sort2 = rulerList.get(i).getSort();
                if (sort2.longValue() == sort1.longValue() && i != 0) {
                    Long sort3 = rulerList.get(i - 1).getSort();
                    rulerList.get(i - 1).setSort(sort2);
                    rulerList.get(i).setSort(sort3);
                    customFormGroupDao.updateSort(rulerList.get(i - 1));
                    customFormGroupDao.updateSort(rulerList.get(i));
                    break;
                }
            }
        } else if ("2".equals(sortType)) {
            for (int i = 0; i < rulerList.size(); i++) {
                Long sort2 = rulerList.get(i).getSort();
                if (sort2.longValue() == sort1.longValue() && i != rulerList.size() - 1) {
                    Long sort3 = rulerList.get(i + 1).getSort();
                    rulerList.get(i + 1).setSort(sort2);
                    rulerList.get(i).setSort(sort3);
                    customFormGroupDao.updateSort(rulerList.get(i + 1));
                    customFormGroupDao.updateSort(rulerList.get(i));
                    break;
                }
            }
        }
        return 1;
    }
}
