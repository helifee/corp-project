package com.jzy.hio.sys.sys.res.controller;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.OpeLogInfo;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.sys.sys.res.entity.FuncPermission;
import com.jzy.hio.sys.sys.res.service.FuncPermissionService;
import com.jzy.tools.data.JacksonUtils;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;


/**
 * 功能授权控制层
 *
 * @author admin
 */
@Controller
@RequestMapping("/sys/res/funcPermission")
@Api(tags = "功能授权控制层", description = "")
public class FuncPermissionController {

    private static Logger log = LoggerFactory.getLogger(FuncPermissionController.class);

    @Autowired
    private FuncPermissionService funcPermissionService;

    /**
     * 根据Id获取业务对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @ApiOperation(value = "根据Id获取业务对象", notes = "根据Id获取业务对象")
    @ApiImplicitParams(@ApiImplicitParam(name = "id", value = "业务对象主键", required = true, dataType = "String", paramType = "path"))
    @RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
    public @ResponseBody
    MessageResult get(@PathVariable("id") String id) {
        try {
            FuncPermission data = funcPermissionService.getObjectById(id);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, data);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 返回分页对象
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "返回分页对象", notes = "返回分页对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/page", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult page(@RequestBody Map<String, Object> map) {
        try {
            Page beanPage = funcPermissionService.getPage(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, beanPage);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 返回符合条件的列表
     *
     * @param funcPermission
     * @return
     */
    @ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "funcPermission", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/queryList", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryList(@RequestBody FuncPermission funcPermission) {
        try {
            List<FuncPermission> syncDataList = funcPermissionService.queryList(funcPermission);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, syncDataList);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 保存实体对象
     *
     * @param funcPermission
     * @return
     */
    @ApiOperation(value = "保存实体对象", notes = "保存实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "funcPermission", value = "save", required = true, dataType = "String")})
    @RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
    public @ResponseBody
    MessageResult save(@RequestBody FuncPermission funcPermission) {
        try {
            int save = funcPermissionService.save(funcPermission);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "id", value = " id", required = true, dataType = "String")})
    @RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult delete(@PathVariable("id") String id) {
        try {
            int save = funcPermissionService.deleteObjectById(id);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "ids", value = "ids", required = true, dataType = "String")})
    @RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult deleteBatch(@PathVariable("ids") String ids) {
        try {
            int save = funcPermissionService.deleteAllObjectByIds(Arrays.asList(ids));
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 修改修改实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "修改修改实体对象", notes = "修改修改实体对象")
    @ApiImplicitParams({@ApiImplicitParam(name = "id", value = "id", required = true, dataType = "Integer", paramType = "path"), @ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
    public @ResponseBody
    MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
        try {
            FuncPermission syncData = funcPermissionService.getObjectById(id);
            String json = JacksonUtils.toJson(syncData);
            Map<String, Object> oldMap = JacksonUtils.fromJson(json, HashMap.class);
            oldMap.putAll(map);
            String updateJson = JacksonUtils.toJson(oldMap);
            FuncPermission fromJson = JacksonUtils.fromJson(updateJson, FuncPermission.class);
            int updateCount = funcPermissionService.update(fromJson);
            return ResponseModel.getResult(MessageInfo.UPDATESUCCESS, updateCount);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 保存实体对象（角色到动作点）
     *
     * @param map
     * @return
     */
    @ApiOperation(value = " 保存实体对象（角色到动作点）", notes = " 保存实体对象（角色到动作点）")
    @ApiImplicitParams({@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/saveBatch", method = RequestMethod.POST, consumes = "application/json")
    @OpeLogInfo(node = "功能授权-对象到动作点", sysCode = "PT")
    public @ResponseBody
    MessageResult saveBatch(@RequestBody Map<String, Object> map) {
        try {
            int save = funcPermissionService.saveBatchs(map);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 保存实体对象（动作点到角色）
     *
     * @param map
     * @return
     */
    @ApiOperation(value = " 保存实体对象（动作点到角色）", notes = " 保存实体对象（动作点到角色）")
    @ApiImplicitParams({@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/saveBatchFunToRole", method = RequestMethod.POST, consumes = "application/json")
    @OpeLogInfo(node = "功能授权-动作点到角色", sysCode = "PT")
    public @ResponseBody
    MessageResult saveBatchFunToRole(@RequestBody Map<String, Object> map) {
        try {
            int save = funcPermissionService.saveBatchFunToRole(map);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 保存引入数据
     *
     * @param map
     * @return
     */
    @ApiOperation(value = " 功能授权-引入其他对象授权）", notes = " 功能授权-引入其他对象授权")
    @ApiImplicitParams({@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/saveBatchFunImport", method = RequestMethod.POST, consumes = "application/json")
    @OpeLogInfo(node = "功能授权-引入其他对象授权", sysCode = "PT")
    public @ResponseBody
    MessageResult saveBatchFunImport(@RequestBody Map<String, Object> map) {
        try {
            int save = funcPermissionService.saveBatchFunImport(map);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 根据不同的权限查看到不同的系统
     * 分三类  一类是超级管理员  一类是管理员  一类是普通用户
     */
    @ApiOperation(value = " 根据不同的权限查看到不同的系统）", notes = " 根据不同的权限查看到不同的系统")
    @ApiImplicitParams({@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/querySystemListByRole", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult querySystemListByRole(@RequestBody Map<String, Object> map) {
        try {
            List<Map<String, Object>> result = funcPermissionService.querySystemListByRole(map);
            return ResponseModel.getResult(MessageInfo.QUERYSUCCESS, result);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 根据系统查询按钮树
     *
     * @param map
     * @return
     * @throws Exception
     */
    @ApiOperation(value = " 根据系统查询按钮树）", notes = " 根据系统查询按钮树")
    @ApiImplicitParams({@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/queryAuthorizationListByAppIds", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryAuthorizationListByAppIds(@RequestBody Map<String, Object> map) {
        try {
            List<Map<String, Object>> result = funcPermissionService.queryAuthorizationListByAppIds(map);
            return ResponseModel.getResult(MessageInfo.QUERYSUCCESS, result);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 根据系统查询按钮树
     *
     * @param map
     * @return
     * @throws Exception
     */
    @ApiOperation(value = " 根据系统查询按钮树）", notes = " 根据系统查询按钮树")
    @ApiImplicitParams({@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/queryAuthorizationListByAppId", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryAuthorizationListByAppId(@RequestBody Map<String, Object> map) {
        try {
            List<Map<String, Object>> result = funcPermissionService.queryAuthorizationListByAppId(map);
            return ResponseModel.getResult(MessageInfo.QUERYSUCCESS, result);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 根据系统查询按钮树
     *
     * @param map
     * @return
     * @throws Exception
     */
    @ApiOperation(value = " 根据系统查询按钮树）", notes = " 根据系统查询按钮树")
    @ApiImplicitParams({@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/queryAuthDataByappIdsAndroleIds", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryAuthDataByappIdsAndroleIds(@RequestBody Map<String, Object> map) {
        try {
            List<Map<String, Object>> result = funcPermissionService.queryAuthDataByappIdsAndroleIds(map);
            return ResponseModel.getResult(MessageInfo.QUERYSUCCESS, result);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 根据类型和ID查询权限范围（自有的，继承的）
     *
     * @param map
     * @return
     * @throws Exception
     */
    @ApiOperation(value = " 根据类型和ID查询权限范围（自有的，继承的）", notes = " 根据类型和ID查询权限范围（自有的，继承的）")
    @ApiImplicitParams({@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/queryListByObjectType", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryListByObjectType(@RequestBody Map<String, Object> map) {
        try {
            Map<String, Object> result = funcPermissionService.queryListByObjectType(map);
            return ResponseModel.getResult(MessageInfo.QUERYSUCCESS, result);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 查询角色树(标准岗位)（动作点-角色）
     *
     * @param map
     * @return
     * @throws Exception
     */
    @ApiOperation(value = " 查询角色树(标准岗位)（动作点-角色）", notes = " 查询角色树(标准岗位)（动作点-角色）")
    @ApiImplicitParams({@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/queryAuthorizationListAllRoles", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryAuthorizationListAllRoles(@RequestBody Map<String, Object> map) {
        try {
            List<Map<String, Object>> result = funcPermissionService.queryAuthorizationListAllRoles();
            return ResponseModel.getResult(MessageInfo.QUERYSUCCESS, result);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 查询角色树(通用角色)（动作点-角色）
     *
     * @param map
     * @return
     * @throws Exception
     */
    @ApiOperation(value = " 查询角色树(通用角色)（动作点-角色）", notes = " 查询角色树(通用角色)（动作点-角色）")
    @ApiImplicitParams({@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/queryAuthorizationListAllCurrencyRoles", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryAuthorizationListAllCurrencyRoles(@RequestBody Map<String, Object> map) {
        try {
            List<Map<String, Object>> result = funcPermissionService.queryAuthorizationListAllCurrencyRoles();
            return ResponseModel.getResult(MessageInfo.QUERYSUCCESS, result);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 查询对象树(岗位)（动作点-角色）
     *
     * @param map
     * @return
     * @throws Exception
     */
    @ApiOperation(value = "查询对象树(岗位)（动作点-角色）", notes = "查询对象树(岗位)（动作点-角色）")
    @ApiImplicitParams({@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/queryAuthorizationListAllPost", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryAuthorizationListAllPost(@RequestBody Map<String, Object> map) {
        try {
            List<Map<String, Object>> result = funcPermissionService.queryAuthorizationListAllPost();
            return ResponseModel.getResult(MessageInfo.QUERYSUCCESS, result);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 查询对象树(人员)（动作点-角色）
     *
     * @param map
     * @return
     * @throws Exception
     */
    @ApiOperation(value = "查询对象树(人员)（动作点-角色）", notes = "查询对象树(人员)（动作点-角色）")
    @ApiImplicitParams({@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/queryAuthorizationListAllUser", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryAuthorizationListAllUser(@RequestBody Map<String, Object> map) {
        try {
            List<Map<String, Object>> result = funcPermissionService.queryAuthorizationListAllUser();
            return ResponseModel.getResult(MessageInfo.QUERYSUCCESS, result);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 根据动作点查询已授权数据
     *
     * @param map
     * @return
     * @throws Exception
     */
    @ApiOperation(value = "根据动作点查询已授权数据", notes = "根据动作点查询已授权数据")
    @ApiImplicitParams({@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/queryAuthDataByOperationIds", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryAuthDataByOperationIds(@RequestBody Map<String, Object> map) {
        try {
            List<Map<String, Object>> result = funcPermissionService.queryAuthDataByOperationIds(map);
            return ResponseModel.getResult(MessageInfo.QUERYSUCCESS, result);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }
}
