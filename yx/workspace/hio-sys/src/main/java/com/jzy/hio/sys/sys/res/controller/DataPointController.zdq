package com.jzy.hio.sys.sys.res.controller;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.jzy.hio.base.utils.DubboServiceResultInfo;
import com.jzy.hio.base.utils.LoginUtils;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.OpeLogInfo;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.sys.sys.org.dto.UserDto;
import com.jzy.hio.sys.sys.res.entity.DataPoint;
import com.jzy.hio.sys.sys.res.service.DataPointService;
import com.jzy.tools.data.JacksonUtils;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;


/**
 * 数据项控制点控制层
 *
 * @author kimchou
 * @create
 */
@Controller
@RequestMapping("/sys/res/dataPoint")
@Api(tags = "数据项控制点控制层", description = "")
public class DataPointController {

    private static Logger log = LoggerFactory.getLogger(DataPointController.class);
    @Autowired
    private DataPointService dataPointService;

    /**
     * 根据Id获取业务对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @ApiOperation(value = "根据Id获取业务对象", notes = "根据Id获取业务对象")
    @ApiImplicitParams(@ApiImplicitParam(name = "id", value = "业务对象主键", required = true, dataType = "String", paramType = "path"))
    @RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
    public @ResponseBody
    MessageResult get(@PathVariable("id") String id) {
        try {
            DataPoint data = dataPointService.getObjectById(id);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, data);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 返回分页对象
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "返回分页对象", notes = "返回分页对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/page", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult page(@RequestBody Map<String, Object> map) {
        try {
            Page beanPage = dataPointService.getPage(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, beanPage);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 返回符合条件的列表
     *
     * @param dataPoint
     * @return
     */
    @ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "dataPoint", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/queryList", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryList(@RequestBody DataPoint dataPoint) {
        try {
            List<DataPoint> syncDataList = dataPointService.queryList(dataPoint);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, syncDataList);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 通过条件查询控制点列表
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "返回分页对象", notes = "返回分页对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/queryByPram", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryByPram(@RequestBody Map<String, Object> map) {
        try {
            List<DataPoint> dataPoints = dataPointService.queryDataPointByPram(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, dataPoints);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 保存实体对象
     *
     * @param dataPoint
     * @return
     */
    @ApiOperation(value = "保存实体对象", notes = "保存实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "dataPoint", value = "save", required = true, dataType = "String")})
    @RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
    @OpeLogInfo(node = "新增数据控制点")
    public @ResponseBody
    MessageResult save(@RequestBody DataPoint dataPoint) {
        try {
            int save = dataPointService.save(dataPoint);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "id", value = " id", required = true, dataType = "String")})
    @RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
    @OpeLogInfo(node = "根据id删除数据控制点")
    public @ResponseBody
    MessageResult delete(@PathVariable("id") String id) {
        try {
            int save = dataPointService.deleteObjectById(id);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 逻辑删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "ids", value = "ids", required = true, dataType = "String")})
    @RequestMapping(value = "/deleteByIds", method = RequestMethod.PUT, consumes = "application/json")
    @OpeLogInfo(node = "根据ids批量伪删除数据控制点")
    public @ResponseBody
    MessageResult deleteByIds(@RequestBody String ids) {
        try {
            int save = dataPointService.deleteByIds(ids.split(","));
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "ids", value = "ids", required = true, dataType = "String")})
    @RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
    @OpeLogInfo(node = "根据ids批量数据控制点")
    public @ResponseBody
    MessageResult deleteBatch(@PathVariable("ids") String ids) {
        try {
            int save = dataPointService.deleteAllObjectByIds(Arrays.asList(ids));
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 修改修改实体对象
     *
     * @param id
     * @param map
     * @return
     */
    @ApiOperation(value = "修改修改实体对象", notes = "修改修改实体对象")
    @ApiImplicitParams({@ApiImplicitParam(name = "id", value = "id", required = true, dataType = "Integer", paramType = "path"), @ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
    @OpeLogInfo(node = "根据id修改数据控制点")
    public @ResponseBody
    MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
        try {
            DataPoint syncData = dataPointService.getObjectById(id);
            String json = JacksonUtils.toJson(syncData);
            Map<String, Object> oldMap = JacksonUtils.fromJson(json, HashMap.class);
            oldMap.putAll(map);
            String updateJson = JacksonUtils.toJson(oldMap);
            DataPoint fromJson = JacksonUtils.fromJson(updateJson, DataPoint.class);
            int updateCount = dataPointService.update(fromJson);
            return ResponseModel.getResult(MessageInfo.UPDATESUCCESS, updateCount);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 批量保存用户排序号
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "批量保存用户排序号", notes = "批量保存用户排序号")
    @ApiImplicitParams({@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/savePointSort", method = RequestMethod.POST, consumes = "application/json")
    @OpeLogInfo(node = "批量保存控制点排序号")
    public @ResponseBody
    MessageResult savePointSort(@RequestBody Map<String, Object> map) {
        // TODO  13点53分
        MessageResult result = new MessageResult();
        String saveJson = JacksonUtils.toJson(map);
        try {
            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
            String userJson = JacksonUtils.toJson(userBeanInfo);
            // TODO
            String dubboResultInfo = null;//dataPointDtoServiceCustomer.savePointSort(userJson, saveJson);
            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if (dubboServiceResultInfo.isSucess()) {
                String resultInfo = dubboServiceResultInfo.getResult();
                UserDto userDto = JacksonUtils.fromJson(resultInfo, UserDto.class);
                result.setResult(userDto);
                result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
                result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
            } else {
                result.setSuccess(MessageInfo.SAVEERROR.isResult());
                result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
            }
        } catch (Exception e) {
            ////e.printStackTrace();
            ObjectMapper mapper = new ObjectMapper();
            log.error("调用saveUsersSort方法:  【参数" + saveJson + "】======" + "【" + e.getMessage() + "】");
            result.setSuccess(MessageInfo.SAVEERROR.isResult());
            result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + e.getMessage() + "】");
        }
        return result;
    }

}
