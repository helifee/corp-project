package com.jzy.hio.sys.sys.res.controller;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.OpeLogInfo;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.sys.sys.res.entity.DataPermission;
import com.jzy.hio.sys.sys.res.service.DataPermissionService;
import com.jzy.tools.data.JacksonUtils;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;


/**
 * 数据授权控制层
 * @author admin
 *
 */
@Controller
@RequestMapping("/sys/res/dataPermission")
@Api(tags = "数据授权控制层", description = "")
public class DataPermissionController {

	private static Logger log = LoggerFactory.getLogger(DataPermissionController.class);
//	@Autowired
//	private DataPermissionDtoServiceCustomer dataPermissionDtoServiceCustomer;
	@Autowired
	private DataPermissionService dataPermissionService;
	/**
	 * 根据Id获取业务对象
	 * 
	 * @param id  业务对象主键
	 * 
	 * @return     业务对象
	 */
	@ApiOperation(value = "根据Id获取业务对象", notes = "根据Id获取业务对象")
	@ApiImplicitParams(@ApiImplicitParam(name = "id", value = "业务对象主键", required = true, dataType = "String", paramType = "path"))
	@RequestMapping(value="/get/{id}",method=RequestMethod.GET)
	public @ResponseBody MessageResult get(@PathVariable("id")  String id){
		try {
			DataPermission data = dataPermissionService.getObjectById(id);
			return ResponseModel.getResult(MessageInfo.GETSUCCESS, data);
		} catch (Exception e) {
			return ResponseModel.getErrorResult();
		}
//		MessageResult result=new MessageResult();
//		try {
//			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
//			String userJson = JacksonUtils.toJson(userBeanInfo);
//			String dubboResultInfo=dataPermissionDtoServiceCustomer.getObjectById(userJson, "{\"id\":\""+id+"\"}");
//			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//			if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				DataPermissionDto dataPermissionDto=JacksonUtils.fromJson(resultInfo, DataPermissionDto.class);
//				result.setResult(dataPermissionDto);
//				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
//				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
//			}else{
//				result.setSuccess(MessageInfo.GETERROR.isResult());
//				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//			}
//		} catch (Exception e) {
//			////e.printStackTrace();
//		    log.error("调用get方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.GETERROR.isResult());
//			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
//		}
//		return result;
	}
	
	
	/**
	 * 返回分页对象
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "返回分页对象", notes = "返回分页对象")
	@ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
	@RequestMapping(value="/page",method={RequestMethod.POST}, consumes="application/json")
	public @ResponseBody MessageResult page(@RequestBody Map<String,Object> map){
		try {
			Page beanPage = dataPermissionService.getPage(map);
			return ResponseModel.getResult(MessageInfo.GETSUCCESS, beanPage);
		} catch (Exception e) {
			return ResponseModel.getErrorResult();
		}
//		MessageResult result=new MessageResult();
//		String paramaterJson = JacksonUtils.toJson(map);
//		try {
//			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
//			String userJson = JacksonUtils.toJson(userBeanInfo);
//		    String dubboResultInfo=dataPermissionDtoServiceCustomer.getPage(userJson, paramaterJson);
//		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//			if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				PageBeanInfo pageInfo=JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
//				result.setResult(pageInfo);
//				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
//				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
//			}else{
//				result.setSuccess(MessageInfo.GETERROR.isResult());
//				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//			}
//		} catch (Exception e) {
//			////e.printStackTrace();
//		    log.error("调用page方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.GETERROR.isResult());
//			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
//		}
//		return result;
	}
	/**
	 * 返回符合条件的列表
	 * @param dataPermission
	 * @return
	 */
	@ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
	@ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "dataPoint", dataType = "String", value = "condition query", required = true)})
	@RequestMapping(value="/queryList",method={RequestMethod.POST}, consumes="application/json")
	public @ResponseBody MessageResult queryList(@RequestBody DataPermission dataPermission){
		try {
			List<DataPermission> results = dataPermissionService.queryList(dataPermission);
			return ResponseModel.getResult(MessageInfo.GETSUCCESS,results);
		} catch (Exception e) {
			return ResponseModel.getErrorResult();
		}
//		MessageResult result=new MessageResult();
//		String paramaterJson = JacksonUtils.toJson(map);
//		try {
//			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
//			String userJson = JacksonUtils.toJson(userBeanInfo);
//			String dubboResultInfo=dataPermissionDtoServiceCustomer.queryList(userJson, paramaterJson);
//		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//		    if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				List<DataPermissionDto> list=JacksonUtils.fromJson(resultInfo, ArrayList.class,DataPermissionDto.class);
//				result.setResult(list);
//				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
//				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
//		    }else{
//		    	result.setSuccess(MessageInfo.GETERROR.isResult());
//				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//		    }
//
//		} catch (Exception e) {
//			////e.printStackTrace();
//			log.error("调用queryList方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.GETERROR.isResult());
//			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
//		}
//		return result;
	}


	/**
	 * 保存实体对象
	 * @param dataPermission
	 * @return
	 */
	@ApiOperation(value = "保存实体对象", notes = "保存实体对象")
	@ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "dataPermission", value = "save", required = true, dataType = "String")})
	@RequestMapping(value="/save",method=RequestMethod.POST, consumes="application/json")
	public @ResponseBody MessageResult save(@RequestBody DataPermission dataPermission){
		try {
			int save = dataPermissionService.save(dataPermission);
			return ResponseModel.getResult(MessageInfo.SAVESUCCESS,save);
		} catch (Exception e) {
			return ResponseModel.getErrorResult();
		}
//		MessageResult result=new MessageResult();
//		try {
//			String saveJson= JacksonUtils.toJson(t);
//			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
//			String userJson = JacksonUtils.toJson(userBeanInfo);
//			String dubboResultInfo=dataPermissionDtoServiceCustomer.save(userJson, saveJson);
//		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//		    if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				DataPermissionDto dataPermissionDto=JacksonUtils.fromJson(resultInfo, DataPermissionDto.class);
//				result.setResult(dataPermissionDto);
//				result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
//				result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
//		    }else{
//		    	result.setSuccess(MessageInfo.SAVEERROR.isResult());
//				result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//		    }
//		} catch (Exception e) {
//			try {
//				////e.printStackTrace();
//			    ObjectMapper mapper = new ObjectMapper();
//				String  paramJson = mapper.writeValueAsString(t);
//				log.error("调用save方法:  【参数"+paramJson+"】======"+"【"+e.getMessage()+"】");
//				result.setSuccess(MessageInfo.SAVEERROR.isResult());
//				result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+e.getMessage()+"】");
//			} catch (JsonProcessingException e1) {
//				// TODO Auto-generated catch block
//				//e1.printStackTrace();
//			}
//
//		}
//		return result;
	}
	
	/**
	 * 删除实体对象
	 * @param id
	 * @return
	 */
	@ApiOperation(value = "删除实体对象", notes = "删除实体对象")
	@ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "id", value = " id", required = true, dataType = "String")})
	@RequestMapping(value="/delete/{id}",method=RequestMethod.DELETE)
	public @ResponseBody MessageResult delete(@PathVariable("id")  String id){
		try {
			int save = dataPermissionService.deleteObjectById(id);
			return ResponseModel.getResult(MessageInfo.DELETESUCCESS,save);
		} catch (Exception e) {
			return ResponseModel.getErrorResult();
		}
//		MessageResult result=new MessageResult();
//		try {
//			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
//			String userJson = JacksonUtils.toJson(userBeanInfo);
//			String dubboResultInfo=dataPermissionDtoServiceCustomer.deleteObjectById(userJson, "{\"id\":\""+id+"\"}");
//			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//			if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				DataPermissionDto dataPermissionDto=JacksonUtils.fromJson(resultInfo, DataPermissionDto.class);
//				result.setResult(dataPermissionDto);
//				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
//				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
//			}else{
//				result.setSuccess(MessageInfo.DELETEERROR.isResult());
//				result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//			}
//		} catch (Exception e) {
//			////e.printStackTrace();
//		    log.error("调用delete方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.DELETEERROR.isResult());
//			result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】");
//		}
//
//		return result;
	}
	
	
	/**
	 * 删除实体对象
	 * @param ids
	 * @return
	 */
	@ApiOperation(value = "删除实体对象", notes = "删除实体对象")
	@ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "ids", value = "ids", required = true, dataType = "String")})
	@RequestMapping(value="/deleteBatch/{ids}",method=RequestMethod.DELETE)
	public @ResponseBody MessageResult deleteBatch(@PathVariable("ids")  String ids){
		try {
			int save = dataPermissionService.deleteAllObjectByIds(Arrays.asList(ids));
			return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
		} catch (Exception e) {
			return ResponseModel.getErrorResult();
		}
//		MessageResult result=new MessageResult();
//		try {
//			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
//			String userJson = JacksonUtils.toJson(userBeanInfo);
//			String dubboResultInfo=dataPermissionDtoServiceCustomer.deleteAllObjectByIds(userJson, "{\"id\":\""+ids+"\"}");
//			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//			if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				DataPermissionDto dataPermissionDto=JacksonUtils.fromJson(resultInfo, DataPermissionDto.class);
//				result.setResult(dataPermissionDto);
//				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
//				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
//			}else{
//				result.setSuccess(MessageInfo.DELETEERROR.isResult());
//				result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//			}
//		} catch (Exception e) {
//			////e.printStackTrace();
//		    log.error("调用delete方法:  【参数"+ids+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.DELETEERROR.isResult());
//			result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】");
//		}
//
//		return result;
	}
	
	/**
	 * 修改修改实体对象
	 * @param id
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "修改修改实体对象", notes = "修改修改实体对象")
	@ApiImplicitParams({@ApiImplicitParam(name = "id", value = "id", required = true, dataType = "Integer", paramType = "path"), @ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
	@RequestMapping(value="/update/{id}",method=RequestMethod.PUT,consumes="application/json")
	public @ResponseBody MessageResult update(@PathVariable("id")  String id,   @RequestBody Map<String,Object> map){
		try {
			DataPermission data = dataPermissionService.getObjectById(id);
			String json = JacksonUtils.toJson(data);
			Map<String, Object> oldMap = JacksonUtils.fromJson(json, HashMap.class);
			oldMap.putAll(map);
			String updateJson = JacksonUtils.toJson(oldMap);
			DataPermission fromJson = JacksonUtils.fromJson(updateJson, DataPermission.class);
			int updateCount = dataPermissionService.update(fromJson);
			return ResponseModel.getResult(MessageInfo.UPDATESUCCESS, updateCount);
		} catch (Exception e) {
			return ResponseModel.getErrorResult();
		}
//		MessageResult result=new MessageResult();
//		DataPermissionDto dataPermissionDto=null;
//		try {
//			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
//			String userJson = JacksonUtils.toJson(userBeanInfo);
//			String dubboResultInfo=dataPermissionDtoServiceCustomer.getObjectById(userJson, "{\"id\":\""+id+"\"}");
//			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//			if(dubboServiceResultInfo.isSucess()){
//				 String resultInfo= dubboServiceResultInfo.getResult();
//				 Map<String,Object> oldMap=JacksonUtils.fromJson(resultInfo, HashMap.class);
//				 oldMap.putAll(map);
//				 String updateJson= JacksonUtils.toJson(oldMap);
//				 String updateDubboResultInfo=dataPermissionDtoServiceCustomer.update(userJson, updateJson);
//				 DubboServiceResultInfo updateDubboServiceResultInfo= JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
//				 if(updateDubboServiceResultInfo.isSucess()){
//					 Integer i=JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class);
//					 result.setResult(i);
//					 result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
//					 result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
//				 }else{
//					 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
//					 result.setMsg(updateDubboServiceResultInfo.getMsg()+"【"+updateDubboServiceResultInfo.getExceptionMsg()+"】");
//				 }
//			}else{
//				 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
//				 result.setMsg("不存在更新的对象");
//			}
//		} catch (Exception e) {
//			try{
//			 ////e.printStackTrace();
//			 ObjectMapper mapper = new ObjectMapper();
//			 String  paramJson = mapper.writeValueAsString(dataPermissionDto);
//			 log.error("调用update方法:  【参数"+id+","+paramJson+"】======"+"【"+e.getMessage()+"】");
//			 result.setSuccess(MessageInfo.UPDATEERROR.isResult());
//			 result.setMsg(MessageInfo.UPDATEERROR.getMsg()+"【"+e.getMessage()+"】");
//			}catch (JsonProcessingException e1) {
//				// TODO Auto-generated catch block
//				//e1.printStackTrace();
//			}
//
//		}
//		return result;
	}

	/**
	 * 保存数据授权和授权值
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "保存数据授权和授权值", notes = "保存数据授权和授权值")
	@ApiImplicitParams({ @ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
	@RequestMapping(value="/saveDataAuth",method=RequestMethod.POST,consumes="application/json")
	public @ResponseBody MessageResult saveDataAuth(@RequestBody Map<String,Object> map){
		try {
			dataPermissionService.saveDataAuthAndVal(map);
			return ResponseModel.getResult(MessageInfo.SAVESUCCESS,null);
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseModel.getErrorResult();
		}
//		MessageResult result=new MessageResult();
//		String paramJson= JacksonUtils.toJson(map);
//		try {
//			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
//			String userJson = JacksonUtils.toJson(userBeanInfo);
//			String dubboResultInfo=dataPermissionDtoServiceCustomer.saveDataAuth(userJson, paramJson);
//		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//		    if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				DataPermissionDto dataPermissionDto=JacksonUtils.fromJson(resultInfo, DataPermissionDto.class);
//				result.setResult(dataPermissionDto);
//				result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
//				result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
//		    }else{
//		    	result.setSuccess(MessageInfo.SAVEERROR.isResult());
//				result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//		    }
//		} catch (Exception e) {
//			//////e.printStackTrace();
//			log.error("调用save方法:  【参数"+paramJson+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.SAVEERROR.isResult());
//			result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+e.getMessage()+"】");
//		}
//		return result;
	}
	
	/**
	 * 保存数据授权和授权值（角色到数据）
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "保存数据授权和授权值（角色到数据）", notes = "保存数据授权和授权值（角色到数据）")
	@ApiImplicitParams({ @ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
	@RequestMapping(value="/saveDataAuthRoleToData",method=RequestMethod.POST,consumes="application/json")
	@OpeLogInfo(node="数据授权-对象到数据")
	public @ResponseBody MessageResult saveDataAuthRoleToData(@RequestBody Map<String,Object> map){
		try {
			dataPermissionService.saveDataAuthRoleToData(map);
			return ResponseModel.getResult(MessageInfo.SAVESUCCESS,null);
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseModel.getErrorResult();
		}
//		MessageResult result=new MessageResult();
//		String paramJson= JacksonUtils.toJson(map);
//		try {
//			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
//			String userJson = JacksonUtils.toJson(userBeanInfo);
//			String dubboResultInfo=dataPermissionDtoServiceCustomer.saveDataAuthRoleToData(userJson, paramJson);
//		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//		    if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				DataPermissionDto dataPermissionDto=JacksonUtils.fromJson(resultInfo, DataPermissionDto.class);
//				result.setResult(dataPermissionDto);
//				result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
//				result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
//		    }else{
//		    	result.setSuccess(MessageInfo.SAVEERROR.isResult());
//				result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//		    }
//		} catch (Exception e) {
//			//////e.printStackTrace();
//			log.error("调用save方法:  【参数"+paramJson+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.SAVEERROR.isResult());
//			result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+e.getMessage()+"】");
//		}
//		return result;
	}
	
	/**
	 * 根据系统查询按钮树
	 * @param map
	 * @return
	 * @throws Exception
	 */
	@ApiOperation(value = "根据系统查询按钮树", notes = "根据系统查询按钮树")
	@ApiImplicitParams({ @ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
	@RequestMapping(value="/queryAuthDataByitemIdAndroleIds",method={RequestMethod.POST}, consumes="application/json")
	public @ResponseBody MessageResult queryAuthDataByitemIdAndroleIds(@RequestBody Map<String,Object> map){
		try {
			dataPermissionService.queryAuthDataByitemIdAndroleIds(map);
			return ResponseModel.getResult(MessageInfo.SAVESUCCESS,null);
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseModel.getErrorResult();
		}
//		MessageResult result=new MessageResult();
//		String paramaterJson = JacksonUtils.toJson(map);
//		try {
//			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
//			String userJson = JacksonUtils.toJson(userBeanInfo);
//			String dubboResultInfo=dataPermissionDtoServiceCustomer.queryAuthDataByitemIdAndroleIds(userJson, paramaterJson);
//		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//		    if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				Map<String,Object> resultMap=JacksonUtils.fromJson(resultInfo, Map.class);
//				result.setResult(resultMap);
//				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
//				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
//		    }else{
//		    	result.setSuccess(MessageInfo.GETERROR.isResult());
//				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//		    }
//
//		} catch (Exception e) {
//			////e.printStackTrace();
//			log.error("调用queryAuthDataByappIdsAndroleIds方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.GETERROR.isResult());
//			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
//		}
//		return result;
	}
	
	/**
	 * 根据（控制项Id和控制点Id或者指定数据ID（类型判断如果类型是dataPoint是控制点ID））查询已授权数据
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "根据（控制项Id和控制点Id或者指定数据ID（类型判断如果类型是dataPoint是控制点ID））查询已授权数据", notes = "根据（控制项Id和控制点Id或者指定数据ID（类型判断如果类型是dataPoint是控制点ID））查询已授权数据")
	@ApiImplicitParams({ @ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
	@RequestMapping(value="/queryAuthDataByitemIdAndPointId",method={RequestMethod.POST}, consumes="application/json")
	public @ResponseBody MessageResult queryAuthDataByitemIdAndPointId(@RequestBody Map<String,Object> map){
		try {
			dataPermissionService.queryAuthDataByitemIdAndPointId(map);
			return ResponseModel.getResult(MessageInfo.SAVESUCCESS,null);
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseModel.getErrorResult();
		}
//		MessageResult result=new MessageResult();
//		String paramaterJson = JacksonUtils.toJson(map);
//		try {
//			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
//			String userJson = JacksonUtils.toJson(userBeanInfo);
//			String dubboResultInfo=dataPermissionDtoServiceCustomer.queryAuthDataByitemIdAndPointId(userJson, paramaterJson);
//		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//		    if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				Map<String,Object> resultMap=JacksonUtils.fromJson(resultInfo, Map.class);
//				result.setResult(resultMap);
//				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
//				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
//		    }else{
//		    	result.setSuccess(MessageInfo.GETERROR.isResult());
//				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//		    }
//
//		} catch (Exception e) {
//			////e.printStackTrace();
//			log.error("调用queryAuthDataByappIdsAndroleIds方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.GETERROR.isResult());
//			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
//		}
//		return result;
	}
	
	
	
	/**
	 * 保存数据授权和授权值（数据到角色）
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "保存数据授权和授权值（数据到角色）", notes = "保存数据授权和授权值（数据到角色）")
	@ApiImplicitParams({ @ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
	@RequestMapping(value="/saveDataAuthDataToRole",method=RequestMethod.POST,consumes="application/json")
	public @ResponseBody MessageResult saveDataAuthDataToRole(@RequestBody Map<String,Object> map){
		try {
			dataPermissionService.saveDataAuthDataToRole(map);
			return ResponseModel.getResult(MessageInfo.SAVESUCCESS,null);
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseModel.getErrorResult();
		}
//		MessageResult result=new MessageResult();
//		String paramJson= JacksonUtils.toJson(map);
//		try {
//			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
//			String userJson = JacksonUtils.toJson(userBeanInfo);
//			String dubboResultInfo=dataPermissionDtoServiceCustomer.saveDataAuthDataToRole(userJson, paramJson);
//		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//		    if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				DataPermissionDto dataPermissionDto=JacksonUtils.fromJson(resultInfo, DataPermissionDto.class);
//				result.setResult(dataPermissionDto);
//				result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
//				result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
//		    }else{
//		    	result.setSuccess(MessageInfo.SAVEERROR.isResult());
//				result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//		    }
//		} catch (Exception e) {
//			//////e.printStackTrace();
//			log.error("调用save方法:  【参数"+paramJson+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.SAVEERROR.isResult());
//			result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+e.getMessage()+"】");
//		}
//		return result;
	}
	/**
	 * 保存引入数据授权
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "数据授权-引入其他对象授权", notes = "数据授权-引入其他对象授权")
	@ApiImplicitParams({ @ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
	@RequestMapping(value="/saveBatchDataImport",method=RequestMethod.POST,consumes="application/json")
	@OpeLogInfo(node="数据授权-引入其他对象授权")
	public @ResponseBody MessageResult saveBatchDataImport(@RequestBody Map<String,Object> map){
		try {
			dataPermissionService.saveBatchDataImport(map);
			return ResponseModel.getResult(MessageInfo.SAVESUCCESS,null);
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseModel.getErrorResult();
		}
//		MessageResult result=new MessageResult();
//		String paramJson= JacksonUtils.toJson(map);
//		try {
//			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
//			String userJson = JacksonUtils.toJson(userBeanInfo);
//			String dubboResultInfo=dataPermissionDtoServiceCustomer.saveBatchDataImport(userJson, paramJson);
//			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//			if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				DataPermissionDto dataPermissionDto=JacksonUtils.fromJson(resultInfo, DataPermissionDto.class);
//				result.setResult(dataPermissionDto);
//				result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
//				result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
//			}else{
//				result.setSuccess(MessageInfo.SAVEERROR.isResult());
//				result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//			}
//		} catch (Exception e) {
//			//////e.printStackTrace();
//			log.error("调用save方法:  【参数"+paramJson+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.SAVEERROR.isResult());
//			result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+e.getMessage()+"】");
//		}
//		return result;
	}
	/**
	 * 保存实体对象（对象到数据）
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "数据授权-数据到对象", notes = "数据授权-数据到对象")
	@ApiImplicitParams({ @ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
	@RequestMapping(value="/saveBatchDataToObjectBytypeAndItemId",method=RequestMethod.POST, consumes="application/json")
	@OpeLogInfo(node="数据授权-数据到对象")
	public @ResponseBody MessageResult saveBatchDataToObjectBytypeAndItemId(@RequestBody Map<String,Object> map){
		try {
			dataPermissionService.saveBatchDataToObjectBytypeAndItemId(map);
			return ResponseModel.getResult(MessageInfo.SAVESUCCESS,null);
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseModel.getErrorResult();
		}
//		MessageResult result=new MessageResult();
//		String paramaterJson = JacksonUtils.toJson(map);
//		try {
//			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
//			String userJson = JacksonUtils.toJson(userBeanInfo);
//			String dubboResultInfo=dataPermissionDtoServiceCustomer.saveBatchDataToObjectBytypeAndItemId(userJson, paramaterJson);
//		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//		    if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				result.setResult(resultInfo);
//				result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
//				result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
//		    }else{
//		    	result.setSuccess(MessageInfo.SAVEERROR.isResult());
//				result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//		    }
//		} catch (Exception e) {
//				log.error("调用saveBatchFunToRole方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
//				result.setSuccess(MessageInfo.SAVEERROR.isResult());
//				result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+e.getMessage()+"】");
//		}
//		return result;
	}

	
}
