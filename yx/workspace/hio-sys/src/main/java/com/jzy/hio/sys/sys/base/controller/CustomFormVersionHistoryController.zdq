package com.jzy.hio.sys.sys.base.controller;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.sys.sys.base.dto.CustomFormVersionHistoryDto;
import com.jzy.hio.sys.sys.base.entity.CustomFormVersionHistory;
import com.jzy.hio.sys.sys.base.service.CustomFormVersionHistoryService;
import com.jzy.tools.data.JacksonUtils;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.Arrays;
import java.util.Map;

/**
 * 自定义表单版本历史控制层
 *
 * @author admin
 *
 */
@RestController
@RequestMapping("/sys/base/customFormVersionHistory")
public class CustomFormVersionHistoryController {

	private static Logger					log	= LoggerFactory.getLogger(CustomFormVersionHistoryController.class);

	@Autowired
	private CustomFormVersionHistoryService	customFormVersionHistoryService;

	/**
	 * 根据Id获取业务对象
	 *
	 * @param id
	 *            业务对象主键
	 *
	 * @return 业务对象
	 */
	@RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
	public @ResponseBody MessageResult get(@PathVariable("id") String id) {
		try {
			return ResponseModel.getResult(MessageInfo.CREATESUCCESS,
					customFormVersionHistoryService.getObjectById(id));
		} catch (Exception e) {
			e.printStackTrace();
			log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.GETERROR, "查询数据失败！");
		}
	}

	/**
	 * 返回分页对象
	 *
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/page", method = { RequestMethod.POST }, consumes = "application/json")
	@ApiOperation(value = "返回分页对象", notes = "返回分页对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "map", required = true) })
	public @ResponseBody MessageResult page(@RequestBody Map<String, Object> map) {
		try {
			return ResponseModel.getResult(MessageInfo.GETSUCCESS, customFormVersionHistoryService.getPageSort(map));
		} catch (Exception e) {
			e.printStackTrace();
			log.error("调用page方法:  【参数" + JacksonUtils.toJson(map) + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.GETERROR, "查询数据失败！");
		}
	}

	/**
	 * 返回符合条件的列表
	 *
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/queryList", method = { RequestMethod.POST }, consumes = "application/json")
	@ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "map", required = true) })
	public @ResponseBody MessageResult queryList(@RequestBody Map<String, Object> map) {
		try {
			return ResponseModel.getResult(MessageInfo.GETSUCCESS,
					customFormVersionHistoryService.queryListByExample(map));
		} catch (Exception e) {
			e.printStackTrace();
			log.error("调用queryList方法:  【参数" + JacksonUtils.toJson(map) + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.GETERROR, "查询数据失败！");
		}
	}

	/**
	 * 保存实体对象
	 *
	 * @param t
	 * @return
	 */
	@RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
	@ApiOperation(value = "保存实体对象", notes = "保存实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "bean", dataType = "String", value = "bean", required = true) })
	public @ResponseBody MessageResult save(@RequestBody CustomFormVersionHistoryDto t) {
		try {
			CustomFormVersionHistory customFormVersionHistory = JacksonUtils.fromJson(JacksonUtils.toJson(t),
					CustomFormVersionHistory.class);
			return ResponseModel.getResult(MessageInfo.SAVESUCCESS,
					customFormVersionHistoryService.save(customFormVersionHistory));
		} catch (Exception e) {
			log.error("调用save方法:  【参数" + JacksonUtils.toJson(t) + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.SAVEERROR, "保存数据失败！");
		}
	}

	/**
	 * 删除实体对象
	 *
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
	@ApiOperation(value = "删除实体对象", notes = "删除实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "id", dataType = "String", value = "id", required = true) })
	public @ResponseBody MessageResult delete(@PathVariable("id") String id) {
		try {
			return ResponseModel.getResult(MessageInfo.DELETESUCCESS,
					customFormVersionHistoryService.deleteObjectById(id));
		} catch (Exception e) {
			e.printStackTrace();
			log.error("调用delete方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.DELETEERROR, "删除数据失败！");
		}
	}

	/**
	 * 批量删除实体对象
	 *
	 * @param ids
	 * @return
	 */
	@RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
	@ApiOperation(value = "批量删除实体对象", notes = "批量删除实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "ids", dataType = "String", value = "ids", required = true) })
	public @ResponseBody MessageResult deleteBatch(@PathVariable("ids") String ids) {
		try {
			return ResponseModel.getResult(MessageInfo.DELETESUCCESS,
					customFormVersionHistoryService.deleteAllObjectByIds(Arrays.asList(ids.split(","))));
		} catch (Exception e) {
			e.printStackTrace();
			log.error("调用delete方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.DELETEERROR, "删除数据失败！");
		}
	}

	/**
	 * 修改修改实体对象
	 *
	 * @param map
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
	@ApiOperation(value = "修改实体对象", notes = "修改实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", dataType = "String", name = "id", value = "id", required = true),
			@ApiImplicitParam(paramType = "body", dataType = "String", name = "map", value = "map", required = true) })
	public @ResponseBody MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
		try {
			return customFormVersionHistoryService.updateBean(id, map);
		} catch (Exception e) {
			log.error(
					"调用update方法:  【参数" + id + "," + JacksonUtils.toJson(map) + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.UPDATEERROR, "修改数据失败！");
		}
	}

	/**
	 * 伪删除实体对象
	 *
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/deletePseudo/{id}", method = RequestMethod.DELETE)
	@ApiOperation(value = "伪删除实体对象", notes = "伪删除实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "id", dataType = "String", value = "id", required = true) })
	public @ResponseBody MessageResult deletePseudo(@PathVariable("id") String id) {
		try {
			return ResponseModel.getResult(MessageInfo.DELETESUCCESS,
					customFormVersionHistoryService.deletePseudoObjectById(id));
		} catch (Exception e) {
			e.printStackTrace();
			log.error("调用deletePseudo方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.DELETEERROR, "删除数据失败！");
		}

	}

	/**
	 * 批量伪删除实体对象
	 *
	 * @param ids
	 * @return
	 */
	@RequestMapping(value = "/deletePseudoBatch/{ids}", method = RequestMethod.DELETE)
	@ApiOperation(value = "批量伪删除实体对象", notes = "批量伪删除实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "ids", dataType = "String", value = "ids", required = true) })
	public @ResponseBody MessageResult deletePseudoBatch(@PathVariable("ids") String ids) {
		try {
			return ResponseModel.getResult(MessageInfo.DELETESUCCESS,
					customFormVersionHistoryService.deletePseudoAllObjectByIds(Arrays.asList(ids.split(","))));
		} catch (Exception e) {
			e.printStackTrace();
			log.error("调用deletePseudoBatch方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.DELETEERROR, "删除数据失败！");
		}

	}

}
