package com.jzy.hio.sys.sys.base.controller;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.sys.sys.base.dto.CustomArchivesDto;
import com.jzy.hio.sys.sys.base.service.CustomArchivesService;
import com.jzy.tools.data.JacksonUtils;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

/**
 * 自定义档案表控制层
 * 
 * @author admin
 *
 */
@RestController
@RequestMapping("/sys/base/customArchives")
@Api(tags = "自定义档案表控制层", description = "")
public class CustomArchivesController {

	private static Logger			log	= LoggerFactory.getLogger(CustomArchivesController.class);

	@Autowired
	private CustomArchivesService	customArchivesService;

	/**
	 * 根据Id获取业务对象
	 *
	 * @param id
	 *            业务对象主键
	 *
	 * @return 业务对象
	 */
	@RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
	@ApiOperation(value = "根据Id获取业务对象", notes = "根据Id获取业务对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "id", dataType = "String", value = "id", required = true) })
	public @ResponseBody MessageResult get(@PathVariable("id") String id) {
		try {
			return customArchivesService.getBeanById(id);
		} catch (Exception e) {
			//// e.printStackTrace();
			log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.CREATERROR, "查询数据失败！");
		}
	}

	/**
	 * 返回分页对象
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/page", method = { RequestMethod.POST }, consumes = "application/json")
	@ApiOperation(value = "返回分页对象", notes = "返回分页对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "map", required = true) })
	public @ResponseBody MessageResult page(@RequestBody Map<String, Object> map) {
		try {
			return customArchivesService.getBeanPage(map);
		} catch (Exception e) {
			//// e.printStackTrace();
			log.error("调用page方法:  【参数" + JacksonUtils.toJson(map) + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.CREATERROR, "查询数据失败！");
		}
	}

	/**
	 * 返回符合条件的列表
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "/queryList", method = { RequestMethod.POST }, consumes = "application/json")
	@ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "map", required = true) })
	public @ResponseBody MessageResult queryList(@RequestBody Map<String, Object> map) {
		try {
			return customArchivesService.queryBeanList(map);
		} catch (Exception e) {
			//// e.printStackTrace();
			log.error("调用queryList方法:  【参数" + JacksonUtils.toJson(map) + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.CREATERROR, "查询数据失败！");
		}
	}

	/**
	 * 保存实体对象
	 * 
	 * @param t
	 * @return
	 */
	@RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
	@ApiOperation(value = "保存实体对象", notes = "保存实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "bean", dataType = "String", value = "bean", required = true) })
	public @ResponseBody MessageResult save(@RequestBody CustomArchivesDto t) {
		try {
			return customArchivesService.saveBean(t);
		} catch (Exception e) {
			log.error(e.getMessage());
			return ResponseModel.getResult(MessageInfo.SAVEERROR, "保存数据失败！");
		}
	}

	/**
	 * 删除实体对象
	 * 
	 * @param id
	 * @return
	 */
	@ApiOperation(value = "删除实体对象", notes = "删除实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "id", value = "id", required = true, dataType = "String") })
	@RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
	public @ResponseBody MessageResult delete(@PathVariable("id") String id) {
		try {
			return customArchivesService.deleteBeanById(id);
		} catch (Exception e) {
			log.error("调用delete方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.DELETEERROR, "删除数据失败！");
		}

	}

	/**
	 * 批量删除实体对象
	 * 
	 * @param ids
	 * @return
	 */
	@ApiOperation(value = "批量删除实体对象", notes = "批量删除实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "ids", value = "ids", required = true, dataType = "String") })
	@RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
	public @ResponseBody MessageResult deleteBatch(@PathVariable("ids") String ids) {
		try {
			return customArchivesService.deleteBeanByIds(ids);
		} catch (Exception e) {
			log.error("调用delete方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.DELETEERROR, "批量删除数据失败！");
		}

	}

	/**
	 * 修改实体对象
	 * 
	 * @param id
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "修改实体对象", notes = "修改实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(name = "id", value = "id", required = true, dataType = "Integer", paramType = "path"),
			@ApiImplicitParam(name = "map", value = "this is map", dataType = "JSON") })
	@RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
	public @ResponseBody MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
		try {
			return customArchivesService.updateBean(id, map);
		} catch (Exception e) {
			log.error(
					"调用update方法:  【参数" + id + "," + JacksonUtils.toJson(map) + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.UPDATEERROR, "修改数据失败！");
		}
	}

	/**
	 * 伪删除实体对象
	 * 
	 * @param id
	 * @return
	 */
	@ApiOperation(value = "伪删除实体对象", notes = "伪删除实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "id", value = "id", required = true, dataType = "String") })
	@RequestMapping(value = "/deletePseudo/{id}", method = RequestMethod.DELETE)
	public @ResponseBody MessageResult deletePseudo(@PathVariable("id") String id) {
		try {
			return customArchivesService.deletePseudoAndChildById(id);
		} catch (Exception e) {
			//// e.printStackTrace();
			log.error("调用deletePseudo方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.DELETEERROR, "删除数据失败！");
		}

	}

	/**
	 * 批量伪删除实体对象
	 * 
	 * @param ids
	 * @return
	 */
	@ApiOperation(value = "批量伪删除实体对象", notes = "批量伪删除实体对象")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "ids", value = "ids", required = true, dataType = "String") })
	@RequestMapping(value = "/deletePseudoBatch/{ids}", method = RequestMethod.DELETE)
	public @ResponseBody MessageResult deletePseudoBatch(@PathVariable("ids") String ids) {
		try {
			return customArchivesService.deletePseudoAllBeanByIds(ids);
		} catch (Exception e) {
			//// e.printStackTrace();
			log.error("调用deletePseudoBatch方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.DELETEERROR, "删除数据失败！");
		}
	}

	/**
	 * 获取业务对象树
	 * 
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "获取业务对象树", notes = "获取业务对象树")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "map", required = true) })
	@RequestMapping(value = "/getTree", method = { RequestMethod.POST }, consumes = "application/json")
	public @ResponseBody MessageResult getTree(@RequestBody Map<String, Object> map) {
		try {
			return customArchivesService.getBeanTree(map);
		} catch (Exception e) {
			//// e.printStackTrace();
			log.error("调用getTree方法:  【参数" + JacksonUtils.toJson(map) + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.GETERROR, "查询数据失败！");
		}
	}

	/**
	 * @Description:档案批量保存
	 * @author:zhangfangzhi
	 * @date 2017年3月22日 上午9:51:39
	 * @version V1.0
	 */
	@ApiOperation(value = "档案批量保存", notes = "档案批量保存")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "bean", dataType = "String", value = "bean", required = true) })
	@RequestMapping(value = "/saveList", method = RequestMethod.POST, consumes = "application/json")
	public @ResponseBody MessageResult saveList(@RequestBody CustomArchivesDto t) {
		try {
			return customArchivesService.saveList(t);
		} catch (Exception e) {
			//// e.printStackTrace();
			log.error("调用save方法:  【参数" + JacksonUtils.toJson(t) + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.SAVEERROR, "保存数据失败！");
		}
	}

	/**
	 * @Description:校验该档案下是否有子项
	 * @author:zhangfangzhi
	 * @date 2017年3月29日 下午3:17:28
	 * @version V1.0
	 */
	@ApiOperation(value = "校验该档案下是否有子项", notes = "校验该档案下是否有子项")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "path", name = "id", value = "id", required = true, dataType = "String") })
	@RequestMapping(value = "/queryIsHaveChild/{id}", method = RequestMethod.GET)
	public @ResponseBody MessageResult queryIsHaveChild(@PathVariable("id") String id) {
		try {
			return customArchivesService.queryItemsById(id);
		} catch (Exception e) {
			//// e.printStackTrace();
			log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.GETERROR, "查询数据失败！");
		}
	}

	/**
	 * @Description:启用禁用
	 * @author:zhangfangzhi
	 * @date 2017年3月23日 上午9:19:19
	 * @version V1.0
	 */
	@ApiOperation(value = "启用禁用", notes = "启用禁用")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "bean", dataType = "String", value = "bean", required = true) })
	@RequestMapping(value = "/enableOrNot", method = RequestMethod.POST, consumes = "application/json")
	public @ResponseBody MessageResult enableOrNot(@RequestBody CustomArchivesDto t) {
		try {
			return customArchivesService.enableOrDisable(t);
		} catch (Exception e) {
			log.error("调用save方法:  【参数" + JacksonUtils.toJson(t) + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.UPDATEERROR, "修改数据失败！");
		}
	}

	/**
	 * @Description:档案准备数据导入
	 * @author:zhangfangzhi
	 * @date 2017年6月2日 上午9:08:57
	 * @version V1.0
	 */
	@ApiOperation(value = "档案准备数据导入", notes = "档案准备数据导入")
	@ApiImplicitParams({
			@ApiImplicitParam(paramType = "body", name = "bean", dataType = "String", value = "bean", required = true) })
	@RequestMapping(value = "/importData", method = RequestMethod.POST, consumes = "application/json")
	public @ResponseBody MessageResult saveImportData(@RequestBody CustomArchivesDto t) {
		try {
			return customArchivesService.saveImportData(t);
		} catch (Exception e) {
			log.error("调用save方法:  【参数" + JacksonUtils.toJson(t) + "】======" + "【" + e.getMessage() + "】");
			return ResponseModel.getResult(MessageInfo.SAVEERROR, "导入数据失败！");
		}
	}
}
