package com.jzy.hio.sys.sys.logo.controller;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletResponse;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.jzy.hio.base.utils.LoginUtils;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.sys.sys.logo.entity.SysLogo;
import com.jzy.hio.sys.sys.logo.service.SysLogoService;
import com.jzy.tools.data.JacksonUtils;


/**
 * 平台logo控制层
 *
 * @author admin
 */
@Controller
@RequestMapping("/sys/sysLogo")
@Api(tags = "平台logo控制层", description = "")
public class SysLogoController {

    private static Logger log = LoggerFactory.getLogger(SysLogoController.class);

    @Autowired
    private SysLogoService sysLogoService;

    /**
     * 根据Id获取业务对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @ApiOperation(value = "根据Id获取业务对象", notes = "根据Id获取业务对象")
    @ApiImplicitParams(@ApiImplicitParam(name = "id", value = "业务对象主键", required = true, dataType = "String", paramType = "path"))
    @RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
    public @ResponseBody
    MessageResult get(@PathVariable("id") String id) {
        try {
            SysLogo sysLogo = sysLogoService.getObjectById(id);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, sysLogo);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 返回分页对象
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "返回分页对象", notes = "返回分页对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/page", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult page(@RequestBody Map<String, Object> map) {
        try {
            Page page = sysLogoService.getPage(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, page);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 返回符合条件的列表
     *
     * @param map
     * @return
     */
    @RequestMapping(value = "/queryList", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryList(@RequestBody Map<String, Object> map) {
        try {
            List<SysLogo> queryList = sysLogoService.queryListByExample(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, queryList);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            //e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 返回符合条件的列表(get请求)
     *
     * @return
     */
    @RequestMapping(value = "/getLogo", method = RequestMethod.GET)
    public @ResponseBody
    MessageResult getLogo() {
        try {
            SysLogo sysLogo = new SysLogo();
            List<SysLogo> list = sysLogoService.queryListByExample(new HashMap<String, Object>());
            if (list != null && list.size() > 0) {
                if (null == list.get(0).getUrl() || "".equals(list.get(0).getUrl())) {
                    sysLogo = new SysLogo();
                    sysLogo.setUrl("sysManager/logo/logo.jpg");
                    sysLogo.setName("logo");
                } else {
                    sysLogo = list.get(0);
                }
            } else {
                sysLogo = new SysLogo();
                sysLogo.setUrl("sysManager/logo/logo.jpg");
                sysLogo.setName("logo");
            }

            return ResponseModel.getResult(MessageInfo.GETSUCCESS, sysLogo);

        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            //e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 保存实体对象
     *
     * @param
     * @return
     */
    @RequestMapping(value = "/save", method = RequestMethod.POST)
    public void save(MultipartHttpServletRequest request, HttpServletResponse response) {
        MessageResult result = new MessageResult();
        SysLogo t = new SysLogo();
        PrintWriter pw = null;
        Boolean isReturn = true;
        try {
            response.setContentType("text/html;charset=UTF-8");
            pw = response.getWriter();
            MultipartFile uploadfile = request.getFile("icon");
            if (uploadfile != null) {
                long length = uploadfile.getSize();
                if (length > 1 * 1024 * 1024) {
                    result.setSuccess(false);
                    result.setMsg("图片尺寸不能大于1M");
                    pw.print(JacksonUtils.toJson(result));
                    pw.flush();
                    isReturn = false;
                }
            }
            if (isReturn) {
                String id = request.getParameter("id");
                String name = request.getParameter("name");
                String isDelPic = request.getParameter("isDelPic");
                byte[] headpic = {};
                if ("1".equals(isDelPic) && uploadfile != null) {
                    InputStream is = uploadfile.getInputStream();
                    headpic = new byte[is.available()];
                    is.read(headpic);
                    is.close();
                }
                t.setId(id);
                t.setName(name);
//				t.setIcon(headpic);
//				t.setIsDelPic(isDelPic);

                sysLogoService.save(t);

                /**
                 String saveJson = JacksonUtils.toJson(t);
                 String dubboResultInfo = sysLogoDtoServiceCustomer.save(getUserInfoJson(), saveJson);
                 DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
                 if (dubboServiceResultInfo.isSucess()) {
                 String resultInfo = dubboServiceResultInfo.getResult();
                 //	                ShortcutMenuDto shortcutMenuDto = JacksonUtils.fromJson(resultInfo, ShortcutMenuDto.class);
                 //	                result.setResult(shortcutMenuDto);
                 //	                result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
                 //	                result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
                 } else {
                 result.setSuccess(MessageInfo.SAVEERROR.isResult());
                 String msg = dubboServiceResultInfo.getExceptionMsg()==null?dubboServiceResultInfo.getMsg():dubboServiceResultInfo.getExceptionMsg();
                 result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + msg + "】");
                 }
                 **/
                pw.print(JacksonUtils.toJson(result));
                pw.flush();
            }
        } catch (Exception e) {
            try {
                ObjectMapper mapper = new ObjectMapper();
                String paramJson = mapper.writeValueAsString(t);
                log.error("调用save方法:  【参数" + paramJson + "】======" + "【" + e.getMessage() + "】");
                result.setSuccess(MessageInfo.SAVEERROR.isResult());
                result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + e.getMessage() + "】");
                pw.print(JacksonUtils.toJson(result));
                pw.flush();
            } catch (JsonProcessingException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }

        } finally {
            try {
                pw.close();
            } catch (Exception e) {
            }
        }
    }

    /**
     * 删除实体对象
     *
     * @param id
     * @return
     */
    @RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult delete(@PathVariable("id") String id) {

        try {
            int deleteCount = sysLogoService.deleteObjectById(id);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, deleteCount);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            //e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

        /**
         MessageResult result=new MessageResult();
         try {
         String dubboResultInfo=sysLogoDtoServiceCustomer.deleteObjectById(getUserInfoJson(), "{\"id\":\""+id+"\"}");
         DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
         if(dubboServiceResultInfo.isSucess()){
         String resultInfo= dubboServiceResultInfo.getResult();
         SysLogoDto sysLogoDto=JacksonUtils.fromJson(resultInfo, SysLogoDto.class);
         result.setResult(sysLogoDto);
         result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
         result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
         }else{
         result.setSuccess(MessageInfo.DELETEERROR.isResult());
         result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
         }
         } catch (Exception e) {
         e.printStackTrace();
         log.error("调用delete方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
         result.setSuccess(MessageInfo.DELETEERROR.isResult());
         result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】");
         }

         return result;
         **/
    }


    /**
     * 删除实体对象
     *
     * @param ids
     * @return
     */
    @RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult deleteBatch(@PathVariable("ids") String ids) {

        try {
            List<String> deleteMethod = Arrays.asList(ids.split(","));
            int count = sysLogoService.deleteAllObjectByIds(deleteMethod);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, count);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            //e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

        /**
         MessageResult result=new MessageResult();
         try {
         String dubboResultInfo=sysLogoDtoServiceCustomer.deleteAllObjectByIds(getUserInfoJson(), "{\"id\":\""+ids+"\"}");
         DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
         if(dubboServiceResultInfo.isSucess()){
         String resultInfo= dubboServiceResultInfo.getResult();
         SysLogoDto sysLogoDto=JacksonUtils.fromJson(resultInfo, SysLogoDto.class);
         result.setResult(sysLogoDto);
         result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
         result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
         }else{
         result.setSuccess(MessageInfo.DELETEERROR.isResult());
         result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
         }
         } catch (Exception e) {
         e.printStackTrace();
         log.error("调用delete方法:  【参数"+ids+"】======"+"【"+e.getMessage()+"】");
         result.setSuccess(MessageInfo.DELETEERROR.isResult());
         result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】");
         }

         return result;
         **/
    }

    /**
     * 修改修改实体对象
     *
     * @param
     * @return
     */
    @RequestMapping(value = "/update", method = RequestMethod.POST)
    public void update(MultipartHttpServletRequest request, HttpServletResponse response) {


        MessageResult result = new MessageResult();
        SysLogo t = new SysLogo();
        PrintWriter pw = null;
        Boolean isReturn = true;
        try {
        	/*response.setContentType("text/html;charset=UTF-8");
        	pw = response.getWriter();
			MultipartFile uploadfile =  request.getFile("icon");
        	if(uploadfile != null){
        		long length = uploadfile.getSize();
        		if(length>1*1024*1024){
        			result.setSuccess(false);
        			result.setMsg("图片尺寸不能大于1M");
        			pw.print(JacksonUtils.toJson(result));
					pw.flush();
					isReturn = false;
        		}
        	}*/
            if (isReturn) {
                String id = request.getParameter("id");
                String name = request.getParameter("name");
                String url = request.getParameter("url");
				/*byte[] headpic={};
				if("1".equals(isDelPic) && uploadfile != null){
					InputStream is = uploadfile.getInputStream();
					headpic = new byte[is.available()];  
					is.read(headpic);  
					is.close();  
				}*/

				t.setId(id);
				t.setName(name);
				t.setUrl(url);
				int i = sysLogoService.update(t);
				result.setResult(i);
                result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
                result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
				/**
	            String saveJson = JacksonUtils.toJson(t);
	            String dubboResultInfo = sysLogoDtoServiceCustomer.update(getUserInfoJson(), saveJson);
	            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
	            if (dubboServiceResultInfo.isSucess()) {
	                String resultInfo = dubboServiceResultInfo.getResult();
//	                ShortcutMenuDto shortcutMenuDto = JacksonUtils.fromJson(resultInfo, ShortcutMenuDto.class);
//	                result.setResult(shortcutMenuDto);
//	                result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
//	                result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
	            } else {
	                result.setSuccess(MessageInfo.SAVEERROR.isResult());
	                String msg = dubboServiceResultInfo.getExceptionMsg()==null?dubboServiceResultInfo.getMsg():dubboServiceResultInfo.getExceptionMsg();
	                result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + msg + "】");
	            }
	            **/
	            pw.print(JacksonUtils.toJson(result));
				pw.flush();
    		}

        } catch (Exception e) {
            try {
                ObjectMapper mapper = new ObjectMapper();
                String paramJson = mapper.writeValueAsString(t);
                log.error("调用save方法:  【参数" + paramJson + "】======" + "【" + e.getMessage() + "】");
                result.setSuccess(MessageInfo.SAVEERROR.isResult());
                result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + e.getMessage() + "】");
                pw.print(JacksonUtils.toJson(result));
				pw.flush();

            } catch (JsonProcessingException e1) {
                // TODO Auto-generated catch block
                e1.printStackTrace();
            }

        }
    }

    /**
     * 伪删除实体对象
     *
     * @param id
     * @return
     */
    @RequestMapping(value = "/deletePseudo/{id}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult deletePseudo(@PathVariable("id") String id) {

        try {
            int count = sysLogoService.deletePseudoObjectById(id);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, count);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            //e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

        /**
         MessageResult result=new MessageResult();
         try {
         String dubboResultInfo=sysLogoDtoServiceCustomer.deletePseudoObjectById(getUserInfoJson(), "{\"id\":\""+id+"\"}");
         DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
         if(dubboServiceResultInfo.isSucess()){
         String resultInfo= dubboServiceResultInfo.getResult();
         SysLogoDto sysLogoDto=JacksonUtils.fromJson(resultInfo, SysLogoDto.class);
         result.setResult(sysLogoDto);
         result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
         result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
         }else{
         result.setSuccess(MessageInfo.DELETEERROR.isResult());
         result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
         }
         } catch (Exception e) {
         e.printStackTrace();
         log.error("调用deletePseudo方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
         result.setSuccess(MessageInfo.DELETEERROR.isResult());
         result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】");
         }

         return result;
         **/
    }


    /**
     * 伪删除实体对象
     *
     * @param ids
     * @return
     */
    @RequestMapping(value = "/deletePseudoBatch/{ids}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult deletePseudoBatch(@PathVariable("ids") String ids) {

        try {

            List<String> list = Arrays.asList(ids.split(","));
            int deleteCount = sysLogoService.deletePseudoAllObjectByIds(list);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, deleteCount);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            //e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

        /**
         MessageResult result=new MessageResult();
         try {
         String dubboResultInfo=sysLogoDtoServiceCustomer.deletePseudoAllObjectByIds(getUserInfoJson(), "{\"id\":\""+ids+"\"}");
         DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
         if(dubboServiceResultInfo.isSucess()){
         String resultInfo= dubboServiceResultInfo.getResult();
         SysLogoDto sysLogoDto=JacksonUtils.fromJson(resultInfo, SysLogoDto.class);
         result.setResult(sysLogoDto);
         result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
         result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
         }else{
         result.setSuccess(MessageInfo.DELETEERROR.isResult());
         result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
         }
         } catch (Exception e) {
         e.printStackTrace();
         log.error("调用deletePseudoBatch方法:  【参数"+ids+"】======"+"【"+e.getMessage()+"】");
         result.setSuccess(MessageInfo.DELETEERROR.isResult());
         result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】");
         }

         return result;
         **/
    }

    /**
     * 获取用户信息
     *
     * @return 用户信息JSON格式字符串
     */
    private String getUserInfoJson() {
        SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
        String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
        return userInfo;
    }

    /**
     * 对象转数组
     *
     * @param obj
     * @return
     * @throws IOException
     */
    public byte[] toByteArray(Object obj) throws IOException {
        byte[] bytes = null;
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(bos);
        oos.writeObject(obj);
        oos.flush();
        bytes = bos.toByteArray();
        oos.close();
        bos.close();
        return bytes;
    }

}
