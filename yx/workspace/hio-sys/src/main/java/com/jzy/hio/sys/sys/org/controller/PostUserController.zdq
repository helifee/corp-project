package com.jzy.hio.sys.sys.org.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.OpeLogInfo;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.sys.sys.org.entity.PostUser;
import com.jzy.hio.sys.sys.org.service.PostUserService;
import com.jzy.tools.data.JacksonUtils;


/**
 * 用户岗位关联表控制层
 *
 * @author admin
 */
@Controller
@RequestMapping("/sys/org/postUser")
@Api(tags = "用户岗位关联表控制层", description = "")
public class PostUserController {

    private static org.slf4j.Logger log = LoggerFactory.getLogger(PostUserController.class);

//	@Autowired
//	private PostUserDtoServiceCustomer postUserDtoServiceCustomer;

    @Autowired
    private PostUserService postUserService;

    /**
     * 根据Id获取业务对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @ApiOperation(value = "根据Id获取业务对象", notes = "根据Id获取业务对象")
    @ApiImplicitParams(@ApiImplicitParam(name = "id", value = "业务对象主键", required = true, dataType = "String", paramType = "path"))
    @RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
    public @ResponseBody
    MessageResult get(@PathVariable("id") String id) {
        try {
            PostUser data = postUserService.getObjectById(id);
            return ResponseModel.getResult(MessageInfo.GETERROR, data);
        } catch (Exception e) {
            log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 返回分页对象
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "返回分页对象", notes = "返回分页对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/page", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult page(@RequestBody Map<String, Object> map) {
        try {
            Page beanPage = postUserService.getPage(map);
            return ResponseModel.getResult(MessageInfo.GETERROR, beanPage);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 返回符合条件的列表
     *
     * @param postUser
     * @return
     */
    @ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "postUser", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/queryList", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryList(@RequestBody PostUser postUser) {
        try {
            List<PostUser> results = postUserService.queryList(postUser);
            return ResponseModel.getResult(MessageInfo.GETERROR, results);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 保存实体对象
     *
     * @param postUser
     * @return
     */
    @ApiOperation(value = "保存实体对象", notes = "保存实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "postUser", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
    public @ResponseBody
    MessageResult save(@RequestBody PostUser postUser) {
        try {
            int save = postUserService.save(postUser);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 批量保存post
     *
     * @param map {"postIds":"f61fde7a32154775a8ce85e2361402de","userIds":"55109dca3fdf49d2ae6ce45fcd6b6c53","uuids":"ba0acf9e8ba342099d62e2692fb8d243","type":"users"}
     * @return
     */
    @ApiOperation(value = "批量保存post", notes = "批量保存post")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "company", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/saveBatch", method = {RequestMethod.POST}, consumes = "application/json")
    @OpeLogInfo(node = "保存岗位和用户关系")
    public @ResponseBody
    MessageResult saveBatch(@RequestBody Map<String, Object> map) {
        try {
            int save = postUserService.saveBatch(map);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 批量删除postuser根据post or user ids
     *
     * @param map {"userIds":["8b331ea6e10e4295b0d21028e28e38c9"],"postIds":"f61fde7a32154775a8ce85e2361402de","type":"users"}
     * @return
     */
    @ApiOperation(value = "批量删除岗位和用户的关系", notes = "批量删除岗位和用户的关系")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "company", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/deleteBatchByUserOrPostIds", method = {RequestMethod.POST}, consumes = "application/json")
    @OpeLogInfo(node = "批量删除岗位和用户的关系")
    public @ResponseBody
    MessageResult deleteBatchByUserOrPostIds(@RequestBody Map<String, Object> map) {
        try {
            int save = postUserService.deleteAllObjectByUserOrPostIds(map);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "id", value = " id", required = true, dataType = "String")})
    @RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult delete(@PathVariable("id") String id) {
        try {
            int save = postUserService.deleteObjectById(id);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "ids", value = " ids", required = true, dataType = "String")})
    @RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult deleteBatch(@PathVariable("ids") String ids) {
        try {
            int save = postUserService.deleteAllObjectByIds(Arrays.asList(ids));
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 修改修改实体对象
     *
     * @param id
     * @param map
     * @return
     */
    @ApiOperation(value = "修改修改实体对象", notes = "修改修改实体对象")
    @ApiImplicitParams({@ApiImplicitParam(name = "id", value = "id", required = true, dataType = "Integer", paramType = "path"), @ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
    public @ResponseBody
    MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
        try {
            PostUser data = postUserService.getObjectById(id);
            String json = JacksonUtils.toJson(data);
            Map<String, Object> oldMap = JacksonUtils.fromJson(json, HashMap.class);
            oldMap.putAll(map);
            String updateJson = JacksonUtils.toJson(oldMap);
            PostUser fromJson = JacksonUtils.fromJson(updateJson, PostUser.class);
            int updateCount = postUserService.update(fromJson);
            return ResponseModel.getResult(MessageInfo.UPDATESUCCESS, updateCount);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 设置主岗
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "设置主岗", notes = "设置主岗")
    @ApiImplicitParams({@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/setDefaultPost", method = RequestMethod.PUT, consumes = "application/json")
    public @ResponseBody
    MessageResult setDefaultPost(@RequestBody Map<String, Object> map) {
        try {
            int save = postUserService.setDefaultPost(map);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 批量保存post_user和role_user
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "批量保存post_user和role_user", notes = "批量保存post_user和role_user")
    @ApiImplicitParams({@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @OpeLogInfo(node = "用户引入岗位")
    @RequestMapping(value = "/savePostUserAndRoleUser", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult savePostUserAndRoleUser(@RequestBody Map<String, Object> map) {
        try {
            int save = postUserService.savePostUserAndRoleUser(map);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

}
