package com.jzy.hio.sys.sys.res.service.impl;

import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.sys.sys.res.dto.DataNodeDto;
import com.jzy.hio.sys.sys.res.dto.OperationDto;
import com.jzy.hio.sys.sys.res.entity.Operation;
import com.jzy.hio.sys.sys.res.entity.Resource;
import com.jzy.hio.sys.sys.res.mapper.OperationDao;
import com.jzy.hio.sys.sys.res.service.AppSystemService;
import com.jzy.hio.sys.sys.res.service.OperationService;
import com.jzy.hio.sys.sys.res.service.ResourceService;
import com.jzy.hio.sys.sys.res.utils.InvalidCustomException;
import com.jzy.hio.sys.sys.res.utils.ResourceType;
import com.jzy.tools.data.JacksonUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author admin
 * 
 * 
 */

@Service
public class OperationServiceImpl extends BaseServiceImpl<String, Operation> implements OperationService {
	private static final Logger	logger	= Logger.getLogger(OperationServiceImpl.class);
	@Autowired
	private OperationDao		operationDao;
	@Autowired
	private AppSystemService	appSystemService;
	@Autowired
	private ResourceService		resourceService;

	/**
	 * 根据资源id获取功能操作点(查询菜单下的一级按钮)
	 * 
	 * @param paramater(资源ID)
	 * @return
	 */
	@Override
	public List<DataNodeDto> queryOperationListRootByResourceId(Map<String, Object> paramater) throws Exception {
		return operationDao.queryOperationListRootByResourceId(paramater);
	}

	/**
	 * 根据资源id获取所有按钮
	 * 
	 * @param paramater(资源ID)
	 * @return
	 */
	@Override
	public List<DataNodeDto> queryOperationListAllByResourceId(Map<String, Object> paramater) throws Exception {
		return operationDao.queryOperationListAllByResourceId(paramater);
	}

	@Override
	public List<OperationDto> queryListByCondition(Map<String, Object> map) throws Exception {
		return operationDao.queryListByCondition(map);
	}

	/**
	 * 校验编码重复
	 * 
	 * @param map
	 *            参数
	 * @return
	 * @throws Exception
	 */
	public Integer getCodeCount(Map<String, Object> map) throws Exception {
		return operationDao.getCodeCount(map);
	}

	/**
	 * 修改按钮，并维护全路径
	 * 
	 * @param operation
	 *            参数
	 * @return
	 * @throws Exception
	 */
	@Override
	@Transactional(readOnly = false, rollbackFor = Exception.class)
	public Integer updateButton(Operation operation) throws Exception {
		int result = 0;
		try {
			// 排序或名称修改，维护全路径
			Operation opeOld = getObjectById(operation.getId());
			if (opeOld == null) {
				throw new InvalidCustomException("不存在此菜单");
			}
			boolean flag = false;
			// 修改按钮名称，维护全路径
			/*
			 * if(!opeOld.getName().equals(operation.getName())){
			 * operation.setPrefixName(prefixName+"/"+operation.getName());
			 * map.put("prefixIdOld", opeOld.getPrefixId()); map.put("prefixNameOld",
			 * opeOld.getPrefixName()+"/"); map.put("prefixNameNew",
			 * resource.getPrefixName()+"/"); map.put("menuFlag", true); flag=true; }
			 */
			Map<String, Object> map = new HashMap<String, Object>();
			// 修改上级菜单，维护全路径
			if (operation.getParentId() != null && StringUtils.isNotBlank(operation.getParentId())) {
				String parentId = operation.getParentId();
				Operation opeP = getObjectById(parentId);
				operation.setPrefixId(opeP.getPrefixId() + "/" + operation.getId());
				operation.setPrefixName(opeP.getPrefixName() + "/" + operation.getName());
				operation.setPrefixSort(opeP.getPrefixSort() + "-" + String.format("C%05d", operation.getSort()));
				map.put("prefixIdOld", opeOld.getPrefixId());
				map.put("prefixIdNew", operation.getPrefixId());
				map.put("prefixNameOld", opeOld.getPrefixName() + "/");
				map.put("prefixNameNew", operation.getPrefixName() + "/");
				map.put("prefixSortOld", opeOld.getPrefixSort());
				map.put("prefixSortNew", operation.getPrefixSort());
				map.put("menuFlag", true);
				flag = true;
			} else if (operation.getParentId() == null || StringUtils.isBlank(operation.getParentId())) {
				String menuId = operation.getResourceId();
				Resource res = resourceService.getObjectById(menuId);
				operation.setPrefixId(res.getPrefixId() + "/" + operation.getId());
				operation.setPrefixName(res.getPrefixName() + "/" + operation.getName());
				operation.setPrefixSort(res.getPrefixSort() + "-" + String.format("C%05d", operation.getSort()));
				map.put("prefixIdOld", opeOld.getPrefixId());
				map.put("prefixIdNew", operation.getPrefixId());
				map.put("prefixNameOld", opeOld.getPrefixName() + "/");
				map.put("prefixNameNew", operation.getPrefixName() + "/");
				map.put("prefixSortOld", opeOld.getPrefixSort());
				map.put("prefixSortNew", operation.getPrefixSort());
				map.put("menuFlag", true);
				flag = true;
			}
			if (flag) {
				appSystemService.updateAllPreFix(map);
			}
			result = update(operation);
		} catch (Exception e) {
			throw e;
		}
		return result;
	}

	/**
	 * 判断菜单是否存在下级按钮
	 * 
	 * @param map
	 *            参数
	 * @return
	 * @throws Exception
	 */
	public Integer selectSonNum(Map<String, Object> map) throws Exception {
		return operationDao.selectSonNum(map);
	}

	@Override
	public List<DataNodeDto> getOperationTreeByResourceId(Map<String, Object> map) throws Exception {
		// 根据资源id获取功能操作点(查询菜单下的一级按钮)
		List<DataNodeDto> list = queryOperationListRootByResourceId(map);

		/*
		 * //根据资源id获取所有按钮 List<DataNodeDto> listAll =
		 * operationService.queryOperationListAllByResourceId(map);
		 */
		// List<DataNodeDto> listAll=new ArrayList<DataNodeDto>();
		// for (DataNodeDto dataCtrl : list) {
		// getOperationList(dataCtrl,listAll);
		// }
		return list;
	}

	public DataNodeDto getOperationList(DataNodeDto dataCtrl, List<DataNodeDto> listAll) {
		List<DataNodeDto> li = queryOperationListChild(dataCtrl.getId(), listAll);
		dataCtrl.setChildren(li);
		dataCtrl.setType(ResourceType.OPERATION.getCode());
		if (null != li && li.size() > 0) {
			for (DataNodeDto dnd : li) {
				getOperationList(dnd, listAll);
			}
		} else {
			return dataCtrl;
		}
		return dataCtrl;
	}

	public List<DataNodeDto> queryOperationListChild(String id, List<DataNodeDto> listAll) {
		List<DataNodeDto> ll = new ArrayList<DataNodeDto>();
		for (DataNodeDto dnd : listAll) {
			if (dnd.getParentId() != null && dnd.getParentId().equals(id)) {
				ll.add(dnd);
			}
		}
		return ll;
	}

	@Override
	public int updateBean(Operation operation) {
		try {
			// 校验编码重复 add by gyh 2017-3-28
			Map<String, Object> param = new HashMap<String, Object>();
			param.put("code", operation.getCode());
			param.put("id", operation.getId());
			param.put("menuId", operation.getResourceId());
			Integer isc = this.getCodeCount(param);
			if (isc > 0) {
				throw new InvalidCustomException("该菜单下此按钮编码已存在，不可重复");
			}
			return this.updateButton(operation);
		} catch (Exception e) {
			logger.error(e);

		}
		return 0;
	}

	@Override
	public int saveBean(Operation operation) {
		try {
			// 校验编码重复 add by gyh 2017-3-28
			Map<String, Object> param = new HashMap<String, Object>();
			param.put("code", operation.getCode());
			param.put("menuId", operation.getResourceId());
			Integer isc = this.getCodeCount(param);
			if (isc > 0) {
				throw new InvalidCustomException("该菜单下此按钮编码已存在，不可重复");
			}

			// 排序号不输入，改为系统最大排序加1，同时维护全路径相关字段 add by gyh 2017-4-2
			Map<String, Object> map = JacksonUtils.fromJson(JacksonUtils.toJson(operation), HashMap.class);
			map.put("tableName", "pt_sys_res_operation");
			Long maxSort = appSystemService.getMaxSort(map) + 1L;// 排序号自动加1
			operation.setSort(maxSort);
			// 菜单全路径
			if (operation.getParentId() != null && StringUtils.isNotBlank(operation.getParentId())) {
				String parentId = operation.getParentId();
				Operation opeP = this.getObjectById(parentId);
				operation.setPrefixId(opeP.getPrefixId() + "/" + operation.getId());
				operation.setPrefixName(opeP.getPrefixName() + "/" + operation.getName());
				operation.setPrefixSort(opeP.getPrefixSort() + "-" + String.format("C%05d", operation.getSort()));
			} else {
				String menuId = operation.getResourceId();
				Resource res = resourceService.getObjectById(menuId);
				operation.setPrefixId(res.getPrefixId() + "/" + operation.getId());
				operation.setPrefixName(res.getPrefixName() + "/" + operation.getName());
				operation.setPrefixSort(res.getPrefixSort() + "-" + String.format("C%05d", maxSort));
			}
			return this.save(operation);
		} catch (Exception e) {
			logger.error(e);
		}
		return 0;
	}

	@Override
	public MessageResult deletePseudoBeanById(String id) {
		try {
			Operation ope = new Operation();
			ope.setId(id);
			// 判断是否存在下级按钮 add by gyh 2017-4-10
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("buttonId", ope.getId());
			Integer c = this.selectSonNum(map);
			if (c > 0) {
				throw new InvalidCustomException("存在下级按钮，不可删除");
			}
			int result = this.deletePseudoObjectById(ope.getId());
			return ResponseModel.getResult(MessageInfo.DELETESUCCESS, result);
		} catch (Exception e) {
			logger.error(e);
			return ResponseModel.getResult(MessageInfo.DELETEERROR, "删除数据失败！");
		}
	}
}
