package com.jzy.hio.sys.sys.org.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.base.utils.AdAuthenticationUtil;
import com.jzy.hio.base.utils.DubboServiceResultInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.encrypt.EndecryptUtil;
import com.jzy.hio.sys.sys.org.dto.OrgnazationDto;
import com.jzy.hio.sys.sys.org.dto.OrgnazationNodeDto;
import com.jzy.hio.sys.sys.org.dto.UserDto;
import com.jzy.hio.sys.sys.org.entity.Orgnazation;
import com.jzy.hio.sys.sys.org.entity.User;
import com.jzy.hio.sys.sys.org.mapper.UserDao;
import com.jzy.hio.sys.sys.org.service.OrgnazationService;
import com.jzy.hio.sys.sys.org.service.RootService;
import com.jzy.hio.sys.sys.org.service.UserService;
import com.jzy.hio.sys.sys.org.utils.EncryptionUtils;
import com.jzy.hio.sys.sys.res.utils.InvalidCustomException;
import com.jzy.hio.sys.sys.security.dto.AuthenticationDto;
import com.jzy.hio.sys.sys.sync.service.SyncDataService;
import com.jzy.hio.sys.utils.SyncDataThread;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.tools.login.LoginUtils;

import tk.mybatis.mapper.entity.Example;

/**
 * @author sy
 */

@RestController
@RequestMapping("sys/userServiceImpl")
@Service
public class UserServiceImpl extends BaseServiceImpl<String, User> implements UserService {

	private static Logger log = LoggerFactory.getLogger(UserServiceImpl.class);

	@Autowired
	private UserDao userDao;

	@Autowired
	private OrgnazationService orgnazationService;

	@Autowired
	private RootService rootService;


	@Autowired
	private SyncDataService syncDataService;


	/**
	 * 根据组织结构查询所有人
	 *
	 * @param parentId
	 * @return
	 */
	@Override
	public List<UserDto> queryUserListByOrgId(Map<String, Object> paramater) throws Exception {
		return userDao.queryUserListByOrgId(paramater);
	}

	@Override
	//	@Description(instruction = "根据岗位查询用户列表")
	public List<UserDto> queryUserListByPostId(Map<String, Object> paramater) throws Exception {
		return userDao.queryUserListByPostId(paramater.get("postId") == null ? "" : (String) paramater.get("postId"));
	}

	@Override
	//	@Description(instruction = "根据角色查询用户列表")
	public List<UserDto> queryUserListByRoleId(Map<String, Object> paramater) throws Exception {
		// TODO Auto-generated method stub
		return userDao.queryUserListByRoleId(paramater);
	}

	@Override
	public List<UserDto> queryRoleUserByRoleId(Map<String, Object> paramater) throws Exception {
		return userDao.queryRoleUserByRoleId(paramater);
	}

	@Override
	public List<OrgnazationNodeDto> queryAllUserList(Map<String, Object> map) throws Exception {
		return userDao.queryAllUserList(map);

	}

	@Override
	public List<UserDto> queryAllUserListReturnUser(Map<String, Object> map) throws Exception {
		return userDao.queryAllUserListReturnUser(map);

	}

	@Override
	public List<Map<String, String>> queryUsersByIds(Map map) throws Exception {
		return userDao.queryUsersByIds(map);
	}

	/**
	 * 根据IDs获取人员DTO
	 *
	 * @param paramater
	 * @return
	 */
	@RequestMapping("/getUserByUserIds")
	@Override
	public List<UserDto> getUserByUserIds(@RequestBody Map map) throws Exception {
		String ids = (String) map.get("userIds");
		String[] idsList = ids.split(",");
		Map<String,Object> mapCon = new HashMap<String, Object>();
		mapCon.put("ids", idsList);
		return userDao.getUserByUserIds(mapCon);
	}

	/**
	 * 根据人员姓名获取人员DTO
	 *
	 * @param paramater
	 * @return
	 */
	@Override
	public List<UserDto> getUserByUserName(Map map) throws Exception {
		return userDao.getUserByUserName(map);
	}

	/**
	 * 根据loginNames获取人员DTO
	 *
	 * @param paramater
	 * @return
	 */
	@RequestMapping("/getUserByUserLoginNames")
	@Override
	public List<UserDto> getUserByUserLoginNames(@RequestBody Map map) throws Exception {
		String loginNames = (String) map.get("loginNames");
		String[] loginNamesList = loginNames.split(",");
		Map mapCon = new HashMap<String, Object>();
		mapCon.put("loginNames", loginNamesList);
		return userDao.getUserByUserLoginNames(mapCon);
	}

	/**
	 * 批量保存用户排序号
	 *
	 * @param paramater
	 * @return
	 */
	public Integer saveUsersSort(Map map) throws Exception {
		return userDao.saveUsersSort(map);
	}

	/**
	 * 获取用户详情
	 *
	 * @param paramater
	 * @return
	 */
	@RequestMapping("/selectUserInfoById")
	public UserDto selectUserInfoById(Map map) throws Exception {
		return userDao.selectUserInfoById(map);
	}

	/**
	 * 校验登录名是否重复
	 *
	 * @param paramater
	 * @return
	 */
	public Integer checkLoginName(Map map) throws Exception {
		return userDao.checkLoginName(map);
	}

	/**
	 * 获取已建产品人数
	 *
	 * @param paramater
	 * @return
	 */
	@Override
	public Integer getAuthNum(String proCode) throws Exception {
		return userDao.getAuthNum(proCode);
	}

	@Override
	public AuthenticationDto getOrgInfoByUserIdOrOrgId(Map map) throws Exception {
		AuthenticationDto authenticationDto = new AuthenticationDto();
		if (null != map.get("userId") && !"".equals((String) map.get("userId"))) {
			User user = userDao.selectByPrimaryKey((String) map.get("userId"));
			map.put("orgId", user.getBelongOrgId());
		} else {
			if (null == map.get("orgId") || "".equals((String) map.get("orgId"))) {
				return authenticationDto;
			}
		}

		//当前用户的所属组织
		//获取当前用户的组织机构
		List<OrgnazationDto> orgnazationDtoList = orgnazationService.queryAuthOrgListByOrgId(map);

		if (null != orgnazationDtoList && orgnazationDtoList.size() > 0) {

			//直属组织
			OrgnazationDto orgnazationDto = orgnazationDtoList.get(orgnazationDtoList.size() - 1);
			//顶级组织
			OrgnazationDto topOrgnazationDto = orgnazationDtoList.get(0);
			//公司
			List<OrgnazationDto> companyList = new ArrayList<OrgnazationDto>();
			//部门
			List<OrgnazationDto> deptList = new ArrayList<OrgnazationDto>();
			for (OrgnazationDto orgDto : orgnazationDtoList) {
				if (orgDto.getType().equals("company") || orgDto.getType().equals("zb")) {
					companyList.add(orgDto);
				}
				if (orgDto.getType().equals("dept")) {
					deptList.add(orgDto);
				}
			}
			//设置当前用户所在组织的类型
			authenticationDto.setOrganizationType(orgnazationDto.getType());
			//设置当前用户所在的组织，分期、项目、部门、顶级部门、公司、顶级公司
			if (orgnazationDto.getType().equals("branch")) {
				//设置分期
				authenticationDto.setBranchDto(orgnazationDto);
				//设置项目
				authenticationDto.setGroupDto(orgnazationDtoList.get(orgnazationDtoList.size() - 2));
				//设置直属公司
				authenticationDto.setDirectCompanyDto(companyList.get(companyList.size() - 1));
				//设置顶级公司
				authenticationDto.setTopCompanyDto(companyList.get(0));
				//顶级公司也可以如下设置
				//authenticationDto.setTopCompanyDto(topOrgnazationDto);
			} else if (orgnazationDto.getType().equals("group")) {
				//设置项目
				authenticationDto.setGroupDto(orgnazationDto);
				//设置直属公司
				authenticationDto.setDirectCompanyDto(companyList.get(companyList.size() - 1));
				//设置顶级公司
				authenticationDto.setTopCompanyDto(companyList.get(0));
			} else if (orgnazationDto.getType().equals("dept")) {
				//设置直属部门
				authenticationDto.setDirectDeptDto(orgnazationDto);
				//设置顶级部门
				authenticationDto.setTopDeptDto(deptList.get(0));
				//设置直属公司
				authenticationDto.setDirectCompanyDto(companyList.get(companyList.size() - 1));
				//设置顶级公司
				authenticationDto.setTopCompanyDto(companyList.get(0));
			} else if (orgnazationDto.getType().equals("company")) {
				//设置直属公司
				authenticationDto.setDirectCompanyDto(orgnazationDto);
				//设置顶级公司
				authenticationDto.setTopCompanyDto(topOrgnazationDto);
			} else if (orgnazationDto.getType().equals("zb")) {
				//设置直属公司
				authenticationDto.setDirectCompanyDto(orgnazationDto);
				//设置顶级公司
				authenticationDto.setTopCompanyDto(topOrgnazationDto);
			}
		}
		return authenticationDto;
	}

	/**
	 * 根据岗位Id获取userDto
	 *
	 * @return
	 */
	@Override
	public Map<String, Object> getUserListByPostIds(Map<String, Object> paramater) throws Exception {
		String[] postIds = paramater.get("postIds").toString().split(",");
		Map<String, Object> res = new HashMap<String, Object>();
		for (int i = 0; i < postIds.length; i++) {
			Map<String, Object> mapCon = new HashMap<String, Object>();
			mapCon.put("postId", postIds[i]);
			List<UserDto> listUserDto = this.queryUserListByPostId(mapCon);
			res.put(postIds[i], listUserDto);
		}
		return res;
	}

	/**
	 * 根据标准岗位Id和组织机构id（项目、公司、集团）获取userDto
	 *
	 * @return
	 */
	@Override
	public Map<String, Object> getUserListByStandardpostIdAndOrgIds(Map<String, Object> paramater) throws Exception {
		Map<String, Object> res = new HashMap<String, Object>();
		Map<String, Object> mapCon = new HashMap<String, Object>();
		mapCon.put("standardpostId", paramater.get("standardpostId").toString());
		List<UserDto> listUserDto = new ArrayList<UserDto>();
		//首先查分期ID
		if (paramater.containsKey("branchId") && paramater.get("branchId") != null && !StringUtils.isBlank(paramater.get("branchId").toString())) {
			mapCon.put("orgId", paramater.get("branchId").toString());
			listUserDto = userDao.getUserListByStandardpostIdAndOrgIds(mapCon);
			//分期为空，查项目ID
			if (null == listUserDto || listUserDto.size() == 0) {
				if (paramater.containsKey("groupId") && paramater.get("groupId") != null && !StringUtils.isBlank(paramater.get("groupId").toString())) {
					mapCon.put("orgId", paramater.get("groupId").toString());
					listUserDto = userDao.getUserListByStandardpostIdAndOrgIds(mapCon);
					//项目为空，查公司ID
					if (null == listUserDto || listUserDto.size() == 0) {
						if (paramater.containsKey("companyId") && paramater.get("companyId") != null && !StringUtils.isBlank(paramater.get("companyId").toString())) {
							mapCon.put("orgId", paramater.get("companyId").toString());
							//							listUserDto = userDao.getUserListByStandardpostIdAndOrgIds(mapCon);
							listUserDto = userDao.getUserListByStandardpostIdAndOrgIdsUnder(mapCon);
							//公司为空，查集团ID
							if (null == listUserDto || listUserDto.size() == 0) {
								if (paramater.containsKey("zbId") && paramater.get("zbId") != null && !StringUtils.isBlank(paramater.get("zbId").toString())) {
									mapCon.put("orgId", paramater.get("zbId").toString());
									//									listUserDto = userDao.getUserListByStandardpostIdAndOrgIds(mapCon);
									listUserDto = userDao.getUserListByStandardpostIdAndOrgIdsUnder(mapCon);
									if (null == listUserDto || listUserDto.size() == 0) {
										res.put(paramater.get("standardpostId").toString(), listUserDto);
									} else {
										res.put(paramater.get("standardpostId").toString(), listUserDto);
									}
								}
							} else {
								res.put(paramater.get("standardpostId").toString(), listUserDto);
							}
						}
					} else {
						res.put(paramater.get("standardpostId").toString(), listUserDto);
					}
				}
			} else {
				res.put(paramater.get("standardpostId").toString(), listUserDto);
			}

		}

		return res;
	}

	/**
	 * 获取指定组织下的人员
	 *
	 * @return
	 */
	@Override
	public Map<String, Object> getUserListByOrgId(Map<String, Object> param) throws Exception {
		String[] orgIds = param.get("orgIds").toString().split(",");
		Boolean isLeaf = (Boolean) param.get("isLeaf");
		//查询出来所有组织机构
		List<Orgnazation> list_org = orgnazationService.queryAllOrgListReturnOrg();

		Map<String, Object> map = new HashMap<String, Object>();
		//查询出来所有人
		List<UserDto> list_user = this.queryAllUserListReturnUser(map);

		Map<String, Object> res = new HashMap<String, Object>();
		if (isLeaf) {//包含下级
			for (int i = 0; i < orgIds.length; i++) {
				Orgnazation orgnazation = orgnazationService.getObjectById(orgIds[i]);
				//包含下级组织机构的list
				List<Orgnazation> list_result = new ArrayList<Orgnazation>();
				//返回的人员List
				List<UserDto> listUserDto = new ArrayList<UserDto>();
				if (null != orgnazation) {
					list_result.add(orgnazation);
					list_result = getOrgList(list_result, orgnazation, list_org);
				}
				for (Orgnazation o : list_result) {
					for (UserDto u : list_user) {
						if (u.getBelongOrgId().equals(o.getId())) {
							listUserDto.add(u);
						}
					}
				}
				res.put(orgIds[i], listUserDto);
			}
		} else {//不包含下级
			for (int i = 0; i < orgIds.length; i++) {
				//返回的人员List
				List<UserDto> listUserDto = new ArrayList<UserDto>();
				for (UserDto u : list_user) {
					if (u.getBelongOrgId().equals(orgIds[i])) {
						listUserDto.add(u);
					}
				}
				res.put(orgIds[i], listUserDto);
			}
		}
		return res;
	}

	/**
	 * 递归查询组织结构子节点
	 *
	 * @param orgnazationNodeDto
	 * @return
	 */
	public List<Orgnazation> getOrgList(List<Orgnazation> list_result, Orgnazation orgnazation, List<Orgnazation> list_org) throws Exception {
		List<Orgnazation> list1 = queryOrgChildNodeReturnOrg(orgnazation.getId(), list_org);
		list_result.addAll(list1);
		if (list1 != null && list1.size() > 0) {
			for (Orgnazation orgnazation1 : list1) {
				getOrgList(list_result, orgnazation1, list_org);
			}
		} else {
			return list_result;
		}
		return list_result;
	}

	//查询组织结构子节点（代替从数据库中进行查询）
	public List<Orgnazation> queryOrgChildNodeReturnOrg(String parentId, List<Orgnazation> list_org) {
		List<Orgnazation> listOrgChildNode = new ArrayList<Orgnazation>();
		for (Orgnazation orgNodeDto : list_org) {
			if (parentId.equals(orgNodeDto.getParentId())) {
				listOrgChildNode.add(orgNodeDto);
			}
		}
		return listOrgChildNode;
	}


	/**
	 * 根据角色id获取用户
	 *
	 * @return
	 */
	public Map<String, Object> getUserListByRoleIds(Map<String, Object> paramater) throws Exception {
		String[] roleIds = paramater.get("roleIds").toString().split(",");
		Map<String, Object> res = new HashMap<String, Object>();
		for (int i = 0; i < roleIds.length; i++) {
			Map<String, Object> mapCon = new HashMap<String, Object>();
			mapCon.put("roleId", roleIds[i]);
			List<UserDto> listUserDto = this.queryUserListByRoleId(mapCon);
			res.put(roleIds[i], listUserDto);
		}
		return res;
	}


	/**
	 * 根据搜索条件查询用户及其岗位
	 *
	 * @param userInfo
	 * @return
	 */
	@Override
	public List<Map<String, Object>> queryUserAndPostsByUname(Map<String, Object> paramater) throws Exception {
		return userDao.queryUserAndPostsByUname(paramater);
	}

	@Override
	public String resetPassword(String sign, String password, String loginName) throws Exception {
		try {
			//重置全部用户密码
			if (sign.equals("1")) {
				Map map = new HashMap();
				map.put("sidx", "id");
				map.put("sord", "desc");
				List<User> userList = queryListByExample(map);
				for (User user : userList) {
					user.setPassword(EncryptionUtils.getEncryptInfo(user.getLoginName(), password));
					userDao.updateByPrimaryKeySelective(user);
				}
			} else if (sign.equals("0")) {
				//重置单个用户密码
				Map map = new HashMap();
				map.put("loginName", loginName);

				List<User> userList = queryListByExample(map);
				for (User user : userList) {
					user.setPassword(EncryptionUtils.getEncryptInfo(user.getLoginName(), password));
					userDao.updateByPrimaryKeySelective(user);
				}
			}

			return "重置成功";
		} catch (Exception e) {
			return "重置失败";
		}
	}

	/**
	 * 获取多个人员岗位id
	 *
	 * @param paramater
	 * @return
	 */
	@Override
	public List<String> selectPuIds(Map<String, Object> paramater) throws Exception {
		return userDao.selectPuIds(paramater);
	}

	/**
	 * 获取多个人员
	 *
	 * @param paramater
	 * @return
	 */
	@Override
	public List<Map<String, String>> queryPostUsersByIds(Map<String, Object> paramater) throws Exception {
		return userDao.queryPostUsersByIds(paramater);
	}

	/**
	 * 根据条件查询用户
	 *
	 * @param paramater
	 * @return
	 */
	@Override
	public List<UserDto> selectUserByQuery(Map<String, Object> paramater) throws Exception {
		return userDao.selectUserByQuery(paramater);
	}

	/**
	 * 除去物业的人集合
	 *
	 * @param paramater
	 * @return
	 */
	@Override
	public List<User> queryListOutWuye(Map<String, Object> paramater) throws Exception {
		return userDao.queryListOutWuye(paramater);
	}

	/**
	 * 更改用户密码按组织机构进行查询
	 *
	 * @param paramater
	 * @return
	 */
	@Override
	public List<User> queryListUpdatePwdUserByOrgId(Map<String, Object> paramater) throws Exception {
		return userDao.queryListUpdatePwdUserByOrgId(paramater);
	}

	/**
	 * 根据条件查询用户
	 *
	 * @param paramater
	 * @return
	 */
	public Page selectUserByQueryPage(Map<String, Object> map) throws Exception {
		List<UserDto> list = userDao.selectUserByQuery(map);
		Integer count = userDao.selectUserByQueryCount(map);
		Page page = new Page();
		page.setList(list);
		page.setLimit((Integer) map.get("limit"));
		page.setStart((Integer) map.get("start"));
		page.setTotal(count);
		return page;
	}

	public List<User> selectExample(Example example) {
		return userDao.selectByExample(example);
	}

	/**
	 * 修改密码，并同时修改ad密码 和邮箱密码
	 *
	 * @param user
	 * @param pwd
	 * @return
	 * @throws Exception
	 */
	@Override
	@Transactional(readOnly = false, rollbackFor = Exception.class, propagation = Propagation.REQUIRED)
	public int updateAndAd(User user, String pwd) throws Exception {
		if (StringUtils.isNotBlank(pwd)) {
			EndecryptUtil test = new EndecryptUtil();
			String reValue = test.get3DESEncrypt(pwd, user.getId());
			user.setEmailPwd(reValue);
		}
		int result = userDao.updateByPrimaryKeySelective(user);
		SecurityUserBeanInfo loginUser = LoginUtils.getSecurityUserBeanInfo();
		String tendCode = loginUser.getTendCode();
		log.info(String.format("updateAndAd.1>>loginName=[%s],pwd=[%s],tendCode=[%s]", user.getLoginName(), pwd, tendCode));
		if (result > 0 && StringUtils.isNotBlank(pwd) && "test_test009".equals(tendCode)) {
			//		if(result>0 && StringUtils.isNotBlank(pwd) ){
			try {
				//验证用户是否存在
				MessageResult mResult = AdAuthenticationUtil.authenticateIsExist(user.getLoginName());
				log.info(String.format("updateAndAd.2>>ifAdUser=[%s],msg=[%s]", mResult.isSuccess(), mResult.getMsg()));
				if (mResult.isSuccess()) {
					//修改AD密码
					MessageResult messageResult = AdAuthenticationUtil.adminChangePassword(user.getLoginName(), pwd);
					log.info(String.format("updateAndAd.3>>upPwd=[%s],msg=[%s]", messageResult.isSuccess(), messageResult.getMsg()));
					if (!messageResult.isSuccess()) {//如果AD没有修改成功，回滚
						throw new InvalidCustomException((String) messageResult.getMsg());
					}
				}
			} catch (Exception e) {
				log.info("updateAndAd.4>>" + e.getMessage());
				throw new InvalidCustomException("修改AD密码失败");
			}
		}
		return result;
	}

	/**
	 * 新增，并同时修改ad密码
	 *
	 * @param user
	 * @param pwd
	 * @return
	 * @throws Exception
	 */
	@Override
	@Transactional(readOnly = false, rollbackFor = Exception.class, propagation = Propagation.REQUIRED)
	public int saveAndAd(User user, String pwd) throws Exception {
		if (StringUtils.isNotBlank(pwd)) {
			EndecryptUtil test = new EndecryptUtil();
			String reValue = test.get3DESEncrypt(pwd, user.getId());
			user.setEmailPwd(reValue);
		}
		int result = userDao.insertSelective(user);
		SecurityUserBeanInfo loginUser = LoginUtils.getSecurityUserBeanInfo();
		String tendCode = loginUser.getTendCode();
		log.info(String.format("saveAndAd.1>>loginName=[%s],pwd=[%s],tendCode=[%s]", user.getLoginName(), pwd, tendCode));
		if (result > 0 && StringUtils.isNotBlank(pwd) && "test_test009".equals(tendCode)) {
			//		if(result>0 && StringUtils.isNotBlank(pwd)){
			try {
				//验证用户是否存在
				MessageResult mResult = AdAuthenticationUtil.authenticateIsExist(user.getLoginName());
				log.info(String.format("saveAndAd.2>>ifAdUser=[%s],msg=[%s]", mResult.isSuccess(), mResult.getMsg()));
				if (mResult.isSuccess()) {
					//修改AD密码
					MessageResult messageResult = AdAuthenticationUtil.adminChangePassword(user.getLoginName(), pwd);
					log.info(String.format("saveAndAd.3>>upPwd=[%s],msg=[%s]", messageResult.isSuccess(), messageResult.getMsg()));
					if (!messageResult.isSuccess()) {//如果AD没有修改成功，回滚
						throw new InvalidCustomException((String) messageResult.getMsg());
					}

				}
			} catch (Exception e) {
				log.info("saveAndAd.4>>" + e.getMessage());
				throw new InvalidCustomException("修改AD密码失败");
			}
		}
		return result;
	}

	@Override
	public List selectByExample(Example example) throws Exception {
		return userDao.selectByExample(example);
	}

	/**
	 * 获取岗位tree带组织机构的
	 *
	 * @param paramater
	 * @return
	 */
	@Override
	public List<OrgnazationNodeDto> getUserTree(Map<String, Object> map) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		List<OrgnazationNodeDto> list = null;
		try {
			//查询出来第一级根目录
			list = rootService.queryListRoot(map);
			//查询出来所有目录
			List<OrgnazationNodeDto> list_cata = rootService.queryAllRoot(map);
			//查询出来所有组织机构
			List<OrgnazationNodeDto> list_org = orgnazationService.queryAllOrgList(map);

			//查询出来所有岗位
			List<OrgnazationNodeDto> list_user = queryAllUserList(map);

			for (OrgnazationNodeDto orgnazationNodeDto : list) {
				getRootList(orgnazationNodeDto, list_cata, list_org, list_user);
			}


		} catch (Exception e) {
			log.error("获取树对象失败!" + e.getMessage());
		}
		return list;
	}

	@Override
	public UserDto getMyInfo() throws Exception {
		String id = LoginUtils.getSecurityUserBeanInfo().getSecurityUserDto().getId();
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("userId", id);
		UserDto oldUser = selectUserInfoById(map);
		if (oldUser == null) {
			throw new InvalidCustomException("不存在此用户");
		}
		return oldUser;
	}

	@Override
	public int updatePwd(Map<String, Object> map) throws Exception {
		SecurityUserBeanInfo user = LoginUtils.getSecurityUserBeanInfo();
		String oldPwd = (String) map.get("oldPwd");//旧密码
		String newPwd = (String) map.get("newPwd");//新密码
		if (oldPwd == null || StringUtils.isBlank(oldPwd)) {
			throw new InvalidCustomException("旧密码不可为空");
		}
		if (newPwd == null || StringUtils.isBlank(newPwd)) {
			throw new InvalidCustomException("新密码不可为空");
		}
		User oldUser = getObjectById(user.getSecurityUserDto().getId());
		String opInput = EncryptionUtils.getEncryptInfo(oldUser.getLoginName(), oldPwd);
		if (!opInput.equals(oldUser.getPassword())) {
			throw new InvalidCustomException("旧密码输入错误");
		}
		oldUser.setPassword(EncryptionUtils.getEncryptInfo(oldUser.getLoginName(), newPwd));
		int result = update(oldUser);
		//TODO(gyh--AD)
		//			int result= userService.updateAndAd(oldUser,newPwd);
		try {
			//同步数据到第三方系统
			SyncDataThread sdt = new SyncDataThread(oldUser.getId(), syncDataService, user.getTendCode());
			sdt.start();
		} catch (Exception e) {
		}
		return 1;
	}

	@Override
	public AuthenticationDto getOrgInfoByUserId(Map<String, Object> map) throws Exception {
		AuthenticationDto authenticationDto = getOrgInfoByUserIdOrOrgId(map);
		return authenticationDto;
	}

	@Override
	public List<Map<String, String>> getUserInfoByUserIds(Map<String, Object> map) throws Exception {
		List<Map<String, String>> listUser = new ArrayList<Map<String, String>>();
		if (null != map.get("ids")) {
			String ids = (String) map.get("ids");
			String[] idsList = ids.split(",");
			Map mapCon = new HashMap<String, Object>();
			mapCon.put("ids", idsList);
			listUser = queryUsersByIds(mapCon);
		}
		return listUser;
	}

	@Override
	public int saveUser(User user) throws Exception {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("loginName", user.getLoginName());
		Integer c = checkLoginName(map);
		if (c > 0) {
			throw new InvalidCustomException("账号已存在，不可重复");
		}
		String pwd = user.getPassword();
		user.setPassword(EncryptionUtils.getEncryptInfo(user.getLoginName(), user.getPassword()));
		if (user.getEmailPwd() != null && StringUtils.isNotBlank(user.getEmailPwd())) {
			EndecryptUtil test = new EndecryptUtil();
			String reValue = test.get3DESEncrypt(user.getId(), user.getEmailPwd());
			reValue = reValue.trim().intern();
			user.setEmailPwd(reValue);
		}
		int result = save(user);
		//TODO(gyh--AD)
		//			int result=userService.saveAndAd(user,pwd);

		//同步数据到第三方系统
		SyncDataThread sdt = new SyncDataThread(user.getId(), syncDataService, com.jzy.hio.base.utils.LoginUtils.getSecurityUserBeanInfo().getTendCode());
		sdt.start();
		Thread.sleep(500);

		return result;
	}

	/**
	 * 递归获取目录子节点
	 *
	 * @param orgnazationNodeDto
	 * @return
	 */
	public OrgnazationNodeDto getRootList(OrgnazationNodeDto orgnazationNodeDto, List<OrgnazationNodeDto> list_cata, List<OrgnazationNodeDto> list_org, List<OrgnazationNodeDto> list_user) throws Exception {
		//		List<OrgnazationNodeDto> list1  = rootService.queryListRoot(orgnazationNodeDto.getId());
		List<OrgnazationNodeDto> list1 = queryCataChildNode(orgnazationNodeDto.getId(), list_cata);
		orgnazationNodeDto.setChildren(list1);
		if (list1 != null && list1.size() > 0) {
			for (OrgnazationNodeDto orgnazationNodeDto1 : list1) {
				getRootList(orgnazationNodeDto1, list_cata, list_org, list_user);
			}
		} else {
			List<OrgnazationNodeDto> ll = getOrgRootList(orgnazationNodeDto, list_org);
			for (OrgnazationNodeDto orgnazationNodeDto2 : ll) {
				getOrgList(orgnazationNodeDto2, list_org, list_user);
			}
			return orgnazationNodeDto;
		}
		getOrgList(orgnazationNodeDto, list_org, list_user);
		return orgnazationNodeDto;
	}

	//获取目录子节点目录（代替从数据库中进行查询）
	public List<OrgnazationNodeDto> queryCataChildNode(String parentId, List<OrgnazationNodeDto> list_cata) {
		List<OrgnazationNodeDto> list_childNode = new ArrayList<OrgnazationNodeDto>();
		for (OrgnazationNodeDto orgNodeDto : list_cata) {
			if (parentId.equals(orgNodeDto.getParentId())) {
				list_childNode.add(orgNodeDto);
			}
		}

		return list_childNode;

	}

	/**
	 * 获取目录下的一级集团和公司
	 *
	 * @param orgnazationNodeDto
	 * @return
	 */
	public List<OrgnazationNodeDto> getOrgRootList(OrgnazationNodeDto orgnazationNodeDto, List<OrgnazationNodeDto> list_org) throws Exception {
		//		List<OrgnazationNodeDto> list1  = orgnazationService.queryOrgListRoot(orgnazationNodeDto.getId());
		List<OrgnazationNodeDto> list1 = queryOrgRootNode(orgnazationNodeDto.getId(), list_org);
		orgnazationNodeDto.setChildren(list1);
		return list1;
	}

	/**
	 * 递归查询组织结构子节点
	 *
	 * @param orgnazationNodeDto
	 * @return
	 */
	public OrgnazationNodeDto getOrgList(OrgnazationNodeDto orgnazationNodeDto, List<OrgnazationNodeDto> list_org, List<OrgnazationNodeDto> list_user) throws Exception {
		//		List<OrgnazationNodeDto> list1  = orgnazationService.queryOrgList(orgnazationNodeDto.getId());
		//查询组织结构子节点（代替从数据库中进行查询）
		List<OrgnazationNodeDto> list1 = queryOrgChildNode(orgnazationNodeDto.getId(), list_org);
		/******************查询下属用户******************/
		List<OrgnazationNodeDto> list2 = queryUserChildNode(orgnazationNodeDto.getId(), list_user);
		/******************查询下属用户******************/
		list2.addAll(list1);
		orgnazationNodeDto.setChildren(list2);
		if (list1 != null && list1.size() > 0) {
			for (OrgnazationNodeDto orgnazationNodeDto1 : list1) {
				getOrgList(orgnazationNodeDto1, list_org, list_user);
			}
		} else {
			return orgnazationNodeDto;
		}
		return orgnazationNodeDto;
	}

	//查询组织结构子节点（代替从数据库中进行查询）
	public List<OrgnazationNodeDto> queryOrgChildNode(String parentId, List<OrgnazationNodeDto> list_org) {
		List<OrgnazationNodeDto> listOrgChildNode = new ArrayList<OrgnazationNodeDto>();
		for (OrgnazationNodeDto orgNodeDto : list_org) {
			if (parentId.equals(orgNodeDto.getParentId())) {
				listOrgChildNode.add(orgNodeDto);
			}
		}
		return listOrgChildNode;
	}

	//查询目录下的一级集团或者公司（代替从数据库中进行查询）
	public List<OrgnazationNodeDto> queryOrgRootNode(String rootId, List<OrgnazationNodeDto> list_org) {
		List<OrgnazationNodeDto> listOrgChildNode = new ArrayList<OrgnazationNodeDto>();
		for (OrgnazationNodeDto orgNodeDto : list_org) {
			if (rootId.equals(orgNodeDto.getRootId())) {
				if (orgNodeDto.getParentId() == null || "".equals(orgNodeDto.getParentId())) {
					if ("company".equals(orgNodeDto.getType()) || "zb".equals(orgNodeDto.getType())) {
						listOrgChildNode.add(orgNodeDto);
					}
				}
			}
		}
		return listOrgChildNode;
	}

	//查询组织结构下的岗位
	public List<OrgnazationNodeDto> queryUserChildNode(String parentId, List<OrgnazationNodeDto> list_user) {
		List<OrgnazationNodeDto> listUserChildNode = new ArrayList<OrgnazationNodeDto>();
		for (OrgnazationNodeDto orgNodeDto : list_user) {
			if (parentId.equals(orgNodeDto.getParentId())) {
				listUserChildNode.add(orgNodeDto);
			}
		}
		return listUserChildNode;
	}

	@RequestMapping("/queryAdminList")
	public List<Map<String,Object>> queryAdminList() {
 		try {
			User user = new User();
			user.setType("2");
			List<User> list = this.queryList(user);
			String json = JacksonUtils.toJson(list);
			List<Map<String,Object>> fromJson = JacksonUtils.fromJson(json, ArrayList.class,Map.class);
			return fromJson;
		} catch (Exception e) {
 			log.error("获取管理员列表对象失败!" + e.getMessage());
		}
		return null;
	}

}
