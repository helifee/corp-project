package com.jzy.hio.sys.sys.res.controller;

import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.jzy.hio.base.utils.DubboServiceResultInfo;
import com.jzy.hio.base.utils.LoginUtils;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.OpeLogInfo;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.base.utils.SecurityUserBeanInfo;
import com.jzy.hio.sys.sys.log.entity.LogOperation;
import com.jzy.hio.sys.sys.log.service.LogOperationService;
import com.jzy.hio.sys.sys.res.dto.AppSystemDto;
import com.jzy.hio.sys.sys.res.dto.DataNodeDto;
import com.jzy.hio.sys.sys.res.entity.AppSystem;
import com.jzy.hio.sys.sys.res.service.AppSystemService;
import com.jzy.tools.data.JacksonUtils;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;


/**
 * 系统控制层
 *
 * @author kimchou
 */
@Controller
@RequestMapping("/sys/res/appSystem")
@Api(tags = "系统控制层", description = "")
public class AppSystemController {

    private static Logger log = LoggerFactory.getLogger(AppSystemController.class);
    @Autowired
    private AppSystemService appSystemService;
    @Autowired
    private LogOperationService logOperationService;


    /**
     * 根据Id获取业务对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @ApiOperation(value = "根据Id获取业务对象", notes = "根据Id获取业务对象")
    @ApiImplicitParams(@ApiImplicitParam(name = "id", value = "业务对象主键", required = true, dataType = "String", paramType = "path"))
    @RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
    public @ResponseBody
    MessageResult get(@PathVariable("id") String id) {
        try {
            AppSystem data = appSystemService.getObjectById(id);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, data);
        } catch (Exception e) {
            log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 返回分页对象
     *
     * @param map {}
     * @return
     */
    @ApiOperation(value = "返回分页对象", notes = "返回分页对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/page", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult page(@RequestBody Map<String, Object> map) {
        try {
            Page beanPage = appSystemService.getPage(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, beanPage);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 返回符合条件的列表
     *
     * @param appSystem {"appDelFlag":"0","_search":false,"nd":1517558660193,"rows":-1,"page":1,"sidx":"id","sord":"desc","start":0,"limit":-1}
     * @return
     */
    @ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "appSystem", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/queryList", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryList(@RequestBody AppSystem appSystem) {
        try {
            List<AppSystem> results = null;
            if (appSystem == null) {

                results = appSystemService.queryList(appSystem);

            } else {
                String json = JacksonUtils.toJson(appSystem);
                Map<String, Object> oldMap = JacksonUtils.fromJson(json, HashMap.class);

                results = appSystemService.queryListByCondition(oldMap);
            }
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, results);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 返回符合条件的列表
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/queryListForSelect", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryListForSelect(@RequestBody Map<String, Object> map) {
        try {
            List<AppSystem> results = appSystemService.queryListForSelect();
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, results);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 保存实体对象
     *
     * @param appSystem
     * @return
     */
    @ApiOperation(value = "保存实体对象", notes = "保存实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "appSystem", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
    public @ResponseBody
    MessageResult save(@RequestBody AppSystem appSystem) {
        try {
            int save = appSystemService.save(appSystem);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    @ApiOperation(value = "新增系统", notes = "新增系统")
    @RequestMapping(value = "/save", method = RequestMethod.POST)
    @OpeLogInfo(node = "新增系统")
    public void save(MultipartHttpServletRequest request, HttpServletResponse response) {
        PrintWriter pw = null;
        Boolean isReturn = false;
        try {
            response.setContentType("text/html;charset=UTF-8");
            pw = response.getWriter();
            MultipartFile uploadfile = request.getFile("icon");
            MessageResult result = new MessageResult();
            SecurityUserBeanInfo userBeanInfo = LoginUtils
                    .getSecurityUserBeanInfo();
            if (null != uploadfile) {
                long length = uploadfile.getSize();
                if (length > 1 * 1024 * 1024) {
                    result.setSuccess(false);
                    result.setMsg("图片尺寸不能大于1M");
                    pw.print(JacksonUtils.toJson(result));
                    pw.flush();
                    isReturn = true;
                }
            }
            if (!isReturn) {
                String id = request.getParameter("id");
                String isDelPic = request.getParameter("isDelPic");
                String name = request.getParameter("name");
                String code = request.getParameter("code");
                String fullName = request.getParameter("fullName");
                String url = request.getParameter("url");
                String isextsys = request.getParameter("isextsys");
                String status = request.getParameter("status");
                String openmode = request.getParameter("openmode");
                String remark = request.getParameter("remark");
                byte[] headpic = {};
                if (null != uploadfile) {
                    InputStream is = uploadfile.getInputStream();
                    headpic = new byte[is.available()];
                    is.read(headpic);
                    is.close();
                }
                AppSystemDto appSystemDto = new AppSystemDto();
                appSystemDto.setCode(code);
                appSystemDto.setId(id);
                appSystemDto.setName(name);
                appSystemDto.setStatus(status);
                appSystemDto.setUrl(url);
                appSystemDto.setIcon(headpic);
                appSystemDto.setRemark(remark);
                appSystemDto.setDelflag(false);
                appSystemDto.setIsextsys(isextsys);
                appSystemDto.setFullName(fullName);
                appSystemDto.setOpenmode(openmode);
                String saveJson = JacksonUtils.toJson(appSystemDto);

                String dubboResultInfo = appSystemService.saveApp(saveJson);
                DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils
                        .fromJson(dubboResultInfo, DubboServiceResultInfo.class);
                if (dubboServiceResultInfo.isSucess()) {
                    String resultInfo = dubboServiceResultInfo.getResult();
                    AppSystemDto appSystemDtoResult = JacksonUtils.fromJson(
                            resultInfo, AppSystemDto.class);
                    result.setResult(appSystemDtoResult);
                    result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
                    result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
                } else {
                    result.setSuccess(MessageInfo.SAVEERROR.isResult());
                    result.setMsg(dubboServiceResultInfo.getMsg());
                }

                LogOperation logOperation = new LogOperation();
                logOperation.setLoginIp(getIpAddress(request));
                logOperation.setNode("修改系统");
                logOperation.setSysCode("PT");
                logOperation.setNote(String.format("入参：【%s】，结果：【%s】", JacksonUtils.toJson(appSystemDto), JacksonUtils.toJson(result)));
                logOperationService.save(logOperation);

                pw.print(JacksonUtils.toJson(result));
                pw.flush();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                pw.close();
            } catch (Exception e) {
            }
        }
    }

    /**
     * 删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "id", value = " id", required = true, dataType = "String")})
    @RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
    @OpeLogInfo(node = "根据id系统")
    public @ResponseBody
    MessageResult delete(@PathVariable("id") String id) {
        try {
            int save = appSystemService.deleteObjectById(id);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "ids", value = " ids", required = true, dataType = "String")})
    @RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
    @OpeLogInfo(node = "根据ids批量删除系统")
    public @ResponseBody
    MessageResult deleteBatch(@PathVariable("ids") String ids) {
        try {
            int save = appSystemService.deleteAllObjectByIds(Arrays.asList(ids));
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 伪删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "伪删除实体对象", notes = "伪删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "id", value = " id", required = true, dataType = "String")})
    @RequestMapping(value = "/deletePseudo/{id}", method = RequestMethod.DELETE)
    @OpeLogInfo(node = "根据id伪删除系统")
    public @ResponseBody
    MessageResult deletePseudo(@PathVariable("id") String id) {
        try {
            int save = appSystemService.deletePseudoObjectById(id);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 伪删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "伪删除实体对象", notes = "伪删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "ids", value = " ids", required = true, dataType = "String")})
    @RequestMapping(value = "/deletePseudoBatch/{ids}", method = RequestMethod.DELETE)
    @OpeLogInfo(node = "根据ids批量伪删除系统")
    public @ResponseBody
    MessageResult deletePseudoBatch(@PathVariable("ids") String ids) {
        try {
            int save = appSystemService.deleteAllObjectByIds(Arrays.asList(ids));
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 修改修改实体对象
     *
     * @return
     */
    @ApiOperation(value = "修改修改实体对象", notes = "修改修改实体对象")
    @ApiImplicitParams({@ApiImplicitParam(name = "id", value = "id", required = true, dataType = "Integer", paramType = "path"), @ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/updateStatus/{id}", method = RequestMethod.PUT, consumes = "application/json")
    @OpeLogInfo(node = "启用或禁用系统")
    public @ResponseBody
    MessageResult updateStatus(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
        try {
            AppSystem data = appSystemService.getObjectById(id);
            String json = JacksonUtils.toJson(data);
            Map<String, Object> oldMap = JacksonUtils.fromJson(json, HashMap.class);
            oldMap.putAll(map);
            String updateJson = JacksonUtils.toJson(oldMap);
            AppSystem fromJson = JacksonUtils.fromJson(updateJson, AppSystem.class);
            int updateCount = appSystemService.update(fromJson);
            return ResponseModel.getResult(MessageInfo.UPDATESUCCESS, updateCount);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    @ApiOperation(value = "修改系统", notes = "修改系统")
    @RequestMapping(value = "/update")
    @OpeLogInfo(node = "修改系统")
    public void update(MultipartHttpServletRequest request, HttpServletResponse response) {
        MessageResult result = new MessageResult();
        PrintWriter pw = null;
        Boolean isReturn = false;
        AppSystem appSystem = null;
        try {
            response.setContentType("text/html;charset=UTF-8");
            pw = response.getWriter();
            MultipartFile uploadfile = request.getFile("icon");
            SecurityUserBeanInfo userBeanInfo = LoginUtils
                    .getSecurityUserBeanInfo();
            if (null != uploadfile) {
                long length = uploadfile.getSize();
                if (length > 1 * 1024 * 1024) {
                    result.setSuccess(false);
                    result.setMsg("图片尺寸不能大于1M");
                    pw.print(JacksonUtils.toJson(result));
                    pw.flush();
                    isReturn = true;
                }
            }
            if (!isReturn) {
                String id = request.getParameter("id");
                appSystem = appSystemService.getObjectById(id);

                String isDelPic = request.getParameter("isDelPic");
                String name = request.getParameter("name");
                String code = request.getParameter("code");
                String fullName = request.getParameter("fullName");
                String url = request.getParameter("url");
                String isextsys = request.getParameter("isextsys");
                String status = request.getParameter("status");
                String openmode = request.getParameter("openmode");
                String remark = request.getParameter("remark");

                appSystem.setCode(code);
                appSystem.setId(id);
                appSystem.setStatus(status);
                appSystem.setName(name);
                appSystem.setRemark(remark);
                appSystem.setUrl(url);
                appSystem.setDelflag(false);
                appSystem.setIsextsys(isextsys);
                appSystem.setFullName(fullName);
                appSystem.setOpenmode(openmode);
                byte[] headpic = {};
                if (null != uploadfile) {
                    if (uploadfile.getSize() > 0) {
                        InputStream is = uploadfile.getInputStream();
                        headpic = new byte[is.available()];
                        is.read(headpic);
                        is.close();
                        // TODO
//                        appSystem.setIcon(headpic);
                    }
                } else if ("0".equals(isDelPic)) {
                    appSystem.setIcon(null);
                }
                int update = appSystemService.update(appSystem);
                if (update > 0) {
                    result.setResult(update);
                    result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
                    result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
                } else {
                    result.setSuccess(MessageInfo.UPDATEERROR.isResult());
                    result.setMsg("更新失败");
                }
            } else {
                result.setSuccess(MessageInfo.UPDATEERROR.isResult());
                result.setMsg("不存在更新的对象");
            }

            LogOperation logOperation = new LogOperation();
            logOperation.setLoginIp(getIpAddress(request));
            logOperation.setNode("修改系统");
            logOperation.setSysCode("PT");
            logOperation.setNote(String.format("入参：【%s】，结果：【%s】", JacksonUtils.toJson(appSystem), JacksonUtils.toJson(result)));
            logOperationService.save(logOperation);
            pw.print(JacksonUtils.toJson(result));
            pw.flush();

        } catch (Exception e) {
            e.printStackTrace();
            pw.print(JacksonUtils.toJson(result));
            pw.flush();
        } finally {
            try {
                pw.close();
            } catch (Exception e) {
            }
        }
    }

    /**
     * 上移或下移
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "上移或下移", notes = "上移或下移")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/upOrDown", method = RequestMethod.PUT, consumes = "application/json")
    @OpeLogInfo(node = "上移或下移系统")
    public @ResponseBody
    MessageResult upOrDown(@RequestBody Map<String, Object> map) {
        try {
            Integer results = appSystemService.upOrDown(map);
            return ResponseModel.getResult(MessageInfo.UPDATESTATUSSUCCESS, results);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 根据系统id获取数据对象控制点
     *
     * @param map(系统id)
     * @return
     */
    @ApiOperation(value = "根据系统id获取数据对象控制点", notes = "根据系统id获取数据对象控制点")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/getDataTree", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult getDataTree(@RequestBody Map<String, Object> map) {
        try {
            String paramaterJson = JacksonUtils.toJson(map);
            List<DataNodeDto> results = appSystemService.getDataTree(paramaterJson);
            return ResponseModel.getResult(MessageInfo.UPDATESTATUSSUCCESS, results);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 根据系统id获取功能控制点(全部)
     *
     * @param map(系统id)
     * @return
     */
    @ApiOperation(value = "根据系统id获取功能控制点", notes = "根据系统id获取功能控制点")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/getAllOperationTree", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult getAllOperationTree(@RequestBody Map<String, Object> map) {
        try {
            String paramaterJson = JacksonUtils.toJson(map);
            List<DataNodeDto> results = appSystemService.getOperationTree(paramaterJson);
            return ResponseModel.getResult(MessageInfo.UPDATESTATUSSUCCESS, results);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 返回符合条件的列表
     *
     * @param appSystem
     * @return
     */
    @ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "appSystem", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/queryListToSupplier", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryListToSupplier(@RequestBody AppSystem appSystem) {
        try {
            List<AppSystem> results = appSystemService.queryList(appSystem);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, results);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 获取对象的真实IP地址
     */
    public String getIpAddress(HttpServletRequest request) {
        String ip = request.getHeader("x-forwarded-for");
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("HTTP_X_REAL_IP");
        }
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("Proxy-Client-IP");
        }
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("WL-Proxy-Client-IP");
        }
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("HTTP_CLIENT_IP");
        }
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getHeader("HTTP_X_FORWARDED_FOR");
        }
        if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
            ip = request.getRemoteAddr();
        }
        return ip;
    }
}
