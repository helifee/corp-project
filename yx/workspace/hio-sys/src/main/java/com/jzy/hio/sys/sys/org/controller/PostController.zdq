package com.jzy.hio.sys.sys.org.controller;

import com.jzy.hio.sys.sys.org.dto.PostQueryDto;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.OpeLogInfo;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.sys.sys.org.dto.OrgnazationNodeDto;
import com.jzy.hio.sys.sys.org.entity.Post;
import com.jzy.hio.sys.sys.org.entity.PostUser;
import com.jzy.hio.sys.sys.org.service.OrgnazationService;
import com.jzy.hio.sys.sys.org.service.PostService;
import com.jzy.hio.sys.sys.org.service.PostUserService;
import com.jzy.hio.sys.sys.org.service.RootService;
import com.jzy.tools.data.JacksonUtils;


/**
 * 岗位控制层
 *
 * @author admin
 */
@Controller
@RequestMapping("/sys/org/post")
@Api(tags = "岗位控制层", description = "")
public class PostController {

    private static org.slf4j.Logger log = LoggerFactory.getLogger(PostController.class);

    @Autowired
    private PostService postService;

    @Autowired
    private RootService rootService;

    @Autowired
    private OrgnazationService orgnazationService;

    @Autowired
    private PostUserService postUserService;

    /**
     * 根据Id获取业务对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @ApiOperation(value = "根据Id获取业务对象", notes = "根据Id获取业务对象")
    @ApiImplicitParams(@ApiImplicitParam(name = "id", value = "业务对象主键", required = true, dataType = "String", paramType = "path"))
    @RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
    public @ResponseBody
    MessageResult get(@PathVariable("id") String id) {
        try {
            Object result = postService.getObjectById(id);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, result);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 返回分页对象
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "返回分页对象", notes = "返回分页对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/page", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult page(@RequestBody Map<String, Object> map) {
        try {
            Page beanPage = orgnazationService.getPage(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, beanPage);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 返回符合条件的列表
     *
     * @param post
     * @return
     */
    @ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "post", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/queryList", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryList(@RequestBody Post post) {
        try {
            List list = postService.queryList(post);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, list);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 保存实体对象
     *
     * @param post
     * @return
     */
    @ApiOperation(value = "保存实体对象", notes = "保存实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "post", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
    public @ResponseBody
    MessageResult save(@RequestBody Post post) {
        try {
            int count = postService.save(post);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, count);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

    }

    /**
     * 删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "id", value = " id", required = true, dataType = "String")})
    @RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult delete(@PathVariable("id") String id) {
        try {
            int result = postService.deleteObjectById(id);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, result);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

    }


    /**
     * 删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "ids", value = " ids", required = true, dataType = "String")})
    @RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult deleteBatch(@PathVariable("ids") String ids) {
        try {
            List<String> list = Arrays.asList(ids.split(","));
            int result = postService.deleteAllObjectByIds(list);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, result);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

    }

    /**
     * 修改修改实体对象
     *
     * @param id
     * @param map
     * @return
     */
    @ApiOperation(value = "修改修改实体对象", notes = "修改修改实体对象")
    @ApiImplicitParams({@ApiImplicitParam(name = "id", value = "id", required = true, dataType = "Integer", paramType = "path"), @ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
    public @ResponseBody
    MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
        try {
            Post data = postService.getObjectById(id);
            String json = JacksonUtils.toJson(data);
            Map<String, Object> oldMap = JacksonUtils.fromJson(json, HashMap.class);
            oldMap.putAll(map);
            String updateJson = JacksonUtils.toJson(oldMap);
            Post fromJson = JacksonUtils.fromJson(updateJson, Post.class);
            int updateCount = postService.update(fromJson);
            return ResponseModel.getResult(MessageInfo.UPDATESUCCESS, updateCount);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

    }

    /**
     * 根据用户查询所有用户岗位
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "根据用户查询所有用户岗位", notes = "根据用户查询所有用户岗位")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/queryPostListByUserId", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryPostListByUserId(@RequestBody Map<String, Object> map) {
        try {
            List<Map<String, Object>> list = postService.queryPostRoleListByUserId(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, list);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

    }

    /**
     * 根据组织结构查询岗位列表
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "根据组织结构查询岗位列表", notes = "根据组织结构查询岗位列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/queryPostListByOrgId", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryPostListByOrgId(@RequestBody Map<String, Object> map) {
        try {
            List list = postService.queryPostListByOrgId(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, list);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

    }

    /**
     * 根据角色查询岗位列表
     *
     * @param map {"roleId":"767d071d0aca4a24bf7fb9bb15b0064f","fristLimit":50,"_search":false,"nd":1517985285731,"rows":-1,"page":1,"sidx":"id","sord":"desc","start":0,"limit":-1,"roleType":"role"}
     * @return {"msg":"查询成功！","result":[{"id":"f61fde7a32154775a8ce85e2361402de","name":"starndPost-kimchou-002","type":"company","roleId":"767d071d0aca4a24bf7fb9bb15b0064f","refId":"1fadc6e6f5a34b40bc59d5add3364df5","refName":"测试公司","prefixName":"测试公司","leaderId":""}],"success":true}
     */
    @ApiOperation(value = "根据角色查询岗位列表", notes = "根据角色查询岗位列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/queryPostListByRoleId", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryPostListByRoleId(@RequestBody Map<String, Object> map) {
        try {
            List<PostQueryDto> list = postService.queryPostListByRoleId(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, list);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

    }

    /**
     * 获取符合条件的岗位树列表
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "获取符合条件的岗位树列表", notes = "获取符合条件的岗位树列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/getPostTree", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult getPostTree(@RequestBody Map<String, Object> map) {
        try {
            List<OrgnazationNodeDto> list = postService.getPostTree(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, list);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

    }


    /**
     * 批量保存post
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "批量保存post", notes = "批量保存post")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/saveBatch", method = {RequestMethod.POST}, consumes = "application/json")
    @OpeLogInfo(node = "批量保存岗位")
    public @ResponseBody
    MessageResult saveBatch(@RequestBody Map<String, Object> map) {
        try {
            if (map != null) {
                int result = postService.saveBatchImpl(map);
                return ResponseModel.getResult(MessageInfo.GETSUCCESS, result);
            } else {
                return ResponseModel.getResult(MessageInfo.GETSUCCESS, 1);
            }
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

    }

    /**
     * 伪删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "id", value = " id", required = true, dataType = "String")})
    @RequestMapping(value = "/deletePseudo/{id}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult deletePseudo(@PathVariable("id") String id) {
        try {
            int save = postService.deletePseudoObjectById(id);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }

    }


    /**
     * 伪删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "ids", value = " ids", required = true, dataType = "String")})
    @RequestMapping(value = "/deletePseudoBatch/{ids}", method = RequestMethod.DELETE)
    @OpeLogInfo(node = "批量删除岗位")
    public @ResponseBody
    MessageResult deletePseudoBatch(@PathVariable("ids") String ids) {
        try {
            List<String> list = Arrays.asList(ids.split(","));
            List<String> listPostUserIds = new ArrayList<String>();
            //(后改成多个进行删除)加上外层循环
            for (int j = 0; j < list.size(); j++) {
//			    Map<String, Object> paramater = new HashMap<String, Object>();
//			    paramater.put("postId", list.get(j));
//			    paramater.put("delflag", "0");
                PostUser postUser = new PostUser();
                postUser.setPostId(list.get(j));
                postUser.setDelflag(false);
                List<PostUser> listPostUser = postUserService.queryList(postUser);
                if (null != listPostUser && listPostUser.size() > 0) {
                    for (int i = 0; i < listPostUser.size(); i++) {
                        PostUser pu = listPostUser.get(i);
                        listPostUserIds.add(pu.getId());
                    }
                }
            }
            String str = null;
            if (listPostUserIds.size() > 0) {
//				   postUserService.deleteAllObjectByIds(listPostUserIds);
                str = "岗位下有人不允许被删除";
            } else {
                int result = postService.deletePseudoAllObjectByIds(list);
                str = "删除对象成功!";
            }
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, str);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

    }

    /**
     * 批量设置领导岗位以及清空 {"list":[{"id":"0e788ad49590408b97f1998fd3fc06f6","leaderId":""}]}
     *
     * @param map {"list":[{"id":"0e788ad49590408b97f1998fd3fc06f6","leaderId":"ee8e5a1f499a4ccf811827fbbd595b2b"}]}
     * @return
     */
    @ApiOperation(value = "批量设置领导岗位", notes = "批量设置领导岗位")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/updateBatchLeaderId", method = RequestMethod.PUT, consumes = "application/json")
    @OpeLogInfo(node = "批量设置领导岗位或者批量清除岗位")
    public @ResponseBody
    MessageResult updateBatchLeaderId(@RequestBody Map<String, Object> map) {
        try {
            String result = null;
            if (!map.containsKey("list") || map.get("list") == null || StringUtils.isBlank(map.get("list").toString())) {
                result = "参数不可为空";
                return ResponseModel.getResult(MessageInfo.SAVEERROR, result);
            }
            Integer i = postService.updateBatchLeaderId(map);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS, i);
        } catch (Exception e) {
            log.error("-----------" + e.getMessage() + "------------");
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }

    }


}
