package com.jzy.hio.sys.sys.base.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.base.utils.ErrorInfoCode;
import com.jzy.hio.base.utils.IDGenerator;
import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.sys.sys.base.dto.CustomArchivesDto;
import com.jzy.hio.sys.sys.base.dto.CustomArchivesItemDto;
import com.jzy.hio.sys.sys.base.dto.CustomArchivesMiniDto;
import com.jzy.hio.sys.sys.base.entity.CustomArchives;
import com.jzy.hio.sys.sys.base.entity.CustomArchivesItem;
import com.jzy.hio.sys.sys.base.mapper.CustomArchivesDao;
import com.jzy.hio.sys.sys.base.mapper.CustomArchivesItemDao;
import com.jzy.hio.sys.sys.base.service.CustomArchivesItemService;
import com.jzy.hio.sys.sys.base.service.CustomArchivesService;
import com.jzy.tools.data.JacksonUtils;

/**
 * @author admin
 * 
 * 
 */

@Service
public class CustomArchivesServiceImpl extends BaseServiceImpl<String, CustomArchives>
		implements CustomArchivesService {
	private static Logger				log	= Logger.getLogger(CustomArchivesServiceImpl.class);
	@Autowired
	private CustomArchivesDao			customArchivesDao;

	@Autowired
	private CustomArchivesItemDao		customArchivesItemDao;

	@Autowired
	private CustomArchivesItemService	customArchivesItemService;

	@Override
	public MessageResult getBeanById(String id) {
		MessageResult result = new MessageResult();
		try {
			CustomArchives customArchives = customArchivesDao.selectByPrimaryKey(id);
			result.setResult(customArchives);
			result.setSuccess(true);
		} catch (Exception e) {
			log.error(e);
			result.setSuccess(false);
			result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
			result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return result;
	}

	@Override
	public MessageResult getBeanPage(Map<String, Object> map) {
		MessageResult result = new MessageResult();
		try {
			Page page = this.getPage(map);
			result.setSuccess(true);
			result.setResult(page);
		} catch (Exception e) {
			log.error(e);
			result.setSuccess(false);
			result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
			result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return result;
	}

	@Override
	public MessageResult queryBeanList(Map<String, Object> map) {

//		MessageResult result = new MessageResult();
		try {
			CustomArchives customArchives = JacksonUtils.fromJson(JacksonUtils.toJson(map), CustomArchives.class);
			List<CustomArchives> list = this.queryList(customArchives);
			List<CustomArchivesMiniDto> customArchivesMiniDtoList=JacksonUtils.fromJson(JacksonUtils.toJson(list), ArrayList.class,CustomArchivesMiniDto.class);
			return ResponseModel.getResult(MessageInfo.GETSUCCESS, customArchivesMiniDtoList);
//			result.setSuccess(true);
//			result.setResult(list);
		} catch (Exception e) {
			log.error(e);
			return ResponseModel.getResult(MessageInfo.GETERROR, "查询数据失败!");
//			result.setSuccess(false);
//			result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
//			result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
//		return result;
	}

	@Override
	public MessageResult saveBean(CustomArchivesDto t) {
		MessageResult result = new MessageResult();
		try {
			CustomArchives customArchives = JacksonUtils.fromJson(JacksonUtils.toJson(t), CustomArchives.class);
			int saveResult = this.save(customArchives);
			if (saveResult == 1) {
				result.setSuccess(true);
			} else {
				result.setSuccess(false);
				result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
				result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
			}
		} catch (Exception e) {
			log.error(e);
			result.setSuccess(false);
			result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
			result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}

		return result;
	}

	@Override
	public MessageResult deleteBeanById(String id) {
		MessageResult result = new MessageResult();
		try {
			int deleteResult = this.deleteObjectById(id);
			if (deleteResult == 1) {
				result.setSuccess(true);
			} else {
				result.setSuccess(false);
				result.setResult(deleteResult);
				result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
				result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
			}

		} catch (Exception e) {
			log.error(e);
			result.setSuccess(false);
			result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
			result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return result;
	}

	@Override
	public MessageResult deleteBeanByIds(String ids) {
		MessageResult result = new MessageResult();
		try {
			List<String> list = Arrays.asList(ids.split(","));
			int deleteResult = this.deleteAllObjectByIds(list);
			if (deleteResult > 0) {
				result.setSuccess(true);
				result.setResult(deleteResult);
			} else {
				result.setSuccess(false);
				result.setResult(deleteResult);
				result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
				result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
			}
		} catch (Exception e) {
			log.error(e);
			result.setSuccess(false);
			result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
			result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return result;
	}

	@Override
	public MessageResult updateBean(String id, Map<String, Object> map) {
		MessageResult result = new MessageResult();
		try {
			CustomArchives customArchives = this.getObjectById(id);
			if (customArchives == null) {
				result.setSuccess(false);
				result.setMsg(ErrorInfoCode.NULL_ERROR.getName());
				result.setCode(ErrorInfoCode.NULL_ERROR.getValue());
			} else {
				Map<String, Object> oldMap = JacksonUtils.fromJson(JacksonUtils.toJson(customArchives), HashMap.class);
				oldMap.putAll(map);
				CustomArchives updateCustomArchives = JacksonUtils.fromJson(JacksonUtils.toJson(oldMap),
						CustomArchives.class);
				int updateResult = this.update(updateCustomArchives);
				if (updateResult == 1) {
					result.setSuccess(true);
				} else {
					result.setSuccess(false);
					result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
					result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
				}
			}
		} catch (Exception e) {
			log.error(e);
			result.setSuccess(false);
			result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
			result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return result;
	}

	@Override
	@Transactional
	public MessageResult deletePseudoAndChildById(String id) {
		MessageResult result = new MessageResult();
		try {
			int updateResult = this.deletePseudoObjectById(id);
			customArchivesItemDao.updateCustomArchives(id);
			if (updateResult == 1) {
				result.setSuccess(true);
				result.setResult(updateResult);
			} else {
				result.setSuccess(false);
				result.setResult(updateResult);
				result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
				result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
			}
		} catch (Exception e) {
			log.error(e);
			result.setSuccess(false);
			result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
			result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());

		}
		return result;
	}

	@Override
	public MessageResult deletePseudoAllBeanByIds(String ids) {
		MessageResult result = new MessageResult();
		try {
			int deleteResult = this.deleteAllObjectByIds(Arrays.asList(ids.split(",")));
			if (deleteResult > 0) {
				result.setSuccess(true);
				result.setResult(deleteResult);
			} else {
				result.setSuccess(false);
				result.setResult(deleteResult);
				result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
				result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
			}
		} catch (Exception e) {
			log.error(e);
			result.setSuccess(false);
			result.setMsg(ErrorInfoCode.SYSTEM_ERROR.getName());
			result.setCode(ErrorInfoCode.SYSTEM_ERROR.getValue());
		}
		return null;
	}

	@Override
	public MessageResult getBeanTree(Map<String, Object> map) {
		MessageResult result = new MessageResult();
		if (map.get("excludeIds") != null) {
			List<String> excludeIdsList = Arrays.asList(map.get("excludeIds").toString().split(","));
			map.put("excludeIds", excludeIdsList);
		}
		String mainId = (String) map.get("mainId");
		// Integer itemCount=customArchivesDao.queryItemsById(mainId);
		if (StringUtils.isNotBlank(mainId)) {
			// if(itemCount==0){
			// //插入默认数据
			// this.toAddDefaultData(mainId,rootName);
			// }
			List<CustomArchivesItemDto> list = customArchivesDao.getTree(map);
			return ResponseModel.getResult(MessageInfo.CREATESUCCESS, list);
		} else {
			result.setSuccess(false);
			result.setMsg("档案ID不能为空!");
			result.setCode(ErrorInfoCode.NULL_ERROR.getValue());
		}
		return result;
	}

	@Override
	public List<CustomArchivesItemDto> getTree(Map<String, Object> map) {
		// TODO Auto-generated method stub
		return customArchivesDao.getTree(map);
	}

	@Override
	public MessageResult queryItemsById(String mainId) {
		try {
			int queryResult = customArchivesDao.queryItemsById(mainId);
			return ResponseModel.getResult(MessageInfo.CREATESUCCESS, queryResult);
		} catch (Exception e) {
			log.error(e);
			return ResponseModel.getResult(MessageInfo.CREATERROR, "查询数据失败！");
		}
	}

	@Override
	public MessageResult enableOrDisable(CustomArchivesDto t) {
		try {
			CustomArchives customArchives = this.customArchivesDao.selectByPrimaryKey(t.getId());
			if (customArchives != null) {
				customArchives.setStatus(t.getStatus());
				int updateResult = this.customArchivesDao.updateByPrimaryKey(customArchives);
				if (updateResult == 1) {
					return ResponseModel.getResult(MessageInfo.UPDATESUCCESS, updateResult);
				} else {
					return ResponseModel.getResult(MessageInfo.UPDATEERROR, "修改数据失败！");
				}
			} else {
				MessageResult result = new MessageResult();
				result.setSuccess(false);
				result.setMsg(ErrorInfoCode.NULL_ERROR.getName());
				result.setCode(ErrorInfoCode.NULL_ERROR.getValue());
				return result;
			}
		} catch (Exception e) {
			log.error(e);
			return ResponseModel.getResult(MessageInfo.UPDATEERROR, "修改数据失败！");
		}
	}

	@Override
	public MessageResult saveImportData(CustomArchivesDto customArchivesPre) {
		try {
			List<CustomArchives> customArchivesList = new ArrayList<CustomArchives>();
			if ("1".equals(customArchivesPre.getCode())) {
				if (customArchivesPre.getName() != null && !"".equals(customArchivesPre.getName())) {
					String[] rowStrs = customArchivesPre.getName().split(";");
					for (int i = 0; i < rowStrs.length; i++) {
						String[] groupStrs = rowStrs[i].split(",");
						CustomArchives customArchives = new CustomArchives();
						String id = IDGenerator.getUUID();
						customArchives.setId(id);
						customArchives.setConcurrencyVersion(0);
						customArchives.setDelflag(false);
						customArchives.setName(groupStrs[0]);
						customArchives.setCode(groupStrs[1]);
						customArchives.setShowType("列表");
						customArchives.setStatus("1");
						customArchivesList.add(customArchives);
					}
				}
				this.saveBatch(customArchivesList);
			} else if ("2".equals(customArchivesPre.getCode())) {
				Map<String, Object> idMaps = this.getCustomArchivesMaps();
				if (customArchivesPre.getName() != null && !"".equals(customArchivesPre.getName())) {
					String[] rowStrs = customArchivesPre.getName().split(";");
					for (int i = 0; i < rowStrs.length; i++) {
						String[] groupStrs = rowStrs[i].split(",");
						CustomArchives customArchivesParent = (CustomArchives) idMaps.get(groupStrs[0]);
						String[] childStrs = groupStrs[1].split("#");
						List<CustomArchivesItem> customArchivesItemList = new ArrayList<CustomArchivesItem>();
						for (int s = 0; s < childStrs.length; s++) {
							CustomArchivesItem customArchivesItem = new CustomArchivesItem();
							customArchivesItem.setId(IDGenerator.getUUID());
							customArchivesItem.setCode(groupStrs[0] + "-" + (s + 1));
							customArchivesItem.setName(childStrs[s]);
							customArchivesItem.setConcurrencyVersion(0);
							customArchivesItem.setDelflag(false);
							customArchivesItem.setDescription(null);
							customArchivesItem.setMainId(customArchivesParent.getId());
							customArchivesItem.setSort(Long.valueOf(s + 1));
							customArchivesItem.setStatus("1");
							customArchivesItemList.add(customArchivesItem);
						}
						this.customArchivesItemService.saveBatch(customArchivesItemList);
					}
				}
			}
			return ResponseModel.getResult(MessageInfo.SAVESUCCESS, customArchivesPre);
		} catch (Exception e) {
			log.error(e);
			return ResponseModel.getResult(MessageInfo.SAVEERROR, "保存数据失败！");
		}
	}

	private Map<String, Object> getCustomArchivesMaps() {
		Map<String, Object> resultMap = new HashMap<String, Object>();
		Map<String, Object> paramMap = new HashMap<String, Object>();
		paramMap.put("delflag", "0");
		List<CustomArchives> list;
		try {
			list = this.queryListByExample(paramMap);
			if (list != null && list.size() > 0) {
				for (int i = 0; i < list.size(); i++) {
					CustomArchives customArchives = list.get(i);
					resultMap.put(customArchives.getCode(), customArchives);
				}
			}
		} catch (Exception e) {
		}

		return resultMap;
	}

	@Override
	public List<CustomArchives> queryListSort(Map<String, Object> map) {
		return customArchivesDao.queryListSort(map);
	}

	@Override
	public Integer isExistCode(String code) {
		return customArchivesDao.isExistCode(code);
	}

	@Override
	public MessageResult saveList(CustomArchivesDto customArchivesDto) {
		boolean flag = true;
		MessageResult result = new MessageResult();
		List<CustomArchivesDto> list = customArchivesDto.getCustomArchivesList();
		List<CustomArchives> itemListAdd = new ArrayList<CustomArchives>();
		List<CustomArchives> itemListUpdate = new ArrayList<CustomArchives>();
		Set<String> codeSet = new HashSet<String>();
		List<CustomArchives> resultList = customArchivesDao.queryListSort(null);
		Map<String, CustomArchives> resultMap = this.listToMap(resultList);
		if (list != null && list.size() > 0) {
			for (int i = 0; i < list.size(); i++) {
				CustomArchives customArchives = new CustomArchives();
				BeanUtils.copyProperties(list.get(i), customArchives);
				CustomArchives customArchivesDb = resultMap.get(customArchives.getId());
				customArchives.setSort(Long.valueOf(i + 1));
				if (customArchivesDb == null) {
					customArchives.setStatus("1");
					itemListAdd.add(customArchives);
				} else {
					customArchivesDb.setCode(customArchives.getCode());
					customArchivesDb.setName(customArchives.getName());
					customArchivesDb.setIsDefault(customArchives.getIsDefault());
					customArchivesDb.setShowType(customArchives.getShowType());
					if (customArchivesDb.getId().equals(customArchivesDto.getId())) {
						itemListUpdate.add(customArchivesDb);
					}
				}
			}
			if (itemListAdd != null && itemListAdd.size() > 0) {
				for (int i = 0; i < itemListAdd.size(); i++) {
					codeSet.add(itemListAdd.get(i).getCode());
				}
			}
			if (codeSet.size() != itemListAdd.size()) {
				// 新增有重复
				flag = false;
			} else {
				// 与已存在记录重复
				for (int i = 0; i < itemListAdd.size(); i++) {
					CustomArchives customArchives = itemListAdd.get(i);
					Integer count = customArchivesDao.isExistCode(customArchives.getCode());
					if (count > 0) {
						flag = false;
						break;
					}
				}
			}
			if (flag) {
				if ("add".equals(customArchivesDto.getSaveOrUpdate())) {
					try {
						saveBatch(itemListAdd);
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				} else if ("edit".equals(customArchivesDto.getSaveOrUpdate())) {
					try {
						updateBatch(itemListUpdate);
					} catch (Exception e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				result.setResult("true");
				result.setSuccess(true);
				result.setMsg("保存对象成功!");
			} else {
				result.setResult("false");
				result.setSuccess(true);
				result.setMsg("编码重复!");
			}
		}
		return result;
	}

	private Map<String, CustomArchives> listToMap(List<CustomArchives> resultList) {
		Map<String, CustomArchives> resultMap = new HashMap<String, CustomArchives>();
		if (resultList != null && resultList.size() > 0) {
			for (int i = 0; i < resultList.size(); i++) {
				CustomArchives customArchives = resultList.get(i);
				resultMap.put(customArchives.getId(), customArchives);
			}
		}
		return resultMap;
	}

	/**
	 * @Description:插入根节点
	 * @author:zhangfangzhi
	 * @date 2017年3月6日 下午1:58:53
	 * @version V1.0
	 * @param rootName
	 */
	private void toAddDefaultData(String mainId, String rootName) {
		try {
			String parentId = IDGenerator.getUUID();
			CustomArchivesItem customArchivesItem = new CustomArchivesItem();
			customArchivesItem.setId(parentId);
			customArchivesItem.setParentId("0");
			customArchivesItem.setName(rootName);
			customArchivesItem.setMainId(mainId);
			customArchivesItemDao.insertSelective(customArchivesItem);
		} catch (Exception e) {
			// e.printStackTrace();
		}
	}
}
