package com.jzy.hio.sys.sys.org.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.OpeLogInfo;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.sys.sys.org.dto.OrgnazationDto;
import com.jzy.hio.sys.sys.org.dto.OrgnazationExcelDto;
import com.jzy.hio.sys.sys.org.dto.OrgnazationUpdateDto;
import com.jzy.hio.sys.sys.org.entity.ContentChildTreeData;
import com.jzy.hio.sys.sys.org.entity.Orgnazation;
import com.jzy.hio.sys.sys.org.service.OrgnazationService;
import com.jzy.hio.sys.sys.org.utils.ExcelReadOrg;
import com.jzy.hio.sys.sys.res.utils.InvalidCustomException;
import com.jzy.hio.sys.sys.security.dto.AuthenticationDto;
import com.jzy.tools.data.JacksonUtils;


/**
 * 组织结构控制层
 *
 * @author admin
 */
@Controller
@RequestMapping("/sys/org/orgnazation")
@Api(tags = "组织结构控制层", description = "")
public class OrgnazationController {

    private static org.slf4j.Logger log = LoggerFactory.getLogger(OrgnazationController.class);

    @Autowired
    private OrgnazationService orgnazationService;

    /**
     * 根据Id获取业务对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @ApiOperation(value = "根据Id获取业务对象", notes = "根据Id获取业务对象")
    @ApiImplicitParams(@ApiImplicitParam(name = "id", value = "业务对象主键", required = true, dataType = "String", paramType = "path"))
    @RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
    public @ResponseBody
    MessageResult get(@PathVariable("id") String id) {
        try {
            Orgnazation data = orgnazationService.getObjectById(id);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, data);
        } catch (Exception e) {
            log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 返回分页对象
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "返回分页对象", notes = "返回分页对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/page", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult page(@RequestBody Map<String, Object> map) {
        try {
            Page beanPage = orgnazationService.getPage(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, beanPage);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 返回符合条件的列表
     *
     * @param orgnazation
     * @return
     */
    @ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "orgnazation", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/queryList", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryList(@RequestBody Orgnazation orgnazation) {
        try {
            List<Orgnazation> results = orgnazationService.queryList(orgnazation);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, results);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 保存实体对象
     *
     * @param orgnazation
     * @return
     */
    @ApiOperation(value = "新增组织机构", notes = "新增组织机构")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "orgnazation", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
    @OpeLogInfo(node = "新增组织机构")
    public @ResponseBody
    MessageResult save(@RequestBody Orgnazation orgnazation) {
        try {
            int save = orgnazationService.save(orgnazation);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "id", value = " id", required = true, dataType = "String")})
    @RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
    @OpeLogInfo(node = "根据id删除组织机构")
    public @ResponseBody
    MessageResult delete(@PathVariable("id") String id) {
        try {
            int save = orgnazationService.deleteObjectById(id);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "根据id批量删除组织机构", notes = "根据id批量删除组织机构")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "ids", value = " ids", required = true, dataType = "String")})
    @RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
    @OpeLogInfo(node = "根据id批量删除组织机构")
    public @ResponseBody
    MessageResult deleteBatch(@PathVariable("ids") String ids) {
        try {
            int save = orgnazationService.deleteAllObjectByIds(Arrays.asList(ids));
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 修改修改实体对象
     *
     * @param id
     * @param map
     * @return
     */
    @ApiOperation(value = "修改修改实体对象", notes = "修改修改实体对象")
    @ApiImplicitParams({@ApiImplicitParam(name = "id", value = "id", required = true, dataType = "Integer", paramType = "path"), @ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
    @OpeLogInfo(node = "根据id批量修改组织机构")
    public @ResponseBody
    MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
        try {
            Orgnazation data = orgnazationService.getObjectById(id);
            String json = JacksonUtils.toJson(data);
            Map<String, Object> oldMap = JacksonUtils.fromJson(json, HashMap.class);
            oldMap.putAll(map);
            String updateJson = JacksonUtils.toJson(oldMap);
            Orgnazation fromJson = JacksonUtils.fromJson(updateJson, Orgnazation.class);
            int updateCount = orgnazationService.update(fromJson);
            return ResponseModel.getResult(MessageInfo.UPDATESUCCESS, updateCount);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 禁用启用组织结构
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "禁用启用组织结构", notes = "禁用启用组织结构")
    @ApiImplicitParams({@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/updateOrgStatus", method = RequestMethod.PUT, consumes = "application/json")
    @OpeLogInfo(node = "启用或禁用组织机构")
    public @ResponseBody
    MessageResult updateOrgStatus(@RequestBody Map<String, Object> map) {
        try {
            int save = orgnazationService.updateOrgStatus(map);
            return ResponseModel.getResult(MessageInfo.UPDATESTATUSSUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 拖拽组织机构
     *
     * @param orgnazationUpdateDto
     * @return
     */
    @ApiOperation(value = "拖拽组织机构", notes = "拖拽组织机构")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "orgnazationUpdateDto", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/updateOrgSort", method = {RequestMethod.POST}, consumes = "application/json")
    @OpeLogInfo(node = "拖拽组织机构")
    public @ResponseBody
    MessageResult updateOrgSort(@RequestBody OrgnazationUpdateDto orgnazationUpdateDto) {
        try {
            return orgnazationService.updateOrgSort(orgnazationUpdateDto);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 获取所有的公司 (只查公司)
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "获取所有的公司 (只查公司)", notes = "获取所有的公司 (只查公司)")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/queryListCompany", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryListCompany(@RequestBody Map<String, Object> map) {
        try {
            List<Map<String, Object>> list = orgnazationService.queryListCompany(map);
            return ResponseModel.getResult(MessageInfo.UPDATESTATUSSUCCESS, list);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 获取所有的公司树 (只查公司)
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "获取所有的公司树 (只查公司)", notes = "获取所有的公司树 (只查公司)")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/queryListCompanyTree", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryListCompanyTree(@RequestBody Map<String, Object> map) {
        try {
            List<ContentChildTreeData> list = orgnazationService.queryListCompanyTree(map);
            return ResponseModel.getResult(MessageInfo.UPDATESTATUSSUCCESS, list);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 获取所有的公司和集团树
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "获取所有的公司和集团树 ", notes = "获取所有的公司和集团树 ")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/queryListCompanyAndZb", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryListCompanyAndZb(@RequestBody Map<String, Object> map) {
        try {
            List<ContentChildTreeData> resultList = orgnazationService.queryListCompanyAndZb(map);
            return ResponseModel.getResult(MessageInfo.UPDATESTATUSSUCCESS, resultList);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }

    }

    /**
     * 根据公司获取分期
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "根据公司获取分期 ", notes = "根据公司获取分期 ")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/queryBrachByCompanyId", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryBrachByCompanyId(@RequestBody Map<String, Object> map) {
        if (!map.containsKey("companyIds") || map.get("companyIds") == null || StringUtils.isBlank(map.get("companyIds").toString())) {
            throw new InvalidCustomException("公司Id不可为空");
        }
        try {
            Map<String, Object> res = orgnazationService.getAllProjectBrachListByCompanyIds(map);
            return ResponseModel.getResult(MessageInfo.UPDATESTATUSSUCCESS, res);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }

    }


    /**
     * 伪删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "ids", value = " ids", required = true, dataType = "String")})
    @RequestMapping(value = "/deletePseudo/{id}", method = RequestMethod.DELETE)
    @OpeLogInfo(node = "根据id伪删除组织机构")
    public @ResponseBody
    MessageResult deletePseudo(@PathVariable("id") String id) {
        try {
            int save = orgnazationService.deletePseudoObjectById(id);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 伪删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "ids", value = " ids", required = true, dataType = "String")})
    @RequestMapping(value = "/deletePseudoBatch/{ids}", method = RequestMethod.DELETE)
    @OpeLogInfo(node = "根据id批量伪删除组织机构")
    public @ResponseBody
    MessageResult deletePseudoBatch(@PathVariable("ids") String ids) {
        try {
            int save = orgnazationService.deleteAllObjectByIds(Arrays.asList(ids));
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 修改组织机构状态
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "修改组织机构状态 ", notes = "修改组织机构状态 ")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/updateStatus", method = {RequestMethod.POST}, consumes = "application/json")
    @OpeLogInfo(node = "修改组织机构状态")
    public @ResponseBody
    MessageResult updateStatus(@RequestBody Map<String, Object> map) {
        try {
            int save = orgnazationService.updateOrgStatus(map);
            return ResponseModel.getResult(MessageInfo.UPDATESTATUSSUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 根据IDs获取结果集（组织、角色、岗位、人员）
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "修改组织机构状态 ", notes = "修改组织机构状态 ")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/queryResListByIds", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryResListByIds(@RequestBody Map<String, Object> map) {
        try {
            List<Map<String, String>> result = orgnazationService.queryResListByIds(map);
            return ResponseModel.getResult(MessageInfo.UPDATESTATUSSUCCESS, result);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    @ApiOperation(value = "userRPOM ", notes = "userRPOM ")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/userRPOM", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult userRPOM(@RequestBody Map<String, Object> map) {
        try {
            AuthenticationDto result = orgnazationService.getUserRPOMInfoByUserId(map);
            return ResponseModel.getResult(MessageInfo.UPDATESTATUSSUCCESS, result);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }

    }

    //查询用户所有组织信息：所属组织U岗位组织
    @ApiOperation(value = "查询用户所有组织信息：所属组织U岗位组织 ", notes = "查询用户所有组织信息：所属组织U岗位组织 ")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/getUserAllOrgs", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult getUserAllOrgs(@RequestBody Map<String, Object> map) {
        try {
            List<OrgnazationDto> result = orgnazationService.getUserAllOrgs(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, result);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }

    }
    //查询部门 或项目分期 （包含集团和公司）

    @ApiOperation(value = "查询部门 或项目分期 （包含集团和公司） ", notes = "查询部门 或项目分期 （包含集团和公司）")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "qType", dataType = "String", value = "", required = true), @ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/getDeptOrBranch/{qType}", method = RequestMethod.POST, consumes = "application/json")
    public @ResponseBody
    MessageResult getDeptOrBranch(@PathVariable("qType") String qType, @RequestBody Map<String, Object> map) {
        try {
            List<Map<String, Object>> result = orgnazationService.getDeptOrBranch(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, result);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /*//测试dubbo
    @RequestMapping(value="/orgTest",method={RequestMethod.POST}, consumes="application/json")
    public @ResponseBody MessageResult orgTest(@RequestBody Map<String,Object> map){
        MessageResult result=new MessageResult();
        try {
            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
            String userJson = JacksonUtils.toJson(userBeanInfo);
//			String dubboResultInfo=userOutServiceCustomer.getUserListByRoleIds(userJson, JacksonUtils.toJson(map));
            String dubboResultInfo=orgnazationOutServiceCustomer.getUserDataAuthGroupAndBranchList(userJson, JacksonUtils.toJson(map));
            DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
            if(dubboServiceResultInfo.isSucess()){
                String resultInfo= dubboServiceResultInfo.getResult();
                Map<String,Object> list=JacksonUtils.fromJson(resultInfo, HashMap.class);
//					List<Map<String,Object>> list=JacksonUtils.fromJson(resultInfo, List.class);
                result.setResult(list);
                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
            }else{
                result.setSuccess(MessageInfo.GETERROR.isResult());
                result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
            }
        } catch (Exception e) {
            e.printStackTrace();
            log.error("调用get方法:  【参数"+JacksonUtils.toJson(map)+"】======"+"【"+e.getMessage()+"】");
            result.setSuccess(MessageInfo.GETERROR.isResult());
            result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
        }
        return result;
    }*/
    //根据岗位id获取其上级组织id
    @ApiOperation(value = "根据岗位id获取其上级组织id ", notes = "根据岗位id获取其上级组织id ")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/getOrgsByPostId", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult getOrgsByPostId(@RequestBody Map<String, Object> map) {
        try {
            List<OrgnazationDto> result = orgnazationService.getOrgsByPostId(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, result);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 复制粘贴组织结构
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "复制粘贴组织结构 ", notes = "根据岗位id获取其上级组织id ")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/copyAndPasteOrg", method = {RequestMethod.POST}, consumes = "application/json")
    @OpeLogInfo(node = "复制粘贴组织结构")
    public @ResponseBody
    MessageResult copyAndPasteOrg(@RequestBody Map<String, Object> map) {
        if ((!map.containsKey("copyId")) || map.get("copyId") == null || StringUtils.isBlank(map.get("copyId").toString())) {
            throw new InvalidCustomException("copyId不可为空");
        }
        try {
            Map<String, Orgnazation> result = orgnazationService.copyAndPasteOrg(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, result);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 读取Excel数据到数据库
     *
     * @param file     excel文件
     * @param parentId 父节点id
     * @return
     * @throws IOException
     */
    @RequestMapping(value = "/readExcelForOrg")
    @OpeLogInfo(node = "导入组织")
    public @ResponseBody
    MessageResult readExcelForOrg(@RequestParam(value = "excelFile") MultipartFile file, String parentId) throws IOException {
        MessageResult result = new MessageResult();
        //判断文件是否为空
        if (file == null) {
            result.setSuccess(false);
            result.setMsg("文件不可为空");
            return result;
        }
        if (StringUtils.isBlank(parentId)) {
            result.setSuccess(false);
            result.setMsg("导入节点不存在");
            return result;
        }
        //读取Excel数据到List中
        List<OrgnazationExcelDto> list = null;
        try {
            list = new ExcelReadOrg().readExcel(file);
        } catch (InvalidCustomException e) {
            result.setSuccess(false);
            result.setMsg(e.getMsg());
            return result;
        }
        if (list != null && list.size() > 0) {
            if (list.size() > 5000) {
                result.setSuccess(false);
                result.setMsg("您导入的数据太多，不要超过5000，请分批导入");
                return result;
            }
            try {
                Map<String, Object> results = orgnazationService.readExcelAndInsert(list, parentId);
                return ResponseModel.getResult(MessageInfo.GETSUCCESS, results);
            } catch (Exception e) {
                e.printStackTrace();
                result.setSuccess(false);
                result.setMsg("上传内容为空，或excel模板不合法");
            }
        } else {
            result.setSuccess(false);
            result.setMsg("上传内容为空，或excel模板不合法");
        }
        return result;
    }

    /**
     * 文件下载
     *
     * @param fileName
     * @param request
     * @param response
     * @return
     * @Description:
     */
    @RequestMapping("/download")
    public String downloadFile(@RequestParam("fileName") String fileName, HttpServletRequest request, HttpServletResponse response) throws IOException {
        if (fileName != null) {
            String realPath = request.getServletContext().getRealPath(
                    "WEB-INF/File/");
            File file = new File(realPath, fileName);
            if (file.exists()) {
                response.setContentType("application/force-download");// 设置强制下载不打开
                //设置文件名
//				response.addHeader("Content-Disposition", "attachment;filename="+  fileName);
                response.addHeader("Content-Disposition", "attachment;filename=" + new String(fileName.getBytes("GB2312"), "ISO-8859-1"));
                byte[] buffer = new byte[1024];
                FileInputStream fis = null;
                BufferedInputStream bis = null;
                try {
                    fis = new FileInputStream(file);
                    bis = new BufferedInputStream(fis);
                    OutputStream os = response.getOutputStream();
                    int i = bis.read(buffer);
                    while (i != -1) {
                        os.write(buffer, 0, i);
                        i = bis.read(buffer);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    if (bis != null) {
                        try {
                            bis.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                    if (fis != null) {
                        try {
                            fis.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        }
        return null;
    }

}
