package com.jzy.hio.sys.sys.res.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.base.utils.DubboServiceResultInfo;
import com.jzy.hio.sys.sys.res.dto.DataNodeDto;
import com.jzy.hio.sys.sys.res.entity.AppSystem;
import com.jzy.hio.sys.sys.res.mapper.AppSystemDao;
import com.jzy.hio.sys.sys.res.service.AppSystemService;
import com.jzy.hio.sys.sys.res.service.DataCtrlService;
import com.jzy.hio.sys.sys.res.service.DataItemService;
import com.jzy.hio.sys.sys.res.service.OperationService;
import com.jzy.hio.sys.sys.res.service.ResourceService;
import com.jzy.hio.sys.sys.res.utils.InvalidCustomException;
import com.jzy.hio.sys.sys.res.utils.ResourceType;
import com.jzy.tools.data.JacksonUtils;

/**
 * @author admin
 */
@RestController
@RequestMapping("sys/appSystemServiceImpl")
@Service
public class AppSystemServiceImpl extends BaseServiceImpl<String, AppSystem> implements AppSystemService {


    @Autowired
    private AppSystemDao appSystemDao;
    @Autowired
    private OperationService operationService;
    @Autowired
    private ResourceService resourceService;
    @Autowired
    private DataCtrlService dataCtrlService;
    @Autowired
    private DataItemService dataItemService;

    @Override
    public List<DataNodeDto> queryListDataCtrl(String paramater) throws Exception {
        return appSystemDao.queryListDataCtrl(paramater);
    }

    @Override
    public List<DataNodeDto> queryResourceListByAppId(String paramater) throws Exception {
        return appSystemDao.queryResourceListByAppId(paramater);
    }

    @Override
    public List<DataNodeDto> queryOperationListByResourceId(String paramater) throws Exception {
        return appSystemDao.queryOperationList(paramater);
    }

    @Override
    public List<DataNodeDto> queryOperationListAll(String paramater) throws Exception {
        return appSystemDao.queryOperationListAll(paramater);
    }

    @Override
    public List<DataNodeDto> queryResourceListByParentId(String paramater) throws Exception {
        return appSystemDao.queryResourceListByParentId(paramater);
    }

    @Override
    public List<Map<String, Object>> querySystemList(String userType) throws Exception {
        return appSystemDao.querySystemList(userType);
    }

    @Override
    @RequestMapping("/queryListByCondition")
    public List<AppSystem> queryListByCondition(Map<String, Object> map) throws Exception {
        return appSystemDao.queryListByCondition(map);
    }

    /**
     * 校验编码重复
     *
     * @param map 参数
     * @return
     * @throws Exception
     */
    public Integer getCodeCount(Map<String, Object> map) throws Exception {
        return appSystemDao.getCodeCount(map);
    }

    /**
     * 获取最大排序号
     *
     * @param map 参数
     * @return
     * @throws Exception
     */
    public Integer getMaxSort(Map<String, Object> map) throws Exception {
        return appSystemDao.getMaxSort(map);
    }

    /**
     * 维护相关表全路径
     *
     * @param map 参数
     * @return
     * @throws Exception
     */

    public Integer updateAllPreFix(Map<String, Object> map) throws Exception {
        return appSystemDao.updateAllPreFix(map);
    }

    /* (non-Javadoc)
     * @see com.xinleju.platform.sys.res.service.AppSystemService#queryListData()
     */
    @Override
    public List<Map<String, Object>> queryListData() throws Exception {
        // TODO Auto-generated method stub
        return appSystemDao.queryListData();
    }

    /**
     * 维护相关表全路径
     *
     * @param map 参数
     * @return
     * @throws Exception
     */
    @Transactional(readOnly = false, rollbackFor = Exception.class)
    public Integer upOrDown(Map<String, Object> map) throws Exception {
        Integer res = 0;
        try {
            String appId1 = (String) map.get("appId1");
            String sort1 = (String) map.get("sort1");
            String appId2 = (String) map.get("appId2");
            String sort2 = (String) map.get("sort2");
            AppSystem app1 = getObjectById(appId1);
            AppSystem app2 = getObjectById(appId2);
            String prefixSortOld1 = app1.getPrefixSort();
            String prefixSortOld2 = app2.getPrefixSort();
            //业务排序
            app1.setSort(Long.valueOf(sort2));
            app2.setSort(Long.valueOf(sort1));
            app1.setPrefixSort(prefixSortOld2);
            app2.setPrefixSort(prefixSortOld1);
            Map<String, Object> param = new HashMap<String, Object>();
            //修改排序全路径-app1
            param.put("prefixIdOld", app1.getPrefixId());
            param.put("prefixSortOld", prefixSortOld1);
            param.put("prefixSortNew", app1.getPrefixSort());
            param.put("menuFlag", true);
            Integer update_one = updateAllPreFix(param);
            int update_app_one = update(app1);
            //修改排序全路径-app2
            param.put("prefixIdOld", app2.getPrefixId());
            param.put("prefixSortOld", prefixSortOld2);
            param.put("prefixSortNew", app2.getPrefixSort());
            param.put("menuFlag", true);
            Integer update_two = updateAllPreFix(param);
            int update_app_two = update(app2);
            res = 1;
        } catch (Exception e) {
            throw new InvalidCustomException("排序出错");
        }
        return res;
    }

    /**
     * 修改业务系统信息
     *
     * @param appSystem 参数
     * @return
     * @throws Exception
     */
    @Transactional(readOnly = false, rollbackFor = Exception.class)
    public int updateApp(AppSystem appSystem) throws Exception {
        Integer res = 0;
        try {
            //排序或名称修改，维护全路径级下级菜单按钮全路径
            AppSystem oldApp = getObjectById(appSystem.getId());
            if (oldApp == null) {
                throw new InvalidCustomException("不存在此业务系统");
            }
            //业务名称修改，维护全路径
            if (!oldApp.getName().equals(appSystem.getName())) {
                appSystem.setPrefixName(appSystem.getName());
                Map<String, Object> map = new HashMap<String, Object>();
                map.put("prefixIdOld", oldApp.getPrefixId());
                map.put("prefixNameOld", oldApp.getPrefixName() + "/");
                map.put("prefixNameNew", appSystem.getPrefixName() + "/");
                map.put("menuFlag", true);
                updateAllPreFix(map);
            }
            update(appSystem);
            res = 1;
        } catch (Exception e) {
            throw new InvalidCustomException("排序出错");
        }
        return res;
    }

    @Override
    public List<AppSystem> queryListForSelect() throws Exception {
        return appSystemDao.queryListForSelect();
    }

    @Override
    public String saveApp(String saveJson) {
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            AppSystem appSystem = JacksonUtils.fromJson(saveJson, AppSystem.class);
            //校验编码重复 add by gyh 2017-3-28
            Map<String, Object> param = new HashMap<String, Object>();
            param.put("code", appSystem.getCode());
            int isc = getCodeCount(param);
            if (isc > 0) {
                throw new InvalidCustomException("此系统编码已存在，不可重复");
            }
            //排序号不输入，改为系统最大排序加1，同时维护全路径相关字段 add by gyh 2017-4-2
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("tableName", "pt_sys_res_app");
            Long maxSort = getMaxSort(map) + 1L;//排序号自动加1
            appSystem.setSort(maxSort);
            appSystem.setPrefixId(appSystem.getId());
            appSystem.setPrefixName(appSystem.getName());
            appSystem.setPrefixSort(String.format("A%05d", maxSort));
            if (null != appSystem.getUrl() && !"".equals(appSystem.getUrl())) {
                appSystem.setUrl(appSystem.getUrl().replace("&amp;", "&"));
            }

            save(appSystem);
            info.setResult(JacksonUtils.toJson(appSystem));
            info.setSucess(true);
            info.setMsg("保存对象成功!");
        } catch (Exception e) {
            info.setSucess(false);
            info.setMsg("保存对象失败!");
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);

    }

    @Override
    public List<DataNodeDto> getDataTree(String paramater) {

        try {
            List<DataNodeDto> list = null;
            list = queryListDataCtrl(paramater);
            for (DataNodeDto dataCtrl : list) {
                getDataItem(dataCtrl);
                dataCtrl.setType(ResourceType.DATACTRL.getCode());
            }
            return list;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }

    }

    @Override
    public List<DataNodeDto> getOperationTree(String paramaterJson) throws Exception {
        List<DataNodeDto> list = queryResourceListByAppId(paramaterJson);
        return list;
    }

    public DataNodeDto getDataItem(DataNodeDto dataCtrl) throws Exception {
        List<DataNodeDto> list = dataCtrlService.queryListDataItem(dataCtrl.getId());
        dataCtrl.setChildren(list);
        if (list != null && list.size() > 0) {
            for (DataNodeDto dataItem : list) {
                getDataPoint(dataItem);
                dataItem.setType(ResourceType.DATAITEM.getCode());
            }
        }
        return dataCtrl;
    }

    public DataNodeDto getDataPoint(DataNodeDto dataItem) throws Exception {
        String id = dataItem.getId();
        List<DataNodeDto> list = dataItemService.queryDataPointList(id);
        if (list != null && list.size() > 0) {
            for (DataNodeDto dataNodeDto : list) {
                dataNodeDto.setType(ResourceType.DATAPOINT.getCode());
            }
            dataItem.setChildren(list);
        }
        return dataItem;
    }
}
