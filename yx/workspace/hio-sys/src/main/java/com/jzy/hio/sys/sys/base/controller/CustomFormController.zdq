package com.jzy.hio.sys.sys.base.controller;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.sys.sys.base.dto.CustomFormDto;
import com.jzy.hio.sys.sys.base.entity.CustomForm;
import com.jzy.hio.sys.sys.base.service.CustomFormService;
import com.jzy.tools.data.JacksonUtils;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.RequestContextHolder;

import java.util.Map;

/**
 * 自定义表单控制层
 *
 * @author admin
 */
@RestController
@RequestMapping("/sys/base/customForm")
@Api(tags = "自定义表单控制层", description = "")
public class CustomFormController {

    private static Logger log = LoggerFactory.getLogger(CustomFormController.class);

    @Autowired
    private CustomFormService customFormService;

    /**
     * 根据Id获取业务对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
    @ApiOperation(value = "根据Id获取业务对象", notes = "根据Id获取业务对象")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "path", name = "id", dataType = "String", value = "id", required = true)})
    public @ResponseBody
    MessageResult get(@PathVariable("id") String id) {
        try {
            return customFormService.getBeanById(id);
        } catch (Exception e) {
            //// e.printStackTrace();
            log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getResult(MessageInfo.CREATERROR, "查询数据失败！");
        }
    }

    /**
     * 根据Id获取业务对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @RequestMapping(value = "/getForUpdate/{id}", method = RequestMethod.GET)
    @ApiOperation(value = "根据Id获取业务对象", notes = "根据Id获取业务对象")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "path", name = "id", dataType = "String", value = "id", required = true)})
    public @ResponseBody
    MessageResult getForUpdate(@PathVariable("id") String id) {
        try {
            return customFormService.getBeanByIdForUpdate(id);
        } catch (Exception e) {
            //// e.printStackTrace();
            log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getResult(MessageInfo.CREATERROR, "查询数据失败！");
        }
    }

    /**
     * 根据Id获取业务对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @RequestMapping(value = "/getTemplateById/{id}/{cfVid}", method = RequestMethod.GET)
    @ApiOperation(value = "根据Id获取业务对象", notes = "根据Id获取业务对象")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "path", name = "id", dataType = "String", value = "id", required = true),
            @ApiImplicitParam(paramType = "path", name = "cfVid", dataType = "String", value = "cfVid", required = true)})
    public @ResponseBody
    MessageResult getTemplateById(@PathVariable("id") String id,
                                  @PathVariable("cfVid") String cfVid) {
        try {
            return customFormService.getTemplateById(id, cfVid);
        } catch (Exception e) {
            //// e.printStackTrace();
            log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getResult(MessageInfo.CREATERROR, "查询数据失败！");
        }
    }

    // @RequestMapping(value="/getTemplateById/{id}",method=RequestMethod.GET)
    // public @ResponseBody MessageResult getTemplateById(@PathVariable("id") String
    // id){
    // MessageResult result=new MessageResult();
    // SecurityUserBeanInfo securityUserBeanInfo =
    // LoginUtils.getSecurityUserBeanInfo();
    // try {
    // String
    // dubboResultInfo=customFormDtoServiceCustomer.getTemplateById(JacksonUtils.toJson(securityUserBeanInfo),
    // "{\"id\":\""+id+"\"}");
    // DubboServiceResultInfo dubboServiceResultInfo=
    // JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
    // if(dubboServiceResultInfo.isSucess()){
    // String resultInfo= dubboServiceResultInfo.getResult();
    // CustomFormDto customFormDto=JacksonUtils.fromJson(resultInfo,
    // CustomFormDto.class);
    // result.setResult(customFormDto);
    // result.setSuccess(MessageInfo.GETSUCCESS.isResult());
    // result.setMsg(MessageInfo.GETSUCCESS.getMsg());
    // }else{
    // result.setSuccess(MessageInfo.GETERROR.isResult());
    // result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
    // }
    // } catch (Exception e) {
    // ////e.printStackTrace();
    // log.error("调用get方法: 【参数"+id+"】======"+"【"+e.getMessage()+"】");
    // result.setSuccess(MessageInfo.GETERROR.isResult());
    // result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
    // }
    // return result;
    // }

    /**
     * 返回分页对象
     *
     * @param map
     * @return
     */
    @RequestMapping(value = "/page", method = {RequestMethod.POST}, consumes = "application/json")
    @ApiOperation(value = "返回分页对象", notes = "返回分页对象")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "map", required = true)})
    public @ResponseBody
    MessageResult page(@RequestBody Map<String, Object> map) {
        MessageResult result = new MessageResult();
        try {
            return ResponseModel.getResult(MessageInfo.CREATESUCCESS, customFormService.getPageSort(map));
        } catch (Exception e) {
            //// e.printStackTrace();
            log.error("调用page方法:  【参数" + JacksonUtils.toJson(map) + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getResult(MessageInfo.GETERROR, "查询数据失败!");
        }
    }

    /**
     * 返回符合条件的列表
     *
     * @param map
     * @return
     */
    @RequestMapping(value = "/queryList", method = {RequestMethod.POST}, consumes = "application/json")
    @ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "map", required = true)})
    public @ResponseBody
    MessageResult queryList(@RequestBody Map<String, Object> map) {
        try {
            return ResponseModel.getResult(MessageInfo.CREATESUCCESS,
                    customFormService.queryList(JacksonUtils.fromJson(JacksonUtils.toJson(map), CustomForm.class)));
        } catch (Exception e) {
            //// e.printStackTrace();
            log.error("调用queryList方法:  【参数" + JacksonUtils.toJson(map) + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getResult(MessageInfo.GETERROR, "查询数据失败!");
        }
    }

    /**
     * 返回符合条件的列表
     *
     * @param map
     * @return
     */
    @RequestMapping(value = "/queryListForQuickEntry", method = {RequestMethod.POST}, consumes = "application/json")
    @ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "body", name = "map", dataType = "String", value = "map", required = true)})
    public @ResponseBody
    MessageResult queryListForQuickEntry(@RequestBody Map<String, Object> map) {
        try {
            return ResponseModel.getResult(MessageInfo.CREATESUCCESS, customFormService.queryListForQuickEntry(map));
        } catch (Exception e) {
            //// e.printStackTrace();
            log.error("调用queryList方法:  【参数" + JacksonUtils.toJson(map) + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getResult(MessageInfo.GETERROR, "查询数据失败!");
        }
    }

    /**
     * 保存实体对象
     *
     * @param t
     * @return
     */
    @RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
    @ApiOperation(value = "保存实体对象", notes = "保存实体对象")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "body", name = "bean", dataType = "String", value = "bean", required = true)})
    public @ResponseBody
    MessageResult save(@RequestBody CustomFormDto t) {
        try {
            return customFormService.validateBeforeSave(t);
        } catch (Exception e) {
            log.error("调用save方法:  【参数" + JacksonUtils.toJson(t) + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getResult(MessageInfo.SAVEERROR, "保存数据失败!");
        }
    }

    /**
     * @Description:表单数据生成
     * @author:zhangfangzhi
     * @date 2017年6月14日 下午7:51:19
     * @version V1.0
     */
    @RequestMapping(value = "/saveGenerateData", method = RequestMethod.POST, consumes = "application/json")
    @ApiOperation(value = "表单数据生成", notes = "表单数据生成")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "body", name = "bean", dataType = "String", value = "bean", required = true)})
    public @ResponseBody
    MessageResult saveGenerateData(@RequestBody CustomFormDto t) {
        try {
            return customFormService.saveGenerateData(JacksonUtils.toJson(t));
        } catch (Exception e) {
            log.error("调用save方法:  【参数" + JacksonUtils.toJson(t) + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getResult(MessageInfo.SAVEERROR, "保存数据失败!");
        }
    }

    /**
     * @Description:表单数据生成-费用模板生成
     * @author:zhangfangzhi
     * @date 2017年6月14日 下午7:51:19
     * @version V1.0
     */
    @RequestMapping(value = "/saveGenerateDataEx", method = RequestMethod.POST, consumes = "application/json")
    @ApiOperation(value = "表单数据生成-费用模板生成", notes = "表单数据生成-费用模板生成")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "body", name = "bean", dataType = "String", value = "bean", required = true)})
    public @ResponseBody
    MessageResult saveGenerateDataEx(@RequestBody CustomFormDto t) {
        try {
            return customFormService.saveGenerateDataEx(JacksonUtils.toJson(t));
        } catch (Exception e) {
            log.error("调用save方法:  【参数" + JacksonUtils.toJson(t) + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getResult(MessageInfo.SAVEERROR, "保存数据失败!");

        }
    }

    /**
     * @Description:表单数据生成-费用实例生成
     * @author:zhangfangzhi
     * @date 2017年6月14日 下午7:51:19
     * @version V1.0
     */
    @RequestMapping(value = "/saveGenerateDataExInstance", method = RequestMethod.POST, consumes = "application/json")
    @ApiOperation(value = "表单数据生成-费用实例生成", notes = "表单数据生成-费用实例生成")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "body", name = "bean", dataType = "String", value = "bean", required = true)})
    public @ResponseBody
    MessageResult saveGenerateDataExInstance(@RequestBody CustomFormDto t) {
        try {
            return customFormService.saveGenerateDataExInstance(JacksonUtils.toJson(t));
        } catch (Exception e) {
            log.error("调用save方法:  【参数" + JacksonUtils.toJson(t) + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getResult(MessageInfo.SAVEERROR, "保存数据失败！");
        }
    }

    /**
     * 删除实体对象
     *
     * @param id
     * @return
     */
    @RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "path", name = "id", dataType = "String", value = "id", required = true)})
    public @ResponseBody
    MessageResult delete(@PathVariable("id") String id) {
        try {
            return customFormService.deleteBeanById(id);
        } catch (Exception e) {
            //// e.printStackTrace();
            log.error("调用delete方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getResult(MessageInfo.DELETEERROR, "删除数据失败！");
        }
    }

    /**
     * 删除实体对象
     *
     * @param ids
     * @return
     */
    @RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "path", name = "ids", dataType = "String", value = "ids", required = true)})
    public @ResponseBody
    MessageResult deleteBatch(@PathVariable("ids") String ids) {
        try {
            return customFormService.deleteAllBeanByIds(ids);
        } catch (Exception e) {
            //// e.printStackTrace();
            log.error("调用delete方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getResult(MessageInfo.DELETEERROR, "删除数据失败！");
        }

    }

    /**
     * 修改修改实体对象
     *
     * @param id
     * @param map
     * @return
     */
    @RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
    @ApiOperation(value = "修改实体对象", notes = "修改实体对象")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "path", dataType = "String", name = "id", value = "id", required = true),
            @ApiImplicitParam(paramType = "body", dataType = "String", name = "map", value = "map", required = true)})
    public @ResponseBody
    MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
        try {
            return customFormService.validateBeforeUpdate(id, map);
        } catch (Exception e) {
            log.error(
                    "调用update方法:  【参数" + id + "," + JacksonUtils.toJson(map) + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getResult(MessageInfo.UPDATEERROR, "修改数据失败！");
        }
    }

    /**
     * @Description:表单设计发布
     * @author:zhangfangzhi
     * @date 2017年11月22日 下午4:01:23
     * @version V1.0
     */
    @RequestMapping(value = "/updateForPublish/{id}", method = RequestMethod.PUT, consumes = "application/json")
    @ApiOperation(value = "表单设计发布", notes = "表单设计发布")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "path", dataType = "String", name = "id", value = "id", required = true),
            @ApiImplicitParam(paramType = "body", dataType = "String", name = "map", value = "map", required = true)})
    public @ResponseBody
    MessageResult updateForPublish(@PathVariable("id") String id,
                                   @RequestBody Map<String, Object> map) {
        try {
            return customFormService.updateForPublish(id, map);
        } catch (Exception e) {
            log.error(
                    "调用update方法:  【参数" + id + "," + JacksonUtils.toJson(map) + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getResult(MessageInfo.UPDATEERROR, "修改数据失败！");
        }
    }

    /**
     * @Description:设计修改
     * @author:zhangfangzhi
     * @date 2017年4月18日 下午3:12:59
     * @version V1.0
     */
    @RequestMapping(value = "/updateForDesign/{id}", method = RequestMethod.PUT, consumes = "application/json")
    @ApiOperation(value = "设计修改", notes = "设计修改")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "path", dataType = "String", name = "id", value = "id", required = true),
            @ApiImplicitParam(paramType = "body", dataType = "String", name = "map", value = "map", required = true)})
    public @ResponseBody
    MessageResult updateForDesign(@PathVariable("id") String id,
                                  @RequestBody Map<String, Object> map) {
        try {
            return customFormService.updateBean(id, map);
        } catch (Exception e) {
            log.error(
                    "调用update方法:  【参数" + id + "," + JacksonUtils.toJson(map) + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getResult(MessageInfo.UPDATEERROR, "修改数据失败！");
        }
    }

    /**
     * 伪删除实体对象
     *
     * @param id
     * @return
     */
    @RequestMapping(value = "/deletePseudo/{id}", method = RequestMethod.DELETE)
    @ApiOperation(value = "伪删除实体对象", notes = "伪删除实体对象")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "path", dataType = "String", name = "id", value = "id", required = true)})
    public @ResponseBody
    MessageResult deletePseudo(@PathVariable("id") String id) {
        try {
            return customFormService.deletePseudoBeanById(id);
        } catch (Exception e) {
            //// e.printStackTrace();
            log.error("调用deletePseudo方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getResult(MessageInfo.DELETEERROR, "删除数据失败！");
        }
    }

    /**
     * 批量伪删除实体对象
     *
     * @param ids
     * @return
     */
    @RequestMapping(value = "/deletePseudoBatch/{ids}", method = RequestMethod.DELETE)
    @ApiOperation(value = "批量伪删除实体对象", notes = "批量伪删除实体对象")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "path", dataType = "String", name = "ids", value = "ids", required = true)})
    public @ResponseBody
    MessageResult deletePseudoBatch(@PathVariable("ids") String ids) {
        try {
            return customFormService.deletePseudoAllBeanByIds(ids);
        } catch (Exception e) {
            //// e.printStackTrace();
            log.error("调用deletePseudoBatch方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getResult(MessageInfo.DELETEERROR, "删除数据失败！");
        }
    }

    /**
     * @Description:获取登录sessionID
     * @author:zhangfangzhi
     * @date 2017年4月6日 上午11:21:07
     * @version V1.0
     */
    @RequestMapping(value = "/getSessionId", method = RequestMethod.GET)
    public @ResponseBody
    MessageResult getSessionId() {
        return ResponseModel.getResult(MessageInfo.CREATESUCCESS,
                RequestContextHolder.getRequestAttributes().getSessionId());
    }

    /**
     * @Description:复制设计模板
     * @author:zhangfangzhi
     * @date 2017年4月19日 下午4:16:31
     * @version V1.0
     */
    @RequestMapping(value = "/saveTemplate", method = RequestMethod.POST, consumes = "application/json")
    @ApiOperation(value = "复制设计模板", notes = "复制设计模板")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "body", name = "bean", dataType = "String", value = "bean", required = true)})
    public @ResponseBody
    MessageResult saveTemplate(@RequestBody CustomFormDto t) {
        try {
            return customFormService.validateBeforeCopy(t);
        } catch (Exception e) {
            log.error("调用save方法:  【参数" + JacksonUtils.toJson(t) + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getResult(MessageInfo.SAVEERROR, "保存数据失败！");
        }
    }

    /**
     * @Description:判断该模板下是否有实例生成
     * @author:zhangfangzhi
     * @date 2017年5月25日 上午9:03:12
     * @version V1.0
     */
    @RequestMapping(value = "/getCount/{id}", method = RequestMethod.GET)
    @ApiOperation(value = "判断该模板下是否有实例生成", notes = "判断该模板下是否有实例生成")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "path", name = "id", dataType = "String", value = "id", required = true)})
    public @ResponseBody
    MessageResult getCount(@PathVariable("id") String id) {
        try {
            return customFormService.getCount(id);
        } catch (Exception e) {
            //// e.printStackTrace();
            log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getResult(MessageInfo.GETERROR, "查询数据失败！");
        }
    }

    @RequestMapping(value = "/getFormNumber/{id}", method = RequestMethod.GET)
    @ApiOperation(value = "getFormNumber", notes = "getFormNumber")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "path", name = "id", dataType = "String", value = "id", required = true)})
    public @ResponseBody
    MessageResult getFormNumber(@PathVariable("id") String id) {
        try {
            return customFormService.getFormNumber(id);
        } catch (Exception e) {
            //// e.printStackTrace();
            log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getResult(MessageInfo.GETERROR, "查询数据失败！");
        }
    }

    /**
     * 对规则排序(上移/下移/置顶/置底)
     *
     * @param id
     * @param map
     * @return
     */
    @RequestMapping(value = "/updateSort/{id}", method = RequestMethod.PUT, consumes = "application/json")
    @ApiOperation(value = "对规则排序(上移/下移/置顶/置底)", notes = "对规则排序(上移/下移/置顶/置底)")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "path", dataType = "String", name = "id", value = "id", required = true),
            @ApiImplicitParam(paramType = "body", dataType = "String", name = "map", value = "map", required = true)})
    public @ResponseBody
    MessageResult updateSort(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
        try {
            CustomForm customForm = customFormService.getObjectById(id);
            return ResponseModel.getResult(MessageInfo.UPDATESUCCESS, customFormService.updateSort(customForm, map));
        } catch (Exception e) {
            //// e.printStackTrace();
            log.error("调用updateStatus方法:  【参数id" + id + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getResult(MessageInfo.UPDATEERROR, "修改数据失败！");
        }
    }

    /**
     * @Description:启用禁用
     * @author:zhangfangzhi
     * @date 2017年7月14日 下午2:17:36
     * @version V1.0
     */
    @RequestMapping(value = "/enableOrNot", method = RequestMethod.POST, consumes = "application/json")
    @ApiOperation(value = "启用禁用", notes = "启用禁用")
    @ApiImplicitParams({
            @ApiImplicitParam(paramType = "body", dataType = "String", name = "bean", value = "bean", required = true)})
    public @ResponseBody
    MessageResult enableOrNot(@RequestBody CustomFormDto t) {
        // MessageResult result = new MessageResult();
        // SecurityUserBeanInfo securityUserBeanInfo =
        // LoginUtils.getSecurityUserBeanInfo();
        try {
            /*
             * String dubboResultInfo = customFormDtoServiceCustomer
             * .getObjectById(JacksonUtils.toJson(securityUserBeanInfo), "{\"id\":\"" +
             * t.getId() + "\"}"); DubboServiceResultInfo dubboServiceResultInfo =
             * JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class); if
             * (dubboServiceResultInfo.isSucess()) { String resultInfo =
             * dubboServiceResultInfo.getResult(); CustomFormDto customFormDto =
             * JacksonUtils.fromJson(resultInfo, CustomFormDto.class);
             * customFormDto.setStatus(t.getStatus()); String updateJson =
             * JacksonUtils.toJson(customFormDto); String updateDubboResultInfo =
             * customFormDtoServiceCustomer
             * .update(JacksonUtils.toJson(securityUserBeanInfo), updateJson);
             * DubboServiceResultInfo updateDubboServiceResultInfo =
             * JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
             * if (updateDubboServiceResultInfo.isSucess()) { Integer i =
             * JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(),
             * Integer.class); result.setResult(i);
             * result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
             * result.setMsg(MessageInfo.UPDATESUCCESS.getMsg()); } else {
             * result.setSuccess(MessageInfo.UPDATEERROR.isResult());
             * result.setMsg(updateDubboServiceResultInfo.getMsg() + "【" +
             * updateDubboServiceResultInfo.getExceptionMsg() + "】"); } } else {
             * result.setSuccess(MessageInfo.GETERROR.isResult());
             * result.setMsg(MessageInfo.GETERROR.getMsg() + "【" +
             * dubboServiceResultInfo.getExceptionMsg() + "】"); }
             */
            return customFormService.enableOrDisable(t);
        } catch (Exception e) {
            //// e.printStackTrace();
            log.error("调用save方法:  【参数" + JacksonUtils.toJson(t) + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getResult(MessageInfo.UPDATEERROR, "修改数据失败！");
        }
    }
}
