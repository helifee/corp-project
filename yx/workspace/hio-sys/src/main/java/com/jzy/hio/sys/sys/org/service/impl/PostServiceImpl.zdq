package com.jzy.hio.sys.sys.org.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.jzy.hio.base.utils.IDGenerator;
import com.jzy.hio.sys.sys.org.service.OrgnazationService;
import com.jzy.hio.sys.sys.org.service.RootService;
import io.swagger.annotations.ApiImplicitParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.sys.sys.org.dto.OrgnazationNodeDto;
import com.jzy.hio.sys.sys.org.dto.PostDto;
import com.jzy.hio.sys.sys.org.dto.PostQueryDto;
import com.jzy.hio.sys.sys.org.entity.Post;
import com.jzy.hio.sys.sys.org.mapper.PostDao;
import com.jzy.hio.sys.sys.org.service.PostService;

/**
 * @author admin
 */

@Service
public class PostServiceImpl extends BaseServiceImpl<String, Post> implements PostService {


    @Autowired
    private PostDao postDao;

    @Autowired
    private RootService rootService;

    @Autowired
    private OrgnazationService orgnazationService;

    @Autowired
    private PostService postService;

    @Override
    public List<PostQueryDto> queryPostListByUserId(Map<String, Object> paramater) throws Exception {
        return postDao.queryPostListByUserId(paramater);
    }

    @Override
    public List<PostDto> queryAuthPostListByUserId(Map<String, Object> paramater) throws Exception {
        return postDao.queryAuthPostListByUserId(paramater);
    }

    @Override
    public List<Map<String, Object>> queryPostRoleListByUserId(Map<String, Object> paramater) throws Exception {
        return postDao.queryPostRoleListByUserId(paramater);
    }

    @Override
//	@Description(instruction = "根据组织结构查询岗位列表")
    public List<PostQueryDto> queryPostListByOrgId(Map<String, Object> paramater) throws Exception {
        return postDao.queryPostListByOrgId(paramater);
    }

    @Override
//	@Description(instruction = "根据角色查询岗位列表")
    public List<PostQueryDto> queryPostListByRoleId(Map<String, Object> paramater) throws Exception {
        return postDao.queryPostListByRoleId(paramater);
    }

    @Override
    public List<OrgnazationNodeDto> queryAllPostList(Map<String, Object> map) throws Exception {
        return postDao.queryAllPostList(map);

    }

    @Override
    public List<Map<String, String>> queryPostsByIds(Map map) throws Exception {
        return postDao.queryPostsByIds(map);
    }

    /**
     * 查询用户主岗组织
     *
     * @param map
     * @return
     */
    @Override
    public String getDefaultPostOrg(Map map) throws Exception {
        return postDao.getDefaultPostOrg(map);
    }

    /**
     * 获取组织下岗位
     *
     * @param param
     * @return
     */
    @Override
    public Map<String, List<PostDto>> getPostListByOrgId(Map param) throws Exception {
        String[] orgIds = param.get("orgIds").toString().split(",");
        Map<String, List<PostDto>> res = new HashMap<String, List<PostDto>>();
        param.put("orgIds", orgIds);
        List<PostDto> list = postDao.selectPostDtoListByOrgId(param);
        String key = null;
        for (int i = 0; i < list.size(); i++) {
            key = list.get(i).getRefId();
            if (res.containsKey(key)) {
                res.get(key).add(list.get(i));
            } else {
                List<PostDto> l = new ArrayList<PostDto>();
                l.add(list.get(i));
                res.put(key, l);
            }
        }
        return res;
    }

    /**
     * 获取用户下岗位
     *
     * @param param
     * @return
     */
    @Override
    public Map<String, Object> getPostListByUserId(Map param) throws Exception {
        String[] userIds = param.get("userIds").toString().split(",");
        Map<String, Object> res = new HashMap<String, Object>();
        for (int i = 0; i < userIds.length; i++) {
            param.put("userId", userIds[i]);
            List<PostDto> list = postDao.selectPostDtoListByUserId(param);
            res.put(userIds[i], list);
        }
        return res;
    }

    /**
     * 批量设置领导岗位
     */
    @Override
    public Integer updateBatchLeaderId(Map map) throws Exception {
        return postDao.updateBatchLeaderId(map);
    }

    @Override
    public List<OrgnazationNodeDto> getPostTree(Map<String, Object> map) throws Exception {
        //查询出来第一级根目录
        List<OrgnazationNodeDto> list = rootService.queryListRoot(map);
        //查询出来所有目录
        List<OrgnazationNodeDto> list_cata = rootService.queryAllRoot(map);
        //查询出来所有组织机构
        List<OrgnazationNodeDto> list_org = orgnazationService.queryAllOrgList(map);

        //查询出来所有岗位
        List<OrgnazationNodeDto> list_post = postService.queryAllPostList(map);

        for (OrgnazationNodeDto orgnazationNodeDto : list) {
            getRootList(orgnazationNodeDto, list_cata, list_org, list_post);
        }
        return list;
    }

    @Override
    public int saveBatchImpl(Map<String, Object> map) throws Exception{
        String method = (String) map.get("method");

        //一个组织机构多个角色批量保存岗位
        if ("roles".equals(method)) {
            String refId = (String) map.get("refId");
            String roleids = (String) map.get("roleids");
            String uuids = (String) map.get("uuids");
            String type = (String) map.get("type");
//			Map mapCon = new HashMap<>();
//			//根据组织机构查询出原先有的岗位
//			mapCon.put("refId", refId);
//			mapCon.put("delflag", false);
            Post post = new Post();
            post.setRefId(refId);
            post.setDelflag(false);
            String[] roleidsList = roleids.split(",");
            String[] uuidsList = uuids.split(",");
            List<Post> listOld = null;
            try {
                listOld = postService.queryList(post);
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            //要删除的列表
            List<String> listDelIds = new ArrayList<String>();
            //要插入的列表
            List<String> listAddIds = new ArrayList<String>();
            //查询出数据库中的，而列表中没有的进行删除操作
            for (int i = 0; i < listOld.size(); i++) {
                boolean isexist = false;
                Post postOld = listOld.get(i);
                for (int y = 0; y < roleidsList.length; y++) {
                    if (postOld.getRoleId().equals(roleidsList[y])) {
                        isexist = true;
                    }
                }
                if (!isexist) {
                    listDelIds.add(postOld.getId());
                }
            }
            if (listDelIds.size() > 0) {
                try {
                    postService.deletePseudoAllObjectByIds(listDelIds);
                } catch (Exception e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
            //查询列表中有的，并且数据库中没有的进行插入操作
            for (int y = 0; y < roleidsList.length; y++) {
                boolean isexist = false;
                for (int i = 0; i < listOld.size(); i++) {
                    Post postOld = listOld.get(i);
                    if (postOld.getRoleId().equals(roleidsList[y])) {
                        isexist = true;
                    }
                }
                if (!isexist) {
                    listAddIds.add(roleidsList[y]);
                }
            }
            if (listAddIds.size() > 0) {
                for (int i = 0; i < listAddIds.size(); i++) {
                    Post post2 = new Post();
                    post2.setId(IDGenerator.getUUID());
                    post2.setRefId(refId);
                    post2.setRoleId(listAddIds.get(i));
                    post2.setType(type);
                    post2.setStatus("1");
                    post2.setDelflag(false);
                    try {
                        postService.save(post2);
                    } catch (Exception e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                }
            }
            //一个角色多个组织机构批量保存岗位
        } else if ("orgs".equals(method)) {
            String refIds = (String) map.get("refId");
            String roleid = (String) map.get("roleids");
            String uuids = (String) map.get("uuids");
            String types = (String) map.get("type");

//			Map mapCon = new HashMap<>();
//			//根据组织机构查询出原先有的岗位
//			mapCon.put("roleId", roleid);
//			mapCon.put("delflag", false);
            Post post = new Post();
            post.setRoleId(roleid);
            post.setDelflag(false);
            String[] refIdsList = refIds.split(",");
            String[] uuidsList = uuids.split(",");
            String[] typesList = types.split(",");
            List<Post> listOld = null;
            try {
                listOld = postService.queryList(post);
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            //要删除的列表
            List<String> listDelIds = new ArrayList<String>();
            //要插入的列表
            List<String> listAddIds = new ArrayList<String>();
            //要插入的类型列表
            List<String> listTypeIds = new ArrayList<String>();
            //查询出数据库中的，而列表中没有的进行删除操作
            for (int i = 0; i < listOld.size(); i++) {
                boolean isexist = false;
                Post postOld = listOld.get(i);
                for (int y = 0; y < refIdsList.length; y++) {
                    if (postOld.getRefId().equals(refIdsList[y])) {
                        isexist = true;
                    }
                }
                if (!isexist) {
                    listDelIds.add(postOld.getId());
                }
            }
            if (listDelIds.size() > 0) {
                try {
                    postService.deletePseudoAllObjectByIds(listDelIds);
                } catch (Exception e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
            //查询列表中有的，并且数据库中没有的进行插入操作
            for (int y = 0; y < refIdsList.length; y++) {
                boolean isexist = false;
                for (int i = 0; i < listOld.size(); i++) {
                    Post postOld = listOld.get(i);
                    if (postOld.getRefId().equals(refIdsList[y])) {
                        isexist = true;
                    }
                }
                if (!isexist) {
                    listAddIds.add(refIdsList[y]);
                    listTypeIds.add(typesList[y]);
                }
            }
            if (listAddIds.size() > 0) {
                for (int i = 0; i < listAddIds.size(); i++) {
                    Post post2 = new Post();
                    post2.setId(IDGenerator.getUUID());
                    post2.setRefId(listAddIds.get(i));
                    post2.setRoleId(roleid);
                    post2.setType(listTypeIds.get(i));
                    post2.setStatus("1");
                    post2.setDelflag(false);
                    try {
                        postService.save(post2);
                    } catch (Exception e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                }
            }
        }
        return 1;
    }

    /**
     * 递归获取目录子节点
     *
     * @param orgnazationNodeDto
     * @return
     */
    public OrgnazationNodeDto getRootList(OrgnazationNodeDto orgnazationNodeDto, List<OrgnazationNodeDto> list_cata, List<OrgnazationNodeDto> list_org, List<OrgnazationNodeDto> list_post) throws Exception {
//		List<OrgnazationNodeDto> list1  = rootService.queryListRoot(orgnazationNodeDto.getId());
        List<OrgnazationNodeDto> list1 = queryCataChildNode(orgnazationNodeDto.getId(), list_cata);
        orgnazationNodeDto.setChildren(list1);
        if (list1 != null && list1.size() > 0) {
            for (OrgnazationNodeDto orgnazationNodeDto1 : list1) {
                getRootList(orgnazationNodeDto1, list_cata, list_org, list_post);
            }
        } else {
            List<OrgnazationNodeDto> ll = getOrgRootList(orgnazationNodeDto, list_org);
            for (OrgnazationNodeDto orgnazationNodeDto2 : ll) {
                getOrgList(orgnazationNodeDto2, list_org, list_post);
            }
            return orgnazationNodeDto;
        }
        getOrgList(orgnazationNodeDto, list_org, list_post);
        return orgnazationNodeDto;
    }

    //获取目录子节点目录（代替从数据库中进行查询）
    public List<OrgnazationNodeDto> queryCataChildNode(String parentId, List<OrgnazationNodeDto> list_cata) {
        List<OrgnazationNodeDto> list_childNode = new ArrayList<OrgnazationNodeDto>();
        for (OrgnazationNodeDto orgNodeDto : list_cata) {
            if (parentId.equals(orgNodeDto.getParentId())) {
                list_childNode.add(orgNodeDto);
            }
        }

        return list_childNode;

    }

    /**
     * 获取目录下的一级集团和公司
     *
     * @param orgnazationNodeDto
     * @return
     */
    public List<OrgnazationNodeDto> getOrgRootList(OrgnazationNodeDto orgnazationNodeDto, List<OrgnazationNodeDto> list_org) throws Exception {
//		List<OrgnazationNodeDto> list1  = orgnazationService.queryOrgListRoot(orgnazationNodeDto.getId());
        List<OrgnazationNodeDto> list1 = queryOrgRootNode(orgnazationNodeDto.getId(), list_org);
        orgnazationNodeDto.setChildren(list1);
        return list1;
    }

    /**
     * 递归查询组织结构子节点
     *
     * @param orgnazationNodeDto
     * @return
     */
    public OrgnazationNodeDto getOrgList(OrgnazationNodeDto orgnazationNodeDto, List<OrgnazationNodeDto> list_org, List<OrgnazationNodeDto> list_post) throws Exception {
//		List<OrgnazationNodeDto> list1  = orgnazationService.queryOrgList(orgnazationNodeDto.getId());
        //查询组织结构子节点（代替从数据库中进行查询）
        List<OrgnazationNodeDto> list1 = queryOrgChildNode(orgnazationNodeDto.getId(), list_org);
        /******************查询下属岗位******************/
        List<OrgnazationNodeDto> list2 = queryPostChildNode(orgnazationNodeDto.getId(), list_post);
        /******************查询下属岗位******************/
        list2.addAll(list1);
        orgnazationNodeDto.setChildren(list2);
        if (list1 != null && list1.size() > 0) {
            for (OrgnazationNodeDto orgnazationNodeDto1 : list1) {
                getOrgList(orgnazationNodeDto1, list_org, list_post);
            }
        } else {
            return orgnazationNodeDto;
        }
        return orgnazationNodeDto;
    }

    //查询组织结构子节点（代替从数据库中进行查询）
    public List<OrgnazationNodeDto> queryOrgChildNode(String parentId, List<OrgnazationNodeDto> list_org) {
        List<OrgnazationNodeDto> listOrgChildNode = new ArrayList<OrgnazationNodeDto>();
        for (OrgnazationNodeDto orgNodeDto : list_org) {
            if (parentId.equals(orgNodeDto.getParentId())) {
                listOrgChildNode.add(orgNodeDto);
            }
        }
        return listOrgChildNode;
    }

    //查询目录下的一级集团或者公司（代替从数据库中进行查询）
    public List<OrgnazationNodeDto> queryOrgRootNode(String rootId, List<OrgnazationNodeDto> list_org) {
        List<OrgnazationNodeDto> listOrgChildNode = new ArrayList<OrgnazationNodeDto>();
        for (OrgnazationNodeDto orgNodeDto : list_org) {
            if (rootId.equals(orgNodeDto.getRootId())) {
                if (orgNodeDto.getParentId() == null || "".equals(orgNodeDto.getParentId())) {
                    if ("company".equals(orgNodeDto.getType()) || "zb".equals(orgNodeDto.getType())) {
                        listOrgChildNode.add(orgNodeDto);
                    }
                }
            }
        }
        return listOrgChildNode;
    }

    //查询组织结构下的岗位
    public List<OrgnazationNodeDto> queryPostChildNode(String parentId, List<OrgnazationNodeDto> list_post) {
        List<OrgnazationNodeDto> listPostChildNode = new ArrayList<OrgnazationNodeDto>();
        for (OrgnazationNodeDto orgNodeDto : list_post) {
            if (parentId.equals(orgNodeDto.getParentId())) {
                listPostChildNode.add(orgNodeDto);
            }
        }
        return listPostChildNode;
    }

}
