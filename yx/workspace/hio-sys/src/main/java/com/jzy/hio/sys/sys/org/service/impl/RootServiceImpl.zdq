package com.jzy.hio.sys.sys.org.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.jzy.hio.sys.sys.org.service.OrgnazationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.sys.sys.org.dto.OrgnazationNodeDto;
import com.jzy.hio.sys.sys.org.entity.Root;
import com.jzy.hio.sys.sys.org.mapper.RootDao;
import com.jzy.hio.sys.sys.org.service.RootService;

/**
 * @author admin
 */

@Service
public class RootServiceImpl extends BaseServiceImpl<String, Root> implements RootService {


    @Autowired
    private RootDao rootDao;

    @Autowired
    private OrgnazationService orgnazationService;

    /**
     * 获取目录子节点目录
     *
     * @param map
     * @return
     */
    public List<OrgnazationNodeDto> queryListRoot(Map<String, Object> map) throws Exception {
        return rootDao.queryListRoot(map);
    }

    /**
     * 获取所有目录节点
     *
     * @return
     */
    public List<OrgnazationNodeDto> queryAllRoot(Map<String, Object> map) throws Exception {
        return rootDao.queryAllRoot(map);
    }

    @Override
    public List<OrgnazationNodeDto> getTree(Map<String, Object> map) throws Exception {

        List<OrgnazationNodeDto> list = queryListRoot(map);
        //查询出来所有目录
        List<OrgnazationNodeDto> list_cata = queryAllRoot(map);
        //查询出来所有组织机构
        List<OrgnazationNodeDto> list_org = orgnazationService.queryAllOrgList(map);

        for (OrgnazationNodeDto orgnazationNodeDto : list) {
            getRootList(orgnazationNodeDto, list_cata, list_org);
        }
        return list;
    }

    @Override
    public List<OrgnazationNodeDto> getOrgTreeByType(Map<String, Object> map) throws Exception {
        //查询出来第一级根目录
        List<OrgnazationNodeDto> list  = queryListRoot(map);
        //查询出来所有目录
        List<OrgnazationNodeDto> list_cata  = queryAllRoot(map);
        //查询出来所有组织机构
        List<OrgnazationNodeDto> list_org  = orgnazationService.queryAllOrgList(map);
        String type = "all";
        if(map.get("type")!=null ){
            type = (String)map.get("type");
        }


        for(OrgnazationNodeDto orgnazationNodeDto:list){
            getRootListBytype(orgnazationNodeDto,list_cata,list_org,type);
        }
        return list;
    }


    /**
     * 递归获取目录子节点
     * @param orgnazationNodeDto
     * @return
     */
    public OrgnazationNodeDto getRootListBytype(OrgnazationNodeDto orgnazationNodeDto,List<OrgnazationNodeDto> list_cata,List<OrgnazationNodeDto> list_org,String type) throws Exception{
//		List<OrgnazationNodeDto> list1  = rootService.queryListRoot(orgnazationNodeDto.getId());
        List<OrgnazationNodeDto> list1  = queryCataChildNodeBytype(orgnazationNodeDto.getId(),list_cata);
        orgnazationNodeDto.setChildren(list1);
        if(list1!=null && list1.size()>0){
            for(OrgnazationNodeDto orgnazationNodeDto1:list1){
                getRootListBytype(orgnazationNodeDto1,list_cata,list_org,type);
            }
        }else{
            List<OrgnazationNodeDto> ll= getOrgRootList(orgnazationNodeDto,list_org);
            for(OrgnazationNodeDto orgnazationNodeDto2:ll){
                getOrgListBytype(orgnazationNodeDto2,list_org,type);
            }
            return orgnazationNodeDto;
        }
        getOrgListBytype(orgnazationNodeDto,list_org,type);
        return orgnazationNodeDto;
    }

    //获取目录子节点目录（代替从数据库中进行查询）
    public List<OrgnazationNodeDto> queryCataChildNodeBytype(String parentId,List<OrgnazationNodeDto> list_cata){
        List<OrgnazationNodeDto> list_childNode = new ArrayList<OrgnazationNodeDto>();
        for(OrgnazationNodeDto orgNodeDto:list_cata){
            if(parentId.equals(orgNodeDto.getParentId())){
                list_childNode.add(orgNodeDto);
            }
        }

        return list_childNode;

    }

    /**
     * 递归查询组织结构子节点
     * @param orgnazationNodeDto
     * @return
     */
    public OrgnazationNodeDto getOrgListBytype(OrgnazationNodeDto orgnazationNodeDto,List<OrgnazationNodeDto> list_org,String type) throws Exception{
//			List<OrgnazationNodeDto> list1  = orgnazationService.queryOrgList(orgnazationNodeDto.getId());
        List<OrgnazationNodeDto> list1  = queryOrgChildNodeBytype(orgnazationNodeDto.getId(),list_org,type);
        orgnazationNodeDto.setChildren(list1);
        if(list1!=null && list1.size()>0){
            for(OrgnazationNodeDto orgnazationNodeDto1:list1){
                getOrgListBytype(orgnazationNodeDto1,list_org,type);
            }
        }else{
            return orgnazationNodeDto;
        }
        return orgnazationNodeDto;
    }

    //查询组织结构子节点（代替从数据库中进行查询）
    public List<OrgnazationNodeDto> queryOrgChildNodeBytype(String parentId,List<OrgnazationNodeDto> list_org,String type){
        List<OrgnazationNodeDto> listOrgChildNode = new ArrayList<OrgnazationNodeDto>();
        for(OrgnazationNodeDto orgNodeDto:list_org){
            if(parentId.equals(orgNodeDto.getParentId())){
                if(type.equals("all")){
                    listOrgChildNode.add(orgNodeDto);
                }else if(type.equals("company")){
                    if(orgNodeDto.getType().equals("company") || orgNodeDto.getType().equals("zb") ){
                        listOrgChildNode.add(orgNodeDto);
                    }
                }else if(type.equals("dept")){
                    if(orgNodeDto.getType().equals("company") || orgNodeDto.getType().equals("zb") || orgNodeDto.getType().equals("dept")){
                        listOrgChildNode.add(orgNodeDto);
                    }
                }else if(type.equals("group")){
                    if(orgNodeDto.getType().equals("company") || orgNodeDto.getType().equals("zb") || orgNodeDto.getType().equals("group")){
                        listOrgChildNode.add(orgNodeDto);
                    }
                }else if(type.equals("branch")){
                    if(orgNodeDto.getType().equals("company") || orgNodeDto.getType().equals("zb") || orgNodeDto.getType().equals("group") || orgNodeDto.getType().equals("branch")){
                        listOrgChildNode.add(orgNodeDto);
                    }
                }
            }
        }
        return listOrgChildNode;
    }

    /**
     * 递归获取目录子节点
     *
     * @param orgnazationNodeDto
     * @return
     */
    public OrgnazationNodeDto getRootList(OrgnazationNodeDto orgnazationNodeDto, List<OrgnazationNodeDto> list_cata, List<OrgnazationNodeDto> list_org) throws Exception {
//		List<OrgnazationNodeDto> list1  = rootService.queryListRoot(orgnazationNodeDto.getId());
        List<OrgnazationNodeDto> list1 = queryCataChildNode(orgnazationNodeDto.getId(), list_cata);
        orgnazationNodeDto.setChildren(list1);
        if (list1 != null && list1.size() > 0) {
            for (OrgnazationNodeDto orgnazationNodeDto1 : list1) {
                getRootList(orgnazationNodeDto1, list_cata, list_org);
            }
        } else {
            List<OrgnazationNodeDto> ll = getOrgRootList(orgnazationNodeDto, list_org);
            for (OrgnazationNodeDto orgnazationNodeDto2 : ll) {
                getOrgList(orgnazationNodeDto2, list_org);
            }
            return orgnazationNodeDto;
        }
        getOrgList(orgnazationNodeDto, list_org);
        return orgnazationNodeDto;
    }

    //获取目录子节点目录（代替从数据库中进行查询）
    public List<OrgnazationNodeDto> queryCataChildNode(String parentId, List<OrgnazationNodeDto> list_cata) {
        List<OrgnazationNodeDto> list_childNode = new ArrayList<OrgnazationNodeDto>();
        for (OrgnazationNodeDto orgNodeDto : list_cata) {
            if (parentId.equals(orgNodeDto.getParentId())) {
                list_childNode.add(orgNodeDto);
            }
        }

        return list_childNode;

    }


    /**
     * 获取目录下的一级集团和公司
     *
     * @param orgnazationNodeDto
     * @return
     */
    public List<OrgnazationNodeDto> getOrgRootList(OrgnazationNodeDto orgnazationNodeDto, List<OrgnazationNodeDto> list_org) throws Exception {
//		List<OrgnazationNodeDto> list1  = orgnazationService.queryOrgListRoot(orgnazationNodeDto.getId());
        List<OrgnazationNodeDto> list1 = queryOrgRootNode(orgnazationNodeDto.getId(), list_org);
        orgnazationNodeDto.setChildren(list1);
        return list1;
    }

    /**
     * 递归查询组织结构子节点
     *
     * @param orgnazationNodeDto
     * @return
     */
    public OrgnazationNodeDto getOrgList(OrgnazationNodeDto orgnazationNodeDto, List<OrgnazationNodeDto> list_org) throws Exception {
//		List<OrgnazationNodeDto> list1  = orgnazationService.queryOrgList(orgnazationNodeDto.getId());
        List<OrgnazationNodeDto> list1 = queryOrgChildNode(orgnazationNodeDto.getId(), list_org);
        orgnazationNodeDto.setChildren(list1);
        if (list1 != null && list1.size() > 0) {
            for (OrgnazationNodeDto orgnazationNodeDto1 : list1) {
                getOrgList(orgnazationNodeDto1, list_org);
            }
        } else {
            return orgnazationNodeDto;
        }
        return orgnazationNodeDto;
    }

    //查询组织结构子节点（代替从数据库中进行查询）
    public List<OrgnazationNodeDto> queryOrgChildNode(String parentId, List<OrgnazationNodeDto> list_org) {
        List<OrgnazationNodeDto> listOrgChildNode = new ArrayList<OrgnazationNodeDto>();
        for (OrgnazationNodeDto orgNodeDto : list_org) {
            if (parentId.equals(orgNodeDto.getParentId())) {
                listOrgChildNode.add(orgNodeDto);
            }
        }
        return listOrgChildNode;
    }

    //查询目录下的一级集团或者公司（代替从数据库中进行查询）
    public List<OrgnazationNodeDto> queryOrgRootNode(String rootId, List<OrgnazationNodeDto> list_org) {
        List<OrgnazationNodeDto> listOrgChildNode = new ArrayList<OrgnazationNodeDto>();
        for (OrgnazationNodeDto orgNodeDto : list_org) {
            if (rootId.equals(orgNodeDto.getRootId())) {
                if (orgNodeDto.getParentId() == null || "".equals(orgNodeDto.getParentId())) {
                    if ("company".equals(orgNodeDto.getType()) || "zb".equals(orgNodeDto.getType())) {
                        listOrgChildNode.add(orgNodeDto);
                    }
                }
            }
        }
        return listOrgChildNode;
    }
}
