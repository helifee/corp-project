package com.jzy.hio.sys.sys.res.controller;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.OpeLogInfo;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.sys.sys.res.dto.DataNodeDto;
import com.jzy.hio.sys.sys.res.dto.OperationDto;
import com.jzy.hio.sys.sys.res.entity.Operation;
import com.jzy.hio.sys.sys.res.service.OperationService;
import com.jzy.tools.data.JacksonUtils;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;


/**
 * 操作点控制层
 *
 * @author admin
 */
@RestController
@RequestMapping("/sys/res/operation")
@Api(tags = "操作点控制层", description = "")
public class OperationController {

	private static Logger log = LoggerFactory.getLogger(OperationController.class);
	//	@Autowired
	//	private OperationDtoServiceCustomer operationDtoServiceCustomer;

	@Autowired
	private OperationService operationService;

	/**
	 * 根据Id获取业务对象
	 *
	 * @param id 业务对象主键
	 * @return 业务对象
	 */
	@ApiOperation(value = "根据Id获取业务对象", notes = "根据Id获取业务对象")
	@ApiImplicitParams(@ApiImplicitParam(name = "id", value = "业务对象主键", required = true, dataType = "String", paramType = "path"))
	@RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
	public MessageResult get(@PathVariable("id") String id) {
		try {
			Operation data = operationService.getObjectById(id);
			return ResponseModel.getResult(MessageInfo.GETSUCCESS, data);
		} catch (Exception e) {
			return ResponseModel.getErrorResult();
		}
		//		MessageResult result=new MessageResult();
		//		try {
		//			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		//			String userJson = JacksonUtils.toJson(userBeanInfo);
		//			String dubboResultInfo=operationDtoServiceCustomer.getObjectById(userJson, "{\"id\":\""+id+"\"}");
		//			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		//			if(dubboServiceResultInfo.isSucess()){
		//				String resultInfo= dubboServiceResultInfo.getResult();
		//				OperationDto operationDto=JacksonUtils.fromJson(resultInfo, OperationDto.class);
		//				result.setResult(operationDto);
		//				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		//				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
		//			}else{
		//				result.setSuccess(MessageInfo.GETERROR.isResult());
		//				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
		//			}
		//		} catch (Exception e) {
		//			////e.printStackTrace();
		//		    log.error("调用get方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
		//			result.setSuccess(MessageInfo.GETERROR.isResult());
		//			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		//		}
		//		return result;
	}


	/**
	 * 返回分页对象
	 *
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "返回分页对象", notes = "返回分页对象")
	@ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
	@RequestMapping(value = "/page", method = {RequestMethod.POST}, consumes = "application/json")
	public MessageResult page(@RequestBody Map<String, Object> map) {
		try {
			Page beanPage = operationService.getPage(map);
			return ResponseModel.getResult(MessageInfo.GETSUCCESS, beanPage);
		} catch (Exception e) {
			return ResponseModel.getErrorResult();
		}
		//		MessageResult result=new MessageResult();
		//		String paramaterJson = JacksonUtils.toJson(map);
		//		try {
		//			SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		//			String userJson = JacksonUtils.toJson(userBeanInfo);
		//		    String dubboResultInfo=operationDtoServiceCustomer.getPage(userJson, paramaterJson);
		//		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		//			if(dubboServiceResultInfo.isSucess()){
		//				String resultInfo= dubboServiceResultInfo.getResult();
		//				PageBeanInfo pageInfo=JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
		//				result.setResult(pageInfo);
		//				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		//				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
		//			}else{
		//				result.setSuccess(MessageInfo.GETERROR.isResult());
		//				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
		//			}
		//		} catch (Exception e) {
		//			////e.printStackTrace();
		//		    log.error("调用page方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
		//			result.setSuccess(MessageInfo.GETERROR.isResult());
		//			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
		//		}
		//		return result;
	}

	/**
	 * 返回符合条件的列表
	 *
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
	@ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "operation", dataType = "String", value = "condition query", required = true)})
	@RequestMapping(value = "/queryList", method = {RequestMethod.POST}, consumes = "application/json")
	public MessageResult queryList(@RequestBody Map<String,Object> map ) {
		try {

			if(map.size()>0) {

				if (map.get("limit")!=null&&Integer.valueOf(map.get("limit").toString())==-1) {
					map.put("limit", 50);
				}
				List<OperationDto> list = operationService.queryListByCondition(map);
				return ResponseModel.getResult(MessageInfo.GETSUCCESS,list);
			} 
			List<Operation> queryList = operationService.queryList(null);
			return ResponseModel.getResult(MessageInfo.GETSUCCESS,queryList);
		} catch (Exception e) {
			return ResponseModel.getErrorResult();
		}
		//        MessageResult result = new MessageResult();
		//        String paramaterJson = JacksonUtils.toJson(map);
		//        try {
		//            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		//            String userJson = JacksonUtils.toJson(userBeanInfo);
		//            String dubboResultInfo = operationDtoServiceCustomer.queryList(userJson, paramaterJson);
		//            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		//            if (dubboServiceResultInfo.isSucess()) {
		//                String resultInfo = dubboServiceResultInfo.getResult();
		//                List<OperationDto> list = JacksonUtils.fromJson(resultInfo, ArrayList.class, OperationDto.class);
		//                result.setResult(list);
		//                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		//                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
		//            } else {
		//                result.setSuccess(MessageInfo.GETERROR.isResult());
		//                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
		//            }
		//
		//        } catch (Exception e) {
		//            ////e.printStackTrace();
		//            log.error("调用queryList方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
		//            result.setSuccess(MessageInfo.GETERROR.isResult());
		//            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		//        }
		//        return result;
	}


	/**
	 * 保存实体对象
	 *
	 * @param operation
	 * @return
	 */
	@ApiOperation(value = "保存实体对象", notes = "保存实体对象")
	@ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "operation", value = "save", required = true, dataType = "String")})
	@RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
	@OpeLogInfo(node = "新增按钮")
	public @ResponseBody
	MessageResult save(@RequestBody Operation operation) {
		try {
			int save = operationService.save(operation);
			return ResponseModel.getResult(MessageInfo.SAVESUCCESS,save);
		} catch (Exception e) {
			return ResponseModel.getErrorResult();
		}
		//        MessageResult result = new MessageResult();
		//        try {
		//            String saveJson = JacksonUtils.toJson(t);
		//            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		//            String userJson = JacksonUtils.toJson(userBeanInfo);
		//            String dubboResultInfo = operationDtoServiceCustomer.save(userJson, saveJson);
		//            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		//            if (dubboServiceResultInfo.isSucess()) {
		//                String resultInfo = dubboServiceResultInfo.getResult();
		//                OperationDto operationDto = JacksonUtils.fromJson(resultInfo, OperationDto.class);
		//                result.setResult(operationDto);
		//                result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
		//                result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
		//            } else {
		//                result.setSuccess(MessageInfo.SAVEERROR.isResult());
		//                result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
		//            }
		//        } catch (Exception e) {
		//            try {
		//                ////e.printStackTrace();
		//                ObjectMapper mapper = new ObjectMapper();
		//                String paramJson = mapper.writeValueAsString(t);
		//                log.error("调用save方法:  【参数" + paramJson + "】======" + "【" + e.getMessage() + "】");
		//                result.setSuccess(MessageInfo.SAVEERROR.isResult());
		//                result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + e.getMessage() + "】");
		//            } catch (JsonProcessingException e1) {
		//                // TODO Auto-generated catch block
		//                //e1.printStackTrace();
		//            }
		//
		//        }
		//        return result;
	}

	/**
	 * 删除实体对象
	 *
	 * @param id
	 * @return
	 */
	@ApiOperation(value = "删除实体对象", notes = "删除实体对象")
	@ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "id", value = " id", required = true, dataType = "String")})
	@RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
	@OpeLogInfo(node = "根据id删除按钮")
	public @ResponseBody
	MessageResult delete(@PathVariable("id") String id) {
		try {
			int save = operationService.deleteObjectById(id);
			return ResponseModel.getResult(MessageInfo.DELETESUCCESS,save);
		} catch (Exception e) {
			return ResponseModel.getErrorResult();
		}
		//        MessageResult result = new MessageResult();
		//        try {
		//            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		//            String userJson = JacksonUtils.toJson(userBeanInfo);
		//            String dubboResultInfo = operationDtoServiceCustomer.deleteObjectById(userJson, "{\"id\":\"" + id + "\"}");
		//            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		//            if (dubboServiceResultInfo.isSucess()) {
		//                String resultInfo = dubboServiceResultInfo.getResult();
		//                OperationDto operationDto = JacksonUtils.fromJson(resultInfo, OperationDto.class);
		//                result.setResult(operationDto);
		//                result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
		//                result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
		//            } else {
		//                result.setSuccess(MessageInfo.DELETEERROR.isResult());
		//                result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
		//            }
		//        } catch (Exception e) {
		//            ////e.printStackTrace();
		//            log.error("调用delete方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
		//            result.setSuccess(MessageInfo.DELETEERROR.isResult());
		//            result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
		//        }
		//
		//        return result;
	}


	/**
	 * 删除实体对象
	 *
	 * @param ids
	 * @return
	 */
	@ApiOperation(value = "删除实体对象", notes = "删除实体对象")
	@ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "ids", value = "ids", required = true, dataType = "String")})
	@RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
	@OpeLogInfo(node = "根据ids批量删除按钮")
	public @ResponseBody
	MessageResult deleteBatch(@PathVariable("ids") String ids) {
		try {
			int save = operationService.deleteAllObjectByIds(Arrays.asList(ids));
			return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
		} catch (Exception e) {
			return ResponseModel.getErrorResult();
		}
		//        MessageResult result = new MessageResult();
		//        try {
		//            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		//            String userJson = JacksonUtils.toJson(userBeanInfo);
		//            String dubboResultInfo = operationDtoServiceCustomer.deleteAllObjectByIds(userJson, "{\"id\":\"" + ids + "\"}");
		//            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		//            if (dubboServiceResultInfo.isSucess()) {
		//                String resultInfo = dubboServiceResultInfo.getResult();
		//                OperationDto operationDto = JacksonUtils.fromJson(resultInfo, OperationDto.class);
		//                result.setResult(operationDto);
		//                result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
		//                result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
		//            } else {
		//                result.setSuccess(MessageInfo.DELETEERROR.isResult());
		//                result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
		//            }
		//        } catch (Exception e) {
		//            ////e.printStackTrace();
		//            log.error("调用delete方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
		//            result.setSuccess(MessageInfo.DELETEERROR.isResult());
		//            result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
		//        }
		//
		//        return result;
	}

	/**
	 * 伪删除实体对象
	 *
	 * @param id
	 * @return
	 */
	@ApiOperation(value = "伪删除实体对象", notes = "伪删除实体对象")
	@ApiImplicitParams({@ApiImplicitParam(paramType = "path", dataType = "String", name = "id", value = "id", required = true)})
	@RequestMapping(value = "/deletePseudo/{id}", method = RequestMethod.DELETE)
	@OpeLogInfo(node = "根据id伪删除按钮")
	public @ResponseBody
	MessageResult deletePseudo(@PathVariable("id") String id) {
		try {
			int save = operationService.deletePseudoObjectById(id);
			return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
		} catch (Exception e) {
			return ResponseModel.getErrorResult();
		}
		//        MessageResult result = new MessageResult();
		//        try {
		//            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		//            String userJson = JacksonUtils.toJson(userBeanInfo);
		//            String dubboResultInfo = operationDtoServiceCustomer.deletePseudoObjectById(userJson, "{\"id\":\"" + id + "\"}");
		//            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		//            if (dubboServiceResultInfo.isSucess()) {
		//                String resultInfo = dubboServiceResultInfo.getResult();
		//                AppSystemDto appSystemDto = JacksonUtils.fromJson(resultInfo, AppSystemDto.class);
		//                result.setResult(appSystemDto);
		//                result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
		//                result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
		//            } else {
		//                result.setSuccess(MessageInfo.DELETEERROR.isResult());
		//                result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
		//            }
		//        } catch (Exception e) {
		//            ////e.printStackTrace();
		//            log.error("调用deletePseudo方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
		//            result.setSuccess(MessageInfo.DELETEERROR.isResult());
		//            result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
		//        }
		//
		//        return result;
	}

	/**
	 * 伪删除实体对象
	 *
	 * @param ids
	 * @return
	 */
	@RequestMapping(value = "/deletePseudoBatch/{ids}", method = RequestMethod.DELETE)
	@OpeLogInfo(node = "根据ids批量伪删除按钮")
	public @ResponseBody
	MessageResult deletePseudoBatch(@PathVariable("ids") String ids) {
		try {
			int save = operationService.deletePseudoAllObjectByIds(Arrays.asList(ids));
			return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
		} catch (Exception e) {
			return ResponseModel.getErrorResult();
		}
		//        MessageResult result = new MessageResult();
		//        try {
		//            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		//            String userJson = JacksonUtils.toJson(userBeanInfo);
		//            String dubboResultInfo = operationDtoServiceCustomer.deletePseudoAllObjectByIds(userJson, "{\"id\":\"" + ids + "\"}");
		//            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		//            if (dubboServiceResultInfo.isSucess()) {
		//                String resultInfo = dubboServiceResultInfo.getResult();
		//                AppSystemDto appSystemDto = JacksonUtils.fromJson(resultInfo, AppSystemDto.class);
		//                result.setResult(appSystemDto);
		//                result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
		//                result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
		//            } else {
		//                result.setSuccess(MessageInfo.DELETEERROR.isResult());
		//                result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
		//            }
		//        } catch (Exception e) {
		//            ////e.printStackTrace();
		//            log.error("调用deletePseudoBatch方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
		//            result.setSuccess(MessageInfo.DELETEERROR.isResult());
		//            result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
		//        }
		//
		//        return result;
	}

	/**
	 * 修改修改实体对象
	 *
	 * @param id
	 * @param map
	 * @return
	 */
	@ApiOperation(value = "修改修改实体对象", notes = "修改修改实体对象")
	@ApiImplicitParams({@ApiImplicitParam(name = "id", value = "id", required = true, dataType = "Integer", paramType = "path"), @ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
	@RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
	@OpeLogInfo(node = "根据id修改按钮")
	public @ResponseBody
	MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
		try {
			Operation syncData = operationService.getObjectById(id);
			String json = JacksonUtils.toJson(syncData);
			Map<String, Object> oldMap = JacksonUtils.fromJson(json, HashMap.class);
			oldMap.putAll(map);
			String updateJson = JacksonUtils.toJson(oldMap);
			Operation fromJson = JacksonUtils.fromJson(updateJson, Operation.class);
			int updateCount = operationService.update(fromJson);
			return ResponseModel.getResult(MessageInfo.UPDATESUCCESS, updateCount);
		} catch (Exception e) {
			return ResponseModel.getErrorResult();
		}
		//        MessageResult result = new MessageResult();
		//        OperationDto operationDto = null;
		//        try {
		//            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		//            String userJson = JacksonUtils.toJson(userBeanInfo);
		//            String dubboResultInfo = operationDtoServiceCustomer.getObjectById(userJson, "{\"id\":\"" + id + "\"}");
		//            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		//            if (dubboServiceResultInfo.isSucess()) {
		//                String resultInfo = dubboServiceResultInfo.getResult();
		//                Map<String, Object> oldMap = JacksonUtils.fromJson(resultInfo, HashMap.class);
		//                oldMap.putAll(map);
		//                String updateJson = JacksonUtils.toJson(oldMap);
		//                String updateDubboResultInfo = operationDtoServiceCustomer.update(userJson, updateJson);
		//                DubboServiceResultInfo updateDubboServiceResultInfo = JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
		//                if (updateDubboServiceResultInfo.isSucess()) {
		//                    Integer i = JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class);
		//                    result.setResult(i);
		//                    result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
		//                    result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
		//                } else {
		//                    result.setSuccess(MessageInfo.UPDATEERROR.isResult());
		//                    result.setMsg(updateDubboServiceResultInfo.getMsg() + "【" + updateDubboServiceResultInfo.getExceptionMsg() + "】");
		//                }
		//            } else {
		//                result.setSuccess(MessageInfo.UPDATEERROR.isResult());
		//                result.setMsg("不存在更新的对象");
		//            }
		//        } catch (Exception e) {
		//            try {
		//                ////e.printStackTrace();
		//                ObjectMapper mapper = new ObjectMapper();
		//                String paramJson = mapper.writeValueAsString(operationDto);
		//                log.error("调用update方法:  【参数" + id + "," + paramJson + "】======" + "【" + e.getMessage() + "】");
		//                result.setSuccess(MessageInfo.UPDATEERROR.isResult());
		//                result.setMsg(MessageInfo.UPDATEERROR.getMsg() + "【" + e.getMessage() + "】");
		//            } catch (JsonProcessingException e1) {
		//                // TODO Auto-generated catch block
		//                //e1.printStackTrace();
		//            }
		//
		//        }
		//        return result;
	}


	/**
	 * 根据资源Id查询按钮操作点
	 *
	 * @param map
	 * @return
	 */

	@ApiOperation(value = "根据资源Id查询按钮操作点", notes = "根据资源Id查询按钮操作点")
	@ApiImplicitParams({ @ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
	@RequestMapping(value = "/getOperationTreeByResourceId", method = {RequestMethod.POST}, consumes = "application/json")
	public @ResponseBody
	MessageResult getOperationTreeByResourceId(@RequestBody Map<String, Object> map) {
		try {
			List<DataNodeDto> list= operationService.getOperationTreeByResourceId(map);
			return ResponseModel.getResult(MessageInfo.DELETESUCCESS, list);
		} catch (Exception e) {
			return ResponseModel.getErrorResult();
		}

		//        MessageResult result = new MessageResult();
		//        String paramaterJson = JacksonUtils.toJson(map);
		//        try {
		//            SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		//            String userJson = JacksonUtils.toJson(userBeanInfo);
		//            String dubboResultInfo = operationDtoServiceCustomer.getOperationTreeByResourceId(userJson, paramaterJson);
		//            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		//            if (dubboServiceResultInfo.isSucess()) {
		//                String resultInfo = dubboServiceResultInfo.getResult();
		//                List<DataNodeDto> list = JacksonUtils.fromJson(resultInfo, ArrayList.class, DataNodeDto.class);
		//                result.setResult(list);
		//                result.setSuccess(MessageInfo.GETSUCCESS.isResult());
		//                result.setMsg(MessageInfo.GETSUCCESS.getMsg());
		//            } else {
		//                result.setSuccess(MessageInfo.GETERROR.isResult());
		//                result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
		//            }
		//
		//        } catch (Exception e) {
		//            ////e.printStackTrace();
		//            log.error("调用queryList方法:  【参数" + paramaterJson + "】======" + "【" + e.getMessage() + "】");
		//            result.setSuccess(MessageInfo.GETERROR.isResult());
		//            result.setMsg(MessageInfo.GETERROR.getMsg() + "【" + e.getMessage() + "】");
		//        }
		//        return result;
	}

}
