package com.jzy.hio.sys.sys.sync.controller;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.jzy.tools.login.LoginUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.OpeLogInfo;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.sys.sys.sync.entity.SyncData;
import com.jzy.hio.sys.sys.sync.service.SyncDataService;
import com.jzy.tools.data.JacksonUtils;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;


/**
 * 组织数据同步配置控制层
 *
 * @author admin
 */
@RestController
@RequestMapping("/sys/sync/syncData")
@Api(tags = "组织数据同步接口", description = "")
public class SyncDataController {

    private static Logger log = LoggerFactory.getLogger(SyncDataController.class);

    @Autowired
    private SyncDataService syncDataService;

    /**
     * 根据Id获取业务对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
    @ApiOperation(value = "根据Id获取业务对象", notes = "根据Id获取业务对象")
    @ApiImplicitParams(@ApiImplicitParam(name = "id", value = "业务对象主键", required = true, dataType = "String", paramType = "path"))
    public MessageResult get(@PathVariable("id") String id) {
        try {
            SyncData syncData = syncDataService.getObjectById(id);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS,syncData);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 返回分页对象
     *
     * @param map
     * @return
     */
    @RequestMapping(value = "/page", method = {RequestMethod.POST}, consumes = "application/json")
    @ApiOperation(value = "返回分页对象", notes = "返回分页对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    public MessageResult page(@RequestBody Map<String, Object> map) {
        try {
            Page beanPage = syncDataService.getPage(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS,beanPage);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 返回符合条件的列表
     *
     * @param sysncData
     * @return
     */
    @RequestMapping(value = "/queryList", method = {RequestMethod.POST}, consumes = "application/json")
    @ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "sysncData", dataType = "String", value = "condition query", required = true)})
    public MessageResult queryList(@RequestBody SyncData sysncData) {
        try {
            List<SyncData> syncDataList = syncDataService.queryList(sysncData);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS,syncDataList);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 保存实体对象
     *
     * @param syncData
     * @return
     */
    @ApiOperation(value = "保存实体对象", notes = "保存实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "syncData", value = "save", required = true, dataType = "String")})
    @RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
    @OpeLogInfo(node = "新增同步数据单据")
    public MessageResult save(@RequestBody SyncData syncData) {
        try {
            int save = syncDataService.save(syncData);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS,save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
//        MessageResult result = new MessageResult();
//        SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
//        String userJson = JacksonUtils.toJson(userBeanInfo);
//        try {
//            String saveJson = JacksonUtils.toJson(t);
//            String dubboResultInfo = syncDataDtoServiceCustomer.save(userJson, saveJson);
//            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//            if (dubboServiceResultInfo.isSucess()) {
//                String resultInfo = dubboServiceResultInfo.getResult();
//                SyncDataDto syncDataDto = JacksonUtils.fromJson(resultInfo, SyncDataDto.class);
//                result.setResult(syncDataDto);
//                result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
//                result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
//            } else {
//                result.setSuccess(MessageInfo.SAVEERROR.isResult());
//                result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
//            }
//        } catch (Exception e) {
//            try {
//                e.printStackTrace();
//                ObjectMapper mapper = new ObjectMapper();
//                String paramJson = mapper.writeValueAsString(t);
//                log.error("调用save方法:  【参数" + paramJson + "】======" + "【" + e.getMessage() + "】");
//                result.setSuccess(MessageInfo.SAVEERROR.isResult());
//                result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + e.getMessage() + "】");
//            } catch (JsonProcessingException e1) {
//                // TODO Auto-generated catch block
//                e1.printStackTrace();
//            }
//
//        }
//        return result;
    }

    /**
     * 删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "id", value = " id", required = true, dataType = "String")})
    @RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
    public MessageResult delete(@PathVariable("id") String id) {
        try {
            int save = syncDataService.deleteObjectById(id);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS,save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
//        MessageResult result = new MessageResult();
//        SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
//        String userJson = JacksonUtils.toJson(userBeanInfo);
//        try {
//            String dubboResultInfo = syncDataDtoServiceCustomer.deleteObjectById(userJson, "{\"id\":\"" + id + "\"}");
//            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//            if (dubboServiceResultInfo.isSucess()) {
//                String resultInfo = dubboServiceResultInfo.getResult();
//                SyncDataDto syncDataDto = JacksonUtils.fromJson(resultInfo, SyncDataDto.class);
//                result.setResult(syncDataDto);
//                result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
//                result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
//            } else {
//                result.setSuccess(MessageInfo.DELETEERROR.isResult());
//                result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//            log.error("调用delete方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
//            result.setSuccess(MessageInfo.DELETEERROR.isResult());
//            result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
//        }
//
//        return result;
    }


    /**
     * 删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "ids", value = "ids", required = true, dataType = "String")})
    @RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
    public MessageResult deleteBatch(@PathVariable("ids") String ids) {
        try {
            int save = syncDataService.deleteAllObjectByIds(Arrays.asList(ids));
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
//        MessageResult result = new MessageResult();
//        SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
//        String userJson = JacksonUtils.toJson(userBeanInfo);
//        try {
//            String dubboResultInfo = syncDataDtoServiceCustomer.deleteAllObjectByIds(userJson, "{\"id\":\"" + ids + "\"}");
//            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//            if (dubboServiceResultInfo.isSucess()) {
//                String resultInfo = dubboServiceResultInfo.getResult();
//                SyncDataDto syncDataDto = JacksonUtils.fromJson(resultInfo, SyncDataDto.class);
//                result.setResult(syncDataDto);
//                result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
//                result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
//            } else {
//                result.setSuccess(MessageInfo.DELETEERROR.isResult());
//                result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//            log.error("调用delete方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
//            result.setSuccess(MessageInfo.DELETEERROR.isResult());
//            result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
//        }
//
//        return result;
    }

    /**
     * 修改修改实体对象
     *
     * @param id
     * @param map
     * @return
     */
    @ApiOperation(value = "修改修改实体对象", notes = "修改修改实体对象")
    @ApiImplicitParams({@ApiImplicitParam(name = "id", value = "id", required = true, dataType = "Integer", paramType = "path"), @ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
    @OpeLogInfo(node = "修改同步数据单据")
    public MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
        try {
            SyncData syncData = syncDataService.getObjectById(id);
            String json = JacksonUtils.toJson(syncData);
            Map<String, Object> oldMap = JacksonUtils.fromJson(json, HashMap.class);
            oldMap.putAll(map);
            String updateJson = JacksonUtils.toJson(oldMap);
            SyncData fromJson = JacksonUtils.fromJson(updateJson, SyncData.class);
            int updateCount = syncDataService.update(fromJson);
            return ResponseModel.getResult(MessageInfo.UPDATESUCCESS, updateCount);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
//        MessageResult result = new MessageResult();
//        SyncDataDto syncDataDto = null;
//        SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
//        String userJson = JacksonUtils.toJson(userBeanInfo);
//        try {
//            String dubboResultInfo = syncDataDtoServiceCustomer.getObjectById(userJson, "{\"id\":\"" + id + "\"}");
//            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//            if (dubboServiceResultInfo.isSucess()) {
//                String resultInfo = dubboServiceResultInfo.getResult();
//                Map<String, Object> oldMap = JacksonUtils.fromJson(resultInfo, HashMap.class);
//                oldMap.putAll(map);
//                String updateJson = JacksonUtils.toJson(oldMap);
//                String updateDubboResultInfo = syncDataDtoServiceCustomer.update(userJson, updateJson);
//                DubboServiceResultInfo updateDubboServiceResultInfo = JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
//                if (updateDubboServiceResultInfo.isSucess()) {
//                    Integer i = JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class);
//                    result.setResult(i);
//                    result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
//                    result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
//                } else {
//                    result.setSuccess(MessageInfo.UPDATEERROR.isResult());
//                    result.setMsg(updateDubboServiceResultInfo.getMsg() + "【" + updateDubboServiceResultInfo.getExceptionMsg() + "】");
//                }
//            } else {
//                result.setSuccess(MessageInfo.UPDATEERROR.isResult());
//                result.setMsg("不存在更新的对象");
//            }
//        } catch (Exception e) {
//            try {
//                e.printStackTrace();
//                ObjectMapper mapper = new ObjectMapper();
//                String paramJson = mapper.writeValueAsString(syncDataDto);
//                log.error("调用update方法:  【参数" + id + "," + paramJson + "】======" + "【" + e.getMessage() + "】");
//                result.setSuccess(MessageInfo.UPDATEERROR.isResult());
//                result.setMsg(MessageInfo.UPDATEERROR.getMsg() + "【" + e.getMessage() + "】");
//            } catch (JsonProcessingException e1) {
//                // TODO Auto-generated catch block
//                e1.printStackTrace();
//            }
//
//        }
//        return result;
    }

    /**
     * 伪删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "伪删除实体对象", notes = "伪删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", dataType = "String", name = "id", value = "id", required = true)})
    @RequestMapping(value = "/deletePseudo/{id}", method = RequestMethod.DELETE)
    public MessageResult deletePseudo(@PathVariable("id") String id) {
        try {
            int save = syncDataService.deletePseudoObjectById(id);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
//        MessageResult result = new MessageResult();
//        SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
//        String userJson = JacksonUtils.toJson(userBeanInfo);
//        try {
//            String dubboResultInfo = syncDataDtoServiceCustomer.deletePseudoObjectById(userJson, "{\"id\":\"" + id + "\"}");
//            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//            if (dubboServiceResultInfo.isSucess()) {
//                String resultInfo = dubboServiceResultInfo.getResult();
//                SyncDataDto syncDataDto = JacksonUtils.fromJson(resultInfo, SyncDataDto.class);
//                result.setResult(syncDataDto);
//                result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
//                result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
//            } else {
//                result.setSuccess(MessageInfo.DELETEERROR.isResult());
//                result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//            log.error("调用deletePseudo方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
//            result.setSuccess(MessageInfo.DELETEERROR.isResult());
//            result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
//        }
//
//        return result;
    }


    /**
     * 伪删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "伪删除实体对象", notes = "伪删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", dataType = "String", name = "ids", value = "ids", required = true)})
    @RequestMapping(value = "/deletePseudoBatch/{ids}", method = RequestMethod.DELETE)
    @OpeLogInfo(node = "删除同步数据单据")
    public MessageResult deletePseudoBatch(@PathVariable("ids") String ids) {
        try {
            int save = syncDataService.deletePseudoAllObjectByIds(Arrays.asList(ids));
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
//        MessageResult result = new MessageResult();
//        SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
//        String userJson = JacksonUtils.toJson(userBeanInfo);
//        try {
//            String dubboResultInfo = syncDataDtoServiceCustomer.deletePseudoAllObjectByIds(userJson, "{\"id\":\"" + ids + "\"}");
//            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//            if (dubboServiceResultInfo.isSucess()) {
//                String resultInfo = dubboServiceResultInfo.getResult();
//                SyncDataDto syncDataDto = JacksonUtils.fromJson(resultInfo, SyncDataDto.class);
//                result.setResult(syncDataDto);
//                result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
//                result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
//            } else {
//                result.setSuccess(MessageInfo.DELETEERROR.isResult());
//                result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//            log.error("调用deletePseudoBatch方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
//            result.setSuccess(MessageInfo.DELETEERROR.isResult());
//            result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
//        }
//
//        return result;
    }

    /**
     * 同步数据
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "同步数据", notes = "同步数据")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "id", value = "id", required = true, dataType = "String")})
    @RequestMapping(value = "/syncData/{id}", method = RequestMethod.POST)
    @OpeLogInfo(node = "同步数据")
    public MessageResult syncData(@PathVariable("id") String id) {
        try {
            MessageResult info = syncDataService.syncData(id);
            return info;
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
//        MessageResult result = new MessageResult();
//        SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
//        String userJson = JacksonUtils.toJson(userBeanInfo);
//        try {
//            String dubboResultInfo = syncDataDtoServiceCustomer.syncData(userJson, "{\"id\":\"" + id + "\"}");
//            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//            if (dubboServiceResultInfo.isSucess()) {
//                String resultInfo = dubboServiceResultInfo.getResult();
//                SyncDataDto syncDataDto = JacksonUtils.fromJson(resultInfo, SyncDataDto.class);
//                result.setResult(syncDataDto);
//                result.setSuccess(true);
//                result.setMsg("同步成功");
//            } else {
//                result.setSuccess(true);
//                result.setMsg("成功");
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//            log.error("调用deletePseudoBatch方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
//            result.setSuccess(true);
//            result.setMsg("成功");
//        }
//
//        return result;
    }

    /**
     * 同步单个用户
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "同步单个用户", notes = "同步单个用户")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "id", value = "id", required = true, dataType = "String")})
    @RequestMapping(value = "/syncDataOne/{id}", method = RequestMethod.POST)
    @OpeLogInfo(node = "同步数据单个用户")
    public MessageResult syncDataOne(@PathVariable("id") String id) {
        try {
            MessageResult info = syncDataService.syncDataOne(id, LoginUtils.getSecurityUserBeanInfo().getTendCode());
            return info;
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 同步单个组织机构
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "同步单个组织机构", notes = "同步单个组织机构")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "id", value = "id", required = true, dataType = "String")})
    @RequestMapping(value = "/syncDataOrgOne/{id}", method = RequestMethod.POST)
    public MessageResult syncDataOrgOne(@PathVariable("id") String id) {
        try {

            MessageResult info = syncDataService.syncDataOrgOne(id, com.jzy.tools.login.LoginUtils.getSecurityUserBeanInfo().getTendCode());
            return info;
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
//        MessageResult result = new MessageResult();
//        SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
//        String userJson = JacksonUtils.toJson(userBeanInfo);
//        try {
//            String dubboResultInfo = syncDataDtoServiceCustomer.syncDataOrgOne(userJson, "{\"id\":\"" + id + "\"}");
//            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//            if (dubboServiceResultInfo.isSucess()) {
//                String resultInfo = dubboServiceResultInfo.getResult();
//                SyncDataDto syncDataDto = JacksonUtils.fromJson(resultInfo, SyncDataDto.class);
//                result.setResult(syncDataDto);
//                result.setSuccess(true);
//                result.setMsg("同步成功");
//            } else {
//                result.setSuccess(true);
//                result.setMsg("成功");
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//            log.error("调用deletePseudoBatch方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
//            result.setSuccess(true);
//            result.setMsg("成功");
//        }
//
//        return result;
    }


}
