package com.jzy.hio.sys.sys.org.service.impl;

import java.sql.Date;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.jzy.hio.sys.sys.org.dto.RoleAndCataDto;
import com.jzy.hio.sys.sys.org.entity.StandardRole;
import com.jzy.hio.sys.sys.res.service.AppSystemService;
import com.jzy.tools.data.JacksonUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.sys.sys.org.dto.RoleCatalogDto;
import com.jzy.hio.sys.sys.org.dto.RoleNodeDto;
import com.jzy.hio.sys.sys.org.entity.RoleCatalog;
import com.jzy.hio.sys.sys.org.mapper.RoleCatalogDao;
import com.jzy.hio.sys.sys.org.mapper.RoleUserDao;
import com.jzy.hio.sys.sys.org.mapper.StandardRoleDao;
import com.jzy.hio.sys.sys.org.service.RoleCatalogService;
import com.jzy.hio.sys.sys.org.service.StandardRoleService;
import com.jzy.hio.sys.sys.res.utils.InvalidCustomException;

/**
 * @author admin
 */

@Service
public class RoleCatalogServiceImpl extends BaseServiceImpl<String, RoleCatalog> implements RoleCatalogService {


    @Autowired
    private RoleCatalogDao roleCatalogDao;
    @Autowired
    private StandardRoleDao standardRoleDao;
    @Autowired
    private StandardRoleService standardRoleService;
    @Autowired
    private RoleUserDao roleUserDao;
    @Autowired
    private AppSystemService appSystemService;

    /**
     * 获取目录子节点目录
     *
     * @param parentId
     * @return
     */
    @Override
    public List<RoleNodeDto> queryRoleCatalogList(String parentId) throws Exception {
        return roleCatalogDao.queryRoleCatalogList(parentId);
    }

    @Override
    public List<RoleNodeDto> queryRoleCatalogRoot(Map<String, Object> map) throws Exception {
        return roleCatalogDao.queryRoleCatalogRoot(map);
    }

    /**
     * 维护相关表全路径
     *
     * @param map 参数
     * @return
     * @throws Exception
     */
    public Integer updateCataAndRoleAllPreFix(Map<String, Object> map) throws Exception {
        return roleCatalogDao.updateCataAndRoleAllPreFix(map);
    }

    /**
     * 禁用角色
     *
     * @param paramater
     * @return
     */
    public Integer lockRole(Map map) throws Exception {
        return roleCatalogDao.lockRole(map);
    }

    /**
     * 校验名字是否重复
     *
     * @param map
     * @return
     */
    public Integer checkName(Map map) throws Exception {
        return roleCatalogDao.checkCataName(map);
    }

    @Override
    public List<RoleNodeDto> getRoleTree(Map<String, Object> map) throws Exception {
        //查询出来第一级根目录
        List<RoleNodeDto> list = queryRoleCatalogRoot(map);
        map.put("sidx", "sort");
        map.put("sord", "asc");
        if (null != map.get("roleCataStatus")) {
            map.put("status", map.get("roleCataStatus"));
        }
        ;

        //查询出来所有的目录
        List<RoleCatalog> list_catalogAll = queryListByExample(map);

        String isRole = (String) map.get("isRole");//是否查询角色：Y是，N否
        isRole = isRole == null ? "Y" : isRole;
        List list_roleAll = null;
        if (isRole.equals("Y")) {
            //查询出来所有未删除的标准角色
            //查询出来所有未删除的标准角色
            Map<String, Object> mapNew = new HashMap<String, Object>();
            mapNew.put("delflag", "0");
            mapNew.put("sidx", "sort");
            mapNew.put("sord", "asc");
            if (null != map.get("roleCataStatus")) {
                mapNew.put("status", map.get("roleCataStatus"));
            }
            ;
            list_roleAll = standardRoleService.queryListByExample(mapNew);
        }

        //查询出来所有的角色目录以及角色
        for (RoleNodeDto roleNodeDto : list) {
            getNodeList(roleNodeDto, list_catalogAll, list_roleAll);
        }
        return list;
    }

    @Override
    public int saveRoleOrCata(RoleAndCataDto roleAndCataDto) throws Exception {
        //保存为目录
        if ("cata".equals(roleAndCataDto.getMold())) {
            RoleCatalog roleCatalog = new RoleCatalog();
            //固定属性
            roleCatalog.setId(roleAndCataDto.getId());
            roleCatalog.setCreateDate(roleAndCataDto.getCreateDate() == null ? null : roleAndCataDto.getCreateDate());
            roleCatalog.setUpdateDate(roleAndCataDto.getUpdateDate() == null ? null : roleAndCataDto.getUpdateDate());
            roleCatalog.setCreatePersonId(roleAndCataDto.getCreatePersonId());
            roleCatalog.setCreatePersonName(roleAndCataDto.getCreatePersonName());
            roleCatalog.setUpdatePersonId(roleAndCataDto.getUpdatePersonId());
            roleCatalog.setUpdatePersonName(roleAndCataDto.getUpdatePersonName());
            roleCatalog.setCreateOrgId(roleAndCataDto.getCreateOrgId());
            roleCatalog.setCreateOrgName(roleAndCataDto.getCreateOrgName());
            roleCatalog.setCreateCompanyId(roleAndCataDto.getCreateCompanyId());
            roleCatalog.setCreateCompanyName(roleAndCataDto.getCreateCompanyName());
            roleCatalog.setConcurrencyVersion(roleAndCataDto.getConcurrencyVersion());
            roleCatalog.setDelflag(roleAndCataDto.getDelflag());

//			   //检查是否重名
            Map mapcon = new HashMap<>();
            mapcon.put("pId", roleAndCataDto.getCatalogId());
            mapcon.put("name", roleAndCataDto.getName());
            mapcon.put("type", "cata");

            Integer c = checkName(mapcon);
            if (c > 0) {
                throw new InvalidCustomException("名称已存在，不可重复");
            }
            //目录属性
            roleCatalog.setCode(roleAndCataDto.getCode());
            roleCatalog.setName(roleAndCataDto.getName());
            roleCatalog.setType(roleAndCataDto.getType());
            roleCatalog.setParentId(roleAndCataDto.getCatalogId());
            roleCatalog.setIcon(roleAndCataDto.getIcon());
            roleCatalog.setStatus(roleAndCataDto.getStatus());
            roleCatalog.setRemark(roleAndCataDto.getRemark());

            Map<String, Object> map = new HashMap<String, Object>();
            map.put("tableName", "pt_sys_org_role_catalog");
            Long maxSort = appSystemService.getMaxSort(map) + 1L;//排序号自动加1
            //默认设置最大排序
            roleCatalog.setSort(maxSort);
            RoleCatalog parentRoleCatalog = getObjectById(roleAndCataDto.getCatalogId());

            String prefixName = parentRoleCatalog.getPrefixName();
            prefixName = prefixName.replaceAll("\\\\", "\\\\\\\\");
            prefixName = prefixName.replaceAll("'", "\\\\\'");
            roleCatalog.setPrefixId(parentRoleCatalog.getPrefixId() + "/" + roleAndCataDto.getId());
            roleCatalog.setPrefixName(prefixName + "/" + roleAndCataDto.getName());
            roleCatalog.setPrefixSort(parentRoleCatalog.getPrefixSort() + "-" + String.format("A%05d", maxSort));


            save(roleCatalog);

        } else if ("role".equals(roleAndCataDto.getMold())) {
            //保存为角色
            StandardRole standardRole = new StandardRole();
            //固定属性
            standardRole.setId(roleAndCataDto.getId());
            standardRole.setCreateDate(roleAndCataDto.getCreateDate() == null ?null :roleAndCataDto.getCreateDate());
            standardRole.setUpdateDate(roleAndCataDto.getUpdateDate() == null ? null : roleAndCataDto.getUpdateDate());
            standardRole.setCreatePersonId(roleAndCataDto.getCreatePersonId());
            standardRole.setCreatePersonName(roleAndCataDto.getCreatePersonName());
            standardRole.setUpdatePersonId(roleAndCataDto.getUpdatePersonId());
            standardRole.setUpdatePersonName(roleAndCataDto.getUpdatePersonName());
            standardRole.setCreateOrgId(roleAndCataDto.getCreateOrgId());
            standardRole.setCreateOrgName(roleAndCataDto.getCreateOrgName());
            standardRole.setCreateCompanyId(roleAndCataDto.getCreateCompanyId());
            standardRole.setCreateCompanyName(roleAndCataDto.getCreateCompanyName());
            standardRole.setConcurrencyVersion(roleAndCataDto.getConcurrencyVersion());
            standardRole.setDelflag(roleAndCataDto.getDelflag());
            //检查是否重名
            Map mapcon = new HashMap<>();
            mapcon.put("pId", roleAndCataDto.getCatalogId());
            mapcon.put("name", roleAndCataDto.getName());
            mapcon.put("type", "role");

            Integer c = checkName(mapcon);
            if (c > 0) {
                throw new InvalidCustomException("名称已存在，不可重复");
            }
            //角色属性
            standardRole.setCode(roleAndCataDto.getCode());
            standardRole.setName(roleAndCataDto.getName());
            standardRole.setType(roleAndCataDto.getType());
            standardRole.setCatalogId(roleAndCataDto.getCatalogId());
            standardRole.setIcon(roleAndCataDto.getIcon());
            standardRole.setStatus(roleAndCataDto.getStatus());
            standardRole.setRemark(roleAndCataDto.getRemark());
            standardRole.setDisabledId(roleAndCataDto.getDisabledId());
            standardRole.setDisabledDate(roleAndCataDto.getDisabledDate());
            standardRole.setTendId(roleAndCataDto.getTendId());

            Map<String, Object> map = new HashMap<String, Object>();
            map.put("tableName", "pt_sys_org_standard_role");
            Long maxSort = appSystemService.getMaxSort(map) + 1L;//排序号自动加1
            //默认设置最大排序
            standardRole.setSort(maxSort);
            RoleCatalog parentRoleCatalog = getObjectById(roleAndCataDto.getCatalogId());
            String prefixName = parentRoleCatalog.getPrefixName();
            prefixName = prefixName.replaceAll("\\\\", "\\\\\\\\");
            prefixName = prefixName.replaceAll("'", "\\\\\'");
            standardRole.setPrefixId(parentRoleCatalog.getPrefixId() + "/" + roleAndCataDto.getId());
            standardRole.setPrefixName(prefixName + "/" + roleAndCataDto.getName());
            standardRole.setPrefixSort(parentRoleCatalog.getPrefixSort() + "-" + String.format("B%05d", maxSort));


            standardRoleService.save(standardRole);
        }
        return 1;
    }

    /**
     * 递归
     *
     * @param paramater
     * @return
     */
    public RoleNodeDto getNodeList(RoleNodeDto roleNodeDto, List list_catalogAll, List list_roleAll) throws
            Exception {
        //查询子目录
//		List<RoleNodeDto> list_cata  = roleCatalogService.queryRoleCatalogList(roleNodeDto.getId());
        List<RoleNodeDto> list_cata = getChildCatas(roleNodeDto, list_catalogAll);
        //查询子角色
//		List<RoleNodeDto> list_role  = standardRoleService.queryRoleListByCataId(roleNodeDto.getId());
        List<RoleNodeDto> list_role = getChildRoles(roleNodeDto, list_roleAll);
        List<RoleNodeDto> list_c = new ArrayList<RoleNodeDto>();
        list_c.addAll(list_cata);
        list_c.addAll(list_role);
//		list_role.addAll(list_cata);
        roleNodeDto.setChildren(list_c);
        if (list_cata != null && list_cata.size() > 0) {
            for (RoleNodeDto roleNodeDto1 : list_cata) {
                getNodeList(roleNodeDto1, list_catalogAll, list_roleAll);
            }
        } else {
            return roleNodeDto;
        }
        return roleNodeDto;
    }

    //查询子目录
    public List<RoleNodeDto> getChildCatas(RoleNodeDto roleNodeDto, List list_catalogAll) {
        List<RoleNodeDto> list = new ArrayList<RoleNodeDto>();
        if (null != list_catalogAll && list_catalogAll.size() > 0) {
            for (int i = 0; i < list_catalogAll.size(); i++) {
                RoleCatalog roleCatalog = (RoleCatalog) list_catalogAll.get(i);
                if (roleNodeDto.getId().equals(roleCatalog.getParentId())) {
                    RoleNodeDto roleDto = new RoleNodeDto();
                    roleDto.setId(roleCatalog.getId());
                    roleDto.setCode(roleCatalog.getCode());
                    roleDto.setName(roleCatalog.getName());
                    roleDto.setType((roleCatalog.getType() ? "1" : "0"));
                    roleDto.setSort(roleCatalog.getSort());
                    roleDto.setStatus(roleCatalog.getStatus());
                    roleDto.setMold("cata");
                    roleDto.setParentId(roleCatalog.getParentId());
                    roleDto.setPrefixId(roleCatalog.getPrefixId());
                    roleDto.setPrefixName(roleCatalog.getPrefixName());
                    roleDto.setPrefixSort(roleCatalog.getPrefixSort());
                    list.add(roleDto);
                }
            }
        }

        return list;
    }

    //查询子角色
    public List<RoleNodeDto> getChildRoles(RoleNodeDto roleNodeDto, List list_roleAll) {
        List<RoleNodeDto> list = new ArrayList<RoleNodeDto>();
        if (null != list_roleAll && list_roleAll.size() > 0) {
            for (int i = 0; i < list_roleAll.size(); i++) {
                StandardRole standardRole = (StandardRole) list_roleAll.get(i);
                if (roleNodeDto.getId().equals(standardRole.getCatalogId())) {
                    RoleNodeDto roleDto = new RoleNodeDto();
                    roleDto.setId(standardRole.getId());
                    roleDto.setCode(standardRole.getCode());
                    roleDto.setName(standardRole.getName());
                    roleDto.setType((standardRole.getType() ? "1" : "0"));
                    roleDto.setSort(standardRole.getSort());
                    roleDto.setStatus(standardRole.getStatus());
                    roleDto.setMold("role");
                    roleDto.setParentId(standardRole.getCatalogId());
                    roleDto.setPrefixId(standardRole.getPrefixId());
                    roleDto.setPrefixName(standardRole.getPrefixName());
                    roleDto.setPrefixSort(standardRole.getPrefixSort());
                    list.add(roleDto);
                }
            }
        }

        return list;
    }


    /**
     * 启用角色
     *
     * @param paramater
     * @return
     */
    public Integer unLockRole(Map map) throws Exception {
        return roleCatalogDao.unLockRole(map);
    }

    /**
     * 删除角色目录及其下级
     */
    @Override
    @Transactional(readOnly = false, rollbackFor = Exception.class)
    public Integer deleteOrgAllSon(RoleCatalogDto roleCatalogDto) throws Exception {
        try {
            //查询目录下角色是否被引用，如果有不让删除
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("cataId", roleCatalogDto.getId());
            map.put("delflag", "0");
            Integer pcount = roleUserDao.selectSonRefCount(map);
            if (null != pcount && pcount > 0) {
                throw new InvalidCustomException("该分类下有下级被引用，不可删除");
            }

            List<String> list = roleCatalogDao.selectSunById(map);
            deleteAllObjectByIds(list);
            standardRoleService.deleteAllObjectByIds(list);
            return 1;
        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }
    }

    @Override
    @Transactional(readOnly = false, rollbackFor = Exception.class)
    public Integer updateNew(RoleCatalog roleCatalog) throws Exception {
        RoleCatalog roleCatalogOld = getObjectById(roleCatalog.getId());
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("delflag", "0");

        //如果状态没有改变不更改下级
        if (!roleCatalog.getStatus().equals(roleCatalogOld.getStatus())) {
            //查询出来所有未删除的标准角色
			   /*List list_roleAll= standardRoleService.queryList(map);
			   for(int i=0;i<list_roleAll.size();i++){
					StandardRole standardRole = (StandardRole)list_roleAll.get(i);
					if(roleCatalog.getId().equals(standardRole.getCatalogId())){
						standardRole.setStatus(roleCatalog.getStatus());
						standardRoleService.update(standardRole);
					}
				}*/
            //禁用或者启用下级
            if (roleCatalog.getStatus().equals("0")) {//禁用角色，并将其下级角色禁用
                String prefixId = roleCatalogOld.getPrefixId();
                map.put("roleId", prefixId);
                lockRole(map);
            } else if (roleCatalog.getStatus().equals("1")) {//启用角色，并将其上级角色启用
                String prefixId = roleCatalogOld.getPrefixId();
                String orgIds[] = prefixId.split("/");
                map.put("roleIds", orgIds);
                unLockRole(map);
            }
        }

        //检查是否重名
        Map<String, Object> mapconC = new HashMap<>();
        mapconC.put("pId", roleCatalog.getParentId());
        mapconC.put("name", roleCatalog.getName());
        mapconC.put("type", "cata");
        mapconC.put("id", roleCatalog.getId());

        Integer c = roleCatalogDao.checkCataName(mapconC);
        if (c > 0) {
            throw new InvalidCustomException("名称已存在，不可重复");
        }
        String newName = roleCatalog.getName();
        newName = newName.replaceAll("\\\\\\\\", "\\\\");
        newName = newName.replaceAll("\\\\'", "'");
        //如果名称或者上级进行更改了，同时要更改所有的下级全路径
        if (roleCatalogOld.getParentId().equals(roleCatalog.getParentId()) || roleCatalogOld.getName().equals(newName)) {
            RoleCatalog parentRoleCatalog = getObjectById(roleCatalog.getParentId());
            Map<String, Object> mapcon = new HashMap<String, Object>();
            roleCatalog.setPrefixId(parentRoleCatalog.getPrefixId() + "/" + roleCatalog.getId());
            roleCatalog.setPrefixName(parentRoleCatalog.getPrefixName() + "/" + newName);
            roleCatalog.setPrefixSort(parentRoleCatalog.getPrefixSort() + "-" + String.format("A%05d", roleCatalog.getSort()));
            mapcon.put("prefixIdOld", roleCatalogOld.getPrefixId());
            mapcon.put("prefixIdNew", roleCatalog.getPrefixId());
            mapcon.put("prefixNameOld", roleCatalogOld.getPrefixName() + "/");
            mapcon.put("prefixNameNew", roleCatalog.getPrefixName() + "/");
            mapcon.put("prefixSortOld", roleCatalogOld.getPrefixSort());
            mapcon.put("prefixSortNew", roleCatalog.getPrefixSort());
            updateCataAndRoleAllPreFix(mapcon);
        }
        String prefixName = roleCatalog.getPrefixName();
        prefixName = prefixName.replaceAll("\\\\", "\\\\\\\\");
        prefixName = prefixName.replaceAll("'", "\\\\\'");
        roleCatalog.setPrefixName(prefixName);
        int result = roleCatalogDao.updateByPrimaryKeySelective(roleCatalog);
        return result;
    }

}
