package com.jzy.hio.sys.sys.num.controller;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.sys.sys.num.entity.FormVariable;
import com.jzy.hio.sys.sys.num.service.FormVariableService;
import com.jzy.tools.data.JacksonUtils;


/**
 * 表单变量控制层
 *
 * @author admin
 */
@Controller
@RequestMapping("/sys/num/formVariable")
@Api(tags = "表单变量控制层", description = "")
public class FormVariableController {

    private static Logger log = LoggerFactory.getLogger(FormVariableController.class);

    //	@Autowired
//	private FormVariableDtoServiceCustomer formVariableDtoServiceCustomer;
    @Autowired
    private FormVariableService formVariableService;

    /**
     * 根据Id获取业务对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @ApiOperation(value = "根据Id获取业务对象", notes = "根据Id获取业务对象")
    @ApiImplicitParams(@ApiImplicitParam(name = "id", value = "业务对象主键", required = true, dataType = "String", paramType = "path"))
    @RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
    public @ResponseBody
    MessageResult get(@PathVariable("id") String id) {
        try {
            FormVariable data = formVariableService.getObjectById(id);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, data);
        } catch (Exception e) {
            log.error("调用get方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getErrorResult();
        }
//		MessageResult result=new MessageResult();
//		try {
//			//获取用户对象
//			SecurityUserBeanInfo user=LoginUtils.getSecurityUserBeanInfo();
//			//用户对象转json
//			String userJson = JacksonUtils.toJson(user);
//			String dubboResultInfo=formVariableDtoServiceCustomer.getObjectById(userJson, "{\"id\":\""+id+"\"}");
//			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//			if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				FormVariableDto formVariableDto=JacksonUtils.fromJson(resultInfo, FormVariableDto.class);
//				result.setResult(formVariableDto);
//				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
//				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
//			}else{
//				result.setSuccess(MessageInfo.GETERROR.isResult());
//				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//			}
//		} catch (Exception e) {
//			////e.printStackTrace();
//		    log.error("调用get方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.GETERROR.isResult());
//			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
//		}
//		return result;
    }


    /**
     * 返回分页对象
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "返回分页对象", notes = "返回分页对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/page", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult page(@RequestBody Map<String, Object> map) {
        try {
            Page beanPage = formVariableService.getPage(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, beanPage);
        } catch (Exception e) {
            log.error("调用page方法:  【参数" + map + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getErrorResult();
        }
//		MessageResult result=new MessageResult();
//		String paramaterJson = JacksonUtils.toJson(map);
//		try {
//			//获取用户对象
//			SecurityUserBeanInfo user=LoginUtils.getSecurityUserBeanInfo();
//			//用户对象转json
//			String userJson = JacksonUtils.toJson(user);
//		    String dubboResultInfo=formVariableDtoServiceCustomer.getPage(userJson, paramaterJson);
//		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//			if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				PageBeanInfo pageInfo=JacksonUtils.fromJson(resultInfo, PageBeanInfo.class);
//				result.setResult(pageInfo);
//				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
//				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
//			}else{
//				result.setSuccess(MessageInfo.GETERROR.isResult());
//				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//			}
//		} catch (Exception e) {
//			////e.printStackTrace();
//		    log.error("调用page方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.GETERROR.isResult());
//			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
//		}
//		return result;
    }

    /**
     * 返回符合条件的列表
     *
     * @param formVariable
     * @return
     */
    @ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "formVariable", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/queryList", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryList(@RequestBody FormVariable formVariable) {
        try {
            List<FormVariable> results = formVariableService.queryList(formVariable);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, results);
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseModel.getErrorResult();
        }
//		MessageResult result=new MessageResult();
//		try {
//			//获取用户对象
//			SecurityUserBeanInfo user=LoginUtils.getSecurityUserBeanInfo();
//			//用户对象转json
//			String userJson = JacksonUtils.toJson(user);
//			String dubboResultInfo=formVariableDtoServiceCustomer.queryList(userJson, paramaterJson);
//		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//		    if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				List<FormVariableDto> list=JacksonUtils.fromJson(resultInfo, ArrayList.class,FormVariableDto.class);
//				result.setResult(list);
//				result.setSuccess(MessageInfo.GETSUCCESS.isResult());
//				result.setMsg(MessageInfo.GETSUCCESS.getMsg());
//		    }else{
//		    	result.setSuccess(MessageInfo.GETERROR.isResult());
//				result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//		    }
//
//		} catch (Exception e) {
//			////e.printStackTrace();
//			log.error("调用queryList方法:  【参数"+paramaterJson+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.GETERROR.isResult());
//			result.setMsg(MessageInfo.GETERROR.getMsg()+"【"+e.getMessage()+"】");
//		}
//		return result;
    }


    /**
     * 保存实体对象
     *
     * @param formVariable
     * @return
     */
    @ApiOperation(value = "保存实体对象", notes = "保存实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "formVariable", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
    public @ResponseBody
    MessageResult save(@RequestBody FormVariable formVariable) {
        try {
            int save = formVariableService.save(formVariable);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
//		MessageResult result=new MessageResult();
//		try {
//			//获取用户对象
//			SecurityUserBeanInfo user=LoginUtils.getSecurityUserBeanInfo();
//			//用户对象转json
//			String userJson = JacksonUtils.toJson(user);
//			String saveJson= JacksonUtils.toJson(t);
//			String dubboResultInfo=formVariableDtoServiceCustomer.save(userJson, saveJson);
//		    DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//		    if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				FormVariableDto formVariableDto=JacksonUtils.fromJson(resultInfo, FormVariableDto.class);
//				result.setResult(formVariableDto);
//				result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
//				result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
//		    }else{
//		    	result.setSuccess(MessageInfo.SAVEERROR.isResult());
//				result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//		    }
//		} catch (Exception e) {
//			try {
//				////e.printStackTrace();
//			    ObjectMapper mapper = new ObjectMapper();
//				String  paramJson = mapper.writeValueAsString(t);
//				log.error("调用save方法:  【参数"+paramJson+"】======"+"【"+e.getMessage()+"】");
//				result.setSuccess(MessageInfo.SAVEERROR.isResult());
//				result.setMsg(MessageInfo.SAVEERROR.getMsg()+"【"+e.getMessage()+"】");
//			} catch (JsonProcessingException e1) {
//				// TODO Auto-generated catch block
//				//e1.printStackTrace();
//			}
//
//		}
//		return result;
    }

    /**
     * 删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "id", value = " id", required = true, dataType = "String")})
    @RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult delete(@PathVariable("id") String id) {
        try {
            int save = formVariableService.deleteObjectById(id);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            log.error("调用delete方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
            return ResponseModel.getErrorResult();
        }
//		MessageResult result=new MessageResult();
//		try {
//			//获取用户对象
//			SecurityUserBeanInfo user=LoginUtils.getSecurityUserBeanInfo();
//			//用户对象转json
//			String userJson = JacksonUtils.toJson(user);
//			String dubboResultInfo=formVariableDtoServiceCustomer.deleteObjectById(userJson, "{\"id\":\""+id+"\"}");
//			DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//			if(dubboServiceResultInfo.isSucess()){
//				String resultInfo= dubboServiceResultInfo.getResult();
//				FormVariableDto formVariableDto=JacksonUtils.fromJson(resultInfo, FormVariableDto.class);
//				result.setResult(formVariableDto);
//				result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
//				result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
//			}else{
//				result.setSuccess(MessageInfo.DELETEERROR.isResult());
//				result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+dubboServiceResultInfo.getExceptionMsg()+"】");
//			}
//		} catch (Exception e) {
//			////e.printStackTrace();
//		    log.error("调用delete方法:  【参数"+id+"】======"+"【"+e.getMessage()+"】");
//			result.setSuccess(MessageInfo.DELETEERROR.isResult());
//			result.setMsg(MessageInfo.DELETEERROR.getMsg()+"【"+e.getMessage()+"】");
//		}
//
//		return result;
    }


    /**
     * 删除实体对象
     *
     * @param t
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "ids", value = " ids", required = true, dataType = "String")})
    @RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult deleteBatch(@PathVariable("ids") String ids) {
        try {
            int save = formVariableService.deleteAllObjectByIds(Arrays.asList(ids));
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
//        MessageResult result = new MessageResult();
//        try {
//            //获取用户对象
//            SecurityUserBeanInfo user = LoginUtils.getSecurityUserBeanInfo();
//            //用户对象转json
//            String userJson = JacksonUtils.toJson(user);
//            String dubboResultInfo = formVariableDtoServiceCustomer.deleteAllObjectByIds(userJson, "{\"id\":\"" + ids + "\"}");
//            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//            if (dubboServiceResultInfo.isSucess()) {
//                String resultInfo = dubboServiceResultInfo.getResult();
//                FormVariableDto formVariableDto = JacksonUtils.fromJson(resultInfo, FormVariableDto.class);
//                result.setResult(formVariableDto);
//                result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
//                result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
//            } else {
//                result.setSuccess(MessageInfo.DELETEERROR.isResult());
//                result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
//            }
//        } catch (Exception e) {
//            ////e.printStackTrace();
//            log.error("调用delete方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
//            result.setSuccess(MessageInfo.DELETEERROR.isResult());
//            result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
//        }
//
//        return result;
    }

    /**
     * 修改修改实体对象
     *
     * @param map
     * @param id
     * @return
     */
    @ApiOperation(value = "修改修改实体对象", notes = "修改修改实体对象")
    @ApiImplicitParams({@ApiImplicitParam(name = "id", value = "id", required = true, dataType = "Integer", paramType = "path"), @ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
    public @ResponseBody
    MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
        try {
            FormVariable data = formVariableService.getObjectById(id);
            String json = JacksonUtils.toJson(data);
            Map<String, Object> oldMap = JacksonUtils.fromJson(json, HashMap.class);
            oldMap.putAll(map);
            String updateJson = JacksonUtils.toJson(oldMap);
            FormVariable fromJson = JacksonUtils.fromJson(updateJson, FormVariable.class);
            int updateCount = formVariableService.update(fromJson);
            return ResponseModel.getResult(MessageInfo.UPDATESUCCESS, updateCount);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
//        MessageResult result = new MessageResult();
//        FormVariableDto formVariableDto = null;
//        try {
//            //获取用户对象
//            SecurityUserBeanInfo user = LoginUtils.getSecurityUserBeanInfo();
//            //用户对象转json
//            String userJson = JacksonUtils.toJson(user);
//            String dubboResultInfo = formVariableDtoServiceCustomer.getObjectById(userJson, "{\"id\":\"" + id + "\"}");
//            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//            if (dubboServiceResultInfo.isSucess()) {
//                String resultInfo = dubboServiceResultInfo.getResult();
//                @SuppressWarnings("unchecked")
//                Map<String, Object> oldMap = JacksonUtils.fromJson(resultInfo, HashMap.class);
//                oldMap.putAll(map);
//                String updateJson = JacksonUtils.toJson(oldMap);
//                String updateDubboResultInfo = formVariableDtoServiceCustomer.update(userJson, updateJson);
//                DubboServiceResultInfo updateDubboServiceResultInfo = JacksonUtils.fromJson(updateDubboResultInfo, DubboServiceResultInfo.class);
//                if (updateDubboServiceResultInfo.isSucess()) {
//                    Integer i = JacksonUtils.fromJson(updateDubboServiceResultInfo.getResult(), Integer.class);
//                    result.setResult(i);
//                    result.setSuccess(MessageInfo.UPDATESUCCESS.isResult());
//                    result.setMsg(MessageInfo.UPDATESUCCESS.getMsg());
//                } else {
//                    result.setSuccess(MessageInfo.UPDATEERROR.isResult());
//                    result.setMsg(updateDubboServiceResultInfo.getMsg() + "【" + updateDubboServiceResultInfo.getExceptionMsg() + "】");
//                }
//            } else {
//                result.setSuccess(MessageInfo.UPDATEERROR.isResult());
//                result.setMsg("不存在更新的对象");
//            }
//        } catch (Exception e) {
//            try {
//                ////e.printStackTrace();
//                ObjectMapper mapper = new ObjectMapper();
//                String paramJson = mapper.writeValueAsString(formVariableDto);
//                log.error("调用update方法:  【参数" + id + "," + paramJson + "】======" + "【" + e.getMessage() + "】");
//                result.setSuccess(MessageInfo.UPDATEERROR.isResult());
//                result.setMsg(MessageInfo.UPDATEERROR.getMsg() + "【" + e.getMessage() + "】");
//            } catch (JsonProcessingException e1) {
//                // TODO Auto-generated catch block
//                //e1.printStackTrace();
//            }
//
//        }
//        return result;
    }

    /**
     * 伪删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "伪删除实体对象", notes = "伪删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "id", value = " id", required = true, dataType = "String")})
    @RequestMapping(value = "/deletePseudo/{id}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult deletePseudo(@PathVariable("id") String id) {
        try {
            int save = formVariableService.deletePseudoObjectById(id);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
//        MessageResult result = new MessageResult();
//        try {
//            //获取用户对象
//            SecurityUserBeanInfo user = LoginUtils.getSecurityUserBeanInfo();
//            //用户对象转json
//            String userJson = JacksonUtils.toJson(user);
//            String dubboResultInfo = formVariableDtoServiceCustomer.deletePseudoObjectById(userJson, "{\"id\":\"" + id + "\"}");
//            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//            if (dubboServiceResultInfo.isSucess()) {
//                String resultInfo = dubboServiceResultInfo.getResult();
//                FormVariableDto formVariableDto = JacksonUtils.fromJson(resultInfo, FormVariableDto.class);
//                result.setResult(formVariableDto);
//                result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
//                result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
//            } else {
//                result.setSuccess(MessageInfo.DELETEERROR.isResult());
//                result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
//            }
//        } catch (Exception e) {
//            ////e.printStackTrace();
//            log.error("调用deletePseudo方法:  【参数" + id + "】======" + "【" + e.getMessage() + "】");
//            result.setSuccess(MessageInfo.DELETEERROR.isResult());
//            result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
//        }
//
//        return result;
    }


    /**
     * 伪删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "ids", value = " ids", required = true, dataType = "String")})
    @RequestMapping(value = "/deletePseudoBatch/{ids}", method = RequestMethod.DELETE)
    public @ResponseBody
    MessageResult deletePseudoBatch(@PathVariable("ids") String ids) {
        try {
            int save = formVariableService.deletePseudoAllObjectByIds(Arrays.asList(ids));
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
//        MessageResult result = new MessageResult();
//        try {
//            //获取用户对象
//            SecurityUserBeanInfo user = LoginUtils.getSecurityUserBeanInfo();
//            //用户对象转json
//            String userJson = JacksonUtils.toJson(user);
//            String dubboResultInfo = formVariableDtoServiceCustomer.deletePseudoAllObjectByIds(userJson, "{\"id\":\"" + ids + "\"}");
//            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//            if (dubboServiceResultInfo.isSucess()) {
//                String resultInfo = dubboServiceResultInfo.getResult();
//                FormVariableDto formVariableDto = JacksonUtils.fromJson(resultInfo, FormVariableDto.class);
//                result.setResult(formVariableDto);
//                result.setSuccess(MessageInfo.DELETESUCCESS.isResult());
//                result.setMsg(MessageInfo.DELETESUCCESS.getMsg());
//            } else {
//                result.setSuccess(MessageInfo.DELETEERROR.isResult());
//                result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
//            }
//        } catch (Exception e) {
//            ////e.printStackTrace();
//            log.error("调用deletePseudoBatch方法:  【参数" + ids + "】======" + "【" + e.getMessage() + "】");
//            result.setSuccess(MessageInfo.DELETEERROR.isResult());
//            result.setMsg(MessageInfo.DELETEERROR.getMsg() + "【" + e.getMessage() + "】");
//        }
//
//        return result;
    }

    /**
     * 保存所有对象
     *
     * @param t
     * @return
     */
    @ApiOperation(value = "保存实体对象", notes = "保存实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "List<Map>")})
    @RequestMapping(value = "/saveAllFormVariable", method = RequestMethod.POST, consumes = "application/json")
    public @ResponseBody
    MessageResult saveAllFormVariable(@RequestBody List<Map<String, Object>> t) {
        try {
            int save = formVariableService.saveAllFormVariable(t);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
//        MessageResult result = new MessageResult();
//        try {
//            //获取用户对象
//            SecurityUserBeanInfo user = LoginUtils.getSecurityUserBeanInfo();
//            //用户对象转json
//            String userJson = JacksonUtils.toJson(user);
//            String saveJson = JacksonUtils.toJson(t);
//            String dubboResultInfo = formVariableDtoServiceCustomer.saveAllFormVariable(userJson, saveJson);
//            DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
//            if (dubboServiceResultInfo.isSucess()) {
//                String resultInfo = dubboServiceResultInfo.getResult();
//                FormVariableDto formVariableDto = JacksonUtils.fromJson(resultInfo, FormVariableDto.class);
//                result.setResult(formVariableDto);
//                result.setSuccess(MessageInfo.SAVESUCCESS.isResult());
//                result.setMsg(MessageInfo.SAVESUCCESS.getMsg());
//            } else {
//                result.setSuccess(MessageInfo.SAVEERROR.isResult());
//                result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + dubboServiceResultInfo.getExceptionMsg() + "】");
//            }
//        } catch (Exception e) {
//            try {
//                ////e.printStackTrace();
//                ObjectMapper mapper = new ObjectMapper();
//                String paramJson = mapper.writeValueAsString(t);
//                log.error("调用save方法:  【参数" + paramJson + "】======" + "【" + e.getMessage() + "】");
//                result.setSuccess(MessageInfo.SAVEERROR.isResult());
//                result.setMsg(MessageInfo.SAVEERROR.getMsg() + "【" + e.getMessage() + "】");
//            } catch (JsonProcessingException e1) {
//                // TODO Auto-generated catch block
//                //e1.printStackTrace();
//            }
//
//        }
//        return result;
    }
}
