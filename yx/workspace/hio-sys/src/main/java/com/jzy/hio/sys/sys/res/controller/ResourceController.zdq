package com.jzy.hio.sys.sys.res.controller;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.jzy.hio.base.utils.MessageInfo;
import com.jzy.hio.base.utils.MessageResult;
import com.jzy.hio.base.utils.OpeLogInfo;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.base.utils.ResponseModel;
import com.jzy.hio.base.utils.SecurityResourceDto;
import com.jzy.hio.base.utils.SecurityUserBeanRelationInfo;
import com.jzy.hio.sys.sys.res.dto.DataNodeDto;
import com.jzy.hio.sys.sys.res.dto.ResourceDto;
import com.jzy.hio.sys.sys.res.entity.Resource;
import com.jzy.hio.sys.sys.res.service.ResourceService;
import com.jzy.tools.data.JacksonUtils;
import com.jzy.tools.login.LoginUtils;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;


/**
 * 资源控制层
 *
 * @author admin
 */
@Controller
@RequestMapping("/sys/res/resource")
@Api(tags = "资源控制层", description = "")
public class ResourceController {

    private static Logger log = LoggerFactory.getLogger(ResourceController.class);

    @Autowired
    private ResourceService resourceService;

    /**
     * 根据Id获取业务对象
     *
     * @param id 业务对象主键
     * @return 业务对象
     */
    @ApiOperation(value = "根据Id获取业务对象", notes = "根据Id获取业务对象")
    @ApiImplicitParams(@ApiImplicitParam(name = "id", value = "业务对象主键", required = true, dataType = "String", paramType = "path"))
    @RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
    public @ResponseBody
    MessageResult get(@PathVariable("id") String id) {
        try {
            Resource resource = resourceService.getObjectById(id);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, resource);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 返回分页对象
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "返回分页对象", notes = "返回分页对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "limit query", required = true, dataType = "Map")})
    @RequestMapping(value = "/page", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult page(@RequestBody Map<String, Object> map) {
        try {
            Page servicePage = resourceService.getPage(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, servicePage);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 返回符合条件的列表
     *
     * @param parm
     * @return
     */
    @ApiOperation(value = "返回符合条件的列表", notes = "返回符合条件的列表")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "resource", dataType = "String", value = "condition query", required = true)})
    @RequestMapping(value = "/queryList", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult queryList(@RequestBody Map<String, Object> parm) {
        try {
            List<ResourceDto> list = resourceService.queryList(parm);
            List<String> pIds = resourceService.selectAllParentId(parm);
            if (list != null && list.size() > 0) {
                for (ResourceDto res : list) {
                    String prefixSort = res.getPrefixSort();
                    res.setMenuIcon(res.getIcon());
                    /*	res.setIcon("");*/
                    if (prefixSort != null) {
                        String[] split = prefixSort.split("-");
                        Long i = (long) split.length - 1;
                        res.setLevel(i);
                        res.setExpanded(true);
                        res.setLoaded(true);
                        if (pIds.contains(res.getId())) {
                            res.setIsLeaf(false);
                        } else {
                            res.setIsLeaf(true);
                        }
                        ;
                    }
                }
            }
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, list);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 保存实体对象
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "保存实体对象", notes = "保存实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "body", name = "map", value = "save", required = true, dataType = "Map")})
    @RequestMapping(value = "/save", method = RequestMethod.POST, consumes = "application/json")
    @OpeLogInfo(node = "新增菜单")
    public @ResponseBody
    MessageResult save(@RequestBody Map<String,Object> map) {
        try {
            int result = resourceService.saveResource(map);
            return ResponseModel.getResult(MessageInfo.SAVESUCCESS, result);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "id", value = " id", required = true, dataType = "String")})
    @RequestMapping(value = "/delete/{id}", method = RequestMethod.DELETE)
    @OpeLogInfo(node = "根据id删除菜单")
    public @ResponseBody
    MessageResult delete(@PathVariable("id") String id) {
        try {
            int save = resourceService.deleteObjectById(id);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "删除实体对象", notes = "删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", name = "ids", value = "ids", required = true, dataType = "String")})
    @RequestMapping(value = "/deleteBatch/{ids}", method = RequestMethod.DELETE)
    @OpeLogInfo(node = "根据ids批量删除菜单")
    public @ResponseBody
    MessageResult deleteBatch(@PathVariable("ids") String ids) {
        try {
            int save = resourceService.deleteAllObjectByIds(Arrays.asList(ids));
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 修改修改实体对象
     *
     * @param id
     * @param map
     * @return
     */
    @ApiOperation(value = "修改修改实体对象", notes = "修改修改实体对象")
    @ApiImplicitParams({@ApiImplicitParam(name = "id", value = "id", required = true, dataType = "Integer", paramType = "path"), @ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/update/{id}", method = RequestMethod.PUT, consumes = "application/json")
    @OpeLogInfo(node = "根据id修改菜单")
    public @ResponseBody
    MessageResult update(@PathVariable("id") String id, @RequestBody Map<String, Object> map) {
        try {
            Resource resource = resourceService.getObjectById(id);
            String json = JacksonUtils.toJson(resource);
            Map<String, Object> oldMap = JacksonUtils.fromJson(json, HashMap.class);
            oldMap.putAll(map);
            String updateJson = JacksonUtils.toJson(oldMap);
            Resource fromJson = JacksonUtils.fromJson(updateJson, Resource.class);
            int updateCount = resourceService.update(fromJson);
            return ResponseModel.getResult(MessageInfo.UPDATESUCCESS, updateCount);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 伪删除实体对象
     *
     * @param id
     * @return
     */
    @ApiOperation(value = "伪删除实体对象", notes = "伪删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", dataType = "String", name = "id", value = "id", required = true)})
    @RequestMapping(value = "/deletePseudo/{id}", method = RequestMethod.DELETE)
    @OpeLogInfo(node = "根据id伪删除菜单")
    public @ResponseBody
    MessageResult deletePseudo(@PathVariable("id") String id) {
        try {
            int save = resourceService.deletePseudoObjectById(id);
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }


    /**
     * 伪删除实体对象
     *
     * @param ids
     * @return
     */
    @ApiOperation(value = "伪删除实体对象", notes = "伪删除实体对象")
    @ApiImplicitParams({@ApiImplicitParam(paramType = "path", dataType = "String", name = "ids", value = "ids", required = true)})
    @RequestMapping(value = "/deletePseudoBatch/{ids}", method = RequestMethod.DELETE)
    @OpeLogInfo(node = "根据ids批量伪删除菜单")
    public @ResponseBody
    MessageResult deletePseudoBatch(@PathVariable("ids") String ids) {
        try {
            int save = resourceService.deletePseudoAllObjectByIds(Arrays.asList(ids));
            return ResponseModel.getResult(MessageInfo.DELETESUCCESS, save);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 获取符合条件的根目录下树列表
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "获取符合条件的根目录下树列表", notes = "获取符合条件的根目录下树列表")
    @ApiImplicitParams({@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/getResourceTree", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult getResourceTree(@RequestBody Map<String, Object> map) {
        try {
            List<DataNodeDto> results = resourceService.getResourceTree(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, results);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 查询树（根据业务系统包括一个业务系统下的所有菜单和按钮）
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "查询树（根据业务系统包括一个业务系统下的所有菜单和按钮）", notes = "查询树（根据业务系统包括一个业务系统下的所有菜单和按钮）")
    @ApiImplicitParams({@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/getOperationTreeByAppId", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult getOperationTreeByAppId(@RequestBody Map<String, Object> map) {
        try {
            List<DataNodeDto> datas = resourceService.getOperationTreeByAppId(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, datas);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 查询树（根据业务系统包括一个业务系统下的所有菜单和按钮--jqgrid树形表格用的数据）
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "查询树（根据业务系统包括一个业务系统下的所有菜单和按钮--jqgrid树形表格用的数据）", notes = "查询树（根据业务系统包括一个业务系统下的所有菜单和按钮--jqgrid树形表格用的数据）")
    @ApiImplicitParams({@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/getfuncPermissionButtonJqgridTreeByAppid", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult getfuncPermissionButtonJqgridTreeByAppid(@RequestBody Map<String, Object> map) {
        try {
            List<DataNodeDto> datas = resourceService.getfuncPermissionButtonJqgridTreeByAppid(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, datas);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 获取菜单树列表（包含业务系统）
     *
     * @param map
     * @return
     */
    @ApiOperation(value = " 获取菜单树列表（包含业务系统）", notes = " 获取菜单树列表（包含业务系统）")
    @ApiImplicitParams({@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/getResourceTreeAll", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult getResourceTreeAll(@RequestBody Map<String, Object> map) {
        try {
            List<DataNodeDto> datas = resourceService.getResourceTreeAll(map);
            return ResponseModel.getResult(MessageInfo.GETSUCCESS, datas);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }

    /**
     * 根据当前用户获取菜单树列表（包含业务系统）
     *
     * @param map
     * @return
     */
    // TODO
    @ApiOperation(value = "根据当前用户获取菜单树列表（包含业务系统）", notes = "根据当前用户获取菜单树列表（包含业务系统）")
    @ApiImplicitParams({@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/getResourceTreeAllByUser", method = {RequestMethod.POST}, consumes = "application/json")
    public @ResponseBody
    MessageResult getResourceTreeAllByUser(@RequestBody Map<String, Object> map) {
        MessageResult result = new MessageResult();
        //当前登录的所有信息
        // TODO
        SecurityUserBeanRelationInfo beanInfo = LoginUtils.getSecurityUserBeanRelationInfo();
        List<SecurityResourceDto> list = beanInfo.getResourceDtoList();
        List<DataNodeDto> listAppMenu = new ArrayList<DataNodeDto>();
        for (SecurityResourceDto srDto : list) {
            DataNodeDto dataNodeDto = new DataNodeDto();
            if (srDto.getIsAuth().equals("1")) {
                dataNodeDto.setId(srDto.getId());
                dataNodeDto.setParentId(srDto.getParentId());
                dataNodeDto.setCode(srDto.getCode());
                dataNodeDto.setName(srDto.getName());
                dataNodeDto.setResourceurl(srDto.getResourceUrl());
                dataNodeDto.setOpenmode(srDto.getOpenmode());
                dataNodeDto.setType(srDto.getType());
                listAppMenu.add(dataNodeDto);
            }
        }
        result.setResult(listAppMenu);
        result.setSuccess(true);
        result.setMsg("获取成功");

        return result;
    }

    /**
     * 上移或下移
     *
     * @param map
     * @return
     */
    @ApiOperation(value = "上移或下移", notes = "上移或下移")
    @ApiImplicitParams({@ApiImplicitParam(name = "map", value = "thi is map", dataType = "JSON")})
    @RequestMapping(value = "/upOrDown", method = RequestMethod.PUT, consumes = "application/json")
    @OpeLogInfo(node = "上移或下移菜单")
    public @ResponseBody
    MessageResult upOrDown(@RequestBody Map<String, Object> map) {
        try {
            Integer datas = resourceService.upOrDown(map);
            return ResponseModel.getResult(MessageInfo.UPDATESORTSUCCESS, datas);
        } catch (Exception e) {
            return ResponseModel.getErrorResult();
        }
    }
}
