package com.jzy.hio.sys.sys.base.dto.service.impl;

import com.jzy.hio.base.utils.DubboServiceResultInfo;
import com.jzy.hio.base.utils.Page;
import com.jzy.hio.sys.sys.base.dto.BaseDataDictionaryDto;
import com.jzy.hio.sys.sys.base.dto.service.BaseDataDictionaryDtoServiceCustomer;
import com.jzy.hio.sys.sys.base.entity.BaseDataDictionary;
import com.jzy.hio.sys.sys.base.service.BaseDataDictionaryService;
import com.jzy.tools.data.JacksonUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author admin
 * 
 *
 */
@Service
public class BaseDataDictionaryDtoServiceProducer implements BaseDataDictionaryDtoServiceCustomer {
	private static Logger log = LoggerFactory.getLogger(BaseDataDictionaryDtoServiceProducer.class);
	@Autowired
	private BaseDataDictionaryService baseDataDictionaryService;

	public String save(String userInfo, String saveJson){
		// TODO Auto-generated method stub
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   BaseDataDictionary baseDataDictionary= JacksonUtils.fromJson(saveJson, BaseDataDictionary.class);
		   baseDataDictionaryService.save(baseDataDictionary);
		   info.setResult(JacksonUtils.toJson(baseDataDictionary));
		   info.setSucess(true);
		   info.setMsg("保存对象成功!");
		} catch (Exception e) {
		 log.error("保存对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("保存对象失败!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   BaseDataDictionary baseDataDictionary=JacksonUtils.fromJson(updateJson, BaseDataDictionary.class);
			   int result=   baseDataDictionaryService.update(baseDataDictionary);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   BaseDataDictionary baseDataDictionary=JacksonUtils.fromJson(deleteJson, BaseDataDictionary.class);
			   int result= baseDataDictionaryService.deleteObjectById(baseDataDictionary.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= baseDataDictionaryService.deleteAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	 {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			BaseDataDictionary baseDataDictionary=JacksonUtils.fromJson(getJson, BaseDataDictionary.class);
			BaseDataDictionary	result = baseDataDictionaryService.getObjectById(baseDataDictionary.getId());
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				Page page=baseDataDictionaryService.getPage(map, (Integer)map.get("start"),  (Integer)map.get("limit"));
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=baseDataDictionaryService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				List list=baseDataDictionaryService.queryListByExample(map);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=baseDataDictionaryService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson) {
		  DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   BaseDataDictionaryDto baseDataDictionaryDto=JacksonUtils.fromJson(deleteJson, BaseDataDictionaryDto.class);
			   int result= baseDataDictionaryService.deleteBaseDataDictionaryAndItem(baseDataDictionaryDto.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo,
			String deleteJsonList) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getBaseDataDictionaryAndItem(String userinfo, String getJson) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			BaseDataDictionaryDto baseDataDictionaryDto=JacksonUtils.fromJson(getJson, BaseDataDictionaryDto.class);
			BaseDataDictionaryDto result = baseDataDictionaryService.getBaseDataDictionaryAndItem(baseDataDictionaryDto.getId());
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBaseDataDictionaryAndItem(String userinfo, String saveJson) {
		  DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   BaseDataDictionaryDto baseDataDictionaryDto=JacksonUtils.fromJson(saveJson, BaseDataDictionaryDto.class);
			   baseDataDictionaryService.saveBaseDataDictionaryAndItem(baseDataDictionaryDto);
			   info.setResult(JacksonUtils.toJson(baseDataDictionaryDto));
			   info.setSucess(true);
			   info.setMsg("保存对象成功!");
			} catch (Exception e) {
			 log.error("保存对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("保存对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String updateBaseDataDictionaryAndItem(String userinfo,
			String updateJson) {
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   BaseDataDictionaryDto baseDataDictionaryDto=JacksonUtils.fromJson(updateJson, BaseDataDictionaryDto.class);
			   int result=   baseDataDictionaryService.updateBaseDataDictionaryAndItem(baseDataDictionaryDto);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

}
