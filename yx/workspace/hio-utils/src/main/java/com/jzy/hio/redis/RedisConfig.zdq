package com.jzy.hio.redis;

import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.jzy.hio.base.utils.ConfigurationUtil;
import com.jzy.hio.base.utils.YmlUtil;

import redis.clients.jedis.JedisPoolConfig;

@Configuration  
@EnableAutoConfiguration  
public class RedisConfig {

	private static Logger logger = Logger.getLogger(RedisConfig.class);  

	//获取springboot配置文件的值 (get的时候获取)  
	/*@Value("${spring.redis.hostName}")  
	private String host;  

	@Value("${spring.redis.password}")  
	private String password;  
	 */

	@Autowired
	private YmlUtil prop;

	private boolean isDefault = false;
	@Bean  
	@ConfigurationProperties(prefix = "spring.redis.pool")  
	public JedisPoolConfig getRedisConfig() {  
		JedisPoolConfig config = new JedisPoolConfig();  
		Map<String, String> redis = prop.getRedis();
		if(redis.isEmpty()) {
			isDefault = true;
			return  getDefaultConfiguration();
		}
		return config;  
	}  

	@Bean  
	@ConfigurationProperties(prefix = "spring.redis")  
	public JedisConnectionFactory getConnectionFactory() {  
		JedisConnectionFactory factory = new JedisConnectionFactory();  
		factory.setUsePool(true);  
		JedisPoolConfig config = getRedisConfig();  
		factory.setPoolConfig(config);  
		if(isDefault) {
			factory = getFactory(factory);
		}
		logger.info("JedisConnectionFactory bean init success.");  
		return factory;  
	}  

	/**
	 * SpringBoot提供了对Redis的自动配置功能，在RedisAutoConfiguration中默认为我们配置了
	 * JedisConnectionFactory（客户端连接）、RedisTemplate以及StringRedisTemplate（数据操作模板），
	 * 其中StringRedisTemplate模板只针对键值对都是字符型的数据进行操作，本示例采用RedisTemplate作为数据操作模板，
	 * 该模板默认采用JdkSerializationRedisSerializer的二进制数据序列化方式，
	 * 使用JdkSerializationRedisSerializer序列化和反序列化redis的value值，
	 * 使用StringRedisSerializer来序列化和反序列化redis的key值。
	 * @param factory
	 * @return
	 */
	@Bean
	public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory factory) {
		StringRedisTemplate template = new StringRedisTemplate(factory);
		Jackson2JsonRedisSerializer<Object> jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<Object>(Object.class);
		ObjectMapper om = new ObjectMapper();
		om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
		om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);
		jackson2JsonRedisSerializer.setObjectMapper(om);
		template.setValueSerializer(jackson2JsonRedisSerializer);
		template.afterPropertiesSet();
		return template;
	} 

	private JedisPoolConfig  getDefaultConfiguration() {
		JedisPoolConfig config = new JedisPoolConfig();
		config.setMaxTotal(Integer.parseInt(ConfigurationUtil.getValue(ConfigurationUtil.DEFAULT_REDIS_POOL_MAX_TOTAL)));
		config.setMaxIdle(Integer.parseInt(ConfigurationUtil.getValue(ConfigurationUtil.DEFAULT_REDIS_POOL_MAX_IDLE)));
		config.setMaxWaitMillis(Integer.parseInt(ConfigurationUtil.getValue(ConfigurationUtil.DEFAULT_REDIS_POOL_MAXWAITMILLIS)));
		config.setMinIdle(Integer.parseInt(ConfigurationUtil.getValue(ConfigurationUtil.DEFAULT_REDIS_POOL_MIN_IDLE)));
		return config;
	}
	private JedisConnectionFactory	getFactory(JedisConnectionFactory factory){
		factory.setHostName(ConfigurationUtil.getValue(ConfigurationUtil.DEFAULT_REDIS_HOSTNAME));
		factory.setPassword(ConfigurationUtil.getValue(ConfigurationUtil.DEFAULT_REDIS_PASSWORD));
		factory.setDatabase(Integer.parseInt(ConfigurationUtil.getValue(ConfigurationUtil.DEFAULT_REDIS_DATABASE)));
		factory.setPort(Integer.parseInt(ConfigurationUtil.getValue(ConfigurationUtil.DEFAULT_REDIS_PORT)));
		factory.setTimeout(Integer.parseInt(ConfigurationUtil.getValue(ConfigurationUtil.DEFAULT_REDIS_TOMEOUT)));
		return factory;
	}

}
