package com.jzy.hio.redis;

import java.util.List;
import java.util.concurrent.TimeUnit;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.stereotype.Service;

import com.jzy.tools.data.JacksonUtils;
@Service
public class RedisClient {

	@Autowired
	private RedisTemplate<String, String> redisTemplate;  

	/**
	 * 取值
	 * @param key
	 * @return
	 */
	public String get(String key) {
		ValueOperations<String,String> opsForValue = redisTemplate.opsForValue();
		String val = opsForValue.get(key);

		if(StringUtils.isNotEmpty(val)) {

			return val;
		}
		return  null;
	}

	/**
	 * 存值
	 * @param key
	 * @param value
	 * @return
	 */
	public void set(String key, String value) {

		ValueOperations<String,String> opsForValue = redisTemplate.opsForValue();
		opsForValue.set(key, value);

	}

	public String getAndSet(String key,String value) {
		ValueOperations<String,String> opsForValue = redisTemplate.opsForValue();
		String andSet = opsForValue.getAndSet(key, value);

		return andSet;
	}
	/**
	 * 查询key是否存在如果存在则 返回false  不存在 添加     成功 返回 true
	 * @param key
	 * @param value
	 * @return
	 */
	public boolean setIfAbsent(String key,String value) {
		ValueOperations<String,String> opsForValue = redisTemplate.opsForValue();
		Boolean setIfAbsent = opsForValue.setIfAbsent(key, value);

		return setIfAbsent;
	}
	
	/*public boolean setBit(String key,String value) {
		ValueOperations<String,String> opsForValue = redisTemplate.opsForValue();
		Boolean setIfAbsent = opsForValue.setBit(key, offset, value);

		return setIfAbsent;
	}*/

	/**
	 * 存入list集合
	 * @param key
	 * @param list
	 * @return
	 */
	public <T>  void   setList(String key, List<T> list) {
		String value = JacksonUtils.toJson(list);
		set(key,value);  
	}

	/**
	 * 获取list
	 * @param key
	 * @param clz
	 * @return
	 */
	public <T> List<T> getList(String key, Class<T> clz) {
		String object =   (String) get(key);
		List<T> fromJson = JacksonUtils.fromJson(object,List.class,clz);
		return fromJson;
	}

	/**
	 * 设置Key的时效
	 * @param key
	 * @param value
	 * @param timeout
	 * @param unit
	 */
	public void set(String key, String value, long timeout, TimeUnit unit) {
		ValueOperations<String, String> opsForValue = redisTemplate.opsForValue();
		opsForValue.set(key, value, timeout, unit);
	}

}
