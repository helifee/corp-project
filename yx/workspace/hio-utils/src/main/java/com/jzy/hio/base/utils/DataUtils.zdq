package com.jzy.hio.base.utils;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;



/**
 * <B>概要说明：</B>数据对象copy工具<BR>
 * @author 尚斌
 * @date 2016年12月2日 下午4:21:35
 */
public class DataUtils {
	private static Logger logger = LoggerFactory.getLogger(DataUtils.class);
	private static Map<Class, String> supportTypeMap = new HashMap();

	/**
	 * <B>方法名称：</B> copySimpleObject<BR>
	 * <B>概要说明：</B> 把一个对象的数据复制到另一个对象中<BR>
	 * 						|_默认空字段也替换<BR>
	 * 
	 * @param source
	 *            源数据对象
	 * @param target
	 *            目标数据对象
	 * @author 尚斌
	 * @create 2016年12月2日 下午4:21:35
	 */
	public static void copySimpleObject(Object source, Object target) {
		copySimpleObject(source, target, true);
	}
	
	/**
	 * <B>方法名称：</B> copySimpleObject<BR>
	 * <B>概要说明：</B> 把一个对象的数据复制到另一个对象中<BR>
	 * 					   |_手动指定空字段需不需要替换<BR>
	 * 
	 * @param source
	 *            源数据对象
	 * @param target
	 *            目标数据对象
	 * @param isCopyNull
	 *            功能开关 <BR>
	 *            true：空字段也需要替换 <BR>
	 *            false:空字段不进行替换<BR>
	 * @author 尚斌
	 * @create 2016年12月2日 下午4:21:35
	 */
	public static void copySimpleObject(Object source, Object target,boolean isCopyNull) {
		if ((target == null) || (source == null)) {
			return;
		}
		List targetMethodList = getSetter(target.getClass());
		List sourceMethodList = getGetter(source.getClass());
		Map map = new HashMap();
		for (Iterator iter = sourceMethodList.iterator(); iter.hasNext();) {
			Method method = (Method) iter.next();
			map.put(method.getName(), method);
		}
		for (Iterator iter = targetMethodList.iterator(); iter.hasNext();) {
			Method method = (Method) iter.next();
			String fieldName = method.getName().substring(3);
			try {
				Method sourceMethod = (Method) map.get("get" + fieldName);
				if (sourceMethod == null) {
					sourceMethod = (Method) map.get("is" + fieldName);
				}
				if ((sourceMethod != null) && (supportTypeMap.containsKey(sourceMethod.getReturnType()))) {
					Object value = sourceMethod.invoke(source, new Object[0]);
					if (isCopyNull) {
						method.invoke(target, new Object[] { value });
					} else if (value != null)
						method.invoke(target, new Object[] { value });
				}
			} catch (Exception e) {
				if (logger.isDebugEnabled())
					logger.debug(e.toString());
			}
		}
	}

	
	/**
	  * <B>方法名称：</B> copySimpleObjectByMap<BR>
	  * <B>概要说明：</B> 把一个对象的数据复制到另一个对象中,可以自定义对应属性值<BR>
	  * 
	  * @param source
	  *            源数据对象
	  * @param target
	  *            目标数据对象
	  * @param mapProperty
	  * 		         指定对应属性值Map,首字母大写<BR>
	  * 		   key：目标属性，value：源数据属性
	  * @author 尚斌
	  * @create 2016年12月2日 下午4:21:35
	  */
	public static void copySimpleObjectByMap(Object source, Object target,Map<String,String> mapProperty) {
		if ((target == null) || (source == null)) {
			return;
		}
		List targetMethodList = getSetter(target.getClass());//查询出类的所有set方法
		List sourceMethodList = getGetter(source.getClass());//查询出类的所有get方法
		Map map = new HashMap();
		for (Iterator iter = sourceMethodList.iterator(); iter.hasNext();) {
			Method method = (Method) iter.next();
			map.put(method.getName(), method);
		}
		for (Iterator iter = targetMethodList.iterator(); iter.hasNext();) {
			Method method = (Method) iter.next();
			String fieldName = method.getName().substring(3);
			System.out.println(fieldName);
			try {
				String mapName = mapProperty.get(fieldName);//取出目标属性对应的源属性值
				if(StringUtils.isNotBlank(mapName)){//如果指定了源属性用指定的，否则用相同属性值
					fieldName = mapName;
				}
				Method sourceMethod = (Method) map.get("get" + fieldName);
				if (sourceMethod == null) {
					sourceMethod = (Method) map.get("is" + fieldName);
				}
				if ((sourceMethod != null) && (supportTypeMap.containsKey(sourceMethod.getReturnType()))) {
					Object value = sourceMethod.invoke(source, new Object[0]);
						method.invoke(target, new Object[] { value });
				}
			} catch (Exception e) {
				if (logger.isDebugEnabled())
					logger.debug(e.toString());
			}
		}
	}
	
	/**
	  * <B>方法名称：</B> getSetter<BR>
	  * <B>概要说明：</B> 查询出类的所有set方法<BR>
	  * @param cl 要查询的类
	  * @return List<Method> set方法集合
	  * @author 尚斌
	  * @create 2016年12月2日 下午4:21:35
	  */
	public static List<Method> getSetter(Class cl) {
		List list = new ArrayList();
		Method[] methods = cl.getDeclaredMethods();//取出类的所有方法
		for (int i = 0; i < methods.length; i++) {
			Method method = methods[i];
			String methodName = method.getName();
			if (methodName.startsWith("set")) {//取出set开头的方法，startsWith:判断字符串methodName 是不是以字符串set开头.
				list.add(method);
			}
		}
		while (true) {
			cl = cl.getSuperclass();//取出类的超类（父类）
			if (cl == Object.class) {
				break;
			}
			list.addAll(getSetter(cl));
		}
		return list;
	}

	/**
	  * <B>方法名称：</B> getGetter<BR>
	  * <B>概要说明：</B> 查询出类的所有get方法<BR>
	  * @param cl 要查询的类
	  * @return List<Method> get方法集合
	  * @author 尚斌
	  * @create 2016年12月2日 下午4:21:35
	  */
	public static List<Method> getGetter(Class cl) {
		List list = new ArrayList();
		Method[] methods = cl.getDeclaredMethods();//获取类的所有方法
		for (int i = 0; i < methods.length; i++) {
			Method method = methods[i];
			String methodName = method.getName();
			if ((methodName.startsWith("get")) || (methodName.startsWith("is"))) {//取出以get开头的方法
				list.add(method);
			}
		}
		while (true) {
			cl = cl.getSuperclass();//查询出类的超类
			if (cl == Object.class) {
				break;
			}
			list.addAll(getGetter(cl));
		}
		return list;
	}

	/**
	 * 支持copy的属性类型
	 */
	static {
		supportTypeMap.put(Integer.class, "");
		supportTypeMap.put(Long.class, "");
		supportTypeMap.put(Double.class, "");
		supportTypeMap.put(BigDecimal.class, "");
		supportTypeMap.put(String.class, "");
		supportTypeMap.put(Date.class, "");
		supportTypeMap.put(Boolean.class, "");
		supportTypeMap.put(Byte.class, "");
	}
	
	
	/**
	  * <B>方法名称：</B> isObjEmpty<BR>
	  * <B>概要说明：</B> 判断对象里所有属性是否全部为null<BR>
	  * 				    如果每一个属性都为null的话，返回true，反之false
	  * @param obj 要判断对象
	  * @return 结果true：表示每一个属性都是空的，false：表示有属性不为空
	  * @throws IllegalArgumentException
	  * @throws IllegalAccessException
	  * @author 尚斌
	  * @create 2016年12月2日 下午4:21:35
	  */
	public static boolean isObjEmpty(Object obj) throws IllegalArgumentException, IllegalAccessException{
		int i = 0;
		for (Field f : obj.getClass().getDeclaredFields()) {
			f.setAccessible(true);
			 if (f.get(obj) != null) { //判断字段是否为空，并且对象属性中的基本都会转为对象类型来判断
				 i++;
			 }
		}
		return i != 0 ? false : true;
	}


}
