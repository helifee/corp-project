package com.jzy.hio.feign;

import com.jzy.hio.ApiFeignResponse;
import com.jzy.hio.sys.organization.dto.FlowPositionDto;
import com.jzy.hio.sys.user.dto.HRUserCheckImportDto;
import com.jzy.hio.sys.user.dto.UserPositionDeleteDto;
import com.jzy.hio.sys.user.param.UserPositionParam;
import org.springframework.cloud.netflix.feign.FeignClient;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;

/**
 * 职务相关
 *
 * @author kimchou
 * @data 2018/4/24 下午4:03
 */
@FeignClient(name = "v2r1-sys-service/sys")
public interface SysUserPositionFeignService {
    /**
     * 保存职务【hr】
     *
     * @param apiParam
     * @return
     */
    @RequestMapping(value = "user/position/save", method = RequestMethod.POST)
    ApiFeignResponse<Boolean> saveUserPosition(@RequestBody UserPositionParam apiParam);

    /**
     * 删除职务【hr】
     *
     * @param positionId
     * @return
     */
    @RequestMapping(value = "user/position/delete", method = RequestMethod.POST)
    ApiFeignResponse<Boolean> deleteUserPosition(@RequestParam("positionId") String positionId);

    /**
     * 批量删除职务【hr】
     *
     * @param positionIds
     * @return
     */
    @RequestMapping(value = "user/position/delete/batch", method = RequestMethod.POST)
    ApiFeignResponse<List<UserPositionDeleteDto>> deleteUserPositionBatch(@RequestParam("positionIds") List<String> positionIds);

    /**
     * 更新职务【hr】
     *
     * @param apiParam
     * @return
     */
    @RequestMapping(value = "user/position/update", method = RequestMethod.POST)
    ApiFeignResponse<Boolean> updateUserPosition(@RequestBody UserPositionParam apiParam);

    /**
     * 查询用户职务列表【hr】
     *
     * @param userId
     * @return
     */
    @RequestMapping(value = "user/position/list", method = RequestMethod.POST)
    ApiFeignResponse<List<FlowPositionDto>> queryUserPositionListByUserId(@RequestParam("userId") String userId);

    /**
     * 查询职务id详情【hr】
     *
     * @param positionId
     * @return
     */
    @RequestMapping(value = "user/position/detail", method = RequestMethod.POST)
    ApiFeignResponse<FlowPositionDto> queryPositionByPositionId(@RequestParam("positionId") String positionId);

    /**
     * hr人员导入，批量关联职务
     *
     * @param list<UserPositionParam> 根据职务参数中 用户id userId、部门id organizationId 职务名称 postName 批量生成人员与职务（主职）的对应关系
     * @return
     */
    @RequestMapping(value = "user/position/save/savePosition2UserBatch", method = RequestMethod.POST)
    ApiFeignResponse<Integer> savePosition2UserBatch(@RequestBody List<UserPositionParam> list, @RequestParam("tendId") String tendId);

    /**
     * 添加组织机构人员，查询是否有外部联系人，将外部联系人删除,
     *
     * @param mobile
     * @return
     */
    @RequestMapping(value = "user/checkSysExternalContactIsExits", method = RequestMethod.POST)
    ApiFeignResponse<Boolean> checkSysExternalContactIsExits(@RequestParam("mobile") String mobile);
    /**
     * hr人员导入批量
     * 添加组织机构人员，查询是否有外部联系人，将外部联系人删除,
     *
     * @param mobiles
     * @return
     */
    @RequestMapping(value = "user/checkSysExternalContactIsExitsBatch", method = RequestMethod.POST)
    ApiFeignResponse<List<HRUserCheckImportDto>> checkSysExternalContactIsExitsBatch(@RequestBody List<String> mobiles);

    /**
     * 校验当前职务是否有岗位存在
     * @param currentPositionId  当前正在编辑的职务ID
     * @param organizationId    需要关联的部门ID
     * @param userId            当前用户的ID
     * @return
     */
    @RequestMapping(value = "user/isHaveSamePosition", method = RequestMethod.POST)
    ApiFeignResponse<Boolean> isHaveSamePosition(@RequestParam("currentPositionId") String currentPositionId,@RequestParam("organizationId") String organizationId,@RequestParam("userId") String userId);
}
