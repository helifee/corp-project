package com.jzy.hio.platform.message;



 import com.jzy.hio.platform.message.param.*;
 import org.springframework.cloud.netflix.feign.FeignClient;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import com.jzy.hio.ApiFeignResponse;

@FeignClient(name = "v2r1-platform-service/",fallback = MessageFeignServiceFallback.class)
public interface MessageFeignService {

    /**
     * 发送消息，支持群发和单发
     * @param imNoticeMsgSendParam
     * @return
     */
    @RequestMapping(value = "/message/sendMessageSingle", method = RequestMethod.POST, consumes = "application/json")
    ApiFeignResponse sendMessageSingle(@RequestBody ImNoticeMsgsParam imNoticeMsgSendParam);

     /**
      * 发送消息，支持群发和单发
      * @param imNoticeMsgSendParam
      * @return
      */
     @RequestMapping(value = "/message/send", method = RequestMethod.POST, consumes = "application/json")
     ApiFeignResponse sendMessage(@RequestBody ImNoticeMsgSendParam imNoticeMsgSendParam);

    /**
     * 根据Id获取消息对象
     * @param id
     * @return
     */
    @RequestMapping(value = "/message/{id}", method = RequestMethod.GET, consumes = "application/json")
     ApiFeignResponse getImNoticeMsgById(@PathVariable("id") String id);


    /**
     *对外提供待办通知查看列表和消息提醒查看列表接口
     * @param imNoticeMsgParam
     * @return
     */
    @RequestMapping(value = "/message", method = RequestMethod.POST, consumes = "application/json")
    ApiFeignResponse messages(@RequestBody  ImNoticeMsgSearchParam imNoticeMsgParam);


    /**
     *修改消息的状态
     * @return
     */
    @RequestMapping(value = "/message/update", method = RequestMethod.POST, consumes = "application/json")
    ApiFeignResponse updateStatusOfNoticeMsg(@RequestBody NoticeMsgUpdateParam noticeMsgUpdateParam);

    /**
     *设置待办消息为打开过状态
     * @param id
     * @return
     */
    @RequestMapping(value = "/setMessageOpened/{id}", method = RequestMethod.GET, consumes = "application/json")
    ApiFeignResponse setMessageOpened(@PathVariable("id") String id);

    /**
     *创建聊天群
     * @param imGroupCreate
     * @return
     */
    @RequestMapping(value = "/group/create", method = RequestMethod.POST, consumes = "application/json")
    ApiFeignResponse groupCreate(ImGroupCreate imGroupCreate);
}
