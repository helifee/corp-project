package com.jzy.hio.feign;

import java.util.List;
import java.util.Map;

import org.springframework.cloud.netflix.feign.FeignClient;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.jzy.hio.ApiFeignResponse;
import com.jzy.hio.sys.organization.dto.GeneralDto;
import com.jzy.hio.sys.role.dto.RoleButtonDto;
import com.jzy.hio.sys.role.dto.RoleDto;
import com.jzy.hio.sys.role.dto.RoleMenuDto;
import com.jzy.hio.sys.role.dto.RoleUserDto;
import com.jzy.hio.sys.role.param.RoleAndUserParam;
import com.jzy.hio.utils.Page;

/**
 * sys角色相关的feign接口
 * 
 * @author wt.coffee
 * @date 2018年4月13日上午10:52:24
 */
@FeignClient(name = "v2r1-sys-service/sys")
public interface SysRoleFeignService {

	/**
	 * hr--查询指定user的权限按钮
	 *
	 * @param tendId
	 * @param userId
	 * @param menuCode
	 *            指定菜单、可选
	 * @return
	 */
	@RequestMapping(value = "roleButton/queryButtonsByMenu", method = RequestMethod.POST)
	public ApiFeignResponse<List<RoleButtonDto>> queryRoleButton(@RequestParam("tendId") String tendId, @RequestParam("userId") String userId,
			@RequestParam("menuCode") String menuCode);

	/**
	 * 查询指定user的权限按钮
	 *
	 * @param tendId
	 * @param userId
	 * @param menuCode
	 *            指定菜单、可选
	 * @return
	 */
	@RequestMapping(value = "menu/queryMenuWithRole", method = RequestMethod.POST)
	public ApiFeignResponse<List<RoleMenuDto>> queryRoleMenu(@RequestParam("tendId") String tendId, @RequestParam("userId") String userId);

	/**
	 * 通过用户id查询角色id列表
	 *
	 * @param tendId
	 * @param userId
	 * @return
	 */
	@RequestMapping(value = "role/queryRolesByUserId", method = RequestMethod.POST)
	ApiFeignResponse<List<String>> queryRolesByUserId(@RequestParam("tendId") String tendId, @RequestParam("roleId") String userId);

	/**
	 * 通过角色Id查询角色名称
	 *
	 * @param tendId
	 *            租户ID
	 * @param id
	 *            角色ID
	 * @return
	 */
	@RequestMapping(value = "role/queryName", method = RequestMethod.POST, consumes = "application/json")
	ApiFeignResponse<GeneralDto> queryRoleNameById(@RequestParam("tendId") String tendId, @RequestParam("id") String id);

	// /**
	// * 给指定用户赋予指定角色
	// *
	// * @param roleUserId
	// * 用户id
	// * @param roleIds
	// * 角色id, 逗号分割
	// * @return 成功或者失败
	// */
	// 已废弃、参考updateUserRole
	// @Deprecated
	// @RequestMapping(value = "roleUser/saveRole2User", method = RequestMethod.POST)
	// ApiFeignResponse<Object> saveRole2User(@RequestParam("roleUserId") String roleUserId, @RequestParam("roleIds") String roleIds);

	/**
	 * 查询角色列表
	 * 
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "role/queryRoles", method = RequestMethod.POST)
	ApiFeignResponse<Page<RoleDto>> queryRole(@RequestBody Map<String, Object> map);

	/**
	 * 根据hr用户ID获取其对应的用户角色
	 * 
	 * @param userId(用户ID)
	 * @return ApiFeignResponse<RoleDto>
	 */
	@RequestMapping(value = "role/queryUserRole", method = RequestMethod.POST)
	ApiFeignResponse<List<RoleDto>> queryUserRole(@RequestParam("userId") String userId);

	@RequestMapping(value = "roleUser/queryRoleUserByMenuCode", method = RequestMethod.POST)
	public ApiFeignResponse<List<RoleUserDto>> queryRoleUserByMenuCode(@RequestParam("menuCode") String menuCode);

	/**
	 * (修改/新增)用户对应的用户角色
	 * 
	 * @param tendId(租户ID)
	 * @param userId(用户ID)
	 * @param roleIds(用户角色ID[逗号隔开],形如：角色1,角色2)
	 * @return ApiFeignResponse<Integer>
	 */
	@RequestMapping(value = "roleUser/saveRole2User", method = RequestMethod.POST)
	ApiFeignResponse<Integer> updateUserRole(@RequestParam("tendId") String tendId, @RequestParam("roleUserId") String userId, @RequestParam("roleIds") String roleIds);

	/**
	 * 获取角色树列表
	 * 
	 * @param delflag(是否有效，默认值0)
	 */
	@RequestMapping(value = "role/queryRoleTree", method = RequestMethod.POST)
	ApiFeignResponse<List<RoleDto>> queryRoleTree(@RequestParam(value = "delflag", defaultValue = "0") String delflag);

	/**
	 * 根据多个人员id获取各自的角色  
	 * 
	 * @author jiangwenpeng  
	 * @date 2018年4月26日下午17:35:26   
	 * @param personIds(人员id字符串，形如：“1001，1002，1003”)
	 * @return 含有所有人员的对应权限的Map,形如：{"1001":"quanxian1,quanxian2,quanxian3"},{"1002":"quanxian2,quanxian3"}  
	 */
	@RequestMapping(value = "role/queryRoleByUserIds", method = RequestMethod.POST)
	ApiFeignResponse<Map<String, Object>> queryBatchRoleByUserIds(@RequestParam(value = "userIds") String userIds);

	/**
	 * hr人员导入，角色字段处理 通过角色名称查询角色id
	 * 
	 * @param roleNames
	 *            用户角色名称[逗号隔开],形如：角色1,角色2,角色3
	 * @author lixd
	 * @return string 用户角色ID[逗号隔开],形如： id1,id2,id3
	 */
	@RequestMapping(value = "role/queryRoleIdByRoleNames", method = RequestMethod.POST)
	ApiFeignResponse<String> queryRoleIdByRoleNames(@RequestParam(value = "roleNames") String roleNames);

	/**
	 * hr人员导入，批量关联角色
	 * 
	 * @param list<RoleParam>
	 *            根据角色参数中用户id、角色ids 批量生成人员与角色的对应关系
	 * @author lixd
	 * @return
	 */
	@RequestMapping(value = "roleUser/saveRole2UserBatch", method = RequestMethod.POST)
	ApiFeignResponse<String> saveRole2UserBatch(@RequestBody List<RoleAndUserParam> list);

	/**
	 * 查询是否是管理员
	 * 
	 * @param tendId
	 * @param imUserId
	 * @return
	 */
	@RequestMapping(value = "role/queryIsSuper", method = RequestMethod.POST)
	ApiFeignResponse<Boolean> queryIsSuper(@RequestParam(value = "tendId") String tendId, @RequestParam(value = "imUserId") String imUserId);
}
