package com.jzy.hio.feign;

import java.util.List;
import java.util.Map;

import com.jzy.hio.platform.dto.userinfo.ImUserInfoDto;
import org.springframework.cloud.netflix.feign.FeignClient;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;

import com.jzy.hio.ApiFeignResponse;
import com.jzy.hio.platform.dto.tenantcompanyinfo.TenantCompanyInfoDto;
import com.jzy.hio.platform.dto.tenantcompanyinfo.TendUserInfoDto;
import com.jzy.hio.platform.param.FriendInfoParam;
import com.jzy.hio.platform.region.dto.RegionDto;

/**
 * @author chc
 * @create 2018-03-22 18:44
 * @desc
 **/
@FeignClient(name = "v2r1-platform-service/")
public interface PlatformFeignService {

	/**
	 * 通过租户id查询租户信息
	 *
	 * @param dto
	 * @return ApiFeignResponse<TenantCompanyInfoDto>
	 */
	@RequestMapping(value = "tenantInfo/getTenantCompanyInfo", method = RequestMethod.POST, consumes = "application/json")
	public ApiFeignResponse<TenantCompanyInfoDto> queryTenantCompanyInfoByTendId(@RequestBody TenantCompanyInfoDto dto);

	/**
	 * 更新租户信息
	 *
	 * @param dto
	 * @return List<SkyDriveDto>
	 */
	@RequestMapping(value = "tenantInfo/update", method = RequestMethod.POST, consumes = "application/json")
	public ApiFeignResponse<String> updateTenantCompanyInfo(@RequestBody TenantCompanyInfoDto dto);

	/**
	 * 上传企业logo
	 *
	 * @param file
	 * @return List<SkyDriveDto>
	 */
	@RequestMapping(value = "tenantInfo/uploadLogo", method = RequestMethod.POST, consumes = "application/json")
	public ApiFeignResponse<TenantCompanyInfoDto> uploadTenantCompanyLogo(@RequestBody MultipartFile file);

	/**
	 * 获取所有租户信息
	 *
	 * @return
	 */
	@RequestMapping(value = "tenantInfo/getTenantCompanyList", method = RequestMethod.POST, consumes = "application/json")
	public ApiFeignResponse<List<TenantCompanyInfoDto>> getTenantCompanyList();

	/**
	 * 根据tendId获取团队（租户）创建人
	 *
	 * @return
	 */
	@RequestMapping(value = "tenantInfo/get/{tendId}", method = RequestMethod.GET)
	public ApiFeignResponse<String> getTenantCompanyCreater(@PathVariable("tendId") String tendId);

	/**
	 * 删除用户与租户的关系
	 *
	 * @param dto
	 * @return List<SkyDriveDto>
	 */
	@RequestMapping(value = "tendUser/deleteUserTend", method = RequestMethod.POST, consumes = "application/json")
	public ApiFeignResponse<String> deleteUserTend(@RequestBody TendUserInfoDto dto);

	/**
	 * 在职离职修改 用户与租户关系的状态
	 *
	 * @param dto
	 * @return List<SkyDriveDto>
	 */
	@RequestMapping(value = "tendUser/updateUserTendDelflag", method = RequestMethod.POST, consumes = "application/json")
	public ApiFeignResponse<String> updateUserTendDelflag(@RequestBody TendUserInfoDto dto);

	/**
	 * 发送邀请（邀请同事，邀请外部联系人）
	 *
	 * @param param
	 * @return List<SkyDriveDto> { "sendId": "10001","phones":"15011101115","type":"2","receiverId":"149948133526181257","tendId":"test_test014" } sendId:发送人id，imuserid
	 *         type:2:同事，3：外部联系人
	 */
	@RequestMapping(value = "friendInfo/sendWorkApply", method = RequestMethod.POST, consumes = "application/json")
	public ApiFeignResponse<Boolean> sendApply(@RequestBody FriendInfoParam param);

	/**
	 * 新注册用户如果有短信邀请，发送站内信
	 *
	 * @param json
	 * @return List<SkyDriveDto>
	 */
	@RequestMapping(value = "notice/sendNotice", method = RequestMethod.POST, consumes = "application/json")
	public void sendNotice(@RequestBody String json);

	/**
	 * 新注册用户如果有短信邀请，发送站内信
	 *
	 * @param json
	 *            {id:,mobile:}
	 * @return List<SkyDriveDto>
	 */
	@RequestMapping(value = "userInfo/getUserInfo", method = RequestMethod.POST, consumes = "application/json")
	public ApiFeignResponse<Object> getUserInfo(@RequestBody String json);

	/**
	 * @param paramMap
	 *            <br>
	 *            province 传入null 代表查询所有省<br>
	 *            否则查询具体的省+市+区
	 * @return
	 */
	@RequestMapping(value = "region/queryNode", method = RequestMethod.POST, consumes = "application/json")
	public ApiFeignResponse<List<RegionDto>> queryNode(@RequestBody Map<String, Object> paramMap);

	/**
	 * 查询所有的省市区
	 * 
	 * @return
	 */
	@RequestMapping(value = "region/queryAllNodes", method = RequestMethod.POST, consumes = "application/json")
	public ApiFeignResponse<List<RegionDto>> queryAllNodes();
	
	/**
	 * 查询手机号是否已注册，未注册默认创建禁用的账号
	 *
	 * @param mobile
	 * @return String
	 */
	@RequestMapping(value = "userInfo/queryAlreadyOrCreate", method = RequestMethod.POST)
	public ApiFeignResponse<String> queryAlreadyOrCreate(@RequestBody String mobile);
	
	/**
	 * 批量验证手机号是否注册，未注册默认给用户注册账号----为sys批量上传提供
	 *
	 * @param param
	 * @return map
	 */
	@RequestMapping(value = "userInfo/createUserImId", method = RequestMethod.POST)
	public ApiFeignResponse<Map<String,String>> createUserImId(@RequestBody List<String> param);

	/**
	 * 根据imid查询用户信息
	 * @param imId
	 * @return
	 */
	@RequestMapping(value = "userInfo/getUserInfoByIMId", method = RequestMethod.POST)
	public ApiFeignResponse<ImUserInfoDto> getUserInfoByIMId(@RequestBody String imId);
}
