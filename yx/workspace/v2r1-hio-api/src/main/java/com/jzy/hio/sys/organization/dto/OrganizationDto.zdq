package com.jzy.hio.sys.organization.dto;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.jzy.hio.base.dto.BaseDto;
import com.jzy.hio.base.dto.BaseTreeDto;
import com.jzy.hio.sys.user.dto.UserDto;
import lombok.Data;
import lombok.EqualsAndHashCode;

import java.util.ArrayList;
import java.util.List;

/**
 * 组织机构--只有一个跟节点
 *
 * @author wt.coffee
 * @date 2018年3月9日下午2:56:19
 */
@Data
@EqualsAndHashCode(callSuper = false)
public class OrganizationDto extends BaseTreeDto<OrganizationDto> {
	/**
	 * uuid
	 */
	@JsonIgnore
	private String uid;
	/**
	 * 名称
	 */
	private String name;
	/**
	 * 排序
	 */
	private Integer sort;
	/**
	 * code编码
	 */
	private String code;
	/**
	 * 排序前缀
	 */
	private String prefixSort;
	/**
	 * id前缀
	 */
	private String prefixId;
	/**
	 *
	 */
	private String status;
	/**
	 * 名称前缀（巨洲云/人事部）
	 */
	private String prefixName;
	/**
	 * type == null代表用户, h5判断对象类型
	 */
	private String type;
	/**
	 * 以下三個字段是用戶的時候顯示 imuserID
	 */
	private String imUserId;
	/**
	 * 性别
	 */
	private String sex;
	/**
	 * 邮箱
	 */
	private String email;
	/**
	 * 手机号
	 */
	private String mobile;

	private String pinyinFirst;
	private String pinyinFull;
	/**
	 * 是否是主职务
	 */
	private boolean isDefault;
	/**
	 * 职务ID
	 */
	@JsonIgnore
	private String positionId;
	/**
	 * 职务名称
	 */
	@JsonIgnore
	private String positionName;

	/**
	 * 组织下的用户数量 h5用
	 */
	private String userCount;

	/**
	 * pc端获取当人用户的部门树，是否能选择
	 */
	@JsonInclude(JsonInclude.Include.NON_NULL)
	private boolean canSelected;
	/**
	 * UserDto 组织下挂人
	 */
	@JsonIgnore
	private List<? extends BaseDto> users = new ArrayList<>();

	/**
	 * 注意这个方法的调用、如果child为空 则会
	 */
	@Override
	public List<OrganizationDto> getChildren() {
		if (this.users != null && this.users.size() > 0) {
			for (BaseDto baseDto : this.users) {
				UserDto user = (UserDto) baseDto;
				OrganizationDto org = new OrganizationDto();
				org.setId(user.getId());
				org.setName(user.getName());
				org.setPinyinFirst(user.getPinyinFirst());
				org.setPinyinFull(user.getPinyinFull());
				org.setSex(user.getSex());
				org.setMobile(user.getMobile());
				org.setEmail(user.getEmail());
				org.setNodeId(user.getNodeId());
				org.setUid(user.getUid());
				org.setImUserId(user.getImUserId());
				org.setParentId(user.getOrganizationId());
				org.setType("user");
				//
				children.add(org);
			}
			// 清空、防止第二个调用getChildren数据出问题
			this.users = null;
		}
		return children;
	}

	public List<? extends BaseDto> getUsers() {
		return users;
	}

	public void setUsers(List<? extends BaseDto> users) {
		this.users = users;
	}

}
