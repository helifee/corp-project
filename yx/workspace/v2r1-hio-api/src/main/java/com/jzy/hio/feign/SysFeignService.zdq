package com.jzy.hio.feign;

import com.jzy.hio.ApiFeignResponse;
import com.jzy.hio.platform.param.TendUserInfoParam;
import com.jzy.hio.sys.organization.dto.FlowOrgRoleDto;
import com.jzy.hio.sys.organization.dto.FlowUserDto;
import com.jzy.hio.sys.organization.dto.GeneralDto;
import com.jzy.hio.sys.organization.dto.OrgRoleUserDto;
import com.jzy.hio.sys.organization.dto.OrganizationDto;
import com.jzy.hio.sys.organization.dto.SkyDriveDto;
import com.jzy.hio.sys.organization.dto.SysCurrencyDto;
import com.jzy.hio.sys.organization.param.IMOrgCreateParam;
import com.jzy.hio.sys.organization.param.SkyDriveParam;
import com.jzy.hio.sys.user.FlowUserAndExternalQueryParam;
import com.jzy.hio.sys.user.dto.FlowUserAndExternalDto;
import com.jzy.hio.sys.user.dto.HRUserInviteDto;
import com.jzy.hio.sys.user.dto.IMOAUserInfoDto;
import com.jzy.hio.sys.user.dto.IMOrgUserDto;
import com.jzy.hio.sys.user.dto.IMUserDetailInfoDto;
import com.jzy.hio.sys.user.dto.OAUserDto;
import com.jzy.hio.sys.user.dto.OrganizationUsersDto;
import com.jzy.hio.sys.user.dto.UserDto;
import com.jzy.hio.sys.user.dto.UserStatusDto;
import com.jzy.hio.sys.user.param.*;
import org.springframework.cloud.netflix.feign.FeignClient;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;
import java.util.Map;

/**
 * @author kimchou
 * @create 2018-03-22 18:44
 **/
@FeignClient(name = "v2r1-sys-service/sys")
public interface SysFeignService {

	/**
	 * 通过组织Id查询组织名称
	 *
	 * @param tendId
	 *            租户ID
	 * @param id
	 *            组织ID
	 * @return
	 */
	@RequestMapping(value = "organization/queryName", method = RequestMethod.POST, consumes = "application/json")
	ApiFeignResponse<GeneralDto> queryOrganizationNameById(@RequestParam("tendId") String tendId, @RequestParam("id") String id);

	/**
	 * 通过部门id查询子部门
	 *
	 * @param tendId
	 *            租户ID
	 * @param organizationId
	 *            部门id
	 * @param isContainsSelf
	 *            是否要查出包含当前部门
	 * @return
	 */
	@RequestMapping(value = "organization/queryOrgChildById", method = RequestMethod.POST, consumes = "application/json")
	ApiFeignResponse<List<OrganizationDto>> queryOrgChildById(@RequestParam("tendId") String tendId, @RequestParam("organizationId") String organizationId,
			@RequestParam("isContainsSelf") boolean isContainsSelf);

	/**
	 * 通过用户ID查询部门列表包括职务
	 *
	 * @param tendId
	 *            租户id
	 * @param id
	 *            用户id
	 * @param containsPart
	 *            是否包含兼职部门
	 * @return
	 */
	@RequestMapping(value = "organization/queryOrgAndPositionByUserId")
	ApiFeignResponse<List<GeneralDto>> queryOrgAndPositionByUserId(@RequestParam("tendId") String tendId, @RequestParam("id") String id,
			@RequestParam("containsPart") String containsPart);

	/**
	 * 组织机构树
	 *
	 * @param map
	 * @return
	 */
	@RequestMapping(value = "organization/queryTree", method = RequestMethod.POST, consumes = "application/json")
	ApiFeignResponse<OrganizationDto> getOrganizationTree(@RequestBody Map<String, Object> map);

	/**
	 * 查询名称通过组织ID或者角色ID或者人的ID (网盘、流程)
	 *
	 * @param apiParam
	 * @return List<SkyDriveDto>
	 */
	@RequestMapping(value = "organization/queryNameByOrgAndRoleAndUser", method = RequestMethod.POST, consumes = "application/json")
	ApiFeignResponse<List<SkyDriveDto>> queryNameByOrgAndRoleAndUser(@RequestBody SkyDriveParam apiParam);

	/**
	 * 通过用户ID查询组织机构列表
	 *
	 * @param userId
	 * @param tendId
	 * @return
	 */
	@RequestMapping(value = "organization/queryOrganizationsByUserId", method = RequestMethod.POST, consumes = "application/json")
	ApiFeignResponse<List<OrganizationDto>> queryOrganizationsByUserId(@RequestParam("tendId") String tendId, @RequestParam("userId") String userId);

	/**
	 * 超级管理员查询完整的组织树(OA用)
	 *
	 * @param map
	 * @return
	 * @author shangb
	 * @date 2018年4月9日 下午2:26:57
	 */
	@RequestMapping(value = "organization/queryTreeWithUser", method = RequestMethod.POST, consumes = "application/json")
	ApiFeignResponse<OrganizationDto> queryTreeWithUser(@RequestBody Map<String, Object> map);

	/**
	 * 通过用户ID、角色ID、组织ID查询所有对应的人员 Name、Id--去重 返回实体类 (OA)【可以查询外部联系人】
	 *
	 * @param apiParam
	 * @return
	 */
	@RequestMapping(value = "user/queryUserByOrgAndRoleAndUser", method = RequestMethod.POST, consumes = "application/json")
	ApiFeignResponse<List<OAUserDto>> queryUserByOrgAndRoleAndUser(@RequestBody OAUserParam apiParam);

	/**
	 * 查询指定的用户所在的组织、然后组装成树
	 *
	 * @param userIds
	 * @param tendId
	 * @return
	 */
	@RequestMapping(value = "organization/queryOrganizationTreeByUserIds", method = RequestMethod.POST, consumes = "application/json")
	ApiFeignResponse<OrganizationDto> queryOrganizationTreeByUserIds(@RequestParam("tendId") String tendId, @RequestParam("userIds") String userIds,
			@RequestParam(required = false, value = "externalIds") String externalIds);

	/**
	 * 查询指定用户列表
	 * @param apiParam 【内部和外部无需区分，全部传过来】 主键ID
	 * @return
	 */
	@RequestMapping(value = "user/queryOrganizationAndExternalUsers", method = RequestMethod.POST, consumes = "application/json")
	ApiFeignResponse<OrganizationUsersDto> queryOrganizationUsersDto( @RequestBody UserAndExternalParam apiParam);

	/**
	 * IM创建团队(IM)
	 *
	 * @param apiParam
	 * @return
	 */
	@RequestMapping(value = "organization/createTeam", method = RequestMethod.POST, consumes = "application/json")
	ApiFeignResponse<Object> createTeam(@RequestBody IMOrgCreateParam apiParam);

	/**
	 * 查询OA用户是否已经删除，用于接收站内信邀请，查询OA用户（IM）
	 *
	 * @param apiParam
	 * @return ApiFeignResponse<Boolean> true表示删除，false表示未删除
	 */
	@RequestMapping(value = "user/queryOaUserIsDelete", method = RequestMethod.POST, consumes = "application/json")
	ApiFeignResponse<Boolean> queryOaUserIsDelete(@RequestBody IMUserQueryParam apiParam);

	/**
	 * 通过用户姓名模糊查询用户(办公)
	 *
	 * @param queryCondition
	 *            查询条件
	 * @param tendId
	 *            租户ID
	 * @return
	 */
	@RequestMapping(value = "user/queryUserByName", method = RequestMethod.POST, consumes = "application/json")
	ApiFeignResponse<List<OAUserDto>> queryUserListByName(@RequestParam("queryCondition") String queryCondition, @RequestParam("tendId") String tendId);

	/**
	 * 根据用户ID查询 用户的角色以及部门的ID集合（Flow）
	 *
	 * @param apiParam
	 * @return
	 */
	@RequestMapping(value = "user/queryOrgAndRoleByUserId", method = RequestMethod.POST, consumes = "application/json")
	ApiFeignResponse<List<FlowOrgRoleDto>> queryOrgAndRoleByUserId(@RequestBody FlowUserParam apiParam);

	/**
	 * 通过用户ID集合查询角色ID-List，部门ID-List，用户ID-List(办公)
	 *
	 * @param apiParam
	 *            查询条件 {userIds:[],tendId:""} 只需要传userIds集合和tendId
	 * @return
	 */
	@RequestMapping(value = "user/queryOrgAndRoleByUserIds", method = RequestMethod.POST, consumes = "application/json")
	ApiFeignResponse<List<OrgRoleUserDto>> queryOrgAndRoleByUserIds(@RequestBody OAUserParam apiParam);

	// ???? 2018.5.22 因为类型错误、先干掉。
	// /**
	// * 获取外部联系人列表
	// *  
	// * @param map
	// * @return
	// */
	// @RequestMapping(value = "user/getExternalContactList", method = RequestMethod.POST, consumes = "application/json")
	// ApiFeignResponse<List<IMUserDetailInfoDto>> getExternalContactList(@RequestBody Map<String, Object> map);

	/**
	 * 邀请同事 (IM)
	 *
	 * @param apiParam
	 * @return ApiFeignResponse<Integer>
	 */
	@RequestMapping(value = "user/inviteUserForIM", method = RequestMethod.POST, consumes = "application/json")
	ApiFeignResponse<String> inviteUser(@RequestBody IMUserInviteParam apiParam);

	/**
	 * 邀请同事（HR- 人员已经添加，将状态修改为workstatus=0，以及调用platform接口发送邀请）
	 * 
	 * @param userIds
	 *            主键id集合
	 * @return
	 */
	@RequestMapping(value = "user/inviteUserForHR", method = RequestMethod.POST, consumes = "application/json")
	ApiFeignResponse<HRUserInviteDto> inviteUserForHr(@RequestParam("userIds") List<String> userIds);

	/**
	 * 邀请外部联系人 (IM)
	 *
	 * @param apiParam
	 * @return ApiFeignResponse<Integer>
	 */
	@RequestMapping(value = "user/inviteExternalUser", method = RequestMethod.POST, consumes = "application/json")
	ApiFeignResponse<String> inviteExternalContact(@RequestBody IMUserInviteParam apiParam);

	/**
	 * 获取用户的组织信息(IM)
	 *
	 * @param apiParam
	 * @return ApiFeignResponse<IMUserDetailInfoDto>
	 */
	@RequestMapping(value = "user/imUserInfo", method = RequestMethod.POST, consumes = "application/json")
	ApiFeignResponse<IMUserDetailInfoDto> getUserInfo(@RequestBody IMUserInfoParam apiParam);

	/**
	 * 更新用户的组织信息(IM)
	 *
	 * @param apiParam
	 * @return ApiFeignResponse<IMUserDetailInfoDto>
	 */
	@RequestMapping(value = "user/imUserUpdate", method = RequestMethod.POST, consumes = "application/json")
	ApiFeignResponse<IMUserDetailInfoDto> updateUserInfo(@RequestBody IMUserUpdateParam apiParam);

	/**
	 * 同步邀请imUserId（IM）
	 *
	 * @param apiParam
	 * @return ApiFeignResponse<Integer>
	 */
	@RequestMapping(value = "user/imUserSync", method = RequestMethod.POST, consumes = "application/json")
	ApiFeignResponse<Integer> syncImUserId(@RequestBody IMUserSyncParam apiParam);

	/**
	 * 修改用户之后，修改组织更新时间（IM）
	 *
	 * @param apiParam
	 * @return ApiFeignResponse<Boolean>
	 */
	@RequestMapping(value = "user/imUserSyncOrg", method = RequestMethod.POST, consumes = "application/json")
	ApiFeignResponse<Boolean> syncUserUpdateOrg(@RequestBody IMUserSyncParam apiParam);

	/**
	 * 根据用户ID获取组织直属上级 UserController
	 *
	 * @param tendId
	 *            租户ID
	 * @param id
	 *            用户ID
	 * @return ApiFeignResponse<IMUserDetailInfoDto>
	 */
	@RequestMapping(value = "user/getOrgLeader/{id}", method = RequestMethod.GET)
	ApiFeignResponse<IMUserDetailInfoDto> getOrgLeaderUserInfo(@RequestParam("tendId") String tendId, @PathVariable("id") String id);

	/**
	 *  <!--根据组织ID和角色查询用户 交集-->
	 *      入参为用户ID和角色ID，查询用户所在的主部门 和 角色对应的人员
	 *
	 * @param map
	 *            {"tendId":"租户ID",organizationId":"1","roleId":"2","userId":"1"}
	 * @return
	 */
	@RequestMapping(value = "user/getUserByOrgAndRole", method = RequestMethod.POST, consumes = "application/json")
	ApiFeignResponse<List<UserDto>> getUserListByOrgAndRoleId(@RequestBody Map<String, Object> map);

	/**
	 * 通过im的用户id查询oa的userId
	 *
	 * @param imUserId
	 * @param tendId
	 * @return ApiFeignResponse<String>
	 */
	@RequestMapping(value = "user/getOaUserIdByImUserId", method = RequestMethod.POST)
	ApiFeignResponse<String> queryOaUserIdByImUserId(@RequestParam("imUserId") String imUserId, @RequestParam("tendId") String tendId);

	/**
	 * 通过组织ID查询人员列表 (IM)
	 *
	 * @param apiParam
	 * @return ApiFeignResponse<String>
	 */
	@RequestMapping(value = "user/queryOaUserByOrganizationId", method = RequestMethod.POST)
	ApiFeignResponse<List<IMOrgUserDto>> queryOaUserByOrganizationId(@RequestBody List<IMUserByOrgParam> apiParam);

	/**
	 * 通过oaUserId查询imUserId 【组织、外部联系人都可查询】
	 *
	 * @param tendId
	 * @param userId
	 * @return 读 SysCurrencyDto--->imUserId
	 */
	@RequestMapping(value = "user/queryImUserIdByOaUserId", method = RequestMethod.POST)
	ApiFeignResponse<SysCurrencyDto> queryImUserIdByOaUserId(@RequestParam("tendId") String tendId, @RequestParam("userId") String userId);

	/**
	 * 通过positionId查询PositionName
	 *
	 * @param tendId
	 * @param positionId
	 * @return 读 SysCurrencyDto--->PositionName
	 */
	@RequestMapping(value = "user/queryPositionNameByPositionId", method = RequestMethod.POST)
	ApiFeignResponse<SysCurrencyDto> queryPositionNameByPositionId(@RequestParam("tendId") String tendId, @RequestParam("positionId") String positionId);

	/**
	 * 通过useIds查询PositionNames【组织、外部联系人都可查询】
	 *
	 * @param apiParam
	 *            -->传userIds
	 * @return 读 SysCurrencyDto--->PositionNames
	 */
	@RequestMapping(value = "user/queryPositionNameByUserIds", method = RequestMethod.POST)
	ApiFeignResponse<List<FlowUserDto>> queryPositionNameByUserIds(@RequestBody SkyDriveParam apiParam);

	/**
	 * 删除用户
	 *
	 * @param apiParam
	 * @return
	 */
	@RequestMapping(value = "user/delete", method = RequestMethod.POST)
	ApiFeignResponse<Boolean> deleteUser(@RequestBody IMOAUserParam apiParam);

	/**
	 * 查询用户-职务详情
	 *
	 * @param apiParam
	 * @return
	 */
	@RequestMapping(value = "user/userInfo/queryWorker", method = RequestMethod.POST)
	ApiFeignResponse<IMOAUserInfoDto> queryWorker(@RequestBody IMOAUserParam apiParam);

	/**
	 * 更新用户-职务详情
	 *
	 * @param apiParam
	 * @return
	 */
	@RequestMapping(value = "user/userInfo/updateWork", method = RequestMethod.POST)
	ApiFeignResponse<IMOAUserInfoDto> updateWork(@RequestBody IMOAUserUpdateParam apiParam);

	/**
	 * 查询用户状态 -1 -已经删除或者不存在，0 -待确认邀请，1-在职，2-离职，3-未邀请
	 * 
	 * @param tendId
	 * @param imUserId
	 * @param type
	 *            0-本组织；1-外部联系人
	 * @return
	 */
	@RequestMapping(value = "user/queryUserWorkStatus", method = RequestMethod.POST)
	ApiFeignResponse<Integer> queryUserWorkStatus(@RequestBody TendUserInfoParam dto);

	/**
	 * 根据用户名称查询用户列表
	 * 
	 * @return map - key-name;-value-id
	 */
	@RequestMapping(value = "user/queryUserMapByName", method = RequestMethod.POST)
	ApiFeignResponse<Map<String, FlowUserDto>> queryUserMapByName(@RequestBody List<String> userNames);

    /**
     * 通过IM-id查询 用户名称
     * @param apiPram {@link com.jzy.hio.base.BaseConstants.USER_ORGANIZATION }
     * @param tendId 租户id
     * @return
     */
    @RequestMapping(value = "user/queryUserOrExternalUserByIMUserId", method = RequestMethod.POST)
    ApiFeignResponse<List<FlowUserAndExternalDto>> queryUserOrExternalUserByIMUserId(@RequestBody FlowUserAndExternalQueryParam apiParam);

	/**
	 * 通过IM-ids查询 用户名称 外部联系人 只查询未删除的。
	 * @param imUserIds
	 * @param tendId 租户id
	 * @return
	 */
	@RequestMapping(value = "user/queryExternalUserByIMUserIds", method = RequestMethod.POST)
	ApiFeignResponse<List<FlowUserAndExternalDto>> queryExternalUserByIMUserId(@RequestParam("tendId") String tendId,@RequestParam("imUserIds")  List<String> imUserIds);

	/**
	 * 通过IM-ids查询 用户名称 包含内部外部 只查询未删除的。
	 * @param tendId
	 * @param imUserIds
	 * @return Map<String,SysCurrencyDto> key:imUserId;value:userName、userId、imUserId
	 */
	@RequestMapping(value = "user/queryUsersByIMUserIds", method = RequestMethod.POST)
	ApiFeignResponse<Map<String,SysCurrencyDto>> queryUsersByIMUserIds(@RequestParam("tendId") String tendId,@RequestParam("imUserIds") List<String> imUserIds);


	/**
	 *  查询oa_sys_user或者oa_sys_contact用户状态
	 * @param apiParam
	 * @return Map<> key -id 是入参的ID，如果用户处于非正常状态，则不返回。key。判断是否有key即可
	 */
	@RequestMapping(value = "user/queryUserStatusByIds",method = RequestMethod.POST)
	ApiFeignResponse<Map<String,UserStatusDto>> queryUserStatusByIds(@RequestBody UserStatusParam apiParam);

	/**
	 * 修改用户信息同步修改时间
	 * @param userIds
	 * @return
	 */
	@RequestMapping(value = "user/syncUsers",method = RequestMethod.POST)
	ApiFeignResponse<Boolean> syncUsers(@RequestBody List<String> userIds, @RequestParam("updateTime")String updateTime);

	/**
	 * 查询是否有关系
	 * @return
	 */
	@RequestMapping(value = "user/queryUserRelation",method = RequestMethod.POST)
	ApiFeignResponse<Boolean> queryUserRelation(@RequestBody UserRelationParam apiParam);
}
