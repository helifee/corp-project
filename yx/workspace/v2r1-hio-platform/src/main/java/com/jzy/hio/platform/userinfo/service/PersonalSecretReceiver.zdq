package com.jzy.hio.platform.userinfo.service;

import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.rabbit.annotation.RabbitHandler;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.jzy.hio.base.Base;
import com.jzy.hio.base.BaseConstants;
import com.jzy.hio.entity.PersonalSecret;
import com.rabbitmq.client.Channel;

/**
 * 个人隐私消费
 * 
 * @author
 *
 */
@Component
public class PersonalSecretReceiver {
	protected Logger logger = LoggerFactory.getLogger(this.getClass());

	@Autowired
	private PersonalSecretService personalSecretService;

	// chc edit 2018-04-19
	@RabbitListener(queues = "${queue.imPersonalSecretQueue}", containerFactory = "rabbitListenerContainerFactory")
	@RabbitHandler
	public void process(Message message, Channel channel) {
		try {
			String body = new String(message.getBody(), "utf-8");
			PersonalSecret personalSecret = Base.json2obj(body, PersonalSecret.class);
			personalSecret.setCreatePersonName("");
			personalSecret.setUpdatePersonName("");
			personalSecret.setCreatePersonId("");
			personalSecret.setUpdatePersonId("");
			PersonalSecret param = new PersonalSecret();
			param.setUid(personalSecret.getUid());
			param.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
			List<PersonalSecret> list = personalSecretService.queryList(param);
			if(Base.isNotEmpty(list)) {
				PersonalSecret personal = list.get(0);
				personal.setCompanyFlag(personalSecret.getCompanyFlag());
				personal.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
				personal.setFriendMoibleFlag(personalSecret.getFriendMoibleFlag());
				personal.setMobileFlag(personalSecret.getMobileFlag());
				personal.setOpenRunning(personalSecret.getOpenRunning());
				personal.setPhoneFlag(personalSecret.getPhoneFlag());
				personal.setRemindFlag(personalSecret.getRemindFlag());
				personal.setWorkMoibleFlag(personalSecret.getWorkMoibleFlag());
				personal.setUpdateDate(new Date());
				personalSecretService.update(personal);
			}else {
				personalSecretService.save(personalSecret);
			}
			channel.basicAck(message.getMessageProperties().getDeliveryTag(), true);
		} catch (Exception e) {
			logger.error("设置个人隐私失败：{}", e.getMessage());
		}
	}

}
