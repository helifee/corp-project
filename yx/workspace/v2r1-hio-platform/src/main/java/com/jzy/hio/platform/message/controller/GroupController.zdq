package com.jzy.hio.platform.message.controller;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.common.base.Strings;
import com.google.common.collect.Lists;
import com.jzy.hio.base.Base;
import com.jzy.hio.platform.message.comm.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import com.aliyun.oss.model.ObjectMetadata;
import com.jzy.hio.config.HuanXinConfig;
import com.jzy.hio.exception.HioException;
import com.jzy.hio.platform.message.param.ImGroupCreate;
import com.jzy.hio.platform.message.param.ImGroupSaveParam;
import com.jzy.hio.platform.message.param.ImGroupSetParam;
import com.jzy.hio.platform.message.service.ImChatGroupAPI;
import com.jzy.hio.platform.message.service.ImGroupSetService;
import com.jzy.hio.springmvc.ApiResponse;

import io.swagger.client.model.Group;
import io.swagger.client.model.UserName;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

/**
 * 用户头像和群头像的管理
 */

@RestController
@RequestMapping("/group")
//@RefreshScope
public class GroupController {

    private static Logger logger = LoggerFactory.getLogger(GroupController.class);

    //群组头像空间
    @Value("${oss.ossGroupAvatarBucket}")
    private String ossGroupAvatarBucket;

    //访问域名
    @Value("${oss.domain}")
    private String domain;

    @Autowired
    private ImGroupSetService imGroupSetService;

    @Autowired
    ImChatGroupAPI imChatGroupAPI;

    @Autowired
	private HuanXinConfig huanXinConfig;

    @Autowired
    private RestTemplate restTemplate;

//    /**
//     * 创建聊天群
//     * @param imGroupCreate
//     * @return
//     */
//    @PostMapping(value = "create")
//    public ApiResponse<String> groupCreate(@RequestBody @Validated ImGroupCreate imGroupCreate) {
//        ApiResponse<String> ares = new ApiResponse<String>();
//        try{
//            imGroupCreate.setMaxusers(2000);
//            Group group = new Group();
//            if(imGroupCreate.getMembers().size() > 0){
//                UserName userName = new UserName();
//                for(int i=0;i < imGroupCreate.getMembers().size();i ++ ){
//                    userName.add(imGroupCreate.getMembers().get(i).toString());
//                }
//                group.groupname(imGroupCreate.getGroupname()).desc(imGroupCreate.getDesc())._public(true).maxusers(imGroupCreate.getMaxusers()).approval(true).owner(imGroupCreate.getOwner()).members(userName);
//
//            }else {
//                group.groupname(imGroupCreate.getGroupname()).desc(imGroupCreate.getDesc())._public(true).maxusers(imGroupCreate.getMaxusers()).approval(true).owner(imGroupCreate.getOwner());
//            }
//            if(huanXinConfig.getIsSendMsg()) {
//	            Object result =  imChatGroupAPI.createChatGroup(group);
//	            logger.info("调用创建环信聊天群接口返回结果： "+result);
//	            if(result != null){
//	                ares.setStatus(200);
//	                ares.setMessage("创建环信聊天群成功！");
//	            }else{
//	                ares.setStatus(500);
//	                ares.setMessage("创建环信聊天群失败！");
//	            }
//            }else {
//            	ares.setStatus(200);
//                ares.setMessage("创建环信聊天群成功！");
//            }
//        }catch (Exception e){
//            ares.setStatus(500);
//            ares.setMessage("创建环信聊天群失败！");
//            logger.info("创建环信聊天群失败！{}",e.getMessage());
//        }
//        return ares;
//    }

    /**
     * 创建聊天群
     * @param imGroupCreate
     * @return
     */
    @PostMapping(value = "create")
    public ApiResponse<String> groupCreate(@RequestBody @Validated ImGroupCreate imGroupCreate) {
        ApiResponse<String> ares = new ApiResponse<String>();
        HttpHeaders headers = new HttpHeaders();
        MediaType type = MediaType.parseMediaType("application/json; charset=UTF-8");
        headers.setContentType(type);
        headers.add("Authorization",TokenUtil.getAccessToken());
        HttpEntity request = new HttpEntity(null, headers);
        String url ="http://a1.ssy.xyre.com:80/"+ OrgInfo.ORG_NAME+"/"+OrgInfo.APP_NAME+"/chatgroups";
        headers.setAccept(Lists.newArrayList(MediaType.APPLICATION_JSON));
        //请求参数
        imGroupCreate.setMaxusers(2000);
        String requestJson = "";
        Map map = new HashMap<String,String>();
        map.put("groupname",imGroupCreate.getGroupname());
        map.put("desc",imGroupCreate.getDesc());
        map.put("public",false);
        map.put("maxusers",imGroupCreate.getMaxusers());
        map.put("allow_user_invites",true);
        map.put("invite_need_confirm",false);//邀请加群，被邀请人是否需要确认。如果是true，表示邀请加群需要被邀请人确认；如果是false，表示不需要被邀请人确认，直接将被邀请人加入群。 该字段的默认值为true。
        map.put("owner",imGroupCreate.getOwner());
        map.put("members",imGroupCreate.getMembers());
        map.put("membersonly",false);
        requestJson =  Base.obj2json(map);
        HttpEntity<String> entity = new HttpEntity<String>(requestJson, headers);
        ResponseEntity<String> resp = restTemplate.postForEntity(url,entity,String.class);
        logger.info(resp.getBody().toString());
        return ares;
    }
    /**
     * 设置群头像
     *
     * @return
     * @throws Exception
     */
    @PostMapping(value = "/face/upload")
    public ApiResponse<String> uploadGroupFace(@RequestParam("resource") MultipartFile resource) throws Exception {
        String fileId = null;
        ApiResponse<String> ares = new ApiResponse<String>();
        InputStream in = null;
        long fileSize = resource.getSize();
        if (MessageConstant.FILE_SIZE <= fileSize ) {
            //上传文件大小控制
            logger.error("上传图片过大，不允许超过3M！");
            throw  new Exception("上传图片过大，不允许超过3M！");
        }
        try{
            fileId = System.currentTimeMillis() + RandomUtil.getRandom(MessageConstant.FILE_RANDOM_SIZE);
            in  = resource.getInputStream();
            String fileName = resource.getOriginalFilename();
            ObjectMetadata meta = new ObjectMetadata();
            meta.setContentType("image/"+fileName.substring(fileName.lastIndexOf(".") + 1));
            meta.setContentEncoding("UTF-8");
            meta.addUserMetadata("fileName", fileName);
            OSSClientUtil.uploadFile(ossGroupAvatarBucket, fileId, in, meta);
            ares.setStatus(200);
            ares.setMessage("设置头像成功！");
            ares.setResult(domain+"/"+fileId);
        }catch (Exception e){
            logger.debug("设置头像失败!{}",e.getMessage());
            throw new HioException("设置头像失败!");
        }finally {
            if(in !=null ){
                 in.close();
            }
        }
        return ares;
    }

    /**
     * 持久化群头像
     *
     * @return
     * @throws Exception
     */
    @PostMapping(value = "/face/saveOrUpdate")
    public ApiResponse<String> saveOrUpdate(@RequestBody @Validated ImGroupSaveParam imGroupSaveParam) throws Exception {
        imGroupSetService.saveOrUpdate(imGroupSaveParam);
        ApiResponse<String> ares = new ApiResponse<String>();
        ares.setStatus(200);
        ares.setMessage("设置头像成功！");
        return ares;
    }
    /**
     * 获取群头像
     * @return
     * @throws Exception
     */
    @GetMapping(value = "/face/get/{groupId}")
    public ApiResponse<String> get(@PathVariable("groupId")  String  groupId )  {
        String headUrl =  imGroupSetService.getHeadUrl(groupId);
        ApiResponse<String> ares = new ApiResponse<String>();
        ares.setStatus(200);
        ares.setMessage("获取群头像成功！");
        ares.setResult(headUrl);
       return ares;
    }
}
