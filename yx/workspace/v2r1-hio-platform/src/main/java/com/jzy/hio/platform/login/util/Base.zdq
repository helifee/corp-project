package com.jzy.hio.platform.login.util;

import com.jzy.hio.redis.JedisUtil;
import org.springframework.beans.BeanUtils;

import javax.persistence.Table;
import java.io.UnsupportedEncodingException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.*;

/**
 * 该类的设计初衷：提供项目基础功能的封装<br/>
 * 集中管理对第三方类的依赖、最大化的减少业务相关的类直接import第三方class
 *
 * @author coffee<br/>
 *         2018年2月1日上午10:27:24
 */
@SuppressWarnings("unchecked")
public final class Base {

	/**
	 * 把Object转化为String、主要处理Null <br/>
	 *
	 * @param obj
	 *            <br/>
	 * @return 2018年2月1日上午10:35:26
	 */
	public static String getStr(Object obj) {
		String str = null;
		if (obj != null) {
			str = String.valueOf(obj);
		}
		return str;
	}

	public static Map<String, Object> json2map(String json) {
		Map<String, Object> map = JacksonUtils.fromJson(json, Map.class);
		if (map == null) {
			map = new HashMap<String, Object>();
		}
		return map;
	}

	public static <T> T json2obj(String json, Class<T> tclass) {
		return JacksonUtils.fromJson(json, tclass);
	}

	public static <T> List<T> json2list(String json, Class<T> tclass) {
		return JacksonUtils.fromJson(json, ArrayList.class, tclass);
	}

	/**
	 * 考虑到null值, 不能用 com.alibaba.fastjson 相关的类 <br/>
	 *
	 * @author coffee 2018年2月2日下午6:16:43<br/>
	 *
	 * @param obj
	 * @return
	 */
	public static Map<String, Object> obj2map(Object obj) {
		String json = JacksonUtils.toJson(obj);
		Map<String, Object> map = JacksonUtils.fromJson(json, Map.class);
		// return JSON.parseObject(JSON.toJSONString(obj), Map.class);
		return map;
	}

	/**
	 * <pre>
	 * 注意返回值不能为Map<String, String> 而应该是Map<String, Object>
	 * 否则运行时很可能抛出类似java.lang.ClassCastException: java.util.ArrayList cannot be cast to java.lang.String
	 * 的异常
	 * </pre>
	 *
	 * @param obj
	 * @return
	 */
	public static Map<String, String> obj2mapStr(Object obj) {
		String json = JacksonUtils.toJson(obj);
		Map<String, Object> map = JacksonUtils.fromJson(json, Map.class);
		Map<String, String> newMap = new HashMap<>();
		for (String key : map.keySet()) {
			Object value = map.get(key);
			if (value instanceof Set || value instanceof List) {
				String newValue = Base.obj2json(value);
				newMap.put(key, newValue);
			} else {
				String newValue = value.toString();
				newMap.put(key, newValue);
			}
		}
		return newMap;
	}

	/**
	 *
	 * @param map
	 * @return
	 */
	public static Map<String, Object> mapStr2mapObj(Map<String, String> map) {
		Map<String, Object> newMap = new HashMap<>();
		newMap.putAll(map);
		for (String key : map.keySet()) {
			String value = map.get(key);
			if (value.startsWith("[") && value.endsWith("]")) {
				Object newValue = json2obj(value, Set.class);
				newMap.put(key, newValue);
			}
		}
		return newMap;
	}

	/**
	 * <pre>
	 * {userId=10106, oauth=["1005","10130"]}
	 * {"userId":"10106","oauth":"[\"1005\",\"10130\"]"}
	 *
	 * {"userId":"10106","oauth":["1005","10130"]}
	 * "{\"userId\":\"10106\",\"oauth\":[\"1005\",\"10130\"]}"
	 * </pre>
	 *
	 * @param map
	 * @param clazz
	 * @return
	 */
	public static <T> T map2obj(Map<String, ? extends Object> map, Class<T> clazz) {
		String json = JacksonUtils.toJson(map);
		return JacksonUtils.fromJson(json, clazz);
	}

	public static String obj2json(Object obj) {
		String json = JacksonUtils.toJson(obj);
		return json;
	}

	/**
	 * 判断对象是否为空、适用于集合、自定义Object、String <br/>
	 *
	 * @param obj
	 *            <br/>
	 * @return 2018年1月31日上午11:14:34
	 */
	public static boolean isNotEmpty(Object obj) {
		if (obj == null) {
			return false;
		}
		if (obj instanceof Collection<?>) {
			Collection<?> coll = (Collection<?>) obj;
			return coll.size() > 0;
		}
		if (obj instanceof Map<?, ?>) {
			Map<?, ?> map = (Map<?, ?>) obj;
			return map.size() > 0;
		}
		return String.valueOf(obj + "").trim().length() > 0;
	}

	public static boolean isEquals(Object obj1, Object obj2) {
		if (obj1 != null && obj1.equals(obj2)) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * 判断对象是否为空、适用于集合、自定义Object、String <br/>
	 *
	 * @param obj
	 *            <br/>
	 * @return 2018年1月31日上午11:14:34
	 */
	public static boolean isEmpty(Object obj) {
		return isNotEmpty(obj) == false;
	}

	public static String generatePk(Class<?> entityClass) {
		Table table = entityClass.getAnnotation(Table.class);
		String tableName = table.name();
		return JedisUtil.generateKey(tableName);
	}

	public static String uuid() {
		return UUID.randomUUID().toString().replace("-", "");
	}

	public static String md5(String source) {
		String uuid = StringToMd5(source);
		return uuid;
	}

	public static String StringToMd5(String psw) {
		{
			try {
				MessageDigest md5 = MessageDigest.getInstance("MD5");
				md5.update(psw.getBytes("UTF-8"));
				byte[] encryption = md5.digest();

				StringBuffer strBuf = new StringBuffer();
				for (int i = 0; i < encryption.length; i++) {
					if (Integer.toHexString(0xff & encryption[i]).length() == 1) {
						strBuf.append("0").append(Integer.toHexString(0xff & encryption[i]));
					} else {
						strBuf.append(Integer.toHexString(0xff & encryption[i]));
					}
				}

				return strBuf.toString();
			} catch (NoSuchAlgorithmException e) {
				return "";
			} catch (UnsupportedEncodingException e) {
				return "";
			}
		}
	}

	public static <K> List<K> copyProperties(List<?> sourceList, Class<K> targetType) {
		List<K> targetList = new ArrayList<>();
		for (Object source : sourceList) {
			try {
				K k = targetType.newInstance();
				copyProperties(source, k);
				targetList.add(k);
			} catch (Exception e) {
				e.printStackTrace();
			}
			// ParameterizedType pt = (ParameterizedType) targetList.getClass().getGenericInterfaces()[0];
			// System.out.println(pt.getActualTypeArguments()[0]);
		}
		return targetList;
	}

	public static void copyProperties(Object source, Object target) {
		BeanUtils.copyProperties(source, target);
	}

	public static String getTendCode() {
		return "test_test014";
	}
}
