package com.jzy.hio.platform.login.util;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.oauth2.common.OAuth2AccessToken;
import org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore;
import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;
import redis.clients.jedis.JedisPoolConfig;

import java.util.Collections;
import java.util.Enumeration;

@Configuration
public class TokenUtil {
    private static final Logger logger = LoggerFactory.getLogger(TokenUtil.class);

    private static String host;
    private static int port;
    private static String password;
    private static int timeout;
    private static int database;

    @Value("${spring.redis.host}")
    public void setHost(String host) {
        TokenUtil.host = host;
    }

    @Value("${spring.redis.port}")
    public void setPort(int port) {
        TokenUtil.port = port;
    }

    @Value("${spring.redis.password}")
    public void setPassword(String password) {
        TokenUtil.password = password;
    }

    @Value("${spring.redis.timeout}")
    public  void setTimeout(int timeout) {
        TokenUtil.timeout = timeout;
    }
    @Value("${spring.redis.database}")
    public  void setDatabase(int database) {
        TokenUtil.database = database;
    }

    public static  JedisPool JEDIS_POOL;

    @Autowired @Qualifier("tokenRedisConfig")
    private static JedisPoolConfig config;

    @ConfigurationProperties(prefix = "spring.redis.pool")
    @Bean(name="tokenRedisConfig")
    public JedisPoolConfig jedisPoolConfig() {
        config = new JedisPoolConfig();
        return config;
    }
    private static Jedis getJedis() {
        if(JEDIS_POOL==null) {
            JEDIS_POOL = new JedisPool(config, host, port, timeout, password, database);
        }
        return JEDIS_POOL.getResource();

    }

    /**
     *  删除token
     * @param mobile
     * @return
     */
    public static long delToken(String mobile) {
        Jedis jedis = getJedis();
        try {
            long i= jedis.del("uname_to_access:hio_oauth:"+mobile);
            return i;
        } catch (Exception e) {
            e.printStackTrace();
            logger.error("delToken error,{}", mobile);
        } finally {
            jedis.close();
        }
        return 0;
    }
    /**
     * 删除所有旧密码token
     * @param userName
     */
    public static void removeToken(RedisTokenStore redisTokenStore,String userName) {
        Enumeration<OAuth2AccessToken> tokenEnumeration = Collections.enumeration(redisTokenStore
                .findTokensByClientIdAndUserName("hio_oauth", userName));
        while (tokenEnumeration.hasMoreElements()) {
            redisTokenStore.removeAccessToken(tokenEnumeration.nextElement().getValue());
        }
        tokenEnumeration = Collections.enumeration(redisTokenStore
                .findTokensByClientIdAndUserName("hio_oauth", userName + "_app"));
        while (tokenEnumeration.hasMoreElements()) {
            redisTokenStore.removeAccessToken(tokenEnumeration.nextElement().getValue());
        }
    }


}
