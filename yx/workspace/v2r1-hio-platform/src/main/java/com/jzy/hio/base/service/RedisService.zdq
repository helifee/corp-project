package com.jzy.hio.base.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.data.redis.connection.RedisConnection;
import org.springframework.data.redis.core.RedisCallback;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.ValueOperations;
import org.springframework.data.redis.serializer.RedisSerializer;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import javax.annotation.Resource;

/**
 * 通过使用redis实现分布式锁
 */
@Component
public class RedisService {

    @Autowired
    public RedisTemplate<Object,Object> redisTemplate;

    @Resource(name="redisTemplate")
    public ValueOperations<Object,Object> valOps;

    /**
     * 使用redis setnx rides锁
     * 如果键已存在则返回false
     */
    @PostMapping
    public boolean addRedisSetnx(final String skey,final String sname) {
        boolean result = redisTemplate.execute(new RedisCallback<Boolean>() {
            public Boolean doInRedis(RedisConnection connection)
                    throws DataAccessException {
                RedisSerializer<String> serializer = redisTemplate.getStringSerializer();
                byte[] key  = serializer.serialize(skey);
                byte[] name = serializer.serialize(sname);
                Boolean aBoolean = connection.setNX(key, name);
                return aBoolean;
            }
        }, false, false);
        return result;
    }
    /**
     * 通过key释放rides中锁的信息
     */
    @RequestMapping("/releaseRedisSetnx")
    public boolean releaseRedisSetnx(final String skey) {
        return redisTemplate.execute(new RedisCallback<Boolean>() {
            public Boolean doInRedis(RedisConnection connection) throws DataAccessException {
                RedisSerializer<String> serializer = redisTemplate.getStringSerializer();
                byte[] key  = serializer.serialize(skey);
                Long del = connection.del(key);
                if(del==1){
                    return true;
                }else{
                    return false;
                }
            }
        });
    }
}
