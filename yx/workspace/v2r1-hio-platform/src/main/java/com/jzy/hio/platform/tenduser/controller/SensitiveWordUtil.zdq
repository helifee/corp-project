package com.jzy.hio.platform.tenduser.controller;

//import org.wltea.analyzer.core.IKSegmenter;
//import org.wltea.analyzer.core.Lexeme;

import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

/**
 * 敏感词处理工具 - IKAnalyzer中文分词工具 - 借助分词进行敏感词过滤
 *
 * @author sam
 * @since 2017/9/4
 */
public class SensitiveWordUtil {

    /**
     * 敏感词集合
     */
    public static HashMap sensitiveWordMap;

    static {
        Properties prop = new Properties();
        try {
        InputStreamReader instream = new InputStreamReader(SensitiveWordUtil.class.getClassLoader().getResourceAsStream("SensitiveWord.properties"),"gbk");
        prop.load(instream);
        } catch (IOException e) {
            e.printStackTrace();
        }
        String sensitiveWord = prop.getProperty("SensitiveWord","UTF-8");
       // System.out.println("sensitiveWord: "+sensitiveWord);
        String[] works = sensitiveWord.split("\\/");
        if(works!= null){
            Set<String> sensitiveWordSet = new HashSet<>();
            for (int i =0;i<works.length; i ++){
               // System.out.println("works:"+works[i]);
                sensitiveWordSet.add(works[i]);
                //初始化敏感词库
                SensitiveWordUtil.init(sensitiveWordSet);
            }
        }

    }

    /**
     * 初始化敏感词库
     *
     * @param sensitiveWordSet 敏感词库
     */
    public static synchronized void init(Set<String> sensitiveWordSet) {
        //初始化敏感词容器，减少扩容操作
        sensitiveWordMap = new HashMap(sensitiveWordSet.size());
        for (String sensitiveWord : sensitiveWordSet) {
            sensitiveWordMap.put(sensitiveWord, sensitiveWord);
        }
    }

    /**
     * 判断文字是否包含敏感字符
     *
     * @param txt 文字
     * @return 若包含返回true，否则返回false
     */
    public static boolean contains(String txt) throws Exception {
        boolean flag = false;
        List<String> wordList = segment(txt);
        for (String word : wordList) {
            if (sensitiveWordMap.get(word) != null) {
                return true;
            }
        }
        return flag;
    }

    /**
     * 判断文字是否包含敏感字符meeeeeeeeeeeeeeeeeeee
     *
     * @param txt 文字
     * @return 若包含返回true，否则返回false
     */
    public static boolean containsMe(String txt) throws Exception {
        boolean flag = false;
        Set<String> keys = sensitiveWordMap.keySet();

        for(String key :keys){
            if(txt.indexOf(key) != -1){
                return true;
            }
        }
        return flag;
    }



    /**
     * 获取文字中的敏感词
     *
     * @param txt 文字
     * @return
     */
    public static Set<String> getSensitiveWord(String txt) throws IOException {
        Set<String> sensitiveWordList = new HashSet<>();

        List<String> wordList = segment(txt);
        for (String word : wordList) {
            if (sensitiveWordMap.get(word) != null) {
                sensitiveWordList.add(word);
            }
        }
        return sensitiveWordList;
    }
    /**
     * 获取文字中的敏感词
     *
     * @param txt 文字
     * @return
     */
    public static Set<String> getSensitiveWordMe(String txt) throws IOException {
        Set<String> sensitiveWordList = new HashSet<>();

        Set<String> keys = sensitiveWordMap.keySet();

        for(String key :keys){
            if(txt.indexOf(key) != -1){
                sensitiveWordList.add(key);
            }
        }

        return sensitiveWordList;
    }


    /**
     * 替换敏感字字符
     *
     * @param txt         文本
     * @param replaceChar 替换的字符，匹配的敏感词以字符逐个替换，如 语句：我爱中国人 敏感词：中国人，替换字符：*， 替换结果：我爱***
     * @return
     */
    public static String replaceSensitiveWord(String txt, char replaceChar) throws IOException {
        String resultTxt = txt;
        //获取所有的敏感词
        Set<String> sensitiveWordList = getSensitiveWordMe(txt);
        String replaceString;
        for (String sensitiveWord : sensitiveWordList) {
            replaceString = getReplaceChars(replaceChar, sensitiveWord.length());
            resultTxt = resultTxt.replaceAll(sensitiveWord, replaceString);
        }
        return resultTxt;
    }

    /**
     * 替换敏感字字符
     *
     * @param txt        文本
     * @param replaceStr 替换的字符串，匹配的敏感词以字符逐个替换，如 语句：我爱中国人 敏感词：中国人，替换字符串：[屏蔽]，替换结果：我爱[屏蔽]
     * @return
     */
    public static String replaceSensitiveWord(String txt, String replaceStr) throws IOException {
        String resultTxt = txt;
        //获取所有的敏感词
        Set<String> sensitiveWordList = getSensitiveWordMe(txt);
        for (String sensitiveWord : sensitiveWordList) {
            resultTxt = resultTxt.replaceAll(sensitiveWord, replaceStr);
        }
        return resultTxt;
    }

    /**
     * 获取替换字符串
     *
     * @param replaceChar
     * @param length
     * @return
     */
    private static String getReplaceChars(char replaceChar, int length) {
        String resultReplace = String.valueOf(replaceChar);
        for (int i = 1; i < length; i++) {
            resultReplace += replaceChar;
        }

        return resultReplace;
    }

    /**
     * 对语句进行分词
     *
     * @param text 语句
     * @return 分词后的集合
     * @throws IOException
     */
    private static List segment(String text) throws IOException {
        List<String> list = new ArrayList<>();
//        StringReader re = new StringReader(text);
//        IKSegmenter ik = new IKSegmenter(re, true);
//        Lexeme lex;
//        while ((lex = ik.next()) != null) {
//            list.add(lex.getLexemeText());
//        }
        return list;
    }

    public static void main(String[] args) throws IOException {

//        Set<String> sensitiveWordSet = new HashSet<>();
//        sensitiveWordSet.add("fa lun");
//        sensitiveWordSet.add("宏志");
//        sensitiveWordSet.add("静静");
//        sensitiveWordSet.add("哈哈");
//        sensitiveWordSet.add("法轮");
//        sensitiveWordSet.add("感动");
//        sensitiveWordSet.add("真善忍");
//        //初始化敏感词库
//        SensitiveWordUtil.init(sensitiveWordSet);

        /**
         * 需要进行处理的目标字符串
         */
        System.out.println("敏感词的数量：" + SensitiveWordUtil.sensitiveWordMap.size());
        String string = "洪志/法轮/宏志/真善忍/大法/fa lun/falun/发轮/发伦/发抡/发沦/发囵/发仑/发纶/法纶/法仑/法囵/法沦/法抡/法伦/功友/弟子/师傅/师父/法论/发论/法.轮.功/法 轮 功/自焚/自焚/玄机/徒弟/开坛/活祭/教主";
        System.out.println("待检测语句字数：" + string.length());

        /**
         * 是否含有关键字
         */
        try {
            boolean result = SensitiveWordUtil.containsMe(string);
            System.out.println(result);
        } catch (Exception e) {
            e.printStackTrace();
        }

        /**
         * 获取语句中的敏感词
         */
        Set<String> set = SensitiveWordUtil.getSensitiveWordMe(string);
        System.out.println("语句中包含敏感词的个数为：" + set.size() + "。包含：" + set);

        /**
         * 替换语句中的敏感词
         */
        String filterStr = SensitiveWordUtil.replaceSensitiveWord(string, '*');
        System.out.println(filterStr);

        String filterStr2 = SensitiveWordUtil.replaceSensitiveWord(string, "[*敏感词*]");
        System.out.println(filterStr2);
    }

}