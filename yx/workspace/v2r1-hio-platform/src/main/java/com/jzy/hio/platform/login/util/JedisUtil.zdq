//package com.jzy.hio.platform.login.util;
//
//import java.util.ArrayList;
//import java.util.HashMap;
//import java.util.List;
//import java.util.Map;
//
//import org.slf4j.Logger;
//import org.slf4j.LoggerFactory;
//import org.springframework.beans.factory.annotation.Value;
//import org.springframework.http.converter.json.GsonBuilderUtils;
//
//import com.google.gson.GsonBuilder;
//
//import redis.clients.jedis.Jedis;
//import redis.clients.jedis.JedisPool;
//import redis.clients.jedis.JedisPoolConfig;
//
////@Configuration
//public class JedisUtil {
//
//    private static final Logger logger = LoggerFactory.getLogger(JedisUtil.class);
//
//    private static  JedisPool jedisPool;
//
//
//    static  String  host;
//    static int port;
//    static String password;
//    @Value("${spring.redis.host}")
//    public void setHost(String host) {
//        JedisUtil.host = host;
//    }
//
//    @Value("${spring.redis.port}")
//    public void setPort(int port) {
//        JedisUtil.port = port;
//    }
//
//    @Value("${spring.redis.password}")
//    public void setPassword(String password) {
//        JedisUtil.password = password;
//    }
////    static {
////        JedisPoolConfig config = new JedisPoolConfig();//redis连接池配置对象
////        config.setMaxTotal(32);//最大连接数
////        config.setMaxIdle(6);//闲置最大连接数
////        config.setMinIdle(0);//闲置最小连接数
////        config.setMaxWaitMillis(15000);//到达最大连接数后，调用者阻塞时间
////        config.setMinEvictableIdleTimeMillis(300000);//连接空闲的最小时间，可能被移除
////        config.setSoftMinEvictableIdleTimeMillis(-1);//连接空闲的最小时间，多余最小闲置连接的将被移除
////        config.setNumTestsPerEvictionRun(3);//设置每次检查闲置的个数
////        config.setTestOnBorrow(false);//申请连接时，是否检查连接有效
////        config.setTestOnReturn(false);//返回连接时，是否检查连接有效
////        config.setTestWhileIdle(false);//空闲超时,是否执行检查有效
////        config.setTimeBetweenEvictionRunsMillis(60000);//空闲检查时间
////        config.setBlockWhenExhausted(true);//当连接数耗尽，是否阻塞
////
////        //连接池配置对象+ip+port+timeout+password+dbname
////        JEDIS_POOL = new JedisPool(config, host, port, 15000, password, 1);
////    }
//
//    private static JedisPoolConfig config;
//    public static JedisPoolConfig getRedisConfig() {
//        if (config == null) {
//            config = new JedisPoolConfig();
//            config.setMaxTotal(32);// 最大连接数
//            config.setMaxIdle(6);// 闲置最大连接数
//            config.setMinIdle(0);// 闲置最小连接数
//            config.setMaxWaitMillis(15000);// 到达最大连接数后，调用者阻塞时间
//            config.setMinEvictableIdleTimeMillis(300000);// 连接空闲的最小时间，可能被移除
//            config.setSoftMinEvictableIdleTimeMillis(-1);// 连接空闲的最小时间，多余最小闲置连接的将被移除
//            config.setNumTestsPerEvictionRun(3);// 设置每次检查闲置的个数
//            config.setTestOnBorrow(false);// 申请连接时，是否检查连接有效
//            config.setTestOnReturn(false);// 返回连接时，是否检查连接有效
//            config.setTestWhileIdle(false);// 空闲超时,是否执行检查有效
//            config.setTimeBetweenEvictionRunsMillis(60000);// 空闲检查时间
//            config.setBlockWhenExhausted(true);// 当连接数耗尽，是否阻塞
//        }
//        return config;
//    }
//    private static JedisPool getJedisPool() {
//        if (jedisPool == null) {
//            jedisPool = new JedisPool(getRedisConfig(), host, port, 15000, password, 1);
//        }
//        return jedisPool;
//    }
//    /*
//     * 根据key查询数据
//     *
//     * @param tableName
//     *
//     * @param mobile
//     *
//     * @return
//     */
//    public static Map<String, String> fetchRelationRow(String key) {
//        Jedis jedis = getJedisPool().getResource();
//        GsonBuilder gson = GsonBuilderUtils.gsonBuilderWithBase64EncodedByteArrays();
//        try {
//            Map<String, String> m = jedis.hgetAll(key);
//            return m;
//        } catch (Exception e) {
//            e.printStackTrace();
//            logger.error("fetchRelationRow error,{}", gson.create().toJson(key));
//        } finally {
//            jedis.close();
//        }
//        return null;
//    }
//    /**
//     * 存redis表
//     * @param row
//     * @param tableName
//     * @return
//     */
//    public static String addRow(String tableName,Map row) {
//        Jedis jedis = getJedisPool().getResource();
//        GsonBuilder gson = GsonBuilderUtils.gsonBuilderWithBase64EncodedByteArrays();
//        try {
//            Map table = new HashMap();
//            table.put(row.get("id").toString(), gson.create().toJson(row));
//            table.put("table_name", tableName);
//            return jedis.hmset(tableName, table);
//        } catch (Exception e) {
//            e.printStackTrace();
//            logger.error("addRow error,{},{}", gson.create().toJson(row),tableName);
//        } finally {
//            jedis.close();
//        }
//        return null;
//    }
//    /**
//     *  存短信验证码
//     * @param mobile
//     * @param value
//     * @return
//     */
//    public static String addSmsCode(String mobile,String value) {
//        Jedis jedis = getJedisPool().getResource();
//        GsonBuilder gson = GsonBuilderUtils.gsonBuilderWithBase64EncodedByteArrays();
//        try {
//            String status=jedis.set("smscode:"+mobile, String.valueOf(value));
//            jedis.expire("smscode:"+mobile,60);
//            return status;
//        } catch (Exception e) {
//            e.printStackTrace();
//            logger.error("addSmsCode error,{},{}", mobile,value);
//        } finally {
//            jedis.close();
//        }
//        return null;
//    }
//
//    /**
//     *  存图片验证码
//     * @param mobile
//     * @param value
//     * @return
//     */
//    public static String addPicVilidateCode(String mobile,String value) {
//        Jedis jedis = getJedisPool().getResource();
//        GsonBuilder gson = GsonBuilderUtils.gsonBuilderWithBase64EncodedByteArrays();
//        try {
//            String status=jedis.set(Constants.key_prefix_pic+mobile, String.valueOf(value));
//            jedis.expire(Constants.key_prefix_pic+mobile,60);
//            return status;
//        } catch (Exception e) {
//            e.printStackTrace();
//            logger.error("picVilidateCode error,{},{}", mobile,value);
//        } finally {
//            jedis.close();
//        }
//        return null;
//    }
//    /**
//     * 修改redis表数据
//     * @return
//     */
//    public static Long  editRow(String tableName,Map<String,String> row ) {
//        Jedis jedis = getJedisPool().getResource();
//        GsonBuilder gson = GsonBuilderUtils.gsonBuilderWithBase64EncodedByteArrays();
//        try {
//            if(row.get("id")!=null) {
//                String data=fetchRow(tableName, String.valueOf(row.get("id")));
//                Map<String,String> old=gson.create().fromJson(data,Map.class);
//                for (String key : row.keySet()) {
//                    old.put(key,row.get(key).toString());
//                }
//                return jedis.hset(tableName,row.get("id").toString(),gson.create().toJson(old));
//            }else {
//                return null;
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//            logger.error("editRow error,{}", gson.create().toJson(row));
//        } finally {
//            jedis.close();
//        }
//        return null;
//    }
//
//    /**
//     * 获取redis表数据
//     * @return
//     */
//    public static String fetchRow(String tableName,String  id) {
//        Jedis jedis = getJedisPool().getResource();
//        GsonBuilder gson = GsonBuilderUtils.gsonBuilderWithBase64EncodedByteArrays();
//        try {
//            String m=jedis.hget(tableName,id);
//            return m;
//        } catch (Exception e) {
//            e.printStackTrace();
//            logger.error("fetchRow error,{}", gson.create().toJson(id));
//        } finally {
//            jedis.close();
//        }
//        return null;
//    }
//    /**
//     * 获取redis key数据
//     * @return
//     */
//    public static String getKey(String  id) {
//        Jedis jedis = getJedisPool().getResource();
//        GsonBuilder gson = GsonBuilderUtils.gsonBuilderWithBase64EncodedByteArrays();
//        try {
//            String m=jedis.get(id);
//            return m;
//        } catch (Exception e) {
//            e.printStackTrace();
//            logger.error("getKey error,{}", gson.create().toJson(id));
//        } finally {
//            jedis.close();
//        }
//        return null;
//    }
//    /**
//     * 获取redis表数据
//     * @return
//     */
//    public static Long delRow(String tableName,String  id) {
//        Jedis jedis = getJedisPool().getResource();
//        GsonBuilder gson = GsonBuilderUtils.gsonBuilderWithBase64EncodedByteArrays();
//        try {
//            Long m=jedis.hdel(tableName,id);
//            return m;
//        } catch (Exception e) {
//            e.printStackTrace();
//            logger.error("delRow error,{}", gson.create().toJson(id));
//        } finally {
//            jedis.close();
//        }
//        return null;
//    }
//
//
//
//    /**
//     * 创建session
//     * @param value
//     * @param mobile
//     * @return
//     */
//    public static String createSession(Map value, String mobile) {
//        Jedis jedis = getJedisPool().getResource();
//        GsonBuilder gson = GsonBuilderUtils.gsonBuilderWithBase64EncodedByteArrays();
//        try {
//            String status=jedis.hmset("session:"+mobile, value);
//            jedis.expire("session:"+mobile,Constants.sessionlife);
//            return status;
//        } catch (Exception e) {
//            e.printStackTrace();
//            logger.error("createSession error,{},{}", gson.create().toJson(value),mobile);
//        } finally {
//            jedis.close();
//        }
//        return null;
//    }
//    /**
//     * 通过redis获取表主键序列 <br/>
//     * 10000以下的数值预留给sql脚本
//     *
//     * @param tableName
//     * @return
//     */
//    public static String generateKey(String tableName) {
//        Jedis jedis = getJedisPool().getResource();
//        try {
//            long key = jedis.incrBy("sequence:" + tableName, 1);
//            return String.valueOf(10000 + key);
//        } catch (Exception e) {
//            e.printStackTrace();
//            logger.error("generateKey error,{}", tableName);
//        } finally {
//            jedis.close();
//        }
//        return null;
//
//    }
//    /**
//     * 获取session
//     * @param mobile
//     * @return
//     */
//    public static Map fetchSession(String mobile) {
//        Jedis jedis = getJedisPool().getResource();
//        GsonBuilder gson = GsonBuilderUtils.gsonBuilderWithBase64EncodedByteArrays();
//        try {
//            Map m=jedis.hgetAll("session:"+mobile);
//            return m;
//        } catch (Exception e) {
//            e.printStackTrace();
//            logger.error("fetchSession error,{}", gson.create().toJson(mobile));
//        } finally {
//            jedis.close();
//        }
//        return null;
//    }
//
//    /**
//	 * 添加手机号索引
//	 *
//	 * @param tableName
//	 * @param mobile
//	 * @return
//	 */
//	public static String addIndexMobile(String tableName, String mobile, String userid) {
//		Jedis jedis = getJedisPool().getResource();
//		try {
//			Map table = new HashMap();
//			table.put("table_name", tableName);
//			table.put(mobile, userid);
//			return jedis.hmset("index:" + tableName + ":mobile", table);
//		} catch (Exception e) {
//			e.printStackTrace();
//			logger.error("addIndexMobile error,{},{}", mobile, tableName);
//		} finally {
//			jedis.close();
//		}
//		return null;
//	}
//
//	/**
//	 * 根据key编辑数据
//	 *
//	 * @param tableName
//	 * @param mobile
//	 * @return
//	 */
//	public static String addListRow(String key, Map map) {
//		Jedis jedis = getJedisPool().getResource();
//		GsonBuilder gson = GsonBuilderUtils.gsonBuilderWithBase64EncodedByteArrays();
//		try {
//			Map table = new HashMap();
//			table.put(map.get("id"), gson.create().toJson(map));
//			// table.put("table_name", key);
//			// return jedis.lpush(key, gson.create().toJson(map));
//			return jedis.hmset(key, table);
//		} catch (Exception e) {
//			e.printStackTrace();
//			logger.error("addRelationRow error,{}", gson.create().toJson(key));
//		} finally {
//			jedis.close();
//		}
//		return null;
//	}
//
//    public static void main(String[] a) {
//        Map<String,String> s = new HashMap();
//        s.put("id", "2");
//        s.put("name", "admin");
//        s.put("code","4526");
//        s.put("codeUrl","http://lo/a.jpg");
//
//        Map<String,String> s2 = new HashMap();
//        s2.put("id", "2");
//        s2.put("name", "admin");
//        s2.put("code","4526");
//        s2.put("codeUrl","http://lo/a.jpg");
//
//        GsonBuilder gson = GsonBuilderUtils.gsonBuilderWithBase64EncodedByteArrays();
//
//        Jedis jedis = getJedisPool().getResource();
//
//        Map m1=new HashMap();
//        m1.put("userid","1");
//        m1.put("colledge_hide_mobile","1");
//        List l=new ArrayList();
//        l.add(s);
//        l.add(s2);
//        m1.put("data",gson.create().toJson(l));
//        jedis.hmset("myfriend：2",m1);
//
//        Map<String, String> v=jedis.hgetAll("myfriend：2");
//        List vm=gson.create().fromJson(v.get("data"),List.class);
//        logger.info(v.get("data"));
//
//
////        logger.info(JedisUtil.createSession(s, "13245632542"));
//
////        GsonBuilder gson = GsonBuilderUtils.gsonBuilderWithBase64EncodedByteArrays();
////        logger.info(gson.create().toJson(JedisUtil.fetchSession("13245632542")));
//
////        JedisUtil.delRow("table:user","1");
//
//
//    }
//
//
//}
