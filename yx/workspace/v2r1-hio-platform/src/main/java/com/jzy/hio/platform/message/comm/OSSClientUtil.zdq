package com.jzy.hio.platform.message.comm;

import java.io.IOException;
import java.io.InputStream;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.stereotype.Component;

import com.aliyun.oss.ClientException;
import com.aliyun.oss.OSSClient;
import com.aliyun.oss.OSSException;
import com.aliyun.oss.model.GetObjectRequest;
import com.aliyun.oss.model.OSSObject;
import com.aliyun.oss.model.ObjectMetadata;
import com.jzy.hio.exception.HioException;

/**
 * OSS工具类
 */
@Component
//@RefreshScope
public class OSSClientUtil {
	
	private static Logger logger = LoggerFactory.getLogger(OSSClientUtil.class);

	// endpoint是访问OSS的域名。如果您已经在OSS的控制台上 创建了Bucket，请在控制台上查看域名。
    // 如果您还没有创建Bucket，endpoint选择请参看文档中心的“开发人员指南 > 基本概念 > 访问域名”，
    // 链接地址是：https://help.aliyun.com/document_detail/oss/user_guide/oss_concept/endpoint.html?spm=5176.docoss/user_guide/endpoint_region
    // endpoint的格式形如“http://oss-cn-hangzhou.aliyuncs.com/”，注意http://后不带bucket名称，
    // 比如“http://bucket-name.oss-cn-hangzhou.aliyuncs.com”，是错误的endpoint，请去掉其中的“bucket-name”。

    private static String endpoint ;
    //private static String endpoint = "http://oss-cn-beijing-internal.aliyuncs.com";

    // accessKeyId和accessKeySecret是OSS的访问密钥，您可以在控制台上创建和查看，
    // 创建和查看访问密钥的链接地址是：https://ak-console.aliyun.com/#/。
    // 注意：accessKeyId和accessKeySecret前后都没有空格，从控制台复制时请检查并去除多余的空格。

    private static String accessKeyId;


    private static String accessKeySecret;

    private static OSSClient ossClient = null;
    
    /**
     * 获取OSSClient实例
     * @return
     */
    public static OSSClient getOSSClient(){
    	if(ossClient == null){
    		ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);
    	}
    	return ossClient;
    }
    
    /**
     * 关闭OSSClient
     */
    public static void closeOSSClient(){
    	if(ossClient != null){
    		ossClient.shutdown();
    	}
    }
    
    /**
     * 创建bucket
     * @param bucketName
     */
    public static void createBucket(String bucketName){
    	try {
			getOSSClient().createBucket(bucketName);
		} catch (OSSException e) {
			logger.error("创建bucket异常！Error Code: "+e.getErrorCode() +" Error Message: "+e.getErrorMessage()+" Request ID: "+e.getRequestId());
		} catch (ClientException e) {
			logger.error("创建bucket异常！Error Code: "+e.getErrorCode() +" Error Message: "+e.getErrorMessage()+" Request ID: "+e.getRequestId());
		}
    }
    
    /**
     * 上传文件
     * @param bucketName
     * @param key
     * @param inputStream
     */
    public static void uploadFile(String bucketName, String key, InputStream inputStream){
    	// 判断Bucket是否存在
    	if(!getOSSClient().doesBucketExist(bucketName)){
    		createBucket(bucketName);
    	}
    	try {
    	    getOSSClient().putObject(bucketName, key, inputStream);
    	} catch (OSSException e) {
            throw new HioException("上传文件异常！Error Code: "+e.getErrorCode() +" Error Message: "+e.getErrorMessage()+" Request ID: "+e.getRequestId());
		} catch (ClientException e) {
            throw new HioException("上传文件异常！Error Code: "+e.getErrorCode() +" Error Message: "+e.getErrorMessage()+" Request ID: "+e.getRequestId());
		}
    }
    
    /**
     * 设置元信息上传文件
     * @param bucketName
     * @param key
     * @param inputStream
     * @param metadata
     */
    public static void   uploadFile(String bucketName, String key, InputStream inputStream, ObjectMetadata metadata){
    	// 判断Bucket是否存在
    	if(!getOSSClient().doesBucketExist(bucketName)){
    		createBucket(bucketName);
    	}
		    getOSSClient().putObject(bucketName, key, inputStream, metadata);

    }
    
    /**
     * 下载文件
     * @param bucketName
     * @param key
     * @return
     * @throws IOException
     */
    public static OSSObject downloadFile(String bucketName, String key){
    	OSSObject ossObject = null;
    	try {
			ossObject = getOSSClient().getObject(bucketName, key);
    	} catch (OSSException e) {
			logger.error("下载文件异常！Error Code: "+e.getErrorCode() +" Error Message: "+e.getErrorMessage()+" Request ID: "+e.getRequestId());
		} catch (ClientException e) {
			logger.error("下载文件异常！Error Code: "+e.getErrorCode() +" Error Message: "+e.getErrorMessage()+" Request ID: "+e.getRequestId());
		}
    	return ossObject;
    }
    
    /**
     * 下载图片
     * @param bucketName
     * @param key
     * @return
     * @throws IOException
     */
    public static OSSObject downloadImage(String bucketName, String key){
    	OSSObject ossObject = null;
    	try {
    		String style = "image/resize,m_lfit,w_150,h_150";  
            GetObjectRequest request = new GetObjectRequest(bucketName, key);
            request.setProcess(style);
			ossObject = getOSSClient().getObject(request);
    	} catch (OSSException e) {
			logger.error("下载文件异常！Error Code: "+e.getErrorCode() +" Error Message: "+e.getErrorMessage()+" Request ID: "+e.getRequestId());
		} catch (ClientException e) {
			logger.error("下载文件异常！Error Code: "+e.getErrorCode() +" Error Message: "+e.getErrorMessage()+" Request ID: "+e.getRequestId());
		}
    	return ossObject;
    }
    
    /**
     * 删除文件
     * @param bucketName
     * @param key
     */
    public static void deleteFile(String bucketName, String key){
    	try {
			getOSSClient().deleteObject(bucketName, key);
    	} catch (OSSException e) {
			logger.error("删除文件异常！Error Code: "+e.getErrorCode() +" Error Message: "+e.getErrorMessage()+" Request ID: "+e.getRequestId());
		} catch (ClientException e) {
			logger.error("删除文件异常！Error Code: "+e.getErrorCode() +" Error Message: "+e.getErrorMessage()+" Request ID: "+e.getRequestId());
		}
    }
    
    /**
     * 判断文件是否存在
     * @param bucketName
     * @param key
     * @return
     */
    public static boolean existFile(String bucketName, String key){
    	boolean b = true;
		try {
			b = getOSSClient().doesObjectExist(bucketName, key);
		} catch (OSSException e) {
			logger.error("判断文件是否存在异常！Error Code: "+e.getErrorCode() +" Error Message: "+e.getErrorMessage()+" Request ID: "+e.getRequestId());
		} catch (ClientException e) {
			logger.error("判断文件是否存在异常！Error Code: "+e.getErrorCode() +" Error Message: "+e.getErrorMessage()+" Request ID: "+e.getRequestId());
		}
    	return b;
    }
	@Value("${oss.endpoint}")
	public   void setEndpoint(String endpoint) {
		OSSClientUtil.endpoint = endpoint;
	}
	@Value("${oss.accessKeyId}")
	public   void setAccessKeyId(String accessKeyId) {
		OSSClientUtil.accessKeyId = accessKeyId;
	}
	@Value("${oss.accessKeySecret}")
	public   void setAccessKeySecret(String accessKeySecret) {
		OSSClientUtil.accessKeySecret = accessKeySecret;
	}


	public static String getEndpoint() {
		return endpoint;
	}

	public static String getAccessKeyId() {
		return accessKeyId;
	}

	public static String getAccessKeySecret() {
		return accessKeySecret;
	}

	public static OSSClient getOssClient() {
		return ossClient;
	}

	public static void setOssClient(OSSClient ossClient) {
		OSSClientUtil.ossClient = ossClient;
	}
}
