package com.jzy.hio;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
import org.springframework.cloud.netflix.feign.EnableFeignClients;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.EnableAspectJAutoProxy;
import org.springframework.context.annotation.Import;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.jzy.hio.aop.DataSourceAop;
import com.jzy.hio.database.DataSourceRegister;

@Import({ DataSourceRegister.class })
@MapperScan(value = { "com.jzy.hio.**.mapper.*", "com.jzy.hio.base.datasource.DataSourceBeanMapper"})
@EnableEurekaClient
@EnableFeignClients // 开启feign注解扫描、可以调用feign服务
@EnableCircuitBreaker
@SpringBootApplication
// 使用CGLIB代理。默认使用jdk
@EnableAspectJAutoProxy(proxyTargetClass = true, exposeProxy = true)
@EnableScheduling
public class HioPlatformApplication  {

	/**
	 * 加载SpringBeanUtil<br/>
	 * <br/>
	 *
	 */
	public static void main(String[] args) {
//		args = new String[] { "--spring.profiles.active=dev" };
		DataSourceAop.setExcludePackages("com.jzy.hio.platform");
//		SpringApplication application = new SpringApplication(HioPlatformApplication.class);
//		application.setBannerMode(Mode.OFF);
//		application.run(args);
		// new SpringApplicationBuilder(HioPortalApplication.class).web(true).run(args);
		SpringApplication.run(HioPlatformApplication.class, args);

		System.out.println("【【【【【【 HioPlatformApplication微服务 】】】】】】已启动.");
	}

//	@Bean
//	MultipartConfigElement multipartConfigElement() {
//		MultipartConfigFactory factory = new MultipartConfigFactory();
//		factory.setLocation("c:/tmp");
//		return factory.createMultipartConfig();
//	}


	@Bean
	public RestTemplate restTemplate(){
		return new RestTemplate();
	}
	
	@Bean
    public RedisTemplate<Object, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) {
        RedisTemplate<Object, Object> redisTemplate = new RedisTemplate<>();
        redisTemplate.setConnectionFactory(redisConnectionFactory);

        // 使用Jackson2JsonRedisSerialize 替换默认序列化
        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);

        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);

        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);

        // 设置value的序列化规则和 key的序列化规则
        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);
        redisTemplate.setKeySerializer(new StringRedisSerializer());
        redisTemplate.afterPropertiesSet();
        return redisTemplate;
    }
}
