package com.jzy.hio.platform.userinfo.service;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.rabbit.annotation.RabbitHandler;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.jzy.hio.base.Base;
import com.jzy.hio.entity.UserInfo;
import com.rabbitmq.client.Channel;

/**
 * 创建消息消费者
 */
@Component
public class UserInfoReceiver {
	protected Logger logger = LoggerFactory.getLogger(this.getClass());
	@Autowired
	private UserInfoService userInfoService;
	
    /**
     * 消费操作为输出消息的字符串内容
     * @param hello
     */
	@RabbitListener(queues = "${queue.imUserInfoQueue}", containerFactory="rabbitListenerContainerFactory")
    @RabbitHandler
    public void process(Message message, Channel channel) {
    	try {
	        System.out.println("Receiver : " + message.getBody());
	        logger.info("mq保存用户：" + message.getBody());
	        String body = new String(message.getBody(),"utf-8");
	        UserInfo userInfo = Base.json2obj(body, UserInfo.class);
	        userInfo.setCreatePersonName("");
        	userInfo.setUpdatePersonName("");
        	userInfo.setCreatePersonId("");
        	userInfo.setUpdatePersonId("");
        	userInfo.setState(1);
        	userInfo.setSignature(Base.isEmpty(userInfo.getSignature())?"":userInfo.getSignature());
	        if(null != userInfoService.getObjectById(userInfo.getId())) {
	        	/*UserInfo param = new UserInfo();
	        	param.setMobile(userInfo.getMobile());
	        	param.setState(0);
	        	List<UserInfo> list = userInfoService.queryList(param);
	        	if(Base.isNotEmpty(list) && !Base.isEquals(list.get(0).getId(), userInfo.getId())) {
	        		userInfoService.deleteObjectById(list.get(0).getId());
	        	}*/
	        	userInfoService.update(userInfo);
	        }else {
	        	userInfoService.save(userInfo);
	        }
	        channel.basicAck(message.getMessageProperties().getDeliveryTag(), true);
    	}catch(Exception e) {
    		logger.error("mq保存用户失败：{}" , e.getMessage());
    	}
    }
}
