package com.jzy.hio.platform.userinfo.controller;

import java.security.Principal;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.controller.BasePlatformController;
import com.jzy.hio.entity.FriendInfo;
import com.jzy.hio.entity.PersonalSecret;
import com.jzy.hio.exception.HioMybatisGetException;
import com.jzy.hio.platform.constant.PersonalSwithContant;
import com.jzy.hio.platform.constant.UserOrFriendConstant;
import com.jzy.hio.platform.friendinfo.dto.FriendAliasDto;
import com.jzy.hio.platform.friendinfo.dto.FriendInfoDto;
import com.jzy.hio.platform.friendinfo.service.FriendInfoService;
import com.jzy.hio.platform.userinfo.param.PersonalSettingParam;
import com.jzy.hio.platform.userinfo.service.PersonalSecretService;
import com.jzy.hio.redis.JedisUtil;
import com.jzy.hio.springmvc.ApiResponse;

/**
 * 个人隐私设置
 * @author
 *
 */
@RestController
@RequestMapping("/personalsecret")
public class PersonalSecretController extends BasePlatformController<PersonalSecretService> {
	
	private static final Logger logger = LoggerFactory.getLogger(PersonalSecretController.class);
	@Autowired
	private PersonalSecretService personalSecretService;
	@Autowired
	private FriendInfoService friendInfoService;
	
	/**
	 * 个人隐私开关
	 * @param param 
	 * @return
	 */
	@PostMapping("/personalSwitch")
	public ApiResponse<Void> personalSwitch(@RequestBody PersonalSettingParam param){
		ApiResponse<Void> res = new ApiResponse<>(200, "修改成功");
		String uid = getUserIdIM();
		param.setUid(uid);
		if (StringUtils.isEmpty(uid)) {
			res.setStatus(101);
			res.setMessage("用户未登录");
			return res;
		}
		Integer switchStatus = param.getSwitchStatus();
		Integer switchType = param.getSwitchType();
		if (switchStatus == null || switchType == null) {
			res.setStatus(101);
			res.setMessage("参数为空或不正确");
			return res;
		}
		
		if(!switchStatus.equals(PersonalSwithContant.SWITCHON)) {
			switchStatus = PersonalSwithContant.SWITCHOFF;
		}
		
		if(switchType.equals(PersonalSwithContant.COMPANYSWITCH)) {
			// 查看企业开关
			personalSecretService.updateCompanyFlag(param);
		} else if(switchType.equals(PersonalSwithContant.WORKMOIBLESWITCH)) {
			// 同事隐藏手机号开关
			personalSecretService.updateWorkMoibleFlag(param);
		} else if(PersonalSwithContant.OPENRUNNINGSWITCH == switchType){
			// 运动隐私开关
			personalSecretService.updateOpenRunningFlag(param);
		} else {
			res.setStatus(102);
			res.setMessage("设置无效");
		}
	/*	else if(switchType.equals(3)) {
			// 手机通讯录匹配开关
			personalSecretService.updatePhoneFlag(param);
		} else {
			// 好友共享手机号开关
			personalSecretService.updateFriendMoibleFlag(param);
		}*/
		return res;
	}
	
	/**
	 * 获取个人隐私设置
	 * @param param 
	 * @return
	 */
	@PostMapping("/getPersonal")
	public ApiResponse<Object> getPersonal(Principal user){
		ApiResponse<Object> res = new ApiResponse<>(200, "查询成功");
		String uid = getUserIdIM();
		String json = JedisUtil.fetchRow(UserOrFriendConstant.im_personal_secret, uid);
		if(isNotEmpty(json)){
			PersonalSecret ps = json2obj(json,PersonalSecret.class);
			res.setResult(ps);
		}
		return res;
	}
	
//	/**
//	 * @Validated 可以检查参数
//	 * 查看企业开关
//	 * @param token
//	 * @param switchStatus
//	 * @return
//	 */
//	@PostMapping("/companyswitch")
//	public ApiResponse<Void> companySwitch(@RequestBody PersonalSettingParam param) {
//		ApiResponse<Void> res = new ApiResponse<>(200, "修改成功");
//		
//		String uid = param.getUid();
//		if (StringUtils.isEmpty(uid)) {
//			res.setStatus(101);
//			res.setMessage("用户未登录");
//			return res;
//		}
//		Integer switchStatus = param.getSwitchStatus();
//		if (switchStatus == null) {
//			res.setStatus(101);
//			res.setMessage("参数为空或不正确");
//			return res;
//		}
//		
//		if(!switchStatus.equals(switchOn)) {
//			switchStatus = switchOff;
//		}
//		
//		personalSecretService.updateCompanyFlag(param);
//		return res;
//	}
//	
//	/**
//	 * 手机通讯录匹配开关
//	 * @param token
//	 * @param switchStatus
//	 * @return
//	 */
//	@PostMapping("/phoneswitch")
//	public ApiResponse<Void> phoneSwitch(@RequestBody PersonalSettingParam param) {
//		ApiResponse<Void> res = new ApiResponse<>(200, "修改成功");
//		
//		String uid = param.getUid();
//		if (StringUtils.isEmpty(uid)) {
//			res.setStatus(101);
//			res.setMessage("用户未登录");
//			return res;
//		}
//		Integer switchStatus = param.getSwitchStatus();
//		if (switchStatus == null) {
//			res.setStatus(101);
//			res.setMessage("参数为空或不正确");
//			return res;
//		}
//		
//		if(!switchStatus.equals(switchOn)) {
//			switchStatus = switchOff;
//		}
//		
//		personalSecretService.updatePhoneFlag(param);
//		return res;
//	}
//	
//	/**
//	 * 好友共享手机号开关
//	 * @param token
//	 * @param switchStatus
//	 * @return
//	 */
//	@PostMapping("/friendmoibleswitch")
//	public ApiResponse<Void> friendMoibleSwitch(@RequestBody PersonalSettingParam param) {
//		ApiResponse<Void> res = new ApiResponse<>(200, "修改成功");
//		
//		String uid = param.getUid();
//		if (StringUtils.isEmpty(uid)) {
//			res.setStatus(101);
//			res.setMessage("用户未登录");
//			return res;
//		}
//		Integer switchStatus = param.getSwitchStatus();
//		if (switchStatus == null) {
//			res.setStatus(101);
//			res.setMessage("参数为空或不正确");
//			return res;
//		}
//		
//		if(!switchStatus.equals(switchOn)) {
//			switchStatus = switchOff;
//		}
//		
//		personalSecretService.updateFriendMoibleFlag(param);
//		return res;
//	}
//	
//	/**
//	 * 同事隐藏手机号开关
//	 * @param token
//	 * @param switchStatus
//	 * @return
//	 */
//	@PostMapping("/workmoibleswitch")
//	public ApiResponse<Void> workMoibleSwitch(@RequestBody PersonalSettingParam param) {
//		ApiResponse<Void> res = new ApiResponse<>(200, "修改成功");
//		
//		String uid = param.getUid();
//		if (StringUtils.isEmpty(uid)) {
//			res.setStatus(101);
//			res.setMessage("用户未登录");
//			return res;
//		}
//		Integer switchStatus = param.getSwitchStatus();
//		if (switchStatus == null) {
//			res.setStatus(101);
//			res.setMessage("参数为空或不正确");
//			return res;
//		}
//		
//		if(!switchStatus.equals(switchOn)) {
//			switchStatus = switchOff;
//		}
//		
//		personalSecretService.updateWorkMoibleFlag(param);
//		return res;
//	}
	
	/**
	 * 共享手机号好友列表
	 * @param token
	 * @return
	 * @throws Exception 
	 */
	@PostMapping("/shareList")
	public ApiResponse<List<FriendAliasDto>> shareList(){
		ApiResponse<List<FriendAliasDto>> returnResult = new ApiResponse<>();
		try {
			String uid = getUserIdIM();
			FriendInfo param = new FriendInfo();
			param.setFid(uid);
			param.setSharePhone(1);
			List<FriendAliasDto> list = friendInfoService.getShareFriendList(param);
			returnResult.setResult(list);
		} catch (Exception e) {
			returnResult.setStatus(500);
			returnResult.setMessage("系统出现错误，请稍后重试");
			logger.error("personalsecret/shareList error:{}", e);
			throw new HioMybatisGetException(e);
		}
		return returnResult;
	}
	
	/**
	 * 不共享手机好友列表
	 * @param token
	 * @return
	 * @throws Exception 
	 */
	@PostMapping("/notShareList")
	public ApiResponse<List<FriendInfoDto>> notShareList(@RequestBody String token) {
		ApiResponse<List<FriendInfoDto>> returnResult = new ApiResponse<>();
		List<FriendInfoDto> shareList = new ArrayList<>();
		try {
			String uid = getUserIdIM();
			
			Map<String,String> allFriendMap = friendInfoService.getUserFriend(uid,"query");
			if (allFriendMap != null) {
				for (String key : allFriendMap.keySet()) {
					FriendInfoDto dto = json2obj(allFriendMap.get(key), FriendInfoDto.class);
					//根据分享状态从好友列表里面筛选出不共享好友
					if (dto.getSharePhone().equals(0)) {
						shareList.add(dto);
					}
				}
			} 
			
			returnResult.setResult(shareList);
		} catch (Exception e) {
			returnResult.setStatus(500);
			returnResult.setMessage("系统出现错误，请稍后重试");
			logger.error("personalsecret/shareList error:{}", e);
			throw new HioMybatisGetException(e);
		}
		return returnResult;
	}
}

