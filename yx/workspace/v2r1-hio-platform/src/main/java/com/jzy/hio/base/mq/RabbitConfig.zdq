package com.jzy.hio.base.mq;

import com.jzy.hio.config.QueueConfig;
import org.springframework.amqp.core.*;
import org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * 用来配置队列、交换器、路由等高级信息
 */
@Configuration
public class RabbitConfig {
    /**
     * 消费者数量，默认10
     */
    public static final int DEFAULT_CONCURRENT = 5;

    /**
     * 每个消费者获取最大投递数量 默认50
     */
    public static final int DEFAULT_PREFETCH_COUNT = 50;

    @Autowired
    QueueConfig queueConfig;

//    @Value("${spring.rabbitmq.exchanage}")
    private final static String exchanage = "platform-dr-ex";

    /**
     * 声明直连交换机
     * @return
     */
    @Bean
    DirectExchange directExchange(){
        return new DirectExchange(exchanage,true,false);
    }

    /**
     * 通过绑定键 将指定队列绑定到一个指定的交换机 .
     * 消息通知队列
     * @return
     */
    @Bean
    Binding bindingImNoticeMsgQueue() {
        return BindingBuilder.bind(ImNoticeMsgQueue()).to(directExchange()).with(queueConfig.getImNoticeMsgQueue());
    }

    /**
     * 消息重发队列
     * @return
     */
    @Bean
    Binding bindingImNoticeMsgTempQueue() {
        return BindingBuilder.bind(ImNoticeMsgTempQueue()).to(directExchange()).with(queueConfig.getImNoticeMsgTempQueue());
    }


    @Bean
    public Queue friendQueue() {
        return new Queue(queueConfig.getImFriendInfoQueue());
    }
    @Bean
    Binding bindingFriendQueue() {
        return BindingBuilder.bind(friendQueue()).to(directExchange()).with(queueConfig.getImFriendInfoQueue());
    }
    
    @Bean
    public Queue userInfoQueue() {
        return new Queue(queueConfig.getImUserInfoQueue());
    }
    
    @Bean
    Binding bindingUserInfoQueue() {
        return BindingBuilder.bind(userInfoQueue()).to(directExchange()).with(queueConfig.getImUserInfoQueue());
    }

    /**
     * 消息发送队列
     * @return
     */
    @Bean
    public Queue ImNoticeMsgQueue() {
        return new Queue(queueConfig.getImNoticeMsgQueue());
    }
    
    @Bean
    public Queue starInfoQueue() {
    	return new Queue(queueConfig.getImStarInfoQueue());
    }
 // chc add 2018-04-19
    @Bean
    Binding bindingStarInfoQueue() {
        return BindingBuilder.bind(starInfoQueue()).to(directExchange()).with(queueConfig.getImStarInfoQueue());
    }
    
    @Bean
    public Queue personalSecretQueue() {
    	return new Queue(queueConfig.getImPersonalSecretQueue());
    }
 // chc add 2018-04-19
    @Bean
    Binding bindingPersonalSecretQueue() {
        return BindingBuilder.bind(personalSecretQueue()).to(directExchange()).with(queueConfig.getImPersonalSecretQueue());
    }
    
    @Bean
    public Queue imSentimentInfoQueue() {
    	return new Queue(queueConfig.getImSentimentInfoQueue());
    }
 // chc add 2018-04-19
    @Bean
    Binding bindingImSentimentInfoQueue() {
        return BindingBuilder.bind(imSentimentInfoQueue()).to(directExchange()).with(queueConfig.getImSentimentInfoQueue());
    }
    
    @Bean
    public Queue imFriendAliasQueue() {
    	return new Queue(queueConfig.getImFriendAliasQueue());
    }
 // chc add 2018-04-19
    @Bean
    Binding bindingImFriendAliasQueue() {
        return BindingBuilder.bind(imFriendAliasQueue()).to(directExchange()).with(queueConfig.getImFriendAliasQueue());
    }
    
    @Bean
    public Queue shortNoticeMsgQueue() {
        return new Queue(queueConfig.getShortNoticeMsgQueue());
    }
 // chc add 2018-04-19
    @Bean
    Binding bindingShortNoticeMsgQueue() {
        return BindingBuilder.bind(shortNoticeMsgQueue()).to(directExchange()).with(queueConfig.getShortNoticeMsgQueue());
    }

    /**
     * 消息重发队列
     * @return
     */
    @Bean
    public Queue tenantCompanyInfoQueue() {
        return new Queue(queueConfig.getTenantCompanyInfo());
    }
 // chc add 2018-04-19
    @Bean
    Binding bindingTenantCompanyInfoQueue() {
        return BindingBuilder.bind(tenantCompanyInfoQueue()).to(directExchange()).with(queueConfig.getTenantCompanyInfo());
    }
    
    /**
     * 租户队列
     * @return
     */
    @Bean
    public Queue ImNoticeMsgTempQueue() {
        return new Queue(queueConfig.getImNoticeMsgTempQueue());
    }

    @Bean
    public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) {
        RabbitTemplate template = new RabbitTemplate(connectionFactory);
        template.setMessageConverter(new Jackson2JsonMessageConverter());
        return template;
    }

    /**
     *消费端
     * @return
     */
    @Bean
    public SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory(ConnectionFactory connectionFactory) {
        SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();
        factory.setConnectionFactory(connectionFactory);
       //指定了我们接受消息的时候，以 JSON 传输的消息可以转换成对应的类型传入到方法中
        factory.setMessageConverter(new Jackson2JsonMessageConverter());
       //意为表示该消费者的ack方式为手动
        factory.setAcknowledgeMode(AcknowledgeMode.MANUAL);
        factory.setPrefetchCount(RabbitConfig.DEFAULT_PREFETCH_COUNT);
        factory.setConcurrentConsumers(RabbitConfig.DEFAULT_CONCURRENT);
        return factory;
    }
}
