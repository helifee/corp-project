package com.jzy.hio.platform.message.controller;

import java.io.IOException;

import com.jzy.hio.platform.message.param.ImNoticeMsgsParam;
import org.apache.commons.codec.binary.Base64;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.StopWatch;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.platform.message.param.ImNoticeMsgSearchParam;
import com.jzy.hio.platform.message.param.ImNoticeMsgSendParam;
import com.jzy.hio.platform.message.param.NoticeMsgUpdateParam;
import com.jzy.hio.platform.message.service.ImNoticeMsgService;
import com.jzy.hio.platform.message.service.MessageService;
import com.jzy.hio.springmvc.ApiResponse;
import com.jzy.hio.utils.Page;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * 消息服务接口
 */
@RestController
@RequestMapping("/message")
public class ImNoticeMsgController extends BaseController {

    @Autowired
    private MessageService messageService;

    @Autowired
    private ImNoticeMsgService imNoticeMsgService;



    /**
     * 对外提供待办通知查看列表和消息提醒查看列表接口
     *
     * @param imNoticeMsgParam
     * @return
     */
    @PostMapping
    public Page messages(@RequestBody @Validated ImNoticeMsgSearchParam imNoticeMsgParam) {
        return imNoticeMsgService.getImNoticeMsg(imNoticeMsgParam);
    }

    /**
     * 根据Id获取消息对象
     * post
     * @param id
     * @return
     */
    @GetMapping(value = "/{id}")
    public ApiResponse<Object> getImNoticeMsgById(@PathVariable("id") String id) {
        ApiResponse<Object> ares = new ApiResponse<>();
        ares.setStatus(200);
        ares.setMessage("根据Id获取消息对象成功！");
        ares.setResult(imNoticeMsgService.getObjectById(id));
        return  ares;
    }

    /**
     * 修改消息的状态 (待阅消息状态修改为已阅消息状态)
     *
     * @param noticeMsgUpdateParam
     * @return
     */
    @PostMapping(value = "/update")
    public ApiResponse updateStatusOfNoticeMsg(@RequestBody @Validated NoticeMsgUpdateParam noticeMsgUpdateParam) {
        imNoticeMsgService.updateStatusOfNoticeMsg(noticeMsgUpdateParam);
        return new ApiResponse(200,"设置消息状态成功！");
    }

    /**
     * 设置消息为打开过状态
     *
     * @param id
     * @return
     */
    @GetMapping(value = "/setMessageOpened/{id}")
    public ApiResponse setMessageOpened(@PathVariable("id") String id) {
        imNoticeMsgService.setMessageOpened(id);
         return new ApiResponse(200,"设置消息为打开过状态成功！");
    }


    /**
     * 支持同一条消息单发和群发，也支持多条消息多个人
     *
     * @param imNoticeMsgSendParam
     * @return
     * @throws IOException
     */
    @PostMapping(value = "/send")
    public ApiResponse sendMessage(@RequestBody @Validated ImNoticeMsgSendParam imNoticeMsgSendParam){
        messageService.sendMessage(imNoticeMsgSendParam);
        return new ApiResponse(200,"发送消息成功！");
    }

    /**
     * 支持同一条消息单发和群发，也支持多条消息多个人
     *
     * @param imNoticeMsgSendParam
     * @return
     * @throws IOException
     */
    @PostMapping(value = "/sendMessageSingle")
    public ApiResponse sendMessageSingle(@RequestBody @Validated ImNoticeMsgsParam imNoticeMsgSendParam){
        messageService.sendMessage(imNoticeMsgSendParam);
        return new ApiResponse(200,"发送消息成功！");
    }

    /**
     * 消息转发
     * @param request
     * @param response
     */
    @PostMapping(value = "redirect")
    public void redirect(HttpServletRequest request, HttpServletResponse response){
        //是让浏览器用utf8来解析返回的数据
        response.setHeader("Content-type", "text/html;charset=UTF-8");
       //是告诉servlet用UTF-8转码，而不是用默认的ISO8859
        response.setCharacterEncoding("UTF-8");

        try {
            StopWatch stopWatch = new StopWatch("stopwatch redirect");
            stopWatch.start("执行本地sendRedirect方法");
            //redirectUri
            String redirectUri = "";
            response.sendRedirect(redirectUri);
            stopWatch.stop();
            System.out.println(stopWatch.prettyPrint());
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
//    /**
//     * 支持同一个消息单发和群发
//     *
//     * @param imNoticeMsgsParam
//     * @return
//     * @throws IOException
//     */
//    @PostMapping(value = "/sendSingleOrMany")
//    public ApiResponse sendSingleOrMany(@RequestBody @Validated ImNoticeMsgsParam imNoticeMsgsParam) throws Exception {
//         try {
//             ImNoticeMsg   imNoticeMsg = new ImNoticeMsg();
//             copyProperties(imNoticeMsgsParam, imNoticeMsg);
//             IMToUserParam imToUserParam  ;
//             for(int i = 0 ; i < imNoticeMsgsParam.getToUsers().size();i ++){
//                 imToUserParam =  imNoticeMsgsParam.getToUsers().get(i);
//                 imNoticeMsg.setToUserId(imToUserParam.getToUserId());
//                 imNoticeMsg.setToUserName(imToUserParam.getToUserName());
//                 imNoticeMsg.setToUserPhone(imToUserParam.getToUserPhone());
//                 imNoticeMsg.setSendDate(new Timestamp(new Date().getTime()));//发送消息时间
//                 imNoticeMsg.setId(imNoticeMsgService.generatePk());
//                 imNoticeMsg.setStatus(MessageConstant.SEND_MSG_STATUS_ALREADY);
//                 imNoticeMsgService.save(imNoticeMsg);
//                 this.rabbitTemplate.convertAndSend(queueConfig.getImNoticeMsgQueue(), imNoticeMsg);
//                 logger.info("发送消息 imNoticeMsg:{} ", imNoticeMsg);
//              }
//        } catch (Exception e) {
//            logger.info("发送消息失败！{}", e.getMessage());
//            throw new Exception("发送消息失败!");
//        }
//        return new ApiResponse(200,"发送消息成功！");
//    }
}
