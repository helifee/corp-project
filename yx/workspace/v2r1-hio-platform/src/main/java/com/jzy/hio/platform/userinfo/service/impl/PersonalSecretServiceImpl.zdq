package com.jzy.hio.platform.userinfo.service.impl;

import java.util.Date;

import javax.persistence.Table;

import org.springframework.amqp.core.AmqpTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.jzy.hio.base.BaseConstants;
import com.jzy.hio.base.mq.RabbitMqMsgContainer;
import com.jzy.hio.base.mq.Sender;
import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.config.QueueConfig;
import com.jzy.hio.entity.PersonalSecret;
import com.jzy.hio.platform.constant.MqCodeConstant;
import com.jzy.hio.platform.userinfo.mapper.PersonalSecretMapper;
import com.jzy.hio.platform.userinfo.param.PersonalSettingParam;
import com.jzy.hio.platform.userinfo.service.PersonalSecretService;
import com.jzy.hio.redis.JedisUtil;

/**
 * 用户隐私设置
 * @author
 *
 */
@Service
public class PersonalSecretServiceImpl extends BaseServiceImpl<PersonalSecret> implements PersonalSecretService {

	@Autowired
	private PersonalSecretMapper personalSecretMapper;
	@Autowired
    private Sender sender;
	@Autowired
    private AmqpTemplate rabbitTemplate;
	@Autowired
    private QueueConfig queueConfig;
	
	/**
	 * 根据uid查询个人隐私，先从缓存取，取不到就查库
	 * @param uid
	 * @return
	 */
	@Override
	public PersonalSecret getByUId(String uid) {
		String tableName = PersonalSecret.class.getAnnotation(Table.class).name();
		if(isEmpty(uid)) {
			return null;
		}
		String json = JedisUtil.fetchRow(tableName, uid);
		logger.info("根据uid从redis查询个人隐私,结果：：{}",json);
		if (isNotEmpty(json)) {
			return json2obj(json, PersonalSecret.class);
		}
		PersonalSecret personalSecret = new PersonalSecret();
		personalSecret.setUid(uid);
		logger.info("根据uid查询个人隐私,uid::{};参数：：{}",uid,obj2json(personalSecret));
		return personalSecretMapper.selectOne(personalSecret);
	}
	
	/**
	 * 查看企业开关
	 * @param uid
	 * @param switchStatus 是否允许查看企业0：否，1：是
	 */
	@Override
	public void updateCompanyFlag(PersonalSettingParam param) {
		// 缓存更新
		PersonalSecret cache = this.findInCache(param.getUid());
		if (cache != null) {
			cache.setCompanyFlag(param.getSwitchStatus());
			cache.setUpdateDate(new Date());
			cache.setUid(param.getUid());
			JedisUtil.addRowCustomKey(param.getUid(), cache);
		}else {
			cache = new PersonalSecret();
			cache.setId(generatePk(PersonalSecret.class));
			cache.setCompanyFlag(param.getSwitchStatus());
			cache.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
			cache.setFriendMoibleFlag(0);
			cache.setMobileFlag(0);
			cache.setOpenRunning(0);
			cache.setPhoneFlag(0);
			cache.setRemindFlag(0);
			cache.setWorkMoibleFlag(0);
			cache.setCreateDate(new Date());
			cache.setUpdateDate(new Date());
			cache.setUid(param.getUid());
			JedisUtil.addRowCustomKey(param.getUid(), cache);
		}
		
		rabbitTemplate.convertAndSend(queueConfig.getImPersonalSecretQueue(), cache);
	}

//	/**
//	 * 手机通讯录匹配开关
//	 * @param uid
//	 * @param switchStatus 手机通讯录匹配0：否，1：是
//	 */
//	@Override
//	public void updatePhoneFlag(PersonalSettingParam param) {
//		PersonalSecret personalSecret = new PersonalSecret();
//		personalSecret.setUid(param.getUid());
//		personalSecret.setPhoneFlag(param.getSwitchStatus());
//		
//		// 缓存更新
//		PersonalSecret cache = this.findInCache(param.getUid());
//		if (cache != null) {
//			cache.setPhoneFlag(param.getSwitchStatus());
//			cache.setUpdateDate(new Date());
//			JedisUtil.addRowCustomKey(param.getUid(), cache);
//		}
//		
//		RabbitMqMsgContainer<PersonalSecret> container = 
//				new RabbitMqMsgContainer<>(MqCodeConstant.UPDATE, "通讯录匹配开关", personalSecret);
//		String sendMsg = JSON.toJSONString(container);
//		sender.send(queueConfig.getImPersonalSecretQueue(), sendMsg);
//	}

//	/**
//	 * 好友共享手机号开关
//	 * @param uid
//	 * @param switchStatus 对全部好友共享手机号 0：否，1：是
//	 */
//	@Override
//	public void updateFriendMoibleFlag(PersonalSettingParam param) {
//		PersonalSecret personalSecret = new PersonalSecret();
//		personalSecret.setUid(param.getUid());
//		personalSecret.setFriendMoibleFlag(param.getSwitchStatus());
//		
//		// 缓存更新
//		PersonalSecret cache = this.findInCache(param.getUid());
//		if (cache != null) {
//			cache.setFriendMoibleFlag(param.getSwitchStatus());
//			cache.setUpdateDate(new Date());
//			JedisUtil.addRowCustomKey(param.getUid(), cache);
//		}
//		
//		RabbitMqMsgContainer<PersonalSecret> container = 
//				new RabbitMqMsgContainer<>(MqCodeConstant.UPDATE, "好友共享手机号开关", personalSecret);
//		String sendMsg = JSON.toJSONString(container);
//		sender.send(queueConfig.getImPersonalSecretQueue(), sendMsg);
//	}

	/**
	 * 同事隐藏手机号开关
	 * @param uid
	 * @param switchStatus 对同事隐藏手机号 0：否，1：是
	 */
	@Override
	public void updateWorkMoibleFlag(PersonalSettingParam param) {
		PersonalSecret personalSecret = new PersonalSecret();
		personalSecret.setUid(param.getUid());
		personalSecret.setWorkMoibleFlag(param.getSwitchStatus());
		
		// 缓存更新
		PersonalSecret cache = this.findInCache(param.getUid());
		if (cache != null) {
			cache.setWorkMoibleFlag(param.getSwitchStatus());
			JedisUtil.addRowCustomKey(param.getUid(), cache);
		}
		
		RabbitMqMsgContainer<PersonalSecret> container = 
				new RabbitMqMsgContainer<>(MqCodeConstant.UPDATE, "同事隐藏手机号开关", personalSecret);
		String sendMsg = obj2json(container);
		sender.send(queueConfig.getImPersonalSecretQueue(), sendMsg);
		
	}
	
	/**
	 * 运动隐私开关
	 * @param uid
	 * @param switchStatus  0：隐藏，1：开放
	 */
	@Override
	public void updateOpenRunningFlag(PersonalSettingParam param) {
		// 缓存更新
		PersonalSecret cache = this.findInCache(param.getUid());
		if (cache != null) {
			cache.setOpenRunning(param.getSwitchStatus());
			cache.setUpdateDate(new Date());
			cache.setUid(param.getUid());
			JedisUtil.addRowCustomKey(param.getUid(), cache);
		}else {
			cache = new PersonalSecret();
			cache.setId(generatePk(PersonalSecret.class));
			cache.setCompanyFlag(0);
			cache.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
			cache.setFriendMoibleFlag(0);
			cache.setMobileFlag(0);
			cache.setOpenRunning(param.getSwitchStatus());
			cache.setPhoneFlag(0);
			cache.setRemindFlag(0);
			cache.setWorkMoibleFlag(0);
			cache.setCreateDate(new Date());
			cache.setUpdateDate(new Date());
			cache.setUid(param.getUid());
			JedisUtil.addRowCustomKey(param.getUid(), cache);
		}
		rabbitTemplate.convertAndSend(queueConfig.getImPersonalSecretQueue(), cache);
	}

	/**
	 * 根据uid修改开关
	 * @param personalSecret
	 * @return
	 */
	@Override
	public int updateByUid(PersonalSecret personalSecret) {
		return personalSecretMapper.updateByUid(personalSecret);
	}
	
	
	/**
	 * 根据uid到redis 查询个人隐私，不查库
	 * @param uid
	 * @return
	 */
	private PersonalSecret findInCache(String uid) {
		String tableName = PersonalSecret.class.getAnnotation(Table.class).name();
		String json = JedisUtil.fetchRow(tableName, uid);
		logger.info("根据uid从redis查询个人隐私,不查库,结果：：{}",json);
		PersonalSecret ps = null;
		if (isNotEmpty(json)) {
			ps = json2obj(json, PersonalSecret.class);
		}
		return ps;
	}
}
