package com.jzy.hio.im.test;

import java.util.Random;
import java.util.UUID;

import org.junit.Test;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import com.jzy.hio.platform.friendinfo.service.ImRegisterUserApi;
import com.jzy.hio.platform.friendinfo.service.impl.ImRegisterUserApiImpl;

import io.swagger.client.ApiResponse;
import io.swagger.client.model.NewPassword;
import io.swagger.client.model.Nickname;
import io.swagger.client.model.RegisterUsers;
import io.swagger.client.model.User;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

public class ImNoticeMsgTest2 {
	ImRegisterUserApi imRegisterUserApi = new ImRegisterUserApiImpl();
    
    /**
     * 操作数据库测试
     */
    @Test
    public void testDB(){
        System.out.println("--------test------------");
//        imNoticeMsgMapper.selectAll();
        String userName = "151022246965163473";
		Object obj = imRegisterUserApi.getIMUserByUserName(userName);
		System.out.println(obj.toString());
    }


    @Test
    public void createUser() {
        /*RegisterUsers users = new RegisterUsers();
        String hxid = UUID.randomUUID().toString();
        User hxUser = new User().username(hxid).password("111111");
		users.add(hxUser);
        Object result = imRegisterUserApi.createNewIMUserSingle(users);
        System.out.println("hxid:" + result.toString());*/

        //        BCryptPasswordEncoder encoder = new BCryptPasswordEncoder();
        PasswordEncoder encoder = NoOpPasswordEncoder.getInstance();
    	
        RegisterUsers users1 = new RegisterUsers();
//        User user = new User().username("e323b56a451811e89fca25d738834ebc").password("123456");
        //文件助手账号
//        User user = new User().username("cchiowenjianzhushou" + new Random().nextInt(500)).password("123456");
//        users1.add(user);
        User user1 = new User().username("cchioworkhio_tend01").password("123456").nickname("待办通知-测试创建企业账号");
        users1.add(user1);
//        users1.add(user1);
//        ApiResponse<String> result1 = (ApiResponse<String>)imRegisterUserApi.createNewIMUserSingle(users1);
//        System.out.println("hxid:" + result1.getData()+"---status----:"+result1.getStatusCode());
        //aaa123456386
//        ApiResponse<String> result1 = (ApiResponse<String>)imRegisterUserApi.deactivateIMUser("31494a2d9e1647c9a500e5ecab638d29");
//        NewPassword psd = new NewPassword().newpassword("f0e8b8d978427c05b98bfd9254e43885");
//        ApiResponse<String> result1=(ApiResponse<String>)imRegisterUserApi.getIMUserByUserName("18ef1ca542a240949bbe1e958ae1e1e8");
        ApiResponse<String> result1 = (ApiResponse<String>)imRegisterUserApi.createNewIMUserSingle(users1);
        System.out.println("hxid:" + result1.getData()+"---status----:"+result1.getStatusCode()+"----header---"+result1.getHeaders());
    }
    
    @Test
    public void modifyUserName() {
    	Nickname nickName = new Nickname().nickname("test");
    	ApiResponse<String> result1 = (ApiResponse<String>)imRegisterUserApi.modifyIMUserNickNameWithAdminToken("18ef1ca542a240949bbe1e958ae1e1e8",nickName);
    	System.out.println("hxid:" + result1.getData()+"---status----:"+result1.getStatusCode()+"----header---"+result1.getHeaders());
    }
}
