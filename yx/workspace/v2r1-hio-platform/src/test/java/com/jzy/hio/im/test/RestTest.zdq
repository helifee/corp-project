package com.jzy.hio.im.test;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;

import java.util.HashMap;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.RequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.jzy.hio.HioPlatformApplication;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = HioPlatformApplication.class)
@AutoConfigureMockMvc
@WebAppConfiguration
public class RestTest {

    private MockMvc mvc;
    @Autowired
    private WebApplicationContext context;

    @Before
    public void setupMockMvc() throws Exception {
        mvc = MockMvcBuilders.webAppContextSetup(context).build();
    }


    /**
     * 测试u
     * @throws Exception
     */
    @Test
    public void testRest() throws Exception {
//        mvc.perform(post("/im/msgs/queryList") // //调用接口
//                .contentType(MediaType.APPLICATION_JSON_UTF8)
////                .param("userId", "11").param("userName", "henry")//传入添加的用户参数
//                .accept(MediaType.APPLICATION_JSON))  //接收的类型
//                .andExpect(status().isOk())   //判断接收到的状态是否是200
//                .andDo(print());  //打印内容
//               // .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8)).andExpect(content().string(Matchers.containsString("OK"))) //匹配返回值中的内容
//                //.andExpect(jsonPath("$.errcode", is(0)));////使用jsonPath解析返回值，判断具体的内容

        RequestBuilder request = get("/im/msgs/")
                .contentType(MediaType.APPLICATION_JSON_UTF8)
                .param("tendId", "ac322afa354b478997879c47491da22e")
                .param("userId", "4eed0182314c4aa78d3c60575397a350")
                .param("msgType","1");
        MvcResult mvcResult = mvc.perform(request).andReturn();
        int status = mvcResult.getResponse().getStatus();
        String content = mvcResult.getResponse().getContentAsString();
        System.out.println("返回结果：" + status);
        System.out.println(content);

    }

    /**
     * 测试--查询租户通知和系统消息
     * 如果在post的接口中接收的参数为对象的话，可以进行（Json对象或者实体类的）封装
     *
     * @throws Exception
     */
    @Test
    public void postObject() throws Exception {
        //1.请求参数封装
        Map<String,String> param = new  HashMap<>();
        param.put("tendId", "ac322afa354b478997879c47491da22e");//租户ID
        param.put("userId", "4eed0182314c4aa78d3c60575397a350");//用户ID
        param.put("msgType", "1");// 消息类型 1:通知类消息, 0 系统类消息
       // param.put("opType", "DS");//操作类型 全部（入参为""） op_type 待审（DS），待阅(DY)， 考勤提醒(KQ)，公告提醒(GG)，会议提醒(HY)，任务提醒(RW)
        String jsonstr = param.toString();
        System.out.println("================================请求入参：" + jsonstr);

        //封装请求
        RequestBuilder request = MockMvcRequestBuilders.post("/im/msgs/")
                .contentType(MediaType.APPLICATION_JSON)
                .content(jsonstr).accept(MediaType.APPLICATION_JSON);


        //调用接口
        MvcResult mvcResult = mvc.perform(request).andReturn();
        //返回结果
        int status = mvcResult.getResponse().getStatus();
        String content = mvcResult.getResponse().getContentAsString();
        System.out.println("返回结果：" + content);

    }

}
