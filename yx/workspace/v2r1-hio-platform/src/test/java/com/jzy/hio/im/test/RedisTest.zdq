package com.jzy.hio.im.test;

import org.junit.After;
import org.junit.Test;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPoolConfig;

public class RedisTest {
	private static final String host = "192.168.3.52";
	private static final int port = 6379;
	private static final String password = "xinleju";

	private static JedisPoolConfig config;
	private static Jedis jedis;

//	static {
//			config = new JedisPoolConfig();
//			config.setMaxTotal(32);// 最大连接数
//			config.setMaxIdle(6);// 闲置最大连接数
//			config.setMinIdle(0);// 闲置最小连接数
//			config.setMaxWaitMillis(15000);// 到达最大连接数后，调用者阻塞时间
//			config.setMinEvictableIdleTimeMillis(300000);// 连接空闲的最小时间，可能被移除
//			config.setSoftMinEvictableIdleTimeMillis(-1);// 连接空闲的最小时间，多余最小闲置连接的将被移除
//			config.setNumTestsPerEvictionRun(3);// 设置每次检查闲置的个数
//			config.setTestOnBorrow(false);// 申请连接时，是否检查连接有效
//			config.setTestOnReturn(false);// 返回连接时，是否检查连接有效
//			config.setTestWhileIdle(false);// 空闲超时,是否执行检查有效
//			config.setTimeBetweenEvictionRunsMillis(60000);// 空闲检查时间
//			config.setBlockWhenExhausted(true);// 当连接数耗尽，是否阻塞
//			jedis = new JedisPool(config, host, port, 15000, password, 1).getResource();
//	}
	
	@Test
	public void test() {
//		System.out.println(jedis.hget("获取不到返回null", "aaa"));
//		System.out.println(jedis.hgetAll("获取不到返回{}"));
		
//		String key = "myKey";
		
//		jedis.lpush(key, "11");
//		jedis.lpush(key, "22");
//		System.out.println(jedis.lpop(key));
//		System.out.println(jedis.lrange(key, 0, 1));
		
//		jedis.hset(key, "a", "aa");
//		jedis.hset(key, "b", "bb");
//		System.out.println(jedis.hgetAll(key) +  "-----hgetAll-----");
		
//		Map<String, String> map = new HashMap<>();
//		map.put("a", "aaaa");
//		map.put("b", "bbbb");
//		jedis.hmset(key, map);
//		System.out.println(jedis.hgetAll(key) +  "-----hgetAll-----");
		
//		System.out.println(jedis.hget(key, "a"));
//		System.out.println(jedis.hmget(key, "a", "b"));
//		
//		jedis.del(key);
		
	}
	
	@After
	public void close() {
		System.out.println("redis is closed ...");
		if (jedis != null) {
			jedis.close();
		}
	}
}


