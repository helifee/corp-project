package com.jzy.hio.sys.user.service.impl;

import com.jzy.hio.ApiFeignResponse;
import com.jzy.hio.annotation.DataSource;
import com.jzy.hio.base.Base;
import com.jzy.hio.base.BaseConstants;
import com.jzy.hio.base.RedisKeyConstant;
import com.jzy.hio.base.service.impl.BaseSysServiceImpl;
import com.jzy.hio.cloud.core.CoreHeaderInterceptor;
import com.jzy.hio.entity.OaSysExternalContact;
import com.jzy.hio.entity.OaSysOrganization;
import com.jzy.hio.entity.OaSysRole;
import com.jzy.hio.entity.OaSysRoleUser;
import com.jzy.hio.entity.OaSysUser;
import com.jzy.hio.entity.OaSysUserPosition;
import com.jzy.hio.exception.HioException;
import com.jzy.hio.exception.HioMybatisInsertException;
import com.jzy.hio.exception.HioMybatisUpdateException;
import com.jzy.hio.exception.HioUserExitsException;
import com.jzy.hio.feign.PlatformFeignService;
import com.jzy.hio.init.RedisSyncInit;
import com.jzy.hio.platform.dto.tenantcompanyinfo.TenantCompanyInfoDto;
import com.jzy.hio.platform.dto.tenantcompanyinfo.TendUserInfoDto;
import com.jzy.hio.platform.param.FriendInfoParam;
import com.jzy.hio.platform.param.PositionParam;
import com.jzy.hio.platform.param.PuUserParam;
import com.jzy.hio.redis.JedisUtil;
import com.jzy.hio.redis.service.RedisGetService;
import com.jzy.hio.redis.service.RedisSetService;
import com.jzy.hio.sys.SysConstants;
import com.jzy.hio.sys.app.service.AppUserService;
import com.jzy.hio.sys.external.mapper.ExternalContactMapper;
import com.jzy.hio.sys.external.service.ExternalContactService;
import com.jzy.hio.sys.external.service.ExternalShareService;
import com.jzy.hio.sys.organization.dto.FlowPositionDto;
import com.jzy.hio.sys.organization.dto.FlowUserDto;
import com.jzy.hio.sys.organization.dto.GeneralDto;
import com.jzy.hio.sys.organization.dto.OrgRoleUserDto;
import com.jzy.hio.sys.organization.dto.OrganizationDto;
import com.jzy.hio.sys.organization.dto.SysCurrencyDto;
import com.jzy.hio.sys.organization.mapper.OrganizationMapper;
import com.jzy.hio.sys.organization.param.IMOrgCreateUserParam;
import com.jzy.hio.sys.organization.service.OrganizationService;
import com.jzy.hio.sys.role.mapper.RoleUserMapper;
import com.jzy.hio.sys.role.service.RoleService;
import com.jzy.hio.sys.role.service.RoleUserService;
import com.jzy.hio.sys.user.dto.FlowUserAndExternalDto;
import com.jzy.hio.sys.user.dto.HRUserInviteDto;
import com.jzy.hio.sys.user.dto.HRUserInviteMsgDto;
import com.jzy.hio.sys.user.dto.IMOAUserInfoDto;
import com.jzy.hio.sys.user.dto.IMOrgUserDto;
import com.jzy.hio.sys.user.dto.IMUserDetailInfoDto;
import com.jzy.hio.sys.user.dto.IMUserPositionDto;
import com.jzy.hio.sys.user.dto.OAUserDto;
import com.jzy.hio.sys.user.dto.UserDto;
import com.jzy.hio.sys.user.dto.UserImportDto;
import com.jzy.hio.sys.user.dto.UserInfoDto;
import com.jzy.hio.sys.user.dto.UserListDto;
import com.jzy.hio.sys.user.dto.UserPositionDto;
import com.jzy.hio.sys.user.dto.UserStatusDto;
import com.jzy.hio.sys.user.mapper.UserMapper;
import com.jzy.hio.sys.user.mapper.UserPositionMapper;
import com.jzy.hio.sys.user.param.FileImportParam;
import com.jzy.hio.sys.user.param.IMOAUserParam;
import com.jzy.hio.sys.user.param.IMOAUserUpdateParam;
import com.jzy.hio.sys.user.param.IMUserInfoParam;
import com.jzy.hio.sys.user.param.IMUserInviteParam;
import com.jzy.hio.sys.user.param.IMUserQueryParam;
import com.jzy.hio.sys.user.param.IMUserSyncParam;
import com.jzy.hio.sys.user.param.IMUserUpdateParam;
import com.jzy.hio.sys.user.param.OAUserParam;
import com.jzy.hio.sys.user.param.UserImportBatchParam;
import com.jzy.hio.sys.user.param.UserInfoParam;
import com.jzy.hio.sys.user.param.UserInviteParam;
import com.jzy.hio.sys.user.param.UserListParam;
import com.jzy.hio.sys.user.param.UserOrExternalParam;
import com.jzy.hio.sys.user.param.UserPositionParam;
import com.jzy.hio.sys.user.service.UserPositionService;
import com.jzy.hio.sys.user.service.UserService;
import com.jzy.hio.utils.ExcelUtils;
import com.jzy.hio.utils.IDGenerator;
import com.jzy.hio.utils.Page;
import com.jzy.hio.utils.Pinyin4jUtils;
import com.jzy.hio.utils.StringUtil;
import com.jzy.hio.utils.ValidatorUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import tk.mybatis.mapper.entity.Example;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * 机构人员
 *
 * @author wt.coffee 2018年3月8日下午1:02:17
 */
@Service
public class UserServiceImpl extends BaseSysServiceImpl<OaSysUser> implements UserService {
	@Autowired
	private UserMapper userMapper;
	@Autowired
	private UserPositionMapper userPositionMapper;
	@Autowired
	private OrganizationService organizationService;
	@Autowired
	private UserPositionService userPositionService;
	@Autowired
	private ExternalContactMapper externalContactMapper;
	@Autowired
	private OrganizationMapper organizationMapper;
	@Autowired
	private ExternalContactService externalContactService;
	@Autowired
	private RoleUserService roleUserService;
	@Autowired
	private RoleUserMapper roleUserMapper;
	@Autowired
	private RoleService roleService;
	@Autowired
	private RedisSetService redisSetService;
	@Autowired
	private PlatformFeignService platformFeignService;
	@Resource
	private ExcelUtils excelUtils;
	@Autowired
	private AppUserService appUserService;
	@Autowired
	private ExternalShareService externalShareService;
	@Autowired
	private RedisGetService redisGetService;
	@Autowired
	private RedisSyncInit redisSync;

	@Override
	@Transactional
	public int save(@DataSource String tendId, OaSysUser user, OaSysUserPosition position) {
		int insert = super.save(user);
		position.setUserId(user.getId());
		int exists = userPositionMapper.queryPosition(user.getId());
		if (exists <= 0) {
			position.setIsDefault(1);
		} else {
			position.setIsDefault(0);
		}
		int result = userPositionService.save(tendId, position);
		return result;
	}

	@Override
	public boolean queryPosition(String userId) {
		int count = userPositionMapper.queryPosition(userId);
		return count > 0;
	}

	@Override
	public List<UserDto> queryList(String organizationId,Integer status,boolean isMainOrg) {
		return userMapper.queryList(organizationId,status,isMainOrg);
	}

	@Override
	public boolean queryUserByMobile(String userMobile, boolean isDeleted) {
		return userMapper.queryUserByMobile(userMobile, isDeleted) > 0 ? true : false;
	}

	@Override
	@Transactional
	public String saveUserPosition(@DataSource String tendId, UserInviteParam apiParam) {
		checkMobileIsExitsDetail(tendId, apiParam.getUserMobile(), BaseConstants.USER_ORGANIZATION);
		OaSysOrganization oaSysOrganization = organizationMapper.selectByPrimaryKey(apiParam.getOrganizationId());
		if (oaSysOrganization == null || oaSysOrganization.getDelflag().intValue() == SysConstants.MYSQL_DELFLAG_DELETED) {
			throw new HioMybatisInsertException("当前部门不存在，请重新选择");
		}
		ApiFeignResponse<String> response = platformFeignService.queryAlreadyOrCreate(apiParam.getUserMobile());
		if (response == null || response.getStatus() != 200 || isEmpty(response.getResult())) {
			throw new HioException("Platform -创建账号失败");
		}
		checkIMUserIdIsExits(tendId,response.getResult(),BaseConstants.USER_ORGANIZATION);
		return saveUser(tendId, apiParam.getUserName(), apiParam.getUserMobile(), apiParam.getUserEmail(), SysConstants.UserWorkStatus.NO_CONFIRM, response.getResult(),
				apiParam.getOrganizationId(), null, null);
	}

    public void checkIMUserIdIsExits(@DataSource String tendId, String imUserId, int inviteType) {
	    OaSysUser oaSysUser = queryUsersByIMUserId(tendId,imUserId);
        checkOaSysUsers(inviteType, oaSysUser);
    }
	public void checkIMUserIdIsExits(@DataSource String tendId, String imUserId, int inviteType,String userId) {
		OaSysUser oaSysUser = queryUsersByIMUserId(tendId,imUserId);
		if (isNotEmpty(oaSysUser)){
			if (isEquals(oaSysUser.getId(),userId)){
				oaSysUser = null;
			}
		}
		checkOaSysUsers(inviteType, oaSysUser);
	}

    private void checkOaSysUsers(int inviteType, OaSysUser oaSysUser) {
        if (oaSysUser != null) {
            //邀请同事，组织有人是外部人
            if (Integer.valueOf(oaSysUser.getUserType()).equals(BaseConstants.MYSQL_USER_TYPE_EXTERNAL) && BaseConstants.USER_ORGANIZATION == inviteType){
                throw new HioUserExitsException(HioException.userHasInvitedExternalOnline);
            }
            //邀请外部人，组织有人是同事
            if (Integer.valueOf(oaSysUser.getUserType()).equals(BaseConstants.MYSQL_USER_TYPE_COMMON) && BaseConstants.USER_EXTERNAL == inviteType){
                throw new HioUserExitsException(HioException.userWorkOnline);
            }
            if (oaSysUser.getWorkStatus().equals(SysConstants.UserWorkStatus.NO_CONFIRM.getWorkStatus())) {
                if (BaseConstants.USER_EXTERNAL == inviteType){
                    //邀请外部
                    throw new HioUserExitsException(HioException.userHasInvitedExternal);
                }else if (BaseConstants.USER_ORGANIZATION == inviteType){
                    //邀请同事
                    throw new HioUserExitsException(HioException.userHasInvited);
                }
            }
            if (oaSysUser.getWorkStatus().equals(SysConstants.UserWorkStatus.JOB.getWorkStatus())) {
                if (BaseConstants.USER_ORGANIZATION == inviteType){
                    //邀请同事
                    throw new HioUserExitsException(HioException.userWorkOnline);
                }else if (BaseConstants.USER_EXTERNAL == inviteType){
                    //邀请外部
                    throw new HioUserExitsException(HioException.userHasInvitedExternalOnline);
                }
            }
            if (oaSysUser.getWorkStatus().equals(SysConstants.UserWorkStatus.LEAVE.getWorkStatus())) {
                throw new HioUserExitsException(HioException.userWorkLevae);
            }
            if (oaSysUser.getWorkStatus().equals(SysConstants.UserWorkStatus.NO_INVITE.getWorkStatus())) {
                throw new HioUserExitsException(HioException.userNoInvite);
            }
        }
    }

    @Override
    public OaSysUser queryUsersByIMUserId(@DataSource String tendId, String imUserId) {
        OaSysUser record = new OaSysUser();
        record.setImUserId(imUserId);
        record.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
        List<OaSysUser> results = userMapper.select(record);
        if (isNotEmpty(results)){
            return results.get(0);
        }
        return null;
    }

    /**
	 * 校验系统中是否有该手机号
	 *
	 * @param tendId
	 * @param userMobile
	 */
	public void checkMobileIsExits(@DataSource String tendId, String userMobile) {
		int isExits = userMapper.queryUserByMobile(userMobile, false);
		if (isExits > 0) {
			throw new HioException("该手机号已经存在，请修改其他手机号");
		}
//		int count = externalContactMapper.checkExternalUserIsExitsByMobile(userMobile);
//		if (count > 0) {
//			throw new HioException(HioException.userHasInvitedExternal);
//		}
	}

	/**
	 * 校验系统中是否有该手机号
	 *
	 * @param tendId
	 * @param userMobile
	 */
	@Override
	public void checkMobileIsExitsDetail(@DataSource String tendId, String userMobile, int inviteType) {
	    OaSysUser oaSysUser = queryUserStatusByMobile(userMobile, false);
        checkOaSysUsers(inviteType, oaSysUser);
    }

	/**
	 * 查询外部联系人
	 *
	 * @param userMobile
	 * @return
	 */
	private OaSysExternalContact queryExternalStatusByMobile(String userMobile) {
		OaSysExternalContact t = new OaSysExternalContact();
		t.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
		t.setMobile(userMobile);
		return externalContactMapper.selectOne(t);
	}

	@Override
	public OaSysUser createTeamAdminUser(@DataSource String tendId, String name, String imUserId, String mobile, String organizationId) {
		OaSysUser oaSysUser = userMapper.selectByPrimaryKey(BaseConstants.MYSQL_ROLE_SUPERID);
		if (oaSysUser == null) {
			throw new HioMybatisInsertException("创建团队失败，admin用户为空");
		}
		OaSysOrganization oaSysOrganization = organizationMapper.selectByPrimaryKey(organizationId);
		if (oaSysOrganization == null) {
			throw new HioMybatisInsertException("创建团队失败,部门不存在");
		}
		oaSysUser.setMobile(mobile);
		oaSysUser.setImUserId(imUserId);
		oaSysUser.setRealName(name);
		oaSysUser.setPinyinFirstLetter(Pinyin4jUtils.getShortPinyin(oaSysUser.getRealName()));
		oaSysUser.setPinyinFull(Pinyin4jUtils.getPinYin(oaSysUser.getRealName()));
		oaSysUser.setUpdateDate(new Date());
//		oaSysUser.setBirthday(new Date());
		oaSysUser.setCreatePersonId(oaSysUser.getId());
		oaSysUser.setCreatePersonName(oaSysUser.getRealName());
		oaSysUser.setUserType(BaseConstants.MYSQL_USER_TYPE_COMMON);
		int i = userMapper.updateByPrimaryKey(oaSysUser);
		return oaSysUser;
	}

	public String saveUser(@DataSource String tendId, String name, String mobile, String email, SysConstants.UserWorkStatus workStatus, String imUserId, String organizationId,
			String positionName, List<PositionParam> positionParamList) {
		// get oaUser
		OaSysUser user = transformOaSysUser(tendId, name, mobile, email, workStatus, imUserId,false,BaseConstants.MYSQL_USER_TYPE_COMMON);
		// get osUserPosition
		OaSysUserPosition userPosition = transformOaSysUserPosition(tendId, organizationId, user.getId(), positionName,false);
		// 保存用户和职务
		int save = save(tendId, user, userPosition);
		// 如果当前的工作状态是未确认的，需要调用platformFeign发送邀请
		if (isEmpty(tendId) && workStatus.equals(SysConstants.UserWorkStatus.NO_CONFIRM)) {
			sendIMInvite(getTendId(), getUserIdIM(), mobile,user.getImUserId(),SysConstants.USER_INVITE_ORGANIZATION);
		}
		// IM新增兼职信息
		if (positionParamList != null && positionParamList.size() > 0) {
			saveUserPositionJobIM(tendId, user.getId(), positionParamList);
		}
		// 新增用户-更新
		updateOrganizationUpdateDateByUserPosition(tendId, null, null, null, user, null);

		return user.getId();
	}

	/**
	 * 邀请用户成为组织用户，如果该手机号是外部来呢西人，需要删除外部联系人
	 *
	 * @param mobile
	 */
	public boolean deleteOaSysExternalContactByMobile(@DataSource String tendId, String mobile) {
		OaSysExternalContact t = new OaSysExternalContact();
		t.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
		t.setMobile(mobile);
		OaSysExternalContact oaSysExternalContact = externalContactMapper.selectOne(t);
		if (oaSysExternalContact != null) {
			oaSysExternalContact.setDelflag(BaseConstants.MYSQL_DELFLAG_DELETED);
			oaSysExternalContact.setUpdateDate(new Date());
			externalContactMapper.updateByPrimaryKey(oaSysExternalContact);
			if (oaSysExternalContact.getStatus().equals(SysConstants.UserWorkStatus.JOB.getWorkStatus())) {
				// 调用platform - 删除用户 - 如果是在职的需要删除；非在职说明主库没有关联 租户和imuserId的关系
				deleteTendUser2Platform(tendId, null, oaSysExternalContact, BaseConstants.USER_EXTERNAL);
			}
			// 更新时间
			updateOrganizationUpdateDateByUserPosition(tendId, null, null, null, null, oaSysExternalContact);

			return true;
		}
		return false;
	}

	/**
	 * 调用删除租户ID和OAID对应的关系
	 *
	 * @param tendId
	 */
	public void deleteTendUser2Platform(@DataSource String tendId, OaSysUser oaSysUser, OaSysExternalContact oaSysExternalContact, int userType) {
		if (BaseConstants.USER_ORGANIZATION == userType) {
			if (oaSysUser != null && oaSysUser.getImUserId() != null && (oaSysUser.getWorkStatus().equals(SysConstants.UserWorkStatus.LEAVE.getWorkStatus())
					||oaSysUser.getWorkStatus().equals(SysConstants.UserWorkStatus.NO_CONFIRM.getWorkStatus()))
					&& oaSysUser.getDelflag().intValue() == BaseConstants.MYSQL_DELFLAG_DELETED) {
				// 用户是离职状态；并且imUserId存在，并且是删除的
				TendUserInfoDto userInfoDto = new TendUserInfoDto();
				userInfoDto.setTendId(tendId);
				userInfoDto.setUid(oaSysUser.getImUserId());
				userInfoDto.setDelflag(BaseConstants.MYSQL_DELFLAG_DELETED);
				ApiFeignResponse<String> result = platformFeignService.deleteUserTend(userInfoDto);
				if (result != null && result.getStatus() != 200) {
					throw new HioException("platform删除用户失败");
				}
				// 同步对应tendId-imUserId:oaUserid
				redisSetService.syncTendIdAndUser(tendId, oaSysUser.getImUserId(), oaSysUser.getId(), BaseConstants.REDIS_OPT_DEL);
			}
		} else if (BaseConstants.USER_EXTERNAL == userType) {
			if (oaSysExternalContact != null && oaSysExternalContact.getImUserId() != null) {
				TendUserInfoDto userInfoDto = new TendUserInfoDto();
				userInfoDto.setTendId(tendId);
				userInfoDto.setUid(oaSysExternalContact.getImUserId());
				userInfoDto.setDelflag(BaseConstants.MYSQL_DELFLAG_DELETED);
				ApiFeignResponse<String> result = platformFeignService.deleteUserTend(userInfoDto);
				if (result != null && result.getStatus() != 200) {
					throw new HioException("platform删除用户失败");
				}
				// 同步对应tendId-imUserId:oaUserid
				redisSetService.syncTendIdAndUser(tendId, oaSysExternalContact.getImUserId(), oaSysExternalContact.getId(), BaseConstants.REDIS_OPT_DEL);
			}
		}
	}

	/**
	 * 工作状态更新
	 *
	 * @param tendId
	 * @param oaSysUser
	 */
	public void updateTendUserWorkStatus(@DataSource String tendId, OaSysUser oaSysUser) {
		Date now = new Date();
		if (oaSysUser != null && oaSysUser.getDelflag().intValue() == BaseConstants.MYSQL_DELFLAG_NORMAL
				&& oaSysUser.getWorkStatus().equals(SysConstants.UserWorkStatus.JOB.getWorkStatus())) {
			// 由离职变未在职
			TendUserInfoDto dto = new TendUserInfoDto();
			dto.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
			dto.setUid(oaSysUser.getImUserId());
			dto.setTendId(tendId);
			logger.info("调用PLATFORM begin params is =====》{}", Base.obj2json(dto));
			ApiFeignResponse<String> result = platformFeignService.updateUserTendDelflag(dto);
			if (result != null && result.getStatus() != 200) {
				throw new HioException("platform恢复在职失败");
			}
			logger.info("调用PLATFORM success =====》{}", result.getResult());
			// redis
			redisSetService.syncTendIdAndUser(isEmpty(tendId) ? getTendId() : tendId, oaSysUser.getImUserId(), oaSysUser.getId(), BaseConstants.REDIS_OPT_ADD);
			//更新所有的时间
//			updateBatchUpdateTime(isEmpty(tendId) ? getTendId() : tendId,null,now);
//			organizationService.updateBatchUpdateTime(isEmpty(tendId) ? getTendId() : tendId,null,now);
//			userPositionService.updateBatchUpdateTime(isEmpty(tendId) ? getTendId() : tendId,null,now);
//			//全量
//			redisSync.syncTendData(isEmpty(tendId) ? getTendId() : tendId);
		} else if (oaSysUser != null && oaSysUser.getDelflag().intValue() == BaseConstants.MYSQL_DELFLAG_NORMAL
				&& oaSysUser.getWorkStatus().equals(SysConstants.UserWorkStatus.LEAVE.getWorkStatus())) {
			// 由在职变未离职
			TendUserInfoDto dto = new TendUserInfoDto();
			dto.setDelflag(BaseConstants.MYSQL_DELFLAG_DELETED);
			dto.setUid(oaSysUser.getImUserId());
			dto.setTendId(tendId);
			logger.info("调用PLATFORM begin params is =====》{}", Base.obj2json(dto));
			ApiFeignResponse<String> result = platformFeignService.updateUserTendDelflag(dto);
			if (result != null && result.getStatus() != 200) {
				throw new HioException("platform离职失败");
			}
			logger.info("调用PLATFORM success =====》{}", result.getResult());
			// redis
			redisSetService.syncTendIdAndUser(isEmpty(tendId) ? getTendId() : tendId, oaSysUser.getImUserId(), oaSysUser.getId(), BaseConstants.REDIS_OPT_DEL);
		} else {
			// 终止、状态不对
			return;
		}
	}

	@Override
	public boolean checkSysExternalContactIsExits(String mobile) {
		checkMobileIsExits(getTendId(), mobile);
		return true;
	}

	@Override
	@Transactional
	public String saveUserPositionForIM(@DataSource String tendId, IMUserInviteParam apiParam) {
		// 校验手机号
		checkMobileIsExitsDetail(tendId, apiParam.getUserMobile(), BaseConstants.USER_ORGANIZATION);
		//校验IMUSerId
        checkIMUserIdIsExits(tendId,apiParam.getImUserId(),BaseConstants.USER_ORGANIZATION);

		OaSysOrganization oaSysOrganization = organizationMapper.selectByPrimaryKey(apiParam.getOrganizationId());
		if (oaSysOrganization == null || oaSysOrganization.getDelflag().intValue() == SysConstants.MYSQL_DELFLAG_DELETED) {
			throw new HioMybatisInsertException("当前部门不存在，请重新选择");
		}

		String userId = saveUser(tendId, apiParam.getUserName(), apiParam.getUserMobile(), apiParam.getUserEmail(), SysConstants.UserWorkStatus.NO_CONFIRM, apiParam.getImUserId(),
				apiParam.getOrganizationId(), apiParam.getPositionName(), apiParam.getPositionList());

		return userId;

	}

	@Override
	public HRUserInviteDto updateUserWorkStatusAndInvite(List<String> userIds) {
		HRUserInviteDto result = new HRUserInviteDto();
		if (userIds == null || userIds.size() == 0) {
			result.setFailCnt(0);
			result.setSuccessCnt(0);
			result.setStatus(SysConstants.USER_IMPORT_STATUS_SUCCESS);
			result.setUsers(Collections.emptyList());
			return result;
		}
		int totalCnt = userIds.size();
		int failCnt = 0;
		int successCnt = 0;
		List<HRUserInviteMsgDto> userList = new ArrayList<>();
		HRUserInviteMsgDto userInviteMsgDto = null;
		for (int i = 0; i < userIds.size(); i++) {
			userInviteMsgDto = new HRUserInviteMsgDto();
			String userId = userIds.get(i);
			userInviteMsgDto.setId(userId);
			userInviteMsgDto.setSuccess(false);
			OaSysUser oaSysUser = getObjectById(userId);
			try {
				if (oaSysUser == null || oaSysUser.getDelflag().intValue() == BaseConstants.MYSQL_DELFLAG_DELETED) {
					throw new HioException("【" + userId + "】用户不存在");
				}
				userInviteMsgDto.setName(oaSysUser.getRealName());
				if (!(oaSysUser.getWorkStatus().equals(SysConstants.UserWorkStatus.NO_INVITE.getWorkStatus())
						|| oaSysUser.getWorkStatus().equals(SysConstants.UserWorkStatus.NO_CONFIRM.getWorkStatus()))) {
					throw new HioException("用户" + oaSysUser.getRealName() + "非待邀请邀状态");
				}
				oaSysUser.setWorkStatus(SysConstants.UserWorkStatus.NO_CONFIRM.getWorkStatus());
				ApiFeignResponse<String> response = platformFeignService.queryAlreadyOrCreate(oaSysUser.getMobile());
				if (response == null || response.getStatus() != 200 || isEmpty(response.getResult())) {
					throw new HioException("Platform -创建账号失败");
				}
				checkIMUserIdIsExits(getTendId(),response.getResult(),BaseConstants.USER_ORGANIZATION,oaSysUser.getId());
				oaSysUser.setImUserId(response.getResult());
				sendIMInvite(getTendId(), getUserIdIM(), oaSysUser.getMobile(),oaSysUser.getImUserId(),SysConstants.USER_INVITE_ORGANIZATION);
				update(oaSysUser);
				userInviteMsgDto.setSuccess(true);
				userInviteMsgDto.setMsg("success");
				//邀请增量更新
				updateOrganizationUpdateDateByUserPosition(getTendId(),null,null,null,oaSysUser,null);
			} catch (Exception e) {
				if (e instanceof HioException) {
					HioException hioException = (HioException) e;
					userInviteMsgDto.setMsg(hioException.getException());
				} else {
					userInviteMsgDto.setMsg(e.getMessage());
				}
			}
			if (userInviteMsgDto.isSuccess()) {
				successCnt++;
			} else {
				failCnt++;
			}
			userList.add(userInviteMsgDto);
		}
		result.setUsers(userList);
		result.setFailCnt(failCnt);
		result.setSuccessCnt(successCnt);
		if (failCnt == 0) {
			result.setStatus(SysConstants.USER_IMPORT_STATUS_SUCCESS);
		} else if (successCnt == 0) {
			result.setStatus(SysConstants.USER_IMPORT_STATUS_FAIL);
		} else {
			result.setStatus(SysConstants.USER_IMPORT_STATUS_PART);
		}
		return result;
	}

	@Override
	public Integer queryUserWorkStatus(@DataSource String tendId, String imUserId, Integer type) {
		String workStatus = "-1";
		if (type.equals(SysConstants.USER_ORGANIZATION)) {
			OaSysUser oaSysUser = getOaSysUserByImId(tendId, imUserId);
			if (oaSysUser != null && oaSysUser.getDelflag().intValue() == BaseConstants.MYSQL_DELFLAG_NORMAL) {
				workStatus = oaSysUser.getWorkStatus();
			}
		} else if (type.equals(SysConstants.USER_EXTERNAL)) {
			OaSysExternalContact sysExternalContact = getOaSysExternalContactByImId(tendId, imUserId);
			if (sysExternalContact != null && sysExternalContact.getDelflag().intValue() == BaseConstants.MYSQL_DELFLAG_NORMAL) {
				workStatus = sysExternalContact.getStatus();
			}
		}
		return Integer.parseInt(workStatus);
	}

	@Override
	public Map<String, FlowUserDto> queryUserMapByName(List<String> userNames) {
		return userMapper.queryUserMapByName(userNames);
	}

	public void saveUserPositionJobIM(@DataSource String tendId, String userId, List<PositionParam> positionList) {
		for (int i = 0; i < positionList.size(); i++) {
			PositionParam positionParam = positionList.get(i);
			// 查询是否有该职务
			OaSysOrganization oaSysOrganization = organizationMapper.selectByPrimaryKey(positionParam.getOrganizationId());
			if (oaSysOrganization == null || oaSysOrganization.getDelflag().intValue() == SysConstants.MYSQL_DELFLAG_DELETED) {
				throw new HioMybatisInsertException("当前部门不存在，请重新选择");
			}
			// 表示新增的兼职部门
			OaSysUserPosition userPosition = new OaSysUserPosition();
			userPosition.setOrganizationId(positionParam.getOrganizationId());
			userPosition.setPosition(positionParam.getPositionName());
			userPosition.setUserId(userId);
			userPosition.setCreateDate(new Date());
			userPosition.setUpdateDate(new Date());
			int exists = userPositionMapper.queryPosition(userId);
			if (exists <= 0) {
				userPosition.setIsDefault(SysConstants.MYSQL_STATUS_USABLE);
			} else {
				userPosition.setIsDefault(SysConstants.MYSQL_STATUS_DISABLE);
			}
			boolean b = userPositionService.queryPositionIsExits(tendId, userPosition.getOrganizationId(), userPosition.getUserId(), null);
			if (b) {
				throw new HioMybatisInsertException("主岗或者兼职岗中已有该岗位-" + oaSysOrganization.getName());
			}
			userPositionService.save(tendId, userPosition);
		}

	}

	/**
	 * 发送邀请到IM处理邀请逻辑
	 *
	 * @param mobile
	 */
	@Override
	public void sendIMInvite(@DataSource String tendId, String imUserId, String mobile,String userImUserId,Integer type) {
		FriendInfoParam param = new FriendInfoParam();
		param.setTendId(tendId);
		List<UserInfoDto> users = new ArrayList<UserInfoDto>();
		UserInfoDto dto = new UserInfoDto();
		dto.setUserMobile(mobile);
		dto.setImUserId(userImUserId);
		users.add(dto);
		param.setUsers(users);
		param.setSendId(imUserId);
		param.setType(type);
		ApiFeignResponse<Boolean> response = platformFeignService.sendApply(param);
		if (!(response != null && response.getStatus() == 200 && response.getResult())) {
			throw new HioMybatisInsertException("邀请失败，平台发送消息失败");
		}
	}

	/**
	 * 批量发送邀请、不处理返回结果。
	 *
	 * @param list
	 */
	private void sendIMBatchInvite(String tendId, String userIdIM, List<UserInviteParam> list) {
		FriendInfoParam param = new FriendInfoParam();
		param.setTendId(tendId);
		List<UserInfoDto> users = new ArrayList<>();
		list.forEach(item -> users.add(new UserInfoDto(item.getUserMobile(),item.getHxUid())));
		param.setUsers(users);
		param.setSendId(userIdIM);
		param.setType(SysConstants.USER_INVITE_ORGANIZATION);
		CoreHeaderInterceptor.initHystrixRequestContext(CoreHeaderInterceptor.HEADER_LABEL);
		ApiFeignResponse<Boolean> response = platformFeignService.sendApply(param);
	}

	/**
	 * @param organizationId
	 *            部门ID
	 * @param userId
	 *            用户ID
	 * @return
	 */
	public OaSysUserPosition transformOaSysUserPosition(@DataSource String tendId, String organizationId, String userId, String positionName,boolean isPuSystem) {
		OaSysUserPosition userPosition = new OaSysUserPosition();
		userPosition.setUserId(userId);
		userPosition.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
		userPosition.setOrganizationId(organizationId);
		userPosition.setPosition(positionName);
		userPosition.setId(userPositionService.generatePk());
		if (isPuSystem){
			userPosition.setCreatePersonId("1001");
			userPosition.setCreatePersonName("管理员");
			userPosition.setUpdatePersonId("1001");
			userPosition.setUpdatePersonName("管理员");
		}
		return userPosition;
	}

	/**
	 * @param name
	 *            姓名
	 * @param mobile
	 *            电话
	 * @param email
	 *            邮箱
	 * @param workStatus
	 *            工作状态
	 * @param imUserId
	 *            IM—User-ID
	 * @return
	 */
	private OaSysUser transformOaSysUser(@DataSource String tendId, String name, String mobile, String email, SysConstants.UserWorkStatus workStatus, String imUserId, boolean isPuSystem, Integer userType) {
		OaSysUser user = new OaSysUser();
		Date now = new Date();
		user.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
		user.setWorkStatus(workStatus.getWorkStatus());
		user.setRealName(name);
		user.setPinyinFirstLetter(Pinyin4jUtils.getShortPinyin(name));
		user.setPinyinFull(Pinyin4jUtils.getPinYin(name));
		user.setIsMale(SysConstants.Male.MAN.getStatus());
		user.setEmail(email);
		user.setMobile(mobile);
		user.setId(generatePk());
		user.setSort(getMaxSort());
		user.setCreateDate(new Date());
		user.setImUserId(imUserId);
		user.setUid(IDGenerator.getUUID());
//		user.setBirthday(now);
		user.setRegularTime(now);
		user.setFirstBeginTime(now);
		user.setNowEndTime(now);
		user.setEntryPartyTime(now);
		user.setFirstEndTime(now);
		user.setNowBeginTime(now);
		user.setUserType(userType);
		if (isPuSystem){
			user.setCreatePersonName("管理员");
			user.setUpdatePersonName("管理员");
			user.setCreatePersonId("1001");
			user.setUpdatePersonId("1001");
		}
		return user;
	}

	/**
	 * @return
	 */
	@Override
	public Integer getMaxSort() {
		return userMapper.getMaxSort() + 1;
	}

	@Override
	public Object reInviteUser(@DataSource String tendId, String id) {
		OaSysUser oaSysUser = userMapper.selectByPrimaryKey(id);
		if (oaSysUser == null || oaSysUser.getDelflag().intValue() == BaseConstants.MYSQL_DELFLAG_DELETED) {
			throw new HioMybatisInsertException("当前用户不存在或者已经删除");
		}
		if (oaSysUser.getWorkStatus() != null && !oaSysUser.getWorkStatus().equals(SysConstants.UserWorkStatus.NO_CONFIRM.getWorkStatus())) {
			if (isEquals(oaSysUser.getWorkStatus(),SysConstants.UserWorkStatus.JOB.getWorkStatus())){
				throw new HioException("TA已经接受你的邀请了");
			}
			throw new HioMybatisInsertException("当前用户不处于待邀请状态，请刷新重试");
		}
		sendIMInvite(tendId, getUserIdIM(), oaSysUser.getMobile(),oaSysUser.getImUserId(),oaSysUser.getUserType().intValue()==BaseConstants.MYSQL_USER_TYPE_COMMON ? SysConstants.USER_INVITE_ORGANIZATION:SysConstants.USER_INVITE_EXTERNAL);
		return null;
	}

	//
	@Override
	@Transactional
	public Boolean deleteUserById(@DataSource String tendId, String id) {
		// 校验权限
		tendId = organizationService.isHavePermission(tendId);
		List<OaSysOrganization> oaSysOrganizationList = new ArrayList<>();
		List<OaSysUserPosition> oaSysUserPositionList = new ArrayList<>();
		// 查找用户更新伪删除状态
		OaSysUser oaSysUser = userMapper.selectByPrimaryKey(id);
		if (oaSysUser == null || oaSysUser.getDelflag().intValue() == SysConstants.MYSQL_DELFLAG_DELETED) {
			throw new HioMybatisInsertException("当前用户不存在或者已经删除");
		}
		if (oaSysUser.getWorkStatus().equals(SysConstants.UserWorkStatus.JOB.getWorkStatus())) {
			throw new HioMybatisInsertException("当前用户处于在职状态，不允许删除");
		}
		//判断是不是最后一个管理员、自己不能删除自己
		OaSysUser currentUser = getOaSysUserByImId(tendId, getUserIdIM());
		if (isEquals(currentUser.getId(),oaSysUser.getId())){
			throw new HioMybatisUpdateException("不能删除自己");
		}
        //校验是否是最后一个管理员
		boolean b = roleUserService.queryUserCanDelete(tendId,oaSysUser.getId());
		if (!b){
			throw new HioMybatisUpdateException("只剩一个管理员不能删除");
		}
		oaSysUser.setDelflag(SysConstants.MYSQL_DELFLAG_DELETED);
		userMapper.updateByPrimaryKey(oaSysUser);

		// 职务对应查找-全部删除
		OaSysUserPosition userPosition = new OaSysUserPosition();
		userPosition.setDelflag(SysConstants.MYSQL_DELFLAG_NORMAL);
		userPosition.setUserId(id);
		List<OaSysUserPosition> results = userPositionMapper.select(userPosition);
		int delUserPositionCnt = 0;
		if (results != null && results.size() > 0) {
			for (int i = 0; i < results.size(); i++) {
				OaSysUserPosition userP = results.get(i);
				//无需删除
//				userP.setDelflag(SysConstants.MYSQL_DELFLAG_DELETED);
//				userPositionMapper.updateByPrimaryKey(userP);
				delUserPositionCnt++;
				oaSysUserPositionList.add(userP);
			}
		}

		// 部门负责人删除
		List<OaSysOrganization> oaSysOrganizations = organizationService.queryAllOrgLeadByUserId(tendId, oaSysUser.getId());
		int delOrgCnt = 0;
		if (oaSysOrganizations != null && oaSysOrganizations.size() > 0) {
			for (int i = 0; i < oaSysOrganizations.size(); i++) {
				OaSysOrganization oaSysOrganization = oaSysOrganizations.get(i);
				oaSysOrganization.setLeaderId("");
				organizationMapper.updateByPrimaryKey(oaSysOrganization);
				delOrgCnt++;
				oaSysOrganizationList.add(oaSysOrganization);
			}
		}

		// 调用平台删除
		deleteTendUser2Platform(tendId, oaSysUser, null, BaseConstants.USER_ORGANIZATION);

		// 角色对应查找-全部删除
		int result = roleUserService.deleteByUserId(tendId, oaSysUser.getId());
		// 更新时间
		updateOrganizationUpdateDateByUserPosition(tendId, oaSysUserPositionList, oaSysOrganizationList, null, oaSysUser, null);
		// redis 删除
		redisSetService.syncTendIdAndUser(StringUtil.isEmpty(tendId) ? getTendId() : tendId, oaSysUser.getImUserId(), oaSysUser.getId(), BaseConstants.REDIS_OPT_DEL);
		return true;
	}

	/**
	 * 编辑用户
	 *
	 * @param apiParam
	 * @return
	 */
	@Override
	public Object updateUser(@DataSource String tendId,UserInfoParam apiParam) {
		OaSysUser oaSysUser = getObjectById(apiParam.getUserId());
		if (oaSysUser == null || oaSysUser.getDelflag().intValue() == SysConstants.MYSQL_DELFLAG_DELETED) {
			throw new HioMybatisInsertException("当前用户已经被删除了，请关闭刷新");
		}
		String workStatus = oaSysUser.getWorkStatus();
		if (!(workStatus.equals(SysConstants.UserWorkStatus.NO_CONFIRM.getWorkStatus())
				||workStatus.equals(SysConstants.UserWorkStatus.JOB.getWorkStatus())
				|| workStatus.equals(SysConstants.UserWorkStatus.LEAVE.getWorkStatus()))) {
			throw new HioMybatisInsertException("当前用户不能编辑状态");
		}
		// ①当编辑用户手机不相同的时候，需要重新校验手机号
		if (!apiParam.getUserMobile().equals(oaSysUser.getMobile())) {
			int isExits = userMapper.queryUserByMobile(apiParam.getUserMobile(), false);
			if (isExits>0) {
				throw new HioMybatisInsertException("你填写的用户手机号已经存在，请重新填入");
			}
		}
        // 校验人员信息是否修改，未修改则不更新人员，因此也就不需要所有对应的部门的上级，减少频繁更新 (只要有一项更新，说明人员更新了)
        boolean isChange = false;
		// 记录已经被清空的部门ID，查询部门的负责人是否是当前用户，如果是的话需要将当前部门的负责人清空
		StringBuilder organizationChangeIds = new StringBuilder();

		// 已经改变的组织集合
		List<OaSysOrganization> oaSysOrganizationsChangesList = new ArrayList<>();
		// 已经改变的部门集合
		List<OaSysUserPosition> oaSysUserPositionsChangesList = new ArrayList<>();

		// ②删除的兼职部门Ids,必须不能包含主部门，主部门不能删除
		if (apiParam.getUserPositionDeletedIds() != null && apiParam.getUserPositionDeletedIds().size() > 0) {
			for (int i = 0; i < apiParam.getUserPositionDeletedIds().size(); i++) {
				OaSysUserPosition needDeletedUserPosition = userPositionMapper.selectByPrimaryKey(apiParam.getUserPositionDeletedIds().get(i));
				if (needDeletedUserPosition != null && needDeletedUserPosition.getDelflag().intValue() == 0 && needDeletedUserPosition.getIsDefault() != null
						&& needDeletedUserPosition.getIsDefault().intValue() != 1 && apiParam.getUserId().equals(needDeletedUserPosition.getUserId())) {
					needDeletedUserPosition.setDelflag(SysConstants.MYSQL_DELFLAG_DELETED);
					userPositionMapper.updateByPrimaryKey(needDeletedUserPosition);
                    isChange = true;
					organizationChangeIds.append(needDeletedUserPosition.getOrganizationId() + ",");

					// 添加到需要删除的集合
					oaSysUserPositionsChangesList.add(needDeletedUserPosition);
				}
			}
		}
		// ③查询用户的主部门以及兼职部门集合
		List<OaSysUserPosition> oaSysUserPositions = queryUserAllPositionByUserId(tendId, apiParam.getUserId());
		Map<String,OaSysUserPosition> map = new HashMap<>();
		List<OaSysUserPosition> tmp = new ArrayList<>();
		if(isNotEmpty(oaSysUserPositions)){
			oaSysUserPositions.forEach(item->{
				map.put(item.getId(),item);
			});
		}

		// ④更新的部门集合以及新增的兼职部门
		List<UserPositionParam> jobs = apiParam.getJobs();
		if (jobs != null && jobs.size() > 0) {
			for (int i = 0; i < jobs.size(); i++) {
			    isChange = true;
				UserPositionParam userPositionParam = jobs.get(i);
				String organizationId = userPositionParam.getOrganizationId();
				OaSysOrganization tarOrganization = organizationMapper.selectByPrimaryKey(organizationId);
				if (tarOrganization == null || tarOrganization.getDelflag() != null && tarOrganization.getDelflag().intValue() != SysConstants.MYSQL_DELFLAG_NORMAL) {
					throw new HioMybatisInsertException("当前部门id" + organizationId + "对应部门不存在");
				}
				if (StringUtils.isNotBlank(userPositionParam.getUserPositionId())) {
					if (!map.containsKey(userPositionParam.getUserPositionId())){
						continue;
					}
					// 表示更新的
					OaSysUserPosition sysUserPosition = map.get(userPositionParam.getUserPositionId());
					if (isNotEquals(sysUserPosition.getOrganizationId(),userPositionParam.getOrganizationId())
							||isNotEquals(sysUserPosition.getPosition(),userPositionParam.getPostName())){
						// 当有信息更新才去更新职务信息
						if (isNotEquals(sysUserPosition.getOrganizationId(),userPositionParam.getOrganizationId())) {
							// 判断该条记录的组织机构id是否变更\表示该条记录是被更新的，需要记录下OrganizationId
							organizationChangeIds.append(sysUserPosition.getOrganizationId() + ",");
						}
						sysUserPosition.setPosition(userPositionParam.getPostName());
						sysUserPosition.setOrganizationId(userPositionParam.getOrganizationId());
//						boolean b = userPositionService.queryPositionIsExits(tendId, sysUserPosition.getOrganizationId(), sysUserPosition.getUserId(), sysUserPosition.getId());
//						if (b) {
//							throw new HioMybatisInsertException("主岗或者兼职岗中已有该岗位-" + tarOrganization.getName());
//						}
//						userPositionMapper.updateByPrimaryKey(sysUserPosition);
						oaSysUserPositionsChangesList.add(sysUserPosition);
					}
				} else {
					// 表示新增的兼职部门
					OaSysUserPosition userPosition = new OaSysUserPosition();
					userPosition.setOrganizationId(userPositionParam.getOrganizationId());
					userPosition.setPosition(userPositionParam.getPostName());
					userPosition.setUserId(apiParam.getUserId());
					userPosition.setCreateDate(new Date());
					userPosition.setUpdateDate(new Date());
					userPosition.setIsDefault(SysConstants.MYSQL_STATUS_DISABLE);
//					boolean b = userPositionService.queryPositionIsExits(tendId, userPosition.getOrganizationId(), userPosition.getUserId(), null);
//					if (b) {
//						throw new HioMybatisInsertException("主岗或者兼职岗中已有该岗位-" + tarOrganization.getName());
//					}
//					userPositionService.save(tendId,userPosition);

					oaSysUserPositionsChangesList.add(userPosition);

					tmp.add(userPosition);
				}

			}
			for (OaSysUserPosition oaSysUserPosition :map.values()){
				tmp.add(oaSysUserPosition);
			}
			//校验是否存在
			exitsUserPosition(tendId,tmp);
			//插入数据库或者更新
			insertOrUpdateOaSysUser(tendId,tmp);
		}
		// 用户是否是被删除或者替换的部门的负责人，如果是的话，把部门负责人删除即可。
		List<OaSysOrganization> allOrgLeads = organizationService.queryAllOrgLeadByUserId(tendId, apiParam.getUserId());
		if (allOrgLeads != null && allOrgLeads.size() > 0) {
			String allChangeOrgIds = organizationChangeIds.toString();
			for (int i = 0; i < allOrgLeads.size(); i++) {
				OaSysOrganization oaSysOrganization = allOrgLeads.get(i);
				if ((apiParam.getWorkStatus().equals(BaseConstants.UserWorkStatus.LEAVE.getWorkStatus())
						&& isNotEquals(oaSysUser.getWorkStatus(),BaseConstants.UserWorkStatus.LEAVE.getWorkStatus()))||
						allChangeOrgIds.contains(oaSysOrganization.getId())) {
					// 设置leadId为null值
					oaSysOrganization.setLeaderId("");
					organizationMapper.updateByPrimaryKey(oaSysOrganization);

					oaSysOrganizationsChangesList.add(oaSysOrganization);
				}
			}
		}
		boolean isWorkStatusChange = false;
		if (!apiParam.isIM()){
			apiParam.setLandLine(oaSysUser.getTel());
		}
		if (isNotEquals(apiParam.getUserName(), oaSysUser.getRealName())
				|| isNotEquals(apiParam.getUserEmail(), oaSysUser.getEmail())
				|| isNotEquals(apiParam.getUserMobile(), oaSysUser.getMobile())
				|| isNotEquals(apiParam.getWorkStatus(), oaSysUser.getWorkStatus())
				|| isNotEquals(apiParam.getSex(), oaSysUser.getIsMale()+"")
				|| isNotEquals(apiParam.getLandLine(),oaSysUser.getTel())) {
			if (isNotEquals(apiParam.getWorkStatus(), oaSysUser.getWorkStatus())) {
				if (oaSysUser.getWorkStatus().equals(BaseConstants.UserWorkStatus.JOB.getWorkStatus())&&apiParam.getWorkStatus().equals(BaseConstants.UserWorkStatus.LEAVE.getWorkStatus()) ){
					//判断是不是最后一个管理员、自己不能删除自己
					OaSysUser currentUser = getOaSysUserByImId(tendId, getUserIdIM());
					if (isEquals(currentUser.getId(),oaSysUser.getId())){
						throw new HioMybatisUpdateException("不能离职自己");
					}
					//校验是否是最后一个管理员
					boolean b = roleUserService.queryUserCanDelete(tendId,oaSysUser.getId());
					if (!b){
						throw new HioMybatisUpdateException("只剩一个管理员不能离职");
					}
				}
				isWorkStatusChange = true;
			}
			isChange = true;
			oaSysUser.setRealName(apiParam.getUserName());
			oaSysUser.setEmail(apiParam.getUserEmail());
			oaSysUser.setPinyinFull(Pinyin4jUtils.getPinYin(apiParam.getUserName()));
			oaSysUser.setPinyinFirstLetter(Pinyin4jUtils.getShortPinyin(apiParam.getUserName()));
			oaSysUser.setMobile(apiParam.getUserMobile());
			if (apiParam.getWorkStatus().equals(BaseConstants.UserWorkStatus.LEAVE.getWorkStatus())
					&& isNotEquals(oaSysUser.getWorkStatus(),BaseConstants.UserWorkStatus.LEAVE.getWorkStatus())){
				oaSysUser.setLeaveTime(new Date());
			}
			if (apiParam.getWorkStatus().equals(BaseConstants.UserWorkStatus.JOB.getWorkStatus())){
				oaSysUser.setLeaveTime(null);
			}
			oaSysUser.setWorkStatus(apiParam.getWorkStatus());
			oaSysUser.setTel(apiParam.getLandLine());
			if (isNotEmpty(apiParam.getSex())) {
				oaSysUser.setIsMale(Integer.parseInt(apiParam.getSex()));
			}
			userMapper.updateByPrimaryKey(oaSysUser);

			// 更新用户调用platform 更新用户状态
			if (isWorkStatusChange) {
				updateTendUserWorkStatus(tendId, oaSysUser);
			}
		}
		// 更新组织时间
		updateOrganizationUpdateDateByUserPosition(tendId, oaSysUserPositionsChangesList, oaSysOrganizationsChangesList, null, isChange ? oaSysUser : null, null);

		return null;
	}

	public void insertOrUpdateOaSysUser(@DataSource String tendId, List<OaSysUserPosition> tmp) {
		if (Base.isNotEmpty(tmp)){
			tmp.forEach(item->{
				if (Base.isEmpty(item.getId())){
					userPositionService.save(tendId,item);
				}else {
					userPositionMapper.updateByPrimaryKey(item);
				}
			});
		}
	}

	@Override
	public void exitsUserPosition(@DataSource String tendId, List<OaSysUserPosition> tmp) {
		// key :userId-organizationId
		Map<String,OaSysUserPosition> tmpMap = new HashMap<>();
		if (Base.isNotEmpty(tmp)){
			tmp.forEach(item->{
				String mapKey = item.getUserId()+"-"+item.getOrganizationId();
				if (tmpMap.containsKey(mapKey)){
					OaSysOrganization tarOrganization = organizationMapper.selectByPrimaryKey(item.getOrganizationId());
					throw new HioException("主岗或者兼职岗中已有该岗位-" + (tarOrganization==null?"":tarOrganization.getName()));
				}else {
					tmpMap.put(mapKey,item);
				}
			});
		}
	}

	/**
	 * @param userPositions
	 *            用户的职位更新 (编辑用户的时候)
	 * @param organizationsUpList
	 *            需要向上更新的组织机构时间 直接通过prefixId能查出所有的向上的组织Ids
	 * @param organizationsDownList
	 *            需要向下更新的组织机构时间 需要查看出所有的子部们更新时间
	 * @param oaSysUser
	 *            用户
	 */
	@Override
	public void updateOrganizationUpdateDateByUserPosition(@DataSource String tendId, List<OaSysUserPosition> userPositions, List<OaSysOrganization> organizationsUpList,
			List<OaSysOrganization> organizationsDownList, OaSysUser oaSysUser, OaSysExternalContact oaSysExternalContact) {
		// 统一几个表的更新时间
		Date nowDate = new Date();
		HashSet<String> organizationsSet = new HashSet<>();
		HashSet<String> userPositionsSet = new HashSet<>();
		HashSet<String> userSet = new HashSet<>();
		HashSet<String> externalSet = new HashSet<>();

		// 外部联系人更新---》更新组织顶级部门
		if (oaSysExternalContact != null) {
			externalSet.add(oaSysExternalContact.getId());
			externalContactService.updateBatchUpdateTime(tendId, externalSet, nowDate);
			OaSysOrganization organization = organizationService.queryCompanyOrganization(tendId);
			if (organizationsUpList == null) {
				organizationsUpList = new ArrayList<>();
			}
			organizationsUpList.add(organization);
		}

		// 组织向上更新--->查找出所有的上级(当前部门以及顶级部门)--->更新时间
		if (organizationsUpList != null && organizationsUpList.size() > 0) {
			getAllUpOrgsToHashSet(tendId, organizationsUpList, organizationsSet);
		}
		// 组织向下更新--->查找出所有的下级--->更新时间（查找未删除的即可）---组织更新名字的时候
		if (organizationsDownList != null && organizationsDownList.size() > 0) {
			getAllOrgsFromDownlListToHashSet(tendId, organizationsDownList, organizationsSet);
		}
		// 职位更新--->查找出所有对应的组织更新
		if (userPositions != null && userPositions.size() > 0) {
			getAllOrgIdsFromPositionsToHashSet(tendId, userPositions, organizationsSet, userPositionsSet);
		}
		// 用户更新--->单独更新用户的姓名--->对应部门都需要更新【仅仅更新未删除的、已删除的会直接会传在 userPositionsList】
		if (oaSysUser != null) {
			// 查找对应的职务--->部门
			List<OaSysUserPosition> oaSysUserPositions = queryUserAllPositionByUserId(tendId, oaSysUser.getId());
			// 职位更新--->查找出所有对应的组织更新
			getAllOrgIdsFromPositionsToHashSet(tendId, oaSysUserPositions, organizationsSet, userPositionsSet);
		}
		if (organizationsSet.size() > 0) {
			// 批量更新数据库组织的更新时间
			organizationService.updateBatchUpdateTime(tendId, organizationsSet, nowDate);
		}
		if (userPositionsSet.size() > 0) {
			// 批量职位时间更新
			userPositionService.updateBatchUpdateTime(tendId, userPositionsSet, nowDate);
		}
		if (oaSysUser != null) {
			userSet.add(oaSysUser.getId());
			updateBatchUpdateTime(tendId, userSet, nowDate);
		}

		// 调用redis更新时间
		List<String> orgIds = new ArrayList<>();
		List<String> positionIds = new ArrayList<>();
		List<String> userIds = new ArrayList<>();
		List<String> externalIds = new ArrayList<>();
		orgIds.addAll(organizationsSet);
		positionIds.addAll(userPositionsSet);
		userIds.addAll(userSet);
		externalIds.addAll(externalSet);
		redisSetService.syncOrgAndUserAndPositions(tendId, orgIds, userIds, positionIds, externalIds);
	}

	@Override
	public void updateBatchUpdateTime(@DataSource String tendId, HashSet<String> useSet, Date nowDate) {
		userMapper.updateBatchUpdateTime(useSet, nowDate);
	}

	public void getAllOrgsFromDownlListToHashSet(@DataSource String tendId, List<OaSysOrganization> organizationsDownList, HashSet organizationsSet) {
		if (organizationsDownList != null && organizationsDownList.size() > 0) {
			for (int i = 0; i < organizationsDownList.size(); i++) {
				OaSysOrganization oaSysOrganization = organizationsDownList.get(i);
				String[] split = oaSysOrganization.getPrefixId().split("/");
				int length = split.length;
				if (length > 0) {
					// 最顶级的公司ID
					organizationsSet.add(split[0]);
				}
				if (length > 1) {
					// 当前公司的组织ID
					organizationsSet.add(split[length - 1]);
				}
				// 查找所有的子集
				List<String> organizationDtos = organizationMapper.queryAllOrgIdsByOrgId(oaSysOrganization.getPrefixId(), false);
				organizationsSet.addAll(organizationDtos);
			}
		}
	}

	/**
	 * 通过所有的组织，查询上级的组织ids
	 *
	 * @param tendId
	 * @param organizations
	 * @param organizationsSet
	 */
	public void getAllUpOrgsToHashSet(@DataSource String tendId, List<OaSysOrganization> organizations, HashSet organizationsSet) {
		for (int i = 0; i < organizations.size(); i++) {
			OaSysOrganization oaSysOrganization = organizations.get(i);
			String prefixId = oaSysOrganization.getPrefixId();
			String[] orgIds = prefixId.split("/");
			int length = orgIds.length;
			if (length > 0) {
				// 最顶级公司的ID
				organizationsSet.add(orgIds[0]);
			}
			if (length > 1) {
				// 当前组织的ID
				organizationsSet.add(orgIds[length - 1]);
			}
			// organizationsSet.addAll(Arrays.asList(orgIds));//所有的-
		}
	}

	/**
	 * 通过职位查询所有的组织IDS集合
	 *
	 * @param userPositions
	 * @param organizationsSet
	 * @param userPositionsSet
	 */
	public void getAllOrgIdsFromPositionsToHashSet(@DataSource String tendId, List<OaSysUserPosition> userPositions, HashSet organizationsSet, HashSet userPositionsSet) {
		for (int i = 0; i < userPositions.size(); i++) {
			OaSysUserPosition userPosition = userPositions.get(i);
			if (userPosition != null) {
				userPositionsSet.add(userPosition.getId());
				OaSysOrganization oaSysOrganization = organizationMapper.selectByPrimaryKey(userPosition.getOrganizationId());
				if (oaSysOrganization != null && oaSysOrganization.getPrefixId() != null) {
					String[] orgIds = oaSysOrganization.getPrefixId().split("/");
					int length = orgIds.length;
					if (length > 0) {
						// 最顶级
						organizationsSet.add(orgIds[0]);
					}
					if (length > 1) {
						// 当前
						organizationsSet.add(orgIds[length - 1]);
					}
					// organizationsSet.addAll(Arrays.asList(orgIds));
				}
			}

		}
	}

	/**
	 * 查询用户所有的职务信息
	 *
	 * @param userId
	 * @return
	 */
	@Override
	public List<OaSysUserPosition> queryUserAllPositionByUserId(@DataSource String tendId, String userId) {
		Example example = new Example(OaSysUserPosition.class);
		Example.Criteria criteria = example.createCriteria();
		criteria.andEqualTo("userId", userId);
		criteria.andEqualTo("delflag", SysConstants.MYSQL_DELFLAG_NORMAL);
		List<OaSysUserPosition> oaSysUserPositions = userPositionMapper.selectByExample(example);
		return oaSysUserPositions;
	}

	/**
	 * 获取用户信息
	 *
	 * @param id
	 * @return
	 */
	@Override
	public UserInfoDto getUserInfo(@DataSource String tendId, String id) {
		OaSysUser oaSysUser = getObjectById(id);
		if (oaSysUser == null) {
			throw new HioMybatisInsertException("当前用户不存在");
		}
		List<OaSysUserPosition> oaSysUserPositions = queryUserAllPositionByUserId(tendId, id);
		UserInfoDto userInfoVo = new UserInfoDto();
		userInfoVo.setUserEmail(oaSysUser.getEmail());
		userInfoVo.setUserId(id);
		userInfoVo.setUserType(getStr(oaSysUser.getUserType()));
		userInfoVo.setUserName(oaSysUser.getRealName());
		userInfoVo.setSex(getStr(oaSysUser.getIsMale()));
		userInfoVo.setUserMobile(oaSysUser.getMobile());
		if (oaSysUser.getWorkStatus() != null && oaSysUser.getWorkStatus().equals(SysConstants.UserWorkStatus.NO_CONFIRM.getWorkStatus())) {
			// 待确认
			userInfoVo.setWorkStatus(SysConstants.UserWorkStatus.NO_CONFIRM.getWorkStatusName());
		} else if (oaSysUser.getWorkStatus().equals(SysConstants.UserWorkStatus.JOB.getWorkStatus())) {
			// 在职
			userInfoVo.setWorkStatus(SysConstants.UserWorkStatus.JOB.getWorkStatusName());
		} else if (oaSysUser.getWorkStatus().equals(SysConstants.UserWorkStatus.LEAVE.getWorkStatus())) {
			// 离职
			userInfoVo.setWorkStatus(SysConstants.UserWorkStatus.LEAVE.getWorkStatusName());
		}
		List<UserPositionDto> jobs = new ArrayList<>();
		if (isNotEmpty(oaSysUserPositions)){
            for (int i = 0; i < oaSysUserPositions.size(); i++) {
                UserPositionDto userPositionVo = new UserPositionDto();
                OaSysUserPosition userPosition = oaSysUserPositions.get(i);
                OaSysOrganization sysOrganization = organizationService.getObjectById(tendId, userPosition.getOrganizationId());
                if (sysOrganization == null) {
                    continue;
                }
                userPositionVo.setIsDefault((userPosition.getIsDefault() != null && userPosition.getIsDefault().intValue() == SysConstants.STATUS_TRUE_INT) ? "true" : "false");
                userPositionVo.setOrganizationId(userPosition.getOrganizationId());
                userPositionVo.setOrganizationName(sysOrganization.getName());
                userPositionVo.setPostName(userPosition.getPosition());
                userPositionVo.setUserPositionId(userPosition.getId());
                if (userPositionVo.getIsDefault().equals("true")) {
                    jobs.add(0, userPositionVo);
                } else {
                    jobs.add(userPositionVo);
                }
            }
        }
		StringBuilder sb = new StringBuilder();
		List<OaSysRoleUser> oaSysRoleUsers = roleUserService.queryRoleUsersByUserId(tendId, oaSysUser.getId());
		if (oaSysRoleUsers != null && oaSysRoleUsers.size() > 0) {
			for (int i = 0; i < oaSysRoleUsers.size(); i++) {
				OaSysRoleUser oaSysRoleUser = oaSysRoleUsers.get(i);
				OaSysRole sysRole = roleService.getObjectById(tendId, oaSysRoleUser.getRoleId());
				if (sysRole == null || isEmpty(sysRole.getName())){
				    continue;
                }
				if (i == 0) {
					sb.append(sysRole.getName());
				} else {
					sb.append("、").append(sysRole.getName());
				}
			}
		}
		userInfoVo.setJobs(jobs);
		userInfoVo.setRoleNames(sb.toString());
		TenantCompanyInfoDto companyInfo = redisGetService.getCompanyInfo(tendId);
		if (isNotEmpty(companyInfo)) {
			userInfoVo.setLogo(isEmpty(companyInfo.getLogo()) ? "" : companyInfo.getLogo());
		} else {
			userInfoVo.setLogo("");
		}
		return userInfoVo;
	}

	@Override
	public List<OAUserDto> queryUserListByName(String queryCondition, String tendId) {
		return userMapper.queryUserListByName(queryCondition);
	}

	@Override
	public String getOAUserId(@DataSource String tendId, String imUserId) {
		Map<String, Object> map = new HashMap<>();
		map.put("imUserId", imUserId);
		map.put(BaseConstants.MYSQL_COLUMN_DELFLAG, BaseConstants.MYSQL_DELFLAG_NORMAL);
		OaSysUser user = getObjectByExample(map);
		if (user == null) {
			logger.warn("查询OAUSerId失败 {}, {} ", tendId, imUserId);
			return null;
		} else {
			return user.getId();
		}
	}

	@Override
	public boolean syncUserUpdateOrg(@DataSource String tendId, IMUserSyncParam apiParam) {
		// TODO 修改上级部门更新时间
		OaSysUser oaUser = null;
		OaSysExternalContact oaSysExternalContact = null;
		if (apiParam.getType().equals(SysConstants.USER_ORGANIZATION)) {
			oaUser = getOaSysUserByImId(tendId, apiParam.getImUserId());
		} else if (apiParam.getType().equals(SysConstants.USER_EXTERNAL)) {
			oaSysExternalContact = getOaSysExternalContactByImId(tendId, apiParam.getImUserId());
		}
		updateOrganizationUpdateDateByUserPosition(tendId, null, null, null, oaUser, oaSysExternalContact);
		return true;
	}

	@Override
	public List<OrgRoleUserDto> queryOrgAndRoleByUserIds(@DataSource String tendId, List<String> userIds,boolean containsParentUserOrg) {
		long start2 = System.currentTimeMillis();
		if (!(userIds != null && userIds.size() > 0)) {
			return new ArrayList<>();
		}
		List<GeneralDto> generalDtos = userPositionMapper.queryOrgAndRoleByUserIds(tendId, userIds);
		if (isEmpty(generalDtos)){
			return Collections.emptyList();
		}
		if (containsParentUserOrg){
			List<GeneralDto> parentDtos = new ArrayList<>();
			generalDtos.forEach(item->{
				if (item.getType().equals("organization")){
					String[] preIds = item.getPrefixId().split("/");
					String[] preNames = item.getPrefixId().split("/");
					for (int i = 0; i < preIds.length; i++) {
						GeneralDto generalDto = new GeneralDto();
						String preId = preIds[i];
						String preName = preNames[i];
						if (isEquals(preId,item.getSid())){
							continue;
						}
						generalDto.setName(preName);
						generalDto.setSid(preId);
						generalDto.setType(item.getType());
						generalDto.setUserId(item.getUserId());
						parentDtos.add(generalDto);
					}
				}
			});
			generalDtos.addAll(parentDtos);
		}


		Map<String, OrgRoleUserDto> map = new HashMap<>();
		for (int i = 0; i < userIds.size(); i++) {
			String userId = userIds.get(i);
			OrgRoleUserDto orgRoleUserDto = null;
			if (map.containsKey(userId)) {
				continue;
			} else {
				orgRoleUserDto = new OrgRoleUserDto();
				List<GeneralDto> orgs = new ArrayList<>();
				List<GeneralDto> roles = new ArrayList<>();
				orgRoleUserDto.setUserId(userId);
				orgRoleUserDto.setRoles(roles);
				orgRoleUserDto.setOrganizations(orgs);
				map.put(userId, orgRoleUserDto);
			}
			// 遍历返回结果
			for (int j = 0; j < generalDtos.size(); j++) {
				GeneralDto generalDto = generalDtos.get(j);
				if (!generalDto.getUserId().equals(userId)) {
					continue;
				}
				if (generalDto.getType().equals(SysConstants.SYS_TYPE_ORGANIZATION)) {
					orgRoleUserDto.getOrganizations().add(generalDto);
				} else if (generalDto.getType().equals(SysConstants.SYS_TYPE_ROLE)) {
					orgRoleUserDto.getRoles().add(generalDto);
				}
			}
		}
		long end2 = System.currentTimeMillis();
		System.out.println("feign耗时：" + (end2 - start2) + " ms");
		return new ArrayList<OrgRoleUserDto>(map.values());
	}

	@Override
	public Page<UserDto> getUserListByOrg(UserListParam apiParam) {
		HashMap<String, Object> map = new HashMap<>();
		map.put("pageNum", apiParam.getPageNum());
		map.put("pageCount", apiParam.getPageCount());
		pageStart(map);
		List<UserDto> userListByOrg = userPositionMapper.getUserListByOrg(apiParam);
		return super.list2page(userListByOrg);
	}

	/**
	 * @param {"organizationId":"1","roleId":"2","userId":"1"}
	 *            <!--根据组织ID和角色查询用户 交集-->
	 * @return
	 */
	@Override
	public List<UserDto> getUserListByOrgAndRole(@DataSource String tendId,Map<String, Object> map) {
		return userPositionMapper.getUserListByOrgAndRole(map);
	}

	@Override
	public UserDto getOrgLeaderByUserId(String userId) {
		return userPositionMapper.getOrgLeaderByUserId(userId);
	}

	@Override
	public OaSysExternalContact getOaSysExternalContactByImId(@DataSource String tendId, String imUserId) {
		OaSysExternalContact user = new OaSysExternalContact();
		user.setImUserId(imUserId);
		user.setDelflag(SysConstants.MYSQL_DELFLAG_NORMAL);
		return externalContactMapper.selectOne(user);
	}

	@Override
	public OaSysUser getOaSysUserByImId(@DataSource String tendId, String imUserId) {
		OaSysUser user = new OaSysUser();
		user.setImUserId(imUserId);
		user.setDelflag(SysConstants.MYSQL_DELFLAG_NORMAL);
		return userMapper.selectOne(user);
	}

	@Override
	public IMUserDetailInfoDto getImUserInfo(@DataSource String tendId, IMUserInfoParam apiParam) {
		IMUserDetailInfoDto dto = new IMUserDetailInfoDto();
		OaSysOrganization oaSysOrganization = organizationService.queryCompanyOrganization(apiParam.getTendId());
		if (apiParam.getType().equals(SysConstants.USER_ORGANIZATION)) {
			OaSysUser oaSysUser = getOaSysUserByImId(apiParam.getTendId(), apiParam.getImUserId());
			if (oaSysUser != null) {
				dto.setEmail(oaSysUser.getEmail());
				dto.setId(oaSysUser.getId());
				dto.setImUserId(oaSysUser.getImUserId());
				dto.setName(oaSysUser.getRealName());
				dto.setSex(oaSysUser.getIsMale());
				dto.setBirthday(oaSysUser.getBirthday());
				dto.setLandLine(oaSysUser.getTel());
				dto.setMobile(oaSysUser.getMobile());
				dto.setWorkStatus(Integer.valueOf(oaSysUser.getWorkStatus()));
				dto.setType(SysConstants.USER_ORGANIZATION);
				dto.setOrganizationName(oaSysOrganization == null ? null : oaSysOrganization.getName());
				dto.setOrganizationId(oaSysOrganization == null ? null : oaSysOrganization.getId());
				dto.setPinyinFirst(oaSysUser.getPinyinFirstLetter());
				dto.setPinyinFull(oaSysUser.getPinyinFull());
				// 查询所有的职位u
				List<OrganizationDto> organizationDtos = organizationService.queryOrganizationsByUserId(apiParam.getTendId(), oaSysUser.getId());
				if (organizationDtos != null && organizationDtos.size() > 0) {
					List<IMUserPositionDto> positionList = new ArrayList<>();
					IMUserPositionDto positionDto = null;
					for (int i = 0; i < organizationDtos.size(); i++) {
						OrganizationDto organizationDto = organizationDtos.get(i);
						positionDto = new IMUserPositionDto();
						positionDto.setPositionName(organizationDto.getPositionName());
						positionDto.setPositionId(organizationDto.getPositionId());
						positionDto.setDeptId(organizationDto.getId());
						positionDto.setDeptName(organizationDto.getName());
						positionDto.setPrefixName(organizationDto.getPrefixName());
						positionDto.setDefault(organizationDto.isDefault());
						if (organizationDto.isDefault()) {
							positionList.add(0, positionDto);
						} else {
							positionList.add(positionDto);
						}
					}
					dto.setPositions(positionList);
				}
			}
		} else if (apiParam.getType().equals(SysConstants.USER_EXTERNAL)) {
			OaSysExternalContact sysExternalContact = getOaSysExternalContactByImId(apiParam.getTendId(), apiParam.getImUserId());
			if (sysExternalContact != null) {
				dto.setName(sysExternalContact.getName());
				dto.setMobile(sysExternalContact.getMobile());
				dto.setImUserId(sysExternalContact.getImUserId());
				dto.setEmail(sysExternalContact.getEmail());
				dto.setBirthday(sysExternalContact.getBirthday());
				dto.setLandLine(sysExternalContact.getTel());
				dto.setType(SysConstants.USER_ORGANIZATION);
				dto.setSex(sysExternalContact.getIsMale() == null ? 1 : Integer.parseInt(sysExternalContact.getIsMale()));
				dto.setOrganizationName(oaSysOrganization == null ? null : oaSysOrganization.getName());
				dto.setOrganizationId(oaSysOrganization == null ? null : oaSysOrganization.getId());
				dto.setWorkStatus(sysExternalContact.getStatus() == null ? 0 : Integer.parseInt(sysExternalContact.getStatus()));
				dto.setId(sysExternalContact.getId());
				dto.setLabel(sysExternalContact.getLabel());
				dto.setRemark(sysExternalContact.getRemak());
				dto.setCompanyName(sysExternalContact.getCompany());
				dto.setAddress(sysExternalContact.getAddress());
				dto.setPinyinFirst(sysExternalContact.getPinyinFirstLetter());
				dto.setPinyinFull(sysExternalContact.getPinyinFull());
				List<IMUserPositionDto> positionList = new ArrayList<>();
				IMUserPositionDto positionDto = new IMUserPositionDto();
				positionDto.setPositionId(-1 + "");
				positionDto.setPositionName(sysExternalContact.getPosition() == null ? "" : sysExternalContact.getPosition());
				positionDto.setDeptId(-1 + "");
				positionDto.setDeptName("");
				positionList.add(positionDto);
				dto.setPositions(positionList);
				List<IMUserDetailInfoDto.UserManagerDto> externalManangers = externalShareService.queryOaUserListByType(tendId, sysExternalContact.getId(),
						BaseConstants.MYSQL_EXTERNAL_MANAGER);
				List<IMUserDetailInfoDto.UserManagerDto> externalShares = externalShareService.queryOaUserListByType(tendId, sysExternalContact.getId(),
						BaseConstants.MYSQL_EXTERNAL_SHARE);
				if (isNotEmpty(externalManangers)) {
					dto.setManagers(externalManangers.get(0));
				}
				if (isNotEmpty(externalShares)) {
					dto.setShares(externalShares);
				} else {
					dto.setShares(Collections.emptyList());
				}
			}
		}
		return dto;
	}

	@Override
	public List<UserInviteParam> previewExcel(FileImportParam apiParam) {
		OaSysOrganization oaSysOrganization = organizationService.getObjectById(apiParam.getOrganizationId());
		if (oaSysOrganization == null) {
			throw new HioMybatisInsertException("当前部门不存在，请重新选择");
		}
		List<UserInviteParam> lists = importData(apiParam);
		return lists;
	}

	@Override
	public UserImportDto importBatchUsers(UserImportBatchParam apiParam) {
		List<UserInviteParam> lists = apiParam.getUsers();
		return batchInsertUsers(lists);
	}

	@Override
	public Boolean delete(@DataSource String tendId, IMOAUserParam apiParam) {
		boolean b = false;
		if (apiParam.getType().equals(BaseConstants.USER_ORGANIZATION)) {
			b = deleteUserById(tendId, apiParam.getOaUserId());
		} else if (apiParam.getType().equals(BaseConstants.USER_EXTERNAL)) {
			b = deleteOaSysExternalContactById(tendId, apiParam.getOaUserId());
		}
		return b;
	}

	private boolean deleteOaSysExternalContactById(String tendId, String id) {
		OaSysExternalContact oaSysExternalContact = externalContactMapper.selectByPrimaryKey(id);
		OaSysUser oaSysUser = userMapper.selectByPrimaryKey(id);
		if (oaSysExternalContact != null) {
			//TODO
			if (oaSysUser!=null){
				oaSysUser.setDelflag(BaseConstants.MYSQL_DELFLAG_DELETED);
				userMapper.updateByPrimaryKey(oaSysUser);
			}
			oaSysExternalContact.setDelflag(BaseConstants.MYSQL_DELFLAG_DELETED);
			externalContactMapper.updateByPrimaryKey(oaSysExternalContact);
			// 调用平台删除
			deleteTendUser2Platform(tendId, null, oaSysExternalContact, BaseConstants.USER_EXTERNAL);
			// 更新时间
			updateOrganizationUpdateDateByUserPosition(tendId, null, null, null, oaSysUser, oaSysExternalContact);
		}
		return true;
	}

	@Override
	@Transactional
	public IMOAUserInfoDto updateOAUserAndPosition(@DataSource String tendId, IMOAUserUpdateParam apiParam) {
		if (StringUtil.isBlank(getUserIdIM())) {
			throw new HioException("当前登录信息失效");
		}
		IMOAUserInfoDto dto = new IMOAUserInfoDto();
		if (apiParam.getType().equals(SysConstants.USER_ORGANIZATION)) {
			OaSysUser oaSysUser = getObjectById(apiParam.getOaUserId());
			if (oaSysUser == null || oaSysUser.getDelflag().intValue() == SysConstants.MYSQL_DELFLAG_DELETED) {
				throw new HioMybatisInsertException("当前用户已经被删除了，请关闭刷新");
			}
			UserInfoParam param = new UserInfoParam();
			param.setUserId(apiParam.getOaUserId());
			param.setUserMobile(apiParam.getPhone());
			param.setUserName(apiParam.getName());
			param.setUserEmail(apiParam.getEmail());
			param.setTendId(apiParam.getTendId());
			param.setWorkStatus(oaSysUser.getWorkStatus());
			param.setLandLine(apiParam.getLandLine());
			param.setSex(oaSysUser.getIsMale()+"");
			param.setUserPositionDeletedIds(apiParam.getUserPositionDeletedIds());
			if (apiParam.getJobs()!=null){
				List<UserPositionParam> jobs = new ArrayList<>();
				apiParam.getJobs().forEach(job -> {
					jobs.add(new UserPositionParam(job.getOrganizationId(),job.getPositionName(),job.getPositionId()));
				});
				param.setJobs(jobs);
			}
			updateUser(tendId,param);

			//查询出来
			IMOAUserParam queryParam = new IMOAUserParam();
			queryParam.setOaUserId(oaSysUser.getId());
			queryParam.setTendId(tendId);
			queryParam.setType(0);
			queryOAUserAndPositionDetail(tendId,queryParam);

		} else if (apiParam.getType().equals(BaseConstants.USER_EXTERNAL)) {
			OaSysExternalContact oaSysExternalContact = externalContactMapper.selectByPrimaryKey(apiParam.getOaUserId());
			if (oaSysExternalContact == null || oaSysExternalContact.getDelflag().intValue() == BaseConstants.MYSQL_DELFLAG_DELETED) {
				throw new HioMybatisInsertException("编辑失败，当前用户不存在，或者已经删除");
			}
			OaSysUser oaSysUser = getObjectById(apiParam.getOaUserId());
			if (oaSysUser == null ){
				throw new HioMybatisUpdateException("当前外部联系人为老数据，请删除该条数据");
			}
			if (isNotEquals(apiParam.getPhone(),oaSysExternalContact.getMobile())) {
				checkMobileIsExits(tendId,apiParam.getPhone());
			}

			updateExternalUser(tendId,oaSysExternalContact,oaSysUser,apiParam);

			dto.setName(oaSysExternalContact.getName());
			dto.setPhone(oaSysExternalContact.getMobile());
			dto.setEmail(oaSysExternalContact.getEmail());
			dto.setLandLine(oaSysExternalContact.getTel());
			dto.setPositionName(oaSysExternalContact.getName());
			dto.setOrganizationId("-1");
			dto.setOrganizationName("");
			dto.setType(apiParam.getType());

		}
		return dto;
	}

	private void updateExternalUser(String tendId, OaSysExternalContact oaSysExternalContact, OaSysUser oaSysUser, IMOAUserUpdateParam apiParam) {
		oaSysExternalContact.setName(apiParam.getName());
		oaSysExternalContact.setPosition(apiParam.getPositionName());
		oaSysExternalContact.setMobile(apiParam.getPhone());
		oaSysExternalContact.setEmail(apiParam.getEmail());
		oaSysExternalContact.setTel(apiParam.getLandLine());
		oaSysExternalContact.setPinyinFirstLetter(Pinyin4jUtils.getShortPinyin(apiParam.getName()));
		oaSysExternalContact.setPinyinFull(Pinyin4jUtils.getPinYin(apiParam.getName()));
		oaSysExternalContact.setCompany(apiParam.getCompanyName());
		oaSysExternalContact.setLabel(apiParam.getLabel());
		oaSysExternalContact.setAddress(apiParam.getAddress());
		oaSysExternalContact.setRemak(apiParam.getRemark());
		externalContactMapper.updateByPrimaryKey(oaSysExternalContact);

		oaSysUser.setRealName(apiParam.getName());
		oaSysUser.setMobile(apiParam.getPhone());
		oaSysUser.setEmail(apiParam.getEmail());
		oaSysUser.setTel(apiParam.getLandLine());
		oaSysUser.setPinyinFirstLetter(Pinyin4jUtils.getShortPinyin(apiParam.getName()));
		oaSysUser.setPinyinFull(Pinyin4jUtils.getPinYin(apiParam.getName()));
		update(oaSysUser);

		// 更新共享人
		if (isNotEmpty(apiParam.getShareUserList())) {
			externalShareService.updateShares(tendId, oaSysExternalContact.getId(), apiParam.getShareUserList().getShareUsers(), apiParam.getShareUserList().getDeleteEsIds());
		}

		// 更新时间
		updateOrganizationUpdateDateByUserPosition(tendId, null, null, null, null, oaSysExternalContact);
	}

	@Override
	@Transactional
	public UserDto updateImUserInfo(@DataSource String tendId, IMUserUpdateParam apiParam) {
		UserDto dto = new UserDto();
		if (apiParam.getType().equals(String.valueOf(SysConstants.USER_ORGANIZATION))) {
			OaSysUser oaSysUser = getOaSysUserByImId(apiParam.getTendId(), apiParam.getImUserId());
			if (oaSysUser != null) {
				oaSysUser.setEmail(apiParam.getEmail());
				oaSysUser.setRealName(apiParam.getName());
				oaSysUser.setBirthday(apiParam.getBirthday());
				if (oaSysUser.getRealName() != null) {
					oaSysUser.setPinyinFirstLetter(Pinyin4jUtils.getShortPinyin(oaSysUser.getRealName()));
					oaSysUser.setPinyinFull(Pinyin4jUtils.getPinYin(oaSysUser.getRealName()));
				}
				if (apiParam.getSex() != null) {
					oaSysUser.setIsMale(Integer.parseInt(apiParam.getSex()));
				}
				oaSysUser.setTel(apiParam.getLandLine());
				int update = update(oaSysUser);

				// 更新职务
				OaSysUserPosition sysUserPosition = userPositionService.getObjectById(apiParam.getPositionId());
				if (sysUserPosition != null && sysUserPosition.getUserId().equals(oaSysUser.getId())) {
					boolean b = userPositionService.queryPositionIsExits(tendId, apiParam.getOrganizationId(), oaSysUser.getId(), sysUserPosition.getId());
					if (!b) {
						sysUserPosition.setOrganizationId(apiParam.getOrganizationId());
						sysUserPosition.setPosition(apiParam.getPositionName());
						userPositionService.update(sysUserPosition);
					}
				}
				// 更新数据库-增量更新
				updateOrganizationUpdateDateByUserPosition(apiParam.getTendId(), null, null, null, oaSysUser, null);

				dto.setEmail(oaSysUser.getEmail());
				dto.setId(oaSysUser.getId());
				dto.setImUserId(oaSysUser.getImUserId());
				dto.setRealName(oaSysUser.getRealName());
			}
		} else if (apiParam.getType().equals(String.valueOf(SysConstants.USER_EXTERNAL))) {
			OaSysExternalContact sysExternalContact = getOaSysExternalContactByImId(apiParam.getTendId(), apiParam.getImUserId());
			if (sysExternalContact != null) {
				sysExternalContact.setName(apiParam.getName());
				sysExternalContact.setEmail(apiParam.getEmail());
				sysExternalContact.setTel(apiParam.getLandLine());
				sysExternalContact.setName(apiParam.getName());
				sysExternalContact.setBirthday(apiParam.getBirthday());
				sysExternalContact.setPosition(apiParam.getPositionName());
				if (sysExternalContact.getName() != null) {
					sysExternalContact.setPinyinFull(Pinyin4jUtils.getPinYin(apiParam.getName()));
					sysExternalContact.setPinyinFirstLetter(Pinyin4jUtils.getShortPinyin(apiParam.getName()));
				}
				if (apiParam.getSex() != null) {
					sysExternalContact.setIsMale(apiParam.getSex());
				}
				int update = externalContactMapper.updateByPrimaryKey(sysExternalContact);

				dto.setEmail(sysExternalContact.getEmail());
				dto.setId(sysExternalContact.getId());
				dto.setImUserId(sysExternalContact.getImUserId());
				dto.setRealName(sysExternalContact.getName());

			}
		}
		return dto;
	}

	@Override
	@Transactional(rollbackFor = Exception.class)
	public Object syncUserImUser(@DataSource String tendId, IMUserSyncParam apiParam) {
		int result = -1;
		String userId = "";
		if (apiParam.getType().equals(SysConstants.USER_ORGANIZATION)) {
			OaSysUser oaSysUser = getOaSysUserByImId(apiParam.getTendId(), apiParam.getImUserId());
			if (oaSysUser != null && (oaSysUser.getWorkStatus().equals(SysConstants.UserWorkStatus.NO_CONFIRM.getWorkStatus())
					|| oaSysUser.getWorkStatus().equals(SysConstants.UserWorkStatus.NO_INVITE.getWorkStatus()))) {
				oaSysUser.setImUserId(apiParam.getImUserId());
				oaSysUser.setWorkStatus(SysConstants.UserWorkStatus.JOB.getWorkStatus());
			} else {
				throw new HioException("同步状态非法");
			}
			userId = oaSysUser.getId();
			result = update(oaSysUser);
			// wt.coffee add
			OaSysUserPosition up = new OaSysUserPosition();
			up.setUserId(userId);
			List<OaSysUserPosition> upList = userPositionMapper.select(up);
			redisSetService.syncOrg(tendId, upList);

			// TODO 切库问题
			// 角色新增初始化
			roleUserService.saveAppendRoleUser(tendId, oaSysUser.getId(), BaseConstants.MYSQL_ROLE_COMMON,false);
			// 应用列表初始化
			appUserService.saveOnCreate(tendId, oaSysUser.getId(),false);
			// 更新用户时间
			updateOrganizationUpdateDateByUserPosition(tendId, null, null, null, oaSysUser, null);
			// 同步对应tendId-imUserId:oaUserid
			redisSetService.syncTendIdAndUser(tendId, oaSysUser.getImUserId(), oaSysUser.getId(), BaseConstants.REDIS_OPT_ADD);
		} else if (apiParam.getType().equals(SysConstants.USER_EXTERNAL)) {
			OaSysExternalContact sysExternalContact = getOaSysExternalContactByImId(apiParam.getTendId(), apiParam.getImUserId());
			OaSysUser user = getObjectById(sysExternalContact.getId());
			if (sysExternalContact != null && sysExternalContact.getStatus().equals(SysConstants.UserWorkStatus.NO_CONFIRM.getWorkStatus())
					&& user !=null && user.getWorkStatus().equals(SysConstants.UserWorkStatus.NO_CONFIRM.getWorkStatus())) {
				sysExternalContact.setImUserId(apiParam.getImUserId());
				sysExternalContact.setStatus(SysConstants.UserWorkStatus.JOB.getWorkStatus());
				user.setWorkStatus(SysConstants.UserWorkStatus.JOB.getWorkStatus());
			} else {
				throw new HioException("同步状态非法");
			}
			userId = sysExternalContact.getId();
			userMapper.updateByPrimaryKey(user);
			result = externalContactMapper.updateByPrimaryKey(sysExternalContact);
			// 更新用户时间
			updateOrganizationUpdateDateByUserPosition(tendId, null, null, null, user, sysExternalContact);
			// 同步对应tendId-imUserId:oaUserid
			redisSetService.syncTendIdAndUser(tendId, user.getImUserId(), user.getId(), BaseConstants.REDIS_OPT_ADD);
		}
		String results = JedisUtil.fetchRow(RedisKeyConstant.userTendList + apiParam.getImUserId(), apiParam.getTendId());
		Map<String, Object> map = Base.json2map(results);
		map.put("userId", userId);
		return result;
	}

	@Override
	public OaSysUser getOaSysUserByMobile(@DataSource String tendId, String mobile) {
		OaSysUser user = new OaSysUser();
		user.setMobile(mobile);
		user.setDelflag(SysConstants.MYSQL_DELFLAG_NORMAL);
		return userMapper.selectOne(user);
	}

	@Override
	public OaSysExternalContact getOaSysExternalContactByMobile(@DataSource String tendId, String mobile) {
		OaSysExternalContact user = new OaSysExternalContact();
		user.setMobile(mobile);
		user.setDelflag(SysConstants.MYSQL_DELFLAG_NORMAL);
		return externalContactMapper.selectOne(user);
	}

	@Override
	public List<UserListDto> getUserListByOrgId(String organizationId) {
		return userPositionMapper.getUserListByOrgId(organizationId);
	}

	@Override
	public List<OAUserDto> queryUserByOrgAndRoleAndUser(@DataSource String tendId, OAUserParam apiParam) {
		if (isEmpty(apiParam.getRoleIds())&&isEmpty(apiParam.getOrganizationIds())&&isEmpty(apiParam.getUserIds())){
			return Collections.emptyList();
		}
		return userPositionMapper.queryUserByOrgAndRoleAndUser(apiParam);
	}

	@Override
	public List<Map<String, String>> queryUserUnionByOrganizationIdsAndRoleIds(@DataSource String tendId, String roleId, String organizationId) {
		return userPositionMapper.queryUserUnionByOrganizationIdsAndRoleIds(roleId, organizationId);
	}

	@Override
	public List<UserDto> queryUserByIds(@DataSource String tendId, String userIds) {
		List<String> userIdList = Arrays.asList(userIds.split(","));
		return userPositionMapper.queryUserByIds(userIdList);
	}

	@Override
	public OaSysUser queryUserByMobile(String mobile) {
		OaSysUser user = new OaSysUser();
		user.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
		user.setMobile(mobile);
		user.setWorkStatus(SysConstants.UserWorkStatus.JOB.getWorkStatus());
		return userMapper.selectOne(user);
	}

	public OaSysUser queryUserStatusByMobile(String mobile, boolean deleted) {
		OaSysUser user = new OaSysUser();
		if (!deleted) {
			user.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
		}
		user.setMobile(mobile);
		return userMapper.selectOne(user);
	}

	@Override
	public Object saveTeamUsers(@DataSource String tendId, List<IMOrgCreateUserParam> teams, String organizationId) {
		if (teams != null && teams.size() > 0) {
			for (int i = 0; i < teams.size(); i++) {
				IMOrgCreateUserParam imOrgCreateUserParam = teams.get(i);
				int isExits = userMapper.queryUserByMobile(imOrgCreateUserParam.getMobile(), false);
				if (isExits > 0) {
					continue;
				}
				saveUser(tendId, imOrgCreateUserParam.getName(), imOrgCreateUserParam.getMobile(), null, SysConstants.UserWorkStatus.NO_CONFIRM, null, organizationId, null, null);
			}
		}
		return null;
	}

	private UserImportDto batchInsertUsers(List<UserInviteParam> lists) {
		UserImportDto importDto = new UserImportDto();
		String msg = "";
		int successCnt = 0;
		int failCnt = 0;
		List<String> userIds = new ArrayList<>();
		lists.forEach(item -> {
			if (isNotEmpty(item.getUserMobile()) && item.getUserMobile().length() == 11) {
				userIds.add(item.getUserMobile());
			}
		});
		ApiFeignResponse<Map<String, String>> response = platformFeignService.createUserImId(userIds);
		if (response == null || response.getStatus() != 200) {
			throw new HioMybatisInsertException("生成环信账号失败");
		}
		Map<String, String> hxIds = response.getResult();

		String organizationId = lists.get(0).getOrganizationId();
		OaSysOrganization oaSysOrganization = organizationMapper.selectByPrimaryKey(organizationId);
		if (oaSysOrganization == null || oaSysOrganization.getDelflag().intValue() == SysConstants.MYSQL_DELFLAG_DELETED) {
			throw new HioMybatisInsertException("当前部门不存在，请重新选择");
		}

		List<UserInviteParam> failResult = new ArrayList<>();
		List<UserInviteParam> successResult = new ArrayList<>();
		for (int i = 0; i < lists.size(); i++) {
			boolean isSuccess = true;
			UserInviteParam userInviteParam = lists.get(i);
			userInviteParam.setOrganizationId(organizationId);
			userInviteParam.setHxUid(hxIds.get(userInviteParam.getUserMobile()));
			try {
				// 校验参数
				ValidatorUtils.validateEntity(userInviteParam);
				isSuccess = true;
			} catch (Exception e) {
				isSuccess = false;
				if (e instanceof HioException) {
					msg = ((HioException) e).getException();
				}
			}
			if (isEmpty(userInviteParam.getHxUid())) {
				isSuccess = false;
				msg = msg + "账号生成失败";
			}
			if (isSuccess) {
				try {
					Object o = saveImportUser(getTendId(), userInviteParam);
					isSuccess = true;
					msg = "导入成功";
				} catch (Exception e) {
					isSuccess = false;
					msg = e.getMessage();
					if (e instanceof HioException) {
						msg = ((HioException) e).getException();
						int code = ((HioException) e).getCode();
						if (code >= 2047 && code <= 2054) {
							msg = "该用户已经在您公司";
						}
					}
				}
			}
			userInviteParam.setSuccess(isSuccess);
			userInviteParam.setMsg(msg);
			if (isSuccess) {
				successCnt++;
				successResult.add(userInviteParam);
			} else {
				failResult.add(userInviteParam);
				failCnt++;
			}
		}
		importDto.setTotalCnt(lists.size());
		importDto.setSuccessCnt(successCnt);
		importDto.setFailCnt(failCnt);
		if (successCnt == lists.size()) {
			importDto.setImportStatus(SysConstants.USER_IMPORT_STATUS_SUCCESS);
		} else if (successCnt > 0 && lists.size() > successCnt) {
			importDto.setImportStatus(SysConstants.USER_IMPORT_STATUS_PART);
		} else if (successCnt == 0) {
			importDto.setImportStatus(SysConstants.USER_IMPORT_STATUS_FAIL);
		}
		if (failCnt > 0) {
			importDto.setUsers(failResult);
		}
		if (isNotEmpty(successResult)) {
			sendIMUserInviteBatch(getTendId(), getUserIdIM(), successResult);
		}
		return importDto;
	}

	private void sendIMUserInviteBatch(final String tendId, final String userIdIM, final List<UserInviteParam> successResult) {

		ExecutorService instationPool = Executors.newSingleThreadExecutor();
		instationPool.submit(new Thread("sendInviteBatch") {
			@Override
			public void run() {
				try {
					sendIMBatchInvite(tendId, userIdIM, successResult);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();

				}
			}
		});
	}

	private Object saveImportUser(String tendId, UserInviteParam userInviteParam) {
		//校验手机号
		checkMobileIsExitsDetail(tendId, userInviteParam.getUserMobile(), BaseConstants.USER_ORGANIZATION);
		//校验IMuserId
		checkIMUserIdIsExits(tendId,userInviteParam.getHxUid(),BaseConstants.USER_ORGANIZATION);
		// get oaUser
		OaSysUser user = transformOaSysUser(tendId, userInviteParam.getUserName(), userInviteParam.getUserMobile(), userInviteParam.getUserEmail(),
				SysConstants.UserWorkStatus.NO_CONFIRM, userInviteParam.getHxUid(),false,BaseConstants.MYSQL_USER_TYPE_COMMON);
		// get osUserPosition
		OaSysUserPosition userPosition = transformOaSysUserPosition(tendId, userInviteParam.getOrganizationId(), user.getId(), "",false);
		// 保存用户和职务
		int save = save(tendId, user, userPosition);
		// 新增用户-更新
		updateOrganizationUpdateDateByUserPosition(tendId, null, null, null, user, null);

		return true;
	}

	/**
	 * 批量导入用户
	 *
	 * @param apiParam
	 * @return
	 */
	@Override
	public Object importUsers(FileImportParam apiParam) {
		OaSysOrganization oaSysOrganization = organizationService.getObjectById(apiParam.getOrganizationId());
		if (oaSysOrganization == null) {
			throw new HioMybatisInsertException("当前部门不存在，请重新选择");
		}
		List<UserInviteParam> lists = importData(apiParam);
		return batchInsertUsers(lists);
	}

	public List<UserInviteParam> importData(FileImportParam file) {
		Workbook wb = null;
		List<UserInviteParam> users = new ArrayList();
		try {
			if (excelUtils.isExcel2007(file.getResource().getOriginalFilename())) {
				wb = new XSSFWorkbook(file.getResource().getInputStream());
			} else {
				wb = new HSSFWorkbook(file.getResource().getInputStream());
			}
		} catch (IOException e) {
			e.printStackTrace();

			return null;
		}
		// 获取第一张表
		Sheet sheet = wb.getSheetAt(0);
		// 获取实际的行数，去除空行了
		int columns = sheet.getPhysicalNumberOfRows();
		// 得到总行数编号（从0开始）
		int rows = sheet.getLastRowNum();
		if (columns <= 1) {
			throw new HioMybatisInsertException("请导入大于1条数据");
		}
		if (columns > 501) {
			throw new HioMybatisInsertException("请导入小于等于500条数据，当前" + columns + "条数据");
		}

		Row rowTitle = sheet.getRow(0);
		String[] titles = { "姓名", "手机号码", "邮箱" };
		int[] titlesIndex = { -1, -1, -1 };
		String cellValue_01 = excelUtils.getCellValue(rowTitle, 0);
		String cellValue_02 = excelUtils.getCellValue(rowTitle, 1);
		String cellValue_03 = excelUtils.getCellValue(rowTitle, 2);
		for (int i = 0; i < titles.length; i++) {
			if (titles[i].equals(cellValue_01)) {
				titlesIndex[i] = 0;
			}
			if (titles[i].equals(cellValue_02)) {
				titlesIndex[i] = 1;
			}
			if (titles[i].equals(cellValue_03)) {
				titlesIndex[i] = 2;
			}
		}

		for (int i = 1; i < rows + 1; i++) {
			// 获取索引为i的行，以0开始
			Row row = sheet.getRow(i);
			if(row == null){
				continue;
			}
			int physicalNumberOfCells = row.getPhysicalNumberOfCells();
			short lastCellNum = row.getLastCellNum();
			boolean mergedRegion_01 = titlesIndex[0] == -1 ? false : excelUtils.isMergedRegion(sheet, i, titlesIndex[0]);
			boolean mergedRegion_02 = titlesIndex[0] == -1 ? false : excelUtils.isMergedRegion(sheet, i, titlesIndex[1]);
			boolean mergedRegion_03 = titlesIndex[0] == -1 ? false : excelUtils.isMergedRegion(sheet, i, titlesIndex[2]);

			String name = titlesIndex[0] == -1 ? "" : mergedRegion_01 ? excelUtils.getMergedRegionValue(sheet, i, titlesIndex[0],true) : excelUtils.getCellValue(row, titlesIndex[0],true);
			String mobile = titlesIndex[1] == -1 ? "" : mergedRegion_02 ? excelUtils.getMergedRegionValue(sheet, i, titlesIndex[1],true) : excelUtils.getCellValue(row, titlesIndex[1],true);
			String email = titlesIndex[2] == -1 ? "" : mergedRegion_03 ? excelUtils.getMergedRegionValue(sheet, i, titlesIndex[2],true) : excelUtils.getCellValue(row, titlesIndex[2],true);
			if (StringUtils.isBlank(mobile) && StringUtils.isBlank(name) && StringUtils.isBlank(email)) {
				continue;
			}
			UserInviteParam userInviteParam = new UserInviteParam();
			userInviteParam.setUserName(name);
			userInviteParam.setUserMobile(mobile);
			userInviteParam.setUserEmail(email);
			userInviteParam.setOrganizationId(file.getOrganizationId());
			users.add(userInviteParam);
		}
		return users;
	}

	@Override
	public String saveExternalContact(@DataSource String tendId, IMUserInviteParam apiParam) {
		OaSysUser oaSysUser = getOaSysUserByImId(tendId, getUserIdIM());
		if (oaSysUser == null || oaSysUser.getDelflag().intValue() == BaseConstants.MYSQL_DELFLAG_DELETED) {
			throw new HioException("当前用户没有oa系统，请先创建团队");
		}
		// 校验是否存在
		checkMobileIsExitsDetail(tendId, apiParam.getUserMobile(), BaseConstants.USER_EXTERNAL);
		// 校验IMUSERID 是否存在
		checkIMUserIdIsExits(tendId,apiParam.getImUserId(),BaseConstants.USER_EXTERNAL);
		//保存到同事库中
		OaSysUser transformOaSysUser = transformOaSysUser(tendId, apiParam.getUserName(), apiParam.getUserMobile(), apiParam.getUserEmail(), BaseConstants.UserWorkStatus.NO_CONFIRM, apiParam.getImUserId(), false, BaseConstants.MYSQL_USER_TYPE_EXTERNAL);
		// 保存外部联系人
		OaSysExternalContact oaSysExternalContact = transformOaSysExternalContact(transformOaSysUser.getId(),apiParam);

		int userResults = save(transformOaSysUser);
		int userExternalResults = externalContactService.save(tendId, oaSysExternalContact);

		// 设置外部联系人负责人
		externalShareService.saveManager(tendId, oaSysExternalContact.getId(), oaSysUser.getId());
		// 设置共享人 -
		externalShareService.updateShares(tendId, oaSysExternalContact.getId(), apiParam.getShareUserList(), null);
		// 更新时间
		updateOrganizationUpdateDateByUserPosition(tendId, null, null, null, null, oaSysExternalContact);

		return oaSysExternalContact.getId();
	}

	private OaSysExternalContact transformOaSysExternalContact(String userId,IMUserInviteParam apiParam) {
		OaSysExternalContact oaSysExternalContact = new OaSysExternalContact();
		oaSysExternalContact.setName(apiParam.getUserName());
		oaSysExternalContact.setPinyinFirstLetter(Pinyin4jUtils.getShortPinyin(apiParam.getUserName()));
		oaSysExternalContact.setPinyinFull(Pinyin4jUtils.getPinYin(apiParam.getUserName()));
		oaSysExternalContact.setEmail(apiParam.getUserEmail());
		oaSysExternalContact.setMobile(apiParam.getUserMobile());
		oaSysExternalContact.setIsMale(SysConstants.Male.MAN.getStatus() + "");
		oaSysExternalContact.setStatus(SysConstants.UserWorkStatus.NO_CONFIRM.getWorkStatus());
		oaSysExternalContact.setDelflag(SysConstants.MYSQL_DELFLAG_NORMAL);
		oaSysExternalContact.setCreateDate(new Date());
		oaSysExternalContact.setUpdateDate(new Date());
		oaSysExternalContact.setUid(IDGenerator.getUUID());
		oaSysExternalContact.setId(Base.generatePk(OaSysExternalContact.class));
		oaSysExternalContact.setImUserId(apiParam.getImUserId());
		oaSysExternalContact.setLabel(apiParam.getLabel());
		oaSysExternalContact.setAddress(apiParam.getAddress());
		oaSysExternalContact.setPosition(apiParam.getPositionName());
		oaSysExternalContact.setRemak(apiParam.getRemark());
		oaSysExternalContact.setCompany(apiParam.getCompany());
		oaSysExternalContact.setId(userId);
		return oaSysExternalContact;
	}

	@Override
	public List<IMOrgUserDto> queryOaUserByOrganizationId(@DataSource String tendId, String organizationId, boolean includeChild) {
		return userPositionMapper.queryOaUserByOrganizationId(tendId, organizationId, includeChild);
	}

	@Override
	public SysCurrencyDto getImUserId(@DataSource String tendId, String userId) {
		SysCurrencyDto sysCurrencyDto = new SysCurrencyDto();
		OaSysUser result = userMapper.selectByPrimaryKey(userId);
		if (result != null) {
			sysCurrencyDto.setImUserId(result.getImUserId());
		}
		return sysCurrencyDto;
	}

	@Override
	public SysCurrencyDto queryPositionNameByPositionId(@DataSource String tendId, String positionId) {
		SysCurrencyDto sysCurrencyDto = new SysCurrencyDto();
		OaSysUserPosition result = userPositionMapper.selectByPrimaryKey(positionId);
		if (result != null) {
			sysCurrencyDto.setPositionId(result.getPosition());
			sysCurrencyDto.setPositionName(result.getPosition());
		}
		return sysCurrencyDto;
	}

	@Override
	public List<FlowUserDto> queryPositionNameByUserIds(@DataSource String tendId, List<String> userIds,Integer status) {
		if (Base.isEmpty(userIds)) {
			return Collections.emptyList();
		}
		return userPositionMapper.queryPositionNameByUserIds(userIds,status);
	}

	@Override
	@Transactional
	public Boolean saveUserPositionForHr(@DataSource String tendId, UserPositionParam apiParam) {
		if (!apiParam.isUpdate()) {
			// 查询是否有该职务
			OaSysOrganization oaSysOrganization = organizationMapper.selectByPrimaryKey(apiParam.getOrganizationId());
			if (oaSysOrganization == null || oaSysOrganization.getDelflag().intValue() == SysConstants.MYSQL_DELFLAG_DELETED) {
				throw new HioMybatisInsertException("当前部门不存在，请重新选择");
			}
			// 表示新增的兼职部门
			OaSysUserPosition userPosition = new OaSysUserPosition();
			userPosition.setOrganizationId(apiParam.getOrganizationId());
			userPosition.setPosition(apiParam.getPostName());
			userPosition.setUserId(apiParam.getUserId());
			userPosition.setCreateDate(new Date());
			userPosition.setUpdateDate(new Date());
			int exists = userPositionMapper.queryPosition(apiParam.getUserId());
			if (exists <= 0) {
				userPosition.setIsDefault(SysConstants.MYSQL_STATUS_USABLE);
			} else {
				userPosition.setIsDefault(SysConstants.MYSQL_STATUS_DISABLE);
			}
			boolean b = userPositionService.queryPositionIsExits(tendId, userPosition.getOrganizationId(), userPosition.getUserId(), null);
			if (b) {
				throw new HioMybatisInsertException("当前部门-" + oaSysOrganization.getName() + "-已经存在");
			}
			userPositionService.save(tendId, userPosition);
		} else {
			OaSysUser oaSysUser = getObjectById(apiParam.getUserId());
			if (oaSysUser == null || oaSysUser.getDelflag().intValue() == SysConstants.MYSQL_DELFLAG_DELETED) {
				throw new HioMybatisInsertException("当前用户已经被删除了，请关闭刷新");
			}
			OaSysUserPosition oaSysUserPosition = userPositionService.queryMainUserPosition(tendId, apiParam.getUserId());
			if (oaSysUserPosition == null) {
				throw new HioMybatisUpdateException("当前主部门不存在");
			}
			// 表示更新的
			if (isNotEquals(oaSysUserPosition.getPosition(), apiParam.getPostName())) {
				oaSysUserPosition.setPosition(apiParam.getPostName());
				userPositionService.update(oaSysUserPosition);
				// TODO -统一处理 hr更新时间
				// updateOrganizationUpdateDateByUserPosition(tendId,oaSysUserPositionsChangesList,oaSysOrganizationsChangesList,null,oaSysUser,null);
			} else {
				// 表示未更新数据 无须处理
			}
		}

		return true;
	}

	@Override
	public Boolean deleteUserPositionForHr(String positionId) {
		OaSysUserPosition oaSysUserPosition = userPositionMapper.selectByPrimaryKey(positionId);
		if (oaSysUserPosition == null || oaSysUserPosition.getDelflag().intValue() == SysConstants.MYSQL_DELFLAG_DELETED) {
			throw new HioMybatisUpdateException("当前职务不存在或者以及删除了");
		}
		if (oaSysUserPosition.getDelflag().intValue() == SysConstants.MYSQL_STATUS_USABLE) {
			throw new HioMybatisUpdateException("当前职务是主职务，不能删除");
		}
		oaSysUserPosition.setDelflag(BaseConstants.MYSQL_DELFLAG_DELETED);
		userPositionMapper.updateByPrimaryKey(oaSysUserPosition);
		// 将组织部门是负责人的leaderId清空
		List<OaSysOrganization> allOrgLeads = organizationService.queryAllOrgLeadByUserId(null, oaSysUserPosition.getUserId());
		if (allOrgLeads != null && allOrgLeads.size() > 0) {
			for (int i = 0; i < allOrgLeads.size(); i++) {
				OaSysOrganization oaSysOrganization = allOrgLeads.get(i);
				if (positionId.equals(oaSysOrganization.getId())) {
					// 设置leadId为null值
					oaSysOrganization.setLeaderId("");
					organizationService.update(oaSysOrganization);
				}
			}
		}
		return true;
	}

	@Override
	public Boolean updateUserPositionForHr(UserPositionParam apiParam) {
		OaSysUserPosition oaSysUserPosition = userPositionMapper.selectByPrimaryKey(apiParam.getUserPositionId());
		if (oaSysUserPosition == null || oaSysUserPosition.getDelflag().intValue() == BaseConstants.MYSQL_DELFLAG_DELETED) {
			throw new HioMybatisInsertException("当前编辑职务不存在或者已经删除");
		}
		String oldOrgazationId = oaSysUserPosition.getOrganizationId();
		oaSysUserPosition.setPosition(apiParam.getPostName());
		oaSysUserPosition.setOrganizationId(apiParam.getOrganizationId());
		OaSysOrganization oaSysOrganization = organizationMapper.selectByPrimaryKey(apiParam.getOrganizationId());
		if (oaSysOrganization == null || oaSysOrganization.getDelflag().intValue() == SysConstants.MYSQL_DELFLAG_DELETED) {
			throw new HioMybatisInsertException("选中部门不存在，请重新选择");
		}
		boolean b = userPositionService.queryPositionIsExits(null, oaSysUserPosition.getOrganizationId(), oaSysUserPosition.getUserId(), oaSysUserPosition.getId());
		if (b) {
			throw new HioMybatisInsertException("当前部门-" + oaSysOrganization.getName() + "-已经存在");
		}
		userPositionMapper.updateByPrimaryKey(oaSysUserPosition);

		if (!oldOrgazationId.equals(oaSysUserPosition.getOrganizationId())) {
			// 将组织部门是负责人的leaderId清空
			List<OaSysOrganization> allOrgLeads = organizationService.queryAllOrgLeadByUserId(null, oaSysUserPosition.getUserId());
			if (allOrgLeads != null && allOrgLeads.size() > 0) {
				for (int i = 0; i < allOrgLeads.size(); i++) {
					OaSysOrganization organization = allOrgLeads.get(i);
					if (oldOrgazationId.equals(organization.getId())) {
						// 设置leadId为null值
						oaSysOrganization.setLeaderId("");
						organizationService.update(oaSysOrganization);
					}
				}
			}
		}
		return true;
	}

	@Override
	public FlowPositionDto queryPositionByPositionId(String positionId) {
		return userPositionMapper.queryPositionByPositionId(positionId);
	}

	@Override
	public boolean queryOaUserIsDelete(@DataSource String tendId, IMUserQueryParam apiParam) {
		boolean deleted = false;
		if (apiParam.getType().equals(SysConstants.USER_ORGANIZATION)) {
			OaSysUser oaSysUser = getOaSysUserByMobile(apiParam.getTendId(), apiParam.getMobile());
			deleted = oaSysUser == null ? true : false;
		} else if (apiParam.getType().equals(SysConstants.USER_EXTERNAL)) {
			OaSysExternalContact oaSysExternalContact = getOaSysExternalContactByMobile(apiParam.getTendId(), apiParam.getMobile());
			deleted = oaSysExternalContact == null ? true : false;
		}
		return deleted;
	}

	@Override
	public IMOAUserInfoDto queryOAUserAndPositionDetail(@DataSource String tendId, IMOAUserParam apiParam) {
		if (StringUtil.isBlank(getUserIdIM())) {
			throw new HioException("当前登录信息失效");
		}
		IMOAUserInfoDto dto = new IMOAUserInfoDto();
		if (apiParam.getType().equals(SysConstants.USER_ORGANIZATION)) {
			OaSysUser oaSysUser = userMapper.selectByPrimaryKey(apiParam.getOaUserId());
			if (oaSysUser != null) {
				dto.setEmail(oaSysUser.getEmail());
				dto.setLandLine(oaSysUser.getTel());
				dto.setName(oaSysUser.getRealName());
				dto.setPhone(oaSysUser.getMobile());
				dto.setType(apiParam.getType());
				if (isNotEmpty(apiParam.getOrganizationId())){
					// 查询部门下的职位
					OaSysUserPosition oaSysUserPosition = userPositionService.queryPositionByUserIdAndOrganizationId(apiParam.getTendId(), oaSysUser.getId(),
							apiParam.getOrganizationId());
					if (oaSysUserPosition != null) {
						OaSysOrganization oaSysOrganization = organizationMapper.selectByPrimaryKey(oaSysUserPosition.getOrganizationId());
						dto.setOrganizationName(oaSysOrganization == null ? null : oaSysOrganization.getName());
						dto.setOrganizationId(oaSysOrganization == null ? null : oaSysOrganization.getId());
						dto.setPositionName(oaSysUserPosition.getPosition());
						dto.setOrganizationId(oaSysUserPosition.getId());
						dto.setPositionId(oaSysUserPosition.getId());
					}
				}else {
					//查询所有的部门
					List<OaSysUserPosition> oaSysUserPositions = queryUserAllPositionByUserId(tendId, oaSysUser.getId());
					List<IMOAUserInfoDto.Job> jobs = new ArrayList<>();
					for (int i = 0; i < oaSysUserPositions.size(); i++) {
						IMOAUserInfoDto.Job userPositionVo = new IMOAUserInfoDto.Job();
						OaSysUserPosition userPosition = oaSysUserPositions.get(i);
						OaSysOrganization sysOrganization = organizationService.getObjectById(tendId, userPosition.getOrganizationId());
						if (sysOrganization == null) {
							continue;
						}
						userPositionVo.setIsDefault((userPosition.getIsDefault() != null && userPosition.getIsDefault().intValue() == SysConstants.STATUS_TRUE_INT) ? "true" : "false");
						userPositionVo.setOrganizationId(userPosition.getOrganizationId());
						userPositionVo.setOrganizationName(sysOrganization.getName());
						userPositionVo.setPositionName(userPosition.getPosition());
						userPositionVo.setPositionId(userPosition.getId());
						if (userPositionVo.getIsDefault().equals("true")) {
							jobs.add(0, userPositionVo);
						} else {
							jobs.add(userPositionVo);
						}
					}
					dto.setJobs(jobs);
				}
			}
		} else if (apiParam.getType().equals(SysConstants.USER_EXTERNAL)) {
			OaSysExternalContact sysExternalContact = externalContactMapper.selectByPrimaryKey(apiParam.getOaUserId());
			if (sysExternalContact != null) {
				dto.setName(sysExternalContact.getName());
				dto.setPhone(sysExternalContact.getMobile());
				dto.setEmail(sysExternalContact.getEmail());
				dto.setLandLine(sysExternalContact.getTel());
				dto.setPositionName(sysExternalContact.getName());
				dto.setPositionId("-1");
				dto.setOrganizationId("-1");
				dto.setOrganizationName("");
				dto.setType(apiParam.getType());
			}
		}
		return dto;
	}

	@Override
	public void downLoadErrorData(HttpServletRequest request, HttpServletResponse response, List<UserInviteParam> users) {
		try {
			XSSFWorkbook xf = generateImportFailDataExcel(users);
			excelUtils.downLoadExcel(request, response, xf);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 生成失败数据的excel
	 *
	 * @param lists
	 * @return
	 */
	private XSSFWorkbook generateImportFailDataExcel(List<UserInviteParam> lists) {
		try {
			String[] excelHeader = { "姓名", "手机号", "邮箱", "错误信息" };
			XSSFWorkbook wb = new XSSFWorkbook();
			XSSFSheet sheet = wb.createSheet();
			XSSFRow row = sheet.createRow((int) 0);
			XSSFCellStyle style = wb.createCellStyle();
			style.setAlignment(HSSFCellStyle.ALIGN_CENTER);

			for (int i = 0; i < excelHeader.length; i++) {
				XSSFCell cell = row.createCell(i);
				cell.setCellValue(excelHeader[i]);
				cell.setCellStyle(style);
				sheet.autoSizeColumn(i);
				sheet.setColumnWidth(i, 28 * 256);
			}
			for (int i = 0; i < lists.size(); i++) {
				UserInviteParam userInviteParam = lists.get(i);
				if (userInviteParam.isSuccess()) {
					continue;
				}
				row = sheet.createRow(i + 1);
				row.createCell(0).setCellValue(userInviteParam.getUserName() == null ? "" : userInviteParam.getUserName());
				row.createCell(1).setCellValue(userInviteParam.getUserMobile() == null ? "" : userInviteParam.getUserMobile());
				row.createCell(2).setCellValue(userInviteParam.getUserEmail() == null ? "" : userInviteParam.getUserEmail());
				row.createCell(3).setCellValue(userInviteParam.getMsg() == null ? "" : userInviteParam.getMsg());
			}
			return wb;
		} catch (Exception e) {

		}
		return null;
	}

	@Override
	public List<FlowUserAndExternalDto> queryUserOrExternalUserByIMUserId(@DataSource String tendId, List<UserOrExternalParam> apiPram) {
		if (apiPram == null || apiPram.size() == 0) {
			return Collections.emptyList();
		}
		List<FlowUserAndExternalDto> results = new ArrayList<>();
		FlowUserAndExternalDto oaUserDto = null;
		for (int i = 0; i < apiPram.size(); i++) {
			UserOrExternalParam userOrExternalParam = apiPram.get(i);
			oaUserDto = new FlowUserAndExternalDto();
			if (userOrExternalParam.getType().equals(BaseConstants.USER_ORGANIZATION)) {
				OaSysUser oaSysUser = getOaSysUserByImId(tendId, userOrExternalParam.getImUserId());
				if (oaSysUser != null) {
					oaUserDto.setId(oaSysUser.getId());
					oaUserDto.setImUserId(oaSysUser.getImUserId());
					oaUserDto.setName(oaSysUser.getRealName());
					OaSysUserPosition mainPosition = queryUserMainPositionByUserId(tendId, oaSysUser.getId());
					if (mainPosition != null) {
						oaUserDto.setPositionName(mainPosition.getPosition());
					}
				}
			} else if (userOrExternalParam.getType().equals(SysConstants.USER_EXTERNAL)) {
				OaSysExternalContact sysExternalContact = getOaSysExternalContactByImId(tendId, userOrExternalParam.getImUserId());
				if (sysExternalContact != null) {
					oaUserDto.setName(sysExternalContact.getName());
					oaUserDto.setImUserId(sysExternalContact.getImUserId());
					oaUserDto.setId(sysExternalContact.getId());
					oaUserDto.setPositionName(sysExternalContact.getPosition());
				}
			}
			results.add(oaUserDto);
		}
		return results;
	}

	@Override
	public List<FlowUserAndExternalDto> queryExternalUserByIMUserId(@DataSource String tendId, List<String> imUserIds) {
		if (imUserIds == null || imUserIds.size() == 0) {
			return Collections.emptyList();
		}
		return externalContactService.queryExternalUsersByImUserIds(tendId, imUserIds);
	}

	@Override
	public OaSysUserPosition queryUserMainPositionByUserId(@DataSource String tendId, String userId) {
		Example example = new Example(OaSysUserPosition.class);
		Example.Criteria criteria = example.createCriteria();
		criteria.andEqualTo("delflag", BaseConstants.MYSQL_DELFLAG_NORMAL);
		criteria.andEqualTo("userId", userId);
		criteria.andEqualTo("isDefault", 1);
		List<OaSysUserPosition> oaSysUserPositions = userPositionMapper.selectByExample(example);
		if (oaSysUserPositions != null && oaSysUserPositions.size() > 0) {
			return oaSysUserPositions.get(0);
		}
		return null;
	}

	@Override
	public Boolean isHaveSamePosition(String currentPositionId, String organizationId, String userId) {
		boolean b = userPositionService.queryPositionIsExits(getTendId(), organizationId, userId, currentPositionId);
		return b;
	}

	@Override
	public Map<String, UserStatusDto> queryUserStatusByIds(@DataSource String tendId, List<String> ids) {
		return userMapper.queryUserStatusByIds(ids);
	}

	@Override
	public String queryUserIsNormal(@DataSource String tendId, List<String> sysUserIds) {
		return userMapper.queryUserIsNormal(sysUserIds);
	}

	@Override
	public List<Map<String,String>> savePuUserBatch(@DataSource String tendId,List<PuUserParam> apiParam) {
		if (isEmpty(apiParam)) {
			return Collections.emptyList();
		}
		List<Map<String,String>> results  = new ArrayList<>();
		 apiParam.forEach(item -> {
                //管理员
             try {
                     //非管理员
				 savePuUser(tendId, item);
                 item.setSuccess(true);
				 Map<String,String> map = new HashMap<>();
				 map.put("puUserId", item.getPuUserId());
				 map.put("userIMId", item.getImUserId());
				 results.add(map);
             }catch (Exception e){
				item.setSuccess(false);
				if (e instanceof HioUserExitsException){
					HioUserExitsException hioException = (HioUserExitsException) e;
					item.setMsg(hioException.getMessage());
					Map<String,String> map = new HashMap<>();
					map.put("puUserId", item.getPuUserId());
					map.put("userIMId", item.getImUserId());
					results.add(map);
				}else if (e instanceof HioException){
					HioException hioException = (HioException) e;
					item.setMsg(hioException.getException());
				}else {
					item.setMsg(e.getMessage());
				}
             }
		 });
		return results;
	}
    /**
     * 招采插入人员控制第一个人员为admin
     */
    private boolean checkIsAdminUser(String tendId,PuUserParam item) {
        OaSysUser tmp = new OaSysUser();
        tmp.setDelflag(BaseConstants.MYSQL_DELFLAG_NORMAL);
        int i = userMapper.selectCount(tmp);
        if ( i>1 ) {
            return false;
        }
        OaSysUser oaSysUser = getObjectById(tendId, 1001 + "");
        if (isEmpty(oaSysUser.getPinyinFull())){
            oaSysUser.setMobile(item.getMobile());
            oaSysUser.setRealName(Pinyin4jUtils.getPinYin(item.getName()));
            oaSysUser.setImUserId(item.getImUserId());
            oaSysUser.setPinyinFirstLetter(Pinyin4jUtils.getShortPinyin(item.getName()));
            oaSysUser.setPinyinFull(Pinyin4jUtils.getPinYin(item.getName()));
            oaSysUser.setUpdateDate(new Date());
            oaSysUser.setCreatePersonId(oaSysUser.getId());
            oaSysUser.setCreatePersonName(oaSysUser.getRealName());
            oaSysUser.setUpdatePersonId(oaSysUser.getId());
            oaSysUser.setUpdatePersonName(oaSysUser.getRealName());
            userMapper.updateByPrimaryKey(oaSysUser);
            // 新增用户-更新
            updateOrganizationUpdateDateByUserPosition(tendId, null, null, null, oaSysUser, null);
			//同步redis
			redisSetService.syncTendIdAndUser(tendId,oaSysUser.getImUserId(),oaSysUser.getId(),BaseConstants.REDIS_OPT_ADD);
            return true;
        }
        return false;
    }

    private void savePuUser(String tendId,PuUserParam puUser) {
    	if (checkIsAdminUser(tendId,puUser)){
    		return;
		}
		//校验手机是否存在
		checkMobileIsExitsDetail(tendId, puUser.getMobile(), BaseConstants.USER_ORGANIZATION);
		// get oaUser
		OaSysUser user = transformOaSysUser(tendId, puUser.getName(), puUser.getMobile(), null,
				SysConstants.UserWorkStatus.JOB, puUser.getImUserId(),true,BaseConstants.MYSQL_USER_TYPE_COMMON);
		// get osUserPosition
		OaSysUserPosition userPosition = transformOaSysUserPosition(tendId, BaseConstants.MYSQL_COMPANY_ID, user.getId(), "",true);
		// 保存用户和职务
		int save = save(tendId, user, userPosition);
		// 新增用户-更新
		updateOrganizationUpdateDateByUserPosition(tendId, null, null, null, user, null);
		// 角色新增初始化
		roleUserService.saveAppendRoleUser(tendId, user.getId(), BaseConstants.MYSQL_ROLE_SUPERID,true);
		// 应用列表初始化
		appUserService.saveOnCreate(tendId, user.getId(),true);
		//同步redis
		redisSetService.syncTendIdAndUser(tendId,user.getImUserId(),user.getId(),BaseConstants.REDIS_OPT_ADD);
	}

	@Override
	public Boolean syncUsers(List<String> userIds,Date updateTime) {
    	if (isEmpty(userIds) || isEmpty(updateTime)){
    		return true;
		}
		Date nowDate = updateTime;
		HashSet<String> organizationsSet = new HashSet<>();
		HashSet<String> userPositionsSet = new HashSet<>();
		HashSet<String> userSet = new HashSet<>();

		// 用户更新--->单独更新用户的姓名--->对应部门都需要更新【仅仅更新未删除的、已删除的会直接会传在 userPositionsList】
		// 查找对应的职务--->部门
		List<OaSysUserPosition> oaSysUserPositions = queryUserAllPositionByUserIds(getTendId(), userIds);
		// 职位更新--->查找出所有对应的组织更新
		getAllOrgIdsFromPositionsToHashSet(getTendId(), oaSysUserPositions, organizationsSet, userPositionsSet);

		if (organizationsSet.size() > 0) {
			// 批量更新数据库组织的更新时间
			organizationService.updateBatchUpdateTime(getTendId(), organizationsSet, nowDate);
		}
		if (userPositionsSet.size() > 0) {
			// 批量职位时间更新
			userPositionService.updateBatchUpdateTime(getTendId(), userPositionsSet, nowDate);
		}

		//更新用户 TODO hr修改时间
//		userSet.addAll(userIds);
//		updateBatchUpdateTime(getTendId(), userSet, nowDate);

		// 调用redis更新时间
		List<String> orgIds = new ArrayList<>();
		List<String> positionIds = new ArrayList<>();
		List<String> externalIds = new ArrayList<>();
		orgIds.addAll(organizationsSet);
		positionIds.addAll(userPositionsSet);

		List<OaSysUser> oaSysUsers = queryUsersByUserIds(getTendId(),userIds);
		if (isNotEmpty(oaSysUsers)){
			oaSysUsers.forEach(user->{
				updateTendUserWorkStatus(getTendId(),user);
			});
		}
		redisSetService.syncOrgAndUserAndPositions(getTendId(), orgIds, userIds, positionIds, externalIds);
		return true;
	}

    @Override
    public void newOaSysUser(@DataSource String tendId, OaSysExternalContact oaSysExternalContact) {
        OaSysUser user = new OaSysUser();
        Date now = new Date();
        user.setDelflag(oaSysExternalContact.getDelflag());
        user.setWorkStatus(oaSysExternalContact.getStatus());
        user.setRealName(oaSysExternalContact.getName());
        user.setPinyinFirstLetter(Pinyin4jUtils.getShortPinyin(user.getRealName()));
        user.setPinyinFull(Pinyin4jUtils.getPinYin(user.getRealName()));
        user.setIsMale(SysConstants.Male.MAN.getStatus());
        user.setEmail(oaSysExternalContact.getEmail());
        user.setMobile(oaSysExternalContact.getMobile());
        user.setId(oaSysExternalContact.getId());
        user.setSort(getMaxSort());
        user.setCreateDate(new Date());
        user.setImUserId(oaSysExternalContact.getImUserId());
        user.setUid(IDGenerator.getUUID());
//        user.setBirthday(now);
        user.setRegularTime(now);
        user.setFirstBeginTime(now);
        user.setNowEndTime(now);
        user.setEntryPartyTime(now);
        user.setFirstEndTime(now);
        user.setNowBeginTime(now);
        user.setUserType(2);
        user.setCreatePersonName("管理员同步数据");
        user.setUpdateDate(new Date());
        user.setCreateDate(new Date());
        user.setUpdatePersonName("管理员同步数据");
        user.setCreatePersonId("1001");
        user.setUpdatePersonId("1001");

        userMapper.insert(user);
    }

    public List<OaSysUser> queryUsersByUserIds(@DataSource String tendId, List<String> userIds) {
		Example example = new Example(OaSysUser.class);
		Example.Criteria criteria = example.createCriteria();
		criteria.andIn("id", userIds);
		List<OaSysUser> oaSysUsers = userMapper.selectByExample(example);
		return oaSysUsers;
	}

	public List<OaSysUserPosition> queryUserAllPositionByUserIds(@DataSource String tendId, List<String> userIds) {
		Example example = new Example(OaSysUserPosition.class);
		Example.Criteria criteria = example.createCriteria();
		criteria.andIn("userId", userIds);
		criteria.andEqualTo("delflag", SysConstants.MYSQL_DELFLAG_NORMAL);
		List<OaSysUserPosition> oaSysUserPositions = userPositionMapper.selectByExample(example);
		return oaSysUserPositions;
	}

	@Override
	public List<UserDto> queryOrganizationAndExternalUsers(@DataSource String tendId, Integer workStatus, List<String> userIds) {

		return userMapper.queryOrganizationAndExternalUsers(workStatus,userIds);
	}

    @Override
    public Map<String, SysCurrencyDto> queryUsersByIMUserIds(@DataSource String tendId, List<String> imUserIds) {
        return userMapper.queryUsersByIMUserIds(imUserIds);
    }

	@Override
	public boolean queryUserRelation(@DataSource String tendId, String sourceUserId, String targetUserId) {
		OaSysUser sourceSysUser = queryUsersByIMUserId(tendId, sourceUserId);
		OaSysUser targetSysUser = queryUsersByIMUserId(tendId, targetUserId);
		if (sourceSysUser == null || targetSysUser == null){
			return false;
		}
		//都是内部联系人
		if (sourceSysUser.getUserType().intValue()==BaseConstants.MYSQL_USER_TYPE_COMMON &&
				targetSysUser.getUserType().intValue()==BaseConstants.MYSQL_USER_TYPE_COMMON ){
			return true;
		}
		//都是外部联系人
		if (sourceSysUser.getUserType().intValue() == BaseConstants.MYSQL_USER_TYPE_EXTERNAL
				&&targetSysUser.getUserType().intValue() == BaseConstants.MYSQL_USER_TYPE_EXTERNAL){
			return false;
		}
		//查看人是同事、被查看人是外部联系人
		if (sourceSysUser.getUserType().intValue() == BaseConstants.MYSQL_USER_TYPE_COMMON
				&&targetSysUser.getUserType().intValue() == BaseConstants.MYSQL_USER_TYPE_EXTERNAL){
			boolean b = roleUserService.queryIsSuper(tendId, sourceSysUser.getId());
			if (b){
				return true;
			}
			b = externalShareService.queryUserIsRelation(tendId,sourceSysUser.getId(),targetSysUser.getId());
			return b;
		}
		//查看人是同事、被查看人是外部联系人
		if (sourceSysUser.getUserType().intValue() == BaseConstants.MYSQL_USER_TYPE_EXTERNAL
				&&targetSysUser.getUserType().intValue() == BaseConstants.MYSQL_USER_TYPE_COMMON){
			boolean b = externalShareService.queryUserIsRelation(tendId,targetSysUser.getId(),sourceSysUser.getId());
			return b;
		}
		return false;
	}
}
