package com.jzy.hio.sys.organization.mapper;

import com.jzy.hio.base.mapper.BaseMapper;
import com.jzy.hio.entity.OaSysOrganization;
import com.jzy.hio.sys.organization.dto.GeneralDto;
import com.jzy.hio.sys.organization.dto.OrgUserCountDto;
import com.jzy.hio.sys.organization.dto.OrganizationDto;
import com.jzy.hio.sys.organization.dto.OrganizationUserCountDto;
import com.jzy.hio.sys.organization.dto.SkyDriveDto;
import com.jzy.hio.sys.organization.param.SkyDriveParam;
import org.apache.ibatis.annotations.MapKey;
import org.apache.ibatis.annotations.Param;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

public interface OrganizationMapper extends BaseMapper<OaSysOrganization> {

    /**
     * 查询组织机构下的用户人数
     *
     * @param orgId    查询当前部门
     * @param prefixId 查询自部门
     * @return 如果两个人在多个部门下、则算同一个人
     */
    int queryUserConut(@Param("orgId") String orgId, @Param("prefixId") String prefixId);

    /**
     * 查询组织以及子组织下的用户数量
     *
     * @param prefixId
     * @return int
     * @author kimchou
     * @date 2018/3/15 下午5:56
     */
    int getUserCountByOrgPrefixId(String prefixId);

    /**
     * 查询某个组织下的所有部门包括
     *
     * @param prefixId
     * @param isIncludeSelf true表示包括当前组织，false反之
     * @return java.util.List<com.jzy.hio.sys.organization.dto.OrganizationDto>
     * @author kimchou
     * @date 2018/3/15 下午6:07
     */
    List<OrganizationDto> queryAllOrgByOrgId(@Param("prefixId") String prefixId, @Param("isIncludeSelf") Boolean isIncludeSelf);

    /**
     * 查询当前组织下的同一部门是否有相同的名称。orgId是去除此Id
     *
     * @param parentId
     * @param name         部门名称
     * @param excludeOrgId 不包含的部门Id
     * @return
     * @author kimchou
     * @date 2018/3/15 下午6:07
     */
    int checkHasSameNameForCurrentLevel(@Param("parentId") String parentId, @Param("name") String name, @Param("orgId") String excludeOrgId);

    /**
     * 查询当前组织下的一级部门的排序最大值
     *
     * @param parentId
     * @return
     * @author kimchou
     * @date 2018/3/17 下午2:07
     */
    int queryOrgChildMaxSort(@Param("parentId") String parentId);

    /**
     * 查询用户所在的主部门
     *
     * @param userId
     * @return
     */
    OrganizationDto queryUserMainOrgByUserId(@Param("userId") String userId);

    /**
     * @param skyDrive
     * @return
     */
    List<SkyDriveDto> queryNameByOrgAndRoleAndUser(@Param("skyDrive") SkyDriveParam skyDrive);

    /**
     * 通过用户ID查询组织机构
     *
     * @param userId 用户Id
     * @param tendId 租户id
     * @return
     */
    List<OrganizationDto> queryOrganizationsByUserId(@Param("userId") String userId);
    
    /**
     * 通过用户ID查询组织机构
     *
     * @param userId 用户Id
     * @param tendId 租户id
     * @return
     */
    List<OrganizationDto> queryOrganizationsByUserIdIM(@Param("userIdIM") String userIdIM);
    
    

    List<OrganizationDto> queryOrganizationTreeByUserIds(@Param("tendId") String tendId, @Param("userIds") List<String> userIds);

    /**
     * 批量更新组织机构时间
     *
     * @param orgIds
     * @param date
     */
    void updateBatchUpdateTime(@Param("orgIds") HashSet<String> orgIds, @Param("now") Date date);

    /**
     * @param prefixId
     * @param isIncludeSelf
     * @return
     */
    List<String> queryAllOrgIdsByOrgId(@Param("prefixId") String prefixId, @Param("isIncludeSelf") Boolean isIncludeSelf);

    /**
     * 通过用户id查询组织id
     *
     * @param userId
     * @return
     */
    List<GeneralDto> queryOrgAndPositionByUserId(@Param("userId") String userId);

    /**
     * 按照部门分组-- 查询用户的数量
     *
     * @param Map workStatus
     * @return
     */
    List<OrganizationUserCountDto> queryUserCountByOrgnizationId(Map<String, String> map);

    @MapKey("workStatus")
    Map<Long,OrgUserCountDto> getUserCountGroupWorkStatusByOrgPrefixId(@Param("prefixId") String prefixId);

    List<OrganizationDto> queryOrganizationByOrgIds(@Param("orgIds") List<String> orgIds);
}
