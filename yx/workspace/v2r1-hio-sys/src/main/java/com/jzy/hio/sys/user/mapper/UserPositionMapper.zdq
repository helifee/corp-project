package com.jzy.hio.sys.user.mapper;

import com.jzy.hio.annotation.DataSource;
import com.jzy.hio.base.mapper.BaseMapper;
import com.jzy.hio.entity.OaSysUserPosition;
import com.jzy.hio.sys.organization.dto.FlowPositionDto;
import com.jzy.hio.sys.organization.dto.FlowUserDto;
import com.jzy.hio.sys.organization.dto.GeneralDto;
import com.jzy.hio.sys.user.dto.IMOrgUserDto;
import com.jzy.hio.sys.user.dto.OAUserDto;
import com.jzy.hio.sys.user.dto.UserDto;
import com.jzy.hio.sys.user.param.OAUserParam;
import com.jzy.hio.sys.user.dto.UserListDto;
import com.jzy.hio.sys.user.param.UserListParam;
import org.apache.ibatis.annotations.Param;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

/**
 * 用户职务
 *
 * @author wt.coffee 2018年3月12日下午2:18:21
 */
public interface UserPositionMapper extends BaseMapper<OaSysUserPosition> {
    /**
     * 查询是否存在该人的职务记录
     *
     * @param userId
     * @return
     */
    public int queryPosition(String userId);

    /**
     * 获取用户列表
     *
     * @param userParam
     * @return
     */
    List<UserDto> getUserListByOrg(@Param(value = "userParam") UserListParam userParam);

    /**
     * 根据组织ID和角色ID查询用户 <!--根据组织ID和角色查询用户 交集-->
     *
     * @param map {"organizationId":"1","roleId":"2"}
     * @return
     */
    List<UserDto> getUserListByOrgAndRole(Map<String, Object> map);

    /**
     * 根据用户ID查询直属上级
     *
     * @param userId
     * @return
     */
    UserDto getOrgLeaderByUserId(@Param("userId") String userId);

    /**
     * 根据部门ID查询组织人员-未确认和在职
     *
     * @param organizationId
     * @return
     */
    List<UserListDto> getUserListByOrgId(@Param("organizationId") String organizationId);

    /**
     * 根据部门ID、角色ID、人员ID---查询人员列表
     *
     * @param apiParam
     * @return
     */
    List<OAUserDto> queryUserByOrgAndRoleAndUser(@Param("apiParam") OAUserParam apiParam);

    /**
     * 通过id查询所有人员
     *
     * @param userIds userId集合
     * @return
     */
    List<UserDto> queryUserByIds(@Param("userIds") List<String> userIds);

    /**
     * 通过用户ID集合查询角色ID-List，部门ID-List，用户ID-List(办公)
     *
     * @param tendId
     * @param userIds
     * @return
     */
    List<GeneralDto> queryOrgAndRoleByUserIds(@DataSource String tendId, @Param("userIds") List<String> userIds);

    /**
     * 批量更新职务的时间
     *
     * @param userPositionsSet 职务id集合
     * @param date             更新时间
     */
    void updateBatchUpdateTime(@Param("userPositionsIds") HashSet userPositionsSet, @Param("now") Date date);

    /**
     * 查询人员通过组织id
     *
     * @param tendId         租户id
     * @param organizationId 组织id
     * @param includeChild   是否包含子部门
     * @return
     */
    List<IMOrgUserDto> queryOaUserByOrganizationId(@Param("tendId") String tendId, @Param("organizationId") String organizationId, @Param("includeChild") boolean includeChild);

    /**
     * 通过useIds查询PositionNames
     *
     * @param userIds
     * @return
     */
    List<FlowUserDto> queryPositionNameByUserIds(@Param("userIds") List<String> userIds,@Param("status") Integer status);

    /**
     * 查询职务详情
     *
     * @param positionId
     * @return
     */
    FlowPositionDto queryPositionByPositionId(@Param("positionId") String positionId);

    /**
     * 根据部门ID、角色ID---查询人员列表交集
     *
     * @param
     * @return
     */
    List<Map<String, String>> queryUserUnionByOrganizationIdsAndRoleIds(@Param("roleId") String roleId, @Param("organizationId") String organizationId);
}
