package com.jzy.hio.sys.role.controller;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.BaseConstants;
import com.jzy.hio.base.anno.TargetFeign;
import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.entity.OaSysRoleUser;
import com.jzy.hio.exception.HioException;
import com.jzy.hio.sys.role.dto.RoleUserDto;
import com.jzy.hio.sys.role.param.RoleAndUserParam;
import com.jzy.hio.sys.role.service.RoleUserService;

/**
 * 角色下的用户
 * 
 * @author wt.coffee
 * @date 2018年3月30日下午6:04:03
 */
@RestController
@RequestMapping("roleUser")
public class RoleUserController extends BaseController {

	@Autowired
	private RoleUserService roleUserService;

	/**
	 * 删除role用户<br>
	 * 系统管理员需要特殊处理、至少需要保留一个用户
	 */
	@PostMapping("/delete")
	public Object deleteRoleUser(@RequestBody Map<String, Object> map) {
		String roleId = getStr(map, "roleId");
		String userId = getStr(map, "userId");
		String tendId = getTendId();
		// 系统管理员删除用户需要判断
		if (isEquals(roleId, BaseConstants.MYSQL_ROLE_SUPERID)) {
			boolean isCanDelete = roleUserService.querySuperIsCanDelete(tendId, userId);
			if (isCanDelete == false) {
				logger.info("系统管理员至少保留一个用户 {} {}", tendId, userId);
				return HioException.sysRoleUserDeleteForbid;
			}
		}
		int result = roleUserService.deleteByRoleIdAndUserId(roleId, userId);
		return result + "";
	}

	/**
	 * 新增role用户
	 * 
	 * @return
	 */
	@PostMapping("saveBatch")
	public String saveRoleUser(@RequestBody List<OaSysRoleUser> users) {
		roleUserService.saveAppendRoleUser(getTendId(), users);
		return null;
	}

	@PostMapping("queryRoleUser")
	public Object queryRoleUser(@RequestBody Map<String, Object> paramMap) {
		List<RoleUserDto> roleUserList = roleUserService.queryRoleUsers(paramMap);
		return roleUserList;
	}

	/**
	 * 给指定用户 赋予指定roleIds的权限---老的角色删除
	 * 
	 * @param roleUserId
	 * @param roleIds
	 *            角色id 逗号分割
	 * @return 成功、失败
	 */
	@TargetFeign
	@PostMapping("saveRole2User")
	public Object saveRole2User(@RequestParam("roleUserId") String roleUserId, @RequestParam("roleIds") String roleIds) {
		Object result = roleUserService.saveReplaceRoleUser(getTendId(), roleUserId, roleIds);
		return result;
	}

	/**
	 * 修改用户对应的用户角色
	 * 
	 * @param tendId(租户ID)
	 * @param userId(用户ID)
	 * @param roleIds(用户角色ID[逗号隔开],形如：角色1,角色2)
	 * @return ApiFeignResponse<Integer>
	 */
	@TargetFeign
	@PostMapping("updateUserRole")
	public Integer updateUserRole(@RequestParam("tendId") String tendId, @RequestParam("userId") String userId, @RequestParam("roleIds") String roleIds) {
		int size = roleUserService.saveAppendRoleUser(tendId, userId, roleIds, false);
		return size;
	}

	/**
	 * 事务上会有问题
	 * 
	 * @param list
	 * @return
	 */
	@PostMapping("saveRole2UserBatch")
	public String saveRole2UserBatch(@RequestBody List<RoleAndUserParam> list) {
		String tendId = getTendId();
		for (RoleAndUserParam item : list) {
			String userId = item.getUserId();
			String roleIds = item.getRoleIds();
			roleUserService.saveAppendRoleUser(tendId, userId, roleIds, false);
		}
		return null;
	}

	/**
	 * 查询具备指定code权限的用户 <>
	 * 
	 * @return
	 */
	@TargetFeign
	@PostMapping("queryRoleUserByMenuCode")
	public List<RoleUserDto> queryRoleUserByMenuCode(@RequestParam String menuCode) {
		return roleUserService.queryRoleUserByMenuCode(menuCode);
	}
}
