package com.jzy.hio.sys.user.controller;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.jzy.hio.sys.user.param.UserRelationParam;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.annotation.ResponseMessage;
import com.jzy.hio.base.BaseConstants;
import com.jzy.hio.base.anno.TargetFeign;
import com.jzy.hio.base.anno.TargetIM;
import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.entity.OaSysOrganization;
import com.jzy.hio.entity.OaSysUser;
import com.jzy.hio.exception.HioException;
import com.jzy.hio.exception.HioMybatisDeleteException;
import com.jzy.hio.exception.HioMybatisGetException;
import com.jzy.hio.exception.HioMybatisInsertException;
import com.jzy.hio.exception.HioMybatisUpdateException;
import com.jzy.hio.platform.param.TendUserInfoParam;
import com.jzy.hio.sys.SysConstants;
import com.jzy.hio.sys.external.service.ExternalContactService;
import com.jzy.hio.sys.menu.controller.MenuController;
import com.jzy.hio.sys.menu.service.MenuService;
import com.jzy.hio.sys.organization.dto.FlowPositionDto;
import com.jzy.hio.sys.organization.dto.FlowUserDto;
import com.jzy.hio.sys.organization.dto.OrgRoleUserDto;
import com.jzy.hio.sys.organization.dto.OrganizationDto;
import com.jzy.hio.sys.organization.dto.SysCurrencyDto;
import com.jzy.hio.sys.organization.param.SkyDriveParam;
import com.jzy.hio.sys.organization.service.OrganizationService;
import com.jzy.hio.sys.role.dto.RoleMenuDto;
import com.jzy.hio.sys.role.service.RoleUserService;
import com.jzy.hio.sys.user.FlowUserAndExternalQueryParam;
import com.jzy.hio.sys.user.dto.FlowUserAndExternalDto;
import com.jzy.hio.sys.user.dto.HRUserCheckImportDto;
import com.jzy.hio.sys.user.dto.HRUserInviteDto;
import com.jzy.hio.sys.user.dto.IMOAUserInfoDto;
import com.jzy.hio.sys.user.dto.IMOrgUserDto;
import com.jzy.hio.sys.user.dto.IMUserDetailInfoDto;
import com.jzy.hio.sys.user.dto.OAUserDto;
import com.jzy.hio.sys.user.dto.OrganizationUsersDto;
import com.jzy.hio.sys.user.dto.UserDto;
import com.jzy.hio.sys.user.dto.UserInfoDto;
import com.jzy.hio.sys.user.dto.UserListDto;
import com.jzy.hio.sys.user.dto.UserPositionDeleteDto;
import com.jzy.hio.sys.user.dto.UserStatusDto;
import com.jzy.hio.sys.user.param.FileImportParam;
import com.jzy.hio.sys.user.param.IMOAUserParam;
import com.jzy.hio.sys.user.param.IMOAUserUpdateParam;
import com.jzy.hio.sys.user.param.IMUserByOrgParam;
import com.jzy.hio.sys.user.param.IMUserInfoParam;
import com.jzy.hio.sys.user.param.IMUserInviteParam;
import com.jzy.hio.sys.user.param.IMUserQueryParam;
import com.jzy.hio.sys.user.param.IMUserSyncParam;
import com.jzy.hio.sys.user.param.IMUserUpdateParam;
import com.jzy.hio.sys.user.param.OAUserParam;
import com.jzy.hio.sys.user.param.ParallelUserParam;
import com.jzy.hio.sys.user.param.UserAndExternalParam;
import com.jzy.hio.sys.user.param.UserImportBatchParam;
import com.jzy.hio.sys.user.param.UserInfoParam;
import com.jzy.hio.sys.user.param.UserInviteParam;
import com.jzy.hio.sys.user.param.UserListParam;
import com.jzy.hio.sys.user.param.UserPositionParam;
import com.jzy.hio.sys.user.param.UserReInviteParam;
import com.jzy.hio.sys.user.param.UserStatusParam;
import com.jzy.hio.sys.user.service.UserService;
import com.jzy.hio.sys.userrds.controller.UserRdsController;
import com.jzy.hio.utils.DateUtil;
import com.jzy.hio.utils.ExcelUtils;
import com.jzy.hio.utils.Page;
import com.jzy.hio.utils.StringUtil;

/**
 * 公司人员
 *
 * @author wt.coffee
 * @date 2018年3月12日上午9:14:38
 */
@RestController
@RequestMapping("user")
public class UserController extends BaseController {
    @Resource
    private ExcelUtils excelUtils;
    @Autowired
    private UserService userService;
    @Autowired
    private ExternalContactService externalContactService;
    @Autowired
    private OrganizationService organizationService;
    @Autowired
    private MenuService menuService;
    @Autowired
    private RoleUserService roleUserService;
	@Autowired
	private MenuController menuController;
	@Autowired
	private UserRdsController userRdsController;


    /**
     * 根据部门ID查询组织人员-未确认和在职
     *
     * @param id
     * @return
     */
    @RequestMapping(value = "getUserListByOrgId/{id}")
    public List<UserListDto> getUserListByOrgId(@PathVariable("id") String id) {
        return userService.getUserListByOrgId(id);
    }

    /**
     * 邀请用户
     *
     * @param apiParam
     * @return 表oaSysUser主键
     * @author kimchou
     */
    @RequestMapping(value = "inviteUser", method = RequestMethod.POST, consumes = "application/json")
    public Object inviteUser(@RequestBody @Validated UserInviteParam apiParam) {
        if (apiParam.getOrganizationId() == null) {
            return new HioMybatisInsertException("部门不能为空");
        }
        return userService.saveUserPosition(apiParam.getTendId(), apiParam);
    }

    /**
     * 邀请外部联系人
     *
     * @param apiParam
     * @return
     * @author kimchou
     */
    @ResponseMessage(message = "邀请成功")
    @RequestMapping(value = "inviteExternalUser", method = RequestMethod.POST, consumes = "application/json")
    public String inviteExternalUser(@RequestBody @Validated IMUserInviteParam apiParam) {
        return userService.saveExternalContact(apiParam.getTendId(), apiParam);
    }

    /**
     * 邀请机构人员-多个职务
     *
     * @return
     */
    @ResponseMessage(message = "邀请成功")
    @RequestMapping(value = "inviteUserForIM", method = RequestMethod.POST)
    public String inviteUserForIM(@RequestBody @Validated IMUserInviteParam apiParam) {
        return userService.saveUserPositionForIM(apiParam.getTendId(), apiParam);
    }

    /**
     * 邀请同事（HR- 人员已经添加，将状态修改为workstatus=0，以及调用platform接口发送邀请）
     *
     * @return
     */
    @RequestMapping(value = "inviteUserForHR", method = RequestMethod.POST)
    public HRUserInviteDto inviteUserForHR(@RequestParam("userIds") List<String> userIds) {
        return userService.updateUserWorkStatusAndInvite(userIds);
    }

    /**
     * 再次邀请用户
     *
     * @param id
     * @return
     * @author kimchou
     */
    @RequestMapping(value = "reInviteUser/{id}", method = RequestMethod.GET)
    public Object reInviteUser(@PathVariable("id") String id) {
        return userService.reInviteUser(getTendId(),id);
    }

    @ResponseMessage(message = "再次邀请成功")
    @PostMapping("reInviteUserForIM")
    public Object reInviteUserForIM(@RequestBody @Validated UserReInviteParam apiParam){
        return userService.reInviteUser(apiParam.getTendId(),apiParam.getUserId());
    }

    /**
     * 删除用户 id为userId
     *
     * @param id
     * @return
     * @throws HioMybatisDeleteException
     */
    @RequestMapping(value = "delete/{id}", method = RequestMethod.DELETE)
    public Boolean delete(@RequestParam(value = "tendId", required = false) String tendId, @PathVariable("id") String id) {
        return userService.deleteUserById(tendId, id);
    }

    @RequestMapping(value = "delete", method = RequestMethod.POST)
    public Boolean deleteUserForIM(@RequestBody @Validated IMOAUserParam apiParam) {
        return userService.delete(apiParam.getTendId(), apiParam);
    }

    /**
     * 获取用户信息详情包括所属部门
     *
     * @param id 业务对象主键
     * @return
     * @throws HioMybatisGetException
     */
    @RequestMapping(value = "get/{id}", method = RequestMethod.GET)
    @Override
    public UserInfoDto get(@PathVariable("id") String id) throws HioMybatisGetException {
        String tendId = getTendId();
        return userService.getUserInfo(tendId, id);
    }
	
	@RequestMapping(value = "getByImUserId", method = RequestMethod.POST)
    public UserInfoDto getByImUserId(@RequestParam("tendId") String tendId, @RequestParam("imUserId") String imUserId) {
		String userId = null;
        try {
            userId = userService.getOAUserId(tendId, imUserId);
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("查询oa userId失败 {} {} ", tendId, imUserId);
            return null;
        }
        UserInfoDto userInfo =  userService.getUserInfo(tendId, userId);
		List<RoleMenuDto> roleMenus = menuController.queryMenuWithRole2(tendId, userId);
		userInfo.setRoleMenus(roleMenus);
		userRdsController.setUserRds(tendId, userId);
    	return userInfo;
    }

    /**
     * IM 获取职务和人员详情
     *
     * @param apiParam
     * @return
     */
    @PostMapping("userInfo/queryWorker")
    public IMOAUserInfoDto queryOAUserAndPositionDetail(@RequestBody @Validated IMOAUserParam apiParam) {
        return userService.queryOAUserAndPositionDetail(apiParam.getTendId(), apiParam);
    }

    /**
     * IM 更新用户详情
     *
     * @param apiParam
     * @return
     */
    @PostMapping("userInfo/updateWork")
    public IMOAUserInfoDto updateOAUserAndPosition(@RequestBody @Validated IMOAUserUpdateParam apiParam) {
        return userService.updateOAUserAndPosition(apiParam.getTendId(), apiParam);
    }

    /**
     * 通过用户姓名模糊查询用户(办公)
     *
     * @param queryCondition
     * @param tendId
     * @return
     */
    @PostMapping(value = "queryUserByName")
    public List<OAUserDto> queryUserListByName(@RequestParam("queryCondition") String queryCondition, @RequestParam("tendId") String tendId) {
        return userService.queryUserListByName(queryCondition, tendId);
    }

    /**
     * 编辑用户更新
     *
     * @param apiParam
     * @return
     */
    @RequestMapping(value = "updateUser", method = RequestMethod.POST, consumes = "application/json")
    public Object updateUser(@RequestBody @Validated UserInfoParam apiParam) {
        return userService.updateUser(isEmpty(apiParam.getTendId())?getTendId():apiParam.getTendId(),apiParam);
    }

    /**
     * 获取用户列表通过组织ID
     *
     * @return
     */
    @RequestMapping(value = "getUserList", method = RequestMethod.POST, consumes = "application/json")
    public Page queryUserListByOrg(@RequestBody @Validated UserListParam apiParam) {
        if (apiParam.getOrganizationId() == null) {
            throw new HioException("请输入组织机构ID");
        }
        return userService.getUserListByOrg(apiParam);
    }

    /**
     * 通过组织id（用户ID）和角色id查询人员列表
     *
     * @param {"organizationId":"1","roleId":"2","userId":"1"}
     * @return
     */
    @RequestMapping(value = "getUserByOrgAndRole", method = RequestMethod.POST, consumes = "application/json")
    public List<UserDto> getUserListByOrgAndRoleId(@RequestBody Map<String, Object> map) {
    	String tendId = null;
    	Object object = map.get("tendId");
    	if(object != null && object instanceof String) {
    		tendId = (String)object;
    	}
        if (map.containsKey("userId") && map.get("userId") != null && map.containsKey("roleId") && map.get("roleId") != null) {
            String userId = (String) map.get("userId");
            // 查找用户所在的主部门
            OrganizationDto userDto = organizationService.queryUserMainOrgByUserId(tendId,userId);
            if (userDto != null) {
                map.put("organizationId", userDto.getId());
                map.put("prefixId", userDto.getPrefixId());
            } else {
                return Collections.emptyList();
            }
        } else if (map.containsKey("organizationId") && map.get("organizationId") != null && map.containsKey("roleId") && map.get("roleId") != null) {
            String organizationId = (String) map.get("organizationId");
            OaSysOrganization organization = organizationService.getObjectById(tendId,organizationId);
            if (organization != null) {
                map.put("organizationId", organization.getId());
                map.put("prefixId", organization.getPrefixId());
            } else {
                return Collections.emptyList();
            }
        } else {
            return Collections.emptyList();
        }
        return userService.getUserListByOrgAndRole(tendId,map);
    }

    /**
     * OA通过用户ID、角色ID、组织ID查询所有对应的人员 Name、Id--去重
     *
     * @param apiParam
     * @return
     */
    @TargetFeign
    @RequestMapping(value = "queryUserByOrgAndRoleAndUser", method = RequestMethod.POST, consumes = "application/json")
    public List<OAUserDto> queryUserByOrgAndRoleAndUser(@RequestBody @Validated OAUserParam apiParam) {
        return userService.queryUserByOrgAndRoleAndUser(apiParam.getTendId(), apiParam);
    }

    /**
     * 通过用户ID集合查询角色ID-List，部门ID-List，用户ID-List(办公)
     *
     * @param apiParam
     * @return
     */
    @TargetFeign
    @RequestMapping(value = "queryOrgAndRoleByUserIds", method = RequestMethod.POST, consumes = "application/json")
    public List<OrgRoleUserDto> queryOrgAndRoleByUserIds(@RequestBody @Validated OAUserParam apiParam) {
        return userService.queryOrgAndRoleByUserIds(apiParam.getTendId(), apiParam.getUserIds(),apiParam.isContainsParentUserOrg());
    }

    /**
     * 根据用户ID获取组织直属上级
     *
     * @param id 用户ID
     * @return
     */
    @RequestMapping(value = "getOrgLeader/{id}", method = RequestMethod.GET)
    public UserDto getOrgLeaderUserInfo(@PathVariable("id") String id) {
        return userService.getOrgLeaderByUserId(id);
    }

    // /**
    // * 获取外部联系人列表
    // *
    // * @return
    // */
    // @RequestMapping(value = "getExternalContactList", method = RequestMethod.POST, consumes = "application/json")
    // public List<IMUserDetailInfoDto> getExternalContactList() {
    // String tendId = getTendId();
    // return externalContactService.queryExternalContactList(tendId);
    // }

    /**
     * IM 获取用户信息
     *
     * @param apiParam
     * @return
     */
    @RequestMapping(value = "imUserInfo", method = RequestMethod.POST, consumes = "application/json")
    public IMUserDetailInfoDto getImUserInfo(@RequestBody @Validated IMUserInfoParam apiParam) {
        return userService.getImUserInfo(apiParam.getTendId(), apiParam);
    }

    /**
     * IM 更新用户信息
     *
     * @param apiParam
     * @return
     */
    @RequestMapping(value = "imUserUpdate", method = RequestMethod.POST, consumes = "application/json")
    public UserDto updateImUserInfo(@RequestBody @Validated IMUserUpdateParam apiParam) {
        return userService.updateImUserInfo(apiParam.getTendId(), apiParam);
    }

    /**
     * 下载邀请人员模板
     *
     * @param response
     * @param request
     */
    @GetMapping("/download/template")
    public void downloadTemplate(HttpServletResponse response, HttpServletRequest request) {
        excelUtils.downLoadResource(response, request, SysConstants.USER_IMPORT_TEMPLATE_NAME, SysConstants.USER_IMPORT_TEMPLATE_PATH);
    }

    /**
     * @param response
     * @param request
     * @param apiParam 下载错误数据
     */
    @PostMapping("/download/error")
    public void downLoadErrorData(HttpServletResponse response, HttpServletRequest request, UserImportBatchParam apiParam) {
        userService.downLoadErrorData(request, response, apiParam.getUsers());
    }

    /**
     * 批量导入用户--直接导入excel以及返回数据
     *
     * @param apiParam
     * @return
     */
    @PostMapping("importUser")
    public Object importFile(@Validated FileImportParam apiParam) {
        return userService.importUsers(apiParam);
    }

    /**
     * 批量导入用户
     *
     * @param apiParam
     * @return
     */
    @PostMapping("excel/import")
    public Object importBatchUsers(@RequestBody UserImportBatchParam apiParam) {
        return userService.importBatchUsers(apiParam);
    }

    /**
     * 预览用户列表
     *
     * @param apiParam
     * @return
     */
    @PostMapping("excel/preview")
    public List<UserInviteParam> previewExcel(@Validated FileImportParam apiParam) {
        return userService.previewExcel(apiParam);
    }

    /**
     * 通过userId-im获取当前租户的oa userId
     *
     * @param imUserId
     * @param tendId
     * @return
     */
    @TargetFeign
    @PostMapping("getOaUserIdByImUserId")
    public String getOaUserId(@RequestParam("imUserId") String imUserId, @RequestParam("tendId") String tendId) {
        String userId = null;
        try {
            userId = userService.getOAUserId(tendId, imUserId);
        } catch (Exception e) {
            e.printStackTrace();
            logger.info("查询oa userId失败 {} {} ", tendId, imUserId);
        }
        return userId;
    }

    /**
     * 同步邀请（IM）
     *
     * @param apiParam
     * @return
     */
    @TargetIM
    @PostMapping("imUserSync")
    public Object synUserImUser(@RequestBody @Validated IMUserSyncParam apiParam) {
        return userService.syncUserImUser(apiParam.getTendId(), apiParam);
    }

    /**
     * IM通知修改用户给系统
     *
     * @return
     */
    @PostMapping("imUserSyncOrg")
    public boolean synUserUpdateOrg(@RequestBody @Validated IMUserSyncParam apiParam) {
        return userService.syncUserUpdateOrg(apiParam.getTendId(), apiParam);
    }

    /**
     * 查询人员通过组织id
     *
     * @param apiParam
     * @return
     */
    @RequestMapping(value = "queryOaUserByOrganizationId", method = RequestMethod.POST)
    public List<IMOrgUserDto> queryOaUserByOrganizationId(@RequestBody @Validated List<IMUserByOrgParam> apiParam) {
        List<IMOrgUserDto> results = new ArrayList<>();
        if (apiParam == null || apiParam.size() == 0) {
            return results;
        }
        IMUserByOrgParam param = null;
        List<IMOrgUserDto> result = null;
        for (int i = 0; i < apiParam.size(); i++) {
            param = apiParam.get(i);
            result = userService.queryOaUserByOrganizationId(param.getTendId(), param.getOrganizationId(), param.isIncludeChild());
            if (result != null && result.size() > 0) {
                results.addAll(result);
            }
        }
        return results;
    }

    /**
     * 通过oaUserId查询imUserId
     *
     * @param tendId
     * @param userId
     * @return 读 SysCurrencyDto--->imUserId
     */
    @RequestMapping(value = "queryImUserIdByOaUserId", method = RequestMethod.POST)
    public SysCurrencyDto queryImUserIdByOaUserId(@RequestParam("tendId") String tendId, @RequestParam("userId") String userId) {
        return userService.getImUserId(tendId, userId);
    }

    /**
     * 通过positionId查询PositionName
     *
     * @param tendId
     * @param positionId
     * @return 读 SysCurrencyDto--->PositionName
     */
    @RequestMapping(value = "queryPositionNameByPositionId", method = RequestMethod.POST)
    public SysCurrencyDto queryPositionNameByPositionId(@RequestParam("tendId") String tendId, @RequestParam("positionId") String positionId) {
        return userService.queryPositionNameByPositionId(tendId, positionId);
    }

    /**
     * 通过useIds查询PositionNames
     *
     * @param apiParam -->传userIds
     * @return 读 SysCurrencyDto--->PositionNames
     */
    @RequestMapping(value = "queryPositionNameByUserIds", method = RequestMethod.POST)
    public List<FlowUserDto> queryPositionNameByUserIds(@RequestBody SkyDriveParam apiParam) {
        return userService.queryPositionNameByUserIds(apiParam.getTendId(), apiParam.getUserIds(),apiParam.getStatus());
    }

    /**
     * 新增职务
     *
     * @param apiParam
     * @return
     */
    @PostMapping("position/save")
    public Boolean saveUserPosition(@RequestBody @Validated UserPositionParam apiParam) {
        return userService.saveUserPositionForHr(null, apiParam);
    }

    /**
     * 批量新增职务
     *
     * @param apiParam
     * @return
     */
    @PostMapping("position/save/savePosition2UserBatch")
    public Integer batchInsertUserPositions(@RequestBody List<UserPositionParam> apiParam, @RequestParam("tendId") String tendId) {
        if (apiParam == null || apiParam.size() == 0) {
            return 0;
        }
        int count = 0;
        for (int i = 0; i < apiParam.size(); i++) {
            UserPositionParam userPositionParam = apiParam.get(i);
            userService.saveUserPositionForHr(tendId, userPositionParam);
            count++;
        }
        return count;
    }

    /**
     * 删除职务
     *
     * @param positionId
     * @return
     */
    @PostMapping("position/delete")
    public Boolean deleteUserPosition(@RequestParam("positionId") String positionId) {
        return userService.deleteUserPositionForHr(positionId);
    }

    /**
     * 批量删除职务
     *
     * @param positionIds
     * @return
     */
    @PostMapping("position/delete/batch")
    public List<UserPositionDeleteDto> deleteBatchUserPosition(@RequestParam("positionIds") List<String> positionIds) {
        if (positionIds == null || positionIds.size() == 0) {
            return Collections.emptyList();
        }
        List<UserPositionDeleteDto> result = new ArrayList<>();
        UserPositionDeleteDto deleteDto = null;
        for (int i = 0; i < positionIds.size(); i++) {
            try {
                deleteDto = new UserPositionDeleteDto();
                deleteDto.setPositionId(positionIds.get(i));
                Boolean b = userService.deleteUserPositionForHr(deleteDto.getPositionId());
                deleteDto.setSuccess(b);
                deleteDto.setMsg("success");
            } catch (Exception e) {
                e.printStackTrace();
                deleteDto.setSuccess(false);
                deleteDto.setMsg(e.getMessage());
                if (e instanceof HioException) {
                    HioException hioException = (HioException) e;
                    deleteDto.setMsg(hioException.getException());
                }
            }
            result.add(deleteDto);
        }
        return result;
    }

    /**
     * 更新职务
     *
     * @param apiParam
     * @return
     */
    @PostMapping("position/update")
    public Boolean updateUserPosition(@RequestBody @Validated UserPositionParam apiParam) {
        if (StringUtil.isBlank(apiParam.getUserPositionId())) {
            throw new HioMybatisUpdateException("userPositionId is blank");
        }
        if (StringUtil.isBlank(apiParam.getOrganizationId())) {
            throw new HioMybatisUpdateException("organizationId is blank");
        }
        return userService.updateUserPositionForHr(apiParam);
    }

    /**
     * 查询用户职务列表【hr】
     *
     * @param userId
     * @return
     */
    @PostMapping("position/list")
    public List<FlowPositionDto> queryUserPositionListByUserId(@RequestParam("userId") String userId) {
        List<String> userIds = new ArrayList<>();
        userIds.add(userId);
        List<FlowUserDto> flowUserDtos = userService.queryPositionNameByUserIds(getTendId(), userIds,3);
        if (flowUserDtos != null && flowUserDtos.size() > 0) {
            return flowUserDtos.get(0).getPositions();
        }
        return new ArrayList<>();
    }

    /**
     * 查询职务详情
     *
     * @param positionId
     * @return
     */
    @PostMapping("position/detail")
    public FlowPositionDto queryPositionByPositionId(@RequestParam("positionId") String positionId) {
        return userService.queryPositionByPositionId(positionId);
    }

    /**
     * 查询用户是否删除
     *
     * @return
     */
    @PostMapping("queryOaUserIsDelete")
    public boolean queryOaUserIsDelete(@RequestBody @Validated IMUserQueryParam apiParam) {
        return userService.queryOaUserIsDelete(apiParam.getTendId(), apiParam);
    }

    /**
     * 添加组织机构人员，查询是否有外部联系人，是否有组织同事
     *
     * @param mobile
     * @return
     */
    @RequestMapping(value = "checkSysExternalContactIsExits", method = RequestMethod.POST)
    public boolean checkSysExternalContactIsExits(@RequestParam("mobile") String mobile) {
        return userService.checkSysExternalContactIsExits(mobile);
    }

    /**
     * 添加组织机构人员，查询是否有外部联系人，是否有组织同事[批量]
     *
     * @param mobiles
     * @return
     */
    @RequestMapping(value = "checkSysExternalContactIsExitsBatch", method = RequestMethod.POST)
    public List<HRUserCheckImportDto> checkSysExternalContactIsExitsBatch(@RequestBody List<String> mobiles) {
        List<HRUserCheckImportDto> results = new ArrayList<>();
        if (mobiles != null && mobiles.size() > 0) {
            HRUserCheckImportDto dto = null;
            for (int i = 0; i < mobiles.size(); i++) {
                dto = new HRUserCheckImportDto();
                String mobile = mobiles.get(i);
                dto.setMobile(mobile);
                try {
                    userService.checkSysExternalContactIsExits(mobile);
                    dto.setCanImport(true);
                    dto.setMsg("success");
                } catch (Exception e) {
                    dto.setCanImport(false);
                    if (e instanceof HioException) {
                        HioException exception = (HioException) e;
                        dto.setMsg(exception.getException());
                    } else {
                        dto.setMsg(e.getMessage());
                    }
                }
                results.add(dto);
            }
        }
        return results;
    }

    /**
     * 获取用户登录的个人信息<br>
     * 查询当前租户的
     *
     * @param param tendId
     * @return
     * @throws Exception
     */
    @RequestMapping(value = "/queryUserLoginInfo", method = RequestMethod.POST)
    public UserInfoDto queryUserLoginInfo(@RequestBody Map<String, String> param) throws Exception {
        String tendId = getStr(param, BaseConstants.HTTP_PARAM_TENDID);
        String imUserId = getUserIdIM();
        OaSysUser user = userService.getOaSysUserByImId(tendId, imUserId);
        if (user == null) {
            logger.warn("查询用户登录信息失败, {}, {}", tendId, imUserId);
            return null;
        } else {
            UserInfoDto userInfo = userService.getUserInfo(tendId, user.getId());
            List<RoleMenuDto> roleMenus = menuService.queryMenuWithRole(tendId, user.getId());
            userInfo.setRoleMenus(roleMenus);
            return userInfo;
        }

    }

    /**
     * 查询用户状态 0 -待确认邀请，1-在职，2-离职，3-未邀请
     *
     * @param tendId
     * @param imUserId
     * @return
     */
    @RequestMapping(value = "queryUserWorkStatus", method = RequestMethod.POST)
    public Integer queryUserWorkStatus(@RequestBody @Validated TendUserInfoParam dto) {
        return userService.queryUserWorkStatus(dto.getTendId(), dto.getUserId(), dto.getType());
    }

    /**
     * 根据用户名称查询用户列表
     *
     * @return map - key-name;-value-id
     */
    @RequestMapping(value = "queryUserMapByName", method = RequestMethod.POST)
    public Map<String, FlowUserDto> queryUserMapByName(@RequestBody List<String> userNames) {
        if (userNames == null || userNames.size() == 0) {
            return new HashMap<>();
        }
        return userService.queryUserMapByName(userNames);
    }

    /**
     * @return
     */
    @RequestMapping(value = "queryUserUnionByOrganizationIdsAndRoleIds", method = RequestMethod.POST)
    public List<Map<String, String>> queryUserUnionByOrganizationIdsAndRoleIds(@RequestBody OAUserParam apiParam) {
        if (isEmpty(apiParam.getOrganizationIds()) && isEmpty(apiParam.getRoleIds())) {
            return Collections.EMPTY_LIST;
        }
        return userService.queryUserUnionByOrganizationIdsAndRoleIds(apiParam.getTendId() == null ? getTendId() : apiParam.getTendId(), apiParam.getRoleIds().get(0), apiParam.getOrganizationIds().get(0));
    }

    /**
     * @param tendId
     * @param usertype
     * @param imUserId
     * @return
     */
    @RequestMapping(value = "queryUserOrExternalUserByIMUserId", method = RequestMethod.POST)
    public List<FlowUserAndExternalDto> queryUserOrExternalUserByIMUserId(@RequestBody FlowUserAndExternalQueryParam apiParam) {
        return userService.queryUserOrExternalUserByIMUserId(apiParam.getTendId(), apiParam.getUsers());
    }

    /**
     * 通过IM-ids查询 用户名称
     *
     * @param imUserIds
     * @param tendId    租户id
     * @return
     */
    @RequestMapping(value = "queryExternalUserByIMUserIds", method = RequestMethod.POST)
    public List<FlowUserAndExternalDto> queryExternalUserByIMUserId(@RequestParam("tendId") String tendId, @RequestParam("imUserIds") List<String> imUserIds) {
        return userService.queryExternalUserByIMUserId(tendId, imUserIds);
    }

    /**
     * 校验当前职务是否有岗位存在
     *
     * @param currentPositionId 当前正在编辑的职务ID
     * @param organizationId    需要关联的部门ID
     * @param userId            当前用户的ID
     * @return
     */
    @RequestMapping(value = "isHaveSamePosition", method = RequestMethod.POST)
    public Boolean isHaveSamePosition(@RequestParam("currentPositionId") String currentPositionId, @RequestParam("organizationId") String organizationId,
                                      @RequestParam("userId") String userId) {
        return userService.isHaveSamePosition(currentPositionId, organizationId, userId);
    }

    /**
     * 查询oa_sys_user或者oa_sys_contact用户状态
     *
     * @param apiParam
     * @return Map<> key -id;value - true-表示正常状态；false-表示不正常状态（包括、未激活、删除、离职等等）
     */
    @RequestMapping(value = "queryUserStatusByIds", method = RequestMethod.POST)
    public Map<String, UserStatusDto> queryUserStatusByIds(@RequestBody @Validated UserStatusParam apiParam) {
        Map<String, UserStatusDto> result = new HashMap<>();
        if (isEmpty(apiParam.getExterIds()) && isEmpty(apiParam.getUserIds())) {
            return result;
        }
        if (isNotEmpty(apiParam.getUserIds())) {
            Map<String, UserStatusDto> oaMap = userService.queryUserStatusByIds(apiParam.getTendId(), apiParam.getUserIds());
            result.putAll(oaMap);
        }
        if (isNotEmpty(apiParam.getExterIds())) {
            Map<String, UserStatusDto> contactMap = externalContactService.queryUserStatusByIds(apiParam.getTendId(), apiParam.getExterIds());
            result.putAll(contactMap);
        }
        return result;
    }

    /**
     *
     * @param userIds
     * @return
     */
    @RequestMapping(value = "syncUsers",method = RequestMethod.POST)
    public Boolean syncUsers(@RequestBody List<String> userIds, @RequestParam("updateTime")String updateTime){
        if (isEmpty(updateTime)){
            throw new HioMybatisUpdateException("updateTime is empty");
        }

        Date date = DateUtil.getDate(updateTime);
        return userService.syncUsers(userIds,date);
    }

    /**
     * 获取平行结构用户列表，保持和之前的树结构参数一致
     * @return
     */
    @PostMapping("queryOrganizationUserList")
    public Object queryParallelUserList(@RequestBody @Validated ParallelUserParam apiParam){
        List<UserDto> userDtos = userService.queryList(null, apiParam.getWorkStatus(), true);
        return userDtos;
    }

    /**
     * 获取平行结构外部联系人列表，保持和之前的树结构参数一致
     * @return
     */
    @PostMapping("queryExternalUserList")
    public Object queryExternalUserList(@RequestBody ParallelUserParam apiParam){
        OaSysUser currentUser = userService.getOaSysUserByImId(getTendId(), getUserIdIM());
        boolean isSuper = false;
        if (currentUser != null && currentUser.getDelflag().intValue() == BaseConstants.MYSQL_DELFLAG_NORMAL) {
            isSuper = roleUserService.queryIsSuper(getTendId(), currentUser.getId());
        }
       return externalContactService.queryList(apiParam.getWorkStatus(),currentUser.getId(),isSuper);
    }

    /**
     *
     * @param tendId
     * @param apiParam
     * @return
     */
    @PostMapping("queryOrganizationAndExternalUsers")
    public OrganizationUsersDto queryOrganizationAndExternalUsers( @RequestBody @Validated UserAndExternalParam apiParam){
        OrganizationUsersDto usersDto = new OrganizationUsersDto();
        new UserDto();
        if(isEmpty(apiParam.getUserIds())){
             usersDto.setExternalUsers(Collections.emptyList());
             usersDto.setOrganizationUsers(Collections.emptyList());
             return usersDto;
        }

       List<UserDto> results = userService.queryOrganizationAndExternalUsers(apiParam.getTendId(),apiParam.getWorkStatus(),apiParam.getUserIds());
       if (isNotEmpty(results)){
           usersDto.setOrganizationUsers(results.stream().filter( userDto -> !userDto.getOrganizationId().equals("-1")).collect(Collectors.toList()));
           usersDto.setExternalUsers(results.stream().filter( userDto -> userDto.getOrganizationId().equals("-1")).collect(Collectors.toList()));
       }
       return usersDto;
    }

    /**
     * 通过IM-ids查询 用户名称 包含内部外部 只查询未删除的。
     * @param tendId
     * @param imUserIds
     * @return Map<String,SysCurrencyDto> key:imUserId;value:userName、userId、imUserId
     */
    @RequestMapping(value = "queryUsersByIMUserIds", method = RequestMethod.POST)
    public Map<String,SysCurrencyDto> queryUsersByIMUserIds(@RequestParam("tendId") String tendId, @RequestParam("imUserIds") List<String> imUserIds){
        return userService.queryUsersByIMUserIds(tendId,imUserIds);
    }

    /**
     * CHAXUN YONGHU
     * @return
     */
    @PostMapping("queryUserRelation")
    public boolean queryUserRelation(@RequestBody UserRelationParam apiParam){
        return userService.queryUserRelation(apiParam.getTendId(),apiParam.getSourceIMUserId(),apiParam.getTargetIMUserId());
    }
}
