package com.jzy.hio.sys.user.service;

import com.jzy.hio.annotation.DataSource;
import com.jzy.hio.base.service.BaseSysService;
import com.jzy.hio.entity.OaSysExternalContact;
import com.jzy.hio.entity.OaSysOrganization;
import com.jzy.hio.entity.OaSysUser;
import com.jzy.hio.entity.OaSysUserPosition;
import com.jzy.hio.platform.param.PuUserParam;
import com.jzy.hio.sys.organization.dto.FlowPositionDto;
import com.jzy.hio.sys.organization.dto.FlowUserDto;
import com.jzy.hio.sys.organization.dto.OrgRoleUserDto;
import com.jzy.hio.sys.organization.dto.SysCurrencyDto;
import com.jzy.hio.sys.organization.param.IMOrgCreateUserParam;
import com.jzy.hio.sys.user.dto.FlowUserAndExternalDto;
import com.jzy.hio.sys.user.dto.HRUserInviteDto;
import com.jzy.hio.sys.user.dto.IMOAUserInfoDto;
import com.jzy.hio.sys.user.dto.IMOrgUserDto;
import com.jzy.hio.sys.user.dto.IMUserDetailInfoDto;
import com.jzy.hio.sys.user.dto.OAUserDto;
import com.jzy.hio.sys.user.dto.UserDto;
import com.jzy.hio.sys.user.dto.UserImportDto;
import com.jzy.hio.sys.user.dto.UserInfoDto;
import com.jzy.hio.sys.user.dto.UserListDto;
import com.jzy.hio.sys.user.dto.UserStatusDto;
import com.jzy.hio.sys.user.param.FileImportParam;
import com.jzy.hio.sys.user.param.IMOAUserParam;
import com.jzy.hio.sys.user.param.IMOAUserUpdateParam;
import com.jzy.hio.sys.user.param.IMUserInfoParam;
import com.jzy.hio.sys.user.param.IMUserInviteParam;
import com.jzy.hio.sys.user.param.IMUserQueryParam;
import com.jzy.hio.sys.user.param.IMUserSyncParam;
import com.jzy.hio.sys.user.param.IMUserUpdateParam;
import com.jzy.hio.sys.user.param.OAUserParam;
import com.jzy.hio.sys.user.param.UserImportBatchParam;
import com.jzy.hio.sys.user.param.UserInfoParam;
import com.jzy.hio.sys.user.param.UserInviteParam;
import com.jzy.hio.sys.user.param.UserListParam;
import com.jzy.hio.sys.user.param.UserOrExternalParam;
import com.jzy.hio.sys.user.param.UserPositionParam;
import com.jzy.hio.utils.Page;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

/**
 * 公司人员管理
 *
 * @author wt.coffee 2018年3月12日上午9:58:25
 */
public interface UserService extends BaseSysService<OaSysUser> {

	public int save(String tendId, OaSysUser user, OaSysUserPosition position);

	/**
	 * 查询用户是否存在职务
	 *
	 * @return
	 */
	public boolean queryPosition(String userId);

	/**
	 * 查询用户, 只查询入职的
	 * 
	 * @param organizationId
	 * @return
	 */
	public List<UserDto> queryList(String organizationId,Integer status,boolean isMainOrg);

	/**
	 * 查询是否存在该手机号用户
	 *
	 * @param userMobile
	 *            用户手机号
	 * @param isDeleted
	 *            是否包含删除 true-包含;false-不包含
	 * @return
	 */
	boolean queryUserByMobile(String userMobile, boolean isDeleted);

	/**
	 * 邀请用户保存
	 *
	 * @param apiParam
	 * @return
	 */
	String saveUserPosition(String tendId, UserInviteParam apiParam);

	/**
	 * @param tendId
	 * @param name
	 * @param imUserId
	 * @param mobile
	 * @param organizationId
	 * @return
	 */
	OaSysUser createTeamAdminUser(String tendId, String name, String imUserId, String mobile, String organizationId);

    void sendIMInvite(String tendId, String imUserId, String mobile,String userImUserId,Integer type);

    Integer getMaxSort();

	/**
	 * 再次邀请用户
	 *
	 * @param id
	 * @return
	 */
	Object reInviteUser(String tendId,String id);

	/**
	 * 删除用户
	 *
	 * @param tendId
	 * @param id
	 * @return
	 */
	Boolean deleteUserById(String tendId, String id);

	/**
	 * 编辑用户
	 *
	 * @param apiParam
	 * @return
	 */
	Object updateUser(String tendId,UserInfoParam apiParam);

    void exitsUserPosition(@DataSource String tendId, List<OaSysUserPosition> tmp);

    /**
	 * @param userPositions
	 *            用户的职位更新
	 * @param organizationsUpList
	 *            需要向上更新的组织机构时间 直接通过prefixId能查出所有的向上的组织Ids
	 * @param organizationsDownList
	 *            需要向下更新的组织机构时间 需要查看出所有的子部们更新时间
	 * @param oaSysUser
	 *            用户
	 */
	void updateOrganizationUpdateDateByUserPosition(String tendId, List<OaSysUserPosition> userPositions, List<OaSysOrganization> organizationsUpList,
			List<OaSysOrganization> organizationsDownList, OaSysUser oaSysUser, OaSysExternalContact oaSysExternalContact);

	/**
	 * 批量更新时间
	 *
	 * @param tendId
	 * @param ids
	 * @param nowDate
	 */
	void updateBatchUpdateTime(@DataSource String tendId, HashSet<String> ids, Date nowDate);

	List<OaSysUserPosition> queryUserAllPositionByUserId(String tendId, String userId);

	/**
	 * 获取用户信息，包括兼职部门
	 *
	 * @param id
	 * @return
	 */
	UserInfoDto getUserInfo(String tendId, String id);

	/**
	 * 通过组织机构ID获取用户列表
	 *
	 * @param apiParam
	 * @return
	 */
	Page getUserListByOrg(UserListParam apiParam);

	/**
	 * 通过组织ID和角色ID查询人员
	 * @param tendId 
	 *
	 * @param {"organizationId":"1","roleId":"2"}
	 * @return
	 */
	List<UserDto> getUserListByOrgAndRole(String tendId, Map<String, Object> map);

	/**
	 * 根据用户ID查询直属上级
	 *
	 * @param id
	 * @return
	 */
	UserDto getOrgLeaderByUserId(String id);

	/**
	 * 根据IM——user_id 查询
	 *
	 * @param tendId
	 * @param imUserId
	 * @return
	 */
	OaSysUser getOaSysUserByImId(@DataSource String tendId, String imUserId);

	/**
	 * 根据IM——user_id 查询
	 *
	 * @param tendId
	 * @param imUserId
	 * @return
	 */
	OaSysExternalContact getOaSysExternalContactByImId(@DataSource String tendId, String imUserId);

	/**
	 * @param tendId
	 *            租户id
	 * @param apiParam
	 * @return
	 */
	String saveExternalContact(String tendId, IMUserInviteParam apiParam);

	/**
	 * 获取用户信息
	 *
	 * @param tendId
	 * @param apiParam
	 * @return
	 */
	IMUserDetailInfoDto getImUserInfo(String tendId, IMUserInfoParam apiParam);

	/**
	 * 导入用户
	 *
	 * @param apiParam
	 * @return
	 */
	Object importUsers(FileImportParam apiParam);

	/**
	 * 预览用户 数据
	 *
	 * @param apiParam
	 * @return
	 */
	List<UserInviteParam> previewExcel(FileImportParam apiParam);

	/**
	 * 批量导入数据
	 *
	 * @param apiParam
	 * @return
	 */
	UserImportDto importBatchUsers(UserImportBatchParam apiParam);

	/**
	 * 更新用户信息
	 *
	 * @param apiParam
	 * @return
	 */
	UserDto updateImUserInfo(String tendId, IMUserUpdateParam apiParam);

	/**
	 * 同步邀请
	 *
	 * @param apiParam
	 * @return
	 */
	Object syncUserImUser(String tendId, IMUserSyncParam apiParam);

	/**
	 * 保存团队成员，新创建（IM）
	 *
	 * @param teams
	 * @return
	 */
	Object saveTeamUsers(String tendId, List<IMOrgCreateUserParam> teams, String organizationId);

	OaSysUser getOaSysUserByMobile(@DataSource String tendId, String mobile);

	OaSysExternalContact getOaSysExternalContactByMobile(@DataSource String tendId, String mobile);

	/**
	 * 根据部门ID查询组织人员-未确认和在职
	 *
	 * @param organizationId
	 * @return
	 */
	List<UserListDto> getUserListByOrgId(String organizationId);

	List<UserDto> queryUserByIds(@DataSource String tendId, String userIds);

	/**
	 * OA通过用户ID、角色ID、组织ID查询所有对应的人员 Name、Id--去重
	 *
	 * @param apiParam
	 * @return
	 */
	List<OAUserDto> queryUserByOrgAndRoleAndUser(@DataSource String tendId, OAUserParam apiParam);

	/**
	 * 通过手机号查询user
	 *
	 * @param mobile
	 * @return
	 */
	OaSysUser queryUserByMobile(String mobile);

	/**
	 * 通过用户姓名模糊查询用户(办公)
	 *
	 * @param queryCondition
	 * @param tendId
	 * @return
	 */
	List<OAUserDto> queryUserListByName(String queryCondition, String tendId);

	/**
	 * @param tendId
	 * @param imUserId
	 * @return
	 * @throws 如果是外部联系人
	 *             有可能查不到、调用的地方需要捕获异常
	 */
	String getOAUserId(@DataSource String tendId, String imUserId) throws Exception;

	/**
	 * @param
	 * @param apiParam
	 * @return
	 */
	boolean syncUserUpdateOrg(@DataSource String tendId, IMUserSyncParam apiParam);

	/**
	 * @param tendId
	 * @param userIds
	 *            用户ids结合
	 * @return
	 */
	List<OrgRoleUserDto> queryOrgAndRoleByUserIds(String tendId, List<String> userIds,boolean containsParentUserOrg);

	/**
	 * 通过组织id查询
	 *
	 * @param tendId
	 * @param organizationId
	 * @param includeChild
	 * @return
	 */
	List<IMOrgUserDto> queryOaUserByOrganizationId(String tendId, String organizationId, boolean includeChild);

	/**
	 * 读 SysCurrencyDto--->imUserId
	 *
	 * @param tendId
	 * @param userId
	 * @return
	 */
	SysCurrencyDto getImUserId(String tendId, String userId);

	/**
	 * 通过positionId查询PositionName
	 *
	 * @param tendId
	 * @param positionId
	 * @return
	 */
	SysCurrencyDto queryPositionNameByPositionId(String tendId, String positionId);

	/**
	 * 通过useIds查询PositionNames
	 *
	 * @param tendId
	 * @param userIds
	 * @return
	 */
	List<FlowUserDto> queryPositionNameByUserIds(String tendId, List<String> userIds,Integer status);

	/**
	 * 保存用户职务
	 *
	 * @param apiParam
	 * @return
	 */
	Boolean saveUserPositionForHr(String tendId, UserPositionParam apiParam);

	/**
	 * 删除职务
	 *
	 * @param positionId
	 * @return
	 */
	Boolean deleteUserPositionForHr(String positionId);

	/**
	 * 更新职务
	 *
	 * @param apiParam
	 * @return
	 */
	Boolean updateUserPositionForHr(UserPositionParam apiParam);

	/**
	 * 查询职务信息
	 *
	 * @param positionId
	 * @return
	 */
	FlowPositionDto queryPositionByPositionId(String positionId);

	/**
	 * 查询用户是否删除
	 *
	 * @param tendId
	 * @param apiParam
	 * @return
	 */
	boolean queryOaUserIsDelete(String tendId, IMUserQueryParam apiParam);

	/**
	 * 下载错误数据 excel
	 *
	 * @param request
	 * @param response
	 * @param users
	 */
	void downLoadErrorData(HttpServletRequest request, HttpServletResponse response, List<UserInviteParam> users);

	/**
	 * 查询用户
	 *
	 * @param tendId
	 * @param apiParam
	 * @return
	 */
	IMOAUserInfoDto queryOAUserAndPositionDetail(String tendId, IMOAUserParam apiParam);

	/**
	 * 更新用户
	 *
	 * @param tendId
	 * @param apiParam
	 * @return
	 */
	IMOAUserInfoDto updateOAUserAndPosition(String tendId, IMOAUserUpdateParam apiParam);

	/**
	 * 删除用户
	 *
	 * @param tendId
	 * @param apiParam
	 * @return
	 */
	Boolean delete(String tendId, IMOAUserParam apiParam);

	/**
	 * 添加组织机构人员，查询是否有外部联系人，将外部联系人删除,
	 *
	 * @param mobile
	 * @return
	 */
	boolean checkSysExternalContactIsExits(String mobile);

	/**
	 * 邀请用户
	 * 
	 * @param tendId
	 * @param apiParam
	 * @return
	 */
	String saveUserPositionForIM(String tendId, IMUserInviteParam apiParam);

	/**
	 * 修改人员状态以及发送邀请
	 * 
	 * @param userIds
	 * @return
	 */
	HRUserInviteDto updateUserWorkStatusAndInvite(List<String> userIds);

	/**
	 * 查询用户状态
	 * 
	 * @param tendId
	 * @param imUserId
	 * @param type
	 * @return
	 */
	Integer queryUserWorkStatus(String tendId, String imUserId, Integer type);

	/**
	 * 通过名称查询用户列表
	 * 
	 * @param userNames
	 * @return
	 */
	Map<String, FlowUserDto> queryUserMapByName(List<String> userNames);

	List<Map<String, String>> queryUserUnionByOrganizationIdsAndRoleIds(String tendId, String roleId,String organizationId );

	List<FlowUserAndExternalDto> queryUserOrExternalUserByIMUserId(String tendId, List<UserOrExternalParam> apiPram);

	OaSysUserPosition queryUserMainPositionByUserId(@DataSource String tendId, String userId);

	Boolean isHaveSamePosition(String currentPositionId, String organizationId, String userId);

	List<FlowUserAndExternalDto> queryExternalUserByIMUserId(String tendId, List<String> imUserIds);

    Map<String,UserStatusDto> queryUserStatusByIds(String tendId, List<String> ids);

    String queryUserIsNormal(String tendId, List<String> sysUserIds);

    List<Map<String,String>> savePuUserBatch(String tendId,List<PuUserParam> apiParam);

    Boolean syncUsers(List<String> userIds,Date updateTime);

    void newOaSysUser(String tendId,OaSysExternalContact oaSysExternalContact);

	List<UserDto> queryOrganizationAndExternalUsers(String tendId, Integer workStatus, List<String> userIds);

    OaSysUser queryUsersByIMUserId(String tendId, String imUserId);

    void checkMobileIsExitsDetail(String tendId, String userMobile, int inviteType);

    Map<String,SysCurrencyDto> queryUsersByIMUserIds(String tendId, List<String> imUserIds);

    boolean queryUserRelation(String tendId, String sourceUserId, String targetUserId);
}
