package com.jzy.hio.sys.organization.service;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import com.jzy.hio.annotation.DataSource;
import com.jzy.hio.base.anno.TargetFeign;
import com.jzy.hio.base.service.BaseSysService;
import com.jzy.hio.entity.OaSysOrganization;
import com.jzy.hio.platform.dto.tenantcompanyinfo.TenantCompanyInfoDto;
import com.jzy.hio.platform.param.PuCompanyParam;
import com.jzy.hio.sys.organization.dto.GeneralDto;
import com.jzy.hio.sys.organization.dto.OrganizationDto;
import com.jzy.hio.sys.organization.dto.OrganizationUserCountDto;
import com.jzy.hio.sys.organization.dto.SkyDriveDto;
import com.jzy.hio.sys.organization.param.IMOrgCreateParam;
import com.jzy.hio.sys.organization.param.OrgDragParam;
import com.jzy.hio.sys.organization.param.OrgSaveParam;
import com.jzy.hio.sys.organization.param.SkyDriveParam;

/**
 * 组织机构
 *
 * @author wt.coffee /> 2018年3月8日下午1:02:17
 */
public interface OrganizationService extends BaseSysService<OaSysOrganization> {

    int queryUserConut(String orgId, String prefixId);

    /**
     * 查询组织下的用户
     *
     * @param id
     * @return int
     * @author kimchou
     * @date 2018/3/15 下午4:20
     */
    int getUserCountByOrgId(String id);

    /**
     * 删除组织机构
     *
     * @param id
     * @return java.lang.Object
     * @author kimchou
     * @date 2018/3/15 下午4:38
     */
    Object deleteOrgById(String tendId,String id);

    /**
     * 更新组织机构
     *
     * @param apiParam
     * @return java.lang.Object
     * @author kimchou
     * @date 2018/3/15 下午7:00
     */
    Object updateOrgBelongs(OrgDragParam apiParam);

    List<OrganizationDto> queryAllOrgByOrgId(String tendId, String prefixId, boolean isIncludeSelf);

    int queryOrgChildMaxSort(String parentId);

    // 查询所有次级机构部门，排序 prefixSort>target-prefixSort And prefixSort<source-prefixSort
    List<OaSysOrganization> queryAllOrgByParentIdAndSort(String parentId, String maxPrefixSort, String minPrefixSort, boolean isContainsMax, boolean isContainsMin);

    /**
     * 保存组织机构（如果）
     *
     * @param apiParam
     * @return
     */
    Object saveOrganization(String tendId,OrgSaveParam apiParam);

    /**
     * 查询用户负责的所有组织机构
     *
     * @param tendId
     * @param userId
     * @return
     */
    List<OaSysOrganization> queryAllOrgLeadByUserId(String tendId, String userId);

    /**
     * 编辑组织机构
     *
     * @param apiParam
     * @return
     */
    Object updateOrganization(String tendId,OrgSaveParam apiParam);

    String isHavePermission(@DataSource String tendId);

    /**
     * 查询用户的所在组织机构
     *
     * @param tendId
     * @param userId
     * @return
     */
    OrganizationDto queryUserMainOrgByUserId(String tendId, String userId);

    List<SkyDriveDto> queryNameByOrgAndRoleAndUser(String tendId,SkyDriveParam apiParam);

    /**
     * @param tendId   指定数据库 切换
     * @param apiParam
     * @return
     */
    Object createTeam(@DataSource String tendId, IMOrgCreateParam apiParam);

    // 更新公司名称
    void updateCompanyName(@DataSource String tendId, String name, OaSysOrganization oaSysOrganization,boolean isPuSystemc);


    /**
     * 通过用户ID查询组织机构
     *
     * @param userIdIM
     * @param tendId
     * @return
     */
    List<OrganizationDto> queryOrganizationsByUserId(String tendId, String userId);

    /**
     * 通过用户ID查询组织机构
     *
     * @param userIdIM
     * @param tendId
     * @return
     */
    List<OrganizationDto> queryOrganizationsByUserIdIM(String tendId, String userIdIM);

    List<OrganizationDto> queryOrganizationTreeByUserIds(String tendId, String userIds);

    /**
     * 更新公司名称
     *
     * @param apiParam
     * @return
     */
    boolean updateTenantCompanyInfo(@DataSource String tendId, TenantCompanyInfoDto apiParam);

    /**
     * 查询公司
     *
     * @param tendId
     * @return
     */
    OaSysOrganization queryCompanyOrganization(@DataSource String tendId);

    /**
     * 通过组织id查询名称
     *
     * @param tendId
     * @param id
     * @return
     */
    @TargetFeign
    GeneralDto queryOrganizationNameById(String tendId, String id);

    /**
     * 批量更新组织更新时间字段
     *
     * @param tendId
     * @param organizationsSet
     * @param date
     */
    void updateBatchUpdateTime(String tendId, HashSet<String> organizationsSet, Date date);

    /**
     * 查找所有的子部们的id
     *
     * @param prefixId
     * @param b
     * @return
     */
    List<String> queryAllOrgIdsByOrgId(String prefixId, boolean b);

    /**
     * 通过用户ID查询部门列表包括职务
     *
     * @param tendId 租户id
     * @param id     用户id
     * @return
     */
    List<GeneralDto> queryOrgAndPositionByUserId(String tendId, String id);

    /**
     * @param map
     * @return
     */
    List<OrganizationUserCountDto> queryUserCountByOrgnizationId(Map<String, String> map);

    /**
     * 复制组织机构
     *
     * @param sourceId
     * @param desId
     * @return
     */
    Object copyOrganizations(String sourceId, String desId);

    /**
     * 查询子组织
     *
     * @param tendId
     * @param organizationId
     * @param isContainsSelf
     * @return
     */
    List<OrganizationDto> queryOrgChildById(String tendId, String organizationId, boolean isContainsSelf);

    Object queryOrganizationDetails(String tendId, String id);

    boolean savePuCompany(String tendId,PuCompanyParam apiParam);

    List<OrganizationDto> queryOrganizationByOrgIds(String tendId, List<String> orgIds);
}
