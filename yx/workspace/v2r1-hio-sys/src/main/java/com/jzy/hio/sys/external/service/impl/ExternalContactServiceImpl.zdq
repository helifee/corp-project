package com.jzy.hio.sys.external.service.impl;

import com.jzy.hio.annotation.DataSource;
import com.jzy.hio.base.BaseConstants;
import com.jzy.hio.base.service.impl.BaseSysServiceImpl;
import com.jzy.hio.entity.OaSysExternalContact;
import com.jzy.hio.entity.OaSysExternalShare;
import com.jzy.hio.sys.external.dto.ExternalContactDto;
import com.jzy.hio.sys.external.dto.ExternalManagerDto;
import com.jzy.hio.sys.external.mapper.ExternalContactMapper;
import com.jzy.hio.sys.external.mapper.ExternalShareMapper;
import com.jzy.hio.sys.external.service.ExternalContactService;
import com.jzy.hio.sys.user.dto.FlowUserAndExternalDto;
import com.jzy.hio.sys.user.dto.ImUserDto;
import com.jzy.hio.sys.user.dto.UserDto;
import com.jzy.hio.sys.user.dto.UserStatusDto;
import org.apache.ibatis.annotations.Param;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import tk.mybatis.mapper.entity.Example;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

/**
 * @author kimchou
 * @create 2018-03-23 16:53
 * @desc
 **/
@Service
public class ExternalContactServiceImpl extends BaseSysServiceImpl<OaSysExternalContact> implements ExternalContactService {

	@Autowired
	private ExternalContactMapper externalContactMapper;

	@Autowired
	private ExternalShareMapper externalShareMapper;

	@Override
	public List<ExternalContactDto> queryExternalContactList(@DataSource String tendId) {
		return externalContactMapper.queryExternalContactList();
	}

	/**
	 * 按照负责人或者共享者id查询外部联系人
	 */
	@Override
	public List<ExternalContactDto> queryListByUserWithRole(@DataSource String tendId, String userId) {
		boolean isSuper = isSuper(tendId, userId);
		if (isSuper) {
			return this.queryExternalContactList(tendId);
		} else {
			return externalContactMapper.queryListByShareId(userId);
		}
	}

	@Override
	public OaSysExternalShare queryExternalShare(@DataSource String tendId, String currentUserId, String externalUserId) {
		Example example = new Example(OaSysExternalShare.class);
		Example.Criteria criteria = example.createCriteria();
		criteria.andEqualTo("delflag", BaseConstants.MYSQL_DELFLAG_NORMAL);
		criteria.andEqualTo("contactId", externalUserId);
		criteria.andEqualTo("shareId", currentUserId);
		List<OaSysExternalShare> oaSysExternalShares = externalShareMapper.selectByExample(example);
		if (oaSysExternalShares != null && oaSysExternalShares.size() > 0) {
			return oaSysExternalShares.get(0);
		}
		return null;
	}

	@Override
	public int save(@DataSource String tendId, OaSysExternalContact oaSysExternalContact) {
		return save(oaSysExternalContact);
	}

	@Override
	public void updateBatchUpdateTime(@DataSource String tendId, HashSet<String> externalSet, Date nowDate) {
		externalContactMapper.updateBatchUpdateTime(externalSet, nowDate);
	}

	@Override
	public List<ExternalContactDto> queryExternalUsersByIds(@DataSource String tendId, List<String> ids,int status) {
		return externalContactMapper.queryExternalUsersByIds(ids,status);
	}

	@Override
	public List<ExternalContactDto> queryExternalUsersByIdsWithRole(List<String> ids, String userId) {
		List<ExternalContactDto> result = null;
		if (isSuper(getTendId(), userId)) {
			result = externalContactMapper.queryExternalUsersByIdsWithRole(ids, null);
		} else {
			result = externalContactMapper.queryExternalUsersByIdsWithRole(ids, userId);
		}
		return result;
	}

	@Override
	public List<ImUserDto> queryExternalShareOaUserListByIMUserId(@DataSource String tendId, String imUserId) {
		return externalContactMapper.queryExternalShareOaUserListByIMUserId(tendId, imUserId);
	}

	@Override
	public List<FlowUserAndExternalDto> queryExternalUsersByImUserIds(@DataSource String tendId, List<String> imUserIds) {
		return externalContactMapper.queryExternalUsersByImUserIds(imUserIds);
	}

	@Override
	public ExternalManagerDto queryExternalManager(@DataSource String tendId, String contactId) {
		List<ExternalManagerDto> results = externalContactMapper.queryExternalManager(contactId);
		if (isNotEmpty(results)){
			return results.get(0);
		}
		return null;
	}

	@Override
	public Map<String, UserStatusDto> queryUserStatusByIds(@DataSource String tendId, List<String> ids) {
		return externalContactMapper.queryUserStatusByIds(ids);
	}

	@Override
	public Boolean queryExternalIsHaveRelation(@DataSource String tendId, String imUserId, String userId) {
		int cnt = externalContactMapper.queryExternalShareCnt(imUserId,userId);
		return cnt>0;
	}

	@Override
	public String queryUserIsNormal(@DataSource String tendId, List<String> sysUserIds) {
		return externalContactMapper.queryUserIsNormal(sysUserIds);
	}

	@Override
	public List<UserDto> queryList(Integer workStatus,String userId,boolean isSuper) {
		return externalContactMapper.queryExternalUserList(workStatus,userId,isSuper);
	}
}
