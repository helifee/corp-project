package com.jzy.hio.redis.service.impl;

import com.jzy.hio.base.Base;
import com.jzy.hio.base.RedisKeyConstant;
import com.jzy.hio.entity.OaSysRolePermission;
import com.jzy.hio.entity.OaSysRoleUser;
import com.jzy.hio.platform.dto.tenantcompanyinfo.TenantCompanyInfoDto;
import com.jzy.hio.redis.JedisUtil;
import com.jzy.hio.redis.RedisService;
import com.jzy.hio.redis.entity.RoleMenuButtonRds;
import com.jzy.hio.redis.entity.UserRds;
import com.jzy.hio.redis.service.RedisGetService;
import com.jzy.hio.sys.SysConstants;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.persistence.Table;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * 从redis中取数据
 * 
 * @author wt.coffee<br/>
 *         2018年3月20日下午8:13:16
 */
@Service
public class RedisGetServiceImpl extends Base implements RedisGetService {
	@Autowired
	private RedisService redisService;

	@Override
	public List<OaSysRoleUser> queryRoleUser(String tendId, String roleId) {
		String key = tendId + ":" + getTableName(OaSysRoleUser.class);
		Map<String, String> map = redisService.query(key);
		List<OaSysRoleUser> roleUsers = new ArrayList<>();
		for (String entityJson : map.values()) {
			OaSysRoleUser roleUser = Base.json2obj(entityJson, OaSysRoleUser.class);
			if (Base.isEquals(roleId, roleUser.getRoleId())) {// 注意第二个参数
				roleUsers.add(roleUser);
			}
		}
		return roleUsers;
	}

	@Override
	public List<OaSysRolePermission> queryRolePermissions(String tendId, String roleId) {
		String key = tendId + ":" + getTableName(OaSysRoleUser.class);
		Map<String, String> map = redisService.query(key);
		List<OaSysRolePermission> rolePerms = new ArrayList<>();
		for (String entityJson : map.values()) {
			OaSysRolePermission rolePerm = Base.json2obj(entityJson, OaSysRolePermission.class);
			if (Base.isEquals(roleId, rolePerm.getRoleId())) {// 注意第二个参数
				rolePerms.add(rolePerm);
			}
		}
		return rolePerms;
	}

	@Override
	public <T> List<T> queryAll(String tendId, Class<T> tClass) {
		String key = tendId + ":" + getTableName(tClass);
		Map<String, String> map = redisService.query(key);
		List<T> list = new ArrayList<>();
		for (String entityJson : map.values()) {
			T entity = Base.json2obj(entityJson, tClass);
			list.add(entity);
		}
		return list;
	}

	public String getTableName(Class<?> beanClass) {
		Table table = beanClass.getAnnotation(Table.class);
		return table.name();
	}

	@Override
	public UserRds getUserDetail(String tendId, String userId) {
		String key = tendId + ":" + SysConstants.REDIS_TABLE_USERDETAIL + ":" + userId;
		Map<String, String> map = redisService.getRowAll(key);
		Map<String, Object> newMap = Base.mapStr2mapObj(map);
		UserRds userRds = Base.map2obj(newMap, UserRds.class);
		return userRds;
	}

	@Override
	public RoleMenuButtonRds getRoleButtonUrl(String tendId, String roleId) {
		String json = redisService.getRow(tendId, RoleMenuButtonRds.class, roleId);
		if (json != null) {
			RoleMenuButtonRds roleUrl = json2obj(tendId, RoleMenuButtonRds.class);
			return roleUrl;
		} else {
			return null;
		}
	}

	@Override
	public TenantCompanyInfoDto  getCompanyInfo(String tendId){
		String tenantId = JedisUtil.fetchIndexMobile(RedisKeyConstant.tenantToInfo, tendId);
		String tenantJson = JedisUtil.fetchRow("tenant_company_info", tenantId);
		if (isNotEmpty(tenantJson)){
			TenantCompanyInfoDto tenantCompanyInfoDto = Base.json2obj(tenantJson,TenantCompanyInfoDto.class);
			return tenantCompanyInfoDto;
		}
		return null;
	}
}
