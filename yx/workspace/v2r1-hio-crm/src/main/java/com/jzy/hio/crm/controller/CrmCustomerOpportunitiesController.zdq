package com.jzy.hio.crm.controller;

import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.jzy.hio.base.Base;
import com.jzy.hio.base.BaseConstants;
import com.jzy.hio.base.controller.BaseController;
import com.jzy.hio.constant.CrmConstant;
import com.jzy.hio.crm.dto.AttachmentParamDto;
import com.jzy.hio.crm.dto.CrmCustomerOpportunitiesDto;
import com.jzy.hio.crm.dto.CrmOpportunityProductDto;
import com.jzy.hio.crm.dto.CrmStatisticalCountDto;
import com.jzy.hio.crm.dto.CrmStatusCountDto;
import com.jzy.hio.crm.param.CrmCommonParam;
import com.jzy.hio.crm.param.CrmCustomerOpportunitiesParam;
import com.jzy.hio.crm.param.CrmOpportunitySearchParam;
import com.jzy.hio.crm.param.CrmValNameParam;
import com.jzy.hio.crm.service.CrmCustomerOpportunitiesService;
import com.jzy.hio.crm.utils.PageResult;
import com.jzy.hio.entity.CrmCustomerOpportunities;
import com.jzy.hio.exception.HioException;
import com.jzy.hio.springmvc.ApiResponse;
import com.jzy.hio.utils.LoginUser;

/**
 * 商机
 *
 * @author
 */
@RestController
@RequestMapping("/opportunities")
public class CrmCustomerOpportunitiesController extends BaseController {

    @Autowired
    private CrmCustomerOpportunitiesService crmCustomerOpportunitiesService;

	/**
	 * 获取上传参数和业务id
	 * @return
	 */
	@PostMapping("/getAttachmentParam")
	public ApiResponse<AttachmentParamDto> getAttachmentParam(){
		ApiResponse<AttachmentParamDto> res = new ApiResponse<>(200, "查询成功");
		AttachmentParamDto attachmentParamDto = new AttachmentParamDto();
		attachmentParamDto.setApp(BaseConstants.App.CRM.getId());
		attachmentParamDto.setCategory(BaseConstants.AttachmentCategory.CRM_OPPORTUNITY.getId());
		attachmentParamDto.setBusinessId(Base.generatePk(CrmCustomerOpportunities.class));
		res.setResult(attachmentParamDto);
		return res;
	}

    /**
     * 新增和修改商机
     *
     * @param
     * @return
     */
    @PostMapping("/save")
    public ApiResponse<Void> save(@RequestBody CrmCustomerOpportunitiesDto customerOpportunitiesDto) {
        ApiResponse<Void> res = new ApiResponse<>(200, "保存成功");
        boolean flag = crmCustomerOpportunitiesService.saveCustomerOpportunities(customerOpportunitiesDto);
        // 返回值为false没有保存成功
        if (!flag) {
            res.setMessage("保存失败");
            res.setStatus(102);
            return res;
        }
        return res;
    }

    /**
     * 查询商机
     *
     * @param id
     * @return
     */
    @PostMapping("/get/{id}")
    public ApiResponse<CrmCustomerOpportunitiesDto> get(@PathVariable("id") String id) {
        ApiResponse<CrmCustomerOpportunitiesDto> res = new ApiResponse<>(200, "查询成功");
        // 查询商机
        CrmCustomerOpportunitiesDto customerOpportunitiesDto = crmCustomerOpportunitiesService.selectCustomerOpportunities(id);
        res.setResult(customerOpportunitiesDto);
        return res;
    }

    /**
     * 删除商机
     *
     * @param id
     * @return
     */
    @PostMapping("/delete/{id}")
    public ApiResponse<Void> delete(@PathVariable("id") String id) {
        ApiResponse<Void> res = new ApiResponse<>(200, "删除成功");
       
        crmCustomerOpportunitiesService.deleteCustomerOpportunities(id);
        
        return res;
    }

    /**
     * 根据商机id，查询下属产品
     */
    @PostMapping("/product")
    public ApiResponse<List<CrmOpportunityProductDto>> opportunityProduct(@RequestParam String oppoId) {
        ApiResponse<List<CrmOpportunityProductDto>> res = new ApiResponse<>(200, "查询成功");
        
        List<CrmOpportunityProductDto> resultList = crmCustomerOpportunitiesService.selectProductByOpportunityId(oppoId);
        res.setResult(resultList);
        
        return res;
    }

	/**
	 * 商机分页
	 * @param opportunitySearchParam
	 * @return
	 */
	@PostMapping("/page")
	public ApiResponse<PageResult> page(@RequestBody CrmOpportunitySearchParam opportunitySearchParam) {
		ApiResponse<PageResult> res = new ApiResponse<>(200, "查询成功");
        if (!isRolePermission(BaseConstants.MYSQL_MENU_CODE_CRM_MANAGE)) {
        	String uid = getUserIdOA();
        	opportunitySearchParam.setUid(uid);
		}
        
		PageResult page = crmCustomerOpportunitiesService.getPageOpportunities(opportunitySearchParam);
		res.setResult(page);
		return res;
	}

    /**
     * 我的CRM 商机查询
     *
     * @return
     */
    @PostMapping("/queryOpportunities")
    public Object queryOpportunities() {
        String userId = getUserIdOA();
        List<CrmCustomerOpportunitiesDto> crmCustomerOpportunities = crmCustomerOpportunitiesService.queryOpportunities(userId);
        return crmCustomerOpportunities;
    }

    /**
     * 我的CRM  全部商机查询 （分页）
     * @param crmCustomerOpportunitiesParam
     * @return
     */
    @PostMapping("/queryAll")
    public PageResult queryAll(@RequestBody CrmCustomerOpportunitiesParam crmCustomerOpportunitiesParam){
        LoginUser loginUser = getLoginUser();
        String userId = loginUser.getUserId();
        crmCustomerOpportunitiesParam.setUserId(userId);
        return crmCustomerOpportunitiesService.queryAll(crmCustomerOpportunitiesParam);
    }


    /**
     * 查询商机各个阶段数量
     * @param
     * @return
     */
    @PostMapping("queryGroupStages")
    public ApiResponse<List<CrmStatusCountDto>> queryGroupStages(@RequestBody CrmCommonParam commonParam){
    	ApiResponse<List<CrmStatusCountDto>> res = new ApiResponse<>(200, "查询成功");
    	String uid = getUserIdOA();
    	uid = null;

    	String customerId = commonParam.getCustomerId();
    	List<CrmStatusCountDto> statusCountDtoList = crmCustomerOpportunitiesService.queryCountGoupByStage(uid, customerId);
    	res.setResult(statusCountDtoList);
    	return res;
    }

    /**
     * 查询商机列表
     * @return
     */
    @PostMapping("queryList")
    public ApiResponse<List<CrmCustomerOpportunities>> queryList(@RequestBody CrmCommonParam commonParam){
    	ApiResponse<List<CrmCustomerOpportunities>> res = new ApiResponse<>(200, "查询成功");
    	String uid = getUserIdOA();
    	uid = null;
    	CrmCustomerOpportunities oppoSelect = new CrmCustomerOpportunities();
    	oppoSelect.setDelflag(CrmConstant.DEL_FALSE);
    	oppoSelect.setCreatePersonId(uid);
    	oppoSelect.setCustomerId(commonParam.getCustomerId());
    	List<CrmCustomerOpportunities> resultList = crmCustomerOpportunitiesService.queryList(oppoSelect);
    	res.setResult(resultList);
    	return res;
    }

	/**
	 * 商机详情数量查询
	 * @param param
	 * @return
	 */
	@RequestMapping("/statistical")
	public CrmStatisticalCountDto statistical(@RequestBody CrmCommonParam param) {
		String customerId = param.getCustomerId();
		String opportunityId = param.getOpportunityId();
		if (param == null || StringUtils.isBlank(customerId) || StringUtils.isBlank(opportunityId)) {
			throw new HioException("参数有误");
		}
		return crmCustomerOpportunitiesService.queryStatistical(customerId, opportunityId);
	}
	
    /**
     * 验证商机名称
     * @param param
     * @return
     */
    @PostMapping("/valName")
	public ApiResponse<Boolean> valName(@RequestBody CrmValNameParam param) {
		ApiResponse<Boolean> res = new ApiResponse<>(200, "可以使用");
		String id = param.getSid();
		String customerId = param.getCustomerId();
		String name = param.getName();
		boolean canUse = crmCustomerOpportunitiesService.queryOpportunityNameCanUse(id, customerId, name);
		if (!canUse) {
			res.setStatus(101);
			res.setMessage("已被使用");
		}
		res.setResult(canUse);
		return res;
	}
	
}
