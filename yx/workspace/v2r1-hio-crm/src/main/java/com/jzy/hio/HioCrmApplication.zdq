package com.jzy.hio;

import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
import org.springframework.boot.Banner.Mode;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;
import org.springframework.cloud.netflix.eureka.EnableEurekaClient;
import org.springframework.cloud.netflix.feign.EnableFeignClients;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.EnableAspectJAutoProxy;
import org.springframework.context.annotation.Import;
import org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;

import com.jzy.hio.base.BaseApplication;
import com.jzy.hio.database.DataSourceRegister;

@Import({ DataSourceRegister.class })
@EnableEurekaClient
@EnableFeignClients // 开启feign注解扫描、可以调用feign服务
@EnableCircuitBreaker
@SpringBootApplication
// 使用CGLIB代理。默认使用jdk
@EnableAspectJAutoProxy(proxyTargetClass = true, exposeProxy = true)
@EnableRedisHttpSession
// @MapperScan(value = { "com.jzy.hio.**.mapper", "com.jzy.hio.base.mapper" })
public class HioCrmApplication extends BaseApplication {
	public static void main(String[] args) {

//		try {
//			String address = InetAddress.getLocalHost().getHostAddress();
//			if ("10.17.4.23".equals(address)) {
//				args = new String[] { "--spring.profiles.active=dev" };
//			}
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
		SpringApplication application = new SpringApplication(HioCrmApplication.class);
		application.setBannerMode(Mode.OFF);
		application.run(args);
		// new SpringApplicationBuilder(HioPortalApplication.class).web(true).run(args);
		System.out.println("【【【【【【 HioCrmApplication微服务 】】】】】】已启动.");
	}

	@Bean
	public RabbitTemplate rabbitTemplate(ConnectionFactory connectionFactory) {
		RabbitTemplate template = new RabbitTemplate(connectionFactory);
		template.setMessageConverter(new Jackson2JsonMessageConverter());
		return template;
	}

}
