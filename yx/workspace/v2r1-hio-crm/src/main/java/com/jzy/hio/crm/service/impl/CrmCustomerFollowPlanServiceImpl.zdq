package com.jzy.hio.crm.service.impl;

import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import com.jzy.hio.base.BaseConstants;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.jzy.hio.base.Base;
import com.jzy.hio.base.service.impl.BaseServiceImpl;
import com.jzy.hio.constant.CrmConstant;
import com.jzy.hio.constant.CrmCustomerEnum;
import com.jzy.hio.constant.CrmCustomerStatusEnum;
import com.jzy.hio.crm.dto.CrmCustomerFollowPlanDto;
import com.jzy.hio.crm.mapper.CrmContactMapper;
import com.jzy.hio.crm.mapper.CrmCustomerChangeMapper;
import com.jzy.hio.crm.mapper.CrmCustomerFollowHisMapper;
import com.jzy.hio.crm.mapper.CrmCustomerFollowPlanMapper;
import com.jzy.hio.crm.mapper.CrmCustomerMapper;
import com.jzy.hio.crm.mapper.CrmCustomerOpportunitiesMapper;
import com.jzy.hio.crm.param.CrmCustomerFollowParam;
import com.jzy.hio.crm.param.CrmCustomerFollowPlanParam;
import com.jzy.hio.crm.service.CrmCustomerFollowPlanService;
import com.jzy.hio.crm.utils.CrmCommonInvokeUtil;
import com.jzy.hio.crm.utils.PageResult;
import com.jzy.hio.entity.CrmContact;
import com.jzy.hio.entity.CrmCustomer;
import com.jzy.hio.entity.CrmCustomerChange;
import com.jzy.hio.entity.CrmCustomerFollowHis;
import com.jzy.hio.entity.CrmCustomerFollowPlan;
import com.jzy.hio.entity.CrmCustomerOpportunities;
import com.jzy.hio.exception.HioException;
import com.jzy.hio.utils.StringUtil;

/**
 * 跟进计划
 * @author
 *
 */
@Service
public class CrmCustomerFollowPlanServiceImpl extends BaseServiceImpl<CrmCustomerFollowPlan> implements CrmCustomerFollowPlanService {

	@Autowired
	private CrmCustomerFollowHisMapper crmCustomerFollowHisMapper;
    @Autowired
    private CrmCustomerFollowPlanMapper crmCustomerFollowPlanMapper;

    @Autowired
	private CrmCustomerChangeMapper crmCustomerChangeMapper;
    
    @Autowired
    private CrmCustomerMapper crmCustomerMapper;
    @Autowired
    private CrmContactMapper crmContactMapper;
    @Autowired
    private CrmCustomerOpportunitiesMapper crmCustomerOpportunitiesMapper;
    @Autowired
    private CrmCommonInvokeUtil crmCommonInvokeUtil;

    @Override
    public List<CrmCustomerFollowPlanDto> queryFollowPlan(String userId) {
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Date date = new Date();
        String formatDate = simpleDateFormat.format(date);
        return crmCustomerFollowPlanMapper.queryFollowPlan(userId,formatDate);
    }

    /**
     * 我的本日计划全部
     */
    @Override
    public PageResult queryFollowPlanList(CrmCustomerFollowPlanParam crmCustomerFollowPlanParam) {
		// 排序
		String contactTimeSort = crmCustomerFollowPlanParam.getContactTimeSort();
		String updateDateSort = crmCustomerFollowPlanParam.getUpdateDateSort();
		if (CrmConstant.ASC.equalsIgnoreCase(contactTimeSort) || CrmConstant.DESC.equalsIgnoreCase(contactTimeSort)) {
			contactTimeSort = "p.contact_time " + contactTimeSort + ",";
			crmCustomerFollowPlanParam.setContactTimeSort(contactTimeSort);
		} else {
			crmCustomerFollowPlanParam.setContactTimeSort("");
		}
		if (CrmConstant.ASC.equalsIgnoreCase(updateDateSort) || CrmConstant.DESC.equalsIgnoreCase(updateDateSort)) {
			updateDateSort = "p.update_date " + updateDateSort + ",";
			crmCustomerFollowPlanParam.setUpdateDateSort(updateDateSort);
		} else {
			crmCustomerFollowPlanParam.setUpdateDateSort("");
		}
    	SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
    	Date date = new Date();
    	String formatDate = simpleDateFormat.format(date);
    	crmCustomerFollowPlanParam.setToday(formatDate);
    	List<CrmCustomerFollowPlanDto> planList= crmCustomerFollowPlanMapper.getPage(crmCustomerFollowPlanParam);
    	
    	// 获取跟进人id列表
 		List<String> uids = new ArrayList<>();
 		planList.forEach(o -> {
 			uids.add(o.getCreatePersonId());
 		});
 		
 		// 查询跟进人名称
 		String tendId = getTendId();
 		Map<String, String> unameMap = crmCommonInvokeUtil.getUserName(tendId, uids);
 		// 设置跟进人名称
 		planList.forEach(o -> {
 			if (unameMap.get(o.getCreatePersonId()) == null) {
 				logger.error(o.getCreatePersonId() + "未找到跟进人名称");
 				throw new HioException("跟进计划跟进人未找到");
 			}
 			o.setCreatePersonName(unameMap.get(o.getCreatePersonId()));
 		});

    	int count = crmCustomerFollowPlanMapper.getPageCount(crmCustomerFollowPlanParam);
    	return PageResult.pageResult(crmCustomerFollowPlanParam,count,planList);
    }

    /**
     * 本日计划分页
     */
    @Override
    public PageResult queryPlanList(CrmCustomerFollowPlanParam crmCustomerFollowPlanParam) {
		// 排序
		String contactTimeSort = crmCustomerFollowPlanParam.getContactTimeSort();
		String updateDateSort = crmCustomerFollowPlanParam.getUpdateDateSort();
		if (CrmConstant.ASC.equalsIgnoreCase(contactTimeSort) || CrmConstant.DESC.equalsIgnoreCase(contactTimeSort)) {
			contactTimeSort = "p.contact_time " + contactTimeSort + ",";
			crmCustomerFollowPlanParam.setContactTimeSort(contactTimeSort);
		} else {
			crmCustomerFollowPlanParam.setContactTimeSort("");
		}
		if (CrmConstant.ASC.equalsIgnoreCase(updateDateSort) || CrmConstant.DESC.equalsIgnoreCase(updateDateSort)) {
			updateDateSort = "p.update_date " + updateDateSort + ",";
			crmCustomerFollowPlanParam.setUpdateDateSort(updateDateSort);
		} else {
			crmCustomerFollowPlanParam.setUpdateDateSort("");
		}

        List<CrmCustomerFollowPlanDto> crmCustomerFollowPlanDtos = crmCustomerFollowPlanMapper.queryPlanList(crmCustomerFollowPlanParam);
        // 获取跟进人id列表
 		List<String> uids = new ArrayList<>();
 		crmCustomerFollowPlanDtos.forEach(o -> {
 			uids.add(o.getCreatePersonId());
 		});
 		
 		// 查询跟进人名称
 		String tendId = getTendId();
 		Map<String, String> unameMap = crmCommonInvokeUtil.getUserName(tendId, uids);
 		// 设置跟进人名称
 		crmCustomerFollowPlanDtos.forEach(o -> {
 			if (unameMap.get(o.getCreatePersonId()) == null) {
 				logger.error(o.getCreatePersonId() + "未找到跟进人名称");
 				throw new HioException("跟进计划跟进人未找到");
 			}
 			o.setCreatePersonName(unameMap.get(o.getCreatePersonId()));
 		});
		
       	int count= crmCustomerFollowPlanMapper.PageCount(crmCustomerFollowPlanParam);
        return PageResult.pageResult(crmCustomerFollowPlanParam,count,crmCustomerFollowPlanDtos);
    }

    /**
     * 保存跟进记录、保存跟进计划、修改跟进计划
     */
	@Override
	public boolean saveFollow(CrmCustomerFollowParam follow) {
        String uid = getUserIdOA();
        Date date = new Date();
        
		CrmCustomerFollowHis his = follow.getHis();
		
		// 跟进记录只有新增，id从前端传进来
		if (his != null) {
			if (StringUtils.isBlank(his.getId())) {
				throw new HioException("保存出现错误，请稍后重试");
			}
			CrmCustomer customerFind = crmCustomerMapper.selectByPrimaryKey(his.getCustomerId());

			if (customerFind == null) {
				throw new HioException("未找到客户");
			}

			if (!isRolePermission(BaseConstants.MYSQL_MENU_CODE_CRM_MANAGE)) {
				if (!customerFind.getOwnerPersonId().equals(uid)) {
					throw new HioException("您没有该客户权限");
				}
			}
			String personName = getUserNameOA();
			his.setCreateDate(date);
			his.setCreatePersonId(uid);
			his.setUpdateDate(date);
			his.setUpdatePersonId(uid);
			his.setDelflag(CrmConstant.DEL_FALSE);
			
			his.setCreatePersonName(personName);
			his.setUpdatePersonName(personName);
			crmCustomerFollowHisMapper.insert(his);

			String customerId = his.getCustomerId();
			String opportunityId = his.getOpportunityId();
			String contactId = his.getContactId();
			
			// 添加动态(客户)
			// 更新关联的客户，联系人，商机的最后跟进时间
			if (StringUtil.isNotEmpty(customerId)) {
				String userNameOA = getUserNameOA();
				String format = MessageFormat.format(CrmCustomerEnum.CREATE_FOLLOW.getCode(), userNameOA, his.getContactContent());
				CrmCustomerChange crmCustomerChange = new CrmCustomerChange();
				crmCustomerChange.setChangeContent(format);
				crmCustomerChange.setId(Base.generatePk(CrmCustomerChange.class));
				crmCustomerChange.setCustomerId(customerId);
				crmCustomerChange.setOpportunityId(opportunityId);
				crmCustomerChange.setCreatePersonId(uid);
				crmCustomerChange.setCreateDate(date);
				crmCustomerChange.setUpdateDate(date);
				crmCustomerChange.setCreatePersonName(personName);
				crmCustomerChange.setUpdatePersonName(personName);
				crmCustomerChangeMapper.insert(crmCustomerChange);
				
				if (customerFind != null) {
					CrmCustomer customer = new CrmCustomer();
					customer.setId(customerId);
					customer.setLastContactTime(date);
					// 只能把未跟进改为跟进中，不能覆盖别的状态
					if (customerFind.getStatus().equals(CrmCustomerStatusEnum.NOT_CONTACT.getStatus())) {
						customer.setStatus(CrmCustomerStatusEnum.FOLLOWING.getStatus());
					}
					crmCustomerMapper.updateByPrimaryKeySelective(customer);
				} else {
					throw new HioException("客户不存在，不能添加跟进");
				}
			}
			
			if (StringUtil.isNotEmpty(opportunityId)) {
				CrmCustomerOpportunities Opportunity = new CrmCustomerOpportunities();
				Opportunity.setId(opportunityId);
				Opportunity.setLastContactTime(date);
				crmCustomerOpportunitiesMapper.updateByPrimaryKeySelective(Opportunity);
			}
			
			if (StringUtil.isNotEmpty(contactId)) {
				CrmContact contact = new CrmContact();
				contact.setId(contactId);
				contact.setLastContactTime(date);
				crmContactMapper.updateByPrimaryKeySelective(contact);
			}
			
			
		}

		// 保存或更新跟进计划
		CrmCustomerFollowPlan plan = follow.getPlan();
		if (plan != null) {
			if (!isRolePermission(BaseConstants.MYSQL_MENU_CODE_CRM_MANAGE)) {
				CrmCustomer customerFind = crmCustomerMapper.selectByPrimaryKey(plan.getCustomerId());

				if (customerFind == null) {
					throw new HioException("未找到客户");
				}
				if (!customerFind.getOwnerPersonId().equals(uid)) {
					throw new HioException("您没有该客户权限");
				}
			}

			String id = plan.getId();
			if (StringUtils.isBlank(id)) {
				plan.setId(Base.generatePk(plan.getClass()));
				plan.setCreateDate(date);
				plan.setCreatePersonId(uid);
				plan.setUpdateDate(date);
				plan.setUpdatePersonId(uid);
				plan.setDelflag(CrmConstant.DEL_FALSE);
				crmCustomerFollowPlanMapper.insert(plan);
			} else {
				plan.setUpdateDate(date);
				plan.setUpdatePersonId(uid);
				crmCustomerFollowPlanMapper.updateByPrimaryKeySelective(plan);
			}
		}
		
		return true;
	}


}
