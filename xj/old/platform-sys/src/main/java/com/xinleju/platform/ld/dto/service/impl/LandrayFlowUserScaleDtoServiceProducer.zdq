package com.xinleju.platform.ld.dto.service.impl;

import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.ld.dto.service.LandrayFlowUserScaleDtoServiceCustomer;
import com.xinleju.platform.ld.entity.LandrayFlowUserScale;
import com.xinleju.platform.ld.service.LandrayFlowUserScaleService;
import com.xinleju.platform.tools.data.JacksonUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author admin
 * 
 *
 */
 
public class LandrayFlowUserScaleDtoServiceProducer implements LandrayFlowUserScaleDtoServiceCustomer{
	private static Logger log = Logger.getLogger(LandrayFlowUserScaleDtoServiceProducer.class);
	@Autowired
	private LandrayFlowUserScaleService landrayFlowUserScaleService;

	public String save(String userInfo, String saveJson){
		// TODO Auto-generated method stub
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   LandrayFlowUserScale landrayFlowUserScale=JacksonUtils.fromJson(saveJson, LandrayFlowUserScale.class);
		   landrayFlowUserScaleService.save(landrayFlowUserScale);
		   info.setResult(JacksonUtils.toJson(landrayFlowUserScale));
		   info.setSucess(true);
		   info.setMsg("�������ɹ�!");
		} catch (Exception e) {
		 log.error("�������ʧ��!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("�������ʧ��!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   LandrayFlowUserScale landrayFlowUserScale=JacksonUtils.fromJson(updateJson, LandrayFlowUserScale.class);
			   int result=   landrayFlowUserScaleService.update(landrayFlowUserScale);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("���¶���ɹ�!");
			} catch (Exception e) {
			 log.error("���¶���ʧ��!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("���¶���ʧ��!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   LandrayFlowUserScale landrayFlowUserScale=JacksonUtils.fromJson(deleteJson, LandrayFlowUserScale.class);
			   int result= landrayFlowUserScaleService.deleteObjectById(landrayFlowUserScale.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("ɾ������ɹ�!");
			} catch (Exception e) {
			 log.error("���¶���ʧ��!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("ɾ�����¶���ʧ��!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= landrayFlowUserScaleService.deleteAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("ɾ������ɹ�!");
				}
			} catch (Exception e) {
			 log.error("ɾ������ʧ��!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("ɾ�����¶���ʧ��!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	 {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			LandrayFlowUserScale landrayFlowUserScale=JacksonUtils.fromJson(getJson, LandrayFlowUserScale.class);
			LandrayFlowUserScale result = landrayFlowUserScaleService.getObjectById(landrayFlowUserScale.getId());
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("��ȡ����ɹ�!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("��ȡ����ʧ��!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("��ȡ����ʧ��!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				Page page=landrayFlowUserScaleService.getPage(map, (Integer)map.get("start"),  (Integer)map.get("limit"));
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("��ȡ��ҳ����ɹ�!");
			}else{
				Page page=landrayFlowUserScaleService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("��ȡ��ҳ����ɹ�!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("��ȡ��ҳ����ʧ��!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("��ȡ��ҳ����ʧ��!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				List list=landrayFlowUserScaleService.queryList(map);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("��ȡ�б����ɹ�!");
			}else{
				List list=landrayFlowUserScaleService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("��ȡ�б����ɹ�!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("��ȡ�б����ʧ��!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("��ȡ�б����ʧ��!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   LandrayFlowUserScale landrayFlowUserScale=JacksonUtils.fromJson(deleteJson, LandrayFlowUserScale.class);
			   int result= landrayFlowUserScaleService.deletePseudoObjectById(landrayFlowUserScale.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("ɾ������ɹ�!");
			} catch (Exception e) {
			 log.error("���¶���ʧ��!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("ɾ�����¶���ʧ��!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= landrayFlowUserScaleService.deletePseudoAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("ɾ������ɹ�!");
				}
			} catch (Exception e) {
			 log.error("ɾ������ʧ��!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("ɾ�����¶���ʧ��!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}


}
