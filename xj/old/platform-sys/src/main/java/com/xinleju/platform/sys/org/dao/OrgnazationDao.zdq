package com.xinleju.platform.sys.org.dao;

import java.util.List;
import java.util.Map;

import com.xinleju.platform.base.dao.BaseDao;
import com.xinleju.platform.sys.org.dto.OrgnazationDto;
import com.xinleju.platform.sys.org.dto.OrgnazationNodeDto;
import com.xinleju.platform.sys.org.entity.Orgnazation;

/**
 * @author admin
 *
 */

public interface OrgnazationDao extends BaseDao<String, Orgnazation> {
	
	/**
	 * 获取目录下的一级集团和公司
	 * @param rootId
	 * @return
	 */
	public List<OrgnazationNodeDto> queryOrgListRoot(String rootId)  throws Exception;
	
	/**
	 * 获取目录下的一级集团和公司
	 * @param rootId
	 * @return
	 */
	public List<Orgnazation> queryOrgListRootReturnOrg(String rootId)  throws Exception;
	
	/**
	 * 获取目录下的一级集团和公司
	 * @param rootId
	 * @return
	 */
	public List<Orgnazation> queryOrgListRootReturnOrg(String rootId,Long sort)  throws Exception;
	
	/**
	 * 查询组织结构子节点
	 * @param parentId
	 * @return
	 */
	public List<OrgnazationNodeDto> queryOrgList(String parentId)  throws Exception;
	
	/**
	 * 查询所有组织机构
	 * @return
	 */
	public List<OrgnazationNodeDto> queryAllOrgList(Map<String,Object> map)  throws Exception;
	
	/**
	 * 查询所有组织机构
	 * @return
	 */
	public List<Orgnazation> queryAllOrgListReturnOrg()  throws Exception;
	
	/**
	 * 查询组织结构子节点
	 * @param parentId
	 * @return
	 */
	public List<Orgnazation> queryOrgListReturnOrg(String parentId)  throws Exception;
	
	/**
	 * 查询组织结构子节点
	 * @param parentId
	 * @return
	 */
	public List<Orgnazation> queryOrgListReturnOrg(String parentId,Long sort)  throws Exception;
	/**
	 * 查询组织里面的公司
	 * @param map
	 * @return
	 */
	public List<Map<String, Object>> queryListCompany(Map map);

	
	/**
	 * 根据IDs获取结果集
	 * @param paramater
	 * @return
	 */
	public List<Map<String,String>> queryOrgsByIds(Map map)throws Exception;
	
	/**
	 * 修改全路径
	 * @param paramater
	 * @return
	 */
	public Integer updatePrefix(Map map)throws Exception;
	
	/**
	 * 禁用组织
	 * @param paramater
	 * @return
	 */
	public Integer lockOrg(Map map)throws Exception;
	
	/**
	 * 启用组织
	 * @param paramater
	 * @return
	 */
	public Integer unLockOrg(Map map)throws Exception;
	
	/**
	 * 根据组织机构Id查询以上级别的组织机构（当前用户）
	 * @param paramater
	 * @return
	 * @throws Exception
	 */
	public List<OrgnazationDto> queryAuthOrgListByOrgId(Map<String, Object> paramater)throws Exception;

	/**
	 * @return
	 */
	public List<String> getCompanyOrgId();
	
	/**
	 * 查询组织详情
	 * @param paramater
	 * @return
	 * @throws Exception
	 */
	public OrgnazationDto getOrgById(Map<String, Object> paramater)throws Exception;
	
	/**
	 * 查询用户所有组织信息：所属组织U岗位组织
	 * @param paramater
	 * @return
	 * @throws Exception
	 */
	public List<OrgnazationDto> selectUserAllOrgs(Map<String, Object> paramater)throws Exception;
	
	/**
	 * 查询部门 或项目分期 （包含集团和公司）
	 * @param paramater
	 * @return
	 * @throws Exception
	 */
	public List<Map<String,Object>> getDeptOrBranch(Map<String, Object> paramater)throws Exception;
	
	/**
	 * 查询所有组织
	 * @param paramater
	 * @return
	 * @throws Exception
	 */
	public List<OrgnazationDto> getAllOrgListDto(Map<String, Object> paramater)throws Exception;
	
	/**
	 * 根据ID获取组织机构（可以多个）
	 * @param paramater
	 * @return
	 * @throws Exception
	 */
	public List<OrgnazationDto> getOrgsByIds(Map<String, Object> paramater)throws Exception;
	/**
	 * 获取指定公司的下级组织：
	 * @param paramater
	 * @return
	 * @throws Exception
	 */
	public List<OrgnazationDto> selectChildOrgList(Map<String, Object> paramater)throws Exception;
	/**
	 * 获取指定公司下的分期  
	 * @param paramater
	 * @return
	 * @throws Exception
	 */
	public List<OrgnazationDto> selectChildBranchList(Map<String, Object> paramater)throws Exception;
	/**
	 * 获取指定公司的所有下级公司id 
	 * @param paramater
	 * @return
	 * @throws Exception
	 */
	public String selectChildIds(Map<String, Object> paramater)throws Exception;
	/**
	 * 查询用户岗位对应公司id
	 * @param paramater
	 * @return
	 * @throws Exception
	 */
	public List<String> selectUserPostOrgIds(Map<String, Object> paramater) throws Exception ;
	/**
	 * 获取用户直属组织(集团/公司/部门/项目/分期)
	 * @param paramater
	 * @return
	 * @throws Exception
	 */
	public List<Map<String,Object>> selectUserOrgnazationList(Map<String, Object> paramater) throws Exception ;
	/**
	 * 根据组织id查询组织dto：公司/部门/项目/分期
	 * @param paramater
	 * @return
	 * @throws Exception
	 */
	public List<OrgnazationDto> selectOrgDtoByOrgIds(Map<String, Object> paramater) throws Exception ;

	/**
	 * 查询上级组织
	 * @param groupParam
	 * @return
	 */
	public List<Map<String,Object>> selectParentOrgByOrgId(Map<String, Object> paramater) throws Exception;

	/**
	 * @return
	 */
	public List<Orgnazation> queryListCompanyAndZb() throws Exception;
	/**
	 * @return
	 */
	public List<String> getAuthOrgIds(Map<String, Object> paramater) throws Exception;
	/**
	 * 查询下级组织结构
	 * @return
	 */
	public List<Orgnazation> selectSunOrgByOrgId(Map<String, Object> paramater) throws Exception;
	//获取公司下级组织
	public List<Map<String,Object>> getSubOrgByComId(Map<String, Object> param)throws Exception;
	//获取公司下级分期
	public List<Map<String,Object>> getSubBranchByComId(Map<String, Object> param)throws Exception;
	//获取公司下级用户
	public List<Map<String,Object>> getSubUserByComId(Map<String, Object> param)throws Exception;
	/**
	 * 根据组织ids获取他们的顶级部门和顶级公司
	 * add by gyh 2017-7-14
	 * @param orgIds：多个组织id
	 */
	public List<Map<String,Object>> selectTopDeptAnaTopCom(Map<String, Object> param)throws Exception;
	/**
	 * 查询数据库中code是否已存在
	 * add by gyh 2018-1-12
	 * @param param
	 */
	public List<String> selectDbCodes(Map<String, Object> param)throws Exception;
	/**
	 * 批量插入数据
	 * add by gyh 2018-1-12
	 * @param param
	 */
	public int insertExcelData(Map<String, Object> param)throws Exception;
	public List<Map<String,Object>> selectDirectDeptAnaTopCom(Map<String, Object> param)throws Exception;
	/**
	 * 校验同级编码重复
	 * @param param
	 * @return
	 * @throws Exception
	 */
	public int checkCode(Map<String, Object> param)throws Exception;
}
