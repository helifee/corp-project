package com.xinleju.platform.flow.dto.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.flow.dto.ApprovalList;
import com.xinleju.platform.flow.dto.ApprovalListDto;
import com.xinleju.platform.flow.dto.ApprovalSubmitDto;
import com.xinleju.platform.flow.dto.FlowApproveViewBean;
import com.xinleju.platform.flow.dto.FlowQueryBean;
import com.xinleju.platform.flow.dto.InstanceAcDto;
import com.xinleju.platform.flow.dto.InstanceDto;
import com.xinleju.platform.flow.dto.InstanceTransitionRecordDto;
import com.xinleju.platform.flow.dto.UserDto;
import com.xinleju.platform.flow.dto.service.InstanceDtoServiceCustomer;
import com.xinleju.platform.flow.entity.Instance;
import com.xinleju.platform.flow.exception.FlowException;
import com.xinleju.platform.flow.model.ACUnit;
import com.xinleju.platform.flow.service.BusinessObjectService;
import com.xinleju.platform.flow.service.InstanceAccessibleService;
import com.xinleju.platform.flow.service.InstanceService;
import com.xinleju.platform.sys.res.utils.InvalidCustomException;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * 流程实例服务
 *
 */
public class InstanceDtoServiceProducer implements InstanceDtoServiceCustomer{
	private static Logger log = Logger.getLogger(InstanceDtoServiceProducer.class);
	
	@Autowired
	private InstanceService instanceService;
	
	@Autowired
	private BusinessObjectService businessObjectService;
	
	@Autowired
	private InstanceAccessibleService instanceAccessibleService;
	
	public String save(String userInfo, String saveJson){
		// TODO Auto-generated method stub
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   Instance instance=JacksonUtils.fromJson(saveJson, Instance.class);
		   instanceService.save(instance);
		   info.setResult(JacksonUtils.toJson(instance));
		   info.setSucess(true);
		   info.setMsg("保存对象成功!");
		} catch (Exception e) {
		 log.error("保存对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("保存对象失败!");
		 info.setExceptionMsg(e.getMessage());
		 throw new FlowException(e);
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   Instance instance=JacksonUtils.fromJson(updateJson, Instance.class);
			   int result=   instanceService.update(instance);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 throw new FlowException(e);
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   Instance instance=JacksonUtils.fromJson(deleteJson, Instance.class);
			   int result= instanceService.deleteObjectById(instance.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 throw new FlowException(e);
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= instanceService.deleteAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 throw new FlowException(e);
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	 {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			Instance instance=JacksonUtils.fromJson(getJson, Instance.class);
			Instance	result = instanceService.getObjectById(instance.getId());
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 throw new FlowException(e);
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				Page page=instanceService.getPage(map, (Integer)map.get("start"),  (Integer)map.get("limit"));
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=instanceService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 throw new FlowException(e);
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				List list=instanceService.queryList(map);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=instanceService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 throw new FlowException(e);
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   Instance instance=JacksonUtils.fromJson(deleteJson, Instance.class);
			   int result= instanceService.deletePseudoObjectById(instance.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 throw new FlowException(e);
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= instanceService.deletePseudoAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 throw new FlowException(e);
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String queryApprovalList(String userInfo, String instanceId, String requestSource, String model) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		if(StringUtils.isEmpty(instanceId)) {
			info.setSucess(false);
			info.setMsg("请求参数错误！");
			
		} else {
//			List<ApprovalList> approvalList = instanceService.queryApprovalListNoRecord(instanceId, requestSource, null, model);
			List<ApprovalList> approvalList = instanceService.queryApprovalList(instanceId, requestSource, null,model);
			info.setSucess(true);
			info.setResult(JacksonUtils.toJson(approvalList));
			info.setMsg("查询审批数据成功！");
		}
		return JacksonUtils.toJson(info);
	}
	
	@Override
	public String queryApprovalListExternal(String userInfo, String flCode, String businessId, String appId, String userId) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		ApprovalListDto approvalList = instanceService.queryApprovalListExternal(flCode, businessId, appId, userId);
		if(!CollectionUtils.isEmpty(approvalList.getList())) {
			info.setSucess(true);
			info.setResult(JacksonUtils.toJson(approvalList));
			info.setMsg("查询审批数据成功！");
			
		} else {
			info.setSucess(false);
			info.setMsg("审批数据查询为空");
		}
		return JacksonUtils.toJson(info);
	}
	
	@Override
	public String queryTransferList(String userInfo, String instanceId, String requestSource) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		if(StringUtils.isEmpty(instanceId)) {
			info.setSucess(false);
			info.setMsg("请求参数错误！");
			
		} else {
			List<InstanceTransitionRecordDto> approvalList = instanceService.queryTransferList(instanceId);
			info.setSucess(true);
			info.setResult(JacksonUtils.toJson(approvalList));
			info.setMsg("查询 审批数据成功！");
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String approval(String userInfo, String params) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		ApprovalSubmitDto approvalDto = JacksonUtils.fromJson(params, ApprovalSubmitDto.class);
		try {
			boolean success = instanceService.approval(approvalDto);
			info.setSucess(success);
			info.setMsg("流程审批成功！");
		}catch(Exception e) {
			info.setSucess(false);
			info.setMsg(e.getMessage());
			throw new RuntimeException(e.getMessage(), e);
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String saveAllInstanceData(String userinfo, String paramJson, String hostHeader) {
	   DubboServiceResultInfo info = new DubboServiceResultInfo();
	   try {
		   InstanceDto instanceDto = JacksonUtils.fromJson(paramJson, InstanceDto.class);
		   System.out.println("\n --->> instanceAcDtoList.size="+instanceDto.getAcDtoList().size());
		   String instanceId = instanceService.saveAllInstanceData(instanceDto);
		   Map<String,Object> param=new HashMap<String,Object>();
		   Map<String,Object> res=new HashMap<String,Object>();
		   param.put("instanceId", instanceId);
		   String callbackUrl=businessObjectService.selectCallBackUrlByInstanceId(param);
		   res.put("instanceId", instanceId);
		   res.put("callbackUrl", callbackUrl);
		   info.setResult(JacksonUtils.toJson(res));
		   info.setSucess(true);
		   info.setMsg("保存对象成功!");
		   
		} catch (Exception e) {
		 log.error("保存对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("保存对象失败!");
		 info.setExceptionMsg(e.getMessage());
		 throw new FlowException(e);
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String processChange(String userInfo, String paramJson) {
		   DubboServiceResultInfo info = new DubboServiceResultInfo();
		   Map<String, Object> paramMap = JacksonUtils.fromJson(paramJson, Map.class);
		   try {
			   List<ACUnit> acUnitList = (List<ACUnit>) paramMap.get("approvalList");
			   String fiId = (String) paramMap.get("fiId");
			   String changeType = (String)  paramMap.get("changeType");
			   instanceService.processChange(userInfo, fiId, changeType, acUnitList);
			   info.setSucess(true);
			} catch (Exception e) {
			 info.setSucess(false);
			 info.setExceptionMsg(e.getMessage());
			 throw new FlowException(e);
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String queryListByApprover(String userInfo, String paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map<String, Object> map=JacksonUtils.fromJson(paramater, HashMap.class);
				//List list=instanceService.queryListByApprover(map);
				Page page = instanceService.queryListByApproverParam(map);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 throw new FlowException(e);
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryInstanceBy(String userInfo, String paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map<String, Object> map=JacksonUtils.fromJson(paramater, HashMap.class);
				Page page = instanceService.queryInstanceByPageParam(map);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 throw new FlowException(e);
		}
		return JacksonUtils.toJson(info);
	}
	
	@Override
	public String personalQueryList(String userInfo, String paramater){
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			Map<String, Object> map=JacksonUtils.fromJson(paramater, HashMap.class);
			Page page = instanceService.personalQueryListByPageParam(map);
			info.setResult(JacksonUtils.toJson(page));
		    info.setSucess(true);
		    info.setMsg("获取列表对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
			 throw new FlowException(e);
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryNext(String userInfo, String instanceId, String taskId) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		List<String> nextApprovers = instanceService.queryNext(instanceId, taskId);
		info.setResult(JacksonUtils.toJson(nextApprovers));
		info.setSucess(true);
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryApproverBeReturn(String userInfo, String instanceId) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		List<Map<String, String>> approverDone = instanceService.queryApproverBeReturn(instanceId);
		info.setResult(JacksonUtils.toJson(approverDone));
		info.setSucess(true);
		return JacksonUtils.toJson(info);
	}

	@Override
	public String withDrawFlow(String userInfo, String instanceId) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		String taskStatus = null;
		try {
			taskStatus = instanceService.doWithDrawFlow(instanceId);
			info.setResult(taskStatus);
			info.setSucess(true);
		} catch (Exception e) {
			info.setSucess(false);
			info.setMsg("流程撤回失败！" + e.getMessage());
			throw new FlowException(e);
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String withDrawTask(String userInfo, String instanceId, String taskId) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		String success = null;
		try {
			//检查第二个人是否审批过
			success = instanceService.doWithDrawTask(instanceId, taskId);
			info.setResult(success);
			info.setSucess(true);
			
		} catch (Exception e) {
			info.setSucess(false);
			info.setMsg("撤回任务失败！" + e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String finishApproval(String userInfo, String instanceId) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			boolean success = instanceService.doFinishApproval(instanceId);
			info.setSucess(success);
			info.setMsg("管理员审结流程成功！");
		} catch(Exception e) {
			info.setSucess(false);
			info.setMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String skipCurrentApprover(String userInfo, String instanceId) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			boolean success = instanceService.doSkipCurrentApprover(instanceId);
			info.setSucess(success);
			info.setMsg("管理员执行跳过当前审批人成功！");
		} catch(Exception e) {
			info.setSucess(false);
			info.setMsg("管理员执行跳过当前审批人失败！");
//			throw new FlowException(e);
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String flowRestart(String userInfo, String instanceId) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			boolean success = instanceService.doFlowRestart(instanceId);
			info.setSucess(success);
			info.setMsg("管理员执行流程放行成功！");
		} catch(Exception e) {
			info.setSucess(false);
			info.setMsg("管理员执行流程放行失败！");
			throw new FlowException(e);
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String cancelInstance(String userInfo, String instanceId) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			info = instanceService.doCancelInstance(instanceId);
//			info.setSucess(success);
//			info.setMsg("管理员执行流程作废成功！");
		} catch(Exception e) {
			info.setSucess(false);
			info.setMsg("管理员执行流程作废失败！");
			throw new FlowException(e);
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String passAndRead(String userInfo, String instanceId, String userJson) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		List<UserDto> userList = JacksonUtils.fromJson(userJson, ArrayList.class, UserDto.class);
		try {
			boolean success = instanceService.doPassAndRead(instanceId, userList);
			info.setSucess(success);
			info.setMsg("管理员执行流程传阅成功！");
		} catch(Exception e) {
			info.setSucess(false);
			info.setMsg("管理员执行流程传阅失败！");
			throw new FlowException(e);
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String updateReader(String userInfo, String type, String instanceId, String userJson) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		List<UserDto> userList = JacksonUtils.fromJson(userJson, ArrayList.class, UserDto.class);
		try {
			boolean success = instanceAccessibleService.doUpdateReader(type, instanceId, userList);
			info.setSucess(success);
			info.setMsg("管理员修改可阅人成功！");
		} catch(Exception e) {
			info.setSucess(false);
			info.setMsg("管理员修改可阅人失败！");
			throw new FlowException(e);
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String remind(String userInfo, String instanceId) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			boolean success = instanceService.doRemind(instanceId);
			info.setSucess(success);
			info.setMsg("流程催办成功！");
		} catch(Exception e) {
			info.setSucess(false);
			info.setMsg("流程催办失败！");
			throw new FlowException(e);
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String adjustAc(String userInfo, String approvalList) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		List<ApprovalList> list = JacksonUtils.fromJson(approvalList, ArrayList.class, ApprovalList.class);
		try {
			boolean success = instanceService.doAdjustAc(list);
			info.setSucess(success);
			info.setMsg("调整环节成功！");
		} catch(Exception e) {
			info.setSucess(false);
			info.setMsg("调整环节失败！");
			throw new FlowException(e);
		}
		return JacksonUtils.toJson(info);
	}
	
	@Override
	public String createAc(String userInfo, String instanceAcDtoJson) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		InstanceAcDto instanceAcDto = JacksonUtils.fromJson(instanceAcDtoJson, InstanceAcDto.class);
		try {
			List<ApprovalList> approvalLists = instanceService.doCreateAc(instanceAcDto);
			info.setSucess(true);
			info.setResult(JacksonUtils.toJson(approvalLists));
			info.setMsg("创建环节成功！");
		} catch (Exception e) {
			info.setSucess(false);
			info.setMsg("创建环节失败！");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String updateApprover(String userInfo, String approvalList) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		List<ApprovalList> list = JacksonUtils.fromJson(approvalList, ArrayList.class, ApprovalList.class);
		try {
			boolean success = instanceService.doUpdateApprover(list);
			info.setSucess(success);
			info.setMsg("修改审批人成功！");
		} catch(Exception e) {
			info.setSucess(false);
			info.setMsg("修改审批人失败！");
			throw new FlowException(e);
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String updateApprovalComments(String userInfo, String approvalList) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		List<ApprovalList> list = JacksonUtils.fromJson(approvalList, ArrayList.class, ApprovalList.class);
		try {
			boolean success = instanceService.doUpdateApprovalComments(list);
			info.setSucess(success);
			info.setMsg("修改审批意见成功！");
		} catch(Exception e) {
			info.setSucess(false);
			info.setMsg("修改审批意见失败！");
			throw new FlowException(e);
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String collection(String userInfo, String instanceId) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			boolean success = instanceService.collection(instanceId);
			info.setSucess(success);
			info.setMsg("流程收藏成功！");
		} catch(Exception e) {
			info.setSucess(false);
			info.setMsg("流程收藏失败！");
			throw new FlowException(e);
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getRelateInstances(String userInfo, String instanceId) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			List<InstanceDto> instances = instanceService.getRelateInstances(instanceId);
			info.setSucess(true);
			info.setResult(JacksonUtils.toJson(instances));
			info.setMsg("查询关联流程成功！");
		} catch(Exception e) {
			info.setSucess(false);
			info.setMsg("查询关联流程失败！");
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String scanOverdueAc(String userInfo) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			String handleResult = instanceService.scanOverdueAc();
			info.setSucess(true);
			info.setResult(handleResult);
			info.setMsg("扫描逾期流程环节成功！");
		} catch(Exception e) {
			info.setSucess(false);
			info.setMsg("扫描逾期流程环节失败！");
		}
		return JacksonUtils.toJson(info);
	}
	/**
	 * 获取节点审批类型
	 * add by gyh 2017/7/28
	 * @param userInfo
	 * @param param
	 * @return
	 */
	@Override
	public String queryApprovalTypeId(String userInfo, String param) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		try {
			Map<String,Object> map=JacksonUtils.fromJson(param, HashMap.class);
			if(map.get("instanceId")==null||StringUtils.isBlank(map.get("instanceId").toString())){
				throw new InvalidCustomException("实例id不可为空");
			}
			if(map.get("taskId")==null||StringUtils.isBlank(map.get("taskId").toString())){
				throw new InvalidCustomException("taskId不可为空");
			}
			String typeId = instanceService.queryApprovalTypeId(map);
			info.setSucess(true);
			info.setResult(typeId);
			info.setMsg("获取当前节点审批类型成功！");
		} catch(Exception e) {
			info.setSucess(false);
			info.setMsg("获取当前节点审批类型失败！");
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String flowView(String userInfo, String params) {
		DubboServiceResultInfo info = new DubboServiceResultInfo();
		FlowQueryBean queryBean = JacksonUtils.fromJson(params, FlowQueryBean.class);
		try {
			FlowApproveViewBean result = instanceService.flowView(queryBean);
			info.setSucess(true);
			info.setResult(JacksonUtils.toJson(result));
			if("BusinessType".equals(result.getInstanceName())){
				info.setSucess(false);
				info.setCode("BusinessType");
			}
		} catch(Exception e) {
			info.setSucess(false);
			info.setMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String validateInstanceDataAuth(String userInfo,String params){
		DubboServiceResultInfo info = new DubboServiceResultInfo();

		try {
			Map<String,Object> paramMap = JacksonUtils.fromJson(params,Map.class);
			String instanceId = (String) paramMap.get("instanceId");
			Boolean result = instanceService.validateInstanceDataAuth(paramMap,userInfo);
			info.setSucess(true);
			info.setResult(JacksonUtils.toJson(result));
		} catch(Exception e) {
			info.setSucess(false);
			info.setMsg(e.getMessage());
		}

		return JacksonUtils.toJson(info);
	}

	@Override
	public String getInstanceGraph(String userInfo, String params) {

		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			Map paramMap = JacksonUtils.fromJson(params, Map.class);
			InstanceDto	instanceDto = instanceService.getInstanceGraph((String) paramMap.get("instanceId"));
			info.setResult(JacksonUtils.toJson(instanceDto));
			info.setSucess(true);
			info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			log.error("获取对象失败!"+e.getMessage());
			info.setSucess(false);
			info.setMsg("获取对象失败!");
			info.setExceptionMsg(e.getMessage());
			throw new FlowException(e);
		}
		return JacksonUtils.toJson(info);
	}
	
	@Override
	public void scanExceptionFlow(String userInfo,String params) {
		instanceService.scanExceptionFlow(userInfo);
	}

	@Override
	public String saveModifyInstance(String userInfo, String saveJson) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			Map<String,Object> instanceMap = JacksonUtils.fromJson(saveJson, Map.class);
			instanceService.saveModifyInstance(instanceMap);
			info.setResult(JacksonUtils.toJson(instanceMap));
			info.setSucess(true);
			info.setMsg("保存对象成功!");
		} catch (Exception e) {
			log.error("保存对象失败!"+e.getMessage());
			info.setSucess(false);
			info.setMsg("保存对象失败!");
			info.setExceptionMsg(e.getMessage());
			throw new FlowException(e);
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String scanOverdueAcTask(String userInfo,String params) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			//Map<String,Object> instanceMap = JacksonUtils.fromJson(saveJson, Map.class);
			Map<String,Object> scanResult = instanceService.scanOverdueAcTask();
			info.setResult(JacksonUtils.toJson(scanResult));
			info.setSucess(true);
			info.setMsg("保存对象成功!");
		} catch (Exception e) {
			log.error("保存对象失败!"+e.getMessage());
			info.setSucess(false);
			info.setMsg("保存对象失败!");
			info.setExceptionMsg(e.getMessage());
			throw new FlowException(e);
		}
		return JacksonUtils.toJson(info);
	}
}
