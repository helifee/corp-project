package com.xinleju.platform.flow.dto.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.xinleju.platform.base.utils.*;
import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.platform.flow.dto.AcDto;
import com.xinleju.platform.flow.dto.service.AcDtoServiceCustomer;
import com.xinleju.platform.flow.entity.Ac;
import com.xinleju.platform.flow.entity.AcParticipant;
import com.xinleju.platform.flow.entity.ApproveType;
import com.xinleju.platform.flow.entity.Participant;
import com.xinleju.platform.flow.entity.SortedActor;
import com.xinleju.platform.flow.service.AcService;
import com.xinleju.platform.flow.service.ApproveTypeService;
import com.xinleju.platform.flow.service.ParticipantService;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * @author admin
 * 
 *
 */
 
public class AcDtoServiceProducer implements AcDtoServiceCustomer{
	private static Logger log = Logger.getLogger(AcDtoServiceProducer.class);
	@Autowired
	private AcService acService;
	
	@Autowired
	private ApproveTypeService approveTypeService;
	@Autowired
	private ParticipantService participantService;
	
	public String save(String userInfo, String saveJson){
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   AcParticipant acParticipant=JacksonUtils.fromJson(saveJson, AcParticipant.class);
		   Ac ac = new Ac();
		   BeanUtils.copyProperties(acParticipant, ac);
		   //第一步:先保存ac的form表单数据
		   String acId = ac.getId();
		   if("-1".equals(acId)){
			   ac.setId(IDGenerator.getUUID());
			   ac.setDelflag(false);
		   }
		   acService.save(ac);
		   
		   //第二步：先删除与ac相关的流程参与者pt_flow_participant的数据，然后在插入相关的数据
		   /*if(!"-1".equals(acId)){//新增类型的不需要删除
			   //participantService.deleteParticipantByAcId(acId);
		   }*/
		   List<Participant> participantList = acParticipant.getParticipantList();
		   List<Participant> ccPersonList = acParticipant.getCcPersonList();
		   List<Participant> personList = new ArrayList<Participant>();
		   if(participantList!=null && !participantList.isEmpty()){
			   personList.addAll(participantList);
		   }
		   if(ccPersonList!=null && !ccPersonList.isEmpty()){
			   personList.addAll(ccPersonList);
		   }
		   System.out.println("\n\n---------------------personList.size()="+personList.size());
		   if(personList.size()>=1){
			   for(Participant item : personList){
				   item.setAcId(ac.getId());
				   item.setId(IDGenerator.getUUID());
				   item.setDelflag(false);
			   }
			   participantService.saveBatch(personList);
		   }
		   System.out.println("AcDtoServiceProducer save() is done....");
		   
		   info.setResult(JacksonUtils.toJson(ac));
		   info.setSucess(true);
		   info.setMsg("保存对象成功!");
		} catch (Exception e) {
		 log.error("保存对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("保存对象失败!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   Ac ac=JacksonUtils.fromJson(updateJson, Ac.class);
			   int result= acService.update(ac);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   Ac ac=JacksonUtils.fromJson(deleteJson, Ac.class);
			   int result= acService.deleteObjectById(ac.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= acService.deleteAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	 {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			Ac ac=JacksonUtils.fromJson(getJson, Ac.class);
			Ac	result = acService.getObjectById(ac.getId());
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	/**
	 * 这里需要查询出审批类型名称, 参与人、抄送人和流转信息等字段的信息
	 */
	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try { 
			Page page = null;
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				page=acService.getPage(map, (Integer)map.get("start"),  (Integer)map.get("limit"));
			}else{
				page=acService.getPage(new HashMap(), null, null);
			}
			List<Ac> list = page.getList();
			Map<String, String> typeMap = getApproveTypeMap();
			List<AcDto> dataList = new ArrayList<AcDto>();
			Map<String, Object> paramMap = new HashMap<String, Object>();
			String flId = "";//待设置
			paramMap.put("flId", flId);
			Map<String, String> participantMap = getParticipantMap(paramMap);
			for(Ac ac : list){
				AcDto acDto = new AcDto();
				BeanUtils.copyProperties(ac, acDto);
				acDto.setParticipant(participantMap.get(ac.getFlId()+"_"+ac.getId()+"_1"));
				acDto.setCcPerson(participantMap.get(ac.getFlId()+"_"+ac.getId()+"_2"));
				dataList.add(acDto);
			}
			page.setList(dataList);
			info.setResult(JacksonUtils.toJson(page));
		    info.setSucess(true);
		    info.setMsg("获取分页对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	
	@Override
	public String queryList(String userInfo, String paramater){
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			List<Ac> list;
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				list = acService.queryList(map);
			}else{
				list = acService.queryList(null);
			}
			
			info.setResult(JacksonUtils.toJson(list));
		    info.setSucess(true);
		    info.setMsg("获取列表对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
	
	public Map<String, String> getApproveTypeMap() throws Exception{
		List<ApproveType> typeList = approveTypeService.queryList(null);
		Map<String, String> typeMap = new HashMap<String, String>();
		for(ApproveType type : typeList){
			typeMap.put(type.getId(), type.getName());
		}
		return typeMap;
	}
	
	public Map<String, String> getParticipantMap(Map<String, Object>paramater) throws Exception{
		//第一步: 根据flId获取参与人或抄送人的列表
		//支持排序的设置参数
		paramater.put("sidx", "sort");
		paramater.put("sord", "asc");
		List<Participant> itemList = participantService.queryList(paramater);
		//第二步: 根据flId+acId+type为key,进行分组，存储在tempMap对象中
		Map<String, List<SortedActor>> tempMap = new HashMap<String, List<SortedActor>>();
		for(Participant item : itemList){
			SortedActor actor = new SortedActor();
			BeanUtils.copyProperties(item, actor);
			String key = actor.getFlId()+"_"+actor.getAcId()+"_"+actor.getType();
			List<SortedActor> list = tempMap.get(key);
			if(list == null || list.isEmpty()){
				list = new ArrayList<SortedActor>();
			}
			list.add(actor);
			tempMap.put(key, list);
		}
		//第三步: 对tempMap的数据再次进行加工(List中的元素进行排序, 将排序号的文字转换为对应的文字显示)
		Map<String, String> textMap = new HashMap<String, String>();
		for (Map.Entry<String, List<SortedActor>> entry : tempMap.entrySet()) {
			String keyText = entry.getKey();
			List<SortedActor> valueList = entry.getValue();
			Collections.sort(valueList);//SortedActor默认排序（用自带的compareTo方法）后
			String dataText = getDataTextFromList(valueList);
			textMap.put(keyText, dataText);
		}
		return textMap;
	}

	private String getDataTextFromList(List<SortedActor> valueList) {
		StringBuffer sb = new StringBuffer("");
		for(SortedActor actor : valueList){
			String text = getSortedActorShowText(actor);
			sb.append(text).append("\n");
		}
		return sb.toString();
	}

	public String getSortedActorShowText(SortedActor item){
		String actorName = item.getParticipantId();
		String participantScope = item.getParticipantScope();
		if("11".equals(participantScope)){
    		return actorName+ "(人员)";
    	}else if("12".equals(participantScope)){
    		return actorName + "(表单人员)";
    	}else if("21".equals(participantScope)){
    		return actorName + "(岗位)";
    	}else if("22".equals(participantScope)){
    		return actorName + "(表单岗位)";
    		
    	}else if("31".equals(participantScope)){
    		return actorName + "/本集团(角色)";
    	}else if("32".equals(participantScope)){
    		return actorName + "/本公司(角色)";
    	}else if("33".equals(participantScope)){
    		return actorName + "/本部门(角色)";
    	}else if("34".equals(participantScope)){
    		return actorName + "/本项目(角色)";
    	}else if("34".equals(participantScope)){
    		return actorName + "/本分期(角色)";
    	}else if("36".equals(participantScope)){
    		return actorName+"/指定组织/"+item.getParamValue() + "(角色)";
    	}else if("37".equals(participantScope)){
    		return actorName+"/表单组织/"+item.getParamValue() + "(角色)";
    		
    	}else if("41".equals(participantScope)){
    		return  "发起人直接领导(相对参与人)";
    	}else if("42".equals(participantScope)){
    		return "发起人顶级部门领导(相对参与人)";
    	}else if("43".equals(participantScope)){
    		return  "上一环节审批人直接领导(相对参与人)";
    	}else if("44".equals(participantScope)){
    		return "上一环节审批人顶级部门领导(相对参与人)";
    	}
		return "N/A";
	}
	
	@Override
	public String getCount(String userInfo, String paramater)  {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   Ac ac=JacksonUtils.fromJson(deleteJson, Ac.class);
			   int result= acService.deletePseudoObjectById(ac.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= acService.deletePseudoAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String queryModifyAcListByPage(String userInfo, String paramJson) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			Page page = null;
			if(!StringUtils.isNotBlank(paramJson)){
				info.setSucess(false);
				info.setMsg("获取分页对象参数不能为空!");
				return  JacksonUtils.toJson(info);
			}
			Map map=JacksonUtils.fromJson(paramJson, HashMap.class);
			page=acService.queryModifyAcListByPage(map);
			info.setResult(JacksonUtils.toJson(page));
			info.setSucess(true);
			info.setMsg("获取分页对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			log.error("获取分页对象失败!"+e.getMessage());
			info.setSucess(false);
			info.setMsg("获取分页对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String batchUpdateAcAttr(String userInfo, String paramJson) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			SecurityUserBeanInfo securityUserBeanInfo = JacksonUtils.fromJson(userInfo,SecurityUserBeanInfo.class);
			SecurityUserDto securityUserDto = securityUserBeanInfo.getSecurityUserDto();
			Map<String,Object> updateAttrMap = JacksonUtils.fromJson(paramJson, Map.class);
			Map<String,Object> updatePersonInfo = new HashMap<String,Object>();
			updatePersonInfo.put("updatePersonId",securityUserDto.getId());
			updatePersonInfo.put("updatePersonName",securityUserDto.getRealName());
			updateAttrMap.put("updatePersonInfo",updatePersonInfo);

			acService.batchUpdateAcAttr(updateAttrMap);

			info.setResult(JacksonUtils.toJson(updateAttrMap));
			info.setSucess(true);
			info.setMsg("保存对象成功!");
		} catch (Exception e) {
			log.error("保存对象失败!"+e.getMessage());
			info.setSucess(false);
			info.setMsg("保存对象失败!");
			info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
}
