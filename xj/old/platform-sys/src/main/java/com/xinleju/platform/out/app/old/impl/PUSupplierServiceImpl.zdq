package com.xinleju.platform.out.app.old.impl;

import com.xinleju.erp.data.cache.api.PUSupplierService;
import com.xinleju.erp.data.cache.dto.SupplierAccountDTO;
import com.xinleju.erp.data.cache.dto.SupplierCategoryDTO;
import com.xinleju.erp.data.cache.dto.SupplierInfoDTO;
import com.xinleju.erp.flow.flowutils.bean.DebugInfo;
import com.xinleju.erp.flow.flowutils.bean.FlowResult;
import com.xinleju.platform.base.utils.ErrorInfoCode;
import com.xinleju.platform.base.utils.IDGenerator;
import com.xinleju.platform.utils.WhiteIpUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

public class PUSupplierServiceImpl implements PUSupplierService {

	@Autowired
	private JdbcTemplate jdbcTemplate;

	SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd H:m:s.SSS");

	@Override
	public FlowResult<String> saveSupplierCategoryDTO(SupplierCategoryDTO supplierCategoryDTO) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public FlowResult<Boolean> deleteSupplierCategoryDTO(String supplierCategoryId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public FlowResult<Boolean> deleteSupplierCategoryDTOs(String[] supplierCategoryIds) {
		// TODO Auto-generated method stub
		return null;
	}

	/**
	 * 保存供方基本信息
	 * 
	 * @param supplierInfoDTO
	 * @return
	 */
	@Override
	public FlowResult<String> saveSupplierInfoDTO(SupplierInfoDTO supplierInfoDTO) {
		FlowResult<String> result = new FlowResult<>();
		//白名单拦截ip , add by gyh 20180130
		boolean checkIp = WhiteIpUtils.checkDubboMethod();
		if(!checkIp){
			result.setSuccess(false);
			DebugInfo info = new DebugInfo();
			info.addErrDesc(String.format(ErrorInfoCode.WRONG_WHITE_IP.getName(),WhiteIpUtils.getIpAddress()));
			result.setDebugInfo(info);
			return result;
		}
		String status = "";
		String id = supplierInfoDTO.getId();
		if(StringUtils.isBlank(id)){
			id = IDGenerator.getUUID();
		}
		String name = supplierInfoDTO.getName();
		String code = supplierInfoDTO.getCode();
		String companyId = supplierInfoDTO.getCompanyIds();
		String provinceId = supplierInfoDTO.getProvince();
		String cityId = supplierInfoDTO.getCity();
		String representative = supplierInfoDTO.getLegalName();
		String address = supplierInfoDTO.getAddress();
		String work_phone = supplierInfoDTO.getPhoneNum();
		String registration_date = format.format(supplierInfoDTO.getRegisterDate());
		String license = supplierInfoDTO.getRegisterNum();
		String phone = supplierInfoDTO.getContactNum();
		String relation_person = supplierInfoDTO.getContactName();
		String remark = supplierInfoDTO.getStatement();
		// if(supplierInfoDTO!=null){
		// supplierInfoDTO.setSourceFrom("ZB");
		// }
		// //等级默认合格
		// if(supplierInfoDTO!=null&&supplierInfoDTO.getDegreeId()==null){
		// supplierInfoDTO.setDegreeId("4");
		// }
		// 状态默认启用
		if (supplierInfoDTO != null && supplierInfoDTO.getStatus() == null) {
			status = "1";
		}
		//查询是否存在
		String sqlString = "select * from pt_sys_base_supplier where id=" + id;
		RowMapper<SupplierInfoDTO> rowMapper = new BeanPropertyRowMapper<SupplierInfoDTO>(SupplierInfoDTO.class);
		List<SupplierInfoDTO> list = jdbcTemplate.query(sqlString, rowMapper);
		//如果存在就更新，否则新增。
		if (!list.isEmpty() && list.size() > 0) {
			String sql = "update pt_sys_base_supplier set name=" + name + " code=" + code + " STATUS=" + status + " company_id=" + companyId + " province_id=" + provinceId + " cityId=" + cityId + " representative=" + representative + " address=" + address + " work_phone=" + work_phone
					+ " registration_date=" + registration_date + " license=" + license + " phone=" + phone + " relation_person=" + relation_person + " remark=" + remark + " where id=" + id;
			jdbcTemplate.update(sql);
		}
		else {
			String sql = "insert into pt_sys_base_supplier " + "(id,name,code,STATUS,company_id,province_id,city_id,representative," + "address,work_phone,registration_date,license,phone,relation_person,remark) " + "VALUES " + "('" + id + "','" + name + "','" + code + "','" + status + "','"
					+ companyId + "'," + "'" + provinceId + "','" + cityId + "','" + representative + "'," + "'" + address + "','" + work_phone + "','" + registration_date + "','" + license + "','" + phone + "','" + relation_person + "','" + remark + "')";
		   jdbcTemplate.update(sql);
		}
		result.setResult(id);
		return result;
	}

	@Override
	public FlowResult<Boolean> deleteSupplierInfoDTO(String supplierInfoId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public FlowResult<Boolean> deleteSupplierInfoDTOs(String[] supplierInfoIds) {
		// TODO Auto-generated method stub
		return null;
	}

	/**
	 * 保存供方信息账户信息
	 * 
	 * @param supplierAccountDTODTOList
	 * @return
	 */
	@Override
	public FlowResult<List<String>> saveSupplierAccountDTO(List<SupplierAccountDTO> supplierAccountDTODTOList) {
		FlowResult<List<String>> result = new FlowResult<>();
		//白名单拦截ip , add by gyh 20180130
		boolean checkIp = WhiteIpUtils.checkDubboMethod();
		if(!checkIp){
			result.setSuccess(false);
			DebugInfo info = new DebugInfo();
			info.addErrDesc(String.format(ErrorInfoCode.WRONG_WHITE_IP.getName(),WhiteIpUtils.getIpAddress()));
			result.setDebugInfo(info);
			return result;
		}
		List<String> idList = new ArrayList<String>();
		for (SupplierAccountDTO supplierAccountDTO : supplierAccountDTODTOList) {
			String id = IDGenerator.getUUID();
			String supplierId = supplierAccountDTO.getOwnerId();
			String bankName = supplierAccountDTO.getBankName();
			String bankCode = supplierAccountDTO.getAccount();
			String provinceId = supplierAccountDTO.getProvince();
			String cityId = supplierAccountDTO.getCity();
			String address = supplierAccountDTO.getAddress();
			String sqlString="select * from  pt_sys_base_supplier_accont where id="+supplierAccountDTO.getId();
			RowMapper<SupplierAccountDTO> rowMapper = new BeanPropertyRowMapper<SupplierAccountDTO>(SupplierAccountDTO.class);
			List<SupplierAccountDTO> list = jdbcTemplate.query(sqlString, rowMapper);
			if (!list.isEmpty() && list.size() > 0) {
				idList.add(supplierAccountDTO.getId());
				String sql="update  pt_sys_base_supplier_accont set  supplier_id="+supplierId+" bank_name="+bankName+" bank_code="+bankCode+" province_id="+provinceId+" citd="+cityId+" address="+address;
				jdbcTemplate.update(sql);
           }else{
			String sql = "insert into pt_sys_base_supplier_accont " + "(id,supplier_id,bank_name,bank_code,province_id,city_id,address) " + "VALUES " + "('" + id + "','" + supplierId + "','" + bankName + "','" + bankCode + "','" + provinceId + "','" + cityId + "'," + "'" + address + "')";
			int i = jdbcTemplate.update(sql);
			idList.add(id);
           }
		}

		result.setResult(idList);
		return result;
	}

	@Override
	public FlowResult<Boolean> deleteSupplierAccountDTO(String supplierAccountId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public FlowResult<Boolean> deleteSupplierAccountDTOs(String[] supplierAccountIds) {
		// TODO Auto-generated method stub
		return null;
	}

}
