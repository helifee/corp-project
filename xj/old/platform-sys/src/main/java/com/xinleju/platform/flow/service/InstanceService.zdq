package com.xinleju.platform.flow.service;

import java.util.List;
import java.util.Map;

import com.xinleju.platform.base.service.BaseService;
import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.flow.dao.InstanceDao;
import com.xinleju.platform.flow.dao.InstancePostDao;
import com.xinleju.platform.flow.dao.SysNoticeMsgTempDao;
import com.xinleju.platform.flow.dto.AcDto;
import com.xinleju.platform.flow.dto.ApprovalList;
import com.xinleju.platform.flow.dto.ApprovalListDto;
import com.xinleju.platform.flow.dto.ApprovalSubmitDto;
import com.xinleju.platform.flow.dto.FlowApproveViewBean;
import com.xinleju.platform.flow.dto.FlowQueryBean;
import com.xinleju.platform.flow.dto.InstanceAcDto;
import com.xinleju.platform.flow.dto.InstanceDto;
import com.xinleju.platform.flow.dto.InstanceTransitionRecordDto;
import com.xinleju.platform.flow.dto.MobileApproveDto;
import com.xinleju.platform.flow.dto.UserDto;
import com.xinleju.platform.flow.entity.Instance;
import com.xinleju.platform.flow.model.ACUnit;
import com.xinleju.platform.flow.model.InstanceUnit;
import com.xinleju.platform.sys.org.dto.FlowAcPostDto;
import com.xinleju.platform.univ.search.dto.service.SearchIndexDtoServiceCustomer;

/**
 * 流程实例接口
 */
public interface InstanceService extends  BaseService <String,Instance>{

	/**
	 * 根据流程模板Id查询流程实例
	 * @param flId : 流程模板Id
	 * @param businessId ： 业务单据ID
	 * @return
	 */
	public List<Instance> queryInstanceBy(String flId, String businessId);
	
	/**
	 * 根据提交的实例化参数, 实现模板和环节参与人的相关数据的拷贝和保存
	 * 未置启动状态
	 * 
	 * @param instanceDto
	 * @return
	 * @throws Exception
	 */
	public String saveAllInstanceData(InstanceDto instanceDto) throws Exception;
	/**
	 * 旧的移动端考勤系统
	 * @param instanceDto
	 * @return
	 * @throws Exception
	 */
	public String saveAllInstanceDataForMobile(InstanceDto instanceDto) throws Exception;
	
	/**
	 * 查询审批数据
	 * 
	 * @param instanceId:流程实例ID
	 * @param requestSource：查询请求来源
	 * @param status: 3:已完成数据 null:全部数据
	 * 
	 * @return
	 */
	public List<ApprovalList> queryApprovalList(String instanceId, String requestSource, String status, String model);
	public List<ApprovalList> queryApprovalListNoRecord(String instanceId, String requestSource, String status, String model);
	
	/**
	 * 外部系统查询审批记录
	 * 
	 * @param flCode
	 * @param businessId
	 * @param appId
	 * @param userId
	 * @return
	 */
	public ApprovalListDto queryApprovalListExternal(String flCode, String businessId, String appId, String userId);

	/**
	 * 流程审批处理
	 * 
	 * @param approvalDto
	 * @return
	 * @throws Exception 
	 */
	public boolean approval(ApprovalSubmitDto approvalDto) throws Exception;

	/**
	 * 流程路径变更处理
	 * 
	 * @param userInfo：用户信息
	 * @param fiId：实例ID
	 * @param changeType：路径变更类型
	 * @param acUnitList：整个审批列表
	 */
	public boolean processChange(String userInfo, String fiId, String changeType, List<ACUnit> acUnitList);

	public Page queryInstanceByPageParam(Map<String, Object> map);

	//public List<InstanceDto> personalQueryList(Map<String, String> map);
	public Page personalQueryListByPageParam(Map<String, Object> map);

	/**
	 * 查询指定流程实例的当前用户的下一环节
	 * 
	 * @param instanceId
	 * @param taskId
	 * @return
	 */
	public List<String> queryNext(String instanceId, String taskId);

	/**
	 * 查询已审批人
	 * 
	 * @param instanceId
	 * @param taskId
	 * @return
	 */
	public List<Map<String, String>> queryApproverBeReturn(String instanceId);

	/**
	 * 撤回流程
	 * 
	 * @param instanceId
	 * @return
	 * @throws Exception 
	 */
	public String doWithDrawFlow(String instanceId) throws Exception;

	/**
	 * 撤回任务
	 * 
	 * @param instanceId
	 * @param taskId 
	 * @return
	 * @throws Exception 
	 */
	public String doWithDrawTask(String instanceId, String taskId) throws Exception;

	/**
	 * 管理员审结流程
	 * 
	 * @param instanceId
	 * @return
	 * @throws Exception 
	 */
	public boolean doFinishApproval(String instanceId) throws Exception;

	/**
	 * 管理员功能：跳过当前审批人
	 * 
	 * @param instanceId
	 * @return
	 * @throws Exception 
	 */
	public boolean doSkipCurrentApprover(String instanceId) throws Exception;

	/**
	 * 管理员功能：流程放行，即挂 起的流程重新开始接着执行
	 * 
	 * @param instanceId
	 * @return
	 * @throws Exception 
	 */
	public boolean doFlowRestart(String instanceId) throws Exception;

	/**
	 * 管理员功能：流程作废
	 * 
	 * @param instanceId
	 * @return
	 * @throws Exception 
	 */
	public DubboServiceResultInfo doCancelInstance(String instanceId) throws Exception;

	/**
	 * 流程传阅
	 * 
	 * @param instanceId
	 * @param userList 
	 * @return
	 * @throws Exception 
	 */
	public boolean doPassAndRead(String instanceId, List<UserDto> userList) throws Exception;

	/**
	 * 流程催 办
	 * @param instanceId
	 * @return
	 * @throws Exception 
	 */
	public boolean doRemind(String instanceId) throws Exception;

	/**
	 * 调整环节
	 * 
	 * @param list
	 * @return
	 * @throws Exception 
	 */
	public boolean doAdjustAc(List<ApprovalList> list) throws Exception;
	
	/**
	 * 调整环节 -> 创建环节
	 * 
	 * @param acDto
	 * @return
	 * @throws Exception 
	 */
	public List<ApprovalList> doCreateAc(InstanceAcDto instanceAcDto) throws Exception;

	/**
	 * 修改审批人
	 * 
	 * @param list
	 * @return
	 * @throws Exception 
	 */
	public boolean doUpdateApprover(List<ApprovalList> list) throws Exception;

	/**
	 * 修改审批意见
	 * 
	 * @param list
	 * @return
	 */
	public boolean doUpdateApprovalComments(List<ApprovalList> list);

	/**
	 * 流程收藏
	 * 
	 * @param instanceId
	 * @return
	 * @throws Exception 
	 */
	public boolean collection(String instanceId) throws Exception;
	
	/**
	 * 解析岗位人员
	 * @return
	 */
	public List<FlowAcPostDto> parsePost(Map<String, Object> businessVariable,List<AcDto> acDtos);
	
	/**
	 * 解析岗位人员
	 * @return
	 */
	public List<FlowAcPostDto> parsePost(Map<String, Object> businessVariable,AcDto acDto);

	public MobileApproveDto queryMobileApproveByParamMap(Map<String, Object> paramMap);

	/**
	 * 查询关联流程
	 * @param instanceId
	 * @return
	 */
	public List<InstanceDto> getRelateInstances(String instanceId);

	/**
	 * 扫描逾期流程环节，作出对应处理：通知当前审批人、打回到发起人、自动通过
	 * 参与扫描的环节需要符合的条件：
	 * 1、环节处理运行时、未结束
	 * 2、环节逾期时间阀值>0
	 * 3、now-环节开始时间>环节逾期时间阀值
	 * 
	 * @return
	 * @throws Exception 
	 */
	public String scanOverdueAc() throws Exception;

	/**
	 * 查询流程流转记录
	 * @param instanceId
	 * @return
	 */
	public List<InstanceTransitionRecordDto> queryTransferList(String instanceId);

	//public List<InstanceDto> queryListByApprover(Map<String, String> map);
	//优化修改为分页查询
	public Page queryListByApproverParam(Map<String, Object> map);
	
	/**
	 * 获取节点审批类型
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public String queryApprovalTypeId(Map<String, Object> map)throws Exception;

	/**
	 * 流程审批查看页面查询
	 * @param queryBean
	 * @return
	 * @throws Exception 
	 */
	public FlowApproveViewBean flowView(FlowQueryBean params) throws Exception;

	/**
	 * 批量查询流程实例的当前审批人
	 * 
	 * @param flowInfos
	 * @return
	 */
	public Map<String, List<UserDto>> queryCurrentApproversOf(List<FlowQueryBean> flowInfos);

	/**
	 * 查询流程实例当前节点信息
	 * 
	 * @param flowInfo
	 * @return
	 */
	public List<InstanceAcDto> queryCurrentNodeOf(FlowQueryBean flowInfo);

	/**
	 * 验证流程实例数据权限
	 * @param paramMap
	 * @return
	 */
	public Boolean validateInstanceDataAuth(Map<String,Object> paramMap,String userInfo);

	/**
	 * 获取流程实例流转图数据
	 * @param instanceId
	 * @return
	 * @throws Exception
	 */
	public InstanceDto getInstanceGraph(String instanceId) throws Exception;

	SysNoticeMsgService getMsgService();

	public List<UserDto> queryAdminList();

	public AgentService getAgentService();

	public MonitorSettingService getMonitorSettingService();

	InstanceOperateLogService getInstanceLogService();

	public InstanceGroupService getInstanceGroupService();

	public InstanceTaskService getInstanceTaskService();

	public Map<String, String> queryOrgBy(String postId);

	public InstancePostDao getInstancePostDao();

	public InstanceAcService getInstanceAcService();

	public InstanceDao getInstanceDao();

	public BusinessObjectService getBusinessObjectService();

	public void setLoginInfo(String token, String json, String json2);

	public SearchIndexDtoServiceCustomer getSearchIndexDtoServiceCustomer();

	public InstanceTransitionRecordService getInstanceTransitionRecordService();

	public SysNoticeMsgTempDao getSysNoticeMsgTempDao();

	public List<ApprovalList> queryApproverDone(String instanceIdBeforeReturn);

	public InstanceUnit translate(InstanceUnit instanceUnit, List<ApprovalList> queryApproverDone);

	public List<ApprovalList> queryApprovalList(String instanceId, String value);

	public InstanceCsService getInstanceCsService();
	/**
	 * 修改这个实例最新的那条 我的发起 消息
	 * @param instanceId
	 * @param editTitleName
	 */
	public void editLastStartMsgTitle(String instanceId,String editTitleName) throws  Exception;


	public FlService getFlService();

	public StepService getStepService();

	public InstanceVariableService getInstanceVariableService();
	
	public void scanExceptionFlow(String userInfo);

	/**
	 * 保存修改的流程实例
	 * @param saveMap
	 */
	public Map<String,Object> saveModifyInstance(Map<String,Object> saveMap) throws Exception;

	/**
	 *
	 * 发起人撤回流程审批记录&管理员作废流程记录 yangning
	 * @param instanceUnit
	 * @param type 0 发起人撤回  1管理员作废
	 * @throws Exception
	 */
	public void addDrawFlowNode(InstanceUnit instanceUnit ,int type) throws Exception;

	/**
	 * 扫描逾期节点，处理逾期
	 * @return
	 * @throws Exception
	 */
	public Map<String,Object> scanOverdueAcTask() ;
}
