package com.xinleju.cloud.oa.sys.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

import com.xinleju.platform.base.utils.LoginUtils;
import com.xinleju.platform.encrypt.EndecryptUtil;
import com.xinleju.platform.tools.data.JacksonUtils;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.xinleju.cloud.oa.sys.dao.SysNaviMenuDao;
import com.xinleju.cloud.oa.sys.dto.SysNaviMenuDto;
import com.xinleju.cloud.oa.sys.dto.ZTreeNode;
import com.xinleju.cloud.oa.sys.entity.SysNaviMenu;
import com.xinleju.cloud.oa.sys.service.SysNaviMenuService;
import com.xinleju.platform.base.service.impl.BaseServiceImpl;

/**
 * @author admin
 * 
 * 
 */

@Service
public class SysNaviMenuServiceImpl extends  BaseServiceImpl<String,SysNaviMenu> implements SysNaviMenuService{
	

	@Autowired
	private SysNaviMenuDao sysNaviMenuDao;
	@Override
	public List<SysNaviMenuDto> queryRootMenu(String state) {
		Map param = new HashMap();
		if("0".equals(state)){
			param.put("state", false);
		}else if("1".equals(state)){
			param.put("state", true);
		}else if("ENABLED".equals(state)){
			param.put("state", "1");
		}else {
			param.put("state", null);
	}
		List<SysNaviMenu> sysNaviMenuList = sysNaviMenuDao.queryRootMenu(param);
		List<SysNaviMenuDto> rootList = new ArrayList<SysNaviMenuDto>();
		Long num = 0L;
		Long level = 0L;
		String status = "ENABLED".equals(state)?"1":null;
		if(sysNaviMenuList!=null&&!sysNaviMenuList.isEmpty()){
			for(SysNaviMenu sysNaviMenu:sysNaviMenuList){
				SysNaviMenuDto sysNaviMenuDto = new SysNaviMenuDto();
				sysNaviMenuDto = JacksonUtils.fromJson(JacksonUtils.toJson(sysNaviMenu),SysNaviMenuDto.class);
				sysNaviMenuDto.setLevel(level);
				sysNaviMenuDto.setIsLeaf(false);
				sysNaviMenuDto.setLft(num);
				sysNaviMenuDto.setExpanded(true);
				sysNaviMenuDto.setLoaded(true);
				rootList.add(sysNaviMenuDto);
				Map<String, Object> typeList = getNaviMenuList(status,sysNaviMenu.getId(),rootList,level,num);
	    		num= (Long) typeList.get("num");
	    		sysNaviMenuDto.setRgt(num);
	    		String isleaf = (String)typeList.get("isleaf");
	    		if("1".equals(isleaf)){
					  sysNaviMenuDto.setIsLeaf(true);
				  }else{
				      sysNaviMenuDto.setIsLeaf(false);
				  }
	    		
			}
		}
		return rootList;
	}
	 public Map<String,Object> getNaviMenuList(String status,String id,List<SysNaviMenuDto> list,Long level,Long num){
		  Map<String,Object> map=new HashMap<String, Object>();
		  Map<String,Object> resultmap=new HashMap<String, Object>();
		  map.put("parentId", id);

		 if(status!=null){
			 map.put("state",status);
		 }

		  List<SysNaviMenu> sysNaviMenuList = sysNaviMenuDao.queryRootMenu(map);
		  if(sysNaviMenuList!=null&&!sysNaviMenuList.isEmpty()){
			  level++;
			  for (SysNaviMenu sysNaviMenu : sysNaviMenuList) {
				  num++;
				  Long rgt = 0L;
				  SysNaviMenuDto sysNaviMenuDto  = new SysNaviMenuDto();
				  sysNaviMenuDto = JacksonUtils.fromJson(JacksonUtils.toJson(sysNaviMenu),SysNaviMenuDto.class);
				  sysNaviMenuDto.setLft(num);
				  sysNaviMenuDto.setLevel(level);
				  sysNaviMenuDto.setLoaded(true);
				  sysNaviMenuDto.setExpanded(true);
				  list.add(sysNaviMenuDto);
				  Map<String, Object> projectTypeList = getNaviMenuList(status,sysNaviMenuDto.getId(),list,level,num);
				  num= (Long) projectTypeList.get("num");
				  sysNaviMenuDto.setRgt(num);
				  String isleaf = (String)projectTypeList.get("isleaf");
				  if("1".equals(isleaf)){
					  sysNaviMenuDto.setIsLeaf(true);
				  }else{
				      sysNaviMenuDto.setIsLeaf(false);
				  }
				  
			}
			  num++;
		  }else{
			  resultmap.put("isleaf", "1");
			  num++;
		  }
		  
		  resultmap.put("num", num);
		  resultmap.put("list", list);
		  return resultmap;
	  }
	@Override
	public List<SysNaviMenuDto> queryNaviMenu(Map param) {
		return null;
	}
    @Transactional
	@Override
	public int updateToPre(SysNaviMenu arg) {
    	Map param = new HashMap();
		param.put("sort", arg.getSort());
		param.put("parentId", arg.getParentId());
		List<SysNaviMenu> pre = sysNaviMenuDao.selectMaxSidSysNaviMenu(param);
		if(pre != null && !pre.isEmpty()){
			param.clear();
			param.put("id",arg.getId());
			param.put("sort", pre.get(0).getSort());
			sysNaviMenuDao.switchOrder(param);
			param.clear();
			param.put("id",pre.get(0).getId());
			param.put("sort", arg.getSort());
		    return sysNaviMenuDao.switchOrder(param);
		
		}
		return -1;
	}
    @Transactional
	@Override
	public int updateToNext(SysNaviMenu arg) {
    	Map param = new HashMap();
		param.put("sort", arg.getSort());
		if(arg.getParentId()!=null&&StringUtils.isNotEmpty(arg.getParentId())){
			param.put("parentId", arg.getParentId());
		}
		List<SysNaviMenu> next = sysNaviMenuDao.selectMinSidSysNaviMenu(param);
		if(next != null && !next.isEmpty()){
			param.clear();
			param.put("id",arg.getId());
			param.put("sort", next.get(0).getSort());
			sysNaviMenuDao.switchOrder(param);
			param.clear();
			param.put("id",next.get(0).getId());
			param.put("sort", arg.getSort());
			return sysNaviMenuDao.switchOrder(param);
		}
		return -1;
	}

	@Override
	public int getMaxSidByPid(String pMenuId) {
		Map param = new HashMap();
		param.put("parentId", pMenuId);
		List<SysNaviMenu> pre = sysNaviMenuDao.selectMaxSidSysNaviMenu(param);
		if(pre!=null&&pre.size()>=1){
			return pre.get(0).getSort()+pre.size()-1;
		}
		return 0;
	}

	@Override
	public int updateChildrenState(SysNaviMenu sysNaviMenu) {
		return sysNaviMenuDao.updateChildrenState(sysNaviMenu);
	}
	@Override
	public List<ZTreeNode> queryZTreeMenu() {
		Map param = new HashMap();
			param.put("state", true);
		List<ZTreeNode> list = new ArrayList<ZTreeNode>();
		List<SysNaviMenu> sysNaviMenuList = sysNaviMenuDao.queryRootMenu(param);
		if(sysNaviMenuList!=null&&!sysNaviMenuList.isEmpty()){
			for(SysNaviMenu sysNaviMenu:sysNaviMenuList){
					ZTreeNode node = new ZTreeNode();
				if(sysNaviMenu.getParentId()==null||Objects.equals(sysNaviMenu.getParentId(), "")){
					node.setpId("0");
					node.setIcon(sysNaviMenu.getImage());
					node.setMenuName(sysNaviMenu.getMenuName());
					node.setOpen(true);
					node.setParent(true);
					node.setState(sysNaviMenu.getState()==true?1:0);
					node.setResourceId(sysNaviMenu.getResourceId());
					node.setResourceName(sysNaviMenu.getResourceName());
					node.setUrl(sysNaviMenu.getUrl());
					node.setType(sysNaviMenu.getType());
					node.setName(sysNaviMenu.getName());
					node.setId(sysNaviMenu.getId());
					node.setLinkType(sysNaviMenu.getLinkType());
					list.add(node);
					getChildeNode(node,list);
				}
				
			}
		}
		
		return list;
	}
	private void getChildeNode(ZTreeNode node, List<ZTreeNode> list) {
		Map param = new HashMap();
		param.put("state", true);
		param.put("parentId", node.getId());
		List<SysNaviMenu> sysNaviMenuList = sysNaviMenuDao.queryRootMenu(param);
		if(sysNaviMenuList!=null&&!sysNaviMenuList.isEmpty()){
			for(SysNaviMenu sysNaviMenu:sysNaviMenuList ){
				ZTreeNode childrenNode = new ZTreeNode();
				childrenNode.setpId(node.getId());
				childrenNode.setIcon(sysNaviMenu.getImage());
				childrenNode.setMenuName(sysNaviMenu.getMenuName());
				childrenNode.setOpen(true);
				childrenNode.setParent(false);
				childrenNode.setState(sysNaviMenu.getState()==true?1:0);
				childrenNode.setResourceId(sysNaviMenu.getResourceId());
				childrenNode.setResourceName(sysNaviMenu.getResourceName());
				childrenNode.setUrl(sysNaviMenu.getUrl());
				childrenNode.setType(sysNaviMenu.getType());
				childrenNode.setName(sysNaviMenu.getName());
				childrenNode.setId(sysNaviMenu.getId());
				list.add(childrenNode);
				getChildeNode(childrenNode,list);
			}
		}
	}
	/**
	 * 模糊查询
	 */
	@Override
	public List<SysNaviMenu> fuzzySearch(Map map) {
		
		return sysNaviMenuDao.fuzzySearch(map);
	}
	/**
	 * 校验编号唯一性
	 */
	@Override
	public Integer checkSerialNo(SysNaviMenu param) {
		final SysNaviMenu naviMenu = sysNaviMenuDao.getNaviMenuBySerialNo(param);
		return naviMenu==null?1:0;
	}
	/**
	 * 更新对象
	 */
	@Override
	public int updateNaviMenu(SysNaviMenu sysNaviMenu) {
		   int result =  sysNaviMenuDao.update(sysNaviMenu);
		   //state:禁用false，同时禁用所有子集菜单；启用true,同时启用父级菜单
		   int num = sysNaviMenu.getState()==false?sysNaviMenuDao.updateChildrenState(sysNaviMenu):sysNaviMenuDao.updateFatherState(sysNaviMenu);
		   
		return result;
	}


	@Override
	public List<SysNaviMenu> queryListByPortalId(Map<String, Object> param) {
		return sysNaviMenuDao.queryListByPortalId(param);
	}
}
