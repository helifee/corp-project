package com.xinleju.cloud.oa.servey.service.impl;

import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.flow.dto.SysNoticeMsgDto;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.cloud.oa.meeting.dto.MeetingAgendaDto;
import com.xinleju.cloud.oa.meeting.dto.MeetingDto;
import com.xinleju.cloud.oa.meeting.entity.Meeting;
import com.xinleju.cloud.oa.meeting.entity.MeetingAgenda;
import com.xinleju.cloud.oa.meeting.utils.MeetingStatusType;
import com.xinleju.cloud.oa.meeting.utils.UserIdentifiy;
import com.xinleju.cloud.oa.servey.dao.ServeyDao;
import com.xinleju.cloud.oa.servey.dao.ServeyResponseAnswerDao;
import com.xinleju.cloud.oa.servey.dao.ServeyResponseDao;
import com.xinleju.cloud.oa.servey.dto.ServeyResponseAnswerDto;
import com.xinleju.cloud.oa.servey.dto.ServeyResponseDto;
import com.xinleju.cloud.oa.servey.entity.Servey;
import com.xinleju.cloud.oa.servey.entity.ServeyResponse;
import com.xinleju.cloud.oa.servey.entity.ServeyResponseAnswer;
import com.xinleju.cloud.oa.servey.service.ServeyResponseService;
import com.xinleju.platform.base.service.impl.BaseServiceImpl;
import com.xinleju.platform.base.utils.IDGenerator;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.flow.dto.service.SysNoticeMsgDtoServiceCustomer;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * @author admin
 * 
 * 
 */

@Service
public class ServeyResponseServiceImpl extends  BaseServiceImpl<String,ServeyResponse> implements ServeyResponseService{
	

	@Autowired
	private ServeyResponseDao serveyResponseDao;
	@Autowired
	private ServeyResponseAnswerDao serveyResponseAnswerDao;
	
	@Autowired
	private ServeyDao serveyDao;
	
	@Autowired
	private SysNoticeMsgDtoServiceCustomer sysNoticeMsgDtoServiceCustomer;

	@Override
	public Page getServeyResponseByPage(Map map) throws Exception {
		// TODO Auto-generated method stub
		Page page=new Page();
		List<Map<String,Object>> list = serveyResponseDao.getServeyResponsePage(map);
		Integer count = serveyResponseDao.getServeyResponsePageCount(map);
//		Integer count = list.size();
		page.setLimit((Integer) map.get("limit") );
		page.setList(list);
		page.setStart((Integer) map.get("start"));
		page.setTotal(count);
		return page;
	}

	@Override
	public Integer saveServeyResponse(String userInfo,ServeyResponseDto serveyResponseDto) {
		// TODO Auto-generated method stub
		
		Servey servey = serveyDao.getObjectById(serveyResponseDto.getServeyId());
		ServeyResponse serveyResponse = new ServeyResponse();
		BeanUtils.copyProperties(serveyResponseDto, serveyResponse);
		Timestamp ts = new Timestamp(System.currentTimeMillis());
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//设置日期格式
		String currentTime = df.format(new Date());// new Date()为获取当前系统时间
		serveyResponse.setCreateDate(Timestamp.valueOf(currentTime));
		serveyResponse.setUpdateDate(Timestamp.valueOf(currentTime));
		if(StringUtils.isBlank(serveyResponse.getId())){
			serveyResponse.setId(IDGenerator.getUUID());
		}
		int result = serveyResponseDao.save(serveyResponse);
		List<ServeyResponseAnswerDto> listAnswer = serveyResponseDto.getList();
		if(listAnswer.size() > 0){
			List<ServeyResponseAnswer> serveyResponseAnswerlist = new ArrayList<ServeyResponseAnswer>();
			for (ServeyResponseAnswerDto serveyResponseAnswerDto : listAnswer) {
				if(isNotEmpty(serveyResponseAnswerDto.getOptionId()) || isNotEmpty(serveyResponseAnswerDto.getTextResponse()) || isNotEmpty(serveyResponseAnswerDto.getSubQuestionId())){
					ServeyResponseAnswer serveyResponseAnswer = new ServeyResponseAnswer();
					BeanUtils.copyProperties(serveyResponseAnswerDto, serveyResponseAnswer);
					serveyResponseAnswer.setId(IDGenerator.getUUID());
					serveyResponseAnswer.setServeyResponseId(serveyResponse.getId());
					serveyResponseAnswer.setDelflag(false);
					serveyResponseAnswerlist.add(serveyResponseAnswer);
				}
			}
			//批量保存
			int number1 = serveyResponseAnswerDao.saveBatch(serveyResponseAnswerlist);
			
			if(serveyResponseAnswerlist.size() > 0 && !("1".endsWith(servey.getServeyMultipleSurveys()))){
				updateNoticeMsg(userInfo, servey.getId(), serveyResponse.getUserId());
			}
		}

		return result;
	}
	public void updateNoticeMsg(String userInfo,String id,String userId){
		Map<String,String> noticeMap = new HashMap<String,String>();
		noticeMap.put("oldStatus", "DB");
		//noticeMap.put("id", map.get("noticeId").toString());
		noticeMap.put("businessId",id);
		noticeMap.put("extendInfo", "QUESTION");
		noticeMap.put("userId", userId);
		noticeMap.put("newStatus", "YB");
		String noticeMapJson= JacksonUtils.toJson(noticeMap);
		/*获取消息id*/
		String noticeList =   sysNoticeMsgDtoServiceCustomer.queryList (userInfo,noticeMapJson);
		DubboServiceResultInfo noticeInfo = JacksonUtils.fromJson (noticeList,DubboServiceResultInfo.class);
		List<SysNoticeMsgDto> li = JacksonUtils.fromJson (noticeInfo.getResult (),List.class,SysNoticeMsgDto.class);
		if(li!=null&&!li.isEmpty ()){
			noticeMap.put("id",li.get (0).getId ());
		}
		/*获取消息id*/
		noticeMapJson= JacksonUtils.toJson(noticeMap);
		sysNoticeMsgDtoServiceCustomer.updateStatusOfNoticeMsg(userInfo, noticeMapJson);
	}
	public void deleteNoticeMsg(String userInfo,String id,String userId){
		Map<String,String> noticeMap = new HashMap<String,String>();
		noticeMap.put("opType", "DB");
		noticeMap.put("businessId", id);
		noticeMap.put("userId", userId);
		String noticeMapJson= JacksonUtils.toJson(noticeMap);
		sysNoticeMsgDtoServiceCustomer.deleteOpTypeDataByParamMap(userInfo, noticeMapJson);
	}

	@Override
	public Integer saveBean(String userInfo, ServeyResponseDto serveyResponseDto) {
		
		ServeyResponse serveyResponse = new ServeyResponse();
		BeanUtils.copyProperties(serveyResponseDto, serveyResponse);
		Timestamp ts = new Timestamp(System.currentTimeMillis());
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");//设置日期格式
		String currentTime = df.format(new Date());// new Date()为获取当前系统时间
		serveyResponse.setCreateDate(Timestamp.valueOf(currentTime));
		serveyResponse.setUpdateDate(Timestamp.valueOf(currentTime));
		if(StringUtils.isBlank(serveyResponse.getId())){
			serveyResponse.setId(IDGenerator.getUUID());
		}
		int result = serveyResponseDao.save(serveyResponse);
		List<ServeyResponseAnswerDto> listAnswer = serveyResponseDto.getList();
		if(listAnswer.size() > 0){
			List<ServeyResponseAnswer> serveyResponseAnswerlist = new ArrayList<ServeyResponseAnswer>();
			for (ServeyResponseAnswerDto serveyResponseAnswerDto : listAnswer) {
				ServeyResponseAnswer serveyResponseAnswer = new ServeyResponseAnswer();
				BeanUtils.copyProperties(serveyResponseAnswerDto, serveyResponseAnswer);
				serveyResponseAnswer.setId(IDGenerator.getUUID());
				serveyResponseAnswer.setServeyResponseId(serveyResponse.getId());
				serveyResponseAnswer.setDelflag(false);
				serveyResponseAnswerlist.add(serveyResponseAnswer);
			}
			//批量保存
			int number1 = serveyResponseAnswerDao.saveBatch(serveyResponseAnswerlist);
		}

		return result;
	}

	@Override
	public Integer deleteBean(ServeyResponseDto serveyResponseDto) {
		ServeyResponse serveyResponse = new ServeyResponse();
		BeanUtils.copyProperties(serveyResponseDto, serveyResponse);
		//清空会议
		Integer result = serveyResponseDao.deleteObjectById(serveyResponse.getId());
		//清空调查反馈答案
		Map<String, String> map = new HashMap<String, String>();
		map.put("serveyResponseId", serveyResponse.getId());
		try {
			serveyResponseAnswerDao.deleteServeyResponseAnswerByServeyResponseId(map);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return result;
	}
	
	public Boolean isNotEmpty(String s){
		 if(s == null || s.length() <= 0){
			 return false;
		 }
		 return true;
	}
	
}
