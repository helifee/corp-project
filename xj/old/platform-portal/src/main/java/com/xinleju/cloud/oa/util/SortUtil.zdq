package com.xinleju.cloud.oa.util;

import java.util.Collections;
import java.util.Comparator;

import org.apache.commons.beanutils.BeanComparator;

import java.util.List;

import org.apache.commons.collections.ComparatorUtils;
import org.apache.commons.collections.comparators.ComparableComparator;

public class SortUtil {

	
	/** 
	* 按bean的属性值对list集合进行排序 
	* 
	* @param list 
	*            要排序的集合 
	* @param propertyName 
	*            集合元素的属性名 
	* @param isAsc 
	*            排序方向,true--正向排序,false--逆向排序 
	* @return 排序后的集合 
	*/ 
	public static List sortList(List list, String propertyName, boolean isAsc) { 
	        //借助commons-collections包的ComparatorUtils    
	        //BeanComparator，ComparableComparator和ComparatorChain都是实现了Comparator这个接口    
	        Comparator mycmp = ComparableComparator.getInstance();       
	        mycmp = ComparatorUtils.nullLowComparator(mycmp);  //允许null 
	        if(isAsc){ 
	        mycmp = ComparatorUtils.reversedComparator(mycmp); //逆序       
	        } 
	        Comparator cmp = new BeanComparator(propertyName, mycmp);    
	        Collections.sort(list, cmp);   
	return list; 
	} 
	
	
	
	/**
     * @describe 依据某个字段对集合进行排序
     * @author ...
     * @date 2013-1-22 下午3:44:47
     * @param list
     *            待排序的集合
     * @param fieldName
     *            依据这个字段进行排序
     * @param asc
     *            如果为true，是正序；为false，为倒序
     *//*
    @SuppressWarnings("unchecked")
    public static <T> void sort(List<T> list, String fieldName, boolean asc) {
        Comparator<?> mycmp = ComparableComparator.getInstance();
        mycmp = ComparatorUtils.nullLowComparator(mycmp); // 允许null
        if (!asc) {
            mycmp = ComparatorUtils.reversedComparator(mycmp); // 逆序
        }
        
        Comparator cmp = new BeanComparator(propertyName, mycmp);  
        Collections.sort(list, new BeanComparator(fieldName, mycmp));
    }
	*/
	


}
