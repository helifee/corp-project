package com.xinleju.cloud.oa.schedule.service.impl;

import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.sys.org.dto.UserDto;
import com.xinleju.platform.sys.org.dto.service.UserDtoServiceCustomer;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.platform.base.service.impl.BaseServiceImpl;
import com.xinleju.platform.base.utils.IDGenerator;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.base.utils.SecurityUserBeanInfo;
import com.xinleju.platform.flow.dto.SysNoticeMsgDto;
import com.xinleju.platform.flow.dto.service.SysNoticeMsgDtoServiceCustomer;
import com.xinleju.platform.tools.data.JacksonUtils;
import com.xinleju.cloud.oa.schedule.dao.TaskPackageDao;
import com.xinleju.cloud.oa.schedule.dto.TaskPackageDispatchDto;
import com.xinleju.cloud.oa.schedule.dto.TaskPackageDto;
import com.xinleju.cloud.oa.schedule.entity.TaskPackage;
import com.xinleju.cloud.oa.schedule.entity.TaskPackageDispatch;
import com.xinleju.cloud.oa.schedule.entity.WorkSchedule;
import com.xinleju.cloud.oa.schedule.service.TaskPackageDispatchService;
import com.xinleju.cloud.oa.schedule.service.TaskPackageService;
import com.xinleju.cloud.oa.schedule.service.WorkScheduleService;

/**
 * @author admin
 */

@Service
public class TaskPackageServiceImpl extends BaseServiceImpl<String, TaskPackage> implements TaskPackageService {


    @Autowired
    private TaskPackageDao taskPackageDao;
    @Autowired
    private TaskPackageDispatchService taskPackageDispatchService;
    @Autowired
    private WorkScheduleService workScheduleService;
    @Autowired
    private SysNoticeMsgDtoServiceCustomer sysNoticeMsgDtoServiceCustomer;
    @Autowired
    private UserDtoServiceCustomer userDtoServiceCustomer;

    /* (non-Javadoc)
     * @see com.xinleju.cloud.oa.schedule.service.TaskPackageService#saveObject(com.xinleju.cloud.oa.schedule.dto.TaskPackageDto)
     */
    @Override
    public void saveObject(TaskPackageDto taskPackageDto) throws Exception {
        List<TaskPackageDispatchDto> list = taskPackageDto.getList();
        if (list != null && list.size() > 0) {
            for (TaskPackageDispatchDto taskPackageDispatchDto : list) {
                TaskPackageDispatch taskPackageDispatch = new TaskPackageDispatch();
                BeanUtils.copyProperties(taskPackageDispatchDto, taskPackageDispatch);
                taskPackageDispatchService.save(taskPackageDispatch);
            }
        }
        TaskPackage taskPackage = new TaskPackage();
        BeanUtils.copyProperties(taskPackageDto, taskPackage);
        taskPackageDao.save(taskPackage);
    }

    /* (non-Javadoc)
     * @see com.xinleju.cloud.oa.schedule.service.TaskPackageService#getTaskPackagePage(java.util.Map)
     */
    @Override
    public Page getTaskPackagePage(Map map) throws Exception {
        String endTime = (String) map.get("endTime");
        if(StringUtils.isNotBlank(endTime)){
            endTime += " 23:59:59";
            map.put("endTime",endTime);
        }

        Page page = new Page();
        List<Map<String, Object>> resultList = taskPackageDao.getTaskPackageListPage(map);
        page.setLimit((Integer) map.get("limit"));
        page.setList(resultList);
        page.setStart((Integer) map.get("start"));

        Integer count = taskPackageDao.getTaskPackageCount(map);
        page.setTotal(count);
        return page;
    }

    /* (non-Javadoc)
     * @see com.xinleju.cloud.oa.schedule.service.TaskPackageService#getTaskPackageDtoById(java.lang.String)
     */
    @Override
    public TaskPackageDto getTaskPackageDtoById(String id) throws Exception {
        TaskPackageDto taskPackageDto = new TaskPackageDto();
        TaskPackage taskPackage = taskPackageDao.getObjectById(id);
        BeanUtils.copyProperties(taskPackage, taskPackageDto);
        List<TaskPackageDispatch> list = taskPackageDispatchService.getListById(id);
        List<TaskPackageDispatchDto> returnList = new ArrayList<TaskPackageDispatchDto>();
        if (list != null && list.size() > 0) {
            for (TaskPackageDispatch taskPackageDispatch : list) {
                TaskPackageDispatchDto taskPackageDispatchDto = new TaskPackageDispatchDto();
                BeanUtils.copyProperties(taskPackageDispatch, taskPackageDispatchDto);
                returnList.add(taskPackageDispatchDto);
            }
        }
        taskPackageDto.setList(returnList);
        return taskPackageDto;
    }

    /* (non-Javadoc)
     * @see com.xinleju.cloud.oa.schedule.service.TaskPackageService#updateBean(com.xinleju.cloud.oa.schedule.dto.TaskPackageDto)
     */
    @Override
    public int updateBean(TaskPackageDto taskPackageDto) throws Exception {
        String id = taskPackageDto.getId();
        List<TaskPackageDispatch> list = taskPackageDispatchService.getListById(id);
        if (list != null && list.size() > 0) {
            for (TaskPackageDispatch taskPackageDispatch : list) {
                taskPackageDispatchService.deleteObjectById(taskPackageDispatch.getId());
            }
        }
        List<TaskPackageDispatchDto> newList = taskPackageDto.getList();
        if (newList != null && newList.size() > 0) {
            for (TaskPackageDispatchDto taskPackageDispatchDto : newList) {
                TaskPackageDispatch taskPackageDispatch = new TaskPackageDispatch();
                BeanUtils.copyProperties(taskPackageDispatchDto, taskPackageDispatch);
                taskPackageDispatchService.save(taskPackageDispatch);
            }
        }
        TaskPackage taskPackage = new TaskPackage();
        BeanUtils.copyProperties(taskPackageDto, taskPackage);
        return taskPackageDao.update(taskPackage);
    }

    /* (non-Javadoc)
     * @see com.xinleju.cloud.oa.schedule.service.TaskPackageService#publishMessage(com.xinleju.cloud.oa.schedule.entity.TaskPackage)
     */
    //发送代办
    @Override
    public int publishMessage(String userJson, TaskPackage taskPackage) throws Exception {
        SecurityUserBeanInfo userBeanInfo = JacksonUtils.fromJson(userJson, SecurityUserBeanInfo.class);
        String id = taskPackage.getId();
        String publishDate = taskPackage.getPublishDate();

        if (publishDate == null) {
            publishDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
            taskPackage.setPublishDate(publishDate);
        }
        String status = taskPackage.getStatus();
        List<TaskPackageDispatch> TaskPackageDispatchList = taskPackageDispatchService.getListById(id);
        if (TaskPackageDispatchList != null && TaskPackageDispatchList.size() > 0) {
            for (TaskPackageDispatch taskPackageDispatch : TaskPackageDispatchList) {
        /*	String dispatchId = taskPackageDispatch.getId();//把任务同步到日程里面去
			WorkSchedule objectById = workScheduleService.getObjectById(dispatchId);
			if(objectById==null){
			WorkSchedule workSchedule=new  WorkSchedule();
			workSchedule.setId(taskPackageDispatch.getId());
			workSchedule.setContent(taskPackageDispatch.getContent());
			workSchedule.setBeginTime(publishDate);
			workSchedule.setEndTime(taskPackageDispatch.getExpectCompleteDate());
			workSchedule.setSource("OA");
			workSchedule.setDelflag(false);
			workSchedule.setPeriodProceeding("0");
			workSchedule.setType("TASK");
			workSchedule.setStatus("1");//启用状态
			workSchedule.setTaskOwner(taskPackageDispatch.getDutyUser());
			workSchedule.setTaskOwnerId(taskPackageDispatch.getDutyUserId());
			workScheduleService.save(workSchedule);
			taskPackageDispatch.setReportStatus("0");//状态设置为未汇报
			taskPackageDispatchService.update(taskPackageDispatch);
			}else{
				objectById.setDelflag(false);
				workScheduleService.update(objectById);
			}*/
                //发送代办
                if ("1".equals(status)) {
                    SysNoticeMsgDto sysNoticeMsgDto = new SysNoticeMsgDto();
                    sysNoticeMsgDto.setId(IDGenerator.getUUID());
                    sysNoticeMsgDto.setTitle(taskPackageDispatch.getContent());
                    sysNoticeMsgDto.setUserId(taskPackageDispatch.getDutyUserId());
                    sysNoticeMsgDto.setUserName(taskPackageDispatch.getDutyUser());
                    sysNoticeMsgDto.setMsgType(true);
                    sysNoticeMsgDto.setOpType("DB");
                    sysNoticeMsgDto.setDelflag(false);
                    sysNoticeMsgDto.setSource("OA");
                    sysNoticeMsgDto.setLoginName (doGetDutyUserLoginName(userJson,taskPackageDispatch.getDutyUserId()));
                    sysNoticeMsgDto.setAppCode("flow");
                    sysNoticeMsgDto.setBusinessId(taskPackageDispatch.getId());
                    sysNoticeMsgDto.setIpAddress("");
                    sysNoticeMsgDto.setSendDate(new Timestamp(new Date().getTime()));
                    sysNoticeMsgDto.setIsOpen(true);
                    sysNoticeMsgDto.setUrl("oa/taskPackageDispatch/taskPackageDispatch_flow.html?dispatchId=" + taskPackageDispatch.getId() + "&noticeFlag=DB&type=view&id=" + sysNoticeMsgDto.getId());
                    sysNoticeMsgDto.setFirstType("SCHEDULE");
                    String json = JacksonUtils.toJson(sysNoticeMsgDto);
                    sysNoticeMsgDtoServiceCustomer.save(userJson, json);
                    taskPackageDispatch.setReportStatus("4");//状态设置为发送选中
                    taskPackageDispatchService.update(taskPackageDispatch);
                } else if ("2".equals(status)) {
                    String reportStatus = taskPackageDispatch.getReportStatus();
                    if ("5".equals(reportStatus)) {
                        SysNoticeMsgDto sysNoticeMsgDto = new SysNoticeMsgDto();
                        sysNoticeMsgDto.setId(IDGenerator.getUUID());
                        sysNoticeMsgDto.setTitle(taskPackageDispatch.getContent());
                        sysNoticeMsgDto.setUserId(taskPackageDispatch.getDutyUserId());
                        sysNoticeMsgDto.setUserName(taskPackageDispatch.getDutyUser());
                        sysNoticeMsgDto.setMsgType(true);
                        sysNoticeMsgDto.setOpType("DB");
                        sysNoticeMsgDto.setDelflag(false);
                        sysNoticeMsgDto.setSource("OA");
                        sysNoticeMsgDto.setLoginName(doGetDutyUserLoginName(userJson,taskPackageDispatch.getDutyUserId()));
                        sysNoticeMsgDto.setAppCode("flow");
                        sysNoticeMsgDto.setBusinessId(taskPackageDispatch.getId());
                        sysNoticeMsgDto.setIpAddress("");
                        sysNoticeMsgDto.setSendDate(new Timestamp(new Date().getTime()));
                        sysNoticeMsgDto.setIsOpen(true);
                        sysNoticeMsgDto.setFirstType("SCHEDULE");
                        sysNoticeMsgDto.setUrl("oa/taskPackageDispatch/taskPackageDispatch_flow.html?dispatchId=" + taskPackageDispatch.getId() + "&noticeFlag=DB&type=view&id=" + sysNoticeMsgDto.getId());
                        String json = JacksonUtils.toJson(sysNoticeMsgDto);
                        sysNoticeMsgDtoServiceCustomer.save(userJson, json);
                        taskPackageDispatch.setReportStatus("4");//状态设置为发送选中
                        taskPackageDispatchService.update(taskPackageDispatch);
                    }
                }

            }
        }

        taskPackage.setPublishUserId(userBeanInfo.getSecurityUserDto().getId());
        taskPackage.setPublishUser(userBeanInfo.getSecurityUserDto().getRealName());
        taskPackage.setStatus("2");//已发布
        return taskPackageDao.update(taskPackage);

    }
    private String doGetDutyUserLoginName(String userJson,String dutyUserId){
        String dubboUserResultInfo =  userDtoServiceCustomer.getObjectById (userJson,"{\"id\":\""+dutyUserId+"\"}");
        DubboServiceResultInfo dubboServiceUserResultInfo= JacksonUtils.fromJson(dubboUserResultInfo, DubboServiceResultInfo.class);
        if(dubboServiceUserResultInfo.isSucess()) {
            String resultInfo = dubboServiceUserResultInfo.getResult ();
            UserDto userDto = JacksonUtils.fromJson (resultInfo, UserDto.class);
            return userDto.getLoginName ();
        }
        return "";
    }

    /* (non-Javadoc)
     * @see com.xinleju.cloud.oa.schedule.service.TaskPackageService#updateStatus(java.util.Map)
     */
    @Override
    public int updateStatus(Map<String, Object> map) throws Exception {
        String taskPackageId = (String) map.get("taskPackageId");
        TaskPackage taskPackage = taskPackageDao.getObjectById(taskPackageId);
        String status = (String) map.get("status");
        if (status.equals("0")) {//关闭
            List<TaskPackageDispatch> TaskPackageDispatchList = taskPackageDispatchService.getListById(taskPackageId);
            for (TaskPackageDispatch taskPackageDispatch : TaskPackageDispatchList) {
                String reportStatus = taskPackageDispatch.getReportStatus();
                if ("5".equals(reportStatus) || "1".equals(reportStatus)) {//未汇报
                    String id = taskPackageDispatch.getId();
                    WorkSchedule object = workScheduleService.getObjectById(id);
                    object.setStatus("0");//禁用状态
                    workScheduleService.update(object);
                }
            }
            taskPackage.setStatus("3");//关闭
        } else if (status.equals("1")) {//启用
            List<TaskPackageDispatch> TaskPackageDispatchList = taskPackageDispatchService.getListById(taskPackageId);
            for (TaskPackageDispatch taskPackageDispatch : TaskPackageDispatchList) {
                String reportStatus = taskPackageDispatch.getReportStatus();
                if ("5".equals(reportStatus) || "1".equals(reportStatus)) {//未汇报
                    String id = taskPackageDispatch.getId();
                    WorkSchedule object = workScheduleService.getObjectById(id);
                    object.setStatus("1");
                    workScheduleService.update(object);
                }
            }
            taskPackage.setStatus("2"); //已发布

        }
        return taskPackageDao.update(taskPackage);


    }

	/* (non-Javadoc)
	 * @see com.xinleju.cloud.oa.schedule.service.TaskPackageService#reminder(com.xinleju.cloud.oa.schedule.entity.TaskPackage)
	 */

    //催办 发送待阅
    @Override
    public int reminder(String userJson, Map<String, Object> map) throws Exception {

        String taskPackageId = (String) map.get("taskPackageId");
        TaskPackage taskPackage = taskPackageDao.getObjectById(taskPackageId);
        List<TaskPackageDispatch> TaskPackageDispatchList = taskPackageDispatchService.getListById(taskPackage.getId());
        for (TaskPackageDispatch taskPackageDispatch : TaskPackageDispatchList) {
            String reportStatus = taskPackageDispatch.getReportStatus();
            if ("1".equals(reportStatus)) {
                SysNoticeMsgDto sysNoticeMsgDto = new SysNoticeMsgDto();
                sysNoticeMsgDto.setId(IDGenerator.getUUID());
                sysNoticeMsgDto.setTitle(taskPackageDispatch.getContent());
                sysNoticeMsgDto.setUserId(taskPackageDispatch.getDutyUserId());
                sysNoticeMsgDto.setUserName(taskPackageDispatch.getDutyUser());
                sysNoticeMsgDto.setMsgType(true);
                sysNoticeMsgDto.setOpType("DY");
                sysNoticeMsgDto.setDelflag(false);
                sysNoticeMsgDto.setSource("OA");
                sysNoticeMsgDto.setLoginName(doGetDutyUserLoginName(userJson,taskPackageDispatch.getDutyUserId()));
                sysNoticeMsgDto.setAppCode("flow");
                sysNoticeMsgDto.setBusinessId(taskPackageDispatch.getId());
                sysNoticeMsgDto.setIpAddress("");
                sysNoticeMsgDto.setSendDate(new Timestamp(new Date().getTime()));
                sysNoticeMsgDto.setIsOpen(true);
                sysNoticeMsgDto.setFirstType("SCHEDULE");
                sysNoticeMsgDto.setUrl("oa/taskPackageDispatch/taskPackageDispatch_view.html?dispatchId=" + taskPackageDispatch.getId() + "&noticeFlag=DY&type=view&id=" + sysNoticeMsgDto.getId());
                String json = JacksonUtils.toJson(sysNoticeMsgDto);
                sysNoticeMsgDtoServiceCustomer.save(userJson, json);
            }
        }
        return 0;
    }

    /* (non-Javadoc)
     * @see com.xinleju.cloud.oa.schedule.service.TaskPackageService#sendTaskAgain(java.lang.String, java.util.Map)
     */
    @Override
    public int sendTaskAgain(String userJson, Map<String, Object> map) throws Exception {
        String taskPackageId = (String) map.get("sendTaskId");
        TaskPackage taskPackage = taskPackageDao.getObjectById(taskPackageId);
        List<TaskPackageDispatch> TaskPackageDispatchList = taskPackageDispatchService.getListById(taskPackageId);
        if (TaskPackageDispatchList != null && TaskPackageDispatchList.size() > 0) {
            for (TaskPackageDispatch taskPackageDispatch : TaskPackageDispatchList) {
                String reportStatus = taskPackageDispatch.getReportStatus();
                if ("5".equals(reportStatus)) {
                    SysNoticeMsgDto sysNoticeMsgDto = new SysNoticeMsgDto();
                    sysNoticeMsgDto.setId(IDGenerator.getUUID());
                    sysNoticeMsgDto.setTitle(taskPackageDispatch.getContent());
                    sysNoticeMsgDto.setUserId(taskPackageDispatch.getDutyUserId());
                    sysNoticeMsgDto.setUserName(taskPackageDispatch.getDutyUser());
                    sysNoticeMsgDto.setMsgType(true);
                    sysNoticeMsgDto.setOpType("DB");
                    sysNoticeMsgDto.setDelflag(false);
                    sysNoticeMsgDto.setSource("OA");
                    sysNoticeMsgDto.setLoginName(doGetDutyUserLoginName(userJson,taskPackageDispatch.getDutyUserId()));
                    sysNoticeMsgDto.setAppCode("flow");
                    sysNoticeMsgDto.setBusinessId(taskPackageDispatch.getId());
                    sysNoticeMsgDto.setIpAddress("");
                    sysNoticeMsgDto.setSendDate(new Timestamp(new Date().getTime()));
                    sysNoticeMsgDto.setIsOpen(true);
                    sysNoticeMsgDto.setFirstType("SCHEDULE");
                    sysNoticeMsgDto.setUrl("oa/taskPackageDispatch/taskPackageDispatch_flow.html?dispatchId=" + taskPackageDispatch.getId() + "&noticeFlag=DB&type=view&id=" + sysNoticeMsgDto.getId());
                    String json = JacksonUtils.toJson(sysNoticeMsgDto);
                    sysNoticeMsgDtoServiceCustomer.save(userJson, json);
                    taskPackageDispatch.setReportStatus("4");//状态设置为发送选中
                    taskPackageDispatchService.update(taskPackageDispatch);
                }
            }
        }

        return 1;
    }


}
