package com.xinleju.cloud.oa.content.dao.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.xinleju.cloud.oa.content.dao.ContentChildDao;
import com.xinleju.cloud.oa.content.dao.ContentTypeDao;
import com.xinleju.cloud.oa.content.entity.ContentChild;
import com.xinleju.cloud.oa.content.entity.ContentType;
import com.xinleju.cloud.oa.content.util.SqlStatementUtil;
import com.xinleju.platform.base.utils.LoginUtils;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.sys.org.dto.OrgnazationDto;
import com.xinleju.platform.tools.data.JacksonUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.ibatis.session.SqlSession;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.xinleju.platform.base.dao.impl.BaseDaoImpl;
import com.xinleju.cloud.oa.content.dao.ContentRowTypeDao;
import com.xinleju.cloud.oa.content.entity.ContentRowAttribute;
import com.xinleju.cloud.oa.content.entity.ContentRowType;

/**
 * @author admin
 *
 *
 */

@Repository
public class ContentRowTypeDaoImpl extends BaseDaoImpl<String,ContentRowType> implements ContentRowTypeDao {
	private static Logger log = Logger.getLogger(ContentRowTypeDaoImpl.class);
	@Autowired
	private ContentTypeDao contentTypeDao;
	@Autowired
	private ContentChildDao contentChildDao;

	public ContentRowTypeDaoImpl() {
		super();
	}

	@Override
	public int queryTypeCount(String paramater) {

		return getSqlSession().selectOne("com.xinleju.cloud.oa.content.entity.ContentRowType.queryTypeCount", paramater);
	}

	@Override
	public List<ContentRowType> getContentRowTypePage(Map map) {
		return getSqlSession().selectList("com.xinleju.cloud.oa.content.entity.ContentRowType.getContentRowTypePage", map);
	}

	@Override
	public Integer getContentRowTypeCount(Map map) {
		return getSqlSession().selectOne("com.xinleju.cloud.oa.content.entity.ContentRowType.getContentRowTypeCount", map);
	}


	@Override
	public ContentRowType selectMaxSortContentRowType(Map map) {
		return getSqlSession().selectOne("com.xinleju.cloud.oa.content.entity.ContentRowType.selectMaxSortContentRowType", map);
	}

	@Override
	public ContentRowType selectMinSortContentRowType(Map map) {
		return getSqlSession().selectOne("com.xinleju.cloud.oa.content.entity.ContentRowType.selectMinSortContentRowType", map);
	}

	@Override
	public Integer switchOrder(Map map) {
		return getSqlSession().update("com.xinleju.cloud.oa.content.entity.ContentRowType.switchOrder", map);
	}

	@Override
	public Integer updateStickTimeOut() {
		return this.getSqlSession().update("com.xinleju.cloud.oa.content.entity.ContentRowType.updateStickTimeOut");
	}

	@Override
	public List<ContentRowType> querySameList(Map map) {
		return this.getSqlSession().selectList("com.xinleju.cloud.oa.content.entity.ContentRowType.querySameList", map);
	}

	@Override
	public Page getObjectsByPage(Map map) {

		map.put("delflag", false);
		Map<String,List<OrgnazationDto>> authMap = (Map<String,List<OrgnazationDto>>)map.get("dataAuth");
		if(authMap!=null&&!authMap.isEmpty ()){
			//List<OrgnazationDto> companyList = JacksonUtils.fromJson (JacksonUtils.toJson (authMap.get("companyList")),List.class,OrgnazationDto.class);
			List<OrgnazationDto> deptList = JacksonUtils.fromJson (JacksonUtils.toJson (authMap.get("deptList")),List.class,OrgnazationDto.class);
			//if(companyList.isEmpty ()&&deptList.isEmpty ()){
			if(deptList.isEmpty ()){
				map.put ("createPersonId", LoginUtils.getSecurityUserBeanInfo ().getSecurityUserDto ().getId ());
			}else{
				StringBuffer deptIds =  new StringBuffer ();
				for(OrgnazationDto dept:deptList){
					deptIds.append ("\"").append (dept.getId ()).append ("\",");
				}
				map.put("deptFields",deptIds.substring (0,deptIds.lastIndexOf (",")));
			}
		}
		Page page = new Page();
		page.setLimit((Integer) map.get("limit"));
		page.setStart((Integer) map.get("start"));
		Map countMap = new HashMap(map.size());
		countMap.putAll(map);
		SqlSession sqlSession = this.getSqlSession();
		String pageSqlStatment = SqlStatementUtil.getPageSqlStatment(map, ContentRowType.class);
		List<ContentRowType> list = sqlSession.selectList(ContentRowType.class.getName() + ".queryObjectsByPage", pageSqlStatment);
		page.setList(list);
		String pageCountSqlStatment = SqlStatementUtil.getPageCountSqlStatment(countMap, ContentRowType.class);
		Integer count = sqlSession.selectOne(ContentRowType.class.getName() + ".queryObjectsCountByPage", pageCountSqlStatment);
		page.setTotal(count);
		return page;
	}

	@Override
	public List<ContentRowType> checkUniqueCode(ContentRowType contentRowType) {
		 return this.getSqlSession().selectList("com.xinleju.cloud.oa.content.entity.ContentRowType.checkUniqueCode", contentRowType);
	}

	@Override
	public List querContentRowTypeList(Map map) {
		SqlSession sqlSession = this.getSqlSession();
		String pageSqlStatment = SqlStatementUtil.getPageSqlStatment(map, ContentRowType.class);
		List<ContentRowType> list = sqlSession.selectList(ContentRowType.class.getName() + ".queryObjectsList", pageSqlStatment);
		return list;
	}

	@Override
	public List<Map<String, Object>> queryListForMobile(Map<String, Object> paramMap) {
		SqlSession sqlSession = this.getSqlSession();
		String sqlStatment = getQueryListForMobileSql(paramMap);
		List<Map<String,Object>> list = sqlSession.selectList(ContentRowType.class.getName() + ".queryListForMobile",sqlStatment);
		return list;
	}

	@Override
	public Integer queryListForMobileCount(Map<String, Object> paramMap) {
		SqlSession sqlSession = this.getSqlSession();
		String sqlStatment = getQueryListCountForMobileSql(paramMap);
		Integer totalCount = sqlSession.selectOne(ContentRowType.class.getName() + ".queryListForMobileCount",sqlStatment);
		return totalCount;
	}

	private String getQueryListForMobileSql(Map<String,Object> paramMap){
		//获取大类编码集合
		List<String> contentTypeCodeList = (List<String>) paramMap.get("contentTypeCodeList");
		String deptFields = (String) paramMap.get("deptFields");
		Integer start = (Integer) paramMap.get("start");
		Integer limit = (Integer) paramMap.get("limit");
		String currentUserId = (String) paramMap.get("currentUserId");
		Map<String,Object> contentTypeAuthSearchMap = (Map<String, Object>) paramMap.get("contentTypeAuthSearchMap");
		int alias = 0;
		StringBuffer sqlBuf = new StringBuffer();
		for (String contentTypeCode:contentTypeCodeList) {
			String dataAuthSearch = (String) contentTypeAuthSearchMap.get(contentTypeCode);
			String contentRowTypeAlias = "t"+(alias++);
			String contentTypeAlias = "t"+(alias++);

			sqlBuf.append(" SELECT\n");
			sqlBuf.append("        "+contentRowTypeAlias+".id,\n");
			sqlBuf.append("        "+contentRowTypeAlias+".title as title,\n");
			sqlBuf.append("        "+contentRowTypeAlias+".code as code,\n");
			sqlBuf.append("        "+contentRowTypeAlias+".stick as stick,\n");
			sqlBuf.append("        "+contentRowTypeAlias+".publish_date as publishDate,\n");
			sqlBuf.append("        "+contentRowTypeAlias+".status as status,\n");
			sqlBuf.append("        "+contentRowTypeAlias+".belong_dept_id as belongDeptId,\n");
			sqlBuf.append("        "+contentRowTypeAlias+".belong_dept_name as belongDeptName,\n");
			sqlBuf.append("        "+contentRowTypeAlias+".author as author,\n");
			sqlBuf.append("        "+contentRowTypeAlias+".author_id as authorId,\n");
			sqlBuf.append("        "+contentTypeAlias+".id as contentTypeId,\n");
			sqlBuf.append("        "+contentTypeAlias+".name as contentTypeName,\n");
			sqlBuf.append("        "+contentTypeAlias+".new_icon_days as newIconDays,\n");
			sqlBuf.append("        "+contentTypeAlias+".code as contentTypeCode\n");
			sqlBuf.append("        FROM\n");
			sqlBuf.append("        oa_content_row_type "+contentRowTypeAlias+"\n");
			sqlBuf.append("        LEFT JOIN\n");
			sqlBuf.append("        oa_content_type "+contentTypeAlias+"\n");
			sqlBuf.append("        ON "+contentRowTypeAlias+".content_type_id = "+contentTypeAlias+".id\n");
			sqlBuf.append("        WHERE "+contentRowTypeAlias+".delflag=0\n");
			sqlBuf.append("        AND \n");
			sqlBuf.append("        "+contentRowTypeAlias+".status='PUBLISHED'\n" );
			//sqlBuf.append("        AND "+contentTypeAlias+".content_type = 'NEWS'");
			sqlBuf.append("		  AND "+contentTypeAlias+".code = '"+contentTypeCode+"'");
			if("newsSearch".equals(dataAuthSearch)&& StringUtils.isNotBlank(deptFields)){
				sqlBuf.append(" and "+contentRowTypeAlias+".belong_dept_id in (" + deptFields + ")\n");
			}else {
				sqlBuf.append(" and "+contentRowTypeAlias+".create_person_id = '"+currentUserId+"' \n");
			}
			sqlBuf.append(" UNION ALL ");
		}

		String sql = "select tt.id,tt.title,tt.code,tt.publishDate,tt.status,tt.belongDeptId,\n" +
				"tt.belongDeptName,tt.author,tt.authorId,tt.contentTypeId,tt.contentTypeName,tt.contentTypeCode,tt.stick,tt.newIconDays from (\n" +
				sqlBuf.substring(0,sqlBuf.lastIndexOf("UNION ALL"))+
				") tt";
		sql += " order by tt.stick DESC ,tt.publishDate DESC\n";
		sql += " limit "+start+","+limit + "\n";

		log.info("getQueryListForMobileSql===== "+ sql);
		return sql;
	}

	private String getQueryListCountForMobileSql(Map<String,Object> paramMap){
		//获取大类编码集合
		List<String> contentTypeCodeList = (List<String>) paramMap.get("contentTypeCodeList");
		String deptFields = (String) paramMap.get("deptFields");
		Integer start = (Integer) paramMap.get("start");
		Integer limit = (Integer) paramMap.get("limit");
		String currentUserId = (String) paramMap.get("currentUserId");
		Map<String,Object> contentTypeAuthSearchMap = (Map<String, Object>) paramMap.get("contentTypeAuthSearchMap");
		int alias = 0;
		StringBuffer sqlBuf = new StringBuffer();
		for (String contentTypeCode:contentTypeCodeList) {
			String dataAuthSearch = (String) contentTypeAuthSearchMap.get(contentTypeCode);
			String contentRowTypeAlias = "t"+(alias++);
			String contentTypeAlias = "t"+(alias++);

			sqlBuf.append(" SELECT\n");
			sqlBuf.append("        "+contentRowTypeAlias+".id,\n");
			sqlBuf.append("        "+contentRowTypeAlias+".title as title,\n");
			sqlBuf.append("        "+contentRowTypeAlias+".code as code,\n");
			sqlBuf.append("        "+contentRowTypeAlias+".stick as stick,\n");
			sqlBuf.append("        "+contentRowTypeAlias+".publish_date as publishDate,\n");
			sqlBuf.append("        "+contentRowTypeAlias+".status as status,\n");
			sqlBuf.append("        "+contentRowTypeAlias+".belong_dept_id as belongDeptId,\n");
			sqlBuf.append("        "+contentRowTypeAlias+".belong_dept_name as belongDeptName,\n");
			sqlBuf.append("        "+contentRowTypeAlias+".author as author,\n");
			sqlBuf.append("        "+contentRowTypeAlias+".author_id as authorId,\n");
			sqlBuf.append("        "+contentTypeAlias+".id as contentTypeId,\n");
			sqlBuf.append("        "+contentTypeAlias+".name as contentTypeName,\n");
			sqlBuf.append("        "+contentTypeAlias+".new_icon_days as newIconDays,\n");
			sqlBuf.append("        "+contentTypeAlias+".code as contentTypeCode\n");
			sqlBuf.append("        FROM\n");
			sqlBuf.append("        oa_content_row_type "+contentRowTypeAlias+"\n");
			sqlBuf.append("        LEFT JOIN\n");
			sqlBuf.append("        oa_content_type "+contentTypeAlias+"\n");
			sqlBuf.append("        ON "+contentRowTypeAlias+".content_type_id = "+contentTypeAlias+".id\n");
			sqlBuf.append("        WHERE "+contentRowTypeAlias+".delflag=0\n");
			sqlBuf.append("        AND \n");
			sqlBuf.append("        "+contentRowTypeAlias+".status='PUBLISHED'\n" );
			//sqlBuf.append("        AND "+contentTypeAlias+".content_type = 'NEWS'");
			sqlBuf.append("		  AND "+contentTypeAlias+".code = '"+contentTypeCode+"'");
			if("newsSearch".equals(dataAuthSearch)&& StringUtils.isNotBlank(deptFields)){
				sqlBuf.append(" and "+contentRowTypeAlias+".belong_dept_id in (" + deptFields + ")\n");
			}else{
				sqlBuf.append(" and "+contentRowTypeAlias+".create_person_id = '"+currentUserId+"' \n");
			}
			sqlBuf.append(" UNION ALL ");
		}

		String sql = "select count(tt.id) from (\n" +
				sqlBuf.substring(0,sqlBuf.lastIndexOf("UNION ALL"))+
				") tt";
		return sql;
	}

	@Override
	public Map<String, Object> queryObjectInfoById(Map<String, Object> paramMap) {
		SqlSession sqlSession = this.getSqlSession();
		return sqlSession.selectOne(ContentRowType.class.getName() + ".queryObjectInfoById",paramMap);
	}

	public Map<String, Object> getMaxCodeByNowYearAndCodeType(Map map) {
		return getSqlSession().selectOne("com.xinleju.cloud.oa.content.entity.ContentRowType.getMaxCodeByNowYearAndCodeType", map);
	}
}
