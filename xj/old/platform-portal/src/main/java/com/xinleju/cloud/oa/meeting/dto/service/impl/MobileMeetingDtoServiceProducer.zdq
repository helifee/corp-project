package com.xinleju.cloud.oa.meeting.dto.service.impl;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.cloud.oa.meeting.dto.MeetingDto;
import com.xinleju.cloud.oa.meeting.dto.MeetingReplyDto;
import com.xinleju.cloud.oa.meeting.dto.service.MobileMeetingDtoServiceCustomer;
import com.xinleju.cloud.oa.meeting.entity.Meeting;
import com.xinleju.cloud.oa.meeting.entity.MeetingSummary;
import com.xinleju.cloud.oa.meeting.service.MeetingPartnerService;
import com.xinleju.cloud.oa.meeting.service.MeetingReplyService;
import com.xinleju.cloud.oa.meeting.service.MeetingService;
import com.xinleju.cloud.oa.meeting.service.MeetingSummaryService;
import com.xinleju.cloud.oa.meeting.utils.MeetingStatusType;
import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.LoginUtils;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.base.utils.SecurityUserBeanInfo;
import com.xinleju.platform.tools.data.JacksonUtils;
/**
 * @author admin
 * 
 *
 */
 
public class MobileMeetingDtoServiceProducer implements MobileMeetingDtoServiceCustomer{
	
	private static Logger log = Logger.getLogger(MobileMeetingDtoServiceProducer.class);
	@Autowired
	private MeetingService meetingService;
	@Autowired
	private MeetingSummaryService meetingSummaryService;
	@Autowired
	private MeetingPartnerService meetingPartnerService;
	@Autowired
	private MeetingReplyService meetingReplyService;

	@Override
	public String pageQueryByParamMap(String userJson, String paramater) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
		
				SecurityUserBeanInfo userBeanInfo=JacksonUtils.fromJson(userJson, SecurityUserBeanInfo.class);
				map.put("userId", userBeanInfo.getSecurityUserDto().getId());
				
				String dataType = map.get("dataType").toString();
				Page page= null;
				if(StringUtils.isNotBlank(dataType)){
					if(dataType.equals("toDo")){
						map.put("status", MeetingStatusType.NOTBEGIN.getCode());
						page=meetingService.getMobileMeetingByPage(map);
					}else if(dataType.equals("haveDone")){
						map.put("status", MeetingStatusType.ISOVER.getCode());
						page=meetingService.getMobileMeetingByPage(map);
					}
					if(dataType.equals("summary")){
						map.put("status", MeetingStatusType.ISOVER.getCode());
						page=meetingSummaryService.getMeetingSummaryByPage(map);
					}
				}
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=meetingService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryMeetingDetail(String userJson, String id) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			MeetingDto  meetingDto =JacksonUtils.fromJson(id, MeetingDto.class);
			 MeetingDto   result = meetingService.getMeetingAndAgendaById(meetingDto.getId());
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String querySummaryDetail(String userJson, String paramaterJson) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			MeetingSummary meetingSummary=JacksonUtils.fromJson(paramaterJson, MeetingSummary.class);
			MeetingSummary	result = meetingSummaryService.getObjectById(meetingSummary.getId());
			String newEntryDate = result.getEntryDate().substring(0,result.getEntryDate().length()-5);
			String newPlanBeginTime = result.getPlanBeginTime().substring(0,result.getPlanBeginTime().length()-5);
			String newActualBeginTime = result.getActualBeginTime().substring(0,result.getActualBeginTime().length()-5);
			result.setEntryDate(newEntryDate);
			result.setPlanBeginTime(newPlanBeginTime);
			result.setActualBeginTime(newActualBeginTime);
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String arg0, String arg1) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String deleteObjectById(String arg0, String arg1) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String deletePseudoAllObjectByIds(String arg0, String arg1) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String deletePseudoObjectById(String arg0, String arg1) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getCount(String arg0, String arg1) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getObjectById(String arg0, String getJson) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			Meeting meeting=JacksonUtils.fromJson(getJson, Meeting.class);
			Meeting	result = meetingService.getObjectById(meeting.getId());
			
			
			info.setResult(JacksonUtils.toJson(result));
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String arg0, String arg1) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String queryList(String arg0, String arg1) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String save(String arg0, String arg1) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String saveBatch(String arg0, String arg1) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String arg0, String arg1) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String updateBatch(String arg0, String arg1) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String queryUserIsjoin(String userJson, String meetingId) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		try {
			Map<String,Object> map = new HashMap<String, Object>();
			map.put("userId",userBeanInfo.getSecurityUserDto().getId());
			map.put("meetingId",meetingId);
			List<String> userIdentifiyList = meetingPartnerService.getUserIdentifiyByMeetingId(userJson, map);
			String viewJoin = null;
			//如果是会议未开始，并且参会者的身份是  主持人，组织人和与会人，则要显示参加或者不参加按钮
			if(userIdentifiyList.contains("1") || userIdentifiyList.contains("2") || userIdentifiyList.contains("3")){
				//获取到当前登录人员回复的最新记录
				MeetingReplyDto reployNew = meetingReplyService.queryMeetingReployByNew(userJson, map);
				if(reployNew != null && !"".equals(reployNew) && reployNew.getJoinFlag() != null){
					//0代表不参加，1代表参加
					String joinFlag = reployNew.getJoinFlag();
					if(joinFlag.equals("0")){
						viewJoin = "no";
					}else{
						viewJoin = "yes";
					}
				}else{
					viewJoin = "all";
				}
			}else{
				viewJoin = "allNo";
			}
			
			info.setResult(viewJoin);
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
}
