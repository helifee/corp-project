package com.xinleju.cloud.oa.bbs.dao.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.xinleju.cloud.oa.bbs.dao.BbsReplyDao;
import com.xinleju.cloud.oa.bbs.dao.BbsTopicDao;
import com.xinleju.cloud.oa.bbs.entity.BbsTopic;
import com.xinleju.cloud.oa.content.util.SqlStatementUtil;
import com.xinleju.platform.base.dao.impl.BaseDaoImpl;
import com.xinleju.platform.base.utils.Page;

/**
 * @author admin
 * 
 * 
 */

@Repository
public class BbsTopicDaoImpl extends BaseDaoImpl<String,BbsTopic> implements BbsTopicDao{

	public BbsTopicDaoImpl() {
		super();
	}
    @Autowired
	private BbsReplyDao bbsReplyDao;
	@Override
	public List<BbsTopic> queryBeanList(Map map) {
		return this.getSqlSession().selectList("com.xinleju.cloud.oa.bbs.entity.BbsTopic.queryBeanList",map);
	}

	@Override
	public Integer queryBeanCount(Map map) {
		return this.getSqlSession().selectOne("com.xinleju.cloud.oa.bbs.entity.BbsTopic.queryBeanCount",map);
	}

	@Override
	public BbsTopic selectMaxSortBbsTopic(Map paramTrans) {
		return this.getSqlSession().selectOne("com.xinleju.cloud.oa.bbs.entity.BbsTopic.selectMaxSortBbsTopic",paramTrans);
	}
	@Override
	public Page getObjectsByPage(Map map) {

		map.put("delflag", false);
		if(map.get("status")!=null){
			String status=(String) map.get("status");
			if(!"DRAFT".equals(status)){
				map.put("status", "PUBLISHED");
			}
		}else{
			map.put("status", "PUBLISHED");
		}
		Page page = new Page();
		page.setLimit((Integer) map.get("limit"));
		page.setStart((Integer) map.get("start"));
		Map countMap = new HashMap (map.size());
		countMap.putAll(map);
		SqlSession sqlSession = this.getSqlSession();
		String pageSqlStatment = SqlStatementUtil.getPageSqlStatment(map, BbsTopic.class);
		List<BbsTopic> list = sqlSession.selectList(BbsTopic.class.getName() + ".queryObjectsByPage", pageSqlStatment);
		page.setList(list);
		String pageCountSqlStatment = SqlStatementUtil.getPageCountSqlStatment(countMap, BbsTopic.class);
		Integer count = sqlSession.selectOne(BbsTopic.class.getName() + ".queryObjectsCountByPage", pageCountSqlStatment);
		page.setTotal(count);
		return page;
	}

	@Override
	@Transactional
	public int deleteObjectById(String id) throws DataAccessException {
		  int result = super.deleteObjectById (id);
		return result;
	}

	@Override
	public int deletePseudoObjectById(String id) throws DataAccessException {
		int result = super.deletePseudoObjectById (id);
		return result;
	}

	@Override
	public List<BbsTopic> queryBeanByIds(Map ids) {
		return this.getSqlSession().selectList ("com.xinleju.cloud.oa.bbs.entity.BbsTopic.queryBeanByIds",ids);
	}

	@Override
	public List<BbsTopic> queryReplyTopicPage(Map map) {
		return this.getSqlSession().selectList ("com.xinleju.cloud.oa.bbs.entity.BbsTopic.queryReplyTopicPage",map);
	}

	@Override
	public Integer queryReplyTopicCount(Map map) {
		return this.getSqlSession().selectOne ("com.xinleju.cloud.oa.bbs.entity.BbsTopic.queryReplyTopicCount",map);
	}

	@Override
	public int updateNoChangeDate(BbsTopic bbsTopic) {
		return getSqlSession().update("com.xinleju.cloud.oa.bbs.entity.BbsTopic.updateNoChangeDate", bbsTopic);
	}
}
