package com.xinleju.cloud.oa.servey.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.platform.base.service.impl.BaseServiceImpl;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.cloud.oa.servey.dao.ServeyPartyDao;
import com.xinleju.cloud.oa.servey.dao.ServeyResponseDao;
import com.xinleju.cloud.oa.servey.entity.ServeyParty;
import com.xinleju.cloud.oa.servey.entity.ServeyResponse;
import com.xinleju.cloud.oa.servey.service.ServeyPartyService;

/**
 * @author admin
 * 
 * 
 */

@Service
public class ServeyPartyServiceImpl extends  BaseServiceImpl<String,ServeyParty> implements ServeyPartyService{
	

	@Autowired
	private ServeyPartyDao serveyPartyDao;
	@Autowired
	private ServeyResponseDao serveyResponseDao;
	

	@Override
	public Page getServeyPartyByPage(Map map) throws Exception {
		// TODO Auto-generated method stub
		Page page=new Page();
		List<Map<String,Object>> list = serveyPartyDao.getServeyInfoPage(map);
		Integer count = serveyPartyDao.getServeyInfoPageCount(map);
		page.setLimit((Integer) map.get("limit") );
		page.setList(list);
		page.setStart((Integer) map.get("start"));
		page.setTotal(count);
		return page;
	}

	public String listToString(List list, char separator) {    
		StringBuilder sb = new StringBuilder();    
		for (int i = 0; i < list.size(); i++) {        
			sb.append(list.get(i)).append(separator);    
			}    
		return sb.toString().substring(0,sb.toString().length()-1);
	}

	@Override
	public Map queryJoinServeyUserInfo(Map map) throws Exception {
		// TODO Auto-generated method stub
		char ch = ',';
		Map<String,Object> userInfoMap = new HashMap<String,Object>();
		List<String> username = new ArrayList<String>();
		//首先获取该问卷下面的参与人数
		List<ServeyParty> listServey = serveyPartyDao.queryList(map);
		
		int countPartys =  0;
		if(listServey.size() > 0){
			countPartys = listServey.size();
			for (ServeyParty serveyParty : listServey) {
				username.add(serveyParty.getPartyName());
			}
		}
		//然后获取该问卷下面已经做过回复的人员数
		List<ServeyResponse> listResponse = serveyResponseDao.queryList(map);
		List<String> reployUsername = new ArrayList<String>();
		int countJoins = 0;
		if(listResponse.size() > 0){
			countJoins = listResponse.size();
			for (ServeyResponse serveyResponse : listResponse) {
				reployUsername.add(serveyResponse.getUserName());
			}
		}
		//获取已调查人员名称
		List<String> nojoinUsername = new ArrayList<String>();
		for (String usernameTem : username) {
			if(!reployUsername.contains(usernameTem)){
				nojoinUsername.add(usernameTem);
			}
		}
		String reployUsernames = null;
		String nojoinUsernames = null;
		if(reployUsername.size() > 0){
			 reployUsernames = listToString(reployUsername,ch);
		}
		if(nojoinUsername.size() > 0){
			nojoinUsernames = listToString(nojoinUsername,ch);
		}
		//定义未回复的人员数
		int noJoin = countPartys - countJoins;
		userInfoMap.put("countPartys", countPartys);
		userInfoMap.put("countJoins", countJoins);
		userInfoMap.put("noJoin", noJoin);
		userInfoMap.put("reployUsername", reployUsername);
		userInfoMap.put("nojoinUsername", nojoinUsername);
		return userInfoMap;
	}
}
