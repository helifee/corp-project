package com.xinleju.cloud.oa.office.service.impl;

import java.beans.BeanInfo;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.xinleju.platform.tools.data.JacksonUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.cloud.oa.office.dao.OfficeHouseDao;
import com.xinleju.cloud.oa.office.dto.OfficeHouseDto;
import com.xinleju.cloud.oa.office.entity.OfficeHouse;
import com.xinleju.cloud.oa.office.service.OfficeHouseService;
import com.xinleju.cloud.oa.sys.utils.SortType;
import com.xinleju.cloud.oa.sys.utils.StatusType;
import com.xinleju.platform.base.service.impl.BaseServiceImpl;
import com.xinleju.platform.base.utils.Page;

/**
 * @author wangw
 * 
 * 
 */

@Service
public class OfficeHouseServiceImpl extends  BaseServiceImpl<String,OfficeHouse> implements OfficeHouseService{
	

	@Autowired
	private OfficeHouseDao officeHouseDao;
	@Override
	public List<OfficeHouse> queryListOfficeHouse(String program) throws Exception{
		// TODO Auto-generated method stub
		return officeHouseDao.queryListOfficeHouse(program);
	}

	@Override
	public List<OfficeHouse> getOfficeHouseTreeById(String program) throws Exception{
		// TODO Auto-generated method stub
		return officeHouseDao.getOfficeHouseTreeById(program);
	}

	@Override
	public List<OfficeHouse> queryOfficeHouseByParentId(String program)throws Exception {
		// TODO Auto-generated method stub
		return officeHouseDao.queryOfficeHouseByParentId(program);
	}

	/* (non-Javadoc)
	 * @see com.xinleju.cloud.oa.office.service.OfficeHouseService#getOfficeHousepage(java.util.Map)
	 */
	@Override
	public Page getOfficeHousepage(Map<String,Object> map)throws Exception {
	  Page p=new Page();
	  List<Map<String,Object>> list=officeHouseDao.getOfficeHousepage(map);
	  Integer total=officeHouseDao.getOfficeHousepageCount();
	  p.setLimit((Integer) map.get("limit"));
	  p.setList(list);
	  p.setStart((Integer) map.get("start"));
	  p.setTotal(total);
	  return p;
	}

	/* (non-Javadoc)
	 * @see com.xinleju.cloud.oa.office.service.OfficeHouseService#saveOfficeHouse(com.xinleju.cloud.oa.office.entity.OfficeHouse)
	 */
	@Override
	public List<OfficeHouseDto> queryTreeList(Map<String, Object> map)throws Exception {
	   	List<OfficeHouseDto> list=new ArrayList<OfficeHouseDto>();
	   	List<Map<String, Object>> baseList = officeHouseDao.queryTreeList(null);
		List<String> parentIds = officeHouseDao.getParentIdsList(null);
		for (Map<String, Object> beanMap : baseList) {
			OfficeHouseDto beanDto=new OfficeHouseDto();
			beanDto = JacksonUtils.fromJson(JacksonUtils.toJson(beanMap),OfficeHouseDto.class);
			String sort = beanDto.getSortNumber();
			String[] split = sort.split("-");
			Long i=(long) split.length;
			beanDto.setLevel(i);
			beanDto.setExpanded(false);
			beanDto.setLoaded(true);
			String id = beanDto.getId();
			if(parentIds.contains(id)){
				beanDto.setIsLeaf(false);
			}else{
				beanDto.setIsLeaf(true);
			}
			list.add(beanDto);
		}
	   return list;
	}
	public Map<String,Object> getbaseProjectTypeList(String id,List<OfficeHouseDto> list,Long level,Long num)throws Exception {
		  Map<String,Object> map=new HashMap<String, Object>();
		  Map<String,Object> resultmap=new HashMap<String, Object>();
		  map.put("parentId", id);
		  List<Map<String, Object>> baseEntryList = officeHouseDao.queryTreeList(map);
		  if(baseEntryList!=null&&baseEntryList.size()>0){
			  ++level;
			  for (Map<String, Object> entryMap : baseEntryList) {
				  ++num;
				  OfficeHouseDto entryDto=new OfficeHouseDto();
				  //transMapToBean(entryMap,entryDto);
				  entryDto = JacksonUtils.fromJson(JacksonUtils.toJson(entryMap),OfficeHouseDto.class);
				  entryDto.setLft(num);
				  entryDto.setLevel(level);
				  entryDto.setIsLeaf(false);
				  entryDto.setExpanded(false);
				  entryDto.setLoaded(true);
				  list.add(entryDto);
				  Map<String, Object> projectTypeList = getbaseProjectTypeList(entryMap.get("id").toString(),list,level,num);
				  num= (Long) projectTypeList.get("num");
				  entryDto.setRgt(num);
				  String isleaf = (String)projectTypeList.get("isleaf");
	    		  if("1".equals(isleaf)){
	    			  entryDto.setIsLeaf(true);
				  }else{
					  entryDto.setIsLeaf(false);
				  }
			}
			  ++num;
		  }else{
			  resultmap.put("isleaf", "1");
			  ++num;
		  }
		  resultmap.put("num", num);
		  resultmap.put("list", list);
		  return resultmap;
	  }
	public static void transMapToBean(Map<String, Object> map, Object obj) throws Exception {  
		  
		BeanInfo beanInfo = Introspector.getBeanInfo(obj.getClass());  
        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();  
  
        for (PropertyDescriptor property : propertyDescriptors) {  
            String key = property.getName();  
            if (map.containsKey(key)) {  
                Object value = map.get(key);  
                // 得到property对应的setter方法  
                Method setter = property.getWriteMethod();  
                setter.invoke(obj, value);  
            }  
        }  
    }

	@Override
	public int updateStatus(OfficeHouse entryBean,Boolean bl) throws Exception {
		String status = entryBean.getState().toString();
		if(StatusType.StatusClosed.getCode().equals(status)){//启用状态改为禁用
			//对子集全部启用禁用 
			this.updateChirdStatus(entryBean,status);
			entryBean.setState(status);
			officeHouseDao.update(entryBean);
		}else if(StatusType.StatusOpen.getCode().equals(status)){//禁用状态改为启用
			//对父集全部启用启用
			this.updateParentStatus(entryBean,status);
			entryBean.setState(status);
			officeHouseDao.update(entryBean);
			if(bl){
				//对子集全部启用禁用 
				this.updateChirdStatus(entryBean,status);
			}
		}
		return 1;
	}
	/**
	 * author:liyong
	 * describe: 修改子节点所有状态
	 * param:object
	 */
	public void updateChirdStatus(OfficeHouse object,String status){
		 Map<String,Object> param=new HashMap<>();
		 param.put("parentNodeId", object.getId());
		 List<OfficeHouse> projectList = officeHouseDao.queryList(param);
		 if(projectList!=null&&projectList.size()>0){
			 for (OfficeHouse entry : projectList) {
				 updateChirdStatus(entry,status);
				 entry.setState(status);
				 officeHouseDao.update(entry);
			 }
		 }
	}
	/**
	 * author:liuf
	 * describe: 修改父节点状态
	 * param:object
	 */
	public void  updateParentStatus(OfficeHouse object,String status){
		 String parentId = object.getParentNodeId();
		 OfficeHouse entry = officeHouseDao.getObjectById(parentId);
		 if(entry!=null){
		 	updateParentStatus(entry,status);
		 	entry.setState(status);
		 	officeHouseDao.update(entry);
		 }
	}

	@Override
	public String updateSort(OfficeHouse object, Map<String, Object> map)throws Exception {
		String  sortType= String.valueOf(map.get("sortType"));
		String sort1 = object.getSortNumber();
		String parentId = object.getParentNodeId();
		Map<String,Object> param=new HashMap<>();
		List<OfficeHouse> rulerList = officeHouseDao.getEntryListByParentId(parentId);
		if(SortType.SHIFTUP.getCode().equals(sortType)){
			for (int i = 0; i < rulerList.size(); i++) {
				String sort2 = rulerList.get(i).getSortNumber();
				if(sort2.equals(sort1)&&i==0){
					return "已经移到顶部！";
				}
				if(sort2.equals(sort1)&&i!=0){
					String sort3 = rulerList.get(i-1).getSortNumber();
					param.clear();
					param.put("oldSort", sort3);
					param.put("newSort", sort2);
					param.put("prefixId",rulerList.get(i-1).getPrefixId());
					officeHouseDao.updateAllNodes(param);
					param.clear();
					param.put("oldSort", sort2);
					param.put("newSort", sort3);
					param.put("prefixId",rulerList.get(i).getPrefixId());
					officeHouseDao.updateAllNodes(param);
					return "上移成功！";
				}
			}
		}else if(SortType.SHIFTDOWN.getCode().equals(sortType)){
			for (int i = 0; i < rulerList.size(); i++) {
				String sort2 = rulerList.get(i).getSortNumber();
				if(sort2.equals(sort1)&&i==rulerList.size()-1){
					return "已经移到底部！";
				}
				if(sort2.equals(sort1)&&i!=rulerList.size()-1){
					String sort3 = rulerList.get(i+1).getSortNumber();
					param.clear();
					param.put("oldSort", sort3);
					param.put("newSort", sort2);
					param.put("prefixId",rulerList.get(i+1).getPrefixId());
					officeHouseDao.updateAllNodes(param);
					param.clear();
					param.put("oldSort", sort2);
					param.put("newSort", sort3);
					param.put("prefixId",rulerList.get(i).getPrefixId());
					officeHouseDao.updateAllNodes(param);
					return "下移成功！";
				}
			}
		}else if(SortType.STICK.getCode().equals(sortType)){
		}else if(SortType.TOBOTTOM.getCode().equals(sortType)){
		}
		return "";
	}

	@Override
	public List<Map<String, Object>> getSortNum(Map<String, Object> paramater)throws Exception {
		return officeHouseDao.getSortNum(paramater);
	}

	@Override
	public void updateAllNodes(Map<String, Object> paramater)throws Exception {
		 officeHouseDao.updateAllNodes(paramater);
	}
	@Override
	public void updateAllPrefixId(Map<String, Object> paramater)throws Exception {
		officeHouseDao.updateAllPrefixId(paramater);
	}
	@Override
	public int updateBatchStatus(OfficeHouse entry) throws Exception {
		officeHouseDao.update(entry);
		if(StatusType.StatusOpen.getCode().equals(entry.getState().toString())){
			this.updateParentStatus(entry,StatusType.StatusOpen.getCode());
		}else if(StatusType.StatusClosed.getCode().equals(entry.getState().toString())){
			this.updateChirdStatus(entry,StatusType.StatusClosed.getCode());
		}
		return 1;
	}
}