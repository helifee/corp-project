package com.xinleju.cloud.oa.office.service.impl;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;



import org.apache.log4j.Logger;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.platform.base.service.impl.BaseServiceImpl;
import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.IDGenerator;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.tools.data.JacksonUtils;
import com.xinleju.cloud.oa.office.dao.OfficeInfoDao;
import com.xinleju.cloud.oa.office.dao.OfficeRecordDao;
import com.xinleju.cloud.oa.office.dto.OfficeRecordDto;
import com.xinleju.cloud.oa.office.entity.OfficeInfo;
import com.xinleju.cloud.oa.office.entity.OfficeRecord;
import com.xinleju.cloud.oa.office.service.OfficeRecordService;

/**
 * @author wangw
 *
 *
 */

@Service
public class OfficeRecordServiceImpl extends  BaseServiceImpl<String,OfficeRecord> implements OfficeRecordService{


	private static Logger log = Logger.getLogger(OfficeRecordServiceImpl.class);
	@Autowired
	private OfficeRecordDao officeRecordDao;

	@Autowired
	private OfficeInfoDao officeInfoDao;

	@Override
	public String importOfficeRecordByExcel(InputStream in,
			String fileName) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		/*ImportExcelUtil importExcelUtil = new ImportExcelUtil();
		List<List<Object>> listob = null;
		List<OfficeRecord> officeRecordList = new ArrayList<OfficeRecord>();
		try {
			listob = importExcelUtil.getBankListByExcel(in, fileName);
			in.close();
			//定义结存表中  用户编号为key，入库数量为value，同一种用户编号下面，value值一直相加
			Map<String,Integer> stockMap = new HashMap<String,Integer>();

			//该处可调用service相应方法进行数据保存到数据库中，现只对数据输出
	        for (int i = 0; i < listob.size(); i++) {
	            List<Object> lo = listob.get(i);
	            OfficeRecord vo = new OfficeRecord();
	            vo.setId(IDGenerator.getUUID());
	            vo.setStockName(String.valueOf(lo.get(0)));
	            vo.setHouseName(String.valueOf(lo.get(1)));
	            vo.setStockNum(String.valueOf(lo.get(2)));
	            //入库数量
	            vo.setInCount(String.valueOf(lo.get(3)));
	            officeRecordList.add(vo);
	            //同一种用户编号的入库数量一直累加
	            if(stockMap.containsKey(String.valueOf(lo.get(2)))){
	            	stockMap.put(String.valueOf(lo.get(2)), stockMap.get(String.valueOf(lo.get(2)))+Integer.parseInt(String.valueOf(lo.get(3))));
	            }else{
	            	stockMap.put(String.valueOf(lo.get(2)), Integer.parseInt(String.valueOf(lo.get(3))));
	            }
	        }
	        if(officeRecordList.size() > 0){
	        	officeRecordDao.saveBatch(officeRecordList);
	        }

	        //更新完入库表后，要根据用品编号跟新结存表
	        if(stockMap.size() > 0){
				List<OfficeInfo> listOfficeInfo = new ArrayList<OfficeInfo>();
				for (String key : stockMap.keySet()) {
					//key就是结存表中需要更新的用户编号，通过key找到结存表中唯一的一条记录
					//然后通过结存表的用户Id，获取这个结存对象
					Map<String, Object> updateMap = new HashMap<String, Object>();
					updateMap.put("stockNum", key);
					OfficeInfo officeInfo = officeInfoDao.queryList(updateMap).get(0);
					officeInfo.setStockCount(String.valueOf(Integer.parseInt(officeInfo.getStockCount()) + stockMap.get(key)));
					listOfficeInfo.add(officeInfo);
				}

				if(listOfficeInfo.size() > 0){
					officeInfoDao.updateBatch(listOfficeInfo);
				}
			}

	        info.setResult(JacksonUtils.toJson(officeRecordList));
		    info.setSucess(true);
		    info.setMsg("获取列表对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}*/
		return JacksonUtils.toJson(info);
	}

	@Override
	public Page getofficeRecordByPage(Map map) throws Exception {
		// TODO Auto-generated method stub
		Page page=new Page();
		List<Map<String,Object>> list = officeRecordDao.getOfficeRecordPage(map);
		Integer count = officeRecordDao.getOfficeRecordCount(map);
		page.setLimit((Integer) map.get("limit") );
		page.setList(list);
		page.setStart((Integer) map.get("start"));
		page.setTotal(count);
		return page;
	}

	@Override
	public String saveOfficeRecordByExcel(String username, Map map) {
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		int result = 0;
		List<OfficeRecordDto> listOfficeDto = (List<OfficeRecordDto>)map.get("officeRecordList");
		List<OfficeRecord> listOffice = new ArrayList<OfficeRecord>();
        if(listOfficeDto.size() > 0){
        	for (OfficeRecordDto officeRecordDto : listOfficeDto) {
        		OfficeRecord officeRecord = new OfficeRecord();
        		BeanUtils.copyProperties(officeRecordDto, officeRecord);
        		listOffice.add(officeRecord);
			}
        	result = officeRecordDao.saveBatch(listOffice);
        }

        info.setResult(JacksonUtils.toJson(listOffice));
	    info.setSucess(true);
	    info.setMsg("获取列表对象成功!");
        Map<String,Integer> stockMap = (Map<String,Integer> )map.get("stockMap");
        //更新完入库表后，要根据用品编号跟新结存表
        if(stockMap.size() > 0){
			List<OfficeInfo> listOfficeInfo = new ArrayList<OfficeInfo>();
			for (String key : stockMap.keySet()) {
				//key就是结存表中需要更新的用品编号，通过key找到结存表中唯一的一条记录，用品编号是唯一的
				//然后通过结存表的用户Id，获取这个结存对象
				Map<String, Object> updateMap = new HashMap<String, Object>();
				updateMap.put("stockNum", key);
				List<OfficeInfo> listOfficeInfoTem = officeInfoDao.queryList(updateMap);
				if(listOfficeInfoTem.size() > 0){
					OfficeInfo officeInfo = officeInfoDao.queryList(updateMap).get(0);
					if(officeInfo != null && !"".equals(officeInfo)){
						officeInfo.setStockCount(String.valueOf(Integer.parseInt(officeInfo.getStockCount()) + stockMap.get(key)));
						listOfficeInfo.add(officeInfo);
					}
				}
			}
			if(listOfficeInfo.size() > 0){
				officeInfoDao.updateBatch(listOfficeInfo);
			}
		}
	    return JacksonUtils.toJson(info);
	}


}
