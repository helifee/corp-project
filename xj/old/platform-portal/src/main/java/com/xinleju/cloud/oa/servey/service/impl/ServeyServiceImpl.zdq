package com.xinleju.cloud.oa.servey.service.impl;

import java.net.URLEncoder;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.xinleju.cloud.oa.sys.dto.SysTreeNodeDto;
import com.xinleju.platform.base.utils.*;
import com.xinleju.platform.sys.org.dto.service.UserDtoServiceCustomer;
import org.apache.commons.beanutils.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.xinleju.cloud.oa.meeting.utils.MeetingStatusType;
import com.xinleju.cloud.oa.servey.dao.ServeyCategoryDao;
import com.xinleju.cloud.oa.servey.dao.ServeyDao;
import com.xinleju.cloud.oa.servey.dao.ServeyPartyDao;
import com.xinleju.cloud.oa.servey.dao.ServeyQuestionDao;
import com.xinleju.cloud.oa.servey.dao.ServeyQuestionOptionDao;
import com.xinleju.cloud.oa.servey.dao.ServeyResponseDao;
import com.xinleju.cloud.oa.servey.dao.ServeySubQuestionDao;
import com.xinleju.cloud.oa.servey.dto.ServeyCategoryDto;
import com.xinleju.cloud.oa.servey.dto.ServeyDto;
import com.xinleju.cloud.oa.servey.dto.ServeyPartyDto;
import com.xinleju.cloud.oa.servey.dto.ServeyQuestionDto;
import com.xinleju.cloud.oa.servey.entity.Servey;
import com.xinleju.cloud.oa.servey.entity.ServeyCategory;
import com.xinleju.cloud.oa.servey.entity.ServeyParty;
import com.xinleju.cloud.oa.servey.entity.ServeyQuestion;
import com.xinleju.cloud.oa.servey.entity.ServeyQuestionOption;
import com.xinleju.cloud.oa.servey.entity.ServeyResponse;
import com.xinleju.cloud.oa.servey.entity.ServeySubQuestion;
import com.xinleju.cloud.oa.servey.service.ServeyService;
import com.xinleju.platform.base.service.impl.BaseServiceImpl;
import com.xinleju.platform.flow.dto.SysNoticeMsgDto;
import com.xinleju.platform.flow.dto.service.SysNoticeMsgDtoServiceCustomer;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * @author admin
 * 
 * 
 */

@Service
public class ServeyServiceImpl extends  BaseServiceImpl<String,Servey> implements ServeyService{
	

	@Autowired
	private ServeyDao serveyDao;
	
	@Autowired
	private ServeyPartyDao serveyPartyDao;
	
	@Autowired
	private ServeyQuestionDao serveyQuestionDao;
	
	@Autowired
	private ServeySubQuestionDao serveySubQuestionDao;
	
	@Autowired
	private ServeyQuestionOptionDao serveyQuestionOptionDao;
	
	@Autowired
	private ServeyCategoryDao serveyCategoryDao;
	
	@Autowired
	private SysNoticeMsgDtoServiceCustomer sysNoticeMsgDtoServiceCustomer;
	
	@Autowired
	private ServeyResponseDao serveyResponseDao;

	@Autowired
	private UserDtoServiceCustomer userDtoServiceCustomer;
	
   @Override
    public Page getContentTypeByPage(Map map) throws Exception {
        // TODO Auto-generated method stub
        Page page = this.serveyDao.queryObjectsByPage(map);
        return page;
    }

	@Override
	public Object saveServey(String userInfo, Map map) throws Exception {
		Servey servey= new Servey();
		String id = getStr(map.get("id"));
		String directConclusion = getStr(map.get("directConclusion"));
		String serveyNoticeType = getStr(map.get("serveyNoticeType"));
		servey.setId(id);
		servey.setName(getStr(map.get("name")));
		servey.setReferenceId(getStr(map.get("referenceId")));
		servey.setServeyCategoryId(getStr(map.get("parentId")));
		servey.setDescription(getStr(map.get("description")));
		servey.setFromDate(getDate(map.get("fromDate")));
		servey.setThruDate(getDate(map.get("thruDate")));
		servey.setServeyType(getStr(map.get("serveyType")));
		servey.setServeyNoticeType(serveyNoticeType);
		servey.setServeyMultipleSurveys(getStr(map.get("serveyMultipleSurveys")));
		if(directConclusion != null && directConclusion.equals("1")){
			servey.setStatus(MeetingStatusType.FINISHED.getCode());
			servey.setFlowStatus(MeetingStatusType.FINISHED.getCode());
		}else{
			servey.setStatus(MeetingStatusType.DRAFT.getCode());
			servey.setFlowStatus(MeetingStatusType.DRAFT.getCode());
		}
		List<ServeyParty> serveyPartyList = new ArrayList<ServeyParty>();
		String readers = getStr(map.get("reader"));
		String participants = getStr(map.get("participant"));
		String readerIds = getStr(map.get("readerId"));
		String participantIds = getStr(map.get("participantId"));
		String closingNotices = getStr(map.get("closingNotice"));
		String closingNoticeIds = getStr(map.get("closingNoticeId"));
		if(readers != null){
			String[] readerArr = readers.split(",");
			String[] readerIdArr = readerIds.split(",");
			for(int i = 0; i < readerArr.length;i++){
				ServeyParty serveyParty = new ServeyParty();
				serveyParty.setId(IDGenerator.getUUID());
				serveyParty.setPartyId(readerIdArr[i]);
				serveyParty.setPartyName(readerArr[i]);
				serveyParty.setPartyType("PERSON");
				serveyParty.setType("READER");
				serveyParty.setServeyId(id);
				serveyPartyList.add(serveyParty);
			}
		}
		if(participants != null){
			String[] participantArr = participants.split(",");
			String[] participantIdsArr = participantIds.split(",");
			for(int i = 0; i < participantArr.length;i++){
				ServeyParty serveyParty = new ServeyParty();
				serveyParty.setId(IDGenerator.getUUID());
				serveyParty.setPartyId(participantIdsArr[i]);
				serveyParty.setPartyName(participantArr[i]);
				serveyParty.setPartyType("PERSON");
				serveyParty.setType("PARTY");
				serveyParty.setServeyId(id);
				serveyPartyList.add(serveyParty);
			}
		}
		
		if(closingNotices != null){
			String[] closingNoticeArr = closingNotices.split(",");
			String[] closingNoticeIdArr = closingNoticeIds.split(",");
			for(int i = 0; i < closingNoticeArr.length;i++){
				ServeyParty serveyParty = new ServeyParty();
				serveyParty.setId(IDGenerator.getUUID());
				serveyParty.setPartyId(closingNoticeIdArr[i]);
				serveyParty.setPartyName(closingNoticeArr[i]);
				serveyParty.setPartyType("PERSON");
				serveyParty.setType("NOTICE");
				serveyParty.setServeyId(id);
				serveyPartyList.add(serveyParty);
			}
		}
		List<ServeyQuestion> serveyQuestionList = new ArrayList<ServeyQuestion>();
		List<ServeySubQuestion> serveySubQuestionList = new ArrayList<ServeySubQuestion>();
		List<ServeyQuestionOption> serveyQuestionOptionList = new ArrayList<ServeyQuestionOption>();
		String paramaterJson = JacksonUtils.toJson(map);
		Map<String, Object> serveyMap = JSON.parseObject(paramaterJson,new TypeReference<Map<String, Object>>(){});
		Object list = serveyMap.get("data");
		List<JSONObject> ll = (List)list;
		for (JSONObject jobj : ll) {
			ServeyQuestion serveyQuestion = new ServeyQuestion();
			String uuid = IDGenerator.getUUID();
			serveyQuestion.setId(uuid);
			serveyQuestion.setServeyId(id);
			serveyQuestion.setQuestion(getStr(jobj.get("question")));
			serveyQuestion.setQuestionTip(getStr(jobj.get("questionTip")));
			serveyQuestion.setQuestionNum(getStr(jobj.get("serialNumber")));
			serveyQuestion.setQuestionTypeCode(getStr(jobj.get("questionTypeCode")));
			serveyQuestion.setQuestionRequired(getStr(jobj.get("questionRequired")));
			String questionScore = getStr(jobj.get("questionScore"));
			if(questionScore == null || questionScore.equals("") || questionScore.equals("undefined")){
				questionScore = "0";
			}
			serveyQuestion.setQuestionScore(questionScore);
			String questionOther = getStr(jobj.get("questionOther"));
			serveyQuestionList.add(serveyQuestion);
			if(jobj.get("problemIdTexts") != null){
				if(getStr(jobj.get("problemIdTexts")) != null && !(getStr(jobj.get("problemIdTexts")).equals(""))){
					String[] problemIdTextArr = getStr(jobj.get("problemIdTexts")).split("、");
					String[] problemIdNumArr = getStr(jobj.get("problemIdNums")).split("、");
					for(int j = 0; j < problemIdTextArr.length;j++){
						ServeySubQuestion serveySubQuestion = new ServeySubQuestion();
						serveySubQuestion.setId(IDGenerator.getUUID());
						serveySubQuestion.setQuestion_id(uuid);
						serveySubQuestion.setQuestion_content(problemIdTextArr[j]);
						serveySubQuestion.setQuestionCode(problemIdNumArr[j]);
						serveySubQuestionList.add(serveySubQuestion);
					}
				}
			}
			if(jobj.get("optionIdTexts") != null){
				if(getStr(jobj.get("optionIdTexts")) != null && !(getStr(jobj.get("optionIdTexts")).equals(""))){
					String[] optionIdTextArr = getStr(jobj.get("optionIdTexts")).split("、");
					String[] optionIdNumArr = getStr(jobj.get("optionIdNums")).split("、");
					String[] weightFactorArr = getStr(jobj.get("weightFactorInfos")).split("、");
					if(optionIdTextArr != null){
						for(int j = 0; j < optionIdTextArr.length;j++){
							ServeyQuestionOption serveyQuestionOption = new ServeyQuestionOption();
							serveyQuestionOption.setId(IDGenerator.getUUID());
							serveyQuestionOption.setDescription(optionIdTextArr[j]);
							if(weightFactorArr != null && weightFactorArr[j] != null && !(weightFactorArr[j].equals("null"))){
								serveyQuestionOption.setWeightFactor(Integer.valueOf(weightFactorArr[j]));
							}else{
								serveyQuestionOption.setWeightFactor(0);
							}
							serveyQuestionOption.setQuestionId(uuid);
							serveyQuestionOption.setSequenceNum(optionIdNumArr[j]);
							serveyQuestionOption.setOptionType(0);
							serveyQuestionOptionList.add(serveyQuestionOption);
						}
						if(questionOther != null && questionOther.equals("1")){
							ServeyQuestionOption serveyQuestionOption = new ServeyQuestionOption();
							serveyQuestionOption.setId(IDGenerator.getUUID());
							serveyQuestionOption.setDescription("其他");
							serveyQuestionOption.setQuestionId(uuid);
							serveyQuestionOption.setSequenceNum("其他");
							serveyQuestionOption.setOptionType(1);
							serveyQuestionOptionList.add(serveyQuestionOption);
						}
					}
				}
			}
		}
		serveyDao.save(servey);
		serveyPartyDao.saveBatch(serveyPartyList);
		serveyQuestionDao.saveBatch(serveyQuestionList);
		serveySubQuestionDao.saveBatch(serveySubQuestionList);
		serveyQuestionOptionDao.saveBatch(serveyQuestionOptionList);
		
		for(int i = 0; i < serveyPartyList.size();i++){
			ServeyParty serveyParty = serveyPartyList.get(i);
			if(serveyParty.getType().equals("PARTY")){
				if(directConclusion.equals("1")){
					getSysNoticeMsgDto(userInfo, serveyParty.getPartyName(), serveyParty.getPartyId(), servey,"0");
				}
			}
		}
		return "";
	}
	
	public void getSysNoticeMsgDto(String userInfo,String username,String userId,Servey servey,String type) throws Exception{
		String loginName = "";
		//根据userId获取用户息
		Map<String,String> mapIds = new HashMap<String,String>();
		mapIds.put("ids", userId);
		String dubboResultInfo=userDtoServiceCustomer.getUserInfoByUserIds(userInfo, JacksonUtils.toJson(mapIds));
		DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		if(dubboServiceResultInfo.isSucess()){
			String resultInfo= dubboServiceResultInfo.getResult();
			List<Map> list=JacksonUtils.fromJson(resultInfo, ArrayList.class,Map.class);
			if(list!=null&&!list.isEmpty()){
				loginName = list.get(0).get("loginName").toString();
			}
		}
		SysNoticeMsgDto sysNoticeMsgDto = new SysNoticeMsgDto();
		sysNoticeMsgDto.setId(IDGenerator.getUUID());
		sysNoticeMsgDto.setTitle(servey.getName());
		sysNoticeMsgDto.setLoginName(loginName);
		sysNoticeMsgDto.setUserId(userId);
		sysNoticeMsgDto.setUserName(username);
		sysNoticeMsgDto.setMsgType(false);
		if(type.equals("1")){
			sysNoticeMsgDto.setOpType("DY");
		}else{
			sysNoticeMsgDto.setOpType("DB");
		}
		sysNoticeMsgDto.setSource("flow");//巨洲云
		sysNoticeMsgDto.setAppCode("OA");//oa
		sysNoticeMsgDto.setBusinessId(servey.getId());
		//暂时传空IP
		sysNoticeMsgDto.setIpAddress("");
		SimpleDateFormat dateFormater = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date date=new Date();
		Timestamp timestamp = Timestamp.valueOf(dateFormater.format(date));
		sysNoticeMsgDto.setSendDate(timestamp);
		sysNoticeMsgDto.setExtendInfo("QUESTION");
		if(type.equals("1")){
			sysNoticeMsgDto.setUrl("oa/servey/serveyQuestionnaire/serveyQuestionnaire_edit.html?serveyId=" + servey.getId() + "&oper=DY&serveyName=" +  URLEncoder.encode(servey.getName(), "UTF-8") + "&userId="+userId+"&msgId="+sysNoticeMsgDto.getId());
		}else{
			sysNoticeMsgDto.setUrl("oa/servey/serveyQuestionnaire/serveyQuestionnaire_edit.html?serveyId=" + servey.getId() + "&oper=add&serveyName=" +  URLEncoder.encode(servey.getName(), "UTF-8")+"&msgId="+sysNoticeMsgDto.getId());
		}
		sysNoticeMsgDto.setMobibleUrl("");
		sysNoticeMsgDto.setIsOpen(true);
		sysNoticeMsgDto.setDelflag(false);
		sysNoticeMsgDto.setFirstType("QUESTION");
		String sysNoticeMsgJson= JacksonUtils.toJson(sysNoticeMsgDto);
		sysNoticeMsgDtoServiceCustomer.save(userInfo, sysNoticeMsgJson);
	}
	
	public String getStr(Object obj){
		String str = null;
		if(obj != null){
			str = String.valueOf(obj);
		}
		return str;
	}
	
	public Date getDate(Object obj) throws ParseException{
		Date date = null;
		if(obj != null){
			SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");//小写的mm表示的是分钟  
			String dstr=String.valueOf(obj);  
			date=sdf.parse(dstr);  

		}
		return date;
	}
	
	@Override
	public ServeyDto getServeyById(String id) throws Exception {
		ServeyDto serveyDto = new ServeyDto();
		Servey servey = serveyDao.getObjectById(id);
		BeanUtils.copyProperties(serveyDto,servey);
		Map<String,Object> map = new HashMap<String, Object>();
		map.put("serveyId", id);
		List<ServeyParty> serveyPartyList = serveyPartyDao.queryList(map);
		List<ServeyPartyDto> serveyPartyDtoList = new ArrayList<ServeyPartyDto>();
		for(int i = 0;i < serveyPartyList.size();i++){
			ServeyPartyDto serveyPartyDto = new ServeyPartyDto();
			BeanUtils.copyProperties(serveyPartyDto,serveyPartyList.get(i));
			serveyPartyDtoList.add(serveyPartyDto);
		}
		serveyDto.setServeyPartyList(serveyPartyDtoList);
		
		ServeyCategoryDto serveyCategoryDto = new ServeyCategoryDto();
		ServeyCategory serveyCategory = serveyCategoryDao.getObjectById(servey.getServeyCategoryId());
		if(serveyCategory != null){
			BeanUtils.copyProperties(serveyCategoryDto,serveyCategory);
			serveyDto.setServeyCategory(serveyCategoryDto);
		}
		
		map.put("sidx", "questionNum");
		List<ServeyQuestion> serveyQuestionList = serveyQuestionDao.queryList(map);
		List<ServeyQuestionDto> serveyQuestionDtoList = new ArrayList<ServeyQuestionDto>();
		for(int i = 0; i < serveyQuestionList.size();i++){
			ServeyQuestionDto serveyQuestionDto = new ServeyQuestionDto();
			BeanUtils.copyProperties(serveyQuestionDto,serveyQuestionList.get(i));
			serveyQuestionDtoList.add(serveyQuestionDto);
		}
		serveyDto.setServeyQuestionList(serveyQuestionDtoList);
		
		return serveyDto;
	}

	@Override
	public int updateServey(String userInfo,Map map) throws Exception {
		String id = getStr(map.get("id"));
		Servey servey= serveyDao.getObjectById(id);
		String directConclusion = getStr(map.get("directConclusion"));
		servey.setId(id);
		servey.setName(getStr(map.get("name")));
		servey.setReferenceId(getStr(map.get("referenceId")));
		servey.setServeyCategoryId(getStr(map.get("parentId")));
		servey.setDescription(getStr(map.get("description")));
		servey.setFromDate(getDate(map.get("fromDate")));
		servey.setThruDate(getDate(map.get("thruDate")));
		servey.setServeyType(getStr(map.get("serveyType")));
		servey.setServeyNoticeType(getStr(map.get("serveyNoticeType")));
		servey.setServeyMultipleSurveys(getStr(map.get("serveyMultipleSurveys")));
		if(directConclusion != null && directConclusion.equals("1")){
			servey.setStatus(MeetingStatusType.FINISHED.getCode());
			servey.setFlowStatus(MeetingStatusType.FINISHED.getCode());
		}else{
			servey.setStatus(MeetingStatusType.DRAFT.getCode());
			servey.setFlowStatus(MeetingStatusType.DRAFT.getCode());
		}
		Map<String,Object> strmap = new HashMap<String, Object>();
		strmap.put("serveyId", id);
		List<ServeyParty> serveyPartyList1 = serveyPartyDao.queryList(strmap);
		Map<String,String> serveyPartyMap = new HashMap<String, String>();
		for(int i = 0; i < serveyPartyList1.size();i++){
			serveyPartyMap.put(serveyPartyList1.get(i).getPartyId() + "_" + serveyPartyList1.get(i).getType(), serveyPartyList1.get(i).getId());
		}
		
		List<ServeyParty> serveyPartyList = new ArrayList<ServeyParty>();
		List<ServeyParty> noticeServeyPartyList = new ArrayList<ServeyParty>();
		List<String> deleteServeyPartyList = new ArrayList<String>();
		String readers = getStr(map.get("reader"));
		String participants = getStr(map.get("participant"));
		String readerIds = getStr(map.get("readerId"));
		String participantIds = getStr(map.get("participantId"));
		String closingNotices = getStr(map.get("closingNotice"));
		String closingNoticeIds = getStr(map.get("closingNoticeId"));
		if(readers != null && !(readers.equals(""))){
			String[] readerArr = readers.split(",");
			String[] readerIdArr = readerIds.split(",");
			if(readerArr != null && readerArr.length > 0){
				for(int i = 0; i < readerArr.length;i++){
					if(serveyPartyMap.get(readerIdArr[i] + "_READER") != null){
						serveyPartyMap.remove(readerIdArr[i] + "_READER");
					}else{
						ServeyParty serveyParty = new ServeyParty();
						serveyParty.setId(IDGenerator.getUUID());
						serveyParty.setPartyId(readerIdArr[i]);
						serveyParty.setPartyName(readerArr[i]);
						serveyParty.setPartyType("PERSON");
						serveyParty.setType("READER");
						serveyParty.setServeyId(id);
						serveyPartyList.add(serveyParty);
					}
				}
			}
		}
		if(participants != null && !(participants.equals(""))){
			String[] participantArr = participants.split(",");
			String[] participantIdsArr = participantIds.split(",");
			if(participantArr != null && participantArr.length > 0){
				for(int i = 0; i < participantArr.length;i++){
					if(serveyPartyMap.get(participantIdsArr[i] + "_PARTY") != null){
						serveyPartyMap.remove(participantIdsArr[i] + "_PARTY");
					}else{
						ServeyParty serveyParty = new ServeyParty();
						serveyParty.setId(IDGenerator.getUUID());
						serveyParty.setPartyId(participantIdsArr[i]);
						serveyParty.setPartyName(participantArr[i]);
						serveyParty.setPartyType("PERSON");
						serveyParty.setType("PARTY");
						serveyParty.setServeyId(id);
						serveyPartyList.add(serveyParty);
					}
					/*参加调查人员发待办*/
					ServeyParty noticServeyParty = new ServeyParty();
					noticServeyParty.setId(IDGenerator.getUUID());
					noticServeyParty.setPartyId(participantIdsArr[i]);
					noticServeyParty.setPartyName(participantArr[i]);
					noticServeyParty.setPartyType("PERSON");
					noticServeyParty.setType("PARTY");
					noticServeyParty.setServeyId(id);
					noticeServeyPartyList.add(noticServeyParty);
				}
			}
		}
		if(closingNotices != null && !(closingNotices.equals(""))){
			String[] closingNoticeArr = closingNotices.split(",");
			String[] closingNoticeIdArr = closingNoticeIds.split(",");
			if(closingNoticeArr != null && closingNoticeArr.length > 0){
				for(int i = 0; i < closingNoticeArr.length;i++){
					if(serveyPartyMap.get(closingNoticeIdArr[i] + "_NOTICE") != null){
						serveyPartyMap.remove(closingNoticeIdArr[i] + "_NOTICE");
					}else{
						ServeyParty serveyParty = new ServeyParty();
						serveyParty.setId(IDGenerator.getUUID());
						serveyParty.setPartyId(closingNoticeIdArr[i]);
						serveyParty.setPartyName(closingNoticeArr[i]);
						serveyParty.setPartyType("PERSON");
						serveyParty.setType("NOTICE");
						serveyParty.setServeyId(id);
						serveyPartyList.add(serveyParty);
					}

				}
			}
		}
		List<ServeyQuestion> serveyQuestionList = new ArrayList<ServeyQuestion>();
		List<String> deleteserveyQuestionList = new ArrayList<String>();
		List<ServeyQuestion> updateserveyQuestionList = new ArrayList<ServeyQuestion>();
		List<ServeySubQuestion> serveySubQuestionList = new ArrayList<ServeySubQuestion>();
		List<ServeyQuestionOption> serveyQuestionOptionList = new ArrayList<ServeyQuestionOption>();
		String paramaterJson = JacksonUtils.toJson(map);
		Map<String, Object> serveyMap = JSON.parseObject(paramaterJson,new TypeReference<Map<String, Object>>(){});
		Object list = serveyMap.get("data");
		List<JSONObject> ll = (List)list;
		for (JSONObject jobj : ll) {
			ServeyQuestion serveyQuestion = new ServeyQuestion();
			if(getStr(jobj.get("serveyCreateType")).equals("delete")){
				deleteserveyQuestionList.add(getStr(jobj.get("serveyQuestionId")));
			}else if(getStr(jobj.get("serveyCreateType")).equals("update_question")){
				serveyQuestion = serveyQuestionDao.getObjectById(getStr(jobj.get("serveyQuestionId")));
				serveyQuestion.setQuestionNum(getStr(jobj.get("serialNumber")));
				updateserveyQuestionList.add(serveyQuestion);
			}else if(getStr(jobj.get("serveyCreateType")).equals("update")){
				serveyQuestion = serveyQuestionDao.getObjectById(getStr(jobj.get("serveyQuestionId")));
				serveyQuestion.setServeyId(id);
				serveyQuestion.setQuestion(getStr(jobj.get("question")));
				serveyQuestion.setQuestionTip(getStr(jobj.get("questionTip")));
				serveyQuestion.setQuestionNum(getStr(jobj.get("serialNumber")));
				serveyQuestion.setQuestionTypeCode(getStr(jobj.get("questionTypeCode")));
				serveyQuestion.setQuestionRequired(getStr(jobj.get("questionRequired")));
				String questionScore = getStr(jobj.get("questionScore"));
				if(questionScore == null || questionScore.equals("")  || questionScore.equals("undefined")){
					questionScore = "0";
				}
				serveyQuestion.setQuestionScore(questionScore);
				updateserveyQuestionList.add(serveyQuestion);
				Map<String,Object> qusetionMap = new HashMap<String,Object>();
				qusetionMap.put("questionId", serveyQuestion.getId());
				serveySubQuestionDao.deleteServeySubQuestionByQuestionId(qusetionMap);
				serveyQuestionOptionDao.deleteServeyQuestionOptionByQuestionId(qusetionMap);
				getQuestion(jobj, serveyQuestion.getId(), serveySubQuestionList, serveyQuestionOptionList);
			}else if(getStr(jobj.get("serveyCreateType")).equals("insert")){
				String uuid = IDGenerator.getUUID();
				serveyQuestion.setId(uuid);
				serveyQuestion.setServeyId(id);
				serveyQuestion.setQuestion(getStr(jobj.get("question")));
				serveyQuestion.setQuestionTip(getStr(jobj.get("questionTip")));
				serveyQuestion.setQuestionNum(getStr(jobj.get("serialNumber")));
				serveyQuestion.setQuestionTypeCode(getStr(jobj.get("questionTypeCode")));
				serveyQuestion.setQuestionRequired(getStr(jobj.get("questionRequired")));
				serveyQuestion.setQuestionScore(getStr(jobj.get("questionScore")));
				serveyQuestionList.add(serveyQuestion);
				getQuestion(jobj, uuid, serveySubQuestionList, serveyQuestionOptionList);
			}
		}
		
		for (String in : serveyPartyMap.keySet()) {
			deleteServeyPartyList.add(serveyPartyMap.get(in));
		}
		
		serveyDao.update(servey);
		if(deleteServeyPartyList != null && deleteServeyPartyList.size() > 0){
			serveyPartyDao.deleteAllObjectByIds(deleteServeyPartyList);
		}
		serveyPartyDao.saveBatch(serveyPartyList);
		if(deleteserveyQuestionList.size() > 0){
			serveyQuestionDao.deleteAllObjectByIds(deleteserveyQuestionList);
		}
		serveyQuestionDao.updateBatch(updateserveyQuestionList);
		serveyQuestionDao.saveBatch(serveyQuestionList);
		serveySubQuestionDao.saveBatch(serveySubQuestionList);
		serveyQuestionOptionDao.saveBatch(serveyQuestionOptionList);
		for(int i = 0; i < noticeServeyPartyList.size();i++){
			ServeyParty serveyParty = noticeServeyPartyList.get(i);
			if(serveyParty.getType().equals("PARTY")){
				if(directConclusion.equals("1")){
					getSysNoticeMsgDto(userInfo, serveyParty.getPartyName(), serveyParty.getPartyId(), servey,"0");
				}
			}
		}
		return 0;
	}
	
	public void getQuestion(JSONObject jobj,String QuestionId,List<ServeySubQuestion> serveySubQuestionList,List<ServeyQuestionOption> serveyQuestionOptionList){
		String questionOther = getStr(jobj.get("questionOther"));
		if(jobj.get("problemIdTexts") != null && !(getStr(jobj.get("problemIdTexts")).equals(""))){
			String[] problemIdTextArr = getStr(jobj.get("problemIdTexts")).split("、");
			String[] problemIdNumArr = getStr(jobj.get("problemIdNums")).split("、");
			for(int j = 0; j < problemIdTextArr.length;j++){
				ServeySubQuestion serveySubQuestion = new ServeySubQuestion();
				serveySubQuestion.setId(IDGenerator.getUUID());
				serveySubQuestion.setQuestion_id(QuestionId);
				serveySubQuestion.setQuestion_content(problemIdTextArr[j]);
				serveySubQuestion.setQuestionCode(problemIdNumArr[j]);
				serveySubQuestionList.add(serveySubQuestion);
			}
		}
		if(jobj.get("optionIdTexts") != null && !(getStr(jobj.get("optionIdTexts")).equals(""))){
			String[] optionIdTextArr = getStr(jobj.get("optionIdTexts")).split("、");
			String[] optionIdNumArr = getStr(jobj.get("optionIdNums")).split("、");
			String[] weightFactorArr = getStr(jobj.get("weightFactorInfos")).split("、");
			if(optionIdTextArr != null){
				for(int j = 0; j < optionIdTextArr.length;j++){
					ServeyQuestionOption serveyQuestionOption = new ServeyQuestionOption();
					serveyQuestionOption.setId(IDGenerator.getUUID());
					serveyQuestionOption.setDescription(optionIdTextArr[j]);
					if(weightFactorArr != null && weightFactorArr[j] != null && !(weightFactorArr[j].equals("null"))){
						serveyQuestionOption.setWeightFactor(Integer.valueOf(weightFactorArr[j]));
					}else{
						serveyQuestionOption.setWeightFactor(0);
					}
					serveyQuestionOption.setQuestionId(QuestionId);
					serveyQuestionOption.setSequenceNum(optionIdNumArr[j]);
					serveyQuestionOption.setOptionType(0);
					serveyQuestionOptionList.add(serveyQuestionOption);
				}
				if(questionOther != null && questionOther.equals("1")){
					ServeyQuestionOption serveyQuestionOption = new ServeyQuestionOption();
					serveyQuestionOption.setId(IDGenerator.getUUID());
					serveyQuestionOption.setDescription("其他");
					serveyQuestionOption.setQuestionId(QuestionId);
					serveyQuestionOption.setSequenceNum("其他");
					serveyQuestionOption.setOptionType(1);
					serveyQuestionOptionList.add(serveyQuestionOption);
				}
			}
		}
	}

	@Override
	public Page getServeyByPage(Map map) throws Exception {
		Page page=new Page();
		List<Map<String,Object>> list = serveyDao.getServeyPage(map);
		Integer count = serveyDao.getServeyPageCount(map);
		page.setLimit((Integer) map.get("limit") );
		page.setList(list);
		page.setStart((Integer) map.get("start"));
		page.setTotal(count);
		return page;
	}

	@Override
	public Map getStartFlowInfo(SecurityUserBeanInfo securityUserBeanInfo,
			String id) throws Exception {
		Map<String,Object>map=new HashMap<String, Object>();
		Servey servey = serveyDao.getObjectById(id);
		Map<String,Object> flowData = getMeetingDataToJson(servey);
		map.put("flow_phone_data", flowData);
		map.put("flow_business_data", flowData);
		//userMap.get(key)
		//SecurityUserDto
		Map<String,Object>param=new HashMap<String, Object>();
		SecurityOrganizationDto securityDirectCompanyDto = securityUserBeanInfo.getSecurityDirectCompanyDto();
		if(securityDirectCompanyDto!=null){
			String companyId=securityDirectCompanyDto.getId();
			String companyName=securityDirectCompanyDto.getName();
			param.put("flow_business_company_id", companyId);
			param.put("flow_business_company_name", companyName);
		}else{
			param.put("flow_business_company_id", null);
			param.put("flow_business_company_name", null);

		}
		SecurityOrganizationDto securityDirectDeptDto = securityUserBeanInfo.getSecurityDirectDeptDto();
		if(securityDirectDeptDto!=null){
			String deptId=securityDirectDeptDto.getId();
			String deptName=securityDirectDeptDto.getName();
			param.put("flow_business_dept_id", deptId);
			param.put("flow_business_dept_name", deptName);
		}else{
			param.put("flow_business_dept_id", null);
			param.put("flow_business_dept_name", null);
		}
		SecurityOrganizationDto securityGroupDto = securityUserBeanInfo.getSecurityGroupDto();
		if(securityGroupDto!=null){
			String projectId=securityGroupDto.getId();
			String projectName=securityGroupDto.getName();
			param.put("flow_business_project_id", projectId);
			param.put("flow_business_project_name", projectName);
		}else{
			param.put("flow_business_project_id", null);
			param.put("flow_business_project_name", null);
		}
		SecurityOrganizationDto securityBranchDto = securityUserBeanInfo.getSecurityBranchDto();
		if(securityBranchDto!=null){
			String branchId=securityBranchDto.getId();
			String branchName=securityBranchDto.getName();
			param.put("flow_business_project_branch_id", branchId);
			param.put("flow_business_project_branch_name", branchName);
		}else{
			param.put("flow_business_project_branch_id", null);
			param.put("flow_business_project_branch_name", null);
		}
		param.put("start_user_id", servey.getCreatePersonId());
		param.put("start_user_name", servey.getCreatePersonName());
		map.put("flow_business_variable_data", param);
		return map;
	}
	
	private Map<String,Object> getMeetingDataToJson(Servey servey) throws Exception {
		Map<String,	Object>resultMap=new HashMap<String, Object>();
		Map<String,Object> map1=new HashMap<>();
		Map<String,Object> map2=new HashMap<>();
		Map<String,Object> map3=new HashMap<>();
		Map<String,Object> map4=new HashMap<>();
		Map<String,Object> map5=new HashMap<>();
		Map<String,Object> map6=new HashMap<>();
		Map<String,Object> map7=new HashMap<>();
	
		List<Map<String,Object>> list=new ArrayList<Map<String,Object>>();
	     map1.put("name","问卷名称");
	     map1.put("value",servey.getName());
	     map2.put("name", "引用问卷ID");
	     map2.put("value", servey.getReferenceId());
	     map3.put("name", "问卷分类ID");
	     map3.put("value", servey.getServeyCategoryId());
	     map4.put("name", "description");
	     map4.put("value", servey.getDescription());
	     map5.put("name", "问卷类型");
	     map5.put("value", servey.getServeyType());
	     map6.put("name", "调查通知方式");
	     map6.put("value", servey.getServeyNoticeType());
	     map7.put("name", "同一用户进行多次调查");
	     map7.put("value", servey.getServeyMultipleSurveys());
	     list.add(map1);
	     list.add(map2);
	     list.add(map3);
	     list.add(map4);
	     list.add(map5);
	     list.add(map6);
	     list.add(map7);
	     resultMap.put("dataList", list);
		 return resultMap;
	}

	@Override
	public int updateStatus(String userInfo, Map map) throws Exception {
		String id = (String) map.get("businessId");
		String status = (String) map.get("status");
		String instanceId = (String) map.get("instanceId");
		Servey servey = serveyDao.getObjectById(id);
		if(status.equals(MeetingStatusType.CANCEL.getCode()) || status.equals(MeetingStatusType.WITHDRAW.getCode()) || status.equals(MeetingStatusType.REJECT.getCode())){
			servey.setStatus(MeetingStatusType.DRAFT.getCode());
		 }else if(status.equals(MeetingStatusType.RUNNING.getCode()) || status.equals(MeetingStatusType.HANGUP.getCode())){
			 servey.setStatus(MeetingStatusType.RUNNING.getCode());
		 }else if(status.equals(MeetingStatusType.FINISHED.getCode())){
			 servey.setStatus(MeetingStatusType.FINISHED.getCode());
		 }else if(status.equals(MeetingStatusType.WITHDRAW.getCode())){
			servey.setStatus(MeetingStatusType.WITHDRAW.getCode());
		}
		servey.setFlowStatus(status);
		servey.setInstanceId(instanceId);
		//流程审批完成后，如果审批状态是  已完成，则要发起代办通知
		if(status.equals(MeetingStatusType.FINISHED.getCode())){
			Map<String,Object> strmap = new HashMap<String, Object>();
			strmap.put("serveyId", servey.getId());
			strmap.put("type", "PARTY");
			List<ServeyParty> serveyPartyList = serveyPartyDao.queryList(strmap);
			if(serveyPartyList != null && serveyPartyList.size() > 0){
				for(int i = 0; i < serveyPartyList.size();i++){
					getSysNoticeMsgDto(userInfo, serveyPartyList.get(i).getPartyName(), serveyPartyList.get(i).getPartyId(), servey,"0");
				}
			}
					
		}
		return serveyDao.update(servey);
	}
	
	@Override
	public int getServeyNoticePage(String userInfo,Map<String, Object> map) throws Exception{
		String serveyId = "";
		Servey servey = null;
		if(map.get("serveyId") != null){
			serveyId = String.valueOf(map.get("serveyId"));
			servey = serveyDao.getObjectById(serveyId);
			Date now = new Date();
			servey.setThruDate(new Date(now.getTime() - 600000));
			serveyDao.update(servey);
		}
		List<Map<String, Object>> objList = serveyDao.getServeyNoticePage(map);
		List<Servey> serveyList = new ArrayList<Servey>();
		for(int i = 0; i < objList.size(); i++){
			Map<String, Object> objMap = objList.get(i);
			if("NOTICE".equals(objMap.get("type"))){
				noticeClosePerson(userInfo, objMap);
				if(servey == null){
					servey = serveyDao.getObjectById(getStr(objMap.get("id")));
				}
				if(servey != null){
					servey.setServeyCloseType("1");
					serveyList.add(servey);
				}
			}else if("PARTY".equals(objMap.get("type"))){
				deleteNoticeMsg(userInfo, getStr(objMap.get("id")), getStr(objMap.get("partyId")));
			}
		}
		serveyDao.updateBatch(serveyList);
		return 1;
	}
	
	public void noticeClosePerson(String userInfo,Map<String, Object> map) throws Exception{
		SysNoticeMsgDto sysNoticeMsgDto = new SysNoticeMsgDto();
		sysNoticeMsgDto.setId(IDGenerator.getUUID());
		sysNoticeMsgDto.setTitle(getStr(map.get("name")));
		String loginName = "";
		String userId  = getStr(map.get("partyId"));
		//根据userId获取用户息
		Map<String,String> mapIds = new HashMap<String,String>();
		mapIds.put("ids", userId);
		String dubboResultInfo=userDtoServiceCustomer.getUserInfoByUserIds(userInfo, JacksonUtils.toJson(mapIds));
		DubboServiceResultInfo dubboServiceResultInfo= JacksonUtils.fromJson(dubboResultInfo, DubboServiceResultInfo.class);
		if(dubboServiceResultInfo.isSucess()){
			String resultInfo= dubboServiceResultInfo.getResult();
			List<Map> list=JacksonUtils.fromJson(resultInfo, ArrayList.class,Map.class);
			if(list!=null&&!list.isEmpty()){
				loginName = list.get(0).get("loginName").toString();
			}
		}
		sysNoticeMsgDto.setLoginName(loginName);
		sysNoticeMsgDto.setUserId(getStr(map.get("partyId")));
		sysNoticeMsgDto.setUserName(getStr(map.get("partyName")));
		sysNoticeMsgDto.setMsgType(false);
		sysNoticeMsgDto.setOpType("DY");
		sysNoticeMsgDto.setSource("FQ");
		sysNoticeMsgDto.setAppCode("");
		sysNoticeMsgDto.setBusinessId(getStr(map.get("id")));
		//暂时传空IP
		sysNoticeMsgDto.setIpAddress("");
		SimpleDateFormat dateFormater = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date date=new Date();
		Timestamp timestamp = Timestamp.valueOf(dateFormater.format(date));
		sysNoticeMsgDto.setSendDate(timestamp);
		sysNoticeMsgDto.setExtendInfo("QUESTION");
		sysNoticeMsgDto.setUrl("oa/servey/serveyQuestionnaire/serveyQuestionnaire_result.html?serveyId="+getStr(map.get("id"))+"&oper=DY&serveyName=" +URLEncoder.encode(getStr(map.get("name")), "UTF-8") + "&userId="+getStr(map.get("partyId")));
		sysNoticeMsgDto.setIsOpen(true);
		sysNoticeMsgDto.setDelflag(false);
		sysNoticeMsgDto.setFirstType("QUESTION");
		String sysNoticeMsgJson= JacksonUtils.toJson(sysNoticeMsgDto);
		sysNoticeMsgDtoServiceCustomer.save(userInfo, sysNoticeMsgJson);
	}
	
	public void deleteNoticeMsg(String userInfo,String id,String userId){
		Map<String,String> noticeMap = new HashMap<String,String>();
		noticeMap.put("opType", "DB");
		noticeMap.put("businessId", id);
		noticeMap.put("userId", userId);
		String noticeMapJson= JacksonUtils.toJson(noticeMap);
		sysNoticeMsgDtoServiceCustomer.deleteOpTypeDataByParamMap(userInfo, noticeMapJson);
	}

	@Override
	public Integer remindersNotInvestigators(String userInfo, Map<String, Object> map) throws Exception {
		List<Map<String, Object>> objList = serveyDao.getServeyPartyNoticePage(map);
		Servey servey = new Servey();
		for(int i = 0; i < objList.size(); i++){
			Map<String, Object> objMap = objList.get(i);
			if("PARTY".equals(objMap.get("type"))){
				map.put("userId", getStr(objMap.get("partyId")));
				List<ServeyResponse> list=serveyResponseDao.queryList(map);
				if(list == null || list.size() == 0){
					servey.setId(getStr(objMap.get("id")));
					servey.setName(getStr(objMap.get("name")));
					getSysNoticeMsgDto(userInfo, getStr(objMap.get("partyName")), getStr(objMap.get("partyId")), servey,"1");
				}
			}
		}
		return 1;
	}
}
