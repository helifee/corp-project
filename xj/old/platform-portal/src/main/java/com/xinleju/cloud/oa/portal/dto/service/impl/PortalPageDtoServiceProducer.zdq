package com.xinleju.cloud.oa.portal.dto.service.impl;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.xinleju.platform.base.utils.IDGenerator;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.ErrorInfoCode;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.cloud.oa.portal.dto.service.PortalPageDtoServiceCustomer;
import com.xinleju.cloud.oa.portal.entity.PortalPage;
import com.xinleju.cloud.oa.portal.service.PortalComponentPositionService;
import com.xinleju.cloud.oa.portal.service.PortalPageService;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * @author admin
 */

public class PortalPageDtoServiceProducer implements PortalPageDtoServiceCustomer {
    private static Logger log = Logger.getLogger(PortalPageDtoServiceProducer.class);
    @Autowired
    private PortalPageService portalPageService;
    public String save(String userInfo, String saveJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            PortalPage portalPage = JacksonUtils.fromJson(saveJson, PortalPage.class);
            if (portalPage.getId() == null) {
                portalPage.setId(IDGenerator.getUUID());
            }
            Map<String, Object> paramMap = new HashMap<String, Object>();
            //paramMap.put("id",portalPage.getId());
            paramMap.put("portalPageCode", portalPage.getPortalPageCode());
            paramMap.put("delflag", false);
            List<PortalPage> oldPortalPages = portalPageService.queryList(paramMap);
            //校验站点编码唯一性：根据站点编码查询数据库，
            // 如果数据库存在记录则对比查询结果中第一条数据的id与当前存储id是否一致，
            //如果一致则表明是数据更新，否则表明站点编码已被其他站点使用
            if (oldPortalPages == null || oldPortalPages.size() == 0 || oldPortalPages.get(0).getId().equals(portalPage.getId())) {
                portalPageService.save(portalPage);
                info.setResult(JacksonUtils.toJson(portalPage));
                info.setSucess(true);
                info.setMsg("保存对象成功!");
            } else {
            	   info.setSucess(false);
	               info.setMsg("站点编码已存在，请更换!");
	               info.setResult(ErrorInfoCode.UNIQUE_ERROR.getValue());
            }
        } catch (Exception e) {
            log.error("保存对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("保存对象失败!");
            info.setResult(ErrorInfoCode.SYSTEM_ERROR.getValue());
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String saveBatch(String userInfo, String saveJsonList) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public String updateBatch(String userInfo, String updateJsonList) {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public String update(String userInfo, String updateJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            PortalPage portalPage = JacksonUtils.fromJson(updateJson, PortalPage.class);
            Map<String, Object> paramMap = new HashMap<String, Object>();
            //paramMap.put("id",portalPage.getId());
            paramMap.put("portalPageCode", portalPage.getPortalPageCode());
            paramMap.put("delflag", false);
            List<PortalPage> oldPortalPages = portalPageService.queryList(paramMap);
            //校验站点编码唯一性：根据站点编码查询数据库，
            // 如果数据库存在记录则对比查询结果中第一条数据的id与当前存储id是否一致，
            //如果一致则表明是数据更新，否则表明站点编码已被其他站点使用
            if (oldPortalPages == null || oldPortalPages.size() == 0 || oldPortalPages.get(0).getId().equals(portalPage.getId())) {
            	  int result = portalPageService.update(portalPage);
                  info.setResult(JacksonUtils.toJson(portalPage));
                  info.setSucess(true);
                  info.setMsg("更新对象成功!");
            } else {
            	   info.setSucess(false);
	               info.setMsg("站点编码已存在，请更换!");
	               info.setResult(ErrorInfoCode.UNIQUE_ERROR.getValue());
            }

        } catch (Exception e) {
            log.error("更新对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("更新对象失败!");
            info.setResult(ErrorInfoCode.SYSTEM_ERROR.getValue());
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String deleteObjectById(String userInfo, String deleteJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            PortalPage portalPage = JacksonUtils.fromJson(deleteJson, PortalPage.class);
            int result = portalPageService.deleteObjectById(portalPage.getId());
            info.setResult(JacksonUtils.toJson(result));
            info.setSucess(true);
            info.setMsg("删除对象成功!");
        } catch (Exception e) {
            log.error("更新对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("删除更新对象失败!");
            info.setResult(ErrorInfoCode.SYSTEM_ERROR.getValue());
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String deleteAllObjectByIds(String userInfo, String deleteJsonList) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            if (StringUtils.isNotBlank(deleteJsonList)) {
                Map map = JacksonUtils.fromJson(deleteJsonList, HashMap.class);
                List<String> list = Arrays.asList(map.get("id").toString().split(","));
                int result = portalPageService.deletePortalPageByIds(list);
                if(result==5){
                	info.setSucess(false);
                	info.setMsg("已发布的站点不允许删除!");
                }else{
                	info.setResult(JacksonUtils.toJson(result));
                	info.setSucess(true);
                	info.setMsg("删除对象成功!");
                }
            }
        } catch (Exception e) {
            log.error("删除对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("删除更新对象失败!");
            info.setResult(ErrorInfoCode.SYSTEM_ERROR.getValue());
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String getObjectById(String userInfo, String getJson) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            PortalPage portalPage = JacksonUtils.fromJson(getJson, PortalPage.class);
            PortalPage result = portalPageService.getObjectById(portalPage.getId());
            info.setResult(JacksonUtils.toJson(result));
            info.setSucess(true);
            info.setMsg("获取对象成功!");
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取对象失败!");
            info.setResult(ErrorInfoCode.SYSTEM_ERROR.getValue());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String getPage(String userInfo, String paramater) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            Map map = JacksonUtils.fromJson(paramater, HashMap.class);
            Page page = portalPageService.getSearchPage(map);
            info.setResult(JacksonUtils.toJson(page));
            info.setSucess(true);
            info.setMsg("获取分页对象成功!");
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取分页对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取分页对象失败!");
            info.setExceptionMsg(e.getMessage());
            info.setResult(ErrorInfoCode.SYSTEM_ERROR.getValue());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String queryList(String userInfo, String paramater) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            if (StringUtils.isNotBlank(paramater)) {
                Map map = JacksonUtils.fromJson(paramater, HashMap.class);
                List list = portalPageService.queryList(map);
                info.setResult(JacksonUtils.toJson(list));
                info.setSucess(true);
                info.setMsg("获取列表对象成功!");
            } else {
                List list = portalPageService.queryList(null);
                info.setResult(JacksonUtils.toJson(list));
                info.setSucess(true);
                info.setMsg("获取列表对象成功!");
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取列表对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取列表对象失败!");
            info.setExceptionMsg(e.getMessage());
            info.setResult(ErrorInfoCode.SYSTEM_ERROR.getValue());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String getCount(String userInfo, String paramater) {
        // TODO Auto-generated method stub
        return null;
    }

	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo,
			String deleteJsonList) {
		// TODO Auto-generated method stub
		return null;
	}
    /**
     * 保存并复制站点以及站点位置
     */
	@Override
	public String saveAndCopy(String userInfo, String saveJson) {

		 DubboServiceResultInfo info = new DubboServiceResultInfo();
	        try {
                Map<String,Object> saveParamMap = JacksonUtils.fromJson(saveJson, HashMap.class);
                String preId = (String) saveParamMap.get("originId");
	            Map map = (Map) saveParamMap.get("portalPage");
                String mapJson = JacksonUtils.toJson(map);

                PortalPage portalPage = JacksonUtils.fromJson(mapJson,PortalPage.class);
	            if (portalPage.getId() == null) {
	                portalPage.setId(IDGenerator.getUUID());
	            }
	            Map<String, Object> paramMap = new HashMap<String, Object>();
	            //paramMap.put("id",portalPage.getId());
	            paramMap.put("portalPageCode", portalPage.getPortalPageCode());
	            List<PortalPage> oldPortalPages = portalPageService.queryList(paramMap);
	            //校验站点编码唯一性：根据站点编码查询数据库，
	            //如果数据库存在记录则对比查询结果中第一条数据的id与当前存储id是否一致，
	            //如果一致则表明是数据更新，否则表明站点编码已被其他站点使用
	            if (oldPortalPages == null || oldPortalPages.size() == 0 || oldPortalPages.get(0).getId().equals(portalPage.getId())) {
	                //复制站点及站点position
	            	portalPageService.saveAndCopy(portalPage,preId);
	                info.setResult(JacksonUtils.toJson(portalPage));
	                info.setSucess(true);
	                info.setMsg("保存对象成功!");
	            } else {
	                info.setSucess(false);
	                info.setMsg("站点编码已存在，请更换!");
	                info.setResult(ErrorInfoCode.UNIQUE_ERROR.getValue());
	            }
	        } catch (Exception e) {
	            log.error("保存对象失败!" + e.getMessage());
	            info.setSucess(false);
	            info.setMsg("保存对象失败!");
	            info.setResult(ErrorInfoCode.SYSTEM_ERROR.getValue());
	            info.setExceptionMsg(e.getMessage());
	        }
	        return JacksonUtils.toJson(info);
	}

    /**
     * 根据用户权限查找当前用户对应的门户页面
     * @param userInfo
     * @return
     */
    @Override
    public String getPortalWithPermision(String userInfo) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            Map<String,Object> paramMap = JacksonUtils.fromJson(userInfo,HashMap.class);
            PortalPage result = portalPageService.getPortalWithPermision(paramMap);
            info.setResult(JacksonUtils.toJson(result));
            info.setSucess(true);
            info.setMsg("获取对象成功!");
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取对象失败!");
            info.setResult(ErrorInfoCode.SYSTEM_ERROR.getValue());
        }
        return JacksonUtils.toJson(info);
    }

    /**
     * 根据用户权限查找当前用户对应的门户页面
     * @param userInfo
     * @return
     */
    @Override
    public String getPortalListWithPermision(String userInfo) {
        // TODO Auto-generated method stub
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            Map<String,Object> paramMap = JacksonUtils.fromJson(userInfo,HashMap.class);
            List<PortalPage> result = portalPageService.getPortalListWithPermision(paramMap);
            info.setResult(JacksonUtils.toJson(result));
            info.setSucess(true);
            info.setMsg("获取对象成功!");
        } catch (Exception e) {
            // TODO Auto-generated catch block
            log.error("获取对象失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("获取对象失败!");
            info.setResult(ErrorInfoCode.SYSTEM_ERROR.getValue());
        }
        return JacksonUtils.toJson(info);
    }

    @Override
    public String updatePortalStatus(String userInfo, String paramJson) {
        DubboServiceResultInfo info = new DubboServiceResultInfo();
        try {
            Map<String,Object> paramMap = JacksonUtils.fromJson(paramJson, HashMap.class);
            List<PortalPage> portalPageList = portalPageService.updatePortalStatus(paramMap);
            info.setResult(JacksonUtils.toJson(portalPageList));
            info.setSucess(true);
            info.setMsg("状态更新成功!");
        } catch (Exception e) {
            log.error("状态更新失败!" + e.getMessage());
            info.setSucess(false);
            info.setMsg("状态更新失败!");
            info.setResult(ErrorInfoCode.SYSTEM_ERROR.getValue());
            info.setExceptionMsg(e.getMessage());
        }
        return JacksonUtils.toJson(info);
    }
}
