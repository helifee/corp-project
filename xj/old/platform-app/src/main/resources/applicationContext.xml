<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	    http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://www.springframework.org/schema/util 
        http://www.springframework.org/schema/util/spring-util-4.3.xsd">

	<util:properties id="configuration" location="classpath:configuration.properties" />
	<!-- redis -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"></bean>
	 
    <context:component-scan base-package="org.springframework.web.filter"></context:component-scan>
    
	<bean id="jedisConnectionFactory"
	    class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
	    <property name="hostName" value="#{configuration['redis.host']}" />
	    <property name="database" value="#{configuration['redis.database']}" />
	    <property name="port" value="#{configuration['redis.port']}" />
	    <property name="password" value="#{configuration['redis.pass']}" />
	    <property name="timeout" value="#{configuration['redis.timeout']}" />
	    <property name="poolConfig" ref="jedisPoolConfig" />
	    
	    <property name="usePool" value="true" />
	</bean>
	 
	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
	    <property name="connectionFactory" ref="jedisConnectionFactory" />
	</bean>
	
		 
	<bean id="baseHttpSessionListener" class="com.xinleju.platform.base.listerner.BaseHttpSessionListener">
	</bean>
	 
	<!-- 将session放入redis -->
	<bean id="redisHttpSessionConfiguration"
	class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
	    <property name="maxInactiveIntervalInSeconds" value="28800" />
	    <property name="httpSessionStrategy" ref="cookieHttpSessionStrategy"/>
	    <property name="httpSessionListeners">
	      <list>
	        <ref bean="baseHttpSessionListener"/>
	      </list>
	    </property>
	</bean>
	
	
	
	  <!-- 设置cookieName和path -->  
      <bean id="defaultCookieSerializer"  
        class="org.springframework.session.web.http.DefaultCookieSerializer">  
        <property name="cookieName" value="DTL_SESSION_ID" />  
        <property name="cookiePath" value="/" />  
    </bean>  
           
     <bean id="cookieHttpSessionStrategy"  
        class="org.springframework.session.web.http.CookieHttpSessionStrategy">  
        <property name="cookieSerializer" ref="defaultCookieSerializer" />  
    </bean>  

	
	<!-- 图形验证码配置 -->
    <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">  
        <property name="config">  
            <bean class="com.google.code.kaptcha.util.Config">  
                <!--通过构造函数注入属性值 -->  
                <constructor-arg type="java.util.Properties">  
                    <props>  
                      <!-- 验证码宽度 -->  
                      <prop key="kaptcha.image.width">260</prop>   
                      <!-- 验证码高度 -->  
                      <prop key="kaptcha.image.height">40</prop>  
                      <!-- 验证码个数 -->  
                      <prop key="kaptcha.textproducer.char.length">4</prop>  
                      <!-- 是否有边框 -->  
                      <prop key="kaptcha.border">no</prop>  
                      <!-- 边框颜色 -->  
                      <prop key="kaptcha.border.color">black</prop>  
                      <!-- 边框厚度 -->  
                      <prop key="kaptcha.border.thickness">1</prop>  
                      <!-- 验证码字体颜色 -->  
                      <prop key="kaptcha.textproducer.font.color">black</prop>  
                      <!-- 验证码字体大小 -->  
                      <prop key="kaptcha.textproducer.font.size">33</prop>  
                      <!-- 验证码所属字体样式 -->  
                      <prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop>  
                      <!-- 干扰线颜色 -->
                      <prop key="kaptcha.noise.color">blue</prop>  
                      <prop key="kaptcha.noise.impl">com.google.code.kaptcha.impl.NoNoise</prop>
                      <!-- 验证码文本字符间距 -->  
                      <prop key="kaptcha.textproducer.char.space">3</prop>                                            
                    </props>
                </constructor-arg>  
            </bean>  
        </property>  
     </bean>
	
	<!-- Spring应用上下文环境 ,可以在linstener中获取spring对象-->
	<bean id="springContextUtil" class="com.xinleju.platform.base.filter.SpringContextUtil" />
    
</beans>