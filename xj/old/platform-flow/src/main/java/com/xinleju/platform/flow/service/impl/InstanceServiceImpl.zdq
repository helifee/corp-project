package com.xinleju.platform.flow.service.impl;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CopyOnWriteArrayList;

import javax.annotation.Resource;

//import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.collections.CollectionUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.core.SetOperations;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import com.xinleju.platform.base.service.impl.BaseServiceImpl;
import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.IDGenerator;
import com.xinleju.platform.base.utils.LoginUtils;
import com.xinleju.platform.base.utils.SecurityUserBeanInfo;
import com.xinleju.platform.flow.dao.InstanceAcDao;
import com.xinleju.platform.flow.dao.InstanceDao;
import com.xinleju.platform.flow.dao.InstancePostDao;
import com.xinleju.platform.flow.dto.AcDto;
import com.xinleju.platform.flow.dto.ApprovalList;
import com.xinleju.platform.flow.dto.ApprovalListDto;
import com.xinleju.platform.flow.dto.ApprovalSubmitDto;
import com.xinleju.platform.flow.dto.InstanceAcDto;
import com.xinleju.platform.flow.dto.InstanceDto;
import com.xinleju.platform.flow.dto.InstanceTaskDto;
import com.xinleju.platform.flow.dto.InstanceTransitionRecordDto;
import com.xinleju.platform.flow.dto.InstanceVariableDto;
import com.xinleju.platform.flow.dto.MobileApproveDto;
import com.xinleju.platform.flow.dto.MobileFormDto;
import com.xinleju.platform.flow.dto.PcFormDto;
import com.xinleju.platform.flow.dto.PostDto;
import com.xinleju.platform.flow.dto.UploadAttachmentDto;
import com.xinleju.platform.flow.dto.UserDto;
import com.xinleju.platform.flow.entity.BusinessObject;
import com.xinleju.platform.flow.entity.Fl;
import com.xinleju.platform.flow.entity.Instance;
import com.xinleju.platform.flow.entity.InstanceAc;
import com.xinleju.platform.flow.entity.InstanceAccessible;
import com.xinleju.platform.flow.entity.InstanceCollection;
import com.xinleju.platform.flow.entity.InstanceCs;
import com.xinleju.platform.flow.entity.InstanceGroup;
import com.xinleju.platform.flow.entity.InstancePost;
import com.xinleju.platform.flow.entity.InstanceStep;
import com.xinleju.platform.flow.entity.InstanceTask;
import com.xinleju.platform.flow.entity.InstanceTransitionRecord;
import com.xinleju.platform.flow.entity.InstanceVariable;
import com.xinleju.platform.flow.entity.MobileForm;
import com.xinleju.platform.flow.entity.PcForm;
import com.xinleju.platform.flow.entity.SysNoticeMsg;
import com.xinleju.platform.flow.entity.UploadAttachment;
import com.xinleju.platform.flow.enumeration.ACStatus;
import com.xinleju.platform.flow.enumeration.ApproverRepeatHandleType;
import com.xinleju.platform.flow.enumeration.ApproverStatus;
import com.xinleju.platform.flow.enumeration.AutoPassType;
import com.xinleju.platform.flow.enumeration.FlAcType;
import com.xinleju.platform.flow.enumeration.FlowChangeType;
import com.xinleju.platform.flow.enumeration.InstanceOperateType;
import com.xinleju.platform.flow.enumeration.OverdueAcHandle;
import com.xinleju.platform.flow.enumeration.PostStatus;
import com.xinleju.platform.flow.enumeration.TaskStatus;
import com.xinleju.platform.flow.enumeration.TaskType;
import com.xinleju.platform.flow.exception.FlowException;
import com.xinleju.platform.flow.model.ACUnit;
import com.xinleju.platform.flow.model.ApproverUnit;
import com.xinleju.platform.flow.model.InstanceUnit;
import com.xinleju.platform.flow.model.OverdueAc;
import com.xinleju.platform.flow.model.PostUnit;
import com.xinleju.platform.flow.model.TaskUnit;
import com.xinleju.platform.flow.operation.EmptyOperation;
import com.xinleju.platform.flow.operation.Operation;
import com.xinleju.platform.flow.operation.OperationFactory;
import com.xinleju.platform.flow.operation.OperationType;
import com.xinleju.platform.flow.service.AgentService;
import com.xinleju.platform.flow.service.BusinessObjectService;
import com.xinleju.platform.flow.service.FlService;
import com.xinleju.platform.flow.service.InstanceAcService;
import com.xinleju.platform.flow.service.InstanceAccessibleService;
import com.xinleju.platform.flow.service.InstanceCollectionService;
import com.xinleju.platform.flow.service.InstanceCsService;
import com.xinleju.platform.flow.service.InstanceGroupService;
import com.xinleju.platform.flow.service.InstanceOperateLogService;
import com.xinleju.platform.flow.service.InstanceReadRecordService;
import com.xinleju.platform.flow.service.InstanceService;
import com.xinleju.platform.flow.service.InstanceStepService;
import com.xinleju.platform.flow.service.InstanceTaskService;
import com.xinleju.platform.flow.service.InstanceTransitionRecordService;
import com.xinleju.platform.flow.service.InstanceVariableService;
import com.xinleju.platform.flow.service.MobileFormService;
import com.xinleju.platform.flow.service.MonitorSettingService;
import com.xinleju.platform.flow.service.ParticipantService;
import com.xinleju.platform.flow.service.PcFormService;
import com.xinleju.platform.flow.service.StepService;
import com.xinleju.platform.flow.service.SysNoticeMsgService;
import com.xinleju.platform.flow.service.UploadAttachmentService;
import com.xinleju.platform.flow.utils.DateUtils;
import com.xinleju.platform.flow.utils.JavaBeanCopier;
import com.xinleju.platform.out.app.org.service.OrgnazationOutServiceCustomer;
import com.xinleju.platform.sys.base.dto.service.CustomFormInstanceDtoServiceCustomer;
import com.xinleju.platform.sys.org.dto.FlowAcPostDto;
import com.xinleju.platform.sys.org.dto.FlowPostParticipantDto;
import com.xinleju.platform.sys.org.dto.OrgnazationDto;
import com.xinleju.platform.sys.org.dto.service.OrgnazationDtoServiceCustomer;
import com.xinleju.platform.sys.org.dto.service.PostDtoServiceCustomer;
import com.xinleju.platform.sys.org.dto.service.UserDtoServiceCustomer;
import com.xinleju.platform.tools.data.JacksonUtils;
import com.xinleju.platform.univ.search.dto.service.SearchIndexDtoServiceCustomer;

/**
 * 流程实例相关服务
 * 
 * @author admin
 */
@Service
public class InstanceServiceImpl extends  BaseServiceImpl<String,Instance> implements InstanceService{
	
	private static final String FLOWRUNNING = "flowrunning";

	private static Logger log = Logger.getLogger(InstanceServiceImpl.class);
	
	@Autowired
	private InstanceDao instanceDao;
	@Autowired
	private InstanceAcDao instanceAcDao;
	
	@Autowired
	private FlService flService;
	
	@Autowired
	private StepService stepService;
	
	@Autowired
	private InstanceAcService instanceAcService;
	@Autowired
	private InstanceStepService instanceStepService;
	@Autowired
	private ParticipantService participantService;
	@Autowired
	private InstanceGroupService instanceGroupService;
	@Autowired
	private InstanceVariableService instanceVariableService;
	@Autowired
	private InstanceAccessibleService instanceAccessibleService;
	@Autowired
	private InstanceCsService instanceCsService;
	
	@Autowired
	private InstanceTaskService instanceTaskService;
	
	@Autowired
	private InstancePostDao instancePostDao;
	
	@Autowired
	private SysNoticeMsgService msgService;
	
	@Autowired
	private InstanceReadRecordService instanceReadRecordService;
	
	@Autowired
	private SearchIndexDtoServiceCustomer searchIndexDtoServiceCustomer;
	
	@Autowired
	private CustomFormInstanceDtoServiceCustomer customFormInstanceDtoServiceCustomer;
	
	@Autowired
	private AgentService agentService;
	
	@Autowired
	private PostDtoServiceCustomer postDtoServiceCustomer;	
	
	@Autowired
	private InstanceOperateLogService instanceLogService;
	
	@Autowired
	private BusinessObjectService businessObjectService;
	
	@Autowired
	private InstanceCollectionService instanceCollectionService;
	
	@Autowired
	private OrgnazationDtoServiceCustomer orgnazationDtoServiceCustomer;
	
	@Autowired
	private OrgnazationOutServiceCustomer orgnazationOutServiceCustomer;
	
	@Autowired
	private UserDtoServiceCustomer userDtoServiceCustomer;
	
	@Autowired
	private MonitorSettingService monitorSettingService;
	
	@Autowired
	private PcFormService pcFormService;
	
	@Autowired
	private MobileFormService mobileFormService;
	
	@Autowired
	private UploadAttachmentService uploadAttachmentService;
	
	@Autowired
	private InstanceTransitionRecordService instanceTransitionRecordService;
	
	@Value("#{configuration['flow.approve.url']}")
	private String flowApproveUrl;
	
	@Autowired
	protected RedisTemplate<String, String> redisTemplate;
	
	@Resource(name="redisTemplate")
	private SetOperations<String, String> flowRunningSet;
	
	@Override
	public List<Instance> queryInstanceBy(String flId, String businessId) {
		return instanceDao.queryInstanceByFlIdAndBusinessId(flId, businessId);
	}

	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public List<ApprovalList> queryApprovalList(String instanceId, String requestSource, String status, String model) {
		//记录查询记录
		instanceReadRecordService.record(instanceId, requestSource);

		List<ApprovalList> approvalList = queryApprovalList(instanceId, status);
		
		if("0".equals(model)) {
			removeForkAndJoin(approvalList);
		}
		
		return approvalList;
	}
	
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public List<ApprovalList> queryApprovalListNoRecord(String instanceId, String requestSource, String status, String model) {
		
		List<ApprovalList> approvalList = queryApprovalList(instanceId, status);
		
		if("0".equals(model)) {
			removeForkAndJoin(approvalList);
		}
		
		return approvalList;
	}
	
	/**
	 * 外部系统查询审批记录 TODO zhangdaoqiang
	 */
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public ApprovalListDto queryApprovalListExternal(String flCode, String businessId, String appId, String userId) {
		ApprovalListDto retDto = new ApprovalListDto();
		
		//1、记录查询痕迹
		
		//2、判断流程权限
		
		//3、查询流程记录
		List<ApprovalList> approvalList = instanceDao.queryApprovalListExternal(flCode, businessId, appId);
		
		removeForkAndJoin(approvalList);
		
		retDto.setList(approvalList);
		if(CollectionUtils.isNotEmpty(approvalList)) {
			retDto.setCustomFormURL(approvalList.get(0).getPcUrl());
		}
		return retDto;
	}
	
	private void removeForkAndJoin(List<ApprovalList> approvalList) {
		Iterator<ApprovalList> iterator = approvalList.iterator();
		while(iterator.hasNext()) {
			ApprovalList next = iterator.next();
			String acType = next.getAcType();
			if(FlAcType.FORK.getAcType().equals(acType)
			||FlAcType.JOIN.getAcType().equals(acType)) {
				iterator.remove();
			}
		}
	}
	
	public List<ApprovalList> queryApprovalList(String instanceId, String status) {
		List<ApprovalList> approvalList = instanceDao.queryApprovalList(instanceId, status);
		return approvalList;
	}
	
	@Override
	public List<String> queryNext(String instanceId, String taskId) {
		List<String> retList = new ArrayList<String>();
		//1、查询审批列表，目标数据集
		List<ApprovalList> approvalList = queryApprovalList(instanceId, null);
		Instance instance = null;
		try {
			instance = this.getObjectById(instanceId);
			InstanceUnit instanceUnit = this.translate(instance, approvalList);
			EmptyOperation operation = new EmptyOperation();
			operation.setService(this);
			ApprovalSubmitDto approvalDto = new ApprovalSubmitDto();
			approvalDto.setInstanceId(instanceId);
			approvalDto.setTaskId(taskId);
			
			//设置当前位置
			operation.setCurrentLocation(instanceUnit, approvalDto);
			
			operation.next(instanceUnit, approvalDto);
			
			for(ACUnit acUnit : instanceUnit.getAcList()) {
				List<PostUnit> posts = acUnit.getPosts();
				if(CollectionUtils.isEmpty(posts)) {
					continue;
				}
				for(PostUnit post : posts) {
					List<ApproverUnit> approvers = post.getApprovers();
					if(CollectionUtils.isEmpty(approvers)) {
						continue;
					}
					for(ApproverUnit approver : approvers) {
						if(TaskStatus.RUNNING.getValue().equals(approver.getTask().getTaskStatus())
								&& approver.getDbAction() != 2) {
							String next = approver.getOwner().getPostName() + "(" + approver.getApproverName() + ")";
							retList.add(next);
						}
					}
				}
			}
			
		} catch (Exception e) {
		}
		return retList;
	}
	
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public String doWithDrawFlow(String instanceId) throws Exception {
		List<ApprovalList> approvalList = queryApprovalList(instanceId, null);
		Instance instance = this.getObjectById(instanceId);
		InstanceUnit instanceUnit = this.translate(instance, approvalList);
		Operation operation = OperationFactory.newOperation(OperationType.WITHDRAW_FLOW.getCode(), this);
		ApprovalSubmitDto approvalDto = new ApprovalSubmitDto();
		operation.action(instanceUnit, approvalDto);
		String starter = instanceUnit.getAcList().get(0).getPosts().get(0).getApprovers().get(0).getApproverName();
		saveTransition(instanceUnit.getId(), starter, "撤回流程");
		return "success";
	}
	
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public String doWithDrawTask(String instanceId, String taskId) throws Exception {
		
		//检查是否可撤回,返回可撤回时应该撤回的任务列表
		List<InstanceTaskDto> tasks = instanceTaskService.checkWithdrawTask(instanceId, taskId);
		if(tasks == null) {
			throw new FlowException("当前流程已被下一审批人打开或审批过！");
		}
		
		List<ApprovalList> approvalList = queryApprovalList(instanceId, null);
		Instance instance = this.getObjectById(instanceId);
		InstanceUnit instanceUnit = this.translate(instance, approvalList);
		Operation operation = OperationFactory.newOperation(OperationType.WITHDRAW_TASK.getCode(), this);
		ApprovalSubmitDto approvalDto = new ApprovalSubmitDto();
		approvalDto.setTaskId(taskId);
		approvalDto.setToWithdrawTasks(tasks);
		approvalDto.setOperationName("撤回任务");
		return operation.action(instanceUnit, approvalDto);
	}

	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public boolean doFinishApproval(String instanceId) throws Exception {
		List<ApprovalList> approvalList = queryApprovalList(instanceId, null);
		Instance instance = this.getObjectById(instanceId);
		InstanceUnit instanceUnit = this.translate(instance, approvalList);
		Operation operation = OperationFactory.newOperation(OperationType.FINISHFLOW.getCode(), this);
		ApprovalSubmitDto approvalDto = new ApprovalSubmitDto();
		approvalDto.setOperationType(OperationType.AGREE.getCode());
		approvalDto.setOperationName("同意");
		approvalDto.setUserNote("管理员审结通过！");
		operation.action(instanceUnit, approvalDto);
		
		//记录流转日志
		this.saveTransition(instanceId, "管理员", "审结");
		return true;
	}
	
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public boolean doSkipCurrentApprover(String instanceId) throws Exception {
		List<ApprovalList> approvalList = queryApprovalList(instanceId, null);
		Instance instance = this.getObjectById(instanceId);
		InstanceUnit instanceUnit = this.translate(instance, approvalList);
		Operation operation = OperationFactory.newOperation(OperationType.SKIPCURRENT.getCode(), this);
		ApprovalSubmitDto approvalDto = new ApprovalSubmitDto();
		approvalDto.setUserNote("管理员操作：跳过当前审批人！");
		operation.action(instanceUnit, approvalDto);
		
		//记录流转日志
		this.saveTransition(instanceId, "管理员", "跳过当前审批人");
		
		return true;
	}
	
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public boolean doFlowRestart(String instanceId) throws Exception {
		List<ApprovalList> approvalList = queryApprovalList(instanceId, null);
		Instance instance = this.getObjectById(instanceId);
		InstanceUnit instanceUnit = this.translate(instance, approvalList);
		Operation operation = OperationFactory.newOperation(OperationType.RESTART.getCode(), this);
		ApprovalSubmitDto approvalDto = new ApprovalSubmitDto();
		approvalDto.setUserNote("管理员操作：流程放行！");
		operation.action(instanceUnit, approvalDto);
		
		//记录流转日志
		this.saveTransition(instanceId, "管理员", "流程放行");
		return true;	
	}

	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public boolean doCancelInstance(String instanceId) throws Exception {
		List<ApprovalList> approvalList = queryApprovalList(instanceId, null);
		Instance instance = this.getObjectById(instanceId);
		InstanceUnit instanceUnit = this.translate(instance, approvalList);
		Operation operation = OperationFactory.newOperation(OperationType.INVALID.getCode(), this);
		ApprovalSubmitDto approvalDto = new ApprovalSubmitDto();
		approvalDto.setUserNote("管理员流程作废操作成功！");
		operation.action(instanceUnit, approvalDto);
		
		saveTransition(instanceUnit.getId(), "管理员", "作废流程");
		
		return true;
	}

	/**
	 * 传阅时给每个人发送待阅消息
	 * @throws Exception 
	 */
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public boolean doPassAndRead(String instanceId, List<UserDto> userList) throws Exception {
		Instance instance = this.getObjectById(instanceId);
		List<SysNoticeMsg> messages = new ArrayList<SysNoticeMsg>();
		BusinessObject businessObject = businessObjectService.getObjectById(instance.getBusinessObjectId());
		String mobileUrl = null;
		String mobileParam = null;
		for(UserDto user : userList) {
//			String url = "/flow/runtime/approve/view.html"
//					+ "?instanceId=" + instanceId
//					+ "&requestSource=DY"
//					+ "&businessObjectCode=" + instance.getBusinessObjectCode()
//					+ "&businessId=" + instance.getBusinessId()
//					+ "&customFormId=" + instance.getCustomFormId()
//					+ "&time=" + new Date().getTime();
			String url = "/flow/runtime/approve/view.html"
					+ "?instanceId=" + instanceId
					+ "&requestSource=DY"
					+ "&businessId=" + instance.getBusinessId()
					+ "&pcUrl=" + businessObject.getPcUrl()
					+ "&time=" + new Date().getTime();			
			SysNoticeMsg msg = msgService.newFlowMsg(user, "DY", instance.getName(), url, mobileUrl, mobileParam);
			messages.add(msg);
			
			//记录操作日志
			instanceLogService.saveLogData(instanceId, null, null, null, 
					InstanceOperateType.PASS_READ.getValue(), user.getId(), 
					null, null);
		}
		
		//this.msgService.saveBatch(messages);
		this.msgService.batchSaveAndNotifyOthers(messages);
		log.info("发送待阅消息成功：待阅人=" + userList);
		
		return true;
	}
	
	/**
	 * 发起人催办消息
	 * @throws Exception 
	 */
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public boolean doRemind(String instanceId) throws Exception {
		List<ApprovalList> approvalList = queryApprovalList(instanceId, null);
		Instance instance = this.getObjectById(instanceId);
		InstanceUnit instanceUnit = this.translate(instance, approvalList);
		List<ApproverUnit> currentApprovers = instanceUnit.getCurrentApprover();
		List<SysNoticeMsg> messages = new ArrayList<SysNoticeMsg>();
		BusinessObject businessObject = businessObjectService.getObjectById(instance.getBusinessObjectId());
		String mobileUrl = null;
		String mobileParam = null;
		for(ApproverUnit approver : currentApprovers) {
			String url = "/flow/runtime/approve/view.html"
					+ "?instanceId=" + instanceId
					+ "&requestSource=DY"
					+ "&businessId=" + instance.getBusinessId()
					+ "&pcUrl=" + businessObject.getPcUrl()
					+ "&time=" + new Date().getTime();			
			UserDto user = new UserDto(approver.getApproverId(), approver.getApproverName());
			SysNoticeMsg message = this.msgService.newFlowMsg(user, "DY", instance.getName(), url, mobileUrl, mobileParam);
			messages.add(message);
		}
		
		//this.msgService.saveBatch(messages);
		this.msgService.batchSaveAndNotifyOthers(messages);
		log.info("发送催办消息成功!");
		
		return true;
	}

	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public boolean collection(String instanceId) throws Exception {
		SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userId = securityUserBeanInfo.getSecurityUserDto().getId();
		InstanceCollection collection = new InstanceCollection();
		collection.setId(IDGenerator.getUUID());
		collection.setUserId(userId);
		collection.setInstanceId(instanceId);
		instanceCollectionService.save(collection);
		
		//TODO zhangdaoqiang 记录操作日志
		instanceLogService.saveLogData(instanceId, null, null, null, 
				InstanceOperateType.COLLECT.getValue(), userId, null, null);
		
		return true;
	}
	
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public boolean doAdjustAc(List<ApprovalList> approvalList) throws Exception {
		
		//处理同岗多人问题，分裂处理
		approvalList = handleMutipulUser(approvalList);
		
		//重新排序（环节、岗位、人员）
		setRelations(approvalList);
		
		Instance instance = this.getObjectById(approvalList.get(0).getInstanceId());
		InstanceUnit instanceUnit = this.translate(instance, approvalList);
		
		//设置模型【环节层】【岗位层】DB操作类型(人员层已在translate设置)，此方法从下往上设置，同时适用调整AC及审批人
		setDbAction(instanceUnit);
	
		//重新排序(环节、岗位、人员)
		sort(instanceUnit);
		
		EmptyOperation operation = new EmptyOperation();
		operation.setService(this);
		operation.setCurrentApprovers(instanceUnit);	// TODO zhangdaoqiang 待重构，抽成一个具体的操作。
		operation.save(instanceUnit);
		
		return true;
	}
	
	private List<ApprovalList> handleMutipulUser(List<ApprovalList> approvalList) {
		List<ApprovalList> newList = new ArrayList<ApprovalList>();
		for (ApprovalList approval : approvalList) {
			if (!StringUtils.isEmpty(approval.getApproverId()) && approval.getApproverId().contains(",")) {
				String[] userIdArray = approval.getApproverId().split(",");
				String[] userNameArray = approval.getApproverName().split(",");
				if (userIdArray.length != userNameArray.length) {
					throw new FlowException(
							"调整环节时数据错误：审批人ID与名称个数不一致！userIdArray=" + userIdArray + ", userNameArray" + userNameArray);
				}

				for (int i = 0; i < userIdArray.length; i++) {
					ApprovalList newApproval = (ApprovalList) JavaBeanCopier.copy(approval);
					newApproval.setApproverId(userIdArray[i]);
					newApproval.setApproverName(userNameArray[i]);
					newList.add(newApproval);
				}
			} else {
				newList.add(approval);
			}
		}
		return newList;
	}

	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public List<ApprovalList> doCreateAc(InstanceAcDto instanceAcDto) throws Exception {
		List<ApprovalList> approvalLists = new ArrayList<ApprovalList>();
		String code=instanceAcDto.getCode();
		code=code+"-"+DateUtils.getDateSSSText();
		instanceAcDto.setCode(code);
		Map<String,String> map=new HashMap<>();
		map.put("fiId", instanceAcDto.getFiId());
		map.put("id", instanceAcDto.getId());
		map.put("code", instanceAcDto.getCode());
		//校验编码重复   add by gyh  
		Integer i=instanceAcDao.checkCode(map);
		if(i!=null && i>0){
			throw new FlowException("该流程此编码已存在，不可重复！");
		}
		/*
		 * 构建AcDto
		 */
		AcDto acDto = new AcDto();
		acDto.setId(instanceAcDto.getId());
		acDto.setCode(instanceAcDto.getCode());
		acDto.setName(instanceAcDto.getName());
		acDto.setApproveTypeId(instanceAcDto.getApproveTypeId());
		acDto.setParticipant(instanceAcDto.getParticipant());
		acDto.setCcPerson(instanceAcDto.getCcPerson());
		acDto.setPostMultiPerson(instanceAcDto.getPostMultiPerson());
		acDto.setApproveStrategy(instanceAcDto.getApproveStrategy());

		/*
		 * 构建业务变量Map
		 */
		Map<String, Object> businessVariable = new HashMap<String, Object>();
		Instance instance = getObjectById(instanceAcDto.getFiId());
		businessVariable.put("flow_business_company_id", instance.getFlowBusinessCompanyId());
		businessVariable.put("flow_business_company_name", instance.getFlowBusinessCompanyName());
		businessVariable.put("flow_business_dept_id", instance.getFlowBusinessDeptId());
		businessVariable.put("flow_business_dept_name", instance.getFlowBusinessDeptName());
		businessVariable.put("flow_business_project_id", instance.getFlowBusinessProjectId());
		businessVariable.put("flow_business_project_name", instance.getFlowBusinessProjectName());
		businessVariable.put("flow_business_project_branch_id", instance.getFlowBusinessProjectBranchId());
		businessVariable.put("flow_business_project_branch_name", instance.getFlowBusinessProjectBranchName());
		businessVariable.put("start_user_id", instance.getStartUserId());
		businessVariable.put("start_user_name", instance.getStartUserName());
		
		/*
		 * 解析人员岗位
		 */
		List<FlowAcPostDto> flowAcPostDtos = parsePostNew(businessVariable, acDto);
		if(CollectionUtils.isEmpty(flowAcPostDtos)) {
			throw new FlowException("调整环节时后台查询对应岗位为空！");
		}
		for (FlowAcPostDto flowAcPostDto : flowAcPostDtos) {
			List<FlowPostParticipantDto> flowPostParticipantDtos = flowAcPostDto.getFlowPostParticipantDtos();
			if (flowPostParticipantDtos != null && flowPostParticipantDtos.size() > 0) {
				for (FlowPostParticipantDto post : flowPostParticipantDtos) {
					ApprovalList approvalList = new ApprovalList();
					approvalList.setAcId(acDto.getId());
					approvalList.setAcName(acDto.getName());
					approvalList.setAcCode(acDto.getCode());
					approvalList.setAcType(acDto.getAcType());
					approvalList.setPostId(post.getPostId());
					approvalList.setPostName(post.getPostPrefixName());
					approvalList.setApproverId(post.getUserId());
					approvalList.setApproverName(post.getUserName());
					approvalList.setApprovalTypeId(acDto.getApproveTypeId());
					approvalList.setMultiPerson(acDto.getPostMultiPerson());
					approvalList.setMultiPost(acDto.getApproveStrategy());
					approvalList.setChangeType(1);
					approvalLists.add(approvalList);
				}
			} else {
				ApprovalList approvalList = new ApprovalList();
				approvalList.setAcId(acDto.getId());
				approvalList.setAcName(acDto.getName());
				approvalList.setAcType(acDto.getAcType());
				approvalList.setAcCode(acDto.getCode());
				approvalList.setChangeType(1);
				approvalList.setMultiPerson(acDto.getPostMultiPerson());
				approvalList.setMultiPost(acDto.getApproveStrategy());
				approvalLists.add(approvalList);
			}
		}

		return approvalLists;
	}

	
	
	/**
	 * 根据人员层DBaction设置AC层及岗位层DBAction
	 * 
	 * @param instanceUnit
	 */
	private void setDbAction(InstanceUnit instanceUnit) {
		for(ACUnit acUnit : instanceUnit.getAcList()) {
			
			//排序岗位
			int postDelCount = 0;
			List<PostUnit> posts = acUnit.getPosts();
			if(CollectionUtils.isEmpty(posts)) {
				continue;
			}
			for(PostUnit post : posts) {
				
				int approverDelCount = 0;
				List<ApproverUnit> approvers = post.getApprovers();
				if(CollectionUtils.isEmpty(approvers)) {
					continue;
				}
				for(ApproverUnit approver : approvers) {
					if(approver.getDbAction() == 2) {
						approverDelCount++;
					}
				}
				if(approverDelCount == approvers.size()) {
					post.setDbAction(2);
					postDelCount++;
				}
			}
			
			if(postDelCount == posts.size()) {
				acUnit.setDbAction(2);
			}
		}
	}

	private void sort(InstanceUnit instanceUnit) {
		int acIndex = 0;
		for(ACUnit acUnit : instanceUnit.getAcList()) {
			
			//非删除时
			if(acUnit.getDbAction() != 2) {
				acUnit.setAcPx(++acIndex);
			}
			
			//排序岗位
			int postIndex = 0;
			List<PostUnit> posts = acUnit.getPosts();
			if(CollectionUtils.isEmpty(posts)) {
				continue;
			}
			for(PostUnit post : posts) {
				
				if(post.getDbAction() != 2) { 
					post.setPostSeq(++postIndex);
				}
				
				List<ApproverUnit> approvers = post.getApprovers();
				if(CollectionUtils.isEmpty(approvers)) {
					continue;
				}
				int approverIndex = 0;
				for(ApproverUnit approver : approvers) {
					
					if(approver.getDbAction() != 2) {
						approver.setApproverSeq(++approverIndex);	//实际只有一个人，岗位未合并！！！
					}
				}
			}
		}
	}

	private void setRelations(List<ApprovalList> approvalList) {
		for(ApprovalList approver : approvalList) {
			
			//新增AC或人员
			if(approver.getChangeType() == 1) {
				approver.setGroupKey(IDGenerator.getUUID());	//人员KEY
				approver.setAcPostId(IDGenerator.getUUID());	//Post表KEY	多人岗位相同时未合并！！！
				
				approver.setAcType(FlAcType.TASK.getAcType());
				approver.setAcStatus(ACStatus.NOT_RUNNING.getValue());
				
				//删除审批人？？？
			} else if(approver.getChangeType() == 2) {	
				//不需要作关系维护
			}
			
		}
		//设置前后关联关系
		for(int i=1; i<approvalList.size() - 1; i++) {
			ApprovalList current = approvalList.get(i);
			ApprovalList pre = approvalList.get(i - 1);
			ApprovalList next = approvalList.get(i + 1);
			
			if(StringUtils.isEmpty(current.getPreAcIds())) {
				current.setPreAcIds(pre.getAcId());
				
				String nextAcIds = pre.getNextAcIds();
				if(StringUtils.isEmpty(nextAcIds)) {
					pre.setNextAcIds(current.getAcId());
				} else {
					pre.setNextAcIds(nextAcIds + "," + current.getAcId());
				}
				
				if(pre.getChangeType() == 0) {
					pre.setChangeType(3);	//修改态
				}
			}
			
			if(StringUtils.isEmpty(current.getNextAcIds())) {
				current.setNextAcIds(next.getAcId());
				
				String preAcIds = next.getPreAcIds();
				if(StringUtils.isEmpty(preAcIds)) {
					next.setPreAcIds(current.getAcId());
				} else {
					next.setPreAcIds(preAcIds + "," + current.getAcId());
				}
				
				if(next.getChangeType() == 0) {
					next.setChangeType(3);
				}
			}
		}
	}

	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public boolean doUpdateApprover(List<ApprovalList> list) throws Exception {
		
		//处理被删除的审批人
		//处理新增的审批人
		
		//同调整AC
		doAdjustAc(list);
		
		return true;
	}

	/**
	 * 根据任务ID修改审批意见
	 */
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public boolean doUpdateApprovalComments(List<ApprovalList> list) {
		for(ApprovalList approver : list) {
			if(approver.getChangeType() == 3) {	//修改
				instanceTaskService.updateComment(approver.getTaskId(), approver.getTaskComments());
			}
		}
		
		String instanceId = list.get(0).getInstanceId();
		String starter = list.get(0).getApproverId();
		
		//TODO zhangdaoqiang 记录操作日志
		try {
			instanceLogService.saveLogData(instanceId, null, null, null, 
					InstanceOperateType.MODIFY_ADVICE.getValue(), starter, null, null);
		} catch (Exception e) {
			throw new FlowException("保存流程操作日志异常！", e);
		}
		return true;
	}

	/**
	 * 查询打回人列表
	 */
	@Override
	public List<Map<String, String>> queryApproverBeReturn(String instanceId, String taskId) {
		List<Map<String, String>> retList = new ArrayList<Map<String, String>>();
		List<ApprovalList> approverDone = queryApproverDone(instanceId);
		for(ApprovalList approver : approverDone) {
			
			//去除协办人
			if(TaskType.ASSIST.getValue().equals(approver.getTaskType())) {
				continue;
			}
			//去除沟通发起人
			if(TaskType.STARTER.getValue().equals(approver.getTaskType())
					&& !StringUtils.isEmpty(approver.getFromId())) {	//区别于发起人
				continue;
			}
			
			Map<String, String> map = new HashMap<String, String>();
			String approverId = approver.getApproverId();
			String acId = approver.getAcId();
			map.put("id", acId + "." + approverId);
			String displayName = approver.getAcName() + "【" + approver.getApproverName() + "】";
			map.put("displayName", displayName);
			map.put("name", approver.getApproverName());
			retList.add(map);
		}
		
		return retList;
	}
	
	/**
	 * 查询审批完毕列表
	 * 
	 * @param instanceId
	 * @return
	 */
	public List<ApprovalList> queryApproverDone(String instanceId) {
		List<ApprovalList> approverDone = queryApprovalList(instanceId, TaskStatus.FINISHED.getValue());
		Iterator<ApprovalList> iterator = approverDone.iterator();
		while(iterator.hasNext()) {
			
			//过滤自动跳过的人
			ApprovalList approver = iterator.next();
			String currentApproverTypeId = approver.getApprovalTypeId();
			String acType = approver.getAcType();
			
			//去除非（会签+校稿+开始）自动跳过的人
			if (!"HQ".equals(currentApproverTypeId)
					&& !"JG".equals(currentApproverTypeId)
					&& !FlAcType.START.getAcType().equals(acType)
					&& approver.getAutoPass() == 1) {
				iterator.remove();
			}
		}
		
		return approverDone;
	}
	
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public boolean approval(ApprovalSubmitDto approvalDto) throws Exception {
		
		if(approvalDto.getOperationType() == null) {
			throw new FlowException("用户选择的操作为空，请检查！");
		}
		
		//重复提交处理
		String runKey = approvalDto.getInstanceId() + "." + approvalDto.getTaskId();
		boolean isRunning = flowRunningSet.isMember(FLOWRUNNING, runKey);
		log.info("重复提交处理：" + runKey + "-" + isRunning);
		if(isRunning) {
			throw new FlowException("流程处理中，请稍候！");
		} else {
			flowRunningSet.add(FLOWRUNNING, runKey);
		}
		
		//1、查询审批列表，目标数据集
		InstanceUnit instanceUnit = this.getInstanceUnit(approvalDto.getInstanceId());
		
		//2、根据操作处理:
		Operation operation = OperationFactory.newOperation(approvalDto.getOperationType(),this);
		
		try {
			operation.action(instanceUnit, approvalDto);
			
		} catch (Exception e) {
			log.info(e);
			throw e;
		} finally {
			flowRunningSet.remove(FLOWRUNNING, runKey);
		}
		
		log.info("审批执行成功！");
		return true;
	}
	
	private InstanceUnit getInstanceUnit(String instanceId) throws Exception {
		List<ApprovalList> approvalList = queryApprovalList(instanceId, null);
		Instance instance = this.getObjectById(instanceId);
		log.info("审核列表：" + approvalList);
		log.info("实例信息：" + instance);
		
		return this.translate(instance, approvalList);
	}

	@Override
    @Transactional(readOnly = false, propagation = Propagation.REQUIRED)
	public String saveAllInstanceData(InstanceDto instanceDto) throws Exception {
		
		log.info("--------------流程实例初始化数据saveAllInstanceData------------------" + JacksonUtils.toJson(instanceDto));
		
		//1、保存流程实例
		Instance instance = generateInstanceData(instanceDto);
		
		//2、保存流程变量
		List<InstanceVariable> varList = generateInstanceVariable(instanceDto, instance);
		
	    List<InstanceAc> acList = new ArrayList<InstanceAc>();
	    Map<String, InstanceAc> acMap = new HashMap<String, InstanceAc>();	//key=nodeid,一次保存中各节点的nodeid不能重复
	    
	    List<InstancePost> posts = new ArrayList<InstancePost>();
	    List<InstanceGroup> groups = new ArrayList<InstanceGroup>();
	    List<InstanceCs> csList = new ArrayList<InstanceCs>();
	    List<InstanceStep> stepList = new ArrayList<InstanceStep>();
	    InstanceTask startTask = null;
	    
	    //3、保存AC实例
	    long acIndex = 0;
	    List<AcDto> acDtoList = instanceDto.getAcDtoList();
	    for(AcDto acDto : acDtoList) {
	    	InstanceAc instanceAc = generateInstanceAc(instanceDto, acDto, ++acIndex);
			acList.add(instanceAc);
			acMap.put(acDto.getNodeId(), instanceAc);
			
			//6、保存流程抄送人
			csList.addAll(generateCsData(instance, instanceAc, acDto));
			
			//4、保存AC对应的岗位
			long postIndex = 0;
			List<PostDto> postList = JacksonUtils.fromJson(acDto.getPosts(), ArrayList.class, PostDto.class);
			if(CollectionUtils.isEmpty(postList)) {
				//join节点时记录已到达分支数，判断是否往下走
				if(FlAcType.JOIN.getAcType().equals(acDto.getAcType())) {
					instanceAc.setLeftPost(acDto.getPreviousAcDtos().size());
				}
				continue;
				
			} else {
				//普通节点初始剩余未处理岗位数
				instanceAc.setLeftPost(postList.size());
			}
			for(PostDto postDto : postList) {
				InstancePost post = generatePosts(postDto, instanceAc.getId(), ++postIndex);
				posts.add(post);
				
				//5、保存岗位对应的group
				long groupIndex = 0;
				List<UserDto> userList = postDto.getUsers();
				if(CollectionUtils.isEmpty(userList)) {
					continue;
				} else {
					post.setLeftPerson(userList.size());	//初始剩余未处理人数据
				}
				for(UserDto user : userList) {
					
					if(user.getId() == null) {
						continue;
					}
					String[] ids = user.getId().split(",");
					String[] names = user.getName().split(",");
					
					post.setLeftPerson(ids.length);
					
					for(int i=0; i<ids.length; i++) {
						InstanceGroup group = generateGroup(ids[i], names[i], post, instanceAc, ++groupIndex);
						groups.add(group);
						
						//为发起人初始化任务(只初始化数据，状态在启动时设置)
						if(acIndex == 1 && postIndex == 1 && groupIndex == 1) {
							
							startTask = generateStartTask(group, instanceDto);	//发起节点默认只有一个人
						}
					}
				}
			}
	    }
	    
	    //设置环节的上下环节
	    setPreAndNextAc(acList, acDtoList, acMap);
	    
	    //保存实例连线
	    stepList = generateInstanceStep(acList);
	    
	    setAutoPass(groups, instance);
		
		//7、保存流程可阅人
	    List<InstanceAccessible> accessibleList = generateAccessibleData(instanceDto,instance);
	    
	    //8、生成表单数据列表
	    List<PcForm> pcForms = new ArrayList<PcForm>();
	    List<MobileForm> mobileForms = new ArrayList<MobileForm>();
	    generateFormData(instance,instanceDto,pcForms,mobileForms);

	    //9、生成UploadAttachment列表
	    List<UploadAttachment> attachmentList = new ArrayList<UploadAttachment>(); 
	    generateUploadAttachmentData(instance, instanceDto, attachmentList);
		
		//8、保存数据
	    instanceDao.save(instance);
	    log.info("===1.2 流程实例保存成功能： instanceId=" + instance.getId());
	    instanceVariableService.saveBatch(varList);
	    log.info("===1.3 流程变量保存成功：size=" + varList.size());
	    instanceAcService.saveBatch(acList);
	    log.info("===1.4 流程环节保存成功：size" + acList.size());
	    instancePostDao.saveBatch(posts);
	    log.info("===1.5 流程岗位保存成功：size=" + posts.size());
	    instanceGroupService.saveBatch(groups);
	    log.info("===1.6 流程审处理人保存成功： size=" + groups.size());
	    instanceAccessibleService.saveBatch(accessibleList);
	    log.info("===1.7 流程可阅人保存成功： size=" + accessibleList.size());	  
	    instanceCsService.saveBatch(csList);
	    log.info("===1.8 流程抄送人保存成功： size=" + csList.size());	  
	    instanceStepService.saveBatch(stepList);
	    log.info("===1.9 环节连线保存成功： size=" + stepList.size());	  
	    pcFormService.saveBatch(pcForms);
	    log.info("===1.10 pc表单数据保存成功： size=" + pcForms.size());	 
	    mobileFormService.saveBatch(mobileForms);
	    log.info("===1.11 mobile表单数据保存成功： size=" + mobileForms.size());	
	    
	    if(attachmentList!=null && attachmentList.size()>0){
	    	log.info("================ uploadAttachmentService.saveBatch() attachmentList="+JacksonUtils.toJson(attachmentList));
	    	uploadAttachmentService.saveBatch(attachmentList);
	    }
	    
	    //发起人为空，场景：发起人的主岗为空
	    if(startTask == null) {
	    	throw new FlowException("流程【" + instanceDto.getName() + "】发起人为空！");
	    }	
//	    } else {
//		    instanceTaskService.save(startTask);
//		    log.info("===1.7 流程任务保存成功  taskId=" + startTask.getId());
//		    log.info("===1.8、实例数据保存成功：instanceId = " + instanceDto.getId());
//	    }
//	    throw new FlowException("test");
	    
	    //启动流程
	    start(instanceDto);
	    log.info("===2、流程启动成功：instanceId = " + instanceDto.getId());
		return instanceDto.getId();
	}

	private void generateUploadAttachmentData(Instance instance, InstanceDto instanceDto,
			List<UploadAttachment> attachmentList) throws Exception {
		log.info("================ generateUploadAttachmentData()  UploadAttachmentDtoList="+JacksonUtils.toJson(instanceDto.getUploadAttachmentDtoList()));
		List<UploadAttachmentDto> attachmentDtoList = instanceDto.getUploadAttachmentDtoList();
		for (UploadAttachmentDto uploadAttachmentDto : attachmentDtoList) {
			UploadAttachment uploadAttachment = new UploadAttachment();
			//BeanUtils.copyProperties(uploadAttachment, uploadAttachmentDto);//old-20170718
			BeanUtils.copyProperties(uploadAttachmentDto, uploadAttachment);//new-20170718
			uploadAttachment.setId(IDGenerator.getUUID());
			uploadAttachment.setDelflag(false);
			uploadAttachment.setInstanceId(instance.getId());
			uploadAttachment.setReadType("1");
			attachmentList.add(uploadAttachment);
		}
		
	}

	/**
	 * 设置前后节点
	 * @param acList
	 * @param acDtoList
	 * @param acMap：<nodeid, Ac>:一次保存中各节点的nodeid不能重复
	 */
	private void setPreAndNextAc(List<InstanceAc> acList, List<AcDto> acDtoList, Map<String, InstanceAc> acMap) {
		for(int i=0; i<acList.size(); i++) {
			AcDto acDto = acDtoList.get(i);
			List<String> previousAcNodeIds = acDto.getPreviousAcDtos();
			List<String> nextNodeNodeIds = acDto.getNextNodeDtos();
			
			InstanceAc ac = acList.get(i);
			ac.setPreAcIds(getAcIds(previousAcNodeIds, acMap));
			ac.setNextAcIds(getAcIds(nextNodeNodeIds, acMap));
		}
	}

	private String getAcIds(List<String> acNodeIds, Map<String, InstanceAc> acMap) {
		if(CollectionUtils.isEmpty(acNodeIds)) {
			return "";
		}
		StringBuilder acIds = new StringBuilder();
		for(String nodeId : acNodeIds) {
			String acId = acMap.get(nodeId).getId();
			acIds.append(acId).append(",");
		}
		acIds.deleteCharAt(acIds.length() - 1);
		return acIds.toString();
	}

	private List<InstanceStep> generateInstanceStep(List<InstanceAc> acList) {
		Map<String, InstanceAc> acMap = new HashMap<String, InstanceAc>();
		for(InstanceAc ac : acList) {
			acMap.put(ac.getId(), ac);
		}
		List<InstanceStep> stepList = new ArrayList<InstanceStep>();
		for(InstanceAc ac: acList) {
			String nextAcIds = ac.getNextAcIds();
			if(!StringUtils.isEmpty(nextAcIds)) {
				String[] nextAcIdArray = nextAcIds.split(",");
				for(String acId : nextAcIdArray) {
					InstanceStep step = new InstanceStep();
					step.setId(IDGenerator.getUUID());
					step.setName(ac.getName() + "->" + acMap.get(acId).getName());
					step.setFiId(ac.getFiId());
					step.setSourceId(ac.getId());
					step.setTargetId(acId);
				}
			}
		}
		return stepList;
	}

	/**
	 * 流程启动时根据模板配置，设置审批人是否自动通过标志
	 * 
	 * @param groups
	 * @param instance
	 */
	private void setAutoPass(List<InstanceGroup> groups, Instance instance) {
		String approvalRepeat = instance.getApprovalRepeat();
		if(ApproverRepeatHandleType.NOT_SKIP.getValue().equals(approvalRepeat)) {
			return ;
		}
		Map<String, List<InstanceGroup>> filterMap = new HashMap<String, List<InstanceGroup>>();
		for(InstanceGroup group : groups) {
			String participantId = group.getParticipantId();
			List<InstanceGroup> sameApprovers = filterMap.get(participantId);
			if(sameApprovers == null) {
				sameApprovers = new ArrayList<InstanceGroup>();
				filterMap.put(participantId, sameApprovers);
			}
			sameApprovers.add(group);
		}
		
		for(List<InstanceGroup> sameApprovers : filterMap.values()) {
			if(sameApprovers != null && sameApprovers.size() > 1) {
				if(ApproverRepeatHandleType.FIRST.getValue().equals(approvalRepeat)) {
					for(int i=1; i<sameApprovers.size(); i++) {
						sameApprovers.get(i).setAutoPass(AutoPassType.AUTO_PASS.getValue());
						sameApprovers.get(0).setAutoPass(AutoPassType.NOT_PASS.getValue());
					}
				} else if(ApproverRepeatHandleType.LAST.getValue().equals(approvalRepeat)) {
					for(int i=0; i<sameApprovers.size() - 1; i++) {
						sameApprovers.get(i).setAutoPass(AutoPassType.AUTO_PASS.getValue());
						sameApprovers.get(sameApprovers.size() - 1).setAutoPass(AutoPassType.NOT_PASS.getValue());
					}
				}
			}
		}
	}

	private InstanceTask generateStartTask(InstanceGroup group, InstanceDto instanceDto) {
		InstanceTask startTask = new InstanceTask();
	    startTask.setId(IDGenerator.getUUID());
	    startTask.setGroupId(group.getId());
	    startTask.setType(TaskType.STARTER.getValue());
	    startTask.setActivateDate(new Timestamp(System.currentTimeMillis()));
	    startTask.setOperationCode("start");
	    startTask.setOperationName("发起流程");
	    startTask.setUserNote(instanceDto.getUserNote());
	    startTask.setStatus(TaskStatus.NOT_RUNNING.getValue());
	    startTask.setApproverId(instanceDto.getStartUserId());
		return startTask;
	}

	/**
	 * 流程实例数据设置为启动状态：启动流程实例（已保存实例数据）
	 * 1、开始节点状态置为已完成
	 * 2、查询下一节点数据
	 * 3、将下一节点数据置为运行中
	 * 
	 * @throws Exception 
	 */
	private boolean start(InstanceDto instanceDto) throws Exception {
		String instanceId = instanceDto.getId();
		List<ApprovalList> acList = this.queryApprovalList(instanceId, null);
		Instance instance = this.getObjectById(instanceId);
		InstanceUnit instanceUnit = translate(instance, acList);
		
		ApprovalSubmitDto approvalDto = new ApprovalSubmitDto();
		approvalDto.setOperationName("发起流程");
		approvalDto.setOperationType(OperationType.START.getCode());
		approvalDto.setUserNote(instanceDto.getUserNote());
		approvalDto.setInstanceIdBeforeReturn(instanceDto.getInstanceIdBeforeReturn());
		Operation startOperation = OperationFactory.newOperation(approvalDto.getOperationType(), this);
		startOperation.action(instanceUnit, approvalDto);
		
		return true;
	}
	
	/**
	 * 1、将扁平的结构转换成多层结构
	 * 
	 * @param instance
	 * @param acList
	 * @return
	 */
	private InstanceUnit translate(Instance instance, List<ApprovalList> approvalList) {
		InstanceUnit instanceUnit = new InstanceUnit();
		
		//1、流程实例转换
		fillInstanceUnit(instanceUnit, instance, approvalList);
		
		//2、环节转换
		Map<String, ACUnit> acMap = fillACUnit(instanceUnit, approvalList);
		
		//3、岗位转换
		Map<String, PostUnit> postMap = fillPost(acMap, approvalList);
		
		//4、人员（组）转换
		fillApprovers(postMap, approvalList);
		
		return instanceUnit;
	}
	
	/**
	 * 1、将扁平的结构转换成多层结构
	 * 
	 * @param instance
	 * @param acList
	 * @return
	 */
	public InstanceUnit translate(InstanceUnit instanceUnit, List<ApprovalList> approvalList) {
		InstanceUnit newInstanceUnit = new InstanceUnit();
		newInstanceUnit.setId(instanceUnit.getId());
		newInstanceUnit.setFlId(instanceUnit.getFlId());
		
		//2、环节转换
		Map<String, ACUnit> acMap = fillACUnit(newInstanceUnit, approvalList);
		
		//3、岗位转换
		Map<String, PostUnit> postMap = fillPost(acMap, approvalList);
		
		//4、人员（组）转换
		fillApprovers(postMap, approvalList);
		
		return newInstanceUnit;
	}

	private void fillApprovers(Map<String, PostUnit> postMap, List<ApprovalList> approvalList) {
		String preGroupKey = null;
		for(ApprovalList row : approvalList) {
			String groupKey = row.getGroupKey();
			if(StringUtils.isEmpty(groupKey)) {
				continue;
			}
			if(!groupKey.equals(preGroupKey)) {
				preGroupKey = groupKey;
				ApproverUnit approver = new ApproverUnit();
				approver.setId(groupKey);
				approver.setAcPostId(row.getAcPostId());
				approver.setApproverId(row.getApproverId());
				approver.setApproverName(row.getApproverName());
				approver.setApproverSeq(row.getApproverSeq());
				approver.setAutoPass(row.getAutoPass());
				
				approver.setStatus(row.getApproverStatus());
				
				//代理相关
				approver.setProxy(row.getProxy());
				approver.setProxyed(row.getProxyed());
				approver.setProxyType(row.getProxyType());
				
				//页面调整环节时使用！
				approver.setDbAction(row.getChangeType());
				
				TaskUnit task = new TaskUnit();
				task.setTaskId(row.getTaskId());
				task.setTaskType(row.getTaskType());
				task.setTaskStatus(row.getTaskStatus());
				task.setStartTime(row.getTaskStartTime());
				task.setEndTime(row.getTaskEndTime());
				task.setTaskResult(row.getTaskResult());
				task.setTaskResultName(row.getTaskResultName());
				task.setTaskComments(row.getTaskComments());
				task.setFromId(row.getFromId());
				task.setFromName(row.getFromName());
				task.setMsgId(row.getMsgId());
				approver.setTask(task);
				
				PostUnit currentPost = postMap.get(row.getAcPostId());
				approver.setOwner(currentPost);
				
				List<ApproverUnit> approvers = currentPost.getApprovers();
				if(approvers == null) {
//					approvers = new ArrayList<ApproverUnit>();
					approvers = new CopyOnWriteArrayList<ApproverUnit>();
					currentPost.setApprovers(approvers);
				}
				approvers.add(approver);
			}
		}
	}

	private Map<String, PostUnit> fillPost(Map<String, ACUnit> acMap, List<ApprovalList> approvalList) {
		Map<String, PostUnit> postMap = new HashMap<String, PostUnit>();
		String preAcPostId = null;
		for(ApprovalList row : approvalList) {
			String acPostId = row.getAcPostId();
			if(StringUtils.isEmpty(acPostId)) {
				continue;
			}
			
			//算同岗位的人数
			if(!acPostId.equals(preAcPostId)) {
				preAcPostId = row.getAcPostId();
				PostUnit postUnit = new PostUnit();
				postUnit.setPostId(row.getPostId());
				postUnit.setPostName(row.getPostName());
				postUnit.setPostStatus(row.getPostStatus());
				postUnit.setPostSeq(row.getPostSeq());
				postUnit.setStartTime(row.getPostStartTime());
				postUnit.setEndTime(row.getPostEndTime());
				postUnit.setAcId(row.getAcId());
				postUnit.setId(row.getAcPostId());
				postUnit.setLeftPerson(row.getLeftPerson());
				
				if(row.getChangeType() == 1) {
					postUnit.setDbAction(1);
				}
				
				ACUnit currentAc = acMap.get(row.getAcId());
				postUnit.setOwner(currentAc);
				
				List<PostUnit> posts = currentAc.getPosts();
				if(posts == null) {
//					posts = new ArrayList<PostUnit>();	//在遍历过程中，有可能出现删除元素的情况，如跳过审批人等 
					posts = new CopyOnWriteArrayList<PostUnit>();
					currentAc.setPosts(posts);
				}
				posts.add(postUnit);
				postMap.put(postUnit.getId(), postUnit);	
			}
		}
		return postMap;
	}

	private Map<String, ACUnit> fillACUnit(InstanceUnit instanceUnit, List<ApprovalList> approvalList) {
		Map<String, ACUnit> acMap = new HashMap<String, ACUnit>();
		List<ACUnit> acList = new ArrayList<ACUnit>();
		String preAcId = null;
		for(ApprovalList row : approvalList) {
			if(!row.getAcId().equals(preAcId)) {
				preAcId = row.getAcId();
				ACUnit acUnit = new ACUnit();
				acUnit.setAcId(row.getAcId());
				acUnit.setAcCode(row.getAcCode());
				acUnit.setAcName(row.getAcName());
				acUnit.setAcStatus(row.getAcStatus());
				acUnit.setAcType(row.getAcType());
				acUnit.setAcStartTime(row.getAcStartTime());
				acUnit.setAcEndTime(row.getAcEndTime());
				acUnit.setApprovalTypeId(row.getApprovalTypeId());
				acUnit.setApprovalType(row.getApprovalType());
				acUnit.setAddLabel(row.isAddLabel());
				acUnit.setMultiPerson(row.getMultiPerson());
				acUnit.setMultiPost(row.getMultiPost());
				acUnit.setAcPx(row.getAcPx());
				acUnit.setSource(row.getSource());
				acUnit.setLeftPost(row.getLeftPost());
				acUnit.setCcPerson(getCCPerson(row));
				acUnit.setPreAcIds(row.getPreAcIds());
				acUnit.setNextAcIds(row.getNextAcIds());
				acUnit.setFromReturn(row.getFromReturn());
				
				//新增环节
				if(row.getChangeType() == 1) {
					acUnit.setDbAction(1);
					acUnit.setLeftPost(1);
				}
				
				//修改环节
				if(row.getChangeType() == 3) {
					acUnit.setChange(true);
				}
				
				acUnit.setOwner(instanceUnit);
				
				acList.add(acUnit);
				acMap.put(acUnit.getAcId(), acUnit);
			}
		}
		
		setPreAndNextAc(acList, acMap);
		
		instanceUnit.setAcList(acList);
		return acMap;
	}
	
	private void setPreAndNextAc(List<ACUnit> acList, Map<String, ACUnit> acMap) {
		for(int i=0; i<acList.size(); i++) {
			ACUnit acUnit = acList.get(i);
			String preAcIds = acUnit.getPreAcIds();
			if(!StringUtils.isEmpty(preAcIds)) {
				List<ACUnit> preAcs = new ArrayList<ACUnit>();
				String[] preAcIdArray = preAcIds.split(",");
				for(String preAcId : preAcIdArray) {
					ACUnit pre = acMap.get(preAcId);
					if(pre != null) {
						preAcs.add(pre);
					}
				}
				acUnit.setPreAcs(preAcs);
			}
			
			String nextAcIds = acUnit.getNextAcIds();
			if(!StringUtils.isEmpty(nextAcIds)) {
				List<ACUnit> nextAcs = new ArrayList<ACUnit>();
				String[] nextAcIdArray = nextAcIds.split(",");
				for(String nextAcId : nextAcIdArray) {
					ACUnit next = acMap.get(nextAcId);
					if(next != null) {
						nextAcs.add(next);
					}
				}
				acUnit.setNextAcs(nextAcs);
			}
		}
	}

	private List<UserDto> getCCPerson(ApprovalList row) {
		String ccIds = row.getCcIds();
		String ccNames = row.getCcNames();
		if(!StringUtils.isEmpty(ccIds)) {
			List<UserDto> ccPersons = new ArrayList<UserDto>();
			String[] idArray = ccIds.split(",");
			String[] nameArray = ccNames.split(",");
			for(int i=0; i<idArray.length; i++) {
				ccPersons.add(new UserDto(idArray[i], nameArray[i]));
			}
			return ccPersons;
		}
		return null;
	}

	/**
	 * @param approvalList 
	 * @param instanceUnit
	 * @param instance
	 * @throws InvocationTargetException 
	 * @throws  
	 */
	private void fillInstanceUnit(InstanceUnit instanceUnit, Instance instance, List<ApprovalList> approvalList){
//		try {
//			// TODO 有些字段不统一，先统一copy一份
//			BeanUtils.copyProperties(instanceUnit, instance);
//		} catch (IllegalAccessException | InvocationTargetException e) {
//			throw new RuntimeException(e);
//		}
		instanceUnit.setId(instance.getId());
		instanceUnit.setCode(instance.getCode());
		instanceUnit.setName(instance.getName());
		instanceUnit.setStatus(instance.getStatus());
		instanceUnit.setAppId(instance.getAppId());
		instanceUnit.setFlId(instance.getFlId());
		instanceUnit.setBusinessObjectId(instance.getBusinessObjectId());
		instanceUnit.setBusinessId(instance.getBusinessId());
		instanceUnit.setRetract(instance.getRetract());
		instanceUnit.setPostMultiPerson(instance.getPostMultiPerson());
		instanceUnit.setTendId(instance.getTendId());
		instanceUnit.setBusinessObjectCode(instance.getBusinessObjectCode());
		instanceUnit.setCustomFormId(instance.getCustomFormId());
		instanceUnit.setCustomFormURL(approvalList.get(0).getPcUrl());
		
		instanceUnit.setApproverNullStrategy(instance.getApprovalPersonIsNull());
		instanceUnit.setApproverRepaet(instance.getApprovalRepeat());
		instanceUnit.setPostNull(instance.getPostIsNull());
		instanceUnit.setBusinessCorpId(instance.getFlowBusinessCompanyId());
		instanceUnit.setBusinessDeptId(instance.getFlowBusinessDeptId());
		instanceUnit.setBusinessProjectId(instance.getFlowBusinessProjectId());
		instanceUnit.setBusinessProjectStage(instance.getFlowBusinessProjectBranchId());
		instanceUnit.setDoArchive(instance.getDoArchive());
		instanceUnit.setStartDate(instance.getStartDate());
		instanceUnit.setStartUserName(instance.getStartUserName());
		
		instanceUnit.setFlCode(approvalList.get(0).getFlCode());
	}

	private InstanceGroup generateGroup(String userId, String userName, InstancePost post, InstanceAc instanceAc, long groupIndex) {
		InstanceGroup instanceGroup = new InstanceGroup();
		instanceGroup.setAcId(instanceAc.getId());
		instanceGroup.setAcPostId(post.getId());
//    	instanceGroup.setParseType(postDto.getParseType()); TODO zhangdaoqiang	
		instanceGroup.setPostId(post.getPostId());
		instanceGroup.setPostName(post.getPostName());
		instanceGroup.setParticipantId(userId);
		instanceGroup.setParticipantName(userName);
		instanceGroup.setPx(groupIndex);
		instanceGroup.setSource("1");//1-模板; 2-加签
//    	instanceGroup.setSourceId(flId);//flId
		instanceGroup.setDisable(false);
		instanceGroup.setId(IDGenerator.getUUID());
		instanceGroup.setStatus(ApproverStatus.NOT_RUNNING.getValue());
		return instanceGroup;
	}

	private InstanceAc generateInstanceAc(InstanceDto instanceDto, AcDto acDto, long acIndex) throws Exception {
		String flId = instanceDto.getFlId();
	    String instanceId = instanceDto.getId();
    	InstanceAc instanceAc = new InstanceAc();
    	//BeanUtils.copyProperties(instanceAc, acDto);//将ac的属性copy到instanceAc上//old-20170718
    	BeanUtils.copyProperties(acDto, instanceAc );//new 20170718
    	//ac_type、approve_type_id、x、y、width、height、is_add_label、approve_strategy、post_multiperson、
    	//source、source_id需要设置，status默认是1-未运行；
    	instanceAc.setSource("1");//1：模板，2加签 ，3 前置代理  4后置代理
		instanceAc.setSourceId(flId);
		instanceAc.setFiId(instanceId);
		instanceAc.setId(IDGenerator.getUUID());
    	instanceAc.setCode(acDto.getCode()+"-"+DateUtils.getDateSSSText());
    	instanceAc.setName(acDto.getName());
    	instanceAc.setPx(acIndex);
    	instanceAc.setStatus(ACStatus.NOT_RUNNING.getValue());
    	
    	System.out.println("\n>>> save(instanceAc) is done. instanceAc="+JacksonUtils.toJson(instanceAc));
		return instanceAc;
	}

	private InstancePost generatePosts(PostDto postDto, String acId, long postIndex) {
		InstancePost post = new InstancePost(); 
		post.setId(IDGenerator.getUUID());
		post.setPostId(postDto.getId());
		post.setPostName(postDto.getName());
		post.setActivateDate(new Timestamp(System.currentTimeMillis()));
		post.setStatus(PostStatus.NOT_RUNNING.getValue());
		post.setPx(postIndex);
		post.setAcId(acId);
		return post;
	}

	/**
	 * 生成表单数据列表
	 * 
	 * @param instanceDto
	 * @param pcForms
	 * @param mobileForms
	 * @throws Exception
	 */
	private void generateFormData(Instance instance, InstanceDto instanceDto, List<PcForm> pcForms, List<MobileForm> mobileForms)
			throws Exception {
		List<PcFormDto> pcFormDtoList = instanceDto.getPcFormDtoList();
		for (PcFormDto pcFormDto : pcFormDtoList) {
			PcForm pcForm = new PcForm();
			//BeanUtils.copyProperties(pcForm, pcFormDto);//old-20170718
			BeanUtils.copyProperties(pcFormDto, pcForm);
			pcForm.setId(IDGenerator.getUUID());
			pcForm.setInstanceId(instance.getId());
			pcForm.setFlId(instance.getFlId());
			pcForm.setDelflag(false);
			pcForm.setBusinessObjectId(instance.getBusinessObjectId());
			pcForm.setBusinessId(instance.getBusinessId());
			if(pcForm.getValue() != null) {
				pcForm.setValue(pcForm.getValue().replaceAll("'", "\""));
			}
			pcForms.add(pcForm);
		}
		List<MobileFormDto> mobileFormDtoList = instanceDto.getMobileFormDtoList(); 
		int sort = 1000;
		for (MobileFormDto mobileFormDto : mobileFormDtoList) {
			MobileForm mobileForm = new MobileForm();
			//BeanUtils.copyProperties(mobileForm, mobileFormDto);//old-20170718
			BeanUtils.copyProperties(mobileFormDto, mobileForm);
			mobileForm.setId(IDGenerator.getUUID());
			mobileForm.setInstanceId(instance.getId());
			mobileForm.setFlId(instance.getFlId());
			mobileForm.setBusinessObjectId(instance.getBusinessObjectId());
			mobileForm.setBusinessId(instance.getBusinessId());
			mobileForm.setSort(sort++);
			mobileForm.setDelflag(false);
			//针对考勤移动端处理单引号问题
			if(mobileForm.getValue() != null) {
				mobileForm.setValue(mobileForm.getValue().replaceAll("'", "\""));
			}
			mobileForms.add(mobileForm);
		}
	}
	
	public static void main(String[] args) {
		String test = "<a title=\"下载\" href=\"javascript:void(0);\" onclick=\"downLoad(this,3224,' qu ')\">数据库表字段修改依据.xlsx</a>";
		System.out.println(test.replace("'", "\\'"));
	}
	
	/**
	 * 查询模板数据,赋值给Instance并保存Instance数据到数据库中, 同时保存实例的相关业务变量 
	 * @param instance
	 * @param flId
	 * @return 实例ID
	 * @throws Exception
	 */
	private Instance generateInstanceData(InstanceDto instanceDto) throws Exception {
		String dateText = DateUtils.getDateSSSText();
		String flId = instanceDto.getFlId();
		Instance instance = new Instance();
		//BeanUtils.copyProperties(instance, instanceDto);//将instanceDto的业务属性copy到newInstance上old-20170718
		BeanUtils.copyProperties(instanceDto, instance);
	    Fl fl = flService.getObjectById(flId);
	    System.out.println("\n fl="+JacksonUtils.toJson(fl));
	    /*app_id、business_object_id、fl_id、retract、approval_repeat、
	     post_isnull、approval_person_is_nul、post_multi_person 来自FL模板FL的字段；*/
	    //BeanUtils.copyProperties(instance, fl);//将fl的属性copy到newInstance上//old20170718
	    BeanUtils.copyProperties(fl, instance);//new 20170718
	    instance.setId(instanceDto.getId());//对id和flId再进行单独的赋值
		instance.setFlId(flId);
	    
	    //实例Instance的code的值是从模板FL的code复制过来，再加上时间戳；
	    //name的值是从模板FL的flow_title[默认标题规则] 的值解析出来，进行赋值
	    instance.setCode(fl.getCode()+"-"+dateText);
	    instance.setName(instanceDto.getName());//
	    instance.setStatus(null);
	    instance.setStartDate(new Timestamp(System.currentTimeMillis()));
	    
	    return instance;
	}

	private List<InstanceAccessible> generateAccessibleData(InstanceDto instanceDto, Instance instance) throws Exception {
		List<PostDto> postList = JacksonUtils.fromJson(instanceDto.getAccessiblePosts(), ArrayList.class, PostDto.class);
		List<InstanceAccessible> accessibleList = new ArrayList<InstanceAccessible>();
		
		if (postList != null) {
			for (PostDto postDto : postList) {
				List<UserDto> users = postDto.getUsers();
				if(CollectionUtils.isEmpty(users)) {
					continue;
				}
				for (UserDto userDto : users) {
					if(StringUtils.isEmpty(userDto.getId())) {
						continue;
					}
					String[] userIdArr = userDto.getId().split(",");
					String[] userNameArr = userDto.getName().split(",");
					if (userIdArr != null && userIdArr.length > 0 && userNameArr != null && userNameArr.length > 0) {
						for (int i = 0; i < userIdArr.length; i++) {
							InstanceAccessible instanceAccessible = new InstanceAccessible();
							instanceAccessible.setId(IDGenerator.getUUID());
							instanceAccessible.setFiId(instance.getId());
							instanceAccessible.setAccessibleId(userIdArr[i]);
							instanceAccessible.setAccessibleName(userNameArr[i]);

							accessibleList.add(instanceAccessible);
						}
					}
				}
			}			
		}

	    return accessibleList;
	}
	
	private List<InstanceCs> generateCsData(Instance instance, InstanceAc instanceAc, AcDto acDto) throws Exception {
		List<PostDto> postList = JacksonUtils.fromJson(acDto.getCsPosts(), ArrayList.class, PostDto.class);
		List<InstanceCs> instanceCsList = new ArrayList<InstanceCs>();

		if (postList != null) {
			for (PostDto postDto : postList) {
				List<UserDto> users = postDto.getUsers();
				for (UserDto userDto : users) {
					String[] userIdArr = userDto.getId().split(",");
					String[] userNameArr = userDto.getName().split(",");
					if (userIdArr != null && userIdArr.length > 0 && userNameArr != null && userNameArr.length > 0) {
						for (int i = 0; i < userIdArr.length; i++) {
							InstanceCs instanceCs = new InstanceCs();
							instanceCs.setId(IDGenerator.getUUID());
							instanceCs.setPostName(postDto.getName());
							instanceCs.setPostId(postDto.getId());
							instanceCs.setParticipantName(userNameArr[i]);
							instanceCs.setParticipantId(userIdArr[i]);
							instanceCs.setFiId(instance.getId());
							instanceCs.setAcId(instanceAc.getId());

							instanceCsList.add(instanceCs);
						}
					}
				}
			}	
		}
		
		return instanceCsList;
	}
	
	private List<InstanceVariable> generateInstanceVariable(InstanceDto instanceDto, Instance instance) throws Exception {
	    //暂时注释掉变量的细节
	    List<InstanceVariableDto> variableDtoList = instanceDto.getVariableDtoList();
	    List<InstanceVariable> varList = new ArrayList<InstanceVariable>();
	    for(InstanceVariableDto variableDto : variableDtoList){
	    	InstanceVariable variable = new InstanceVariable();
	    	variable.setId(IDGenerator.getUUID());
	    	variable.setName(variableDto.getName());
	    	if(variableDto.getVal()!=null){
	    		variable.setVal(variableDto.getVal().replaceAll("'", "\""));
	    	}
	    	variable.setFiId(instance.getId());
	    	varList.add(variable);
			
	    	if("flow_business_company_id".equals(variableDto.getName())){
	    		instance.setFlowBusinessCompanyId(variableDto.getVal());
	    	}
	    	if("flow_business_dept_id".equals(variableDto.getName())){
	    		instance.setFlowBusinessDeptId(variableDto.getVal());
	    	}
	    	if("flow_business_project_id".equals(variableDto.getName())){
	    		instance.setFlowBusinessProjectId(variableDto.getVal());
	    	}
	    	if("flow_business_project_branch_id".equals(variableDto.getName())){
	    		instance.setFlowBusinessProjectBranchId(variableDto.getVal());
	    	}
	    	if("start_user_id".equals(variableDto.getName())){
	    		instance.setStartUserId(variableDto.getVal());
	    	}
	    	if("flow_business_company_name".equals(variableDto.getName())){
	    		instance.setFlowBusinessCompanyName(variableDto.getVal());
	    	}
	    	if("flow_business_dept_name".equals(variableDto.getName())){
	    		instance.setFlowBusinessDeptName(variableDto.getVal());
	    	}
	    	if("flow_business_project_name".equals(variableDto.getName())){
	    		instance.setFlowBusinessProjectName(variableDto.getVal());
	    	}
	    	if("flow_business_project_branch_name".equals(variableDto.getName())){
	    		instance.setFlowBusinessProjectBranchName(variableDto.getVal());
	    	}
	    	if("start_user_name".equals(variableDto.getName())){
	    		instance.setStartUserName(variableDto.getVal());
	    	}
	    }
	    return varList;
	}

	@Override
	public boolean processChange(String userInfo, String fiId, String changeType, List<ACUnit> acUnitList) {		
		
		if(FlowChangeType.PROXY.getValue().equals(changeType)) {
			proxyHandle(userInfo, fiId, acUnitList);
			
		} else if(FlowChangeType.ADDLABEL.getValue().equals(changeType)) {
			addLabelHandle(userInfo, fiId, acUnitList);
			
		} else if(FlowChangeType.REPALCEAPPROVER.getValue().equals(changeType)) {
			replaceApproverHandle(userInfo, fiId, acUnitList);
			
		} else if(FlowChangeType.WITHDRAW.getValue().equals(changeType)) {
			withdrawHandle(userInfo, fiId, acUnitList);
		}
		return true;
	}
	
	/**
	 * 代理处理
	 * 
	 * @param userInfo
	 * @param fiId
	 * @param acUnitList
	 * @return
	 */
	private boolean proxyHandle(String userInfo, String fiId, List<ACUnit> acUnitList) {
		return true;
	}
	
	/**
	 * 加签处理
	 * 
	 * @param userInfo
	 * @param fiId
	 * @param acUnitList
	 * @return
	 */
	private boolean addLabelHandle(String userInfo, String fiId, List<ACUnit> acUnitList) {
		return true;
	}
	
	/**
	 * 替换审批人处理
	 * 
	 * @param userInfo
	 * @param fiId
	 * @param acUnitList
	 * @return
	 */
	private boolean replaceApproverHandle(String userInfo, String fiId, List<ACUnit> acUnitList) {
		return true;
	}
	
	/**
	 * 撤回处理
	 * @param userInfo
	 * @param fiId
	 * @param acUnitList
	 * @return
	 */
	private boolean withdrawHandle(String userInfo, String fiId, List<ACUnit> acUnitList) {
		return true;
	}

	public InstanceDao getInstanceDao() {
		return instanceDao;
	}

	public void setInstanceDao(InstanceDao instanceDao) {
		this.instanceDao = instanceDao;
	}

	public FlService getFlService() {
		return flService;
	}

	public void setFlService(FlService flService) {
		this.flService = flService;
	}

	public StepService getStepService() {
		return stepService;
	}

	public void setStepService(StepService stepService) {
		this.stepService = stepService;
	}

	public InstanceAcService getInstanceAcService() {
		return instanceAcService;
	}

	public void setInstanceAcService(InstanceAcService instanceAcService) {
		this.instanceAcService = instanceAcService;
	}

	public InstanceStepService getInstanceStepService() {
		return instanceStepService;
	}

	public void setInstanceStepService(InstanceStepService instanceStepService) {
		this.instanceStepService = instanceStepService;
	}

	public ParticipantService getParticipantService() {
		return participantService;
	}

	public void setParticipantService(ParticipantService participantService) {
		this.participantService = participantService;
	}

	public InstanceGroupService getInstanceGroupService() {
		return instanceGroupService;
	}

	public void setInstanceGroupService(InstanceGroupService instanceGroupService) {
		this.instanceGroupService = instanceGroupService;
	}

	public InstanceVariableService getInstanceVariableService() {
		return instanceVariableService;
	}

	public void setInstanceVariableService(InstanceVariableService instanceVariableService) {
		this.instanceVariableService = instanceVariableService;
	}

	public InstanceTaskService getInstanceTaskService() {
		return instanceTaskService;
	}

	public void setInstanceTaskService(InstanceTaskService instanceTaskService) {
		this.instanceTaskService = instanceTaskService;
	}

	@Override
	public List<InstanceDto> queryListByApprover(Map<String, String> map) {
		return instanceDao.queryListByApprover(map);
	}

	@Override
	public List<InstanceDto> queryInstanceBy(Map<String, Object> map) {
		String starterIdText = (String)map.get("starterId");
		if(starterIdText!=null && starterIdText.length()>5 ){
			String starterIds[] = starterIdText.split(",");
			map.remove("starterId");
			map.put("starterId", starterIds);
		}
		
		String orgIdText = (String)map.get("orgId");
		if(orgIdText!=null  && orgIdText.length()>5){
			String orgIds[] = orgIdText.split(",");
			map.remove("orgId");
			map.put("orgId", orgIds);
		}
		return instanceDao.queryInstanceBy(map);
	}

	public InstancePostDao getInstancePostDao() {
		return instancePostDao;
	}

	public void setInstancePostDao(InstancePostDao instancePostDao) {
		this.instancePostDao = instancePostDao;
	}

	public SysNoticeMsgService getMsgService() {
		return msgService;
	}

	public void setMsgService(SysNoticeMsgService msgService) {
		this.msgService = msgService;
	}

	public String getFlowApproveUrl() {
		return flowApproveUrl;
	}

	public void setFlowApproveUrl(String flowApproveUrl) {
		this.flowApproveUrl = flowApproveUrl;
	}
	
	@Override
	public List<InstanceDto> personalQueryList(Map<String, String> map) {	
		return instanceDao.personalQueryList(map);
	}

	public SearchIndexDtoServiceCustomer getSearchIndexDtoServiceCustomer() {
		return searchIndexDtoServiceCustomer;
	}

	public void setSearchIndexDtoServiceCustomer(SearchIndexDtoServiceCustomer searchIndexDtoServiceCustomer) {
		this.searchIndexDtoServiceCustomer = searchIndexDtoServiceCustomer;
	}

	public CustomFormInstanceDtoServiceCustomer getCustomFormInstanceDtoServiceCustomer() {
		return customFormInstanceDtoServiceCustomer;
	}

	public void setCustomFormInstanceDtoServiceCustomer(
			CustomFormInstanceDtoServiceCustomer customFormInstanceDtoServiceCustomer) {
		this.customFormInstanceDtoServiceCustomer = customFormInstanceDtoServiceCustomer;
	}

	public AgentService getAgentService() {
		return agentService;
	}

	public void setAgentService(AgentService agentService) {
		this.agentService = agentService;
	}
	
	public BusinessObjectService getBusinessObjectService() {
		return businessObjectService;
	}

	public void setBusinessObjectService(BusinessObjectService businessObjectService) {
		this.businessObjectService = businessObjectService;
	}

	@Override
	public List<FlowAcPostDto> parsePost(Map<String, Object> businessVariable, AcDto acDto) {

		List<AcDto> acDtos = new ArrayList<AcDto>();
		acDtos.add(acDto);

		return parsePost(businessVariable, acDtos);
	}

	@Override
	public List<FlowAcPostDto> parsePost(Map<String, Object> businessVariable, List<AcDto> acDtos) {

		SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userInfo = JacksonUtils.toJson(securityUserBeanInfo);

		Map<String, Object> postBodyMap = new HashMap<String, Object>();
		postBodyMap.put("flow_business_variable_data", JacksonUtils.toJson(businessVariable));
		postBodyMap.put("flow_ac_data", JacksonUtils.toJson(acDtos));

		// 请求获取岗位人员信息接口
		String flowPostDataStr = postDtoServiceCustomer.getFlowPostData(userInfo, JacksonUtils.toJson(postBodyMap));
		Map<String, Object> flowPostDataMap = JacksonUtils.fromJson(flowPostDataStr, Map.class);
		// 获取岗位人员信息
		List<FlowAcPostDto> flowAcPostDtoList = JacksonUtils.fromJson((String) flowPostDataMap.get("result"),
				ArrayList.class, FlowAcPostDto.class);

		return flowAcPostDtoList;
	}

	public InstanceOperateLogService getInstanceLogService() {
		return instanceLogService;
	}

	public void setInstanceLogService(InstanceOperateLogService instanceLogService) {
		this.instanceLogService = instanceLogService;
	}

	public OrgnazationDtoServiceCustomer getOrgnazationDtoServiceCustomer() {
		return orgnazationDtoServiceCustomer;
	}

	public void setOrgnazationDtoServiceCustomer(OrgnazationDtoServiceCustomer orgnazationDtoServiceCustomer) {
		this.orgnazationDtoServiceCustomer = orgnazationDtoServiceCustomer;
	}

	public MonitorSettingService getMonitorSettingService() {
		return monitorSettingService;
	}

	public void setMonitorSettingService(MonitorSettingService monitorSettingService) {
		this.monitorSettingService = monitorSettingService;
	}

	public UserDtoServiceCustomer getUserDtoServiceCustomer() {
		return userDtoServiceCustomer;
	}

	public void setUserDtoServiceCustomer(UserDtoServiceCustomer userDtoServiceCustomer) {
		this.userDtoServiceCustomer = userDtoServiceCustomer;
	}
	
	public List<UserDto> queryAdminList() {
		UserDtoServiceCustomer userService = this.getUserDtoServiceCustomer();
		SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String queryAdminList = userService.queryAdminList(JacksonUtils.toJson(securityUserBeanInfo));
		log.info("查询系统管理员：result = " + queryAdminList);
		DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(queryAdminList,
				DubboServiceResultInfo.class);
		List<UserDto> adminList = new ArrayList<UserDto>();
		if(dubboServiceResultInfo.isSucess()) {
			List<Map<String, Object>> list = JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), ArrayList.class, Map.class);
			for(Map<String, Object> user : list) {
				UserDto u = new UserDto();
				u.setId((String) user.get("id"));
				u.setName((String) user.get("realName"));
				adminList.add(u);
			}
		}
		return adminList;
	}
	
	public Map<String, String> queryOrgBy(String postId) {
		SecurityUserBeanInfo userBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userJson = JacksonUtils.toJson(userBeanInfo);
		Map<String, String> params = new HashMap<String, String>();
		params.put("postId", postId);
		String orgInfos = orgnazationDtoServiceCustomer.getOrgsByPostId(userJson, JacksonUtils.toJson(params));
		log.info("调用权限接口查询组织信息：result = " + orgInfos);
		DubboServiceResultInfo dubboServiceResultInfo = JacksonUtils.fromJson(orgInfos,
				DubboServiceResultInfo.class);
		Map<String, String> result = new HashMap<String, String>();
		if(dubboServiceResultInfo.isSucess()) {
			List<OrgnazationDto> list = JacksonUtils.fromJson(dubboServiceResultInfo.getResult(), ArrayList.class, OrgnazationDto.class);
			for(OrgnazationDto org : list) {
				if ("zb".equals(org.getType())||"company".equals(org.getType())) {
					result.put("companyId", org.getId());
				}else if("dept".equals(org.getType())){
					result.put("deptId", org.getId());
				}else if("group".equals(org.getType())){
					result.put("projectId", org.getId());
				}else if("branch".equals(org.getType())){
					result.put("branchId", org.getId());
				}
			}
		}
		return result;
	}

	@Override
	public MobileApproveDto queryMobileApproveByParamMap(Map<String, Object> paramMap) {
		// TODO Auto-generated method stub
		return null;
	}

	public OrgnazationOutServiceCustomer getOrgnazationOutServiceCustomer() {
		return orgnazationOutServiceCustomer;
	}

	public void setOrgnazationOutServiceCustomer(OrgnazationOutServiceCustomer orgnazationOutServiceCustomer) {
		this.orgnazationOutServiceCustomer = orgnazationOutServiceCustomer;
	}

	@Override
	public List<InstanceDto> getRelateInstances(String instanceId) {
		return instanceDao.getRelateInstances(instanceId);
	}

	@Override
	public String scanOverdueAc() throws Exception {
		List<OverdueAc> overdueAcs = instanceDao.queryOverdueAc();
		
		List<SysNoticeMsg> messages = new ArrayList<SysNoticeMsg>();
		for(OverdueAc overdueAc : overdueAcs) {
			if(OverdueAcHandle.NOTICE_APPROVER.getValue().equals(overdueAc.getOverdueHandle())) {
				messages.addAll(newMessages(overdueAc));
				
			} else if(OverdueAcHandle.BACKTO_STARTER.getValue().equals(overdueAc.getOverdueHandle())) {
				Operation operation = OperationFactory.newOperation(OperationType.RETURN.getCode(),this);
				InstanceUnit instanceUnit = this.getInstanceUnit(overdueAc.getInstanceId());
				ApprovalSubmitDto approvalDto = new ApprovalSubmitDto();
				operation.action(instanceUnit, approvalDto);
				
			} else {
				
				
			}
		}
		
		try {
			msgService.batchSaveAndNotifyOthers(messages);
		} catch (Exception e) {
			throw new FlowException("流程逾期扫描定时任务中发送消息失败！", e);
		}

		return null;
	}

	private List<SysNoticeMsg> newMessages(OverdueAc overdueAc) {
		List<SysNoticeMsg> msgList = new ArrayList<SysNoticeMsg>();
		String msgTitle = "流程【" + overdueAc.getInstanceName() + "】中的环节【"
					+ overdueAc.getAcName() + "】逾期" + overdueAc.getDuration() + "小时，请及时处理！";
		String msgUrl = "/flow/runtime/approve/view.html"
				+ "?instanceId=" + overdueAc.getInstanceId()
				+ "&businessId=" + overdueAc.getBusinessId()
				+ "&flCode=" + overdueAc.getFlCode()
				+ "&pcUrl=" + overdueAc.getPcUrl()
				+ "&requestSource=DY"
				+ "&time=" + new Date().getTime();
		String receiverIds = overdueAc.getCurrentApproverIds();
		String receiverNames = overdueAc.getCurrentApproverNames();
		if(StringUtils.isEmpty(receiverIds)) {
			return null;
		}
		
		String[] idArray = receiverIds.split(",");
		String[] nameArray = receiverNames.split(",");
		for(int i=0; i<idArray.length; i++) {
			UserDto user = new UserDto(idArray[i], nameArray[i]);
			SysNoticeMsg msg = this.msgService.newFlowMsg(user, "DY", msgTitle, msgUrl, null, null);
			msgList.add(msg);
		}
		return msgList;
	}
	
	public InstanceTransitionRecordService getInstanceTransitionRecordService() {
		return instanceTransitionRecordService;
	}

	public void setInstanceTransitionRecordService(InstanceTransitionRecordService instanceTransitionRecordService) {
		this.instanceTransitionRecordService = instanceTransitionRecordService;
	}

	@Override
	public List<FlowAcPostDto> parsePostNew(Map<String, Object> businessVariable, List<AcDto> acDtos) {
		
		SecurityUserBeanInfo securityUserBeanInfo = LoginUtils.getSecurityUserBeanInfo();
		String userInfo = JacksonUtils.toJson(securityUserBeanInfo);
		
		Map<String, Object> postBodyMap = new HashMap<String, Object>();
		postBodyMap.put("flow_business_variable_data", JacksonUtils.toJson(businessVariable));
		postBodyMap.put("flow_ac_data", JacksonUtils.toJson(acDtos));
		
		// 请求获取岗位人员信息接口
		String flowPostDataStr = postDtoServiceCustomer.getFlowPostDataNew(userInfo, JacksonUtils.toJson(postBodyMap));
		Map<String, Object> flowPostDataMap = JacksonUtils.fromJson(flowPostDataStr, Map.class);
		// 获取岗位人员信息
		List<FlowAcPostDto> flowAcPostDtoList = JacksonUtils.fromJson((String) flowPostDataMap.get("result"),
				ArrayList.class, FlowAcPostDto.class);
		
		return flowAcPostDtoList;
	}
	
	@Override
	public List<FlowAcPostDto> parsePostNew(Map<String, Object> businessVariable, AcDto acDto) {

		List<AcDto> acDtos = new ArrayList<AcDto>();
		acDtos.add(acDto);

		return parsePostNew(businessVariable, acDtos);
	}
	
	public void saveTransition(String instanceId, String userName, String actionName) throws Exception {
		InstanceTransitionRecord transitionRecord = new InstanceTransitionRecord();
		transitionRecord.setId(IDGenerator.getUUID());
		transitionRecord.setFiId(instanceId);
		transitionRecord.setTransationUserName(userName);
		transitionRecord.setTransationDate(new Timestamp(System.currentTimeMillis()));
		transitionRecord.setActionName(actionName);
		instanceTransitionRecordService.save(transitionRecord);
	}

	@Override
	public List<InstanceTransitionRecordDto> queryTransferList(String instanceId) {
		return instanceTransitionRecordService.queryTransferList(instanceId);
	}

}