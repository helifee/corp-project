package com.xinleju.platform.flow.dao.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.xinleju.platform.base.dao.impl.BaseDaoImpl;
import com.xinleju.platform.flow.dao.InstanceDao;
import com.xinleju.platform.flow.dto.ApprovalList;
import com.xinleju.platform.flow.dto.InstanceDto;
import com.xinleju.platform.flow.entity.Instance;
import com.xinleju.platform.flow.model.OverdueAc;

/**
 * @author admin
 * 
 * 
 */
@Repository
public class InstanceDaoImpl extends BaseDaoImpl<String,Instance> implements InstanceDao{

	public InstanceDaoImpl() {
		super();
	}

	@Override
	public List<Instance> queryInstanceByFlIdAndBusinessId(String flId, String businessId) {
		Map<String, String> parameters = new HashMap<String, String>();
		parameters.put("flId", flId);
		parameters.put("businessId", businessId);
		return getSqlSession().selectList(Instance.class.getName() + ".queryInstanceByFlIdAndBusinessId", parameters);
	}

	@Override
	public List<ApprovalList> queryApprovalList(String instanceId, String status) {
		Map<String, String> parameters = new HashMap<String, String>();
		parameters.put("instanceId", instanceId);
		parameters.put("status", status);
		return getSqlSession().selectList(Instance.class.getName() + ".queryApprovalList", parameters);
	}

	@Override
	public List<ApprovalList> queryApprovalListExternal(String flCode, String businessId, String appCode) {
		Map<String, String> parameters = new HashMap<String, String>();
		parameters.put("flCode", flCode);
		parameters.put("businessId", businessId);
		parameters.put("appCode", appCode);
		return getSqlSession().selectList(Instance.class.getName() + ".queryApprovalListExternal", parameters);
	}

	@Override
	public boolean changeStatus(String instanceId, String status) {
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("instanceId", instanceId);
		params.put("status", status);
		getSqlSession().update(Instance.class.getName() + ".changeStatus", params);
		return true;
	}

	@Override
	public List queryListByApprover(Map<String, String> paramMap) {
		String participantId = paramMap.get("participantId");
		String postId = paramMap.get("postId");
		if(participantId == null || "-1".equals(participantId)
				|| postId == null || "-1".equals(postId)  ){
			return new ArrayList();
		}
		return getSqlSession().selectList(Instance.class.getName()+".queryListByApprover", paramMap);
	}

	@Override
	public List<InstanceDto> queryInstanceBy(Map<String, Object> paramMap) {
		String appId = (String)paramMap.get("appId");
		if(appId == null || "-1".equals(appId) ){
			return new ArrayList();
		}
		paramMap = processApproveId(paramMap);
		return getSqlSession().selectList(Instance.class.getName()+".queryInstanceBy", paramMap);
	}
	
	private Map<String, Object> processApproveId(Map<String, Object> map) {
		String approverId = (String)map.get("approverId"); 
		if(approverId!=null && !"-1".equals(approverId) && !"".equals(approverId)){
			System.out.println("\n\n approverId="+approverId);
			String[] itemIds = approverId.split(",");
			map.put("approverId", itemIds);
		}else{
			map.remove("approverId");
		}
		return map;
	}

	@Override
	public List<InstanceDto> personalQueryList(Map<String, String> paramMap) {
		return getSqlSession().selectList(Instance.class.getName()+".personalQueryList", paramMap);
	}

	@Override
	public List<InstanceDto> getRelateInstances(String instanceId) {
		Map<String, String> parameters = new HashMap<String, String>();
		parameters.put("instanceId", instanceId);
		return getSqlSession().selectList(Instance.class.getName() + ".getRelateInstances", parameters);

	}

	@Override
	public List<OverdueAc> queryOverdueAc() {
		return getSqlSession().selectList(Instance.class.getName() + ".queryOverdueAc");
	}
}
