package com.xinleju.platform.flow.operation;

import java.util.HashMap;
import java.util.Map;

import com.xinleju.platform.flow.service.impl.InstanceServiceImpl;

public class OperationFactory {
	
	@SuppressWarnings("serial")
	private static Map<String, Operation> cache = new HashMap<String, Operation>() {{
		put(OperationType.ACCEPT.getCode(), new AcceptOperation());
		put(OperationType.AGREE.getCode(), new AgreeOperation());
		put(OperationType.ASSIST.getCode(), new AssistOperation());
		put(OperationType.NOACCEPT.getCode(), new NoAcceptOperation());
		put(OperationType.NOOBJECTION.getCode(), new NoObjectionOperation());
		put(OperationType.REPLY.getCode(), new ReplyOperation());
		put(OperationType.RETURN.getCode(), new ReturnOperation());
		put(OperationType.TALKTOFQR.getCode(), new TalkToFQROperation());
		put(OperationType.TRANSFER.getCode(), new TransferOperation());
		put(OperationType.START.getCode(), new StartOperation());
		put(OperationType.END.getCode(), new EndOperation());
		put(OperationType.EMPTY.getCode(), new EmptyOperation());
		put(OperationType.SKIPCURRENT.getCode(), new SkipCurrentApproverOperation());
		put(OperationType.FINISHFLOW.getCode(), new FinishFlowOperation());
		put(OperationType.RESTART.getCode(), new RestartOperation());
		put(OperationType.INVALID.getCode(), new InvalidOperation());
		put(OperationType.WITHDRAW_TASK.getCode(), new WithdrawTaskOperation());
		put(OperationType.WITHDRAW_FLOW.getCode(), new WithdrawFlowOperation());
	}};

	public static Operation newOperation(String operateType, InstanceServiceImpl service) {
		DefaultOperation operation = (DefaultOperation) cache.get(operateType);
		operation.setService(service);
		return operation;
	}
}
