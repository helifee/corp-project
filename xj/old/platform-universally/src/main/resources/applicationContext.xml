<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	    http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://www.springframework.org/schema/util 
        http://www.springframework.org/schema/util/spring-util-4.3.xsd"
        default-lazy-init="false">



    <util:properties id="configuration" location="classpath:configuration.properties"/>
	<context:component-scan base-package="com.xinleju.platform.**.service.impl"></context:component-scan>
	<context:component-scan base-package="com.xinleju.platform.**.dao.impl"></context:component-scan>
    <context:component-scan base-package="com.xinleju.platform.**.listenter"></context:component-scan>
   
    <!-- 基础数据源 -->
	 <bean id="mainDataSource" class="com.alibaba.druid.pool.DruidDataSource"  
        init-method="init" destroy-method="close">  
        <property name="driverClassName" value="#{configuration['db.driverClassName']}" />
        <property name="url" value="#{configuration['db.url']}" />
        <property name="username" value="#{configuration['db.username']}" />
        <property name="password" value="#{configuration['db.password']}" />
         <!-- 初始化连接大小 -->
        <property name="initialSize" value="#{configuration['db.initialSize']}" />
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="#{configuration['db.maxActive']}" />
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="#{configuration['db.minIdle']}" />
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="#{configuration['db.maxWait']}" />
	   <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
	    <property name="timeBetweenEvictionRunsMillis" value="#{configuration['db.timeBetweenEvictionRunsMillis']}" />  
	   
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
	    <property name="minEvictableIdleTimeMillis" value="#{configuration['db.minEvictableIdleTimeMillis']}" /> 
	    
	
	    
	    <property name="validationQuery" value="#{configuration['db.validationQuery']}" />  
    </bean>

    <bean id="dataSource" class="com.xinleju.platform.base.datasource.DynamicDataSource"  >
         <property name="targetDataSources">  
         <map>

         </map>
         </property>  
        <property name="defaultTargetDataSource" ref="mainDataSource"></property>
    </bean>

    <!-- 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="mainDataSource"  />
	</bean>
   <!-- 事务相关控制配置：例如配置事务的传播机制 -->  
   <!--
	<tx:advice id="transactionManagerAdviceService" transaction-manager="transactionManager">  
        <tx:attributes>  
          <tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException"/>  
          <tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.RuntimeException" />  
          <tx:method name="add*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.RuntimeException" />  
          <tx:method name="save*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.RuntimeException" />  
          <tx:method name="create*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.RuntimeException" />  
          <tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />  
          <tx:method name="find*" propagation="SUPPORTS"  read-only="true"/>  
          <tx:method name="get*" propagation="SUPPORTS"   read-only="true"/>  
          <tx:method name="select*" propagation="SUPPORTS"  read-only="true"/>  
          <tx:method name="query*" propagation="SUPPORTS"   read-only="true"/>  
        </tx:attributes>  
    </tx:advice>  
    
    	
    
	<aop:config>
		<aop:pointcut id="services" expression="execution(*  com.xinleju.platform..service.impl.*.*(..))" />
		<aop:advisor pointcut-ref="services" advice-ref="transactionManagerAdviceService" />
	</aop:config> 
  -->
    <!-- 开启事务注解驱动 -->  

     <tx:annotation-driven transaction-manager="transactionManager"  />   

    <!-- mybatis sessionFactory工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="mainDataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml"></property><!-- 配置mybatis的日志记录 --> 
		<property name="mapperLocations" value="#{configuration['mybatis.mapper']}"></property>
	</bean>
	
	<import resource="applicationContext-rabbit.xml"/>
	
	<!-- 任务调度 start -->
	
	<bean id="quartzSpringContext" class="com.xinleju.platform.univ.task.utils.QuartzSpringContext"/>
	
	<!-- 配置线程池-->
    <bean name="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="15"/>
        <property name="maxPoolSize" value="25"/>
        <property name="queueCapacity" value="100"/>
    </bean>
	
	
	<!-- 任务调度 start -->
	
	<!-- 测试 -->
	<!-- 
	<bean id="testJob" class="com.xinleju.platform.univ.task.utils.TestJob" />
	
	<bean id="jobDetail" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">  
	    <property name="targetObject" ref="testJob"></property>  
	    <property name="targetMethod" value="test1"></property>  
	    <property name="concurrent" value="false"></property>  
	    concurrent : false表示等上一个任务执行完后再开启新的任务  
	</bean>  
	
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="jobDetail"/> 
       <property name="cronExpression" value="0/15 * * * * ?"/> 
       <property name="startDelay" value="3000"></property>
	</bean>
	
	<bean id="schedulerFactoryBean"  class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="configLocation" value="classpath:quartz.properties"/>
		<property name="taskExecutor" ref="taskExecutor"/>
	    <property name="triggers">  
	        <list>  
	           <ref bean="cronTrigger"/>  
	        </list>  
	    </property>  
	</bean>  
	 -->
	<bean id="xlj_scheduler" lazy-init="false" autowire="no" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="configLocation" value="classpath:quartz.properties"/>
		<property name="applicationContextSchedulerContextKey" value="applicationContext"/>
		<property name="taskExecutor" ref="taskExecutor"/>
		<property name="overwriteExistingJobs" value="true"/>
		<property name="autoStartup" value="true" />
		<!-- <property name="triggers">
			<list>
				<ref bean="cronTriggerFactoryBean"/>
			</list>
		</property> -->
	</bean>
	<!-- 任务调度 end -->
	
	<!-- redis start -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"></bean>
	 
	<bean id="jedisConnectionFactory"
	    class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
	    <property name="hostName" value="#{configuration['redis.host']}" />
	    <property name="port" value="#{configuration['redis.port']}" />
	    <property name="password" value="#{configuration['redis.pass']}" />
	    <property name="timeout" value="#{configuration['redis.timeout']}" />
	    <property name="poolConfig" ref="jedisPoolConfig" />
	    
	    <property name="usePool" value="true" />
	</bean>
	 
	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
	    <property name="connectionFactory" ref="jedisConnectionFactory" />
	</bean>
	<!-- redis end -->
	
	<bean id="excuteTimeMonitor" class="com.xinleju.platform.base.interceptor.MethodTimeMonitoring"></bean>

	<aop:config>
	   <!--切入点-->    
         <aop:pointcut id="methodPoint" expression="execution(*  com.xinleju.platform..service.impl.*.*(..) ) ||  execution(*  com.xinleju.platform..dao.impl.*.*(..)) "/>
	    <!--在该切入点使用自定义拦截器-->    
		<aop:advisor pointcut-ref="methodPoint" advice-ref="excuteTimeMonitor"/>  
	</aop:config>
	
</beans>