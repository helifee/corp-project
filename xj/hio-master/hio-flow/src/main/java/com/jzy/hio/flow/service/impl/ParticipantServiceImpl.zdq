package com.jzy.hio.flow.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.jzy.hio.flow.dto.tobedeleted.BatchModifyReaderDto;
import com.jzy.hio.flow.dto.tobedeleted.ParticipantDto;
import com.jzy.hio.flow.entity.Participant;
import com.jzy.hio.flow.mapper.ParticipantDao;
import com.jzy.hio.flow.service.ParticipantService;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.xinleju.platform.base.service.impl.BaseServiceImpl;
import com.xinleju.platform.base.utils.IDGenerator;

/**
 * @author admin
 * 
 * 
 */

@Service
public class ParticipantServiceImpl extends  BaseServiceImpl<String,Participant> implements ParticipantService {
	

	@Autowired
	private ParticipantDao participantDao;

	@Override
	public void batchModifyReader(List<Participant> readerList) throws Exception {
		if(readerList==null || readerList.size()==0){
			return;
		}
		Participant firstReader = readerList.get(0);
		String action = firstReader.getAcId();
		for(Participant reader : readerList){
			if("3".equals(action)){//3-重置,需要先删除原有的可阅读人的数据 
				participantDao.deleteReaderDataByFlId(reader.getFlId());
			}
			reader.setAcId(null);
			reader.setId(IDGenerator.getUUID());
			int result = this.save(reader);
		}
		//2-删除暂时不做
	}

	@Override
	public void replaceFlowParticipant(List<ParticipantDto> approverList) throws Exception {
		if(approverList==null || approverList.size()==0){
			return;
		}
		for(ParticipantDto participantDto : approverList){
			//oldParticipantId:oldParticipantId, oldParticipantType: oldType, flId:item.id, 
			//participantId:replacerId, participantType:type, participantScope:scope
			int result = participantDao.replaceFlowParticipant(participantDto);
		}
		
	}

	@Override
	public List<ParticipantDto> queryFlowReaderList(Map<String, Object> paramMap) {
		String flowIds = (String)paramMap.get("flowIds");
		if(flowIds!=null && flowIds.length()>10){
			String idArray[] = flowIds.split(",");
			paramMap.put("flowIds", idArray);
		}
		
		return participantDao.queryFlowReaderList(paramMap);
	}

	@Override
	public void deleteReaderByFormData(BatchModifyReaderDto readerDto) {
		String flowIdText = readerDto.getFlowIdText();
		String dataIdArray[] = flowIdText.split(",");
		Map<String, Object> params = new HashMap<String, Object>();
		params.put("idArray", dataIdArray);
		participantDao.deleteReaderDataByParamMap(params);
	}

	@Override
	public void addResetReaderFormData(BatchModifyReaderDto readerDto) {
		String operateType = readerDto.getOperateType();
		String flowIdText = readerDto.getFlowIdText();
		String flowIds[] = flowIdText.split(",");
		//System.out.println("\n\n addResetReaderFormData operateType="+operateType+" instanceIdText = "+instanceIdText);
		
		if("reset".equals(operateType)){//重新设置需要删除对应的流程实例的可阅读人数据
			Map<String, Object> paramMap = new HashMap<String, Object>();
			paramMap.put("flowIds", flowIds);
			participantDao.deleteReaderDataByParamMap(paramMap);
		}
		
		List<ParticipantDto> readerList = readerDto.getPartcipantList();
		for(int idx1 = 0; idx1<flowIds.length; idx1++){
			String flowId = flowIds[idx1];
			for(ParticipantDto tempData : readerList){
				Participant reader = new Participant();
				BeanUtils.copyProperties(tempData, reader);
				reader.setFlId(flowId);
				reader.setId(IDGenerator.getUUID());
				reader.setDelflag(false);
				reader.setType("3");
				participantDao.insert(reader);
			}
		}
		//System.out.println("\n\n addResetReaderFormData() is end.....");
		
	}


}
