/*
package com.juzhouyun.cloud.base.dao;

import java.io.Serializable;
import java.util.List;
import java.util.Map;

import org.springframework.dao.DataAccessException;

import com.juzhouyun.cloud.base.utils.Page;
import org.springframework.stereotype.Component;

*/
/**
 * @author yzp
 * 
 *//*

public interface BaseDao<K extends Serializable, T> {
	*/
/**
	 * 新增业务对象
	 * 
	 * @param object  实体对象
	 *           
	 * 
	 *//*

	public int save(T object) throws DataAccessException;

	*/
/**
	 * 新增业务对象
	 * 
	 * @param statementName mybati新增语句Id
	 *            
	 * @param object 业务实体对象
	 *            
	 *//*

	public int save(String statementName, T object) throws DataAccessException;

	*/
/**
	 * 执行指定保存语句
	 * 
	 * @param statementName  mybati新增语句Id
	 *           
	 * @param paramaters  map参数对象
	 *            
	 *//*

	public int save(String statementName, Map<String, Object> paramaters)
			throws DataAccessException;
	
	*/
/**
	 * 批量保存对象
	 * @param objectList
	 *//*

	public int saveBatch(List<T> objectList) throws DataAccessException;

	*/
/**
	 * 
	 * 批量修改对象
	 * @param objectList
	 *//*

	public int updateBatch(List<T> objectList) throws DataAccessException;

	*/
/**
	 * 修改业务对象
	 * 
	 * @param object 业务实体对象
	 * 			
	 * @return 更新的记录数
	 *//*

	public int update(T object)  throws DataAccessException;

	*/
/**
	 * 修改业务对象
	 * 
	 * @param statementName mybati修改语句Id
	 *            
	 * @param object  业务实体对象
	 *           
	 * @return 更新的记录数
	 *//*

	public int update(String statementName, T object)  throws DataAccessException;

	*/
/**
	 * 执行指定修改语句
	 * 
	 * @param statementName  mybati修改语句Id
	 *           
	 * @param paramaters     map参数对象
	 *           
	 * @return 更新的记录数 
	 *//*

	public int update(String statementName, Map<String, Object> paramaters)  throws DataAccessException;
	

	
	*/
/**
	 * 通过Id删除业务对象
	 * 
	 * @param id 业务实体对象id
	 * 			
	 * @return 删除的记录数
	 *//*

	public int deleteObjectById(K id) throws DataAccessException;
	
	
	*/
/**
	 * 通过Ids批量删除业务对象
	 * 
	 * @param ids 业务实体对象ids列表
	 * 			
	 * @return 删除的记录数
	 *//*

	public int deleteAllObjectByIds(List<K> ids) throws DataAccessException;
	
	
	*/
/**
	 * 通过Id伪删除业务对象
	 * 
	 * @param id 业务实体对象id
	 * 			
	 * @return 删除的记录数
	 *//*

	public int deletePseudoObjectById(K id) throws DataAccessException;
	
	
	*/
/**
	 * 通过Ids批量伪删除业务对象
	 * 
	 * @param ids 业务实体对象ids列表
	 * 			
	 * @return 删除的记录数
	 *//*

	public int deletePseudoAllObjectByIds(List<K> ids) throws DataAccessException;

	*/
/**
	 * 删除符合条件业务对象
	 * 
	 * @param statementName mybatis删除语句Id
	 *            
	 * @param object  业务实体对象
	 *           
	 * @return 删除的记录数
	 *//*

	public int delete(String statementName, T object) throws DataAccessException;

	*/
/**
	 * 删除符合条件业务对象
	 * 
	 * @param statementName  mybati删除语句Id
	 *           
	 * @param paramaters     map参数对象
	 *           
	 * @return 删除新的记录数 
	 *//*

	public int delete(String statementName, Map<String, Object> paramaters) throws DataAccessException;

	*/
/**
	 * 根据Id获取业务对象
	 * 
	 * @param id  业务对象主键
	 * 
	 * @return     业务对象
	 *//*

	public T getObjectById(K id) throws DataAccessException;
	
	
	*/
/**
	 * 
	 * 获取符合条件一个对象,如果有多个会抛出异常
	 * @param statementName mybati查询语句Id
	 * 
	 * @param object
	 * 
	 * @return 返回符合条件的一个对象
	 *//*

	public T getObject(String statementName, T object) throws DataAccessException;
	
	
	*/
/**
	 * 获取符合条件的一个对象,如果有多个会抛出异常
	 * @param statementName mybati查询语句Id
	 * 
	 * @param paramater map参数
	 * 
	 * @return 返回符合条件的一个对象
	 *//*

	public T getObject(String statementName, Map<String, Object> paramater)  throws DataAccessException;
	


	*/
/**
	 * 查询符合条件的对象Page
	 * @param paramater 参数map
	 * @param start 开始记录数
	 * @param pageSize 每页记录数
	 * @return 返回符合条件的对象Page
	 *//*

	public Page getPage(Map<String, Object> paramater, Integer start,
			Integer pageSize) throws DataAccessException;
	
	
	*/
/**
	 * 分页排序
	 * @param paramater
	 * @param start
	 * @param limit
	 * @param sort
	 * @return
	 *//*

	public Page getPage(Map<String, Object> paramater, Integer start,
			Integer limit,String sort);

	*/
/**
	 * 查询符合条件的对象List列表 
	 * @param statementName  mybati查询语句Id
	 * @param paramater
	 * @return
	 *//*

	public List<T> queryList(String statementName,Map<String, Object> paramater) throws DataAccessException;

	*/
/**
	 * 查询符合条件的对象List列表 
	 * @param map
	 * @return
	 *//*

	public List<T> queryList(Map<String, Object> paramater)  throws DataAccessException;
	

	*/
/**
	 * 查询符合条件的对象List列表 
	 * @param map
	 * @return
	 *//*

	public List<T> queryList(Map<String, Object> paramater,String sort)  throws DataAccessException;
	
	
	*/
/**
	 * 获取总记录数
	 * @param map
	 * @return
	 *//*

	public int getCount(Map<String, Object> paramater)  throws DataAccessException;

	*/
/**
	 * 获取总记录数
	 * @param map
	 * @return
	 *//*

	public int getCount(String statementName,Map<String, Object> paramater)  throws DataAccessException;

}
*/
