package com.jzy.hio.base.service.impl;

import java.io.Serializable;
import java.util.List;

import org.apache.commons.collections.CollectionUtils;
import org.springframework.stereotype.Service;

import com.jzy.hio.base.dao.BaseMapper;
import com.jzy.hio.base.entity.BaseEntity;
import com.jzy.hio.base.service.BaseService;

@Service
public abstract class BaseServiceImpl<K extends Serializable, T> implements BaseService<K, T> {

	public int save(T paramT) throws Exception {
		return getMapper().insert(paramT);
	}

	public int saveBatch(List<T> objectList) throws Exception {
		return getMapper().insertList(objectList);
	}

	public int updateBatch(List<T> objectList) throws Exception {
		int result = 0;
		if(CollectionUtils.isNotEmpty(objectList)) {
			for(T object : objectList) {
				result = result + getMapper().updateByPrimaryKeySelective(object);
			}
		}
		return result;
	}

	public int update(T object) throws Exception {
		return getMapper().updateByPrimaryKeySelective(object);
	}

	public int deleteObjectById(K id) throws Exception {
		return getMapper().deleteByPrimaryKey(id);
	}

	public int deleteAllObjectByIds(List<K> ids) throws Exception {
		int result = 0;
		if(CollectionUtils.isNotEmpty(ids)) {
			for(K id : ids) {
				result = result + getMapper().deleteByPrimaryKey(id); 
			}
		}
		return result;
	}

	public T getObjectById(K id) throws Exception {
		return getMapper().selectByPrimaryKey(id);
	}

	public List<T> queryList(T paramater) throws Exception {
		return getMapper().select(paramater);
	}
	
//	public Page getPage(Map<String, Object> paramater, Integer start, Integer pageSize) throws Exception {
//		return getMapper().getPage(paramater, start, pageSize);
//	}
//
//	public Page getPage(Map<String, Object> paramater, Integer start, Integer pageSize, String sort) throws Exception {
//		return getMapper().getPage(paramater, start, pageSize, sort);
//	}
//
//	public List<T> queryList(Map<String, Object> paramater, String sort) throws Exception {
//		return getMapper().queryList(paramater, sort);
//	}

	public int deletePseudoObjectById(K id) throws Exception {
		BaseEntity entity = new BaseEntity();
		entity.setId((String) id);
		entity.setDelflag(true);
		
		T record = (T) entity;
		return getMapper().updateByPrimaryKeySelective(record);
	}

//	public int deletePseudoAllObjectByIds(List<K> ids) throws Exception {
//		return getMapper().deletePseudoAllObjectByIds(ids);
//	}
//
//	public Integer getCount(Map<String, Object> paramater) throws Exception {
//		return Integer.valueOf(getMapper().getCount(paramater));
//	}

	private BaseMapper<T> mapper;

	public BaseMapper<T> getMapper() {
		return mapper;
	}

	public void setMapper(BaseMapper<T> mapper) {
		this.mapper = mapper;
	}
}