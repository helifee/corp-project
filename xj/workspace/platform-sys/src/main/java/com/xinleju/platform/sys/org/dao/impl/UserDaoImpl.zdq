package com.xinleju.platform.sys.org.dao.impl;

import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.stereotype.Repository;

import com.xinleju.platform.base.dao.impl.BaseDaoImpl;
import com.xinleju.platform.sys.org.dao.UserDao;
import com.xinleju.platform.sys.org.dto.OrgnazationNodeDto;
import com.xinleju.platform.sys.org.dto.UserDto;
import com.xinleju.platform.sys.org.entity.User;

/**
 * @author sy
 * 
 * 
 */

@Repository
public class UserDaoImpl extends BaseDaoImpl<String,User> implements UserDao{

	public UserDaoImpl() {
		super();
	}

	/**
	 * 根据组织结构查询所有人
	 * @param parentId
	 * @return
	 */
	@Override
	public List<UserDto> queryUserListByOrgId(Map<String, Object> paramater)  throws Exception{
		/*String OrgId = "";
		if (paramater != null) {
			Set<String> set = paramater.keySet();
			for (String key : set) {
				if(key.equals("orgId")){
					OrgId = (String) paramater.get(key);
				}
			}
		}*/
		List<UserDto> list = getSqlSession().selectList("com.xinleju.platform.sys.org.entity.User.queryUserListByOrgIdDirect", paramater);
		return list;
	}
	
	/**
	 * 根据岗位查询用户列表
	 * 
	 * @param paramater
	 * @return
	 */
	@Override
	public List<UserDto> queryUserListByPostId(Map<String, Object> paramater) throws Exception {
		String postId = "";
		if (paramater != null) {
			Set<String> set = paramater.keySet();
			for (String key : set) {
				if(key.equals("postId")){
					postId = (String) paramater.get(key);
				}
			}
		}
		return getSqlSession().selectList("com.xinleju.platform.sys.org.entity.User.queryUserListByPostId", postId);
	}	
	/**
	 * 根据标准岗位Id和组织机构id（项目、公司、集团）获取userDto
	 * 
	 * @param paramater
	 * @return
	 */
	@Override
	public List<UserDto> getUserListByStandardpostIdAndOrgIds(Map<String, Object> paramater) throws Exception {
		return getSqlSession().selectList("com.xinleju.platform.sys.org.entity.User.getUserListByStandardpostIdAndOrgIds", paramater);
	}	
	/**
	 * 根据标准岗位Id和组织机构id（公司、集团往下找）获取userDto
	 * 
	 * @param paramater
	 * @return
	 */
	@Override
	public List<UserDto> getUserListByStandardpostIdAndOrgIdsUnder(Map<String, Object> paramater) throws Exception {
		return getSqlSession().selectList("com.xinleju.platform.sys.org.entity.User.getUserListByStandardpostIdAndOrgIdsUnder", paramater);
	}	
	
	/**
	 * 根据角色查询用户列表
	 * 
	 * @param paramater
	 * @return
	 */
	@Override
	public List<UserDto> queryUserListByRoleId(Map<String, Object> paramater) throws Exception {
		String roleId = "";
		if (paramater != null) {
			Set<String> set = paramater.keySet();
			for (String key : set) {
				if(key.equals("roleId")){
					roleId = (String) paramater.get(key);
				}
			}
		}
		return getSqlSession().selectList("com.xinleju.platform.sys.org.entity.User.queryUserListByRoleId", roleId);
	}	
	/**
	 * 根据虚拟角色查询用户列表
	 * @param paramater
	 * @return
	 */
	@Override
	public List<UserDto> queryRoleUserByRoleId(Map<String, Object> paramater) throws Exception {
		return getSqlSession().selectList("com.xinleju.platform.sys.org.entity.User.queryRoleUserByRoleId", paramater);
	}	
	
	@Override
	public List<OrgnazationNodeDto> queryAllUserList(Map<String,Object> map) throws Exception {
		List<OrgnazationNodeDto> list = getSqlSession().selectList("com.xinleju.platform.sys.org.entity.User.queryAllUserList",map);
		return list;		
	}
	
	@Override
	public List<UserDto> queryAllUserListReturnUser(Map<String,Object> map) throws Exception {
		List<UserDto> list = getSqlSession().selectList("com.xinleju.platform.sys.org.entity.User.queryAllUserListReturnUser",map);
		return list;
		
	}
	
	@Override
	public List<Map<String,String>> queryUsersByIds(Map map)throws Exception{
		List<Map<String, String>> list = getSqlSession().selectList("com.xinleju.platform.sys.org.entity.User.queryUsersByIds", map);
		return list;
	}
	/**
	 * 根据IDs获取人员DTO
	 * @param paramater
	 * @return
	 */
	@Override
	public List<UserDto> getUserByUserIds(Map map)throws Exception{
		List<UserDto> list = getSqlSession().selectList("com.xinleju.platform.sys.org.entity.User.getUserByUserIds", map);
		return list;
	}
	
	/**
	 * 根据人员姓名获取人员DTO
	 * @param paramater
	 * @return
	 */
	@Override
	public List<UserDto> getUserByUserName(Map map)throws Exception{
		List<UserDto> list = getSqlSession().selectList("com.xinleju.platform.sys.org.entity.User.getUserByUserName", map);
		return list;
	}
	/**
	 * 根据loginNames获取人员DTO
	 * @param paramater
	 * @return
	 */
	@Override
	public List<UserDto> getUserByUserLoginNames(Map map)throws Exception{
		List<UserDto> list = getSqlSession().selectList("com.xinleju.platform.sys.org.entity.User.getUserByUserLoginNames", map);
		return list;
	}
	/**
	 * 批量保存用户排序号
	 * @param paramater
	 * @return
	 */
	public Integer saveUsersSort(Map map)throws Exception{
		return getSqlSession().update("com.xinleju.platform.sys.org.entity.User.saveUsersSort", map);
	}
	/**
	 * 获取用户详情
	 * @param paramater
	 * @return
	 */
	public UserDto selectUserInfoById(Map map)throws Exception{
		return getSqlSession().selectOne("com.xinleju.platform.sys.org.entity.User.selectUserInfoById", map);
	}
	
	/**
	 * 校验登录名是否重复
	 * @param paramater
	 * @return
	 */
	public Integer checkLoginName(Map map)throws Exception{
		return getSqlSession().selectOne("com.xinleju.platform.sys.org.entity.User.checkLoginName", map);
	}

	@Override
	public List<Map<String, Object>> queryUserAndPostsByUname(Map<String, Object> paramater) throws Exception {
		return   getSqlSession().selectList("com.xinleju.platform.sys.org.entity.User.queryUserAndPostsByUname", paramater);
	}
	//查询组织及其下级是否存在岗位
	@Override
	public Integer selectSonRefCount(Map map) throws Exception {
		return getSqlSession().selectOne("com.xinleju.platform.sys.org.entity.User.selectSonRefCount",map);
	}
	/**
	 * 获取多个人员岗位id
	 * @param paramater
	 * @return
	 */
	public List<String> selectPuIds(Map<String, Object> paramater)throws Exception{
		return getSqlSession().selectList("com.xinleju.platform.sys.org.entity.User.selectPuIds",paramater);
	}
	/**
	 * 获取多个人员
	 * @param paramater
	 * @return
	 */
	public List<Map<String, String>> queryPostUsersByIds(Map<String, Object> paramater)throws Exception{
		return getSqlSession().selectList("com.xinleju.platform.sys.org.entity.User.queryPostUsersByIds",paramater);
	}
	/**
	 * 根据条件查询用户
	 * @param paramater
	 * @return
	 */
	public List<UserDto> selectUserByQuery(Map<String, Object> paramater)throws Exception{
		return getSqlSession().selectList("com.xinleju.platform.sys.org.entity.User.selectUserByQuery",paramater);
	}
	/**
	 * 除去物业下的人
	 * @param paramater
	 * @return
	 */
	public List<User> queryListOutWuye(Map<String, Object> paramater)throws Exception{
		return getSqlSession().selectList("com.xinleju.platform.sys.org.entity.User.queryListOutWuye",paramater);
	}
	/**
	 * 修改用户密码按组织机构查询
	 * @param paramater
	 * @return
	 */
	public List<User> queryListUpdatePwdUserByOrgId(Map<String, Object> paramater)throws Exception{
		return getSqlSession().selectList("com.xinleju.platform.sys.org.entity.User.queryListUpdatePwdUserByOrgId",paramater);
	}
	
	/**
	 * 根据条件查询用户 总数
	 * @param paramater
	 * @return
	 */
	public int selectUserByQueryCount(Map<String, Object> paramater)throws Exception{
		return getSqlSession().selectOne("com.xinleju.platform.sys.org.entity.User.selectUserByQueryCount",paramater);
	}
}
