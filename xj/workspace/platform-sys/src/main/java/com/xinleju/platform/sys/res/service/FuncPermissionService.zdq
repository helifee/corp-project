package com.xinleju.platform.sys.res.service;

import java.util.List;
import java.util.Map;

import com.xinleju.platform.base.service.BaseService;
import com.xinleju.platform.sys.res.dto.ResourceDto;
import com.xinleju.platform.sys.res.entity.FuncPermission;

/**
 * @author admin
 * 
 * 
 */

public interface FuncPermissionService extends  BaseService <String,FuncPermission>{

	/**
	 * 查询根据角色查询系统权限
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public List<Map<String,Object>> querySystemListByRole(Map<String,Object> map) throws Exception;
	
	/**
	 * 根据系统查询按钮树
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public List<Map<String,Object>> queryAuthorizationListByAppIds(Map<String,Object> map) throws Exception;
	
	/**
	 * 查询授权列表（认证，包含未授权和已授权的）
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public List<ResourceDto> queryAuthorizationAllList(Map<String,Object> map) throws Exception;
	
	/**
	 * 根据用户Id和系统Id获取有权限的菜单
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public List<ResourceDto> getFuncMenuAuthByUserIdAndAppId(Map<String,Object> map) throws Exception;
	
	/**
	 * 根据用户Id和系统Id和菜单Id获取有权限的按钮
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public List<ResourceDto> getFuncButtonAuthByUserIdAndAppIdAndMenuId(Map<String,Object> map) throws Exception;
	
	/**
	 * 查询角色树（标准岗位）（动作点-角色）
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public List<Map<String,Object>> queryAuthorizationListAllRoles() throws Exception;
	
	/**
	 * 查询角色树(通用角色)（动作点-角色）
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public List<Map<String,Object>> queryAuthorizationListAllCurrencyRoles() throws Exception;
	
	/**
	 * 查询对象树(岗位)（动作点-角色）
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public List<Map<String,Object>> queryAuthorizationListAllPost() throws Exception;
	
	/**
	 * 查询对象树(人员)（动作点-角色）
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public List<Map<String,Object>> queryAuthorizationListAllUser() throws Exception;
	
	/**
	 * 根据系统和角色查询已授权数据
	 * @param map
	 * @return
	 */
	public List<Map<String,Object>> queryAuthDataByappIdsAndroleIds(Map<String,Object> map) throws Exception;
	/**
	 * 根据对象Ids查询已授权数据
	 * @param map
	 * @return
	 */
	public List<Map<String,Object>> queryAuthDataByobjectIds(Map<String,Object> map) throws Exception;
	/**
	 * 根据对象Ids查询已授权数据（包括Id）
	 * @param map
	 * @return
	 */
	public List<Map<String,Object>> queryAuthDataByobjectIdsReturnId(Map<String,Object> map) throws Exception;
	
	/**
	 * 根据动作点查询已授权数据
	 * @param map
	 * @return
	 */
	public List<Map<String,Object>> queryAuthDataByOperationIds(Map<String,Object> map) throws Exception;
	
	/**
	 * 根据用户登录账号和系统code和菜单code获取有权限的按钮
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public List<Map<String,Object>> getFuncButtonAuthByUserLoginNameAndAppCodeAndMenuCode(Map<String,Object> map) throws Exception;
	
	/**
	 * 获取有权限的菜单(根据用户账号和系统code)
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public List<Map<String,Object>> getFuncMenuAuthByUserLoginNameAndAppCode(Map<String,Object> map) throws Exception;

	/**
	 * 根据菜单id查找拥有当前菜单权限的用户id集合
	 * @param map
	 * @return
	 * @throws Exception
	 */
	public List<Map<String,Object>> queryUsersByMenuId(Map<String,Object> map) throws Exception;

	/**
	 * 根据系统和角色查询已授权数据
	 * @param map
	 * @return
	 */
    List<Map<String,Object>> queryAuthorizationListByAppId(Map map)throws Exception;
}
