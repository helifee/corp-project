package com.xinleju.platform.sys.res.dto.service.impl;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import com.xinleju.platform.base.utils.DubboServiceResultInfo;
import com.xinleju.platform.base.utils.Page;
import com.xinleju.platform.sys.res.dto.DataNodeDto;
import com.xinleju.platform.sys.res.dto.OperationDto;
import com.xinleju.platform.sys.res.dto.service.OperationDtoServiceCustomer;
import com.xinleju.platform.sys.res.entity.AppSystem;
import com.xinleju.platform.sys.res.entity.Operation;
import com.xinleju.platform.sys.res.entity.Resource;
import com.xinleju.platform.sys.res.service.AppSystemService;
import com.xinleju.platform.sys.res.service.OperationService;
import com.xinleju.platform.sys.res.service.ResourceService;
import com.xinleju.platform.sys.res.utils.InvalidCustomException;
import com.xinleju.platform.sys.res.utils.ResourceType;
import com.xinleju.platform.tools.data.JacksonUtils;

/**
 * @author admin
 * 
 *
 */
 
public class OperationDtoServiceProducer implements OperationDtoServiceCustomer{
	private static Logger log = Logger.getLogger(OperationDtoServiceProducer.class);
	@Autowired
	private OperationService operationService;
	@Autowired
	private AppSystemService appSystemService;
	@Autowired
	private ResourceService resourceService;

	public String save(String userInfo, String saveJson){
		// TODO Auto-generated method stub
	   DubboServiceResultInfo info=new DubboServiceResultInfo();
	   try {
		   Operation operation=JacksonUtils.fromJson(saveJson, Operation.class);
		   //校验编码重复 add by gyh 2017-3-28
		   Map<String,Object> param=new HashMap<String,Object>();
		   param.put("code", operation.getCode());
		   param.put("menuId", operation.getResourceId());
		   Integer isc=operationService.getCodeCount(param);
		   if(isc>0){
			   throw new InvalidCustomException("该菜单下此按钮编码已存在，不可重复");
		   }
		   //排序号不输入，改为系统最大排序加1，同时维护全路径相关字段 add by gyh 2017-4-2
		   Map<String,Object> map=JacksonUtils.fromJson(saveJson, HashMap.class);
		   map.put("tableName", "pt_sys_res_operation");
		   Long maxSort=appSystemService.getMaxSort(map)+1L;//排序号自动加1
		   operation.setSort(maxSort);
		   //菜单全路径
		   if(operation.getParentId()!=null && StringUtils.isNotBlank(operation.getParentId())){
			   String parentId=operation.getParentId();
			   Operation opeP=operationService.getObjectById(parentId);
			   operation.setPrefixId(opeP.getPrefixId()+"/"+operation.getId());
				operation.setPrefixName(opeP.getPrefixName()+"/"+operation.getName());
				operation.setPrefixSort(opeP.getPrefixSort()+"-"+String.format("C%05d", operation.getSort()));
		   }else{
			   String menuId=operation.getResourceId();
			   Resource res=resourceService.getObjectById(menuId);
			   operation.setPrefixId(res.getPrefixId()+"/"+operation.getId());
			   operation.setPrefixName(res.getPrefixName()+"/"+operation.getName());
			   operation.setPrefixSort(res.getPrefixSort()+"-"+String.format("C%05d", maxSort));
		   }
		   operationService.save(operation);
		   info.setResult(JacksonUtils.toJson(operation));
		   info.setSucess(true);
		   info.setMsg("保存对象成功!");
		} catch (Exception e) {
		 log.error("保存对象失败!"+e.getMessage());
		 info.setSucess(false);
		 info.setMsg("保存对象失败!");
		 info.setExceptionMsg(e.getMessage());
		}
	   return JacksonUtils.toJson(info);
	}

	@Override
	public String saveBatch(String userInfo, String saveJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String updateBatch(String userInfo, String updateJsonList)
			 {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String update(String userInfo, String updateJson)  {
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   Operation operation=JacksonUtils.fromJson(updateJson, Operation.class);
			 //校验编码重复 add by gyh 2017-3-28
			   Map<String,Object> param=new HashMap<String,Object>();
			   param.put("code", operation.getCode());
			   param.put("id", operation.getId());
			   param.put("menuId", operation.getResourceId());
			   Integer isc=operationService.getCodeCount(param);
			   if(isc>0){
				   throw new InvalidCustomException("该菜单下此按钮编码已存在，不可重复");
			   }
//			   int result=   operationService.update(operation);
			   int result=   operationService.updateButton(operation);
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("更新对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   Operation operation=JacksonUtils.fromJson(deleteJson, Operation.class);
			   int result= operationService.deleteObjectById(operation.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deleteAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= operationService.deleteAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String getObjectById(String userInfo, String getJson)
	 {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			Map<String,Object> map=JacksonUtils.fromJson(getJson, HashMap.class);
			//Operation	result = operationService.getObjectById(operation.getId());
			//update by gyh 2017-3-29
			if (map.get("limit")!=null&&Integer.valueOf(map.get("limit").toString())==-1 && map.get("fristLimit")!=null) {
				map.put("limit", map.get("fristLimit"));
			}
			List<OperationDto> list=operationService.queryListByCondition(map);
			if(list!=null &&list.size()>0){
				info.setResult(JacksonUtils.toJson(list.get(0)));
			}else{
				info.setResult(JacksonUtils.toJson(null));
			}
		    info.setSucess(true);
		    info.setMsg("获取对象成功!");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String getPage(String userInfo, String paramater) {
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
				Page page=operationService.getPage(map, (Integer)map.get("start"),  (Integer)map.get("limit"));
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}else{
				Page page=operationService.getPage(new HashMap(), null, null);
				info.setResult(JacksonUtils.toJson(page));
			    info.setSucess(true);
			    info.setMsg("获取分页对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取分页对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取分页对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}

	@Override
	public String queryList(String userInfo, String paramater){
		// TODO Auto-generated method stub
		DubboServiceResultInfo info=new DubboServiceResultInfo();
		try {
			if(StringUtils.isNotBlank(paramater)){
				Map map=JacksonUtils.fromJson(paramater, HashMap.class);
//				List list=operationService.queryList(map);
				if (map.get("limit")!=null&&Integer.valueOf(map.get("limit").toString())==-1) {
					map.put("limit", 50);
				}
				List<OperationDto> list=operationService.queryListByCondition(map);

				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}else{
				List list=operationService.queryList(null);
				info.setResult(JacksonUtils.toJson(list));
			    info.setSucess(true);
			    info.setMsg("获取列表对象成功!");
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			 log.error("获取列表对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取列表对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
	
	@Override
	public String getOperationTreeByResourceId(String userInfo, String paramater){
			DubboServiceResultInfo info=new DubboServiceResultInfo();
	        try {
	        	Map map = JacksonUtils.fromJson(paramater, HashMap.class);
	        	
	        //根据资源id获取功能操作点(查询菜单下的一级按钮)
	        List<DataNodeDto> list = operationService.queryOperationListRootByResourceId(map);
	        
	       /* //根据资源id获取所有按钮
	        List<DataNodeDto> listAll = operationService.queryOperationListAllByResourceId(map);
	        */
	        List<DataNodeDto> listAll=new ArrayList<DataNodeDto>();
	        for (DataNodeDto dataCtrl : list) {
	        	getOperationList(dataCtrl,listAll);
			}
	    	info.setResult(JacksonUtils.toJson(list));
		    info.setSucess(true);
		    info.setMsg("获取按钮树对象成功!");
		}catch(Exception e){
			log.error("获取按钮树对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("获取按钮树对象失败!");
			 info.setExceptionMsg(e.getMessage());
		}
		return JacksonUtils.toJson(info);
	}
	

	public DataNodeDto getOperationList(DataNodeDto dataCtrl,List<DataNodeDto> listAll){
		List<DataNodeDto> li = queryOperationListChild(dataCtrl.getId(),listAll);
		dataCtrl.setChildren(li);
		dataCtrl.setType(ResourceType.OPERATION.getCode());
		if(null!=li && li.size()>0){
			for(DataNodeDto dnd:li){
				getOperationList(dnd,listAll);
			}
		}else{
			return dataCtrl;
		}
		return dataCtrl;
	}
	
	public List<DataNodeDto> queryOperationListChild(String id,List<DataNodeDto> listAll){
		List<DataNodeDto> ll = new ArrayList<DataNodeDto>();
		for(DataNodeDto dnd :listAll){
			if(dnd.getParentId()!=null && dnd.getParentId().equals(id)){
				ll.add(dnd);
			}
		}
		return ll;
	}

	@Override
	public String getCount(String userInfo, String paramater)  {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String deletePseudoObjectById(String userInfo, String deleteJson)
	{
		// TODO Auto-generated method stub
		   DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   Operation ope=JacksonUtils.fromJson(deleteJson, Operation.class);
			   //判断是否存在下级按钮  add by gyh 2017-4-10
			   Map<String,Object> map=new HashMap<String, Object>();
			   map.put("buttonId", ope.getId());
			   Integer c=operationService.selectSonNum(map);
			   if(c>0){
				   throw new InvalidCustomException("存在下级按钮，不可删除");
			   }
			   int result= operationService.deletePseudoObjectById(ope.getId());
			   info.setResult(JacksonUtils.toJson(result));
			   info.setSucess(true);
			   info.setMsg("删除对象成功!");
			} catch (Exception e) {
			 log.error("更新对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}

	@Override
	public String deletePseudoAllObjectByIds(String userInfo, String deleteJsonList)
   {
		// TODO Auto-generated method stub
		 DubboServiceResultInfo info=new DubboServiceResultInfo();
		   try {
			   if (StringUtils.isNotBlank(deleteJsonList)) {
				   Map map=JacksonUtils.fromJson(deleteJsonList, HashMap.class);
				   List<String> list=Arrays.asList(map.get("id").toString().split(","));
				   int result= operationService.deletePseudoAllObjectByIds(list);
				   info.setResult(JacksonUtils.toJson(result));
				   info.setSucess(true);
				   info.setMsg("删除对象成功!");
				}
			} catch (Exception e) {
			 log.error("删除对象失败!"+e.getMessage());
			 info.setSucess(false);
			 info.setMsg("删除更新对象失败!");
			 info.setExceptionMsg(e.getMessage());
			}
		   return JacksonUtils.toJson(info);
	}
}
