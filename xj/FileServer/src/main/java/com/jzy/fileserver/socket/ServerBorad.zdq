package com.jzy.fileserver.socket;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ConcurrentLinkedQueue;

import com.jzy.fileserver.utils.BeanLocator;

public class ServerBorad extends ServerSocket {
	public static List<Thread> threadQueue = new ArrayList<Thread>();
	public static Queue<String> messageList = new ConcurrentLinkedQueue<String>();
	public static int threadCounter = 0;
	public static boolean isClear = true;
	public static final int SERVER_PROT = 8081;

	public ServerBorad() throws IOException {
		super(SERVER_PROT);
		// 子线程用来向Client广播消息
//		new Broadcast();
		try {
			// 监听端口，当有新的连接时，发起新的线程来处理
			while (true) {
				Socket socket = accept();
				new CreateServerThread(socket);
			}
		} finally {
			close();
		}
	}
	
	public static void broadcast(String msg) {
		ClientQueue bean = (ClientQueue) BeanLocator.getBean(ClientQueue.class);
		Iterator<Thread> iter = bean.getThreadQueue().iterator();
		while(iter.hasNext()) {
			CreateServerThread client = (CreateServerThread) iter.next();
			if(client.checkAlive()) {
				client.sendMessage(msg);
			} else {
				iter.remove();
			}
		}
	}
	
	public static void receiveMsg(String msg) {
		messageList.add(msg);
	}
}
