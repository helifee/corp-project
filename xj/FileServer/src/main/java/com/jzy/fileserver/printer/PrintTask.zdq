package com.jzy.fileserver.printer;

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PrintTask implements org.apache.thrift.TBase<PrintTask, PrintTask._Fields>, java.io.Serializable, Cloneable, Comparable<PrintTask> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PrintTask");

  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("task_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField INPUT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("input_type", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField OUTPUT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("output_type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SEND_PAGE_NOTIFY_FIELD_DESC = new org.apache.thrift.protocol.TField("send_page_notify", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField TASK_PRIOR_FIELD_DESC = new org.apache.thrift.protocol.TField("task_prior", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField FILE_SRC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("file_src_name", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FILE_DEST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("file_dest_name", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField GEN_THUMB_FIELD_DESC = new org.apache.thrift.protocol.TField("gen_thumb", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField CONF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("conf_id", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("group_id", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PrintTaskStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PrintTaskTupleSchemeFactory());
  }

  public int task_id; // required
  public int input_type; // required
  public int output_type; // required
  public boolean send_page_notify; // required
  public int task_prior; // required
  public String file_src_name; // required
  public String file_dest_name; // required
  public boolean gen_thumb; // required
  public int conf_id; // required
  public int group_id; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_ID((short)1, "task_id"),
    INPUT_TYPE((short)2, "input_type"),
    OUTPUT_TYPE((short)3, "output_type"),
    SEND_PAGE_NOTIFY((short)4, "send_page_notify"),
    TASK_PRIOR((short)5, "task_prior"),
    FILE_SRC_NAME((short)6, "file_src_name"),
    FILE_DEST_NAME((short)7, "file_dest_name"),
    GEN_THUMB((short)8, "gen_thumb"),
    CONF_ID((short)9, "conf_id"),
    GROUP_ID((short)10, "group_id");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_ID
          return TASK_ID;
        case 2: // INPUT_TYPE
          return INPUT_TYPE;
        case 3: // OUTPUT_TYPE
          return OUTPUT_TYPE;
        case 4: // SEND_PAGE_NOTIFY
          return SEND_PAGE_NOTIFY;
        case 5: // TASK_PRIOR
          return TASK_PRIOR;
        case 6: // FILE_SRC_NAME
          return FILE_SRC_NAME;
        case 7: // FILE_DEST_NAME
          return FILE_DEST_NAME;
        case 8: // GEN_THUMB
          return GEN_THUMB;
        case 9: // CONF_ID
          return CONF_ID;
        case 10: // GROUP_ID
          return GROUP_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TASK_ID_ISSET_ID = 0;
  private static final int __INPUT_TYPE_ISSET_ID = 1;
  private static final int __OUTPUT_TYPE_ISSET_ID = 2;
  private static final int __SEND_PAGE_NOTIFY_ISSET_ID = 3;
  private static final int __TASK_PRIOR_ISSET_ID = 4;
  private static final int __GEN_THUMB_ISSET_ID = 5;
  private static final int __CONF_ID_ISSET_ID = 6;
  private static final int __GROUP_ID_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("task_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INPUT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("input_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OUTPUT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("output_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEND_PAGE_NOTIFY, new org.apache.thrift.meta_data.FieldMetaData("send_page_notify", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TASK_PRIOR, new org.apache.thrift.meta_data.FieldMetaData("task_prior", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_SRC_NAME, new org.apache.thrift.meta_data.FieldMetaData("file_src_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_DEST_NAME, new org.apache.thrift.meta_data.FieldMetaData("file_dest_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GEN_THUMB, new org.apache.thrift.meta_data.FieldMetaData("gen_thumb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CONF_ID, new org.apache.thrift.meta_data.FieldMetaData("conf_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("group_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PrintTask.class, metaDataMap);
  }

  public PrintTask() {
  }

  public PrintTask(
    int task_id,
    int input_type,
    int output_type,
    boolean send_page_notify,
    int task_prior,
    String file_src_name,
    String file_dest_name,
    boolean gen_thumb,
    int conf_id,
    int group_id)
  {
    this();
    this.task_id = task_id;
    setTask_idIsSet(true);
    this.input_type = input_type;
    setInput_typeIsSet(true);
    this.output_type = output_type;
    setOutput_typeIsSet(true);
    this.send_page_notify = send_page_notify;
    setSend_page_notifyIsSet(true);
    this.task_prior = task_prior;
    setTask_priorIsSet(true);
    this.file_src_name = file_src_name;
    this.file_dest_name = file_dest_name;
    this.gen_thumb = gen_thumb;
    setGen_thumbIsSet(true);
    this.conf_id = conf_id;
    setConf_idIsSet(true);
    this.group_id = group_id;
    setGroup_idIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PrintTask(PrintTask other) {
    __isset_bitfield = other.__isset_bitfield;
    this.task_id = other.task_id;
    this.input_type = other.input_type;
    this.output_type = other.output_type;
    this.send_page_notify = other.send_page_notify;
    this.task_prior = other.task_prior;
    if (other.isSetFile_src_name()) {
      this.file_src_name = other.file_src_name;
    }
    if (other.isSetFile_dest_name()) {
      this.file_dest_name = other.file_dest_name;
    }
    this.gen_thumb = other.gen_thumb;
    this.conf_id = other.conf_id;
    this.group_id = other.group_id;
  }

  public PrintTask deepCopy() {
    return new PrintTask(this);
  }

  @Override
  public void clear() {
    setTask_idIsSet(false);
    this.task_id = 0;
    setInput_typeIsSet(false);
    this.input_type = 0;
    setOutput_typeIsSet(false);
    this.output_type = 0;
    setSend_page_notifyIsSet(false);
    this.send_page_notify = false;
    setTask_priorIsSet(false);
    this.task_prior = 0;
    this.file_src_name = null;
    this.file_dest_name = null;
    setGen_thumbIsSet(false);
    this.gen_thumb = false;
    setConf_idIsSet(false);
    this.conf_id = 0;
    setGroup_idIsSet(false);
    this.group_id = 0;
  }

  public int getTask_id() {
    return this.task_id;
  }

  public PrintTask setTask_id(int task_id) {
    this.task_id = task_id;
    setTask_idIsSet(true);
    return this;
  }

  public void unsetTask_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASK_ID_ISSET_ID);
  }

  /** Returns true if field task_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTask_id() {
    return EncodingUtils.testBit(__isset_bitfield, __TASK_ID_ISSET_ID);
  }

  public void setTask_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASK_ID_ISSET_ID, value);
  }

  public int getInput_type() {
    return this.input_type;
  }

  public PrintTask setInput_type(int input_type) {
    this.input_type = input_type;
    setInput_typeIsSet(true);
    return this;
  }

  public void unsetInput_type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INPUT_TYPE_ISSET_ID);
  }

  /** Returns true if field input_type is set (has been assigned a value) and false otherwise */
  public boolean isSetInput_type() {
    return EncodingUtils.testBit(__isset_bitfield, __INPUT_TYPE_ISSET_ID);
  }

  public void setInput_typeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INPUT_TYPE_ISSET_ID, value);
  }

  public int getOutput_type() {
    return this.output_type;
  }

  public PrintTask setOutput_type(int output_type) {
    this.output_type = output_type;
    setOutput_typeIsSet(true);
    return this;
  }

  public void unsetOutput_type() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTPUT_TYPE_ISSET_ID);
  }

  /** Returns true if field output_type is set (has been assigned a value) and false otherwise */
  public boolean isSetOutput_type() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTPUT_TYPE_ISSET_ID);
  }

  public void setOutput_typeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTPUT_TYPE_ISSET_ID, value);
  }

  public boolean isSend_page_notify() {
    return this.send_page_notify;
  }

  public PrintTask setSend_page_notify(boolean send_page_notify) {
    this.send_page_notify = send_page_notify;
    setSend_page_notifyIsSet(true);
    return this;
  }

  public void unsetSend_page_notify() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEND_PAGE_NOTIFY_ISSET_ID);
  }

  /** Returns true if field send_page_notify is set (has been assigned a value) and false otherwise */
  public boolean isSetSend_page_notify() {
    return EncodingUtils.testBit(__isset_bitfield, __SEND_PAGE_NOTIFY_ISSET_ID);
  }

  public void setSend_page_notifyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEND_PAGE_NOTIFY_ISSET_ID, value);
  }

  public int getTask_prior() {
    return this.task_prior;
  }

  public PrintTask setTask_prior(int task_prior) {
    this.task_prior = task_prior;
    setTask_priorIsSet(true);
    return this;
  }

  public void unsetTask_prior() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASK_PRIOR_ISSET_ID);
  }

  /** Returns true if field task_prior is set (has been assigned a value) and false otherwise */
  public boolean isSetTask_prior() {
    return EncodingUtils.testBit(__isset_bitfield, __TASK_PRIOR_ISSET_ID);
  }

  public void setTask_priorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASK_PRIOR_ISSET_ID, value);
  }

  public String getFile_src_name() {
    return this.file_src_name;
  }

  public PrintTask setFile_src_name(String file_src_name) {
    this.file_src_name = file_src_name;
    return this;
  }

  public void unsetFile_src_name() {
    this.file_src_name = null;
  }

  /** Returns true if field file_src_name is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_src_name() {
    return this.file_src_name != null;
  }

  public void setFile_src_nameIsSet(boolean value) {
    if (!value) {
      this.file_src_name = null;
    }
  }

  public String getFile_dest_name() {
    return this.file_dest_name;
  }

  public PrintTask setFile_dest_name(String file_dest_name) {
    this.file_dest_name = file_dest_name;
    return this;
  }

  public void unsetFile_dest_name() {
    this.file_dest_name = null;
  }

  /** Returns true if field file_dest_name is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_dest_name() {
    return this.file_dest_name != null;
  }

  public void setFile_dest_nameIsSet(boolean value) {
    if (!value) {
      this.file_dest_name = null;
    }
  }

  public boolean isGen_thumb() {
    return this.gen_thumb;
  }

  public PrintTask setGen_thumb(boolean gen_thumb) {
    this.gen_thumb = gen_thumb;
    setGen_thumbIsSet(true);
    return this;
  }

  public void unsetGen_thumb() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GEN_THUMB_ISSET_ID);
  }

  /** Returns true if field gen_thumb is set (has been assigned a value) and false otherwise */
  public boolean isSetGen_thumb() {
    return EncodingUtils.testBit(__isset_bitfield, __GEN_THUMB_ISSET_ID);
  }

  public void setGen_thumbIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GEN_THUMB_ISSET_ID, value);
  }

  public int getConf_id() {
    return this.conf_id;
  }

  public PrintTask setConf_id(int conf_id) {
    this.conf_id = conf_id;
    setConf_idIsSet(true);
    return this;
  }

  public void unsetConf_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONF_ID_ISSET_ID);
  }

  /** Returns true if field conf_id is set (has been assigned a value) and false otherwise */
  public boolean isSetConf_id() {
    return EncodingUtils.testBit(__isset_bitfield, __CONF_ID_ISSET_ID);
  }

  public void setConf_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONF_ID_ISSET_ID, value);
  }

  public int getGroup_id() {
    return this.group_id;
  }

  public PrintTask setGroup_id(int group_id) {
    this.group_id = group_id;
    setGroup_idIsSet(true);
    return this;
  }

  public void unsetGroup_id() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUP_ID_ISSET_ID);
  }

  /** Returns true if field group_id is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup_id() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUP_ID_ISSET_ID);
  }

  public void setGroup_idIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUP_ID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_ID:
      if (value == null) {
        unsetTask_id();
      } else {
        setTask_id((Integer)value);
      }
      break;

    case INPUT_TYPE:
      if (value == null) {
        unsetInput_type();
      } else {
        setInput_type((Integer)value);
      }
      break;

    case OUTPUT_TYPE:
      if (value == null) {
        unsetOutput_type();
      } else {
        setOutput_type((Integer)value);
      }
      break;

    case SEND_PAGE_NOTIFY:
      if (value == null) {
        unsetSend_page_notify();
      } else {
        setSend_page_notify((Boolean)value);
      }
      break;

    case TASK_PRIOR:
      if (value == null) {
        unsetTask_prior();
      } else {
        setTask_prior((Integer)value);
      }
      break;

    case FILE_SRC_NAME:
      if (value == null) {
        unsetFile_src_name();
      } else {
        setFile_src_name((String)value);
      }
      break;

    case FILE_DEST_NAME:
      if (value == null) {
        unsetFile_dest_name();
      } else {
        setFile_dest_name((String)value);
      }
      break;

    case GEN_THUMB:
      if (value == null) {
        unsetGen_thumb();
      } else {
        setGen_thumb((Boolean)value);
      }
      break;

    case CONF_ID:
      if (value == null) {
        unsetConf_id();
      } else {
        setConf_id((Integer)value);
      }
      break;

    case GROUP_ID:
      if (value == null) {
        unsetGroup_id();
      } else {
        setGroup_id((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_ID:
      return Integer.valueOf(getTask_id());

    case INPUT_TYPE:
      return Integer.valueOf(getInput_type());

    case OUTPUT_TYPE:
      return Integer.valueOf(getOutput_type());

    case SEND_PAGE_NOTIFY:
      return Boolean.valueOf(isSend_page_notify());

    case TASK_PRIOR:
      return Integer.valueOf(getTask_prior());

    case FILE_SRC_NAME:
      return getFile_src_name();

    case FILE_DEST_NAME:
      return getFile_dest_name();

    case GEN_THUMB:
      return Boolean.valueOf(isGen_thumb());

    case CONF_ID:
      return Integer.valueOf(getConf_id());

    case GROUP_ID:
      return Integer.valueOf(getGroup_id());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_ID:
      return isSetTask_id();
    case INPUT_TYPE:
      return isSetInput_type();
    case OUTPUT_TYPE:
      return isSetOutput_type();
    case SEND_PAGE_NOTIFY:
      return isSetSend_page_notify();
    case TASK_PRIOR:
      return isSetTask_prior();
    case FILE_SRC_NAME:
      return isSetFile_src_name();
    case FILE_DEST_NAME:
      return isSetFile_dest_name();
    case GEN_THUMB:
      return isSetGen_thumb();
    case CONF_ID:
      return isSetConf_id();
    case GROUP_ID:
      return isSetGroup_id();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PrintTask)
      return this.equals((PrintTask)that);
    return false;
  }

  public boolean equals(PrintTask that) {
    if (that == null)
      return false;

    boolean this_present_task_id = true;
    boolean that_present_task_id = true;
    if (this_present_task_id || that_present_task_id) {
      if (!(this_present_task_id && that_present_task_id))
        return false;
      if (this.task_id != that.task_id)
        return false;
    }

    boolean this_present_input_type = true;
    boolean that_present_input_type = true;
    if (this_present_input_type || that_present_input_type) {
      if (!(this_present_input_type && that_present_input_type))
        return false;
      if (this.input_type != that.input_type)
        return false;
    }

    boolean this_present_output_type = true;
    boolean that_present_output_type = true;
    if (this_present_output_type || that_present_output_type) {
      if (!(this_present_output_type && that_present_output_type))
        return false;
      if (this.output_type != that.output_type)
        return false;
    }

    boolean this_present_send_page_notify = true;
    boolean that_present_send_page_notify = true;
    if (this_present_send_page_notify || that_present_send_page_notify) {
      if (!(this_present_send_page_notify && that_present_send_page_notify))
        return false;
      if (this.send_page_notify != that.send_page_notify)
        return false;
    }

    boolean this_present_task_prior = true;
    boolean that_present_task_prior = true;
    if (this_present_task_prior || that_present_task_prior) {
      if (!(this_present_task_prior && that_present_task_prior))
        return false;
      if (this.task_prior != that.task_prior)
        return false;
    }

    boolean this_present_file_src_name = true && this.isSetFile_src_name();
    boolean that_present_file_src_name = true && that.isSetFile_src_name();
    if (this_present_file_src_name || that_present_file_src_name) {
      if (!(this_present_file_src_name && that_present_file_src_name))
        return false;
      if (!this.file_src_name.equals(that.file_src_name))
        return false;
    }

    boolean this_present_file_dest_name = true && this.isSetFile_dest_name();
    boolean that_present_file_dest_name = true && that.isSetFile_dest_name();
    if (this_present_file_dest_name || that_present_file_dest_name) {
      if (!(this_present_file_dest_name && that_present_file_dest_name))
        return false;
      if (!this.file_dest_name.equals(that.file_dest_name))
        return false;
    }

    boolean this_present_gen_thumb = true;
    boolean that_present_gen_thumb = true;
    if (this_present_gen_thumb || that_present_gen_thumb) {
      if (!(this_present_gen_thumb && that_present_gen_thumb))
        return false;
      if (this.gen_thumb != that.gen_thumb)
        return false;
    }

    boolean this_present_conf_id = true;
    boolean that_present_conf_id = true;
    if (this_present_conf_id || that_present_conf_id) {
      if (!(this_present_conf_id && that_present_conf_id))
        return false;
      if (this.conf_id != that.conf_id)
        return false;
    }

    boolean this_present_group_id = true;
    boolean that_present_group_id = true;
    if (this_present_group_id || that_present_group_id) {
      if (!(this_present_group_id && that_present_group_id))
        return false;
      if (this.group_id != that.group_id)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PrintTask other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTask_id()).compareTo(other.isSetTask_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTask_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_id, other.task_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInput_type()).compareTo(other.isSetInput_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInput_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.input_type, other.input_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutput_type()).compareTo(other.isSetOutput_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutput_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.output_type, other.output_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSend_page_notify()).compareTo(other.isSetSend_page_notify());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSend_page_notify()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.send_page_notify, other.send_page_notify);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTask_prior()).compareTo(other.isSetTask_prior());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTask_prior()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.task_prior, other.task_prior);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFile_src_name()).compareTo(other.isSetFile_src_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_src_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_src_name, other.file_src_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFile_dest_name()).compareTo(other.isSetFile_dest_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_dest_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_dest_name, other.file_dest_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGen_thumb()).compareTo(other.isSetGen_thumb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGen_thumb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gen_thumb, other.gen_thumb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConf_id()).compareTo(other.isSetConf_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConf_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conf_id, other.conf_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroup_id()).compareTo(other.isSetGroup_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group_id, other.group_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PrintTask(");
    boolean first = true;

    sb.append("task_id:");
    sb.append(this.task_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("input_type:");
    sb.append(this.input_type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("output_type:");
    sb.append(this.output_type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("send_page_notify:");
    sb.append(this.send_page_notify);
    first = false;
    if (!first) sb.append(", ");
    sb.append("task_prior:");
    sb.append(this.task_prior);
    first = false;
    if (!first) sb.append(", ");
    sb.append("file_src_name:");
    if (this.file_src_name == null) {
      sb.append("null");
    } else {
      sb.append(this.file_src_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("file_dest_name:");
    if (this.file_dest_name == null) {
      sb.append("null");
    } else {
      sb.append(this.file_dest_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gen_thumb:");
    sb.append(this.gen_thumb);
    first = false;
    if (!first) sb.append(", ");
    sb.append("conf_id:");
    sb.append(this.conf_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("group_id:");
    sb.append(this.group_id);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PrintTaskStandardSchemeFactory implements SchemeFactory {
    public PrintTaskStandardScheme getScheme() {
      return new PrintTaskStandardScheme();
    }
  }

  private static class PrintTaskStandardScheme extends StandardScheme<PrintTask> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PrintTask struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.task_id = iprot.readI32();
              struct.setTask_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INPUT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.input_type = iprot.readI32();
              struct.setInput_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OUTPUT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.output_type = iprot.readI32();
              struct.setOutput_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SEND_PAGE_NOTIFY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.send_page_notify = iprot.readBool();
              struct.setSend_page_notifyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TASK_PRIOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.task_prior = iprot.readI32();
              struct.setTask_priorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FILE_SRC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.file_src_name = iprot.readString();
              struct.setFile_src_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FILE_DEST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.file_dest_name = iprot.readString();
              struct.setFile_dest_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // GEN_THUMB
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.gen_thumb = iprot.readBool();
              struct.setGen_thumbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CONF_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.conf_id = iprot.readI32();
              struct.setConf_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.group_id = iprot.readI32();
              struct.setGroup_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PrintTask struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
      oprot.writeI32(struct.task_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INPUT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.input_type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OUTPUT_TYPE_FIELD_DESC);
      oprot.writeI32(struct.output_type);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEND_PAGE_NOTIFY_FIELD_DESC);
      oprot.writeBool(struct.send_page_notify);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TASK_PRIOR_FIELD_DESC);
      oprot.writeI32(struct.task_prior);
      oprot.writeFieldEnd();
      if (struct.file_src_name != null) {
        oprot.writeFieldBegin(FILE_SRC_NAME_FIELD_DESC);
        oprot.writeString(struct.file_src_name);
        oprot.writeFieldEnd();
      }
      if (struct.file_dest_name != null) {
        oprot.writeFieldBegin(FILE_DEST_NAME_FIELD_DESC);
        oprot.writeString(struct.file_dest_name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(GEN_THUMB_FIELD_DESC);
      oprot.writeBool(struct.gen_thumb);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CONF_ID_FIELD_DESC);
      oprot.writeI32(struct.conf_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
      oprot.writeI32(struct.group_id);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PrintTaskTupleSchemeFactory implements SchemeFactory {
    public PrintTaskTupleScheme getScheme() {
      return new PrintTaskTupleScheme();
    }
  }

  private static class PrintTaskTupleScheme extends TupleScheme<PrintTask> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PrintTask struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTask_id()) {
        optionals.set(0);
      }
      if (struct.isSetInput_type()) {
        optionals.set(1);
      }
      if (struct.isSetOutput_type()) {
        optionals.set(2);
      }
      if (struct.isSetSend_page_notify()) {
        optionals.set(3);
      }
      if (struct.isSetTask_prior()) {
        optionals.set(4);
      }
      if (struct.isSetFile_src_name()) {
        optionals.set(5);
      }
      if (struct.isSetFile_dest_name()) {
        optionals.set(6);
      }
      if (struct.isSetGen_thumb()) {
        optionals.set(7);
      }
      if (struct.isSetConf_id()) {
        optionals.set(8);
      }
      if (struct.isSetGroup_id()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetTask_id()) {
        oprot.writeI32(struct.task_id);
      }
      if (struct.isSetInput_type()) {
        oprot.writeI32(struct.input_type);
      }
      if (struct.isSetOutput_type()) {
        oprot.writeI32(struct.output_type);
      }
      if (struct.isSetSend_page_notify()) {
        oprot.writeBool(struct.send_page_notify);
      }
      if (struct.isSetTask_prior()) {
        oprot.writeI32(struct.task_prior);
      }
      if (struct.isSetFile_src_name()) {
        oprot.writeString(struct.file_src_name);
      }
      if (struct.isSetFile_dest_name()) {
        oprot.writeString(struct.file_dest_name);
      }
      if (struct.isSetGen_thumb()) {
        oprot.writeBool(struct.gen_thumb);
      }
      if (struct.isSetConf_id()) {
        oprot.writeI32(struct.conf_id);
      }
      if (struct.isSetGroup_id()) {
        oprot.writeI32(struct.group_id);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PrintTask struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.task_id = iprot.readI32();
        struct.setTask_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.input_type = iprot.readI32();
        struct.setInput_typeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.output_type = iprot.readI32();
        struct.setOutput_typeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.send_page_notify = iprot.readBool();
        struct.setSend_page_notifyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.task_prior = iprot.readI32();
        struct.setTask_priorIsSet(true);
      }
      if (incoming.get(5)) {
        struct.file_src_name = iprot.readString();
        struct.setFile_src_nameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.file_dest_name = iprot.readString();
        struct.setFile_dest_nameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.gen_thumb = iprot.readBool();
        struct.setGen_thumbIsSet(true);
      }
      if (incoming.get(8)) {
        struct.conf_id = iprot.readI32();
        struct.setConf_idIsSet(true);
      }
      if (incoming.get(9)) {
        struct.group_id = iprot.readI32();
        struct.setGroup_idIsSet(true);
      }
    }
  }

}

