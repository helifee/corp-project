package com.jzy.fileserver.utils;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.stereotype.Component;
import org.springframework.util.CollectionUtils;

@Component
public class RedisUtils {

	public static StringRedisTemplate redisTemplate;
	
	public static void set(String key, String value, long timeout, TimeUnit unit) {
		redisTemplate.opsForValue().set(key, value, timeout, unit);
	}
	
	public static Map<String, String> getValues(String pattern) {
		Map<String, String> values = new HashMap<>();
		Set<String> keys = redisTemplate.keys(pattern);
		if(!CollectionUtils.isEmpty(keys)) {
			for(String key : keys) {
				String value = redisTemplate.opsForValue().get(key);
				values.put(key, value);
			}
		}
		return values;
	}
	
	public static void put(String key, String hashKey, Object value) {
		redisTemplate.opsForHash().put(key, hashKey, value);
	}
	
	public static Map<Object, Object> getMap(String key) {
		return redisTemplate.opsForHash().entries(key);
	}
	
	@Autowired
	public void setRedisTemplate(StringRedisTemplate redisTemplate) {
		RedisUtils.redisTemplate = redisTemplate;
	}
}
