/*
 * Copyright (c) 2009-2010 by DaLian YuDong Computer System CO.,LTD
 * All rights reserved.
 *      Project: SSH
 *    SubSystem: 会议室管理子系统
 */
package com.ysys.www.hy.action;

import java.util.List;

import com.opensymphony.xwork2.ActionSupport;
import com.ysys.www.hy.dao.condition.TabHysyl;
import com.ysys.www.hy.service.DistributeService;
import com.ysys.www.hy.service.condition.DisUpdateInfo;

/**
 * 更改会议室画面Action. 
 * 功能：新建，修改，删除会议室。    
 * @version 1.00 2009/08/28
 * @author fengliang
 */
public class DistributeUpdateAction extends ActionSupport {

	private static final long serialVersionUID = -1229993320907075872L;
	private DistributeService distributeService;        // DistributeService类用于事务处理。
	private List<TabHysyl> distributes;                 // 存储会议室信息。
	private Integer hysIddelete;                        // 要删除的会议室ID。
	private DisUpdateInfo nextMessage;                  // 新建记录时的最大ID+1,最大排序+1。
	private String hysId;               // 会议室ID。
	private String hysMc;               // 会议是名称。
	private String hysRs;               // 会议是容纳人数。
	private String hysDh;               // 电话。
	private String hysSb;               // 设备。
	private String hysBg;               // 是否要会议报告。
	private String hysJs;               // 会议是网络接口数量。
	private String hysPx;               // 会议室排序。
	private String hysQx;               // 会议室标签位置的起点X坐标。
	private String hysQy;               // 会议室标签位置的起点Y坐标。
	private String hysZx;               // 会议室标签位置的终点X坐标。
	private String hysZy;               // 会议室标签位置的终点Y坐标。
	private String result;				// 新建或删除成功与否标志
   
	/**
	 * 初始化页面.
	 * 
	 * @return String 返回执行的逻辑结果字符串，以便对其结果进行相应处理。
	 */
	@Override
	public String execute() {
	   
		//检查用户权限
//		String quanxian = jcQuanxian();
//		if(ERROR.equals(quanxian) == true){
//			return ERROR;
//		}
		
		// 获得会议室记录信息，提供给画面。
		this.distributes = distributeService.getdiName();
		
		// 获得新建会议室Id和排序sortId。
		nextMessage = distributeService.maxHysid(this.distributes);
          
		return SUCCESS;
	}

	/**
	 * 会议室删除函数.
	 * 功能：删除选中记录。
	 * @return String 返回执行的逻辑结果字符串，以便对其结果进行相应处理。
	 */
	public String remove() {
//		String quanxian = jcQuanxian();
//		if(ERROR.equals(quanxian) == true){
//			return ERROR;
//		}
		boolean isSuccess = distributeService.deleteHys(hysIddelete);
		if(isSuccess) {
			setResult("success");
		} else {
			setResult("failer");
		}
		return SUCCESS;
	}

	/**
	 * 会议室新建和更新函数。
	 * 函数功能：新建和更新会议室记录。
	 * 函数参数 ： 会议室ID: hysId , 会议室名称：hysMc
	 *           会议室容纳人数：hysRs , 会议室电话：hysDh 
	 *           会议室设备：hysSb , 会议室报告标志：hysBg 
	 *           会议室接口数量：hysJs , 会议室排序：hysPx 
	 *           会议室标签起点X坐标：hysQx , 会议室标签起点Y坐标：hysQy 
	 *           会议室标签终点X坐标：hysZx , 会议室标签终点Y坐标：hysZy
	 *  @return String 返回执行的逻辑结果字符串，以便对其结果进行相应处理。
	 */
	public String newOrUpdateHys() {
		
//		//检查更改会议室用户权限。
//		String quanxian = jcQuanxian();
//		if(ERROR.equals(quanxian) == true){
//			return ERROR;
//		}
		
		//类型转换
		Integer hysidzh = Integer.parseInt(hysId);
		Integer hysRszh = Integer.parseInt(hysRs);
		Integer hysBgzh = Integer.parseInt(hysBg);

		Integer hysJszh = Integer.parseInt(hysJs);
		Integer hysPxzh = Integer.parseInt(hysPx);
		Integer hysQxzh = Integer.parseInt(hysQx);
		Integer hysQyzh = Integer.parseInt(hysQy);
		Integer hysZxzh = Integer.parseInt(hysZx);
		Integer hysZyzh = Integer.parseInt(hysZy);
		
		// 新建或更新会议室信息。
		boolean isSuccess = distributeService.saveOrUpdateHys(hysidzh, hysMc, hysRszh, hysDh,
				hysSb, hysBgzh, hysJszh, hysPxzh, hysQxzh, hysQyzh, hysZxzh,hysZyzh);
		if(isSuccess) {
			setResult("success");
		} else {
			setResult("failer");
		}
		return SUCCESS;
	}
	

	/**
	 * 输入校验
	 * 判断字符串中的内容是不是整数：
	 * 1.如果不是整数：显示出错。
	 * 2.如果是整数：判断字符串前是不是“+”号：
	 *              1.如果是“+”号：去掉“+”号。
	 *              2.如果不是：保持不变。  
	 */
	@Override
	public void validate() {
		
		//去掉字符串前的"+"号，判断是不是整数，判断是否小于0。
		if(hysId != null){	
			hysId = deleteJa(hysId);                                    
			if(isNum(hysId) == false || (Integer.parseInt(hysId)) < 0){ 
				this.addFieldError("hysId", "会议室ID：不是合法数字"); 	
			}
		}
		
		//去掉字符串前的"+"号，判断是不是整数，判断是否小于0。
		if(hysRs != null){                                              
			hysRs = deleteJa(hysRs); 
			if(isNum(hysRs) == false || (Integer.parseInt(hysRs)) < 0){ 
				this.addFieldError("hysRs", "容纳人数：不是合法数字");
			}  
		}
		
		//去掉字符串前的"+"号，判断是不是整数，判断是否等于1或0。
		if(hysBg != null){
			hysBg = deleteJa(hysBg);  
			if( isNum(hysBg) == false || 
					( ( Integer.parseInt(hysBg) != 0 ) && ( Integer.parseInt(hysBg) != 1 ) ) ){
				this.addFieldError("hysBg", "是否需要会议室报告：不是合法数字");
			}
		}
		
		//去掉字符串前的"+"号，判断是不是整数，判断是否小于0。
		if(hysJs != null){
			hysJs = deleteJa(hysJs); 
			if(isNum(hysJs) == false || (Integer.parseInt(hysJs)) < 0){
				this.addFieldError("hysJs", "接口数量：不是合法数字");
			}
		}
		
		//去掉字符串前的"+"号，判断是不是整数，判断是否小于0。
		if(hysPx != null){
			hysPx = deleteJa(hysPx); 
			if(isNum(hysPx) == false || (Integer.parseInt(hysPx)) < 0){
				this.addFieldError("hysPx", "排列顺序：不是合法数字");
			}
		}
		
		//去掉字符串前的"+"号，判断是不是整数。
		if(hysQx != null){	
			hysQx = deleteJa(hysQx);   
			if(isNum(hysQx) == false){
				this.addFieldError("hysQx", "会议室标签起点X坐标：不是合法数字");
			}
		}
		
		//去掉字符串前的"+"号，判断是不是整数。
		if(hysQy != null){
			hysQy = deleteJa(hysQy); 
			if(isNum(hysQy) == false){
				this.addFieldError("hysQy", "会议室标签起点Y坐标：不是合法数字");
			} 
		}
		
		//去掉字符串前的"+"号，判断是不是整数。
		if(hysZx != null){
			hysZx = deleteJa(hysZx);   
			if(isNum(hysZx) == false){
				this.addFieldError("hysZx", "会议室标签终点X坐标：不是合法数字");
			}
		}
		
		//去掉字符串前的"+"号，判断是不是整数。
		if(hysZy != null){
			hysZy = deleteJa(hysZy); 
			if(isNum(hysZy) == false){
				this.addFieldError("hysZy", "会议室标签终点Y坐标：不是合法数字");
			}
		}	
		
		//会议室名称合法性验证
		if(hysMc != null){
			if(tszf(hysMc) == false){
				this.addFieldError("hysMc", "会议室名称：不是合法字符");
			}
		}	
		
		//电话合法性验证
		if(hysDh != null){
			if(tszf(hysDh) == false){
				this.addFieldError("hysDh", "电话：不是合法字符");
			}
		}	
		
		//设备合法性验证
		if(hysSb != null){
			if(tszf(hysSb) == false){
				this.addFieldError("hysSb", "设备：不是合法字符");
			}
		}	
	}
	
	/**
	 * 检查特殊字符。
	 * 参数：String tszf:待验证的字符串。
	 * @author fengliang
	 * @return true:是合法字符串；false:不是合法字符串。
	 */
	public boolean tszf(String tszf){
		
		if(tszf.indexOf("'")!= -1 || tszf.indexOf("\\") != -1){
			return false;
			
		}
		else{
			return true;
		}
	}
	 
	
	/**
	 * 判断是不是整数。
	 * 参数：String msg:待验证的字符串。
	 * @return true:整数;false:不是整数。
	 */
	public boolean isNum(String msg){
		
		//去掉字符串前的或“-”号
		String tempS = msg.substring(0 , 1);
		if( "-".equals(tempS) ==true){
			msg = msg.substring(1); 
		}
		
		//如果去掉加减符号后字符串为空，则不是数字，返回false。
		if("".equals(msg)){
			return false;
		}
		
		//检查字符串中是否有非数字的字符。没有:返回true;有：返回false。
		for(int i = 0; i < msg.length(); i++){
			if(Character.isDigit(msg.charAt(i)) == false){
				return false;
			}
		}
		
		return true;
	}
	
	/**
	 * 去掉字符串前面的"+"号。
	 * 参数：String tempS:待处理的字符串。
	 * @return String 返回不带加号的字符串。
	 */
	public String deleteJa(String tempS){
		
		//取得字符串第一个字符。
		String sdjhS = tempS.substring(0 , 1);
		
		//检查第一个字符是不是“+”号，是：去掉“+”号；不是：保持不变。
		if("+".equals(sdjhS) ==true){
			tempS = tempS.substring(1); 
		}
		
		return tempS;
	}
	
	/*
	 * 权限检查
	 */
	public String jcQuanxian(){
//		SessionManager session = new SessionManager();
//		String jobId = ((UserInfo) session.get(CommonConstants.USERINFO))
//				.getJobId();
//		Integer quanxian = Integer.parseInt(jobId);
//		if (quanxian > 31 && quanxian != 99) {
//			return ERROR;
//		}  
		return SUCCESS;
	}

	public List<TabHysyl> getDistributes() {
		return distributes;
	}

	public void setDistributeService(DistributeService distributeService) {
		this.distributeService = distributeService;
	}

	public Integer getHysIddelete() {
		return hysIddelete;
	}

	public void setHysIddelete(Integer hysIddelete) {
		this.hysIddelete = hysIddelete;
	}

	public String getHysId() {
		return hysId;
	}

	public void setHysId(String hysId) {
		this.hysId = hysId;
	}

	public String getHysMc() {
		return hysMc;
	}

	public void setHysMc(String hysMc) {
		this.hysMc = hysMc;
	}

	public String getHysRs() {
		return hysRs;
	}

	public void setHysRs(String hysRs) {
		this.hysRs = hysRs;
	}

	public String getHysDh() {
		return hysDh;
	}

	public void setHysDh(String hysDh) {
		this.hysDh = hysDh;
	}

	public String getHysSb() {
		return hysSb;
	}

	public void setHysSb(String hysSb) {
		this.hysSb = hysSb;
	}

	public String getHysBg() {
		return hysBg;
	}

	public void setHysBg(String hysBg) {
		this.hysBg = hysBg;
	}

	public String getHysJs() {
		return hysJs;
	}

	public void setHysJs(String hysJs) {
		this.hysJs = hysJs;
	}

	public String getHysPx() {
		return hysPx;
	}

	public void setHysPx(String hysPx) {
		this.hysPx = hysPx;
	}

	public String getHysQx() {
		return hysQx;
	}

	public void setHysQx(String hysQx) {
		this.hysQx = hysQx;
	}

	public String getHysQy() {
		return hysQy;
	}

	public void setHysQy(String hysQy) {
		this.hysQy = hysQy;
	}

	public String getHysZx() {
		return hysZx;
	}

	public void setHysZx(String hysZx) {
		this.hysZx = hysZx;
	}

	public String getHysZy() {
		return hysZy;
	}

	public void setHysZy(String hysZy) {
		this.hysZy = hysZy;
	}

	public DisUpdateInfo getNextMessage() {
		return nextMessage;
	}

	public String getResult() {
		return result;
	}

	public void setResult(String result) {
		this.result = result;
	}

	
}
