/*
 * Copyright (c) 2009-2010 by DaLian YuDong Computer System CO.,LTD
 * All rights reserved.
 *      Project: SSH
 *    SubSystem: 会议室管理子系统
 */

package com.ysys.www.hy.dao.impl;

import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Query;
import org.hibernate.Session;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import com.ysys.www.hy.dao.DistributeSpDao;
import com.ysys.www.hy.dao.condition.TabHysyl;

/**
 * 会议室分布（数据库访问）
 * @author fengliang
 * @version 1.00 2009/09/23
 */
public class DistributeSpDaoImpl extends HibernateDaoSupport implements DistributeSpDao {
	private static final Log log = LogFactory.getLog(DistributeSpDaoImpl.class);

	/* (non-Javadoc)
	 * @see com.ysys.www.hy.dao.impl.DistributeDao#findName()
	 */
	@SuppressWarnings("unchecked")
	public List findName() {
		log.debug("Init");
		try {
			String queryString = " from TabHysyl t order by t.sortid ,t.id";
			return this.getHibernateTemplate().find(queryString);
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}
	
	public List findNamePage(long offsetFrom , long offsetTo){

		String queryString = "from TabHysyl t order by t.sortid ,t.id";
		List yyjlList = null;
		Session session = null;
		Long offsetFromL = offsetFrom;
		Long offsetToL = offsetTo;
		try {
			log.debug("HQL:" + queryString);
			session = getSession();
			Query query = session.createQuery(queryString);
			query.setFirstResult(offsetFromL.intValue());
			query.setMaxResults(offsetToL.intValue() - offsetFromL.intValue());
			yyjlList = query.list();
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
		return yyjlList;
	}

	/* (non-Javadoc)
	 * @see com.ysys.www.hy.dao.impl.DistributeDao#deleteHys(com.ysys.www.hy.dao.condition.TabHysyl)
	 */
	public void deleteHys(TabHysyl deleteObj) {
		log.debug("deleting Book instance");
		try {
			this.getHibernateTemplate().delete(deleteObj);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}

	/* (non-Javadoc)
	 * @see com.ysys.www.hy.dao.impl.DistributeDao#saveOrUpdateHys(com.ysys.www.hy.dao.condition.TabHysyl)
	 */
	public void saveOrUpdateHys(TabHysyl deleteObj) {
		log.debug("deleting  instance");
		try {
			this.getHibernateTemplate().saveOrUpdate(deleteObj);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}

	/* (non-Javadoc)
	 * @see com.ysys.www.hy.dao.impl.DistributeDao#findById(java.lang.Integer)
	 */
	public TabHysyl findById(Integer hysid) {
		log.debug("getting Hys instance with id: " + hysid);
		try {
			TabHysyl instance = (TabHysyl) (this.getHibernateTemplate().get(
					"com.ysys.www.hy.dao.condition.TabHysyl", hysid));
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}
	@SuppressWarnings("unchecked")
	public long getRowIndexDB(String hysPx){
		log.debug("getting RowIndex with hysPx: " + hysPx);
		long rowIndexInteger = 0;
		try {
			String queryString = " select count(*) from TabHysyl t where t.sortid < " + hysPx + " ";		
			rowIndexInteger =(Long) this.getHibernateTemplate().find(queryString).get(0);			
	 
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			re.printStackTrace();
			throw re;
		}
		
		return rowIndexInteger;
	}
	
	public long getRowIndexDBSecond(String hysPx , String hysId){
		log.debug("getting RowIndex with hysPx: " + hysPx);
		long rowIndexInteger = 0;
		try {
			String queryString = " select count(*) from TabHysyl t where t.sortid = " + hysPx + " and t.id < " + hysId + " ";			
			rowIndexInteger =(Long) this.getHibernateTemplate().find(queryString).get(0);
	 
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			re.printStackTrace();
			throw re;
		}
		
		return rowIndexInteger;
	}
	
	public long getMaxHysidDB(){
		log.debug("getting MaxHysid" );
		long MaxHysid = 0;
		try {
			String queryString = " select max(t.id) from TabHysyl t ";			
			MaxHysid =(Integer) this.getHibernateTemplate().find(queryString).get(0);
	 
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			re.printStackTrace();
			throw re;
		}
		
		return MaxHysid;
	}
	public long getMaxHyspxDB(){
		log.debug("getting MaxHyspx" );
		long MaxHyspx = 0;
		try {
			String queryString = " select max(t.sortid) from TabHysyl t ";			
			MaxHyspx =(Integer) this.getHibernateTemplate().find(queryString).get(0);
	 
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			re.printStackTrace();
			throw re;
		}		
		return MaxHyspx;
	}
	public long getTotalCountDB(){
		log.debug("getting total data count ");
		long totalCount = 0;
		try {
			String queryString = " select count(*) from TabHysyl t ";			
			totalCount =(Long) this.getHibernateTemplate().find(queryString).get(0);
	 
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			re.printStackTrace();
			throw re;
		}
		
		return totalCount;
		
	}
}
