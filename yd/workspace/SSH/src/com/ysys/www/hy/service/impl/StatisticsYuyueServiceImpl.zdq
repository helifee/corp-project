/*
 * Copyright (c) 2009-2010 by DaLian YuDong Computer System CO.,LTD
 * All rights reserved.
 *      Project: SSH
 *    SubSystem: 会议室管理子系统
 */

package com.ysys.www.hy.service.impl;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.ysys.www.hy.dao.StatisticsDao;
import com.ysys.www.hy.dao.condition.TabHysyl;
import com.ysys.www.hy.service.StatisticsYuyueService;
import com.ysys.www.hy.service.common.CommonConstants;
import com.ysys.www.hy.service.condition.StaBYCData;
import com.ysys.www.hy.service.condition.StaBYEData;
import com.ysys.www.hy.service.condition.StaBYInfo;
import com.ysys.www.hy.service.condition.StaBYShow;
import com.ysys.www.hy.service.condition.StaCData;
import com.ysys.www.hy.service.condition.StaEData;
import com.ysys.www.hy.service.condition.StaFieldInfo;
import com.ysys.www.hy.service.condition.StaInfo;
import com.ysys.www.hy.service.condition.StaShow;

/**
 *会议室预约统计（业务逻辑）
 * 
 * @author fengliang
 * @version 1.00 2009/09/23
 */
public class StatisticsYuyueServiceImpl implements StatisticsYuyueService {

	private StatisticsDao statiticsDaoImpl;

	public void setStatiticsDao(StatisticsDao statiticsDaoImpl) {
		this.statiticsDaoImpl = statiticsDaoImpl;
	}
	
	/**
	 * 前几年的每年预约次数统计信息
	 * 
	 * @param Stayear 当前年份
	 * @return List<StaBYShow> 前几年的每年预约次数统计信息
	 */
	@SuppressWarnings("unchecked")
	public List<StaBYShow> getStaBN(Integer Stayear) {
		
		List<StaBYShow> sbsws = new ArrayList<StaBYShow>();
		
		//显示年度列表
		List<Integer> yearBYList = BYCount(Stayear);
		List<TabHysyl> listHys = statiticsDaoImpl.findHysName();
		
		//获得年份和sum
		List<StaBYInfo> staBYInfos = statiticsDaoImpl.ftsby(yearBYList);
		DecimalFormat df3 = new DecimalFormat("##.0");
	    
		//获得每年的Sum	存储在sumYear[]中
		int sumYear[]= new int[CommonConstants.STA_BY_YEARCOUNT] ;
		Iterator<Integer> iterYS = yearBYList.iterator();
		Integer years = null; 
		for(int i = 0 ; (i < CommonConstants.STA_BY_YEARCOUNT) && (iterYS.hasNext()); i++){
			years = iterYS.next();
			
			Iterator itersbyis = staBYInfos.iterator();
			while(itersbyis.hasNext()){
				Object[] record = (Object[])itersbyis.next(); 
				Integer sbyiyear = (Integer)record[2];
				Long sbyivalue = (Long)record[3];
				if(years.intValue() == sbyiyear.intValue()){
					sumYear[i] = sumYear[i] + sbyivalue.intValue() ;
				}
			}			
		}
			
		Iterator<TabHysyl> iteaHys = listHys.iterator();
		TabHysyl TabTemp = null;
		while(iteaHys.hasNext()){
			TabTemp = iteaHys.next();
			StaBYShow sbswTemp = new StaBYShow();
			Integer hysid = TabTemp.getId();
			
			
			sbswTemp.setHysId(hysid);
			sbswTemp.setHysMc(TabTemp.getHysmc());
			
			Iterator<Integer> iterY = yearBYList.iterator();
			Integer yearTemp = null;
			List<StaBYCData> sbycdl = new ArrayList<StaBYCData>();
			while(iterY.hasNext()){
				yearTemp = iterY.next();
				StaBYCData sbycdtemp = new StaBYCData();
				sbycdtemp.setStaFName(yearTemp);
				
				Iterator itersbyi = staBYInfos.iterator();
				
				while(itersbyi.hasNext()){
					Object[] record = (Object[])itersbyi.next(); 
					Integer sbyiHysid = (Integer)record[0];
					Integer sbyiyear = (Integer)record[2];
					Long sbyivalue = (Long)record[3];
					
					if((hysid.intValue() == sbyiHysid.intValue()) && (yearTemp.intValue() == sbyiyear.intValue())){
							sbycdtemp.setStaValue(sbyivalue);	
					}
				}
				if(sbycdtemp.getStaValue() == null){
					sbycdtemp.setStaValue(Long.valueOf(0));
				}
				
				sbycdl.add(sbycdtemp);	
			}
			sbswTemp.setSdlist(sbycdl);
			Iterator<Integer> iterEY = yearBYList.iterator();
			List<StaBYEData> sbyedl = new ArrayList<StaBYEData>();
			for(int i = 0; (iterEY.hasNext()) && (i < CommonConstants.STA_BY_YEARCOUNT); i++){
				yearTemp = iterEY.next();
				StaBYEData sbyedtemp = new StaBYEData();
				sbyedtemp.setStaFName(yearTemp);
				
				Iterator itersbyi = staBYInfos.iterator();
				
				while(itersbyi.hasNext()){
					Object[] record = (Object[])itersbyi.next();
					Integer sbyiHysid = (Integer)record[0];
					Integer sbyiyear = (Integer)record[2];
					Long sbyivalue = (Long)record[3];
					
					
					if((hysid.intValue() == sbyiHysid.intValue()) && (yearTemp.intValue() == sbyiyear.intValue())){
						float sbyivtemp = sbyivalue.floatValue() / sumYear[i];
						sbyedtemp.setStaValue(Float.valueOf(df3.format(sbyivtemp*100)));	
					}
					
				}
				if(sbyedtemp.getStaValue() == null){
					sbyedtemp.setStaValue(Float.valueOf(0));
				}
				sbyedl.add(sbyedtemp);	
			}
			
			sbswTemp.setSdlistE(sbyedl);
			sbsws.add(sbswTemp);
		}


		return sbsws;
	}

	/**
	 * 当前年的会议室利用情况
	 * 
	 * @param staticsyear 当前年份
	 * @return List<StaShow> 当前年的会议室利用情况
	 */
	public List<StaShow> getStaCData(Integer staticsyear) {
        
		//定义变量，存储返回结果。
		List<StaShow> staShows = new ArrayList<StaShow>();
	
		//获得全部满足条件的数据。
		List<StaInfo> staInfos = getStaticsDn(staticsyear);
		
		//当前年的月份字段名称
		List<StaFieldInfo> sdfs = fieldSel();
		
		//当前年的利用率月份名称
		List<StaFieldInfo> sdfsLV = fieldLVSel();
		
		StaInfo staInfo = null;
		StaFieldInfo stasdfs = null;
		StaFieldInfo stasdfsLV = null;
		
		//循环当前年所有数据
		for (Iterator<StaInfo> itersta = staInfos.iterator(); itersta.hasNext();) {
			staInfo = itersta.next();
			StaShow stashow = new StaShow();
			stashow.setHysId(staInfo.getHysId());
			stashow.setHysMc(staInfo.getHysMc());

			//建立当前会议室的Sdlist
			List<StaCData> staCDatas = new ArrayList<StaCData>();
			
			//循环将要显示的月份字段名称
			for (Iterator<StaFieldInfo> itersdfs = sdfs.iterator(); itersdfs
					.hasNext();) {
				stasdfs = itersdfs.next();
				StaCData staCData = new StaCData();
				staCData.setStaField(stasdfs.getFieldName());
				staCData.setStaContext(stasdfs.getFieldContext());
				if (CommonConstants.STA_JANUARY.equals(stasdfs
						.getFieldContext())) {
					staCData.setStaValue(staInfo.getStaticJanuary());
				}
				if (CommonConstants.STA_FEBRUARY.equals(stasdfs
						.getFieldContext())) {
					staCData.setStaValue(staInfo.getStaticFebruary());
				}
				if (CommonConstants.STA_MARCH.equals(stasdfs.getFieldContext())) {
					staCData.setStaValue(staInfo.getStaticMarch());
				}
				if (CommonConstants.STA_APRIL.equals(stasdfs.getFieldContext())) {
					staCData.setStaValue(staInfo.getStaticApril());
				}
				if (CommonConstants.STA_MAY.equals(stasdfs.getFieldContext())) {
					staCData.setStaValue(staInfo.getStaticMay());
				}
				if (CommonConstants.STA_JUNE.equals(stasdfs.getFieldContext())) {
					staCData.setStaValue(staInfo.getStaticJune());
				}
				if (CommonConstants.STA_JULY.equals(stasdfs.getFieldContext())) {
					staCData.setStaValue(staInfo.getStaticJuly());
				}
				if (CommonConstants.STA_AUGUST
						.equals(stasdfs.getFieldContext())) {
					staCData.setStaValue(staInfo.getStaticAugust());
				}
				if (CommonConstants.STA_SEPTEMBER.equals(stasdfs
						.getFieldContext())) {
					staCData.setStaValue(staInfo.getStaticSeptember());
				}
				if (CommonConstants.STA_OCTOBER.equals(stasdfs
						.getFieldContext())) {
					staCData.setStaValue(staInfo.getStaticOctober());
				}
				if (CommonConstants.STA_NOVEMBER.equals(stasdfs
						.getFieldContext())) {
					staCData.setStaValue(staInfo.getStaticNovember());
				}
				if (CommonConstants.STA_DECEMBER.equals(stasdfs
						.getFieldContext())) {
					staCData.setStaValue(staInfo.getStaticDecember());
				}
				if (CommonConstants.STA_SUM.equals(stasdfs.getFieldContext())) {
					staCData.setStaValue(staInfo.getStaticSum());
				}
				staCDatas.add(staCData);
			}
			
			//添加staCDatas
			stashow.setSdlist(staCDatas);

			//建立当前会议室的SdlistE
			List<StaEData> staEDatas = new ArrayList<StaEData>();
			
			//循环将要显示的利用率月份字段名称
			for (Iterator<StaFieldInfo> itersdfsLV = sdfsLV.iterator(); itersdfsLV
					.hasNext();) {
				stasdfsLV = itersdfsLV.next();
				StaEData staEData = new StaEData();
				
				//设置StaField
				staEData.setStaField(stasdfsLV.getFieldName());
				
				//设置StaContext
				staEData.setStaContext(stasdfsLV.getFieldContext());

				//设置StaValue
				if (CommonConstants.EFF_JANUARY.equals(stasdfsLV
						.getFieldContext())) {
					staEData.setStaValue(staInfo.getEfficiencyJanuary());
				}
				if (CommonConstants.EFF_FEBRUARY.equals(stasdfsLV
						.getFieldContext())) {
					staEData.setStaValue(staInfo.getEfficiencyFebruary());
				}
				if (CommonConstants.EFF_MARCH.equals(stasdfsLV
						.getFieldContext())) {
					staEData.setStaValue(staInfo.getEfficiencyMarch());
				}
				if (CommonConstants.EFF_APRIL.equals(stasdfsLV
						.getFieldContext())) {
					staEData.setStaValue(staInfo.getEfficiencyApril());
				}
				if (CommonConstants.EFF_MAY.equals(stasdfsLV.getFieldContext())) {
					staEData.setStaValue(staInfo.getEfficiencyMay());
				}
				if (CommonConstants.EFF_JUNE
						.equals(stasdfsLV.getFieldContext())) {
					staEData.setStaValue(staInfo.getEfficiencyJune());
				}
				if (CommonConstants.EFF_JULY
						.equals(stasdfsLV.getFieldContext())) {
					staEData.setStaValue(staInfo.getEfficiencyJuly());
				}
				if (CommonConstants.EFF_AUGUST.equals(stasdfsLV
						.getFieldContext())) {
					staEData.setStaValue(staInfo.getEfficiencyAugust());
				}
				if (CommonConstants.EFF_SEPTEMBER.equals(stasdfsLV
						.getFieldContext())) {
					staEData.setStaValue(staInfo.getEfficiencySeptember());
				}
				if (CommonConstants.EFF_OCTOBER.equals(stasdfsLV
						.getFieldContext())) {
					staEData.setStaValue(staInfo.getEfficiencyOctober());
				}
				if (CommonConstants.EFF_NOVEMBER.equals(stasdfsLV
						.getFieldContext())) {
					staEData.setStaValue(staInfo.getEfficiencyNovember());
				}
				if (CommonConstants.EFF_DECEMBER.equals(stasdfsLV
						.getFieldContext())) {
					staEData.setStaValue(staInfo.getEfficiencyDecember());
				}
				if (CommonConstants.EFF_SUM.equals(stasdfsLV.getFieldContext())) {
					staEData.setStaValue(staInfo.getEfficiencySum());
				}
				staEDatas.add(staEData);
			}
			stashow.setSdlistE(staEDatas);
			staShows.add(stashow);
		}
		return staShows;

	}
    
	/**
	 * 当前年的月份字段名称
	 * 
	 * @return List<StaFieldInfo> 当前年的月份字段名称
	 */
	public List<StaFieldInfo> fieldSel() {
		// 画面显示列
		List<StaFieldInfo> sdf = new ArrayList<StaFieldInfo>();

		List<String> fn = new ArrayList<String>(); // 字段名称
		List<String> fc = new ArrayList<String>(); // 字段内容

		fn.add(CommonConstants.SFN_JANUARY);   //显示1月
		fc.add(CommonConstants.STA_JANUARY);
		fn.add(CommonConstants.SFN_FEBRUARY);  //显示2月
		fc.add(CommonConstants.STA_FEBRUARY);
		fn.add(CommonConstants.SFN_MARCH);     //显示3月
		fc.add(CommonConstants.STA_MARCH);
		fn.add(CommonConstants.SFN_APRIL);     //显示4月
		fc.add(CommonConstants.STA_APRIL);
		fn.add(CommonConstants.SFN_MAY);       //显示5月
		fc.add(CommonConstants.STA_MAY);
		fn.add(CommonConstants.SFN_JUNE);      //显示6月
		fc.add(CommonConstants.STA_JUNE);
		fn.add(CommonConstants.SFN_JULY);      //显示7月
		fc.add(CommonConstants.STA_JULY);
		fn.add(CommonConstants.SFN_AUGUST);    //显示8月
		fc.add(CommonConstants.STA_AUGUST);
		fn.add(CommonConstants.SFN_SEPTEMBER); //显示9月
		fc.add(CommonConstants.STA_SEPTEMBER);
		fn.add(CommonConstants.SFN_OCTOBER);   // 显示10月
		fc.add(CommonConstants.STA_OCTOBER);
		fn.add(CommonConstants.SFN_NOVEMBER);  // 显示11月
		fc.add(CommonConstants.STA_NOVEMBER);
		fn.add(CommonConstants.SFN_DECEMBER);  // 显示12月
		fc.add(CommonConstants.STA_DECEMBER);
		fn.add("");                            // 显示次数合计
		fc.add(CommonConstants.STA_SUM);

		Iterator<String> iterfn = fn.iterator();
		Iterator<String> iterfc = fc.iterator();
		String fnS = null;
		String fcS = null;
		while ((iterfn.hasNext()) && (iterfc.hasNext())) {
			fnS = iterfn.next();
			fcS = iterfc.next();
			StaFieldInfo staFieldInfo = new StaFieldInfo();
			staFieldInfo.setFieldName(fnS);
			staFieldInfo.setFieldContext(fcS);
			sdf.add(staFieldInfo);
		}
		return sdf;
	}
	
	/**
	 * 当前年的利用率月份名称
	 * 
	 * @return List<StaFieldInfo> 当前年的利用率月份名称
	 */
	public List<StaFieldInfo> fieldLVSel() {
		// 画面显示列
		List<StaFieldInfo> sdf = new ArrayList<StaFieldInfo>();

		List<String> fn = new ArrayList<String>(); // 字段名称
		List<String> fc = new ArrayList<String>(); // 字段内容

		fn.add(CommonConstants.SFN_JANUARY);       //显示1利用率
		fc.add(CommonConstants.EFF_JANUARY);
		fn.add(CommonConstants.SFN_FEBRUARY);      //显示2利用率
		fc.add(CommonConstants.EFF_FEBRUARY);
		fn.add(CommonConstants.SFN_MARCH);         //显示3利用率
		fc.add(CommonConstants.EFF_MARCH);
		fn.add(CommonConstants.SFN_APRIL);         //显示4利用率
		fc.add(CommonConstants.EFF_APRIL);
		fn.add(CommonConstants.SFN_MAY);           //显示5利用率
		fc.add(CommonConstants.EFF_MAY);
		fn.add(CommonConstants.SFN_JUNE);          //显示6利用率
		fc.add(CommonConstants.EFF_JUNE);
		fn.add(CommonConstants.SFN_JULY);          //显示7利用率
		fc.add(CommonConstants.EFF_JULY);
		fn.add(CommonConstants.SFN_AUGUST);        //显示8利用率
		fc.add(CommonConstants.EFF_AUGUST);
		fn.add(CommonConstants.SFN_SEPTEMBER);     //显示9利用率
		fc.add(CommonConstants.EFF_SEPTEMBER);
		fn.add(CommonConstants.SFN_OCTOBER);       //显示10利用率
		fc.add(CommonConstants.EFF_OCTOBER); 
		fn.add(CommonConstants.SFN_NOVEMBER);      //显示11利用率
		fc.add(CommonConstants.EFF_NOVEMBER);
		fn.add(CommonConstants.SFN_DECEMBER);      //显示12利用率
		fc.add(CommonConstants.EFF_DECEMBER);
		fn.add("");                                // 显示利用率合计
		fc.add(CommonConstants.EFF_SUM);

		Iterator<String> iterfn = fn.iterator();
		Iterator<String> iterfc = fc.iterator();
		String fnS = null;
		String fcS = null;
		while ((iterfn.hasNext()) && (iterfc.hasNext())) {
			fnS = iterfn.next();
			fcS = iterfc.next();
			StaFieldInfo staFieldInfo = new StaFieldInfo();
			staFieldInfo.setFieldName(fnS);
			staFieldInfo.setFieldContext(fcS);
			sdf.add(staFieldInfo);
		}
		return sdf;
	}
	
	/**
	 *  前几年的年数。
	 */
	public List<Integer> BYCount(Integer stayear) {
		List<Integer> yearBYList = new ArrayList<Integer>(); // 
		 
		Integer beBYyear = null;
		for(int i = CommonConstants.STA_BY_YEARCOUNT - 1; i > 0; i--){
			beBYyear = stayear - i;
			yearBYList.add(beBYyear);
		}
		yearBYList.add(stayear);
		return yearBYList;
	}
	
	/**
	 * 前几年的年份和利用率年份名称
	 * 
	 * @param stayear 当前年份
	 * @return List<StaFieldInfo> 前几年的年份和利用率年份名称
	 */
	public List<StaFieldInfo> getField(Integer stayear){
		List<StaFieldInfo> yearBYList = new ArrayList<StaFieldInfo>(); // 
		 
		Integer beBYyear = null;
		for(int i = CommonConstants.STA_BY_YEARCOUNT - 1; i >= 0; i--){
			StaFieldInfo sfitemp = new StaFieldInfo();
			beBYyear = stayear - i;
			sfitemp.setFieldName(String.valueOf(beBYyear));
			yearBYList.add(sfitemp);
		}
		return yearBYList;
	}
	
	
	/**
     * 获得全部满足条件的数据
     * 
     * @param staticsyear 当前年份
     * @return List<StaInfo> 满足条件的数据
     */
	@SuppressWarnings("unchecked")
	public List<StaInfo> getStaticsDn(Integer staticsyear) {
		List<StaInfo> statisticsInfos = new ArrayList<StaInfo>();
		List<TabHysyl> listDn = statiticsDaoImpl
				.findTabMrhyylStaticsDn(staticsyear);
		// 获得会议室名称。
		List<TabHysyl> listHys = statiticsDaoImpl.findHysName();
		// 一到十二月份的会议室预约统计全局变量
		float JanuarySum = 0; // 一月份预约的数目
		float FebruarySum = 0; // 二月份预约的数目
		float MarchSum = 0; // 三月份预约的数目
		float AprilSum = 0; // 四月份预约的数目
		float MaySum = 0; // 五月份预约的数目
		float JuneSum = 0; // 六月份预约的数目
		float JulySum = 0; // 七月份预约的数目
		float AugustSum = 0; // 八月份预约的数目
		float SeptemberSum = 0; // 九月份预约的数目
		float OctoberSum = 0; // 十月份预约的数目
		float NovemberSum = 0; // 十一月份预约的数目
		float DecemberSum = 0; // 十二月份预约的数目
		float hejiSum = 0; // 全年的预约的数目合计

		// 记录信息的整合。
		Iterator<TabHysyl> iterHys = listHys.iterator();
		TabHysyl tempTahysyl = null;
		
		// 循环取得会议室信息。
		for (; iterHys.hasNext();) { 
			tempTahysyl = iterHys.next();
			Integer hysId = tempTahysyl.getId();
			String hysMc = tempTahysyl.getHysmc();
			StaInfo statisticsInfo = new StaInfo();
			statisticsInfo.setHysId(hysId);
			statisticsInfo.setHysMc(hysMc);
			long ciShuHeJi = 0;
			long initFuzhi = 0;
			float initBilv = 0;
			
			// StatisticsInfo类型的记录的初始化。
			statisticsInfo.setStaticJanuary(initFuzhi);
			statisticsInfo.setStaticFebruary(initFuzhi);
			statisticsInfo.setStaticMarch(initFuzhi);
			statisticsInfo.setStaticApril(initFuzhi);
			statisticsInfo.setStaticMay(initFuzhi);
			statisticsInfo.setStaticJune(initFuzhi);
			statisticsInfo.setStaticJuly(initFuzhi);
			statisticsInfo.setStaticAugust(initFuzhi);
			statisticsInfo.setStaticSeptember(initFuzhi);
			statisticsInfo.setStaticOctober(initFuzhi);
			statisticsInfo.setStaticNovember(initFuzhi);
			statisticsInfo.setStaticDecember(initFuzhi);
			statisticsInfo.setStaticSum(initFuzhi);
			statisticsInfo.setEfficiencyJanuary(initBilv);
			statisticsInfo.setEfficiencyFebruary(initBilv);
			statisticsInfo.setEfficiencyMarch(initBilv);
			statisticsInfo.setEfficiencyApril(initBilv);
			statisticsInfo.setEfficiencyMay(initBilv);
			statisticsInfo.setEfficiencyJune(initBilv);
			statisticsInfo.setEfficiencyJuly(initBilv);
			statisticsInfo.setEfficiencyAugust(initBilv);
			statisticsInfo.setEfficiencySeptember(initBilv);
			statisticsInfo.setEfficiencyOctober(initBilv);
			statisticsInfo.setEfficiencyNovember(initBilv);
			statisticsInfo.setEfficiencyDecember(initBilv);
			statisticsInfo.setEfficiencySum(initBilv);
			
			// 把同一个会议室多个月份的记录整合成一条StatisticsInfo类型的记录。
			for (Iterator iterDn = listDn.iterator(); iterDn.hasNext();) { 

				Object[] recordDn = (Object[]) iterDn.next();			
				// 会议室ID
				Integer hysIdDn = (Integer) recordDn[0]; 		
				// 月份
				Integer monthDn = (Integer) recordDn[2]; 		
				// 预约数目
				Long staticsDy = (Long) recordDn[3]; 

				if (hysId.compareTo(hysIdDn) == 0) {

					switch (monthDn) {
					case 1: // 1月份
						statisticsInfo.setStaticJanuary(staticsDy);
						break;
					case 2: // 2月份
						statisticsInfo.setStaticFebruary(staticsDy);
						break;
					case 3: // 3月份
						statisticsInfo.setStaticMarch(staticsDy);
						break;
					case 4: // 4月份
						statisticsInfo.setStaticApril(staticsDy);
						break;
					case 5: // 5月份
						statisticsInfo.setStaticMay(staticsDy);
						break;
					case 6: // 6月份
						statisticsInfo.setStaticJune(staticsDy);
						break;
					case 7: // 7月份
						statisticsInfo.setStaticJuly(staticsDy);
						break;
					case 8: // 8月份
						statisticsInfo.setStaticAugust(staticsDy);
						break;
					case 9: // 9月份
						statisticsInfo.setStaticSeptember(staticsDy);
						break;
					case 10: // 10月份
						statisticsInfo.setStaticOctober(staticsDy);
						break;
					case 11: // 11月份
						statisticsInfo.setStaticNovember(staticsDy);
						break;
					case 12: // 12月份
						statisticsInfo.setStaticDecember(staticsDy);
						break;
					}
					ciShuHeJi = ciShuHeJi + staticsDy;
				}
			}
			
			JanuarySum   = JanuarySum + statisticsInfo.getStaticJanuary();
			FebruarySum  = FebruarySum + statisticsInfo.getStaticFebruary();
			MarchSum     = MarchSum + statisticsInfo.getStaticMarch();
			AprilSum     = AprilSum + statisticsInfo.getStaticApril();
			MaySum       = MaySum + statisticsInfo.getStaticMay();
			JuneSum      = JuneSum + statisticsInfo.getStaticJune();
			JulySum      = JulySum + statisticsInfo.getStaticJuly();
			AugustSum    = AugustSum + statisticsInfo.getStaticAugust();
			SeptemberSum = SeptemberSum + statisticsInfo.getStaticSeptember();
			OctoberSum   = OctoberSum + statisticsInfo.getStaticOctober();
			NovemberSum  = NovemberSum + statisticsInfo.getStaticNovember();
			DecemberSum  = DecemberSum + statisticsInfo.getStaticJanuary();
			hejiSum      = hejiSum + ciShuHeJi;
			statisticsInfo.setStaticSum(ciShuHeJi);
			statisticsInfos.add(statisticsInfo);
		}

		DecimalFormat df3 = new DecimalFormat("##.0");
		for (int i = 0; i < statisticsInfos.size(); i++) {
			float inintbilv = 0;
			Float efficiencyJanuary   = inintbilv;
			Float efficiencyFebruary  = inintbilv;
			Float efficiencyMarch     = inintbilv;
			Float efficiencyApril     = inintbilv;
			Float efficiencyMay       = inintbilv;
			Float efficiencyJune      = inintbilv;
			Float efficiencyJuly      = inintbilv;
			Float efficiencyAugust    = inintbilv;
			Float efficiencySeptember = inintbilv;
			Float efficiencyOctober   = inintbilv;
			Float efficiencyNovember  = inintbilv;
			Float efficiencyDecember  = inintbilv;
			Float efficiencySum       = inintbilv;

			if (JanuarySum != 0) {
				efficiencyJanuary = (statisticsInfos.get(i).getStaticJanuary())
						/ JanuarySum;
			}
			if (FebruarySum != 0) {
				efficiencyFebruary = (statisticsInfos.get(i)
						.getStaticFebruary())
						/ FebruarySum;
			}
			if (MarchSum != 0) {
				efficiencyMarch = (statisticsInfos.get(i).getStaticMarch())
						/ MarchSum;
			}
			if (AprilSum != 0) {
				efficiencyApril = (statisticsInfos.get(i).getStaticApril())
						/ AprilSum;
			}
			if (MaySum != 0) {
				efficiencyMay = (statisticsInfos.get(i).getStaticMay())
						/ MaySum;
			}
			if (JuneSum != 0) {
				efficiencyJune = (statisticsInfos.get(i).getStaticJune())
						/ JuneSum;
			}
			if (JulySum != 0) {
				efficiencyJuly = (statisticsInfos.get(i).getStaticJuly())
						/ JulySum;
			}
			if (AugustSum != 0) {
				efficiencyAugust = (statisticsInfos.get(i).getStaticAugust())
						/ AugustSum;
			}
			if (SeptemberSum != 0) {
				efficiencySeptember = (statisticsInfos.get(i)
						.getStaticSeptember())
						/ SeptemberSum;
			}
			if (OctoberSum != 0) {
				efficiencyOctober = (statisticsInfos.get(i).getStaticOctober())
						/ OctoberSum;
			}
			if (NovemberSum != 0) {
				efficiencyNovember = (statisticsInfos.get(i)
						.getStaticNovember())
						/ NovemberSum;
			}
			if (DecemberSum != 0) {
				efficiencyDecember = (statisticsInfos.get(i)
						.getStaticDecember())
						/ DecemberSum;
			}
			if (hejiSum != 0) {
				efficiencySum = (statisticsInfos.get(i).getStaticSum())
						/ hejiSum;
			}

			statisticsInfos.get(i).setEfficiencyJanuary(
					Float.valueOf(df3.format(efficiencyJanuary * 100)));
			statisticsInfos.get(i).setEfficiencyFebruary(
					Float.valueOf(df3.format(efficiencyFebruary * 100)));
			statisticsInfos.get(i).setEfficiencyMarch(
					Float.valueOf(df3.format(efficiencyMarch * 100)));
			statisticsInfos.get(i).setEfficiencyApril(
					Float.valueOf(df3.format(efficiencyApril * 100)));
			statisticsInfos.get(i).setEfficiencyMay(
					Float.valueOf(df3.format(efficiencyMay * 100)));
			statisticsInfos.get(i).setEfficiencyJune(
					Float.valueOf(df3.format(efficiencyJune * 100)));
			statisticsInfos.get(i).setEfficiencyJuly(
					Float.valueOf(df3.format(efficiencyJuly * 100)));
			statisticsInfos.get(i).setEfficiencyAugust(
					Float.valueOf(df3.format(efficiencyAugust * 100)));
			statisticsInfos.get(i).setEfficiencySeptember(
					Float.valueOf(df3.format(efficiencySeptember * 100)));
			statisticsInfos.get(i).setEfficiencyOctober(
					Float.valueOf(df3.format(efficiencyOctober * 100)));
			statisticsInfos.get(i).setEfficiencyNovember(
					Float.valueOf(df3.format(efficiencyNovember * 100)));
			statisticsInfos.get(i).setEfficiencyDecember(
					Float.valueOf(df3.format(efficiencyDecember * 100)));
			statisticsInfos.get(i).setEfficiencySum(
					Float.valueOf(df3.format(efficiencySum * 100)));

		}
		return statisticsInfos;
	}
}
