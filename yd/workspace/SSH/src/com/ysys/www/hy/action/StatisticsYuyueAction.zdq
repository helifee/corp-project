/*
 * Copyright (c) 2009-2010 by DaLian YuDong Computer System CO.,LTD
 * All rights reserved.
 *      Project: SSH
 *    SubSystem: 会议室管理子系统
 */
package com.ysys.www.hy.action;

import java.awt.Color;
import java.awt.Font;
import java.awt.RenderingHints;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.servlet.ServletContext;

import org.apache.struts2.ServletActionContext;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

import com.opensymphony.xwork2.ActionSupport;
import com.ysys.www.hy.service.StatisticsYuyueService;
import com.ysys.www.hy.service.common.CommonConstants;
import com.ysys.www.hy.service.condition.StaBYShow;
import com.ysys.www.hy.service.condition.StaCData;
import com.ysys.www.hy.service.condition.StaFieldInfo;
import com.ysys.www.hy.service.condition.StaShow;

/**
 * 预约统计Action. 功能：会议室利用情况统计。
 * 
 * @version 1.00 2009/08/28
 * @author fengliang
 */
public class StatisticsYuyueAction extends ActionSupport {

	private static final long serialVersionUID = 4443943986226954617L;
	private StatisticsYuyueService statisticsYuyueService; // 业务处理Service类实例
	private List<StaBYShow> staBNInfos; // 画面选择前几年时候的画面信息记录集
	private List<StaShow> staShows; // 当前年的画面信息记录集
	private Integer staticsyear; // 当前被选择的年
	private List<Integer> yearList; // 下拉列表框显示的年份列表
	private List<StaFieldInfo> sdf; // 当前年的月份字段名称
	private List<StaFieldInfo> sdfLV; // 当前年的利用率月份名称
	private List<StaFieldInfo> stafdis; // 多年的年份和利用率年份名称
	private Integer csc; // 当前年的显示次数的月份数
	private Integer lyvc; // 当前年的显示利用率的月份数
	private Integer stabyc; // 多年的年数
	private Integer beNyear; // 统计年数
	private String viewType; //视图类型
    private String viewEnum1; //类型d1
    private String viewEnum2; //类型d2
    private String viewEnum3; //类型d3
    private String viewEnum4; //类型q1
    private String viewEnum5; //类型q2
    private String viewEnum6; //类型q3
    private String yyDate;    //从预约一览传过来的日期
    private String pieImagepath;
    private String zImagepath;
    private String xImagepath;
    private String dataDir;
	/**
	 * 初始化页面.
	 * 
	 * @return String 返回执行的逻辑结果字符串，以便对其结果进行相应处理。
	 */
	@Override
	public String execute() throws Exception {
		
//		path = ServletActionContext.getServletContext().getRealPath("/");
		
		ServletContext servletContext = ServletActionContext.getServletContext();
        dataDir = servletContext.getRealPath("/hy/images");
        
		//视图枚举类型
		viewEnum1 = "d1"; 
	    viewEnum2 = "d2";
	    viewEnum3 = "d3";
	    viewEnum4 = "q1";
	    viewEnum5 = "q2";
	    viewEnum6 = "q3";
	    
	    pieImagepath="downLoadAction.action?impageName=pieChart"+staticsyear+".jpg&mm=" + Math.random()*100;
	    zImagepath = "downLoadAction.action?impageName=zChart"+staticsyear+".jpg&mm=" + Math.random()*100;
	    xImagepath = "downLoadAction.action?impageName=lineChart"+staticsyear+".jpg&mm=" + Math.random()*100;
		// 获取当前日期
		Integer currentYear = getDQYear();

		// 获取前十年的年份
		if (yearList == null) {
			yearList = getYearList(currentYear);
		}

		// 前几年时候的会议室利用情况
		staBNInfos = statisticsYuyueService.getStaBN(staticsyear);

		// 当前年的会议室利用情况
		staShows = statisticsYuyueService.getStaCData(staticsyear);

		// 前几年的年数。
		stabyc = statisticsYuyueService.BYCount(staticsyear).size();

		// 前几年的年份和利用率年份名称
		stafdis = statisticsYuyueService.getField(staticsyear);

		// 当前年的月份字段名称
		sdf = statisticsYuyueService.fieldSel();

		// 当前年的利用率月份名称
		sdfLV = statisticsYuyueService.fieldLVSel();

		// 当前年的显示次数的月份数
		csc = sdf.size() - 1;

		// 当前年的显示利用率的月份数
		lyvc = sdfLV.size() - 1;

		// 统计年数
		beNyear = CommonConstants.STA_BY_YEARCOUNT;

		//生成统计视图
        getPieChart(staShows);
        getZChart(staShows);
        getXChart(staShows);	
		return SUCCESS;
	}
	
	/**
	 * 当年统计饼状视图
	 */
	public void getPieChart(List<StaShow> staShowsPie){
		
		//准备数据
		DefaultPieDataset dpd = new DefaultPieDataset();
		StaShow staInfo = null;
		String fieldName = null;
		String hysName = null;
		StaCData stacdData = null;
		Long stavalue = null;
		List<StaCData> stacdList = null;
		for (Iterator<StaShow> itersta = staShowsPie.iterator(); itersta.hasNext();) {
			staInfo = itersta.next();
			hysName = staInfo.getHysMc();
			stacdList = staInfo.getSdlist();
			for (Iterator<StaCData> iterstacd = stacdList.iterator(); iterstacd
					.hasNext();) {
				stacdData = iterstacd.next();
				fieldName = stacdData.getStaContext();
				stavalue = stacdData.getStaValue();
				if ("staticSum".equals(fieldName) == true) {
					dpd.setValue(hysName, stavalue.intValue());
				}
			}
		}
        
		//生成饼型视图
		JFreeChart chartPie = ChartFactory.createPieChart("Meeting peoples", dpd, true,
				true, false);
		
		//设置视图标题字体
        String titleString = staticsyear + "年会议室利用情况视图";       
        chartPie.getRenderingHints().put(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);
        chartPie.setTextAntiAlias(false);
        // 图片背景色
        chartPie.setBackgroundPaint(Color.white);
        // 设置图标题的字体重新设置title
        TextTitle title = new TextTitle(titleString,new Font(CommonConstants.STA_VEIW_FONT1 , Font.PLAIN, 16));
        chartPie.setTitle(title);     
        //设置视图内容字体
		PiePlot piePlot = (PiePlot) chartPie.getPlot();
		// 指定饼图轮廓线的颜色
		piePlot.setBaseSectionOutlinePaint(Color.BLACK);
		piePlot.setBaseSectionPaint(Color.BLACK);
		// 设置无数据时的信息
		piePlot.setNoDataMessage("无对应的数据，请重新查询。");
		// 设置无数据时的信息显示颜色
		piePlot.setNoDataMessagePaint(Color.red);
		// 图片中显示百分比:自定义方式，{0} 表示选项， {1} 表示数值， {2} 表示所占比例 ,小数点后两位
		piePlot.setLabelGenerator(new StandardPieSectionLabelGenerator(
		        "{0}={1}({2})", NumberFormat.getNumberInstance(),
		        new DecimalFormat("0.00%")));
		// 图例显示百分比:自定义方式， {0} 表示选项， {1} 表示数值， {2} 表示所占比例
		piePlot.setLegendLabelGenerator(new StandardPieSectionLabelGenerator(
		        "{0}={1}({2})"));
		piePlot.setLabelFont(new Font("SansSerif", Font.TRUETYPE_FONT, 14));
		// 指定图片的透明度(0.0-1.0)
		piePlot.setForegroundAlpha(0.65f);
		// 设置第一个 饼块section 的开始位置，默认是12点钟方向
		piePlot.setStartAngle(45);
		//设置背景颜色		
		piePlot.setBackgroundPaint(new Color(255, 255, 204));
		//设置视图legend字体
		chartPie.getLegend().setItemFont(new Font(CommonConstants.STA_VEIW_FONT, Font.PLAIN, 16));
				
		try{                                           
			OutputStream fos = new FileOutputStream(dataDir+"/pieChart"+staticsyear+".jpg");
			ChartUtilities.writeChartAsJPEG(fos, 1, chartPie, 800,600,null);
			fos.close();
        }catch(IOException e){
	      
        }	
	}
	
	/**
	 * 当年统计柱状视图
	 */
	public void getZChart(List<StaShow> staShowsd2){
		
		//准备数据
	    DefaultCategoryDataset dpd = new DefaultCategoryDataset();
		StaShow staInfo = null;
		String fieldName = null;
		String hysName = null;
		StaCData stacdData = null;
		Long stavalue = null;
		List<StaCData> stacdList = null;
		for (Iterator<StaShow> itersta = staShowsd2.iterator(); itersta.hasNext();) {
			staInfo = itersta.next();
			hysName = staInfo.getHysMc();
			stacdList = staInfo.getSdlist();
			for (Iterator<StaCData> iterstacd = stacdList.iterator(); iterstacd
					.hasNext();) {
				stacdData = iterstacd.next();
				fieldName = stacdData.getStaContext();
				stavalue = stacdData.getStaValue();
				if ("staticSum".equals(fieldName) == true) {
				  dpd.setValue(stavalue.intValue() ,"" ,hysName );
				}
			}
		}
		
		Font labelFont = new Font(CommonConstants.STA_VEIW_FONT1 , Font.PLAIN, 14);
		//生成柱状视图
		JFreeChart chartCategory = ChartFactory.createBarChart("当年统计柱状视图","会议室名称","利用次数", dpd ,PlotOrientation.VERTICAL ,false,
				false, false);
        String titleString = staticsyear + "年会议室利用情况视图";
        chartCategory.setTitle(new TextTitle(titleString, new Font(CommonConstants.STA_VEIW_FONT1 , Font.PLAIN, 16)));
            
        /*
        * VALUE_TEXT_ANTIALIAS_OFF表示将文字的抗锯齿关闭,
        * 使用的关闭抗锯齿后，字体尽量选择12到14号的宋体字,这样文字最清晰好看
        */
        chartCategory.getRenderingHints().put(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);
        chartCategory.setTextAntiAlias(false);
        chartCategory.setBackgroundPaint(Color.white);

		CategoryPlot categoryPlot = (CategoryPlot) chartCategory.getPlot();
		
		// 设置横虚线可见
		categoryPlot.setRangeGridlinesVisible(true);
		// 虚线色彩
		categoryPlot.setRangeGridlinePaint(Color.gray);
		
		categoryPlot.setBackgroundPaint(new Color(255, 255, 204));

		BarRenderer renderer = new BarRenderer();
		// 设置柱子宽度
		renderer.setMaximumBarWidth(0.05);
		// 设置柱子高度
		renderer.setMinimumBarLength(0.2);
		// 设置柱子边框颜色
		renderer.setBaseOutlinePaint(Color.BLACK);
		// 设置柱子边框可见
		renderer.setDrawBarOutline(true);

		// 设置柱的颜色
		renderer.setSeriesPaint(0, new Color(204, 255, 255));
		renderer.setSeriesPaint(1, new Color(153, 204, 255));
		renderer.setSeriesPaint(2, new Color(51, 204, 204));

		// 平行柱的之间距离
		renderer.setItemMargin(0.0);

		// 显示每个柱的数值，并修改该数值的字体属性
		renderer.setIncludeBaseInRange(true);
		renderer.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());
		renderer.setBaseItemLabelsVisible(true);

		categoryPlot.setRenderer(renderer);
		// 设置柱的透明度
		categoryPlot.setForegroundAlpha(1.0f);
		CategoryAxis domainAxis = categoryPlot.getDomainAxis();		

		domainAxis.setLabelFont(new Font(CommonConstants.STA_VEIW_FONT1 , Font.PLAIN, 16));// 轴标题
		domainAxis.setTickLabelFont(labelFont);// 轴数值
		
		// Lable（Math.PI/3.0）度倾斜
		domainAxis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 3.0));

		domainAxis.setMaximumCategoryLabelWidthRatio(0.6f);// 横轴上的 Lable 是否完整显示
		// 设置距离图片左端距离
		domainAxis.setLowerMargin(0.1);
		// 设置距离图片右端距离
		domainAxis.setUpperMargin(0.1);
		
		categoryPlot.setDomainAxis(domainAxis);
			
	    NumberAxis numberaxis = (NumberAxis)categoryPlot.getRangeAxis();
	    
	    /*------设置Y轴的标题文字------------*/
	    
	    numberaxis.setTickLabelFont(new Font(CommonConstants.STA_VEIW_FONT2 , Font.PLAIN, 11));	    
	    /*------这句代码解决了底部汉字乱码的问题-----------*/
	    numberaxis.setLabelFont(new Font(CommonConstants.STA_VEIW_FONT1 , Font.PLAIN, 16)); 

	    // 数据轴精度
		DecimalFormat df = new DecimalFormat("#0.00");
		numberaxis.setNumberFormatOverride(df); // 数据轴数据标签的显示格式
		
        try{
			FileOutputStream fos = new FileOutputStream(dataDir+"/zChart"+staticsyear+".jpg");
			ChartUtilities.writeChartAsJPEG(fos, 1, chartCategory, 800,600,null);
			fos.close();
        }catch(IOException e){
	      
        }	
	}
	
	/**
	 * 当年统计线状视图
	 */
	public void getXChart(List<StaShow> staShowsd3){
		
		//准备数据
		DefaultCategoryDataset dpd = new DefaultCategoryDataset();
		StaShow staInfo = null;
		String fieldName = null;
		String hysName = null;
		StaCData stacdData = null;
		Long stavalue = null;
		List<StaCData> stacdList = null;
		for (Iterator<StaShow> itersta = staShowsd3.iterator(); itersta.hasNext();) {
			staInfo = itersta.next();
			hysName = staInfo.getHysMc();
			stacdList = staInfo.getSdlist();
			for (Iterator<StaCData> iterstacd = stacdList.iterator(); iterstacd
					.hasNext();) {
				stacdData = iterstacd.next();
				fieldName = stacdData.getStaContext();
				stavalue = stacdData.getStaValue();
				if ("staticSum".equals(fieldName) == true) {
				  dpd.setValue(stavalue.intValue() ,"" ,hysName );
				}
			}
		}
		//生成线状视图
		JFreeChart chartLineCategory = ChartFactory.createLineChart("当年统计柱状视图","会议室名称","利用次数", dpd ,PlotOrientation.VERTICAL ,false,
				false, false);
        String titleString = staticsyear + "年会议室利用情况视图";
        chartLineCategory.setTitle(new TextTitle(titleString, new Font(CommonConstants.STA_VEIW_FONT1 , Font.PLAIN, 16)));
        
        /*
         * VALUE_TEXT_ANTIALIAS_OFF表示将文字的抗锯齿关闭,
         * 使用的关闭抗锯齿后，字体尽量选择12到14号的宋体字,这样文字最清晰好看
         */
        chartLineCategory.getRenderingHints().put(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);
        chartLineCategory.setTextAntiAlias(false);
        chartLineCategory.setBackgroundPaint(Color.white);
        
		CategoryPlot categoryPlot = (CategoryPlot) chartLineCategory.getPlot();
		
		// 设置横虚线可见
		categoryPlot.setRangeGridlinesVisible(true);
		// 虚线色彩
		categoryPlot.setRangeGridlinePaint(Color.gray);
		
		categoryPlot.setBackgroundPaint(new Color(255, 255, 204));
			
		CategoryAxis domainAxis = categoryPlot.getDomainAxis();		
		
		domainAxis.setTickLabelFont(new Font(CommonConstants.STA_VEIW_FONT2,Font.PLAIN , 14));		
		
		domainAxis.setLabelFont(new Font(CommonConstants.STA_VEIW_FONT1 , Font.PLAIN, 16));
		
		// Lable（Math.PI/3.0）度倾斜
		domainAxis.setCategoryLabelPositions(CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 3.0));
		
	    NumberAxis numberaxis = (NumberAxis)categoryPlot.getRangeAxis();	    
	    /*------设置Y轴的标题文字------------*/
	    numberaxis.setTickLabelFont(new Font(CommonConstants.STA_VEIW_FONT2, Font.PLAIN , 11));	    
	    /*------这句代码解决了底部汉字乱码的问题-----------*/
	    numberaxis.setLabelFont(new Font(CommonConstants.STA_VEIW_FONT1 , Font.PLAIN, 16)); 
	    
	    // 数据轴精度		
		// numberaxis.setAutoRangeIncludesZero(true);
		DecimalFormat df = new DecimalFormat("#0.00");
		numberaxis.setNumberFormatOverride(df); // 数据轴数据标签的显示格式
		
	    try{
			FileOutputStream fos = new FileOutputStream(dataDir+"/lineChart"+staticsyear+".jpg");
			ChartUtilities.writeChartAsJPEG(fos, 1, chartLineCategory, 800,600,null);
			fos.close();
        }catch(IOException e){	      
        }	
	}
	/**
	 * 输入校验
	 */
	@Override
	public void validate() {

		Integer currentYear = getDQYear();

		// 首次进入本画面时staticsyear的初始化
		if (staticsyear == null) {
			staticsyear = currentYear;
		}
		List<Integer> yearListj = getYearList(currentYear);
		Integer maxYear = yearListj.get(0);
		Integer minYear = yearListj.get(CommonConstants.STA_YEARCOUNT - 1);
		if (staticsyear.compareTo(minYear) == -1
				|| staticsyear.compareTo(maxYear) == 1) {
			this.addFieldError("staticsyear", "所选年份不合法");
		}

	}

	/**
	 * 获得列表框的年份列表.
	 * 
	 * @return List<Integer> 列表框的年份列表。
	 */
	public List<Integer> getYearList(Integer currentYear) {
		List<Integer> yearListj = new ArrayList<Integer>();
		yearListj.add(currentYear);
		Integer beforeYear = null;
		for (int i = 0; i < CommonConstants.STA_YEARCOUNT - 1; i++) {
			beforeYear = currentYear - (i + 1);
			yearListj.add(beforeYear);
		}
		return yearListj;
	}

	/**
	 * 获得当前年.
	 * 
	 * @return Integer 获得当前年份。
	 */
	public Integer getDQYear() {
		// 获取当前日期
		Date nowDate = new Date();
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(nowDate);
		Integer currentYearj = calendar.get(Calendar.YEAR);
		return currentYearj;
	}

	public StatisticsYuyueService getStatisticsYuyueService() {
		return statisticsYuyueService;
	}

	public void setStatisticsYuyueService(
			StatisticsYuyueService statisticsYuyueService) {
		this.statisticsYuyueService = statisticsYuyueService;
	}

	public Integer getStaticsyear() {
		return staticsyear;
	}

	public void setStaticsyear(Integer staticsyear) {
		this.staticsyear = staticsyear;
	}

	

	public List<StaShow> getStaShows() {
		return staShows;
	}

	public void setStaShows(List<StaShow> staShows) {
		this.staShows = staShows;
	}

	public List<StaFieldInfo> getSdf() {
		return sdf;
	}

	public List<StaFieldInfo> getSdfLV() {
		return sdfLV;
	}

	public Integer getCsc() {
		return csc;
	}

	public Integer getLyvc() {
		return lyvc;
	}

	public List<Integer> getYearList() {
		return yearList;
	}

	public List<StaBYShow> getStaBNInfos() {
		return staBNInfos;
	}

	public Integer getStabyc() {
		return stabyc;
	}

	public List<StaFieldInfo> getStafdis() {
		return stafdis;
	}

	public Integer getBeNyear() {
		return beNyear;
	}

	

	public String getViewType() {
		return viewType;
	}

	public void setViewType(String viewType) {
		this.viewType = viewType;
	}

	public String getViewEnum1() {
		return viewEnum1;
	}

	public void setViewEnum1(String viewEnum1) {
		this.viewEnum1 = viewEnum1;
	}

	public String getViewEnum2() {
		return viewEnum2;
	}

	public void setViewEnum2(String viewEnum2) {
		this.viewEnum2 = viewEnum2;
	}

	public String getViewEnum3() {
		return viewEnum3;
	}

	public void setViewEnum3(String viewEnum3) {
		this.viewEnum3 = viewEnum3;
	}

	public String getViewEnum4() {
		return viewEnum4;
	}

	public void setViewEnum4(String viewEnum4) {
		this.viewEnum4 = viewEnum4;
	}

	public String getViewEnum5() {
		return viewEnum5;
	}

	public void setViewEnum5(String viewEnum5) {
		this.viewEnum5 = viewEnum5;
	}

	public String getViewEnum6() {
		return viewEnum6;
	}

	public void setViewEnum6(String viewEnum6) {
		this.viewEnum6 = viewEnum6;
	}

	public String getYyDate() {
		return yyDate;
	}

	public void setYyDate(String yyDate) {
		this.yyDate = yyDate;
	}

	public String getPieImagepath() {
		return pieImagepath;
	}

	public void setPieImagepath(String pieImagepath) {
		this.pieImagepath = pieImagepath;
	}

	public String getZImagepath() {
		return zImagepath;
	}

	public void setZImagepath(String imagepath) {
		zImagepath = imagepath;
	}

	public String getXImagepath() {
		return xImagepath;
	}

	public void setXImagepath(String imagepath) {
		xImagepath = imagepath;
	}

	public String getDataDir() {
		return dataDir;
	}

	public void setDataDir(String dataDir) {
		this.dataDir = dataDir;
	}
}
