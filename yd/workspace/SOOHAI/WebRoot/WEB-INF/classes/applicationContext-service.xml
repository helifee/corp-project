<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	 http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

	<!-- 所有Bean共享一个代理基类 -->
	<bean id="transactionBase" 
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" 
		abstract="true" lazy-init="true">
		<property name="transactionManager">
			<ref bean="transactionManager"/>
		</property>
		<!-- 配置事务属性 -->
		<property name="transactionAttributes">
			<props>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="delete*">PROPAGATION_REQUIRED</prop>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>
	<!-- ServiceTarget配置 -->
	<bean id="loginServiceTarget" 
		class="com.soohai.www.service.impl.LoginServiceImpl">
		<property name="loginDao">
			<ref bean="loginDao"/>
		</property>
	</bean>
	<bean id="citysearchServiceTarget" 
		class="com.soohai.www.service.impl.CitysearchServiceImpl">
		<property name="citysearchDao">
			<ref bean="citysearchDao"/>
		</property>
		
	</bean>
	<bean id="buildinglistServiceTarget" 
		class="com.soohai.www.service.impl.BuildinglistServiceImpl">
		<property name="buildinglistDao">
			<ref bean="buildinglistDao"/>
		</property>
	</bean>
	
	<bean id="buildedServiceTarget" 
		class="com.soohai.www.service.impl.BuildedServiceImpl">
		<property name="buildedDao">
			<ref bean="buildedDao"/>
		</property>
	</bean>

	<bean id="buildingDetailServiceTarget" 
		class="com.soohai.www.service.impl.BuildingDetailServiceImpl">
		<property name="buildingDetailDao">
			<ref bean="buildingDetailDao"/>
		</property>
	</bean>
	<bean id="newBuildingServiceTarget" 
		class="com.soohai.www.service.impl.NewBuildingServiceImpl">
		<property name="newBuildingDao">
			<ref bean="newBuildingDao"/>
		</property>
	</bean>

	<bean id="loginService" parent="transactionBase">
		<property name="target">
			<ref bean="loginServiceTarget"/>
		</property>
	</bean>

	<bean id="buildedService" parent="transactionBase">
		<property name="target">
			<ref bean="buildedServiceTarget"/>
		</property>
	</bean>

	<bean id="buildinglistService" parent="transactionBase">
		<property name="target">
			<ref bean="buildinglistServiceTarget"/>
		</property>
	</bean>
	<bean id="citysearchService" parent="transactionBase">
		<property name="target">
			<ref bean="citysearchServiceTarget"/>
		</property>
	</bean>

	<bean id="buildingDetailService" parent="transactionBase">
		<property name="target">
			<ref bean="buildingDetailServiceTarget"/>
		</property>
	</bean>
	<bean id="newBuildingService" parent="transactionBase">
		<property name="target">
			<ref bean="newBuildingServiceTarget"/>
		</property>
	</bean>
	

	<!--scope="prototype" 会在该类型的对象被请求时创建一个新的action对象。
		如果没有配置scope=prototype则添加的时候不会新建一个action，仍然会保留上次访问的过记录的信息。 
        如果scope=prototype，每次从spring容器中获取bookAction的实例的时候就会new一个新对象，
		即我们所说的原型，spring中scope默认的是单态（singleton），针对web应用程序，还可以配置为request、session等范围。
		至于什么时候使用什么权限范围就要看应用程序的使用了-->
	<!-- Action配置 -->
	<bean id="loginAction" scope="prototype" 
		class="com.soohai.www.action.LoginAction">
		<property name="loginService">
			<ref bean="loginService"/>
		</property>
	</bean>
	<bean id="buildingDetailAction" scope="prototype" 
		class="com.soohai.www.action.BuildingDetailAction">
		<property name="buildingDetailService">
			<ref bean="buildingDetailService" />
		</property>
	</bean>
	<bean id="newBuildingAction" scope="prototype" 
		class="com.soohai.www.action.NewBuildingAction">
		<property name="newBuildingService">
			<ref bean="newBuildingService" />
		</property>
	</bean>
	<bean id="AuthInterceptor" scope="prototype" 
		class="com.soohai.www.interceptor.AuthInterceptor">
	</bean>
	<bean id="reloginAction" scope="prototype" 
		class="com.soohai.www.action.LoginAction">
	</bean>
	<bean id="logoutAction" scope="prototype" 
		class="com.soohai.www.action.LoginAction">
	</bean>

	<bean id="buildeditAction" scope="prototype" 
		class="com.soohai.www.action.BuildeditAction">
		<property name="buildedService">
			<ref bean="buildedService"></ref>
		</property>
	</bean>
	<bean id="buildedylAction" scope="prototype" 
		class="com.soohai.www.action.BuildedylAction">
		<property name="buildedService">
			<ref bean="buildedService"></ref>
		</property>
	</bean>
	
	<bean id="buildinglistAction" scope="prototype" 
		class="com.soohai.www.action.BuildinglistAction">
		<property name="buildinglistService">
			<ref bean="buildinglistService"/>
		</property>
	</bean>
	<bean id="citysearchAction" scope="prototype" 
		class="com.soohai.www.action.CitysearchAction">
		<property name="citysearchService">
			<ref bean="citysearchService"/>
		</property>
	</bean>

</beans>