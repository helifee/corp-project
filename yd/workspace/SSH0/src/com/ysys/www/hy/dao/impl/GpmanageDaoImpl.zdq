/*
 * Copyright (c) 2009-2010 by DaLian YuDong Computer System CO.,LTD
 * All rights reserved.
 *      Project: SSH
 *    SubSystem: 会议室管理子系统
 */

package com.ysys.www.hy.dao.impl;

import java.util.Date;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import com.ysys.www.hy.dao.GpmanageDao;
import com.ysys.www.hy.dao.condition.TabZbcyyl;
import com.ysys.www.hy.dao.condition.TabZbyl;
import com.ysys.www.hy.dao.condition.Tempinfo;
import com.ysys.www.hy.dao.condition.Tprjmgrs;
import com.ysys.www.hy.service.common.CommonConstants;

/**
 *  @see com.ysys.www.hy.dao.GpmanageDao
 */
public class GpmanageDaoImpl extends HibernateDaoSupport implements GpmanageDao {
	private static final Log log = LogFactory.getLog(GpmanageDaoImpl.class);

	 /**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	public List getzbyl(String jlzid, String administratorid, Boolean shuxingflg) {
		log.debug("Init");
		try {
			String queryString = "";
			StringBuffer sb = new StringBuffer();
			sb.append("select zbyl.id, zbyl.zzwmc, zbyl.zbqf, ti.id, ti.empName ");
			sb.append(" from TabZbyl zbyl,TabZbcyyl zbcyyl, Tempinfo ti  ");
			sb.append(" where zbyl.id = zbcyyl.id.zbid");
			sb.append(" and zbcyyl.id.zcyid = ti.id");
			if (!CommonConstants.ADMINISTRATOR.equals(administratorid)) {
				if (shuxingflg){
					// 取得自己建的组，公开的组合组内公开的组
					sb.append(" and ((zbyl.jlzid=:jlzid)");
					sb.append(" or (zbyl.zbqf=:sharegroup");
					sb.append(" and zbyl.id in (select zbcyyl2.id.zbid ");
					sb.append(" from TabZbcyyl zbcyyl2 ");
					sb.append(" where zbcyyl2.id.zcyid =:jlzid))");
					sb.append(" or zbyl.zbqf=:publicgroup) ");
					sb.append(" order by zbyl.zzwmc");
					queryString =  sb.toString();
					String[] params = { "jlzid", "sharegroup", "jlzid", "publicgroup"};
					Object[] args = { jlzid, CommonConstants.SHARE_GROUP, jlzid, CommonConstants.PUBLIC_GROUP};

					return this.getHibernateTemplate().findByNamedParam(queryString,
							params, args);
				} else {
					// 自己建的组
					sb.append(" and zbyl.jlzid=:jlzid");
					sb.append(" order by zbyl.zzwmc");
					queryString =  sb.toString();
					String[] params = { "jlzid"};
					Object[] args = { jlzid};
					return this.getHibernateTemplate().findByNamedParam(queryString,
							params, args);
				}
			}else{
				sb.append(" order by zbyl.zzwmc");
				queryString =  sb.toString();
				return getHibernateTemplate().find(queryString);
			}
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}

	 /**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	public List getpjzu(String jlzid, Date nownyr, String administratorid) {
		log.debug("Init");
		try {
			String queryString = "";
			StringBuffer sb = new StringBuffer();
			if (CommonConstants.ADMINISTRATOR.equals(administratorid)) {
				// 开始时间小于等于当前时间，结束时间大于等于现在时间的组
				sb.append(" select distinct tm.id, tm.prjCname, ti.id, ti.empName");
				sb.append(" from Tprjjion tj,Tprjmgrs tm, Tempinfo ti ");
				sb.append(" where tj.id.prjId = tm.id");
				sb.append(" and tj.id.prjEmpid = ti.id");
				sb.append(" and tm.prjTbdate <= :nownyr ");
				sb.append(" and  (tm.prjTedate >= :nownyr or ");
				sb.append(" tm.prjTedate = '").append(CommonConstants.ENDNULL).append("')");
				sb.append(" order by tm.id");
				queryString = sb.toString();
				String[] params = { "nownyr"};
				Object[] args = { nownyr};

				return this.getHibernateTemplate().findByNamedParam(queryString,
						params, args);
			} else {
				// 登录者本人所在的，开始时间小于等于当前时间，结束时间大于等于现在时间的组
				sb.append(" select distinct tm.id, tm.prjCname, ti.id, ti.empName");
				sb.append(" from Tprjjion tj,Tprjmgrs tm, Tempinfo ti ");
				sb.append(" where tj.id.prjId = tm.id");
				sb.append(" and tj.id.prjEmpid = ti.id");
				sb.append(" and tm.prjTbdate <= :nownyr ");
				sb.append(" and  (tm.prjTedate >= :nownyr or ");
				sb.append(" tm.prjTedate = '").append(CommonConstants.ENDNULL).append("')");
				sb.append(" and tj.id.prjId in(");
				sb.append(" select tjj.id.prjId");
				sb.append(" from Tprjjion tjj ");
				sb.append(" where tjj.id.prjEmpid =:jlzid)");
				sb.append(" order by tm.id, ti.id");
				queryString = sb.toString();
				String[] params = { "nownyr", "jlzid"};
				Object[] args = { nownyr, jlzid};

				return this.getHibernateTemplate().findByNamedParam(queryString,
						params, args);
				
			}
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}

	 /**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	public List<Tempinfo> getqunyuan() {
		log.debug("Init");
		try {
			String queryString = "";
			StringBuffer sb = new StringBuffer();
			sb.append(" from Tempinfo ti where ti.empFlag =0 ");
			sb.append("and ti.id != '").append(CommonConstants.ADMINISTRATORID).append("')");
			sb.append(" order by ti.id");
			queryString = sb.toString();
			return getHibernateTemplate().find(queryString);
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}

	 /**
	 * {@inheritDoc}
	 */
	public TabZbyl findById(String zbid) {
		log.debug("getting TabZbyl instance with zbid: " + zbid);
		try {
			TabZbyl instance = (TabZbyl) getHibernateTemplate().get(
					"com.ysys.www.hy.dao.condition.TabZbyl",
					Integer.parseInt(zbid));
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	 /**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	public List findZcyById(String zbid) {
		log.debug("getting TabZbyl instance with zbid: " + zbid);
		try {

			String queryString = " from TabZbcyyl tz" + " where tz.id.zbid = '"
					+ zbid + "'";
			return getHibernateTemplate().find(queryString);
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}
	
	 /**
	 * {@inheritDoc}
	 */
	public String getname(String empid) {
		log.debug("getting Tempinfo instance with empid: " + empid);
		try {
			String queryString = " select ti.empName from Tempinfo ti where ti.id = '"+ empid +"'";
			return (String) getHibernateTemplate().find(queryString).get(0);
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	 /**
	 * {@inheritDoc}
	 */
	public void deleteZbyl(TabZbyl persistentInstance) {
		log.debug("deleteing Zbyl instance");
		try {
			getHibernateTemplate().delete(persistentInstance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}
	
	 /**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	public void deleteZbcyyl(List tabzbcyyl) {
		log.debug("deleteing Zbcyyl instance");
		try {
			getHibernateTemplate().deleteAll(tabzbcyyl);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}

	 /**
	 * {@inheritDoc}
	 */
	public void saveZbylData(TabZbyl zbyl) {
		log.debug("save zbyl");
		try {
			this.getHibernateTemplate().save(zbyl);
		} catch (RuntimeException re) {
			log.error("save failed", re);
			throw re;
		}
	}

	 /**
	 * {@inheritDoc}
	 */
	public void saveZbcyylData(TabZbcyyl zbcyyl) {
		log.debug("save zbyl");
		try {
			this.getHibernateTemplate().save(zbcyyl);
		} catch (RuntimeException re) {
			log.error("save failed", re);
			throw re;
		}
	}

	 /**
	 * {@inheritDoc}
	 */
	public Integer getMaxzbid() {
		log.debug("GetMax");
		try {
			String queryString = " select max(id) from TabZbyl ";
			return (Integer) getHibernateTemplate().find(queryString).get(0);
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}
	
	 /**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	public List<TabZbyl> getzbname() {
		log.debug("Getzbname");
		try {
			String queryString = " from TabZbyl ";
			return getHibernateTemplate().find(queryString);
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}
	
	 /**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	public List<Tprjmgrs> getrjname() {
		log.debug("Getzbname");
		try {
			String queryString = " from Tprjmgrs ";
			return getHibernateTemplate().find(queryString);
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}
	
	

}
