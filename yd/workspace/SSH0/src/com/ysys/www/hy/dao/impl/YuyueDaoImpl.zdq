/*
 * Copyright (c) 2009-2010 by DaLian YuDong Computer System CO.,LTD
 * All rights reserved.
 *      Project: SSH
 *    SubSystem: 会议室管理子系统
 */
package com.ysys.www.hy.dao.impl;

import java.util.Date;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import com.ysys.www.hy.dao.YuyueDao;
import com.ysys.www.hy.dao.condition.TabHysyl;
import com.ysys.www.hy.dao.condition.TabMrhycjz;
import com.ysys.www.hy.dao.condition.TabMrhyyl;
import com.ysys.www.hy.dao.condition.TabZqhcjz;
import com.ysys.www.hy.dao.condition.TabZqhyyl;

/**
 * @see com.ysys.www.hy.dao.YuyueDao
 */
public class YuyueDaoImpl extends HibernateDaoSupport implements YuyueDao {

	private static final Log log = LogFactory.getLog(YuyueDaoImpl.class);

	 /**
	 * {@inheritDoc}
	 */
	public void saveData(TabMrhyyl mrhyyl) {
		log.debug("save mrhyyl");
		try {
			this.getHibernateTemplate().save(mrhyyl);
		} catch (RuntimeException re) {
			log.error("save failed", re);
			throw re;
		}
	}

	 /**
	 * {@inheritDoc}
	 */
	public void saveData(TabMrhycjz mrhycjz) {
		log.debug("save mrhyylcjz");
		try {
			this.getHibernateTemplate().save(mrhycjz);
		} catch (RuntimeException re) {
			log.error("save failed", re);
			throw re;
		}
	}

	 /**
	 * {@inheritDoc}
	 */
	public void saveData(TabZqhyyl zqhyyl) {
		log.debug("save zqhyyl");
		try {
			this.getHibernateTemplate().save(zqhyyl);
		} catch (RuntimeException re) {
			log.error("save failed", re);
			throw re;
		}
	}

	 /**
	 * {@inheritDoc}
	 */
	public void saveData(TabZqhcjz zqhcjz) {
		log.debug("save zqhyyl");
		try {
			this.getHibernateTemplate().save(zqhcjz);
		} catch (RuntimeException re) {
			log.error("save failed", re);
			throw re;
		}
	}

	 /**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	public List<TabHysyl> getHysAll() {
		log.debug("select id name");
		try {
			String queryString = "from TabHysyl order by sortid";
			return getHibernateTemplate().find(queryString);
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}

	 /**
	 * {@inheritDoc}
	 */
	public long getMrhyylNumber(int hysid, Date start_date, Date start_time,
			Date end_time) {

		log.debug("find Mrhyyl crash yuyue number!");
		try {
			String hql = "select count(*) from TabMrhyyl as t where t.id.hysid = :hysid and t.id.hyrq = :start_date "
					+ "and ((:start_time < t.id.hykssj and :end_time > t.id.hykssj) "
					+ "or (:start_time > t.id.hykssj and :start_time < t.hyjssj) "
					+ "or (:start_time = t.id.hykssj))";

			String[] params = { "hysid", "start_date", "start_time", "end_time" };

			Object[] args = { hysid, start_date, start_time, end_time };
			
			return (Long) this.getHibernateTemplate().findByNamedParam(hql,
					params, args).get(0);

		} catch (RuntimeException re) {
			log.error("find Mrhyyl crash yuyue number failed!");
			throw re;
		}
	}

	 /**
	 * {@inheritDoc}
	 */
	public long getMrhyylNumber(int hysid, Date start_date, Date start_time,
			Date end_time, TabMrhyyl mrhyyl_old) {

		log.debug("find Mrhyyl crash yuyue number!");
		try {

			int hysid_old = mrhyyl_old.getId().getHysid();
			Date start_date_old = mrhyyl_old.getId().getHyrq();
			Date start_time_old = mrhyyl_old.getId().getHykssj();

			String hql = "select count(*) from TabMrhyyl as t where t.id.hysid = :hysid and t.id.hyrq = :start_date "
					+ "and ((:start_time < t.id.hykssj and :end_time > t.id.hykssj) "
					+ "or (:start_time > t.id.hykssj and :start_time < t.hyjssj) "
					+ "or (:start_time = t.id.hykssj)) "
					+ "and ((t.id.hysid != :hysid_old) or (t.id.hyrq != :start_date_old) or (t.id.hykssj != :start_time_old))";

			String[] params = { "hysid", "start_date", "start_time",
					"end_time", "hysid_old", "start_date_old", "start_time_old" };

			Object[] args = { hysid, start_date, start_time, end_time,
					hysid_old, start_date_old, start_time_old };
			
			return (Long) this.getHibernateTemplate().findByNamedParam(hql,
					params, args).get(0);

		} catch (RuntimeException re) {
			log.error("find Mrhyyl crash yuyue number failed!");
			throw re;
		}
	}

	 /**
	 * {@inheritDoc}
	 */
	public long getMrhyylNumber(int hysid, Date start_date, Date end_date,
			Date start_time, Date end_time) {

		log.debug("find Mrhyyl crash yuyue number!");
		try {
			String hql = "select count(*) from TabMrhyyl as t where t.id.hysid = :hysid "
					+ "and (t.id.hyrq between :start_date and :end_date) "
					+ "and ((:start_time < t.id.hykssj and :end_time > t.id.hykssj) "
					+ "or (:start_time > t.id.hykssj and :start_time < t.hyjssj) "
					+ "or (:start_time = t.id.hykssj))";

			String[] params = { "hysid", "start_date", "end_date",
					"start_time", "end_time" };

			Object[] args = { hysid, start_date, end_date, start_time, end_time };
			
			return (Long) this.getHibernateTemplate().findByNamedParam(hql,
					params, args).get(0);

		} catch (RuntimeException re) {
			log.error("find Mrhyyl crash yuyue number failed!");
			throw re;
		}
	}
	
	 /**
	 * {@inheritDoc}
	 */
	public long getMrhyylNumber(int hysid, Date start_date, Date end_date,
			Date start_time, Date end_time, int zqhyid) {

		log.debug("find Mrhyyl crash yuyue number!");
		try {
			String hql = "select count(*) from TabMrhyyl as t where t.id.hysid = :hysid "
					+ "and (t.id.hyrq between :start_date and :end_date) "
					+ "and ((:start_time < t.id.hykssj and :end_time > t.id.hykssj) "
					+ "or (:start_time > t.id.hykssj and :start_time < t.hyjssj) "
					+ "or (:start_time = t.id.hykssj))"
					+ "and t.zqhyid != :zqhyid";

			String[] params = { "hysid", "start_date", "end_date",
					"start_time", "end_time", "zqhyid" };

			Object[] args = { hysid, start_date, end_date, start_time, end_time, zqhyid };
			
			return (Long) this.getHibernateTemplate().findByNamedParam(hql,
					params, args).get(0);

		} catch (RuntimeException re) {
			log.error("find Mrhyyl crash yuyue number failed!");
			throw re;
		}
	}

	 /**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	public List<Date> getMrhyyl(int hysid, Date start_date, Date end_date,
			Date start_time, Date end_time) {

		log.debug("find Mrhyyl crash yuyue number!");
		try {
			String hql = "select t.id.hyrq from TabMrhyyl as t where t.id.hysid = :hysid "
					+ "and (t.id.hyrq between :start_date and :end_date) "
					+ "and ((:start_time < t.id.hykssj and :end_time > t.id.hykssj) "
					+ "or (:start_time > t.id.hykssj and :start_time < t.hyjssj) "
					+ "or (:start_time = t.id.hykssj))";

			String[] params = { "hysid", "start_date", "end_date",
					"start_time", "end_time" };

			Object[] args = { hysid, start_date, end_date, start_time, end_time };
			
			return this.getHibernateTemplate().findByNamedParam(hql, params,
					args);

		} catch (RuntimeException re) {
			log.error("find Mrhyyl crash yuyue number failed!");
			throw re;
		}
	}
	
	 /**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	public List<Date> getMrhyyl(int hysid, Date start_date, Date end_date,
			Date start_time, Date end_time, int zqhyid) {

		log.debug("find Mrhyyl crash yuyue number!");
		try {
			String hql = "select t.id.hyrq from TabMrhyyl as t where t.id.hysid = :hysid "
					+ "and (t.id.hyrq between :start_date and :end_date) "
					+ "and ((:start_time < t.id.hykssj and :end_time > t.id.hykssj) "
					+ "or (:start_time > t.id.hykssj and :start_time < t.hyjssj) "
					+ "or (:start_time = t.id.hykssj))"
					+ "and t.zqhyid != :zqhyid";

			String[] params = { "hysid", "start_date", "end_date",
					"start_time", "end_time", "zqhyid" };

			Object[] args = { hysid, start_date, end_date, start_time, end_time, zqhyid };
			
			return this.getHibernateTemplate().findByNamedParam(hql, params,
					args);

		} catch (RuntimeException re) {
			log.error("find Mrhyyl crash yuyue number failed!");
			throw re;
		}
	}

	 /**
	 * {@inheritDoc}
	 */
	public Integer getZqhyylMax() {
		
		log.debug("get TabZqhyyl Max Data");
		try {
			String queryString = "select max(id.zqhyid) from TabZqhyyl";
			return (Integer) getHibernateTemplate().find(queryString).get(0);
			
		} catch (RuntimeException re) {
			log.error("find all faild", re);
			throw re;
		}
	}

	 /**
	 * {@inheritDoc}
	 */
	public TabMrhyyl getMrhyyl(int hysid, Date start_date, Date start_time) {

		log.debug("select from TabMrhyyl");
		try {
			String hql = "from TabMrhyyl as t where t.id.hysid = :hysid and t.id.hyrq = :start_date "
					+ "and t.id.hykssj = :start_time";

			String[] params = { "hysid", "start_date", "start_time" };

			Object[] args = { hysid, start_date, start_time };
			
			return (TabMrhyyl) getHibernateTemplate().findByNamedParam(hql,
					params, args).get(0);
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}

	}
	
	 /**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	public List<Object[]> getCjrList(int hysid, Date start_date, Date start_time) {

		log.debug("select from TabMrhycjz");
		try {
			String hql = "select s.empName, s.id from Tempinfo as s, TabMrhycjz "
					+ "as t where t.id.hysid = :hysid and t.id.hyrq = :start_date "
					+ "and t.id.hykssj = :start_time and s.id = t.id.cjzid";

			String[] params = { "hysid", "start_date", "start_time" };

			Object[] args = { hysid, start_date, start_time };
			
			return getHibernateTemplate().findByNamedParam(hql, params, args);
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}

	}

	 /**
	 * {@inheritDoc}
	 */
	public String getSqrName(String id) {

		log.debug("select from Tempinfo");
		try {
			String hql = "select t.empName from Tempinfo as t where t.id = '"
					+ id + "'";

			return (String) getHibernateTemplate().find(hql).get(0);
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}

	 /**
	 * {@inheritDoc}
	 */
	public void deleteMrhy(TabMrhyyl mrhyyl, List<TabMrhycjz> mrhycjz_list) {
		log.debug("delete from TabMrhyyl");
		try {
			this.getHibernateTemplate().delete(mrhyyl);
			this.getHibernateTemplate().deleteAll(mrhycjz_list);
			
		} catch (RuntimeException re) {
			log.error("delete error!", re);
			throw re;
		}
	}
	
	 /**
	 * {@inheritDoc}
	 */
	public void deleteMrhy(int zqhyid, Date date, Date time, boolean delToday) {
		
		log.debug("delete from TabMrhyyl");
		try {
			String hql = "";
		
			//删除今天
			if(delToday) {
				hql = "delete from TabMrhyyl as t where t.zqhyid = ?" +
					"and ((t.id.hyrq = ? and t.hyjssj >= ?) or (t.id.hyrq > ?))";
				
				Object[] args = {zqhyid, date, time, date};
				
				this.getHibernateTemplate().bulkUpdate(hql, args);
				
				//不删除今天
			} else {
				hql = "delete from TabMrhyyl as t where t.zqhyid = ? " +
					"and ((t.id.hyrq = ? and t.hyjssj >= ?) or (t.id.hyrq > ?)) " + 
					"and (t.id.hyrq != ?)";
				
				Object[] args = {zqhyid, date, time, date, date};
				
				this.getHibernateTemplate().bulkUpdate(hql, args);
			}
			
		} catch (RuntimeException re) {
			
			log.error("delete error!", re);
			throw re;
		}
	}
	
	 /**
	 * {@inheritDoc}
	 */
	public void deleteMrhycjz() {
		
		log.debug("delete from TabMrhycjz");
		try {
			//删除TabMrhyyl中有而TabMrhycjz中没有的数据 concat(a.id.hysid, a.id.hyrq, a.id.hykssj)
			String hql = "delete from TabMrhycjz a where concat(a.id.hysid, a.id.hyrq, a.id.hykssj)" +
					" not in (select concat(b.id.hysid, b.id.hyrq, b.id.hykssj) from TabMrhyyl b)";
			
			this.getHibernateTemplate().bulkUpdate(hql);
			
		} catch (RuntimeException re) {
			log.error("delete error!", re);
			throw re;
		}
	}
	
	
	 /**
	 * {@inheritDoc}
	 */
	public void deleteZqhyyl(List<TabZqhyyl> zqhyyl_list) {
		log.debug("delete from TabMrhyyl");
		try {
			this.getHibernateTemplate().deleteAll(zqhyyl_list);
		} catch (RuntimeException re) {
			log.error("delete error!", re);
			throw re;
		}
	}
	
	 /**
	 * {@inheritDoc}
	 */
	public void deleteZqhycjz(List<TabZqhcjz> zqhycjz_list) {
		log.debug("delete from TabMrhyyl");
		try {
			this.getHibernateTemplate().deleteAll(zqhycjz_list);
		} catch (RuntimeException re) {
			log.error("delete error!", re);
			throw re;
		}
	}

	 /**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	public List<TabMrhycjz> getMrhycjzList(Date start_date, Date start_time,
			int hysid) {

		log.debug("select from TabMrhyyl");
		try {
			String hql = "from TabMrhycjz as t where t.id.hysid = :hysid and t.id.hyrq "
					+ "= :start_date and t.id.hykssj = :start_time";

			String[] params = { "hysid", "start_date", "start_time" };

			Object[] args = { hysid, start_date, start_time };
			return this.getHibernateTemplate().findByNamedParam(hql, params,
					args);
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}
	
	 /**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	public List<TabZqhyyl> getZqhyList(int id) {

		log.debug("get zqhy by id!");
		try {
			String hql = "from TabZqhyyl as t where t.id.zqhyid = " + id;
			
			return this.getHibernateTemplate().find(hql);
			
		} catch (RuntimeException re) {
			log.error("get zqhy by id failed", re);
			throw re;
		}
	}
	
	 /**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	public List<TabMrhyyl> getMrhyList(int id) {

		log.debug("get mrhy by id!");
		try {
			String hql = "from TabMrhyyl as t where t.zqhyid = " + id;
			
			return this.getHibernateTemplate().find(hql);
			
		} catch (RuntimeException re) {
			log.error("get mrhy by id failed", re);
			throw re;
		}
	}
	
	 /**
	 * {@inheritDoc}
	 */
	public void updateZqhyyl(int id) {

		log.debug("update zqhy by id!");
		try {
			String hql = "update TabZqhyyl as t set t.delflg = 1 where t.id.zqhyid = " + id;
			this.getHibernateTemplate().bulkUpdate(hql);
			
		} catch (RuntimeException re) {
			log.error("get zqhy by id failed", re);
			throw re;
		}
	}
	
	 /**
	 * {@inheritDoc}
	 */
	public void updateZqhyylGgbz(int id) {

		log.debug("update zqhyyl set ggbz by id!");
		try {
			String hql = "update TabZqhyyl as t set t.ggbz = 1 where t.id.zqhyid = " + id;
			this.getHibernateTemplate().bulkUpdate(hql);
			
		} catch (RuntimeException re) {
			log.error("get zqhy by id failed", re);
			throw re;
		}
	}
	
	 /**
	 * {@inheritDoc}
	 */
	public void updateBg(int hysid, Date start_date, Date start_time, String hyjl) {

		log.debug("update mrhyyl set bgbz");
		try {
			String hql = "update TabMrhyyl as t set t.hysbg = ? where t.id.hysid " +
					"= ? and t.id.hyrq = ? and t.id.hykssj = ?";
			
			Object[] args = { hyjl, hysid, start_date, start_time };
			
			this.getHibernateTemplate().bulkUpdate(hql, args);
		} catch (RuntimeException re) {
			log.error("get mrhy by id failed", re);
			throw re;
		}
	}

	 /**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	public List<TabZqhcjz> getZqhycjzList(int id) {

		log.debug("get zqhycjz by id!");
		try {
			String hql = "from TabZqhcjz as t where t.id.zqhyid = " + id;
			return this.getHibernateTemplate().find(hql);
			
		} catch (RuntimeException re) {
			log.error("get zqhycjz by id failed", re);
			throw re;
		}

	}

	 /**
	 * {@inheritDoc}
	 */
	public int getBgbz(int hysid) {

		log.debug("get hybgbz by hysid!");
		try {
			String hql = "select hybgbz from TabHysyl as t where t.id = "
					+ hysid;

			return (Integer) this.getHibernateTemplate().find(hql).get(0);

		} catch (RuntimeException re) {
			log.error("get hybgbz by hysid!");
			throw re;
		}
	}
}
