/*
 * Copyright (c) 2009-2010 by DaLian YuDong Computer System CO.,LTD
 * All rights reserved.
 *      Project: SSH
 *    SubSystem: 会议室管理子系统
 */

package com.ysys.www.hy.dao;

import java.util.Date;
import java.util.List;

import org.springframework.orm.hibernate3.HibernateTemplate;

import com.ysys.www.hy.dao.condition.TabHysyl;
import com.ysys.www.hy.dao.condition.TabMrhycjz;
import com.ysys.www.hy.dao.condition.TabMrhyyl;
import com.ysys.www.hy.dao.condition.TabZqhcjz;
import com.ysys.www.hy.dao.condition.TabZqhyyl;

/**
 * 预约或修改会议数据库访问处理
 * 
 * @author zhangdaoqiang
 * @version 1.00 2009/09/22
 */
public interface YuyueDao {

	/**
	 * 保存每日会议一览 TabMrhyyl.
	 */
	public abstract void saveData(TabMrhyyl mrhyyl);

	/**
	 * 保存每日会议参加者 TabMrhycjz.
	 */
	public abstract void saveData(TabMrhycjz mrhycjz);

	/**
	 * 保存周期会议一览 TabZqhyyl.
	 */
	public abstract void saveData(TabZqhyyl zqhyyl);

	/**
	 * 保存周期会议参加者 TabZqhcjz.
	 */
	public abstract void saveData(TabZqhcjz zqhcjz);

	/**
	 * 检索所有会议室(初始化下拉列表).
	 * 
	 * @return List<TabHysyl>
	 */
	public abstract List<TabHysyl> getHysAll();

	/**
	 * 冲突检查 单日.
	 * 
	 * @param hysid
	 *            : 会议室ID
	 * @param start_date
	 *            : 单日会议开始日期
	 * @param start_time
	 *            : 单日会议开始时间
	 * @param end_time
	 *            : 单日会议结束时间
	 * 
	 * @return long: 返回在某会议室某日一段时间内的会议数目.
	 */
	public abstract long getMrhyylNumber(int hysid, Date start_date,
			Date start_time, Date end_time);

	/**
	 * 冲突检查（排除所修改会议本身） 单日 修改.
	 * 
	 * @param hysid
	 *            : 会议室ID
	 * @param start_date
	 *            : 单日会议开始日期
	 * @param start_time
	 *            : 单日会议开始时间
	 * @param end_time
	 *            : 单日会议结束时间
	 * @param mrhyyl_old
	 *            : 所修改会议室本身
	 * 
	 * @return long 冲突的会议数目
	 */
	public abstract long getMrhyylNumber(int hysid, Date start_date,
			Date start_time, Date end_time, TabMrhyyl mrhyyl_old);

	/**
	 * 冲突检查 每日.
	 * 
	 * @param hysid
	 *            : 会议室ID
	 * @param start_date
	 *            : 会议开始日期
	 * @param end_date
	 *            : 会议结束日期
	 * @param start_time
	 *            : 会议开始时间
	 * @param end_time
	 *            : 会议结束时间
	 * 
	 * @return long 冲突的会议数目
	 */
	public abstract long getMrhyylNumber(int hysid, Date start_date,
			Date end_date, Date start_time, Date end_time);

	/**
	 * 冲突检查(排除所修改的周期会议) 每日 修改.
	 * 
	 * @param hysid
	 *            : 会议室ID
	 * @param start_date
	 *            : 会议开始日期
	 * @param end_date
	 *            : 会议结束日期
	 * @param start_time
	 *            : 会议开始时间
	 * @param end_time
	 *            : 会议结束时间
	 * @param zqhyid
	 *            : 所修改的周期会议ID
	 * 
	 * @return long: 返回冲突会议的数目
	 */
	public abstract long getMrhyylNumber(int hysid, Date start_date,
			Date end_date, Date start_time, Date end_time, int zqhyid);

	/**
	 * 冲突检查 每周/月.
	 * 
	 * @param hysid
	 *            : 会议室ID
	 * @param start_date
	 *            : 会议开始日期
	 * @param end_date
	 *            : 会议结束日期
	 * @param start_time
	 *            : 会议开始时间
	 * @param end_time
	 *            : 会议结束时间
	 * 
	 * @return List<Date>: 返回某会议室某段日期某段时间内所有会议的日期.
	 */
	public abstract List<Date> getMrhyyl(int hysid, Date start_date,
			Date end_date, Date start_time, Date end_time);

	/**
	 * 冲突检查 每周/月 修改.
	 * 
	 * @param hysid
	 *            : 会议室ID
	 * @param start_date
	 *            : 会议开始日期
	 * @param end_date
	 *            : 会议结束日期
	 * @param start_time
	 *            : 会议开始时间
	 * @param end_time
	 *            : 会议结束时间
	 * @param zqhyid
	 *            : 所修改的周期会议ID
	 * 
	 * @return List<Date>: 返回某会议室某段日期某段时间内除修改的会议外的所有会议的日期.
	 * 
	 */
	public abstract List<Date> getMrhyyl(int hysid, Date start_date,
			Date end_date, Date start_time, Date end_time, int zqhyid);

	/**
	 * 取得TabZqhyyl中ID最大的值.
	 * 
	 * @return Integer: 返回TabZqhyyl中的周期会议ID的最大值
	 */
	public abstract Integer getZqhyylMax();

	/**
	 * 按Key取得每日会议信息.
	 * 
	 * @param hysid
	 *            : 会议室ID
	 * @param start_date
	 *            : 会议开始日期
	 * @param start_time
	 *            : 会议开始时间
	 * 
	 * @return TabMrhyyl: 所查询的会议信息
	 */
	public abstract TabMrhyyl getMrhyyl(int hysid, Date start_date,
			Date start_time);

	/**
	 * 按Key取得参加人List.
	 * 
	 * @param hysid
	 *            : 会议室ID
	 * @param start_date
	 *            : 会议开始日期
	 * @param start_time
	 *            : 会议开始时间
	 * @return List<Object[]>: 返回参加人List(List内是一个Object数组, 存着参加人ID与Name)
	 */
	public abstract List<Object[]> getCjrList(int hysid, Date start_date,
			Date start_time);

	/**
	 * get sqr by id from Tempinfo.
	 * 
	 * @param id
	 *            : 申请人ID
	 * @return String: 返回申请人名
	 */
	public abstract String getSqrName(String id);

	/**
	 * delete from TabMrhyyl, TabMrhycjz 单日.
	 * 
	 * @param mrhyyl
	 *            : 所选单日会议
	 * @param mrhycjz_list
	 *            : 所选单日会议的参加者
	 */
	public abstract void deleteMrhy(TabMrhyyl mrhyyl,
			List<TabMrhycjz> mrhycjz_list);

	/**
	 * delete from TabMrhyyl 周期.
	 * 
	 * @param zqhyid
	 *            : 所要删除的周期会议ID
	 * @param date
	 *            : 系统日期
	 * @param time
	 *            : 系统时间
	 * @param delToday
	 *            : 是否删除今天Flg
	 */
	public abstract void deleteMrhy(int zqhyid, Date date, Date time,
			boolean delToday);

	/**
	 * 删除每日会议参加者（删除周期会议时）TabMrhycjz
	 */
	public abstract void deleteMrhycjz();

	/**
	 * 删除周期会议(修改)
	 * 
	 * @param zqhyyl_list
	 *            : 修改的周期会议list
	 */
	public abstract void deleteZqhyyl(List<TabZqhyyl> zqhyyl_list);

	/**
	 * 删除周期会议参加者(修改)
	 * 
	 * @param zqhycjz_list
	 *            : 修改的周期会议参加者list
	 */
	public abstract void deleteZqhycjz(List<TabZqhcjz> zqhycjz_list);

	/**
	 * 单日删除每日会议参加者 get mrhycjz by时间段.
	 * 
	 * @param start_date
	 *            : 会议开始日期
	 * @param start_time
	 *            : 会议开始时间
	 * @param hysid
	 *            : 会议室ID
	 * @return List<TabMrhycjz>: 返回要删除的参加者
	 */
	public abstract List<TabMrhycjz> getMrhycjzList(Date start_date,
			Date start_time, int hysid);

	/**
	 * 根据周期会议ID取得周期会议一览list.
	 * 
	 * @param id
	 *            : 周期会议ID
	 * 
	 * @return List<TabZqhyyl>
	 * 
	 */
	public abstract List<TabZqhyyl> getZqhyList(int id);

	/**
	 * 根据周期会议ID取得每日会议一览list.
	 * 
	 * @param id
	 *            : 周期会议ID
	 * 
	 * @return List<TabMrhyyl>
	 */
	public abstract List<TabMrhyyl> getMrhyList(int id);

	/**
	 * 更新周期会议一览(set delFlg == 1).
	 * 
	 * @param id
	 *            : 周期会议ID
	 */
	public abstract void updateZqhyyl(int id);

	/**
	 * 更新周期会议一览(set ggbz == 1).
	 * 
	 * @param id
	 *            : 周期会议ID
	 */
	public abstract void updateZqhyylGgbz(int id);

	/**
	 * 更新每日会议一览(set hysbg).
	 * 
	 * @param hysid
	 *            : 会议室ID
	 * @param start_date
	 *            : 会议开始日期
	 * @param start_time
	 *            : 会议开始时间
	 * @param hyjl
	 *            : 要填写的会议报告
	 */
	public abstract void updateBg(int hysid, Date start_date, Date start_time,
			String hyjl);

	/**
	 * 根据周期会议ID取得周期会议参加者.
	 * 
	 * @param id
	 *            : 周期会议ID
	 * 
	 * @return List<TabZqhcjz>
	 */
	public abstract List<TabZqhcjz> getZqhycjzList(int id);

	/**
	 * 取得指定会议室的会议报告标志.
	 * 
	 * @param hysid
	 *            : 会议室ID
	 */
	public abstract int getBgbz(int hysid);

	public abstract HibernateTemplate getHibernateTemplate();

}