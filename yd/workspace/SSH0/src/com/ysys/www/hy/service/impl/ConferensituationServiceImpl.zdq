/*
 * Copyright (c) 2009-2010 by DaLian YuDong Computer System CO.,LTD
 * All rights reserved.
 *      Project: SSH
 *    SubSystem: 会议室管理子系统
 */

package com.ysys.www.hy.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import com.ysys.www.hy.dao.ConferensituationDao;
import com.ysys.www.hy.service.ConferensituationService;
import com.ysys.www.hy.service.common.CommonConstants;
import com.ysys.www.hy.service.common.SessionManager;
import com.ysys.www.hy.service.common.UserInfo;
import com.ysys.www.hy.service.condition.SituationInfo;

/**
 * 会议室预约情况一览（业务逻辑）
 * 
 * @author fengliang
 * @version 1.00 2009/09/23
 */
public class ConferensituationServiceImpl implements ConferensituationService {

	private ConferensituationDao conferensituationDaoImpl;

	public void setConferensituationDao(
			ConferensituationDao conferensituationDaoImpl) {
		this.conferensituationDaoImpl = conferensituationDaoImpl;
	}

	/**
	 * 会议室预约信息的取得
	 * 
	 * @param conferensituationId
	 *            会议室ID
	 * @param radiobuttonString
	 *            条件类型
	 * @param startInputDate
	 *            查询开始日期
	 * @param endInputDate
	 *            查询结束日期
	 * @param currentDate
	 *            当前日期
	 * @param offsetFrom
	 *            查询记录起点
	 * @param offsetTo
	 *            查询记录终点
	 * @return List 会议室预约相关信息
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<SituationInfo> getcsName(String radiobuttonString,
			Date startInputDate, Date endInputDate, String conferensituationId,
			Date currentDate, Long offsetFrom, Long offsetTo) {

		// 取得登陆用户的ID
		SessionManager session = new SessionManager();
		String userID = ((UserInfo) session.get(CommonConstants.USERINFO))
				.getUserID();

		// 取得查询的记录。
		List tabMrhyylList = conferensituationDaoImpl.findTabMrhyyl(
				conferensituationId, radiobuttonString, startInputDate,
				endInputDate, currentDate, offsetFrom, offsetTo);

		// 未回执的参加人名单
		List tabMrhycjzList = conferensituationDaoImpl.findTabMrhycjz(
				conferensituationId, radiobuttonString, startInputDate,
				endInputDate, CommonConstants.SIT_HZflag0, currentDate);
		// 会议参加者名单。
		List cjzList = conferensituationDaoImpl.findTabMrhycjz(
				conferensituationId, radiobuttonString, startInputDate,
				endInputDate, CommonConstants.SIT_HZflag2, currentDate);

		// 每个预约的已回执的参加人数。
		List sumHzqrList = conferensituationDaoImpl.findSumHzqr(
				conferensituationId, radiobuttonString, startInputDate,
				endInputDate, currentDate);

		// 自定义列表SituationInfo的定义 ，用于存储由以上三个查询组合后的满足条件的记录。
		List<SituationInfo> result_info = new ArrayList();

		/*----------------------记录的组合--------------------------*/
		// 变量定义：满足条件的记录数累加器。
		Integer jiluInteger = 0;
		// 第一层循环所用变量。
		Date tabMrhyylhyqrDate = null;
		Date tabMrhyylHykssjDate = null;
		String divString = "div";
		String hykssjString = null;
		String hyksshour = null;
		String hykssjminute = null;
		String hyjssjString = null;
		String hyjssjhour = null;
		String hyjssjminute = null;
		// 第二个循环所用变量,参加者回执人数循环
		Date sumHyqrDate = null;
		Date sumHykssjDate = null;
		long sumLong = 0;
		// 第三个循环所用变量：为参加者名单统计循环
		Date tabMrhycjzDate = null;
		Date tabMrhycjzHykssjDate = null;
		String cjrId = null;
		String tabMrhycjzString = null;
		String wcrmString = null;
		// 循环取得当前会议室的所有预约记录。
		for (Iterator iter = tabMrhyylList.iterator(); iter.hasNext();) {

			// 取得当前记录的日期，并分解成年、月、日、周，并用于条件比较。
			Object[] record = (Object[]) iter.next();
			SituationInfo hyslist = new SituationInfo();
			tabMrhyylhyqrDate = (java.util.Date) record[0];
			tabMrhyylHykssjDate = (java.util.Date) record[1];

			// 存储满足条件的记录的记录数、会议日期、会议开始时间、结束时间、会议室ID、
			// 会议主题、预约人姓名、参加者人数、周期会议区分。
			jiluInteger++;
			divString = divString + String.valueOf(jiluInteger);
			hyslist.setHysm(divString);

			hyslist.setHyrq((java.util.Date) (record[0]));

			hykssjString = String.valueOf(record[1]);
			hyksshour = hykssjString.substring(0, 2);
			hykssjminute = hykssjString.substring(3, 5);
			hyslist.setHykssj(hykssjString);
			hyslist.setHykssjhour(hyksshour);
			hyslist.setHykssjminute(hykssjminute);

			hyjssjString = String.valueOf(record[2]);
			hyjssjhour = hyjssjString.substring(0, 2);
			hyjssjminute = hyjssjString.substring(3, 5);
			hyslist.setHyjssj(hyjssjString);
			hyslist.setHyjssjhour(hyjssjhour);
			hyslist.setHyjssjminute(hyjssjminute);

			hyslist.setHysid((java.lang.Integer) record[3]);
			hyslist.setHyzt((java.lang.String) record[4]);
			hyslist.setUserName((java.lang.String) record[5]);
			hyslist.setCjzrs((java.lang.Integer) record[6]);
			hyslist.setZqhyqf((java.lang.Integer) record[7]);
			// 会议申请人id。
			String sqrId = (String) record[8];
			hyslist.setUserId(sqrId);
			// 查看更改会议记录的权限默认为不可查看，不可更改。
			hyslist.setXxqxFlag(Integer.valueOf(1));

			Integer bmbzI = (Integer) record[9];
			hyslist.setBmbz(bmbzI);

			// 存储当前记录的参加者回执人数。

			for (Iterator iter1 = sumHzqrList.iterator(); iter1.hasNext();) {
				Object[] record1 = (Object[]) iter1.next();
				sumHyqrDate = (java.util.Date) record1[0];
				sumHykssjDate = (java.util.Date) record1[1];
				sumLong = (java.lang.Long) record1[2];
				if (((tabMrhyylhyqrDate.compareTo(sumHyqrDate)) == 0)
						&& ((tabMrhyylHykssjDate.compareTo(sumHykssjDate)) == 0)) {
					hyslist.setSumHZ(sumLong);
				}
			}

			// 存储当前记录的参加者未回执人的姓名列表。
			StringBuffer buf = new StringBuffer();
			for (Iterator iter2 = tabMrhycjzList.iterator(); iter2.hasNext();) {
				Object[] record2 = (Object[]) iter2.next();
				tabMrhycjzDate = (java.util.Date) record2[0];
				tabMrhycjzHykssjDate = (java.util.Date) record2[1];
				tabMrhycjzString = (java.lang.String) record2[4];
				if (((tabMrhyylhyqrDate.compareTo(tabMrhycjzDate)) == 0)
						&& ((tabMrhyylHykssjDate
								.compareTo(tabMrhycjzHykssjDate)) == 0)) {
					buf.append(tabMrhycjzString);
					buf.append("  ");
				}
			}
			// 取得当前登陆用户查看修改预约记录的权限
			if (userID.equals(sqrId) == true) { // 如果当前登陆用户是当前预约的申请人，那么设置权限标志为0。
				hyslist.setXxqxFlag(Integer.valueOf(0));
			}
			for (Iterator iter3 = cjzList.iterator(); iter3.hasNext();) {
				Object[] record3 = (Object[]) iter3.next();
				tabMrhycjzDate = (java.util.Date) record3[0];
				tabMrhycjzHykssjDate = (java.util.Date) record3[1];
				cjrId = (String) record3[3];
				tabMrhycjzString = (java.lang.String) record3[4];
				if (((tabMrhyylhyqrDate.compareTo(tabMrhycjzDate)) == 0)
						&& ((tabMrhyylHykssjDate
								.compareTo(tabMrhycjzHykssjDate)) == 0)) {
					if (userID.equals(cjrId) == true) {
						hyslist.setXxqxFlag(Integer.valueOf(0));
						break;
					}
				}
			}
			wcrmString = buf.toString();
			hyslist.setWcjrs(wcrmString);

			// 将当前满足条件的记录添加到自定义列表中。
			result_info.add(hyslist);
		}
		// 返回自定义列表。
		return result_info;
	}

	/**
	 * 会议室名称的取得
	 * 
	 * @param conferensituationId
	 *            会议室ID
	 * @return String 会议室名称
	 */
	@SuppressWarnings("unchecked")
	@Override
	public String getconferensituationName(String conferensituationId) {

		// 变量定义，存储会议室名称。
		String conferensituationName = null;

		// 取得记录集。
		List conferensituationNameList = conferensituationDaoImpl
				.findHysName(conferensituationId);

		// 取得会议室名
		Iterator iter2 = conferensituationNameList.iterator();
		while (iter2.hasNext()) {
			Object record2 = iter2.next();
			conferensituationName = (String) record2;
		}
		return conferensituationName;
	}

	/**
	 * 总记录数的取得
	 * 
	 * @param conferensituationId
	 *            会议室ID
	 * @param radiobutton
	 *            条件类型
	 * @param startInputDate
	 *            查询开始日期
	 * @param endInputDate
	 *            查询结束日期
	 * @param currentDate
	 *            当前日期
	 * @return Long 总记录数
	 */
	public Long findTabMrhyylCount(String conferensituationId,
			String radiobutton, Date startInputDate, Date endInputDate,
			Date currentDate) {
		Long total = null;
		total = conferensituationDaoImpl.findTabMrhyylCount(
				conferensituationId, radiobutton, startInputDate, endInputDate,
				currentDate);
		return total;
	}
}
