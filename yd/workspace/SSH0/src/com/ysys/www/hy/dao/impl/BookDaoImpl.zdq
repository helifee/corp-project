package com.ysys.www.hy.dao.impl;

import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.LockMode;
import org.hibernate.Session;
import org.springframework.context.ApplicationContext;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import com.ysys.www.hy.dao.BookDao;
import com.ysys.www.hy.dao.condition.Book;

/** */
/**
 * Data access object (DAO) for domain model class Book.
 * 
 * @see com.ysys.www.hy.dao.condition.Book
 * @author MyEclipse Persistence Tools
 */

public class BookDaoImpl extends HibernateDaoSupport implements BookDao {
	private static final Log log = LogFactory.getLog(BookDaoImpl.class);

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.ysys.www.hy.dao.BookDao#save(com.ysys.www.hy.dao.condition.Book
	 * )
	 */
	@Override
	public void save(Book transientInstance) {
		log.debug("saving Book instance");
		try {
			getHibernateTemplate().save(transientInstance);
			log.debug("save successful");
		} catch (RuntimeException re) {
			log.error("save failed", re);
			throw re;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @seecom.ysys.www.hy.dao.BookDao#delete(com.ysys.www.hy.dao.condition.
	 * Book)
	 */
	@Override
	public void delete(Book persistentInstance) {
		log.debug("deleting Book instance");
		try {
			getHibernateTemplate().delete(persistentInstance);
			log.debug("delete successful");
		} catch (RuntimeException re) {
			log.error("delete failed", re);
			throw re;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.ysys.www.hy.dao.BookDao#findById(java.lang.Long)
	 */
	@Override
	public Book findById(Long id) {
		log.debug("getting Book instance with id: " + id);
		try {
			Book instance = (Book) getHibernateTemplate()
					.get("com.ysys.www.hy.dao.condition.Book", id);
			return instance;
		} catch (RuntimeException re) {
			log.error("get failed", re);
			throw re;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.ysys.www.hy.dao.BookDao#findMaxId()
	 */
	@Override
	public Long findMaxId() {
		Session session = getHibernateTemplate().getSessionFactory()
				.openSession();
		String sql = "select max(b.id) from Book b";
		Long maxid = (Long) session.createQuery(sql).uniqueResult();
		return maxid;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.ysys.www.hy.dao.BookDao#findByExample(com.ysys.www.hy.dao.condition
	 * .BookCondition)
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<Book> findByExample(Book instance) {
		log.debug("finding Book instance by example");
		try {
			List<Book> results = getHibernateTemplate().findByExample(
					instance);
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.ysys.www.hy.dao.BookDao#findByProperty(java.lang.String,
	 * java.lang.Object)
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<Book> findByProperty(String propertyName, Object value) {
		log.debug("finding Book instance with property: " + propertyName
				+ ", value: " + value);
		try {
			String queryString = "from Book as b where b."
					+ propertyName + "= ?";
			return getHibernateTemplate().find(queryString, value);
		} catch (RuntimeException re) {
			log.error("find by property name failed", re);
			throw re;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.ysys.www.hy.dao.BookDao#findByName(java.lang.Object)
	 */
	@Override
	public List<Book> findByName(Object name) {
		return findByProperty(NAME, name);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.ysys.www.hy.dao.BookDao#findByIsbm(java.lang.Object)
	 */
	@Override
	public List<Book> findByIsbm(Object isbm) {
		return findByProperty(ISBM, isbm);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.ysys.www.hy.dao.BookDao#findByAuthor(java.lang.Object)
	 */
	@Override
	public List<Book> findByAuthor(Object author) {
		return findByProperty(AUTHOR, author);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.ysys.www.hy.dao.BookDao#findAll()
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<Book> findAll() {
		log.debug("finding all Book instances");
		try {
			String queryString = "from Book";
			return getHibernateTemplate().find(queryString);
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.ysys.www.hy.dao.BookDao#merge(com.ysys.www.hy.dao.condition.Book
	 * )
	 */
	@Override
	public Book merge(Book detachedInstance) {
		log.debug("merging Book instance");
		try {
			Book result = (Book) getHibernateTemplate()
					.merge(detachedInstance);
			log.debug("merge successful");
			return result;
		} catch (RuntimeException re) {
			log.error("merge failed", re);
			throw re;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.ysys.www.hy.dao.BookDao#attachDirty(com.ysys.www.hy.dao.condition
	 * .BookCondition)
	 */
	@Override
	public void attachDirty(Book instance) {
		log.debug("attaching dirty Book instance");
		try {
			getHibernateTemplate().saveOrUpdate(instance);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.ysys.www.hy.dao.BookDao#attachClean(com.ysys.www.hy.dao.condition
	 * .BookCondition)
	 */
	@Override
	public void attachClean(Book instance) {
		log.debug("attaching clean Book instance");
		try {
			getHibernateTemplate().lock(instance, LockMode.NONE);
			log.debug("attach successful");
		} catch (RuntimeException re) {
			log.error("attach failed", re);
			throw re;
		}
	}

	public static BookDao getFromApplicationContext(ApplicationContext ctx) {
		return (BookDao) ctx.getBean("BookDaoImpl");
	}

}
