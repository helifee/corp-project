/*
 * Copyright (c) 2009-2010 by DaLian YuDong Computer System CO.,LTD
 * All rights reserved.
 *      Project: SSH
 *    SubSystem: 会议室管理子系统
 */

package com.ysys.www.hy.service.impl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import com.ysys.www.hy.dao.HybaseDao;
import com.ysys.www.hy.service.ConferenceInitService;
import com.ysys.www.hy.service.common.CommonConstants;
import com.ysys.www.hy.service.common.SessionManager;
import com.ysys.www.hy.service.common.UserInfo;
import com.ysys.www.hy.service.condition.Hybaseinfo;
import com.ysys.www.hy.service.condition.Hysinfo;

/**
 * @see com.ysys.www.hy.service.ConferenceInitService
 */
public class ConferenceInitServiceImpl implements ConferenceInitService {

	private HybaseDao hybaseDaoImpl;

	public void setHybaseDao(HybaseDao hybaseDaoImpl) {
		this.hybaseDaoImpl = hybaseDaoImpl;
	}

	 /**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	public List<Hysinfo> getBaseInfo(String inputtime, String bjhysid) {
		SimpleDateFormat formattm = new SimpleDateFormat("HH:mm:ss");

		// 会议室每日会议信息
		List hysyllist = hybaseDaoImpl.findhysyl();

		// 会议室一览信息
		SimpleDateFormat sdfs = new SimpleDateFormat("yyyy-MM-dd");
		String intime = inputtime;

		List mrhyyllist = hybaseDaoImpl.findmrhyyl(intime);

		// 会议室基本信息
		List<Hysinfo> result_info = new ArrayList();

		// 是否读取每日会议室信息的FLG
		Integer hysflg = 0;

		// 存放每日会议最后一条数据的信息
		Hybaseinfo hyslist4 = new Hybaseinfo();

		// 登录者
		SessionManager session = new SessionManager();
		String dquserid = ((UserInfo) session.get(CommonConstants.USERINFO))
				.getUserID();

		// 当前时间
		Integer timeflg = 1;
		Integer nowtimeflg = 1;
		Integer cgtimeflg = 0;
		Date nowdate = new Date();
		String nownyr = sdfs.format(nowdate);
		String nowsfm = formattm.format(nowdate);

		// 输入时间小于当前时间
		if (nownyr.compareTo(intime) > 0) {
			timeflg = 0;
		}
		if (nownyr.equals(intime)) {
			nowtimeflg = 0;
		}

		try {
			Iterator iter1 = mrhyyllist.iterator();
			Object[] record1 = null;

			for (Iterator iter = hysyllist.iterator(); iter.hasNext();) {

				List<Hybaseinfo> result_base = new ArrayList();

				Object[] record = (Object[]) iter.next();

				String oldendTime = null;

				do {
					Hybaseinfo hyslist = new Hybaseinfo();

					if (hysflg == 0 && iter1.hasNext()) {
						record1 = (Object[]) iter1.next();
					}
					String starttime = null;
					// 会议室一览的会议室ID等于每日会议一览的会议室ID
					if (record != null
							&& record1 != null
							&& ((Integer) record[0])
									.equals(record1[0])) {

						hysflg = 0;

						String beginTime = null;

						String endTime = null;

						// 会议开始时间
						beginTime = formattm.format(record1[3]);
						// 会议结束时间
						endTime = formattm.format(record1[4]);

						// 会议开始时间大于8点，并且开始时间不等于前次预约的结束时间
						if ((beginTime.compareTo(CommonConstants.KSTIME) > 0)
								&& (!beginTime.equals(oldendTime))) {

							cgtimeflg = 0;

							// 根据当前时间取画表格用的开始时间
							starttime = getstarttime(oldendTime, nowsfm,
									beginTime);
							// 时间为当前时间
							if (nowtimeflg == 0 && starttime != null) {
								if (oldendTime == null
										|| (oldendTime != null && (starttime
												.compareTo(oldendTime) > 0))) {
									if (starttime.compareTo(beginTime) < 0) {
										Hybaseinfo hyslist1 = new Hybaseinfo();
										if (oldendTime != null) {
											hyslist1.setHyslength(cdjs(
													oldendTime, starttime));
										} else {
											hyslist1.setHyslength(cdjs(
													CommonConstants.KSTIME,
													starttime));
										}
										hyslist1
												.setCgnowtimeflg(CommonConstants.OVERTIME);
										hyslist1
												.setHaverenflg(CommonConstants.NOPP);

										result_base.add(hyslist1);
										cgtimeflg = 1;
									}
								}
							}
							Hybaseinfo hyslist2 = new Hybaseinfo();
							// 该时间段没有被预约
							hyslist2.setHaverenflg(CommonConstants.NOPP);
							// 设置td宽度
							// 同一会议室，有二个以上预约会议之前的td宽度
							if (oldendTime != null) {
								if (cgtimeflg == 1) {
									hyslist2.setHyslength(cdjs(starttime,
											beginTime));
								} else {
									hyslist2.setHyslength(cdjs(oldendTime,
											beginTime));
								}
							} else {
								// 会议室中第一个预约会议之前的td宽度
								if (cgtimeflg == 1) {
									hyslist2.setHyslength(cdjs(starttime,
											beginTime));
								} else {
									hyslist2.setHyslength(cdjs(
											CommonConstants.KSTIME, beginTime));
								}
							}
							// 设置是否超过当前时间FLG
							if (timeflg == 0
									|| (nowtimeflg == 0 && beginTime
											.compareTo(nowsfm) <= 0)) {
								hyslist2
										.setCgnowtimeflg(CommonConstants.OVERTIME);
							} else {
								hyslist2
										.setCgnowtimeflg(CommonConstants.NOOVERTIME);
							}
							if (oldendTime != null) {
								if (cgtimeflg == 1) {
									hyslist2.setStarthhTime(gethhmmtime(
											starttime, CommonConstants.HHGFLG));
									hyslist2.setStartmmTime(gethhmmtime(
											starttime, CommonConstants.MMGFLG));
								} else {
									hyslist2
											.setStarthhTime(gethhmmtime(
													oldendTime,
													CommonConstants.HHGFLG));
									hyslist2
											.setStartmmTime(gethhmmtime(
													oldendTime,
													CommonConstants.MMGFLG));
								}
							} else {
								if (cgtimeflg == 1) {
									hyslist2.setStarthhTime(gethhmmtime(
											starttime, CommonConstants.HHGFLG));
									hyslist2.setStartmmTime(gethhmmtime(
											starttime, CommonConstants.MMGFLG));
								} else {
									hyslist2.setStarthhTime(gethhmmtime(
											CommonConstants.KSTIME,
											CommonConstants.HHGFLG));
									hyslist2.setStartmmTime(gethhmmtime(
											CommonConstants.KSTIME,
											CommonConstants.MMGFLG));
								}
							}

							hyslist2.setEndhhTime(gethhmmtime(beginTime,
									CommonConstants.HHGFLG));
							hyslist2.setEndmmTime(gethhmmtime(beginTime,
									CommonConstants.MMGFLG));

							result_base.add(hyslist2);

							// 会议申请者名
							hyslist.setSqrName((String) record1[1]);
							// 会议参加人数
							hyslist.setCjrs((Integer) record1[2]);

							hyslist.setHyslength(cdjs(beginTime, endTime));

							hyslist.setHaverenflg(CommonConstants.HAVEPP);

							hyslist.setStarthhTime(gethhmmtime(beginTime,
									CommonConstants.HHGFLG));
							hyslist.setStartmmTime(gethhmmtime(beginTime,
									CommonConstants.MMGFLG));
							hyslist.setEndhhTime(gethhmmtime(endTime,
									CommonConstants.HHGFLG));
							hyslist.setEndmmTime(gethhmmtime(endTime,
									CommonConstants.MMGFLG));

							hyslist.setZqId((Integer) record1[5]);
							hyslist.setCgnowtimeflg(CommonConstants.NOOVERTIME);

							// 是否是登陆者申请的会议预约
							if (dquserid.equals(record1[6])) {
								hyslist.setSqridflg(CommonConstants.ISSQR);
							} else {
								hyslist.setSqridflg(CommonConstants.NOTSQR);
							}

							result_base.add(hyslist);
							cgtimeflg = 0;
						} else {
							// 开始时间为（08：00：00）的会议以及前次预约的结束时间是当前会议的开始时间的会议
							hyslist.setSqrName((String) record1[1]);

							hyslist.setCjrs((Integer) record1[2]);

							hyslist.setHyslength(cdjs(beginTime, endTime));

							hyslist.setStarthhTime(gethhmmtime(beginTime,
									CommonConstants.HHGFLG));
							hyslist.setStartmmTime(gethhmmtime(beginTime,
									CommonConstants.MMGFLG));

							hyslist.setEndhhTime(gethhmmtime(endTime,
									CommonConstants.HHGFLG));
							hyslist.setEndmmTime(gethhmmtime(endTime,
									CommonConstants.MMGFLG));

							hyslist.setHaverenflg(CommonConstants.HAVEPP);

							hyslist.setZqId((Integer) record1[5]);

							hyslist.setCgnowtimeflg(CommonConstants.NOOVERTIME);
							if (dquserid.equals(record1[6])) {
								hyslist.setSqridflg(CommonConstants.ISSQR);
							} else {
								hyslist.setSqridflg(CommonConstants.NOTSQR);
							}
							result_base.add(hyslist);
						}
						oldendTime = endTime;
						// 每日会议一览最后一条会议读完以后，td的设置
						if (!iter1.hasNext()) {
							if (oldendTime != null
									&& !oldendTime
											.equals(CommonConstants.JSTIME)) {

								starttime = getstarttime(nowsfm, nowsfm,
										CommonConstants.JSTIME);
								if (nowtimeflg == 0 && starttime != null) {
									if (starttime.compareTo(oldendTime) > 0) {

										Hybaseinfo hyslist3 = new Hybaseinfo();

										hyslist3.setHyslength(cdjs(oldendTime,
												starttime));

										hyslist3
												.setCgnowtimeflg(CommonConstants.OVERTIME);
										hyslist3
												.setHaverenflg(CommonConstants.NOPP);

										result_base.add(hyslist3);
										cgtimeflg = 1;
									}
								}

								hyslist4.setHaverenflg(CommonConstants.NOPP);
								if (timeflg == 0) {
									hyslist4
											.setCgnowtimeflg(CommonConstants.OVERTIME);
								} else {
									hyslist4
											.setCgnowtimeflg(CommonConstants.NOOVERTIME);
								}
								hyslist4.setEndhhTime(gethhmmtime(
										CommonConstants.JSTIME,
										CommonConstants.HHGFLG));
								hyslist4.setEndmmTime(gethhmmtime(
										CommonConstants.JSTIME,
										CommonConstants.MMGFLG));

								if (cgtimeflg == 1) {
									hyslist4.setStarthhTime(gethhmmtime(
											starttime, CommonConstants.HHGFLG));
									hyslist4.setStartmmTime(gethhmmtime(
											starttime, CommonConstants.MMGFLG));
									hyslist4.setHyslength(cdjs(starttime,
											CommonConstants.JSTIME));
								} else {
									hyslist4
											.setStarthhTime(gethhmmtime(
													oldendTime,
													CommonConstants.HHGFLG));
									hyslist4
											.setStartmmTime(gethhmmtime(
													oldendTime,
													CommonConstants.MMGFLG));
									hyslist4.setHyslength(cdjs(oldendTime,
											CommonConstants.JSTIME));
								}

								result_base.add(hyslist4);
							}
						}

					} else {
						// 会议室一览的会议室ID不等于每日会议一览的会议室ID
						hysflg = 1;
						cgtimeflg = 0;
						starttime = getstarttime(nowsfm, nowsfm,
								CommonConstants.JSTIME);
						// 一个会议室的每日预约会议最后一条读完以后，td的设置
						if (oldendTime != null
								&& !oldendTime.equals(CommonConstants.JSTIME)) {
							// 距离当前时间最近的td的设置
							if (nowtimeflg == 0 && starttime != null) {
								if (starttime.compareTo(oldendTime) > 0) {

									Hybaseinfo hyslist5 = new Hybaseinfo();

									hyslist5.setHyslength(cdjs(oldendTime,
											starttime));
									hyslist5
											.setCgnowtimeflg(CommonConstants.OVERTIME);
									hyslist5
											.setHaverenflg(CommonConstants.NOPP);
									result_base.add(hyslist5);
									cgtimeflg = 1;
								}
							}

							hyslist.setHaverenflg(CommonConstants.NOPP);
							if (timeflg == 0
									|| nowsfm.compareTo(CommonConstants.JSTIME) > 0) {
								hyslist
										.setCgnowtimeflg(CommonConstants.OVERTIME);
							} else {
								hyslist
										.setCgnowtimeflg(CommonConstants.NOOVERTIME);
							}
							hyslist.setEndhhTime(gethhmmtime(
									CommonConstants.JSTIME,
									CommonConstants.HHGFLG));
							hyslist.setEndmmTime(gethhmmtime(
									CommonConstants.JSTIME,
									CommonConstants.MMGFLG));

							if (cgtimeflg == 1) {
								hyslist.setStarthhTime(gethhmmtime(starttime,
										CommonConstants.HHGFLG));
								hyslist.setStartmmTime(gethhmmtime(starttime,
										CommonConstants.MMGFLG));
								hyslist.setHyslength(cdjs(starttime,
										CommonConstants.JSTIME));
							} else {
								hyslist.setStarthhTime(gethhmmtime(oldendTime,
										CommonConstants.HHGFLG));
								hyslist.setStartmmTime(gethhmmtime(oldendTime,
										CommonConstants.MMGFLG));

								hyslist.setHyslength(cdjs(oldendTime,
										CommonConstants.JSTIME));
							}

							result_base.add(hyslist);

						} else if (oldendTime == null) {
							// 一个会议室没有预约会议的td设置
							if (nowtimeflg == 0 && starttime != null) {
								if (starttime.compareTo(CommonConstants.KSTIME) > 0) {

									Hybaseinfo hyslist5 = new Hybaseinfo();

									hyslist5.setHyslength(cdjs(
											CommonConstants.KSTIME, starttime));
									hyslist5
											.setCgnowtimeflg(CommonConstants.OVERTIME);
									hyslist5
											.setHaverenflg(CommonConstants.NOPP);
									result_base.add(hyslist5);
									cgtimeflg = 1;
								}
							}
							hyslist.setHaverenflg(CommonConstants.NOPP);
							if (timeflg == 0) {
								hyslist
										.setCgnowtimeflg(CommonConstants.OVERTIME);
							} else {
								hyslist
										.setCgnowtimeflg(CommonConstants.NOOVERTIME);
							}
							if (cgtimeflg == 1) {
								hyslist.setStarthhTime(gethhmmtime(starttime,
										CommonConstants.HHGFLG));
								hyslist.setStartmmTime(gethhmmtime(starttime,
										CommonConstants.MMGFLG));
								hyslist.setHyslength(cdjs(starttime,
										CommonConstants.JSTIME));
							} else {
								hyslist.setStarthhTime(gethhmmtime(
										CommonConstants.KSTIME,
										CommonConstants.HHGFLG));
								hyslist.setStartmmTime(gethhmmtime(
										CommonConstants.KSTIME,
										CommonConstants.MMGFLG));
								hyslist.setHyslength(cdjs(
										CommonConstants.KSTIME,
										CommonConstants.JSTIME));
							}
							hyslist.setEndhhTime(gethhmmtime(
									CommonConstants.JSTIME,
									CommonConstants.HHGFLG));
							hyslist.setEndmmTime(gethhmmtime(
									CommonConstants.JSTIME,
									CommonConstants.MMGFLG));
							result_base.add(hyslist);
						}
						break;
					}
				} while (iter1.hasNext());

				Hysinfo hysylinfo = new Hysinfo();
				// 会议室Id
				hysylinfo.setHysid((Integer) record[0]);
				// 会议室名
				hysylinfo.setHysmc((String) record[1]);
				// 会议室颜色变化
				if (bjhysid != null
						&& ((Integer) record[0] == Integer.parseInt(bjhysid))) {
					hysylinfo.setHysysflg(CommonConstants.HAVEYS);
				} else {
					hysylinfo.setHysysflg(CommonConstants.NOYS);
				}

				hysylinfo.setHyslist(result_base);

				result_info.add(hysylinfo);
			}
		} catch (Exception ex) {
			System.out.println("数据中取出的数据有错，画面不能正确的显示");
		}

		return result_info;
	}

	/**
	 * TD宽度的计算
	 * 
	 * @param beginTime 开始时间
	 * @param endTime 结束时间
	 * @return int TD宽度
	 */
	private int cdjs(String beginTime, String endTime) {
		int length = 0;
		String start_xiaoshi = beginTime.substring(0, 2);
		String start_fen = beginTime.substring(3, 5);
		String end_xiaoshi = endTime.substring(0, 2);
		String end_fen = endTime.substring(3, 5);
		int start = Integer.parseInt(start_xiaoshi) * 60
				+ Integer.parseInt(start_fen);
		int end = Integer.parseInt(end_xiaoshi) * 60
				+ Integer.parseInt(end_fen);
		length = ((((end - start) / 30) * 1176) / 28);
		return length - 2;
	}

	/**
	 * 取得离当前时间最近的时间
	 * 
	 * @param oldtime 上个TD结束的时间
	 * @param nowtimesfm 当前日期的时分秒
	 * @param begintime 会议开始时间
	 * @return String 
	 */
	private String getstarttime(String oldtime, String nowtimesfm,
			String begintime) {
		String starttime;
		String old_xiaoshi = "";
		String old_fen = "";
		if (oldtime == null) {
			old_xiaoshi = CommonConstants.KSTIME.substring(0, 2);
			old_fen = "0";
		} else {
			old_xiaoshi = oldtime.substring(0, 2);
			old_fen = oldtime.substring(3, 5);
		}
		String now_xiaoshi = nowtimesfm.substring(0, 2);
		String now_fen = nowtimesfm.substring(3, 5);
		String begintime_xiaoshi = begintime.substring(0, 2);
		String begintime_fen = begintime.substring(3, 5);

		if (Integer.parseInt(now_fen) < 30) {
			starttime = now_xiaoshi.concat(":00:00");
		} else {
			starttime = now_xiaoshi.concat(":30:00");
		}
		int start = Integer.parseInt(old_xiaoshi) * 60
				+ Integer.parseInt(old_fen);
		int end = Integer.parseInt(begintime_xiaoshi) * 60
				+ Integer.parseInt(begintime_fen);

		int jiguo = end - start;
		if (jiguo <= 30 || (nowtimesfm.compareTo(CommonConstants.KSTIME) < 0) 
				|| starttime.equals(CommonConstants.KSTIME)) {
			starttime = null;
		}
		return starttime;
	}

	 /**
	 * {@inheritDoc}
	 */
	public Date getnowdate(Date inputdate) {
		Date nowdate = null;
		if (inputdate == null) {
			nowdate = new Date();
		} else {
			nowdate = inputdate;
		}
		return nowdate;
	}

	/**
	 * 取的时间的小时和或者分钟
	 *
	 * @param intime 要转化的时间
	 * @param hhmmflg 取得小时和分的flg
	 * @return String 时间的小时或者分钟
	 */
	public String gethhmmtime(String intime, Integer hhmmflg) {
		String outtime = null;
		if (intime != null && intime.length() == 8) {
			if (hhmmflg == 1) {
				outtime = intime.substring(0, 2);
			} else {
				outtime = intime.substring(3, 5);
			}
		}
		return outtime;
	}
}
