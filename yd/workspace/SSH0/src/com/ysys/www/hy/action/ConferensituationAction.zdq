/*
 * Copyright (c) 2009-2010 by DaLian YuDong Computer System CO.,LTD
 * All rights reserved.
 *      Project: SSH
 *    SubSystem: 会议室管理子系统
 */
package com.ysys.www.hy.action;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import com.opensymphony.xwork2.Action;
import com.opensymphony.xwork2.ActionSupport;
import com.ysys.www.hy.service.ConferensituationService;
import com.ysys.www.hy.service.common.CommonConstants;
import com.ysys.www.hy.service.condition.SituationInfo;
/**
 * 会议预约情况Action. 
 * 功能：1.完成以下类型的预约记录查询功能：
 *           当日查询：查询当日的预约记录。
 *           当周查询：查询当周的预约记录。
 *           当月查询：查询当月的预约记录。
 *           日期查询：根据输入的开始日期和结束日期
 *       2.有更改权限的用户可以通过点击详细进入预约更改画面，对预约进行更改。    
 * @version 1.00 2009/08/28
 * @author fengliang
 */
public class ConferensituationAction extends ActionSupport {

	private static final long serialVersionUID = -2969730594130104125L;

	private String conferensituationId;                        //会议室ID
	private ConferensituationService conferensituationService; //service业务处理类对象
	private List<SituationInfo> conferensituations;            //全部的会议室记录列表
	private List<SituationInfo> conferensituationsQB;          //画面显示当页的会议室记录列表
	private SituationInfo conferensituation;                   //一条记录对象
	private String radiobutton;                                //画面radio条件选择：dr：当日 ，dz：当周， dy：当月， rq：日期
	private Date startDate;                                    //查询开始时间
	private String startDateS;                                 //日期被选择时的开始时间，页面跳转时候使用。
	private Date endDate;                                      //查询结束时间
	private String endDateS;                                   //日期被选择时的结束时间，页面跳转时候使用。
	private String conferensituationName;                      //当前查看预约情况的会议室名称
	private String firstWeek;                                  //当前周的第一天
	private String lastWeek;                                   //但前周的最后一天
	private String firstMonth;                                 //当前月的第一天
	private String lastMonth;                                  //当前月的最后一天
	private String currentDay;                                 //当前日期
	private String pageId;                                     //来自其他页面的id。
	private long items1;                                     //表示记录数 
	private int maxPageItems1;                              //每页显示的记录数 
	private long maxIndexPages1;                             //显示的页码数 
	private int pageNumber;                                 //当前显示的页面
	private long offsetFrom;                                 //从第offsetFrom条开始显示
	private long offsetTo;                                   //显示到第offsetTo条为止。
//	private PageTag page;
	
	/**
	 * 预约初始化.
	 * 
	 * @return String 返回执行的逻辑结果字符串，以便对其结果进行相应处理。
	 */
	@Override
	public String execute() {
		
		
		
		
		SimpleDateFormat format1 = new SimpleDateFormat("yyyy-MM-dd"); 
	    
		Date nowDate = new Date();
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(nowDate);
		SimpleDateFormat matter = new SimpleDateFormat("yyyy-MM-dd");
		
		// 当前日期。
		currentDay = matter.format(nowDate);
		
		// 当周第一天和最后一天的日期。
		Integer weekdayInteger = calendar.get(Calendar.DAY_OF_WEEK) - 1;
		Integer datesum = -weekdayInteger;
		calendar.add(Calendar.DAY_OF_MONTH, datesum);
		firstWeek = matter.format(calendar.getTime());
		calendar.add(Calendar.DAY_OF_MONTH, 6);
		lastWeek = matter.format(calendar.getTime());
		
		// 当月第一天河最后一天的日期。
		Calendar calendar2 = Calendar.getInstance();
		calendar2.setTime(nowDate);
		calendar2.add(Calendar.MONTH, 1);
		calendar2.set(Calendar.DATE, 1);
		calendar2.add(Calendar.DATE, -1);
		lastMonth = matter.format(calendar2.getTime());
		calendar2.set(Calendar.DATE, 1);
		firstMonth = matter.format(calendar2.getTime());

		// 从会议室分布返回，保留之前预约查询条件
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd"); 
		
		//如果查询条件是当日,把开始日期和结束日期设置为当前日期.
		if ("dr".equals(radiobutton)) {   

			try {
				startDate = df.parse(currentDay);
				endDate = df.parse(currentDay);
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}
		
		//如果查询条件是当周,把开始日期和结束日期分别设置为当周第一天和最后一天的日期.
		if ("dz".equals(radiobutton)) {   
			try {
				startDate = df.parse(firstWeek);
				endDate = df.parse(lastWeek);
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}
		
		//如果查询条件是当月,把开始日期和结束日期分别设置为当月第一天和最后一天的日期.
		if ("dy".equals(radiobutton)) {   
			try {
				startDate = df.parse(firstMonth);
				endDate = df.parse(lastMonth);
			} catch (ParseException e) {
				e.printStackTrace();
			}
		}
		
		//取得String类型的查询开始日期和结束日期。
		if ("rq".equals(radiobutton)) {   
			if(startDate != null){
				startDateS = format1.format(startDate); 
			}
			if(endDate != null){
				endDateS = format1.format(endDate);
			}
			
		}
		
        //取得当前查询会议室预约情况的会议室名称.
		conferensituationName = conferensituationService.getconferensituationName(conferensituationId);
		
		//取得画面显示的记录.
		if ("rq".equals(radiobutton) && startDate == null && endDate == null) {   
		  
			return SUCCESS;		
		
		}else{
		      
		   //表示总记录数
		   items1 = conferensituationService.findTabMrhyylCount(conferensituationId , radiobutton , startDate, endDate , nowDate);
			
		   
		
		   //获得总页数
		   maxPageItems1 = CommonConstants.SIT_MAXPAGEITEM;     //每页显示的记录数 
		   if(items1 == 0 || maxPageItems1 ==0){
			   pageNumber = 1;
		   }
		   else{
			   if(maxPageItems1 != 0){
			     maxIndexPages1 = items1 / maxPageItems1;           //显示的页码数 
				 if((maxIndexPages1 * maxPageItems1) != items1){    //如果不能整除则增加一页
				     maxIndexPages1 = maxIndexPages1 + 1;
				 }
			   }
			   if(maxIndexPages1 == 0){
				   maxIndexPages1 = 1;
			   }
			  
				//获得当页数据
				if(pageNumber == 0){
					pageNumber = 1;
				}
	            
				if(pageNumber == maxIndexPages1 ){
					offsetTo = items1 ;
				}
				else{
					offsetTo = pageNumber * CommonConstants.SIT_MAXPAGEITEM;
				}
				offsetFrom = (pageNumber - 1)* CommonConstants.SIT_MAXPAGEITEM;
				this.conferensituations = conferensituationService.getcsName(
						radiobutton, startDate, endDate, conferensituationId , nowDate , offsetFrom , offsetTo );
			}
		}
		return Action.SUCCESS;
	}
	
	/**
	 * 输入校验
	 */
	@Override
	public void validate() {
		
		if(radiobutton == null){
			this.addFieldError("radiobutton", "查询条件不能都为空");
		}
		
		if(radiobutton !=null){
			if("dr".equals(radiobutton) == false && "dz".equals(radiobutton) == false 
			        && "dy".equals(radiobutton) == false && "rq".equals(radiobutton) == false){
				this.addFieldError("radiobutton", "查询条件不正确");
			}	
		}
	}
	
	public String getConferensituationId() {
		return conferensituationId;
	}
	public void setConferensituationId(String conferensituationId) {
		this.conferensituationId = conferensituationId;
	}
	public ConferensituationService getConferensituationService() {
		return conferensituationService;
	}
	public void setConferensituationService(
			ConferensituationService conferensituationService) {
		this.conferensituationService = conferensituationService;
	}
	public List<SituationInfo> getConferensituations() {
		return conferensituations;
	}
	public void setConferensituations(List<SituationInfo> conferensituations) {
		this.conferensituations = conferensituations;
	}
	public SituationInfo getConferensituation() {
		return conferensituation;
	}
	public void setConferensituation(SituationInfo conferensituation) {
		this.conferensituation = conferensituation;
	}
	public String getRadiobutton() {
		return radiobutton;
	}
	public void setRadiobutton(String radiobutton) {
		this.radiobutton = radiobutton;
	}
	public Date getStartDate() {
		return startDate;
	}
	public void setStartDate(Date startDate) {
		this.startDate = startDate;
	}
	public String getStartDateS() {
		return startDateS;
	}
	public void setStartDateS(String startDateS) {
		this.startDateS = startDateS;
	}
	public Date getEndDate() {
		return endDate;
	}
	public void setEndDate(Date endDate) {
		this.endDate = endDate;
	}
	public String getEndDateS() {
		return endDateS;
	}
	public void setEndDateS(String endDateS) {
		this.endDateS = endDateS;
	}
	public String getConferensituationName() {
		return conferensituationName;
	}
	public void setConferensituationName(String conferensituationName) {
		this.conferensituationName = conferensituationName;
	}
	public String getFirstWeek() {
		return firstWeek;
	}
	public void setFirstWeek(String firstWeek) {
		this.firstWeek = firstWeek;
	}
	public String getLastWeek() {
		return lastWeek;
	}
	public void setLastWeek(String lastWeek) {
		this.lastWeek = lastWeek;
	}
	public String getFirstMonth() {
		return firstMonth;
	}
	public void setFirstMonth(String firstMonth) {
		this.firstMonth = firstMonth;
	}
	public String getLastMonth() {
		return lastMonth;
	}
	public void setLastMonth(String lastMonth) {
		this.lastMonth = lastMonth;
	}
	public String getCurrentDay() {
		return currentDay;
	}
	public void setCurrentDay(String currentDay) {
		this.currentDay = currentDay;
	}
	public String getPageId() {
		return pageId;
	}
	public void setPageId(String pageId) {
		this.pageId = pageId;
	}

	public long getItems1() {
		return items1;
	}

	public void setItems1(long items1) {
		this.items1 = items1;
	}

	public int getMaxPageItems1() {
		return maxPageItems1;
	}

	public void setMaxPageItems1(int maxPageItems1) {
		this.maxPageItems1 = maxPageItems1;
	}

	public long getMaxIndexPages1() {
		return maxIndexPages1;
	}

	public void setMaxIndexPages1(long maxIndexPages1) {
		this.maxIndexPages1 = maxIndexPages1;
	}

	public int getPageNumber() {
		return pageNumber;
	}

	public void setPageNumber(int pageNumber) {
		this.pageNumber = pageNumber;
	}

	public long getOffsetFrom() {
		return offsetFrom;
	}

	public void setOffsetFrom(long offsetFrom) {
		this.offsetFrom = offsetFrom;
	}

	public long getOffsetTo() {
		return offsetTo;
	}

	public void setOffsetTo(long offsetTo) {
		this.offsetTo = offsetTo;
	}

	public List<SituationInfo> getConferensituationsQB() {
		return conferensituationsQB;
	}

	public void setConferensituationsQB(List<SituationInfo> conferensituationsQB) {
		this.conferensituationsQB = conferensituationsQB;
	}

	

	

}

