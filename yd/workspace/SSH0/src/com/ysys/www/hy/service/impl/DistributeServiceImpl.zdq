/*
 * Copyright (c) 2009-2010 by DaLian YuDong Computer System CO.,LTD
 * All rights reserved.
 *      Project: SSH
 *    SubSystem: 会议室管理子系统
 */

package com.ysys.www.hy.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import com.ysys.www.hy.dao.DistributeDao;
import com.ysys.www.hy.dao.condition.TabHysyl;
import com.ysys.www.hy.service.DistributeService;
import com.ysys.www.hy.service.condition.DisInfo;
import com.ysys.www.hy.service.condition.DisUpdateInfo;

/**
 *会议室分布和更改会议室（业务逻辑）
 * 
 * @author fengliang
 * @version 1.00 2009/09/23
 */
public class DistributeServiceImpl implements DistributeService {
	private DistributeDao distributeDaoImpl;

	public void setDistributeDao(DistributeDao distributeDaoImpl) {
		this.distributeDaoImpl = distributeDaoImpl;
	}
	
	/**
	 * 查询会议室
	 * 
	 * @return List<TabHysyl> 会议室相关信息
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<TabHysyl> getdiName() {
		return distributeDaoImpl.findName();
	}

	/**
	 * 删除会议室记录
	 * 
	 * @param hysId
	 *            会议室ID
	 * @return void
	 */
	public void deleteHys(Integer hysId) {
		TabHysyl deleteObj = distributeDaoImpl.findById(hysId);
		distributeDaoImpl.deleteHys(deleteObj);
	}

	/**
	 * 插入和更新会议室记录
	 * 
	 * @param hysId 会议室ID
	 * @param hysMc 会议室名称
	 * @param hysRs 容纳人数
	 * @param hysDh 电话
	 * @param hysSb 设备
	 * @param hysBg 会议室报告
	 * @param hysJs 接口数量
	 * @param hysPx 排序
	 * @param hysQx X起点坐标
	 * @param hysQy Y终点坐标
	 * @param hysZx X起点坐标
	 * @param hysZy Y终点坐标
	 *            
	 * @return void
	 */
	public void saveOrUpdateHys(Integer id, String hysmc, Integer rnrs,
			String dh, String sb, Integer hybgbz, Integer wxjk, Integer sortid,
			Integer imagefromx, Integer imagefromy, Integer imagetox,
			Integer imagetoy) {
		TabHysyl deleteObj = new TabHysyl();
		deleteObj.setId(id);
		deleteObj.setHysmc(hysmc);
		deleteObj.setRnrs(rnrs);
		deleteObj.setDh(dh);
		deleteObj.setSb(sb);
		deleteObj.setHybgbz(hybgbz);
		deleteObj.setWxjk(wxjk);
		deleteObj.setSortid(sortid);
		deleteObj.setImagefromx(imagefromx);
		deleteObj.setImagefromy(imagefromy);
		deleteObj.setImagetox(imagetox);
		deleteObj.setImagetoy(imagetoy);
		Date hysUpdateTime = new Date();
		deleteObj.setUpdatetime(hysUpdateTime);
		distributeDaoImpl.saveOrUpdateHys(deleteObj);
	}

	/**
	 * 获取新建记录时的默认ID和默认排序SortId
	 * 
	 * @param distributes 会议室记录集
	 *           
	 * @return DisUpdateInfo 最大会议室ID+1和排序ID+1
	 */
	public DisUpdateInfo maxHysid(List<TabHysyl> distributes) {
		DisUpdateInfo nextMessage = new DisUpdateInfo();
		Integer maxHysid = 0;
		Integer maxHyspx = 0;
		Iterator<TabHysyl> iter = distributes.iterator();
		TabHysyl tempTahysyl = null;
		//循环中使用的变量
		Integer hysid = null;
		Integer hyspx = null;
		for (; iter.hasNext();) { // 循环取得当前会议室的所有预约记录。
			tempTahysyl = iter.next();
			hysid = tempTahysyl.getId();
			hyspx = tempTahysyl.getSortid();
			if (hysid > maxHysid) {
				maxHysid = hysid;
			}
			if (hyspx > maxHyspx) {
				maxHyspx = hyspx;
			}
		}
		nextMessage.setNextHysid(maxHysid + 1);
		nextMessage.setNextHyspx(maxHyspx + 1);
		return (nextMessage);
	}

	/**
	 *  获取会议室Div的位置、宽度、高度和显示内容
	 * 
	 * @param distributes
	 *           
	 * @return List<DisInfo> 每个会议室标签的属性
	 */
	public List<DisInfo> getDivMessages(List<TabHysyl> distributes) {
		List<DisInfo> result_info = new ArrayList<DisInfo>();
		Iterator<TabHysyl> iter = distributes.iterator();
		TabHysyl tempTahysyl = null;
		//循环中使用的变量。
		Integer hysid = 0;
		Integer imageFromX = 0;
		Integer imageFromY = 0;
		Integer imageToX = 0;
		Integer imageToY = 0;
		Integer divWidth = 0;
		Integer divHeigth = 0;
		
		for (; iter.hasNext();) { // 循环取得当前会议室的所有预约记录。
			// 取得当前记录。
			tempTahysyl = iter.next();
			DisInfo distributelist = new DisInfo();

			hysid = tempTahysyl.getId();
			imageFromX = tempTahysyl.getImagefromx();
			imageFromY = tempTahysyl.getImagefromy();
			imageToX = tempTahysyl.getImagetox();
			imageToY = tempTahysyl.getImagetoy();
			divWidth = imageToX - imageFromX;
			divHeigth = imageToY - imageFromY;

			distributelist.setHysid(hysid);
			distributelist.setImageFromX(imageFromX);
			distributelist.setImageFromY(imageFromY);
			distributelist.setDivWidth(divWidth);
			distributelist.setDivHeigth(divHeigth);

			result_info.add(distributelist);
		}
		return result_info;
	}

	
	/**
	 * 获得当前日期
	 * 
	 * @return Date 当前日期
	 */
	public Date getnowdate() {
		Date nowdate = new Date();
		return nowdate;
	}

}
