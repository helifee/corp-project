/*
 * Copyright (c) 2009-2010 by DaLian YuDong Computer System CO.,LTD
 * All rights reserved.
 *      Project: SSH
 *    SubSystem: 会议室管理子系统
 */

package com.ysys.www.hy.dao.impl;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Query;
import org.hibernate.Session;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;
import com.ysys.www.hy.service.common.CommonConstants;
import com.ysys.www.hy.dao.ConferensituationDao;
import com.ysys.www.hy.service.condition.SitQueryString;

/**
 * 会议室预约情况一览（数据库访问）
 * 
 * @author fengliang
 * @version 1.00 2009/09/23
 */
public class ConferensituationDaoImpl extends HibernateDaoSupport implements
		ConferensituationDao {

	private static final Log log = LogFactory
			.getLog(ConferensituationDaoImpl.class);

	/**
	 * 会议室预约信息的取得
	 * 
	 * @param conferensituationId
	 *            会议室ID
	 * @param radiobutton
	 *            条件类型
	 * @param startInputDate
	 *            查询开始日期
	 * @param endInputDate
	 *            查询结束日期
	 * @param currentDate
	 *            当前日期
	 * @param offsetFrom
	 *            查询记录起点
	 * @param offsetTo
	 *            查询记录终点
	 * @return List 会议室预约相关信息
	 */
	@SuppressWarnings("unchecked")
	public List findTabMrhyyl(String conferensituationId, String radiobutton,
			Date startInputDate, Date endInputDate, Date currentDate,
			Long offsetFrom, Long offsetTo) {

		SitQueryString sitQueryString = findYuyueOrCountString(
				conferensituationId, radiobutton, startInputDate, endInputDate,
				currentDate, CommonConstants.SIT_HQLflag1);
		List yyjlList = null;
		String[] paramsQuanju = sitQueryString.getParamsQuanju();
		Object[] argsQuanju = sitQueryString.getArgsQuanju();
		Session session = null;
		try {
			log.debug("HQL:" + sitQueryString.getWhereString());
			session = getSession();
			Query query = session.createQuery(sitQueryString.getWhereString());
			for (int i = 0; i < paramsQuanju.length; i++) {
				query.setString(paramsQuanju[i], String.valueOf(argsQuanju[i]));
			}
			query.setFirstResult(offsetFrom.intValue());
			query.setMaxResults(offsetTo.intValue() - offsetFrom.intValue());
			yyjlList = query.list();
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
		return yyjlList;
	}

	/**
	 * 总的预约记录数的取得
	 * 
	 * @param conferensituationId
	 *            会议室ID
	 * @param radiobutton
	 *            条件类型
	 * @param startInputDate
	 *            查询开始日期
	 * @param endInputDate
	 *            查询结束日期
	 * @param currentDate
	 *            当前日期
	 * @return Long 预约记录的总条数
	 */
	@SuppressWarnings("unchecked")
	public Long findTabMrhyylCount(String conferensituationId,
			String radiobutton, Date startInputDate, Date endInputDate,
			Date currentDate) {

		Long total = null;
		List<Long> countList = null;
		SitQueryString sitQueryString = findYuyueOrCountString(
				conferensituationId, radiobutton, startInputDate, endInputDate,
				currentDate, CommonConstants.SIT_HQLflag2);

		countList = excuteHql(sitQueryString.getWhereString(), sitQueryString
				.getParamsQuanju(), sitQueryString.getArgsQuanju());

		if (countList != null) {
			Iterator<Long> iter = countList.iterator();
			iter.hasNext();
			total = iter.next();
		}
		return total;
	}

	/**
	 * 每个预约中未回执者或者已回执者或者所有参加人名单的取得
	 * 
	 * @param conferensituationId
	 *            会议室ID
	 * @param radiobutton
	 *            条件类型
	 * @param startInputDate
	 *            查询开始日期
	 * @param endInputDate
	 *            查询结束日期
	 * @param currentDate
	 *            当前日期
	 * @param hwqflag
	 *            是否已回执 0：未回执；1：已回执；2：所有参加者
	 * @return List 参加会议人员的相关信息
	 */
	@SuppressWarnings("unchecked")
	public List findTabMrhycjz(String conferensituationId,
			String radiobuttonString, Date startInputDate, Date endInputDate,
			int hwqflag, Date currentDate) {
		log
				.debug("-------------findTabMrhycjz------------");

		String hwqString = null;
		if (hwqflag == CommonConstants.SIT_HZflag0) {
			hwqString = "   and t.hzqr = 0 ";
		}
		if (hwqflag == CommonConstants.SIT_HZflag1) {
			hwqString = "   and t.hzqr = 1 ";
		}
		if (hwqflag == CommonConstants.SIT_HZflag2) {
			hwqString = "  ";
		}

		List listReturn = null;

		String selectString = " select t.id.hyrq , t.id.hykssj , t.id.hysid , t.id.cjzid , u.empName"
				+ " from  TabMrhycjz t , Tempinfo u ";
		String whereString = " where t.id.hysid = :conferensituationId"
				+ " and t.id.cjzid = u.id  ";
		String orderbyString = " order by t.id.hyrq , t.id.hykssj";
		String subTjWhereString = getWhereString(radiobuttonString,
				startInputDate, endInputDate);
		String hqlString = selectString + whereString + subTjWhereString
				+ hwqString + orderbyString;

		// 查询处理。
		listReturn = getListTotal(hqlString, selectString, orderbyString,
				hwqString, conferensituationId, currentDate, startInputDate,
				endInputDate, radiobuttonString);
		return listReturn;
	}

	/**
	 *每个预约的已回执参加者的数目
	 * 
	 * @param conferensituationId
	 *            会议室ID
	 * @param radiobutton
	 *            条件类型
	 * @param startInputDate
	 *            查询开始日期
	 * @param endInputDate
	 *            查询结束日期
	 * @param currentDate
	 *            当前日期
	 * @return List 参加会议人员的相关信息
	 */
	@SuppressWarnings("unchecked")
	public List findSumHzqr(String conferensituationId,
			String radiobuttonString, Date startInputDate, Date endInputDate,
			Date currentDate) {
		log
				.debug("-------------findSumHzqr------------");

		List listReturn = null;

		String selectString = " select t.id.hyrq , t.id.hykssj , SUM(t.hzqr)as SmHzqr "
				+ " from  TabMrhycjz t ";
		String whereString = " where t.id.hysid = :conferensituationId";
		String goByString = " group by t.id.hyrq , t.id.hykssj  "
				+ " order by t.id.hyrq , t.id.hykssj";
		String subTjWhereString = getWhereString(radiobuttonString,
				startInputDate, endInputDate);
		String hqlString = selectString + whereString + subTjWhereString
				+ goByString;

		listReturn = getListTotal(hqlString, selectString, goByString, "",
				conferensituationId, currentDate, startInputDate, endInputDate,
				radiobuttonString);
		return listReturn;
	}

	/**
	 *当前会议室名称取得
	 * 
	 * @param conferensituationId
	 *            会议室ID
	 * @return List 会议室名称
	 */
	@SuppressWarnings("unchecked")
	public List findHysName(String conferensituationId) {
		log
				.debug("-------------findHysName------------");
		String queryString = "select t.hysmc " + "from  TabHysyl t "
				+ "where t.id = " + conferensituationId + "order by t.id  ";
		try {
			log.debug("HQL:" + queryString);
			return this.getHibernateTemplate().find(queryString);
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}

	/**
	 *按条件取得查询记录
	 * 
	 * @param hqlString hql语句
	 * @param selectString select语句
	 * @param orderbyString orderby语句
	 * @param hwqString 是否回执条件语句
	 * @param conferensituationId 会议室ID
	 * @param currentDate 当前日期
	 * @param startInputDate 开始日期
	 * @param endInputDate 结束日期
	 * @param radiobuttonString 查询类型         
	 * @return List 按条件取得查询记录
	 */
	@SuppressWarnings("unchecked")
	private List getListTotal(String hqlString, String selectString,
			String orderbyString, String hwqString, String conferensituationId,
			Date currentDate, Date startInputDate, Date endInputDate,
			String radiobuttonString) {
		Integer conferensituationIdInteger = Integer
				.parseInt(conferensituationId);
		List listReturn = null;
		//当日查询
		if (radiobuttonString.equals("dr")) {
			listReturn = getListDr(hqlString, conferensituationIdInteger,
					currentDate);
		}
		
		//当周查询
		if (radiobuttonString.equals("dz")) {
			listReturn = getListDz(selectString, orderbyString, hwqString,
					conferensituationIdInteger, currentDate);
		}
		//当月查询
		if (radiobuttonString.equals("dy")) {
			listReturn = getListDy(hqlString, conferensituationIdInteger,
					currentDate);
		}

		//日期查询
		if (radiobuttonString.equals("rq")) {
			listReturn = getListRq(hqlString, conferensituationIdInteger,
					currentDate, startInputDate, endInputDate);
		}
		return listReturn;

	}

	/**
	 *执行当日条件下的hql语句
	 * 
	 * @param hqlString hql语句
	 * @param conferensituationId 会议室ID
	 * @param currentDate 当前日期
	 * @return List 当日条件下查询记录
	 */
	@SuppressWarnings("unchecked")
	private List getListDr(String hqlString,
			Integer conferensituationId, Date currentDate) {
		String[] params = { "conferensituationId", "nowdate" };
		Object[] args = { conferensituationId, currentDate };
		List listReturn = excuteHql(hqlString, params, args);
		return listReturn;
	}

	/**
	 *执行当周条件下的hql语句
	 * 
	 * @param selectString select语句
	 * @param orderbyString orderby语句
	 * @param hwqString 是否回执条件语句
	 * @param conferensituationId 会议室ID
	 * @param currentDate 当前日期     
	 * @return List 当周条件下查询记录
	 */
	@SuppressWarnings("unchecked")
	private List getListDz(String selectString, String orderbyString,
			String hwqString, Integer conferensituationId, Date currentDate) {
		String dateOfMonDayToSunDayOfCurrentWeek = getCurrentDZ(currentDate);
		String hqlString = null;
		hqlString = selectString + " where  t.id.hysid = "
				+ conferensituationId;
		if ("".equals(hwqString) != true) {
			hqlString = hqlString + hwqString + " and t.id.cjzid = u.id  ";
		}
		hqlString = hqlString + " and t.id.hyrq in ("
				+ dateOfMonDayToSunDayOfCurrentWeek + ")" + orderbyString;

		String[] params = {};
		Object[] args = {};
		List listReturn = excuteHql(hqlString, params, args);
		return listReturn;
	}

	/**
	 *执行当月条件下的hql语句
	 * 
	 * @param hqlString hql语句
	 * @param conferensituationId 会议室ID
	 * @param currentDate 当前日期       
	 * @return List 当月条件下的查询记录
	 */
	@SuppressWarnings("unchecked")
	private List getListDy(String hqlString,
			Integer conferensituationId, Date currentDate) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(currentDate);
		Integer yearInteger = calendar.get(Calendar.YEAR);
		Integer monthInteger = calendar.get(Calendar.MONTH) + 1;
		String[] params = { "conferensituationId", "yearInteger",
				"monthInteger" };
		Object[] args = { conferensituationId, yearInteger, monthInteger };
		List listReturn = excuteHql(hqlString, params, args);
		return listReturn;
	}

	/**
	 *执行日期条件下的hql语句
	 * 
	 * @param hqlString hql语句
	 * @param conferensituationId 会议室ID
	 * @param currentDate 当前日期
	 * @param startInputDate 开始日期
	 * @param endInputDate 结束日期    
	 * @return List 日期条件下的查询记录
	 */
	@SuppressWarnings("unchecked")
	private List getListRq(String hqlString,
			Integer conferensituationId, Date currentDate,
			Date startInputDate, Date endInputDate) {
		List listReturn = null;
		
		//开始日期和结束日期都不为空。
		if (startInputDate != null && endInputDate != null) {
			String[] params = { "conferensituationId", "startDate", "endDate" };
			Object[] args = { conferensituationId, startInputDate,
					endInputDate };
			listReturn = excuteHql(hqlString, params, args);
		}

		//开始日期不为空和结束日期为空。
		if (startInputDate != null && endInputDate == null) {
			String[] params = { "conferensituationId", "startDate" };
			Object[] args = { conferensituationId, startInputDate };
			listReturn = excuteHql(hqlString, params, args);
		}

		//开始日期为空和结束日期不为空
		if (startInputDate == null && endInputDate != null) {
			String[] params = { "conferensituationId", "endDate" };
			Object[] args = { conferensituationId, endInputDate };
			listReturn = excuteHql(hqlString, params, args);
		}
		return listReturn;
	}

	/**
	 *预约记录查询和总记录数量查询的hql语句作成
	 * 
	 * @param conferensituationId 会议室ID
	 * @param currentDate 当前日期
	 * @param startInputDate 开始日期
	 * @param endInputDate 结束日期
	 * @param radiobutton 查询类型 
	 * @param flag 1：查询记录；2：查询总记录数        
	 * @return SitQueryString 预约记录查询和总记录数量查询的hql语句
	 */
	private SitQueryString findYuyueOrCountString(String conferensituationId,
			String radiobutton, Date startInputDate, Date endInputDate,
			Date currentDate, int flag) {
		Calendar calendar = Calendar.getInstance();
		SimpleDateFormat matter = new SimpleDateFormat("yyyy-MM-dd");
		String currentString = null;
		String startString = null;
		String endString = null;
		if (currentDate != null) {
			currentString = matter.format(currentDate);
		}
		if (startInputDate != null) {
			startString = matter.format(startInputDate);
		}
		if (endInputDate != null) {
			endString = matter.format(endInputDate);
		}
		SitQueryString sitQueryString = new SitQueryString();
		String[] paramsQuanju = null;
		Object[] argsQuanju = null;

		String selectString = null;
		if (flag == CommonConstants.SIT_HQLflag1) {
			selectString = " select t.id.hyrq , t.id.hykssj ,t.hyjssj  , t.id.hysid , t.hyzt  , "
					+ " u.empName , t.cjzrs , t.zqhyqf , t.yyrid , t.bmbz "
					+ " from  TabMrhyyl t , Tempinfo u ";
		}
		if (flag == CommonConstants.SIT_HQLflag2) {
			selectString = " select  count(*) "
					+ " from  TabMrhyyl t , Tempinfo u ";
		}
		String whereString = " where t.id.hysid = :conferensituationId  and t.yyrid = u.id  ";
		String orderbyString = " order by t.id.hyrq , t.id.hykssj ";
		String subTjWhereString = getWhereString(radiobutton, startInputDate,
				endInputDate);
		String hqlString = selectString + whereString + subTjWhereString
				+ orderbyString;
		Integer conferensituationIdInteger = Integer
				.parseInt(conferensituationId);
		
		//当日查询
		if ("dr".equals(radiobutton) == true) {
			String[] params = { "conferensituationId", "nowdate" };
			paramsQuanju = params;
			if (flag == CommonConstants.SIT_HQLflag1) {
				Object[] args = { conferensituationIdInteger, currentString };
				argsQuanju = args;
			}
			if (flag == CommonConstants.SIT_HQLflag2) {
				Object[] args = { conferensituationIdInteger, currentDate };
				argsQuanju = args;
			}
		}
		
		//当周查询
		if ("dz".equals(radiobutton) == true) {
			String dateOfCurrentWeek = getCurrentDZ(currentDate);
			hqlString = selectString + "where t.id.hysid = "
					+ conferensituationId + " and t.yyrid = u.id  "
					+ " and t.id.hyrq in (" + dateOfCurrentWeek + ") "
					+ orderbyString;
			String[] params = {};
			paramsQuanju = params;
			Object[] args = {};
			argsQuanju = args;
		}
		
		//当月查询
		if ("dy".equals(radiobutton) == true) {
			calendar.setTime(currentDate);
			Integer yearInteger = calendar.get(Calendar.YEAR);
			Integer monthInteger = calendar.get(Calendar.MONTH) + 1;

			String[] params = { "conferensituationId", "yearInteger",
					"monthInteger" };
			paramsQuanju = params;
			Object[] args = { conferensituationIdInteger, yearInteger,
					monthInteger };
			argsQuanju = args;
		}

		if ("rq".equals(radiobutton) == true) {
			//开始日期和结束日期都不为空
			if (startInputDate != null && endInputDate != null) {
				String[] params = { "conferensituationId", "startDate",
						"endDate" };
				paramsQuanju = params;
				if (flag == CommonConstants.SIT_HQLflag1) {
					Object[] args = { conferensituationIdInteger, startString,
							endString };
					argsQuanju = args;
				}
				if (flag == CommonConstants.SIT_HQLflag2) {
					Object[] args = { conferensituationIdInteger,
							startInputDate, endInputDate };
					argsQuanju = args;
				}
			}

			//开始日期不为空和结束日期为空
			if (startInputDate != null && endInputDate == null) {
				String[] params = { "conferensituationId", "startDate" };
				paramsQuanju = params;
				if (flag == CommonConstants.SIT_HQLflag1) {
					Object[] args = { conferensituationIdInteger, startString };
					argsQuanju = args;
				}
				if (flag == CommonConstants.SIT_HQLflag2) {
					Object[] args = { conferensituationIdInteger,
							startInputDate };
					argsQuanju = args;
				}
			}

			//开始日期为空和结束日期不为空
			if (startInputDate == null && endInputDate != null) {
				String[] params = { "conferensituationId", "endDate" };
				paramsQuanju = params;
				if (flag == CommonConstants.SIT_HQLflag1) {
					Object[] args = { conferensituationIdInteger, endString };
					argsQuanju = args;
				}
				if (flag == CommonConstants.SIT_HQLflag2) {
					Object[] args = { conferensituationIdInteger, endInputDate };
					argsQuanju = args;
				}
			}
		}

		sitQueryString.setWhereString(hqlString);
		sitQueryString.setParamsQuanju(paramsQuanju);
		sitQueryString.setArgsQuanju(argsQuanju);

		return sitQueryString;
	}

	/**
	 *各种情况下的条件语句
	 * 
	 * @param startInputDate 开始日期
	 * @param endInputDate 结束日期
	 * @param radiobutton查询类型         
	 * @return String Where语句
	 */
	private String getWhereString(String radiobutton, Date startInputDate,
			                        Date endInputDate) {

		String whereString = null;
		if ("dr".equals(radiobutton) == true) {
			whereString = " and t.id.hyrq = :nowdate ";
		}
		if ("dz".equals(radiobutton) == true) {
			//不在此处理
		}
		if ("dy".equals(radiobutton) == true) {
			whereString = " and year(t.id.hyrq) = :yearInteger "
					+ " and month(t.id.hyrq) = :monthInteger ";
		}
		if ("rq".equals(radiobutton) == true) {
			//如果日期查询条件的开始日期和结束日期都不为空时的处理。
			if (startInputDate != null && endInputDate != null) {
				whereString = " and t.id.hyrq >= :startDate "
						+ " and t.id.hyrq <= :endDate ";
			}
			//如果日期查询条件的开始日期不为空和结束日期为空时的处理。
			if (startInputDate != null && endInputDate == null) {
				whereString = " and t.id.hyrq >= :startDate ";
			}
			//如果日期查询条件的开始日期为空和结束日期不为空时的处理。
			if (startInputDate == null && endInputDate != null) {
				whereString = " and t.id.hyrq <= :endDate ";
			}
		}
		return whereString;
	}

	/**
	 * 当周日期集合字符串。
	 */
	/**
	 *按条件取得查询记录
	 * 
	 * @param hqlString hql语句
	 * @param selectString select语句
	 * @param orderbyString orderby语句
	 * @param hwqString 是否回执条件语句
	 * @param conferensituationId 会议室ID
	 * @param currentDate 当前日期
	 * @param startInputDate 开始日期
	 * @param endInputDate 结束日期
	 * @param radiobuttonString 查询类型         
	 * @return List 按条件取得查询记录
	 */
	private String getCurrentDZ(Date currentDate) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(currentDate);
		SimpleDateFormat matter = new SimpleDateFormat("yyyy-MM-dd");
		Integer weekdayInteger = calendar.get(Calendar.DAY_OF_WEEK) - 1;
		Integer datesum = -weekdayInteger;
		//日历翻页
		calendar.add(Calendar.DAY_OF_MONTH, datesum); 
		String weekDate1 = matter.format(calendar.getTime());
		//日历翻页
		calendar.add(Calendar.DAY_OF_MONTH, 1);
		String weekDate2 = matter.format(calendar.getTime());
		//日历翻页
		calendar.add(Calendar.DAY_OF_MONTH, 1);
		String weekDate3 = matter.format(calendar.getTime());
		//日历翻页
		calendar.add(Calendar.DAY_OF_MONTH, 1);
		String weekDate4 = matter.format(calendar.getTime());
		//日历翻页
		calendar.add(Calendar.DAY_OF_MONTH, 1);
		String weekDate5 = matter.format(calendar.getTime());
		//日历翻页
		calendar.add(Calendar.DAY_OF_MONTH, 1);
		String weekDate6 = matter.format(calendar.getTime());
		//日历翻页
		calendar.add(Calendar.DAY_OF_MONTH, 1);
		String weekDate7 = matter.format(calendar.getTime());

		String dateOfCurrentWeek = "'" + weekDate1 + "' , '" + weekDate2
				+ "' , '" + weekDate3 + "' , '" + weekDate4 + "' , '"
				+ weekDate5 + "' , '" + weekDate6 + "' , '" + weekDate7 + "'  ";
		return dateOfCurrentWeek;
	}

	/**
	 *执行带参数hql语句
	 * 
	 * @param hqlString hql语句
	 * @param params 参数名称
	 * @param args 参数值   
	 * @return List 查询结果集
	 */
	@SuppressWarnings("unchecked")
	private List excuteHql(String hqlString, String[] params, Object[] args) {
		try {
			log.debug("HQL:" + hqlString);
			return this.getHibernateTemplate().findByNamedParam(hqlString,
					params, args);
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
	}
}
