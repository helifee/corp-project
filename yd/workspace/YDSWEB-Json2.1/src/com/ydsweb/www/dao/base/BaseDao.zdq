/*
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: YDSWEB
 *    SubSystem: 远东公司内部网
 */

package com.ydsweb.www.dao.base;

import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.springframework.orm.ibatis.SqlMapClientTemplate;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

/**
 * 数据库访问基类
 * @author 远东)zhaodong
 * @version 1.00 2009/10/21
 */

public abstract class BaseDao extends SqlMapClientDaoSupport {

	protected static final Log log = LogFactory.getLog(BaseDao.class);
	protected SqlMapClientTemplate smcTemplate = this.getSqlMapClientTemplate();

	protected Object insert(String key, Object bean) throws RuntimeException {
		try {

			Object result;
			long beforetime = System.currentTimeMillis();
			result = smcTemplate.insert(key, bean);
			if (log.isDebugEnabled())
				log.debug("Insert sql execute completed! "
						+ String.valueOf(System.currentTimeMillis()
								- beforetime) + " Millisecond");

			return result;
		} catch (Throwable e) {
			throw new RuntimeException(null, e);

		}
	}

	protected int update(String key, Object bean) throws RuntimeException {
		try {

			int result;
			long beforetime = System.currentTimeMillis();
			result = smcTemplate.update(key, bean);
			if (log.isDebugEnabled())
				log.debug("Update sql execute completed! "
						+ String.valueOf(System.currentTimeMillis()
								- beforetime) + " Millisecond");

			return result;

		} catch (Throwable e) {
			throw new RuntimeException(null, e);
		}
	}

	protected int delete(String key, Object bean) throws RuntimeException {
		try {

			int result;
			long beforetime = System.currentTimeMillis();
			result = smcTemplate.delete(key, bean);
			if (log.isDebugEnabled())
				log.debug("Delete sql execute completed! "
						+ String.valueOf(System.currentTimeMillis()
								- beforetime) + " Millisecond");

			return result;

		} catch (Throwable e) {
			throw new RuntimeException(null, e);
		}
	}

	@SuppressWarnings("unchecked")
	protected List queryForList(String key, Object bean)
			throws RuntimeException {
		try {

			List result;
			long beforetime = System.currentTimeMillis();
			result = smcTemplate.queryForList(key, bean);
			if (log.isDebugEnabled())
				log.debug("Select sql execute completed! "
						+ String.valueOf(System.currentTimeMillis()
								- beforetime) + " Millisecond");

			return result;
		} catch (Throwable e) {
			throw new RuntimeException(null, e);
		}
	}

	protected Object queryForObject(String key, Object bean)
			throws RuntimeException {
		try {

			Object result;
			long beforetime = System.currentTimeMillis();
			result = smcTemplate.queryForObject(key, bean);
			if (log.isDebugEnabled())
				log.debug("Select sql execute completed! "
						+ String.valueOf(System.currentTimeMillis()
								- beforetime) + " Millisecond");

			return result;
		} catch (Throwable e) {
			throw new RuntimeException(null, e);
		}
	}

	@SuppressWarnings("unchecked")
	protected Map queryForMap(String key, Object bean, String mapKey)
			throws RuntimeException {
		try {

			Map result;
			long beforetime = System.currentTimeMillis();
			result = smcTemplate.queryForMap(key, bean, mapKey);
			if (log.isDebugEnabled())
				log.debug("Select sql execute completed! "
						+ String.valueOf(System.currentTimeMillis()
								- beforetime) + " Millisecond");
			return result;
		} catch (Throwable e) {
			throw new RuntimeException(null, e);
		}
	}

}
