<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
	   default-autowire="byName" default-lazy-init="false">


		
	<!-- 数据库连接池c3p0配置 -->
	<bean id="dataSource"
        class="com.mchange.v2.c3p0.ComboPooledDataSource"
        destroy-method="close">
        <property name="driverClass">
            <value>com.mysql.jdbc.Driver</value>
        </property>
        <property name="jdbcUrl">
            <value>jdbc:mysql://localhost:3306/test?zeroDateTimeBehavior=convertToNull</value>
        </property>
        <property name="properties">
            <props>
                <prop key="c3p0.minPoolSize">2</prop>
                <prop key="c3p0.maxPoolSize">50</prop>
				<!-- 获得连接的超时时间,如果超过这个时间,会抛出异常，单位毫秒 -->
                <prop key="c3p0.timeout">6000</prop> <!-- seconds --><!-- default: 0 -->
				<!-- 最大的PreparedStatement的数量 -->
                <prop key="c3p0.max_statement">100</prop> <!-- default: 0 -->
                <prop key="c3p0.acquire_increment">1</prop> <!-- default: 1 -->
                <!-- 每隔120秒检查连接池里的空闲连接 ，单位是秒-->
                <prop key="c3p0.idle_test_period">120</prop>
                <prop key="c3p0.testConnectionOnCheckout">true</prop>
				<!-- 每次都验证连接是否可用 -->
                <prop key="c3p0.validate">true</prop> 
                <!-- 当连接池里面的连接用完的时候，C3P0一下获取的新的连接数 -->
                <prop key="c3p0.acquire_increment">2</prop>
                <prop key="user">root</prop>
                <prop key="password">root</prop>
				
            </props>
        </property>
	</bean>  
     
	<!-- 支持 @Transactional 标记 -->
<!--	<tx:annotation-driven/>-->

	<!-- 支持 @AspectJ 标记-->
<!--	<aop:aspectj-autoproxy/>-->

	<!-- 以AspectJ方式 定义 AOP -->
	<aop:config proxy-target-class="true">
<!--		<aop:advisor pointcut="execution(* javacommon.base.BaseManager.*(..))" advice-ref="txAdvice"/>
-->
		<aop:advisor pointcut="execution(* com.*..*.service.impl.*..*.*ServiceImpl.*(..))" advice-ref="txAdvice"/>
	</aop:config>

	<!-- 基本事务定义,使用transactionManager作事务管理,默认get* find*方法的事务为readonly,其余方法按默认设置.
			 默认的设置请参考Spring文档事务一章. -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true"/>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="query*" read-only="true"/>
			<tx:method name="*" read-only="false"/>
		</tx:attributes>
	</tx:advice>
	
	<!-- 用于持有ApplicationContext,可以使用ApplicationContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->
	<!-- <bean class="cn.org.rapid_framework.util.ApplicationContextHolder"/> -->
	
</beans>