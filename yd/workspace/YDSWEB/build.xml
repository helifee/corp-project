<?xml version="1.0" encoding="UTF-8"?>
<!--  ===================================================================
        build.xml YDSWEB Build文件
        add by xieyujun 2010/03/02
      ===================================================================
-->
<project name="YDSWEB" basedir="." default="usage">
	<description>
       Notes:YDSWEB ant build 文件，具体说明请参照main/buildreadme.txt。
    </description>
	<!-- 主要的系统环境属性 -->
	<!-- 属性文件，+++未使用+++
    <property file="build.properties"/>
     -->
	<property environment="env" />
	<!-- 取window,unix...的环境变量 -->
	<property name="java.home" value="${env.JAVA_HOME}" />
	<!-- =============== 各工具环境属性 start =============== -->
	<property name="ant.home" value="${env.ANT_HOME}" />
	<!-- tomacat路径 -->
	<property name="tomcat.home" value="D:/javasoft/tomcat" />
	<!-- 生成jsdoc -->
	<property name="jsdoctoolkit.home"
	          value="D:/javasoft/jsdoc_toolkit-2.3.2" />
	<!-- 检查代码 CheckStyle -->
	<property name="checkstyle.home" value="D:/javasoft/checkstyle-5.0" />
	<!-- 检查代码 Findbugs -->
	<property name="findbugs.home" value="D:/javasoft/findbugs-1.3.9-rc1" />
	<!-- 检查代码 PMD -->
	<property name="pmd.home" value="D:/javasoft/pmd-4.2.5" />
	<!-- doxygen javadoc-->
	<property name="doxygen.home" value="D:/javasoft/doxygen" />
	<property name="ant.doxygen.home" value="D:/javasoft/ant-doxygen-bin-1.6" />
	<!-- statsvn -->
	<property name="statsvn.home" value="D:/javasoft/statsvn-0.7.0" />
	<!-- EMMA -->
	<property name="emma.home" value="D:/javasoft/emma-2.0.5312" />
	<!-- selenium server -->
	<property name="selenium.server.home"
	          value="D:/javasoft/selenium-remote-control-1.0.3/selenium-server-1.0.3" />
	<!-- selenium server -->

	<property name="selenium.testerror.home" value="D:/testError" />
	<!-- =============== 各工具环境属性 end  =============== -->

	<property name="tomcat.host" value="localhost" />
	<property name="tomcat.server" value="localhost" />
	<property name="tomcat.port" value="8080" />

	<property name="selenium.host" value="localhost" />
	<property name="selenium.port" value="4444" />


	<property name="webapp" value="${tomcat.home}/webapps" />
	<property name="webapp.name" value="YDSWEB" />
	<!-- 发布到dc的war文件名 -->
	<property name="webapp.name.test1" value="YDSWEB1" />
	<property name="webapp.name.test2" value="YDSWEB2" />
	<property name="webapp.name.test3" value="YDSWEB3" />
	
	<!-- 发布jar文件名 -->
	<property name="project.name" value="YDSWEB" />

	<property name="src.dir" value="src" />
	<property name="src.junit" value="test/src" />
	<!-- build环境属性 -->
	<property name="build.dir" value="build" />
	<property name="build.docs" value="${build.dir}/docs" />
	<property name="build.docs.api" value="${build.docs}/api" />
	<property name="build.docs.jsdoc" value="${build.docs}/jsdoc" />
	<property name="build.lib" value="${build.dir}/lib" />
	<property name="build.report" value="${build.dir}/report" />
	<property name="build.report.emma" value="${build.report}/emma" />
	<property name="build.report.emma.coverage"
	          value="${build.report.emma}/coverage" />
	<property name="build.report.emma.junit"
              value="${build.report.emma}/junit" />
	<property name="build.report.function" value="${build.report}/function" />
	<property name="build.report.function.dbdata"
	          value="${build.report}/function_dbdata" />
	<property name="build.report.function.testerro"
	          value="${build.report}/function_testerro" />
	<property name="build.report.junit" value="${build.report}/junit" />
	<property name="build.report.checkstyle"
	          value="${build.report}/checkstyle" />
	<property name="build.report.findbugs" value="${build.report}/findbugs" />
	<property name="build.report.pmd" value="${build.report}/pmd" />
	<property name="build.report.statsvn" value="${build.report}/statsvn" />
	<property name="dist.dir" value="dist" />
	<property name="build.war.dir" value="${build.dir}/war" />
	<!-- 事先准备的配置文件，脚本等 -->
	<property name="main.dir" value="main" />
	<property name="main.config.dir" value="${main.dir}/config" />
	<property name="main.script.dir" value="${main.dir}/script" />
	<property name="webcontent.dir" value="WebRoot" />
	<property name="js.src.dir" value="${webcontent.dir}/js" />
	<!-- 测试用属性文件名 ，格式[host]-[dbscheme] -->
	<property name="jdbc-default.file" value="jdbc.properties" />
	<property name="jdbc-dc-test.file" value="jdbc-dc-test.properties" />
	<property name="jdbc-dc-test1.file" value="jdbc-dc-test1.properties" />
	<property name="jdbc-dc-test2.file" value="jdbc-dc-test2.properties" />
	<property name="jdbc-dc-test3.file" value="jdbc-dc-test3.properties" />
	<property name="jdbc-ydswebtest-ydstest.file" value="jdbc-ydswebtest-ydstest.properties" />
	<property name="default-struts-xml.file" value="struts.xml" />
	<property name="dc-struts-xml.file" value="struts.xml" />
	
	<property name="log4j-default.file" value="log4j.properties" />
	<property name="log4j-dc-test.file" value="log4j-dc-test.properties" />
	<property name="log4j-dc-test1.file" value="log4j-dc-test1.properties" />
	<property name="log4j-dc-test2.file" value="log4j-dc-test2.properties" />
	<property name="log4j-dc-test3.file" value="log4j-dc-test3.properties" />
	<!-- java doc 输出包
    <property name="build.classes" value="${build.dir}/classes" />
         -->
	<property name="build.classes" value="${webcontent.dir}/WEB-INF/classes" />
	<property name="webcontentlib.dir" value="${webcontent.dir}/WEB-INF/lib" />
	<property name="build.war.weblib.dir"
	          value="${build.war.dir}/WEB-INF/lib" />
	<!-- java doc 输出包 -->
	<property name="javadoc.package" value="com.*" />
	<property name="webapp.dist" value="${dist.dir}/webapps" />

	<!-- build 出错是否继续 true：停止,false：继续不报错误 -->
	<property name="failonerror" value="true" />
	
	<!-- project classpath -->
	<path id="project.classpath">
		<!-- 
        <pathelement path="${env.CLASSPATH}" />
    -->
		<fileset dir="${java.home}">
			<include name="lib/*.jar" />
		</fileset>
		<fileset dir="${tomcat.home}">
			<include name="lib/*.jar" />
		</fileset>
		<fileset dir="${ant.home}">
			<include name="lib/*.jar" />
		</fileset>
		<fileset dir="${webcontentlib.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>
	<!-- 定义不同的日期格式   -->
	<tstamp>
		<format property="touch.time.mm"  pattern="yyyyMMddHHmm"
		        offset="-0"
		        unit="hour" />
	</tstamp>
	<tstamp>
		<format property="touch.time"
		        pattern="yyyy/MM/dd HH:mm:ss.SSS"
		        offset="-0"
		        unit="hour" />
	</tstamp>
	<!-- ant扩展 -->
	<taskdef resource="net/sf/antcontrib/antlib.xml" />
	<!-- 帮助信息 -->
	<target name="usage" description="the help">
		<echo message="usage: ant build -logfile build.log" />
		<echo message="usage: ant build -Dfailonerror=false" />
		<echo message="------------------------------------------------------" />
		<echo message="YDSWEB Available targets are:" />
		<echo message="usage              --> help(default)" />
		<echo message="clean              --> Clean output dirs" />
		<echo message="------------build-------------------------------------" />
		<echo message="build              --> Compile main Java sources and copy libraries" />
		<echo message="buildjar           --> Compile main Java sources and copy libraries" />
		<echo message="deploy             --> Deploy the web application(files) ++ depends build" />
		<echo message="warfile            --> Build the web application archive ++ depends buildjar ++not test" />
		<echo message="------------test--------------------------------------" />
		<echo message="junit              --> Run junit,                        ++ depends build" />
		<echo message="emma-report        --> EMMA Coverage Report              ++ depends build emma-junit" />
		<echo message="function-test      --> Run webtest,                      ++ depends build deploy etc" />
		<echo message="function-emma-test --> Run webtest and emma report       ++ depends build deploy etc" />
		<echo message="------------server------------------------------------" />
		<echo message="tomcat-start       --> Start tomcat                     ++ depends check-port" />
		<echo message="tomcat-stop        --> Stop tomcat" />
		<echo message="selenium-start     --> Start selenium" />
		<echo message="selenium-stop      --> Stop selenium" />
		<echo message="------------doc---------------------------------------" />
		<echo message="javadoc            --> Create javadocs by javadoc" />
		<echo message="doxygen            --> Create javadocs by doxygen       ++ long time" />
		<echo message="jsdoc              --> Create javaScript docs" />
		<echo message="statsvn            --> Create source stats from svn server ++ deplends svn-log" />
		<echo message="--------------- Souce Check --------------------------" />
		<echo message="check-src          --> call checkstyle,pmd,findbugs" />
		<echo message="checkstyle         --> checkstyle" />
		<echo message="pmd                --> pmd                              ++ depends javadoc" />
		<echo message="findbugs           --> findbugs,                        ++ depends build" />
		<echo message="findbugs-all       --> Run findbugs, findbugs-history   ++ depends build" />
		<echo message="--------------- Souce Check --------------------------" />
		<echo message="all                --> All build Clean, build, warfile etc." />
		<echo message="ant -verbose       --> be extra verbose" />
		<echo message="" />
	</target>
	<!--
    ===================================================================
           清除任务
    ===================================================================
      -->
	<target name="clean" description="Clean output dirs (build, weblib, dist)">
		<delete file="build.log" failonerror="false" />
		<delete dir="${build.war.weblib.dir}" failonerror="false" />
		<delete dir="${build.war.dir}" failonerror="false" />
		<!-- deletes all files and subdirectories of build, without build itself.
             Ant wont delete .svn directories and the files in it -->
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${build.classes}"
			         includes="**/*"
			         defaultexcludes="true" />
			<!-- 保留 findbug 历史信息,如要保留，就不能删除build.dir目录 -->
			<fileset dir="${build.report.findbugs}"
			         excludes="**/*"
			         defaultexcludes="true" />
			<fileset dir="${dist.dir}" includes="**/*" defaultexcludes="true" />
		</delete>
    	<delete dir="${build.dir}" failonerror="false" />

		<tstamp />
		<echo message="${touch.time}">
		</echo>
	</target>
	<!--
    ===================================================================
          编译java源文件
    ===================================================================
      -->
	<target name="build"
	        description="Compile main source tree java files into class files">
		<tstamp>
			<format property="start.time" pattern="yyyy/MM/dd HH:mm:ss.SSS" />
		</tstamp>
		<echo message="build start ${start.time}" />
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${build.classes}"
			         includes="**/*"
			         defaultexcludes="true" />
		</delete>
		<mkdir dir="${build.classes}" />
		<copy todir="${build.classes}">
			<fileset dir="${src.dir}">
				<exclude name="**/*.java" />
			</fileset>
			<fileset dir="${src.junit}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
		
		<!-- 编译(带debug信息,以便emma生成覆盖率信息等) -->
		<!-- TODO xieyujun optimize nowarn -->
		<javac destdir="${build.classes}"
		       deprecation="on"
		       source="1.5"
		       target="1.5"
		       debug="true"
		       optimize="false"
		       includeAntRuntime="false"
		       failonerror="${failonerror}"
		       fork="true"
		       memoryMaximumSize="256m"
		       verbose="false"
		       listfiles="false"
		       nowarn="false">
			<src path="${src.dir}" />
			<src path="${src.junit}" />
			<!-- 给编译器指定编码，防止出现：警告： 编码 GBK 的不可映射字符 -->
			<compilerarg line="-encoding utf-8" />
			<classpath refid="project.classpath" />
		</javac>
		<copy file="${main.dir}/index-build.html"
		      tofile="${build.dir}/index-build.html" />

		<tstamp>
			<format property="end.time" pattern="yyyy/MM/dd HH:mm:ss.SSS" />
		</tstamp>
		<echo message="build end   ${end.time}" />
	</target>

	<!--
    ===================================================================
               编译java源文件,copyjsp等文件到war,便于打包
    ===================================================================
      -->
	<target name="buildjar"
	        description="Compile main source tree java files into class files, generate jar,war files">
		<delete dir="${build.lib}" failonerror="false" />
		<delete dir="${build.war.dir}" failonerror="false" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.lib}" />
		<mkdir dir="${build.war.dir}" />
		
		<!-- 编译(优化代码，不带debug信息) -->
		<javac destdir="${build.classes}"
		       deprecation="off"
		       source="1.5"
		       target="1.5"
		       debug="false"
		       optimize="true"
		       includeAntRuntime="false"
			   failonerror="${failonerror}"
		       fork="true"
		       memoryMaximumSize="256m"
		       verbose="false">
			<src path="${src.dir}" />
			<src path="${src.junit}" />
			<!-- 给编译器指定编码，防止出现：警告： 编码 GBK 的不可映射字符 -->
			<compilerarg line="-encoding utf-8" />
			<classpath refid="project.classpath" />
		</javac>
		<!-- 打包classes文件到jar文件 -->
		<!--   testttt
		<jar jarfile="${build.lib}/${webapp.name}.jar"
		     compress="true"
		     basedir="${build.classes}">
			<include name="**/*.class" />
			<include name="**/*.properties" />
			<include name="**/*.xml" />
			<include name="**/*.html" />
			<include name="**/*.sql" />
			<include name="**/*.txt" />
		</jar>
		-->
		<mkdir dir="${build.war.weblib.dir}" />
		<mkdir dir="${build.war.dir}/WEB-INF/classes" />
		<!-- java classe to jar -->
		<!--   testttt  
		<jar jarfile="${build.war.weblib.dir}/${webapp.name}.jar"
		     compress="true"
		     basedir="${build.classes}" />
		     -->
		<parallel>
			<copy todir="${build.war.dir}" preservelastmodified="true">
				<fileset dir="${webcontent.dir}">
					<include name="**/**" />
					<include name="**.**" />
				</fileset>
			</copy>
			<!-- *.xml,*.properties,*.vm,*.html,*.sql,*.txt,*.ftl,*.xls -->
			<copy todir="${build.war.dir}/WEB-INF/classes" preservelastmodified="true">
				<fileset dir="${src.dir}">
					<exclude name="**/.*" />
					<exclude name="**/*.java" />
				</fileset>
			</copy>
			<copy todir="${build.war.dir}/WEB-INF/classes" preservelastmodified="true">
				<fileset dir="${src.junit}">
					<exclude name="**/.*" />
					<exclude name="**/*.java" />
				</fileset>
			</copy>
		</parallel>

	</target>

	<!-- default 配置 -->
	<property name="web.default.xml" value="src/${jdbc-default.file}" />
	<property name="web.config.dir" value="${main.config.dir}/web" />
	<property name="web.default.properties" value="src/${log4j-default.file}" />

	<macrodef name="webconfig-copy">
		<attribute name="webconfig.xml" default="${web.default.xml}"/>
		<sequential>
			<echo message="@{webconfig.xml}" />
			<!-- 不同环境不同配置文件 -->
			<copy tofile="${build.classes}/${jdbc-default.file}"
			      preservelastmodified="true"
				  file="@{webconfig.xml}" overwrite="true">
			</copy>
			<mkdir dir="${build.war.dir}/WEB-INF/classes" />
			<copy tofile="${build.war.dir}/WEB-INF/classes/${jdbc-default.file}"
			      preservelastmodified="true"
				  file="@{webconfig.xml}" overwrite="true">
			</copy>		
			<!-- 拷贝struts.xml替换开发用的struts.xml-->
			<copy tofile="${build.war.dir}/WEB-INF/classes/${default-struts-xml.file}"
			      preservelastmodified="true"
				  file="${web.config.dir}/${dc-struts-xml.file}" overwrite="true">
			</copy>
		</sequential>
	</macrodef>
	 
	 
	 <macrodef name="webconfig-copy2">
		<attribute name="webconfig.properties" default="${log4j-default.file}"/>
		<sequential>
			<echo message="@{webconfig.properties}" />
			<!-- 不同环境不同配置文件 -->
			<copy tofile="${build.classes}/${log4j-default.file}"
			      preservelastmodified="true"
				  file="@{webconfig.properties}" overwrite="true">
			</copy>
			<copy tofile="${build.war.dir}/WEB-INF/classes/${log4j-default.file}"
			      preservelastmodified="true"
				  file="@{webconfig.properties}" overwrite="true">
			</copy>			
		</sequential>
	</macrodef>
	<!-- 使用方法  -->
	<target name="ft-webconfig-copy">
		<property name="web.ydswebtest.xml" value="${web.config.dir}/${jdbc-ydswebtest-ydstest.file}" />
		<webconfig-copy webconfig.xml="${web.ydswebtest.xml}" />
	</target>
	<target name="dc-webconfig-copy">
		<property name="web.dc.xml" value="${web.config.dir}/${jdbc-dc-test.file}" />
		<webconfig-copy webconfig.xml="${web.dc.xml}" />
	</target>
	<target name="dc-webconfig-copy1">
		<property name="web.dc.xml" value="${web.config.dir}/${jdbc-dc-test1.file}" />
		<webconfig-copy webconfig.xml="${web.dc.xml}" />
	</target>
	<target name="dc-webconfig-copy2">
		<property name="web.dc.xml" value="${web.config.dir}/${jdbc-dc-test2.file}" />
		<webconfig-copy webconfig.xml="${web.dc.xml}" />
	</target>
	<target name="dc-webconfig-copy3">
		<property name="web.dc.xml" value="${web.config.dir}/${jdbc-dc-test3.file}" />
		<webconfig-copy webconfig.xml="${web.dc.xml}" />
	</target>

	<target name="dc-webconfig-copy4">
		<property name="web.dc.properties" value="${web.config.dir}/${log4j-dc-test.file}" />
		<webconfig-copy2 webconfig.properties="${web.dc.properties}" />
	</target>
	<target name="dc-webconfig-copy5">
		<property name="web.dc.properties" value="${web.config.dir}/${log4j-dc-test1.file}" />
		<webconfig-copy2 webconfig.properties="${web.dc.properties}" />
	</target>
	<target name="dc-webconfig-copy6">
		<property name="web.dc.properties" value="${web.config.dir}/${log4j-dc-test2.file}" />
		<webconfig-copy2 webconfig.properties="${web.dc.properties}" />
	</target>
	<target name="dc-webconfig-copy7">
		<property name="web.dc.properties" value="${web.config.dir}/${log4j-dc-test3.file}" />
		<webconfig-copy2 webconfig.properties="${web.dc.properties}" />
	</target>
	<!--
    ===================================================================
      dist 发布,  +++++未完成+++++
    ===================================================================
      -->
	<target name="dist" depends="ft-warfile" description="dist">
		<!-- 
            Delegate to warfile target by depending on it. dist is just to offer
            a generic target name across all YDSWEB sample apps that may be used
            for autobuilds testing.
        -->
	</target>
	<!--
    ===================================================================
      打包成war文件  webxml="${webcontent.dir}/WEB-INF/web.xml"
    ===================================================================
      -->
	<target name="warfile"
	        description="Build the web application archive">

		<delete dir="${dist.dir}" failonerror="true" />
		<mkdir dir="${dist.dir}" />
		<war warfile="${dist.dir}/${webapp.name}.war"
		     basedir="${build.war.dir}"
		     webxml="${build.war.dir}/WEB-INF/web.xml">
			<include name="*" />
			<include name="*/*.*" />
			<include name="**/*" />
		</war>
	</target>
	<macrodef name="warfile-mac">
		<!-- 不同DB配置文件，生成不同war文件 -->
		<attribute name="webapp.name.file" default="${webapp.name}"/>
		<sequential>
			<echo message="@{webapp.name.file}" />
<!--			
			<delete dir="${dist.dir}" failonerror="true" />
-->			
			<delete file="${dist.dir}/@{webapp.name.file}.war" failonerror="true" />
			<mkdir dir="${dist.dir}" />
			<war warfile="${dist.dir}/@{webapp.name.file}.war"
			     basedir="${build.war.dir}"
			     webxml="${build.war.dir}/WEB-INF/web.xml">
				<include name="*" />
				<include name="*/*.*" />
				<include name="**/*" />
			</war>
		</sequential>
	</macrodef>
	
	<target name="ft-warfile"
	        description="Build the web application archive">
		<antcall target="buildjar" />
		<antcall target="ft-webconfig-copy" />
		<antcall target="warfile"></antcall>
	</target>

	<!-- 发布文件打包     -->
	<target name="dc-warfile"
	        description="Build the web application archive">
		<antcall target="buildjar" />
		
		<antcall target="dc-webconfig-copy" />
		<antcall target="dc-webconfig-copy4" />
		<warfile-mac webapp.name.file="${webapp.name}" />

		<antcall target="dc-webconfig-copy1" />
		<antcall target="dc-webconfig-copy5" />
		<warfile-mac webapp.name.file="${webapp.name.test1}" />

		<antcall target="dc-webconfig-copy2" />
		<antcall target="dc-webconfig-copy6" />
		<warfile-mac webapp.name.file="${webapp.name.test2}" />

		<antcall target="dc-webconfig-copy3" />
		<antcall target="dc-webconfig-copy7" />
		<warfile-mac webapp.name.file="${webapp.name.test3}" />		
	</target>

	<!--
    ===================================================================
       deploy 本机部署，WebRoot文件夹所有文件部署到tomcat下
       TODO xieyujun 未实现远程部署 depends="build"
    ===================================================================
      -->
	<target name="deploy" description="Deploy the web application(files)">
		<!-- 删除原来部署的文件,有错误必须返回错误      -->
		<delete dir="${webapp}/${webapp.name}" failonerror="false" />
		<mkdir dir="${webapp}/${webapp.name}" />

		<!-- 将部署文件copy到webapps -->
		<!--
		<copy file="${dist.dir}/${webapp.name}.war"
		      tofile="${webapp}/${webapp.name}.war" />
	      -->

		<!-- 临时测试用不包括jar copy到webapps -->
		<copy todir="${webapp}/${webapp.name}">
			<fileset dir="${webcontent.dir}">
				<!--
				<exclude name="**/*.jar" />
			      -->
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<!--
    ===================================================================
       deploy WebRoot文件夹所有文件部署到tomcat下 depends="build"
    ===================================================================
      -->
	<!--
    ===================================================================
       deploy 本机部署，WebRoot文件夹所有文件部署到tomcat下
       TODO xieyujun 未实现远程部署 depends="build"
    ===================================================================
      -->
	<target name="deploy-dc" description="Deploy the web application(files)">
		<!-- 删除原来部署的文件    -->
		<!--
		<delete dir="${webapp}/${webapp.name}" failonerror="false" />
		<mkdir dir="${webapp}/${webapp.name}" />
      -->

		<!-- 将部署文件copy到webapps -->
		<!--
		<copy file="${dist.dir}/${webapp.name}.war"
		      tofile="${webapp}/${webapp.name}.war" />
	      -->

		<!-- 临时测试用不包括jar copy到webapps -->
		<copy todir="${webapp}/${webapp.name}">
			<fileset dir="${webcontent.dir}">
				<!--
				<exclude name="**/*.jar" />
			      -->
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<!--
    ===================================================================
      javadoc 生成javadoc 正式发布时要取消源代码 linksource="false"
    ===================================================================
      -->
	<target name="javadoc" description="Create javadocs by javadoc">
		<delete dir="${build.docs.api}" failonerror="false" />
		<mkdir dir="${build.docs.api}" />
		<javadoc access="protected"
		         locale="zh_CN"
		         additionalparam="-encoding utf-8 -charset utf-8"
		         docencoding="utf-8"
		         doctitle="${project.name} Project"
		         Windowtitle="YDSWEB Project java api doc"
		         packagenames="${javadoc.package}"
		         sourcepath="${src.dir};${src.junit}"
		         destdir="${build.docs.api}"
		         classpath="project.classpath"
		         author="true"
		         nodeprecated="false"
		         nodeprecatedlist="false"
		         noindex="false"
		         nonavbar="false"
		         notree="false"
		         source="1.6"
		         splitindex="true"
		         use="true"
		         version="true"
		         linksource="false"
		         includenosourcepackages="true"
		         defaultexcludes="yes"
		         verbose="false">
			<classpath refid="project.classpath" />
			<bottom><![CDATA[<i>Copyright &#169; 2009-2010 DaLian YuanDong Computer Systems CO.,LTD. All Rights Reserved.</i>]]></bottom>
			<link href="http://www.yds.yd/developer/products/ydsweb/docs/api/" />
		</javadoc>
	</target>

	<!--
    ===================================================================
      doxygen 生成javadoc
    ===================================================================
      -->
    <!-- doxygen  -->
    <target name="doxygen" description="Doxygen create javadoc.">
    	<property name="doxygen.output" value="build/docs/doxygendoc" />
    	<!-- doxygen classpath -->
    	<path id="doxygen.class.path">
    		<pathelement path="${ant.doxygen.home}/lib/ant_doxygen.jar" />
    	</path>
    	<delete dir="${doxygen.output}/" failonerror="false" />
    	<mkdir dir="${doxygen.output}" />
    	<!--==============================================-->
    	<!-- doxygenPath element specifies an absolute or -->
    	<!-- relative path to the Doxygen executable in   -->
    	<!-- your environment.                            -->
    	<!--                                              -->
    	<taskdef name="doxygen"
    	         classname="org.doxygen.tools.DoxygenTask"
    	         classpathref="doxygen.class.path" />
    	<doxygen doxygenPath="${doxygen.home}/bin/doxygen.exe"
    	         configFilename="main/config/doxygen.cfg">
    	</doxygen>
    	<move file="${doxygen.output}/html/ydsweb.chm"
    	      tofile="${doxygen.output}/ydsweb.chm"
    	      overwrite="true"
    	      failonerror="false" />
    	<!-- clear empty dir -->
    	<delete includeemptydirs="true">
    		<fileset dir="${doxygen.output}/html">
    			<exclude name="**/*.*" />
    			<exclude name="*.*" />
    		</fileset>
    	</delete>
    </target>
    <!--
        ===================================================================
          jsdoc 生成jsdoc(javascript)
        ===================================================================
          -->
    <taskdef name="jsdoctoolkit"
             classname="uk.co.darrenhurley.ant.tasks.JsDocToolkit">
    	<classpath>
    		<pathelement path="${jsdoctoolkit.home}/jsdoctoolkit-ant-task-1.0.jar" />
    		<pathelement path="${jsdoctoolkit.home}/jsdoc-toolkit/java/classes/js.jar" />
    	</classpath>
    </taskdef>
    <!-- 生成jsdoc inputdir="${js.src.dir}" -->
    <target name="jsdoc" description="Create javaScript docs">
    	<delete dir="${build.docs.jsdoc}" failonerror="false" />
    	<mkdir dir="${build.docs.jsdoc}" />
    	<jsdoctoolkit jsdochome="${jsdoctoolkit.home}/jsdoc-toolkit/"
    	              template="outline"
    	              outputdir="${build.docs.jsdoc}"
    	              log="${build.docs.jsdoc}/jsdoc.log"
    	              includeprivate="true"
    	              includeunderscored="true"
    	              includeundocumented="true">
    		<fileset dir="${js.src.dir}">
    			<include name="**/*.js" />
    			<exclude name="/common/prototype*.js" />
    			<exclude name="/ckeditor/*.js" />
    			<exclude name="/ckeditor/**/*.js" />
    			<exclude name="/My97DatePicker/*.js" />
    			<exclude name="/My97DatePicker/**/*.js" />
    			<exclude name="/tafelTree/*.js" />
    			<exclude name="/tafelTree/**/*.js" />
    		</fileset>
    	</jsdoctoolkit>
    </target>
    
	<!-- 排除测试路径设置  -->
	<patternset id="non.test.sources">
		<!-- 排除UI test测试类  -->
		<exclude name="**/ft/*FtTest.java" />
		<!-- 排除test基类 -->
		<exclude name="com/yds/base/test/*.java" />
		<exclude name="com/yds/test/base/*.java" />
		<!-- 排除PER_USER_PERMIT表变化导致旧的测试用例没有通过 -->
		<exclude name="com/yds/perm/dao/impl/UserPerViewDaoImplTest.java" />
	</patternset>

	<!-- 后台dao,service,common测试路径 -->
    <path id="junit.test.path">
    	<fileset dir="${src.junit}">
    		<include name="**/*Test.java" />
    		<patternset refid="non.test.sources"/>
    	</fileset>
    </path>

	<!-- 后台覆盖率测试路径 ，暂时与junit.test.path定义相同  -->
    <path id="emma.test.path">
    	<fileset dir="${src.junit}">
    		<include name="**/*Test.java" />
    		<patternset refid="non.test.sources"/>
    	</fileset>
    </path>
	
	<!-- 前台UI test功能测试路径 -->
    <path id="function.test.path">
    	<fileset dir="${src.junit}">
    		<!-- UI test测试类 -->
    		<include name="**/ft/*FtTest.java" />
    		<patternset refid="non.test.sources"/>
    	</fileset>
    </path>
    
    <!--
        ===================================================================
          junit 运行junit测试并生成html报告
        ===================================================================
          -->
    <target name="junit" depends="build" description="Run junit">
    	<delete dir="${build.report.junit}" failonerror="false" />
    	<mkdir dir="${build.report.junit}" />
    	<junit printsummary="yes" haltonfailure="withOutAndErr" fork="true">
    		<jvmarg value="-Xms128m -Xmx256m" />
    		<classpath>
    			<path refid="project.classpath" />
    			<pathelement location="${build.classes}" />
    		</classpath>
    		<!-- 运行结果:文本文件 -->
    		<!-- formatter type="plain" usefile="true" -->
    		<!-- 运行结果:xml文件,以便生成相应html报告 -->
    		<formatter type="xml" />
    		<!-- 单个测试类 -->
    		<!-- test name="com.TestClassTest" haltonfailure="no" outfile="result" / -->
    		<!-- 批量调用测试类 -->
    		<batchtest todir="${build.report.junit}" fork="false">
    			<path refid="junit.test.path" />
    		</batchtest>
    	</junit>
    	<!--  把生成的多个xml文件合并，生成相应的html报告 -->
    	<junitreport todir="${build.report.junit}">
    		<fileset dir="${build.report.junit}">
    			<include name="TEST-*.xml" />
    		</fileset>
    		<report format="frames" todir="${build.report.junit}/html" />
    	</junitreport>
    </target>
	
    <!--
        ===================================================================
          function-define 执行Selenium功能测试 depends="build" 
        ===================================================================
          -->
    <target name="function-define" description="Run function test">
    	<delete dir="${build.report.function}" failonerror="false" />
    	<mkdir dir="${build.report.function}" />
    	<mkdir dir="${build.report.function.dbdata}" />
    	<mkdir dir="${build.report.function.testerro}" />
    	<junit printsummary="yes" haltonfailure="withOutAndErr" fork="true">
    		<jvmarg value="-Xmx512m" />
    		<classpath>
    			<path refid="project.classpath" />
    			<pathelement location="${build.classes}" />
    		</classpath>
    		<formatter type="xml" />
    		<batchtest todir="${build.report.function}">
    			<path refid="function.test.path" />
    		</batchtest>
    	</junit>

    	<!--  把生成的多个xml文件合并，生成相应的html报告 -->
    	<junitreport todir="${build.report.function}">
    		<fileset dir="${build.report.function}">
    			<include name="TEST-*.xml" />
    		</fileset>
    		<report format="frames" todir="${build.report.function}/html" />
    	</junitreport>
    
    	<!--出错image文件处理 -->
    	<copy todir="${build.report.function.testerro}">
    		<fileset dir="${selenium.testerror.home}"></fileset>
    	</copy>
    
    </target>

	
	<!--
        ===================================================================
          function-test 执行Selenium功能测试
        ===================================================================
          -->
    <target name="function-test"
            depends="deploy"
            description="Start tomcat,Proxy; Run function tesst; stop Proxy,tomcat">
    	<parallel>
    		<antcall target="tomcat-start" />
    		<antcall target="selenium-start" />
    
    		<sequential>
    			<echo taskname="waitfor"
    			      message="Wait for tomcat and selenium proxy server launch" />
    			<waitfor maxwait="1"
    			         maxwaitunit="minute"
    			         checkevery="1"
    			         checkeveryunit="second">
    				<http url="http://${tomcat.host}:${tomcat.port}/${webapp.name}" />
    			</waitfor>
    			<!--
    					<http url="http://${selenium.host}:${selenium.port}/selenium-server/driver/?cmd=testComplete" />
    			      -->
    			<waitfor maxwait="5"
    			         maxwaitunit="minute"
    			         checkevery="5"
    			         checkeveryunit="second">
    				<socket server="${selenium.host}" port="${selenium.port}" />
    			</waitfor>
    
    			<!-- 运行web功能测试，因ajax设定了等待时间，测试时间比较长 -->
    			<antcall target="function-define" />
    			<antcall target="tomcat-stop" />
    			<!-- 不必每次都停止以便加快速度 -->
    			<!--
    				<antcall target="selenium-stop" />
    				  -->
    
    
    		</sequential>
    	</parallel>
    </target>
    
  <!--
      ===================================================================
        function-test 执行Selenium功能测试
      ===================================================================
        -->
  <target name="function-emma-test"
          depends="emma-instr, deploy"
          description="Start tomcat,Proxy; Run function tesst; stop Proxy,tomcat">
		<!-- D:\Java\jdk1.6.0_13\jre\lib\ext -->
  	<copy file="${emma.home}/lib/emma.jar"
		      tofile="${java.home}/lib/ext/emma.jar" />

  	<parallel>
  		<antcall target="tomcat-start" />
  		<antcall target="selenium-start" />
  
  		<sequential>
  			<echo taskname="waitfor"
  			      message="Wait for tomcat and selenium proxy server launch" />
  			<waitfor maxwait="1"
  			         maxwaitunit="minute"
  			         checkevery="1"
  			         checkeveryunit="second">
  				<http url="http://${tomcat.host}:${tomcat.port}/${webapp.name}" />
  			</waitfor>
  			<!--
  					<http url="http://${selenium.host}:${selenium.port}/selenium-server/driver/?cmd=testComplete" />
  			      -->
  			<waitfor maxwait="5"
  			         maxwaitunit="minute"
  			         checkevery="5"
  			         checkeveryunit="second">
  				<socket server="${selenium.host}" port="${selenium.port}" />
  			</waitfor>
  
  			<!-- 运行web功能测试，因ajax设定了等待时间，测试时间比较长 -->
  			<antcall target="function-define" />
  			<antcall target="tomcat-stop" />
  			<!-- 不必每次都停止以便加快速度 -->
  			<!--
  				<antcall target="selenium-stop" />
  				  -->
  
  		</sequential>
  	</parallel>

  </target>
  
  <!--
      ===================================================================
        emma.report 覆盖率测试报告
      ===================================================================
        -->
  <target name="function-emma-report"
  	      depends="function-emma-test"
  	      if="emma.enabled"
  	      description="Generate Emma Report">
  	<property name="report.html.out.encoding" value="GB2312" />
  	<property name="report.xml.out.encoding" value="ISO-8859-1" />

  	<!-- coverage.out.file  -->
	<copy file="${tomcat.home}/bin/coverage.ec"
	      tofile="${build.report.emma.coverage}/ft-coverage.emma" />
  	<delete file="${basedir}/coverage.ec" failonerror="false" />
  	
  	<!-- if enabled, generate coverage report(s) -->
  	<emma enabled="${emma.enabled}">
  		<report sourcepath="${src.dir}"
  		        sort="+name,+class,+method,+block"
  		        metrics="method:70,block:80,line:80,class:100"
  			encoding="utf-8">
  			<fileset dir="${build.report.emma.coverage}">
  				<include name="*.emma" />
  			</fileset>
  			<!--
  			<txt outfile="${build.report.emma.coverage}/coverage.txt"
  			     depth="package"
  			     columns="class,method,block,line,name" />
  			     -->
  			<xml outfile="${build.report.emma.coverage}/coverage.xml"
  			     depth="method" />
  			<html outfile="${build.report.emma.coverage}/coverage.html"
  			      depth="method"
  			      columns="name,class,method,block,line" />
  		</report>
  	</emma>
  </target>
	
	
	<!--
        ===================================================================
           tomcat 
        ===================================================================
          -->
    <!-- Check whether Tomcat is running -->
    <target name="check-port" description="Check whether Tomcat is running">
    	<echo message="Checking whether Tomcat is running" />
    	<condition property="tomcat.running">
    		<socket server="${tomcat.host}" port="${tomcat.port}" />
    	</condition>
    	<!--
    		<condition property="selenium.running">
    			<socket server="${selenium.host}" port="${selenium.port}" />
    		</condition>
          -->
    </target>
    
    <!-- 启动tomcat -->
    <target name="tomcat-start"
            depends="check-port"
            unless="tomcat.running"
            description="Start Tomcat if it isn't running">
    	<echo message="Start Tomcat Web Server..." />
    	<exec dir="${tomcat.home}/bin"
    	      executable="${tomcat.home}/bin/startup.bat" />
    	<sleep seconds="15" />
    </target>
    
    <!-- 停止tomcat -->
    <target name="tomcat-stop">
    	<echo message="Stop Tomcat Web Server..." />
    	<exec dir="${tomcat.home}/bin"
    	      executable="${tomcat.home}/bin/shutdown.bat" />
    	<waitfor maxwait="2"
    	         maxwaitunit="minute"
    	         checkevery="1"
    	         checkeveryunit="second">
    		<not>
    			<http url="http://${tomcat.host}:${tomcat.port}" />
    		</not>
    	</waitfor>
    	<echo message="Tomcat Web Server Stopped." />
    </target>
    
    <!-- 启动selenium -->
    <target name="selenium-start">
    	<if>
    		<not>
    			<socket server="${selenium.host}" port="${selenium.port}" />
    		</not>
    		<then>
    			<echo message="start Selenium Proxy Server..." />
    			<java jar="${selenium.server.home}/selenium-server.jar"
    			      fork="true" spawn="true"> <!-- spawn="true"延长selenium生命周期 -->
    				<!-- milliseconds
    					<arg line="-timeout 30"/>
    		            <jvmarg value="-Dhttp.proxyHost=proxy.corporate.com"/>
    		            <jvmarg value="-Dhttp.proxyPort=3128"/>
    		              -->
    			</java>
    		</then>
    	</if>
    
    </target>
    
    <!-- 停止selenium -->
    <target name="selenium-stop">
    	<get taskname="selenium-shutdown"
    	     src="http://${selenium.host}:${selenium.port}/selenium-server/driver/?cmd=shutDownSeleniumServer"
    	     dest="${build.report}/selenium-stop-result.txt"
    	     ignoreerrors="true" />
    	<echo taskname="selenium-shutdown" message="selenium shutdown." />
    </target>
    
    <!--
        ===================================================================
          emma.instr  覆盖率测试：offline mode对class文件进行修改 if="emma.enabled"
        ===================================================================
           depends="build" -->
    	<!-- path element used by EMMA taskdef below: -->
    	<path id="emma.lib">
    		<pathelement location="${emma.home}/lib/emma.jar" />
    		<pathelement location="${emma.home}/lib/emma_ant.jar" />
    	</path>
    
    	<!-- this loads <emma> and <emmajava> custom tasks: -->
    	<taskdef resource="emma_ant.properties" classpathref="emma.lib" />
	
    <target name="emma-instr" description="Run emma.instr">
    	
    	<property name="emma.enabled" value="true" />
    	<property name="emma.filter" value="" />
    	
    	<!-- This property sets the verbosity of EMMA logging.
                 silent (same as severe): only severe errors are reported;
                 quiet (same as warning): only warnings and severe errors are reported;
                 info: default verbosity level, warnings, and errors 
                 verbose: with extra progress reporting;
              -->
    	<property name="verbosity.level" value="quiet" />
    
    	<!-- output directory used for EMMA coverage reports: -->
    	<!--
    	<delete dir="${build.report.emma}" failonerror="false" />
    	-->
    	<mkdir dir="${build.report.emma}" />
    	<mkdir dir="${build.report.emma.coverage}" />
    
    	<emma>
    		<instr instrpath="${build.classes}"
    		       destdir="${build.classes}"
    		       metadatafile="${build.report.emma.coverage}/metadata.emma"
    		       merge="true"
    		       mode="overwrite">
        		<filter excludes="com.**.*Test" />
        	  <!-- 去掉对接口的覆盖率统计 --> 
      		  <filter excludes="com.**.service.*Service" />
  		      <filter excludes="com.**.bean.*" />
    			
        	</instr>
    	</emma>
    
    </target>
    
    <!--
        ===================================================================
          emma.junit 覆盖率测试：运行junit测试,并生成html报告
        ===================================================================
          -->
    <target name="emma-junit" depends="emma-instr" description="Run junitemma">
    	<delete dir="${build.report.emma.junit}" failonerror="false" />
    	<mkdir dir="${build.report.emma.junit}" />
    	<!-- loglevel Values= {error|warn|info|verbose|debug} -->
    	<record name="${build.report.emma.junit}/test-output.txt" action="start"
    		append="no" loglevel="verbose" />
		<!-- 如果batchtest fork="true" emma.coverage.out.file 自动变为coverage.ec,注意设置forkmode="once" -->
    	<junit printsummary="yes" haltonfailure="withOutAndErr" fork="true" forkmode="once">
    		<!-- jvmarg value="-Xms128m -Xmx256m" / -->
    		<jvmarg value="-Demma.coverage.out.file=${build.report.emma.coverage}/coverage.emma" />
    		<jvmarg value="-Demma.coverage.out.merge=true" />
    		<classpath>
    			<path refid="project.classpath" />
    			<pathelement location="${build.classes}" />
    			<path refid="emma.lib" />
    		</classpath>
    		<formatter type="xml" />
    		<!-- 如果batchtest fork="false" 测试速度快，但emma.coverage.out.file无法正常处理 .
    		     junit task的fork属性必须设置为true，EMMA 2.0的runtime coverage data是在JVM退出后生成的.
    		            解决方法：jvm 退出后copy coverage.ec 到 coverage.emma
    		  -->
    		<batchtest todir="${build.report.emma.junit}" haltonfailure="no">
    			<path refid="emma.test.path" />
    		</batchtest>
    	</junit>

    	<junitreport todir="${build.report.emma.junit}">
    		<fileset dir="${build.report.emma.junit}">
    			<include name="TEST-*.xml" />
    		</fileset>
    		<report format="frames" todir="${build.report.emma.junit}/html" />
    	</junitreport>
    	<record name="${build.report.emma.junit}/test-output.txt" action="stop" />

    	
    </target>

    <!--
        ===================================================================
          emma.report 覆盖率测试报告
        ===================================================================
          -->
    <target name="emma-report"
            depends="emma-junit"
            if="emma.enabled"
            description="Generate Emma Report">
    	<property name="report.html.out.encoding" value="GB2312" />
    	<property name="report.xml.out.encoding" value="ISO-8859-1" />

    	<!-- if enabled, generate coverage report(s) -->
    	<emma enabled="${emma.enabled}">
    		<report sourcepath="${src.dir}"
    		        sort="+name,+class,+method,+block"
    		        metrics="method:70,block:80,line:80,class:100"
    			encoding="utf-8">
    			<fileset dir="${build.report.emma.coverage}">
    				<include name="*.emma" />
    			</fileset>
    			<!--
    			<txt outfile="${build.report.emma.coverage}/coverage.txt"
    			     depth="package"
    			     columns="class,method,block,line,name" />
    			 -->
    			<xml outfile="${build.report.emma.coverage}/coverage.xml"
    			     depth="method" />
    			<html outfile="${build.report.emma.coverage}/coverage.html"
    			      depth="method"
    			      columns="name,class,method,block,line" />
    		</report>
    	</emma>
    </target>

	<!--
        ===================================================================
          check-src 并行执行代码检查(checkstyle,pmd,build,findbugs)
        ===================================================================
          -->
    <target name="check-src" description="Check source by checkstyle, pmd, findbugs etc.">
    	<parallel>
    		<antcall target="checkstyle" />
    		<antcall target="pmd" />
    		<sequential>
        		<antcall target="build" />
        		<antcall target="findbugs" />
    		</sequential>
    	</parallel>
    </target>

	<!--
        ===================================================================
          CheckStyle 代码检查(检查源码,主要关注源码格式 )
        ===================================================================
          -->
    <!--CheckStyle 自定义检查规则配置  -->
    <property name="checkstyle.config"
              value="${main.config.dir}/checkstyle/checkstyle_checks.xml" />
    
    <path id="checkstyle.dir">
    	<fileset dir="${checkstyle.home}">
    		<include name="*.jar" />
    	</fileset>
    </path>
    
    <taskdef name="checkstyle"
             classname="com.puppycrawl.tools.checkstyle.CheckStyleTask"
             classpathref="checkstyle.dir" />
    
    <!-- 运行checkstyle检查代码规范 ${checkstyle.home}/sun_checks.xml -->
    <target name="checkstyle" description="Check source by checkstyle.">
    	<delete dir="${build.report.checkstyle}" failonerror="false" />
    	<mkdir dir="${build.report.checkstyle}" />
    	<checkstyle config="${checkstyle.config}"
    	            failureProperty="checkstyle.failure"
    	            failOnViolation="false">
    		<!-- formatter type="plain" -->
    		<formatter type="xml" tofile="${build.report.checkstyle}/checkstyle-report.xml" />
    		<fileset dir="${src.dir}" includes="**/*.java" />
    		<fileset dir="${src.junit}" includes="**/*.java" />
    	</checkstyle>
    
    	<!-- 加快速度，减少不必要输出
    	<xslt taskname="checkstyle" basedir="${build.report.checkstyle}"
    	      destdir="${build.report.checkstyle}/html"
    	      extension=".html"
    	      style="${checkstyle.home}/contrib/checkstyle-frames-errors.xsl">
    		<param name="output.dir" expression="${build.report.checkstyle}/html" />
    	</xslt>
    
    	<xslt taskname="checkstyle" basedir="${build.report.checkstyle}"
    	      in="${build.report.checkstyle}/checkstyle-report.xml"
    	      destdir="${build.report.checkstyle}"
    	      out="${build.report.checkstyle}/checkstyle-noframes.html"
    	      style="${checkstyle.home}/contrib/checkstyle-noframes.xsl">
    	</xslt>
    	 -->
    	<!-- out checkstyle-author.html -->
    	<xslt taskname="checkstyle" basedir="${build.report.checkstyle}"
    	      in="${build.report.checkstyle}/checkstyle-report.xml"
    	      destdir="${build.report.checkstyle}"
    	      out="${build.report.checkstyle}/checkstyle-author.html"
    	      style="${checkstyle.home}/contrib/checkstyle-author.xsl">
    	</xslt>
    </target>
    <!--
        ===================================================================
          pmd 代码检查(检查源码) 规则自定义
        ===================================================================
          -->
    <property name="pmd.xslt.dir" value="${pmd.home}/etc/xslt" />
    <path id="pmd.classpath">
    	<pathelement location="${build.classes}" />
    	<fileset dir="${pmd.home}/lib/">
    		<include name="*.jar" />
    	</fileset>
    </path>
    <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask"
             classpathref="pmd.classpath" />
    <taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask"
             classpathref="pmd.classpath" />
    <!-- 检查代码linkPrefix="http://pmd.sourceforge.net/xref/  -->
    <target name="pmd" description="Check source by pmd  depends javadoc">
    	<delete includeemptydirs="true" failonerror="false">
    		<fileset dir="${build.report.pmd}"
    		         includes="**/*"
    		         excludes="docs/**"
    		         defaultexcludes="true" />
    	</delete>
    
    	<mkdir dir="${build.report.pmd}" />
    
    	<pmd rulesetfiles="${main.config.dir}/pmd/pmd-ruleset.xml,${main.config.dir}/pmd/pmd-ruleset-yds.xml" encoding="utf-8">
    		<classpath refid="pmd.classpath" />
    		<classpath refid="project.classpath" />
    		<formatter type="html"
    		           toFile="${build.report.pmd}/pmd-report-default-temp.html"
    		           linkPrefix="../../docs/api/src-html/"
    		           toConsole="false" />
    		<formatter type="xml"
    		           toFile="${build.report.pmd}/pmd-report-temp.xml"
    		           linkPrefix="../../docs/api/src-html/" />
    		<fileset dir="${src.dir}" includes="**/*.java" />
    		<fileset dir="${src.junit}" includes="**/*.java" />
    	</pmd>
    	<copy todir="${build.report.pmd}">
    		<fileset dir="${pmd.xslt.dir}" includes="*.js,*.css,*.gif" />
    	</copy>
    	<!-- 文件分隔符由[\]改为[/] -->
    	<propertyregex property="basedir.pmd"
    	               input="${basedir}"
    	               regexp="\\"
    	               replace="/"
    	               casesensitive="false" />
    	<!-- 文件链接修复，依赖javadoc -->
    	<copy file="${build.report.pmd}/pmd-report-default-temp.html"
    	      toFile="${build.report.pmd}/pmd-report-default.html">
    		<filterchain>
    			<tokenfilter>
    				<replacestring from="${basedir.pmd}/src/" to="" />
    				<replacestring from="${basedir.pmd}/test/src/" to="" />
    				<replacestring from="http://pmd.sourceforge.net/" to="./docs/" />
    			</tokenfilter>
    		</filterchain>
    	</copy>
    	<!-- 文件链接修   -->
    	<copy file="${build.report.pmd}/pmd-report-temp.xml"
    	      toFile="${build.report.pmd}/pmd-report.xml">
    		<filterchain>
    			<tokenfilter>
    				<replacestring from="${basedir}" to="" />
    				<replacestring from="http://pmd.sourceforge.net/" to="./docs/" />
    			</tokenfilter>
    		</filterchain>
    	</copy>
    
    	<!-- pmd 部分参考文档 -->
    	<copy todir="${build.report.pmd}/docs">
    		<fileset dir="${pmd.home}/docs">
    			<include name="rules/*.*" />
    			<include name="style/*.*" />
    			<include name="images/*.*" />
    			<include name="images/**/*.*" />
    		</fileset>
    	</copy>
    
    	<!-- 可选xslt  -->
    	<xslt in="${build.report.pmd}/pmd-report.xml"
    	      style="${pmd.xslt.dir}/corley-pmd-report.xslt"
    	      out="${build.report.pmd}/pmd-report-corley.html">
    	</xslt>
    	<xslt in="${build.report.pmd}/pmd-report.xml"
    	      style="${pmd.xslt.dir}/pmd-report-per-class.xslt"
    	      out="${build.report.pmd}/pmd-report-per-class.html">
    	</xslt>
    	<!-- 可选xslt,按级别
                  1:erro high, 2:erro, 3:warning high 4:warining 5:information
            <xslt in="${build.report.pmd}/pmd-report.xml"
                  style="${pmd.xslt.dir}/only-prio1.xslt"
                  out="${build.report.pmd}/pmd-report-only-prio1.html" >
            </xslt>
             -->
    	<!-- 指明输出文件和判断属于copy & paste的标准 -->
    	<cpd minimumTokenCount="30"
    	     format="xml"
    	     outputFile="${build.report.pmd}/pmd-cpd.xml"
    	     encoding="utf-8">
    
    		<!-- 要检查的项目源文件根目录 -->
    		<fileset dir="${src.dir}" includes="**/*.java" />
    		<fileset dir="${src.junit}" includes="**/*.java" />
    	</cpd>
    	<xslt in="${build.report.pmd}/pmd-cpd.xml"
    	      style="${pmd.xslt.dir}/cpdhtml.xslt"
    	      out="${build.report.pmd}/pmd-cpd-temp.html">
    	</xslt>
    
    
    	<!-- 文件链接替换   -->
    	<copy file="${build.report.pmd}/pmd-cpd-temp.html"
    	      toFile="${build.report.pmd}/pmd-cpd.html">
    		<filterchain>
    			<tokenfilter>
    				<replacestring from="../src/D:\eclipse\workspace\YDSWEB\src\"
    				               to="../../docs/api/src-html/" />
    				<replacestring from="../src/D:\Hudson\jobs\YDSWEB\workspace\YDSWEB\src\"
    				               to="../../docs/api/src-html/" />
    				<replacestring from=".java.html" to=".html" />
    
    			</tokenfilter>
    		</filterchain>
    	</copy>
    
    	<!-- 清除临时文件 -->
    	<delete file="${build.report.pmd}/pmd-report-default-temp.html"
    	        failonerror="false" />
    	<delete file="${build.report.pmd}/pmd-cpd-temp.html" failonerror="false" />
    	<copy file="${main.dir}/index-build.html"
    	      tofile="${build.dir}/index-build.html" />

    </target>
  	
    <!--
        ===================================================================
          findbugs 检查代码错误：2种样式  【含/不含】历史信息
        ===================================================================
          -->
    <target name="findbugs-all" description="Run findbugs, findbugs-history">
    	<antcall target="findbugs" />
    	<antcall target="findbugs-history" />
    </target>
    
    <!-- findbugs classpath -->
    <path id="findbugs.path">
    	<fileset dir="${findbugs.home}/lib">
    		<include name="*.jar" />
    	</fileset>
    </path>
    <!-- 定义将xml文件转换为html任务 -->
    <taskdef name="convertXmlToText"
             classname="edu.umd.cs.findbugs.anttask.ConvertXmlToTextTask">
    	<classpath refid="findbugs.path" />
    </taskdef>
    <property name="findbugs-include-filter"
              value="${main.config.dir}/findbugs/findbugs-include-filter.xml" />
    <property name="findbugs-exclude-filter"
              value="${main.config.dir}/findbugs/findbugs-exclude-filter.xml" />
    
    <!-- 运行findbugs检查代码错误  -->
    <!-- 如要加快速度可取消依赖任务 depends="build" -->
    <target name="findbugs" description="Check source by findbugs">
    	<delete dir="${build.report.findbugs}"
    	        excludes="findbugs-summary-hist.html,
                              out-hist.txt,
                              out-hist.xml,
                              out-rel.xml,
                              out.xml"
    	        failonerror="false" />
    	<mkdir dir="${build.report.findbugs}" />
    	<!-- includeFilter未使用 includeFilter="${findbugs-include-filter}" -->
    	<findbugs home="${findbugs.home}"
    	          projectName="findbugs-YDSWEB"
    	          reportLevel="low"
    	          output="xml:withMessages"
    	          outputFile="${build.report.findbugs}/findbugs-output.xml"
    	          debug="false"
    	          workHard="true"
    	          effort="max"
    	          jvmargs="-Xmx256m"
    	          timeout="6000000"
    	          failOnError="false"
    	          excludeFilter="${findbugs-exclude-filter}">
    
    		<!-- 默认超时6000000ms 10分钟    -->
    		<!-- important 设置findbug要检测的代码的class文件位置 -->
    		<class location="${build.classes}" />
    		<!-- 以下定义要分析的类所依赖的类路径   -->
    		<auxClasspath refid="project.classpath" />
    		<sourcePath path="${src.dir};${src.junit}" />
    	</findbugs>
    	<!-- 分析结果样式
                       format="html:default.xsl
                       format="html:plain.xsl
                       format="html:fancy.xsl"
                       format="html:fancy-hist.xsl"
              -->
    	<!-- 将xml转换为html -->
    	<convertXmlToText home="${findbugs.home}"
    	                  input="${build.report.findbugs}/findbugs-output.xml"
    	                  output="${build.report.findbugs}/findbugs-default.html"
    	                  format="html:default.xsl" />
    	<!-- 使用自定义样式表 -->
    	<convertXmlToText home="${findbugs.home}"
    	                  input="${build.report.findbugs}/findbugs-output.xml"
    	                  output="${build.report.findbugs}/findbugs-yds.html"
    	                  format="html:${main.config.dir}/findbugs/yds-fancy-hist.xsl" />
    </target>
    <!--
            ===================================================================
              findbugs-history 代码检查   带历史信息    start
            ===================================================================
        -->
    <!-- findbugs タスク定義 -->
    <property name="jvmargs"
              value="-server -Xss1m -Xmx800m -Duser.language=en -Duser.region=EN -Dfindbugs.home=${findbugs.home}" />
    <path id="findbugs.lib">
    	<fileset dir="${findbugs.home}/lib">
    		<include name="findbugs-ant.jar" />
    	</fileset>
    </path>
    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
    	<classpath refid="findbugs.lib" />
    </taskdef>
    <taskdef name="computeBugHistory"
             classname="edu.umd.cs.findbugs.anttask.ComputeBugHistoryTask">
    	<classpath refid="findbugs.lib" />
    </taskdef>
    <taskdef name="setBugDatabaseInfo"
             classname="edu.umd.cs.findbugs.anttask.SetBugDatabaseInfoTask">
    	<classpath refid="findbugs.lib" />
    </taskdef>
    <taskdef name="mineBugHistory"
             classname="edu.umd.cs.findbugs.anttask.MineBugHistoryTask">
    	<classpath refid="findbugs.lib" />
    </taskdef>
    <!-- findbugs タスク定義 -->
    <target name="findbugs-history">
    	<antcall target="analyze" />
    	<antcall target="mine" />
    	<antcall target="findbugreport" />
    </target>
    <!-- 分析を行うタスク-->
    <target name="analyze">
    	<!-- asm-util に対して findbugs を実行する -->
    	<findbugs home="${findbugs.home}"
    	          projectName="findbugs-YDSWEB"
    	          reportLevel="low"
    	          output="xml:withMessages"
    	          outputFile="${build.report.findbugs}/out.xml"
    	          debug="false"
    	          workHard="true"
    	          effort="max"
    	          jvmargs="${jvmargs}"
    	          timeout="6000000"
    	          adjustExperimental="true"
    	          failOnError="false"
    	          excludeFilter="${findbugs-exclude-filter}">
    		<!-- 默认超时6000000ms 10分钟 -->
    		<!-- important 设置findbug要检测的代码的class文件位置 -->
    		<class location="${build.classes}" />
    		<!--  以下定义要分析的类所依赖的类路径   -->
    		<auxClasspath refid="project.classpath" />
    		<sourcePath path="${src.dir};${src.junit}" />
    	</findbugs>
    </target>
    <target name="mine">
    	<!-- 最新の分析結果に情報を設定する -->
    	<setBugDatabaseInfo home="${findbugs.home}"
    	                    withMessages="true"
    	                    name="YDSWEB ${touch.time.mm}"
    	                    input="${build.report.findbugs}/out.xml"
    	                    output="${build.report.findbugs}/out-rel.xml" />
    	<!-- 履歴ファイル (out-hist.xml) が既に存在するかどうかを確認する -->
    	<condition property="mining.historyfile.available">
    		<available file="${build.report.findbugs}/out-hist.xml" />
    	</condition>
    	<condition property="mining.historyfile.notavailable">
    		<not>
    			<available file="${build.report.findbugs}/out-hist.xml" />
    		</not>
    	</condition>
    	<!-- このターゲットは、履歴ファイルが存在しないとき (初回) だけ実行されます -->
    	<antcall target="history-init">
    		<param name="data.file" value="${build.report.findbugs}/out-rel.xml" />
    		<param name="hist.file" value="${build.report.findbugs}/out-hist.xml" />
    	</antcall>
    	<!-- 上記以外の場合に実行されます -->
    	<antcall target="history">
    		<param name="data.file" value="${build.report.findbugs}/out-rel.xml" />
    		<param name="hist.file" value="${build.report.findbugs}/out-hist.xml" />
    		<param name="hist.summary.file"
    		       value="${build.report.findbugs}/out-hist.txt" />
    	</antcall>
    </target>
    <!-- 履歴ファイルを初期化します -->
    <target name="history-init" if="mining.historyfile.notavailable">
    	<copy file="${data.file}" tofile="${hist.file}" />
    </target>
    <!-- バグ履歴を算出します -->
    <target name="history" if="mining.historyfile.available">
    	<!-- ${data.file} を ${hist.file} にマージします -->
    	<computeBugHistory home="${findbugs.home}"
    	                   withMessages="true"
    	                   output="${hist.file}">
    		<dataFile name="${hist.file}" />
    		<dataFile name="${data.file}" />
    	</computeBugHistory>
    	<!-- 履歴を算出して ${hist.summary.file} に出力します -->
    	<mineBugHistory home="${findbugs.home}"
    	                formatDates="true"
    	                noTabs="true"
    	                input="${hist.file}"
    	                output="${hist.summary.file}" />
    </target>
    <target name="findbugreport">
    	<convertXmlToText home="${findbugs.home}"
    	                  input="${build.report.findbugs}/out-hist.xml"
    	                  output="${build.report.findbugs}/findbugs-summary-hist.html"
    	                  format="html:fancy-hist.xsl" />
    </target>
    <!--
            ===================================================================
              findbugs-history 代码检查   带历史信息    end
            ===================================================================
        -->

  
    <!--
            ===================================================================
            svn-prepare svn前期准备，设置用户名,密码等
            ===================================================================
          -->
    <target name="svn-prepare">
    	<echo message="Starting: SVN Preparation" />
    	<echo message="Sample laster one [year/month/week]: ant statsvn -Dstart.unit=&quot;year&quot; " />
    	<!-- Load ANT tasks -->
    	<!-- unit: millisecond, second, minute, hour, day, week, month, year -->
    	<!-- 默认只取最近一周日志， 取最近一年使用方法  ant statsvn -Dstatr.unit="year" -->
    	<property name="start.unit" value="week" />

    	<tstamp>
    		<format property="svn.log.startDate"
    		        pattern="yyyy-MM-dd"
    		        offset="-1"
    		        unit="${start.unit}" />
    		<format property="svn.log.endDate"
    		        pattern="yyyy-MM-dd"
    		        offset="1"
    		        unit="day" />
    	</tstamp>
    	<!-- Get the SVN information -->
    	<!--
            <input addproperty="svn.username" message="SVN Username" />
            <input addproperty="svn.password" message="SVN Password" />
              -->
    	<echo message="Finished: SVN Preparation" />
    </target>
    
    <!--
            ===================================================================
            svn-log 生成svn提前情况日志
            ===================================================================
          -->
    <target name="svn-log"
            depends="svn-prepare"
            description="Generates logs from the repository">
    	<echo message="Starting: SVN Log from: ${svn.log.startDate} ~ ${svn.log.endDate}" />
    	<delete includeemptydirs="true" failonerror="false">
    		<fileset dir="${build.report.statsvn}"
    		         includes="**/*"
    		         defaultexcludes="true" />
    	</delete>
    	<mkdir dir="${build.report.statsvn}" />
    	<exec executable="svn" output="build\report\statsvn\svn.log">
    		<arg value="log" />
    		<arg value="-v" />
    		<arg value="--xml" />
    		<arg value="-r" />
    		<arg value="{${svn.log.startDate}}:{${svn.log.endDate}}" />
    		<arg value="${basedir}" />
    	</exec>
    	<!-- 
            <exec executable="svn" output="build\report\statsvn\svn.log">
                <arg value="log" />
                <arg value="-v" />
                <arg value="- -xml" />
                <arg value="- -username"/> 
                <arg value="${svn.username}"/> 
                <arg value="- -password"/> 
                <arg value="${svn.password}"/> 
                <arg value="-r"/> 
                <arg value="{${svn.log.startDate}}:{${svn.log.endDate}}"/> 
                 <arg value="${basedir}"/>
            </exec>
     -->
    	<!-- TODO Use this version when they get the verbose option working 
                     <svn username="${svn.username}" password="${svn.password}" javahl="${svn.javahl}" svnkit="${svn.svnkit}"> 
                             <log path="${basedir}" startrevision="{${svn.log.startDate}}" destfile="${build.logs.svn}" asxml="true" recurse="true" verbose="true"/> 
                     </svn> 
              -->
    	<echo message="Finished: SVN Log file: build\report\statsvn\svn.log" />
    </target>
    
    <!--
            ===================================================================
            statsvn svn提交情况详细报告
            ===================================================================
          -->
    <taskdef name="statsvn"
             classname="net.sf.statsvn.ant.StatSvnTask"
             classpath="${statsvn.home}/statsvn.jar" />
    <target name="statsvn"
            depends="svn-log"
            description="StatSVN retrieves information from a Subversion repository and generates various tables and charts describing the project development, e.g. ">
    	<echo message="statsvn start ${touch.time}">
    	</echo>
    	<!-- charset编码如设定为utf-8或gbk等均为乱码 -->
    	<statsvn path="${basedir}"
    	         log="${build.report.statsvn}/svn.log"
    	         outputDir="${build.report.statsvn}"
    	         title="YDSWEB StatSVN"
    	         include="**/*.*"
    	         exclude="WebRoot/js/ckeditor/**/*.*;
                          WebRoot/js/ckeditor/*.*;
                          WebRoot/js/common/prototype.js;
                          WebRoot/js/My97DatePicker/**;
                          WebRoot/js/My97DatePicker/*.*;
                          WebRoot/js/tafelTree/**;
                          WebRoot/js/tafelTree/*.js;
    		              **/*.review;**/*.cfg;**/*.perfs;
    		              **/*.gif;**/*.png;**/*.jpg;**/*.ftl;**/*.tld"
    	         notes="${main.script.dir}/statsvn-notes.txt"
    	         charset="shfit-jis"
    	         disableTwitterButton="true" />
    	<echo message="statsvn end   ${touch.time}">
    	</echo>
    </target>

<!-- Webapp Precompilation -->
	
    <!--
            ===================================================================
            jsp-build 预编译jsp文件，加快测试运行速度，(jsp to class)
            ===================================================================
          -->
	<property name="tomcat.home" value="D:/javasoft/tomcat" />
	<property name="webapp.path" value="${tomcat.home}/webapps/YDSWEB" />
	<property name="webapp.workpath"
	          value="${tomcat.home}/work/Catalina/localhost/YDSWEB" />

	  <!-- Configure the custom Ant tasks for the Manager application -->
	  <import file="${tomcat.home}/bin/catalina-tasks.xml" />

	<!-- 预编译jsp文件(jsp to class) -->
	<target name="jsp-build" description="Webapp Precompilation convert JSP pages into servlet classes.">
		<antcall target="jspc"></antcall>
		<antcall target="jsp-compile"></antcall>
		<antcall target="jsp-cleanup"></antcall>
	</target>

	<!-- 编译jsp文件(jsp to java) -->
	<target name="jspc" description="jsp to java">
		<jasper validateXml="false"
		        uriroot="${webapp.path}"
		        webXmlFragment="${webapp.path}/WEB-INF/generated_web.xml"
		        outputDir="${webapp.path}/WEB-INF/src" />
	</target>

	<target name="jsp-compile" depends="jspc">
		<mkdir dir="${webapp.path}/WEB-INF/classes" />
		<mkdir dir="${webapp.path}/WEB-INF/lib" />

		<!-- 对jsp生成的java文件进行编译  -->
		<javac destdir="${webapp.path}/WEB-INF/classes"
		       optimize="off"
		       debug="on"
		       failonerror="false"
		       srcdir="${webapp.path}/WEB-INF/src"
		       encoding="UTF-8"
		       includeAntRuntime="false"
		       excludes="**/*.smap">
			<classpath>
				<pathelement location="${webapp.path}/WEB-INF/classes" />
				<fileset dir="${webapp.path}/WEB-INF/lib">
					<include name="*.jar" />
				</fileset>
				<pathelement location="${tomcat.home}/lib" />
				<fileset dir="${tomcat.home}/lib">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${tomcat.home}/bin">
					<include name="*.jar" />
				</fileset>
			</classpath>
			<include name="**" />
			<exclude name="tags/**" />
		</javac>

		<copy todir="${webapp.path}/org/apache/jsp">
			<fileset dir="${webapp.path}/WEB-INF/classes/org/apache/jsp">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>	

	<target name="jsp-cleanup">
		<delete>
			<fileset dir="${webapp.path}/WEB-INF/src" />
			<fileset dir="${webapp.path}/WEB-INF/classes/org/apache/jsp" />
		</delete>
	</target>

	
	
	<!-- Configure the directory into which the web application is built -->
	  <property name="dist"    value="${basedir}/dist"/>
	<!-- 
	  dc 服务器设置
     -->

	  <!-- Configure properties to access the Manager application -->
	<property name="tomcat.server.url" value="http://${tomcat.server}:${tomcat.port}"/>
	<property name="tomcat.deploy.url" value="http://${tomcat.server}:${tomcat.port}/manager"/>
	  <!-- Configure the context path for this application -->
	  <property name="deploy.path"     value="/YDSWEB"/>

	  <property name="tomcat.manager.url"      value="http://192.168.84.100:80/manager"/>
	  <property name="username" value="manager"/>
	  <property name="password" value="manager"/>

	<!-- 在以上文件catalina-tasks.xml已经定义
	  <taskdef name="deploy"    classname="org.apache.catalina.ant.DeployTask" classpath="${tomcat.home}/lib/catalina-ant.jar" />
	  <taskdef name="list"      classname="org.apache.catalina.ant.ListTask" classpath="${tomcat.home}/lib/catalina-ant.jar" />
	  <taskdef name="reload"    classname="org.apache.catalina.ant.ReloadTask" classpath="${tomcat.home}/lib/catalina-ant.jar" />
	  <taskdef name="resources" classname="org.apache.catalina.ant.ResourcesTask" classpath="${tomcat.home}/lib/catalina-ant.jar" />
	  <taskdef name="roles"     classname="org.apache.catalina.ant.RolesTask" classpath="${tomcat.home}/lib/catalina-ant.jar" />
	  <taskdef name="start"     classname="org.apache.catalina.ant.StartTask" classpath="${tomcat.home}/lib/catalina-ant.jar" />
	  <taskdef name="stop"      classname="org.apache.catalina.ant.StopTask" classpath="${tomcat.home}/lib/catalina-ant.jar" />
	  <taskdef name="undeploy"  classname="org.apache.catalina.ant.UndeployTask" classpath="${tomcat.home}/lib/catalina-ant.jar" />
    -->
	  <!-- Executable Targets -->
	  <target name="dc-tomcat-compile" description="Compile web application">
		<!-- 以下任务注意顺序 -->
	  	
		<antcall target="dc-warfile" />
	  	<!-- ... construct web application in ${dist} subdirectory, and
	            generated a ${path}.war ... -->
	  </target>

	  <!-- depends="atomcat-compile" -->
	  <target name="dc-tomcat-deploy" depends="dc-tomcat-compile" description="Install web application">
	    <deploy url="${tomcat.manager.url}" username="${username}" password="${password}"
	            path="${deploy.path}" war="file:${dist}${deploy.path}.war" update="true" />
	  </target>

	  <target name="dc-tomcat-reload" description="Reload web application"
	          depends="dc-tomcat-compile">
	    <reload  url="${tomcat.manager.url}" username="${username}" password="${password}"
	            path="${deploy.path}" update="true" />
	  </target>

	  <target name="dc-tomcat-undeploy" description="Remove web application">
	    <undeploy url="${tomcat.manager.url}" username="${username}" password="${password}"
	            path="${deploy.path}" />
	  </target>

	<target name="dc-tomcat-start" >
	  <start url="${tomcat.manager.url}" username="${username}" password="${password}" path="${deploy.path}" failOnError="false" />
	</target>
	        
	<target name="dc-tomcat-stop" > 
	  <stop url="${tomcat.manager.url}/html" username="${username}" password="${password}" path="${deploy.path}" failOnError="false" />
	</target>

	<target name="dc-tomcat-redeploy" description="Install web application">
		<antcall target="dc-tomcat-stop" />
		<antcall target="dc-tomcat-deploy" />
	</target>
	

	<!--
        ===================================================================
          all 所有任务全部运行 ===不包括doxygen=== configFile
        ===================================================================
          -->
    <target name="all"
            depends="usage,clean,build,deploy,junit,checkstyle,findbugs,pmd,javadoc,jsdoc"
            description="usage,clean,build,deploy,warfile,junit,checkstyle,findbugs,findbugs-all,pmd,javadoc,jsdoc">
    </target>
	<!-- =================== 清除任务 start =================== -->
</project>
