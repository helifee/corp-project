/*
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 权限管理
 */
package com.yds.perm.service.impl;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.springframework.stereotype.Service;

import com.yds.base.service.AbstractBaseService;
import com.yds.common.service.SessionService;
import com.yds.common.bean.EmpInfo;
import com.yds.perm.bean.PerRoleInfo;
import com.yds.perm.bean.PerUserPermitInfo;
import com.yds.perm.dao.UserRoleMgrDao;
import com.yds.perm.service.UserRoleMgrService;

/**
 * @see com.yds.perm.service.UserRoleMgrService
 */
@Service("userRoleMgrService")
public class UserRoleMgrServiceImpl extends AbstractBaseService implements
             UserRoleMgrService {
	
	private UserRoleMgrDao userRoleMgrDao;
	
	/**
	 * @param userRoleMgrDao 
	 *            the userRoleMgrDao to set
	 */
	public void setUserRoleMgrDao(UserRoleMgrDao userRoleMgrDao) {
		this.userRoleMgrDao = userRoleMgrDao;
	}	
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<EmpInfo> getUserInfo(EmpInfo userInfo) {
		
		List<EmpInfo> userInfoList = userRoleMgrDao.getUserInfoList(userInfo);
		return userInfoList;
	}

	@Override
	public List<PerRoleInfo> getPerRoleInfo(PerRoleInfo perRoleInfo) {
		
		List<PerRoleInfo> perRoleInfoList = userRoleMgrDao.getPerRoleInfoList(perRoleInfo);
		return perRoleInfoList;
	}	
	
	@Override
	public List<PerUserPermitInfo> getPerUserPermitInfoList(
			PerUserPermitInfo perUserPermitInfo) {
		
		List<PerUserPermitInfo> perUserPermitInfoList = userRoleMgrDao
        .getPerUserPermitInfoList(perUserPermitInfo);
		return perUserPermitInfoList;
	}	
	
	/**
	 * {@inheritDoc}
	 * 用户角色管理——提交角色信息的增、删、改处理
	 */	
	@SuppressWarnings("unchecked")
	@Override
	public boolean updateUserRole(String jsonPermitInfo) {
		
		//取得登录者ID
		String userId = SessionService.getLoginUserId();
		//待提交的用户角色相关信息been
		PerUserPermitInfo perUserPermitInfo = null;
		//待提交的用户角色相关信息JSON
		JSONObject permitInfo = null;
		//待提交的用户角色信息一览
		List<PerUserPermitInfo> perUserPermitInfos = new ArrayList<PerUserPermitInfo>();
		String insDelFlag; // 插入删除判定flag
		
		JSONArray jsonArray=JSONArray.fromObject(jsonPermitInfo);
		
		Iterator<JSONObject> iteratorArray=jsonArray.iterator();
		
		while(iteratorArray.hasNext()){
			
			permitInfo=(JSONObject) iteratorArray.next();
			
			perUserPermitInfo = new PerUserPermitInfo();
			
			perUserPermitInfo.setUserId(permitInfo.getString("userId"));
			perUserPermitInfo.setPosRoleId(permitInfo.getString("posRoleId"));
			perUserPermitInfo.setPermitStaDate(permitInfo.getString("permitStaDate"));
			perUserPermitInfo.setPermitEndDate(permitInfo.getString("permitEndDate"));
			perUserPermitInfo.setOperatorId(userId);
			perUserPermitInfo.setInsDelFlag(permitInfo.getString("flg"));

			
			perUserPermitInfos.add(perUserPermitInfo);
			
		}		
		
		for(PerUserPermitInfo userPermitInfo : perUserPermitInfos){
			
			insDelFlag = userPermitInfo.getInsDelFlag();
			
			// flag="0"时，删除该数据
			if ("0".equals(insDelFlag)) {				
				
				// 校验待删除的记录是否存在
				if(!perUserExitCheck(userPermitInfo)){
					//若待删除的数据不存在
					return false;
				}else{
				    //若待删除的数据存在
				    userRoleMgrDao.deleteUserRole(userPermitInfo);
				}
				
			// flag="1"时，插入该数据
			} else if ("1".equals(insDelFlag)) {
				
				// 校验待插入的记录是否存在
				if(perUserExitCheck(userPermitInfo)){
					//若待插入的数据存在
					return false;
				}else{
				    //若待插入的数据不存在
					userRoleMgrDao.insertUserRole(userPermitInfo);
				}				
			
		    // flag="2"时，更新该数据	
			} else if ("2".equals(insDelFlag)){
				
				// 校验待更新的记录是否存在
				if(!perUserExitCheck(userPermitInfo)){
					//若待更新的数据不存在
					return false;
				}else{
				    //若待更新的数据存在
					userRoleMgrDao.updateUserRoleTime(userPermitInfo);
				}				
			}			
		}		
		return true;
	}
	
	/**
	 * 用户角色授权信息存在check
	 * 
	 * @return true/false
	 */
	private boolean perUserExitCheck(PerUserPermitInfo userPermitInfo){
		
		List<PerUserPermitInfo> roleInfoList = userRoleMgrDao.getPerUserPermitInfoList(userPermitInfo);		
		
		if(null==roleInfoList || roleInfoList.size()==0){
			//若不存在
			return false;
		}
		//若存在
		return true;
	}

	
	
}
