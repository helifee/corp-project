<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTDSQLMap2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="Ya0020Dao">
	<typeAlias alias="PerRoleInfo" type="com.yds.perm.bean.PerRoleInfo"/>
	<typeAlias alias="RolePerMgrInfo" type="com.yds.perm.bean.RolePerMgrInfo"/>
	<typeAlias alias="PerRolePermitInfo" type="com.yds.perm.bean.PerRolePermitInfo"/>

	<!-- 取得角色信息 --> 
	<select id="getPerRoleInfo" parameterClass="String" resultClass="PerRoleInfo"> 
		SELECT
		  ROLE_ID AS roleId,
          ROLE_NM AS roleName,
          ROLE_DESC AS roleDescription,
		  UPDATETIME AS updateTime
        FROM
          PER_ROLE
        WHERE
          ROLE_ID = #roleId#;
	</select>

    <!-- 取得最大角色ID --> 
	<select id="getMaxRoleId" parameterClass="String" resultClass="PerRoleInfo"> 
		SELECT 
		  MAX(role_id) AS roleId 
        FROM PER_ROLE;
	</select>
	
	<!-- 角色授权信息取得 参照/修改模式-->
	<!--IS_CONTROL: '1' 受控 '0'不受控-->
	<select id="getRolePerMgrInfosChecked" parameterClass="String" resultClass="RolePerMgrInfo"> 
		SELECT
	      T1.PERMIT_ID AS permitPermitId,
          T1.IS_PERM AS isPerm,
          T1.MENU_NAME AS menuName,
          T1.DISP_SEQ AS dispSeq,
 	      T2.PERMIT_ID AS checkPermitId
	    FROM
	      PER_PERMIT T1
		LEFT JOIN PER_ROLE_PERMIT T2
		  ON (T1.PERMIT_ID = T2.PERMIT_ID  AND T2.ROLE_ID = #roleId#)
		WHERE 
		  T1.IS_CONTROL = '1'
		ORDER  BY
		  T1.DISP_SEQ;
	</select>

    <!-- 角色授权信息取得 新规模式-->
	<!--IS_CONTROL: '1' 受控 '0'不受控-->
	<select id="getRolePerMgrInfos" parameterClass="String" resultClass="RolePerMgrInfo"> 
		SELECT
		  PERMIT_ID AS permitPermitId,
          IS_PERM AS isPerm,
 		  MENU_NAME AS menuName,
		  DISP_SEQ AS dispSeq
		FROM
		  PER_PERMIT
		WHERE
		  IS_CONTROL = '1'
		ORDER  BY
		  DISP_SEQ;
	</select>
	
	<!-- 插入角色信息 --> 
	<insert id="insertPerRoleInfo" parameterClass="perRoleInfo">
		INSERT INTO PER_ROLE 
		   (
        	ROLE_ID,
        	ROLE_NM,
        	ROLE_DESC,
			UPDATETIME
			)
		 VALUES
		   (
        	#roleId#,
        	#roleName#,
        	#roleDescription#,
			NOW()
			);
	</insert>
	
	<!-- 插入角色授权信息 --> 
	<insert id="insertPerRolePermitInfo" parameterClass="perRolePermitInfo">
		INSERT INTO PER_ROLE_PERMIT 
		   (
		    ROLE_ID,
        	PERMIT_ID,
        	OPERATOR,
			UPDATETIME
			)
		 VALUES
		   (
        	#roleId# ,
        	#permitId# ,
        	#operatorId#,
			NOW()
			);
	</insert>
	
	<!-- 更新角色信息 --> 
	<update id="updatePerRoleInfo" parameterClass="perRoleInfo">
        UPDATE PER_ROLE
		SET
	        ROLE_NM = #roleName# ,
	        ROLE_DESC = #roleDescription#,
			UPDATETIME = NOW()
        WHERE 
	        ROLE_ID = #roleId#;
	</update>
	
	<!-- 职位信息删除处理 -->
	<delete id="deletePerRolePosition" parameterClass="String">
		DELETE FROM PER_ROLE_POSTION
		 WHERE ROLE_ID=#roleId#;
	</delete>
	
	<!-- 角色授权信息删除处理 -->
	<delete id="deletePerRolePermit" parameterClass="String">
		DELETE FROM PER_ROLE_PERMIT
		 WHERE ROLE_ID=#roleId#;
	</delete>
	
	<!-- 角色授权信息删除处理(角色授权信息更新时) -->
	<delete id="delRolePermitInfo" parameterClass="perRolePermitInfo">
		DELETE FROM PER_ROLE_PERMIT
		 WHERE ROLE_ID=#roleId#
		 AND PERMIT_ID=#permitId#;
	</delete>
	
	<!-- 角色信息删除处理 -->
	<delete id="deletePerRole" parameterClass="String">
		DELETE FROM PER_ROLE
		 WHERE ROLE_ID=#roleId#;
	</delete>	
	
	<!-- 删除用户授权表关联信息(PER_USER_PERMIT表) -->
	<delete id="deletePerUserPermit" parameterClass="String">
		DELETE FROM PER_USER_PERMIT
		 WHERE POS_ROLE_ID=#roleId#;
	</delete>
</sqlMap>  
