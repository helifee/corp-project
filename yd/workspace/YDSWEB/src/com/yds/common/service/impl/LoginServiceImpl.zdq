/*
 * @(#)LoginServiceImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 共通系统
 */

package com.yds.common.service.impl;

import javax.servlet.http.HttpServletRequest;

import org.apache.struts2.ServletActionContext;
import org.springframework.stereotype.Service;

import com.yds.common.bean.UserInfo;
import com.yds.common.bean.UserResult;
import com.yds.common.dao.LoginDao;
import com.yds.common.service.CommonConstants;
import com.yds.common.service.LogService;
import com.yds.common.service.LoginService;
import com.yds.common.service.SessionConstants;
import com.yds.common.service.SessionService;
import com.yds.common.service.CommonConstants.SubIdEnum;
import com.yds.util.service.ADAuth;
import com.yds.util.service.EncryptionPW;
import com.yds.util.service.StringUtil;

/**
 * @see LoginService
 */
@Service("loginService")
public class LoginServiceImpl implements LoginService {

	private static final String X_FORWARDED_FOR = "X-Forwarded-For";
	private static final String UNKNOWN = "unknown";
	private static final String PROXY_CLIENT_IP = "Proxy-Client-IP";
	private static final String WL_PROXY_CLIENT_IP = "WL-Proxy-Client-IP";
	private static final String HTTP_CLIENT_IP = "HTTP_CLIENT_IP";
	private static final String HTTP_X_FORWARDED_FOR = "HTTP_X_FORWARDED_FOR";
	private static final String LOGIN_MSG_1 = "ID为";
	private static final String LOGIN_MSG_2 = "的用户登录成功。";
	private static final String LOGIN_MSG_3 = "的用户登录失败。";
	private LoginDao loginDao;
	private LogService logService;

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean login(String userId, String password, boolean isDomainLogin) {

		boolean returnFlg = true;

		UserResult userResult = null;
		// 密码验证
		userResult = loginCheck(userId, password, isDomainLogin);

		if (userResult == null) {
			returnFlg = false;
		}
		// 日志记录
		logging(userId, userResult, returnFlg);

		return returnFlg;

	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UserResult loginCheck(String userId, String password, boolean isDomainLogin) {

		// 判断用户名或密码是否为空
		if (null == password || null == userId) {
			return null;
		}

		UserResult userResult = null;

		// 检索是否存在对应的用户
		if (isDomainLogin) {
			// 通过 ActiveDirectory 认证用户登录
			String domainUserId = ADAuth.login(userId, password);

			if (null != domainUserId) {

				domainUserId = domainUserId.split("@")[0];
				userResult = loginDao.domainlogin(domainUserId);
			}
		} else {
			// md5密码加密
			password = EncryptionPW.md5(password, userId);

			userResult = loginDao.login(userId);
		}

		// 用户不存在的情况
		if (null == userResult) {
			return null;
		} else {
			// 密码不正确的情况
			if (!isDomainLogin) {
				if (!(password.equals(userResult.getUserPassword()))) {
					return null;
				}
			}
		}

		return userResult;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void logging(String userId, UserResult userResult, boolean userCheckFlg) {

		SessionService.destroy();

		// 把用户登录IP地址写入session
		SessionService.set(SessionConstants.IPADDR, getIpAddr());

		StringBuffer logMsg = new StringBuffer();
		String logUserId = null;

		if (userCheckFlg) {
			// 把用户信息写入session
			UserInfo loginUser = new UserInfo();
			loginUser.setUserId(userResult.getUserId());
			loginUser.setUserName(userResult.getUserName());
			SessionService.set(SessionConstants.USERINFO, loginUser);

			// 日志记录参数设定
			logMsg.append(LOGIN_MSG_1);
			logMsg.append(userResult.getUserId());
			logMsg.append(LOGIN_MSG_2);
			logUserId = userResult.getUserId();

		} else {
			// 日志记录参数设定
			logMsg.append(LOGIN_MSG_1);
			logMsg.append(userId);
			logMsg.append(LOGIN_MSG_3);
			logUserId = "";
		}
		// 日志记录
		logService.insertLogInfo(CommonConstants.LoglevelEnum.Every_Year_Delete.toString(), SubIdEnum.Sub_COMMON.toString(), logUserId, logMsg.toString(), "");

	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UserResult oldLogin(String userId, String password) {

		// 判断用户名或密码是否为空
		if (null == password || null == userId) {
			return null;
		}

		// 旧系统加密方式
		String passwordEncOld = EncryptionPW.getEncryption(password, StringUtil.leftTrimYd(userId));

		UserResult userResult = null;

		// 检索是否存在对应的用户
		userResult = loginDao.oldlogin(userId);

		// 用户不存在的情况
		if (null == userResult) {
			return null;
		} else {
			// 密码不正确的情况
			if (!(passwordEncOld.equals(userResult.getUserPassword()))) {
				return null;
			}
		}

		return userResult;
	}

	/**
	 * 获取客户端IP
	 * 
	 * @return ip 用户IP地址
	 */
	private static String getIpAddr() {

		// 取request对象
		HttpServletRequest request = ServletActionContext.getRequest();

		String ip = request.getHeader(X_FORWARDED_FOR);
		if (ip == null || ip.length() == 0 || UNKNOWN.equalsIgnoreCase(ip)) {
			ip = request.getHeader(PROXY_CLIENT_IP);
		}
		if (ip == null || ip.length() == 0 || UNKNOWN.equalsIgnoreCase(ip)) {
			ip = request.getHeader(WL_PROXY_CLIENT_IP);
		}
		if (ip == null || ip.length() == 0 || UNKNOWN.equalsIgnoreCase(ip)) {
			ip = request.getHeader(HTTP_CLIENT_IP);
		}
		if (ip == null || ip.length() == 0 || UNKNOWN.equalsIgnoreCase(ip)) {
			ip = request.getHeader(HTTP_X_FORWARDED_FOR);
		}
		if (ip == null || ip.length() == 0 || UNKNOWN.equalsIgnoreCase(ip)) {
			ip = request.getRemoteAddr();
		}
		return ip;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String verCheck(String userId) {

		String version = "0";
		try {
			version = this.loginDao.verCheck(userId);
		} catch (Exception e) {
		}
		return version;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean updatePWInfo(UserResult userResult, String password) {

		// md5密码加密
		password = EncryptionPW.md5(password, userResult.getUserId());

		userResult.setUserPassword(password);
		// 更新新数据库中的密码为旧数据库密码新加密方式后的密码
		int result = this.loginDao.updatePWInfo(userResult);

		if (result > 0) {
			logging(userResult.getUserId(), userResult, true);
			return true;
		} else {
			return false;
		}
	}

	/**
	 * @param loginDao
	 *            the loginDao to set
	 */
	public void setLoginDao(LoginDao loginDao) {
		this.loginDao = loginDao;
	}

	/**
	 * @param logService
	 *            the logService to set
	 */
	public void setLogService(LogService logService) {
		this.logService = logService;
	}
}
