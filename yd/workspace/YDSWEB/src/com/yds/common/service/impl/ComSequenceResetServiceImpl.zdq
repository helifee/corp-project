/*
 * @(#)ComSequenceResetServiceImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 共通系统
 */
package com.yds.common.service.impl;

import java.util.Calendar;
import java.util.Date;
import java.util.List;
import org.springframework.stereotype.Service;

import com.yds.batch.service.BatchConstants;
import com.yds.batch.service.BatchJobRun;
import com.yds.common.bean.ComSeq;
import com.yds.common.dao.ComSequenceDao;
import com.yds.common.service.ComSequenceResetService;


/**
 * 采番表重置处理（数据库访问）
 * 
 * @author mengxiaoyan
 * @version 1.00 2010/08/18
 */
@Service("comSequenceResetService")
public class ComSequenceResetServiceImpl implements ComSequenceResetService,BatchJobRun {
	/** 采番Dao. */
	private ComSequenceDao comSequenceDao;
	
	/** 重置日期. */
	private Date resetDay;
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public void resetSequence() {
		List<ComSeq> comSeqList;
		if ( null == resetDay ) {
			this.setResetDay(new Date());
		}	
		Calendar calendar = Calendar.getInstance();
        calendar.setTime(resetDay);
        
		// 获取项目表信息
		comSeqList = comSequenceDao.getAllSequence();
		for (ComSeq comSeq : comSeqList) {
			// 每日执行
			if (BatchConstants.FREQ.PER_DAY.toString().equals(comSeq.getSeqCycleflg())){
				updateKey(0,comSeq);
			
			// 周末执行
			}else if (BatchConstants.FREQ.PER_WEEK.toString().equals(comSeq.getSeqCycleflg()) && isWeekLastDay(calendar)){
				updateKey(0,comSeq);
			
			// 月末执行
			}else if(BatchConstants.FREQ.MONTH_END.toString().equals(comSeq.getSeqCycleflg())&& isMonthLastDay(calendar)){
				updateKey(0,comSeq);
				
			// 年末执行
			}else if(BatchConstants.FREQ.YEAR_END.toString().equals(comSeq.getSeqCycleflg()) && isYearLastDay(calendar)){
				updateKey(0,comSeq);		
			}

		}		


	}

	/**
	 * 判断日期是否是这个周最后一天（星期五）
	 * 
	 * @param calendar
	 *            日期
	 * 
	 * @return boolean true 是 false 否
	 */
	private boolean isWeekLastDay(Calendar calendar) {
		if (calendar.get(Calendar.DAY_OF_WEEK) == 6) {
			return true;
		} else {
			return false;
		}
	}
    
	/**
	 * 判断日期是否是这个月最后一天
	 * 
	 * @param calendar
	 *            日期
	 * 
	 * @return boolean true 是 false 否
	 */
	private boolean isMonthLastDay(Calendar calendar) {
		if (calendar.get(Calendar.DAY_OF_MONTH) == calendar
				.getActualMaximum(Calendar.DAY_OF_MONTH)) {
			return true;
		} else {
			return false;
		}
	}
    
	/**
	 * 判断日期是否是当年最后一天
	 * 
	 * @param calendar
	 *            日期
	 * 
	 * @return boolean true 是 false 否
	 */
	private boolean isYearLastDay(Calendar calendar) {
		if (calendar.get(Calendar.MONTH) == 11
				&& calendar.get(Calendar.DAY_OF_MONTH) == 31) {
			return true;
		} else {
			return false;
		}
	}
    
	/**
	 * 修改数据库中key值
	 * 
	 * @param keyValue
	 *            key值 comSeq 采番表bean
	 * 
	 * @return
	 */
	private void updateKey(Integer keyValue, ComSeq comSeq) {
		comSeq.setSeqValue(keyValue);
		comSequenceDao.updateSequence(comSeq);
	}
    
	@Override
	public void jobRun() throws Throwable {
		resetSequence();
		
	}
	/**
	 * @return the comSequenceDao
	 */
	public ComSequenceDao getComSequenceDao() {
		return comSequenceDao;
	}
	/**
	 * @param comSequenceDao the comSequenceDao to set
	 */
	public void setComSequenceDao(ComSequenceDao comSequenceDao) {
		this.comSequenceDao = comSequenceDao;
	}
	/**
	 * @return the resetDay
	 */
	public Date getResetDay() {
		return resetDay;
	}
	/**
	 * @param resetDay the resetDay to set
	 */
	public void setResetDay(Date resetDay) {
		this.resetDay = resetDay;
	}



}
