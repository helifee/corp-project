package com.yds.common.service.impl;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.struts2.ServletActionContext;
import org.springframework.context.NoSuchMessageException;

import com.ibatis.sqlmap.engine.mapping.statement.RowHandlerCallback;
import com.ibatis.sqlmap.engine.scope.StatementScope;
import com.opensymphony.xwork2.ActionContext;
import com.yds.util.service.DateUtil;
import com.yds.util.service.PropertyManager;
import com.yds.common.service.CommonConstants;
import com.yds.common.service.SessionConstants;
import com.yds.common.service.SessionService;
import com.yds.common.service.CommonConstants.LoglevelEnum;

import cn.org.rapid_framework.ibatis.sqlmap.engine.execution.LimitSqlExecutor;

public class UpdateLogSqlExecutor extends LimitSqlExecutor {
	
	private PropertyManager propMgr;

	private static final Log LOG = LogFactory.getLog(UpdateLogSqlExecutor.class);

	// 常量定义
	/** SQL日志时默认日志等级. */
	private static final LoglevelEnum DEFAULT_LOG_LEVEL = LoglevelEnum.Every_Season_Delete;

	/** 日志文件中SQL语句前缀. */
	private static final String STATEMENT_PRE = "INSERT INTO COM_LOG_MST("
			+ "LOG_LEVEL, SUB_ID, USER_ID, LOG_MSG, LOG_IP, REFER, OP_ID, OP_TIME) VALUES(";

	@Override
	public void executeQuery(StatementScope statementScope, Connection conn, String sql, Object[] parameters, int skipResults, int maxResults, RowHandlerCallback callback) throws SQLException {
		if (LOG.isInfoEnabled()) {
			LOG.info(constructSql(sql, parameters));
		}
		super.executeQuery(statementScope, conn, sql, parameters, skipResults, maxResults, callback);
	}

	@Override
	public int executeUpdate(StatementScope statementScope, Connection conn, String sql, Object[] parameters)
			throws SQLException {
		if (LOG.isDebugEnabled()) {
			LOG.debug(constructSql(sql, parameters));
		}

		// 如果是Junit测试，则不做日志记录
		if (null != ActionContext.getContext() && null != ServletActionContext.getServletContext()) {

			// 取得用户所执行SQL的参数
			StringBuffer sqlparameter = new StringBuffer(" Parameter: ");
			for (Object parameter : parameters) {

				// 参数非空时
				if (null != parameter) {
					if ("".equals(parameter)) {
						sqlparameter.append("").append(",");
					} else {
						sqlparameter.append(parameter.toString()).append(",");
					}
				}
			}
			sqlparameter.deleteCharAt(sqlparameter.lastIndexOf(","));

			// 定义输出内容并写入SQL注释
			StringBuffer content = new StringBuffer("-- ");
			String now = DateUtil.getDateTime();
			content.append(now);
			content.append("\n");

			// 准备SQL参数
			String userId = "";

			// 日志msg
			String logMsg = "SQL: " + sql;
			if (null != sqlparameter) {
				logMsg = logMsg + sqlparameter.toString();
			}
			logMsg = logMsg.replaceAll("'", "\\\\'");
			String logIp = (String) SessionService.get(SessionConstants.IPADDR);
			String refer = "";
			
			String opId;
			opId = SessionService.getLoginUserId();
			
			String opTime = now;

			// 输出SQL语句
			content.append(UpdateLogSqlExecutor.STATEMENT_PRE);
			content.append("'").append(UpdateLogSqlExecutor.DEFAULT_LOG_LEVEL).append("', ");
			content.append("'").append(CommonConstants.SubIdEnum.Sub_SQL.toString()).append("', ");
			content.append("'").append(userId).append("', ");
			content.append("'").append(logMsg).append("', ");
			content.append("'").append(logIp).append("', ");
			content.append("'").append(refer).append("', ");
			content.append("'").append(opId).append("', ");
			content.append("'").append(opTime).append("');");
			content.append("\n");

			// 日志存放路径
			String path = "";
			String fileName = "";
			try {
				path = propMgr.getParameter("yds.log.sqllog.folder");
				fileName = propMgr.getParameter("yds.log.sqllog.file");
			} catch (NoSuchMessageException e) {
				LOG.error("日志目录配置读取错误！");
			}

			// 记录日志
			FileWriter fw = null;
			try {
				// 防止多人同时进行文件操作
				synchronized (this) {
						File dir = new File(path);
						if(dir.exists() && dir.isDirectory()) {
							fw = new FileWriter(path + "/" + fileName, true);
							fw.write(content.toString());
							
						} else {
							if(dir.mkdir()) {
								fw = new FileWriter(path + "/" + fileName, true);
								fw.write(content.toString());
								
							} else {
								LOG.error("日志目录创建错误！");
							}
						}
				}

			} catch (IOException e) {
				LOG.error("写SQL日志异常", e);
			} finally {
				try {
					// 关闭输出流
					if (null != fw) {
						fw.close();
					}
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}

		return super.executeUpdate(statementScope, conn, sql, parameters);
	}

	public void setPropMgr(PropertyManager propMgr) {
		this.propMgr = propMgr;
	}

	private String constructSql(String sql, Object[] array) {
		// SQL中"?"后跟";", " ", ",", ")"的时候，将?替换成对应的object值
		String key = "(\\?(?=;)|\\?(?= )|\\?(?=,)|\\?(?=\\)))";
		Pattern p = Pattern.compile(key);
		Matcher m = p.matcher(sql);
		StringBuffer stringBuffer = new StringBuffer();
		int i = 0;
		boolean result = m.find();
		while (result) {
			if (i < array.length){
				StringBuffer sb;
				if (array[i] != null){
					sb = new StringBuffer("'");
					String data = null;
					if (Date.class.equals(array[i].getClass())){
						data = DateUtil.dateToString((Date)array[i], "yyyy-MM-dd HH:mm:ss");
					}else {
						data = array[i].toString();
					}
					sb.append(data).append("'");
				}else{
					sb = new StringBuffer("null");
				}
				m.appendReplacement(stringBuffer, Matcher.quoteReplacement(sb.toString()));
			}
			result = m.find();
			i++;
		}
		return String.valueOf(m.appendTail(stringBuffer));
	}

}
