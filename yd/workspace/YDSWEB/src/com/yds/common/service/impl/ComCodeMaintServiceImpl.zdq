/*
 * @(#)ComCodeMaintServiceImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 共通系统
 */

package com.yds.common.service.impl;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;

import com.yds.base.service.AbstractBaseService;
import com.yds.common.bean.ComCodeConf;
import com.yds.common.bean.ComCodeMaint;
import com.yds.common.bean.ItemInfo;
import com.yds.common.bean.TypeInfo;
import com.yds.common.dao.ComCodeMaintDao;
import com.yds.common.service.ComCodeMaintService;

/**
 * @see com.yds.common.service.ComCodeMaintService
 */
@Service("comCodeMaintService")
public class ComCodeMaintServiceImpl extends AbstractBaseService implements
		ComCodeMaintService {

	private ComCodeMaintDao comCodeMaintDao;

	/**
	 * {@inheritDoc}
	 * 
	 * @throws Exception
	 */
	@Override
	public List<ComCodeMaint> getDiffList(String subSys, String typeId)
			throws Exception {
		ComCodeMaint comCodeMaint = new ComCodeMaint();
		comCodeMaint.setSubSys(subSys);
		comCodeMaint.setTypeId(typeId);

		List<ComCodeMaint> comCodeMaintList = comCodeMaintDao
				.getDiffList(comCodeMaint);

		ComCodeConf comCodeConf = new ComCodeConf();
		comCodeConf.setSubSys(subSys);
		comCodeConf.setTypeId(typeId);
		List<ComCodeConf> comCodeConfList = setComCodeConfList(comCodeConf,
				null);

		return getDiffListProName(comCodeMaintList, comCodeConfList);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<TypeInfo> getTypeList(String subSys) {

		List<TypeInfo> typeInfoList = comCodeMaintDao.getTypeList(subSys);
		TypeInfo typeInfo = new TypeInfo();
		typeInfo.setTypeId("");
		typeInfo.setTypeName("");
		typeInfoList.add(0, typeInfo);
		return typeInfoList;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ComCodeConf> getDispNameList(String subSys, String typeId) {
		ComCodeConf comCodeConf = new ComCodeConf();
		comCodeConf.setSubSys(subSys);
		comCodeConf.setTypeId(typeId);
		return comCodeMaintDao.getComCodeConfList(comCodeConf);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ComCodeMaint getDiffInfo(String subSys, String typeId, String diffNo) {
		ComCodeMaint comCodeMaint = new ComCodeMaint();
		comCodeMaint.setSubSys(subSys);
		comCodeMaint.setTypeId(typeId);
		comCodeMaint.setDiffNo(diffNo);
		if (comCodeMaintDao.getDiffList(comCodeMaint).size() != 0) {
			comCodeMaint = comCodeMaintDao.getDiffList(comCodeMaint).get(0);
		} else {
			return null;
		}

		if ("1".equals(comCodeMaint.getDelFlg())) {
			comCodeMaint.setDispDelFlg(true);
		}

		return comCodeMaint;
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @throws Exception
	 */
	@Override
	public List<ComCodeConf> getComCodeConfList(String subSys, String typeId,
			ComCodeMaint comCodeMaint) throws Exception {
		ComCodeConf comCodeConf = new ComCodeConf();
		comCodeConf.setSubSys(subSys);
		comCodeConf.setTypeId(typeId);

		return setComCodeConfList(comCodeConf, comCodeMaint);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean insertDiffInfo(ComCodeMaint comCodeMaint) {
		if ("false".equals(comCodeMaint.getDelFlg())) {
			comCodeMaint.setDelFlg("0");
		}

		comCodeMaint.setDispSeq(comCodeMaintDao.getMaxDiffSort(comCodeMaint));

		// 区分存在check
		if (!diffExitCheck(comCodeMaint)) {
			try {
				comCodeMaintDao.insertDiffInfo(comCodeMaint);
			} catch (RuntimeException e) {
				return false;
			}
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int updateDiffInfo(ComCodeMaint comCodeMaint) {
		if ("false".equals(comCodeMaint.getDelFlg())) {
			comCodeMaint.setDelFlg("0");
		}

		// 区分存在check
		if (diffExitCheck(comCodeMaint)) {
			return comCodeMaintDao.updateDiffInfo(comCodeMaint);
		}

		return 0;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ComCodeMaint> getDiffSortList(String subSys, String typeId) {

		ComCodeMaint comCodeMaint = new ComCodeMaint();
		comCodeMaint.setSubSys(subSys);
		comCodeMaint.setTypeId(typeId);

		return comCodeMaintDao.getDiffSortList(comCodeMaint);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int updateDiffSort(String subSys, String typeId, String diffSort) {

		ComCodeMaint comCodeMaint = new ComCodeMaint();
		comCodeMaint.setSubSys(subSys);
		comCodeMaint.setTypeId(typeId);

		String[] diffArr = diffSort.replace(" ", "").split(",");
		int dispSeq = 0;

		for (int i = 0; i < diffArr.length; i++) {
			if (!"".equals(diffArr[i])) {
				comCodeMaint.setDiffNo(diffArr[i]);
				if (diffExitCheck(comCodeMaint)) {
					dispSeq++;
					comCodeMaint.setDispSeq(String.valueOf(dispSeq));
					comCodeMaintDao.updateDiffSort(comCodeMaint);
				} else {
					return 0;
				}
			}
		}
		return dispSeq;
	}

	/**
	 * 设置区分表示画面控件
	 * 
	 * @param comCodeConf
	 * @param comCodeMaint
	 * @return
	 * @throws Exception
	 */
	private List<ComCodeConf> setComCodeConfList(ComCodeConf comCodeConf,
			ComCodeMaint comCodeMaint) throws Exception {

		// 取得区分附加属性
		List<ComCodeConf> tempList = comCodeMaintDao
				.getComCodeConfList(comCodeConf);

		List<ComCodeConf> resultList = new ArrayList<ComCodeConf>();

		for (int i = 0; i < tempList.size(); i++) {

			// 根据属性顺序整合区分附加属性
			resultList.add(setComCodeConf(tempList.get(i), comCodeMaint));
		}
		return resultList;
	}

	/**
	 * 设置画面控件类型，值
	 * 
	 * @param comCodeConf
	 * @param comCodeMaint
	 * @return
	 */
	private ComCodeConf setComCodeConf(ComCodeConf comCodeConf,
			ComCodeMaint comCodeMaint) throws Exception {

		String proValue = "";

		if (comCodeMaint != null) {
			Class<?> classType = comCodeMaint.getClass();
			// 取得附加属性对应的get方法
			String methodName = "getPro" + comCodeConf.getPropertySeq();
			Method method = classType.getMethod(methodName, new Class[] {});
			proValue = (String) method.invoke(comCodeMaint);

		} else {
			proValue = comCodeConf.getDefaultValue();
			if (proValue == null) {
				proValue = "";
			}
		}

		comCodeConf.setTagName("comCodeMaint.pro"
				+ comCodeConf.getPropertySeq());

		if ("text".equals(comCodeConf.getDispType())) {
			comCodeConf.setTagTypeFlg(1);
			comCodeConf.setTagValue(proValue);
		} else if ("checkbox".equals(comCodeConf.getDispType())) {
			comCodeConf.setTagTypeFlg(3);
			List<String> list = new ArrayList<String>();
			String[] pro = proValue.replace(" ", "").split(",");

			for (int j = 0; j < pro.length; j++) {
				list.add(pro[j]);
			}
			comCodeConf.setTagValueList(list);
		} else if ("radio".equals(comCodeConf.getDispType())) {
			comCodeConf.setTagTypeFlg(2);
			comCodeConf.setTagValue(proValue);
		} else if ("select".equals(comCodeConf.getDispType())) {
			comCodeConf.setTagTypeFlg(4);
			comCodeConf.setTagValue(proValue);
		} else if ("textarea".equals(comCodeConf.getDispType())) {
			comCodeConf.setTagTypeFlg(5);
			comCodeConf.setTagValue(proValue);
		}

		comCodeConf.setItemList(getItemList(comCodeConf));

		return comCodeConf;
	}

	/**
	 * radio,select,checkbox时值的设定
	 * 
	 * @param comCodeConf
	 * @return
	 */
	private List<ItemInfo> getItemList(ComCodeConf comCodeConf) {

		List<ItemInfo> itemInfoList = new ArrayList<ItemInfo>();
		if ("select".equals(comCodeConf.getDispType())) {
			ItemInfo temp = new ItemInfo();
			temp.setItemId("");
			temp.setItemName("");
			itemInfoList.add(temp);
		}

		ItemInfo itemInfo = new ItemInfo();
		if ("0".equals(comCodeConf.getOutsideFlg())) {
			// TODO　如果为内部数据，画面空间类型为select，radio，checkbox时，inside_name和inside_value不允许为ｎｕｌｌ，否则会出现数组长度不一致。
			String dispType = comCodeConf.getDispType();
			if ("select".equals(dispType) || "radio".equals(dispType)
					|| "checkbox".equals(dispType)) {
				String[] itemIdArr = comCodeConf.getInsideValue().replace(" ",
						"").split(",");
				String[] itemNameArr = comCodeConf.getInsideName().replace(" ",
						"").split(",");

				for (int i = 0; i < itemIdArr.length; i++) {
					itemInfo = new ItemInfo();
					itemInfo.setItemName(itemNameArr[i]);
					itemInfo.setItemId(itemIdArr[i]);
					itemInfoList.add(itemInfo);
				}
			}
		} else {
			itemInfo.setItemId(comCodeConf.getOutsideValue());
			itemInfo.setItemName(comCodeConf.getOutsideName());
			itemInfo.setSearchCondition(comCodeConf.getOutsideCondition());

			itemInfoList.addAll(comCodeMaintDao.getItemInfoList(itemInfo));
		}
		return itemInfoList;
	}

	/**
	 * 区分存在check
	 * 
	 * @param comCodeMaint
	 * @return true/false
	 */
	private boolean diffExitCheck(ComCodeMaint comCodeMaint) {

		if (comCodeMaintDao.getDiffList(comCodeMaint).size() == 0) {
			return false;
		}
		return true;
	}

	/**
	 * 取得区分附加属性值所对应的名
	 * 
	 * @param comCodeMaintList
	 * @param comCodeConfList
	 * @return
	 */
	private List<ComCodeMaint> getDiffListProName(
			List<ComCodeMaint> comCodeMaintList,
			List<ComCodeConf> comCodeConfList) throws Exception {

		List<ComCodeMaint> result = new ArrayList<ComCodeMaint>();

		for (int i = 0; i < comCodeMaintList.size(); i++) {
			ComCodeMaint temp = comCodeMaintList.get(i);

			for (int j = 0; j < comCodeConfList.size(); j++) {
				ComCodeConf comCodeConf = comCodeConfList.get(j);

				Class<?> classType = temp.getClass();
				// 取得附加属性对应的get方法
				String methodName = "getPro" + comCodeConf.getPropertySeq();
				Method method = classType.getMethod(methodName, new Class[] {});
				String proValue = proTypeCheck((String) method.invoke(temp),
						comCodeConf);

				methodName = "setPro" + comCodeConf.getPropertySeq();
				method = classType.getMethod(methodName, String.class);
				method.invoke(temp, proValue);
			}

			result.add(temp);
		}

		return result;
	}

	private String proTypeCheck(String proValue, ComCodeConf comCodeConf) {

		if (proValue == null){
			return "";
		}
		if (comCodeConf.getTagTypeFlg() == 2
				|| comCodeConf.getTagTypeFlg() == 4) {
			for (ItemInfo itemInfo : comCodeConf.getItemList()) {
				if (proValue.equals(itemInfo.getItemId())) {
					return itemInfo.getItemName();
				}
			}
		} else if (comCodeConf.getTagTypeFlg() == 3) {
			String[] proArr = proValue.replace(" ", "").split(",");

			StringBuffer result = new StringBuffer();

			for (int i = 0; i < proArr.length; i++) {
				for (ItemInfo itemInfo : comCodeConf.getItemList()) {
					if (!"".equals(proArr[i])
							&& proArr[i].equals(itemInfo.getItemId())) {
						result.append(",");
						result.append(itemInfo.getItemName());
					}
				}
			}
			if (result.length() > 0) {
				return result.substring(1);
			}
		}

		return proValue;
	}

	/**
	 * @param comCodeMaintDao
	 *            the comCodeMaintDao to set
	 */
	public void setComCodeMaintDao(ComCodeMaintDao comCodeMaintDao) {
		this.comCodeMaintDao = comCodeMaintDao;
	}

}
