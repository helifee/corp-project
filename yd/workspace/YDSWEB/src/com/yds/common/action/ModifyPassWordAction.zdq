/*
 * @(#)ModifyPassWordAction.java Copyright (c) 2009-2010 大连远东计算机系统有限公司 All
 * rights reserved. Project: 远东公司内部网 SubSystem: 共通系统
 */
package com.yds.common.action;

import java.text.MessageFormat;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.yds.base.action.AbstractBaseAction;
import com.yds.common.bean.PassWord;
import com.yds.common.service.CommonConstants;
import com.yds.common.service.LogService;
import com.yds.common.service.LoginService;
import com.yds.common.service.PassWordService;
import com.yds.common.service.SessionService;
import com.yds.common.service.CommonConstants.DataSourceEnum;
import com.yds.common.service.CommonConstants.SubIdEnum;
import com.yds.util.service.DbContextHolder;
import com.yds.util.service.StringUtil;

/**
 * 用户修改密码
 * 
 * @author yuanjinling
 * @version 1.0 2010/05/13
 */
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@Controller("modifyPassWordAction")
public class ModifyPassWordAction extends AbstractBaseAction
{

	private static final long serialVersionUID = -9091585900308071195L;

	private static final Log LOG = LogFactory.getLog(ModifyPassWordAction.class);
	private static final String LOG_MSG1 = "用户{0}修改密码";
	private static final String LOG_MSG2 = "用户{0}的密码被{1}重置";
	private static final String LOG_SUCCESS = "成功。";
	private static final String LOG_FAIL = "失败。";

	private LoginService loginService;
	private PassWordService passWordService;
	private LogService logService;
	private String errorM;// 错误标签
	private String successM;// 成功标签
	private PassWord passWord;// 用户密码信息

	public String initModify()
	{
		// 清空错误标签
		this.setErrorM("");
		// 清空成功标签
		this.setSuccessM("");
		return SUCCESS;
	}

	public String initReset()
	{
		// 清空错误标签
		this.setErrorM("");
		// 清空成功标签
		this.setSuccessM("");
		return SUCCESS;
	}

	/**
	 * 用户修改密码
	 */
	public String modifyPwd() throws Exception
	{

		// 清空错误标签
		this.setErrorM("");
		// 清空成功标签
		this.setSuccessM("");
		passWord.setUserId(SessionService.getLoginUserId());

		// 检查用户id和输入的旧密码是否匹配
		if (this.loginService.loginCheck(passWord.getUserId(), passWord.getOldPW(), false) == null)
		{
			setErrorM(propMgr.getMessage("yds.com.error.0002"));

			insertLog(LOG_FAIL);

			return ERROR;
		}

		return updatePwd();
	}

	/**
	 * 管理员重置用户密码
	 */
	public String resetPwd() throws Exception
	{

		// 清空错误标签
		this.setErrorM("");
		// 清空成功标签
		this.setSuccessM("");

		passWord.setManagerId(SessionService.getLoginUserId());
		passWord.setUserId(StringUtil.leftPadYd(passWord.getUserId()));

		// 检查管理员密码是否匹配
		if (this.loginService.loginCheck(passWord.getManagerId(), passWord.getManagerPW(), false) == null)
		{
			setErrorM(propMgr.getMessage("yds.com.error.0002"));
			
			insertLog(LOG_FAIL);
			
			return ERROR;
		}

		return updatePwd();
	}

	/**
	 * 修改密码
	 * 
	 * @return 执行结果
	 */
	private String updatePwd()
	{
		// 重置密码
		boolean result = this.passWordService.updatePwd(passWord);
		if (!result)
		{
			setErrorM(propMgr.getMessage("yds.com.error.0001"));
			insertLog(LOG_FAIL);
			return ERROR;
		}
		result = false;
		try
		{
			// 使用旧数据库源
			DbContextHolder.setDbType(DataSourceEnum.OLD.toString());
			// 验证密码
			result = this.passWordService.updatePwdOld(passWord);
		} catch (Exception e)
		{
			LOG.error("update password error!", e);
		} finally
		{
			// 切换到默认数据库源
			DbContextHolder.clearDbType();
		}

		if (result)
		{
			setSuccessM(propMgr.getMessage("yds.com.info.0009"));
			insertLog(LOG_SUCCESS);
			return SUCCESS;
		}

		setErrorM(propMgr.getMessage("yds.com.error.0001"));
		insertLog(LOG_FAIL);
		return ERROR;
	}

	private void insertLog(String type){
		String base;
		if(null == passWord.getManagerId()){
			base = LOG_MSG1;
		} else {
			base = LOG_MSG2;
		}
		logService.insertLogInfo(CommonConstants.LoglevelEnum.Every_Year_Delete.toString(),
				SubIdEnum.Sub_COMMON.toString(), SessionService.getLoginUserId(),
				MessageFormat.format(base, passWord.getUserId(), passWord.getManagerId()) + type, "");
	}
	
	public void validateModifyPwd()
	{
		if (!passWord.getNewPW().equals(passWord.getReNewPW()))
		{
			addFieldError("passWord.reNewPW", propMgr.getMessage("yds.com.warning.0012"));
		}
	}

	public void validateResetPwd()
	{
		if (!passWord.getNewPW().equals(passWord.getReNewPW()))
		{
			addFieldError("passWord.reNewPW", propMgr.getMessage("yds.com.warning.0012"));
		}
	}

	public String getErrorM()
	{
		return errorM;
	}

	public void setErrorM(String errorM)
	{
		this.errorM = errorM;
	}

	public String getSuccessM()
	{
		return successM;
	}

	public void setSuccessM(String successM)
	{
		this.successM = successM;
	}

	public void setLogService(LogService logService)
	{
		this.logService = logService;
	}

	public void setPassWordService(PassWordService passWordService)
	{
		this.passWordService = passWordService;
	}

	public void setLoginService(LoginService loginService)
	{
		this.loginService = loginService;
	}

	public PassWord getPassWord()
	{
		return passWord;
	}

	public void setPassWord(PassWord passWord)
	{
		this.passWord = passWord;
	}

}
