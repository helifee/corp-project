/*
 * @(#)WeatherServiceImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 活动桌面
 */
package com.yds.gadget.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import org.dom4j.Element;
import org.springframework.stereotype.Service;

import com.yds.base.service.AbstractBaseService;
import com.yds.common.service.CommonConstants;
import com.yds.gadget.bean.WeatherReport;
import com.yds.gadget.service.WeatherService;
import com.yds.util.service.ApplicationContextHolder;
import com.yds.util.service.DateUtil;
import com.yds.util.service.PropertyManager;
import com.yds.util.service.XmlOperator;

/**
 * @see com.yds.gadget.service.WeatherService
 */
@Service("weatherService")
public class WeatherServiceImpl extends AbstractBaseService implements WeatherService {

	private static final int NUM_XML_ROW = 24;
	private static WeatherReport weatherReport;

	/**
	 * {@inheritDoc}
	 */
	@Override
	public WeatherReport getWeatherReport() {
		Date now = new Date();
		// 首次读取
		if (weatherReport == null || weatherReport.getTimestamp() == null) {
			syncWeatherReport();
			if (weatherReport == null) {
				return null;
			}
			prepareReport();
			// 与上次读取间隔>CommonConstants.BUFFER_TIME秒时
		} else if (DateUtil.dateDiff(weatherReport.getTimestamp(), now) > CommonConstants.BUFFER_TIME) {
			syncWeatherReport();
			prepareReport();
		}
		
		return weatherReport;
	}

	/**
	 * 处理数据.
	 */
	private void prepareReport() {
		if (null != weatherReport.getTodayPicStart()) {
			weatherReport.setTodayPicStart(weatherReport.getTodayPicStart()
					.replaceAll("\\.gif", ""));
		}
		if (null != weatherReport.getTodayPicEnd()) {
			weatherReport.setTodayPicEnd(weatherReport.getTodayPicEnd()
					.replaceAll("\\.gif", ""));
		}
		if (null != weatherReport.getTomorrowPicStart()) {
			weatherReport.setTomorrowPicStart(weatherReport
					.getTomorrowPicStart().replaceAll("\\.gif", ""));
		}
		if (null != weatherReport.getTomorrowPicEnd()) {
			weatherReport.setTomorrowPicEnd(weatherReport.getTomorrowPicEnd()
					.replaceAll("\\.gif", ""));
		}
		if (null != weatherReport.getThirdDayPicStart()) {
			weatherReport.setThirdDayPicStart(weatherReport
					.getThirdDayPicStart().replaceAll("\\.gif", ""));
		}
		if (null != weatherReport.getThirdDayPicEnd()) {
			weatherReport.setThirdDayPicEnd(weatherReport.getThirdDayPicEnd()
					.replaceAll("\\.gif", ""));
		}
		if (null != weatherReport.getMetar()) {
			weatherReport.setMetar(weatherReport.getMetar().split("；")[0]
					.split("：")[2]);
		}
		if (null != weatherReport.getLifeExpectancy()) {
			StringBuffer expr = new StringBuffer();
			String[] exprs;
			exprs = weatherReport.getLifeExpectancy().split("\n");
			expr.append("<b>").append(exprs[2]).append("<br/><b>");
			expr.append(exprs[3]).append("<br/><b>");
			expr.append(exprs[6]).append("<br/><b>");
			expr.append(exprs[7].replaceAll("舒适度指数", "舒适指数"));
			weatherReport.setLifeExpectancy(expr.toString().replaceAll("：",
					"</b>："));
		}
		if (null != weatherReport.getTodayWeather()) {
			weatherReport.setTodayWeather(weatherReport.getTodayWeather()
					.split(" ")[1]);
		}
		if (null != weatherReport.getTomorrowWeather()) {
			weatherReport.setTomorrowWeather(weatherReport.getTomorrowWeather()
					.split(" ")[1]);
		}
		if (null != weatherReport.getThirdDayWeather()) {
			weatherReport.setThirdDayWeather(weatherReport.getThirdDayWeather()
					.split(" ")[1]);
		}
		if (null != weatherReport.getTodayWind()) {
			weatherReport
					.setTodayWind(weatherReport.getTodayWind().split("转")[0]);
		}
		if (null != weatherReport.getTomorrowWind()) {
			weatherReport.setTomorrowWind(weatherReport.getTomorrowWind()
					.split("转")[0]);
		}
		if (null != weatherReport.getThirdDayWind()) {
			weatherReport.setThirdDayWind(weatherReport.getThirdDayWind()
					.split("转")[0]);
		}
	}

	/**
	 * 从xml文件读取天气预报信息到weatherReport
	 */
	private static synchronized void syncWeatherReport() {
		List<Element> allelement = null;
		List<String> result = new ArrayList<String>();

		try {
			// 获得propMgr
			PropertyManager propMgr = (PropertyManager) ApplicationContextHolder.getBean("propMgr");
			String xmlpath = propMgr.getParameter("yds.com.weather.xmlpath");

			// 读取xml文件
			allelement = new XmlOperator(xmlpath).getAllElement();
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (null != allelement) {
			weatherReport = new WeatherReport();
			// 将取得的结果放到result list中
			for (Iterator<Element> iter = allelement.iterator(); iter.hasNext();) {
				Object element = iter.next().getData();
				if (null != element) {
					result.add(element.toString());
				}
			}
			// List大小小于预想结果时
			if (result.size() < NUM_XML_ROW) {
				return;
			}
			// 服务暂停或取不到对应城市的天气预报时
			if ("".equals(result.get(2))){
				return;
			}
			// 将List中的结果放到bean中
			int i = 1;
			weatherReport.setProvince(result.get(i++));
			weatherReport.setCity(result.get(i++));
			weatherReport.setCityId(result.get(i++));
			weatherReport.setCityPicture(result.get(i++));
			weatherReport.setUpdateTime(result.get(i++));
			weatherReport.setTodayTemperature(result.get(i++));
			weatherReport.setTodayWeather(result.get(i++));
			weatherReport.setTodayWind(result.get(i++));
			weatherReport.setTodayPicStart(result.get(i++));
			weatherReport.setTodayPicEnd(result.get(i++));
			weatherReport.setMetar(result.get(i++));
			weatherReport.setLifeExpectancy(result.get(i++));
			weatherReport.setTomorrowTemperature(result.get(i++));
			weatherReport.setTomorrowWeather(result.get(i++));
			weatherReport.setTomorrowWind(result.get(i++));
			weatherReport.setTomorrowPicStart(result.get(i++));
			weatherReport.setTomorrowPicEnd(result.get(i++));
			weatherReport.setThirdDayTemperature(result.get(i++));
			weatherReport.setThirdDayWeather(result.get(i++));
			weatherReport.setThirdDayWind(result.get(i++));
			weatherReport.setThirdDayPicStart(result.get(i++));
			weatherReport.setThirdDayPicEnd(result.get(i++));
			weatherReport.setCityDescription(result.get(i++));
			weatherReport.setTimestamp(new Date());
		}
	}
}
