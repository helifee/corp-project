/*
 * @(#)TtCommonService.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 共通
 */

package com.yds.tt.manager.service;

import java.util.Date;
import java.util.List;

import com.yds.common.bean.SysCodeInfo;
import com.yds.tt.manager.bean.AuthorityInfo;
import com.yds.tt.manager.bean.CategoryInfo;
import com.yds.tt.manager.bean.DisposeInfo;
import com.yds.tt.manager.bean.EmpOrgInfo;
import com.yds.tt.manager.bean.SltCategoryConditionInfo;
import com.yds.tt.manager.bean.SltCategoryInfo;
import com.yds.tt.manager.bean.TtCheckResult;
import com.yds.tt.manager.service.TtConstants.Mode;
import com.yds.tt.manager.service.TtConstants.PageId;
import com.yds.tt.manager.service.TtConstants.SEQID;

/**
 * 共通Service
 * 
 * @author qianguorong
 * @version 1.00 2010/03/15
 */
public interface TtCommonService {
	
	public String strClazz = "";
	
	/**
	 * 取得序列号
	 * 
	 * @param seqId 序列号ID
	 * @return String 序列号值
	 */
	public String getSequence(SEQID seqId);
	
	/**
	 * 存储时间戳
	 * 
	 * @param pageId 业务区分ID
	 * @param timestamp 时间戳
	 */
	public void setTimestamp(PageId id, Date timestamp);
	
	/**
	 * 存储时间戳
	 * 
	 * @param pageId 业务区分ID
	 * @param mode 业务内区分mode
	 * @param timestamp 时间戳
	 */
	public void setTimestamp(PageId id, Mode mode, Date timestamp);
	
	/**
	 * 时间戳判断
	 * 
	 * @param pageId 业务区分ID
	 * @param updateTime 更新时间
	 * @return boolean 时间戳判断正确与否
	 */
	public boolean checkTimeStamp(PageId pageId, Date updateTime);
	
	/**
	 * 时间戳判断
	 * 
	 * @param pageId 业务区分ID
	 * @param mode 业务内区分mode
	 * @param updateTime 更新时间
	 * @return boolean 时间戳判断正确与否
	 */
	public boolean checkTimeStamp(PageId pageId, Mode mode, Date updateTime);
	
	/**
	 * 事件权限检查
	 * 
	 * @param enventName 事件名
	 * @return String 错误信息
	 */
	public String checkStartupAuthority(String enventName);
	
	/**
	 * 一级分类列表取得
	 * 
	 * @param sltCategoryConditionInfo 参数bean
	 * @return 一级分类下拉列表数据
	 */
	public List<SltCategoryInfo> getCategory1(SltCategoryConditionInfo sltCategoryConditionInfo);

	/**
	 * 二级分类列表取得
	 * 
	 * @param sltCategoryConditionInfo 参数bean
	 * @return 二级分类下拉列表数据
	 */
	public List<SltCategoryInfo> getCategory2(SltCategoryConditionInfo sltCategoryConditionInfo);
	
	/**
	 * 三级分类列表取得
	 * 
	 * @param sltCategoryConditionInfo 参数bean
	 * @return 三级分类下拉列表数据
	 */
	public List<SltCategoryInfo> getCategory3(SltCategoryConditionInfo sltCategoryConditionInfo);	

	/**
	 * 根据权限生成分类检索条件
	 * 
	 * @param userId 用户ID
	 * @param authorityId 权限区分
	 * @return 用户所具有权限的分类
	 */
	public List<CategoryInfo> getCategoryCondition(String userId,Integer authorityId);	
	
	/**
	 * 根据权限生成分类检索条件
	 * 
	 * @param userId 用户ID
	 * @param authorityId 权限区分
	 * @param paraCategory1Id 一级分类ID
	 * @param paraCategory2Id 二级分类ID
	 * @param paraCategory3Id 三级分类ID
	 * @return 用户所具有权限的分类
	 */
	public List<CategoryInfo> getCategoryCondition(String userId,Integer authorityId,Integer paraCategory1Id, Integer paraCategory2Id,
			Integer paraCategory3Id);

	/**
	 * 接口参数检查
	 * @param 待检查的接口参数 args
	 * @return null或者错误信息
	 */
	public String isParamNull(Object... args);
	
	/**
	 * 画面启动限制检查
	 * @param 画面ID   pageId
	 * @param 事件ID   eventId
	 * @param 分类1ID  category1Id
	 * @param 分类2ID  category2Id
	 * @param 分类3ID  category3Id
	 * @param 对象区分 typeId
	 * @param 对象ID   objectId
	 */
	public TtCheckResult checkStartupAuthority(String pageId,String eventId,Integer category1Id,Integer category2Id,Integer category3Id,Integer typeId,List<String> objectId);
	
	/**
	 * 画面启动限制检查
	 * @param 画面ID   pageId
	 * @param 事件ID   eventId
	 * @param 对象区分 typeId
	 * @param 对象ID   objectId
	 */
	public TtCheckResult checkStartupAuthority(String pageId,String eventId,Integer typeId,List<String> objectId);

	/**
	 * 画面启动限制检查
	 * @param 画面ID   pageId
	 * @param 事件ID   eventId
	 * @param 分类1ID  category1Id
	 * @param 分类2ID  category2Id
	 * @param 分类3ID  category3Id
	 */
	public TtCheckResult checkStartupAuthority(String pageId, String eventId,
			Integer category1Id, Integer category2Id, Integer category3Id) ;
	/**
	 * 对象权限检查
	 * @param userId 用户ID
	 * @param objectId 对象ID  
	 * @param typeId 对象区分 
	 * @param authoritys 权限
	 * @return 检查结果
	 */
	public TtCheckResult checkObjectAuthority(List<String> objectId, Integer typeId, List<Integer> authoritys);

	/**
	 * 超级管理员帐号密码检查
	 * @param adminInfo 管理员登陆信息
	 * 
	 * @return 检查结果
	 */
	public Integer checkAdminInfo(DisposeInfo adminInfo);
	
	/**
	 * 更新配置表登录者信息
	 * 
	 * @param loginUserId 登录者Id
	 * @param loginTime   登录时间
	 * @return 更新成功/不成功
	 */
	public int updateLoginInfo(String loginUserId,String loginTime);
	
	/**
	 * 编辑者权限信息一览取得.
	 * 
	 * @param relatedobjectId
	 *            关联对象ID	 
	 * @param authorityId
	 *            权限区分（6：课程编辑，7：教材编辑，8：考试编辑，9：试卷编辑）
	 * @return List<AuthorityInfo> 编辑者权限信息
	 */
	public List<AuthorityInfo> getAuthorityInfoList(String relatedobjectId,
			String authorityId);
	
	/**
	 * 审批者/实施者权限信息取得.
	 * 
	 * @param relatedobjectId
	 *            关联对象ID	 
	 * @param authorityId
	 *            权限区分（10：课程审批，11：教材审批，12：考试实施，13：试卷审批）
	 * @return List<AuthorityInfo> 审批者/实施者权限信息
	 */
	public AuthorityInfo getAuthorityInfo(String relatedobjectId,
			String authorityId);
	
	/**
	 * 检查并添加排他锁
	 * 
	 * @param String... 锁键
	 */
	public void addLock(String... keys);
	
	/**
	 * 批量检查并添加排他锁
	 * 
	 * @param String 锁键1
	 * @param List<String> 锁键2列表
	 */
	public void addLockByList(String key1, List<String> key2List);
	
	/**
	 * 解除排他锁
	 * 
	 * @param String... 锁键
	 */
	public void removeLock(String... keys);
	
	/**
	 * 更新排他锁
	 * 
	 * @param String... 锁键
	 */
	public void updateLock(String... keys);
	
	/**
	 * 用户名取得
	 * 
	 * @param String 用户ID
	 * @return String 用户名
	 */
	public String getUserName(String userId);
	
	/**
	 * 员工存在检查
	 * 
	 * @param String 用户ID是
	 * @return true:存在 false:不存在
	 */
	public boolean isExistUserId(String userId);
	
	/**
	 * 项目组下拉列表数据取得
	 * 
	 * @return 项目组下拉列表数据
	 */
	public List<EmpOrgInfo> getOrgList();
	
	/**
	 * 判断分类状态是否正常
	 *   分类状态=0（正常）或者2（已细化）.
	 *   
	 * @param Integer 分类1ID.
	 * @param Integer 分类2ID.
	 * @param Integer 分类3ID.
	 * @return boolean true：正常, false：非正常.
	 */
	public boolean checkCategoryStatus(Integer category1, Integer category2, Integer category3);

	/**
	 * 消息失效时间取得
	 * 
	 * @param String 输入时间.
	 * @return 输入时间+消息失效间隔
	 */
	public Date getMsgInvalidDate(String strDate);
	
	/**
	 * 取得维护权限权限选择信息
	 * 
	 * @return SysCodeInfo 权限信息
	 */
	public List<SysCodeInfo> getMaintAuthorityList();
	
	/**
	 * 取得其他权限权限选择信息
	 * 
	 * @return SysCodeInfo 权限信息
	 */
	public List<SysCodeInfo> getOtherAuthorityList();
	
	/**
	 * 管理菜单控制信息取得
	 * 
	 * @return void
	 */
	 public void getMenuContorlInfo();
	 
	 /**
	  * 用户权限取得
	  * 
	  */
	 public void getUserAuthorities();
	 
	 /**
	  * 全局Session中权限TimeStamp更新
	  *    
	  */
	 public void authrityTimestampUpdate();
	 
	 /**
	  * 全局Session中权限TimeStamp检查
	  *    
	  */
	 public void authrityTimestampCheck();
}
