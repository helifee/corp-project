/*
 * @(#)TtCommonServiceImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 共通
 */
package com.yds.tt.manager.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.springframework.stereotype.Service;

import com.yds.base.service.AbstractBaseService;
import com.yds.common.bean.CheckAndLockInfo;
import com.yds.common.bean.SysCodeInfo;
import com.yds.common.service.SessionConstants;
import com.yds.tt.manager.bean.AuthorityCheckPara;
import com.yds.tt.manager.bean.AuthorityInfo;
import com.yds.tt.manager.bean.CategoryInfo;
import com.yds.tt.manager.bean.DisposeInfo;
import com.yds.tt.manager.bean.EmpOrgInfo;
import com.yds.tt.manager.bean.MenuControlInfo;
import com.yds.tt.manager.bean.PageStartupControl;
import com.yds.tt.manager.bean.SequenceInfo;
import com.yds.tt.manager.bean.SltCategoryConditionInfo;
import com.yds.tt.manager.bean.SltCategoryInfo;
import com.yds.tt.manager.bean.TtCheckResult;
import com.yds.tt.manager.dao.TtCommonDao;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtCommonUtil;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.manager.service.TtExclusiveException;
import com.yds.tt.manager.service.TtExclusiveExtException;
import com.yds.tt.manager.service.TtConstants.Mode;
import com.yds.tt.manager.service.TtConstants.PageId;
import com.yds.tt.manager.service.TtConstants.SEQID;
import com.yds.util.service.ApplicationManager;
import com.yds.util.service.DateUtil;
import com.yds.util.service.EncryptionPW;
import com.yds.util.service.Session;

/**
 * @see com.yds.tt.manager.service.TtCommonService
 */
@Service("ttCommonService")
public class TtCommonServiceImpl extends AbstractBaseService implements
		TtCommonService {
	
	private TtCommonDao ttCommonDao;

	/**
	 * @param ttCommonDao
	 *            the ttCommonDao to set
	 */
	public void setTtCommonDao(TtCommonDao ttCommonDao) {
		this.ttCommonDao = ttCommonDao;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String getSequence(SEQID seqId) {

		// 取得序列号
		SequenceInfo sequenceInfo = ttCommonDao.getSequenceInfo(seqId.value());

		if (sequenceInfo.getSequenceValue() < sequenceInfo.getMaxValue()) {
			if (ttCommonDao.updateSequenceInfo(seqId.value()) > 0) {

				// 序列号 + 1
				Integer newSeq = sequenceInfo.getSequenceValue() + 1;
				StringBuilder seqValue = new StringBuilder(newSeq.toString());
				int seqLength = sequenceInfo.getSequenceLength();

				// 根据序列位数补零
				while (seqValue.length() < seqLength) {
					seqValue.insert(0, "0");
				}

				return seqValue.insert(0, seqId.value()).toString();
			}
		}

		// 序列值达到最大值时返回NULL
		return null;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void setTimestamp(PageId pageId, Date timestamp) {

		Session.set(pageId.getSessionKeyTS(), timestamp);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void setTimestamp(PageId pageId, Mode mode, Date timestamp) {

		Session.set(pageId.getSessionKeyTSMode(mode), timestamp);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean checkTimeStamp(PageId pageId, Date updateTime) {
		
		Object value = Session.get(pageId.getSessionKeyTS());

		if (value != null) {
			// 从session中得到时间戳
			Date timestamp = (Date) value;

			if (timestamp.equals(updateTime)
					|| timestamp.toString().equals(updateTime.toString())) {
				return true;
			}
		}

		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean checkTimeStamp(PageId pageId, Mode mode, Date updateTime) {

		Object value = Session.get(pageId.getSessionKeyTSMode(mode));

		if (value != null) {
			// 从session中得到时间戳
			Date timestamp = (Date) value;

			if (timestamp.equals(updateTime)
					|| timestamp.toString().equals(updateTime.toString())) {
				return true;
			}
		}

		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String checkStartupAuthority(String enventName) {
		// 是否登录检查

		// 权限检查配置信息取得

		// 权限检查

		return null;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<SltCategoryInfo> getCategory1(
			SltCategoryConditionInfo sltCategoryConditionInfo) {

		// 不需要权限控制
		if ("0".equals(sltCategoryConditionInfo.getAuthorityNeed())) {

			// 一级分类列表取得
			return getCategory(sltCategoryConditionInfo, 1);
		} else {
			// 如果需要权限控制
			// 权限一级分类ID取得
			List<SltCategoryInfo> list = ttCommonDao
					.getAuthority1(sltCategoryConditionInfo);

			String firstOptionNull = sltCategoryConditionInfo
					.getFirstOptionNull();

			if (list.size() > 0) {
				// 具有该层所有权限
				if (list.get(0).getCategoryId() == 0) {
					// 分类表一级分类列表取得
					return getCategory(sltCategoryConditionInfo, 1);
				}

				// 权限一级分类下拉类表内容
				List<SltCategoryInfo> listAuthority = ttCommonDao
						.getAuthorityCategory1(sltCategoryConditionInfo);

				// 第一行不为空时
				if ("1".equals(firstOptionNull)) {
					return setCategoryText(listAuthority);
				}

				// 第一行追加空行
				return addNullRow(setCategoryText(listAuthority));
			}

			// 没有数据时，第一行追加空行
			return addNullRow(list);
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<SltCategoryInfo> getCategory2(
			SltCategoryConditionInfo sltCategoryConditionInfo) {

		if ("0".equals(sltCategoryConditionInfo.getAuthorityNeed())) {
			// 二级分类列表取得
			return getCategory(sltCategoryConditionInfo, 2);
		} else {

			// 如果需要权限控制
			List<SltCategoryInfo> list = ttCommonDao
					.getAuthority2(sltCategoryConditionInfo);

			String firstOptionNull = sltCategoryConditionInfo
					.getFirstOptionNull();

			if (list.size() > 0) {
				// 具有该层所有权限
				if (list.get(0).getCategoryId() == 0) {
					// 分类表一级分类列表取得
					return getCategory(sltCategoryConditionInfo, 2);
				}

				// 权限一级分类下拉类表内容
				List<SltCategoryInfo> listAuthority = ttCommonDao
						.getAuthorityCategory2(sltCategoryConditionInfo);

				// 当第一行不为空时，而需要设置成空行时
				if ("1".equals(firstOptionNull)) {
					return setCategoryText(listAuthority);
				}

				// 第一行追加空行
				return addNullRow(setCategoryText(listAuthority));
			}

			// 没有数据时，第一行追加空行
			return addNullRow(list);
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<SltCategoryInfo> getCategory3(
			SltCategoryConditionInfo sltCategoryConditionInfo) {

		// 不需要权限控制
		if ("0".equals(sltCategoryConditionInfo.getAuthorityNeed())) {
			// 三级分类列表取得
			return getCategory(sltCategoryConditionInfo, 3);
		} else {
			// 如果需要权限控制
			List<SltCategoryInfo> list = ttCommonDao
					.getAuthority3(sltCategoryConditionInfo);

			String firstOptionNull = sltCategoryConditionInfo
					.getFirstOptionNull();

			if (list.size() > 0) {
				// 具有该层所有权限
				if (list.get(0).getCategoryId() == 0) {
					// 分类表一级分类列表取得
					return getCategory(sltCategoryConditionInfo, 3);
				}

				// 权限一级分类下拉类表内容
				List<SltCategoryInfo> listAuthority = ttCommonDao
						.getAuthorityCategory3(sltCategoryConditionInfo);

				// 当第一行不为空时，而需要设置成空行时
				if ("1".equals(firstOptionNull)) {
					return setCategoryText(listAuthority);
				}

				// 第一行追加空行
				return addNullRow(setCategoryText(listAuthority));
			}

			// 没有数据时，第一行追加空行
			return addNullRow(list);
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<CategoryInfo> getCategoryCondition(String userId,
			Integer authorityId) {

		return getCategoryCondition(userId, authorityId, 0, 0, 0);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<CategoryInfo> getCategoryCondition(String userId,
			Integer authorityId, Integer paraCategory1Id,
			Integer paraCategory2Id, Integer paraCategory3Id) {

		Integer category1Id;
		Integer category2Id;
		Integer category3Id;

		if (paraCategory1Id == null) {
			category1Id = 0;
		} else {
			category1Id = paraCategory1Id;
		}

		if (paraCategory2Id == null) {
			category2Id = 0;
		} else {
			category2Id = paraCategory2Id;
		}

		if (paraCategory3Id == null) {
			category3Id = 0;
		} else {
			category3Id = paraCategory3Id;
		}

		SltCategoryConditionInfo sltCategoryConditionInfo = new SltCategoryConditionInfo();
		sltCategoryConditionInfo.setAuthorityId(authorityId);
		sltCategoryConditionInfo.setUserId(userId);

		// 检索结果
		List<CategoryInfo> searchResult = ttCommonDao
				.getAuthorityCategory(sltCategoryConditionInfo);

		if (searchResult.size() < 1) {
			return null;
		}

		// 返回结果
		List<CategoryInfo> returnResult = new ArrayList<CategoryInfo>();
		CategoryInfo returnResultRow;

		// 合并多余的权限分类
		// 具有全部权限,返回输入的分类
		if (searchResult.get(0).getCategory1Id() == 0) {
			returnResultRow = new CategoryInfo();
			returnResultRow.setCategory1Id(category1Id);
			returnResultRow.setCategory2Id(category2Id);
			returnResultRow.setCategory3Id(category3Id);

			returnResult.add(returnResultRow);
			return returnResult;
		}

		// 当不具有所有权限时
		// 移除三级分类的冗余分类
		List<CategoryInfo> returnResult3 = new ArrayList<CategoryInfo>();
		Integer category1IdCompare = -1;
		Integer category2IdCompare = -1;
		Boolean categoryZeroFlg = false;

		for (int i = 0; i < searchResult.size(); i++) {
			if (category1IdCompare.compareTo(searchResult.get(i)
					.getCategory1Id()) == 0
					&& category2IdCompare.compareTo(searchResult.get(i)
							.getCategory2Id()) == 0) {
				if (categoryZeroFlg == false) {
					returnResultRow = new CategoryInfo();
					returnResultRow.setCategory1Id(searchResult.get(i)
							.getCategory1Id());
					returnResultRow.setCategory2Id(searchResult.get(i)
							.getCategory2Id());
					returnResultRow.setCategory3Id(searchResult.get(i)
							.getCategory3Id());
					returnResult3.add(returnResultRow);
				}
			} else {
				if (searchResult.get(i).getCategory3Id() == 0) {
					categoryZeroFlg = true;
				} else {
					categoryZeroFlg = false;
				}
				returnResultRow = new CategoryInfo();
				returnResultRow.setCategory1Id(searchResult.get(i)
						.getCategory1Id());
				returnResultRow.setCategory2Id(searchResult.get(i)
						.getCategory2Id());
				returnResultRow.setCategory3Id(searchResult.get(i)
						.getCategory3Id());
				returnResult3.add(returnResultRow);

				category1IdCompare = searchResult.get(i).getCategory1Id();
				category2IdCompare = searchResult.get(i).getCategory2Id();
			}
		}
		// 移除二级分类的冗余分类
		List<CategoryInfo> returnResult2 = new ArrayList<CategoryInfo>();
		category1IdCompare = -1;
		categoryZeroFlg = false;
		for (int i = 0; i < returnResult3.size(); i++) {
			if (category1IdCompare.compareTo(returnResult3.get(i)
					.getCategory1Id()) == 0) {
				if (categoryZeroFlg == false) {
					returnResultRow = new CategoryInfo();
					returnResultRow.setCategory1Id(returnResult3.get(i)
							.getCategory1Id());
					returnResultRow.setCategory2Id(returnResult3.get(i)
							.getCategory2Id());
					returnResultRow.setCategory3Id(returnResult3.get(i)
							.getCategory3Id());
					returnResult2.add(returnResultRow);
				}
			} else {
				if (returnResult3.get(i).getCategory3Id() == 0) {
					categoryZeroFlg = true;
				} else {
					categoryZeroFlg = false;
				}
				returnResultRow = new CategoryInfo();
				returnResultRow.setCategory1Id(returnResult3.get(i)
						.getCategory1Id());
				returnResultRow.setCategory2Id(returnResult3.get(i)
						.getCategory2Id());
				returnResultRow.setCategory3Id(returnResult3.get(i)
						.getCategory3Id());
				returnResult2.add(returnResultRow);

				category1IdCompare = returnResult3.get(i).getCategory1Id();
			}
		}

		// 匹配输入条件三级分类和处理结果三级分类,得出最精确的三级分类List
		for (int i = 0; i < returnResult2.size(); i++) {
			// 传入的一级分类ID为0,则检索结果的第i行作为权限分类
			if (category1Id == 0) {
				returnResult.add(returnResult2.get(i));
				continue;
			}
			// 如果一级分类ID不为0,而且不相等，则检索结果的第i行不作为权限分类
			if (category1Id.compareTo(returnResult2.get(i).getCategory1Id()) != 0) {
				continue;
			}
			// 如果一级分类ID相等,传入参数的二级分类ID为0,则检索结果的第i行作为权限分类
			if (category2Id == 0) {
				returnResult.add(returnResult2.get(i));
				continue;
			}
			// 如果一级分类ID相等,检索结果的第i行的二级分类ID为0,则传入参数作为权限分类
			if (returnResult2.get(i).getCategory2Id() == 0) {
				returnResultRow = new CategoryInfo();
				returnResultRow.setCategory1Id(category1Id);
				returnResultRow.setCategory2Id(category2Id);
				returnResultRow.setCategory3Id(category3Id);
				returnResult.add(returnResultRow);
				continue;
			}
			// 如果一级分类ID相等,检索结果的第i行的二级分类ID和传入参数的二级分类ID不为0且不相等,则检索结果的第i行不作为权限分类
			if (category2Id.compareTo(returnResult2.get(i).getCategory2Id()) != 0) {
				continue;
			}
			if (category3Id == 0) {
				returnResult.add(returnResult2.get(i));
				continue;
			}
			if (returnResult2.get(i).getCategory3Id() == 0) {
				returnResultRow = new CategoryInfo();
				returnResultRow.setCategory1Id(category1Id);
				returnResultRow.setCategory2Id(category2Id);
				returnResultRow.setCategory3Id(category3Id);
				returnResult.add(returnResultRow);
				continue;
			}
			if (category3Id.compareTo(returnResult2.get(i).getCategory3Id()) != 0) {
				continue;
			}
			returnResult.add(returnResult2.get(i));
		}

		return returnResult;
	}

	/**
	 * 非权限控制列表内容取得
	 * 
	 * @param sltCategoryConditionInfo
	 *            参数bean
	 * @param level
	 *            取得分类层次
	 * @return 非权限控制列表
	 */
	private List<SltCategoryInfo> getCategory(
			SltCategoryConditionInfo sltCategoryConditionInfo, int level) {

		List<SltCategoryInfo> list = new ArrayList<SltCategoryInfo>();

		if (1 == level) {
			// 一级分类列表
			list = ttCommonDao.getCategoryCategory1(sltCategoryConditionInfo);
		}

		if (2 == level) {
			// 二级分类列表
			list = ttCommonDao.getCategoryCategory2(sltCategoryConditionInfo);
		}

		if (3 == level) {
			// 三级分类列表
			list = ttCommonDao.getCategoryCategory3(sltCategoryConditionInfo);
		}

		// 如果包含不整合数据
		if (true == sltCategoryConditionInfo.getErrorDataExist()) {
			// 列表内容编辑
			list = setCategoryText(list);
		}

		// 第一行追加空行
		list = addNullRow(list);

		return list;

	}

	/**
	 * 列表内容编辑
	 * 
	 * @param List
	 *            <SltCategoryInfo> 待编辑列表
	 * @return 编辑后列表
	 */
	private List<SltCategoryInfo> setCategoryText(List<SltCategoryInfo> list) {

		int listLength = list.size();

		for (int i = 0; i < listLength; i++) {
			// 如果是待删除，列表值加上后缀(待删除)
			if (TtConstants.R15.R15_1.toString().equals(
					String.valueOf(list.get(i).getCategoryStatus()))) {
				list.get(i).setCategoryName(
						list.get(i).getCategoryName().concat("(待删除)"));
			} else if (TtConstants.R15.R15_2.toString().equals(
					String.valueOf(list.get(i).getCategoryStatus()))) {
				// 已细化，，列表值加上后缀(已细化)
				list.get(i).setCategoryName(
						list.get(i).getCategoryName().concat("(已细化)"));
			}
		}

		return list;
	}

	/**
	 * 在第一行追加空
	 * 
	 * @param List
	 *            <SltCategoryInfo> 待编辑列表
	 * @return 在第一行追加空后列表
	 */
	private List<SltCategoryInfo> addNullRow(List<SltCategoryInfo> list) {

		SltCategoryInfo oneRow = new SltCategoryInfo();
		oneRow.setCategoryId(0);
		oneRow.setCategoryName("");
		list.add(0, oneRow);

		return list;
	}

	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public void getUserAuthorities(){
		//取得Session用户ID
		String userId = TtCommonUtil.getLoginUserId();

		//用户权限取得
		List<AuthorityInfo> userAuthorityInfo= (List<AuthorityInfo>) ttCommonDao.getUserAuthorities(userId);
		
		Session.set(SessionConstants.USER_AUTHOROITY, userAuthorityInfo);
	}
	/**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	@Override
	public TtCheckResult checkStartupAuthority(String pageId, String eventId,
			Integer category1Id, Integer category2Id, Integer category3Id,
			Integer typeId, List<String> objectId) {
		TtCheckResult checkResult = new TtCheckResult();

		// ------ 2. 参数检索处理
		// 参数.画面ID不能为空；
		// 参数.事件不能为空；
		// 参数.对象区分和参数.对象ID必须同时为空或同时不为空.
		if (null == pageId|| null == eventId || ((null == typeId || 0 == typeId) ^ (null == objectId || 0 == objectId
						.size()))) {
			checkResult.setRetFlag(false);
			checkResult.setRetMessage(propMgr.getMessage("yds.tt.error.GTE02"));
			checkResult.setErrLevel("GTE02");
			return checkResult;
		}
		
		// QIANGUORONG 7/26追加：Session中权限信息不是最新的时候，重新取得。
		authrityTimestampCheck();
		
		//7.21更新
		List<PageStartupControl>  pageStartUpAuthorityList;
		PageStartupControl pageStartUpAuthorities = null; 
		Map<String, List<PageStartupControl>> pageAuthorityMap = new HashMap<String, List<PageStartupControl>>();
		
		//如果Session不存在启动控制条件，则由DB中取得
		if(null == Session.get(SessionConstants.PAGE_START_AUTHOROITY)) {
			pageStartUpAuthorityList = ttCommonDao.getPageStartUpAuthorities(pageId);
			pageAuthorityMap.put(pageId, pageStartUpAuthorityList);
			Session.set(SessionConstants.PAGE_START_AUTHOROITY, pageAuthorityMap);

		}else if (null == ((HashMap<String,List<PageStartupControl>>) Session.get(SessionConstants.PAGE_START_AUTHOROITY)).get(pageId) ){
			pageStartUpAuthorityList = ttCommonDao.getPageStartUpAuthorities(pageId);
			pageAuthorityMap.put(pageId, pageStartUpAuthorityList);
			Session.set(SessionConstants.PAGE_START_AUTHOROITY, pageAuthorityMap);

		} else{
			pageAuthorityMap = (HashMap<String, List<PageStartupControl>>) Session.get(SessionConstants.PAGE_START_AUTHOROITY);
			pageStartUpAuthorityList = pageAuthorityMap.get(pageId);
		}
		
		// ------ 3. 启动控制条件及权限取得处理
		//PageStartupControl userAuthorities = ttCommonDao
		//		.getUserAuthorities(searchPara);
		//取得特定eventID对用权限列表
		for(int index=0; index < pageStartUpAuthorityList.size(); index++) {
			if(eventId.equals(pageStartUpAuthorityList.get(index).getEventId())){
				pageStartUpAuthorities = pageStartUpAuthorityList.get(index);
			}
		}
		if(null == pageStartUpAuthorities) {
			//TODO 临时注释。
			/*checkResult.setRetFlag(false);
			checkResult.setRetMessage(propMgr.getMessage("yds.tt.error.GTE02"));
			checkResult.setErrLevel("GTE02");
			return checkResult;*/
			checkResult.setRetFlag(true);
			return checkResult;
		}

		// ------ 4. 启动限制判定处理
		// (1) 是否维护中判定处理
		if ((!"1".equals(pageStartUpAuthorities.getAuthority1()))
				&& "1".equals(ttCommonDao.getMantainFlag())) {
			checkResult.setRetFlag(false);
			checkResult.setRetMessage(propMgr.getMessage("yds.tt.error.GTE03"));
			checkResult.setErrLevel("GTE03");
			return checkResult;
		}

		// (2) 是否有权限判定处理
		// A 权限List编辑 "1" 对应画面启动控制表中权限项目：有权限
		List<Integer> authorityList = new ArrayList<Integer>();
		// 课程：具有课程管理员权限情况下
		if ("1".equals(pageStartUpAuthorities.getAuthority3())) {
			authorityList.add(TtConstants.C24.C24_1.value());
		}
		// 考试：具有考试管理员权限情况下
		if ("1".equals(pageStartUpAuthorities.getAuthority4())) {
			authorityList.add(TtConstants.C24.C24_2.value());
		}
		// 题库：具有题库管理员权限情况下
		if ("1".equals(pageStartUpAuthorities.getAuthority5())) {
			authorityList.add(TtConstants.C24.C24_3.value());
		}
		// 系统：具有系统维护权限情况下
		if ("1".equals(pageStartUpAuthorities.getAuthority6())) {
			authorityList.add(TtConstants.C24.C24_5.value());
		}
		// 成绩：具有成绩查看权限情况下
		if ("1".equals(pageStartUpAuthorities.getAuthority7())) {
			authorityList.add(TtConstants.C24.C24_4.value());
		}
		// 课程编：具有课程编辑权限情况下
		if ("1".equals(pageStartUpAuthorities.getAuthority8())) {
			authorityList.add(TtConstants.C24.C24_6.value());
		}
		// 课程审：具有课程审核权限情况下
		if ("1".equals(pageStartUpAuthorities.getAuthority9())) {
			authorityList.add(TtConstants.C24.C24_10.value());
		}
		// 考试编：具有考试编辑权限情况下
		if ("1".equals(pageStartUpAuthorities.getAuthority10())) {
			authorityList.add(TtConstants.C24.C24_8.value());
		}
		// 考试审：具有考试审核权限情况下
		if ("1".equals(pageStartUpAuthorities.getAuthority11())) {
			authorityList.add(TtConstants.C24.C24_12.value());
		}
		// 教材编：具有教材编辑权限情况下z
		if ("1".equals(pageStartUpAuthorities.getAuthority12())) {
			authorityList.add(TtConstants.C24.C24_7.value());
		}
		// 教材审：具有教材审核权限情况下
		if ("1".equals(pageStartUpAuthorities.getAuthority13())) {
			authorityList.add(TtConstants.C24.C24_11.value());
		}
		// 试卷编：具有试卷编辑权限情况下
		if ("1".equals(pageStartUpAuthorities.getAuthority14())) {
			authorityList.add(TtConstants.C24.C24_9.value());
		}
		// 试卷审：具有试卷审核权限情况下
		if ("1".equals(pageStartUpAuthorities.getAuthority15())) {
			authorityList.add(TtConstants.C24.C24_13.value());
		}

		//权限检查（分类权限检查，对象权限检查）
		HashMap<String, ArrayList<Integer>> resultMap = new HashMap<String, ArrayList<Integer>>();
		// 调用【分类权限检查】（checkCategoryAuthority）对用户权限进行检查
		if (null == typeId || 0 == typeId) {
			ArrayList<Integer>  resultAuthority = checkCategoryAuthority(category1Id,category2Id, category3Id, authorityList);
			if (null == resultAuthority) {
				checkResult.setRetFlag(false);
				checkResult.setRetMessage(propMgr
						.getMessage("yds.tt.error.GTE02"));
				return checkResult;
			}
			resultMap.put("", resultAuthority);
			checkResult.setRetFlag(true);
			checkResult.setCheckResultMap(resultMap);
			return checkResult;
		// 调用 【对象限检查】（checkObjectAuthority）对用户权限进行检查
		} else {
			return checkObjectAuthority(objectId, typeId, authorityList);
		}

	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public TtCheckResult checkStartupAuthority(String pageId, String eventId,
			Integer typeId, List<String> objectId) {
		
		return checkStartupAuthority(pageId, eventId, 0, 0, 0,
									 typeId, objectId);
	}
	/**
	 * {@inheritDoc}
	 */
	@Override
	public TtCheckResult checkStartupAuthority(String pageId, String eventId,
			Integer category1Id, Integer category2Id, Integer category3Id) {
		
		return checkStartupAuthority(pageId, eventId,  category1Id,  category2Id,  category3Id,
									 null, null);
	}

	/**
	 * 分类权限检查
	 * 
	 * @param category1Id
	 *            分类ID1
	 * @param category2Id
	 *            分类ID2
	 * @param category3Id
	 *            分类ID3
	 * @param authoritys
	 *            用户权限
	 * @return 检查结果
	 */
	@SuppressWarnings("unchecked")
	private  ArrayList<Integer> checkCategoryAuthority(Integer category1Id,
			Integer category2Id, Integer category3Id, List<Integer> pageAuthorities) {
		List<AuthorityInfo> userAuthorityInfo;//用户权限信息
		ArrayList<Integer> resultAuthorityList = new ArrayList<Integer>();//权限List

		// 1. 参数检查处理
		// 参数.权限不能为空；
		if (null == pageAuthorities || 0 == pageAuthorities.size()) {
			return null;
		}
		if(null == Session.get(SessionConstants.USER_AUTHOROITY)) {
			return null;
		}else{
			//用户权限取得
			userAuthorityInfo=(List<AuthorityInfo>) Session.get(SessionConstants.USER_AUTHOROITY);		
		}

		//遍历画面启动权限列表
		int indexPage,indexUser; //循环用index
		for(indexPage =0; indexPage < pageAuthorities.size(); indexPage++){
			
			//遍历用户权限列表
			for(indexUser=0; indexUser< userAuthorityInfo.size(); indexUser++){
				if((pageAuthorities.get(indexPage).equals(userAuthorityInfo.get(indexUser).getAuthorityId()) &&
						   category1Id.equals(userAuthorityInfo.get(indexUser).getCategory1Id()) &&
						   category2Id.equals(userAuthorityInfo.get(indexUser).getCategory2Id()) &&
						   category3Id.equals(userAuthorityInfo.get(indexUser).getCategory3Id()))|| 
				   (pageAuthorities.get(indexPage).equals(userAuthorityInfo.get(indexUser).getAuthorityId()) &&
						   0 == category1Id &&
						   0 == category2Id &&
						   0 == category3Id)) {
			
					resultAuthorityList.add(pageAuthorities.get(indexPage));
				}
			}
		}

		return (0 == resultAuthorityList.size())?null:resultAuthorityList;
		
	}

	/**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	@Override
	public TtCheckResult checkObjectAuthority(List<String> objectId, Integer typeId, List<Integer> authoritys) {
		TtCheckResult checkResult = new TtCheckResult();//检查结果
		List<AuthorityInfo> userAuthorityInfo;//用户权限信息
		ArrayList<Integer> resultAuthorityList; //权限List
		
		// 1. 参数检查处理
		// ------ 1. 登录检查 当session.用户ID为空时，给返回对象赋值后返回.
		String userId = TtCommonUtil.getLoginUserId();
		if (null == userId) {
			checkResult.setRetFlag(false);
			checkResult.setRetMessage(propMgr.getMessage("yds.tt.error.GTE01"));
			checkResult.setErrLevel("GTE01");
			return checkResult;
		}
		if (null == objectId || null == typeId || null == authoritys) {
			checkResult.setRetFlag(false);
			checkResult.setRetMessage(propMgr
					.getMessage("yds.tt.error.GTE02"));
			return checkResult;
		}
		if(null == Session.get(SessionConstants.USER_AUTHOROITY)) {
			checkResult.setRetFlag(false);
			checkResult.setRetMessage(propMgr
					.getMessage("yds.tt.error.GTE02"));
			return checkResult;
		}else{
			//用户权限取得
			userAuthorityInfo=(List<AuthorityInfo>) Session.get(SessionConstants.USER_AUTHOROITY);		
		}
		HashMap<String,ArrayList<Integer>> resultMap = new HashMap<String, ArrayList<Integer>>(); //对象ID，权限List对应的Map
		AuthorityCheckPara checkPara = new AuthorityCheckPara();
		checkPara.setUserId(userId);
		checkPara.setTypeId(typeId);

		int indexUser;
		for(String objId :objectId){
			resultAuthorityList = new ArrayList<Integer>();
			checkPara.setObjectId(objId);
			for (Integer authority : authoritys) {
				checkPara.setAuthorityId(authority);
			
				// 2. 数据检索处理
				// 对象区分 ： 课程
				if (TtConstants.C43.C43_1.value() == typeId) {
						
					// 权限为课程管理
					if (TtConstants.C24.C24_1.value() == authority) {
						if (0 < ttCommonDao.objectAuthorityCheck1(checkPara)) {
							resultAuthorityList.add(authority);
						}
					}
					// 权限为 课程编辑、课程审批
					if (TtConstants.C24.C24_6.value() == authority
							|| TtConstants.C24.C24_10.value() == authority) {
						//遍历用户权限列表
						for(indexUser=0; indexUser< userAuthorityInfo.size(); indexUser++){
							if(objId.equals(userAuthorityInfo.get(indexUser).getRelatedobjectId()) && 
							   authority.equals(userAuthorityInfo.get(indexUser).getAuthorityId())) {
								resultAuthorityList.add(authority);
							}
						}
					}
				}
		
				// 对象区分 ： 教材
				if (TtConstants.C43.C43_2.value() == typeId) {
						
					// 权限为课程管理
					if (TtConstants.C24.C24_1.value() == authority) {
						if (0  < ttCommonDao.objectAuthorityCheck1(checkPara)) {
							resultAuthorityList.add(authority);
						}
					}
					// 权限为 课程编辑、课程审批
					if (TtConstants.C24.C24_6.value() == authority
							|| TtConstants.C24.C24_10.value() == authority) {
						if (0  < ttCommonDao.objectAuthorityCheck3(checkPara)) {
							resultAuthorityList.add(authority);
						}
					}
					// 权限为教材编辑、教材审批
					if (TtConstants.C24.C24_7.value() == authority
							|| TtConstants.C24.C24_11.value() == authority) {
						//遍历用户权限列表
						for(indexUser=0; indexUser< userAuthorityInfo.size(); indexUser++){
							if(objId.equals(userAuthorityInfo.get(indexUser).getRelatedobjectId()) && 
							   authority.equals(userAuthorityInfo.get(indexUser).getAuthorityId())) {
								resultAuthorityList.add(authority);
							}
						}
					}
				}
		
				// 对象区分 ： 考试
				if (TtConstants.C43.C43_3.value() == typeId) {
					
					// 权限: 考试管理
					if (TtConstants.C24.C24_2.value() == authority) {
						if (0  < ttCommonDao.objectAuthorityCheck1(checkPara)) {
							resultAuthorityList.add(authority);
						}
					}
					// 权限为 考试编辑、考试审批
					if (TtConstants.C24.C24_8.value() == authority
							|| TtConstants.C24.C24_12.value() == authority) {
						//遍历用户权限列表
						for(indexUser=0; indexUser< userAuthorityInfo.size(); indexUser++){
							if(objId.equals(userAuthorityInfo.get(indexUser).getRelatedobjectId()) && 
							   authority.equals(userAuthorityInfo.get(indexUser).getAuthorityId())) {
								resultAuthorityList.add(authority);
							}
						}
					}
				}
		
				// 对象区分 ：考试卷
				if (TtConstants.C43.C43_4.value() == typeId) {
						
						// 权限: 考试管理
						if (TtConstants.C24.C24_2.value() == authority) {
							if (0 < ttCommonDao.objectAuthorityCheck1(checkPara)) {
								resultAuthorityList.add(authority);
							}
						}
						// 权限为 考试编辑、考试审批
						if (TtConstants.C24.C24_8.value() == authority
								|| TtConstants.C24.C24_12.value() == authority) {
							//遍历用户权限列表
							for(indexUser=0; indexUser< userAuthorityInfo.size(); indexUser++){
								if(objId.equals(userAuthorityInfo.get(indexUser).getRelatedobjectId()) && 
								   authority.equals(userAuthorityInfo.get(indexUser).getAuthorityId())) {
									resultAuthorityList.add(authority);
								}
							}
						}
						// 权限为 试卷编辑、试卷审批
						if (TtConstants.C24.C24_9.value() == authority
								|| TtConstants.C24.C24_13.value() == authority) {
							if (0 < ttCommonDao.objectAuthorityCheck2(checkPara)) {
								resultAuthorityList.add(authority);
							}
						}
				}
		
				// 对象区分 ：练习卷
				if (TtConstants.C43.C43_5.value() == typeId) {
					
					// 权限：课程管理
					if (TtConstants.C24.C24_1.value() == authority) {
						if (0 < ttCommonDao.objectAuthorityCheck1(checkPara)) {
							resultAuthorityList.add(authority);
						}
					}
					// 权限： 课程编辑、课程审批
					if (TtConstants.C24.C24_6.value() == authority
							|| TtConstants.C24.C24_10.value() == authority) {
						if (0 < ttCommonDao.objectAuthorityCheck5(checkPara)) {
							resultAuthorityList.add(authority);
						}
					}
					// 权限为教材编辑、教材审批
					if (TtConstants.C24.C24_7.value() == authority
							|| TtConstants.C24.C24_11.value() == authority) {
						if (0 < ttCommonDao.objectAuthorityCheck4(checkPara)) {
							resultAuthorityList.add(authority);
						}
					}
				}
		
				// 对象区分 ： 试题
				if (TtConstants.C43.C43_6.value() == typeId) {
						
						// 权限:题库管理
						if (TtConstants.C24.C24_3.value() == authority) {
							if (0 < ttCommonDao.objectAuthorityCheck1(checkPara)) {
								resultAuthorityList.add(authority);
							}
						}
					}
				}
				
				//有权限的时候将结果存入resultMap
				if(0 < resultAuthorityList.size()){
					resultMap.put(objId, resultAuthorityList);
				}
			}
		//不是所有对象ID都有权限的情况下
		if(objectId.size() != resultMap.size()) {
			checkResult.setRetFlag(false);
			checkResult.setCheckResultMap(resultMap);
			checkResult.setRetMessage(propMgr
					.getMessage("yds.tt.error.GTE02"));
			return checkResult;

		}
		checkResult.setRetFlag(true);
		checkResult.setCheckResultMap(resultMap);
		return checkResult;
	}

	@Override
	public String isParamNull(Object... args) {
		for (Object checkParam : args) {
			if (null == checkParam ) {
				return propMgr.getMessage("yds.tt.error.JYE07");
			}
		}
		return null;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer checkAdminInfo(DisposeInfo adminInfo) {
		
		// 帐号和密码加密
		DisposeInfo disposeInfo = new DisposeInfo();
		disposeInfo.setAdminId(EncryptionPW.md5(adminInfo.getAdminId(),adminInfo.getAdminId()));
		disposeInfo.setAdminPw(EncryptionPW.md5(adminInfo.getAdminPw(),adminInfo.getAdminId()));
		
		return ttCommonDao.checkAdminInfo(disposeInfo);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int updateLoginInfo(String loginUserId, String loginTime) {
		return ttCommonDao.updateLoginUserId(loginUserId)
				+ ttCommonDao.updateLoginTime(loginTime);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<AuthorityInfo> getAuthorityInfoList(String relatedobjectId,
			String authorityId) {

		Map<String, String> paraMap = new HashMap<String, String>();
		paraMap.put("relatedobjectId", relatedobjectId);
		paraMap.put("authorityId", authorityId);
		return ttCommonDao.getAuthorityInfoList(paraMap);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AuthorityInfo getAuthorityInfo(String relatedobjectId,
			String authorityId) {

		Map<String, String> paraMap = new HashMap<String, String>();
		paraMap.put("relatedobjectId", relatedobjectId);
		paraMap.put("authorityId", authorityId);
		return ttCommonDao.getAuthorityInfo(paraMap);
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public void addLockByList(String key1, List<String> key2List){
		
		boolean hasTtExclusiveExtException = false;
		Set<String> names = new HashSet<String>();
		
		for (String key2 : key2List){
			try{
				addLock(key1, key2);
			} catch (TtExclusiveExtException e) {
				
				// 双键锁冲突
				hasTtExclusiveExtException = true;
				names.add(e.getMessage());
				continue;
			}
		}
		
		if (hasTtExclusiveExtException){
			throw new TtExclusiveExtException(names.toString().replaceAll("\\[|\\]", "").replaceAll(",", "，"));
		}
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public void addLock(String... keys) {
		
		if (keys == null || keys.length == 0){
			
			throw new IllegalArgumentException();
			
		}
	
		String ipAddr = (String)Session.get(SessionConstants.IPADDR);
		
		CheckAndLockInfo checkAndLockInfo = new CheckAndLockInfo();
		checkAndLockInfo.setPro1(keys[0]);
		
		List<CheckAndLockInfo> locks = ttCommonDao.getCheckAndLockInfo(checkAndLockInfo);
		
		if (locks != null && locks.size() > 0){
			if (keys.length == 1){
	
				CheckAndLockInfo nowLock = locks.get(0);
				
				// 检查是否存在不同用户或不同IP的单键锁，或者双键锁，若存在，则排他异常
				if (nowLock.getPro2() == null || nowLock.getPro2().trim().isEmpty()){
					if (TtCommonUtil.getLoginUserId().equals(nowLock.getUserId()) && 
						ipAddr.equals(nowLock.getUrlIp())){
						
						// 如果是排他锁的创建者，则更新锁的最近更新时间
						ttCommonDao.updateCurrentUpdateTime(keys[0]);
						return;
					} else {
						// 单键锁冲突
						throw new TtExclusiveException(this.getUserName(nowLock.getUserId()));
					}
				} else {
					// 双键锁冲突
					throw new TtExclusiveExtException(this.getLockUserNames(locks));
				}
			} else if (keys.length == 2){
				
				for (CheckAndLockInfo lock : locks){
					if (lock.getPro2() == null || lock.getPro2().trim().isEmpty()){
						// 单键锁冲突
						throw new TtExclusiveException(this.getUserName(lock.getUserId()));
					} else if (lock.getPro2().equals(keys[1])){
						if (TtCommonUtil.getLoginUserId().equals(lock.getUserId()) && 
							ipAddr.equals(lock.getUrlIp())){
							
							// 如果是排他锁的创建者，则更新锁的最近更新时间
							ttCommonDao.updateCurrentUpdateTime(this.getLockId(keys));
							return;
						} else {
							// 双键锁冲突
							throw new TtExclusiveExtException(this.getUserName(lock.getUserId()));
						}
					}
				}
			}
		}
		
		// 登录排他锁
		this.saveNewLock(keys);
			
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void removeLock(String... keys) {
		
		if (keys == null || keys.length == 0){
			
			throw new IllegalArgumentException();
			
		} else{
			
			ttCommonDao.deleteCheckAndLockInfo(this.getLockId(keys));
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void updateLock(String... keys) {
		
		if (keys == null || keys.length == 0){
			
			throw new IllegalArgumentException();
			
		} else{
			
			ttCommonDao.updateCurrentUpdateTime(this.getLockId(keys));
		}
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public String getUserName(String userId) {
		
		return ttCommonDao.getUserName(userId);
	}
	
	/**
	 * 取得排他锁用户名单
	 * 
	 */
	private String getLockUserNames(List<CheckAndLockInfo> locks){
		
		Set<String> names = new HashSet<String>();
		
		// 取得双键排他锁的用户名单，并用逗号隔开
		for (CheckAndLockInfo lock : locks){
			
			names.add(this.getUserName(lock.getUserId()));
		}
		
		return names.toString().replaceAll("\\[|\\]", "").replaceAll(",", "，");
	}
	
	/**
	 * 登录新锁
	 * 
	 */
	private void saveNewLock(String... keys ){
		
		CheckAndLockInfo newLock = new CheckAndLockInfo();
		Date nowTime = new Date();
		
		newLock.setLockId(this.getLockId(keys));
		newLock.setUserId(TtCommonUtil.getLoginUserId());
		newLock.setLoginTime(nowTime);
		newLock.setStateFlag("1");
		newLock.setUrlIp((String)Session.get(SessionConstants.IPADDR));
		newLock.setUpdateTime(nowTime);
		newLock.setPro1(keys[0]);
		
		if (keys.length > 1){
			newLock.setPro2(keys[1]);
		}
		
		ttCommonDao.insertCheckAndLockInfo(newLock);
	}
	
	/**
	 * 根据两个键值拼接锁ID
	 * 
	 * @return String 锁ID
	 */
	private String getLockId(String[] keys ){
		
		if (keys.length == 1){
			return keys[0];
		}
		
		// 双键排他锁的lockId由两个键值和下划线拼接组成
		StringBuilder lockId = new StringBuilder(keys[0]);
		lockId.append("_");
		lockId.append(keys[1]);
		
		return lockId.toString();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<EmpOrgInfo> getOrgList() {

		return ttCommonDao.getOrgListByUserid(TtCommonUtil.getLoginUserId());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean isExistUserId(String userId) {
		if(ttCommonDao.getUserName(userId) == null){
			return false;
		}
		return true;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean checkCategoryStatus(Integer category1, Integer category2,
			Integer category3) {		
		Map<String, Integer> paraMap = new HashMap<String, Integer>();
		paraMap.put("category1Id", category1);		
		paraMap.put("category2Id", category2);
		paraMap.put("category3Id", category3);
		String status = ttCommonDao.getCategoryStatus(paraMap);
		
		// 状态=0：正常或者2：已细化的时候，返回true
		if (TtConstants.R15.R15_0.toString().equals(status) 
			|| TtConstants.R15.R15_2.toString().equals(status)){
			
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Date getMsgInvalidDate(String strDate) {
		
		// 从配置表取得消息实效期间
		String msgInvalidTime = ttCommonDao.getPeizhiInfo("MSG_INVALID_TIME");
		
		int temp = 0;
        try {
        	if (msgInvalidTime != null && msgInvalidTime.length() > 0) {
        		temp = Integer.parseInt(msgInvalidTime);
        	}
        } catch(NumberFormatException e) {
        	temp = 0;
        }
		
		//strTime + 消息实效期间
		strDate = DateUtil.dateAdd(strDate , temp, DateUtil.DAY);
		strDate = DateUtil.dateAdd(strDate , 23, DateUtil.HOUR);
		strDate = DateUtil.dateAdd(strDate , 59, DateUtil.MINUTE);
		strDate = DateUtil.dateAdd(strDate , 59, DateUtil.SECOND);
		
		return DateUtil.parse(strDate);
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<SysCodeInfo> getMaintAuthorityList() {
			
		// 维护权限权限选择下拉框信息的取得
		return ttCommonDao.getMaintAuthorityList();
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<SysCodeInfo> getOtherAuthorityList() {

		// 其他权限权限选择下拉框信息的取得
		return ttCommonDao.getOtherAuthorityList();

	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void getMenuContorlInfo() {
		TtCheckResult result = null;
		MenuControlInfo menuControlInfo = new MenuControlInfo();
		
		//课程管理菜单可用检查
		result= this.checkStartupAuthority(
				TtConstants.PageId.G010011.toString(),
				"G010011_1",
				null, null);
		if (result.getRetFlag()) {
			menuControlInfo.setMenu1Flag(true);
		}
		
		//教材管理菜单可用检查
		result= this.checkStartupAuthority(
				TtConstants.PageId.G010011.toString(),
				"G010011_2",
				null, null);
		if (result.getRetFlag()) {
			menuControlInfo.setMenu2Flag(true);
		}
		
		//考试管理菜单可用检查
		result= this.checkStartupAuthority(
				TtConstants.PageId.G010011.toString(),
				"G010011_3",
				null, null);
		if (result.getRetFlag()) {
			menuControlInfo.setMenu3Flag(true);
		}
		// 有评分任务的话，考试管理菜单可用
		AuthorityInfo authorityInfo = new AuthorityInfo();
		authorityInfo.setUpdateUserId(TtCommonUtil.getLoginUserId());
		Integer cnt = ttCommonDao.getMarkingTaskNum(authorityInfo);
		if (cnt > 0) {
			menuControlInfo.setMenu3Flag(true);
		}
		
		//试卷管理菜单可用检查
		result= this.checkStartupAuthority(
				TtConstants.PageId.G010011.toString(),
				"G010011_4",
				null, null);
		if (result.getRetFlag()) {
			menuControlInfo.setMenu4Flag(true);
		}
		
		//题库管理菜单可用检查
		result= this.checkStartupAuthority(
				TtConstants.PageId.G010011.toString(),
				"G010011_5",
				null, null);
		if (result.getRetFlag()) {
			menuControlInfo.setMenu5Flag(true);
		}
		
		//成绩维护菜单可用检查
		result= this.checkStartupAuthority(
				TtConstants.PageId.G010011.toString(),
				"G010011_6",
				null, null);
		if (result.getRetFlag()) {
			menuControlInfo.setMenu6Flag(true);
		}
		
		//系统管理菜单可用检查
		result= this.checkStartupAuthority(
				TtConstants.PageId.G010011.toString(),
				"G010011_7",
				null, null);
		if (result.getRetFlag()) {
			menuControlInfo.setMenu7Flag(true);
		}
		
		Session.set("menuControl", menuControlInfo);		
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void authrityTimestampUpdate() {
		// 将全局Session的TT_AUTH_TIMESTAMP_GLOBAL领域更新为最新系统时间
	    String strNow = DateUtil.getDateTime();
	    ApplicationManager.set(SessionConstants.TT_AUTH_TIMESTAMP_GLOBAL, strNow);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void authrityTimestampCheck() {
		// 全局权限时间戳不存在的时候，初始化
		String appTime = (String)ApplicationManager.get(SessionConstants.TT_AUTH_TIMESTAMP_GLOBAL);
		if(appTime == null || "".equals(appTime)){
	        String strNow = DateUtil.getDateTime();
	        ApplicationManager.set(SessionConstants.TT_AUTH_TIMESTAMP_GLOBAL, strNow);
			Session.set(SessionConstants.TT_AUTH_TIMESTAMP_PERSONAL, strNow);
		} 
		
		// 全局权限时间戳 和 端末权限时间戳不一致的时候
		if(!ApplicationManager.get(SessionConstants.TT_AUTH_TIMESTAMP_GLOBAL).equals(Session.get(SessionConstants.TT_AUTH_TIMESTAMP_PERSONAL))){
			// 端末权限时间戳保存
			Session.set(SessionConstants.TT_AUTH_TIMESTAMP_PERSONAL, ApplicationManager.get(SessionConstants.TT_AUTH_TIMESTAMP_GLOBAL));
			
			// 权限重新取得
			getUserAuthorities();
			
			// 菜单控制更新
			getMenuContorlInfo();
		}
	}
}
