/*
 * @(#)G080011Action.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 管理
 */
package com.yds.tt.manager.action;

import java.util.List;

import org.apache.struts2.json.annotations.JSON;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.opensymphony.xwork2.interceptor.annotations.InputConfig;
import com.yds.base.action.BasePagerAction;
import com.yds.common.bean.Tree;
import com.yds.common.service.CommonConstants;
import com.yds.common.service.LogService;
import com.yds.tt.manager.bean.G080011CategoryInfo;
import com.yds.tt.manager.bean.G080011Differentiation;
import com.yds.tt.manager.bean.G080011UnconformityDataInfo;
import com.yds.tt.manager.bean.TtCheckResult;
import com.yds.tt.manager.service.G080011Service;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.manager.service.TtExclusiveException;

/**
 * 系统维护处理
 * 
 * @author zhanghaibo
 * @version 1.00 2010/04/22
 */
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@Controller("g080011Action")
public class G080011Action extends BasePagerAction{

	private static final long serialVersionUID = -3545962722228579081L;
	private static final String EDITAUTHORITY_EDITABLE = "1"; // 编辑权限  1:可编辑
	private static final String EDITAUTHORITY_READONLY = "0"; // 编辑权限  0:不可编辑
	private G080011Service g080011Service;
	private List<Tree> tree; // 画面显示用树结构
	private G080011CategoryInfo categoryInfo; // 分类信息
	private String returnValue; // 返回值
	private int submitFlag; // 提交区分，1:第一次提交，2:确认后的提交
	private String newChildId; // 新创建子类别ID
	private List<G080011CategoryInfo> unconformityCountList; // 不整合统计列表
	private List<G080011UnconformityDataInfo> unconformityDataInfoList; // 不整合数据列表
	private List<G080011Differentiation> diffList; // 区分列表
	private String typeId; // 类型ID
	private String typeName; // 类型名称
	private String[] diffNo; // 区分No
	private String[] diffName; // 区分名称
	private String systemStatus; // 系统状态
	private String editAutority; // 用户的编辑权限  1:可编辑，0:不可编辑
	private String errorMessage; // 错误信息

	private TtCommonService ttCommonService;
	
	/** 日志 */
	private LogService logService;
	
	/**
	 * 画面的初期显示
	 * 
	 * @return SUCCESS
	 */
	@Override
	public String execute() {
		
		// 权限检查
		if (!checkAutority()){
			return ERROR;
		}
		
		// 不整合统计取得
		unconformityCountList = g080011Service
				.getUnconformityCountList(categoryInfo);
		
		// 区分一览取得
		diffList = g080011Service.getDiffInfoList();
		
		try{
			systemStatus = g080011Service.getSystemStatus();
			
			if (TtConstants.SYSTEM_STATUS.CLOSED.value().equals(systemStatus)){
				editAutority = EDITAUTHORITY_EDITABLE;
			} else {
				editAutority = EDITAUTHORITY_READONLY;
			}
		} catch (TtExclusiveException e){
			systemStatus = TtConstants.SYSTEM_STATUS.CLOSED.value();
			editAutority = EDITAUTHORITY_READONLY;
		}

		return SUCCESS;
	}

	/**
	 * 初始化树
	 * 
	 * @return SUCCESS
	 */
	public String initTree() {

		// 权限检查
		if (!checkAutority()){
			return ERROR;
		}
		
		// 树结构取得
		this.tree = g080011Service.getTree();

		return SUCCESS;
	}
	
	/**
	 * 开始维护
	 * 
	 * @return SUCCESS
	 */
	public String startMaintaining(){
		
		g080011Service.updateSysMaintInfoForStart();
		
		// 日志记录:
		logService.insertLogInfo(CommonConstants.LoglevelEnum.Not_Delete.toString(), CommonConstants.SubIdEnum.Sub_TT00.toString(), 
									"", 
									"开始系统维护", 
									"");
		
		returnValue = SUCCESS;
		
		return SUCCESS;
	}
	
	/**
	 * 停止维护
	 * 
	 * @return SUCCESS
	 */
	public String stopMaintaining(){
		
		g080011Service.updateSysMaintInfoForStop();
		
		// 日志记录:
		logService.insertLogInfo(CommonConstants.LoglevelEnum.Not_Delete.toString(), CommonConstants.SubIdEnum.Sub_TT00.toString(), 
									"", 
									"结束系统维护", 
									"");
		returnValue = SUCCESS;
		
		return SUCCESS;
	}

	/**
	 * 新建一级分类
	 * 
	 * @return SUCCESS
	 */
	public String createRoot() {

		returnValue = g080011Service.addRootCategory(categoryInfo);
		
		// 日志记录:
		logService.insertLogInfo(CommonConstants.LoglevelEnum.Not_Delete.toString(), CommonConstants.SubIdEnum.Sub_TT00.toString(), 
									"", 
									"新建一级分类:" + returnValue.substring(0,33)+ " " +categoryInfo.getCategoryName(), 
									"");
		return SUCCESS;
	}

	/**
	 * 新建子分类
	 * 
	 * @return SUCCESS
	 */
	public String createChild() {

		// 新建子分类
		newChildId = g080011Service.addChildCategory(categoryInfo, submitFlag);

		// 不整合统计取得
		unconformityCountList = g080011Service
				.getUnconformityCountList(categoryInfo);
		
		// 日志记录:
		logService.insertLogInfo(CommonConstants.LoglevelEnum.Not_Delete.toString(), CommonConstants.SubIdEnum.Sub_TT00.toString(), 
									"", 
									"新建子分类:" + newChildId.substring(0,33)+ " " +categoryInfo.getCategoryName(), 
									"");
		return SUCCESS;
	}

	/**
	 * 修改分类
	 * 
	 * @return SUCCESS
	 */
	public String modify() {

		g080011Service.saveCategory(categoryInfo);

		// 日志记录:
		logService.insertLogInfo(CommonConstants.LoglevelEnum.Not_Delete.toString(), CommonConstants.SubIdEnum.Sub_TT00.toString(), 
									"", 
									"修改分类:" + categoryInfo.getCategoryId().substring(0,33)+ " " +categoryInfo.getCategoryName(), 
									"");
		return SUCCESS;
	}

	/**
	 * 删除分类
	 * 
	 * @return SUCCESS
	 */
	public String deleteCategory() {

		// 删除类别
		g080011Service.deleteCategory(categoryInfo);

		// 不整合统计取得
		unconformityCountList = g080011Service
				.getUnconformityCountList(categoryInfo);

		// 日志记录:
		logService.insertLogInfo(CommonConstants.LoglevelEnum.Not_Delete.toString(), CommonConstants.SubIdEnum.Sub_TT00.toString(), 
									"", 
									"删除分类:" + categoryInfo.getCategoryId().substring(0,33), 
									"");
		
		return SUCCESS;
	}

	/**
	 * 取消删除
	 * 
	 * @return SUCCESS
	 */
	public String deleteUndo() {

		// 删除类别
		g080011Service.deleteUndo(categoryInfo, submitFlag);

		// 不整合统计取得
		unconformityCountList = g080011Service
				.getUnconformityCountList(categoryInfo);

		// 日志记录:
		logService.insertLogInfo(CommonConstants.LoglevelEnum.Not_Delete.toString(), CommonConstants.SubIdEnum.Sub_TT00.toString(), 
									"", 
									"取消删除分类:" + categoryInfo.getCategoryId().substring(0,33), 
									"");
		return SUCCESS;
	}

	/**
	 * 不整合统计取得
	 * 
	 * @return SUCCESS
	 */
	@JSON(serialize=false) 
	public String getUnconformity() {

		// 权限检查
		if (!checkAutority()){
			return ERROR;
		}
		
		unconformityCountList = g080011Service
				.getUnconformityCountList(categoryInfo);

		return SUCCESS;
	}

	/**
	 * 不整合数据取得
	 * 
	 * @return SUCCESS
	 */
	@JSON(serialize=false) 
	public String getUnconformityData() {

		// 权限检查
		if (!checkAutority()){
			return ERROR;
		}
		
		super.setPagerParamter(g080011Service.getUnconformityDataCount(),
				"g080011GetUnconformityData", 10);
		unconformityDataInfoList = g080011Service.getUnconformityDataList(pager
				.getOffset().intValue(), pager.getPerDisplayCount().intValue());

		return SUCCESS;
	}

	/**
	 * 区分详细取得
	 * 
	 * @return SUCCESS
	 */
	@JSON(serialize=false) 
	public String getDiffDetails() {

		// 权限检查
		if (!checkAutority()){
			return ERROR;
		}
		
		diffList = g080011Service.getDiffDetailInfoList(typeId);

		return SUCCESS;
	}

	/**
	 * 区分保存
	 * 
	 * @return SUCCESS
	 */
	public String saveDiff() {
		
		if (diffNo == null || diffNo.length == 0){
			errorMessage = "不可以删除所有区分选项！";
			return ERROR;
		}
		
		g080011Service.saveDiff(typeId, typeName, diffNo, diffName);

		// 日志记录:
		logService.insertLogInfo(CommonConstants.LoglevelEnum.Not_Delete.toString(), CommonConstants.SubIdEnum.Sub_TT00.toString(), 
									"", 
									"修改区分:" + typeId + " " + typeName, 
									"");
		return SUCCESS;
	}
	
	/**
	 * 开始维护校验
	 */
	public void validateStartMaintaining() {
		
		if (!checkAutority()){
			this.addActionError(ERROR);
			return;
		}
		
		// 系统状态检查
		if (submitFlag == 1) {
			try{
				systemStatus = g080011Service.getSystemStatus();
			} catch (TtExclusiveException e){
				returnValue = e.getMessage();
				this.addActionError("");
			}
		}
		
	}
	
	/**
	 * 结束维护校验
	 */
	public void validateStopMaintaining() {
		
		if (!checkAutority()){
			this.addActionError(ERROR);
			return;
		}
		
		// 系统状态检查
		if (submitFlag == 1) {
			try{
				systemStatus = g080011Service.getSystemStatus();
			} catch (TtExclusiveException e){
				returnValue = e.getMessage();
				this.addActionError("");
			}
		}
		
	}

	/**
	 * 删除分类校验
	 */
	public void validateDeleteCategory() {

		if (!checkAutority()){
			this.addActionError(ERROR);
			return;
		}
		
		// 检查当前用户是否拥有当前维护的编辑权
		try{
			g080011Service.checkSystemStatus();
		}catch (TtExclusiveException e){
			errorMessage = e.getMessage();
			returnValue = ERROR + errorMessage;
			this.addActionError(errorMessage);
			return;
		}
		
		// 删除类别检查
		if (g080011Service.canNotBeDeleted(categoryInfo)) {
			errorMessage = propMgr.getMessage("yds.com.error.0001");
			returnValue = ERROR + errorMessage;
			this.addActionError(errorMessage);
			return;
		}

		// 使用状况检查，如果类别被使用，返回警告信息
		if (submitFlag == 1) {

			String warningMsg = g080011Service.getWarningMessageParams(
					categoryInfo, 2);
			if (warningMsg != null) {

				returnValue = warningMsg;
				this.addActionError(returnValue);
			}
		}

	}

	/**
	 * 新建子类别校验
	 */
	public void validateCreateChild() {

		if (!checkAutority()){
			this.addActionError(ERROR);
			return;
		}
		
		// 检查当前用户是否拥有当前维护的编辑权
		try{
			g080011Service.checkSystemStatus();
		}catch (TtExclusiveException e){
			errorMessage = e.getMessage();
			returnValue = ERROR + errorMessage;
			this.addActionError(errorMessage);
			return;
		}
		
		// 新建子类别检查
		if (g080011Service.canNotHaveChildren(categoryInfo)) {
			errorMessage = propMgr.getMessage("yds.com.error.0001");
			returnValue = ERROR + errorMessage;
			this.addActionError(errorMessage);
			return;
		}

		// 使用状况检查，如果类别被试题使用，返回警告信息
		if (submitFlag == 1) {

			String warningMsg = g080011Service.getWarningMessageParams(
					categoryInfo, 2);
			if (warningMsg != null) {

				returnValue = warningMsg;
				this.addActionError(returnValue);
			}
		}

	}

	/**
	 * 取消删除校验
	 */
	public void validateDeleteUndo() {

		if (!checkAutority()){
			this.addActionError(ERROR);
			return;
		}
		
		// 检查当前用户是否拥有当前维护的编辑权
		try{
			g080011Service.checkSystemStatus();
		}catch (TtExclusiveException e){
			errorMessage = e.getMessage();
			returnValue = ERROR + errorMessage;
			this.addActionError(errorMessage);
			return;
		}
		
		// 删除类别检查
		if (g080011Service.canNotBeUndone(categoryInfo)) {
			errorMessage = propMgr.getMessage("yds.com.error.0001");
			returnValue = ERROR + errorMessage;
			this.addActionError(errorMessage);
			return;
		}

		// 使用状况检查，如果类别被使用，返回警告信息
		if (submitFlag == 1) {

			String warningMsg = g080011Service.getWarningMessageParams(
					categoryInfo, 3);
			if (warningMsg != null) {

				returnValue = warningMsg;
				this.addActionError(returnValue);
			}
		}

	}

	/**
	 * 修改类别校验
	 */
	public void validateModify() {

		if (!checkAutority()){
			this.addActionError(ERROR);
			return;
		}
		
		// 检查当前用户是否拥有当前维护的编辑权
		try{
			g080011Service.checkSystemStatus();
		}catch (TtExclusiveException e){
			errorMessage = e.getMessage();
			returnValue = ERROR + errorMessage;
			this.addActionError(errorMessage);
		}
		
		// 修改类别检查
		if (g080011Service.canNotBeModified(categoryInfo)) {
			errorMessage = propMgr.getMessage("yds.com.error.0001");
			returnValue = ERROR + errorMessage;
			this.addActionError(errorMessage);
		}

	}
	
	/**
	 * 保存区分校验
	 */
	public void validateSaveDiff(){
		if (!checkAutority()){
			this.addActionError(ERROR);
			return;
		}
		
		// 检查当前用户是否拥有当前维护的编辑权
		try{
			g080011Service.checkSystemStatus();
		}catch (TtExclusiveException e){
			errorMessage = e.getMessage();
			returnValue = ERROR + errorMessage;
			this.addActionError(errorMessage);
		}
	}
	
	/**
	 * 新建一级类别校验
	 */
	public void validateCreateRoot(){
		if (!checkAutority()){
			this.addActionError(ERROR);
			return;
		}
		
		// 检查当前用户是否拥有当前维护的编辑权
		try{
			g080011Service.checkSystemStatus();
		}catch (TtExclusiveException e){
			errorMessage = e.getMessage();
			returnValue = ERROR + errorMessage;
			this.addActionError(errorMessage);
		}
	}

	/**
	 * 迁移到错误画面
	 */
	@InputConfig(resultName=ERROR)
	public String toErrorPage() {
		return ERROR;
	}
	
	/**
	 * 权限校验
	 */
	private boolean checkAutority() {
		
		// 权限检查
		TtCheckResult checkResult = ttCommonService.checkStartupAuthority(
				TtConstants.PageId.G080011.value(), TtConstants.PageId.G080011.value(), 0, 0, 0,
				null, null);
		
		if (checkResult.getRetFlag() == false){
			errorMessage = checkResult.getRetMessage();
			returnValue = ERROR + errorMessage;
			return false;
		}
		
		return true;
	}
	
	/**
	 * @param service
	 *            the g080011Service to set
	 */
	public void setG080011Service(G080011Service service) {
		g080011Service = service;
	}

	/**
	 * @return the tree
	 */
	public List<Tree> getTree() {
		return tree;
	}

	/**
	 * @param tree
	 *            the tree to set
	 */
	public void setTree(List<Tree> tree) {
		this.tree = tree;
	}

	/**
	 * @return the categoryInfo
	 */
	@JSON(serialize=false) 
	public G080011CategoryInfo getCategoryInfo() {
		return categoryInfo;
	}

	/**
	 * @param categoryInfo
	 *            the categoryInfo to set
	 */
	public void setCategoryInfo(G080011CategoryInfo categoryInfo) {
		this.categoryInfo = categoryInfo;
	}

	/**
	 * @return the returnValue
	 */
	@JSON(serialize=false) 
	public String getReturnValue() {
		return returnValue;
	}

	/**
	 * @param returnValue
	 *            the returnValue to set
	 */
	public void setReturnValue(String returnValue) {
		this.returnValue = returnValue;
	}

	/**
	 * @return the submitFlag
	 */
	@JSON(serialize=false) 
	public int getSubmitFlag() {
		return submitFlag;
	}

	/**
	 * @param submitFlag
	 *            the submitFlag to set
	 */
	public void setSubmitFlag(int submitFlag) {
		this.submitFlag = submitFlag;
	}

	/**
	 * @return the newChildId
	 */
	@JSON(serialize=false) 
	public String getNewChildId() {
		return newChildId;
	}

	/**
	 * @param newChildId
	 *            the newChildId to set
	 */
	public void setNewChildId(String newChildId) {
		this.newChildId = newChildId;
	}

	/**
	 * @return the unconformityCountList
	 */
	@JSON(serialize=false) 
	public List<G080011CategoryInfo> getUnconformityCountList() {
		return unconformityCountList;
	}

	/**
	 * @param unconformityCountList
	 *            the unconformityCountList to set
	 */
	public void setUnconformityCountList(
			List<G080011CategoryInfo> unconformityCountList) {
		this.unconformityCountList = unconformityCountList;
	}

	/**
	 * @return the unconformityDataInfoList
	 */
	@JSON(serialize=false) 
	public List<G080011UnconformityDataInfo> getUnconformityDataInfoList() {
		return unconformityDataInfoList;
	}

	/**
	 * @param unconformityDataInfoList
	 *            the unconformityDataInfoList to set
	 */
	public void setUnconformityDataInfoList(
			List<G080011UnconformityDataInfo> unconformityDataInfoList) {
		this.unconformityDataInfoList = unconformityDataInfoList;
	}

	/**
	 * @return the diffList
	 */
	@JSON(serialize=false) 
	public List<G080011Differentiation> getDiffList() {
		return diffList;
	}

	/**
	 * @param diffList
	 *            the diffList to set
	 */
	public void setDiffList(List<G080011Differentiation> diffList) {
		this.diffList = diffList;
	}

	/**
	 * @return the typeId
	 */
	@JSON(serialize=false) 
	public String getTypeId() {
		return typeId;
	}

	/**
	 * @param typeId
	 *            the typeId to set
	 */
	public void setTypeId(String typeId) {
		this.typeId = typeId;
	}

	/**
	 * @return the typeName
	 */
	@JSON(serialize=false) 
	public String getTypeName() {
		return typeName;
	}

	/**
	 * @param typeName
	 *            the typeName to set
	 */
	public void setTypeName(String typeName) {
		this.typeName = typeName;
	}

	/**
	 * @return the diffNo
	 */
	@JSON(serialize=false) 
	public String[] getDiffNo() {
		return diffNo;
	}

	/**
	 * @param diffNo
	 *            the diffNo to set
	 */
	public void setDiffNo(String[] diffNo) {
		this.diffNo = diffNo;
	}

	/**
	 * @return the diffName
	 */
	@JSON(serialize=false) 
	public String[] getDiffName() {
		return diffName;
	}

	/**
	 * @param diffName
	 *            the diffName to set
	 */
	public void setDiffName(String[] diffName) {
		this.diffName = diffName;
	}

	/**
	 * @return the systemStatus
	 */
	@JSON(serialize=false) 
	public String getSystemStatus() {
		return systemStatus;
	}

	/**
	 * @param systemStatus the systemStatus to set
	 */
	public void setSystemStatus(String systemStatus) {
		this.systemStatus = systemStatus;
	}

	/**
	 * @return the editAutority
	 */
	@JSON(serialize=false) 
	public String getEditAutority() {
		return editAutority;
	}

	/**
	 * @param editAutority the editAutority to set
	 */
	public void setEditAutority(String editAutority) {
		this.editAutority = editAutority;
	}

	/**
	 * @return the errorMessage
	 */
	@JSON(serialize=false) 
	public String getErrorMessage() {
		return errorMessage;
	}

	/**
	 * @param errorMessage
	 *            the errorMessage to set
	 */
	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}

	/**
	 * @param ttCommonService
	 *            the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}

	/**
	 * @param logService the logService to set
	 */
	public void setLogService(LogService logService) {
		this.logService = logService;
	}
}
