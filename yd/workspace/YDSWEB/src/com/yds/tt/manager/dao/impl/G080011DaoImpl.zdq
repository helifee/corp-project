/*
 * @(#) G080011DaoImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 管理
 */
package com.yds.tt.manager.dao.impl;

import java.util.List;

import org.springframework.stereotype.Repository;

import com.yds.base.dao.AbstractBaseDao;
import com.yds.tt.manager.bean.G080011CategoryInfo;
import com.yds.tt.manager.bean.G080011Differentiation;
import com.yds.tt.manager.bean.G080011UnconformityDataInfo;
import com.yds.tt.manager.bean.SystemMaintainInfo;
import com.yds.tt.manager.dao.G080011Dao;

/**
 * @see com.yds.tt.manager.dao.G080011Dao
 */
@Repository("g080011Dao")
public class G080011DaoImpl extends AbstractBaseDao implements G080011Dao {

	/**
	 * {@inheritDoc}
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<G080011CategoryInfo> getCategoryInfoList(
			G080011CategoryInfo categoryInfo) {
		return (List<G080011CategoryInfo>) super.queryForList(
				"G080011Dao.getCategoryInfoList", categoryInfo);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer getMaxCategory1Id() {
		return (Integer) super.queryForObject("G080011Dao.getMaxCategory1Id");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer getMaxCategory2Id(Integer category1Id) {
		return (Integer) super.queryForObject("G080011Dao.getMaxCategory2Id",
				category1Id);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer getMaxCategory3Id(G080011CategoryInfo categoryInfo) {
		return (Integer) super.queryForObject("G080011Dao.getMaxCategory3Id",
				categoryInfo);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int updateCategoryName(G080011CategoryInfo categoryInfo) {
		return super.update("G080011Dao.updateCategoryName", categoryInfo);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int updateCategoryStatus(G080011CategoryInfo categoryInfo) {
		return super.update("G080011Dao.updateCategoryStatus", categoryInfo);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void insertCategory(G080011CategoryInfo categoryInfo) {
		super.insert("G080011Dao.insertCategory", categoryInfo);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String getCategoryId(G080011CategoryInfo categoryInfo) {
		return (String) super.queryForObject("G080011Dao.getCategoryId",
				categoryInfo);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<G080011CategoryInfo> getUnconformityCountList(
			G080011CategoryInfo categoryInfo) {
		return (List<G080011CategoryInfo>) super.queryForList(
				"G080011Dao.getUnconformityCountList", categoryInfo);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer getChildrenNumber(G080011CategoryInfo categoryInfo) {
		return (Integer) super.queryForObject("G080011Dao.getChildrenNumber",
				categoryInfo);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public G080011CategoryInfo getCategoryInfo(
			G080011CategoryInfo categoryInfo) {
		return (G080011CategoryInfo) super.queryForObject("G080011Dao.getCategoryInfo",
				categoryInfo);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void deleteDiff(String typeId) {
		super.delete("G080011Dao.deleteDiff", typeId);
		
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<G080011Differentiation> getDiffDetailInfoList(String typeId) {
		return (List<G080011Differentiation>) super.queryForList(
				"G080011Dao.getDiffDetailInfoList", typeId);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<G080011Differentiation> getDiffInfoList() {
		return (List<G080011Differentiation>) super.queryForList(
				"G080011Dao.getDiffInfoList");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void insertDiff(G080011Differentiation differentiation) {
		super.insert("G080011Dao.insertDiff", differentiation);
		
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer getMaxDiffNo(String typeId) {
		return (Integer)super.queryForObject("G080011Dao.getMaxDiffNo", typeId);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void updateDispSeq(G080011Differentiation differentiation) {
		super.update("G080011Dao.updateDispSeq", differentiation);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long getUnconformityDataCount() {
		return (Long)super.queryForObject("G080011Dao.getUnconformityDataCount");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<G080011UnconformityDataInfo> getUnconformityDataList(
			int offset, int perCounts) {
		return (List<G080011UnconformityDataInfo>)super.queryForList("G080011Dao.getUnconformityDataList", null, offset, perCounts);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<String> getSystemMaintainInfo() {
		return (List<String>)super.queryForList("G080011Dao.getSystemMaintainInfo");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void updateSystemMaintainInfo(SystemMaintainInfo systemMaintainInfo) {
		super.update("G080011Dao.updateSystemMaintainInfo", systemMaintainInfo);
	}

	@Override
	public String getUserName(String userId) {
		return (String)super.queryForObject("G080011Dao.getUserName", userId);
	}

}
