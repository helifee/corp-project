/*
 * @(#)G100011ServiceImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 管理子系统
 */

package com.yds.tt.manager.service.impl;

import java.util.List;

import org.springframework.stereotype.Service;

import com.yds.base.service.AbstractBaseService;
import com.yds.tt.manager.bean.MessageReminding;
import com.yds.tt.manager.bean.PermRequestInfo;
import com.yds.tt.manager.dao.G100011Dao;
import com.yds.tt.manager.service.G100011Service;
import com.yds.tt.manager.service.TtCommonUtil;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.manager.service.TtExclusiveException;
import com.yds.tt.testing.bean.ExamineInfo;
import com.yds.tt.training.bean.Bookmark;
import com.yds.tt.training.bean.J020021SearchInfo;

/**
 * 
 * @see com.yds.tt.manager.service.G100011Service
 *
 */
@Service("g100011Service")
public class G100011ServiceImpl extends AbstractBaseService implements
		G100011Service {
	
	private G100011Dao g100011Dao;

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<Bookmark> getBookMarkList() {
		
		return g100011Dao.getBookMarkList(TtCommonUtil.getLoginUserId());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int deleteBookMark(Bookmark bookMarkInfo) {
		
		//书签信息编辑
		bookMarkInfo.setEmployeesId(TtCommonUtil.getLoginUserId());
		//书签存在check
		if(bookExitCheck(bookMarkInfo)){
			return g100011Dao.deleteBookMark(bookMarkInfo);
		}else{
			return 0;
		}
	}
	
	/**
	 * 书签存在check
	 * 
	 * @return true/false
	 */
	private boolean bookExitCheck(Bookmark bookMarkInfo){
		
		//书签不存在
		if(0 == g100011Dao.checkBookInfo(bookMarkInfo)){
			
			throw new TtExclusiveException();
		}
		return true;
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<MessageReminding> getMessageRemindingList() {
		
		List<MessageReminding> messageRemindingListTemp = g100011Dao.getMessageRemindingList(TtCommonUtil.getLoginUserId());
		
		
		for(MessageReminding messagePer:messageRemindingListTemp){
			
			messagePer.setRedirectUrl(getRemindAction(messagePer));
		}
		
		return messageRemindingListTemp;
	}
	/**
	 * 取得REMIND_MODE对应的action
	 * 
	 * @param remindMode
	 * @return remind_action
	 */
	private String getRemindAction(MessageReminding messagePer){
		
		String redirectUrl = "";
		//考试成绩发布06
		if(String.valueOf(TtConstants.REMIND_MODE.KSY01).equals(messagePer.getMode())){
			return redirectUrl.concat("tt/testing/k060021InitTestDetails?testId=")
					.concat(messagePer.getParameter());
		
		//考试审批  07
		}else if(String.valueOf(TtConstants.REMIND_MODE.KSY02).equals(messagePer.getMode())){
			String[] paraSp = messagePer.getParameter().split(",");
			return redirectUrl.concat("tt/testing/k060071InitTestDetailsApproveMode?operatMode=")
			.concat(paraSp[0]).concat("&prePageId=").concat(paraSp[1]).concat("&paramTestId=").concat(paraSp[2]);
		//考试报名审批提醒11
		}else if(String.valueOf(TtConstants.REMIND_MODE.KSY06).equals(messagePer.getMode())){
			return redirectUrl.concat("tt/testing/k060081ApproveExamApply?examineId=")
					.concat(messagePer.getParameter());
		//考试报名截止前提醒12
		}else if(String.valueOf(TtConstants.REMIND_MODE.KSY07).equals(messagePer.getMode())){
			return redirectUrl.concat("/tt/testing/k060021InitTestDetails.action?examineId=")
					.concat(messagePer.getParameter());
		//考试开始提醒 13
		}else if(String.valueOf(TtConstants.REMIND_MODE.KSY08).equals(messagePer.getMode())){
			return redirectUrl.concat("/tt/testing/k060021InitTestDetails.action?examineId=")
					.concat(messagePer.getParameter());
		//试卷审批 08
		}else if(String.valueOf(TtConstants.REMIND_MODE.KSY03).equals(messagePer.getMode())){
			String[] paraSp = messagePer.getParameter().split(",");
			return redirectUrl.concat("tt/testing/k050051InitPaperView?mode=")
					.concat(paraSp[0]).concat("&paperId=").concat(paraSp[1]).concat("&paperVersionNo=").concat(paraSp[2]);
		//考试评分 14
		}else if(String.valueOf(TtConstants.REMIND_MODE.KSY09).equals(messagePer.getMode())){
			return redirectUrl.concat("tt/testing/k060121InitMarkTaskList?examineId=")
					.concat(messagePer.getParameter());
		//课程审批 02
		}else if(String.valueOf(TtConstants.REMIND_MODE.JYY02).equals(messagePer.getMode())){
			return redirectUrl.concat("tt/training/j020031InitApproveMode?paramCourseId=")
					.concat(messagePer.getParameter());
		//教材审批 01
		}else if(String.valueOf(TtConstants.REMIND_MODE.JYY01).equals(messagePer.getMode())){
			return redirectUrl.concat("tt/training/j030031InitApproveMode?bookId=")
					.concat(messagePer.getParameter());
		}
		return "";
	}
	/**
	 * {@inheritDoc}
	 */
	@Override
	public int updateLoseTime(MessageReminding messageRemindingInfo) {
		//提醒信息编辑
		messageRemindingInfo.setUserId(TtCommonUtil.getLoginUserId());
		
		//提醒信息存在check
		if(messageExitCheck(messageRemindingInfo)){
			return g100011Dao.updateLoseTime(messageRemindingInfo);
		}else{
			return 0;
		}
	}

	/**
	 * 提醒信息存在check
	 * 
	 * @return true/false
	 */
	private boolean messageExitCheck(MessageReminding messageRemindingInfo){
		
		//提醒信息不存在
		if(0 == g100011Dao.messageExitCheck(messageRemindingInfo)){
			throw new TtExclusiveException();
		}
		return true;
	}
	
	/** 
	 * {@inheritDoc}
	 */
	@Override
	public Long getCourseCount(J020021SearchInfo courseInfo) {
		if (courseInfo == null){
			courseInfo = new J020021SearchInfo();
		}
		courseInfo.setUserId(TtCommonUtil.getLoginUserId());
		
		return g100011Dao.getCourseCount(courseInfo);
	}

	/** 
	 * {@inheritDoc}
	 */
	@Override
	public List<J020021SearchInfo> getCourseInfoList(int offset, int perCounts,
			J020021SearchInfo courseInfo) {
		if (courseInfo == null){
			courseInfo = new J020021SearchInfo();
		}
		courseInfo.setUserId(TtCommonUtil.getLoginUserId());
		
		return g100011Dao.getCourseInfoList(offset, perCounts, courseInfo);
	}

	/** 
	 * {@inheritDoc}
	 */
	@Override
	public Long getExamineCount(ExamineInfo examineInfo) {
		if (examineInfo == null){
			examineInfo = new ExamineInfo();
		}
		examineInfo.setUserId(TtCommonUtil.getLoginUserId());
		
		return g100011Dao.getExamineCount(examineInfo);
	}

	/** 
	 * {@inheritDoc}
	 */
	@Override
	public List<ExamineInfo> getExamineInfoList(int offset, int perCounts,
			ExamineInfo examineInfo) {
		if (examineInfo == null){
			examineInfo = new ExamineInfo();
		}
		examineInfo.setUserId(TtCommonUtil.getLoginUserId());
		
		return g100011Dao.getExamineInfoList(offset, perCounts, examineInfo);
	}

	/** 
	 * {@inheritDoc}
	 */
	@Override
	public String getMessageRemindingMarquee() {
		List<MessageReminding> messageRemindingMarqueeList = g100011Dao.getMessageRemindingMarquee(TtCommonUtil.getLoginUserId());
		if (messageRemindingMarqueeList == null || messageRemindingMarqueeList.size() == 0){
			return "";
		}else{
			StringBuffer message = new StringBuffer();
			for(MessageReminding messagePer:messageRemindingMarqueeList){
				message.append(messagePer.getContent()).append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
			}
			return message.toString();
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean insertPermRequest(PermRequestInfo permRequestInfo) {
		// 取得登录者ID
		permRequestInfo.setUserId(TtCommonUtil.getLoginUserId());

		return null != g100011Dao.insertPermRequest(permRequestInfo);
	}
	
	/**
	 * @param dao the g100011Dao to set
	 */
	public void setG100011Dao(G100011Dao dao) {
		g100011Dao = dao;
	}

}
