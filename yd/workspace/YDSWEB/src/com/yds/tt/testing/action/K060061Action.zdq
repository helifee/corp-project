/*
 * @(#) K06061Action.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试系统
 *    SubSystem: 考试子系统
 */

package com.yds.tt.testing.action;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.opensymphony.xwork2.Preparable;
import com.opensymphony.xwork2.interceptor.annotations.InputConfig;
import com.opensymphony.xwork2.util.XWorkList;
import com.yds.base.action.AbstractBaseAction;
import com.yds.common.bean.SysCodeInfo;
import com.yds.common.service.SysCodeInfoService;
import com.yds.tt.manager.bean.TtCheckResult;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtCommonUtil;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.manager.service.TtExclusiveException;
import com.yds.tt.testing.bean.ExamineInfo;
import com.yds.tt.testing.bean.TestPaperInfo;
import com.yds.tt.testing.service.K060061Service;
import com.yds.tt.training.bean.CourseInfo;

/**
 * 考试总体设定及生成
 * 
 * @author qiliqiang
 * @version 1.00 2010/04/27
 */
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@Controller("k060061Action")
public class K060061Action extends AbstractBaseAction implements Preparable{

	private static final long serialVersionUID = 5802224004629820617L;
	private TtCommonService ttCommonService;
	/** 考试总体设定及生成(业务逻辑). */
	private K060061Service k060061Service;
	/** 区分业务. */
	private SysCodeInfoService sysCodeInfoService;
	/** 考试ID. */
	private String examineId;
	/** 试卷ID. */
	private String paperId;
	/** 关联考试ID. */
	private String necessaryExamineId;
	/** 关联课程ID. */
	private String necessaryCourseId;
	/** 总分. */
	private Integer totalScore;
	/** 子考试ID. */
	private String childExamineId;
	/** 画面操作模式 */
	private String operatMode;
	/** 错误信息. */
	private String errorMessage;
	/** 考试信息. */
	private ExamineInfo examineInfo;
	/** 所选试卷一览. */
	private List<TestPaperInfo> testPaperInfoList;
	/** 需要通过的考试. */
	private List<ExamineInfo> examineInfoList;
	/** 需要学习的课程. */
	private List<CourseInfo> courseInfoList;
	/** 参阅答案标志. */
	private Boolean ckbCheckAnswerFlg;
	/** 再考试标志. */
	private Boolean ckbAgainExamineFlg;
	/** 必须考试标志. */
	private Boolean ckbMustExamineFlg;
	/** 报名批准标志. */
	private Boolean ckbApplyConfirmFlg;
	/** 评定等级数量下拉框. */
	private List<SysCodeInfo> resultlevelNumList;
	/** 考试通过档次下拉框. */
	private List<SysCodeInfo> passexamineLevelList;
	/** 有效成绩区分单选框. */
	private List<SysCodeInfo> scoreValidFlgList;
	/** 子考试信息. */
	private List<ExamineInfo> childExamineInfoList;
	/** 循环考试分配方式. */
	private List<SysCodeInfo> loopExamineModelList;
	/** 按年循环考试日期(月)下拉框. */
	private List<SysCodeInfo> yearLoopMonthList;
	/** 按月循环考试日期(日)下拉框. */
	private List<SysCodeInfo> monthLoopDayList;
	/** 按周循环考试日期下拉框. */
	private List<SysCodeInfo> weekLoopList;
	/** 所需的考试IDList. */
	private XWorkList sltExamineId;
	/** 所需的课程IDList. */
	private XWorkList sltCourseId;
	/** 需要移除的试卷ID的行号. */
	private Integer removePaperNo;
	/** 从试卷选择画面传来的试卷ID. */
	private String selectedPaperJson;
	/** 考试开始日时串. */
	private String strExamineStartTime;
	/** 考试结束日时串. */
	private String strExamineEndTime;
	/** 通知提醒日期串. */
	private String strExamineNotifyDate;
	/** 报名截止日时串. */
	private String strApplyClosingTime;
	/** 考试生成方式. */
	private String createStyleFlg;
	/** eventId. */
	private String eventId;

	
	@Override
	public void prepare() throws Exception {
		// 评定等级数量下拉框初期检索
		this.resultlevelNumList = sysCodeInfoService.getSysCodeInfo("R19");
		
		// 考试通过档次下拉框初期检索
		this.passexamineLevelList = sysCodeInfoService.getSysCodeInfo("R20");
		
		// 有效成绩区分单选框初期检索
		this.scoreValidFlgList = sysCodeInfoService.getSysCodeInfo("R25");
		
		// 循环考试方式下拉框初期检索
		this.loopExamineModelList = sysCodeInfoService.getSysCodeInfo("R21");
		
		// 按年循环考试日期(月)下拉框初期检索
		this.yearLoopMonthList = sysCodeInfoService.getSysCodeInfo("R22");
		
		// 按月循环考试日期(日)下拉框初期检索
		this.monthLoopDayList = sysCodeInfoService.getSysCodeInfo("R23");
		
		// 按周循环考试日期下拉框初期检索
		this.weekLoopList = sysCodeInfoService.getSysCodeInfo("R24");
	}
	
	/**
	 * 全局校验
	 */
	@Override
	public void validate(){
		
		if (eventId != null){
			if (!checkAuthority(eventId)){
				this.addActionError(ERROR);
			}
		}
	}

	/**
	 * 权限检查
	 */
	private boolean checkAuthority(String eventId) {
		List<String> objectId = new ArrayList<String>();
		objectId.add(examineId == null ? examineInfo.getExamineId() : examineId);
		TtCheckResult checkResult = ttCommonService.checkStartupAuthority(
				TtConstants.PageId.K060061.value(), eventId, 0, 0, 0,
				TtConstants.C43.C43_3.value(), objectId);
		
		if (!checkResult.getRetFlag()){
			errorMessage = checkResult.getRetMessage();
			return false;
		}
		
		return true;
	}
	
	/**
	 * 画面的初期显示(查看模式)
	 * 
	 * @return SUCCESS
	 */
	@InputConfig(resultName=ERROR)
	public String initViewModel() {
		
		if (eventId == null){
			eventId = "K060061_1";
			
			if (!checkAuthority(eventId)){
				return ERROR;
			}
		}
		
		if (!init(examineId == null ? examineInfo.getExamineId() : examineId,
				TtConstants.C20.C20_1.toString())) {
			return ERROR;
		}
		return SUCCESS;
	}

	/**
	 * 画面的初期显示(编辑模式)
	 * 
	 * @return SUCCESS
	 */
	@InputConfig(resultName=ERROR)
	public String initEditModel() {
		
		if (eventId == null){
			eventId = "K060061_2";
			
			if (!checkAuthority(eventId)){
				return ERROR;
			}
		}
		
		if (!init(examineId == null ? examineInfo.getExamineId() : examineId,
				TtConstants.C20.C20_2.toString())) {
			return ERROR;
		}
		return SUCCESS;
	}

	/**
	 * 画面的初期显示(删除模式)
	 * 
	 * @return SUCCESS
	 */
	@InputConfig(resultName=ERROR)
	public String initDeleteModel() {
		
		if (eventId == null){
			eventId = "K060061_3";
			
			if (!checkAuthority(eventId)){
				return ERROR;
			}
		}
		
		if (!init(examineId == null ? examineInfo.getExamineId() : examineId,
				TtConstants.C20.C20_4.toString())) {
			return ERROR;
		}
		return SUCCESS;
	}

	/**
	 * 参数校验
	 * 
	 */
	private boolean validateInit() {
		if (examineId == null && examineInfo == null) {
			errorMessage = propMgr.getMessage("yds.com.warning.0001", "考试ID");
			return false;
		}
		return true;
	}

	/**
	 * 画面的初期显示
	 * 
	 * param examineId 考试ID param mode 画面模式
	 * 
	 * @return SUCCESS
	 */
	@InputConfig(resultName = ERROR)
	private boolean init(String examineId, String mode) {

		if (!validateInit()) {
			return false;
		}

		// 设置画面操作模式
		this.setOperatMode(mode);
		// 考试信息取得
		this.examineInfo = k060061Service.getExamineInfo(examineId);

		if (this.examineInfo == null) {
			errorMessage = propMgr.getMessage("yds.tt.error.JYE12", "考试");
			return false;
		}

		// 试卷信息取得
		this.testPaperInfoList = k060061Service.getTestPaperInfoList(examineId);
		
		// 需要通过的考试选择
		this.examineInfoList = k060061Service.getSelectedExamineList(examineId);
		
		// 需要通过的课程选择
		this.courseInfoList = k060061Service.getSelectedCourseList(examineId);

		// 参阅答案标志
		if (TtConstants.C09.C09_2.value() == examineInfo.getCheckAnswerFlg()) {
			ckbCheckAnswerFlg = true;
		} else {
			ckbCheckAnswerFlg = false;
		}
		
		// 再考试标志
		if (TtConstants.C10.C10_2.value() == examineInfo.getAgainExamineFlg()) {
			ckbAgainExamineFlg = true;
		} else {
			ckbAgainExamineFlg = false;
		}
		
		// 必须考试标志
		if (TtConstants.C11.C11_2.value() == examineInfo.getMustExamineFlg()) {
			ckbMustExamineFlg = true;
		} else {
			ckbMustExamineFlg = false;
		}
		
		// 报名批准标志
		if (TtConstants.C13.C13_2.value() == examineInfo.getApplyConfirmFlg()) {
			ckbApplyConfirmFlg = true;
		} else {
			ckbApplyConfirmFlg = false;
		}
		
		// 子考试一览取得
		this.childExamineInfoList = k060061Service
				.getChildExamineInfoList(examineId);

		// 保存时间戳
		ttCommonService.setTimestamp(TtConstants.PageId.K060061, examineInfo.getUpdateTime());
		return true;
	}

	/**
	 * 选择试卷画面点击选择
	 */
	@InputConfig(resultName=ERROR)
	public String selectePaperCallBack() throws Exception {

		testPaperInfoList = k060061Service.getTestPaperInfoList(examineId);

		return SUCCESS;
	}
	
	/**
	 * 取得需要通过的考试一览
	 */
	@InputConfig(resultName=ERROR)
	public String getMustPassExamineList(){
		
		// 需要通过的考试选择
		this.examineInfoList = k060061Service.getSelectedExamineList(examineId);
		
		return SUCCESS;
	}
	
	/**
	 * 取得需要通过的课程一览
	 */
	@InputConfig(resultName=ERROR)
	public String getMustPassCourseList(){
		
		// 需要通过的课程选择
		this.courseInfoList = k060061Service.getSelectedCourseList(examineId);
		
		return SUCCESS;
	}
	
	/**
	 * 移除考试
	 */
	@InputConfig(resultName=ERROR)
	public String deleteSelectedExamine(){
		
		k060061Service.deleteSelectedExamine(examineId, necessaryExamineId);
		
		// 需要通过的考试选择
		this.examineInfoList = k060061Service.getSelectedExamineList(examineId);
		
		return SUCCESS;
	}
	
	/**
	 * 移除课程
	 */
	@InputConfig(resultName=ERROR)
	public String deleteSelectedCourse(){
		
		k060061Service.deleteSelectedCourse(examineId, necessaryCourseId);
		
		// 需要通过的课程选择
		this.courseInfoList = k060061Service.getSelectedCourseList(examineId);
		
		return SUCCESS;
	}

	/**
	 * 删除父考试
	 */
	@InputConfig(resultName=ERROR)
	public String deleteParentExamine() {
		
		try{
			k060061Service.deleteParentExamine(examineId);
			
		} catch (TtExclusiveException e){
			errorMessage = propMgr.getMessage("yds.tt.error.KSE56");
			return ERROR;
		}
		
		return SUCCESS;
	}

	/**
	 * 更新考试信息
	 */
	@InputConfig(resultName=ERROR)
	public String updateExamineInfo() {
		// 设置总分
		examineInfo.setTotalScore(this.getTotalScore());
		// 设置参阅答案标志
		if (this.getCkbCheckAnswerFlg()) {
			examineInfo.setCheckAnswerFlg(TtConstants.C09.C09_2.value());
		} else {
			examineInfo.setCheckAnswerFlg(TtConstants.C09.C09_1.value());
		}
		// 设置再考试标志
		if (this.getCkbAgainExamineFlg()) {
			examineInfo.setAgainExamineFlg(TtConstants.C10.C10_2.value());
		} else {
			examineInfo.setAgainExamineFlg(TtConstants.C10.C10_1.value());
		}
		// 设置必须考试标志
		if (this.getCkbMustExamineFlg()) {
			examineInfo.setMustExamineFlg(TtConstants.C11.C11_2.value());
		} else {
			examineInfo.setMustExamineFlg(TtConstants.C11.C11_1.value());
		}
		// 设置报名批准标志
		if (this.getCkbApplyConfirmFlg()) {
			examineInfo.setApplyConfirmFlg(TtConstants.C13.C13_2.value());
		} else {
			examineInfo.setApplyConfirmFlg(TtConstants.C13.C13_1.value());
		}

		// 设置更新者ID
		examineInfo.setUpdateUserId(TtCommonUtil.getLoginUserId());
		
		try{
			k060061Service.updateTotalExamineInfo(examineInfo, sltExamineId,
					sltCourseId, testPaperInfoList);
			
		} catch (TtExclusiveException e){
			errorMessage = propMgr.getMessage("yds.tt.error.KSE56");
			return ERROR;
		}

		return SUCCESS;
	}

	/**
	 * 考试生成方式设定
	 * 
	 * @throws CloneNotSupportedException
	 */
	@InputConfig(resultName=ERROR)
	public String insertExamineCreateStyle() throws CloneNotSupportedException {
		k060061Service.insertExamineCreateStyle(examineId, createStyleFlg,
				strExamineStartTime, strExamineEndTime, strExamineNotifyDate,
				strApplyClosingTime);

		// 子考试一览取得
		this.childExamineInfoList = k060061Service
				.getChildExamineInfoList(examineId);

		return SUCCESS;
	}
	
	/**
	 * 移除选择试卷
	 */
	@InputConfig(resultName=ERROR)
	public String deleteSelectedPaper(){
		
		// 移除试卷
		k060061Service.deleteSelectedPaper(examineId, paperId);
		
		// 试卷信息重新取得
		this.testPaperInfoList = k060061Service.getTestPaperInfoList(examineId);
		
		return SUCCESS;
	}

	/**
	 * @return the k060061Service
	 */
	public K060061Service getK060061Service() {
		return k060061Service;
	}

	/**
	 * @param service
	 *            the k060061Service to set
	 */
	public void setK060061Service(K060061Service service) {
		k060061Service = service;
	}

	/**
	 * @return the examineId
	 */
	public String getExamineId() {
		return examineId;
	}

	/**
	 * @param examineId
	 *            the examineId to set
	 */
	public void setExamineId(String examineId) {
		this.examineId = examineId;
	}

	/**
	 * @return the examineInfo
	 */
	public ExamineInfo getExamineInfo() {
		return examineInfo;
	}

	/**
	 * @param examineInfo
	 *            the examineInfo to set
	 */
	public void setExamineInfo(ExamineInfo examineInfo) {
		this.examineInfo = examineInfo;
	}

	/**
	 * @return the testPaperInfoList
	 */
	public List<TestPaperInfo> getTestPaperInfoList() {
		return testPaperInfoList;
	}

	/**
	 * @param testPaperInfoList
	 *            the testPaperInfoList to set
	 */
	public void setTestPaperInfoList(List<TestPaperInfo> testPaperInfoList) {
		this.testPaperInfoList = testPaperInfoList;
	}

	/**
	 * @return the examineInfoList
	 */
	public List<ExamineInfo> getExamineInfoList() {
		return examineInfoList;
	}

	/**
	 * @param examineInfoList
	 *            the examineInfoList to set
	 */
	public void setExamineInfoList(List<ExamineInfo> examineInfoList) {
		this.examineInfoList = examineInfoList;
	}

	/**
	 * @return the courseInfoList
	 */
	public List<CourseInfo> getCourseInfoList() {
		return courseInfoList;
	}

	/**
	 * @param courseInfoList
	 *            the courseInfoList to set
	 */
	public void setCourseInfoList(List<CourseInfo> courseInfoList) {
		this.courseInfoList = courseInfoList;
	}




	/**
	 * @return the sysCodeInfoService
	 */
	public SysCodeInfoService getSysCodeInfoService() {
		return sysCodeInfoService;
	}

	/**
	 * @param sysCodeInfoService
	 *            the sysCodeInfoService to set
	 */
	public void setSysCodeInfoService(SysCodeInfoService sysCodeInfoService) {
		this.sysCodeInfoService = sysCodeInfoService;
	}

	/**
	 * @return the ckbCheckAnswerFlg
	 */
	public Boolean getCkbCheckAnswerFlg() {
		return ckbCheckAnswerFlg;
	}

	/**
	 * @param ckbCheckAnswerFlg
	 *            the ckbCheckAnswerFlg to set
	 */
	public void setCkbCheckAnswerFlg(Boolean ckbCheckAnswerFlg) {
		this.ckbCheckAnswerFlg = ckbCheckAnswerFlg;
	}

	/**
	 * @return the ckbMustExamineFlg
	 */
	public Boolean getCkbMustExamineFlg() {
		return ckbMustExamineFlg;
	}

	/**
	 * @param ckbMustExamineFlg
	 *            the ckbMustExamineFlg to set
	 */
	public void setCkbMustExamineFlg(Boolean ckbMustExamineFlg) {
		this.ckbMustExamineFlg = ckbMustExamineFlg;
	}

	/**
	 * @return the ckbApplyConfirmFlg
	 */
	public Boolean getCkbApplyConfirmFlg() {
		return ckbApplyConfirmFlg;
	}

	/**
	 * @param ckbApplyConfirmFlg
	 *            the ckbApplyConfirmFlg to set
	 */
	public void setCkbApplyConfirmFlg(Boolean ckbApplyConfirmFlg) {
		this.ckbApplyConfirmFlg = ckbApplyConfirmFlg;
	}

	/**
	 * @return the ckbAgainExamineFlg
	 */
	public Boolean getCkbAgainExamineFlg() {
		return ckbAgainExamineFlg;
	}

	/**
	 * @param ckbAgainExamineFlg
	 *            the ckbAgainExamineFlg to set
	 */
	public void setCkbAgainExamineFlg(Boolean ckbAgainExamineFlg) {
		this.ckbAgainExamineFlg = ckbAgainExamineFlg;
	}

	/**
	 * @return the resultlevelNumList
	 */
	public List<SysCodeInfo> getResultlevelNumList() {
		return resultlevelNumList;
	}

	/**
	 * @param resultlevelNumList
	 *            the resultlevelNumList to set
	 */
	public void setResultlevelNumList(List<SysCodeInfo> resultlevelNumList) {
		this.resultlevelNumList = resultlevelNumList;
	}

	/**
	 * @return the passexamineLevelList
	 */
	public List<SysCodeInfo> getPassexamineLevelList() {
		return passexamineLevelList;
	}

	/**
	 * @param passexamineLevelList
	 *            the passexamineLevelList to set
	 */
	public void setPassexamineLevelList(List<SysCodeInfo> passexamineLevelList) {
		this.passexamineLevelList = passexamineLevelList;
	}

	/**
	 * @return the scoreValidFlgList
	 */
	public List<SysCodeInfo> getScoreValidFlgList() {
		return scoreValidFlgList;
	}

	/**
	 * @param scoreValidFlgList
	 *            the scoreValidFlgList to set
	 */
	public void setScoreValidFlgList(List<SysCodeInfo> scoreValidFlgList) {
		this.scoreValidFlgList = scoreValidFlgList;
	}

	/**
	 * @return the childExamineInfoList
	 */
	public List<ExamineInfo> getChildExamineInfoList() {
		return childExamineInfoList;
	}

	/**
	 * @param childExamineInfoList
	 *            the childExamineInfoList to set
	 */
	public void setChildExamineInfoList(List<ExamineInfo> childExamineInfoList) {
		this.childExamineInfoList = childExamineInfoList;
	}

	/**
	 * @return the loopExamineModelList
	 */
	public List<SysCodeInfo> getLoopExamineModelList() {
		return loopExamineModelList;
	}

	/**
	 * @param loopExamineModelList
	 *            the loopExamineModelList to set
	 */
	public void setLoopExamineModelList(List<SysCodeInfo> loopExamineModelList) {
		this.loopExamineModelList = loopExamineModelList;
	}

	/**
	 * @return the yearLoopMonthList
	 */
	public List<SysCodeInfo> getYearLoopMonthList() {
		return yearLoopMonthList;
	}

	/**
	 * @param yearLoopMonthList
	 *            the yearLoopMonthList to set
	 */
	public void setYearLoopMonthList(List<SysCodeInfo> yearLoopMonthList) {
		this.yearLoopMonthList = yearLoopMonthList;
	}

	/**
	 * @return the monthLoopDayList
	 */
	public List<SysCodeInfo> getMonthLoopDayList() {
		return monthLoopDayList;
	}

	/**
	 * @param monthLoopDayList
	 *            the monthLoopDayList to set
	 */
	public void setMonthLoopDayList(List<SysCodeInfo> monthLoopDayList) {
		this.monthLoopDayList = monthLoopDayList;
	}

	/**
	 * @return the weekLoopList
	 */
	public List<SysCodeInfo> getWeekLoopList() {
		return weekLoopList;
	}

	/**
	 * @param weekLoopList
	 *            the weekLoopList to set
	 */
	public void setWeekLoopList(List<SysCodeInfo> weekLoopList) {
		this.weekLoopList = weekLoopList;
	}

	/**
	 * @return the operatMode
	 */
	public String getOperatMode() {
		return operatMode;
	}

	/**
	 * @param operatMode
	 *            the operatMode to set
	 */
	public void setOperatMode(String operatMode) {
		this.operatMode = operatMode;
	}

	/**
	 * @return the childExamineId
	 */
	public String getChildExamineId() {
		return childExamineId;
	}

	/**
	 * @param childExamineId
	 *            the childExamineId to set
	 */
	public void setChildExamineId(String childExamineId) {
		this.childExamineId = childExamineId;
	}

	/**
	 * @return the totalScore
	 */
	public Integer getTotalScore() {
		return totalScore;
	}

	/**
	 * @param totalScore
	 *            the totalScore to set
	 */
	public void setTotalScore(Integer totalScore) {
		this.totalScore = totalScore;
	}

	/**
	 * @return the sltExamineId
	 */
	public XWorkList getSltExamineId() {
		return sltExamineId;
	}

	/**
	 * @param sltExamineId
	 *            the sltExamineId to set
	 */
	public void setSltExamineId(XWorkList sltExamineId) {
		this.sltExamineId = sltExamineId;
	}

	/**
	 * @return the sltCourseId
	 */
	public XWorkList getSltCourseId() {
		return sltCourseId;
	}

	/**
	 * @param sltCourseId
	 *            the sltCourseId to set
	 */
	public void setSltCourseId(XWorkList sltCourseId) {
		this.sltCourseId = sltCourseId;
	}

	/**
	 * @return the removePaperNo
	 */
	public Integer getRemovePaperNo() {
		return removePaperNo;
	}

	/**
	 * @param removePaperNo
	 *            the removePaperNo to set
	 */
	public void setRemovePaperNo(Integer removePaperNo) {
		this.removePaperNo = removePaperNo;
	}

	/**
	 * @return the selectedPaperJson
	 */
	public String getSelectedPaperJson() {
		return selectedPaperJson;
	}

	/**
	 * @param selectedPaperJson
	 *            the selectedPaperJson to set
	 */
	public void setSelectedPaperJson(String selectedPaperJson) {
		this.selectedPaperJson = selectedPaperJson;
	}


	/**
	 * @return the errorMessage
	 */
	public String getErrorMessage() {
		return errorMessage;
	}

	/**
	 * @param errorMessage
	 *            the errorMessage to set
	 */
	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}


	/**
	 * @return the ttCommonService
	 */
	public TtCommonService getTtCommonService() {
		return ttCommonService;
	}

	/**
	 * @param ttCommonService
	 *            the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}

	/**
	 * @return the strExamineStartTime
	 */
	public String getStrExamineStartTime() {
		return strExamineStartTime;
	}

	/**
	 * @param strExamineStartTime
	 *            the strExamineStartTime to set
	 */
	public void setStrExamineStartTime(String strExamineStartTime) {
		this.strExamineStartTime = strExamineStartTime;
	}

	/**
	 * @return the strExamineEndTime
	 */
	public String getStrExamineEndTime() {
		return strExamineEndTime;
	}

	/**
	 * @param strExamineEndTime
	 *            the strExamineEndTime to set
	 */
	public void setStrExamineEndTime(String strExamineEndTime) {
		this.strExamineEndTime = strExamineEndTime;
	}

	/**
	 * @return the strExamineNotifyDate
	 */
	public String getStrExamineNotifyDate() {
		return strExamineNotifyDate;
	}

	/**
	 * @param strExamineNotifyDate
	 *            the strExamineNotifyDate to set
	 */
	public void setStrExamineNotifyDate(String strExamineNotifyDate) {
		this.strExamineNotifyDate = strExamineNotifyDate;
	}

	/**
	 * @return the strApplyClosingTime
	 */
	public String getStrApplyClosingTime() {
		return strApplyClosingTime;
	}

	/**
	 * @param strApplyClosingTime
	 *            the strApplyClosingTime to set
	 */
	public void setStrApplyClosingTime(String strApplyClosingTime) {
		this.strApplyClosingTime = strApplyClosingTime;
	}

	/**
	 * @return the createStyleFlg
	 */
	public String getCreateStyleFlg() {
		return createStyleFlg;
	}

	/**
	 * @param createStyleFlg
	 *            the createStyleFlg to set
	 */
	public void setCreateStyleFlg(String createStyleFlg) {
		this.createStyleFlg = createStyleFlg;
	}

	/**
	 * @return the eventId
	 */
	public String getEventId() {
		return eventId;
	}

	/**
	 * @param eventId the eventId to set
	 */
	public void setEventId(String eventId) {
		this.eventId = eventId;
	}

	/**
	 * @return the paperId
	 */
	public String getPaperId() {
		return paperId;
	}

	/**
	 * @param paperId the paperId to set
	 */
	public void setPaperId(String paperId) {
		this.paperId = paperId;
	}

	/**
	 * @return the necessaryExamineId
	 */
	public String getNecessaryExamineId() {
		return necessaryExamineId;
	}

	/**
	 * @param necessaryExamineId the necessaryExamineId to set
	 */
	public void setNecessaryExamineId(String necessaryExamineId) {
		this.necessaryExamineId = necessaryExamineId;
	}

	/**
	 * @return the necessaryCourseId
	 */
	public String getNecessaryCourseId() {
		return necessaryCourseId;
	}

	/**
	 * @param necessaryCourseId the necessaryCourseId to set
	 */
	public void setNecessaryCourseId(String necessaryCourseId) {
		this.necessaryCourseId = necessaryCourseId;
	}

}
