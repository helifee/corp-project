/*
 * @(#) K050041Action.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 考试子系统
 */

package com.yds.tt.testing.action;

import java.util.ArrayList;
import java.util.List;

import net.sf.json.JSONArray;
import net.sf.json.JSONException;
import net.sf.json.JSONObject;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.yds.base.action.AbstractBaseAction;
import com.yds.common.bean.SysCodeInfo;
import com.yds.common.service.SessionConstants;
import com.yds.common.service.SysCodeInfoService;
import com.yds.tt.manager.bean.TtCheckResult;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtCommonUtil;
import com.yds.tt.manager.service.TtConstants.C43;
import com.yds.tt.manager.service.TtConstants.E01;
import com.yds.tt.manager.service.TtConstants.PageId;
import com.yds.tt.manager.service.TtConstants.R02;
import com.yds.tt.manager.service.TtConstants.R11;
import com.yds.tt.testing.bean.AnswerInfo;
import com.yds.tt.testing.bean.PaperBigQuestionInfo;
import com.yds.tt.testing.bean.PaperRandomQuestionInfo;
import com.yds.tt.testing.bean.PaperStableQuestionInfo;
import com.yds.tt.testing.bean.TestPaperInfo;
import com.yds.tt.testing.service.K050041Service;
import com.yds.tt.testing.service.TestingCommonService;
import com.yds.util.service.Session;

/**
 * 试卷编辑处理
 * 
 * @author guozhizhou
 * @version 1.00 2010/04/30
 */
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@Controller("k050041Action")
public class K050041Action extends AbstractBaseAction {

	private static final long serialVersionUID = 6990719929959961866L;
	// 分类下拉列表初期值定数
	private static final Integer TT_K050041_CATEGORY_VALUE_0 = 0;

	// 画面调用业务类
	private K050041Service k050041Service;
	private TestingCommonService testingCommonService;
	private TtCommonService ttCommonService;
	private SysCodeInfoService sysCodeInfoService;

	// 试卷大题信息
	private PaperBigQuestionInfo bigquestionInfo;
	// 试题难度列表
	private List<SysCodeInfo> questionDifficultyList;
	// 关键字信息
	private List<String> keywordList;
	// 画面模式
	private Integer modeKbn;
	// 大题编号
	private Integer bigquestionSerialNo;
	// 试卷ID
	private String paperId;
	// 参数一级分类ID
	private Integer category1;
	// 参数二级分类ID
	private Integer category2;
	// 参数三级分类ID
	private Integer category3;
	// 提交用一级分类ID
	private Integer category1Id;
	// 提交用二级分类ID
	private Integer category2Id;
	// 提交用三级分类ID
	private Integer category3Id;
	// 一级分类列表可用区分
	private String sltCategory1Enable;
	// 二级分类列表可用区分
	private String sltCategory2Enable;
	// 三级分类列表可用区分
	private String sltCategory3Enable;
	// 选中行序号
	private Integer itemNo;
	// 错误信息
	private String errorMessage;
	// 试题IDJSON
	private String questionIdJson;
	// 试题ID
	private String questionId;
	// 答案信息
	private String answerInfo;
	// 登录用户ID
	private String logInUser;

	/**
	 * 画面的初期显示
	 * 
	 * @return SUCCESS
	 */
	@SuppressWarnings("unchecked")
	public String pageInit() throws Exception {

		// 取得试卷信息
		TestPaperInfo testPaperInfo = (TestPaperInfo) Session
				.get(SessionConstants.TT_K050031_PAPERINFO);
		// 画面启动检查
		TtCheckResult checkResult = checkAuthority(testPaperInfo);
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			if ("GTE01".equals(checkResult.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;
			}
		}
		this.logInUser = TtCommonUtil.getLoginUserId();
		// 取得试卷大题信息
		List<PaperBigQuestionInfo> pbqInfoList = (List<PaperBigQuestionInfo>) Session
				.get(SessionConstants.TT_K050031_PAPERBIGQUESTIONINFO);
		// 设定试卷ID
		this.setPaperId(testPaperInfo.getPaperId());
		// 设定一级分类ID
		this.setCategory1(testPaperInfo.getCategory1Id());
		// 设定二级分类ID
		this.setCategory2(testPaperInfo.getCategory2Id());
		// 设定三级分类ID
		this.setCategory3(testPaperInfo.getCategory3Id());
		// 根据试卷类别设定画面模式
		this.setModeKbn(testPaperInfo.getPaperType());

		// 根据参数大题编号获得大题信息
		for (PaperBigQuestionInfo pbqInfo : pbqInfoList) {
			if (bigquestionSerialNo.equals(pbqInfo.getBigquestionSerialNo())) {
				// 设定画面大题信息
				bigquestionInfo = pbqInfo;
				// 向session中设定大题信息
				Session.set(SessionConstants.TT_K050041_BIGQUESTIONINFO,
						pbqInfo);
			}
		}

		// 未获得大题信息时出错
		if (null == bigquestionInfo) {
			return ERROR;
		}
		// 根据大题类别获得大题详细信息
		if (bigquestionInfo.getBigquestionType() == R11.R11_2.value()) {

			// 分类下拉列表初期设置
			if (!TT_K050041_CATEGORY_VALUE_0.equals(category1)) {
				this.setSltCategory1Enable(TT_K050041_CATEGORY_VALUE_0
						.toString());
			}
			if (!TT_K050041_CATEGORY_VALUE_0.equals(category2)) {
				this.setSltCategory2Enable(TT_K050041_CATEGORY_VALUE_0
						.toString());
			}
			if (!TT_K050041_CATEGORY_VALUE_0.equals(category3)) {
				this.setSltCategory3Enable(TT_K050041_CATEGORY_VALUE_0
						.toString());
			}

			// 取得当前条件下题库试题数量
			List<PaperRandomQuestionInfo> prqInfoList = bigquestionInfo
					.getRandomQueInfoList();
			k050041Service.getQuestionCount(prqInfoList);
			if (0 == prqInfoList.size()) {
				PaperRandomQuestionInfo prqInfo = new PaperRandomQuestionInfo();
				prqInfo.setPaperId(bigquestionInfo.getPaperId());
				prqInfo.setPaperVersionNo(bigquestionInfo.getPaperVersionNo());
				prqInfo.setConditionSerialNo(1);
				prqInfo.setBigquestionSerialNo(bigquestionInfo.getBigquestionSerialNo());
				prqInfo.setCategory1Id(category1);
				prqInfo.setCategory2Id(category2);
				prqInfo.setCategory3Id(category3);
				prqInfo.setKeyword("");
				prqInfoList.add(prqInfo);
			}
			bigquestionInfo.setRandomQueInfoList(prqInfoList);
			// 取得试题难度下拉列表
			questionDifficultyList = sysCodeInfoService.getSysCodeInfo(E01
					.getEnumName(), "");
		}

		return SUCCESS;
	}

	/**
	 * 获得题库中试题数量
	 * 
	 * @return SUCCESS
	 */
	public String searchQuestionCount() throws Exception {
		// 检索条件
		PaperRandomQuestionInfo conditionInfo = new PaperRandomQuestionInfo();
		// 画面信息
		List<PaperRandomQuestionInfo> prqInfoList = this.bigquestionInfo
				.getRandomQueInfoList();
		PaperRandomQuestionInfo pageInfo = prqInfoList.get(0);
		// 设置检索条件
		conditionInfo.setQuestionKind(this.bigquestionInfo.getQuestionKind());
		conditionInfo.setCategory1Id(this.getCategory1Id());
		conditionInfo.setCategory2Id(this.getCategory2Id());
		conditionInfo.setCategory3Id(this.getCategory3Id());
		conditionInfo.setKeyword(pageInfo.getKeyword());
		conditionInfo.setQuestionDifficulty(pageInfo.getQuestionDifficulty());
		// 检索题库试题数量
		this.answerInfo = k050041Service.getQuestionCount(conditionInfo)
				.toString();

		return SUCCESS;
	}

	/**
	 * 上移大题
	 * 
	 * @return SUCCESS
	 */
	public void moveUp() throws Exception {

		// 获得session固定大题信息
		List<PaperStableQuestionInfo> psqInfoList = bigquestionInfo
				.getStableQueInfoList();

		// 选中试题显示顺序
		int order = this.itemNo.intValue();

		// 选中行试题
		PaperStableQuestionInfo psqInfoNow = psqInfoList.get(order - 1);
		// 上一行大题
		PaperStableQuestionInfo psqInfoUp = psqInfoList.get(order - 2);
		// 重新设定序号
		psqInfoNow.setQuestionOrder(order - 1);
		psqInfoUp.setQuestionOrder(order);
		psqInfoList.set(order - 1, psqInfoUp);
		psqInfoList.set(order - 2, psqInfoNow);

		// 获得session大题信息
		bigquestionInfo = (PaperBigQuestionInfo) Session
				.get(SessionConstants.TT_K050041_BIGQUESTIONINFO);
		// 更新固定大题信息
		bigquestionInfo.setStableQueInfoList(psqInfoList);
		// 向session中保存大题信息
		Session.set(SessionConstants.TT_K050041_BIGQUESTIONINFO,
				bigquestionInfo);
	}

	/**
	 * 下移大题
	 * 
	 * @return SUCCESS
	 */
	public void moveDown() throws Exception {

		// 获得session大题信息
		bigquestionInfo = (PaperBigQuestionInfo) Session
				.get(SessionConstants.TT_K050041_BIGQUESTIONINFO);
		
		// 获得session固定大题信息
		List<PaperStableQuestionInfo> psqInfoList = bigquestionInfo
				.getStableQueInfoList();

		// 选中试题显示顺序
		int order = this.itemNo.intValue();

		// 选中行试题
		PaperStableQuestionInfo psqInfoNow = psqInfoList.get(order - 1);
		// 下一行大题
		PaperStableQuestionInfo psqInfoDown = psqInfoList.get(order);
		psqInfoNow.setQuestionOrder(order + 1);
		psqInfoDown.setQuestionOrder(order);
		psqInfoList.set(order, psqInfoNow);
		psqInfoList.set(order - 1, psqInfoDown);

		// 更新固定大题信息
		bigquestionInfo.setStableQueInfoList(psqInfoList);
		// 向session中保存大题信息
		Session.set(SessionConstants.TT_K050041_BIGQUESTIONINFO,
				bigquestionInfo);
	}

	/**
	 * 添加随机大题信息
	 * 
	 * @return SUCCESS
	 */
	public String addRandomQuestion() throws Exception {

		// 新建随机大题
		PaperRandomQuestionInfo newRandomQuestionInfo = new PaperRandomQuestionInfo();
		// 获得session随机大题信息
		List<PaperRandomQuestionInfo> prqInfoList = bigquestionInfo
				.getRandomQueInfoList();
		// 设定新建随机大题信息
		newRandomQuestionInfo.setPaperId(bigquestionInfo.getPaperId());
		newRandomQuestionInfo.setPaperVersionNo(bigquestionInfo
				.getPaperVersionNo());
		newRandomQuestionInfo.setConditionSerialNo(prqInfoList.size() + 1);
		newRandomQuestionInfo.setBigquestionSerialNo(bigquestionInfo
				.getBigquestionSerialNo());
		newRandomQuestionInfo
				.setQuestionKind(bigquestionInfo.getQuestionKind());
		newRandomQuestionInfo.setCategory1Id(category1);
		newRandomQuestionInfo.setCategory2Id(category2);
		newRandomQuestionInfo.setCategory3Id(category3);

		// 分类下拉列表初期设置
		if (!TT_K050041_CATEGORY_VALUE_0.equals(category1)) {
			this.setSltCategory1Enable(TT_K050041_CATEGORY_VALUE_0.toString());
		}
		if (!TT_K050041_CATEGORY_VALUE_0.equals(category2)) {
			this.setSltCategory2Enable(TT_K050041_CATEGORY_VALUE_0.toString());
		}
		if (!TT_K050041_CATEGORY_VALUE_0.equals(category3)) {
			this.setSltCategory3Enable(TT_K050041_CATEGORY_VALUE_0.toString());
		}
		// 添加新建随机大题
		prqInfoList.add(newRandomQuestionInfo);
		// 获得session大题信息
		bigquestionInfo = (PaperBigQuestionInfo) Session
				.get(SessionConstants.TT_K050041_BIGQUESTIONINFO);
		// 更新随机大题信息
		bigquestionInfo.setRandomQueInfoList(prqInfoList);
		// 向session中保存大题信息
		Session.set(SessionConstants.TT_K050041_BIGQUESTIONINFO,
				bigquestionInfo);
		// 取得当前条件下题库试题数量
		k050041Service.getQuestionCount(prqInfoList);
		bigquestionInfo.setRandomQueInfoList(prqInfoList);
		// 取得试题难度下拉列表
		questionDifficultyList = sysCodeInfoService.getSysCodeInfo(E01
				.getEnumName(), "");

		return SUCCESS;
	}

	/**
	 * 删除固定大题信息
	 * 
	 * @return SUCCESS
	 */
	public String deleteStableQuestion() throws Exception {

		// 获得session固定大题信息
		List<PaperStableQuestionInfo> psqInfoList = ((PaperBigQuestionInfo) Session
				.get(SessionConstants.TT_K050041_BIGQUESTIONINFO))
				.getStableQueInfoList();

		// 删除试卷大题信息
		if (null != psqInfoList) {
			psqInfoList.remove(this.itemNo - 1);
			int size = psqInfoList.size();
			for (int i = 0; i < size; i++) {
				PaperStableQuestionInfo psqInfo = psqInfoList.get(i);
				if (itemNo < psqInfo.getQuestionOrder().intValue()) {
					psqInfo.setQuestionOrder(psqInfo.getQuestionOrder()
							.intValue() - 1);
				}
			}
		}

		// // 获得session大题信息
		// bigquestionInfo = (PaperBigQuestionInfo) Session
		// .get(SessionConstants.TT_K050041_BIGQUESTIONINFO);
		// 更新固定大题信息
		bigquestionInfo.setStableQueInfoList(psqInfoList);
		// 向session中保存大题信息
		Session.set(SessionConstants.TT_K050041_BIGQUESTIONINFO,
				bigquestionInfo);

		return SUCCESS;
	}

	/**
	 * 删除随机大题信息
	 * 
	 * @return SUCCESS
	 */
	public String deleteRandomQuestion() throws Exception {

		// 获得session随机大题信息
		List<PaperRandomQuestionInfo> prqInfoList = bigquestionInfo
				.getRandomQueInfoList();

		// 删除随机大题信息
		if (null != prqInfoList) {
			prqInfoList.remove(this.itemNo - 1);
			int size = prqInfoList.size();
			for (int i = 0; i < size; i++) {
				PaperRandomQuestionInfo prqInfo = prqInfoList.get(i);
				if (itemNo < prqInfo.getConditionSerialNo().intValue()) {
					prqInfo.setConditionSerialNo(prqInfo.getConditionSerialNo()
							.intValue() - 1);
				}
			}
		}

		// 分类下拉列表初期设置
		if (!TT_K050041_CATEGORY_VALUE_0.equals(category1)) {
			this.setSltCategory1Enable(TT_K050041_CATEGORY_VALUE_0.toString());
		}
		if (!TT_K050041_CATEGORY_VALUE_0.equals(category2)) {
			this.setSltCategory2Enable(TT_K050041_CATEGORY_VALUE_0.toString());
		}
		if (!TT_K050041_CATEGORY_VALUE_0.equals(category3)) {
			this.setSltCategory3Enable(TT_K050041_CATEGORY_VALUE_0.toString());
		}

		// 获得session大题信息
		bigquestionInfo = (PaperBigQuestionInfo) Session
				.get(SessionConstants.TT_K050041_BIGQUESTIONINFO);
		// 更新随机大题信息
		bigquestionInfo.setRandomQueInfoList(prqInfoList);
		// 向session中保存大题信息
		Session.set(SessionConstants.TT_K050041_BIGQUESTIONINFO,
				bigquestionInfo);
		// 取得当前条件下题库试题数量
		k050041Service.getQuestionCount(prqInfoList);
		bigquestionInfo.setRandomQueInfoList(prqInfoList);
		// 取得试题难度下拉列表
		questionDifficultyList = sysCodeInfoService.getSysCodeInfo(E01
				.getEnumName(), "");

		return SUCCESS;
	}

	/**
	 * 保存大题
	 * 
	 * @return SUCCESS
	 */
	@SuppressWarnings("unchecked")
	public String saveBigquestion() throws Exception {

		// 取得试卷信息
		TestPaperInfo testPaperInfo = (TestPaperInfo) Session
				.get(SessionConstants.TT_K050031_PAPERINFO);
		// 画面启动检查
		TtCheckResult checkResult = checkAuthority(testPaperInfo);
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			if ("GTE01".equals(checkResult.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;
			}
		}
		// 获得session大题信息
		PaperBigQuestionInfo pbqInfo = (PaperBigQuestionInfo) Session
				.get(SessionConstants.TT_K050041_BIGQUESTIONINFO);
		// 画面信息向session信息传递
		pbqInfo.setBigquestionTitle(bigquestionInfo.getBigquestionTitle());
		pbqInfo.setBigquestionDescription(bigquestionInfo
				.getBigquestionDescription());
		pbqInfo.setBigquestionTime(bigquestionInfo.getBigquestionTime());
		pbqInfo.setBigquestionTotalScore(bigquestionInfo
				.getBigquestionTotalScore());
		pbqInfo.setQuestionNum(bigquestionInfo.getQuestionNum());
		if (bigquestionInfo.getBigquestionType() == 1) {
			for (PaperStableQuestionInfo psqInfoSession : pbqInfo
					.getStableQueInfoList()) {
				for (PaperStableQuestionInfo psqInfo : bigquestionInfo
						.getStableQueInfoList()) {

					if (psqInfo.getQuestionId().equals(
							psqInfoSession.getQuestionId())) {
						psqInfoSession.setQuestionOrder(psqInfo
								.getQuestionOrder());
						psqInfoSession.setQuestionScore(psqInfo
								.getQuestionScore());
						psqInfoSession.setQuestionScoreDetails(psqInfo.getQuestionScoreDetails());
					}
				}
			}
		} else if (bigquestionInfo.getBigquestionType() == 2) {
			for (PaperRandomQuestionInfo prqInfoSession : pbqInfo
					.getRandomQueInfoList()) {
				for (PaperRandomQuestionInfo prqInfo : bigquestionInfo
						.getRandomQueInfoList()) {

					if (prqInfo.getConditionSerialNo().intValue() == prqInfoSession
							.getConditionSerialNo().intValue()) {
						if (null != prqInfo.getCategory1Id()) {

							prqInfoSession.setCategory1Id(prqInfo
									.getCategory1Id());
						}
						if (null != prqInfo.getCategory2Id()) {

							prqInfoSession.setCategory2Id(prqInfo
									.getCategory2Id());
						}
						if (null != prqInfo.getCategory3Id()) {

							prqInfoSession.setCategory3Id(prqInfo
									.getCategory3Id());
						}
						prqInfoSession.setKeyword(prqInfo.getKeyword());
						prqInfoSession.setQuestionDifficulty(prqInfo
								.getQuestionDifficulty());
						prqInfoSession.setQuestionNum(prqInfo.getQuestionNum());
						prqInfoSession.setQuestionScore(prqInfo
								.getQuestionScore());
					}
				}
			}
		}
		// 取得试卷大题信息
		List<PaperBigQuestionInfo> pbqInfoList = (List<PaperBigQuestionInfo>) Session
				.get(SessionConstants.TT_K050031_PAPERBIGQUESTIONINFO);
		int index = 0;
		for (PaperBigQuestionInfo paperBigQuestionInfo : pbqInfoList) {
			if (paperBigQuestionInfo.getBigquestionSerialNo().equals(
					bigquestionSerialNo)) {
				pbqInfoList.remove(index);
				pbqInfoList.add(index, pbqInfo);
				break;
			}
			index++;
		}

		Session.set(SessionConstants.TT_K050031_PAPERBIGQUESTIONINFO,
				pbqInfoList);
		Session.delete(SessionConstants.TT_K050041_BIGQUESTIONINFO);
		Session.delete(SessionConstants.TT_K050041_PAPERRANDOMQUESTIONINFO);
		Session.delete(SessionConstants.TT_K050041_PAPERSTABLEQUESTIONINFO);

		this.answerInfo = SUCCESS;
		return SUCCESS;
	}

	/**
	 * 检索答案信息
	 * 
	 * @return SUCCESS
	 */
	public String searchAnswerInfo() throws Exception {

		// 检索答案信息
		List<AnswerInfo> resultList = k050041Service.getAnswerInfo(questionId);
		try {
			JSONArray json = JSONArray.fromObject(resultList);
			this.answerInfo = json.toString();
		} catch (JSONException e) {
			e.printStackTrace();
		}

		return SUCCESS;
	}

	/**
	 * 新建试题返回方法
	 * 
	 * @return SUCCESS
	 */
	public String createQuestionCallBack() throws Exception {
		PaperRandomQuestionInfo conditionInfo = new PaperRandomQuestionInfo();
		conditionInfo.setQuestionKind(bigquestionInfo.getQuestionKind());
		return SUCCESS;
	}

	/**
	 * 选择试题返回方法
	 * 
	 * @return SUCCESS
	 */
	public String chooseQuestionCallBack() throws Exception {

		// 获得session大题信息
		PaperBigQuestionInfo pbqInfo = (PaperBigQuestionInfo) Session
				.get(SessionConstants.TT_K050041_BIGQUESTIONINFO);

		for (PaperStableQuestionInfo psqInfoSession : pbqInfo
				.getStableQueInfoList()) {
			for (PaperStableQuestionInfo psqInfo : bigquestionInfo
					.getStableQueInfoList()) {

				if (psqInfo.getQuestionId().equals(
						psqInfoSession.getQuestionId())) {
					psqInfoSession.setQuestionOrder(psqInfo.getQuestionOrder());
					psqInfoSession.setQuestionScore(psqInfo.getQuestionScore());
					psqInfoSession.setQuestionScoreDetails(psqInfo.getQuestionScoreDetails());
				}
			}
		}
		// 画面信息设定
		bigquestionInfo = pbqInfo;
		JSONObject json = JSONObject.fromObject(questionIdJson);

		k050041Service.editQuestionInfo(bigquestionInfo, json);

		return SUCCESS;
	}

	/**
	 * 取得关键字
	 * 
	 * @return SUCCESS
	 */
	public String keywordGet() {

		this.keywordList = testingCommonService.getKeywordList(category1);
		return SUCCESS;
	}

	/**
	 * 画面启动控制检查
	 * 
	 * @param mode
	 *            画面启动模式
	 * 
	 */
	private TtCheckResult checkAuthority(TestPaperInfo testPaperInfo) {

		List<String> objectId = new ArrayList<String>();

		objectId.add(testPaperInfo.getPaperId());
		TtCheckResult checkResult = new TtCheckResult();

		// 考试模式
		if (testPaperInfo.getPaperType().equals(R02.R02_1.value())) {
			// 权限检查
			checkResult = ttCommonService.checkStartupAuthority(PageId.K050041
					.value(), "K050041_1", C43.C43_4.value(), objectId);
		} else if (testPaperInfo.getPaperType().equals(R02.R02_2.value())) {
			// 权限检查
			checkResult = ttCommonService.checkStartupAuthority(PageId.K050041
					.value(), "K050041_2", C43.C43_5.value(), objectId);
		}

		return checkResult;
	}

	/**
	 * @param service
	 *            the k050041Service to set
	 */
	public void setK050041Service(K050041Service service) {
		k050041Service = service;
	}

	/**
	 * @param testingCommonService
	 *            the testingCommonService to set
	 */
	public void setTestingCommonService(
			TestingCommonService testingCommonService) {
		this.testingCommonService = testingCommonService;
	}

	/**
	 * @param ttCommonService
	 *            the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}

	/**
	 * @param sysCodeInfoService
	 *            the sysCodeInfoService to set
	 */
	public void setSysCodeInfoService(SysCodeInfoService sysCodeInfoService) {
		this.sysCodeInfoService = sysCodeInfoService;
	}

	/**
	 * @return the bigquestionInfo
	 */
	public PaperBigQuestionInfo getBigquestionInfo() {
		return bigquestionInfo;
	}

	/**
	 * @param bigquestionInfo
	 *            the bigquestionInfo to set
	 */
	public void setBigquestionInfo(PaperBigQuestionInfo bigquestionInfo) {
		this.bigquestionInfo = bigquestionInfo;
	}

	/**
	 * @return the questionDifficultyList
	 */
	public List<SysCodeInfo> getQuestionDifficultyList() {
		return questionDifficultyList;
	}

	/**
	 * @param questionDifficultyList
	 *            the questionDifficultyList to set
	 */
	public void setQuestionDifficultyList(
			List<SysCodeInfo> questionDifficultyList) {
		this.questionDifficultyList = questionDifficultyList;
	}

	/**
	 * @return the keywordList
	 */
	public List<String> getKeywordList() {
		return keywordList;
	}

	/**
	 * @param keywordList
	 *            the keywordList to set
	 */
	public void setKeywordList(List<String> keywordList) {
		this.keywordList = keywordList;
	}

	/**
	 * @return the modeKbn
	 */
	public Integer getModeKbn() {
		return modeKbn;
	}

	/**
	 * @param modeKbn
	 *            the modeKbn to set
	 */
	public void setModeKbn(Integer modeKbn) {
		this.modeKbn = modeKbn;
	}

	/**
	 * @return the bigquestionSerialNo
	 */
	public Integer getBigquestionSerialNo() {
		return bigquestionSerialNo;
	}

	/**
	 * @param bigquestionSerialNo
	 *            the bigquestionSerialNo to set
	 */
	public void setBigquestionSerialNo(Integer bigquestionSerialNo) {
		this.bigquestionSerialNo = bigquestionSerialNo;
	}

	/**
	 * @return the paperId
	 */
	public String getPaperId() {
		return paperId;
	}

	/**
	 * @param paperId
	 *            the paperId to set
	 */
	public void setPaperId(String paperId) {
		this.paperId = paperId;
	}

	/**
	 * @return the category1
	 */
	public Integer getCategory1() {
		return category1;
	}

	/**
	 * @param category1
	 *            the category1 to set
	 */
	public void setCategory1(Integer category1) {
		this.category1 = category1;
	}

	/**
	 * @return the category2
	 */
	public Integer getCategory2() {
		return category2;
	}

	/**
	 * @param category2
	 *            the category2 to set
	 */
	public void setCategory2(Integer category2) {
		this.category2 = category2;
	}

	/**
	 * @return the category3
	 */
	public Integer getCategory3() {
		return category3;
	}

	/**
	 * @param category3
	 *            the category3 to set
	 */
	public void setCategory3(Integer category3) {
		this.category3 = category3;
	}

	/**
	 * @return the sltCategory1Enable
	 */
	public String getSltCategory1Enable() {
		return sltCategory1Enable;
	}

	/**
	 * @param sltCategory1Enable
	 *            the sltCategory1Enable to set
	 */
	public void setSltCategory1Enable(String sltCategory1Enable) {
		this.sltCategory1Enable = sltCategory1Enable;
	}

	/**
	 * @return the sltCategory2Enable
	 */
	public String getSltCategory2Enable() {
		return sltCategory2Enable;
	}

	/**
	 * @param sltCategory2Enable
	 *            the sltCategory2Enable to set
	 */
	public void setSltCategory2Enable(String sltCategory2Enable) {
		this.sltCategory2Enable = sltCategory2Enable;
	}

	/**
	 * @return the sltCategory3Enable
	 */
	public String getSltCategory3Enable() {
		return sltCategory3Enable;
	}

	/**
	 * @param sltCategory3Enable
	 *            the sltCategory3Enable to set
	 */
	public void setSltCategory3Enable(String sltCategory3Enable) {
		this.sltCategory3Enable = sltCategory3Enable;
	}

	/**
	 * @return the itemNo
	 */
	public Integer getItemNo() {
		return itemNo;
	}

	/**
	 * @param itemNo
	 *            the itemNo to set
	 */
	public void setItemNo(Integer itemNo) {
		this.itemNo = itemNo;
	}

	/**
	 * @return the errorMessage
	 */
	public String getErrorMessage() {
		return errorMessage;
	}

	/**
	 * @param errorMessage
	 *            the errorMessage to set
	 */
	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}

	/**
	 * @return the questionIdJson
	 */
	public String getQuestionIdJson() {
		return questionIdJson;
	}

	/**
	 * @param questionIdJson
	 *            the questionIdJson to set
	 */
	public void setQuestionIdJson(String questionIdJson) {
		this.questionIdJson = questionIdJson;
	}

	/**
	 * @return the questionId
	 */
	public String getQuestionId() {
		return questionId;
	}

	/**
	 * @param questionId
	 *            the questionId to set
	 */
	public void setQuestionId(String questionId) {
		this.questionId = questionId;
	}

	/**
	 * @return the answerInfo
	 */
	public String getAnswerInfo() {
		return answerInfo;
	}

	/**
	 * @param answerInfo
	 *            the answerInfo to set
	 */
	public void setAnswerInfo(String answerInfo) {
		this.answerInfo = answerInfo;
	}

	/**
	 * @return the logInUser
	 */
	public String getLogInUser() {
		return logInUser;
	}

	/**
	 * @param logInUser
	 *            the logInUser to set
	 */
	public void setLogInUser(String logInUser) {
		this.logInUser = logInUser;
	}

	/**
	 * @return the category1Id
	 */
	public Integer getCategory1Id() {
		return category1Id;
	}

	/**
	 * @param category1Id the category1Id to set
	 */
	public void setCategory1Id(Integer category1Id) {
		this.category1Id = category1Id;
	}

	/**
	 * @return the category2Id
	 */
	public Integer getCategory2Id() {
		return category2Id;
	}

	/**
	 * @param category2Id the category2Id to set
	 */
	public void setCategory2Id(Integer category2Id) {
		this.category2Id = category2Id;
	}

	/**
	 * @return the category3Id
	 */
	public Integer getCategory3Id() {
		return category3Id;
	}

	/**
	 * @param category3Id the category3Id to set
	 */
	public void setCategory3Id(Integer category3Id) {
		this.category3Id = category3Id;
	}

}
