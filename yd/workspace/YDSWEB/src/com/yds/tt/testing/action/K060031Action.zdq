/*
 * @(#) K060031Action.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 考试子系统
 */

package com.yds.tt.testing.action;

import java.util.Date;

import net.sf.json.JSONException;
import net.sf.json.JSONObject;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.opensymphony.xwork2.interceptor.annotations.InputConfig;
import com.yds.base.action.AbstractBaseAction;
import com.yds.common.service.SessionConstants;
import com.yds.tt.manager.bean.TtCheckResult;
import com.yds.tt.testing.bean.ExamEmployeeInfo;
import com.yds.tt.testing.bean.ExamineInfo;
import com.yds.tt.testing.bean.K060031ExamPaperInfo;
import com.yds.tt.testing.service.K060021Service;
import com.yds.tt.testing.service.K060031Service;
import com.yds.util.service.Session;

/**
 * 考生答卷&试卷预览处理
 * 
 * @author sundefu
 * @version 1.00 2010/04/08
 */
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@Controller("k060031Action")
public class K060031Action extends AbstractBaseAction {

	private static final long serialVersionUID = -2533787116956755608L;
	/** 画面模式. */
	private Integer mode;
	/** 画面模式名称. */
	private String modeName;	
	/** 是否答题方式切换. */
	private Integer ifViewChange;
	/** 试卷Id. */
	private String paperId;
	/** 试卷版本号. */
	private Integer paperVersionNo;
	/** 考试Id. */
	private String examineId;
	/** 参加次数. */
	private Integer examineJoinTimes;
	/** 启动画面ID. */
	private String callScreenId;
 	/** 错误消息. */
	private String errorMessage; 
	/** 试卷信息Bean. */
	private K060031ExamPaperInfo k060031ExamPaperInfo;
	/** 试卷信息JSon串. */
	private String examPaperInfo;
	private K060031Service k060031Service;
	private Date systemTime; // 系统时间
	private Date examineStartTime; // 考试开始时间
	private K060021Service k060021Service;
	private ExamineInfo examineInfo;
	private String examineStatus; //0:开始考试；1:重新考试
	
	/**
	 * 构造方法
	 * 
	 */
	protected K060031Action() {
		k060031ExamPaperInfo = new K060031ExamPaperInfo();
	}
	
	/**
	 * 画面的初期显示（试卷编辑预览模式） 考生答卷&试卷预览
	 * 
	 * @return SUCCESS
	 */
	@InputConfig(resultName = "error")
	public String initEditViewMode() throws Exception {
		
		// 试卷编辑预览模式
		mode = K060031Service.EDITVIEWMODE;
		
		// 设置画面session情报
		Session.set(SessionConstants.TT_K060031_MODE, mode);
		Session.set(SessionConstants.TT_K060031_IFVIEWCHANGE, ifViewChange);
		// 不是答题方式切换时
		if (ifViewChange != 1) {
			k060031ExamPaperInfo.setPaperId(paperId);
			k060031ExamPaperInfo.setPaperVersionNo(paperVersionNo);
			Session.set(SessionConstants.TT_K060031_EXAMPAPERINFO, k060031ExamPaperInfo);
		}

		// 画面启动权限检查
		TtCheckResult ttCheckResult = k060031Service.initCheckProcess(mode);
		if (!ttCheckResult.getRetFlag()) {
			errorMessage = ttCheckResult.getRetMessage();
			return ERROR;
		}
		
		return SUCCESS;
	}

	/**
	 * 画面的初期显示（练习预览模式） 考生答卷&试卷预览
	 * 
	 * @return SUCCESS
	 */
	@InputConfig(resultName = "error")
	public String initPracticeViewMode() throws Exception {
		
		// 练习预览模式
		mode = K060031Service.PRACTICEVIEWMODE;
		// 设置画面session情报
		Session.set(SessionConstants.TT_K060031_MODE, mode);
		Session.set(SessionConstants.TT_K060031_IFVIEWCHANGE, ifViewChange);
		// 不是答题方式切换时
		if (ifViewChange != 1) {
			k060031ExamPaperInfo.setPaperId(paperId);
			Session.set(SessionConstants.TT_K060031_EXAMPAPERINFO, k060031ExamPaperInfo);
		}
		
		// 画面启动权限检查
		TtCheckResult ttCheckResult = k060031Service.initCheckProcess(mode);
		if (!ttCheckResult.getRetFlag()) {
			errorMessage = ttCheckResult.getRetMessage();
			return ERROR;
		}
		
		return SUCCESS;
	}

	/**
	 * 画面的初期显示（参加练习模式） 考生答卷&试卷预览
	 * 
	 * @return SUCCESS
	 */
	@InputConfig(resultName = "error")
	public String initPracticeMode() throws Exception {
		
		// 参加练习模式
		mode = K060031Service.PRACTICEMODE;
		// 设置画面session情报
		Session.set(SessionConstants.TT_K060031_MODE, mode);
		Session.set(SessionConstants.TT_K060031_IFVIEWCHANGE, ifViewChange);
		// 不是答题方式切换时
		if (ifViewChange != 1) {
			k060031ExamPaperInfo.setPaperId(paperId);
			Session.set(SessionConstants.TT_K060031_EXAMPAPERINFO, k060031ExamPaperInfo);			
		}
		
		return SUCCESS;
	}
	
	/**
	 * 画面的初期显示（参加考试模式） 考生答卷&试卷预览
	 * 
	 * @return SUCCESS
	 */
	@InputConfig(resultName = "error")
	public String initTestMode() throws Exception {
		
		// 参加考试模式
		mode = K060031Service.TESTMODE;
		// 设置画面session情报
		Session.set(SessionConstants.TT_K060031_MODE, mode);
		Session.set(SessionConstants.TT_K060031_IFVIEWCHANGE, ifViewChange);
		// 不是答题方式切换时
		if (ifViewChange != 1) {
			ExamEmployeeInfo examEmployeeInfo = k060021Service.getEmpExamineStatus(examineId);
			k060031ExamPaperInfo.setExamineId(examineId);
			k060031ExamPaperInfo.setExamineJoinTimes(examEmployeeInfo.getExamineJoinTimes());
			
			Session.set(SessionConstants.TT_K060031_EXAMPAPERINFO, k060031ExamPaperInfo);
		}

		// 画面启动权限检查
		TtCheckResult ttCheckResult = k060031Service.initCheckProcess(mode);
		if (!ttCheckResult.getRetFlag()) {
			errorMessage = ttCheckResult.getRetMessage();
			return ERROR;
		}
		
		return SUCCESS;
	}
	
	/**
	 * 画面的初期显示（试卷生成预览模式） 考生答卷&试卷预览
	 * 
	 * @return SUCCESS
	 */
	@InputConfig(resultName = "error")
	public String initPaperCreateMode() throws Exception {
		
		// 试卷生成预览模式
		mode = K060031Service.PAPERCREATEMODE;
		
		// 画面启动权限检查
		TtCheckResult ttCheckResult = k060031Service.initCheckProcess(mode);
		if (!ttCheckResult.getRetFlag()) {
			errorMessage = ttCheckResult.getRetMessage();
			return ERROR;
		}
		
		// 设置画面session情报
		Session.set(SessionConstants.TT_K060031_MODE, mode);
		Session.set(SessionConstants.TT_K060031_IFVIEWCHANGE, ifViewChange);
		
		return SUCCESS;
	}
	
	/**
	 * 画面的初期显示（试卷生成预览模式） 考生答卷&试卷预览
	 * 
	 * @return SUCCESS
	 */
	public String createWholePaperDetails(){
		
		System.out.println("Action :createWholePaperDetails Start");
		// 取得试卷试题信息
		k060031ExamPaperInfo = k060031Service.getPaperDetails();
		// 设置画面session情报
		Session.set(SessionConstants.TT_K060031_EXAMPAPERINFO, k060031ExamPaperInfo);
		
		// 将试卷信息转化为JSon格式
		// TODO 验证试卷内数据是否整合捕捉异常
		try {
			JSONObject json = JSONObject.fromObject(k060031ExamPaperInfo);
			examPaperInfo = json.toString();
		} catch (JSONException e) {
			e.printStackTrace();
		}
		
		System.out.println("examPaperInfo :" + examPaperInfo);
		System.out.println("Action :createWholePaperDetails End");
		return SUCCESS;
	}
	
	/**
	 * 画面的初期显示（答题方式切换） 考生答卷&试卷预览
	 * 
	 * @return SUCCESS
	 */
	public String changeMode(){
		// 取得画面模式
		mode = (Integer)Session.get(SessionConstants.TT_K060031_MODE);
		modeName = K060031Service.MODE_NAMES.values()[mode - 1].toString();
		
		return SUCCESS;
	}
	
	/**
	 * 初期化（试卷编辑预览）校验
	 * 
	 */
	public void validateInitEditViewMode() throws Exception {
		// 是否答题方式切换未传递
		if (ifViewChange == null || ifViewChange.toString().isEmpty()) {
			errorMessage = "是否答题方式切换未传递！";
			this.addFieldError("ifViewChange", errorMessage);
		}
		// 不是答题方式切换时
		if (ifViewChange != 1) {
			// 试卷Id未传递
			if (paperId == null || paperId.isEmpty()) {
				errorMessage = "试卷Id未传递！";
				this.addFieldError("paperId", errorMessage);
			}
			// 试卷版本号未传递
			if (paperVersionNo == null || paperVersionNo.toString().isEmpty()) {
				errorMessage = "试卷版本号未传递！";
				this.addFieldError("paperVersionNo", errorMessage);
			}
		}
	}
	
	/**
	 * 初期化（练习预览）校验
	 * 
	 */
	public void validateInitPracticeViewMode() throws Exception {
		// 是否答题方式切换未传递
		if (ifViewChange == null || ifViewChange.toString().isEmpty()) {
			errorMessage = "是否答题方式切换未传递！";
			this.addFieldError("ifViewChange", errorMessage);
		}
		// 不是答题方式切换时
		if (ifViewChange != 1) {
			// 试卷Id未传递
			if (paperId == null || paperId.isEmpty()) {
				errorMessage = "试卷Id未传递！";
				this.addFieldError("paperId", errorMessage);
			}
		}
	}
	
	/**
	 * 初期化（参加练习）校验
	 * 
	 */
	public void validateInitPracticeMode() throws Exception {
		// 是否答题方式切换未传递
		if (ifViewChange == null || ifViewChange.toString().isEmpty()) {
			errorMessage = "是否答题方式切换未传递！";
			this.addFieldError("ifViewChange", errorMessage);
		}
		// 不是答题方式切换时
		if (ifViewChange != 1) {
			// 试卷Id未传递
			if (paperId == null || paperId.isEmpty()) {
				errorMessage = "试卷Id未传递！";
				this.addFieldError("paperId", errorMessage);
			}
		}
	}
	
	/**
	 * 初期化（参加考试）校验
	 * 
	 */
	public void validateInitTestMode() throws Exception {
		// 是否答题方式切换未传递
		if (ifViewChange == null || ifViewChange.toString().isEmpty()) {
			errorMessage = "是否答题方式切换未传递！";
			this.addFieldError("ifViewChange", errorMessage);
		}
		// 不是答题方式切换时
		if (ifViewChange != 1) {
			// 考试Id未传递
			if (examineId == null || examineId.isEmpty()) {
				errorMessage = "考试Id未传递！";
				this.addFieldError("examineId", errorMessage);
			}
			// 参加次数未传递
			if (examineJoinTimes == null || examineJoinTimes.toString().isEmpty()) {
				errorMessage = "参加次数未传递！";
				this.addFieldError("examineJoinTimes", errorMessage);
			}
		}
	}
	
	/**
	 * 初期显示
	 * 
	 * @return SUCCESS
	 */	
	public String initWaitPage() {
		
		// 系统时间取得
		this.systemTime = new Date();
		
		// 考试基本信息取得
		this.examineInfo = k060021Service.getTestInfo(examineId);
		
		// 考试开始时间取得
		examineStartTime = examineInfo.getExamineStartTime();

		return SUCCESS;
	}
	
	/**
	 * 系统时间取得
	 * 
	 * @return SUCCESS
	 */	
	public String obtainSystemTime() {
		
		// 系统时间取得
		this.systemTime = new Date();
		return SUCCESS;
	}
	
	/**
	 * 初期化（试卷生成预览）校验
	 * 
	 */
	public void validateInitPaperCreateMode() throws Exception {
		// 是否答题方式切换未传递
		if (ifViewChange == null || ifViewChange.toString().isEmpty()) {
			errorMessage = "是否答题方式切换未传递！";
			this.addFieldError("ifViewChange", errorMessage);
		}
	}
	
	/**
	 * @return the mode
	 */
	public Integer getMode() {
		return mode;
	}

	/**
	 * @param mode the mode to set
	 */
	public void setMode(Integer mode) {
		this.mode = mode;
	}

	/**
	 * @return the ifViewChange
	 */
	public Integer getIfViewChange() {
		return ifViewChange;
	}

	/**
	 * @param ifViewChange the ifViewChange to set
	 */
	public void setIfViewChange(Integer ifViewChange) {
		this.ifViewChange = ifViewChange;
	}

	/**
	 * @return the paperId
	 */
	public String getPaperId() {
		return paperId;
	}

	/**
	 * @param paperId the paperId to set
	 */
	public void setPaperId(String paperId) {
		this.paperId = paperId;
	}

	/**
	 * @return the paperVersionNo
	 */
	public Integer getPaperVersionNo() {
		return paperVersionNo;
	}

	/**
	 * @param paperVersionNo the paperVersionNo to set
	 */
	public void setPaperVersionNo(Integer paperVersionNo) {
		this.paperVersionNo = paperVersionNo;
	}

	/**
	 * @return the examineId
	 */
	public String getExamineId() {
		return examineId;
	}

	/**
	 * @param examineId the examineId to set
	 */
	public void setExamineId(String examineId) {
		this.examineId = examineId;
	}

	/**
	 * @return the examineJoinTimes
	 */
	public Integer getExamineJoinTimes() {
		return examineJoinTimes;
	}

	/**
	 * @param examineJoinTimes the examineJoinTimes to set
	 */
	public void setExamineJoinTimes(Integer examineJoinTimes) {
		this.examineJoinTimes = examineJoinTimes;
	}

	/**
	 * @return the callScreenId
	 */
	public String getCallScreenId() {
		return callScreenId;
	}

	/**
	 * @param callScreenId the callScreenId to set
	 */
	public void setCallScreenId(String callScreenId) {
		this.callScreenId = callScreenId;
	}

	/**
	 * @return the errorMessage
	 */
	public String getErrorMessage() {
		return errorMessage;
	}

	/**
	 * @param errorMessage the errorMessage to set
	 */
	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}

	/**
	 * @return the k060031Service
	 */
	public K060031Service getK060031Service() {
		return k060031Service;
	}

	/**
	 * @param service the k060031Service to set
	 */
	public void setK060031Service(K060031Service service) {
		k060031Service = service;
	}

	/**
	 * @return the k060031ExamPaperInfo
	 */
	public K060031ExamPaperInfo getK060031ExamPaperInfo() {
		return k060031ExamPaperInfo;
	}

	/**
	 * @param examPaperInfo the k060031ExamPaperInfo to set
	 */
	public void setK060031ExamPaperInfo(K060031ExamPaperInfo k060031ExamPaperInfo) {
		this.k060031ExamPaperInfo = k060031ExamPaperInfo;
	}

	/**
	 * @return the examPaperInfo
	 */
	public String getExamPaperInfo() {
		return examPaperInfo;
	}

	/**
	 * @param examPaperInfo the examPaperInfo to set
	 */
	public void setExamPaperInfo(String examPaperInfo) {
		this.examPaperInfo = examPaperInfo;
	}

	/**
	 * @param modeName the modeName to set
	 */
	public void setModeName(String modeName) {
		this.modeName = modeName;
	}

	/**
	 * @return the modeName
	 */
	public String getModeName() {
		return modeName;
	}

	/**
	 * @return the systemTime
	 */
	public Date getSystemTime() {
		return systemTime;
	}

	/**
	 * @param systemTime the systemTime to set
	 */
	public void setSystemTime(Date systemTime) {
		this.systemTime = systemTime;
	}

	/**
	 * @return the examineStartTime
	 */
	public Date getExamineStartTime() {
		return examineStartTime;
	}

	/**
	 * @param examineStartTime the examineStartTime to set
	 */
	public void setExamineStartTime(Date examineStartTime) {
		this.examineStartTime = examineStartTime;
	}

	/**
	 * @return the examineInfo
	 */
	public ExamineInfo getExamineInfo() {
		return examineInfo;
	}

	/**
	 * @param examineInfo the examineInfo to set
	 */
	public void setExamineInfo(ExamineInfo examineInfo) {
		this.examineInfo = examineInfo;
	}

	/**
	 * @param service the k060021Service to set
	 */
	public void setK060021Service(K060021Service service) {
		k060021Service = service;
	}

	public String getExamineStatus() {
		return examineStatus;
	}

	public void setExamineStatus(String examineStatus) {
		this.examineStatus = examineStatus;
	}
	
}
