/*
 * @(#)K060051ServiceImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 教育子系统
 */

/**
 * 考试信息检索
 * 
 * @author wangqingzhu
 * @version 1.00 2010/03/30
 */
package com.yds.tt.testing.service.impl;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.yds.base.service.AbstractBaseService;
import com.yds.common.bean.SysCodeInfo;

import com.yds.tt.manager.bean.MessageReminding;
import com.yds.tt.manager.dao.TtCommonDao;
import com.yds.tt.manager.service.AutoMarkedService;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtCommonUtil;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.manager.service.TtExclusiveException;
import com.yds.tt.testing.bean.ExamEmployeeInfo;
import com.yds.tt.testing.bean.ExamineInfo;
import com.yds.tt.testing.bean.K060051SearchInfo;
import com.yds.tt.testing.bean.TestEmployeeAnswerInfo;
import com.yds.tt.testing.bean.TestResultsInfo;
import com.yds.tt.testing.dao.K060051Dao;
import com.yds.tt.testing.service.K060051Service;
import com.yds.util.service.DateUtil;

/**
 * @see com.yds.tt.testing.service.K060051Service
 */
@Service("k060051Service")
public class K060051ServiceImpl extends AbstractBaseService implements
		K060051Service {

	/** 正常Flg. */
	private static final String SUCCESSFLG = "1";
	/** 未结束Flg. */
	private static final String NOENDFLG = "2";
	/** 字符串链接符. */
	private static final String CONNECTOR2 = ",";
	/** 年月日. */
	private static final String YYYYMMDD = "yyyy-MM-dd";
	/** 时分秒. */
	private static final String HHMMSS = "HH:mm:ss";
	/** 年月日时分秒. */
	private static final String YYYYMMDDHHMMSS = "yyyy-MM-dd HH:mm:ss";
	/** 考试之前. */
	private static final Integer BEFOREFLG = 1;
	/** 考试之后. */
	private static final Integer AFTERFLG = 0;
	/** 等级数量1. */
	private static final int KONM1 = 1;
	/** 等级数量2. */
	private static final int KONM2 = 2;
	/** 等级数量3. */
	private static final int KONM3 = 3;
	/** 等级数量4. */
	private static final int KONM4 = 4;
	/** 等级数量5. */
	private static final int KONM5 = 5;
	
	/** tt共通Dao. */
	private TtCommonDao ttCommonDao;
	/** tt共通Service. */
	private TtCommonService ttCommonService;
	/** 自动评分处理. */
	private AutoMarkedService autoMarkedService;
	/** 取得考试信息Dao. */
	private K060051Dao k060051Dao;
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ExamineInfo> getK060051EditInfo(K060051SearchInfo param,
			int offset, int perCounts) {

		if (param == null) {
			param = new K060051SearchInfo();
		}
		param.setUserId(TtCommonUtil.getLoginUserId());


		// 分类下拉框用户权限的设定
		param.setCategoryInfolist(ttCommonService.getCategoryCondition(TtCommonUtil.getLoginUserId(), 2, 0, 0, 0));

		// 编辑考试一览信息的取得
		List<ExamineInfo> editInfo = k060051Dao.getK060051EditInfo(param,
				offset, perCounts);

		return editInfo;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long getEditTC(K060051SearchInfo param) {
		if (param == null) {
			param = new K060051SearchInfo();
		}
		param.setUserId(TtCommonUtil.getLoginUserId());

		// 分类下拉框用户权限的设定
		param.setCategoryInfolist(ttCommonService.getCategoryCondition(TtCommonUtil.getLoginUserId(), 2, 0, 0, 0));

		return k060051Dao.getEditTC(param);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ExamineInfo> getK060051ImplementInfo(K060051SearchInfo param,
			int offset, int perCounts) {

		List<ExamineInfo> resultimpl = new ArrayList<ExamineInfo>();

		if (param == null) {
			param = new K060051SearchInfo();
		}
		param.setUserId(TtCommonUtil.getLoginUserId());

		// 实施考试一览的信息取得
		List<ExamineInfo> implInfo = k060051Dao.getK060051ImplementInfo(param,
				offset, perCounts);
		Iterator<ExamineInfo> iter = implInfo.iterator();

		// 取得当前时间
		String nowtime = DateUtil.getDateTime();
		ExamineInfo k651Info = null;
		String getDate = null;
		String getTime = null;
		String dateTime = null;
		if (implInfo.size() > 0) {
			while(iter.hasNext()){
				k651Info = iter.next();

				// 把数据库中取出的日期和时刻转化成String("yyyy-MM-dd HH:mm:ss")
				StringBuffer sb = new StringBuffer();
				try {
					getDate = DateUtil.setDateFormat(k651Info
							.getExamineStartDate(), YYYYMMDD);
					getTime = DateUtil.setDateFormat(k651Info
							.getExamineStartDate(), HHMMSS);
					k651Info.setUpdateTimepa(DateUtil.setDateFormat(k651Info
							.getUpdateTime(), YYYYMMDDHHMMSS));

				} catch (ParseException e) {
					e.printStackTrace();
				}
				sb.append(getDate);
				sb.append(" ");
				sb.append(getTime);
				dateTime = sb.toString();

				// 判断是否是考试开始之前
				if (nowtime.compareTo(dateTime) >= 0) {
					k651Info.setTimeFlg(AFTERFLG);
				} else {
					k651Info.setTimeFlg(BEFOREFLG);
				}

				resultimpl.add(k651Info);
			}
		}

		return resultimpl;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long getImplementTC(K060051SearchInfo param) {
		if (null == param) {
			param = new K060051SearchInfo();
		}
		param.setUserId(TtCommonUtil.getLoginUserId());

		// 操作日期to日期加一天
		if (null != param && null != param.getExamineEndDate()) {

			try {
				String strDate = DateUtil.setDateFormat(param
						.getExamineEndDate(), YYYYMMDDHHMMSS);
				String toTime = DateUtil.dateAdd(strDate, 1, DateUtil.DAY);
				param.setExamineEndDate(DateUtil.parse(toTime));
			} catch (ParseException e) {

				e.printStackTrace();
			}
		}
		return k060051Dao.getImplementTC(param);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<SysCodeInfo> getExamstus() {
		List<SysCodeInfo> examstus = k060051Dao.getExamstus();
		if (examstus.size() == 0) {
			return new ArrayList<SysCodeInfo>();
		}
		return examstus;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void updateExmRelatedInfo(String examineId, String updateTime,
			int examineStatus) {

		// 取得更新时间
		Date dbupdateTime = k060051Dao.getExamineInfoById(examineId)
				.getUpdateTime();

		// 时间戳检查
		if (updateTime == null || !dbupdateTime.equals(DateUtil.parse(updateTime))) {
			throw new TtExclusiveException();
		}

		// 考试状态是<成绩已发布>,则更新考试员工信息表
		if (examineStatus == TtConstants.R12.R12_11.value()) {
			ExamEmployeeInfo examEmployeeInfo = new ExamEmployeeInfo();
			examEmployeeInfo.setExamineId(examineId);
			examEmployeeInfo.setEmpExamStatus(TtConstants.R12.R12_7.value());
			k060051Dao.updateExamineEmployee(examEmployeeInfo);
		}

		// 更新考试信息
		ExamineInfo examineInfo = new ExamineInfo();
		examineInfo.setExamineId(examineId);
		examineInfo.setExamineStatus(TtConstants.R12.R12_9.value());
		examineInfo.setUpdateUserId(TtCommonUtil.getLoginUserId());
		k060051Dao.updateExamineInfo(examineInfo);

	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamineInfo getExamineInfoById(String examineId) {
		return k060051Dao.getExamineInfoById(examineId);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String updateExamineAnswer(String examineId, String updateTime) {

		// 自动评分处理(共通方法)
		autoMarkedService.obtainUserAnswerInfo(1, null, examineId, null, null);
		
		if (k060051Dao.getCheckGradeCT(examineId) > 0) {
			return NOENDFLG;
		}

		// 取得更新时间
		Date dbupdateTime = k060051Dao.getExamineInfoById(examineId)
				.getUpdateTime();

		// 时间戳检查
		if (updateTime == null || !dbupdateTime.equals(DateUtil.parse(updateTime))) {
			throw new TtExclusiveException();
		}

		// 计算并更新员工个人组合题成绩
		countupdateassociez(examineId);

		// 计算并更新员工个人成绩
		couontupdatepersonal(examineId);

		// 取得考试标志
		Integer examineflg = k060051Dao.getExamineInfoById(examineId)
				.getExamineFlg();

		// 更新考试信息
		ExamineInfo examineInfo = new ExamineInfo();
		examineInfo.setExamineId(examineId);
		examineInfo.setExamineStatus(TtConstants.R12.R12_10.value());
		examineInfo.setUpdateUserId(TtCommonUtil.getLoginUserId());
		k060051Dao.updateExamineInfo(examineInfo);

		// 考试成绩汇总和取得提醒消息
		String awokeInfo = examineGradeGather(examineId, examineflg);
		if (awokeInfo != null) {
			return awokeInfo;
		}

		return SUCCESSFLG;
	}

	/**
	 * 计算并更新员工个人组合题成绩
	 * 
	 * @param examineId
	 *            考试ID
	 */
	private void countupdateassociez(String examineId) {

		TestEmployeeAnswerInfo updateEmployeeAnswer = new TestEmployeeAnswerInfo();

		// 合算组合题分数
		List<TestEmployeeAnswerInfo> getAssociez = k060051Dao
				.getAssociezInfo(examineId);

		updateEmployeeAnswer.setExamineId(examineId);
		if (getAssociez.size() > 0) {
			for (int i = 0; i < getAssociez.size(); i++) {
				updateEmployeeAnswer.setQuestionId(getAssociez.get(i)
						.getQuestionId());
				updateEmployeeAnswer.setEmployeesId(getAssociez.get(i)
						.getEmployeesId());
				updateEmployeeAnswer.setQuestionPoint(getAssociez.get(i)
						.getQuestionPoint());
				updateEmployeeAnswer.setExamineJoinTimes(getAssociez.get(i)
						.getExamineJoinTimes());

				// 更新考试员工答卷信息(组合题更新)
				k060051Dao.updateEmployeeAnswerInfo(updateEmployeeAnswer);
			}
		}
	}

	/**
	 * 计算并更新员工个人成绩
	 * 
	 * @param examineId
	 *            考试ID
	 */
	private void couontupdatepersonal(String examineId) {

		// 合算个人成绩
		List<TestEmployeeAnswerInfo> getpersonal = k060051Dao
				.getPersonalInfo(examineId);

		ExamEmployeeInfo examEmployeeInfo = new ExamEmployeeInfo();
		
		for(TestEmployeeAnswerInfo teaInfo:getpersonal){

			// 取得考试的评定等级
			ExamineInfo ratingsInfo = k060051Dao.getRatings(examineId);

			// 评定等级数量
			int resultLevelNum = ratingsInfo.getResultlevelNum();

			String resultlevelId = null;

			// 取得评定等级的ID
			String resultlevel1Id = ratingsInfo.getResultlevel1Id();
			String resultlevel2Id = ratingsInfo.getResultlevel2Id();
			String resultlevel3Id = ratingsInfo.getResultlevel3Id();
			String resultlevel4Id = ratingsInfo.getResultlevel4Id();
			String resultlevel5Id = ratingsInfo.getResultlevel5Id();

			// 取得评定等级的分数
			int resultlevel1Score = ratingsInfo.getResultlevel1Score();
			int resultlevel2Score = ratingsInfo.getResultlevel2Score();
			int resultlevel3Score = 0;
			if (resultLevelNum > 2) {
				resultlevel3Score = ratingsInfo.getResultlevel3Score();
			}
			int resultlevel4Score = 0;
			if (resultLevelNum > 3) {
				resultlevel4Score = ratingsInfo.getResultlevel4Score();
			}
			int resultlevel5Score = 0;
			if (resultLevelNum > 4) {
				resultlevel5Score = ratingsInfo.getResultlevel5Score();
			}

			// 个人评定等级判断
			int personalScore = teaInfo.getQuestionPoint();
			switch (resultLevelNum) {
			case KONM1:
				resultlevelId = resultlevel1Id;
				break;
			case KONM2:
				if (personalScore >= resultlevel1Score)	{
					resultlevelId = resultlevel1Id;
				}
				if (personalScore < resultlevel2Score){
					resultlevelId = resultlevel2Id;
				}
				break;
			case KONM3:
				if (personalScore >= resultlevel1Score){
					resultlevelId = resultlevel1Id;
				}
				if (personalScore >= resultlevel2Score
						&& personalScore < resultlevel1Score) {
					resultlevelId = resultlevel2Id;
				}
				if (personalScore < resultlevel3Score) {
					resultlevelId = resultlevel3Id;
				}
				break;
			case KONM4:
				if (personalScore >= resultlevel1Score) {
					resultlevelId = resultlevel1Id;
				}
				if (personalScore >= resultlevel2Score
						&& personalScore < resultlevel1Score) {
					resultlevelId = resultlevel2Id;
				}
				if (personalScore >= resultlevel3Score
						&& personalScore < resultlevel2Score){
					resultlevelId = resultlevel3Id;	
				}
				if (personalScore < resultlevel4Score){
					resultlevelId = resultlevel4Id;
				}
				break;
			case KONM5:
				if (personalScore >= resultlevel1Score){
					resultlevelId = resultlevel1Id;
				}
					
				if (personalScore >= resultlevel2Score
						&& personalScore < resultlevel1Score){
					resultlevelId = resultlevel2Id;}
				if (personalScore >= resultlevel3Score
						&& personalScore < resultlevel2Score){
					resultlevelId = resultlevel3Id;}
				if (personalScore >= resultlevel4Score
						&& personalScore < resultlevel3Score){
					resultlevelId = resultlevel4Id;}
				if (personalScore < resultlevel5Score){
					resultlevelId = resultlevel5Id;}
				break;
			default:
				break;
			}

			// 个人评定等级
			examEmployeeInfo.setResultlevelId(resultlevelId);

			// 个人是否通过考试判断
			if (resultlevelId != null) {
				if (resultlevelId.compareTo(ratingsInfo.getPassexamineLevel()) <= 0) {
					examEmployeeInfo.setPassexamineFlg(TtConstants.C21.C21_1
							.value());
				} else {
					examEmployeeInfo.setPassexamineFlg(TtConstants.C21.C21_2
							.value());
				}
			}

			// 总分
			examEmployeeInfo.setScore(teaInfo.getQuestionPoint());

			// 员工ID
			examEmployeeInfo
					.setEmployeesId(teaInfo.getEmployeesId());

			// 考试ID
			examEmployeeInfo.setExamineId(examineId);

			examEmployeeInfo.setExamineJoinTimes(teaInfo.getExamineJoinTimes());

			k060051Dao.updatexamEmployee(examEmployeeInfo);
		}
	}

	/**
	 * 考试成绩汇总和取得提醒消息
	 * 
	 * @param examineId
	 *            考试ID
	 */
	private String examineGradeGather(String examineId, Integer examineFlg) {

		// 取得考试员工汇总信息
		TestResultsInfo testResultsInfo = k060051Dao
				.getExamEmployeeTotal(examineId);

		// 消息
		String promptmessage = null;

		// 员工得分总和
		if (testResultsInfo != null) {
			BigDecimal totalScore = BigDecimal.valueOf(testResultsInfo
					.getTotalScore());

			// 参加人数
			BigDecimal joinPassExamineNum = BigDecimal.valueOf(testResultsInfo
					.getJoinExamineNum());
			BigDecimal averageScore = totalScore.divide(joinPassExamineNum, 2);
			// 平均分
			testResultsInfo.setAverageScore(averageScore);

			testResultsInfo.setExamineId(examineId);

			// 取考试成绩汇总表信息
			int count = k060051Dao.getCountgather(examineId);

			if (count > 0) {
				// 更新考试成绩汇总信息
				k060051Dao.updateCountgather(testResultsInfo);
			} else {
				// 插入考试成绩汇总信息
				k060051Dao.insertCountgather(testResultsInfo);
			}

			// 评分全部结束并且考试是试考试
			if (TtConstants.C08.C08_3.value() == examineFlg) {
				BigDecimal totalTime = BigDecimal.valueOf(testResultsInfo
						.getTotalTime());

				BigDecimal averageTime = totalTime
						.divide(joinPassExamineNum, 2);
				SimpleDateFormat sdf = new SimpleDateFormat(HHMMSS);
				Date d = new Date(averageTime.longValue());
				promptmessage = sdf.format(d);
				promptmessage = promptmessage.concat(CONNECTOR2);
				promptmessage = promptmessage.concat(averageScore.toString());
			}
		}

		return promptmessage;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void updateExamineEmployee(String examineId, String updateTime) {

		// 取得更新时间
		Date dbupdateTime = k060051Dao.getExamineInfoById(examineId)
				.getUpdateTime();

		// 时间戳检查
		if (updateTime == null || !dbupdateTime.equals(DateUtil.parse(updateTime))) {
			throw new TtExclusiveException();
		}
		
		String examineName = k060051Dao.getExamineInfoById(examineId)
				.getExamineName();

		// 更新考试信息
		ExamineInfo examineInfo = new ExamineInfo();
		examineInfo.setExamineId(examineId);
		examineInfo.setExamineStatus(TtConstants.R12.R12_11.value());

		examineInfo.setUpdateUserId(TtCommonUtil.getLoginUserId());
		k060051Dao.updateExamineInfo(examineInfo);

		// 更新考试员工信息表
		ExamEmployeeInfo examEmployeeInfo = new ExamEmployeeInfo();
		examEmployeeInfo.setExamineId(examineId);
		examEmployeeInfo.setEmpExamStatus(TtConstants.R12.R12_8.value());
		examEmployeeInfo.setPaperId(examineId);
		k060051Dao.updateExamineEmployee(examEmployeeInfo);

		// 信息表更新
		MessageReminding  messageInfo = new MessageReminding();	
		
		// 提醒信息表.消息ID
		messageInfo.setInformationId(ttCommonService.getSequence(TtConstants.SEQID.Information));

		// 消息模式 = <考试成绩发布>
		messageInfo.setMode(String.valueOf(TtConstants.R13.R13_8.value()));
		// 消息参数
		messageInfo.setParameter(examineId);
		// 提醒内容
		messageInfo.setContent(propMgr.getMessage("yds.tt.remind.KSY01",examineName));
		// 最大时间
		messageInfo.setLosetime(TtCommonUtil.getMaxDate());		
		// 消息FLG
		messageInfo.setInformationFlg(0);
		// 参加本次考试并且成绩未发布的员工的员工ID
		List<Map<String, String>> mapEmpList = k060051Dao.getEmployeeId(examineId);
		for (Map<String, String> mapSt : mapEmpList) {
			String empId = mapSt.get("employeesId");
			messageInfo.setUserId(empId);
			// 取得该员工提醒消息条数
			int countId = k060051Dao.getCountEmp(messageInfo);
			// 如果该消息存在，更新失效时间
			if(countId > 0){
				k060051Dao.updateLosetime(messageInfo);
			}
			ttCommonDao.insertMessageReminding(messageInfo);
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<Map<String, String>> getMarkingEmpId(){
		
		return k060051Dao.getMarkingEmpId();
	}

	/**
	 * @return the k060051Dao
	 */
	public K060051Dao getK060051Dao() {
		return k060051Dao;
	}

	/**
	 * @param dao
	 *            the k060051Dao to set
	 */
	public void setK060051Dao(K060051Dao dao) {
		k060051Dao = dao;
	}

	/**
	 * @return the ttCommonService
	 */
	public TtCommonService getTtCommonService() {
		return ttCommonService;
	}

	/**
	 * @param ttCommonService
	 *            the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}

	/**
	 * @return the autoMarkedService
	 */
	public AutoMarkedService getAutoMarkedService() {
		return autoMarkedService;
	}

	/**
	 * @param autoMarkedService the autoMarkedService to set
	 */
	public void setAutoMarkedService(AutoMarkedService autoMarkedService) {
		this.autoMarkedService = autoMarkedService;
	}

	/**
	 * @return the ttCommonDao
	 */
	public TtCommonDao getTtCommonDao() {
		return ttCommonDao;
	}

	/**
	 * @param ttCommonDao the ttCommonDao to set
	 */
	public void setTtCommonDao(TtCommonDao ttCommonDao) {
		this.ttCommonDao = ttCommonDao;
	}

}
