/*
 * @(#) K050031ServiceImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 考试子系统
 */
package com.yds.tt.testing.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;

import com.yds.base.service.AbstractBaseService;
import com.yds.common.service.SessionConstants;
import com.yds.common.service.SysCodeInfoService;
import com.yds.tt.manager.bean.MessageReminding;
import com.yds.tt.manager.dao.TtCommonDao;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtCommonUtil;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.manager.service.TtExclusiveException;
import com.yds.tt.manager.service.TtConstants.C06;
import com.yds.tt.manager.service.TtConstants.PageId;
import com.yds.tt.manager.service.TtConstants.R10;
import com.yds.tt.manager.service.TtConstants.R11;
import com.yds.tt.manager.service.TtConstants.REMIND_MODE;
import com.yds.tt.testing.bean.PaperBigQuestionInfo;
import com.yds.tt.testing.bean.PaperRandomQuestionInfo;
import com.yds.tt.testing.bean.PaperStableQuestionInfo;
import com.yds.tt.testing.bean.TestPaperInfo;
import com.yds.tt.testing.dao.K050031Dao;
import com.yds.tt.testing.service.K050031Service;
import com.yds.util.service.Session;

/**
 * @see com.yds.tt.testing.service.K050031Service
 */
@Service("k050031Service")
public class K050031ServiceImpl extends AbstractBaseService implements
		K050031Service {

	private K050031Dao k050031Dao;
	private TtCommonDao ttCommonDao;
	private TtCommonService ttCommonService;
	private SysCodeInfoService sysCodeInfoService;

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TestPaperInfo getPaperInfo(String paperId, int paperType) {

		// 设置检索条件
		TestPaperInfo itemTestPaperInfo = new TestPaperInfo();
		itemTestPaperInfo.setPaperId(paperId);
		itemTestPaperInfo.setPaperType(paperType);
		// 试卷信息检索结果
		TestPaperInfo resultTestPaperInfo = k050031Dao
				.getPaperInfo(itemTestPaperInfo);

		if (null != resultTestPaperInfo) {
			// 最新时间戳保存
			ttCommonService.setTimestamp(PageId.K050031, resultTestPaperInfo
					.getUpdateTime());
		}

		return resultTestPaperInfo;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<PaperBigQuestionInfo> getBigQuestionInfos(TestPaperInfo tpInfo) {

		// 定义大题最大编号
		int maxSerialNo = 0;
		// 获得试卷大题信息
		List<PaperBigQuestionInfo> resultList = k050031Dao
				.getPaperBigQuestionInfos(tpInfo);

		// 试卷大题数量为0的情况
		if (null == resultList || 0 == resultList.size()) {
			this.setSessionBigQuestionMaxSerialNo(maxSerialNo);
			return new ArrayList<PaperBigQuestionInfo>();
		}

		// 获得List中最大大题编号
		for (PaperBigQuestionInfo pbqInfo : resultList) {

			// 设定大题最大编号
			int serialNo = pbqInfo.getBigquestionSerialNo().intValue();
			if (maxSerialNo < serialNo) {
				maxSerialNo = serialNo;
			}
			// 向session中设定最大大题编号
			this.setSessionBigQuestionMaxSerialNo(maxSerialNo);

			// 检索大题详细信息
			if (R11.R11_1.value() == pbqInfo.getBigquestionType()) {
				pbqInfo.setStableQueInfoList(k050031Dao
						.getPaperStableQuestionInfos(pbqInfo));
			} else if (R11.R11_2.value() == pbqInfo.getBigquestionType()) {
				pbqInfo.setRandomQueInfoList(k050031Dao
						.getPaperRandomQuestionInfos(pbqInfo));
			}
		}

		return resultList;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TestPaperInfo getSessionPaperInfo() {

		// 从session中得到试卷信息
		return (TestPaperInfo) Session
				.get(SessionConstants.TT_K050031_PAPERINFO);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void setSessionPaperInfo(TestPaperInfo testPaperInfo) {

		Session.delete(SessionConstants.TT_K050031_PAPERINFO);
		Session.set(SessionConstants.TT_K050031_PAPERINFO, testPaperInfo);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<PaperBigQuestionInfo> getSessionPaperBigQuestionInfo() {

		// 从session中得到试卷大题信息
		return (List<PaperBigQuestionInfo>) Session
				.get(SessionConstants.TT_K050031_PAPERBIGQUESTIONINFO);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void setSessionPaperBigQuestionInfo(
			List<PaperBigQuestionInfo> pbqInfoList) {
		// 设置画面session情报
		Session.delete(SessionConstants.TT_K050031_PAPERBIGQUESTIONINFO);
		Session.set(SessionConstants.TT_K050031_PAPERBIGQUESTIONINFO,
				pbqInfoList);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer getSessionBigQuestionMaxSerialNo() {

		return (Integer) Session
				.get(SessionConstants.TT_K050031_BIGQUESTIONNUM);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void setSessionBigQuestionMaxSerialNo(Integer bigQuestionMaxSerialNo) {

		Session.delete(SessionConstants.TT_K050031_BIGQUESTIONNUM);
		Session.set(SessionConstants.TT_K050031_BIGQUESTIONNUM,
				bigQuestionMaxSerialNo);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void delectBigQuestion(TestPaperInfo tpInfo,
			List<PaperBigQuestionInfo> pbqInfoList, int bigquestionOrder) {

		// 删除试卷大题信息
		if (null != pbqInfoList) {
			pbqInfoList.remove(bigquestionOrder - 1);
			int size = pbqInfoList.size();
			for (int i = 0; i < size; i++) {
				PaperBigQuestionInfo pbqInfo = pbqInfoList.get(i);
				if (bigquestionOrder < pbqInfo.getBigquestionOrder().intValue()) {
					pbqInfo.setBigquestionOrder(pbqInfo.getBigquestionOrder()
							.intValue() - 1);
				}
			}
		}

		// 更新session试卷信息
		this.setSessionPaperInfo(tpInfo);
		// 更新session试卷大题信息
		this.setSessionPaperBigQuestionInfo(pbqInfoList);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean updatePaperInfo(TestPaperInfo tpInfo) {

		// 时间戳判断
		if (!ttCommonService.checkTimeStamp(PageId.K050031, k050031Dao
				.getTimeStamp(tpInfo))) {
			throw new TtExclusiveException();
		}

		// session试卷大题信息
		List<PaperBigQuestionInfo> pbqInfoList = getSessionPaperBigQuestionInfo();
		// 设定随机大题存在区分
		tpInfo.setRandomBigquestFlg(C06.C06_2.value());
		// 大题数量检查
		if (!(pbqInfoList == null || pbqInfoList.size() == 0)) {
			// 设定大题数量
			tpInfo.setBigquestionNum(pbqInfoList.size());
			// 设定试题数量
			int questionNum = 0;
			for (PaperBigQuestionInfo pbqInfo : pbqInfoList) {
				questionNum = questionNum + pbqInfo.getQuestionNum().intValue();
				// 设定随机大题存在区分
				if (pbqInfo.getBigquestionType() == R11.R11_2.value()) {
					tpInfo.setRandomBigquestFlg(C06.C06_1.value());
				}
			}
			tpInfo.setQuestionNum(questionNum);

			// 试卷状态为<待审批>时，设定申请者ID
			if (tpInfo.getPaperStatus() == R10.R10_2.value()) {
				tpInfo.setApplyUserId(TtCommonUtil.getLoginUserId());
			}
		} else if (tpInfo.getPaperStatus() == R10.R10_2.value()) {
			// 试卷状态为<待审批>且大题数量为0时,返回false
			return false;
		}

		// 设定更新者ID
		tpInfo.setUpdateUserId(TtCommonUtil.getLoginUserId());

		// 试卷信息更新
		if (k050031Dao.updatePaperInfo(tpInfo) <= 0) {
			return false;
		}
		// 删除原有试卷大题信息，固定大题，随机大题
		k050031Dao.deletePaperBigQuestionInfo(tpInfo);
		k050031Dao.deletePaperStableQuestionInfo(tpInfo);
		k050031Dao.deletePaperRandomQuestionInfo(tpInfo);

		// 插入最新大题
		if (null != pbqInfoList) {
			for (PaperBigQuestionInfo pbqInfo : pbqInfoList) {
				pbqInfo.setPaperVersionNo(tpInfo.getPaperVersionNo());
				k050031Dao.insertPaperBigQuestionInfo(pbqInfo);
				// 插入最新固定大题
				if (pbqInfo.getStableQueInfoList() != null) {
					for (PaperStableQuestionInfo psqInfo : pbqInfo
							.getStableQueInfoList()) {
						psqInfo.setPaperVersionNo(tpInfo.getPaperVersionNo());
						k050031Dao.insertPaperStableQuestionInfo(psqInfo);
					}
				}
				// 插入最新随机大题
				if (pbqInfo.getRandomQueInfoList() != null) {
					for (PaperRandomQuestionInfo prqInfo : pbqInfo
							.getRandomQueInfoList()) {
						prqInfo.setPaperVersionNo(tpInfo.getPaperVersionNo());
						k050031Dao.insertPaperRandomQuestionInfo(prqInfo);
					}
				}
			}
		}

		// 提交审批操作时，设置提醒消息
		if (tpInfo.getPaperStatus() == R10.R10_2.value()) {
			// 信息表更新
			MessageReminding messageInfo = new MessageReminding();
			// 获得消息ID
			messageInfo.setInformationId(ttCommonService
					.getSequence(TtConstants.SEQID.Information));
			// 消息模式 = <试卷等待审批>
			messageInfo.setMode(String.valueOf(REMIND_MODE.KSY03.value()));
			// 消息参数
			String parameter = "8" + "," + tpInfo.getPaperId() + ","
					+ tpInfo.getPaperVersionNo();
			messageInfo.setParameter(parameter);
			// 提醒内容
			messageInfo.setContent(propMgr.getMessage("yds.tt.remind.KSY03",
					tpInfo.getPaperTitle()));
			// 消息FLG
			messageInfo.setInformationFlg(0);
			// 失效时间
			messageInfo.setLosetime(TtCommonUtil.getMaxDate());
			// 用户ID设置
			messageInfo.setUserId(k050031Dao.getPaperApproveUserId(tpInfo
					.getPaperId()));
			ttCommonDao.insertMessageReminding(messageInfo);
		}

		return true;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean updateReeditPaper() {

		// 获得session试卷信息
		TestPaperInfo tpInfo = getSessionPaperInfo();
		// 更新者设定为session用户ID
		tpInfo.setUpdateUserId(TtCommonUtil.getLoginUserId());

		// 时间戳判断
		if (!ttCommonService.checkTimeStamp(PageId.K050031, k050031Dao
				.getTimeStamp(tpInfo))) {
			throw new TtExclusiveException();
		}
		// 试卷状态为<已批准>时，新建新版本试卷
		if (tpInfo.getPaperStatus() == R10.R10_3.value()) {

			// 更新试卷最新区分
			if (k050031Dao.updatePaperNewFlg(tpInfo) <= 0) {
				return false;
			}
			// 试卷版本号重新设定
			tpInfo.setPaperVersionNo(tpInfo.getPaperVersionNo() + 1);
			// 试卷状态设定为<编辑中>
			tpInfo.setPaperStatus(R10.R10_1.value());
			// 试卷状态名称设定为"编辑中"
			tpInfo.setPaperStatusName(sysCodeInfoService.getDiffName(R10
					.getEnumName(), R10.R10_1.value()));
			// 创建者设定为session用户ID
			tpInfo.setCreateUserId(TtCommonUtil.getLoginUserId());
			// 获得session试卷大题信息
			List<PaperBigQuestionInfo> pbqInfoList = getSessionPaperBigQuestionInfo();

			// 新建新版本试卷
			k050031Dao.insertPaperInfo(tpInfo);
			// 新建新版本大题
			if (null != pbqInfoList) {
				for (PaperBigQuestionInfo pbqInfo : pbqInfoList) {
					pbqInfo.setPaperVersionNo(tpInfo.getPaperVersionNo());
					k050031Dao.insertPaperBigQuestionInfo(pbqInfo);
					// 新建新版本固定大题
					if (pbqInfo.getStableQueInfoList() != null) {
						for (PaperStableQuestionInfo psqInfo : pbqInfo
								.getStableQueInfoList()) {
							psqInfo.setPaperVersionNo(tpInfo
									.getPaperVersionNo());
							k050031Dao.insertPaperStableQuestionInfo(psqInfo);
						}
					}
					// 新建新版本随机大题
					if (pbqInfo.getRandomQueInfoList() != null) {
						for (PaperRandomQuestionInfo prqInfo : pbqInfo
								.getRandomQueInfoList()) {
							prqInfo.setPaperVersionNo(tpInfo
									.getPaperVersionNo());
							k050031Dao.insertPaperRandomQuestionInfo(prqInfo);
						}
					}
				}
			}

			// 最新时间戳保存
			ttCommonService.setTimestamp(PageId.K050031, k050031Dao
					.getTimeStamp(tpInfo));
			// 更新session试卷信息
			this.setSessionPaperInfo(tpInfo);
			// 更新session试卷大题信息
			this.setSessionPaperBigQuestionInfo(pbqInfoList);
		} else {

			// 试卷状态设定为<编辑中>
			tpInfo.setPaperStatus(R10.R10_1.value());
			// 试卷状态名称设定为"编辑中"
			tpInfo.setPaperStatusName(sysCodeInfoService.getDiffName(R10
					.getEnumName(), R10.R10_1.value()));

			// 试卷状态更新
			if (k050031Dao.updatePaperStatus(tpInfo) <= 0) {
				return false;
			}
			// 最新时间戳保存
			ttCommonService.setTimestamp(PageId.K050031, k050031Dao
					.getTimeStamp(tpInfo));
		}

		return true;
	}

	/**
	 * @param dao
	 *            the k050031Dao to set
	 */
	public void setK050031Dao(K050031Dao dao) {
		k050031Dao = dao;
	}

	/**
	 * @param ttCommonDao
	 *            the ttCommonDao to set
	 */
	public void setTtCommonDao(TtCommonDao ttCommonDao) {
		this.ttCommonDao = ttCommonDao;
	}

	/**
	 * @param ttCommonService
	 *            the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}

	/**
	 * @param sysCodeInfoService
	 *            the sysCodeInfoService to set
	 */
	public void setSysCodeInfoService(SysCodeInfoService sysCodeInfoService) {
		this.sysCodeInfoService = sysCodeInfoService;
	}

}
