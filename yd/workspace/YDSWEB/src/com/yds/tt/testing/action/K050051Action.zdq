/*
 * @(#) K050051Action.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 考试子系统
 */
package com.yds.tt.testing.action;

import java.util.List;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.opensymphony.xwork2.interceptor.annotations.InputConfig;
import com.yds.base.action.AbstractBaseAction;
import com.yds.tt.manager.service.TtExclusiveException;
import com.yds.tt.testing.bean.PaperBigQuestionInfo;
import com.yds.tt.testing.bean.TestPaperInfo;
import com.yds.tt.testing.service.K050051Service;

/**
 * 试卷查看.
 * 
 * @author 远东)liyanrui
 * @version 1.00 2010/05/15
 */
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@Controller("k050051Action")
public class K050051Action extends AbstractBaseAction {

	private static final long serialVersionUID = 5550469561946231272L;
	private K050051Service k050051Service;

	// 试卷模式
	private Integer mode;
	// 试卷Id
	private String paperId;
	// 试卷版本号
	private String paperVersionNo;
	// 试卷信息
	private TestPaperInfo testPaperInfo;
	// 试题大题信息
	private List<PaperBigQuestionInfo> paperBigQueInfo;
	// 错误信息
	private String errorMessage;

	/**
	 * 画面的初期显示.
	 * 
	 * @return SUCCESS
	 */
	@Override
	@InputConfig(resultName = "error")
	public String execute() {

		// 试卷信息
		testPaperInfo = new TestPaperInfo();

		// 将参数放入要进行查询的bean中
		testPaperInfo.setPaperId(paperId);
		testPaperInfo.setPaperVersionNo(Integer.valueOf(paperVersionNo));
		testPaperInfo.setMode(mode.toString());
		testPaperInfo = k050051Service.getTestPaperInfo(testPaperInfo);
		if (null != testPaperInfo) {
			// 检索大题信息
			paperBigQueInfo = k050051Service
					.getPaperBigQuestionInfo(testPaperInfo);
		}

		return SUCCESS;
	}

	/**
	 * 画面批准处理.
	 * 
	 * @return SUCCESS
	 */
	public String approveTestPaper() {

		// 取得最新更新时间
		TestPaperInfo checkTime = k050051Service.getUpdateTime(testPaperInfo);

		try {

			// 更新试卷表
			k050051Service.updateApproveTestPaper(testPaperInfo, checkTime);
			return SUCCESS;

			// 时间排他出错
		} catch (TtExclusiveException e) {
			addK050051Error(checkTime);
			return ERROR;
		}

	}

	/**
	 * 画面不批准处理.
	 * 
	 * @return SUCCESS
	 */
	public String disApproveTestPaper() {

		// 取得最新更新时间
		TestPaperInfo checkTime = k050051Service.getUpdateTime(testPaperInfo);

		try {

			// 更新试卷状态
			k050051Service.updateDisApproveTestPaper(testPaperInfo, checkTime);
			return SUCCESS;

			// 时间排他出错
		} catch (TtExclusiveException e) {
			addK050051Error(checkTime);
			return ERROR;
		}
	}

	/**
	 * 画面删除处理.
	 * 
	 * @return SUCCESS
	 */
	public String deleteTestPaper() {

		// 取得最新更新时间
		TestPaperInfo checkTime = k050051Service.getUpdateTime(testPaperInfo);

		try {
			k050051Service.deleteTestPaper(testPaperInfo, checkTime);
			return SUCCESS;

			// 时间排他出错
		} catch (TtExclusiveException e) {
			addK050051Error(checkTime);
			return ERROR;
		}
	}

	/**
	 * 校验参数是否完整
	 * 
	 */
	public void validateExecute() {

		if (null == paperId || "".equals(paperId) || null == paperVersionNo
				|| null == mode) {
			setErrorMessage(propMgr.getMessage("yds.tt.error.JYE07"));
			this.addActionError("error");
		}
	}

	/**
	 * 排他检查错误信息
	 * 
	 */
	private void addK050051Error(TestPaperInfo checkTime) {
		setErrorMessage(propMgr.getMessage("yds.tt.error.KSE56"));
		this.addActionError("error");
	}

	/**
	 * @param k050051Service
	 *            the k050051Service to set
	 */
	public void setK050051Service(K050051Service k050051Service) {
		this.k050051Service = k050051Service;
	}

	/**
	 * @return the testPaperInfo
	 */
	public TestPaperInfo getTestPaperInfo() {
		return testPaperInfo;
	}

	/**
	 * @param testPaperInfo
	 *            the testPaperInfo to set
	 */
	public void setTestPaperInfo(TestPaperInfo testPaperInfo) {
		this.testPaperInfo = testPaperInfo;
	}

	/**
	 * @param paperBigQueInfo
	 *            the paperBigQueInfo to set
	 */
	public void setPaperBigQueInfo(List<PaperBigQuestionInfo> paperBigQueInfo) {
		this.paperBigQueInfo = paperBigQueInfo;
	}

	/**
	 * @return the paperBigQueInfo
	 */
	public List<PaperBigQuestionInfo> getPaperBigQueInfo() {
		return paperBigQueInfo;
	}

	/**
	 * @param errorMessage
	 *            the errorMessage to set
	 */
	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}

	/**
	 * @return the errorMessage
	 */
	public String getErrorMessage() {
		return errorMessage;
	}

	/**
	 * @return the mode
	 */
	public Integer getMode() {
		return mode;
	}

	/**
	 * @param mode
	 *            the mode to set
	 */
	public void setMode(Integer mode) {
		this.mode = mode;
	}

	/**
	 * @return the paperId
	 */
	public String getPaperId() {
		return paperId;
	}

	/**
	 * @param paperId
	 *            the paperId to set
	 */
	public void setPaperId(String paperId) {
		this.paperId = paperId;
	}

	/**
	 * @return the paperVersionNo
	 */
	public String getPaperVersionNo() {
		return paperVersionNo;
	}

	/**
	 * @param paperVersionNo
	 *            the paperVersionNo to set
	 */
	public void setPaperVersionNo(String paperVersionNo) {
		this.paperVersionNo = paperVersionNo;
	}
}
