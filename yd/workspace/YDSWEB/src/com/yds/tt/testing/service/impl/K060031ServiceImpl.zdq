/*
 * @(#) K060031ServiceImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 考试子系统
 */

package com.yds.tt.testing.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.yds.base.service.AbstractBaseService;
import com.yds.common.service.SessionConstants;
import com.yds.tt.manager.bean.TtCheckResult;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtCommonUtil;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.testing.bean.ExamEmployeeInfo;
import com.yds.tt.testing.bean.K060031ExamPaperInfo;
import com.yds.tt.testing.bean.K060031ExamQuestionInfo;
import com.yds.tt.testing.bean.K060031SingleQuesInfo;
import com.yds.tt.testing.bean.PaperBigQuestionInfo;
import com.yds.tt.testing.bean.PaperRandomQuestionInfo;
import com.yds.tt.testing.bean.TestPaperInfo;
import com.yds.tt.testing.dao.K060031Dao;
import com.yds.tt.testing.dao.TestingCommonDao;
import com.yds.tt.testing.service.K060031Service;
import com.yds.util.service.Session;

/**
 * @see com.yds.tt.testing.service.K060031Service
 */
@Service("k060031Service")
public class K060031ServiceImpl extends AbstractBaseService implements 
		K060031Service {

	private K060031Dao k060031Dao;
	private TestingCommonDao testingCommonDao;
	private TtCommonService ttCommonService;
	// 试卷详细情报
	private K060031ExamPaperInfo k060031ExamPaperInfo;
	// 消息列表
	private List<String> infoList;
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public TtCheckResult initCheckProcess(Integer mode) {
		
		// 获取画面session情报
		String loginUserId = TtCommonUtil.getLoginUserId();
		k060031ExamPaperInfo = (K060031ExamPaperInfo) Session
			.get(SessionConstants.TT_K060031_EXAMPAPERINFO); 
		
		// 对象列表
		List<String> objectList = new ArrayList<String>();
		
		// 判断返回结果
		TtCheckResult ttCheckResult = new TtCheckResult();
		
		// 试卷编辑预览模式
		if (EDITVIEWMODE.equals(mode)) {
			objectList.add(k060031ExamPaperInfo.getPaperId());
			
			// 画面启动限制检查
			ttCheckResult = ttCommonService
					.checkStartupAuthority(TtConstants.PageId.K060031.value(),
					"K060031_1", TtConstants.C43.C43_4.value(), objectList);
			
		// 练习预览模式	
		} else if (PRACTICEVIEWMODE.equals(mode)) {
			objectList.add(k060031ExamPaperInfo.getPaperId());
			
			// 画面启动限制检查
			ttCheckResult = ttCommonService
					.checkStartupAuthority(TtConstants.PageId.K060031.value(),
					"K060031_2", TtConstants.C43.C43_5.value(), objectList);
		
		// 参加考试模式		
		} else if (TESTMODE.equals(mode)) {
			// 设置出错消息
			ttCheckResult.setRetFlag(false);
			ttCheckResult.setRetMessage(propMgr.getMessage("yds.tt.error.GTE02"));
			// 能否参加考试检查
			ExamEmployeeInfo employeeSearchInfo = new ExamEmployeeInfo();
			employeeSearchInfo.setExamineId(k060031ExamPaperInfo.getExamineId());
			employeeSearchInfo.setExamineJoinTimes(k060031ExamPaperInfo
					.getExamineJoinTimes());
			employeeSearchInfo.setEmployeesId(loginUserId);

			ExamEmployeeInfo info = testingCommonDao.getExamEmpInfo(employeeSearchInfo);
			// 员工考试信息不存在
			if (info == null) {
				return ttCheckResult;
			}
			// 员工考试状态不为考试中
			if (!TtConstants.R13.R13_4.toString().equals(
					info.getEmpExamStatus().toString())) {
				return ttCheckResult;
			}
			// 判断考试是否已结束
			Date currentTime = new Date();
			if (currentTime.compareTo(info.getExamineEndTime()) >= 0) {
				return ttCheckResult;
			}
			// 没有出错
			ttCheckResult.setRetFlag(true);
			// 设置画面Session情报
			K060031ExamPaperInfo examPaperInfo = (K060031ExamPaperInfo) Session
					.get(SessionConstants.TT_K060031_EXAMPAPERINFO);
			examPaperInfo.setPaperId(info.getPaperId());
			examPaperInfo.setPaperVersionNo(info.getPaperVersionNo());
			examPaperInfo.setExamineStartTime(info.getExamineStartTime());
			examPaperInfo.setExamineEndTime(info.getExamineEndTime());
			Session.set(SessionConstants.TT_K060031_EXAMPAPERINFO,
					examPaperInfo);
			
		// 试卷生成预览模式		
		} else if (PAPERCREATEMODE.equals(mode)) {
			objectList.add(k060031ExamPaperInfo.getExamineId().substring(0, 6) + "00");
			
			// 画面启动限制检查
			ttCheckResult = ttCommonService
					.checkStartupAuthority(TtConstants.PageId.K060031.value(),
					"K060031_3", TtConstants.C43.C43_3.value(), objectList);
		}
		
		return ttCheckResult;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public K060031ExamPaperInfo getPaperDetails() {
		
		// 获取画面Session情报
		// 取得Session情报中参数信息
		k060031ExamPaperInfo = (K060031ExamPaperInfo) Session
				.get(SessionConstants.TT_K060031_EXAMPAPERINFO);
		Integer mode = (Integer) Session.get(SessionConstants.TT_K060031_MODE);
		
		// 答题方式切换时
		if ((Integer) Session.get(SessionConstants.TT_K060031_IFVIEWCHANGE) == 1) {
			// 取得Session中试卷详细信息
			return k060031ExamPaperInfo;			
		}
		// 试卷生成预览模式
		if (PAPERCREATEMODE.equals(mode)) {
			// 取得Session中试卷详细信息
			return k060031ExamPaperInfo;
		}
		// 画面消息列表
		infoList = new ArrayList<String>();
		
		// 取得试卷基本信息
		getPaperBasicInfo(mode);
		
		// 取得试卷大题信息
		getPaperBigQuestions();
		
		// 取得试卷试题信息
		getPaperQuestions(mode);
		return k060031ExamPaperInfo;
	}
	
	/**
	 * 取得试卷基本信息
	 * 
	 * @param mode
	 *            画面模式
	 */
	private void getPaperBasicInfo(Integer mode) {
		// 设置检索条件
		TestPaperInfo testPaperSearchInfo = new TestPaperInfo();
		testPaperSearchInfo.setPaperId(k060031ExamPaperInfo.getPaperId());
		// 试卷编辑预览模式或者参加考试模式
		if (EDITVIEWMODE.equals(mode) || TESTMODE.equals(mode)) {
			testPaperSearchInfo.setPaperVersionNo(k060031ExamPaperInfo
					.getPaperVersionNo());
		}
		// 练习预览模式
		if (PRACTICEVIEWMODE.equals(mode)) {
			testPaperSearchInfo.setNewFlg(1);
		}
		// 参加练习模式
		if (PRACTICEMODE.equals(mode)) {
			testPaperSearchInfo.setNewFlg(0);
		}
		
		// 取得试卷基本信息
		TestPaperInfo testPaperInfo = testingCommonDao
				.getPaperBasicInfo(testPaperSearchInfo);
		
		// 试卷版本号
		k060031ExamPaperInfo.setPaperVersionNo(testPaperInfo.getPaperVersionNo());		
		// 试卷标题
		k060031ExamPaperInfo.setPaperTitle(testPaperInfo.getPaperTitle());
		// 试卷说明信息
		k060031ExamPaperInfo.setPaperDescription(testPaperInfo.getPaperDescription());
		// 大题数量
		k060031ExamPaperInfo.setBigquestionNum(testPaperInfo.getBigquestionNum());
	}

	/**
	 * 取得试卷大题信息
	 * 
	 */
	private void getPaperBigQuestions() {
		// 取得试卷大题信息
		PaperBigQuestionInfo bigQuestionInfo = new PaperBigQuestionInfo();
		bigQuestionInfo.setPaperId(k060031ExamPaperInfo.getPaperId());
		bigQuestionInfo.setPaperVersionNo(k060031ExamPaperInfo.getPaperVersionNo());			
		List<PaperBigQuestionInfo> bigQuestionInfos = testingCommonDao.getBigQuestionInfos(bigQuestionInfo);
		// 设置大题题号
		StringBuilder showNum;
		for (int i = 1;i <= bigQuestionInfos.size();i++) {
			showNum = new StringBuilder();
			if (i / DECIMALSM > 0) {
				if (i / DECIMALSM > 1) {
					showNum.append(BIGQUESTION_SHOWNUMS.values()[i / DECIMALSM - 1]);
				}
				// 设置十
				showNum.append(BIGQUESTION_SHOWNUMS.values()[BIGQUESTION_SHOWNUMS.values().length - 1]);
			}
			int j = i%DECIMALSM;
			if (j != 0) {
				showNum.append(BIGQUESTION_SHOWNUMS.values()[j - 1]);
			}
			bigQuestionInfos.get(i - 1).setBigquestionShowNum(showNum.toString());
		}
		// 设置试卷大题信息
		k060031ExamPaperInfo.setBigQuestions(bigQuestionInfos);
	}
	
	/**
	 * 取得试卷试题信息
	 * 
	 * @param mode
	 *            画面模式
	 */
	private void getPaperQuestions(Integer mode) {
		// 试卷小题列表
		List<K060031ExamQuestionInfo> examQuestionInfos = new ArrayList<K060031ExamQuestionInfo>();
		List<K060031ExamQuestionInfo> questionListForSearch;
		// 试卷编辑预览模式
		if (EDITVIEWMODE.equals(mode)) {
			for (PaperBigQuestionInfo bigQuestionInfo : k060031ExamPaperInfo.getBigQuestions()) {
				if (TtConstants.R11.R11_1.toString().equals(bigQuestionInfo.getBigquestionType().toString())) {
					// 取得固定试题
					questionListForSearch = getStableQuestions(bigQuestionInfo.getBigquestionSerialNo());
				} else {
					// 取得试题随机条件
					PaperRandomQuestionInfo paperRandomQuestionInfo = new PaperRandomQuestionInfo();
					paperRandomQuestionInfo.setPaperId(k060031ExamPaperInfo.getPaperId());
					paperRandomQuestionInfo.setPaperVersionNo(k060031ExamPaperInfo
							.getPaperVersionNo());
					paperRandomQuestionInfo.setBigquestionSerialNo(bigQuestionInfo
							.getBigquestionSerialNo());
					List<PaperRandomQuestionInfo> paperRandomQuestionInfos = testingCommonDao
							.getRandomConditions(paperRandomQuestionInfo);
					
					questionListForSearch = getRandomQuestions(paperRandomQuestionInfos, bigQuestionInfo);
				}
				// 将试题加入小题信息列表
				int index = 0;
				for (K060031ExamQuestionInfo examQuestion : questionListForSearch) {
					// 设置小题号
					examQuestion.setQuestionOrder(++index);
					examQuestionInfos.add(examQuestion);
				}
			}
		// 参加练习模式或者练习预览模式
		} else if (PRACTICEVIEWMODE.equals(mode) || PRACTICEMODE.equals(mode)) {
			// 取得固定试题
			examQuestionInfos = getStableQuestions(null);

			// 参加考试模式
		} else if (TESTMODE.equals(mode)) {
			// 取得考试试题信息
			Map<String, Object> examQuestionsSearchMap = new HashMap<String, Object>();
			examQuestionsSearchMap.put("employeesId", TtCommonUtil
					.getLoginUserId());
			examQuestionsSearchMap.put("examineId", k060031ExamPaperInfo
					.getExamineId());
			examQuestionsSearchMap.put("examineJoinTimes", k060031ExamPaperInfo
					.getExamineJoinTimes());

			// 取得考试试题
			examQuestionInfos = testingCommonDao.getExamQuestions(examQuestionsSearchMap);
			
			// 取得试题答案信息
			List<K060031SingleQuesInfo> singleQuestions = testingCommonDao
					.getTestAnswerInfo(examQuestionsSearchMap);
			
			// 整理试题答案信息
			Map<String, List<K060031SingleQuesInfo>> examSingleMap 
					= editStableAnswers(singleQuestions);
			
			StringBuilder questionNokey;
			// 整理试题信息
			for (K060031ExamQuestionInfo questionInfo : examQuestionInfos) {
				questionNokey = new StringBuilder();
				questionNokey.append(questionInfo.getBigquestionSerialNo()).append(
						BIG_SMALL_QUESTIONKEY).append(
						questionInfo.getQuestionId());
				
				questionInfo.setSingleQuestions(examSingleMap.get(questionNokey.toString()));
			}
			
		}
		
		// 设置小题号
		for (K060031ExamQuestionInfo examQuesInfo : examQuestionInfos) {
			StringBuilder questionShowNum = new StringBuilder();
			questionShowNum.append(LEFT_BRACKET).append(
					examQuesInfo.getQuestionOrder().toString()).append(RIGHT_BRACKET);
			examQuesInfo.setQuestionShowNum(questionShowNum.toString());
		}
		
		// 设置试卷小题
		k060031ExamPaperInfo.setExamQuestions(examQuestionInfos);
	}
	
	/**
	 * 取得固定试题及答案信息
	 * 
	 * @param bigQuestionSerialNo
	 * 			试题检索条件
	 * @return List<K060031ExamQuestionInfo>
	 * 			试题列表
	 */
	private List<K060031ExamQuestionInfo> getStableQuestions(Integer bigQuestionSerialNo){
		// 设置试题取得条件
		Map<String, Object> stableQuestionSearchMap = new HashMap<String, Object>();
		stableQuestionSearchMap.put("paperId", k060031ExamPaperInfo.getPaperId());
		stableQuestionSearchMap.put("paperVersionNo", k060031ExamPaperInfo.getPaperVersionNo());
		stableQuestionSearchMap.put("bigquestionSerialNo", bigQuestionSerialNo);
		// 取得试题信息
		List<K060031ExamQuestionInfo> questionInfos = testingCommonDao
				.getStableQuestions(stableQuestionSearchMap);
		
		// 取得试题答案信息
		List<K060031SingleQuesInfo> singleQuestions = testingCommonDao
				.getStableAnswerInfos(stableQuestionSearchMap);
		
		// 整理试题答案信息
		Map<String, List<K060031SingleQuesInfo>> examSingleMap 
				= editStableAnswers(singleQuestions);
		
		StringBuilder questionNokey;
		// 整理试题信息
		for (K060031ExamQuestionInfo questionInfo : questionInfos) {
			questionNokey = new StringBuilder();
			questionNokey.append(questionInfo.getBigquestionSerialNo()).append(
					BIG_SMALL_QUESTIONKEY).append(
					questionInfo.getQuestionId());
			
			questionInfo.setSingleQuestions(examSingleMap.get(questionNokey.toString()));
		}
		return questionInfos;
	}
	
	/**
	 * 取得随机试题
	 * 
	 * @param List<PaperRandomQuestionInfo> 
	 * 			试题随机条件列表
	 * @param PaperBigQuestionInfo
	 * 			大题信息
	 */
	private List<K060031ExamQuestionInfo> getRandomQuestions(
			List<PaperRandomQuestionInfo> paraRandomQuestionInfos,
			PaperBigQuestionInfo bigQuestionInfo) {
		// 检索小题列表
		List<K060031ExamQuestionInfo> questionListForSearch = new ArrayList<K060031ExamQuestionInfo>();
		// 记录已选择随机试题Map
		Map<String, Integer> questionMap = new HashMap<String, Integer>();
				
		// 试题取得
		for (PaperRandomQuestionInfo randomCondition : paraRandomQuestionInfos) {
			// 取得随机试题
			randomCondition.setQuestionKind(bigQuestionInfo.getQuestionKind());
			List<K060031ExamQuestionInfo> randomQuestions = testingCommonDao
					.getRandomQuestions(randomCondition);

			// 取得随机试题对应答案信息
			List<K060031SingleQuesInfo> randomQuestionAnswers = testingCommonDao
					.getRandomQuestionAnswers(randomCondition);
			
			Map<String, List<K060031SingleQuesInfo>> examQuestionAnswerMap
					= editRandomAnswers(randomQuestionAnswers);
			
			// 剔除关键字不符合要求的试题
			String[] keywordArray;
			List<K060031ExamQuestionInfo> questionList = new ArrayList<K060031ExamQuestionInfo>();
			if (randomCondition.getKeyword() != null && !randomCondition.getKeyword().isEmpty()) {
				for (K060031ExamQuestionInfo question : randomQuestions) {
					Boolean hasAllKeyword = true;
					String questionKeyword = question.getKeyword();
					if (questionKeyword.isEmpty()) {
						continue;
					}
					keywordArray = questionKeyword.split(" ");
					Map<String, String> keywordMap = new HashMap<String, String>();
					for (String singleKeyword : keywordArray) {
						keywordMap.put(singleKeyword, singleKeyword);
					}
					for (String conditionKeyword : randomCondition.getKeywordList()) {
						if (!keywordMap.containsValue(conditionKeyword)) {
							hasAllKeyword = false;
							break;
						}
					}
					if (hasAllKeyword) {
						questionList.add(question);
					}
				}
				randomQuestions = questionList;
			}
			
			// 题库试题不足时
			if (randomQuestions == null || randomQuestions.size() < randomCondition.getQuestionNum()) {
				// wanqiuhong 10/19 修改： 去掉抛异常。
				return questionListForSearch;
			}
			
			// 随机选题
			Integer random;
			int questionCount = randomQuestions.size();
			int index = 0;
			while (index < randomCondition.getQuestionNum()
					&& randomCondition.getQuestionNum() <= questionCount) {
				random = (int) Math.round(Math.floor(Math.random()
						* randomQuestions.size()));
				K060031ExamQuestionInfo randomQuestion = randomQuestions
						.get(random);
				
				// 该试题未被选中
				if (questionMap.get(randomQuestion.getQuestionId()) == null) {
					// 记录本次抽取试题
					randomQuestion.setBigquestionSerialNo(bigQuestionInfo
							.getBigquestionSerialNo());
					randomQuestion.setSingleQuestions(examQuestionAnswerMap
							.get(randomQuestion.getQuestionId()));
					questionListForSearch.add(randomQuestion);
					questionMap.put(randomQuestion.getQuestionId(),
							randomCondition.getConditionSerialNo());
					index++;
				} else if (!questionMap.get(randomQuestion.getQuestionId())
						.equals(randomCondition.getConditionSerialNo())) {
					questionCount -= 1;
				}
			}
			
			// 抽题数量判断
			if (index != randomCondition.getQuestionNum()) {
				// 设置随机大题抽取失败消息
				infoList.add(propMgr.getMessage("yds.tt.error.KSE11",
						bigQuestionInfo.getBigquestionOrder()));
				questionListForSearch = new ArrayList<K060031ExamQuestionInfo>();
				break;
			}
		}
		return questionListForSearch;
	}
	
	/**
	 * 整理固定试题答案信息
	 * 
	 * @param List<K060031SingleQuesInfo> 
	 * 			试题答案信息List
	 * @param singleQuestionMap
	 * 			试题答案信息Map
	 */
	private Map<String, List<K060031SingleQuesInfo>> editStableAnswers(List<K060031SingleQuesInfo> singleQuestions) {
		// 整理答案信息
		Map<String, List<K060031SingleQuesInfo>> singleQuestionMap = new HashMap<String, List<K060031SingleQuesInfo>>();
		List<K060031SingleQuesInfo> preSingleQuesInfos = new ArrayList<K060031SingleQuesInfo>();
		StringBuilder questionNokey = new StringBuilder();
		Integer preBigQuestionSerialNo = -1;
		String preQuestionId = "";
		
		// 整理试卷答案信息
		for (K060031SingleQuesInfo preSingleQuesInfo : singleQuestions) {

			// 大题号改变时记录小题
			if (-1 != preBigQuestionSerialNo
					&& !preBigQuestionSerialNo.equals(preSingleQuesInfo
							.getBigquestionSerialNo())) {

				questionNokey.append(preBigQuestionSerialNo).append(BIG_SMALL_QUESTIONKEY).append(preQuestionId);
				singleQuestionMap.put(questionNokey.toString(),
						preSingleQuesInfos);
				preSingleQuesInfos = new ArrayList<K060031SingleQuesInfo>();
				questionNokey = new StringBuilder();
			// 小题号改变时记录小题
			} else if (!preQuestionId.isEmpty()
					&& !preQuestionId.equals(preSingleQuesInfo
							.getQuestionId())) {
				
				questionNokey.append(preBigQuestionSerialNo).append(BIG_SMALL_QUESTIONKEY).append(preQuestionId);
				singleQuestionMap.put(questionNokey.toString(),
						preSingleQuesInfos);
				preSingleQuesInfos = new ArrayList<K060031SingleQuesInfo>();
				questionNokey = new StringBuilder();
			}
			preBigQuestionSerialNo = preSingleQuesInfo.getBigquestionSerialNo();
			preQuestionId = preSingleQuesInfo.getQuestionId();
			preSingleQuesInfos.add(preSingleQuesInfo);
		}
		questionNokey.append(preBigQuestionSerialNo).append(BIG_SMALL_QUESTIONKEY).append(preQuestionId);
		singleQuestionMap.put(questionNokey.toString(),
				preSingleQuesInfos);
		
		return singleQuestionMap;
	}
	
	/**
	 * 整理随机试题答案信息
	 * 
	 * @param List<K060031SingleQuesInfo> 
	 * 			随机试题答案信息List
	 * @param singleQuestionMap
	 * 			随机试题答案信息Map
	 */
	private Map<String, List<K060031SingleQuesInfo>> editRandomAnswers(
			List<K060031SingleQuesInfo> randomQuestionAnswers) {
		// 答案信息Map
		Map<String, List<K060031SingleQuesInfo>> examQuestionAnswerMap 
				= new HashMap<String, List<K060031SingleQuesInfo>>();
		List<K060031SingleQuesInfo> preSingleQuestions = new ArrayList<K060031SingleQuesInfo>();
		String prQuestionId = "";
		// 答案信息整理
		for (K060031SingleQuesInfo preExamQuestionInfo : randomQuestionAnswers) {

			// 记录本道小题的答案
			if (!prQuestionId.isEmpty()
					&& !prQuestionId
							.equals(preExamQuestionInfo.getQuestionId())) {

				examQuestionAnswerMap.put(prQuestionId, preSingleQuestions);
				preSingleQuestions = new ArrayList<K060031SingleQuesInfo>();

			}
			prQuestionId = preExamQuestionInfo.getQuestionId();
			preSingleQuestions.add(preExamQuestionInfo);
		}
		examQuestionAnswerMap.put(prQuestionId, preSingleQuestions);
		return examQuestionAnswerMap;
	}
	/**
	 * @return the k060031Dao
	 */
	public K060031Dao getK060031Dao() {
		return k060031Dao;
	}

	/**
	 * @param dao the k060031Dao to set
	 */
	public void setK060031Dao(K060031Dao dao) {
		k060031Dao = dao;
	}

	/**
	 * @return the k060031ExamPaperInfo
	 */
	public K060031ExamPaperInfo getK060031ExamPaperInfo() {
		return k060031ExamPaperInfo;
	}

	/**
	 * @param examPaperInfo the k060031ExamPaperInfo to set
	 */
	public void setK060031ExamPaperInfo(K060031ExamPaperInfo examPaperInfo) {
		k060031ExamPaperInfo = examPaperInfo;
	}

	/**
	 * @return the infoList
	 */
	public List<String> getInfoList() {
		return infoList;
	}

	/**
	 * @param infoList the infoList to set
	 */
	public void setInfoList(List<String> infoList) {
		this.infoList = infoList;
	}

	/**
	 * @param testingCommonDao the testingCommonDao to set
	 */
	public void setTestingCommonDao(TestingCommonDao testingCommonDao) {
		this.testingCommonDao = testingCommonDao;
	}

	/**
	 * @return the testingCommonDao
	 */
	public TestingCommonDao getTestingCommonDao() {
		return testingCommonDao;
	}

	/**
	 * @return the ttCommonService
	 */
	public TtCommonService getTtCommonService() {
		return ttCommonService;
	}

	/**
	 * @param ttCommonService the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}
}
