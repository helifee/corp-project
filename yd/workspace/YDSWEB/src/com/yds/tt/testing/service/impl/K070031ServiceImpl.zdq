/*
 * @(#) K070031ServiceImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 考试子系统
 */
package com.yds.tt.testing.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;
import com.yds.base.service.AbstractBaseService;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.testing.bean.ExamEmployeeInfo;
import com.yds.tt.testing.bean.ExamineInfo;
import com.yds.tt.testing.bean.K070031ExamineInfo;
import com.yds.tt.testing.bean.K070031BigQuestionInfo;
import com.yds.tt.testing.bean.K070031TitleAndScore;
import com.yds.tt.testing.bean.K070031PersonInfo;
import com.yds.tt.testing.bean.K070031DetailListInfo;
import com.yds.tt.testing.dao.K070031Dao;
import com.yds.tt.testing.service.K070031Service;

/**
 * @see com.yds.tt.testing.service.K070031Service
 */
@Service("k070031Service")
public class K070031ServiceImpl extends AbstractBaseService implements K070031Service {	
	private static final String PASS = "○";
	private static final String FAIL = "×";
	
	private ExamineInfo examineInfo;
	private K070031ExamineInfo k070031ExamineInfo;
	private List<K070031DetailListInfo> detailListInfos;
	private List<K070031BigQuestionInfo> bigQuestionInfos;
	private K070031Dao k070031Dao;

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamineInfo getExamineInfo(String examineId) {
		examineInfo = k070031Dao.getExamineInfo(examineId);
		return examineInfo;
	}

	@Override
	public K070031ExamineInfo getExamineResultInfo(String examineId) {
		k070031ExamineInfo = k070031Dao.getExamineResultInfo(examineId);
		if(null != k070031ExamineInfo){
			setHeadInfo(k070031ExamineInfo);
		}
		return k070031ExamineInfo;
	}
	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<K070031DetailListInfo> getDetailListInfo(String examineId) {
		bigQuestionInfos = k070031Dao.getBigQuestionInfo(examineId);
		if(bigQuestionInfos.size() > 0){
			detailListInfos = setListInfo(bigQuestionInfos);
		}
		return detailListInfos;
	}

	/**
	 * 头部信息编辑
	 */
	private void setHeadInfo(K070031ExamineInfo examineInfo) {	

		// 通过率
		if(0 != examineInfo.getJoinExamineNum() && null != examineInfo.getJoinExamineNum()){
			double num = 0;
			if(null != examineInfo.getPassExamineNum()) {
				num = Double.valueOf(examineInfo.getPassExamineNum());
			}
			this.k070031ExamineInfo.setPassRate(Double.toString((Math.round(
					num / examineInfo.getJoinExamineNum() * 1000) / 10.0)));
		}
	}

	/**
	 * 一览信息编辑
	 */
	private List<K070031DetailListInfo> setListInfo(List<K070031BigQuestionInfo> bigQuestionInfos) {
		List<K070031DetailListInfo> saveDetailListInfos = new ArrayList<K070031DetailListInfo>();
		if (bigQuestionInfos.size() > 0) {
			Integer personNum = 0;
			Integer paperScoreSum = 0;
			Integer index = 0;
			double sum = 0;
			String savePaperId = null;
			String saveEmployeesId = null;
			Boolean flg = false;

			K070031DetailListInfo saveDetailListInfo = new K070031DetailListInfo();
			K070031PersonInfo savePersonInfo = new K070031PersonInfo();
			K070031TitleAndScore saveBigTitleAndScore = new K070031TitleAndScore();

			List<K070031TitleAndScore> saveBigTitleAndScores = new ArrayList<K070031TitleAndScore>();
			List<Integer> saveBigQuestionScoreSums = new ArrayList<Integer>();
			List<Double> saveAllBigSums = new ArrayList<Double>();
			List<Double> saveBigAverageScores = new ArrayList<Double>();
			List<K070031PersonInfo> savePersonInfos = new ArrayList<K070031PersonInfo>();

			for (K070031BigQuestionInfo bigQuestionInfo : bigQuestionInfos) {
				// 成绩明细一览信息设置
				if (!bigQuestionInfo.getPaperId().equals(savePaperId)) {
					if (null != savePaperId) {
						// 个人得分信息
						savePersonInfo.setBigQuestionScoreSums(saveBigQuestionScoreSums);
						saveBigQuestionScoreSums = new ArrayList<Integer>();
						savePersonInfos.add(savePersonInfo);
						savePersonInfo = new K070031PersonInfo();
						saveDetailListInfo.setPersonInfos(savePersonInfos);
						savePersonInfos = new ArrayList<K070031PersonInfo>();
						// 大题标题和大题总分
						saveDetailListInfo.setBigTitleAndScores(saveBigTitleAndScores);
						saveBigTitleAndScores = new ArrayList<K070031TitleAndScore>();
						// 试卷平均分
						saveDetailListInfo.setPaperAverageScore(Math.round(
								Double.valueOf(paperScoreSum) / personNum * 10) / 10.0);
						// 大题平均分
						for (Double saveAllBigSum : saveAllBigSums) {
							saveBigAverageScores.add(Math.round(saveAllBigSum / personNum * 10) / 10.0);
						}
						saveDetailListInfo.setBigAverageScores(saveBigAverageScores);
						saveBigAverageScores = new ArrayList<Double>();
						// 大题数
						saveDetailListInfo.setBigquestionNum(saveAllBigSums.size());
						saveAllBigSums.clear();
						
						saveDetailListInfos.add(saveDetailListInfo);
						saveDetailListInfo = new K070031DetailListInfo();					
					}

					flg = true;
					index = 0;
					savePaperId = bigQuestionInfo.getPaperId();
					saveEmployeesId = bigQuestionInfo.getEmployeesId();

					// 试卷ID
					saveDetailListInfo.setPaperId(bigQuestionInfo.getPaperId());
					// 试卷名称
					saveDetailListInfo.setPaperName(bigQuestionInfo.getPaperName());

					// 员工ID
					savePersonInfo.setEmployeesId(bigQuestionInfo.getEmployeesId());
					// 员工姓名
					savePersonInfo.setEmployeesName(bigQuestionInfo.getEmployeesName());
					// 是否通过（○/×）
					if (bigQuestionInfo.getPassexamineFlg() == TtConstants.C21.C21_1.value()) {
						savePersonInfo.setPassExamineFlg(PASS);
					} else {
						savePersonInfo.setPassExamineFlg(FAIL);
					}
					// 档次
					savePersonInfo.setResultLeavelName(bigQuestionInfo.getResultLeavelName());
					// 总得分
					paperScoreSum = bigQuestionInfo.getScore();
					savePersonInfo.setScore(bigQuestionInfo.getScore());
					// 大题得分
					saveBigQuestionScoreSums.add(bigQuestionInfo.getBigquestionScoreSum());
					// 人数
					personNum = 1;
					// 大题标题和大题总分
					saveBigTitleAndScore.setBigTitle(bigQuestionInfo.getBigquestionTitle());					
					saveBigTitleAndScore.setBigScore(bigQuestionInfo.getBigquestionTotalScore());
					saveBigTitleAndScores.add(saveBigTitleAndScore);
					saveBigTitleAndScore = new K070031TitleAndScore();
					// 大题平均分
					saveAllBigSums.add(Double.valueOf(bigQuestionInfo.getBigquestionScoreSum()));

				} else {
					if (!bigQuestionInfo.getEmployeesId().equals(saveEmployeesId)) {

						flg = false;
						index = 0;
						saveEmployeesId = bigQuestionInfo.getEmployeesId();

						savePersonInfo.setBigQuestionScoreSums(saveBigQuestionScoreSums);
						saveBigQuestionScoreSums = new ArrayList<Integer>();

						savePersonInfos.add(savePersonInfo);
						savePersonInfo = new K070031PersonInfo();

						// 个人得分信息设置
						// 员工ID
						savePersonInfo.setEmployeesId(bigQuestionInfo.getEmployeesId());
						// 员工姓名
						savePersonInfo.setEmployeesName(bigQuestionInfo.getEmployeesName());
						// 是否通过（○/×）
						if (bigQuestionInfo.getPassexamineFlg() == TtConstants.C21.C21_1.value()) {
							savePersonInfo.setPassExamineFlg(PASS);
						} else {
							savePersonInfo.setPassExamineFlg(FAIL);
						}
						// 档次
						savePersonInfo.setResultLeavelName(bigQuestionInfo.getResultLeavelName());
						// 总得分
						paperScoreSum += bigQuestionInfo.getScore();
						savePersonInfo.setScore(bigQuestionInfo.getScore());
						// 大题得分
						saveBigQuestionScoreSums.add(bigQuestionInfo.getBigquestionScoreSum());
						// 人数累加
						personNum++;
						// 大题平均分
						sum = saveAllBigSums.get(index) + bigQuestionInfo.getBigquestionScoreSum();
						saveAllBigSums.set(index, sum);
					} else {
						index++;
						// 大题得分
						saveBigQuestionScoreSums.add(bigQuestionInfo.getBigquestionScoreSum());

						if (flg) {
							// 大题标题和//大题总分
							saveBigTitleAndScore.setBigTitle(bigQuestionInfo.getBigquestionTitle());					
							saveBigTitleAndScore.setBigScore(bigQuestionInfo.getBigquestionTotalScore());
							saveBigTitleAndScores.add(saveBigTitleAndScore);
							saveBigTitleAndScore = new K070031TitleAndScore();
							// 大题平均分
							saveAllBigSums.add(Double.valueOf(bigQuestionInfo.getBigquestionScoreSum()));
						} else {
							// 大题得分累加
							sum = saveAllBigSums.get(index) + bigQuestionInfo.getBigquestionScoreSum();
							saveAllBigSums.set(index, sum);
						}
					}
				}
			}

			// 个人得分信息
			savePersonInfo.setBigQuestionScoreSums(saveBigQuestionScoreSums);
			savePersonInfos.add(savePersonInfo);
			saveDetailListInfo.setPersonInfos(savePersonInfos);
			// 大题标题和大题总分
			saveDetailListInfo.setBigTitleAndScores(saveBigTitleAndScores);
			// 试卷平均分
			saveDetailListInfo.setPaperAverageScore(Math.round(
					Double.valueOf(paperScoreSum) / personNum * 10) / 10.0);
			// 大题平均分
			for (Double saveAllBigSum : saveAllBigSums) {
				saveBigAverageScores.add(Math.round(saveAllBigSum / personNum * 10) / 10.0);
			}
			saveDetailListInfo.setBigAverageScores(saveBigAverageScores);
			// 大题数
			saveDetailListInfo.setBigquestionNum(saveAllBigSums.size());
			
			saveDetailListInfos.add(saveDetailListInfo);
		}
		return saveDetailListInfos;
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override	
	public List<K070031BigQuestionInfo> getPointDetail(ExamEmployeeInfo examEmployeeInfo) {
		
		// 获取成绩详细信息
		this.detailListInfos = getDetailListInfo(examEmployeeInfo.getExamineId());
		List<K070031BigQuestionInfo> gainPointDetailList = new ArrayList<K070031BigQuestionInfo>();
		for (K070031DetailListInfo detailListInfo : detailListInfos) {
			for (K070031PersonInfo personInfo : detailListInfo.getPersonInfos()) {
				if (personInfo.getEmployeesId().equals(examEmployeeInfo.getEmployeesId())) {
					for (int i = 0; i < detailListInfo.getBigTitleAndScores().size(); i++) {
						K070031BigQuestionInfo bigQuestionInfo = new K070031BigQuestionInfo();
						bigQuestionInfo.setBigquestionTitle(detailListInfo.getBigTitleAndScores().get(i).getBigTitle());
						bigQuestionInfo.setBigquestionTotalScore(detailListInfo.getBigTitleAndScores().get(i).getBigScore());
						bigQuestionInfo.setBigquestionScoreSum(personInfo.getBigQuestionScoreSums().get(i));
						bigQuestionInfo.setEmployeesName(personInfo.getEmployeesName());
						gainPointDetailList.add(bigQuestionInfo);
					}
				}
			}
		}
		
		return gainPointDetailList;
	}
	/**
	 * @param dao the k070031Dao to set
	 */
	public void setK070031Dao(K070031Dao dao) {
		k070031Dao = dao;
	}



	/**
	 * @param k070031ExamineInfo the k070031ExamineInfo to set
	 */
	public void setK070031ExamineInfo(K070031ExamineInfo k070031ExamineInfo) {
		this.k070031ExamineInfo = k070031ExamineInfo;
	}

	/**
	 * @return the k070031ExamineInfo
	 */
	public K070031ExamineInfo getK070031ExamineInfo() {
		return k070031ExamineInfo;
	}
}
