/*
 * @(#)PerQueryAction.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 考试
 */
package com.yds.tt.testing.action;

import java.util.List;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.opensymphony.xwork2.Preparable;
import com.opensymphony.xwork2.interceptor.annotations.InputConfig;
import com.yds.common.bean.SysCodeInfo;
import com.yds.common.service.SessionConstants;
import com.yds.common.service.SysCodeInfoService;
import com.yds.tt.manager.action.TtBasePagerAction;
import com.yds.tt.manager.bean.TtCheckResult;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.manager.service.TtConstants.E01;
import com.yds.tt.manager.service.TtConstants.R02;
import com.yds.tt.manager.service.TtConstants.R03;
import com.yds.tt.manager.service.TtConstants.R04;
import com.yds.tt.testing.bean.K040011SearchInfo;
import com.yds.tt.testing.bean.QuestionLibrary;
import com.yds.tt.testing.service.K040011Service;
import com.yds.util.service.Session;

/**
 * 题库检索一览处理
 * 
 * @author liangkezhen
 * @version 1.00 2010/03/16
 */
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@Controller("k040011Action")
public class K040011Action extends TtBasePagerAction implements Preparable {

	private static final long serialVersionUID = 6774322467957390288L;

	private SysCodeInfoService sysCodeInfoService; // 区分业务
	private K040011Service k040011Service; // k040011服务接口
	private List<SysCodeInfo> questionTypeList; // 试题类型集合
	private List<SysCodeInfo> questionKindList; // 试题题型集合
	private List<SysCodeInfo> questionDifficultyList; // 试题难度集合
	private List<SysCodeInfo> checkFlgList; // 核对状态集合
	private List<QuestionLibrary> questLibrList; // 题库信息
	private List<String> keywordList;// 关键字信息
	private K040011SearchInfo searchInfo; // 题库
	private String paperId; // 试卷ID
	private Integer questionUiModel; // 题库画面模式
	private Integer category1Id; // 一级分类选中值
	private Integer category2Id; // 二级分类选中值
	private Integer category3Id; // 三级分类选中值
	private String sltCategory1Enable; // 一级分类ID可用标识
	private String sltCategory2Enable; // 二级分类ID可用标识
	private String sltCategory3Enable; // 三级分类ID可用标识
	private String errorMessage; // 错误信息
	private int mode; // 画面模式
	private Integer questionKind; // 接口参数-试题类型
	private Integer questionType; // 题库类型

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void prepare() throws Exception {

		// 画面下拉菜单的取得
		getSysCodeInfoList();
	}
	
	/**
	 * 题库管理模式的画面初期显示
	 * 
	 * @return SUCCESS
	 */
	public String manageInit() throws Exception {
		
		mode = TtConstants.C28.C28_1.value();

		// 画面启动限制检查
		TtCheckResult checkResult = k040011Service.checkStartupPerm(
				TtConstants.C28.C28_1.value(), null);
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			return ERROR;
		}

		questionUiModel = TtConstants.C28.C28_1.value();
		questionType = TtConstants.R02.R02_1.value();

		// 分类下拉菜单
		// 不进行一览检索，且一览表头不可见。
		sltCategory1Enable = "1";
		sltCategory2Enable = "1";
		sltCategory3Enable = "1";
				
		// 操作返回模式
		operateReloadMode();
		
		// 初始值设定
		if (searchInfo == null) {
			searchInfo = new K040011SearchInfo();
			searchInfo.setQuestionUiModel(this.questionUiModel);
			searchInfo.setQuestionType(TtConstants.R02.R02_1.toString());
		}

		// 根据条件取得检索的件数
		super.setPagerParamter(k040011Service.getTotalCount(searchInfo),
				"k040011GetQuestionList");

		// 题库检索检索
		questLibrList = k040011Service.getQuestionInfos(searchInfo, pager
				.getOffset().intValue(), pager.getPerDisplayCount().intValue());
		return SUCCESS;
	}

	/**
	 * 练习选题模式的画面初期显示
	 * 
	 * @return SUCCESS
	 */
	@InputConfig(resultName = "error")
	public String practiseInit() throws Exception {
		
		mode = TtConstants.C28.C28_2.value();

		// 画面启动限制检查
		TtCheckResult checkResult = k040011Service.checkStartupPerm(
				TtConstants.C28.C28_2.value(), paperId);
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			return ERROR;
		}
		questionUiModel = TtConstants.C28.C28_2.value();
		questionType = TtConstants.R02.R02_2.value();
		
		// 操作返回模式
		operateReloadMode();

		// 初始值设定
		if (searchInfo == null) {
			searchInfo = new K040011SearchInfo();
			searchInfo.setQuestionType(TtConstants.R02.R02_2.toString());
		}
		
		// 分类下拉菜单设置及题库信息检索
		pracExamCategory();

		return SUCCESS;
	}

	/**
	 * 练习选题模式的画面初期显示参数校验
	 */
	public void validatePractiseInit() {

		// 接口参数校验
		inputParaVal();
	}

	/**
	 * 考试选题模式的画面初期显示
	 * 
	 * @return SUCCESS
	 */
	public String examineInit() throws Exception {
		
		mode = TtConstants.C28.C28_3.value();

		// 画面启动限制检查
		TtCheckResult checkResult = k040011Service.checkStartupPerm(
				TtConstants.C28.C28_3.value(), paperId);
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			return ERROR;
		}

		questionUiModel = TtConstants.C28.C28_3.value();
		questionType = TtConstants.R02.R02_1.value();
		
		// 操作返回模式
		operateReloadMode();

		// 初始值设定
		if (searchInfo == null) {
			searchInfo = new K040011SearchInfo();
			searchInfo.setQuestionType(TtConstants.R02.R02_1.toString());
		}

		// 分类下拉菜单设置及题库信息检索
		pracExamCategory();
		return SUCCESS;
	}

	/**
	 * 考试选题模式的画面初期显示参数校验
	 */
	public void validateExamineInit() {

		// 接口参数校验
		inputParaVal();
	}

	/**
	 * 接口参数校验
	 */
	private void inputParaVal() {
		// 试卷ID
		if (null == paperId || "".equals(paperId)) {
			errorMessage = propMgr.getMessage("yds.com.warning.0001", "接口参数");
			this.addActionError("error");
		}

		// 分类ID
		if (null == category1Id || null == category2Id || null == category3Id) {
			errorMessage = propMgr.getMessage("yds.com.warning.0001", "接口参数");
			this.addActionError("error");
		}
	}

	/**
	 * 取得画面下拉菜单的值
	 */
	private void getSysCodeInfoList() {
		// 取得题库类型集合
		this.questionTypeList = sysCodeInfoService.getSysCodeInfo(R02
				.getEnumName());
		// 取得题库题型集合
		this.questionKindList = sysCodeInfoService.getSysCodeInfo(R03
				.getEnumName(), "");
		// 取得题型难度集合
		this.questionDifficultyList = sysCodeInfoService.getSysCodeInfo(E01
				.getEnumName(), "");
		// 取得核对状态集合
		this.checkFlgList = sysCodeInfoService.getSysCodeInfo(
				R04.getEnumName(), "");
	}

	/**
	 * 练习选题和考试选题分类下拉菜单设置及题库信息检索
	 */
	private void pracExamCategory() {
		// 分类下拉菜单
		// 不进行一览检索，且一览表头不可见。
		if (category1Id != 0) {
			sltCategory1Enable = "0";
		} else {
			sltCategory1Enable = "1";
		}
		if (category2Id != 0) {
			sltCategory2Enable = "0";
		} else {
			sltCategory2Enable = "1";
		}
		if (category3Id != 0) {
			sltCategory3Enable = "0";
		} else {
			sltCategory3Enable = "1";
		}

		if (null == searchInfo) {
			searchInfo = new K040011SearchInfo();
		}
		searchInfo.setCategory1Id(category1Id);
		searchInfo.setCategory2Id(category2Id);
		searchInfo.setCategory3Id(category3Id);
		if (null != questionKind){
			searchInfo.setQuestionKind(questionKind);
		}

		// 试题类型设置
		if (TtConstants.C28.C28_2.value() == questionUiModel) {
			searchInfo.setQuestionType(String.valueOf(TtConstants.R02.R02_2
					.value()));
		} else if (TtConstants.C28.C28_3.value() == questionUiModel) {
			searchInfo.setQuestionType(String.valueOf(TtConstants.R02.R02_1
					.value()));
		}

		// 根据条件取得检索的件数
		super.setPagerParamter(k040011Service.getTotalCount(searchInfo),
				"k040011GetQuestionList");

		// 题库信息检索
		questLibrList = k040011Service.getQuestionInfos(searchInfo, pager
				.getOffset().intValue(), pager.getPerDisplayCount().intValue());

	}

	/**
	 * 检索处理
	 * 
	 * @return SUCCESS
	 */
	public String questionSearch() {

		TtCheckResult checkResult = k040011Service.checkStartupPerm(
				mode, paperId);
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			return ERROR;
		}

		// String关键字拆分
		// 关键字不为空时
		searchInfo.setQuestionUiModel(questionUiModel);
		if(category1Id != null && category1Id != 0){
			searchInfo.setCategory1Id(category1Id);		
		}
		if(category2Id != null && category2Id != 0){
			searchInfo.setCategory2Id(category2Id);			
		}
		if(category3Id != null && category3Id != 0){
			searchInfo.setCategory3Id(category3Id);			
		}

		// 试题类型设置
		if (TtConstants.C28.C28_2.value() == questionUiModel) {
			searchInfo.setQuestionType(String.valueOf(TtConstants.R02.R02_2
					.value()));
		} else if (TtConstants.C28.C28_3.value() == questionUiModel) {
			searchInfo.setQuestionType(String.valueOf(TtConstants.R02.R02_1
					.value()));
		}

		// 关键字设置
		if (null != searchInfo.getKeyword()) {
			if (!searchInfo.getKeyword().isEmpty()) {
				searchInfo.setKeywordList(searchInfo.getKeyword().split(" "));
			}
		}

		// 根据条件取得检索的件数
		super.setPagerParamter(k040011Service.getTotalCount(searchInfo),
				"k040011GetQuestionList");

		// 题库检索检索
		questLibrList = k040011Service.getQuestionInfos(searchInfo, pager
				.getOffset().intValue(), pager.getPerDisplayCount().intValue());

		// 记住检索条件
		searchInfo.setPageNum(pageNumber);
		searchInfo.setPageOffset(pager.getOffset());
		Session.set(SessionConstants.TT_K040011_SEARCHINFO, searchInfo);
		
		return SUCCESS;
	}

	/**
	 * 取得关键字
	 * 
	 * @return SUCCESS
	 */
	public String keywordGet() {
		
		this.keywordList = k040011Service.getKeywordList(category1Id);
		return SUCCESS;
	}
	
	/**
	 * 操作返回模式
	 */
	private void operateReloadMode(){
		if ("1".equals(getReloadFlg())) {
			K040011SearchInfo sessionK040011Info = (K040011SearchInfo) Session
					.get(SessionConstants.TT_K040011_SEARCHINFO);
			if (sessionK040011Info != null) {
				searchInfo = sessionK040011Info;
				category1Id = searchInfo.getCategory1Id();
				category2Id = searchInfo.getCategory2Id();
				category3Id = searchInfo.getCategory3Id();
				pageNumber = searchInfo.getPageNum();
				setPagerParamter(k040011Service.getTotalCount(searchInfo),
						"k040011GetQuestionList");
				pager.setOffset(searchInfo.getPageOffset());
				// questionSearch();
			}
		}
	}
	/**
	 * @param sysCodeInfoService
	 *            the sysCodeInfoService to set
	 */
	public void setSysCodeInfoService(SysCodeInfoService sysCodeInfoService) {
		this.sysCodeInfoService = sysCodeInfoService;
	}

	/**
	 * @return the QuestionInfoList
	 */
	public List<SysCodeInfo> getQuestionTypeList() {
		return questionTypeList;
	}

	/**
	 * @param questionTypeList
	 *            the questionTypeList to set
	 */
	public void setQuestionTypeList(List<SysCodeInfo> questionTypeList) {
		this.questionTypeList = questionTypeList;
	}

	/**
	 * @return the questionKindList
	 */
	public List<SysCodeInfo> getQuestionKindList() {
		return questionKindList;
	}

	/**
	 * @param questionKindList
	 *            the questionKindList to set
	 */
	public void setQuestionKindList(List<SysCodeInfo> questionKindList) {
		this.questionKindList = questionKindList;
	}

	/**
	 * @return the category1Id
	 */
	public Integer getCategory1Id() {
		return category1Id;
	}

	/**
	 * @param category1Id
	 *            the category1Id to set
	 */
	public void setCategory1Id(Integer category1Id) {
		this.category1Id = category1Id;
	}

	/**
	 * @return the category2Id
	 */
	public Integer getCategory2Id() {
		return category2Id;
	}

	/**
	 * @param category2Id
	 *            the category2Id to set
	 */
	public void setCategory2Id(Integer category2Id) {
		this.category2Id = category2Id;
	}

	/**
	 * @return the category3Id
	 */
	public Integer getCategory3Id() {
		return category3Id;
	}

	/**
	 * @param category3Id
	 *            the category3Id to set
	 */
	public void setCategory3Id(Integer category3Id) {
		this.category3Id = category3Id;
	}

	/**
	 * @return the questionDifficultyList
	 */
	public List<SysCodeInfo> getQuestionDifficultyList() {
		return questionDifficultyList;
	}

	/**
	 * @param questionDifficultyList
	 *            the questionDifficultyList to set
	 */
	public void setQuestionDifficultyList(
			List<SysCodeInfo> questionDifficultyList) {
		this.questionDifficultyList = questionDifficultyList;
	}

	/**
	 * @return the checkFlgList
	 */
	public List<SysCodeInfo> getCheckFlgList() {
		return checkFlgList;
	}

	/**
	 * @param checkFlgList
	 *            the checkFlgList to set
	 */
	public void setCheckFlgList(List<SysCodeInfo> checkFlgList) {
		this.checkFlgList = checkFlgList;
	}

	/**
	 * @return the questionUiModel
	 */
	public Integer getQuestionUiModel() {
		return questionUiModel;
	}

	/**
	 * @param questionUiModel
	 *            the questionUiModel to set
	 */
	public void setQuestionUiModel(Integer questionUiModel) {
		this.questionUiModel = questionUiModel;
	}

	/**
	 * @param service
	 *            the k040011Service to set
	 */
	public void setK040011Service(K040011Service service) {
		k040011Service = service;
	}

	/**
	 * @return the errorMessage
	 */
	public String getErrorMessage() {
		return errorMessage;
	}

	/**
	 * @param errorMessage
	 *            the errorMessage to set
	 */
	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}

	/**
	 * @return the sltCategory1Enable
	 */
	public String getSltCategory1Enable() {
		return sltCategory1Enable;
	}

	/**
	 * @param sltCategory1Enable
	 *            the sltCategory1Enable to set
	 */
	public void setSltCategory1Enable(String sltCategory1Enable) {
		this.sltCategory1Enable = sltCategory1Enable;
	}

	/**
	 * @return the sltCategory2Enable
	 */
	public String getSltCategory2Enable() {
		return sltCategory2Enable;
	}

	/**
	 * @param sltCategory2Enable
	 *            the sltCategory2Enable to set
	 */
	public void setSltCategory2Enable(String sltCategory2Enable) {
		this.sltCategory2Enable = sltCategory2Enable;
	}

	/**
	 * @return the sltCategory3Enable
	 */
	public String getSltCategory3Enable() {
		return sltCategory3Enable;
	}

	/**
	 * @param sltCategory3Enable
	 *            the sltCategory3Enable to set
	 */
	public void setSltCategory3Enable(String sltCategory3Enable) {
		this.sltCategory3Enable = sltCategory3Enable;
	}

	/**
	 * @return the paperId
	 */
	public String getPaperId() {
		return paperId;
	}

	/**
	 * @param paperId
	 *            the paperId to set
	 */
	public void setPaperId(String paperId) {
		this.paperId = paperId;
	}

	/**
	 * @return the searchInfo
	 */
	public K040011SearchInfo getSearchInfo() {
		return searchInfo;
	}

	/**
	 * @param searchInfo
	 *            the searchInfo to set
	 */
	public void setSearchInfo(K040011SearchInfo searchInfo) {
		this.searchInfo = searchInfo;
	}

	/**
	 * @return the questLibrList
	 */
	public List<QuestionLibrary> getQuestLibrList() {
		return questLibrList;
	}

	/**
	 * @param questLibrList
	 *            the questLibrList to set
	 */
	public void setQuestLibrList(List<QuestionLibrary> questLibrList) {
		this.questLibrList = questLibrList;
	}

	/**
	 * @return the keywordList
	 */
	public List<String> getKeywordList() {
		return keywordList;
	}

	/**
	 * @param keywordList
	 *            the keywordList to set
	 */
	public void setKeywordList(List<String> keywordList) {
		this.keywordList = keywordList;
	}

	/**
	 * @return the mode
	 */
	public int getMode() {
		return mode;
	}

	/**
	 * @param mode the mode to set
	 */
	public void setMode(int mode) {
		this.mode = mode;
	}

	/**
	 * @return the questionKind
	 */
	public Integer getQuestionKind() {
		return questionKind;
	}

	/**
	 * @param questionKind the questionKind to set
	 */
	public void setQuestionKind(Integer questionKind) {
		this.questionKind = questionKind;
	}

	/**
	 * @param questionType the questionType to set
	 */
	public void setQuestionType(Integer questionType) {
		this.questionType = questionType;
	}

	/**
	 * @return the questionType
	 */
	public Integer getQuestionType() {
		return questionType;
	}

}
