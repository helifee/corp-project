/*
 * @(#)K060071Action.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 考试
 */
package com.yds.tt.testing.action;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.opensymphony.xwork2.Preparable;
import com.yds.base.action.AbstractBaseAction;
import com.yds.common.bean.SysCodeInfo;
import com.yds.common.service.SysCodeInfoService;
import com.yds.tt.manager.bean.EmpOrgInfo;
import com.yds.tt.manager.bean.TtCheckResult;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.manager.service.TtExclusiveException;
import com.yds.tt.testing.bean.ExamineInfo;
import com.yds.tt.testing.bean.TestPaperInfo;
import com.yds.tt.testing.service.K060071Service;
import com.yds.tt.training.bean.CourseInfo;

/**
 * 考试详细(管理)
 * 
 * @author zhangaijun
 * @version 1.00 2010/04/12
 */
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@Controller("k060071Action")
public class K060071Action extends AbstractBaseAction implements Preparable{

	private static final long serialVersionUID = 4961690651166407721L;
	// 操作类型：保存
	private static final String OPERATION_SAVE = "save";
	// 操作类型：提交审批
	private static final String OPERATION_APPLY = "apply";
	// 默认开始时间
	private static final String DEFAULT_STARTTIME = "00:00";
	// 默认结束时间
	private static final String DEFAULT_ENDTIME = "23:59";
	
	//接口参数
	/** 考试ID */
	private String paramTestId;
	/** 启动画面ID */
	private String prePageId;
	
	/** 画面操作模式 */
	private String operatMode;
	/** 错误信息 */
	private String errorMessage;
	/** 提示信息 */
	private String fieldinfo;
	/** 父考试Id */
	private String parentExamineId;
	/** 画面选中课程Id */
	private String selectedCourseId;
	/** 画面选中考试Id */
	private String selectedExamineId;

	//业务定义
	/** 区分业务 */
	private SysCodeInfoService sysCodeInfoService;
	/** 本画面业务 */
	private K060071Service k060071Service;
	/** 共通业务 */
	private TtCommonService ttCommonService;
	
	//业务bean
	/** 考试信息表 */
	private ExamineInfo examineInfo;
	
	//画面用list
	/** 针对对象下拉框*/
	private List<SysCodeInfo> objectTypeList;
	/** 项目组下拉框*/
	private List<EmpOrgInfo> projectList;
	/** 工龄下拉框*/
	private List<SysCodeInfo> yearList;
	/** 所选试卷一览*/
	private List<TestPaperInfo>  testPaperInfoList;
	/** 需要通过的考试*/
	private List<ExamineInfo>  examineInfoList;
	/** 需要学习的课程*/
	private List<CourseInfo>  courseInfoList;
	
	/** 项目组ID*/
	private String projectId;
	/** 工龄*/
	private String year;
	/** 针对对象人员ID*/
	private String strUserIdList;
	/** 针对对象人员名*/
	private String strUserNameList;
	
	private Boolean ckbCheckAnswerFlg;
	private Boolean ckbMustExamineFlg;
	private Boolean ckbApplyConfirmFlg;

	/** 需要移除的试卷ID的行号*/
	private Integer removePaperNo;
	/** 考试审批状态名称*/
	private String confirmStatusName;
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public void prepare() throws Exception {
		
		// 画面下拉框的初期化
		initDropList();
	}	
	
	/**
	 * 查看模式初期化
	 * 
	 * @return SUCCESS
	 * @throws Exception 
	 */
	public String initView() throws Exception
	{	

		// 取得最新考试信息
		examineInfo =k060071Service.getExamineInfo(paramTestId,TtConstants.C20.C20_1.toString());
		// 查看模式画面启动控制
		TtCheckResult result = checkAuthority(String.valueOf(TtConstants.C20.C20_1));
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			if ("GTE01".equals(result.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;	
			}
		}
		// 查看模式检索考试信息
		if(!searchExamineInfo(paramTestId,String.valueOf(TtConstants.C20.C20_1))){
			return ERROR;
		}
		return SUCCESS;
	}
	
	/**
	 * 编辑模式初期化
	 * 
	 * @return SUCCESS
	 * @throws Exception 
	 */
	public String initEdit() throws Exception
	{	
		// 取得最新考试信息
		examineInfo =k060071Service.getExamineInfo(paramTestId,TtConstants.C20.C20_1.toString());
		// 编辑模式画面启动控制
		TtCheckResult result = checkAuthority(String.valueOf(TtConstants.C20.C20_2));
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			if ("GTE01".equals(result.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;	
			}
		}
		// 编辑模式检索考试信息
		if(!searchExamineInfo(paramTestId,String.valueOf(TtConstants.C20.C20_2))){
			return ERROR;
		}

		return SUCCESS;
	}
	
	/**
	 * 调整模式初期化
	 * 
	 * @return SUCCESS
	 * @throws Exception 
	 */
	public String initRepair() throws Exception
	{
		// 取得最新考试信息
		examineInfo =k060071Service.getExamineInfo(paramTestId,TtConstants.C20.C20_1.toString());
		// 调整模式画面启动控制
		TtCheckResult result = checkAuthority(String.valueOf(TtConstants.C20.C20_5));
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			if ("GTE01".equals(result.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;	
			}
		}
		// 调整模式检索考试信息
		if(!searchExamineInfo(paramTestId,String.valueOf(TtConstants.C20.C20_5))){
			return ERROR;
		}

		return SUCCESS;
	}	

	/**
	 * 审批模式初期化
	 * 
	 * @return SUCCESS
	 * @throws Exception 
	 */
	public String initApprove() throws Exception
	{
		// 取得最新考试信息
		examineInfo =k060071Service.getExamineInfo(paramTestId,TtConstants.C20.C20_1.toString());
		// 调整模式画面启动控制
		TtCheckResult result = checkAuthority(String.valueOf(TtConstants.C20.C20_3));
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			if ("GTE01".equals(result.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;	
			}
		}
		// 审批模式检索考试信息
		if(!searchExamineInfo(paramTestId,String.valueOf(TtConstants.C20.C20_3))){
			return ERROR;
		}

		return SUCCESS;
	}
	
	/**
	 * 删除模式初期化
	 * 
	 * @return SUCCESS
	 * @throws Exception 
	 */
	public String initDelete() throws Exception
	{
		// 取得最新考试信息
		examineInfo =k060071Service.getExamineInfo(paramTestId,TtConstants.C20.C20_1.toString());
		// 删除模式画面启动控制
		TtCheckResult result = checkAuthority(String.valueOf(TtConstants.C20.C20_4));
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			if ("GTE01".equals(result.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;	
			}
		}
		// 删除模式检索考试信息
		if(!searchExamineInfo(paramTestId,String.valueOf(TtConstants.C20.C20_4))){
			return ERROR;
		}

		return SUCCESS;
	}
	
	/**
	 * 更新考试信息
	 * 
	 * @return SUCCESS
	 * @throws Exception 
	 */
	public String updateExamineInfo() throws Exception {
		
		paramTestId = examineInfo.getExamineId();
		
		// 画面启动控制
		TtCheckResult result = checkAuthority(operatMode);
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			if ("GTE01".equals(result.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;	
			}
		}
		
		try{
			if(String.valueOf(TtConstants.C20.C20_2).equals(operatMode)){
				// 如果是编辑模式,读取checkbox的值，读取针对对象的值
				this.resetValueFromPage();
			
				// 更新考试信息
				k060071Service.updateExamineInfo(examineInfo,examineInfoList,courseInfoList,
						testPaperInfoList,this.getStrUserIdList());
			}else{
				// 调整模式更新
				k060071Service.updateExamineInfo(examineInfo);
			}
	
			// 更新成功
			errorMessage = propMgr.getMessage("yds.com.info.0009");
			putOpTip(errorMessage);
			
		}catch(TtExclusiveException e){
			errorMessage = e.getMessage();
			return ERROR;
		}
		 
		return SUCCESS;
	}
	
	/**
	 * 提交审批考试信息
	 * 
	 * @return SUCCESS
	 * @throws Exception 
	 */
	public String applyExamineInfo() throws Exception {
		
		paramTestId = examineInfo.getExamineId();
		
		// 画面启动控制
		TtCheckResult result = checkAuthority(operatMode);
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			if ("GTE01".equals(result.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;	
			}
		}
		
		try{
			// 读取checkbox的值，读取针对对象的值
			this.resetValueFromPage();
			
			// 提交审批
			k060071Service.updateApplyExamineInfo(examineInfo,examineInfoList,courseInfoList,
					testPaperInfoList,this.getStrUserIdList());

		}catch(TtExclusiveException e){
			errorMessage = e.getMessage();
			return ERROR;
		}
		
		return SUCCESS;
	}	
	
	/**
	 * 不批准
	 */
	public String unApproveExamineInfo() throws Exception {
		
		paramTestId = examineInfo.getExamineId();
		
		// 画面启动控制
		TtCheckResult result = checkAuthority(operatMode);
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			if ("GTE01".equals(result.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;	
			}
		}
		
		try{
			k060071Service.updateUnApproveExamineInfo(examineInfo);
		}catch(TtExclusiveException e){
			errorMessage = e.getMessage();
			return ERROR;
		}

		return SUCCESS;
	}	

	/**
	 * 批准
	 */
	public String approveExamineInfo() throws Exception {
		
		paramTestId = examineInfo.getExamineId();
		
		// 画面启动控制
		TtCheckResult result = checkAuthority(operatMode);
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			if ("GTE01".equals(result.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;	
			}
		}
		try{
			k060071Service.updateApproveExamineInfo(examineInfo);
		}catch(TtExclusiveException e){
			errorMessage = e.getMessage();
			return ERROR;
		}
		return SUCCESS;
	}	
	
	/**
	 * 取消批准
	 */
	public String cancelExamineInfo() throws Exception {
		
		paramTestId = examineInfo.getExamineId();
		// 画面启动控制
		TtCheckResult result = checkAuthority(operatMode);
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			if ("GTE01".equals(result.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;	
			}
		}
		try{
			k060071Service.updateCancelExamineInfo(examineInfo);
		}catch(TtExclusiveException e){
			errorMessage = e.getMessage();
			return ERROR;
		}
		return SUCCESS;
	}
	
	/**
	 * 删除考试
	 */
	public String deleteExamineInfo() throws Exception {
		
		
		paramTestId = examineInfo.getExamineId();
		parentExamineId = examineInfo.getParentExamineId();
		// 画面启动控制
		TtCheckResult result = checkAuthority(operatMode);
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			if ("GTE01".equals(result.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;	
			}
		}
		
		//删除可否判断
		if (examineInfo.getExamineStatus()!=TtConstants.R12.R12_1.value()
				&& examineInfo.getExamineStatus()!=TtConstants.R12.R12_2.value()
				&& examineInfo.getExamineStatus()!=TtConstants.R12.R12_4.value()
				) {
			errorMessage = propMgr.getMessage("yds.tt.error.KSE45");
			return ERROR;
		}

		try{
			// 删除考试及相关信息
			k060071Service.deleteExamineInfo(paramTestId);
		}catch(TtExclusiveException e){
			errorMessage = e.getMessage();
			return ERROR;
		}
		return SUCCESS;
	}
	
	/**
	 * 再编辑
	 */
	public String reEditExamineInfo() throws Exception {
		
		paramTestId = examineInfo.getExamineId();
		// 画面启动控制
		TtCheckResult result = checkAuthority(operatMode);
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			if ("GTE01".equals(result.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;	
			}
		}
		try{
			k060071Service.updateReEditExamineInfo(examineInfo);
		}catch(TtExclusiveException e){
			errorMessage = e.getMessage();
			return ERROR;
		}
		return SUCCESS;
	}
	
	/**
	 * 移除试卷
	 */
	public String removeSelectedPaper() throws Exception {
		// 画面启动控制
		TtCheckResult result = checkAuthority(operatMode);
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			if ("GTE01".equals(result.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;	
			}
		}	
		testPaperInfoList.remove(removePaperNo.intValue());
		
		// 移除试卷
		k060071Service.updateSelectedPaper(examineInfo.getExamineId(), testPaperInfoList);

		return SUCCESS;
	}
	
	/**
	 * 选择试卷画面点击选择
	 */
	public String selectePaperCallBack() throws Exception {
		// 画面启动控制
		TtCheckResult result = checkAuthority(operatMode);
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			if ("GTE01".equals(result.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;	
			}
		}
		
		// 所选试卷一览检索
		testPaperInfoList = k060071Service.getSelectedPaperList(paramTestId);
		
		return SUCCESS;
	}
	
	/**
	 * 课程选择画面点击选择回调方法
	 */
	public String selecteCourseCallBack() throws Exception {
		// 画面启动控制
		TtCheckResult result = checkAuthority(operatMode);
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			if ("GTE01".equals(result.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;
			}
		}
		
		// 所需课程一览检索
		courseInfoList = k060071Service.getSelectedCourse(paramTestId);
		
		return SUCCESS;
	}
	
	/**
	 * 移除课程
	 */
	public String removeCourse() throws Exception {
		// 画面启动控制
		TtCheckResult result = checkAuthority(operatMode);
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			if ("GTE01".equals(result.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;
			}
		}
		// 移除选中课程
		k060071Service.updateSelectedCourse(paramTestId, selectedCourseId);
		
		// 所需课程一览检索
		courseInfoList = k060071Service.getSelectedCourse(paramTestId);
		
		return SUCCESS;
	}

	/**
	 * 考试选择画面点击选择回调方法
	 */
	public String selecteExamineCallBack() throws Exception {
		// 画面启动控制
		TtCheckResult result = checkAuthority(operatMode);
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			if ("GTE01".equals(result.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;
			}
		}
		
		// 所需考试一览检索
		examineInfoList = k060071Service.getSelectedExamine(paramTestId);
		
		return SUCCESS;
	}

	/**
	 * 移除考试
	 */
	public String removeExamine() throws Exception {
		// 画面启动控制
		TtCheckResult result = checkAuthority(operatMode);
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			if ("GTE01".equals(result.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;
			}
		}
		
		// 移除考试 
		k060071Service.updateSelectedExamine(paramTestId, selectedExamineId);
		
		// 所需考试一览检索
		examineInfoList = k060071Service.getSelectedExamine(paramTestId);
		
		return SUCCESS;
	}
	
	/**
	 * 检索考试信息
	 * param examineId 考试ID
	 * param mode 画面模式
	 */
	private boolean searchExamineInfo(String examineId,String mode) throws Exception{

		// 取得最新考试信息
		examineInfo =k060071Service.getExamineInfo(examineId,mode);
		
		if(null == examineInfo){
			// 考试不存在
			errorMessage = propMgr.getMessage("yds.tt.error.KSE25",examineId);
			return false;
		}
		// 考试状态不是待审批时
		if (TtConstants.R12.R12_2.value() != examineInfo.getExamineStatus()) {
			// 画面模式设置为查看模式
			operatMode = TtConstants.C20.C20_1.toString();
		}
		
		// 保存时间戳
		ttCommonService.setTimestamp(TtConstants.PageId.K060071, examineInfo.getUpdateTime());
		
		// 设定checkbox的值，设定针对对象的值
		this.resetValueToPage();
		
		// 所选试卷一览检索
		testPaperInfoList = k060071Service.getSelectedPaperList(examineId);
		
		// 所需考试一览检索
		examineInfoList = k060071Service.getSelectedExamine(examineId);

		// 所需课程一览检索
		courseInfoList = k060071Service.getSelectedCourse(examineId);
		
		// 设置画面模式
		this.setOperatMode(mode);
		
		return true;
	}
	
	/**
	 * 画面下拉框的初期化
	 * 
	 */
	private void initDropList() throws Exception {
		
		// 项目组下拉框
		projectList = ttCommonService.getOrgList();
		
		// 针对对象下拉框初期检索
		objectTypeList = sysCodeInfoService.getSysCodeInfo(TtConstants.C12.getEnumName());
		
		// 工龄下拉框初期检索
		yearList = sysCodeInfoService.getSysCodeInfo(TtConstants.R14.getEnumName());
		
	}
	
	/**
	 * 设定checkbox的值，设定针对对象的值
	 */
	private void resetValueToPage() throws Exception{
		
		// 针对对象区分
		int objectTypeId = examineInfo.getObjectType();
		// 针对对象值
		String objectValue = examineInfo.getObjectValue();

		if (TtConstants.C12.C12_2.value()== objectTypeId){
			// 针对项目组
			this.setProjectId(objectValue);
		}else if(TtConstants.C12.C12_3.value()== objectTypeId){
			// 针对工龄
			this.setYear(objectValue);
		}else if(TtConstants.C12.C12_4.value()== objectTypeId){
			// 当针对对象为个人时,针对对象人员检索
			String[] userList = k060071Service.getUserList(examineInfo.getExamineId());
			this.setStrUserIdList(userList[0]);
			this.setStrUserNameList(userList[1]);
		}
		
		// 参阅答案标志
		if(TtConstants.C09.C09_2.value() == examineInfo.getCheckAnswerFlg()){
			ckbCheckAnswerFlg = true;
		}else{
			ckbCheckAnswerFlg = false;
		}
		// 必须考试标志
		if(TtConstants.C11.C11_2.value() == examineInfo.getMustExamineFlg()){
			ckbMustExamineFlg = true;
		}else{
			ckbMustExamineFlg = false;
		}
		// 报名批准标志
		if(TtConstants.C13.C13_2.value() == examineInfo.getApplyConfirmFlg()){
			ckbApplyConfirmFlg = true;
		}else{
			ckbApplyConfirmFlg = false;
		}
	}		 
		
	/**
	 * 读取checkbox的值，读取针对对象的值
	 */
	private void resetValueFromPage() throws Exception{
		
		// 参阅答案标志
		if(ckbCheckAnswerFlg){
			examineInfo.setCheckAnswerFlg(TtConstants.C09.C09_2.value());
		}else{
			examineInfo.setCheckAnswerFlg(TtConstants.C09.C09_1.value());
		}
		// 必考标志
		if(ckbMustExamineFlg){
			examineInfo.setMustExamineFlg(TtConstants.C11.C11_2.value());
		}else{
			examineInfo.setMustExamineFlg(TtConstants.C11.C11_1.value());
		}
		// 报名批准标志
		if(ckbApplyConfirmFlg){
			examineInfo.setApplyConfirmFlg(TtConstants.C13.C13_2.value());
		}else{
			examineInfo.setApplyConfirmFlg(TtConstants.C13.C13_1.value());
		}
		
		// 针对对象区分
		int objectTypeId = examineInfo.getObjectType();
		
		if (TtConstants.C12.C12_2.value() == objectTypeId){
			// 针对项目组
			examineInfo.setObjectValue(projectId);
		}else if(TtConstants.C12.C12_3.value() == objectTypeId){
			// 针对工龄
			examineInfo.setObjectValue(year);
		}else{
			// 其他
			examineInfo.setObjectValue("");
		}
	}	
	
	/**
	 * 画面启动控制检查
	 * @param mode 画面启动模式
	 * 
	 */
	private TtCheckResult checkAuthority(String mode){
		
		List<String> objectId = new ArrayList<String>();
		
		objectId.add(examineInfo.getParentExamineId());
		
		TtCheckResult checkResult = new TtCheckResult();
		
		// 查看模式
		if(String.valueOf(TtConstants.C20.C20_1).equals(mode)){
			// 权限检查
			checkResult = ttCommonService.checkStartupAuthority(
					TtConstants.PageId.K060071.value(), "K060071_1",
					TtConstants.C43.C43_3.value(), objectId);
		}
		// 编辑模式
		if(String.valueOf(TtConstants.C20.C20_2).equals(mode)){
			// 权限检查
			checkResult = ttCommonService.checkStartupAuthority(
					TtConstants.PageId.K060071.value(), "K060071_1", 
					TtConstants.C43.C43_3.value(), objectId);
		}
		// 调整模式
		if(String.valueOf(TtConstants.C20.C20_5).equals(mode)){
			// 权限检查
			checkResult = ttCommonService.checkStartupAuthority(
					TtConstants.PageId.K060071.value(), "K060071_2", 
					TtConstants.C43.C43_3.value(), objectId);

		}
		// 审批模式
		else if(String.valueOf(TtConstants.C20.C20_3).equals(mode)){
			// 权限检查
			checkResult = ttCommonService.checkStartupAuthority(
					TtConstants.PageId.K060071.value(), "K060071_2", 
					TtConstants.C43.C43_3.value(), objectId);
		}
		
		// 删除模式
		else if(String.valueOf(TtConstants.C20.C20_4).equals(mode)){
			// 权限检查
			checkResult = ttCommonService.checkStartupAuthority(
					TtConstants.PageId.K060071.value(), "K060071_1", 
					TtConstants.C43.C43_3.value(), objectId);
		}
		
		return checkResult;
	}	
	
	/**
	 * 删除按钮的校验
	 */
	public void validateDeleteExamineInfo(){
		// 画面一览项目初期化
		try {
			initDropList();
			// 所选试卷一览
			if (testPaperInfoList == null) {
				testPaperInfoList = new ArrayList<TestPaperInfo>();
			}
			
			// 所需考试一览
			if (examineInfoList == null) {
				examineInfoList = new ArrayList<ExamineInfo>();
			} 

			// 所需课程一览
			if (courseInfoList == null) {
				courseInfoList = new ArrayList<CourseInfo>();
			}
			
		} catch (Exception e) {
			errorMessage = e.getMessage();
		}

		// 检查当前考试状态是否是<待审批>、<考试不批准>、<编辑中>，如果不是提示错误信息
		if(!(TtConstants.R12.R12_2.value()==examineInfo.getExamineStatus()||
				TtConstants.R12.R12_3.value()==examineInfo.getExamineStatus()||
				TtConstants.R12.R12_1.value()==examineInfo.getExamineStatus())){
			addFieldError("",propMgr.getMessage("yds.tt.error.KSE45"));
		}
	}
	
	/**
	 * 保存按钮的校验
	 * @throws ParseException 
	 */
	public void validateUpdateExamineInfo() throws ParseException{
		
		// 画面一览项目初期化
		try {
			initDropList();
			// 所选试卷一览
			if (testPaperInfoList == null) {
				testPaperInfoList = new ArrayList<TestPaperInfo>();
			}
			
			// 所需考试一览
			if (examineInfoList == null) {
				examineInfoList = new ArrayList<ExamineInfo>();
			} 

			// 所需课程一览
			if (courseInfoList == null) {
				courseInfoList = new ArrayList<CourseInfo>();
			}
			
		} catch (Exception e) {
			errorMessage = e.getMessage();
		}
		
		// 时间相关检查
		checkExamineTimes(OPERATION_SAVE);
		
	 	// 试卷相关检查
	 	checkPapers(OPERATION_SAVE);
	}

	/**
	 * 提交按钮的校验
	 * @throws ParseException 
	 */
	public void validateApplyExamineInfo() throws ParseException{
		
		// 画面出错画面项目初期化
		try {
			initDropList();
			// 所选试卷一览
			if (testPaperInfoList == null) {
				testPaperInfoList = new ArrayList<TestPaperInfo>();
			}
			
			// 所需考试一览
			if (examineInfoList == null) {
				examineInfoList = new ArrayList<ExamineInfo>();
			} 

			// 所需课程一览
			if (courseInfoList == null) {
				courseInfoList = new ArrayList<CourseInfo>();
			}
			
		} catch (Exception e) {
			errorMessage = e.getMessage();
		}

		// 针对对象校验
	 	if(examineInfo.getObjectType()==TtConstants.C12.C12_4.value()){
			if (strUserIdList.isEmpty() || "".equals(strUserIdList.trim())) {
				addFieldError("examineInfo.objectType",propMgr.getMessage("yds.tt.error.JYE14"));
			}
		}
	 	// 考试时间相关检查
	 	checkExamineTimes(OPERATION_APPLY);
	 	
	 	// 试卷相关检查
	 	checkPapers(OPERATION_APPLY);
	}
	
	/**
	 * 批准按钮的校验
	 * @throws ParseException 
	 */
	public void validateApproveExamineInfo() throws ParseException{
		// 画面出错画面项目初期化
		try {
			initDropList();
			// 所选试卷一览
			if (testPaperInfoList == null) {
				testPaperInfoList = new ArrayList<TestPaperInfo>();
			}
			
			// 所需考试一览
			if (examineInfoList == null) {
				examineInfoList = new ArrayList<ExamineInfo>();
			} 

			// 所需课程一览
			if (courseInfoList == null) {
				courseInfoList = new ArrayList<CourseInfo>();
			}
			
		} catch (Exception e) {
			errorMessage = e.getMessage();
		}
		DateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");
		// 如果考试标志为<普通考试>
		if(TtConstants.C08.C08_1.value()==examineInfo.getExamineFlg()){
			// 如果当前系统时间超过通知提醒日期，则提示错误信息。
			if(format1.format(new Date()).compareTo(format1.format(examineInfo.getExamineNotifyDate()))>0){
				addFieldError("",propMgr.getMessage("yds.tt.error.KSE60"));
			}
			// 如果当前系统时间超过报名截止日期，则提示错误信息。
			if(format1.format(new Date()).compareTo(format1.format(examineInfo.getApplyClosingDate()))>0){
				addFieldError("",propMgr.getMessage("yds.tt.error.KSE61"));
			}
		}else if(TtConstants.C08.C08_2.value()==examineInfo.getExamineFlg()){
			// 如果当前系统时间超过通知提醒日期，则提示错误信息。
			if(format1.format(new Date()).compareTo(format1.format(examineInfo.getExamineNotifyDate()))>0){
				addFieldError("",propMgr.getMessage("yds.tt.error.KSE60"));
			}
		}
	}
	
	/**
	 * 试卷相关检查
	 * 
	 * @param operation 触发检查的操作
	 */
	private void checkPapers (String operation) {
		// 试卷数量
		if (testPaperInfoList == null || testPaperInfoList.size() == 0) {
			if (OPERATION_APPLY.equals(operation)) {
				addFieldError("",propMgr.getMessage("yds.tt.error.KSE73"));
			}
			
			return;
		}
		
		// 总分
		int totalScore = testPaperInfoList.get(0).getPaperTotalScore() == null ? 0
				: testPaperInfoList.get(0).getPaperTotalScore();
		// 试卷列表相关信息检查
		for (TestPaperInfo paperInfo : testPaperInfoList) {
			// 试卷状态为未批准
			if (TtConstants.R10.R10_3.value() != paperInfo.getPaperStatus()) {
				// 提交审批操作时，出错
				if (OPERATION_APPLY.equals(operation)) {
					addFieldError("", propMgr.getMessage("yds.tt.error.KSE47"));
					break;
				} else if (OPERATION_SAVE.equals(operation)) {
					// 保存操作时，跳过
					continue;
				}
			}
			// 所选试卷分数不相同，则提示错误信息。
			if (totalScore != paperInfo.getPaperTotalScore()) {
				addFieldError("", propMgr.getMessage("yds.tt.error.KSE52"));
				break;
			}
			// 所选试卷答题时间不相同，则提示错误信息。
			int examineTime = (paperInfo.getPaperTime() == null || paperInfo
					.getPaperTime().isEmpty()) ? 0 : new Integer(paperInfo
					.getPaperTime());
			if (examineInfo.getExamineTime() < examineTime) {
				addFieldError("", propMgr.getMessage("yds.tt.error.KSE80"));
				break;
			}
		}
		
		// 设置总分
		examineInfo.setTotalScore(totalScore);
	}
	
	/**
	 * 考试时间相关检查
	 * 
	 * @param opration 触发检查的操作
	 */
	private void checkExamineTimes (String operation) throws ParseException{
		// 开始与结束日期
		StringBuffer startDate = new StringBuffer();
		StringBuffer endDate = new StringBuffer();
		Date dateStartDate = null;
		Date dateendDate = null;
		DateFormat format1 = new SimpleDateFormat("yyyy-MM-dd");
		DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		if (examineInfo.getExamineStartDate() == null) {
			addFieldError("examineInfo.examineStartDate", propMgr
					.getMessage("yds.com.warning.0001", "考试开始日期"));
			return;
		} 
		startDate.append(format1.format(examineInfo.getExamineStartDate()));
		// 整理开始与结束时间
		if (null != examineInfo.getExamineStartTimeStr()) {
			startDate.append(K060071Service.space);
			startDate.append(examineInfo.getExamineStartTimeStr());
			dateStartDate = format.parse(startDate.toString());
		} else {
			startDate.append(K060071Service.space).append(DEFAULT_STARTTIME);
			dateStartDate = format.parse(startDate.toString());
		}
		
		if (examineInfo.getExamineEndDate() == null) {
			examineInfo.setExamineEndDate(examineInfo.getExamineStartDate());
		}
		endDate.append(format1.format(examineInfo.getExamineEndDate()));
		if (null != examineInfo.getExamineEndTimeStr()) {
			endDate.append(K060071Service.space);
			endDate.append(examineInfo.getExamineEndTimeStr());
			dateendDate = format.parse(endDate.toString());
		} else {
			endDate.append(K060071Service.space).append(DEFAULT_ENDTIME);
			dateendDate = format.parse(endDate.toString());
		}
		

		// 考试时间为空时，设为0
		if (examineInfo.getExamineTime() == null) {
			examineInfo.setExamineTime(0);
		}

		// 考试开始时间必须小于结束时间，否则提示错误信息。
		if (dateStartDate.compareTo(dateendDate) >= 0) {
			addFieldError("examineInfo.examineStartDate", propMgr
					.getMessage("yds.tt.error.KSE48"));
		}
		// 考试开始时间与结束时间的间隔必须大于或等于考试时间，否则提示错误信息。
		long diff = dateendDate.getTime() - dateStartDate.getTime();
		if (diff / (60 * 1000) < examineInfo.getExamineTime()) {
			addFieldError("examineInfo.examineStartDate", propMgr
					.getMessage("yds.tt.error.KSE49"));
		}
		// 如果是调整模式
		if (String.valueOf(TtConstants.C20.C20_5).equals(operatMode)) {
			// 检索考试开始日时
			Date examineStartTime = k060071Service.getTimeForCheck(examineInfo
					.getExamineId());
			if (examineStartTime != null) {
				// 如果当前系统时间>=考试信息表.考试开始日时，则提示不能更改考考试信息
				//if (!examineStartTime.before(new Date())) {
				if (examineStartTime.before(new Date())) {
					addFieldError("", propMgr.getMessage("yds.tt.error.KSE64"));
				}
			}
			// 如果画面上的考试开始时间小于当前系统时间，则提示错误信息。
			if (format.format(dateStartDate).compareTo(
					format.format(new Date())) < 0) {
				addFieldError("examineInfo.examineStartDate", propMgr
						.getMessage("yds.tt.error.KSE69"));
			}
		}
		
		// 如果考试标志为<普通考试>
		if (TtConstants.C08.C08_1.value() == examineInfo.getExamineFlg()) {

			// 报名截止日期必须小于考试开始日期，否则提示错误信息。
			if (examineInfo.getApplyClosingDate().compareTo(
					examineInfo.getExamineStartDate()) >= 0) {
				addFieldError("examineInfo.examineStartDate", propMgr
						.getMessage("yds.tt.error.KSE50"));
			}

			// 只有编辑模式下才做此判断
			if (String.valueOf(TtConstants.C20.C20_2).equals(operatMode)) {
				// 通知提醒日期必须小于报名截止日期，否则提示错误信息。
				if (examineInfo.getExamineNotifyDate().compareTo(
						examineInfo.getApplyClosingDate()) >= 0) {
					addFieldError("examineInfo.examineNotifyDate", propMgr
							.getMessage("yds.tt.error.KSE51"));
				}
				// 通知提醒日期必须在当前日期之后，否则出错
				if (!examineInfo.getExamineNotifyDate().after(new Date())) {
					if (OPERATION_SAVE.equals(operation)) {
						addFieldError("examineInfo.examineNotifyDate", propMgr
								.getMessage("yds.tt.error.KSE79"));
					} else if (OPERATION_APPLY.equals(operation)) {
						addFieldError("examineInfo.examineNotifyDate",propMgr.getMessage("yds.tt.error.KSE62"));
					}
				}
			}
			// 随时考试
		} else if (TtConstants.C08.C08_2.value() == examineInfo.getExamineFlg()) {
			// 通知提醒日期必须小于考试开始日期，否则提示错误信息。
			if (examineInfo.getExamineNotifyDate().compareTo(
					examineInfo.getExamineStartDate()) >= 0) {
				addFieldError("examineInfo.examineStartDate", propMgr
						.getMessage("yds.tt.error.KSE70"));
			}
			// 只有编辑模式下才做此判断
			if (String.valueOf(TtConstants.C20.C20_2).equals(operatMode)) {
				// 通知提醒日期必须在当前日期之后，否则出错
				if (!examineInfo.getExamineNotifyDate().after(new Date())) {
					if (OPERATION_SAVE.equals(operation)) {
						addFieldError("examineInfo.examineNotifyDate", propMgr
								.getMessage("yds.tt.error.KSE79"));
					} else if (OPERATION_APPLY.equals(operation)) {
						addFieldError("examineInfo.examineNotifyDate",propMgr.getMessage("yds.tt.error.KSE62"));
					}
				}
			}
		// 试考试
		} else if (TtConstants.C08.C08_3.value() == examineInfo.getExamineFlg()) {
			// 如果画面上的考试开始时间小于当前系统时间，则提示错误信息。
			if (format.format(dateStartDate).compareTo(
					format.format(new Date())) < 0) {
				addFieldError("examineInfo.examineStartDate", propMgr
						.getMessage("yds.tt.error.KSE69"));
			}			
		}
	}
	
	/**
	 * @return the paramTestId
	 */
	public String getParamTestId() {
		return paramTestId;
	}

	/**
	 * @param paramTestId the paramTestId to set
	 */
	public void setParamTestId(String paramTestId) {
		this.paramTestId = paramTestId;
	}

	/**
	 * @return the prePageId
	 */
	public String getPrePageId() {
		return prePageId;
	}

	/**
	 * @param prePageId the prePageId to set
	 */
	public void setPrePageId(String prePageId) {
		this.prePageId = prePageId;
	}

	/**
	 * @return the operatMode
	 */
	public String getOperatMode() {
		return operatMode;
	}

	/**
	 * @param operatMode the operatMode to set
	 */
	public void setOperatMode(String operatMode) {
		this.operatMode = operatMode;
	}

	/**
	 * @return the errorMessage
	 */
	public String getErrorMessage() {
		return errorMessage;
	}

	/**
	 * @param errorMessage the errorMessage to set
	 */
	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}

	/**
	 * @return the fieldinfo
	 */
	public String getFieldinfo() {
		return fieldinfo;
	}

	/**
	 * @param fieldinfo the fieldinfo to set
	 */
	public void setFieldinfo(String fieldinfo) {
		this.fieldinfo = fieldinfo;
	}

	/**
	 * @return the sysCodeInfoService
	 */
	public SysCodeInfoService getSysCodeInfoService() {
		return sysCodeInfoService;
	}

	/**
	 * @param sysCodeInfoService the sysCodeInfoService to set
	 */
	public void setSysCodeInfoService(SysCodeInfoService sysCodeInfoService) {
		this.sysCodeInfoService = sysCodeInfoService;
	}

	/**
	 * @return the k060071Service
	 */
	public K060071Service getK060071Service() {
		return k060071Service;
	}

	/**
	 * @param service the k060071Service to set
	 */
	public void setK060071Service(K060071Service service) {
		k060071Service = service;
	}

	/**
	 * @return the ttCommonService
	 */
	public TtCommonService getTtCommonService() {
		return ttCommonService;
	}

	/**
	 * @param ttCommonService the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}

	/**
	 * @return the examineInfo
	 */
	public ExamineInfo getExamineInfo() {
		return examineInfo;
	}

	/**
	 * @param examineInfo the examineInfo to set
	 */
	public void setExamineInfo(ExamineInfo examineInfo) {
		this.examineInfo = examineInfo;
	}

	/**
	 * @return the objectTypeList
	 */
	public List<SysCodeInfo> getObjectTypeList() {
		return objectTypeList;
	}

	/**
	 * @param objectTypeList the objectTypeList to set
	 */
	public void setObjectTypeList(List<SysCodeInfo> objectTypeList) {
		this.objectTypeList = objectTypeList;
	}

	/**
	 * @return the projectList
	 */
	public List<EmpOrgInfo> getProjectList() {
		return projectList;
	}

	/**
	 * @param projectList the projectList to set
	 */
	public void setProjectList(List<EmpOrgInfo> projectList) {
		this.projectList = projectList;
	}

	/**
	 * @return the yearList
	 */
	public List<SysCodeInfo> getYearList() {
		return yearList;
	}

	/**
	 * @param yearList the yearList to set
	 */
	public void setYearList(List<SysCodeInfo> yearList) {
		this.yearList = yearList;
	}

	/**
	 * @return the projectId
	 */
	public String getProjectId() {
		return projectId;
	}

	/**
	 * @param projectId the projectId to set
	 */
	public void setProjectId(String projectId) {
		this.projectId = projectId;
	}

	/**
	 * @return the year
	 */
	public String getYear() {
		return year;
	}

	/**
	 * @param year the year to set
	 */
	public void setYear(String year) {
		this.year = year;
	}

	/**
	 * @return the strUserIdList
	 */
	public String getStrUserIdList() {
		return strUserIdList;
	}

	/**
	 * @param strUserIdList the strUserIdList to set
	 */
	public void setStrUserIdList(String strUserIdList) {
		this.strUserIdList = strUserIdList;
	}

	/**
	 * @return the strUserNameList
	 */
	public String getStrUserNameList() {
		return strUserNameList;
	}

	/**
	 * @param strUserNameList the strUserNameList to set
	 */
	public void setStrUserNameList(String strUserNameList) {
		this.strUserNameList = strUserNameList;
	}

	/**
	 * @return the testPaperInfoList
	 */
	public List<TestPaperInfo> getTestPaperInfoList() {
		return testPaperInfoList;
	}

	/**
	 * @param testPaperInfoList the testPaperInfoList to set
	 */
	public void setTestPaperInfoList(List<TestPaperInfo> testPaperInfoList) {
		this.testPaperInfoList = testPaperInfoList;
	}

	/**
	 * @return the examineInfoList
	 */
	public List<ExamineInfo> getExamineInfoList() {
		return examineInfoList;
	}

	/**
	 * @param examineInfoList the examineInfoList to set
	 */
	public void setExamineInfoList(List<ExamineInfo> examineInfoList) {
		this.examineInfoList = examineInfoList;
	}

	/**
	 * @return the courseInfoList
	 */
	public List<CourseInfo> getCourseInfoList() {
		return courseInfoList;
	}

	/**
	 * @param courseInfoList the courseInfoList to set
	 */
	public void setCourseInfoList(List<CourseInfo> courseInfoList) {
		this.courseInfoList = courseInfoList;
	}

	/**
	 * @return the ckbCheckAnswerFlg
	 */
	public Boolean getCkbCheckAnswerFlg() {
		return ckbCheckAnswerFlg;
	}

	/**
	 * @param ckbCheckAnswerFlg the ckbCheckAnswerFlg to set
	 */
	public void setCkbCheckAnswerFlg(Boolean ckbCheckAnswerFlg) {
		this.ckbCheckAnswerFlg = ckbCheckAnswerFlg;
	}

	/**
	 * @return the ckbMustExamineFlg
	 */
	public Boolean getCkbMustExamineFlg() {
		return ckbMustExamineFlg;
	}

	/**
	 * @param ckbMustExamineFlg the ckbMustExamineFlg to set
	 */
	public void setCkbMustExamineFlg(Boolean ckbMustExamineFlg) {
		this.ckbMustExamineFlg = ckbMustExamineFlg;
	}

	/**
	 * @return the ckbApplyConfirmFlg
	 */
	public Boolean getCkbApplyConfirmFlg() {
		return ckbApplyConfirmFlg;
	}

	/**
	 * @param ckbApplyConfirmFlg the ckbApplyConfirmFlg to set
	 */
	public void setCkbApplyConfirmFlg(Boolean ckbApplyConfirmFlg) {
		this.ckbApplyConfirmFlg = ckbApplyConfirmFlg;
	}

	/**
	 * @return the removePaperNo
	 */
	public Integer getRemovePaperNo() {
		return removePaperNo;
	}

	/**
	 * @param removePaperNo the removePaperNo to set
	 */
	public void setRemovePaperNo(Integer removePaperNo) {
		this.removePaperNo = removePaperNo;
	}

	/**
	 * @return the confirmStatusName
	 */
	public String getConfirmStatusName() {
		return confirmStatusName;
	}

	/**
	 * @param confirmStatusName the confirmStatusName to set
	 */
	public void setConfirmStatusName(String confirmStatusName) {
		this.confirmStatusName = confirmStatusName;
	}

	/**
	 * @param parentExamineId the parentExamineId to set
	 */
	public void setParentExamineId(String parentExamineId) {
		this.parentExamineId = parentExamineId;
	}

	/**
	 * @return the parentExamineId
	 */
	public String getParentExamineId() {
		return parentExamineId;
	}

	/**
	 * @param selectedCourseId the selectedCourseId to set
	 */
	public void setSelectedCourseId(String selectedCourseId) {
		this.selectedCourseId = selectedCourseId;
	}

	/**
	 * @return the selectedCourseId
	 */
	public String getSelectedCourseId() {
		return selectedCourseId;
	}

	/**
	 * @param selectedExamineId the selectedExamineId to set
	 */
	public void setSelectedExamineId(String selectedExamineId) {
		this.selectedExamineId = selectedExamineId;
	}

	/**
	 * @return the selectedExamineId
	 */
	public String getSelectedExamineId() {
		return selectedExamineId;
	}

}
