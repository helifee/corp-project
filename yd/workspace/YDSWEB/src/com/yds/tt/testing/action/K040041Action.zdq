/*
 * @(#) K040041Action.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 考试子系统
 */

package com.yds.tt.testing.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import net.sf.json.JSONArray;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.yds.base.action.AbstractBaseAction;
import com.yds.common.bean.SysCodeInfo;
import com.yds.common.service.SysCodeInfoService;
import com.yds.tt.manager.bean.TtCheckResult;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.manager.service.TtException;
import com.yds.tt.testing.bean.AnswerInfo;
import com.yds.tt.testing.bean.QuestionInfo;
import com.yds.tt.testing.service.K040041Service;

/**
 * 试题批量录入
 * 
 * @author yukunpeng,zhanghaibo
 * @version 2.00 2010/08/20
 */
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@Controller("k040041Action")
public class K040041Action extends AbstractBaseAction {

	private static final long serialVersionUID = 7385929700293792255L;

	private SysCodeInfoService sysCodeInfoService; // 区分业务
	private List<SysCodeInfo> questionTypeList; // 试题类型集合
	private List<SysCodeInfo> questionDifficultyList; // 试题难度集合
	private List<SysCodeInfo> questionKindList; // 试题题型集合
	private List<SysCodeInfo> optionTypeList; // 判断题选项表达方式集合judge
	private K040041Service k040041Service; // 试题批量录入业务
	private QuestionInfo questionInfo; // 试题信息
	private AnswerInfo answerInfo; // 试题答案
	private String optionNumber; // 选项数。
	private String questionContent; // 试题答案
	private String answerContent; // 试题内容
	private String selectList;
	private String errorMessage; // 错误信息
	private boolean reviewFlag; // 立即核对
	private int paramMode; // 修改核对画面模式参数
	/** 共通业务 */
	private TtCommonService ttCommonService;

	/**
	 * 初期画面检索处理.
	 */
	public String initSearch() {

		// 取得试题类型集合
		this.questionTypeList = sysCodeInfoService.getSysCodeInfo("R02");

		// 取得试题难度集合
		this.questionDifficultyList = sysCodeInfoService.getSysCodeInfo("E01");

		return SUCCESS;
	}

	/**
	 * 权限校验
	 */
	@Override
	public void validate() {
		// 画面启动控制
		TtCheckResult result = ttCommonService.checkStartupAuthority(
				TtConstants.PageId.K040041.value(), "K040041", null, null);
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			this.addActionError(ERROR);
		}
	}

	/**
	 * 试题题型取得.
	 * 
	 * @return
	 * @throws Exception
	 */
	public String searchKindList() throws Exception {
		// 取得试题题型集合(去掉空项和组合题)
		this.questionKindList = sysCodeInfoService
				.getSysCodeInfo("R03", "")
				.subList(1,
						sysCodeInfoService.getSysCodeInfo("R03", "").size() - 3);

		List<String[]> list = new ArrayList<String[]>();
		for (Iterator<SysCodeInfo> iter = questionKindList.iterator(); iter
				.hasNext();) {
			SysCodeInfo item = iter.next();
			list.add(new String[] { item.getDiffNo(), item.getDiffName() });

		}
		JSONArray jsobj = JSONArray.fromObject(list);
		setSelectList(jsobj.toString());

		return SUCCESS;
	}

	/**
	 * 选项类型取得.
	 * 
	 * @return
	 * @throws Exception
	 */
	public String searchOptionTypeList() throws Exception {
		int questionKind = questionInfo.getQuestionKind();
		// 单选题，多选题
		if (TtConstants.R03.R03_1.value() == questionKind
				|| TtConstants.R03.R03_2.value() == questionKind) {
			optionTypeList = sysCodeInfoService
					.getSysCodeInfo("E02", "")
					.subList(1,
							sysCodeInfoService.getSysCodeInfo("E02", "").size());
			// 取得判断题选项表达方式集合
		} else if (TtConstants.R03.R03_3.value() == questionKind) {
			optionTypeList = sysCodeInfoService
					.getSysCodeInfo("E03", "")
					.subList(1,
							sysCodeInfoService.getSysCodeInfo("E03", "").size());
		}

		List<String[]> list = new ArrayList<String[]>();
		for (Iterator<SysCodeInfo> iter = optionTypeList.iterator(); iter
				.hasNext();) {
			SysCodeInfo item = iter.next();
			list.add(new String[] { item.getDiffNo(), item.getDiffName() });

		}
		JSONArray jsobj = JSONArray.fromObject(list);
		setSelectList(jsobj.toString());
		return SUCCESS;
	}

	/**
	 * 试题内容核对提交
	 * 
	 * @return
	 * @throws Exception
	 */
	public String viewQuestion() throws Exception {
		
		// 检查内容是否合法
		try {
			k040041Service.checkQuestion(questionInfo, answerInfo);
		} catch (TtException e){
			errorMessage = e.getMessage();
			this.addActionError(errorMessage);
			this.initSearch();
			return INPUT;
		}
		
		// 试题信息存入session
		k040041Service.setQuestionInfoToSession(questionInfo, answerInfo);

		if (reviewFlag){
			paramMode = TtConstants.C29.C29_5.value();
		} else {
			paramMode = TtConstants.C29.C29_4.value();
		}

		return SUCCESS;
	}

	/**
	 * @return the questionTypeList
	 */
	public List<SysCodeInfo> getQuestionTypeList() {
		return questionTypeList;
	}

	/**
	 * @param questionTypeList
	 *            the questionTypeList to set
	 */
	public void setQuestionTypeList(List<SysCodeInfo> questionTypeList) {
		this.questionTypeList = questionTypeList;
	}

	/**
	 * @return the questionKindList
	 */
	public List<SysCodeInfo> getQuestionKindList() {
		return questionKindList;
	}

	/**
	 * @param questionKindList
	 *            the questionKindList to set
	 */
	public void setQuestionKindList(List<SysCodeInfo> questionKindList) {
		this.questionKindList = questionKindList;
	}

	/**
	 * @return the questionInfo
	 */
	public QuestionInfo getQuestionInfo() {
		return questionInfo;
	}

	/**
	 * @param questionInfo
	 *            the questionInfo to set
	 */
	public void setQuestionInfo(QuestionInfo questionInfo) {
		this.questionInfo = questionInfo;
	}

	/**
	 * @return the sysCodeInfoService
	 */
	public SysCodeInfoService getSysCodeInfoService() {
		return sysCodeInfoService;
	}

	/**
	 * @param sysCodeInfoService
	 *            the sysCodeInfoService to set
	 */
	public void setSysCodeInfoService(SysCodeInfoService sysCodeInfoService) {
		this.sysCodeInfoService = sysCodeInfoService;
	}

	/**
	 * @return the questionDifficultyList
	 */
	public List<SysCodeInfo> getQuestionDifficultyList() {
		return questionDifficultyList;
	}

	/**
	 * @param questionDifficultyList
	 *            the questionDifficultyList to set
	 */
	public void setQuestionDifficultyList(
			List<SysCodeInfo> questionDifficultyList) {
		this.questionDifficultyList = questionDifficultyList;
	}

	/**
	 * @return the k040041Service
	 */
	public K040041Service getK040041Service() {
		return k040041Service;
	}

	/**
	 * @param service
	 *            the k040041Service to set
	 */
	public void setK040041Service(K040041Service service) {
		k040041Service = service;
	}

	/**
	 * @return the errorMessage
	 */
	public String getErrorMessage() {
		return errorMessage;
	}

	/**
	 * @param errorMessage
	 *            the errorMessage to set
	 */
	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}

	/**
	 * @return the answerInfo
	 */
	public AnswerInfo getAnswerInfo() {
		return answerInfo;
	}

	/**
	 * @param answerInfo
	 *            the answerInfo to set
	 */
	public void setAnswerInfo(AnswerInfo answerInfo) {
		this.answerInfo = answerInfo;
	}

	/**
	 * @return the optionNumber
	 */
	public String getOptionNumber() {
		return optionNumber;
	}

	/**
	 * @param optionNumber
	 *            the optionNumber to set
	 */
	public void setOptionNumber(String optionNumber) {
		this.optionNumber = optionNumber;
	}

	/**
	 * @return the optionTypeList
	 */
	public List<SysCodeInfo> getOptionTypeList() {
		return optionTypeList;
	}

	/**
	 * @param optionTypeList
	 *            the optionTypeList to set
	 */
	public void setOptionTypeList(List<SysCodeInfo> optionTypeList) {
		this.optionTypeList = optionTypeList;
	}

	/**
	 * @return the selectList
	 */
	public String getSelectList() {
		return selectList;
	}

	/**
	 * @param selectList
	 *            the selectList to set
	 */
	public void setSelectList(String selectList) {
		this.selectList = selectList;
	}

	/**
	 * @return the questionContent
	 */
	public String getQuestionContent() {
		return questionContent;
	}

	/**
	 * @param questionContent
	 *            the questionContent to set
	 */
	public void setQuestionContent(String questionContent) {
		this.questionContent = questionContent;
	}

	/**
	 * @return the answerContent
	 */
	public String getAnswerContent() {
		return answerContent;
	}

	/**
	 * @param answerContent
	 *            the answerContent to set
	 */
	public void setAnswerContent(String answerContent) {
		this.answerContent = answerContent;
	}

	/**
	 * @return the reviewFlag
	 */
	public boolean isReviewFlag() {
		return reviewFlag;
	}

	/**
	 * @param reviewFlag
	 *            the reviewFlag to set
	 */
	public void setReviewFlag(boolean reviewFlag) {
		this.reviewFlag = reviewFlag;
	}

	/**
	 * @return the ttCommonService
	 */
	public TtCommonService getTtCommonService() {
		return ttCommonService;
	}

	/**
	 * @param ttCommonService
	 *            the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}

	/**
	 * @return the paramMode
	 */
	public int getParamMode() {
		return paramMode;
	}
}
