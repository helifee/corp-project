/*
 * @(#) K050031Action.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 考试子系统
 */

package com.yds.tt.testing.action;

import java.util.ArrayList;
import java.util.List;

import net.sf.json.JSONArray;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.opensymphony.xwork2.interceptor.annotations.InputConfig;
import com.yds.base.action.AbstractBaseAction;
import com.yds.common.bean.SysCodeInfo;
import com.yds.common.service.SessionConstants;
import com.yds.common.service.SysCodeInfoService;
import com.yds.tt.manager.bean.TtCheckResult;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.manager.service.TtExclusiveException;
import com.yds.tt.manager.service.TtConstants.C02;
import com.yds.tt.manager.service.TtConstants.C43;
import com.yds.tt.manager.service.TtConstants.PageId;
import com.yds.tt.manager.service.TtConstants.R02;
import com.yds.tt.manager.service.TtConstants.R03;
import com.yds.tt.manager.service.TtConstants.R10;
import com.yds.tt.manager.service.TtConstants.R11;
import com.yds.tt.testing.bean.PaperBigQuestionInfo;
import com.yds.tt.testing.bean.PaperRandomQuestionInfo;
import com.yds.tt.testing.bean.PaperStableQuestionInfo;
import com.yds.tt.testing.bean.TestPaperInfo;
import com.yds.tt.testing.service.K050031Service;
import com.yds.tt.training.service.J030081Service;
import com.yds.util.service.Session;

/**
 * 试卷编辑处理
 * 
 * @author yinfuyan
 * @version 1.00 2010/04/07
 */
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@Controller("k050031Action")
public class K050031Action extends AbstractBaseAction {

	private static final long serialVersionUID = 6990719929959961866L;

	// 画面调用业务层
	private K050031Service k050031Service;
	private J030081Service j030081Service;
	private TtCommonService ttCommonService;
	private SysCodeInfoService sysCodeInfoService;

	// 试卷信息
	private TestPaperInfo testPaperInfo;
	// 新建大题题型
	private Integer questionKind;
	// 新建大题类型
	private Integer bigquestionType;
	// 新建大题标题
	private String bigquestionTitle;
	// 新建大题答题时间
	private Integer bigquestionTime;
	// 新建大题说明
	private String bigquestionDescription;
	// 大题编号
	private Integer moveBigquestionSerialNo;
	// 大题显示顺序
	private Integer moveBigquestionOrder;
	// 试卷大题信息
	private List<PaperBigQuestionInfo> paperBigQuestionInfoList;
	// 试题类型集合
	private List<SysCodeInfo> questionKindList;
	// 大题类型集合
	private List<SysCodeInfo> bigQuestionTypeList;
	// 画面模式
	private Integer modeKbn;
	// 参数试卷ID
	private String paperId;
	// 参数创建对象
	private String belongId;
	// 参数编辑号
	private Integer editNum;
	// 参数一级分类ID
	private Integer category1;
	// 参数二级分类ID
	private Integer category2;
	// 参数三级分类ID
	private Integer category3;
	// 错误信息
	private String errorMessage;
	// 大题类别
	private String bigQuestionTypeNo;
	private String selectList;
	private String bigquestionSerialNo;
	/**
	 * 画面的初期显示 试卷编辑（考试试卷）
	 * 
	 * @return SUCCESS
	 */
	@InputConfig(resultName = "error")
	public String initTestPaperEdit() throws Exception {

		// 画面启动检查
		TtCheckResult checkResult = checkAuthority(
				K050031Service.TT_K050031MODE_TEST, this.paperId);
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			if ("GTE01".equals(checkResult.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;
			}
		}
		// 画面模式设置
		modeKbn = K050031Service.TT_K050031MODE_TEST;
		// 检索试卷基本信息
		testPaperInfo = k050031Service.getPaperInfo(paperId, R02.R02_1.value());
		// 试卷信息检索失败，迁移错误画面
		if (null == testPaperInfo) {
			errorMessage = propMgr.getMessage("yds.com.info.0011");
			return ERROR;
		}

		// 画面详细信息检索
		this.pageInfoSearch();

		return SUCCESS;
	}

	/**
	 * 画面的初期显示 试卷编辑（练习试卷）
	 * 
	 * @return SUCCESS
	 */
	@InputConfig(resultName = "error")
	public String initExercisePaperEdit() throws Exception {

		// 画面启动检查
		TtCheckResult checkResult = checkAuthority(
				K050031Service.TT_K050031MODE_EXERCISE, this.paperId);
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			if ("GTE01".equals(checkResult.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;
			}
		}
		// 画面模式设置
		modeKbn = K050031Service.TT_K050031MODE_EXERCISE;
		// 教材状态检查检查
		if (!getBookStatus()) {
			return ERROR;
		}
		// 检索试卷基本信息
		testPaperInfo = k050031Service.getPaperInfo(paperId, R02.R02_2.value());
		// 试卷信息检索失败，迁移错误画面
		if (null == testPaperInfo) {
			errorMessage = propMgr.getMessage("yds.com.info.0011");
			return ERROR;
		}

		// 画面详细信息检索
		this.pageInfoSearch();

		return SUCCESS;
	}

	/**
	 * 回调方法
	 * 
	 * @return SUCCESS
	 */
	@InputConfig(resultName = "error")
	@SuppressWarnings("unchecked")
	public String bigquestionEditCallBack() throws Exception {

		// 画面模式设置
		modeKbn = (Integer) Session.get(SessionConstants.TT_K050031_MODE);
		// 设定试卷信息
		testPaperInfo = (TestPaperInfo) Session
				.get(SessionConstants.TT_K050031_PAPERINFO);
		// 画面启动检查
		TtCheckResult checkResult = checkAuthority(modeKbn, testPaperInfo
				.getPaperId());
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			if ("GTE01".equals(checkResult.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;
			}
		}
		// 设定试卷大题信息
		paperBigQuestionInfoList = (List<PaperBigQuestionInfo>) Session
				.get(SessionConstants.TT_K050031_PAPERBIGQUESTIONINFO);
		// 计算试卷总分
		int totalScore = 0;
		for (PaperBigQuestionInfo pbqInfo : paperBigQuestionInfoList) {
			totalScore = totalScore
					+ pbqInfo.getBigquestionTotalScore().intValue();
		}
		testPaperInfo.setPaperTotalScore(totalScore);
		// 试题类型下拉列表设置
		questionKindList = sysCodeInfoService.getSysCodeInfo(R03.getEnumName(),
				"");
		questionKindList = questionKindList.subList(1, questionKindList.size());

		// 大题类型下拉列表设置
		bigQuestionTypeList = sysCodeInfoService.getSysCodeInfo(R11
				.getEnumName(), "");
		bigQuestionTypeList = bigQuestionTypeList.subList(1,
				bigQuestionTypeList.size());
		// 更新session试卷信息
		k050031Service.setSessionPaperInfo(testPaperInfo);
		// 更新session试卷大题信息
		k050031Service.setSessionPaperBigQuestionInfo(paperBigQuestionInfoList);
		return SUCCESS;
	}

	/**
	 * 添加大题
	 * 
	 * @return SUCCESS
	 */
	public String addBigquestion() throws Exception {

		// 获得session试卷信息
		testPaperInfo = k050031Service.getSessionPaperInfo();
		// 画面启动检查
		TtCheckResult checkResult = checkAuthority((Integer) Session
				.get(SessionConstants.TT_K050031_MODE), testPaperInfo
				.getPaperId());
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			if ("GTE01".equals(checkResult.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;
			}
		}
		// 新建大题
		PaperBigQuestionInfo newPaperBigQuestionInfo = new PaperBigQuestionInfo();
		paperBigQuestionInfoList = k050031Service
				.getSessionPaperBigQuestionInfo();
		// 获得Session试卷大题最大编号
		int maxSerialNo = k050031Service.getSessionBigQuestionMaxSerialNo();

		// 新建大题内容设定
		newPaperBigQuestionInfo.setPaperId(testPaperInfo.getPaperId());
		newPaperBigQuestionInfo.setPaperVersionNo(testPaperInfo
				.getPaperVersionNo());
		newPaperBigQuestionInfo.setBigquestionSerialNo(maxSerialNo + 1);
		newPaperBigQuestionInfo.setBigquestionOrder(paperBigQuestionInfoList
				.size() + 1);
		newPaperBigQuestionInfo.setQuestionNum(0);
		newPaperBigQuestionInfo.setBigquestionTotalScore(0);
		newPaperBigQuestionInfo.setQuestionKind(questionKind);
		newPaperBigQuestionInfo.setQuestionKindName(sysCodeInfoService
				.getDiffName(R03.getEnumName(), questionKind));
		if (questionKind.equals(R03.R03_1.value())
				|| questionKind.equals(R03.R03_3.value())) {
			newPaperBigQuestionInfo.setAtuoMarkFlg(C02.C02_1.value());
		} else {
			newPaperBigQuestionInfo.setAtuoMarkFlg(C02.C02_2.value());
		}
		newPaperBigQuestionInfo.setBigquestionType(bigquestionType);
		newPaperBigQuestionInfo.setBigquestionTypeName(sysCodeInfoService
				.getDiffName(R11.getEnumName(), bigquestionType));
		newPaperBigQuestionInfo.setBigquestionTime(bigquestionTime);
		newPaperBigQuestionInfo.setBigquestionTitle(bigquestionTitle);
		newPaperBigQuestionInfo
				.setBigquestionDescription(bigquestionDescription);
		newPaperBigQuestionInfo
				.setStableQueInfoList(new ArrayList<PaperStableQuestionInfo>());
		// wanqiuhong 10/22 修改：初期随机条件为空问题
		List<PaperRandomQuestionInfo> prqInfoList = new ArrayList<PaperRandomQuestionInfo>();
		PaperRandomQuestionInfo prqInfo = new PaperRandomQuestionInfo();
		prqInfo.setPaperId(testPaperInfo.getPaperId());
		prqInfo.setPaperVersionNo(testPaperInfo.getPaperVersionNo());
		prqInfo.setConditionSerialNo(1);
		prqInfo.setBigquestionSerialNo(maxSerialNo + 1);
		prqInfo.setCategory1Id(testPaperInfo.getCategory1Id());
		prqInfo.setCategory2Id(testPaperInfo.getCategory2Id());
		prqInfo.setCategory3Id(testPaperInfo.getCategory3Id());
		prqInfo.setQuestionKind(questionKind);
		prqInfoList.add(prqInfo);
		newPaperBigQuestionInfo.setRandomQueInfoList(prqInfoList);
		// 向大题列表添加新建大题
		paperBigQuestionInfoList.add(newPaperBigQuestionInfo);

		// 试题类型下拉列表设置
		questionKindList = sysCodeInfoService.getSysCodeInfo(R03.getEnumName(),
				"");
		questionKindList = questionKindList.subList(1, questionKindList.size());

		// 大题类型下拉列表设置
		bigQuestionTypeList = sysCodeInfoService.getSysCodeInfo(R11
				.getEnumName(), "");
		bigQuestionTypeList = bigQuestionTypeList.subList(1,
				bigQuestionTypeList.size());

		// 更新session试卷信息
		k050031Service.setSessionPaperInfo(testPaperInfo);
		// 更新session试卷大题信息
		k050031Service.setSessionPaperBigQuestionInfo(paperBigQuestionInfoList);
		// 更新session试卷大题最大编号
		k050031Service.setSessionBigQuestionMaxSerialNo(maxSerialNo + 1);

		return SUCCESS;
	}

	/**
	 * 删除大题
	 * 
	 * @return SUCCESS
	 */
	public String removeBigquestion() throws Exception {

		// 获得session信息
		testPaperInfo = k050031Service.getSessionPaperInfo();
		// 画面启动检查
		TtCheckResult checkResult = checkAuthority((Integer) Session
				.get(SessionConstants.TT_K050031_MODE), testPaperInfo
				.getPaperId());
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			if ("GTE01".equals(checkResult.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;
			}
		}
		paperBigQuestionInfoList = k050031Service
				.getSessionPaperBigQuestionInfo();

		// 试题类型下拉列表设置
		questionKindList = sysCodeInfoService.getSysCodeInfo(R03.getEnumName(),
				"");
		questionKindList = questionKindList.subList(1, questionKindList.size());

		// 大题类型下拉列表设置
		bigQuestionTypeList = sysCodeInfoService.getSysCodeInfo(R11
				.getEnumName(), "");
		bigQuestionTypeList = bigQuestionTypeList.subList(1,
				bigQuestionTypeList.size());
		// 删除大题
		k050031Service.delectBigQuestion(testPaperInfo,
				paperBigQuestionInfoList, getMoveBigquestionOrder().intValue());

		return SUCCESS;
	}

	/**
	 * 提交审批试卷
	 * 
	 * @return SUCCESS
	 */
	public String submitForApproval() throws Exception {

		// 设定试卷信息
		TestPaperInfo tpInfo = k050031Service.getSessionPaperInfo();
		// 画面启动检查
		TtCheckResult checkResult = checkAuthority(modeKbn, tpInfo.getPaperId());
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			if ("GTE01".equals(checkResult.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;
			}
		}

		// 画面项目设定到参数Bean
		tpInfo.setPaperTitle(testPaperInfo.getPaperTitle());
		tpInfo.setPaperComment(testPaperInfo.getPaperComment());
		tpInfo.setPaperDescription(testPaperInfo.getPaperDescription());
		tpInfo.setPaperTime(testPaperInfo.getPaperTime());
		tpInfo.setPaperTotalScore(testPaperInfo.getPaperTotalScore());
		tpInfo.setPaperStatus(R10.R10_2.value());

		try {
			// 更新试卷信息
			k050031Service.updatePaperInfo(tpInfo);
		} catch (TtExclusiveException e) {
			return seterrorInfo();
		}

		// 销毁已设置的session值
		Session.delete(SessionConstants.TT_K050031_MODE);
		Session.delete(SessionConstants.TT_K050031_PAPERINFO);
		Session.delete(SessionConstants.TT_K050031_PAPERBIGQUESTIONINFO);

		// 显示操作成功消息
		putOpTip(propMgr.getMessage("yds.tt.info.GTT02"));

		return SUCCESS;
	}

	/**
	 * 编辑试题
	 * 
	 * @return SUCCESS
	 */
	public String editQuestion() throws Exception {
		
		// 设定试卷信息
		TestPaperInfo testPaperInfoTemp = (TestPaperInfo) Session
				.get(SessionConstants.TT_K050031_PAPERINFO);
		
		// 更新session试卷信息
		testPaperInfoTemp.setPaperTitle(testPaperInfo.getPaperTitle());
		testPaperInfoTemp.setPaperComment(testPaperInfo.getPaperComment());
		testPaperInfoTemp.setPaperDescription(testPaperInfo.getPaperDescription());
		testPaperInfoTemp.setPaperTime(testPaperInfo.getPaperTime());
		k050031Service.setSessionPaperInfo(testPaperInfoTemp);
		return SUCCESS;
	}
	
	/**
	 * 保存试卷
	 * 
	 * @return SUCCESS
	 */
	public String savePaperInfo() throws Exception {

		// 设定试卷信息
		TestPaperInfo tpInfo = k050031Service.getSessionPaperInfo();
		// 画面启动检查
		TtCheckResult checkResult = checkAuthority(modeKbn, tpInfo.getPaperId());
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			if ("GTE01".equals(checkResult.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;
			}
		}

		// 画面项目设定到参数Bean
		tpInfo.setPaperTitle(testPaperInfo.getPaperTitle());
		tpInfo.setPaperComment(testPaperInfo.getPaperComment());
		tpInfo.setPaperDescription(testPaperInfo.getPaperDescription());
		tpInfo.setPaperTime(testPaperInfo.getPaperTime());
		tpInfo.setPaperTotalScore(testPaperInfo.getPaperTotalScore());
		tpInfo.setPaperStatus(R10.R10_1.value());

		try {
			// 更新试卷信息
			k050031Service.updatePaperInfo(tpInfo);
		} catch (TtExclusiveException e) {
			return seterrorInfo();
		}

		// 销毁已设置的session值
		Session.delete(SessionConstants.TT_K050031_MODE);
		Session.delete(SessionConstants.TT_K050031_PAPERINFO);
		Session.delete(SessionConstants.TT_K050031_PAPERBIGQUESTIONINFO);

		// 显示操作成功消息
		putOpTip(propMgr.getMessage("yds.tt.info.GTT02"));

		return SUCCESS;
	}

	/**
	 * 上移大题
	 * 
	 * @return SUCCESS
	 */
	public void moveUp() throws Exception {

		// 获得session大题信息
		paperBigQuestionInfoList = k050031Service
				.getSessionPaperBigQuestionInfo();

		// 选中大题显示顺序
		int count = this.getMoveBigquestionOrder().intValue();

		// 选中行大题
		PaperBigQuestionInfo pbqInfoNow = paperBigQuestionInfoList
				.get(count - 1);
		// 上一行大题
		PaperBigQuestionInfo pbqInfoUp = paperBigQuestionInfoList
				.get(count - 2);
		pbqInfoNow.setBigquestionOrder(count - 1);
		pbqInfoUp.setBigquestionOrder(count);
		paperBigQuestionInfoList.set(count - 1, pbqInfoUp);
		paperBigQuestionInfoList.set(count - 2, pbqInfoNow);

		// 更新session大题信息
		k050031Service.setSessionPaperBigQuestionInfo(paperBigQuestionInfoList);
	}

	/**
	 * 下移大题
	 * 
	 * @return SUCCESS
	 */
	public void moveDown() throws Exception {

		// 获得session大题信息
		paperBigQuestionInfoList = k050031Service
				.getSessionPaperBigQuestionInfo();

		// 选中大题显示顺序
		int count = this.getMoveBigquestionOrder().intValue();

		// 选中行大题
		PaperBigQuestionInfo pbqInfoNow = paperBigQuestionInfoList
				.get(count - 1);
		// 下一行大题
		PaperBigQuestionInfo pbqInfoDown = paperBigQuestionInfoList.get(count);
		pbqInfoNow.setBigquestionOrder(count + 1);
		pbqInfoDown.setBigquestionOrder(count);
		paperBigQuestionInfoList.set(count, pbqInfoNow);
		paperBigQuestionInfoList.set(count - 1, pbqInfoDown);

		// 更新session大题信息
		k050031Service.setSessionPaperBigQuestionInfo(paperBigQuestionInfoList);
	}

	/**
	 * 再编辑试卷
	 * 
	 * @return SUCCESS
	 */
	public String reeditPaper() throws Exception {

		// 设定画面信息
		testPaperInfo = k050031Service.getSessionPaperInfo();
		// 画面启动检查
		TtCheckResult checkResult = checkAuthority(
				K050031Service.TT_K050031MODE_TEST, testPaperInfo.getPaperId());
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			if ("GTE01".equals(checkResult.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;
			}
		}
		try {
			// 更新试卷状态
			if (!k050031Service.updateReeditPaper()) {
				// 错误信息显示
				errorMessage = propMgr.getMessage("yds.com.error.0001");
				return ERROR;
			}
		} catch (TtExclusiveException e) {
			return seterrorInfo();
		}

		// 画面模式设置
		modeKbn = K050031Service.TT_K050031MODE_TEST;

		paperBigQuestionInfoList = k050031Service
				.getSessionPaperBigQuestionInfo();

		// 试题类型下拉列表设置
		questionKindList = sysCodeInfoService.getSysCodeInfo(R03.getEnumName(),
				"");
		questionKindList = questionKindList.subList(1, questionKindList.size());

		// 大题类型下拉列表设置
		bigQuestionTypeList = sysCodeInfoService.getSysCodeInfo(R11
				.getEnumName(), "");
		bigQuestionTypeList = bigQuestionTypeList.subList(1,
				bigQuestionTypeList.size());

		// 显示操作成功消息
		putOpTip(propMgr.getMessage("yds.tt.info.GTT02"));

		return SUCCESS;
	}

	/**
	 * 参数项目校验（考试试卷）
	 * 
	 */
	public void validateInitTestPaperEdit() {
		// 参数试卷ID判断
		if (null == this.getPaperId() || "".equals(this.getPaperId())) {
			errorMessage = propMgr.getMessage("yds.com.error.0001");
			this.addActionError("error");
		}
	}

	/**
	 * 参数项目校验（练习试卷）
	 * 
	 */
	public void validateInitExercisePaperEdit() {
		// 参数试卷ID,创建对象，编辑号判断
		if (null == this.getPaperId() || "".equals(this.getPaperId())
				|| null == this.getBelongId() || "".equals(this.getBelongId())
				|| null == this.getEditNum() || 0 == this.getEditNum()) {
			errorMessage = propMgr.getMessage("yds.com.error.0001");
			this.addActionError("error");
		}
	}

	/**
	 * 画面启动控制检查
	 * 
	 * @param mode
	 *            画面启动模式
	 * 
	 */
	private TtCheckResult checkAuthority(Integer mode, String checkPaperId) {

		List<String> objectId = new ArrayList<String>();

		objectId.add(checkPaperId);

		TtCheckResult checkResult = new TtCheckResult();

		// 考试模式
		if (K050031Service.TT_K050031MODE_TEST.equals(mode)) {
			// 权限检查
			checkResult = ttCommonService.checkStartupAuthority(PageId.K050031
					.value(), "K050031_1", C43.C43_4.value(), objectId);
		}
		// 练习模式
		if (K050031Service.TT_K050031MODE_EXERCISE.equals(mode)) {
			// 权限检查
			checkResult = ttCommonService.checkStartupAuthority(PageId.K050031
					.value(), "K050031_2", C43.C43_5.value(), objectId);
		}

		return checkResult;
	}

	/**
	 * 画面详细信息检索
	 * 
	 */
	private void pageInfoSearch() {

		// 检索试卷大题信息
		paperBigQuestionInfoList = k050031Service
				.getBigQuestionInfos(testPaperInfo);

		// 试题类型下拉列表设置
		questionKindList = sysCodeInfoService.getSysCodeInfo(R03.getEnumName(),
				"");
		questionKindList = questionKindList.subList(1, questionKindList.size());

		// 大题类型下拉列表设置
		bigQuestionTypeList = sysCodeInfoService.getSysCodeInfo(R11
				.getEnumName(), "");
		bigQuestionTypeList = bigQuestionTypeList.subList(1,
				bigQuestionTypeList.size());

		// 设定画面模式
		Session.set(SessionConstants.TT_K050031_MODE, modeKbn);
		// 更新session试卷信息
		k050031Service.setSessionPaperInfo(testPaperInfo);
		// 更新session试卷大题信息
		k050031Service.setSessionPaperBigQuestionInfo(paperBigQuestionInfoList);
	}

	/**
	 * 教材状态判断
	 * 
	 * @return boolean
	 */
	private boolean getBookStatus() {

		// 教材状态取得
		Integer bookStatus = j030081Service.getBookInfo(belongId, editNum);

		// 教材状态判断
		if (null == bookStatus) {
			errorMessage = propMgr.getMessage("yds.tt.error.JYE12", "教材");
			return false;
		}

		if (bookStatus != TtConstants.R01.R01_1.value()) {
			errorMessage = propMgr.getMessage("yds.tt.error.JYE15");
			return false;
		}

		return true;
	}

	/**
	 * 设置时间戳错误信息
	 */
	private String seterrorInfo() {

		// 考试信息被修改时的错误消息
		errorMessage = propMgr.getMessage("yds.tt.error.KSE56");
		return ERROR;
	}
	
	// wanqiuhong 10/10 追加：大题类别与题型联动
	/**
	 * 大题类别与题型联动
	 */
	public String changeQTypeQKind() {
		if("1".equals(bigQuestionTypeNo)) {
			questionKindList = sysCodeInfoService.getSysCodeInfo(R03.getEnumName(), "");
			questionKindList = questionKindList.subList(1, questionKindList.size());
		} else {
			List<SysCodeInfo> qKindList = sysCodeInfoService.getSysCodeInfo(R03.getEnumName(), "");
			questionKindList = qKindList.subList(1, 2);
			questionKindList.add(qKindList.get(3));
		}
		JSONArray jsobj = JSONArray.fromObject(questionKindList);
		setSelectList(jsobj.toString());
		
		return SUCCESS;
	}
	
	/**
	 * @param service
	 *            the k050031Service to set
	 */
	public void setK050031Service(K050031Service service) {
		k050031Service = service;
	}

	/**
	 * @param service
	 *            the j030081Service to set
	 */
	public void setJ030081Service(J030081Service service) {
		j030081Service = service;
	}

	/**
	 * @param ttCommonService
	 *            the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}

	/**
	 * @param sysCodeInfoService
	 *            the sysCodeInfoService to set
	 */
	public void setSysCodeInfoService(SysCodeInfoService sysCodeInfoService) {
		this.sysCodeInfoService = sysCodeInfoService;
	}

	/**
	 * @return the testPaperInfo
	 */
	public TestPaperInfo getTestPaperInfo() {
		return testPaperInfo;
	}

	/**
	 * @param testPaperInfo
	 *            the testPaperInfo to set
	 */
	public void setTestPaperInfo(TestPaperInfo testPaperInfo) {
		this.testPaperInfo = testPaperInfo;
	}

	/**
	 * @return the questionKind
	 */
	public Integer getQuestionKind() {
		return questionKind;
	}

	/**
	 * @param questionKind
	 *            the questionKind to set
	 */
	public void setQuestionKind(Integer questionKind) {
		this.questionKind = questionKind;
	}

	/**
	 * @return the bigquestionType
	 */
	public Integer getBigquestionType() {
		return bigquestionType;
	}

	/**
	 * @param bigquestionType
	 *            the bigquestionType to set
	 */
	public void setBigquestionType(Integer bigquestionType) {
		this.bigquestionType = bigquestionType;
	}

	/**
	 * @return the bigquestionTitle
	 */
	public String getBigquestionTitle() {
		return bigquestionTitle;
	}

	/**
	 * @param bigquestionTitle
	 *            the bigquestionTitle to set
	 */
	public void setBigquestionTitle(String bigquestionTitle) {
		this.bigquestionTitle = bigquestionTitle;
	}

	/**
	 * @return the bigquestionTime
	 */
	public Integer getBigquestionTime() {
		return bigquestionTime;
	}

	/**
	 * @param bigquestionTime
	 *            the bigquestionTime to set
	 */
	public void setBigquestionTime(Integer bigquestionTime) {
		this.bigquestionTime = bigquestionTime;
	}

	/**
	 * @return the bigquestionDescription
	 */
	public String getBigquestionDescription() {
		return bigquestionDescription;
	}

	/**
	 * @param bigquestionDescription
	 *            the bigquestionDescription to set
	 */
	public void setBigquestionDescription(String bigquestionDescription) {
		this.bigquestionDescription = bigquestionDescription;
	}

	/**
	 * @return the moveBigquestionSerialNo
	 */
	public Integer getMoveBigquestionSerialNo() {
		return moveBigquestionSerialNo;
	}

	/**
	 * @param moveBigquestionSerialNo
	 *            the moveBigquestionSerialNo to set
	 */
	public void setMoveBigquestionSerialNo(Integer moveBigquestionSerialNo) {
		this.moveBigquestionSerialNo = moveBigquestionSerialNo;
	}

	/**
	 * @return the moveBigquestionOrder
	 */
	public Integer getMoveBigquestionOrder() {
		return moveBigquestionOrder;
	}

	/**
	 * @param moveBigquestionOrder
	 *            the moveBigquestionOrder to set
	 */
	public void setMoveBigquestionOrder(Integer moveBigquestionOrder) {
		this.moveBigquestionOrder = moveBigquestionOrder;
	}

	/**
	 * @return the paperBigQuestionInfoList
	 */
	public List<PaperBigQuestionInfo> getPaperBigQuestionInfoList() {
		return paperBigQuestionInfoList;
	}

	/**
	 * @param paperBigQuestionInfoList
	 *            the paperBigQuestionInfoList to set
	 */
	public void setPaperBigQuestionInfoList(
			List<PaperBigQuestionInfo> paperBigQuestionInfoList) {
		this.paperBigQuestionInfoList = paperBigQuestionInfoList;
	}

	/**
	 * @return the questionKindList
	 */
	public List<SysCodeInfo> getQuestionKindList() {
		return questionKindList;
	}

	/**
	 * @param questionKindList
	 *            the questionKindList to set
	 */
	public void setQuestionKindList(List<SysCodeInfo> questionKindList) {
		this.questionKindList = questionKindList;
	}

	/**
	 * @return the bigQuestionTypeList
	 */
	public List<SysCodeInfo> getBigQuestionTypeList() {
		return bigQuestionTypeList;
	}

	/**
	 * @param bigQuestionTypeList
	 *            the bigQuestionTypeList to set
	 */
	public void setBigQuestionTypeList(List<SysCodeInfo> bigQuestionTypeList) {
		this.bigQuestionTypeList = bigQuestionTypeList;
	}

	/**
	 * @return the modeKbn
	 */
	public Integer getModeKbn() {
		return modeKbn;
	}

	/**
	 * @param modeKbn
	 *            the modeKbn to set
	 */
	public void setModeKbn(Integer modeKbn) {
		this.modeKbn = modeKbn;
	}

	/**
	 * @return the paperId
	 */
	public String getPaperId() {
		return paperId;
	}

	/**
	 * @param paperId
	 *            the paperId to set
	 */
	public void setPaperId(String paperId) {
		this.paperId = paperId;
	}

	/**
	 * @return the belongId
	 */
	public String getBelongId() {
		return belongId;
	}

	/**
	 * @param belongId
	 *            the belongId to set
	 */
	public void setBelongId(String belongId) {
		this.belongId = belongId;
	}

	/**
	 * @return the editNum
	 */
	public Integer getEditNum() {
		return editNum;
	}

	/**
	 * @param editNum
	 *            the editNum to set
	 */
	public void setEditNum(Integer editNum) {
		this.editNum = editNum;
	}

	/**
	 * @return the category1
	 */
	public Integer getCategory1() {
		return category1;
	}

	/**
	 * @param category1
	 *            the category1 to set
	 */
	public void setCategory1(Integer category1) {
		this.category1 = category1;
	}

	/**
	 * @return the category2
	 */
	public Integer getCategory2() {
		return category2;
	}

	/**
	 * @param category2
	 *            the category2 to set
	 */
	public void setCategory2(Integer category2) {
		this.category2 = category2;
	}

	/**
	 * @return the category3
	 */
	public Integer getCategory3() {
		return category3;
	}

	/**
	 * @param category3
	 *            the category3 to set
	 */
	public void setCategory3(Integer category3) {
		this.category3 = category3;
	}

	/**
	 * @return the errorMessage
	 */
	public String getErrorMessage() {
		return errorMessage;
	}

	/**
	 * @param errorMessage
	 *            the errorMessage to set
	 */
	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}

	/**
	 * @return the bigQuestionTypeNo
	 */
	public String getBigQuestionTypeNo() {
		return bigQuestionTypeNo;
	}

	/**
	 * @param bigQuestionTypeNo the bigQuestionTypeNo to set
	 */
	public void setBigQuestionTypeNo(String bigQuestionTypeNo) {
		this.bigQuestionTypeNo = bigQuestionTypeNo;
	}

	/**
	 * @return the selectList
	 */
	public String getSelectList() {
		return selectList;
	}

	/**
	 * @param selectList the selectList to set
	 */
	public void setSelectList(String selectList) {
		this.selectList = selectList;
	}

	public String getBigquestionSerialNo() {
		return bigquestionSerialNo;
	}

	public void setBigquestionSerialNo(String bigquestionSerialNo) {
		this.bigquestionSerialNo = bigquestionSerialNo;
	}

}
