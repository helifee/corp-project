/*
 * @(#) K060111ServiceImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 考试子系统
 */
package com.yds.tt.testing.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;

import com.yds.base.service.AbstractBaseService;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.testing.bean.ExamineInfo;
import com.yds.tt.testing.bean.K060111AssignInfo;
import com.yds.tt.testing.bean.K060111EmpMarkInfo;
import com.yds.tt.testing.bean.K060111PaperMarkInfo;
import com.yds.tt.testing.bean.K060111QuestionNumInfo;
import com.yds.tt.testing.bean.K060111TaskInfo;
import com.yds.tt.testing.bean.TestPaperInfo;
import com.yds.tt.testing.dao.K060111Dao;
import com.yds.tt.testing.service.K060111Service;

/**
 * @see com.yds.tt.testing.service.K060111Service
 */
@Service("k060111Service")
public class K060111ServiceImpl extends AbstractBaseService implements
		K060111Service {

	private static final String completeStatusYes = "已完成";
	private static final String completeStatusNo = "未完成";
	private K060111Dao k060111Dao;
	private TtCommonService ttCommonService;
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamineInfo getExamineInfo(String examineId) {
		return k060111Dao.getExamineInfo(examineId);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public K060111AssignInfo getAssignMode(ExamineInfo examineInfo) {

		K060111AssignInfo k060111AssignInfo = new K060111AssignInfo();
		// 考试信息表评分标志不为空（数据库中评分标志为int型数据，不输入为零）
		if (null == examineInfo.getMarkmissionFlg()
				|| examineInfo.getMarkmissionFlg() == 0) {
			// 分配方式（按试卷分配）
			k060111AssignInfo.setAssignMode(TtConstants.C15.C15_1.toString());
			// 是否第一次分配
			k060111AssignInfo.setAssignFirst(true);
			List<TestPaperInfo> testPaperInfos = k060111Dao
					.getTestPaperInfos(examineInfo.getExamineId());
			// 有多个试卷
			if (testPaperInfos.size() > 1) {
				k060111AssignInfo.setAssignModeAbled(false);
			} 
			// 只有一种试卷
			else if(testPaperInfos.size() == 1){
				// 有随即大题存在
				if (testPaperInfos.get(0).getRandomBigquestFlg() == TtConstants.C06.C06_1.value()) {
					k060111AssignInfo.setAssignModeAbled(false);
				}
				// 试卷大题的件数
				int count = k060111Dao.getBigQuestCnt(testPaperInfos.get(0));
				// 试卷大题的件数判断
				if (count > 1) {
					// 为了屏蔽按题分配（暂时）
//					k060111AssignInfo.setAssignModeAbled(true);
					k060111AssignInfo.setAssignModeAbled(false);
				} else {
					k060111AssignInfo.setAssignModeAbled(false);
				}
			// 没有试卷
			} else {
				return null;
			}
		} else {
			k060111AssignInfo.setAssignMode(examineInfo.getMarkmissionFlg()
					.toString());
			k060111AssignInfo.setAssignFirst(false);
			k060111AssignInfo.setAssignModeAbled(false);
		}

		return k060111AssignInfo;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<K060111PaperMarkInfo> getPaperMarkInfo(String examineId) {

		// 检索试卷及试卷的评分者信息
		List<K060111PaperMarkInfo> k060111PaperMarkInfos = k060111Dao
				.getPaperMarkInfo(examineId);

		// 设定试卷的完成状态
		for (K060111PaperMarkInfo k060111PaperMarkInfo : k060111PaperMarkInfos) {

			// 无评分者时设定完成状态为空
			if (k060111PaperMarkInfo.getMarkingEmpid() == null
					|| "".equals(k060111PaperMarkInfo.getMarkingEmpid())) {
				k060111PaperMarkInfo.setCompleteStatus("");
				// 有评分者时按为完成的数量设定完成状态
			} else {
				//员工没答卷
				if(k060111Dao.getEmpAnswerCnt(k060111PaperMarkInfo) == 0){
					k060111PaperMarkInfo.setCompleteStatus(completeStatusNo);
				}
				//员工答卷了
				else{
					//已评分
					if (k060111Dao.getNotCompleteCnt(k060111PaperMarkInfo) == 0) {
						k060111PaperMarkInfo.setCompleteStatus(completeStatusYes);
					} 
					//未评分
					else {					
						k060111PaperMarkInfo.setCompleteStatus(completeStatusNo);
					}
				}
			}
		}
		return k060111PaperMarkInfos;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int getRemainTaskNum(List<K060111PaperMarkInfo> paperMarkInfoList) {

		// 剩余任务量
		int remainTaskNum = 0;
		for (K060111PaperMarkInfo k060111PaperMarkInfo : paperMarkInfoList) {
			// 没有评分者的数据，剩余任务量累加
			if (k060111PaperMarkInfo.getMarkingEmpid() == null
					|| "".equals(k060111PaperMarkInfo.getMarkingEmpid())) {
				remainTaskNum = remainTaskNum + 1;
			}
		}

		return remainTaskNum;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<K060111TaskInfo> getMarkingTaskNumList(
			List<K060111PaperMarkInfo> paperMarkInfoList) {

		// 任务量初始化
		int taskNum = 1;
		// 试卷种类初始化
		int paperSpecies = 1;
		// 评分者任务量信息的定义
		List<K060111TaskInfo> taskInfos = new ArrayList<K060111TaskInfo>();
		// 取得paperMarkInfoList信息时按
		for (int i = 0; i < paperMarkInfoList.size(); i++) {

			String markingEmpId = paperMarkInfoList.get(i).getMarkingEmpid();
			String markingEmpName = paperMarkInfoList.get(i)
					.getMarkingEmpName();
			String paperId = paperMarkInfoList.get(i).getPaperId();
			if (markingEmpId != null && !"".equals(markingEmpId)) {
				if (i == paperMarkInfoList.size() - 1) {
					// 评分者任务量信息设定
					K060111TaskInfo taskInfo = new K060111TaskInfo();
					taskInfo.setMarkingEmpid(markingEmpId);
					taskInfo.setMarkingEmpName(markingEmpName);
					taskInfo.setTaskNum(taskNum);
					taskInfo.setPaperSpecies(paperSpecies);
					taskInfos.add(taskInfo);
				} else {
					if (markingEmpId.equals(paperMarkInfoList.get(i + 1)
							.getMarkingEmpid())) {
						taskNum = taskNum + 1;
						if (!paperId.equals(paperMarkInfoList.get(i + 1)
								.getPaperId())) {
							paperSpecies = paperSpecies + 1;
						}
					} else {
						// 评分者任务量信息设定
						K060111TaskInfo taskInfo = new K060111TaskInfo();
						taskInfo.setMarkingEmpid(markingEmpId);
						taskInfo.setMarkingEmpName(markingEmpName);
						taskInfo.setTaskNum(taskNum);
						taskInfo.setPaperSpecies(paperSpecies);
						taskInfos.add(taskInfo);
						taskNum = 1;
						paperSpecies = 1;
					}
				}
			}
		}

		return taskInfos;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<K060111EmpMarkInfo> getEmpMarkInfo(String examineId) {

		// 检索大题及大题的评分者信息
		List<K060111EmpMarkInfo> k060111EmpMarkInfos = k060111Dao
				.getEmpMarkInfo(examineId);

		// 设定大题的完成状态
		for (K060111EmpMarkInfo k060111EmpMarkInfo : k060111EmpMarkInfos) {

			// 无评分者时设定完成状态为空
			if (k060111EmpMarkInfo.getExamMarkerId() == null
					|| "".equals(k060111EmpMarkInfo.getExamMarkerId())) {
				k060111EmpMarkInfo.setCompleteStatus("");
				// 有评分者时按为完成的数量设定完成状态
			} else {
				//有答案
				if(k060111Dao.getAnswerCnt(k060111EmpMarkInfo) == 0){
					k060111EmpMarkInfo.setCompleteStatus(completeStatusNo);
				}
				//无答案
				else{
					//已完成评分
					if (k060111Dao.getNotCompleteBigQuestionCnt(k060111EmpMarkInfo) == 0) {
						k060111EmpMarkInfo.setCompleteStatus(completeStatusYes);
					//未完成评分
					} else {
						k060111EmpMarkInfo.setCompleteStatus(completeStatusNo);
					}
				}
			}
		}
		return k060111EmpMarkInfos;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int getRemainQuestionNum(List<K060111EmpMarkInfo> empMarkInfoList) {

		// 剩余题量
		int remainQuestionNum = 0;
		for (K060111EmpMarkInfo k060111EmpMarkInfo : empMarkInfoList) {
			// 没有评分者的数据，剩余任务量累加
			if (k060111EmpMarkInfo.getExamMarkerId() == null
					|| "".equals(k060111EmpMarkInfo.getExamMarkerId())) {
				remainQuestionNum = remainQuestionNum + 1;
			}
		}

		return remainQuestionNum;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<K060111QuestionNumInfo> getQuestionNumList(
			List<K060111EmpMarkInfo> empMarkInfoList) {
		// 评分者大题量信息的定义
		List<K060111QuestionNumInfo> questionInfos = new ArrayList<K060111QuestionNumInfo>();
		// 大题量初始化
		int questionNum = 1;
		// 取得empMarkInfoList信息
		for (int i = 0; i < empMarkInfoList.size(); i++) {

			String examMarkerId = empMarkInfoList.get(i).getExamMarkerId();
			String examMarkerNm = empMarkInfoList.get(i).getExamMarkerNM();
			if (examMarkerId == null || "".equals(examMarkerId)) {

			} else {
				if (i == empMarkInfoList.size() - 1) {
					// 评分者大题量信息设定
					K060111QuestionNumInfo questionInfo = new K060111QuestionNumInfo();
					questionInfo.setMarkingEmpid(examMarkerId);
					questionInfo.setMarkingEmpName(examMarkerNm);
					questionInfo.setQuestionNum(questionNum);
					questionInfos.add(questionInfo);
				} else {
					if (examMarkerId.equals(empMarkInfoList.get(i + 1)
							.getExamMarkerId())) {
						questionNum = questionNum + 1;
					} else {
						// 评分者大题量信息设定
						K060111QuestionNumInfo questionInfo = new K060111QuestionNumInfo();
						questionInfo.setMarkingEmpid(examMarkerId);
						questionInfo.setMarkingEmpName(examMarkerNm);
						questionInfo.setQuestionNum(questionNum);
						questionInfos.add(questionInfo);
						questionNum = 1;
					}
				}
			}
		}

		return questionInfos;
	}

	/*
	 * {@inheritDoc}
	 */
	@Override
	public void updateExamineInfo(ExamineInfo examineInfo) {
		k060111Dao.updateExamineInfo(examineInfo);

	}

	/*
	 * {@inheritDoc}
	 */
	@Override
	public void deleteMarkTask(String examineId) {
		k060111Dao.deleteMarkTask(examineId);
	}

	/*
	 * {@inheritDoc}
	 */
	@Override
	public void insertMarkPaperTask(List<K060111PaperMarkInfo> paperMarkInfoList) {
		for (int i = 0; i < paperMarkInfoList.size(); i++) {
			k060111Dao.insertMarkPaper(paperMarkInfoList.get(i));
		}
		
		// QIANGUORONG 10/28追加：更新全局Sesssion中的权限版本时间戳
		ttCommonService.authrityTimestampUpdate();
	}

	/*
	 * {@inheritDoc}
	 */
	@Override
	public void insertMarkQuestionTask(List<K060111EmpMarkInfo> empMarkInfoList) {
		for (int i = 0; i < empMarkInfoList.size(); i++) {
			k060111Dao.insertMarkQuestion(empMarkInfoList.get(i));
		}
	}

	/**
	 * @param dao
	 *            the k060111Dao to set
	 */
	public void setK060111Dao(K060111Dao dao) {
		k060111Dao = dao;
	}

	/**
	 * @param ttCommonService the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}

	/**
	 * @return the ttCommonService
	 */
	public TtCommonService getTtCommonService() {
		return ttCommonService;
	}

}
