/*
 * @(#)K060081ServiceImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 教育子系统
 */

/**
 * 考试报名信息检索
 * 
 * @author wangqingzhu
 * @version 1.00 2010/04/19
 */
package com.yds.tt.testing.service.impl;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.yds.base.service.AbstractBaseService;
import com.yds.tt.manager.bean.TtCheckResult;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.testing.bean.ExamineInfo;
import com.yds.tt.testing.bean.K060081EnrollInfo;
import com.yds.tt.testing.bean.K060081UpdateInfo;
import com.yds.tt.testing.dao.K060081Dao;
import com.yds.tt.testing.service.K060081Service;

/**
 * @see com.yds.tt.testing.service.K060081Service
 */
@Service("k060081Service")
public class K060081ServiceImpl extends AbstractBaseService implements
		K060081Service {

	private static final String CONNECTCOMMA = ","; // 逗号链接符
	private K060081Dao k060081Dao;
	private TtCommonService ttCommonService;
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamineInfo getExamineInfo(String examineId) {
		ExamineInfo examineInfo = k060081Dao.getExamineInfo(examineId);
		return examineInfo;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<K060081EnrollInfo> getEnrollInfo(ExamineInfo k060081ExamineInfo) {

		List<K060081EnrollInfo> enrollInfo = k060081Dao.getArdEnrollInfo(k060081ExamineInfo);
		return enrollInfo;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void updateSanctionInfo(List<K060081EnrollInfo> k060081EnrollList,
			ExamineInfo k060081ExamineInfo) {

		if (k060081EnrollList.size() > 0) {

			for (K060081EnrollInfo k681Info : k060081EnrollList) {
				K060081UpdateInfo k681UpdateInfo = new K060081UpdateInfo();

				// 审批状态
				Integer diffNo = k681Info.getDiffNo();
				// 员工ID
				String userId = k681Info.getUserId();
				// 报名不批准原因
				//String applyRefuseReason = k681Info.getApplyRefuseReason();

				k681UpdateInfo.setUserId(userId);
				k681UpdateInfo.setExamineId(k060081ExamineInfo
						.getExamineId());

				// 审批状态 != "已批准"时
				if (null == diffNo) {
					k681UpdateInfo.setExamineStartDate(k060081ExamineInfo
							.getExamineStartDate());
					k681UpdateInfo.setExamineEndDate(k060081ExamineInfo
							.getExamineEndDate());
					//k681UpdateInfo.setApplyRefuseReason(applyRefuseReason);
					k060081Dao.insertEmployee(k681UpdateInfo);
				} else {
					// 审批批准="等待批准"或"不批准"
					if (diffNo == TtConstants.R13.R13_1.value()
							|| diffNo == TtConstants.R13.R13_3.value()) {
						k681UpdateInfo.setDiffNo(TtConstants.R13.R13_2
								.value());
						//k681UpdateInfo.setApplyRefuseReason("");
						k060081Dao.updateEmployee(k681UpdateInfo);
					}
				}
			}
		}

		// 考试状态为<报名结束>
		if (k060081ExamineInfo.getExamineStatus() == TtConstants.R12.R12_5
				.value()) {

			// 取得当前考试下员工的审批状态
			List<Map<String, Integer>> mapStatusList = k060081Dao
					.getEmpexamstatus(k060081ExamineInfo.getExamineId());
			for (Map<String, Integer> mapSt : mapStatusList) {
				Integer status = mapSt.get("examStatus");
				if (status == TtConstants.R13.R13_2.value()) {

					// 更新考试信息表
					Map<String, Object> map = new HashMap<String, Object>();
					map.put("examineId", k060081ExamineInfo.getExamineId());

					// 考试状态变为<报名已批准>
					map.put("examineStatus", TtConstants.R12.R12_6.value());
					k060081Dao.updateExamineInfo(map);
					break;
				}
			}
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void updateUnsanctionInfo(List<K060081EnrollInfo> k060081EnrollList,
			ExamineInfo k060081ExamineInfo) {
		if (k060081EnrollList != null && k060081EnrollList.size() > 0) {
			for (K060081EnrollInfo k681Info : k060081EnrollList) {

				K060081UpdateInfo k681UpdateInfo = new K060081UpdateInfo();

				// 审批状态
				Integer diffNo = k681Info.getDiffNo();
				// 员工ID
				String userId = k681Info.getUserId();
				// 报名不批准原因
				//String applyRefuseReason = k681Info.getApplyRefuseReason();
				k681UpdateInfo.setUserId(userId);
				k681UpdateInfo.setExamineId(k060081ExamineInfo
						.getExamineId());

				// 审批状态 != "不批准"和"未报名"
				if (null != diffNo
						&& diffNo != TtConstants.R13.R13_3.value()) {
					k681UpdateInfo.setDiffNo(TtConstants.R13.R13_3.value());
					//k681UpdateInfo.setApplyRefuseReason(applyRefuseReason);
					k060081Dao.updateEmployee(k681UpdateInfo);
				}
			}
		}

		// 考试状态为<报名已批准>
		if (k060081ExamineInfo.getExamineStatus() == TtConstants.R12.R12_6
				.value()) {
			// 取得当前考试下员工的审批状态
			int haveFlg = 0;
			List<Map<String, Integer>> mapStatusList = k060081Dao
					.getEmpexamstatus(k060081ExamineInfo.getExamineId());
			for (Map<String, Integer> mapSt : mapStatusList) {
				Integer status = mapSt.get("examStatus");
				if (status == TtConstants.R13.R13_2.value()) {
					haveFlg = 1;
					break;
				}
			}
			// 当前考试下不存在审批状态为<报名已批准>的员工
			if (haveFlg == 0) {

				// 更新考试信息表

				Map<String, Object> map = new HashMap<String, Object>();
				map.put("examineId", k060081ExamineInfo.getExamineId());
				// 考试状态变为<报名已批准>

				map.put("examineStatus", TtConstants.R12.R12_5.value());
				k060081Dao.updateExamineInfo(map);
			}
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String getAllPassFlg(List<K060081EnrollInfo> k060081EnrollList,
			ExamineInfo k060081ExamineInfo) {

		// 连接字符用
		StringBuffer userIdStr = new StringBuffer();
		
		// 是否有已考过的考生Flg
		Integer endflg = 0;
		if (k060081EnrollList.size() > 0) {
			for (K060081EnrollInfo k681Info : k060081EnrollList) {

				K060081UpdateInfo k681UpdateInfo = new K060081UpdateInfo();

				// 审批状态
				Integer diffNo = k681Info.getDiffNo();
				// 员工ID
				String userId = k681Info.getUserId();

				// 审批状态 != "已批准"时
				if ((diffNo == null || diffNo != TtConstants.R13.R13_1.value())){
						//&& k681Info.isCheckFlg()) {

					// 员工考试情况检查处理
					k681UpdateInfo.setUserId(userId);
					k681UpdateInfo.setExamineId(k060081ExamineInfo
							.getExamineId());

					// 取得员工已经考过的该考试下的试卷数
					int paperAmount = k060081Dao.getPaperAmount(k681UpdateInfo);

					// 取得该考试下的试卷数
					int testPaperAmount = k060081Dao
							.getTestPaperAmount(k060081ExamineInfo
									.getExamineId());

					if (paperAmount != 0 && paperAmount == testPaperAmount) {
						if (endflg != 0) {
							userIdStr.append(CONNECTCOMMA);
						}
						userIdStr.append(userId);
						endflg = 1;
					}
				}
			}
		}

		if (endflg == 1) {
			return userIdStr.toString();
		}
		return null;
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public TtCheckResult checkStartupPerm(String examineId){ 
		// 画面ID
		String pageId = TtConstants.PageId.K060081.value();
		// 事件ID
		String eventId = "K060081";
		// 对象区分
		Integer typeId = TtConstants.C43.C43_3.value();
		// 对象ID
		List<String> objectId = new ArrayList<String>();
		objectId.add(examineId);
		return ttCommonService.checkStartupAuthority(
				pageId, eventId, 0, 0, 0, typeId, objectId);
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public Boolean checkObjectPerm(String examineId){
		// 设置对象ID
		List<String> objectId = new ArrayList<String>();
		objectId.add(examineId);
		// 对象区分
		Integer typeId = TtConstants.C43.C43_3.value();
		// 权限
		ArrayList<Integer> authoritys = new ArrayList<Integer>();
		authoritys.add(TtConstants.C24.C24_12.value());
		
		return ttCommonService.checkObjectAuthority(objectId, typeId,
				authoritys).getRetFlag();
	}

	/**
	 * @return the k060081Dao
	 */
	public K060081Dao getK060081Dao() {
		return k060081Dao;
	}

	/**
	 * @param dao
	 *            the k060081Dao to set
	 */
	public void setK060081Dao(K060081Dao dao) {
		k060081Dao = dao;
	}

	/**
	 * @param ttCommonService the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}

}
