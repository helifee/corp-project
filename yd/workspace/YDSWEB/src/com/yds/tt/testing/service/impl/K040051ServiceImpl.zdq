/*
 * @(#) K040051ServiceImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 考试子系统
 */
package com.yds.tt.testing.service.impl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.springframework.stereotype.Service;

import com.yds.base.service.AbstractBaseService;
import com.yds.common.service.SysCodeInfoService;
import com.yds.tt.manager.bean.KeywordInfo;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtCommonUtil;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.manager.service.TtExclusiveException;
import com.yds.tt.testing.bean.AnswerInfo;
import com.yds.tt.testing.bean.AnswerPointInfo;
import com.yds.tt.testing.bean.QuestionLibrary;
import com.yds.tt.testing.dao.K040051Dao;
import com.yds.tt.testing.service.K040051Service;

/**
 * @see com.yds.tt.testing.service.K040051Service
 */
@Service("k040051Service")
public class K040051ServiceImpl extends AbstractBaseService implements
		K040051Service {
	private K040051Dao k040051Dao;
	
	// 共通Service
	private TtCommonService ttCommonService;
	private SysCodeInfoService sysCodeInfoService; 

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<QuestionLibrary> getQuestionInfos(List<String> queIdlist) {

		// 根据参数，检索显示列表.
		List<QuestionLibrary> questionLibraryList = k040051Dao.getQuestionLibraryList(queIdlist);
		
		// 画面显示列表
		List<QuestionLibrary> quesLibList = new ArrayList<QuestionLibrary>();
		// 题库信息答案列表取得
		for (int i = 0; i < queIdlist.size(); i++) {
			
			// 取得questionId
			String questionId = queIdlist.get(i);
			
			// 分类出答案列表
			List<AnswerInfo> ansInfoList = new ArrayList<AnswerInfo>();
			
			// 分类出答案得分点列表
			List<AnswerPointInfo> ansPointInfoList = new ArrayList<AnswerPointInfo>();
			
			// 记录数据行数
			int index = -1;
			
			// 取得答案列表和答案得分点列表
			for (int j = 0; j < questionLibraryList.size(); j++) {
				if (questionId.equals(questionLibraryList.get(j).getQuestionId())) {
					index = j;
					AnswerInfo ansInfo = new AnswerInfo();
					AnswerPointInfo ansPoInfo = new AnswerPointInfo();
					QuestionLibrary queLib = questionLibraryList.get(j);
					ansInfo.setQuestionVersionNo(queLib.getQuestionVersionNo());
					ansInfo.setQuestionId(queLib.getQuestionId());
					ansInfo.setAnswerSerialNo(queLib.getAnswerSerialNo());
					ansInfo.setAnswerContent(queLib.getAnswerContent());
					ansInfo.setAnswerContentView(queLib.getAnswerContentView());
					ansInfo.setAnswerScore(queLib.getAnswerScore());
					ansInfo.setAnswerType(queLib.getAnswerType());
					ansInfo.setAnswerTypeName(queLib.getAnswerTypeName());
					ansInfo.setOptionNumber(queLib.getOptionNumber());
					ansInfo.setBlankNumber(queLib.getBlankNumber());
					ansInfo.setOptionTypeName(queLib.getOptionTypeName());
					ansInfo.setOptionType(queLib.getOptionType());
					ansInfo.setAttachFilePath(queLib.getAttachFilePath());
					ansPoInfo.setPointContent(queLib.getPointContent());
					ansPoInfo.setPointScore(queLib.getPointScore());
					ansPoInfo.setQuestionId(queLib.getQuestionId());
					ansPoInfo.setQuestionVersionNo(queLib.getQuestionVersionNo());
					ansPoInfo.setAnswerSerialNo(queLib.getAnswerSerialNo());
					
					ansInfoList.add(ansInfo);
					ansPointInfoList.add(ansPoInfo);
				}
			}
			
			List<AnswerInfo> answerInfoList = new ArrayList<AnswerInfo>();
			if (ansInfoList.size() > 0) {
				answerInfoList.add(ansInfoList.get(0));
				
				// 取出答案列表中重复项
				for (int a = 1; a < ansInfoList.size(); a++) {
					AnswerInfo ansTemp1 = ansInfoList.get(a);
					int size = answerInfoList.size();
					boolean flg = false;
					for (int b = 0; b < size; b++) {
						AnswerInfo ansTemp2 = answerInfoList.get(b);
						if (ansTemp1.getQuestionId().equals(ansTemp2.getQuestionId())
								&& (ansTemp1.getAnswerSerialNo().intValue() == ansTemp2.getAnswerSerialNo().intValue())) {
							flg = true;
						}
					}
					if (!flg) {
						answerInfoList.add(ansTemp1);
					}
				}
				
				// 取得画面显示列表
				if (index != -1) {
					QuestionLibrary queLib = questionLibraryList.get(index);
					
					queLib.setUpdateTimeFlag(String.valueOf(queLib.getUpdateTime()));
					
					// 取得答案得分点列表
					for (int j = 0 ; j < answerInfoList.size(); j++) {
						AnswerInfo ansInfo = answerInfoList.get(j);
						if (queLib.getQuestionId().equals(ansInfo.getQuestionId())) {
							List<AnswerPointInfo> ansPoiInfoList = new ArrayList<AnswerPointInfo>();
							for (int z = 0; z < ansPointInfoList.size(); z++) {
								AnswerPointInfo ansPoInfo = ansPointInfoList.get(z);
								if (ansInfo.getQuestionId().equals(ansPoInfo.getQuestionId()) 
										&& (ansInfo.getAnswerSerialNo().intValue() == ansPoInfo.getAnswerSerialNo().intValue())) {
									ansPoiInfoList.add(ansPoInfo);
								}
							}
							answerInfoList.get(j).setAnswerPointInfoList(ansPoiInfoList);
						}
						
						// 答案表示处理
						// 单选题,多选题(0,1,2)变成(A,B,C)
						if (ansInfo.getAnswerType().equals(
								Integer.valueOf(TtConstants.R03.R03_1.toString())) ||
							ansInfo.getAnswerType().equals(
										Integer.valueOf(TtConstants.R03.R03_2.toString()))	) {
							// 答案id
							String[] answerIdList = ansInfo.getAnswerContent().split(",");
							StringBuffer answerContent = new StringBuffer();
							
							// 答案选项类型
							Integer optionType= ansInfo.getOptionType();
							
							// 答案选项内容
							String answerTypeName=sysCodeInfoService.getDiffName("E02", optionType);
							String[] answerTypeNameList = answerTypeName.split(",");
							
							for(int answerIdCnt=0;answerIdCnt < answerIdList.length;answerIdCnt++){
								Integer optionNum = Integer.valueOf(answerIdList[answerIdCnt].trim());
								answerContent.append(answerTypeNameList[optionNum]);
								if(answerIdCnt != answerIdList.length - 1){
									answerContent.append(",");
								}
							}
							answerInfoList.get(j).setAnswerContentView(answerContent.toString());
						}

						// 判断题
						if (ansInfo.getAnswerType().equals(
								Integer.valueOf(TtConstants.R03.R03_3.toString()))) {
							// 答案id
							String answerId = ansInfo.getAnswerContent().trim();
							
							// 答案选项类型
							Integer optionType= ansInfo.getOptionType();
							
							// 答案选项内容
							String answerTypeName=sysCodeInfoService.getDiffName("E03", optionType);
							String[] answerTypeNameList = answerTypeName.split("/");

							answerInfoList.get(j).setAnswerContentView(answerTypeNameList[Integer.valueOf(answerId)]);
						}

						// 填空题
						if (ansInfo.getAnswerType().equals(
								Integer.valueOf(TtConstants.R03.R03_4.toString()))) {
							// 答案id
							String[] answerContentList = ansInfo.getAnswerContent().split(TtConstants.BLANK_SEPARATER);
							StringBuffer answerContent = new StringBuffer();
							
							for(int answerIdCnt=0;answerIdCnt < answerContentList.length;answerIdCnt++){
								answerContent.append("<span class=\"color_blue\">[");
								answerContent.append(answerIdCnt + 1);
								answerContent.append("]</span>");
								answerContent.append(answerContentList[answerIdCnt]);
								if(answerIdCnt != answerContentList.length - 1){
									answerContent.append(" ");
								}
							}
							answerInfoList.get(j).setAnswerContentView(answerContent.toString());
						}
						
						// 上传题
						if (ansInfo.getAnswerType().equals(
								Integer.valueOf(TtConstants.R03.R03_6.toString()))) {

							answerInfoList.get(j).setAnswerContentView(ansInfo.getAttachFilePath());
						}
						
					}
					// 设置答案列表
					queLib.setAnswerInfoList(answerInfoList);
					
					// 设置显示列表
					quesLibList.add(queLib);
				}
			}

		}
		// 题库信息列表返回
		return quesLibList;
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<QuestionLibrary> setAllInfoToQuestion(List<QuestionLibrary> questionInfo){
		for(int i = 0 ; i < questionInfo.size();i++){
			// 分类ID
			Integer category1 = questionInfo.get(i).getCategory1Id();
			Integer category2 = questionInfo.get(i).getCategory2Id();
			Integer category3 = questionInfo.get(i).getCategory3Id();
			
			// 分类名称设置
			 questionInfo.get(i).setCategoryName(k040051Dao.getCategoryName(category1, category2, category3));

			// 试题核对状态
			Integer checkFlg = questionInfo.get(i).getCheckFlg();
			// 试题核对状态名称设置
			questionInfo.get(i).setCheckFlagName(sysCodeInfoService.getDiffName("R04", checkFlg));
			
			// 试题类型
			Integer questionType = questionInfo.get(i).getQuestionType();
			// 试题类型名称设置
			questionInfo.get(i).setQuestionTypeName(sysCodeInfoService.getDiffName("R02", questionType));
			
			// 试题难度
			Integer questionDifficulty = questionInfo.get(i).getQuestionDifficulty();
			// 试题难度名称设置
			questionInfo.get(i).setQuestionDifficultyName(sysCodeInfoService.getDiffName("E01", questionDifficulty));
			
			// 创建者
			String createUserId = questionInfo.get(i).getCreateUserId();
			questionInfo.get(i).setCreateUserName(ttCommonService.getUserName(createUserId));
			
			// 更新者
			String updateUserId = questionInfo.get(i).getUpdateUserId();
			questionInfo.get(i).setUpdateUserName(ttCommonService.getUserName(updateUserId));
			
			List<AnswerInfo> answerInfoList = questionInfo.get(i).getAnswerInfoList();
			
			for (int j = 0 ; j < answerInfoList.size(); j++) {
				AnswerInfo ansInfo = answerInfoList.get(j);
				
				// 答案类型
				ansInfo.setAnswerTypeName(sysCodeInfoService.getDiffName("R03", ansInfo.getAnswerType()));
				
				ansInfo.setOptionTypeId("");
				ansInfo.setAnswerContentView(ansInfo.getAnswerContent());
				
				// 答案表示处理
				// 单选题,多选题(0,1,2)变成(A,B,C)
				if (ansInfo.getAnswerType().equals(
						Integer.valueOf(TtConstants.R03.R03_1.toString())) ||
					ansInfo.getAnswerType().equals(
								Integer.valueOf(TtConstants.R03.R03_2.toString()))	) {
					// 答案id
					String[] answerIdList = ansInfo.getAnswerContent().split(",");
					StringBuffer answerContent = new StringBuffer();
					
					// 答案选项类型
					Integer optionType= ansInfo.getOptionType();
					
					// 答案选项内容
					String answerTypeName=sysCodeInfoService.getDiffName("E02", optionType);
					String[] answerTypeNameList = answerTypeName.split(",");
					
					// 选项表达方式
					ansInfo.setOptionTypeName(answerTypeName);
					ansInfo.setOptionTypeId("E02");
					
					for(int answerIdCnt=0;answerIdCnt < answerIdList.length;answerIdCnt++){
						Integer optionNum = Integer.valueOf(answerIdList[answerIdCnt].trim());
						answerContent.append(answerTypeNameList[optionNum]);
						if(answerIdCnt != answerIdList.length - 1){
							answerContent.append(",");
						}
					}
					answerInfoList.get(j).setAnswerContentView(answerContent.toString());
				}

				// 判断题
				if (ansInfo.getAnswerType().equals(
						Integer.valueOf(TtConstants.R03.R03_3.toString()))) {
					// 答案id
					String answerId = ansInfo.getAnswerContent().trim();
					
					// 答案选项类型
					Integer optionType= ansInfo.getOptionType();
					
					// 答案选项内容
					String answerTypeName=sysCodeInfoService.getDiffName("E03", optionType);
					String[] answerTypeNameList = answerTypeName.split("/");

					// 选项表达方式
					ansInfo.setOptionTypeName(answerTypeName);
					ansInfo.setOptionTypeId("E03");
					
					answerInfoList.get(j).setAnswerContentView(answerTypeNameList[Integer.valueOf(answerId)]);
				}

				// 填空题
				if (ansInfo.getAnswerType().equals(
						Integer.valueOf(TtConstants.R03.R03_4.toString()))) {
					// 答案id
					String[] answerContentList = ansInfo.getAnswerContent().split(TtConstants.BLANK_SEPARATER);
					StringBuffer answerContent = new StringBuffer();
					
					for(int answerIdCnt=0;answerIdCnt < answerContentList.length;answerIdCnt++){
						answerContent.append("'");
						answerContent.append(answerContentList[answerIdCnt]);
						answerContent.append("'");
						if(answerIdCnt != answerContentList.length - 1){
							answerContent.append(",");
						}
					}
					answerInfoList.get(j).setAnswerContentView(answerContent.toString());
				}
				
				// 上传题
				if (ansInfo.getAnswerType().equals(
						Integer.valueOf(TtConstants.R03.R03_6.toString()))) {

					answerInfoList.get(j).setAnswerContentView(ansInfo.getAttachFilePath());
				}
				
				questionInfo.get(i).setAnswerInfoList(answerInfoList);
				
			}
			
		}
		
		return questionInfo;
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public void updateCheckPass(QuestionLibrary question,Date updateTime) {
		
		// 排他检查
		if(!question.getUpdateTimeFlag().equals(String.valueOf(updateTime))){
			throw new TtExclusiveException();
		}
		// 对该试题进行试题核对处理.
		// 取得用户ID
		String userId = TtCommonUtil.getLoginUserId();
		question.setUpdateUserId(userId);
		k040051Dao.updateCheckPass(question);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void deleteQuestion(List<QuestionLibrary> questionInfo) {
		
		// 排他检查
		for (int i = 0; i < questionInfo.size(); i++) {
			questionInfo.get(i).setOldQuestionVersionNo(questionInfo.get(i).getQuestionVersionNo());
		}
		checkUpdateTimeList(questionInfo);
		// 取得用户ID
		String userId = TtCommonUtil.getLoginUserId();
		
		// 以接口参数.试题ID[n]个数循环进行更新删除的处理.
		k040051Dao.deleteQuestion(questionInfo,userId);

	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Date getUpdateTime(QuestionLibrary question) {

		// 对该记录的时间戳进行检查.
		return k040051Dao.getUpdateTime(question);

	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void checkUpdateTimeList(List<QuestionLibrary> question) {

		// 检索当前DB中的时间戳。
		List<Date> updateTimeList = k040051Dao.getUpdateTimeList(question);

		for (int i = 0; i < question.size(); i++) {
			if (!(question.get(i).getUpdateTimeFlag().equals(String.valueOf(updateTimeList.get(i))))) {
				throw new TtExclusiveException();
			}
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void insertQuestion(List<QuestionLibrary> questionLibrary,
			Integer mode) {

		// 取得用户ID
		String userId = TtCommonUtil.getLoginUserId();

		// 取得最大日期.
		Date maxDate = TtCommonUtil.getMaxDate();

		// 模式为<题库确认>或<无修改模式>时
		if ((mode == TtConstants.C29.C29_4.value())
				|| (mode == TtConstants.C29.C29_5.value())) {
			for (int i = 0; i < questionLibrary.size(); i++) {
				QuestionLibrary question = questionLibrary.get(i);
				question.setCreateUserId(userId);
				question.setUpdateUserId(userId);
				// 已核对时.
				if (question.getCheckFlg() == 2) {
					question.setVersionStartTime(new Date());
					question.setVersionEndTime(maxDate);
					question.setCheckFlg(2);

					// 未核对时.
				} else {
					question.setVersionStartTime(null);
					question.setVersionEndTime(null);
					question.setCheckFlg(1);
				}
				
				// 取得试题ID，采番
				question.setQuestionId(ttCommonService
						.getSequence(TtConstants.SEQID.Question));

				// 将该条记录登录到题库表中.
				k040051Dao.insertTikuTable(question,mode);

				// 该试题有答案时.
				if (null != question.getAnswerInfoList()) {

					// 将答案内容登录到答案表中.
					for (int j = 0; j < question.getAnswerInfoList().size(); j++) {
						AnswerInfo answerInfo = question.getAnswerInfoList()
								.get(j);
						answerInfo.setQuestionId(question.getQuestionId());
						answerInfo.setQuestionVersionNo(1);
						answerInfo.setAnswerSerialNo(0);
						k040051Dao.insertDaanTable(answerInfo);
					}
				}
			}

		// 模式为<考试卷新建确认>或<练习卷新建确认>时
		} else if ((mode == TtConstants.C29.C29_8.value())
				|| (mode == TtConstants.C29.C29_10.value())) {
			
			for (int i = 0; i < questionLibrary.size(); i++) {
				QuestionLibrary question = questionLibrary.get(i);
				
				question.setVersionStartTime(new Date());
				question.setVersionEndTime(maxDate);
				
				question.setCreateUserId(userId);
				question.setUpdateUserId(userId);

				// 将该条记录登录到题库表中.
				k040051Dao.insertTikuTable(question,mode);

				// 该试题有答案时.
				if (null != question.getAnswerInfoList()) {

					// 将答案内容登录到答案表中.
					for (int j = 0; j < question.getAnswerInfoList().size(); j++) {
						AnswerInfo answerInfo = question.getAnswerInfoList()
								.get(j);
						answerInfo.setQuestionId(question.getQuestionId());
						answerInfo.setQuestionVersionNo(question
								.getQuestionVersionNo());

						// 将该条记录登录到答案表中.
						k040051Dao.insertDaanTable(answerInfo);

						// 该答案有得分点时.
						if (null != answerInfo.getAnswerPointInfoList()) {

							// 将该条记录登录到得分点表中.
							for (int z = 0; z < answerInfo
									.getAnswerPointInfoList().size(); z++) {
								AnswerPointInfo answerPointInfo = answerInfo
										.getAnswerPointInfoList().get(z);
								answerPointInfo.setQuestionId(question
										.getQuestionId());
								answerPointInfo.setQuestionVersionNo(answerInfo
										.getQuestionVersionNo());
								answerPointInfo.setAnswerSerialNo(answerInfo
										.getAnswerSerialNo());
								k040051Dao
										.insertDefendianTable(answerPointInfo);
							}
						}
					}
				}

				// 该条记录有关键字时.
				if (!(("").equals(question.getKeyword()))) {
					KeywordInfo keyWordInfo = new KeywordInfo();
					Integer keyWord = question.getCategory1Id();
					keyWordInfo.setGateGroupId(keyWord);
					keyWordInfo.setKeywordName(question.getKeyword());

					// 记录是否存在.
					KeywordInfo keyExit = k040051Dao.selWordTable(keyWordInfo);

					// 若记录不存在.
					if (null == keyExit) {

						// 将该条记录登录到关键字表中.
						k040051Dao.insertKeyWordTable(keyWordInfo);
					}
				}

				//将该条记录登录到题库资料表中.
				//k040051Dao.insertTikuziliaoTable(question);

			}

		// 模式为<考试卷修改确认>或<练习卷修改确认>时
		} else if ((mode == TtConstants.C29.C29_9.value())
				|| (mode == TtConstants.C29.C29_11.value())) {

			// 排他检查
			checkUpdateTimeList(questionLibrary);
			
			for (int i = 0; i < questionLibrary.size(); i++) {
				QuestionLibrary question = questionLibrary.get(i);
				question.setCreateUserId(userId);
				question.setUpdateUserId(userId);
				question.setVersionStartTime(new Date());
				question.setVersionEndTime(maxDate);
				
				question.setQuestionVersionNo(question.getQuestionVersionNo());
				
				// 将该条记录登录到题库表中.
				k040051Dao.insertTikuTable(question,mode);

				// 该试题有答案时.
				for (int j = 0; j < question.getAnswerInfoList().size(); j++) {
					AnswerInfo answerInfo = question.getAnswerInfoList().get(j);
					answerInfo.setQuestionId(question.getQuestionId());

					// 将该条记录登录到答案表中.
					k040051Dao.insertDaanTable(answerInfo);

					// 该答案有得分点时.
					for (int z = 0; z < answerInfo.getAnswerPointInfoList()
							.size(); z++) {
						AnswerPointInfo answerPointInfo = answerInfo
								.getAnswerPointInfoList().get(z);
						answerPointInfo.setQuestionId(question.getQuestionId());

						// 将该条记录登录到得分点表中.
						k040051Dao
								.insertDefendianTable(answerPointInfo);
					}
				}

				// 该条记录有关键字时.
				if (!(("").equals(question.getKeyword()))) {
					KeywordInfo keyWordInfo = new KeywordInfo();
					keyWordInfo.setGateGroupId(question.getCategory1Id());
					keyWordInfo.setKeywordName(question.getKeyword());

					// 记录是否存在.
					KeywordInfo keyExit = k040051Dao.selWordTable(keyWordInfo);

					// 若记录不存在.
					if (null == keyExit) {

						// 将该条记录登录到关键字表中.
						k040051Dao.insertKeyWordTable(keyWordInfo);
					}
				}

				// 将该条记录登录到题库资料表中.
				//k040051Dao.insertTikuziliaoTable(question);
				
				// 将该条记录更新到题库表中.
				k040051Dao.updateTikuTable(question);
			}
		}
	}

	/**
	 * @param dao
	 *            the k040051Dao to set
	 */
	public void setK040051Dao(K040051Dao dao) {
		k040051Dao = dao;
	}

	/**
	 * @param ttCommonService the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}

	/**
	 * @param sysCodeInfoService the sysCodeInfoService to set
	 */
	public void setSysCodeInfoService(SysCodeInfoService sysCodeInfoService) {
		this.sysCodeInfoService = sysCodeInfoService;
	}

	

}
