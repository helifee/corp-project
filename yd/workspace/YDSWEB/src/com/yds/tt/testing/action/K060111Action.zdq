/*
 * @(#) K060111Action.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试系统
 *    SubSystem: 考试子系统
 */

package com.yds.tt.testing.action;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.opensymphony.xwork2.interceptor.annotations.InputConfig;
import com.yds.base.action.AbstractBaseAction;
import com.yds.common.bean.SysCodeInfo;
import com.yds.common.service.SysCodeInfoService;
import com.yds.tt.manager.bean.TtCheckResult;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtConstants;
//import com.yds.tt.manager.service.TtExclusiveException;
//import com.yds.tt.manager.service.TtExclusiveExtException;
import com.yds.tt.testing.bean.ExamineInfo;
import com.yds.tt.testing.bean.K060111AssignInfo;
import com.yds.tt.testing.bean.K060111EmpMarkInfo;
import com.yds.tt.testing.bean.K060111PaperMarkInfo;
import com.yds.tt.testing.bean.K060111QuestionNumInfo;
import com.yds.tt.testing.bean.K060111TaskInfo;
import com.yds.tt.testing.service.K060111Service;

/**
 * 评分任务分配
 * 
 * @author qiliqiang
 * @version 1.00 2010/03/23
 */
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@Controller("k060111Action")
public class K060111Action extends AbstractBaseAction {

	private static final long serialVersionUID = -8957493100811323008L;
	// 任务总量
	private int taskSumNum;
	// 剩余任务量
	private int remainTaskNum;
	// 考试ID
	private String examineId;
	// 考试分配方式
	private Integer markmissionFlg;
	// 分配方式信息
	private K060111AssignInfo k060111AssignInfo;
	//错误信息
	private String errorMessage; 
	// 考试信息
	private ExamineInfo examineInfo;
	// 分配方式下拉框
	private List<SysCodeInfo> assignModeList;
	// 试卷及试卷评分者信息
	private List<K060111PaperMarkInfo> paperMarkInfoList;
	// 评分者任务量信息
	private List<K060111TaskInfo> taskInfos;
	// 评分任务分配(业务逻辑)
	private K060111Service k060111Service;
	// 系统参数信息取得(业务逻辑)
	private SysCodeInfoService sysCodeInfoService;
	// 题总量
	private int questionNum;
	// 剩余题量
	private int remainQuestionNum;
	// 大题及大题评分者信息
	private List<K060111EmpMarkInfo> empMarkInfoList;
	// 评分者大题量信息
	private List<K060111QuestionNumInfo> questionNumInfoList;
	//共通处理
	private TtCommonService ttCommonService;

	/**
	 * 权限校验
	 */
	@Override
	public void validate(){
		if (examineId == null) {
			return;
		}
		
		List<String> objectId = new ArrayList<String>();
		objectId.add(examineId.substring(0, 6) + "00");
		TtCheckResult checkResult = ttCommonService.checkStartupAuthority(
				TtConstants.PageId.K060111.value(), TtConstants.PageId.K060111.value(), 0, 0, 0,
				TtConstants.C43.C43_3.value(), objectId);
		
		if (!checkResult.getRetFlag()){
			errorMessage = checkResult.getRetMessage();
			this.addActionError(ERROR);
		}
	}
	
	/**
	 * 参数校验
	 * 
	 */
	private boolean initValidation(){
		if (examineId == null) {
			errorMessage = propMgr.getMessage("yds.com.warning.0001","考试ID");
			return false;
		}
		
//		try {
//			// 锁定当前编辑章节内容
//			ttCommonService.addLock(examineId);
//		} catch (TtExclusiveException e) {
//			// 出现单键锁冲突意味着有人在进行评分任务分配
//			String userName = e.getMessage();
//			errorMessage = propMgr.getMessage("yds.tt.error.KSE67", userName);
//			return false;
//		} catch (TtExclusiveExtException e) {
//			
//			// 出现双键锁冲突说明有人在评分
//			String userName = e.getMessage();
//			errorMessage = propMgr.getMessage("yds.tt.error.KSE68", userName);
//			return false;
//		}
		
		return true;
	}
	
	/**
	 * 更新锁时间
	 * @return
	 */
	@InputConfig(resultName = ERROR)
	public String updateLock(){
		
		// 更新锁时间
//		ttCommonService.updateLock(examineId);
		return SUCCESS;
	}
	
	/**
	 * 退出编辑
	 * 
	 * @return SUCCESS
	 */
	@InputConfig(resultName = ERROR)
	public String quitMarkAssign(){
		
		// 解锁数据
//		ttCommonService.removeLock(examineId);
		
		return SUCCESS;
	}
	
	/**
	 * 画面的初期显示
	 * 
	 * @return SUCCESS
	 */
	@Override
	@InputConfig(resultName=ERROR)
	public String execute() throws Exception {

		if (!initValidation()){
			return ERROR;
		}
		
		// 分配方式下拉框取得
		assignModeList = sysCodeInfoService.getSysCodeInfo(TtConstants.C15.getEnumName());
		// 考试信息取得
		this.examineInfo = k060111Service.getExamineInfo(examineId);
		// 分配方式信息取得
		this.k060111AssignInfo = k060111Service.getAssignMode(examineInfo);
		if(k060111AssignInfo == null){
			errorMessage = propMgr.getMessage("yds.com.warning.0001","分配方式");
			return ERROR;
		}
		// 检索所有试卷及试卷评分者
		this.paperMarkInfoList = k060111Service.getPaperMarkInfo(examineId);
		if(paperMarkInfoList.size() == 0){
			errorMessage = propMgr.getMessage("yds.tt.info.JYT14","评分任务");
			return ERROR;
		}
		// 任务总量
		this.taskSumNum = paperMarkInfoList.size();
		// 剩余任务量
		this.remainTaskNum = k060111Service.getRemainTaskNum(paperMarkInfoList);
		// 评分者任务量信息
		this.taskInfos = k060111Service
				.getMarkingTaskNumList(paperMarkInfoList);
		// 大题及大题评分者信息
		this.empMarkInfoList = k060111Service.getEmpMarkInfo(examineId);
		if(empMarkInfoList.size() == 0){
			errorMessage = propMgr.getMessage("yds.tt.info.JYT14","评分任务");
			return ERROR;
		}
		// 题总量
		this.questionNum = empMarkInfoList.size();
		// 剩余题量
		this.remainQuestionNum = k060111Service
				.getRemainQuestionNum(empMarkInfoList);
		// 评分者大题量信息
		this.questionNumInfoList = k060111Service
				.getQuestionNumList(empMarkInfoList);
		return SUCCESS;
	}

	/**
	 * 更新评分任务分配（按试卷分配）
	 * 
	 * @return SUCCESS
	 */
	@InputConfig(resultName = ERROR)
	public String updateMarkPaper() {
		// 更新考试信息表
		examineInfo = new ExamineInfo();
		examineInfo.setExamineId(examineId);
		examineInfo.setMarkmissionFlg(markmissionFlg);
		k060111Service.updateExamineInfo(examineInfo);

		// 删除评分任务分配表
		k060111Service.deleteMarkTask(examineId);
		// 考试ID赋值
		for (int i = 0; i < paperMarkInfoList.size(); i++) {
			paperMarkInfoList.get(i).setExamineId(examineId);
		}
		// 插入评分任务分配表
		k060111Service.insertMarkPaperTask(paperMarkInfoList);
		// 解锁数据
//		ttCommonService.removeLock(examineId);		
		return SUCCESS;
	}

	/**
	 * 更新评分任务分配（按大题分配）
	 * 
	 * @return SUCCESS
	 */
	@InputConfig(resultName = ERROR)
	public String updateMarkQuestion() {
		// 更新考试信息表
		examineInfo = new ExamineInfo();
		examineInfo.setExamineId(examineId);
		examineInfo.setMarkmissionFlg(markmissionFlg);
		k060111Service.updateExamineInfo(examineInfo);

		// 删除评分任务分配表
		k060111Service.deleteMarkTask(examineId);
		// 考试ID赋值
		for (int i = 0; i < empMarkInfoList.size(); i++) {
			empMarkInfoList.get(i).setExamineId(examineId);
		}
		// 插入评分任务分配表
		k060111Service.insertMarkQuestionTask(empMarkInfoList);
		// 解锁数据
//		ttCommonService.removeLock(examineId);		
		return SUCCESS;
	}

	/**
	 * @return the examineId
	 */
	public String getExamineId() {
		return examineId;
	}

	/**
	 * @param examineId
	 *            the examineId to set
	 */
	public void setExamineId(String examineId) {
		this.examineId = examineId;
	}

	/**
	 * @return the k060111AssignInfo
	 */
	public K060111AssignInfo getK060111AssignInfo() {
		return k060111AssignInfo;
	}

	/**
	 * @return the examineInfo
	 */
	public ExamineInfo getExamineInfo() {
		return examineInfo;
	}

	/**
	 * @param assignInfo
	 *            the k060111AssignInfo to set
	 */
	public void setK060111AssignInfo(K060111AssignInfo assignInfo) {
		k060111AssignInfo = assignInfo;
	}

	/**
	 * @param examineInfo
	 *            the examineInfo to set
	 */
	public void setExamineInfo(ExamineInfo examineInfo) {
		this.examineInfo = examineInfo;
	}

	/**
	 * @param service
	 *            the k060111Service to set
	 */
	public void setK060111Service(K060111Service service) {
		k060111Service = service;
	}

	/**
	 * @param sysCodeInfoService
	 *            the sysCodeInfoService to set
	 */
	public void setSysCodeInfoService(SysCodeInfoService sysCodeInfoService) {
		this.sysCodeInfoService = sysCodeInfoService;
	}

	/**
	 * @return the assignModeList
	 */
	public List<SysCodeInfo> getAssignModeList() {
		return assignModeList;
	}

	/**
	 * @param assignModeList
	 *            the assignModeList to set
	 */
	public void setAssignModeList(List<SysCodeInfo> assignModeList) {
		this.assignModeList = assignModeList;
	}

	/**
	 * @return the paperMarkInfoList
	 */
	public List<K060111PaperMarkInfo> getPaperMarkInfoList() {
		return paperMarkInfoList;
	}

	/**
	 * @param paperMarkInfoList
	 *            the paperMarkInfoList to set
	 */
	public void setPaperMarkInfoList(
			List<K060111PaperMarkInfo> paperMarkInfoList) {
		this.paperMarkInfoList = paperMarkInfoList;
	}

	/**
	 * @return the remainTaskNum
	 */
	public int getRemainTaskNum() {
		return remainTaskNum;
	}

	/**
	 * @param remainTaskNum
	 *            the remainTaskNum to set
	 */
	public void setRemainTaskNum(int remainTaskNum) {
		this.remainTaskNum = remainTaskNum;
	}

	/**
	 * @return the taskInfos
	 */
	public List<K060111TaskInfo> getTaskInfos() {
		return taskInfos;
	}

	/**
	 * @param taskInfos
	 *            the taskInfos to set
	 */
	public void setTaskInfos(List<K060111TaskInfo> taskInfos) {
		this.taskInfos = taskInfos;
	}

	/**
	 * @return the taskSumNum
	 */
	public int getTaskSumNum() {
		return taskSumNum;
	}

	/**
	 * @param taskSumNum
	 *            the taskSumNum to set
	 */
	public void setTaskSumNum(int taskSumNum) {
		this.taskSumNum = taskSumNum;
	}

	/**
	 * @return the questionNum
	 */
	public int getQuestionNum() {
		return questionNum;
	}

	/**
	 * @param questionNum
	 *            the questionNum to set
	 */
	public void setQuestionNum(int questionNum) {
		this.questionNum = questionNum;
	}

	/**
	 * @return the remainQuestionNum
	 */
	public int getRemainQuestionNum() {
		return remainQuestionNum;
	}

	/**
	 * @param remainQuestionNum
	 *            the remainQuestionNum to set
	 */
	public void setRemainQuestionNum(int remainQuestionNum) {
		this.remainQuestionNum = remainQuestionNum;
	}

	/**
	 * @return the empMarkInfoList
	 */
	public List<K060111EmpMarkInfo> getEmpMarkInfoList() {
		return empMarkInfoList;
	}

	/**
	 * @param empMarkInfoList
	 *            the empMarkInfoList to set
	 */
	public void setEmpMarkInfoList(List<K060111EmpMarkInfo> empMarkInfoList) {
		this.empMarkInfoList = empMarkInfoList;
	}

	/**
	 * @return the questionNumInfoList
	 */
	public List<K060111QuestionNumInfo> getQuestionNumInfoList() {
		return questionNumInfoList;
	}

	/**
	 * @param questionNumInfoList
	 *            the questionNumInfoList to set
	 */
	public void setQuestionNumInfoList(
			List<K060111QuestionNumInfo> questionNumInfoList) {
		this.questionNumInfoList = questionNumInfoList;
	}

	/**
	 * @return the markmissionFlg
	 */
	public Integer getMarkmissionFlg() {
		return markmissionFlg;
	}

	/**
	 * @param markmissionFlg
	 *            the markmissionFlg to set
	 */
	public void setMarkmissionFlg(Integer markmissionFlg) {
		this.markmissionFlg = markmissionFlg;
	}

	/**
	 * @return the errorMessage
	 */
	public String getErrorMessage() {
		return errorMessage;
	}

	/**
	 * @param errorMessage the errorMessage to set
	 */
	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}

	/**
	 * @param ttCommonService the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}

}
