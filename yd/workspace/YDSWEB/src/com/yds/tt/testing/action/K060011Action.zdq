/*
 * @(#) K060011Action.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 考试子系统
 */
package com.yds.tt.testing.action;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.opensymphony.xwork2.Preparable;
import com.yds.base.action.AbstractBaseAction;
import com.yds.common.bean.SysCodeInfo;
import com.yds.common.service.SessionConstants;
import com.yds.common.service.SysCodeInfoService;
import com.yds.tt.manager.bean.AuthorityInfo;
import com.yds.tt.manager.bean.EmpOrgInfo;
import com.yds.tt.manager.bean.TtCheckResult;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtCommonUtil;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.manager.service.TtExclusiveException;
import com.yds.tt.testing.bean.ExamineInfo;
import com.yds.tt.testing.service.K060011Service;
import com.yds.util.service.Session;
import com.yds.util.service.StringUtil;


/**
 * 考试新建及权限分配.
 * 
 * @author 远东)chenzhong
 * @version 1.00 2010/04/13
 */
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@Controller("k060011Action")
public class K060011Action extends AbstractBaseAction implements Preparable{

	private static final long serialVersionUID = 6519829620160391891L;

	private K060011Service k060011Service;
	private TtCommonService ttCommonService;
	private SysCodeInfoService sysCodeInfoService;
	
	private ExamineInfo examineInfo;            // 考试信息
	private AuthorityInfo executantInfo; 		// 审批者权限
	private List<AuthorityInfo> editorList;		// 编辑人员一览
	private List<SysCodeInfo> joinYearList; 	// 工龄列表
	private List<SysCodeInfo> targetList;	 	// 针对对象列表
	private List<EmpOrgInfo> orgList;			 // 项目组列表
	
	private String examineId;			// 接口参数（考试ID）
	private Integer category1Id;		// 一级分类ID
	private Integer category2Id;		// 二级分类ID
	private Integer category3Id;		// 三级分类ID	
	private String errorMessage;		// 错误信息
	
	/** 针对对象人员ID*/
	private String strUserIdList;
	/** 针对对象人员名*/
	private String strUserNameList;
	private String objectValue2; // 针对对象值（项目组）
	
	private Integer sltCategory1;		// 一级分类ID初期值
	private Integer sltCategory2;		// 二级分类ID初期值
	private Integer sltCategory3;		// 三级分类ID初期值

	private String sltCategory1Enable;	// 一级分类ID可用标识
	private String sltCategory2Enable;	// 二级分类ID可用标识
	private String sltCategory3Enable;	// 三级分类ID可用标识
	
	@Override
	public void prepare() throws Exception {
		// 针对对象选项取得
		this.setTargetList(sysCodeInfoService.getSysCodeInfo("C12"));

		// 工龄选项取得
		this.setJoinYearList(sysCodeInfoService.getSysCodeInfo("R14"));
		
		// 项目组选项取得
		this.setOrgList(ttCommonService.getOrgList());
	}
	
	/**
	 * 画面的初期显示<新建考试>.
	 * 
	 * @return SUCCESS
	 */
	public String initNewExamine() throws Exception {
		
		// (新建模式)设置画面session情报:TT_K060011_MODE = Insert_Mode
		Session.set(SessionConstants.TT_K060011_MODE, TtConstants.Mode.Insert_Mode);
		
		// 权限检查
		if (!this.checkAuthority()){
			return ERROR;
		}

		return SUCCESS;
	}

	/**
	 * 画面的初期显示<参照新建>.
	 * 
	 * @return SUCCESS
	 */
	public String initReferenceExamine() throws Exception {		
		// 接口参数校验
		if(null != ttCommonService.isParamNull(examineId)){
			errorMessage = ttCommonService.isParamNull(examineId);
			return ERROR;
		}
		
		// (参照新建模式)设置画面session情报:TT_K060011_MODE = Manage_View_Mode
		Session.set(SessionConstants.TT_K060011_MODE, TtConstants.Mode.Manage_View_Mode);	
		
		// 权限检查
		if (!this.checkAuthority()){
			return ERROR;
		}

		// 考试信息检索
		examineInfo = k060011Service.getInitInfo(examineId);
		if (examineInfo == null) {
			errorMessage= propMgr.getMessage("yds.tt.error.JYE12", "考试");
			return ERROR;
		}
		
		// 实施者信息设定
		this.executantInfo= new AuthorityInfo();
		this.executantInfo.setUserId(StringUtil.leftTrimYd(examineInfo.getApproverUserId()));
		this.executantInfo.setUserName(examineInfo.getApproverUserName());
		
		// 针对对象一览取得 ： 课程针对对象区分为<4.针对个人>时
		if (TtCommonUtil.isEquals(examineInfo.getObjectType(),
		          TtConstants.C12.C12_4.value())) {
			String[] userList = k060011Service.getUserList(examineId);
			this.setStrUserIdList(userList[0]);
			this.setStrUserNameList(userList[1]);
		}
		
		// 编辑者信息检索
		editorList = ttCommonService.getAuthorityInfoList(examineId, 
				TtConstants.C24.C24_8.toString());
		
		// 考试分类ID初值设定
		sltCategory1 = examineInfo.getCategory1Id();
		sltCategory2 = examineInfo.getCategory2Id();
		sltCategory3 = examineInfo.getCategory3Id();
		sltCategory1Enable = "1";
		sltCategory2Enable = "1";
		sltCategory3Enable = "1";
		
		return SUCCESS;
	}
	
	/**
	 * 画面的初期显示<管理>.
	 * 
	 * @return SUCCESS
	 */
	public String initManageExamine() throws Exception {
		// 接口参数校验
		if(null != ttCommonService.isParamNull(examineId)){
			errorMessage = ttCommonService.isParamNull(examineId);
			return ERROR;
		}
		
		// (管理模式)设置画面session情报:TT_K060011_MODE = Update_Mode
		Session.set(SessionConstants.TT_K060011_MODE, TtConstants.Mode.Update_Mode);
		
		// 权限检查
		if (!this.checkAuthority()){
			return ERROR;
		}

		// 考试信息检索
		examineInfo = k060011Service.getInitInfo(examineId);
		if (examineInfo == null) {
			errorMessage= propMgr.getMessage("yds.tt.error.JYE12", "考试");
			return ERROR;
		}
		
		// 实施者信息设定
		this.executantInfo= new AuthorityInfo();
		this.executantInfo.setUserId(StringUtil.leftTrimYd(examineInfo.getApproverUserId()));
		this.executantInfo.setUserName(examineInfo.getApproverUserName());
		
		// 保存时间戳检查用的更新时间
		ttCommonService.setTimestamp(TtConstants.PageId.K060011, examineInfo.getUpdateTime());

		// 针对对象一览取得 ： 课程针对对象区分为<4.针对个人>时
		if (TtCommonUtil.isEquals(examineInfo.getObjectType(),
		          TtConstants.C12.C12_4.value())) {
			String[] userList = k060011Service.getUserList(examineId);
			this.setStrUserIdList(userList[0]);
			this.setStrUserNameList(userList[1]);
		}
		
		// 编辑者信息检索
		editorList = ttCommonService.getAuthorityInfoList(examineId, 
				TtConstants.C24.C24_8.toString());
		
		// 考试分类ID初值设定
		sltCategory1 = examineInfo.getCategory1Id();
		sltCategory2 = examineInfo.getCategory2Id();
		sltCategory3 = examineInfo.getCategory3Id();
		sltCategory1Enable = "1";
		sltCategory2Enable = "1";
		sltCategory3Enable = "1";
		
		return SUCCESS;
	}
	
	/**
	 * 权限检查.
	 * 
	 * @return true/false
	 */
	private boolean checkAuthority(){
		
		TtConstants.Mode mode = (TtConstants.Mode)Session.get(SessionConstants.TT_K060011_MODE);
		
		switch (mode){
		case Insert_Mode:
		case Manage_View_Mode:
			TtCheckResult result= ttCommonService.checkStartupAuthority(
					TtConstants.PageId.K060011.toString(), "K060011_1",
					null, null);
			if (!result.getRetFlag()) {
				errorMessage = result.getRetMessage();
				return false;	
			}
			break;
		case Update_Mode:
			List<String> objectId = new ArrayList<String>();
			objectId.add(examineId);
			TtCheckResult result1= ttCommonService.checkStartupAuthority(
					TtConstants.PageId.K060011.toString(), "K060011_2",
					TtConstants.C43.C43_3.value(), objectId);
			if (!result1.getRetFlag()) {
				errorMessage = result1.getRetMessage();
				return false;	
			}
		default :
			
		}
		
		return true;
	}

	/**
	 * 画面数据提交.
	 * 
	 * @return SUCCESS
	 */
	public String submitK060011Form()  throws Exception {

		// 权限检查
		if (!this.checkAuthority()){
			return ERROR;
		}
		
		// 从画面上取考试分类
		examineInfo.setCategory1Id(category1Id);
		examineInfo.setCategory2Id(category2Id);
		examineInfo.setCategory3Id(category3Id);

		// 新建模式
		if(Session.get(SessionConstants.TT_K060011_MODE).equals(TtConstants.Mode.Insert_Mode)){
			k060011Service.insertNewExamine(examineInfo, 
											executantInfo,
											editorList,
											strUserIdList);
		}

		// 参照新建模式
		if(Session.get(SessionConstants.TT_K060011_MODE).equals(TtConstants.Mode.Manage_View_Mode)){			
			k060011Service.insertReferenceExamine(
					examineInfo, 
					executantInfo,
					editorList,
					strUserIdList);
		}

		// 管理模式
		if(Session.get(SessionConstants.TT_K060011_MODE).equals(TtConstants.Mode.Update_Mode)){			
			try {
				
				k060011Service.updateExamine(
						examineInfo, 
						executantInfo,
						editorList,
						strUserIdList);
				
			} catch (TtExclusiveException e){
				errorMessage = propMgr.getMessage("yds.tt.error.KSE56");
				return ERROR;			
			}
		}
		
		// 显示操作成功消息
		putOpTip(propMgr.getMessage("yds.tt.info.GTT02"));

		return SUCCESS;
	}

	/**
	 * 画面项目校验
	 */
	public void validateSubmitK060011Form() {
		
		// 从画面上取考试分类
		examineInfo.setCategory1Id(category1Id);
		examineInfo.setCategory2Id(category2Id);
		examineInfo.setCategory3Id(category3Id);
		
		// 分类整合性检查
		if (TtCommonUtil.isEquals(examineInfo.getCategory1Id(), 0) == false &&
			ttCommonService.checkCategoryStatus(examineInfo.getCategory1Id(), 0, 0) == false) {
			
			this.addFieldError("category1Id", propMgr.getMessage("yds.tt.error.JYE04", "考试"));			
		}

		if (TtCommonUtil.isEquals(examineInfo.getCategory2Id(), 0) == false && 
			ttCommonService.checkCategoryStatus(examineInfo.getCategory1Id(), 
					examineInfo.getCategory2Id(), 0) == false) {
			
			this.addFieldError("category2Id", propMgr.getMessage("yds.tt.error.JYE04", "考试"));			
		}
		
		if (TtCommonUtil.isEquals(examineInfo.getCategory3Id(), 0) == false && 
			ttCommonService.checkCategoryStatus(examineInfo.getCategory1Id(), 
					examineInfo.getCategory2Id(), examineInfo.getCategory3Id()) == false) {
			this.addFieldError("category3Id", propMgr.getMessage("yds.tt.error.JYE04", "考试"));			
		}
		
		// 考试实施者存在校验
		if (ttCommonService.isExistUserId(StringUtil.leftPadYd(executantInfo.getUserId()) ) == false) {
			this.addFieldError("executantId", propMgr.getMessage("yds.tt.error.KSE57",
					StringUtil.leftPadYd(executantInfo.getUserId())));
		}
		
		// 开始时间与结束时间校验
		if (null != this.editorList) {
			for (int i = 0; i < this.editorList.size(); i++) {
				
				if (null != this.editorList.get(i).getStartTime()
						&& null != this.editorList.get(i).getEndTime()) {
					
					if (0 < this.editorList.get(i).getStartTime().compareTo(
							this.editorList.get(i).getEndTime())) {
						this.addFieldError("editorList[" + i +"].startTime",
								propMgr.getMessage("yds.tt.error.JYE05", this.editorList.get(i).getUserName()));
						this.addFieldError("editorList[" + i +"].endTime",
								propMgr.getMessage("yds.tt.error.JYE05", this.editorList.get(i).getUserName()));

					}
				}
			}
		}
	}
	
	/**
	 * @param service the k060011Service to set
	 */
	public void setK060011Service(K060011Service service) {
		k060011Service = service;
	}

	/**
	 * @param ttCommonService the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}

	/**
	 * @return the examineId
	 */
	public String getExamineId() {
		return examineId;
	}

	/**
	 * @param examineId the examineId to set
	 */
	public void setExamineId(String examineId) {
		this.examineId = examineId;
	}

	/**
	 * @return the category1Id
	 */
	public Integer getCategory1Id() {
		return category1Id;
	}
	
	/**
	 * @param category1Id the category1Id to set
	 */
	public void setCategory1Id(Integer category1Id) {
		this.category1Id = category1Id;
	}

	/**
	 * @return the category2Id
	 */
	public Integer getCategory2Id() {
		return category2Id;
	}

	/**
	 * @param category2Id the category2Id to set
	 */
	public void setCategory2Id(Integer category2Id) {
		this.category2Id = category2Id;
	}

	/**
	 * @return the category3Id
	 */
	public Integer getCategory3Id() {
		return category3Id;
	}

	/**
	 * @param category3Id the category3Id to set
	 */
	public void setCategory3Id(Integer category3Id) {
		this.category3Id = category3Id;
	}

	/**
	 * @return the editorList
	 */
	public List<AuthorityInfo> getEditorList() {
		return editorList;
	}

	/**
	 * @param editorList the editorList to set
	 */
	public void setEditorList(List<AuthorityInfo> editorList) {
		this.editorList = editorList;
	}

	/**
	 * @return the errorMessage
	 */
	public String getErrorMessage() {
		return errorMessage;
	}

	/**
	 * @param errorMessage the errorMessage to set
	 */
	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}

	/**
	 * @return the sltCategory1
	 */
	public Integer getSltCategory1() {
		return sltCategory1;
	}

	/**
	 * @param sltCategory1 the sltCategory1 to set
	 */
	public void setSltCategory1(Integer sltCategory1) {
		this.sltCategory1 = sltCategory1;
	}

	/**
	 * @return the sltCategory2
	 */
	public Integer getSltCategory2() {
		return sltCategory2;
	}

	/**
	 * @param sltCategory2 the sltCategory2 to set
	 */
	public void setSltCategory2(Integer sltCategory2) {
		this.sltCategory2 = sltCategory2;
	}

	/**
	 * @return the sltCategory3
	 */
	public Integer getSltCategory3() {
		return sltCategory3;
	}

	/**
	 * @param sltCategory3 the sltCategory3 to set
	 */
	public void setSltCategory3(Integer sltCategory3) {
		this.sltCategory3 = sltCategory3;
	}

	/**
	 * @return the sltCategory1Enable
	 */
	public String getSltCategory1Enable() {
		return sltCategory1Enable;
	}

	/**
	 * @param sltCategory1Enable the sltCategory1Enable to set
	 */
	public void setSltCategory1Enable(String sltCategory1Enable) {
		this.sltCategory1Enable = sltCategory1Enable;
	}

	/**
	 * @return the sltCategory2Enable
	 */
	public String getSltCategory2Enable() {
		return sltCategory2Enable;
	}

	/**
	 * @param sltCategory2Enable the sltCategory2Enable to set
	 */
	public void setSltCategory2Enable(String sltCategory2Enable) {
		this.sltCategory2Enable = sltCategory2Enable;
	}

	/**
	 * @return the sltCategory3Enable
	 */
	public String getSltCategory3Enable() {
		return sltCategory3Enable;
	}

	/**
	 * @param sltCategory3Enable the sltCategory3Enable to set
	 */
	public void setSltCategory3Enable(String sltCategory3Enable) {
		this.sltCategory3Enable = sltCategory3Enable;
	}

	/**
	 * @param strUserIdList the strUserIdList to set
	 */
	public void setStrUserIdList(String strUserIdList) {
		this.strUserIdList = strUserIdList;
	}

	/**
	 * @return the strUserIdList
	 */
	public String getStrUserIdList() {
		return strUserIdList;
	}

	/**
	 * @param strUserNameList the strUserNameList to set
	 */
	public void setStrUserNameList(String strUserNameList) {
		this.strUserNameList = strUserNameList;
	}

	/**
	 * @return the strUserNameList
	 */
	public String getStrUserNameList() {
		return strUserNameList;
	}

	/**
	 * @param objectValue2 the objectValue2 to set
	 */
	public void setObjectValue2(String objectValue2) {
		this.objectValue2 = objectValue2;
	}

	/**
	 * @return the objectValue2
	 */
	public String getObjectValue2() {
		return objectValue2;
	}
	
	/**
	 * @param sysCodeInfoService
	 *            the sysCodeInfoService to set
	 */
	public void setSysCodeInfoService(SysCodeInfoService sysCodeInfoService) {
		this.sysCodeInfoService = sysCodeInfoService;
	}

	/**
	 * @return the sysCodeInfoService
	 */
	public SysCodeInfoService getSysCodeInfoService() {
		return sysCodeInfoService;
	}

	/**
	 * @param joinYearList the joinYearList to set
	 */
	public void setJoinYearList(List<SysCodeInfo> joinYearList) {
		this.joinYearList = joinYearList;
	}

	/**
	 * @return the joinYearList
	 */
	public List<SysCodeInfo> getJoinYearList() {
		return joinYearList;
	}

	/**
	 * @param targetList the targetList to set
	 */
	public void setTargetList(List<SysCodeInfo> targetList) {
		this.targetList = targetList;
	}

	/**
	 * @return the targetList
	 */
	public List<SysCodeInfo> getTargetList() {
		return targetList;
	}

	/**
	 * @param orgList the orgList to set
	 */
	public void setOrgList(List<EmpOrgInfo> orgList) {
		this.orgList = orgList;
	}

	/**
	 * @return the orgList
	 */
	public List<EmpOrgInfo> getOrgList() {
		return orgList;
	}

	/**
	 * @param examineInfo the examineInfo to set
	 */
	public void setExamineInfo(ExamineInfo examineInfo) {
		this.examineInfo = examineInfo;
	}

	/**
	 * @return the examineInfo
	 */
	public ExamineInfo getExamineInfo() {
		return examineInfo;
	}

	/**
	 * @param executantInfo the executantInfo to set
	 */
	public void setExecutantInfo(AuthorityInfo executantInfo) {
		this.executantInfo = executantInfo;
	}

	/**
	 * @return the executantInfo
	 */
	public AuthorityInfo getExecutantInfo() {
		return executantInfo;
	}
}
