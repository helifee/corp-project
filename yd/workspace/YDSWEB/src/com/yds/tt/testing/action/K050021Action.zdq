/*
 * @(#) K050021Action.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 考试子系统
 */

package com.yds.tt.testing.action;

import java.util.ArrayList;
import java.util.List;

import net.sf.json.JSONObject;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.opensymphony.xwork2.interceptor.annotations.InputConfig;
import com.yds.base.action.BasePagerAction;
import com.yds.common.bean.SysCodeInfo;
import com.yds.common.service.SessionConstants;
import com.yds.common.service.SysCodeInfoService;
import com.yds.tt.manager.bean.TtCheckResult;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtCommonUtil;
import com.yds.tt.manager.service.TtConstants.C08;
import com.yds.tt.manager.service.TtConstants.PageId;
import com.yds.tt.manager.service.TtConstants.R10;
import com.yds.tt.testing.bean.K050021SearchInfo;
import com.yds.tt.testing.bean.TestPaperInfo;
import com.yds.tt.testing.service.K050021Service;
import com.yds.util.service.Session;

/**
 * 试卷一览处理
 * 
 * @author yinfuyan
 * @version 1.00 2010/03/16
 */
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@Controller("k050021Action")
public class K050021Action extends BasePagerAction {

	private static final long serialVersionUID = -4175744503480043016L;

	// 分类下拉列表初期值定数
	private static final Integer TT_K050021_CATEGORY_VALUE_0 = 0;

	// 画面调用业务类
	private K050021Service k050021Service;
	private TtCommonService ttCommonService;
	private SysCodeInfoService sysCodeInfoService;

	// 输入条件信息
	private K050021SearchInfo paperListInfo;

	// 试卷状态下拉列表
	private List<SysCodeInfo> paperStatusList;

	// 试卷一览信息列表
	private List<TestPaperInfo> paperListInfoList;
	// 画面模式
	private Integer modeKbn;

	// 参数一级分类ID
	private Integer category1;

	// 参数二级分类ID
	private Integer category2;

	// 参数三级分类ID
	private Integer category3;

	// 参数考试标志
	private Integer examineFlg;

	// 参数考试标志
	private String examineId;

	// 一级分类下拉列表可用区分
	private String sltCategory1Enable;

	// 一级分类下拉列表可用区分
	private String sltCategory2Enable;

	// 一级分类下拉列表可用区分
	private String sltCategory3Enable;

	// 选择试卷Json
	private String checkBoxStatusJson;

	// 错误信息
	private String errorMessage;

	/**
	 * 画面初期设置 试卷一览取得（试卷管理模式）
	 * 
	 * @return SUCCESS
	 */
	public String initPaperListManage() throws Exception {

		// 画面启动检查
		TtCheckResult checkResult = checkAuthority(K050021Service.TT_K050021MODE_MANAGE);
		// 无权限
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			if ("GTE01".equals(checkResult.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;
			}
		}
		// 设置画面模式
		modeKbn = K050021Service.TT_K050021MODE_MANAGE;

		// 画面业务初期值设置
		k050021Service.initProcess(modeKbn);

		// 画面初期检索条件
		paperListInfo = new K050021SearchInfo();

		// 试卷管理模式时初期检索条件设置
		paperListInfo.setCategory1Id(TT_K050021_CATEGORY_VALUE_0);
		paperListInfo.setCategory2Id(TT_K050021_CATEGORY_VALUE_0);
		paperListInfo.setCategory3Id(TT_K050021_CATEGORY_VALUE_0);
		// 设定登录用户
		paperListInfo.setLoginUserId(TtCommonUtil.getLoginUserId());

		// 设定考试管理者区分
		paperListInfo.setTestManager(k050021Service.isTestManager());

		// 试卷状态下拉列表设置
		this.setPaperStatusList(sysCodeInfoService.getSysCodeInfo(R10
				.getEnumName(), ""));

		// 设置分页共通
		super.setPagerParamter(k050021Service.getPaperTotalCount(modeKbn,
				paperListInfo), "k050021GetPaperList.action");

		// 试卷管理模式时，初期检索
		this.setPaperListInfoList(k050021Service.getPaperListInfos(modeKbn,
				paperListInfo, pager.getOffset().intValue(), pager
						.getPerDisplayCount().intValue()));
		// 记住检索条件
		paperListInfo.setPageNum(pageNumber);
		paperListInfo.setPageOffset(pager.getOffset());
		Session.set(SessionConstants.TT_K050021_SEARCHCONDITION, paperListInfo);

		return SUCCESS;
	}

	/**
	 * 画面初期设置 试卷一览取得（试卷选择模式）
	 * 
	 * @return SUCCESS
	 */
	@InputConfig(resultName = "error")
	public String initPaperListChoose() throws Exception {

		// 画面启动检查
		TtCheckResult checkResult = checkAuthority(K050021Service.TT_K050021MODE_CHOOSE);
		// 无权限
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			if ("GTE01".equals(checkResult.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;
			}
		}
		// 设置画面模式
		modeKbn = K050021Service.TT_K050021MODE_CHOOSE;

		// 分类下拉列表初期设置
		if (!TT_K050021_CATEGORY_VALUE_0.equals(category1)) {
			this.setSltCategory1Enable(TT_K050021_CATEGORY_VALUE_0.toString());
		}
		if (!TT_K050021_CATEGORY_VALUE_0.equals(category2)) {
			this.setSltCategory2Enable(TT_K050021_CATEGORY_VALUE_0.toString());
		}
		if (!TT_K050021_CATEGORY_VALUE_0.equals(category3)) {
			this.setSltCategory3Enable(TT_K050021_CATEGORY_VALUE_0.toString());
		}

		// 画面初期检索条件设置
		paperListInfo = new K050021SearchInfo();

		// 画面业务初期值设置
		k050021Service.initProcess(modeKbn);
		Session.set(SessionConstants.TT_K050021_EXAMINEID, this.examineId);

		// 试卷选择模式时初期检索条件设置
		paperListInfo.setCategory1Id(category1);
		paperListInfo.setCategory2Id(category2);
		paperListInfo.setCategory3Id(category3);
		paperListInfo.setPaperStatus(R10.R10_3.value());
		if (null != examineFlg && examineFlg == C08.C08_2.value()) {
			paperListInfo.setExamineFlg(examineFlg);
		}

		// 试卷状态下拉列表设置
		this.setPaperStatusList(sysCodeInfoService.getSysCodeInfo(R10
				.getEnumName(), ""));

		// 设置分页共通
		super.setPagerParamter(k050021Service.getPaperTotalCount(modeKbn,
				paperListInfo), "k050021GetPaperList.action");

		// 试卷管理模式时，初期检索
		this.setPaperListInfoList(k050021Service.getPaperListInfos(modeKbn,
				paperListInfo, pager.getOffset().intValue(), pager
						.getPerDisplayCount().intValue()));
		// 记住检索条件
		paperListInfo.setPageNum(pageNumber);
		paperListInfo.setPageOffset(pager.getOffset());
		Session.set(SessionConstants.TT_K050021_SEARCHCONDITION, paperListInfo);

		return SUCCESS;
	}

	/**
	 * 检索试卷一览信息
	 * 
	 * @return SUCCESS
	 */
	public String queryPaperListInfo() throws Exception {

		// 设置画面模式
		modeKbn = (Integer) Session.get(SessionConstants.TT_K050021_MODE);
		// 画面启动检查
		TtCheckResult checkResult = checkAuthority(modeKbn);
		// 无权限
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			if ("GTE01".equals(checkResult.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;
			}
		}
		// 设置检索条件
		if (null == paperListInfo) {
			// 设置session中检索条件
			paperListInfo = (K050021SearchInfo) Session
					.get(SessionConstants.TT_K050021_SEARCHCONDITION);
			if (paperListInfo == null) {
				errorMessage = propMgr.getMessage("yds.com.error.0001");
				return ERROR;
			}
		}
		if (K050021Service.TT_K050021MODE_MANAGE.equals(modeKbn)) {
			// 设定登录用户
			paperListInfo.setLoginUserId(TtCommonUtil.getLoginUserId());
			// 设定考试管理者区分
			paperListInfo.setTestManager(k050021Service.isTestManager());
		}

		// 编辑用户ID
		k050021Service.editUserId(paperListInfo);

		// 设置分页共通
		super.setPagerParamter(k050021Service.getPaperTotalCount(modeKbn,
				paperListInfo), "k050021GetPaperList.action");
		// 试卷管理模式时，初期检索
		this.setPaperListInfoList(k050021Service.getPaperListInfos(modeKbn,
				paperListInfo, pager.getOffset().intValue(), pager
						.getPerDisplayCount().intValue()));

		return SUCCESS;
	}

	/**
	 * 选择试卷
	 * 
	 * @return SUCCESS
	 */
	public String choosePaper() throws Exception {

		// 设置画面模式
		modeKbn = (Integer) Session.get(SessionConstants.TT_K050021_MODE);
		// 画面启动检查
		TtCheckResult checkResult = checkAuthority(modeKbn);
		// 无权限
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			if ("GTE01".equals(checkResult.getErrLevel())) {
				return LOGIN;
			} else {
				return ERROR;
			}
		}

		// 取得画面教材选中信息
		JSONObject json = JSONObject.fromObject(checkBoxStatusJson);

		// 将所选试卷加入考试试卷关联表中
		k050021Service.addToExam(json);

		this.errorMessage = SUCCESS;
		return SUCCESS;
	}

	/**
	 * 画面回初期设置 试卷一览取得（试卷管理模式）
	 * 
	 * @return SUCCESS
	 */
	public String callBackInitPaperListManage() throws Exception {

		// 设置画面模式
		this.setModeKbn(K050021Service.TT_K050021MODE_MANAGE);

		paperListInfo = (K050021SearchInfo) Session
				.get(SessionConstants.TT_K050021_SEARCHCONDITION);
		if (paperListInfo == null) {
			
			paperListInfo = new K050021SearchInfo();		
			
			// 设置画面模式
			modeKbn = K050021Service.TT_K050021MODE_MANAGE;

			// 画面业务初期值设置
			k050021Service.initProcess(modeKbn);
		}
		// 设定登录用户
		paperListInfo.setLoginUserId(TtCommonUtil.getLoginUserId());

		// 设定考试管理者区分
		paperListInfo.setTestManager(k050021Service.isTestManager());

		// 试卷状态下拉列表设置
		this.setPaperStatusList(sysCodeInfoService.getSysCodeInfo(R10
				.getEnumName(), ""));
		// 设置分页共通
		super.setPagerParamter(k050021Service.getPaperTotalCount(modeKbn,
				paperListInfo), "k050021GetPaperList.action");
		// 试卷管理模式时，初期检索
		this.setPaperListInfoList(k050021Service.getPaperListInfos(modeKbn,
				paperListInfo, pager.getOffset().intValue(), pager
						.getPerDisplayCount().intValue()));

		return SUCCESS;
	}

	/**
	 * 参数项目校验（试卷选择）
	 * 
	 */
	public void validateinitPaperListChoose() {
		// 参数试卷ID,创建对象，编辑号判断
		if (null == this.category1 || null == this.category2
				|| null == this.category3 || null == this.examineFlg
				|| null == this.examineId || "".equals(this.examineId)) {
			errorMessage = propMgr.getMessage("yds.com.error.0001");
			this.addActionError("error");
		}
	}

	/**
	 * 画面启动控制检查
	 * 
	 * @param mode
	 *            画面启动模式
	 * 
	 */
	private TtCheckResult checkAuthority(Integer mode) {

		List<String> objectId = new ArrayList<String>();

		TtCheckResult checkResult = new TtCheckResult();

		// 考试模式
		if (K050021Service.TT_K050021MODE_MANAGE.equals(mode)) {
			// 权限检查
			checkResult = ttCommonService.checkStartupAuthority(PageId.K050021
					.value(), "K050021_1", 0, objectId);
		}
		// 练习模式
		if (K050021Service.TT_K050021MODE_CHOOSE.equals(mode)) {
			// 权限检查
			checkResult = ttCommonService.checkStartupAuthority(PageId.K050021
					.value(), "K050021_2", 0, objectId);
		}

		return checkResult;
	}

	/**
	 * @param service
	 *            the k050021Service to set
	 */
	public void setK050021Service(K050021Service service) {
		k050021Service = service;
	}

	/**
	 * @param ttCommonService
	 *            the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}

	/**
	 * @param sysCodeInfoService
	 *            the sysCodeInfoService to set
	 */
	public void setSysCodeInfoService(SysCodeInfoService sysCodeInfoService) {
		this.sysCodeInfoService = sysCodeInfoService;
	}

	/**
	 * @return the paperStatusList
	 */
	public List<SysCodeInfo> getPaperStatusList() {
		return paperStatusList;
	}

	/**
	 * @param paperStatusList
	 *            the paperStatusList to set
	 */
	public void setPaperStatusList(List<SysCodeInfo> paperStatusList) {
		this.paperStatusList = paperStatusList;
	}

	/**
	 * @return the paperListInfo
	 */
	public K050021SearchInfo getPaperListInfo() {
		return paperListInfo;
	}

	/**
	 * @param paperListInfo
	 *            the paperListInfo to set
	 */
	public void setPaperListInfo(K050021SearchInfo paperListInfo) {
		this.paperListInfo = paperListInfo;
	}

	/**
	 * @return the paperListInfoList
	 */
	public List<TestPaperInfo> getPaperListInfoList() {
		return paperListInfoList;
	}

	/**
	 * @param paperListInfoList
	 *            the paperListInfoList to set
	 */
	public void setPaperListInfoList(List<TestPaperInfo> paperListInfoList) {
		this.paperListInfoList = paperListInfoList;
	}

	/**
	 * @return the modeKbn
	 */
	public Integer getModeKbn() {
		return modeKbn;
	}

	/**
	 * @param modeKbn
	 *            the modeKbn to set
	 */
	public void setModeKbn(Integer modeKbn) {
		this.modeKbn = modeKbn;
	}

	/**
	 * @return the category1
	 */
	public Integer getCategory1() {
		return category1;
	}

	/**
	 * @param category1
	 *            the category1 to set
	 */
	public void setCategory1(Integer category1) {
		this.category1 = category1;
	}

	/**
	 * @return the category2
	 */
	public Integer getCategory2() {
		return category2;
	}

	/**
	 * @param category2
	 *            the category2 to set
	 */
	public void setCategory2(Integer category2) {
		this.category2 = category2;
	}

	/**
	 * @return the category3
	 */
	public Integer getCategory3() {
		return category3;
	}

	/**
	 * @param category3
	 *            the category3 to set
	 */
	public void setCategory3(Integer category3) {
		this.category3 = category3;
	}

	/**
	 * @return the examineFlg
	 */
	public Integer getExamineFlg() {
		return examineFlg;
	}

	/**
	 * @param examineFlg
	 *            the examineFlg to set
	 */
	public void setExamineFlg(Integer examineFlg) {
		this.examineFlg = examineFlg;
	}

	/**
	 * @return the examineId
	 */
	public String getExamineId() {
		return examineId;
	}

	/**
	 * @param examineId
	 *            the examineId to set
	 */
	public void setExamineId(String examineId) {
		this.examineId = examineId;
	}

	/**
	 * @return the sltCategory1Enable
	 */
	public String getSltCategory1Enable() {
		return sltCategory1Enable;
	}

	/**
	 * @param sltCategory1Enable
	 *            the sltCategory1Enable to set
	 */
	public void setSltCategory1Enable(String sltCategory1Enable) {
		this.sltCategory1Enable = sltCategory1Enable;
	}

	/**
	 * @return the sltCategory2Enable
	 */
	public String getSltCategory2Enable() {
		return sltCategory2Enable;
	}

	/**
	 * @param sltCategory2Enable
	 *            the sltCategory2Enable to set
	 */
	public void setSltCategory2Enable(String sltCategory2Enable) {
		this.sltCategory2Enable = sltCategory2Enable;
	}

	/**
	 * @return the sltCategory3Enable
	 */
	public String getSltCategory3Enable() {
		return sltCategory3Enable;
	}

	/**
	 * @param sltCategory3Enable
	 *            the sltCategory3Enable to set
	 */
	public void setSltCategory3Enable(String sltCategory3Enable) {
		this.sltCategory3Enable = sltCategory3Enable;
	}

	/**
	 * @return the checkBoxStatusJson
	 */
	public String getCheckBoxStatusJson() {
		return checkBoxStatusJson;
	}

	/**
	 * @param checkBoxStatusJson
	 *            the checkBoxStatusJson to set
	 */
	public void setCheckBoxStatusJson(String checkBoxStatusJson) {
		this.checkBoxStatusJson = checkBoxStatusJson;
	}

	/**
	 * @return the errorMessage
	 */
	public String getErrorMessage() {
		return errorMessage;
	}

	/**
	 * @param errorMessage
	 *            the errorMessage to set
	 */
	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}
}
