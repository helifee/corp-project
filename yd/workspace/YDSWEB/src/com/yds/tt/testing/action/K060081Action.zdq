/*
 * @(#) K060081Action.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 教育子系统
 */

package com.yds.tt.testing.action;

import java.util.List;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.opensymphony.xwork2.interceptor.annotations.InputConfig;
import com.yds.base.action.AbstractBaseAction;
import com.yds.tt.manager.bean.TtCheckResult;
import com.yds.tt.testing.bean.ExamineInfo;
import com.yds.tt.testing.bean.K060081EnrollInfo;
import com.yds.tt.testing.service.K060081Service;

/**
 * 考试报名批准处理
 * 
 * @author wangqingzhu
 * @version 1.00 2010/03/29
 */
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@Controller("k060081Action")
public class K060081Action extends AbstractBaseAction {

	private static final long serialVersionUID = 5883190994863840075L;
	private K060081Service k060081Service;
	private ExamineInfo k060081ExamineInfo; // 编辑考试一览信息
	private String examineId; // 考试Id
	private List<K060081EnrollInfo> k060081EnrollList; // 员工报名信息
	private Integer errFlg; // 是否进行校验Flg
	private String errorMessage; // 错误信息

	/**
	 * 画面的初期显示和检索
	 * 
	 * @return SUCCESS
	 */
	@InputConfig(resultName = "error")
	@Override
	public String execute() throws Exception {
		
		// 考试信息的取得
		k060081ExamineInfo = k060081Service.getExamineInfo(examineId);
		if (null == k060081ExamineInfo) {
			return ERROR;
		}
		
		// 画面启动限制检查
		//TtCheckResult checkResult = k060081Service.checkStartupPerm(examineId);
		TtCheckResult checkResult = k060081Service.checkStartupPerm(k060081ExamineInfo.getParentExamineId());
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			return ERROR;
		}

		// 取得报名信息
		k060081EnrollList = k060081Service.getEnrollInfo(k060081ExamineInfo);

		return SUCCESS;

	}

	/**
	 * 初始化画面对考试ID校验
	 */
	public void validateExecute() {

		// 考试Id是从当前画面传来的
		if (k060081ExamineInfo != null) {
			examineId = k060081ExamineInfo.getExamineId();
		}

		if (null == examineId || "".equals(examineId)) {
			this.addActionError("error");
		}
	}

	/**
	 * 员工考试批准处理
	 * 
	 * @return SUCCESS
	 */
	public String sanctionEnroll() {

		// 权限检查
		//if (!k060081Service.checkObjectPerm(k060081ExamineInfo.getExamineId())) {
		if (!k060081Service.checkObjectPerm(k060081ExamineInfo.getParentExamineId())) {
			errorMessage = propMgr.getMessage("yds.tt.error.GTE02");
			return ERROR;
		}

		// 检索完后定向到初始画面，考试ID需要赋值
		examineId = k060081ExamineInfo.getExamineId();

		// 考试信息的取得
		k060081ExamineInfo = k060081Service.getExamineInfo(examineId);

		// 更新考试员工信息
		k060081Service
				.updateSanctionInfo(k060081EnrollList, k060081ExamineInfo);

		return SUCCESS;
	}

	/**
	 * 员工考试不批准处理
	 * 
	 * @return SUCCESS
	 */
	public String unSanctionEnroll() {

		// 权限检查
		//if (!k060081Service.checkObjectPerm(k060081ExamineInfo.getExamineId())) {
		if (!k060081Service.checkObjectPerm(k060081ExamineInfo.getParentExamineId())) {
			errorMessage = propMgr.getMessage("yds.tt.error.GTE02");
			return ERROR;
		}

		// 检索完后定向到初始画面，考试ID需要赋值
		examineId = k060081ExamineInfo.getExamineId();

		// 考试信息的取得
		k060081ExamineInfo = k060081Service.getExamineInfo(examineId);

		// 更新考试员工信息
		k060081Service.updateUnsanctionInfo(k060081EnrollList,
				k060081ExamineInfo);

		return SUCCESS;
	}

	/**
	 * 员工是否通过所有试卷校验
	 */
	public void validateSanctionEnroll() {
		// 对员工通过所有试卷只进行一次校验
		if (null == errFlg || errFlg == 0) {
			// 员工考试情况检查
			String userStr = k060081Service.getAllPassFlg(k060081EnrollList,
					k060081ExamineInfo);
			if (null != userStr) {
				// 画面的提示信息
				this.addActionError(propMgr.getMessage("yds.tt.warn.KSW06",
						userStr));
				// 重取考试信息
				k060081ExamineInfo = k060081Service
						.getExamineInfo(k060081ExamineInfo.getExamineId());
			}
		}
		errFlg = 1;
	}

	/**
	 * @param service
	 *            the k060081Service to set
	 */
	public void setK060081Service(K060081Service service) {
		k060081Service = service;
	}

	/**
	 * @return the k060081ExamineInfo
	 */
	public ExamineInfo getK060081ExamineInfo() {
		return k060081ExamineInfo;
	}

	/**
	 * @param examineInfo
	 *            the k060081ExamineInfo to set
	 */
	public void setK060081ExamineInfo(ExamineInfo examineInfo) {
		k060081ExamineInfo = examineInfo;
	}

	/**
	 * @return the examineId
	 */
	public String getExamineId() {
		return examineId;
	}

	/**
	 * @param examineId
	 *            the examineId to set
	 */
	public void setExamineId(String examineId) {
		this.examineId = examineId;
	}

	/**
	 * @return the k060081EnrollList
	 */
	public List<K060081EnrollInfo> getK060081EnrollList() {
		return k060081EnrollList;
	}

	/**
	 * @param enrollList
	 *            the k060081EnrollList to set
	 */
	public void setK060081EnrollList(List<K060081EnrollInfo> enrollList) {
		k060081EnrollList = enrollList;
	}

	/**
	 * @return the errFlg
	 */
	public Integer getErrFlg() {
		return errFlg;
	}

	/**
	 * @param errFlg
	 *            the errFlg to set
	 */
	public void setErrFlg(Integer errFlg) {
		this.errFlg = errFlg;
	}

	/**
	 * @return the errorMessage
	 */
	public String getErrorMessage() {
		return errorMessage;
	}

	/**
	 * @param errorMessage
	 *            the errorMessage to set
	 */
	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}
}
