/*
 * @(#) K040051Dao.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试系统
 *    SubSystem: 考试子系统
 */
package com.yds.tt.testing.dao.impl;

import java.util.Date;
import java.util.List;

import org.springframework.stereotype.Repository;

import com.yds.base.dao.AbstractBaseDao;
import com.yds.tt.manager.bean.CategoryInfo;
import com.yds.tt.manager.bean.KeywordInfo;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.testing.bean.AnswerInfo;
import com.yds.tt.testing.bean.AnswerPointInfo;
import com.yds.tt.testing.bean.QuestionLibrary;
import com.yds.tt.testing.dao.K040051Dao;

/**
 * @see com.yds.tt.testing.dao.K040051Dao
 */
@Repository("k040051Dao")
public class K040051DaoImpl extends AbstractBaseDao implements K040051Dao {

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void updateCheckPass(QuestionLibrary question) {

		// 前一版本试题更新处理.
		super.update("k040051Dao.oldVersionUpdate", question);

		// 当前版本试题更新处理.
		super.update("k040051Dao.newVersionUpdate", question);

	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void deleteQuestion(List<QuestionLibrary> questionInfo,String userId) {

		// 删除处理
		for (int i = 0; i < questionInfo.size(); i++) {
			QuestionLibrary question = questionInfo.get(i);

			// 试题状态为"未核对"时
			if (question.getCheckFlg() == 1) {
				super.delete("k040051Dao.deleteTiku", question);
				super.delete("k040051Dao.deleteDaan", question);
				super.delete("k040051Dao.deleteDaandefen", question);
				super.delete("k040051Dao.deleteTikuziliao", question);

				//上一版本失效处理
				super.update("k040051Dao.oldVersionUpdate", question);
				
			//	试题状态为"已核对"时
			} else {
				question.setUpdateUserId(userId);
				super.update("k040051Dao.updateCheckDelete", question);
			}
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Date getUpdateTime(QuestionLibrary question) {

		// 排他处理
		return (Date) super
				.queryForObject("k040051Dao.getUpdateTime", question);
	}

	/**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<Date> getUpdateTimeList(List<QuestionLibrary> questionList) {

		// 批量排他处理
		return (List<Date>) super.queryForList("k040051Dao.getUpdateTimeList",
				questionList);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void insertDaanTable(AnswerInfo answer) {

		// 答案表登录处理
		super.insert("k040051Dao.setDaanTableModifyConfirmMode", answer);

	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void insertDefendianTable(AnswerPointInfo answerPoint) {

		// 得分点表登录处理
		super.insert("k040051Dao.setDefendianTableModifyConfirmMode", answerPoint);

	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void insertKeyWordTable(KeywordInfo keyWord) {

		// 关键字表登录处理
		super.insert("k040051Dao.setKeyWordTableConfirmMode", keyWord);

	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void insertTikuTable(QuestionLibrary question,Integer mode) {

		// 题库表登录处理
		// 模式为<题库确认>或<无修改模式>时
		if ((mode == TtConstants.C29.C29_4.value())
				|| (mode == TtConstants.C29.C29_5.value())) {
			super.insert("k040051Dao.setTikuTableNoModifyMode", question);
		}
		
		// 模式为<考试卷新建确认>或<练习卷新建确认>时
		if ((mode == TtConstants.C29.C29_8.value())
			|| (mode == TtConstants.C29.C29_10.value())) {
			super.insert("k040051Dao.setTikuTableConfirmMode", question);
		}
		
		// 模式为<考试卷修改确认>或<练习卷修改确认>时
		if ((mode == TtConstants.C29.C29_9.value())
			|| (mode == TtConstants.C29.C29_11.value())) {
			super.insert("k040051Dao.setTikuTableModifyConfirmMode", question);
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void insertTikuziliaoTable(QuestionLibrary question) {

		// 题库资料表登录处理
		super.insert("k040051Dao.setTkziliaoTableConfirmMode", question);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public KeywordInfo selWordTable(KeywordInfo keyWord) {

		// 关键字表排他处理
		return (KeywordInfo) super.queryForObject("k040051Dao.selKeyWordTable", keyWord);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void updateTikuTable(QuestionLibrary question) {

		// 题库表更新处理
		super.update("k040051Dao.updateTikuTable", question);
	}

	/**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<QuestionLibrary> getQuestionLibraryList(
			List<String> queIdlist) {
		
		// 题库信息列表取得
		return super.queryForList("k040051Dao.getQuestionLibrary", queIdlist);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String getCategoryName(Integer category1,Integer category2,Integer category3){
		CategoryInfo category = new CategoryInfo();
		category.setCategory1Id(category1);
		category.setCategory2Id(category2);
		category.setCategory3Id(category3);
		return (String)super.queryForObject("k040051Dao.getCategoryName", category);
	}
}
