/*
 * @(#) K070011DaoImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试系统
 *    SubSystem: 考试子系统
 */
package com.yds.tt.testing.dao.impl;

import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.yds.base.dao.AbstractBaseDao;
import com.yds.tt.testing.bean.ExamineInfo;
import com.yds.tt.testing.bean.K070011Info;
import com.yds.tt.testing.bean.K070011SearchPostionInfo;
import com.yds.tt.testing.bean.TestResultsInfo;
import com.yds.tt.testing.dao.K070011Dao;
/**
 * @see com.yds.tt.testing.dao.K070011Dao
 */
@Repository("k070011Dao")
public class K070011DaoImpl extends AbstractBaseDao implements K070011Dao {
	
	/**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<ExamineInfo> getExamineInfoList(K070011Info k070011Info, int offset , int perCounts) {
		return (List<ExamineInfo>)super.queryForList("K070011Dao.getExamineInfoList", k070011Info, offset, perCounts);
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override	
	public Long getTotalCount(K070011Info k070011Info) {
		return (Long)super.queryForObject("K070011Dao.getTotalCount", k070011Info);
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override	
	public ExamineInfo getExamineAllInfo(String examineId) {
		return (ExamineInfo) super.queryForObject("K070011Dao.getExamineAllInfo", examineId);
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override	
	@SuppressWarnings("unchecked")
	public List<TestResultsInfo> getExamineSpecificList(String examineId) {
		return (List<TestResultsInfo>)super.queryForList("K070011Dao.getExamineSpecificList", examineId);
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override	
	public Integer getExamineCountNum(K070011Info k070011Info) {
		return (Integer) super.queryForObject("K070011Dao.getExamineCountNum",k070011Info);
	}
	
	/**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<ExamineInfo> getEmpExamineInfoList(String employeesId, int offset , int perCounts){
		return (List<ExamineInfo>)super.queryForList(
				"K070011Dao.getEmpExamineInfoList", employeesId, offset, perCounts);
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override	
	public Long getEmpTotalCount(String employeesId) {
		return (Long)super.queryForObject("K070011Dao.getEmpTotalCount", employeesId);
	}
	
	/**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<TestResultsInfo> getEmpEffectiveInfoList(ExamineInfo examineInfo) {
		return (List<TestResultsInfo>)super.queryForList("K070011Dao.getEmpEffectiveInfoList", examineInfo);
	}
	
	/**
	 * {@inheritDoc}
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<TestResultsInfo> getEmpAllInfoList(ExamineInfo examineInfo){
		return (List<TestResultsInfo>)super.queryForList("K070011Dao.getEmpAllInfoList", examineInfo);
	}
	
	/**
	 * {@inheritDoc}
	 */	
	@Override
	public ExamineInfo getExamineNameLevelInfo(Map<String, String> examineIdMap) {
		return (ExamineInfo) super.queryForObject("K070011Dao.getExamineNameLevelInfo", examineIdMap);
	}
	
	/**
	 * {@inheritDoc}
	 */		
	@SuppressWarnings("unchecked")
	public List<TestResultsInfo> getPostionExamineList(
			Map<String, List<K070011SearchPostionInfo>> listMap,int offset , int perCounts){
		return (List<TestResultsInfo>)super.queryForList(
				"K070011Dao.getPostionExamineList", listMap, offset , perCounts);
	}

	/**
	 * {@inheritDoc}
	 */	
	@SuppressWarnings("unchecked")
	public List<TestResultsInfo> getPostionAndExamineList(
			Map<String, List<K070011SearchPostionInfo>> listMap, int offset , int perCounts){
		return (List<TestResultsInfo>)super.queryForList(
				"K070011Dao.getPostionAndExamineList", listMap, offset,  perCounts);
	}

	/**
	 * {@inheritDoc}
	 */	
	@Override
	public Long getPosTotalCountAnd(Map<String, List<K070011SearchPostionInfo>> listMap) {
		return  (Long)super.queryForObject("K070011Dao.getPosTotalCountAnd", listMap);
	}

	/**
	 * {@inheritDoc}
	 */	
	@Override
	public Long getPosTotalCountOr(Map<String, List<K070011SearchPostionInfo>> listMap) {
		return  (Long)super.queryForObject("K070011Dao.getPosTotalCountOr", listMap);
	}

}
