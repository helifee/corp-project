/*
 * @(#) K060061ServiceImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 考试子系统
 */
package com.yds.tt.testing.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.opensymphony.xwork2.util.XWorkList;
import com.yds.base.service.AbstractBaseService;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtCommonUtil;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.manager.service.TtExclusiveException;
import com.yds.tt.testing.bean.ExamineInfo;
import com.yds.tt.testing.bean.TestPaperInfo;
import com.yds.tt.testing.dao.K060061Dao;
import com.yds.tt.testing.service.K060061Service;
import com.yds.tt.training.bean.CourseInfo;
import com.yds.util.service.DateUtil;

/**
 * @see com.yds.tt.testing.service.K060061Service
 */
@Service("k060061Service")
public class K060061ServiceImpl extends AbstractBaseService implements
		K060061Service {

	private K060061Dao k060061Dao;

	private TtCommonService ttCommonService;

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamineInfo getExamineInfo(String examineId) {
		return k060061Dao.getExamineInfo(examineId);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<TestPaperInfo> getTestPaperInfoList(String examineId) {

		return k060061Dao.getTestPaperInfoList(examineId);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ExamineInfo> getSelectedExamineList(String examineId) {

		return k060061Dao.getSelectedExamineList(examineId);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<CourseInfo> getSelectedCourseList(String examineId) {

		return k060061Dao.getSelectedCourseList(examineId);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ExamineInfo> getChildExamineInfoList(String examineId) {
		return k060061Dao.getChildExamineInfoList(examineId);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void deleteParentExamine(String examineId) {
		
		// 排他检查
		if (!checkTimestamp(examineId)) {
			throw new TtExclusiveException();
		}
		
		k060061Dao.deletePaperRelation(examineId);
		k060061Dao.deleteMustExamineRelation(examineId);
		k060061Dao.deleteMustCourseRelation(examineId);
		k060061Dao.deleteExamine(examineId);
	}

	/**
	 * 更新考试信息
	 * 
	 * @param examineInfo
	 *            考试信息
	 * 
	 */
	public void updateExamineInfo(ExamineInfo examineInfo) {
		k060061Dao.updateExamineInfo(examineInfo);

	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void updateTotalExamineInfo(ExamineInfo examineInfo,
			XWorkList sltExamineId, XWorkList sltCourseId,
			List<TestPaperInfo> selectedPaper) {
		
		// 排他检查
		if (!checkTimestamp(examineInfo.getExamineId())) {
			throw new TtExclusiveException();
		}
		
		// 考试信息表更新
		this.updateExamineInfo(examineInfo);
		
		// 保存时间戳
		ttCommonService.setTimestamp(TtConstants.PageId.K060061, k060061Dao.getUpdateTime(examineInfo.getExamineId()));

	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void deleteSelectedCourse(String examineId, String necessaryCourseId) {
		Map<String,String> neededCourse = new HashMap<String, String>();
		neededCourse.put("examineId", examineId);
		neededCourse.put("necessaryCourseId", necessaryCourseId);
		k060061Dao.deleteSelectedCourse(neededCourse);
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public void deleteSelectedExamine(String examineId, String necessaryExamineId) {
		Map<String,String> neededExamine = new HashMap<String, String>();
		neededExamine.put("examineId", examineId);
		neededExamine.put("necessaryExamineId", necessaryExamineId);
		k060061Dao.deleteSelectedExamine(neededExamine);
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @throws CloneNotSupportedException
	 */
	@Override
	public void insertExamineCreateStyle(String examineId,
			String createStyleFlg, String strExamineStartTime,
			String strExamineEndTime, String strExamineNotifyDate,
			String strApplyClosingTime) throws CloneNotSupportedException {
		
		// 取得子考试基本信息
		ExamineInfo examineInfo = k060061Dao.getChildExamineInfo(examineId);
		
		// 父考试ID
		examineInfo.setParentExamineId(examineId);
		
		// 考试标志
		// 单次考试或者循环考试
		if ("1".equals(createStyleFlg) || "2".equals(createStyleFlg)) {
			examineInfo.setExamineFlg(TtConstants.C08.C08_1.value());
		}
		// 随时考试
		else if ("3".equals(createStyleFlg)) {
			examineInfo.setExamineFlg(TtConstants.C08.C08_2.value());
			examineInfo.setApplyConfirmFlg(TtConstants.C13.C13_1.value());
		}
		// 实验考试
		else if ("4".equals(createStyleFlg)) {
			examineInfo.setExamineFlg(TtConstants.C08.C08_3.value());
		}
		// 评定等级
		examineInfo.setResultlevel1Id("1");
		examineInfo.setResultlevel2Id("2");
		examineInfo.setResultlevel3Id("3");
		examineInfo.setResultlevel4Id("4");
		examineInfo.setResultlevel5Id("5");
		// 考试可见标志
		examineInfo.setExamineVisibleFlg(0);
		// 考试状态
		examineInfo.setExamineStatus(TtConstants.R12.R12_1.value());
		// 评分任务分配方式标志
		//examineInfo.setMarkmissionFlg(TtConstants.C15.C15_1.value());		
		// 创建者ID
		examineInfo.setCreateUserId(TtCommonUtil.getLoginUserId());
		// 更新者ID
		examineInfo.setUpdateUserId(TtCommonUtil.getLoginUserId());
		// 每次考试开始日时
		String[] arrExamineStartTime = strExamineStartTime.split(",");
		// 每次考试结束日时
		String[] arrExamineEndTime = strExamineEndTime.split(",");
		// 每次考试通知提醒日期
		String[] arrExamineNotifyDate = strExamineNotifyDate.split(",");
		// 每次考试报名截止日时
		String[] arrApplyClosingTime = strApplyClosingTime.split(",");
		// 父考试ID和子考试ID哈希map
		Map<String, String> mapExamineId = new HashMap<String, String>();
		mapExamineId.put("parentExamineId", examineId);
		// 取得当前最大的子考试ID
		String maxChildExamineId = k060061Dao.getMaxChildExamineId(examineId);
		if (maxChildExamineId == null) {
			maxChildExamineId = examineId;
		}
		// 新的考试ID
		String newChildExamineId;
		// 取得子考试ID数组,考试信息List赋值
		for (int i = 0; i < arrExamineStartTime.length; i++) {
			// 计算新的子考试ID
			newChildExamineId = getNewChildExamineId(maxChildExamineId);
			// 考试ID
			examineInfo.setExamineId(newChildExamineId);
			// 考试开始日时
			examineInfo.setExamineStartTime(DateUtil
					.parse(arrExamineStartTime[i]));
			// 考试结束日时
			examineInfo.setExamineEndTime(DateUtil.parse(arrExamineEndTime[i]));
			// 通知提醒日期
			examineInfo.setExamineNotifyDate(DateUtil
					.parse(arrExamineNotifyDate[i]));
			// 报名截止日时
			examineInfo.setApplyClosingTime(DateUtil
					.parse(arrApplyClosingTime[i]));
			// 父考试ID和子考试ID哈希map赋值
			mapExamineId.put("examineId", newChildExamineId);
			// 插入子考试信息
			k060061Dao.insertExamineInfo(examineInfo);
			// 插入试卷关联信息
			k060061Dao.insertPaperRelation(mapExamineId);
			// 插入需要通过考试关联信息
			k060061Dao.insertNeedPassExamine(mapExamineId);
			// 插入需要通过课程关联信息
			k060061Dao.insertNeedPassCourse(mapExamineId);
			// 插入考试针对对象
			if (examineInfo.getObjectType() == TtConstants.C12.C12_4.value()) {
				k060061Dao.insertExamineObject(mapExamineId);
			}
			// 即时修改最大子考试ID
			maxChildExamineId = newChildExamineId;
		}
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public void deleteSelectedPaper(String examineId, String paperId) {
		Map<String,String> examinePaper = new HashMap<String, String>();
		examinePaper.put("examineId", examineId);
		examinePaper.put("paperId", paperId);
		k060061Dao.deleteSelectedPaper(examinePaper);
	}

	/**
	 * 计算新的子考试ID
	 * 
	 * @param examineId
	 *            考试ID
	 * 
	 */
	private String getNewChildExamineId(String examineId) {
		int intLastId = Integer.parseInt(examineId.substring(2, 8)) + 1;
		String strLastId = String.valueOf(intLastId);
		String[] arrZero = { "00000", "0000", "000", "00", "0" };
		String newChildExamineId = examineId.substring(0, 2)
				+ arrZero[strLastId.length() - 1] + strLastId;
		return newChildExamineId;
	}

	/**
	 * 计算新的子考试ID
	 * 
	 * @param examineId
	 *            考试ID
	 * 
	 */
	private boolean checkTimestamp(String examineId) {

		return ttCommonService.checkTimeStamp(TtConstants.PageId.K060061,
				k060061Dao.getUpdateTime(examineId));
	}

	/**
	 * @param dao
	 *            the k060061Dao to set
	 */
	public void setK060061Dao(K060061Dao dao) {
		k060061Dao = dao;
	}

	/**
	 * @param ttCommonService
	 *            the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}
}
