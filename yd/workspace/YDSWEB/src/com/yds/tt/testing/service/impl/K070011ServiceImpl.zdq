/*
 * @(#) K070011ServiceImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试系统
 *    SubSystem: 考试子系统
 */
package com.yds.tt.testing.service.impl;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.yds.base.service.AbstractBaseService;
import com.yds.common.bean.SysCodeInfo;
import com.yds.common.service.CommonConstants;
import com.yds.tt.testing.bean.K070011SearchPostionInfo;
import com.yds.tt.testing.bean.TestResultsInfo;
import com.yds.tt.testing.bean.ExamineInfo;
import com.yds.tt.testing.bean.K070011Info;
import com.yds.tt.testing.dao.K070011Dao;
import com.yds.tt.testing.service.K070011Service;

/**
 * @see com.yds.tt.testing.service.K070011Service
 */
@Service("k070011Service")
public class K070011ServiceImpl extends AbstractBaseService implements K070011Service {
	private K070011Dao k070011Dao;
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ExamineInfo> getExamineInfoList(
			String examineId, K070011Info k070011Info, int offset , int perCounts) {
		if ("".equals(examineId)) {
			return this.k070011Dao.getExamineInfoList(k070011Info, offset, perCounts);
		}
		k070011Info.setExamineId(examineId.substring(0, K070011Service.TEM_VAR_6));
		return this.k070011Dao.getExamineInfoList(k070011Info, offset, perCounts);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long getTotalCount(String examineId, K070011Info k070011Info){
		if ("".equals(examineId)) {
			return this.k070011Dao.getTotalCount(k070011Info);
		}
		k070011Info.setExamineId(examineId.substring(0, K070011Service.TEM_VAR_6));
		return this.k070011Dao.getTotalCount(k070011Info);
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public ExamineInfo getExamineAllInfo(String examineId) {
		return this.k070011Dao.getExamineAllInfo(examineId);
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public TestResultsInfo getTestResultsInfo (String examineId) {
		ExamineInfo examineInfo = this.k070011Dao.getExamineAllInfo(examineId);
		
		// 参加人数
		K070011Info k070011Info = new K070011Info();
		k070011Info.setExamineId(examineId);
		k070011Info.setTemporaryVariable1(K070011Service.TEM_VAR_7);
		k070011Info.setTemporaryVariable2(0);
		TestResultsInfo testResultsInfo = new TestResultsInfo();
		testResultsInfo.setJoinExamineNum(this.k070011Dao.getExamineCountNum(k070011Info));	
		
		
		// 合格人数
		k070011Info.setTemporaryVariable2(examineInfo.getResultlevelNum());
		k070011Info.setTemporaryVariable1(K070011Service.TEM_VAR_7);
		testResultsInfo.setPassExamineNum(this.k070011Dao.getExamineCountNum(k070011Info));
		
		// 不合格人数
		testResultsInfo.setNotPassExamineNum(testResultsInfo.getJoinExamineNum() - testResultsInfo.getPassExamineNum());
		
		// 合格率　
		BigDecimal passNum = new BigDecimal((testResultsInfo.getPassExamineNum()*100));
		BigDecimal joinNum = new BigDecimal(testResultsInfo.getJoinExamineNum());
		testResultsInfo.setExaminePassRate(Integer.valueOf(passNum.divide(
											joinNum, RoundingMode.HALF_UP).toString()));

		// 评定等级为1时
		if (K070011Service.TEM_VAR_1 == examineInfo.getResultlevelNum()) {
			
			// 设置评定等级为1时设置名称
			k070011Info.setTemporaryVariable2(examineInfo.getResultlevelNum());
			k070011Info.setTemporaryVariable1(K070011Service.TEM_VAR_7);
			testResultsInfo.setResultlevel1Num(this.k070011Dao.getExamineCountNum(k070011Info));
		
		// 评定等级为2时	
		} else if (K070011Service.TEM_VAR_2 == examineInfo.getResultlevelNum()) {
			
			// 设置评定等级为1时设置名称
			k070011Info.setTemporaryVariable2(examineInfo.getResultlevel1Score());
			k070011Info.setTemporaryVariable1(K070011Service.TEM_VAR_7);
			testResultsInfo.setResultlevel1Num(this.k070011Dao.getExamineCountNum(k070011Info));
			
			// 设置评定等级为2时设置名称
			k070011Info.setTemporaryVariable2(examineInfo.getResultlevel2Score());
			k070011Info.setTemporaryVariable1(examineInfo.getResultlevel1Score());
			testResultsInfo.setResultlevel2Num(this.k070011Dao.getExamineCountNum(k070011Info));
		
		// 评定等级为3时	
		} else if(K070011Service.TEM_VAR_3 == examineInfo.getResultlevelNum()) {
			
			// 设置评定等级为1时设置名称
			k070011Info.setTemporaryVariable2(examineInfo.getResultlevel1Score());
			k070011Info.setTemporaryVariable1(K070011Service.TEM_VAR_7);
			testResultsInfo.setResultlevel1Num(this.k070011Dao.getExamineCountNum(k070011Info));
			
			// 设置评定等级为2时设置名称
			k070011Info.setTemporaryVariable2(examineInfo.getResultlevel2Score());
			k070011Info.setTemporaryVariable1(examineInfo.getResultlevel1Score());
			testResultsInfo.setResultlevel2Num(this.k070011Dao.getExamineCountNum(k070011Info));
			
			// 设置评定等级为3时设置名称
			k070011Info.setTemporaryVariable2(examineInfo.getResultlevel3Score());
			k070011Info.setTemporaryVariable1(examineInfo.getResultlevel2Score());
			testResultsInfo.setResultlevel3Num(this.k070011Dao.getExamineCountNum(k070011Info));
		
		// 评定等级为4时	
		} else if (K070011Service.TEM_VAR_4 == examineInfo.getResultlevelNum()) {
			
			// 设置评定等级为1时设置名称
			k070011Info.setTemporaryVariable2(examineInfo.getResultlevel1Score());
			k070011Info.setTemporaryVariable1(K070011Service.TEM_VAR_7);
			testResultsInfo.setResultlevel1Num(this.k070011Dao.getExamineCountNum(k070011Info));
			
			// 设置评定等级为2时设置名称
			k070011Info.setTemporaryVariable2(examineInfo.getResultlevel2Score());
			k070011Info.setTemporaryVariable1(examineInfo.getResultlevel1Score());
			testResultsInfo.setResultlevel2Num(this.k070011Dao.getExamineCountNum(k070011Info));
			
			// 设置评定等级为3时设置名称
			k070011Info.setTemporaryVariable2(examineInfo.getResultlevel3Score());
			k070011Info.setTemporaryVariable1(examineInfo.getResultlevel2Score());
			testResultsInfo.setResultlevel3Num(this.k070011Dao.getExamineCountNum(k070011Info));
			
			// 设置评定等级为4时设置名称
			k070011Info.setTemporaryVariable2(examineInfo.getResultlevel4Score());
			k070011Info.setTemporaryVariable1(examineInfo.getResultlevel3Score());
			testResultsInfo.setResultlevel4Num(this.k070011Dao.getExamineCountNum(k070011Info));
		
		// 评定等级为5时			
		} else if (K070011Service.TEM_VAR_5 == examineInfo.getResultlevelNum()) {
			
			// 设置评定等级为1时设置名称
			k070011Info.setTemporaryVariable2(examineInfo.getResultlevel1Score());
			k070011Info.setTemporaryVariable1(K070011Service.TEM_VAR_7);
			testResultsInfo.setResultlevel1Num(this.k070011Dao.getExamineCountNum(k070011Info));
			
			// 设置评定等级为2时设置名称
			k070011Info.setTemporaryVariable2(examineInfo.getResultlevel2Score());
			k070011Info.setTemporaryVariable1(examineInfo.getResultlevel1Score());
			testResultsInfo.setResultlevel2Num(this.k070011Dao.getExamineCountNum(k070011Info));
			
			// 设置评定等级为3时设置名称
			k070011Info.setTemporaryVariable2(examineInfo.getResultlevel3Score());
			k070011Info.setTemporaryVariable1(examineInfo.getResultlevel2Score());
			testResultsInfo.setResultlevel3Num(this.k070011Dao.getExamineCountNum(k070011Info));
			
			// 设置评定等级为4时设置名称
			k070011Info.setTemporaryVariable2(examineInfo.getResultlevel4Score());
			k070011Info.setTemporaryVariable1(examineInfo.getResultlevel3Score());
			testResultsInfo.setResultlevel4Num(this.k070011Dao.getExamineCountNum(k070011Info));
			
			// 设置评定等级为5时设置名称
			k070011Info.setTemporaryVariable2(examineInfo.getResultlevel5Score());
			k070011Info.setTemporaryVariable1(examineInfo.getResultlevel4Score());
			testResultsInfo.setResultlevel5Num(this.k070011Dao.getExamineCountNum(k070011Info));
		}
		return testResultsInfo;
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<TestResultsInfo> getExamineSpecificList(String examineId) {
		List<TestResultsInfo> examineSpecificList = this.k070011Dao.getExamineSpecificList(examineId);
		for (TestResultsInfo testResultsInfo : examineSpecificList) {
			BigDecimal passNum = new BigDecimal((testResultsInfo.getPassExamineNum()*100));
			BigDecimal joinNum = new BigDecimal(testResultsInfo.getJoinExamineNum());
			testResultsInfo.setExaminePassRate(Integer.valueOf(passNum.divide(
												joinNum, RoundingMode.HALF_UP).toString()));
		}
		return examineSpecificList;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer getExamineCountNum (String examineId) {
		
		// 参加人数
		K070011Info k070011Info = new K070011Info();
		
		// 设置考试ID
		k070011Info.setExamineId(examineId);
		
		// 设置临时变量1
		k070011Info.setTemporaryVariable1(K070011Service.TEM_VAR_7);
		
		// 设置临时变量2
		k070011Info.setTemporaryVariable2(0);
		return this.k070011Dao.getExamineCountNum(k070011Info);	
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ExamineInfo> getEmpExamineInfoList(String employeesId, int offset , int perCounts) {
		StringBuffer employeesIdStr = new StringBuffer(CommonConstants.YD);
		employeesId = employeesIdStr.append(employeesId).toString();
		return this.k070011Dao.getEmpExamineInfoList(employeesId, offset, perCounts);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long getEmpTotalCount(String employeesId) {
		StringBuffer employeesIdStr = new StringBuffer(CommonConstants.YD);
		employeesId = employeesIdStr.append(employeesId).toString();
		return this.k070011Dao.getEmpTotalCount(employeesId);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<TestResultsInfo> getEmpSpecificInfoList(
						String employeesId, String parentExamineId, String examineRadioValue) {
		ExamineInfo examineInfo = new ExamineInfo();
		StringBuffer employeesIdStr = new StringBuffer(CommonConstants.YD);
		employeesId = employeesIdStr.append(employeesId).toString();
		
		// 设置员工ID
		examineInfo.setApplyUserId(employeesId);
		
		// 设置父考试ID
		examineInfo.setParentExamineId(parentExamineId);
		if (K070011Service.RADIO_VALUE.equals(examineRadioValue)) {
			List<TestResultsInfo> empEffectiveInfoList = this.k070011Dao.getEmpEffectiveInfoList(examineInfo);
			for (TestResultsInfo testResultsInfo : empEffectiveInfoList) {
				BigDecimal passNum = new BigDecimal((testResultsInfo.getPassExamineNum()*100));
				BigDecimal joinNum = new BigDecimal(testResultsInfo.getJoinExamineNum());
				testResultsInfo.setExaminePassRate(Integer.valueOf(passNum.divide(
													joinNum, RoundingMode.HALF_UP).toString()));
			}
			return empEffectiveInfoList;
		}
		
		List<TestResultsInfo> empAllInfoList = this.k070011Dao.getEmpAllInfoList(examineInfo);
		for (TestResultsInfo testResultsInfo : empAllInfoList) {
			
			// 设置合格率
			BigDecimal passNum = new BigDecimal((testResultsInfo.getPassExamineNum()*100));
			BigDecimal joinNum = new BigDecimal(testResultsInfo.getJoinExamineNum());
			testResultsInfo.setExaminePassRate(Integer.valueOf(passNum.divide(
												joinNum, RoundingMode.HALF_UP).toString()));
		}		
		return empAllInfoList;
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<SysCodeInfo> getExamineNameLevelInfo(K070011SearchPostionInfo k070011SearchPostionInfo) {
		List<SysCodeInfo> examineLevelList = new ArrayList<SysCodeInfo>();
		String examineId = "";
		if ( null != k070011SearchPostionInfo.getExamine1Id()) {
			
			// 取考试ID的前6位
			examineId  = k070011SearchPostionInfo.getExamine1Id().substring(0, K070011Service.TEM_VAR_6);			
		} else if (null != k070011SearchPostionInfo.getExamine2Id()) {
			
			// 取考试ID的前6位
			examineId  = k070011SearchPostionInfo.getExamine2Id().substring(0, K070011Service.TEM_VAR_6);			
		} else if (null != k070011SearchPostionInfo.getExamine3Id()) {
			
			// 取考试ID的前6位
			examineId  = k070011SearchPostionInfo.getExamine3Id().substring(0, K070011Service.TEM_VAR_6);			
		}
		Map<String, String> examineIdMap= new HashMap<String, String>();
		
		examineIdMap.put("examineId", examineId);
		
		// 取得考试名称和档次
		ExamineInfo examineInfo = this.k070011Dao.getExamineNameLevelInfo(examineIdMap);
		
		// 取出结果为空
		if ( null == examineInfo){
			return examineLevelList;
		}
		
		// 评定等级为1时	
		if (K070011Service.TEM_VAR_1 == examineInfo.getResultlevelNum()) {
			SysCodeInfo  oneRow= new SysCodeInfo();
			oneRow.setTypeName(examineInfo.getExamineName());
			oneRow.setDiffNo(examineInfo.getResultlevel1Id());
			oneRow.setDiffName(examineInfo.getResultlevel1Name());
			examineLevelList.add(oneRow);
			
		// 评定等级为2时		
		} else if(K070011Service.TEM_VAR_2 == examineInfo.getResultlevelNum()){
			SysCodeInfo  oneRow= new SysCodeInfo();
			oneRow.setTypeName(examineInfo.getExamineName());
			oneRow.setDiffNo(examineInfo.getResultlevel1Id());
			oneRow.setDiffName(examineInfo.getResultlevel1Name());
			examineLevelList.add(oneRow);
			
			SysCodeInfo  towRow= new SysCodeInfo();
			towRow.setDiffNo(examineInfo.getResultlevel2Id());
			towRow.setDiffName(examineInfo.getResultlevel2Name());
			examineLevelList.add(towRow);
			
		// 评定等级为3时		
		}  else if(K070011Service.TEM_VAR_3 == examineInfo.getResultlevelNum()){
			SysCodeInfo  oneRow= new SysCodeInfo();
			oneRow.setTypeName(examineInfo.getExamineName());
			oneRow.setDiffNo(examineInfo.getResultlevel1Id());
			oneRow.setDiffName(examineInfo.getResultlevel1Name());
			examineLevelList.add(oneRow);
			
			SysCodeInfo  towRow= new SysCodeInfo();
			towRow.setDiffNo(examineInfo.getResultlevel2Id());
			towRow.setDiffName(examineInfo.getResultlevel2Name());
			examineLevelList.add(towRow);	
			
			SysCodeInfo  threeRow= new SysCodeInfo();
			threeRow.setDiffNo(examineInfo.getResultlevel3Id());
			threeRow.setDiffName(examineInfo.getResultlevel3Name());
			examineLevelList.add(threeRow);	
		
		// 评定等级为4时		
		}  else if(K070011Service.TEM_VAR_4 == examineInfo.getResultlevelNum()){
			SysCodeInfo  oneRow= new SysCodeInfo();
			oneRow.setTypeName(examineInfo.getExamineName());
			oneRow.setDiffNo(examineInfo.getResultlevel1Id());
			oneRow.setDiffName(examineInfo.getResultlevel1Name());
			examineLevelList.add(oneRow);
			
			SysCodeInfo  towRow= new SysCodeInfo();
			towRow.setDiffNo(examineInfo.getResultlevel2Id());
			towRow.setDiffName(examineInfo.getResultlevel2Name());
			examineLevelList.add(towRow);	
			
			SysCodeInfo  threeRow= new SysCodeInfo();
			threeRow.setDiffNo(examineInfo.getResultlevel3Id());
			threeRow.setDiffName(examineInfo.getResultlevel3Name());
			examineLevelList.add(threeRow);	
			
			SysCodeInfo  fourRow= new SysCodeInfo();
			fourRow.setDiffNo(examineInfo.getResultlevel4Id());
			fourRow.setDiffName(examineInfo.getResultlevel4Name());
			examineLevelList.add(fourRow);					
		
		// 评定等级为5时	
		}  else if(K070011Service.TEM_VAR_5 == examineInfo.getResultlevelNum()){
			
			SysCodeInfo  oneRow= new SysCodeInfo();
			oneRow.setTypeName(examineInfo.getExamineName());
			oneRow.setDiffNo(examineInfo.getResultlevel1Id());
			oneRow.setDiffName(examineInfo.getResultlevel1Name());
			examineLevelList.add(oneRow);
			
			SysCodeInfo  towRow= new SysCodeInfo();
			towRow.setDiffNo(examineInfo.getResultlevel2Id());
			towRow.setDiffName(examineInfo.getResultlevel2Name());
			examineLevelList.add(towRow);	
			
			SysCodeInfo  threeRow= new SysCodeInfo();
			threeRow.setDiffNo(examineInfo.getResultlevel3Id());
			threeRow.setDiffName(examineInfo.getResultlevel3Name());
			examineLevelList.add(threeRow);	
			
			SysCodeInfo  fourRow= new SysCodeInfo();
			fourRow.setDiffNo(examineInfo.getResultlevel4Id());
			fourRow.setDiffName(examineInfo.getResultlevel4Name());
			examineLevelList.add(fourRow);	
	
			SysCodeInfo  fiveRow= new SysCodeInfo();
			fiveRow.setDiffNo(examineInfo.getResultlevel5Id());
			fiveRow.setDiffName(examineInfo.getResultlevel5Name());
			examineLevelList.add(fiveRow);
		}
		return examineLevelList;
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<TestResultsInfo> getPostionExamineList(
			String postionRadioValue, List<K070011SearchPostionInfo> searchPostionList, int offset , int perCounts){
		Map<String, List<K070011SearchPostionInfo>> listMap= new HashMap<String, List<K070011SearchPostionInfo>>();
		for(K070011SearchPostionInfo searchPostionInfo : searchPostionList) {
			if (!"".equals(searchPostionInfo.getExamineId())) {
				searchPostionInfo.setExamineId(searchPostionInfo.getExamineId().substring(0, K070011Service.TEM_VAR_6));
			}
		}
		listMap.put("searchPostionList", searchPostionList);
		
		// 检索条件是AND时取得考试成绩信息
		if (K070011Service.RADIO_VALUE.equals(postionRadioValue)) {
			
			// 检索条件是AND时考试成绩信息
			List<TestResultsInfo> testResultsList = this.k070011Dao.getPostionAndExamineList(listMap,offset, perCounts);
			getRowspanCnt(testResultsList);
			return testResultsList;			
		} 
		
		// 检索条件是OR时取得考试成绩信息
		List<TestResultsInfo> testResultsList = this.k070011Dao.getPostionExamineList(listMap, offset,  perCounts);
		getRowspanCnt(testResultsList);
		return testResultsList;
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long getPosTotalCount(String postionRadioValue, List<K070011SearchPostionInfo> searchPostionList){
		Map<String, List<K070011SearchPostionInfo>> listMap = new HashMap<String, List<K070011SearchPostionInfo>>();
		for(K070011SearchPostionInfo searchPostionInfo : searchPostionList) {
			if (!"".equals(searchPostionInfo.getExamineId())) {
				searchPostionInfo.setExamineId(searchPostionInfo.getExamineId().substring(0, K070011Service.TEM_VAR_6));
			}
		}
		listMap.put("searchPostionList", searchPostionList);		

		// 检索条件是AND时取得考试成绩信息
		if (K070011Service.RADIO_VALUE.equals(postionRadioValue)) {
			return this.k070011Dao.getPosTotalCountAnd(listMap);
		}

		// 检索条件是OR时取得考试成绩信息
		return this.k070011Dao.getPosTotalCountOr(listMap);
	}

	/**
	 * 合并单元格的个数取得
	 * 
	 * @param  testResultsList 考试信息
	 */	
	private void getRowspanCnt(List<TestResultsInfo> testResultsList){
		String employeesIdTemp = "";
		
		// 合并单元格个数
		int rowspanCnt = 0;
		
		// 合并单元格标志
		int rowspanCntFlag = 1;
		
		// 需要追加ROWSPAN的行
		int addCntRow = 0;
		if (testResultsList.size() > 0) {
			for(int i = 0; i < testResultsList.size(); i++) {
				
				// 设置合格率
				BigDecimal passNum = new BigDecimal((testResultsList.get(i).getPassExamineNum()*100));
				BigDecimal joinNum = new BigDecimal(testResultsList.get(i).getJoinExamineNum());
				testResultsList.get(i).setExaminePassRate(Integer.valueOf(passNum.divide(
														  joinNum, RoundingMode.HALF_UP).toString()));	
				if (employeesIdTemp.equals(testResultsList.get(i).getEmployeesId())) {
					
					// 设置员工ID
					testResultsList.get(i).setEmployeesId("");
					
					// 设置员工姓名
					testResultsList.get(i).setEmployeesName("");
					
					// 设置合并单元格个数
					testResultsList.get(i).setRowspanCnt(K070011Service.ROW_SPAN_CNT);
					rowspanCnt = rowspanCnt + 1;
					rowspanCntFlag = rowspanCntFlag + 1;
					
					// 设置合并单元格标志
					testResultsList.get(i).setRowspanCntFlag(rowspanCntFlag);
				} else {
					if (i!=0) {
						
						// 设置合并单元格的个数
						testResultsList.get(addCntRow).setRowspanCnt(rowspanCnt);
					}
					
					// 相同员工ID的非第一行标志>1,或者员工只有一个考试,非第一行标志=1
					rowspanCntFlag = 1;
					
					// 需要追加ROWSPAN的行
					addCntRow = i;
					
					// 相同员工id的第一行的ROWSPAN的值,非第一行值=1;
					rowspanCnt = 1;
					testResultsList.get(i).setRowspanCntFlag(rowspanCntFlag);
					employeesIdTemp = testResultsList.get(i).getEmployeesId();
				}
			}
			testResultsList.get(addCntRow).setRowspanCnt(rowspanCnt);
		}
	}
	
	/**
	 * @param dao the k070011Dao to set
	 */
	public void setK070011Dao(K070011Dao dao) {
		k070011Dao = dao;
	}	
}
