/*
 * @(#)K040021ServiceImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 教育子系统
 */
package com.yds.tt.testing.service.impl;

import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.io.FileUtils;
import org.springframework.stereotype.Service;

import com.yds.base.service.AbstractBaseService;
import com.yds.common.bean.SysCodeInfo;
import com.yds.common.service.SessionConstants;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtCommonUtil;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.manager.service.TtExclusiveException;
import com.yds.tt.testing.bean.AnswerContentInfo;
import com.yds.tt.testing.bean.AnswerInfo;
import com.yds.tt.testing.bean.AnswerPointInfo;
import com.yds.tt.testing.bean.QuestionInfo;
import com.yds.tt.testing.bean.QuestionLibrary;
import com.yds.tt.testing.dao.K040021Dao;
import com.yds.tt.testing.service.K040021Service;
import com.yds.util.service.BeanUtil;
import com.yds.util.service.Session;

/**
 * @see com.yds.tt.testing.service.K040021Service
 */
@Service("k040021Service")
public class K040021ServiceImpl extends AbstractBaseService implements
		K040021Service {
	private K040021Dao k040021Dao;
	private TtCommonService ttCommonService; // 共通

	/**
	 * @param dao
	 *            the k040021Dao to set
	 */
	public void setK040021Dao(K040021Dao dao) {
		k040021Dao = dao;
	}

	/**
	 * @param ttCommonService
	 *            the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void insertQuestion(QuestionInfo questionInfo,
			List<AnswerInfo> answerList, String[] pointContent,
			Integer[] pointScore, Integer[] answerPointsize, Boolean reviewFlag)
			throws Exception {

		// 取得session用户ID
		String userId = TtCommonUtil.getLoginUserId();
		questionInfo.setCreateUserId(userId);
		questionInfo.setUpdateUserId(userId);

		// 题库表试题版本号
		questionInfo.setQuestionVersionNo(1);

		// 判断题库信息是登陆还是更新
		Boolean insertUpdateFlg = true;

		// 登录题库表、答案表、答案得分点表共通
		editQDate(questionInfo, answerList, pointContent, pointScore,
				answerPointsize, reviewFlag, insertUpdateFlg);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public QuestionInfo getQuestionInfo(QuestionInfo questionInfo) {

		// 检索试题信息
		return k040021Dao.getQuestionInfo(questionInfo);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<AnswerInfo> getAnswerInfoList(QuestionInfo questionInfo,
			AnswerInfo answerInfo, List<SysCodeInfo> chooseOptionTypeList,
			List<SysCodeInfo> judgeOptionTypeList) {

		// 试题ID
		answerInfo.setQuestionId(questionInfo.getQuestionId());

		// 试题版本号
		answerInfo.setQuestionVersionNo(questionInfo.getQuestionVersionNo());

		List<AnswerInfo> answerList = k040021Dao.getAnswerInfoList(answerInfo);

		// 答案表示处理
		for (int i = 0; i < answerList.size(); i++) {

			// 初始化答案表中的答案内容list
			List<AnswerContentInfo> aclist = new ArrayList<AnswerContentInfo>();

			// 单选题
			if (answerList.get(i).getAnswerType().equals(
					Integer.valueOf(TtConstants.R03.R03_1.toString()))) {
				for (int j = 0; j < answerList.get(i).getOptionNumber(); j++) {

					// 初始化答案表内容Info
					AnswerContentInfo answerContentInfo = new AnswerContentInfo();

					// 选择题答案选项表达方式
					answerContentInfo.setAnswerContentName(chooseOptionTypeList
							.get(answerList.get(i).getOptionType() - 1)
							.getDiffName().split(",")[j]);

					// 选择题答案内容
					if (Integer.valueOf(answerList.get(i).getAnswerContent()) == j) {

						answerContentInfo.setAnswerContent("1");
					}

					aclist.add(answerContentInfo);
				}
				answerList.get(i).setAnswerContentList(aclist);
			}

			// 多选题
			if (answerList.get(i).getAnswerType().equals(
					Integer.valueOf(TtConstants.R03.R03_2.toString()))) {
				for (int j = 0; j < answerList.get(i).getOptionNumber(); j++) {

					// 初始化答案表内容Info
					AnswerContentInfo answerContentInfo = new AnswerContentInfo();

					// 选择题答案选项表达方式
					answerContentInfo.setAnswerContentName(chooseOptionTypeList
							.get(answerList.get(i).getOptionType() - 1)
							.getDiffName().split(",")[j]);

					// 选择题答案内容
					for (int answer = 0; answer < answerList.get(i)
							.getAnswerContent().split(",").length; answer++) {

						if (Integer.valueOf(answerList.get(i)
								.getAnswerContent().split(", ")[answer]) == j) {

							answerContentInfo.setAnswerContent("1");

							break;
						}
					}

					aclist.add(answerContentInfo);
				}
				answerList.get(i).setAnswerContentList(aclist);
			}

			// 判断题
			if (answerList.get(i).getAnswerType().equals(
					Integer.valueOf(TtConstants.R03.R03_3.toString()))) {
				for (int j = 0; j < 2; j++) {

					// 初始化答案表内容Info
					AnswerContentInfo answerContentInfo = new AnswerContentInfo();

					// 选择题答案选项表达方式
					answerContentInfo.setAnswerContentName(judgeOptionTypeList
							.get(answerList.get(i).getOptionType() - 1)
							.getDiffName().split("/")[j]);

					// 选择题答案内容
					if (Integer.valueOf(answerList.get(i).getAnswerContent()) == j) {

						answerContentInfo.setAnswerContent("1");
					}

					aclist.add(answerContentInfo);
				}
				answerList.get(i).setAnswerContentList(aclist);
			}

			// 填空题
			if (answerList.get(i).getAnswerType().equals(
					Integer.valueOf(TtConstants.R03.R03_4.toString()))) {
				for (int j = 0; j < answerList.get(i).getBlankNumber(); j++) {

					// 初始化答案表内容Info
					AnswerContentInfo answerContentInfo = new AnswerContentInfo();
					// 填空题答案内容
					answerContentInfo.setAnswerContent(answerList.get(i)
							.getAnswerContent().split(
									TtConstants.BLANK_SEPARATER)[j]);

					aclist.add(answerContentInfo);
				}
				answerList.get(i).setAnswerContentList(aclist);
			}

			// 问答题或上传题
			if (answerList.get(i).getAnswerType().equals(
					Integer.valueOf(TtConstants.R03.R03_5.toString()))
					|| answerList.get(i).getAnswerType().equals(
							Integer.valueOf(TtConstants.R03.R03_6.toString()))) {

				// 初始化得分点表内容Info
				AnswerPointInfo answerPointInfo = new AnswerPointInfo();

				// 试题ID
				answerPointInfo
						.setQuestionId(answerList.get(i).getQuestionId());

				// 试题版本号
				answerPointInfo.setQuestionVersionNo(answerList.get(i)
						.getQuestionVersionNo());

				// 答案编号
				answerPointInfo.setAnswerSerialNo(answerList.get(i)
						.getAnswerSerialNo());

				// 检索答案得分点信息
				answerList.get(i).setAnswerPointInfoList(
						k040021Dao.getAnswerPointInfoList(answerPointInfo));

				// 得分点列表长度
				answerList.get(i).setAnswerPointsize(
						answerList.get(i).getAnswerPointInfoList().size());
			}

		}

		// 检索答案信息
		return answerList;

	}

	@Override
	public void updateQuestion(QuestionInfo questionInfo,
			List<AnswerInfo> answerList, String[] pointContent,
			Integer[] pointScore, Integer[] answerPointsize,
			Boolean dbConnectFlg) throws Exception {

		// 取得session用户ID
		String userId = TtCommonUtil.getLoginUserId();
		questionInfo.setCreateUserId(userId);
		questionInfo.setUpdateUserId(userId);

		// 排他检查
		// 获取最新修改时间
		Date updateTime = (Date) k040021Dao.getUpdateTime(questionInfo);

		// 排他检查
		if (ttCommonService.checkTimeStamp(TtConstants.PageId.K040021,
				updateTime) == false) {

			throw new TtExclusiveException();
		}

		// 如果试题未核对，则修改原题
		if (Integer.valueOf(TtConstants.R04.R04_1.toString()).equals(
				questionInfo.getCheckFlg())) {

			// 如果需要立即对应到DB
			if (dbConnectFlg) {
				// 答案内容
				AnswerInfo answerInfo = new AnswerInfo();

				// 试题ID
				answerInfo.setQuestionId(questionInfo.getQuestionId());

				// 答案得分点表试题版本号增加
				answerInfo.setQuestionVersionNo(questionInfo
						.getQuestionVersionNo());

				// 删除答案内容
				k040021Dao.deleteAnswerInfo(answerInfo);

				// 答案得分点内容
				AnswerPointInfo answerPointInfo = new AnswerPointInfo();

				// 试题ID
				answerPointInfo.setQuestionId(questionInfo.getQuestionId());

				// 答案得分点表试题版本号增加
				answerPointInfo.setQuestionVersionNo(questionInfo
						.getQuestionVersionNo());

				// 删除得分点内容
				k040021Dao.deleteAnswerPointInfo(answerPointInfo);
			}

			// 如果试题已核对，则增加版本
		} else {

			// 如果需要立即对应到DB
			if (dbConnectFlg) {

				// 修改旧版本试题的最新标识为:非最新
				k040021Dao.updateQuestionVersionNo(questionInfo);
			}

			// 题库表试题版本号增加
			questionInfo.setOldQuestionVersionNo(questionInfo
					.getQuestionVersionNo());
			questionInfo.setQuestionVersionNo(questionInfo
					.getQuestionVersionNo() + 1);
			
			// 更新时间保存
			questionInfo.setUpdateTime(updateTime);
		}

		// 判断题库信息是登陆还是更新
		Boolean insertUpdateFlg = true;

		// 如果试题未核对，则修改原版本
		if (Integer.valueOf(TtConstants.R04.R04_1.toString()).equals(
				questionInfo.getCheckFlg())) {

			insertUpdateFlg = false;

			// 如果试题已核对，则增加版本
		} else {

			insertUpdateFlg = true;
		}

		// 登录题库表、答案表、答案得分点表共通
		editQDate(questionInfo, answerList, pointContent, pointScore,
				answerPointsize, dbConnectFlg, insertUpdateFlg);
	}

	/**
	 * 登录题库表、答案表、答案得分点表、关键字表共通.
	 * 
	 * @param questionInfo
	 *            试题信息
	 */
	private void editQDate(QuestionInfo questionInfo,
			List<AnswerInfo> answerList, String[] pointContent,
			Integer[] pointScore, Integer[] answerPointsize,
			Boolean dbConnectFlg, Boolean insertUpdateFlg) throws Exception {

		// 试题分数初始值
		Integer questionScore = 0;

		// // 试题题型判断FLAG 初始值为true
		// Boolean answerTypeFlag = true;

		// 题库表业务BEAN 传参用
		QuestionLibrary questionLibrary = new QuestionLibrary();

		// 得分点集合
		List<AnswerPointInfo> answerPointInfoList = new ArrayList<AnswerPointInfo>();

		// 登录答案
		if (0 != answerList.size()) {

			// 含得分点试题下标
			int pointIndex = 0;
			// 得分点数组下标
			int strIndex = 0;

			for (int i = 0; i < answerList.size(); i++) {

				// 登录得分点
				if ((answerList.get(i).getAnswerType().equals(
						Integer.valueOf(TtConstants.R03.R03_5.toString())) || answerList
						.get(i).getAnswerType().equals(
								Integer.valueOf(TtConstants.R03.R03_6
										.toString())))
						&& null != answerPointsize[pointIndex]
						&& !answerPointsize[pointIndex].equals(0)) {

					for (int j = 0; j < answerPointsize[pointIndex]; j++) {
						AnswerPointInfo answerPointInfo = new AnswerPointInfo();

						// 试题ID
						answerPointInfo.setQuestionId(questionInfo
								.getQuestionId());

						// 答案编号
						answerPointInfo.setAnswerSerialNo(i + 1);

						// 答案得分点表试题版本号增加
						answerPointInfo.setQuestionVersionNo(questionInfo
								.getQuestionVersionNo());

						// 得分点编号
						answerPointInfo.setPointSerialNo(j + 1);

						// 得分点内容
						answerPointInfo.setPointContent(pointContent[strIndex]);

						// 得分点分数
						answerPointInfo.setPointScore(pointScore[strIndex]);

						// 添加答案得分点内容
						// 如果不需要立即对应到DB
						if (!dbConnectFlg) {

							// 得分点集合，传参用
							answerPointInfoList.add(answerPointInfo);

						} else {

							k040021Dao.insertAnswerPointInfo(answerPointInfo);
						}

						strIndex++;

					}
					pointIndex++;
				}

				// 试题ID
				answerList.get(i).setQuestionId(questionInfo.getQuestionId());

				// 答案表试题版本号增加
				answerList.get(i).setQuestionVersionNo(
						questionInfo.getQuestionVersionNo());

				// 答案编号
				answerList.get(i).setAnswerSerialNo(i + 1);

				// 试题分数
				questionScore = answerList.get(i).getAnswerScore()
						+ questionScore;

				// 试题题型判断
				// if (answerTypeFlag && i > 0
				// && !answerList.get(i).getAnswerType().equals(
				// answerList.get(i - 1).getAnswerType())) {
				//
				// // 试题题型为组合题
				// answerTypeFlag = false;
				// }

				// 如果答案题型为填空题
				if (answerList.get(i).getAnswerType().equals(
						Integer.valueOf(TtConstants.R03.R03_4.toString()))) {

					// 字符串拼接结果
					StringBuffer textContent = new StringBuffer();

					for (int textIndex = 0; textIndex < answerList.get(i)
							.getAnswerContentList().size(); textIndex++) {
						textContent.append(answerList.get(i)
								.getAnswerContentList().get(textIndex)
								.getAnswerContent());
						if (textIndex != answerList.get(i)
								.getAnswerContentList().size() - 1) {
							textContent.append(TtConstants.BLANK_SEPARATER);
						}
					}

					answerList.get(i).setAnswerContent(textContent.toString());
				}

				// 如果答案题型为上传题
				if (answerList.get(i).getAnswerType().equals(
						Integer.valueOf(TtConstants.R03.R03_6.toString()))) {

					if (null != answerList.get(i).getAttachFile()) {

						// 生成文件名
						String targetFileName = generateFileName(answerList
								.get(i).getAttachFileFileName());

						File target = new File(
								propMgr
										.getParameter(TtConstants.FILE_PATH.QUESTION_ANSWER
												.value()), targetFileName);

						// 上传文件
						FileUtils.copyFile(answerList.get(i).getAttachFile(),
								target);

						answerList.get(i).setAttachFilePath(targetFileName);
					} else {
						answerList.get(i).setAttachFilePath(
								answerList.get(i).getAttachFilePath());
					}
				}

				// 添加答案内容
				// 如果不是立即对应到DB
				if (!dbConnectFlg) {

					// 答案内容集合，传参用
					answerList.get(i).setAnswerPointInfoList(
							answerPointInfoList);
					questionLibrary.setAnswerInfoList(answerList);

				} else {

					k040021Dao.insertAnswerInfo(answerList.get(i));
				}
			}
		}

		// 试题数
		questionInfo.setQuestionNumber(answerList.size());

		// 试题分数
		questionInfo.setQuestionScore(questionScore);

		// 设置判题区分
		if (questionInfo.getQuestionKind().equals(
				Integer.valueOf(TtConstants.R03.R03_1.toString()))
				|| questionInfo.getQuestionKind().equals(
						Integer.valueOf(TtConstants.R03.R03_3.toString()))) {

			// 自动判题区分为全部自动判题
			questionInfo.setAtuoMarkFlg(TtConstants.C02.C02_1.toString());
		} else {

			// 自动判题区分为存在手动判题
			questionInfo.setAtuoMarkFlg(TtConstants.C02.C02_2.toString());
		}

		// 登录试题内容
		if (!dbConnectFlg) {
			// 如果不需要立即对应到DB
			// 将questionInfo数据拷贝到questionLibrary中
			BeanUtil.copyBean(questionInfo, questionLibrary);

			// 将questionLibrary数据存入session
			Session.set(SessionConstants.TT_K040021_PAGEINFO, questionLibrary);

		} else {

			// 如果试题不需要登录
			if (!insertUpdateFlg) {

				// 修改旧版本试题信息
				k040021Dao.updateQuestionInfo(questionInfo);

				// 如果试题需要登录
			} else {

				k040021Dao.insertQuestionInfo(questionInfo);
			}
		}

		// 拆分关键字
		if (!questionInfo.getKeyword().isEmpty()) {

			String[] listKeyWords = questionInfo.getKeyword().split(" +");

			// 检索关键字是否存在
			for (int i = 0; i < listKeyWords.length; i++) {

				// 单个关键字
				questionInfo.setKeyword(listKeyWords[i]);

				if (0 == k040021Dao.getKeyWordExist(questionInfo)) {

					// 添加关键字
					k040021Dao.insertKeyWord(questionInfo);
				}
			}
		}
	}

	/**
	 * 生成文件名
	 * 
	 * @param fileName
	 *            上传文件名
	 * @return String 处理后文件名
	 */
	private String generateFileName(String fileName) {

		DateFormat format = new SimpleDateFormat("yyMMddHHmmssSSS");
		StringBuilder formatDate = new StringBuilder(format.format(new Date()));

		int position = fileName.lastIndexOf(".");
		String extension = fileName.substring(position);

		return formatDate.append(extension).toString();
	}

//	/**
//	 * {@inheritDoc}
//	 */
//	@Override
//	public QuestionInfo getPaperCategory(String paperId) {
//
//		// 检索试卷分类信息
//		return k040021Dao.getPaperCategory(paperId);
//	}
}
