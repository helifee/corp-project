/*
 * @(#) K040021Action.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 教育子系统
 */

package com.yds.tt.testing.action;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.opensymphony.xwork2.Preparable;
import com.yds.base.action.AbstractBaseAction;
import com.yds.common.bean.SysCodeInfo;
import com.yds.common.service.SessionConstants;
import com.yds.common.service.SysCodeInfoService;
import com.yds.tt.manager.bean.TtCheckResult;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtCommonUtil;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.manager.service.TtExclusiveException;
import com.yds.tt.testing.bean.AnswerInfo;
import com.yds.tt.testing.bean.AnswerPointInfo;
import com.yds.tt.testing.bean.QuestionInfo;
import com.yds.tt.testing.service.K040021Service;
import com.yds.util.service.Session;

/**
 * 试题新建修改.
 * 
 * @author wanqiuhong
 * @version 1.00 2010/03/17
 */
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@Controller("k040021Action")
public class K040021Action extends AbstractBaseAction implements Preparable {

	private static final long serialVersionUID = -7118110011296743172L;

	// 接口参数
	/** 试题新建修改画面模式 */
	private Integer questionMode;
	/** 启动画面ID */
	private String callScreenId;
	/** 试题ID */
	private String questionId;
	/** 试卷ID */
	private String paperId;
	/** 试题版本号 */
	private Integer questionVersionNo;
	/** 试题集合 */
	private String questionIdList;
	/** 参数一级分类ID */
	private Integer category1;
	/** 参数二级分类ID */
	private Integer category2;
	/** 参数三级分类ID */
	private Integer category3;
	/** 参数试题题型 */
	private Integer questionKind;

	// 画面端用变量
	/** 一级分类IDFlag */
	private Integer category1Flag;
	/** 二级分类IDFlag */
	private Integer category2Flag;
	/** 三级分类IDFlag */
	private Integer category3Flag;
	/** 是否立即核对标识 */
	private Boolean reviewFlag = true;
	/** 是否立即核对标识可见标识 */
	private Boolean reviewShow = true;

	// 业务端用变量
	/** 区分业务 */
	private SysCodeInfoService sysCodeInfoService;
	/** 试题类型集合 */
	private List<SysCodeInfo> questionTypeList;
	/** 试题难度集合 */
	private List<SysCodeInfo> questionDifficultyList;
	/** 试题题型集合 */
	private List<SysCodeInfo> questionKindList;
	/** 答案类型集合 */
	private List<SysCodeInfo> answerKindList;
	/** 选择题选项表达方式集合 */
	private List<SysCodeInfo> chooseOptionTypeList;
	/** 判断题选项表达方式集合judge */
	private List<SysCodeInfo> judgeOptionTypeList;
	/** 试题新建修改业务 */
	private K040021Service k040021Service;
	/** 试题信息 */
	private QuestionInfo questionInfo;
	/** 答案集合 */
	private List<AnswerInfo> answerList;
	/** 试题答案列表长度 */
	private Integer answersize;
	/** 单选答案集合 */
	private List<AnswerInfo> answerContentList;
	/** 答案得分点集合 */
	private List<AnswerPointInfo> answerPointList;
	/** 试题答案得分点列表长度 */
	private Integer[] answerPointsize;
	/** 得分点内容 */
	private String[] pointContent;
	/** 得分点分数 */
	private Integer[] pointScore;
	/** 错误信息 */
	private String errorMessage;
	/** 时间戳 */
	private TtCommonService ttCommonService;
	/** 下一个画面用模式 */
	private Integer mode;

	@Override
	public void prepare() throws Exception {

		// 取得试题类型集合
		this.questionTypeList = sysCodeInfoService.getSysCodeInfo("R02", "").subList(1, sysCodeInfoService.getSysCodeInfo("R02", "").size());

		// 取得试题难度集合
		this.questionDifficultyList = sysCodeInfoService.getSysCodeInfo("E01",
				"").subList(1, sysCodeInfoService.getSysCodeInfo("E01", "").size());

		// 取得试题题型集合
		this.questionKindList = sysCodeInfoService
				.getSysCodeInfo("R03", "")
				.subList(1, sysCodeInfoService.getSysCodeInfo("R03", "").size());

		// 取得答案类型集合(去掉空项和组合题)
		this.answerKindList = sysCodeInfoService
				.getSysCodeInfo("R03", "")
				.subList(1,
						sysCodeInfoService.getSysCodeInfo("R03", "").size() - 1);

		// 取得选择题选项表达方式集合
		this.chooseOptionTypeList = sysCodeInfoService
				.getSysCodeInfo("E02", "").subList(1,
						sysCodeInfoService.getSysCodeInfo("E02", "").size());

		// 取得判断题选项表达方式集合
		this.judgeOptionTypeList = sysCodeInfoService
				.getSysCodeInfo("E03", "")
				.subList(1, sysCodeInfoService.getSysCodeInfo("E03", "").size());
	}

	/**
	 * 画面的初期显示 试题新建修改画面模式（题库新建）.
	 * 
	 * @return SUCCESS
	 */
	public String initNewQuestion() throws Exception {

		// 试题新建修改画面模式（题库新建）
		setQuestionMode(TtConstants.C27.C27_1.value());

		// 新建初期画面校验
		if (checkInitNew()) {
			return ERROR;
		}

		// 新建初期画面处理共通
		initNewQt();

		return SUCCESS;
	}

	/**
	 * 画面的初期显示 试题新建修改画面模式（练选新建）.
	 * 
	 * @return SUCCESS
	 */
	public String initNewQuestionToPractice() throws Exception {

		// 试题新建修改画面模式（练选新建）
		setQuestionMode(TtConstants.C27.C27_2.value());

		// 新建初期画面校验
		if (checkInitNew()) {
			return ERROR;
		}

		// 新建初期画面处理共通
		initNewQt();

		// 是否立即核对可见标识
		reviewShow = false;

		return SUCCESS;
	}

	/**
	 * 画面的初期显示 试题新建修改画面模式（考选新建）.
	 * 
	 * @return SUCCESS
	 */
	public String initNewQuestionToTest() throws Exception {

		// 试题新建修改画面模式（考选新建）
		setQuestionMode(TtConstants.C27.C27_3.value());

		// 新建初期画面校验
		if (checkInitNew()) {
			return ERROR;
		}

		// 新建初期画面处理共通
		initNewQt();

		// 是否立即核对可见标识
		reviewShow = false;

		return SUCCESS;
	}

	/**
	 * 画面的初期显示 试题新建修改画面模式（题库修改）.
	 * 
	 * @return SUCCESS
	 */
	public String initUpdateQuestion() throws Exception {

		// 试题新建修改画面模式（题库修改）
		setQuestionMode(TtConstants.C27.C27_4.value());

		// 检索初期画面校验
		if (checkInitSelect()) {
			return ERROR;
		}

		// 检索初期画面处理共通
		if (initSelectQt()) {
			return ERROR;
		}

		// 启动画面ID = 试题预览核对删除画面（K040051）时
		if (TtConstants.PageId.K040051.value().equals(callScreenId.trim())) {

			// 是否立即核对可见标识
			reviewShow = false;
		}
		return SUCCESS;
	}

	/**
	 * 画面的初期显示 试题新建修改画面模式（练选修改）.
	 * 
	 * @return SUCCESS
	 */
	public String initUpdateQuestionToPractice() throws Exception {

		// 试题新建修改画面模式（练选修改）
		setQuestionMode(TtConstants.C27.C27_5.value());

		// 检索初期画面校验
		if (checkInitSelect()) {
			return ERROR;
		}

		// 检索初期画面处理共通
		initSelectQt();

		// 是否立即核对可见标识
		reviewShow = false;

		return SUCCESS;
	}

	/**
	 * 画面的初期显示 试题新建修改画面模式（考选修改）.
	 * 
	 * @return SUCCESS
	 */
	public String initUpdateQuestionToTest() throws Exception {

		// 试题新建修改画面模式（考选修改）
		setQuestionMode(TtConstants.C27.C27_6.value());

		// 检索初期画面校验
		if (checkInitSelect()) {
			return ERROR;
		}

		// 检索初期画面处理共通
		initSelectQt();

		// 是否立即核对可见标识
		reviewShow = false;

		return SUCCESS;
	}

	/**
	 * 画面的初期显示 试题新建修改画面模式（参照）.
	 * 
	 * @return SUCCESS
	 */
	public String initReferenceQuestion() throws Exception {

		// 试题新建修改画面模式（参照）
		setQuestionMode(TtConstants.C27.C27_7.value());

		// 检索初期画面校验
		if (checkInitSelect()) {
			return ERROR;
		}

		// 检索初期画面处理共通
		initSelectQt();

		// 参照试题ID
		questionInfo.setRefQuestionId(questionId);

		// 取得试题ID
		questionInfo.setQuestionId(ttCommonService
				.getSequence(TtConstants.SEQID.Question));

		return SUCCESS;
	}

	/**
	 * 新建试题信息，【立即核对复选框】未被选中.
	 * 
	 * @return SUCCESS
	 */
	public String newQuestion() throws Exception {

		// 编辑试题校验
		if (checkQuestionMentain()) {
			return ERROR;
		}

		// 登陆DB
		Boolean dbConnectFlg = true;

		// 新建试题共通处理
		newQt(dbConnectFlg);

		// 清空Session中的试题ID
		Session.delete(SessionConstants.TT_K040021_QUESTIONID_SEQ);

		// 显示操作成功消息
		putOpTip(propMgr.getMessage("yds.tt.info.GTT02"));

		return SUCCESS;
	}

	/**
	 * 新建试题信息,【立即核对复选框】被选中. <题库新建><参照><练选新建><考选新建>模式下执行
	 * 
	 * @return SUCCESS
	 */
	public String newQuestionChecked() throws Exception {

		// 编辑试题校验
		if (checkQuestionMentain()) {
			return ERROR;
		}

		// 登陆DB
		Boolean dbConnectFlg = false;

		// 接口参数.题库画面模式 = <题库新建><参照>时：
		if (questionMode == TtConstants.C27.C27_1.value()
				|| questionMode == TtConstants.C27.C27_7.value()) {
			// K040051的接口参数.模式 = <有修改核对>
			mode = TtConstants.C29.C29_2.value();
			dbConnectFlg = true;
		}

		// 接口参数.题库画面模式 = <练选新建>时：
		// K040051的接口参数.模式 = <练习卷新建确认>
		if (questionMode == TtConstants.C27.C27_2.value()) {
			mode = TtConstants.C29.C29_10.value();
		}

		// 接口参数.题库画面模式 = <考选新建>时：
		// K040051的接口参数.模式 = <考试卷新建确认>
		if (questionMode == TtConstants.C27.C27_3.value()) {
			mode = TtConstants.C29.C29_8.value();
		}

		// 新建试题共通处理
		newQt(dbConnectFlg);

		questionId = questionInfo.getQuestionId();

		// 清空Session中的试题ID
		Session.delete(SessionConstants.TT_K040021_QUESTIONID_SEQ);

		// 显示操作成功消息
		putOpTip(propMgr.getMessage("yds.tt.info.GTT02"));

		return SUCCESS;
	}

	/**
	 * 修改试题信息，【立即核对复选框】未被选中.
	 * 
	 * @return SUCCESS
	 */
	public String updateQuestion() throws Exception {

		// 编辑试题校验
		if (checkQuestionMentain()) {
			return ERROR;
		}

		// 登陆DB
		Boolean dbConnectFlg = true;

		// 修改试题共通处理
		if (!updateQt(dbConnectFlg)) {

			return ERROR;
		}

		// 显示更新成功消息
		putOpTip(propMgr.getMessage("yds.com.info.0009"));

		return SUCCESS;
	}

	/**
	 * 修改试题信息,【立即核对复选框】被选中. <题库修改><练选修改><考选修改>下执行
	 * 
	 * @return SUCCESS
	 */
	public String updateQuestionChecked() throws Exception {

		// 编辑试题校验
		if (checkQuestionMentain()) {
			return ERROR;
		}

		// 链接DB
		Boolean dbConnectFlg = false;

		// 接口参数.题库画面模式 = <题库修改>时：
		if (questionMode == TtConstants.C27.C27_4.value()) {
			// K040051的接口参数.模式 = <有修改核对>
			mode = TtConstants.C29.C29_2.value();
			dbConnectFlg = true;
		}

		// 接口参数.题库画面模式 = <练选修改>时：
		// K040051的接口参数.模式 = <练习卷修改确认>
		if (questionMode == TtConstants.C27.C27_5.value()) {
			mode = TtConstants.C29.C29_11.value();
		}

		// 接口参数.题库画面模式 = <考选修改>时：
		// K040051的接口参数.模式 = <考试卷修改确认>
		if (questionMode == TtConstants.C27.C27_6.value()) {
			mode = TtConstants.C29.C29_9.value();
		}

		// 修改试题共通处理
		if (!updateQt(dbConnectFlg)) {

			return ERROR;
		}

		// 显示操作成功消息
		putOpTip(propMgr.getMessage("yds.tt.info.GTT02"));

		return SUCCESS;
	}

	/**
	 * 新建初期画面处理共通.
	 */
	private void initNewQt() {

		/*
		 * // 取得试题类型集合 this.questionTypeList =
		 * sysCodeInfoService.getSysCodeInfo("R02", "");
		 * 
		 * // 取得试题难度集合 this.questionDifficultyList =
		 * sysCodeInfoService.getSysCodeInfo("E01", "");
		 * 
		 * // 取得试题题型集合(去掉空项和组合题) this.questionKindList =
		 * sysCodeInfoService.getSysCodeInfo( "R03", "").subList(1,
		 * sysCodeInfoService.getSysCodeInfo("R03", "").size() - 1);
		 * 
		 * // 取得选择题选项表达方式集合 this.chooseOptionTypeList = sysCodeInfoService
		 * .getSysCodeInfo("E02", "").subList(1,
		 * sysCodeInfoService.getSysCodeInfo("E02", "").size());
		 * 
		 * // 取得判断题选项表达方式集合 this.judgeOptionTypeList = sysCodeInfoService
		 * .getSysCodeInfo("E03", "") .subList(1,
		 * sysCodeInfoService.getSysCodeInfo("E03", "").size());
		 */

		questionInfo = new QuestionInfo();

		// 试题ID
		String questionSeq = (String) Session
				.get(SessionConstants.TT_K040021_QUESTIONID_SEQ);
		if (questionSeq == null) {
			questionSeq = ttCommonService
					.getSequence(TtConstants.SEQID.Question);
			Session
					.set(SessionConstants.TT_K040021_QUESTIONID_SEQ,
							questionSeq);
		}
		questionInfo.setQuestionId(questionSeq);

		// 核对状态
		questionInfo.setCheckFlg(TtConstants.R04.R04_1.value());

		// 试题类型
		if (questionMode == TtConstants.C27.C27_2.value()) {

			// 练习题
			questionInfo.setQuestionType(TtConstants.R02.R02_2.value());
		}
		if (questionMode == TtConstants.C27.C27_3.value()) {

			// 考试题
			questionInfo.setQuestionType(TtConstants.R02.R02_1.value());
		}

		// 练习新建/考卷新建
		if (questionMode == TtConstants.C27.C27_2.value()
				|| questionMode == TtConstants.C27.C27_3.value()) {

			// 分类设置
			category1Flag = 0;
			if (0 == category1) {
				category1Flag = 1;
			}

			category2Flag = 0;
			if (0 == category2) {
				category2Flag = 1;
			}

			category3Flag = 0;
			if (0 == category3) {
				category3Flag = 1;
			}

			// 试题题型
			questionInfo.setQuestionKind(questionKind);
		}
	}

	/**
	 * 检索初期画面处理共通.
	 */
	private boolean initSelectQt() {

		/*
		 * // 取得试题类型集合 this.questionTypeList =
		 * sysCodeInfoService.getSysCodeInfo("R02", "");
		 * 
		 * // 取得试题难度集合 this.questionDifficultyList =
		 * sysCodeInfoService.getSysCodeInfo("E01", "");
		 * 
		 * // 取得试题题型集合(去掉空项和组合题) this.questionKindList =
		 * sysCodeInfoService.getSysCodeInfo("R03", "").subList( 1,
		 * sysCodeInfoService.getSysCodeInfo("R03", "").size() - 1);
		 * 
		 * // 取得选择题选项表达方式集合 this.chooseOptionTypeList =
		 * sysCodeInfoService.getSysCodeInfo("E02", "").subList( 1,
		 * sysCodeInfoService.getSysCodeInfo("E02", "").size());
		 * 
		 * // 取得判断题选项表达方式集合 this.judgeOptionTypeList =
		 * sysCodeInfoService.getSysCodeInfo("E03", "").subList( 1,
		 * sysCodeInfoService.getSysCodeInfo("E03", "").size());
		 */

		QuestionInfo qtInfo = new QuestionInfo();

		// 试题ID
		qtInfo.setQuestionId(questionId);

		// 试题版本号
		qtInfo.setQuestionVersionNo(questionVersionNo);

		// 画面模式
		qtInfo.setQuestionMode(questionMode.toString());

		// 试题信息检索
		this.questionInfo = k040021Service.getQuestionInfo(qtInfo);

		if (null == this.questionInfo) {

			errorMessage = propMgr.getMessage("yds.tt.error.JYE12", "试题");
			return true;
		}

		// 保存时间戳检查用的更新时间
		ttCommonService.setTimestamp(TtConstants.PageId.K040021,
				this.questionInfo.getUpdateTime());

		AnswerInfo answerInfo = new AnswerInfo();

		// 检索答案表
		this.answerList = k040021Service
				.getAnswerInfoList(this.questionInfo, answerInfo,
						this.chooseOptionTypeList, this.judgeOptionTypeList);

		// 答案列表长度
		this.answersize = this.answerList.size();

		// 练习修改/考卷修改
		if (questionMode == TtConstants.C27.C27_5.value()
				|| questionMode == TtConstants.C27.C27_6.value()) {

			// 检索试卷分类
//			if (null != k040021Service.getPaperCategory(paperId)) {
//
//				// 取得试卷一级分类
//				category1 = k040021Service.getPaperCategory(paperId)
//						.getCategory1Id();
//
//				// 取得试卷二级分类
//				category2 = k040021Service.getPaperCategory(paperId)
//						.getCategory2Id();
//
//				// 取得试卷三级分类
//				category3 = k040021Service.getPaperCategory(paperId)
//						.getCategory3Id();
//
//				
//			}
			
			// 分类设置
			category1Flag = 0;
			if (0 == category1) {
				category1Flag = 1;
			}

			category2Flag = 0;
			if (0 == category2) {
				category2Flag = 1;
			}

			category3Flag = 0;
			if (0 == category3) {
				category3Flag = 1;
			}
		}

		// 取得试题一级分类
		category1 = this.questionInfo.getCategory1Id();

		// 取得试题二级分类
		category2 = this.questionInfo.getCategory2Id();

		// 取得试题三级分类
		category3 = this.questionInfo.getCategory3Id();

		return false;
	}

	/**
	 * 新建试题处理共通.
	 */
	private void newQt(Boolean dbConnectFlg) throws Exception {

		// 图片标记（不含图片）
		questionInfo.setPictureFlg(1);
		// 音频标记（不含音频）
		questionInfo.setMediaFlg(1);
		// 附件标记（不含附件）
		questionInfo.setAttachFlg(1);

		if (questionInfo.getQuestionContent().contains("<img")) {

			// 图片标记（含图片）
			questionInfo.setPictureFlg(2);
		}

		if (questionInfo.getQuestionContent().contains("<object")) {

			// 音频标记（含音频）
			questionInfo.setMediaFlg(2);
		}

		if (questionInfo.getQuestionContent().contains("<a href=")) {

			// 附件标记（含附件）
			questionInfo.setAttachFlg(2);
		}

		// 登录试题
		k040021Service.insertQuestion(questionInfo, answerList, pointContent,
				pointScore, answerPointsize, dbConnectFlg);
	}

	/**
	 * 修改试题处理共通.
	 */
	private boolean updateQt(Boolean dbConnectFlg) throws Exception {

		// 图片标记（不含图片）
		questionInfo.setPictureFlg(1);
		// 音频标记（不含音频）
		questionInfo.setMediaFlg(1);
		// 附件标记（不含附件）
		questionInfo.setAttachFlg(1);

		if (questionInfo.getQuestionContent().contains("<img")) {

			// 图片标记（含图片）
			questionInfo.setPictureFlg(2);
		}

		if (questionInfo.getQuestionContent().contains("<object")) {

			// 音频标记（含音频）
			questionInfo.setMediaFlg(2);
		}

		if (questionInfo.getQuestionContent().contains("<a href=")) {

			// 附件标记（含附件）
			questionInfo.setAttachFlg(2);
		}

		try {
			// 修改试题
			k040021Service.updateQuestion(questionInfo, answerList,
					pointContent, pointScore, answerPointsize, dbConnectFlg);

		} catch (TtExclusiveException e) {

			errorMessage = propMgr.getMessage("yds.tt.error.KSE56");
			return false;
		}

		return true;
	}

	/**
	 * 新建初期画面校验.
	 */
	private boolean checkInitNew() {

		// 题库新建模式
		if (questionMode == TtConstants.C27.C27_1.value()) {

			// 权限检查
			TtCheckResult checkResult = ttCommonService
					.checkStartupAuthority(TtConstants.PageId.K040021.value(),
							"K040021_1", null, null);

			if (checkResult.getRetFlag() == false) {

				errorMessage = checkResult.getRetMessage();
				this.addActionError(ERROR);
				super.validate();
				return true;
			}
		}

		// 练选新建模式/考选新建模式
		if (questionMode == TtConstants.C27.C27_2.value()
				|| questionMode == TtConstants.C27.C27_3.value()) {

			// 参数一级分类ID未传递
			if (null == category1) {

				errorMessage = propMgr.getMessage("yds.com.warning.0001",
						"参数一级分类ID");
				return true;
			}

			// 参数二级分类ID未传递
			if (null == category2) {

				errorMessage = propMgr.getMessage("yds.com.warning.0001",
						"参数二级分类ID");
				return true;
			}

			// 参数三级分类ID未传递
			if (null == category3) {

				errorMessage = propMgr.getMessage("yds.com.warning.0001",
						"参数三级分类ID");
				return true;
			}

			// 试卷ID未传递
			if (null == paperId || paperId.isEmpty()) {

				errorMessage = propMgr.getMessage("yds.com.warning.0001", "试卷ID");
				return true;
			}

			List<String> objectId = new ArrayList<String>();
			objectId.add(paperId);

			// 对象区分名
			Integer typeId = null;

			// 事件ID
			String eventId = null;

			// 练习卷
			if (questionMode == TtConstants.C27.C27_2.value()) {
				typeId = TtConstants.C43.C43_5.value();
				eventId = String.valueOf("K040021_2");

				// 考试卷
			} else {
				typeId = TtConstants.C43.C43_4.value();
				eventId = String.valueOf("K040021_3");
			}

			// 权限检查
			TtCheckResult checkResult = ttCommonService.checkStartupAuthority(
					TtConstants.PageId.K040021.value(), eventId, typeId,
					objectId);

			if (checkResult.getRetFlag() == false) {

				errorMessage = checkResult.getRetMessage();
				this.addActionError(ERROR);
				super.validate();
				return true;
			}

		}

		return false;
	}

	/**
	 * 检索初期画面校验.
	 */
	private boolean checkInitSelect() {

		// 试题ID未传递
		if (null == questionId || questionId.isEmpty()) {

			errorMessage = propMgr.getMessage("yds.com.warning.0001", "试题ID");
			return true;
		}

		// 题库修改模式
		if (questionMode == TtConstants.C27.C27_4.value()) {

			// 启动画面
			if (null == callScreenId || callScreenId.isEmpty()) {

				errorMessage = propMgr
						.getMessage("yds.com.warning.0001", "启动画面ID");
				return true;
			}

			// 权限检查
			TtCheckResult checkResult = ttCommonService
					.checkStartupAuthority(TtConstants.PageId.K040021.value(),
							"K040021_1", null, null);

			if (checkResult.getRetFlag() == false) {

				errorMessage = checkResult.getRetMessage();
				this.addActionError(ERROR);
				super.validate();
				return true;
			}
		}

		// 练选修改模式/考选修改模式
		if (questionMode == TtConstants.C27.C27_5.value()
				|| questionMode == TtConstants.C27.C27_6.value()) {

			// 试卷ID未传递
			if (null == paperId || paperId.isEmpty()) {

				errorMessage = propMgr.getMessage("yds.com.warning.0001", "试卷ID");
				return true;
			}

			List<String> objectId = new ArrayList<String>();
			objectId.add(paperId);

			// 对象区分名
			Integer typeId = null;

			// 事件ID
			String eventId = null;

			// 练习卷
			if (questionMode == TtConstants.C27.C27_5.value()) {
				typeId = TtConstants.C43.C43_5.value();
				eventId = String.valueOf("K040021_2");

				// 考试卷
			} else {
				typeId = TtConstants.C43.C43_4.value();
				eventId = String.valueOf("K040021_3");
			}

			// 权限检查
			TtCheckResult checkResult = ttCommonService.checkStartupAuthority(
					TtConstants.PageId.K040021.value(), eventId, typeId,
					objectId);

			if (checkResult.getRetFlag() == false) {

				errorMessage = checkResult.getRetMessage();
				this.addActionError(ERROR);
				super.validate();
				return true;
			}
		}

		// 参照模式
		if (questionMode == TtConstants.C27.C27_7.value()) {

			// 试题版本号未传递
			if (null == questionVersionNo) {

				errorMessage = propMgr.getMessage("yds.com.warning.0001", "试题版本号");
				return true;
			}

			// 权限检查
			TtCheckResult checkResult = ttCommonService
					.checkStartupAuthority(TtConstants.PageId.K040021.value(),
							"K040021_1", null, null);

			if (checkResult.getRetFlag() == false) {

				errorMessage = checkResult.getRetMessage();
				this.addActionError(ERROR);
				super.validate();
				return true;
			}
		}
		return false;
	}

	/**
	 * 编辑试题权限校验
	 */
	private boolean checkQuestionMentain() {

		// 题库新建模式/题库修改模式/参照模式
		if (questionMode == TtConstants.C27.C27_1.value()
				|| questionMode == TtConstants.C27.C27_4.value()
				|| questionMode == TtConstants.C27.C27_7.value()) {

			// 权限检查
			TtCheckResult checkResult = ttCommonService
					.checkStartupAuthority(TtConstants.PageId.K040021.value(),
							"K040021_1", null, null);

			if (checkResult.getRetFlag() == false) {

				errorMessage = checkResult.getRetMessage();
				this.addActionError(ERROR);
				super.validate();
				return true;
			}

		} else {

			List<String> objectId = new ArrayList<String>();
			objectId.add(paperId);

			// 对象区分名
			Integer typeId = null;

			// 事件ID
			String eventId = null;

			// 练习卷
			if (questionMode == TtConstants.C27.C27_2.value()
					|| questionMode == TtConstants.C27.C27_5.value()) {
				typeId = TtConstants.C43.C43_5.value();
				eventId = String.valueOf("K040021_2");

			}

			// 考试卷
			if (questionMode == TtConstants.C27.C27_3.value()
					|| questionMode == TtConstants.C27.C27_6.value()) {
				typeId = TtConstants.C43.C43_4.value();
				eventId = String.valueOf("K040021_3");
			}

			// 启动控制
			TtCheckResult checkResult = ttCommonService.checkStartupAuthority(
					TtConstants.PageId.K040021.value(), eventId, typeId,
					objectId);

			if (checkResult.getRetFlag() == false) {

				errorMessage = checkResult.getRetMessage();
				this.addActionError(ERROR);
				super.validate();
				return true;
			}
		}

		return false;
	}

	/**
	 * 新建试题校验
	 */
	public void validateNewQuestion() {

		// 处理共通校验
		commenCheck();
	}

	/**
	 * 新建试题校验(立即核对)
	 */
	public void validateNewQuestionChecked() {

		// 处理共通校验
		commenCheck();
	}

	/**
	 * 修改试题校验
	 */
	public void validateUpdateQuestion() {

		// 处理共通校验
		commenCheck();
	}

	/**
	 * 修改试题校验(立即核对)
	 */
	public void validateUpdateQuestionChecked() {

		// 处理共通校验
		commenCheck();
	}

	/**
	 * 处理共通校验
	 */
	public void commenCheck() {

		// 分类整合性检查
		if (TtCommonUtil.isEquals(questionInfo.getCategory1Id(), 0) == false
				&& ttCommonService.checkCategoryStatus(questionInfo
						.getCategory1Id(), 0, 0) == false) {

			this.addFieldError("category1Id", propMgr.getMessage(
					"yds.tt.error.JYE04", "试题"));
		}

		if (TtCommonUtil.isEquals(questionInfo.getCategory2Id(), 0) == false
				&& ttCommonService.checkCategoryStatus(questionInfo
						.getCategory1Id(), questionInfo.getCategory2Id(), 0) == false) {

			this.addFieldError("category2Id", propMgr.getMessage(
					"yds.tt.error.JYE04", "试题"));
		}

		if (TtCommonUtil.isEquals(questionInfo.getCategory3Id(), 0) == false
				&& ttCommonService.checkCategoryStatus(questionInfo
						.getCategory1Id(), questionInfo.getCategory2Id(),
						questionInfo.getCategory3Id()) == false) {
			this.addFieldError("category3Id", propMgr.getMessage(
					"yds.tt.error.JYE04", "试题"));
		}

		// 答案列表检查
		if (null == answerList) {

			this.addFieldError("answerList", propMgr.getMessage(
					"yds.com.warning.0001", "答案"));
		}
	}

	/**
	 * @return the questionMode
	 */
	public Integer getQuestionMode() {
		return questionMode;
	}

	/**
	 * @param questionMode
	 *            the questionMode to set
	 */
	public void setQuestionMode(Integer questionMode) {
		this.questionMode = questionMode;
	}

	/**
	 * @return the callScreenId
	 */
	public String getCallScreenId() {
		return callScreenId;
	}

	/**
	 * @param callScreenId
	 *            the callScreenId to set
	 */
	public void setCallScreenId(String callScreenId) {
		this.callScreenId = callScreenId;
	}

	/**
	 * @return the questionId
	 */
	public String getQuestionId() {
		return questionId;
	}

	/**
	 * @param questionId
	 *            the questionId to set
	 */
	public void setQuestionId(String questionId) {
		this.questionId = questionId;
	}

	/**
	 * @return the paperId
	 */
	public String getPaperId() {
		return paperId;
	}

	/**
	 * @param paperId
	 *            the paperId to set
	 */
	public void setPaperId(String paperId) {
		this.paperId = paperId;
	}

	/**
	 * @return the questionVersionNo
	 */
	public Integer getQuestionVersionNo() {
		return questionVersionNo;
	}

	/**
	 * @param questionVersionNo
	 *            the questionVersionNo to set
	 */
	public void setQuestionVersionNo(Integer questionVersionNo) {
		this.questionVersionNo = questionVersionNo;
	}

	/**
	 * @return the questionIdList
	 */
	public String getQuestionIdList() {
		return questionIdList;
	}

	/**
	 * @param questionIdList
	 *            the questionIdList to set
	 */
	public void setQuestionIdList(String questionIdList) {
		this.questionIdList = questionIdList;
	}

	/**
	 * @return the category1
	 */
	public Integer getCategory1() {
		return category1;
	}

	/**
	 * @param category1
	 *            the category1 to set
	 */
	public void setCategory1(Integer category1) {
		this.category1 = category1;
	}

	/**
	 * @return the category2
	 */
	public Integer getCategory2() {
		return category2;
	}

	/**
	 * @param category2
	 *            the category2 to set
	 */
	public void setCategory2(Integer category2) {
		this.category2 = category2;
	}

	/**
	 * @return the category3
	 */
	public Integer getCategory3() {
		return category3;
	}

	/**
	 * @param category3
	 *            the category3 to set
	 */
	public void setCategory3(Integer category3) {
		this.category3 = category3;
	}

	/**
	 * @return the questionKind
	 */
	public Integer getQuestionKind() {
		return questionKind;
	}

	/**
	 * @param questionKind
	 *            the questionKind to set
	 */
	public void setQuestionKind(Integer questionKind) {
		this.questionKind = questionKind;
	}

	/**
	 * @return the category1Flag
	 */
	public Integer getCategory1Flag() {
		return category1Flag;
	}

	/**
	 * @param category1Flag
	 *            the category1Flag to set
	 */
	public void setCategory1Flag(Integer category1Flag) {
		this.category1Flag = category1Flag;
	}

	/**
	 * @return the category2Flag
	 */
	public Integer getCategory2Flag() {
		return category2Flag;
	}

	/**
	 * @param category2Flag
	 *            the category2Flag to set
	 */
	public void setCategory2Flag(Integer category2Flag) {
		this.category2Flag = category2Flag;
	}

	/**
	 * @return the category3Flag
	 */
	public Integer getCategory3Flag() {
		return category3Flag;
	}

	/**
	 * @param category3Flag
	 *            the category3Flag to set
	 */
	public void setCategory3Flag(Integer category3Flag) {
		this.category3Flag = category3Flag;
	}

	/**
	 * @return the reviewFlag
	 */
	public Boolean getReviewFlag() {
		return reviewFlag;
	}

	/**
	 * @param reviewFlag
	 *            the reviewFlag to set
	 */
	public void setReviewFlag(Boolean reviewFlag) {
		this.reviewFlag = reviewFlag;
	}

	/**
	 * @return the reviewShow
	 */
	public Boolean getReviewShow() {
		return reviewShow;
	}

	/**
	 * @param reviewShow
	 *            the reviewShow to set
	 */
	public void setReviewShow(Boolean reviewShow) {
		this.reviewShow = reviewShow;
	}

	/**
	 * @return the sysCodeInfoService
	 */
	public SysCodeInfoService getSysCodeInfoService() {
		return sysCodeInfoService;
	}

	/**
	 * @param sysCodeInfoService
	 *            the sysCodeInfoService to set
	 */
	public void setSysCodeInfoService(SysCodeInfoService sysCodeInfoService) {
		this.sysCodeInfoService = sysCodeInfoService;
	}

	/**
	 * @return the questionTypeList
	 */
	public List<SysCodeInfo> getQuestionTypeList() {
		return questionTypeList;
	}

	/**
	 * @param questionTypeList
	 *            the questionTypeList to set
	 */
	public void setQuestionTypeList(List<SysCodeInfo> questionTypeList) {
		this.questionTypeList = questionTypeList;
	}

	/**
	 * @return the questionDifficultyList
	 */
	public List<SysCodeInfo> getQuestionDifficultyList() {
		return questionDifficultyList;
	}

	/**
	 * @param questionDifficultyList
	 *            the questionDifficultyList to set
	 */
	public void setQuestionDifficultyList(
			List<SysCodeInfo> questionDifficultyList) {
		this.questionDifficultyList = questionDifficultyList;
	}

	/**
	 * @return the questionKindList
	 */
	public List<SysCodeInfo> getQuestionKindList() {
		return questionKindList;
	}

	/**
	 * @param questionKindList
	 *            the questionKindList to set
	 */
	public void setQuestionKindList(List<SysCodeInfo> questionKindList) {
		this.questionKindList = questionKindList;
	}

	/**
	 * @return the answerKindList
	 */
	public List<SysCodeInfo> getAnswerKindList() {
		return answerKindList;
	}

	/**
	 * @param answerKindList
	 *            the answerKindList to set
	 */
	public void setAnswerKindList(List<SysCodeInfo> answerKindList) {
		this.answerKindList = answerKindList;
	}

	/**
	 * @return the chooseOptionTypeList
	 */
	public List<SysCodeInfo> getChooseOptionTypeList() {
		return chooseOptionTypeList;
	}

	/**
	 * @param chooseOptionTypeList
	 *            the chooseOptionTypeList to set
	 */
	public void setChooseOptionTypeList(List<SysCodeInfo> chooseOptionTypeList) {
		this.chooseOptionTypeList = chooseOptionTypeList;
	}

	/**
	 * @return the judgeOptionTypeList
	 */
	public List<SysCodeInfo> getJudgeOptionTypeList() {
		return judgeOptionTypeList;
	}

	/**
	 * @param judgeOptionTypeList
	 *            the judgeOptionTypeList to set
	 */
	public void setJudgeOptionTypeList(List<SysCodeInfo> judgeOptionTypeList) {
		this.judgeOptionTypeList = judgeOptionTypeList;
	}

	/**
	 * @return the k040021Service
	 */
	public K040021Service getK040021Service() {
		return k040021Service;
	}

	/**
	 * @param service
	 *            the k040021Service to set
	 */
	public void setK040021Service(K040021Service service) {
		k040021Service = service;
	}

	/**
	 * @return the questionInfo
	 */
	public QuestionInfo getQuestionInfo() {
		return questionInfo;
	}

	/**
	 * @param questionInfo
	 *            the questionInfo to set
	 */
	public void setQuestionInfo(QuestionInfo questionInfo) {
		this.questionInfo = questionInfo;
	}

	/**
	 * @return the answerList
	 */
	public List<AnswerInfo> getAnswerList() {
		return answerList;
	}

	/**
	 * @param answerList
	 *            the answerList to set
	 */
	public void setAnswerList(List<AnswerInfo> answerList) {
		this.answerList = answerList;
	}

	/**
	 * @return the answersize
	 */
	public Integer getAnswersize() {
		return answersize;
	}

	/**
	 * @param answersize
	 *            the answersize to set
	 */
	public void setAnswersize(Integer answersize) {
		this.answersize = answersize;
	}

	/**
	 * @return the answerContentList
	 */
	public List<AnswerInfo> getAnswerContentList() {
		return answerContentList;
	}

	/**
	 * @param answerContentList
	 *            the answerContentList to set
	 */
	public void setAnswerContentList(List<AnswerInfo> answerContentList) {
		this.answerContentList = answerContentList;
	}

	/**
	 * @return the answerPointList
	 */
	public List<AnswerPointInfo> getAnswerPointList() {
		return answerPointList;
	}

	/**
	 * @param answerPointList
	 *            the answerPointList to set
	 */
	public void setAnswerPointList(List<AnswerPointInfo> answerPointList) {
		this.answerPointList = answerPointList;
	}

	/**
	 * @return the answerPointsize
	 */
	public Integer[] getAnswerPointsize() {
		return answerPointsize;
	}

	/**
	 * @param answerPointsize
	 *            the answerPointsize to set
	 */
	public void setAnswerPointsize(Integer[] answerPointsize) {
		this.answerPointsize = answerPointsize;
	}

	/**
	 * @return the pointContent
	 */
	public String[] getPointContent() {
		return pointContent;
	}

	/**
	 * @param pointContent
	 *            the pointContent to set
	 */
	public void setPointContent(String[] pointContent) {
		this.pointContent = pointContent;
	}

	/**
	 * @return the pointScore
	 */
	public Integer[] getPointScore() {
		return pointScore;
	}

	/**
	 * @param pointScore
	 *            the pointScore to set
	 */
	public void setPointScore(Integer[] pointScore) {
		this.pointScore = pointScore;
	}

	/**
	 * @return the errorMessage
	 */
	public String getErrorMessage() {
		return errorMessage;
	}

	/**
	 * @param errorMessage
	 *            the errorMessage to set
	 */
	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}

	/**
	 * @return the ttCommonService
	 */
	public TtCommonService getTtCommonService() {
		return ttCommonService;
	}

	/**
	 * @param ttCommonService
	 *            the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}

	/**
	 * @return the mode
	 */
	public Integer getMode() {
		return mode;
	}

	/**
	 * @param mode
	 *            the mode to set
	 */
	public void setMode(Integer mode) {
		this.mode = mode;
	}

}
