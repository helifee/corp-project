package com.yds.tt.testing.service.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;
import com.yds.base.service.AbstractBaseService;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtCommonUtil;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.manager.service.TtException;
import com.yds.tt.manager.service.TtExclusiveException;
import com.yds.tt.testing.dao.K060021Dao;
import com.yds.tt.testing.dao.K060151Dao;
import com.yds.tt.testing.service.K060021Service;
import com.yds.tt.testing.service.K060151Service;
import com.yds.tt.testing.bean.ExamEmployeeInfo;
import com.yds.tt.testing.bean.ExamineInfo;
import com.yds.tt.testing.bean.K060151PaperInfo;
import com.yds.tt.testing.bean.PaperBigQuestionInfo;
import com.yds.tt.testing.bean.PaperStableQuestionInfo;
import com.yds.tt.training.bean.CourseInfo;
import com.yds.util.service.DateUtil;

/**
 * @see com.yds.tt.testing.service.K060021Service
 */
@Service("k060021Service")
public class K060021ServiceImpl extends AbstractBaseService implements K060021Service {

	private K060021Dao k060021Dao;
	private TtCommonService ttCommonService;
	private K060151Dao k060151Dao;
	private K060151Service k060151Service;
	
	/**
	* {@inheritDoc}
	*/
	@Override
	public Integer authorityCheck(String testId) {
		
		//取得检验结果
		Map<String, String> paraMap = new HashMap<String, String>();
		paraMap.put("testId", testId);
		paraMap.put("userId", TtCommonUtil.getLoginUserId());
		return k060021Dao.authorityCheck(paraMap);
	}
	
	/**
	* {@inheritDoc}
	*/
	@Override
	public ExamineInfo getTestInfo(String testId) {
		
		//设置参数bean
		ExamineInfo examineInfo = new ExamineInfo();
		examineInfo.setExamineId(testId);
		examineInfo.setUpdateUserId(TtCommonUtil.getLoginUserId());
		
		//取得表单bean
		return k060021Dao.getTestInfo(examineInfo);
	}

	/**
	* {@inheritDoc}
	*/
	@Override
	public List<CourseInfo> getCourseInfoList(String testId) {
		
		return k060021Dao.getCourseInfoList(testId);
	}
	
	/**
	* {@inheritDoc}
	*/
	@Override
	public List<ExamineInfo> getExamineInfoList(String testId) {
		
		Map<String, String> paraMap = new HashMap<String, String>();
		paraMap.put("testId", testId);
		paraMap.put("userId", TtCommonUtil.getLoginUserId());
		return k060021Dao.getExamineInfoList(paraMap);
	}
	
	/**
	* {@inheritDoc}
	*/
	@Override
	public ExamEmployeeInfo getEmpExamineStatus(String testId){
		
		Map<String, String> paraMap = new HashMap<String, String>();
		paraMap.put("testId", testId);
		paraMap.put("userId", TtCommonUtil.getLoginUserId());
		return k060021Dao.getExamineStatus(paraMap);
	}
	
	/**
	* {@inheritDoc}
	*/
	@Override
	public List<ExamineInfo> getOtherExamList(String testId) {
		
		Map<String, String> paraMap = new HashMap<String, String>();
		paraMap.put("testId", testId);
		paraMap.put("userId", TtCommonUtil.getLoginUserId());
		return k060021Dao.getOtherExamList(paraMap);		
	}

	/**
	* {@inheritDoc}
	*/
	@Override
	public void updateAttention(String testId, String flg) {
		
		// 排他检查
		Date updateTime = k060021Dao.getUpdateTime(testId);
		if(ttCommonService.checkTimeStamp(TtConstants.PageId.K060021,  
								updateTime) == false){

			throw new TtExclusiveException();
		}
		
		// 参数设定
		Map<String, String> paraMap = new HashMap<String, String>();
		paraMap.put("testId", testId);
		paraMap.put("userId", TtCommonUtil.getLoginUserId());
		paraMap.put("attentionFlg", flg);
		
		//检查是否已有关注度
		String cnt = k060021Dao.checkAttention(paraMap);
		if ("0".equals(cnt)) {

			// 插入关注度
			k060021Dao.insertAttention(paraMap);
		}else{

			// 更新关注度
			k060021Dao.updateAttention(paraMap);
		}
	}
	
	/**
	* {@inheritDoc}
	*/
	@Override
	public void updateApplyBusiness(ExamEmployeeInfo examEmployeeInfo) {
		// 排他检查
		Date updateTime = k060021Dao.getUpdateTime(examEmployeeInfo.getExamineId());
		if(ttCommonService.checkTimeStamp(TtConstants.PageId.K060021,  
								updateTime) == false){

			throw new TtExclusiveException();
		}
		
		// 报名信息登录
		k060021Dao.insertApplyInfo(examEmployeeInfo);
	}

	/**
	* {@inheritDoc}
	*/
	@Override
	public void deleteApplyBusiness(ExamEmployeeInfo examEmployeeInfo) {
		// 排他检查
		Date updateTime = k060021Dao.getUpdateTime(examEmployeeInfo.getExamineId());
		if(ttCommonService.checkTimeStamp(TtConstants.PageId.K060021,  
								updateTime) == false){

			throw new TtExclusiveException();
		}
		
		// 报名取消
		k060021Dao.deleteApplyInfo(examEmployeeInfo);
	}
	
	/**
	* {@inheritDoc}
	*/
	@Override
	public void updateExamStartBusiness(ExamineInfo examineInfo) {

		ExamEmployeeInfo examEmployeeInfo = this.getEmpExamineStatus(examineInfo.getExamineId());
		
		// 如果考试参加次数大于1，则不可能是进入考试
		//if( examEmployeeInfo.getExamineJoinTimes() > 1){
			//return;
		//}
		
		// 如果是随时考试
		if( TtConstants.C08.C08_2.value()==examineInfo.getExamineFlg()){

			// 取得的考试标志=<随时考试>的情况下
			// 生成试卷
			// 考试试卷信息取得
			List<K060151PaperInfo> paperInfos = k060151Dao.getPaperInfos(examineInfo.getExamineId());
			
			// 如果没有试卷，迁移错误画面
			if( paperInfos.size() == 0) {
				throw new TtException();
			}
			
			// 如果考试状态是考试中,则不需要生成试卷，不需要更新考试员工表。
			if(TtConstants.R13.R13_4.value() == examEmployeeInfo.getEmpExamStatus()){
				return;
			}
			
			// 试卷生成号自动采番
			String newSeq = ttCommonService.getSequence(TtConstants.SEQID.PaperSerial);
			
			examEmployeeInfo.setPaperId(paperInfos.get(0).getPaperId());
			examEmployeeInfo.setPaperVersionNo(paperInfos.get(0).getPaperVersionNo());
			// 试卷生成号
			examEmployeeInfo.setPaperCreateNo(newSeq);
			
			// 随时考试时，如果是第一次生成试卷，则拷贝考试开始时间和结束时间
			Date currentTime = new Date();
			String strEndTime = DateUtil.dateAdd(DateUtil.getDateTime(), examineInfo.getExamineTime(), DateUtil.MINUTE);
			examEmployeeInfo.setExamineStartTime(currentTime);
			examEmployeeInfo.setExamineEndTime(DateUtil.parse(strEndTime));

			// 更新考试员工信息表
			k060151Dao.updateExamEmployeesInfo(examEmployeeInfo);
			
			// 生成大题信息List
			List<PaperBigQuestionInfo>  bigQuestionList = 
				k060151Service.searchPapersDetails(paperInfos.get(0));
	
			// 按照试卷类型插入考试试卷试题表
			for(int j = 0; j < bigQuestionList.size(); j++){
				// 考试具体试题List
				List<PaperStableQuestionInfo> examQuestionList = bigQuestionList.get(j).getStableQueInfoList();
				
				for(int n = 0;n < examQuestionList.size();n++){
					K060151PaperInfo paperInfoPara = new K060151PaperInfo();
					// 考试ID
					paperInfoPara.setExamineId(examEmployeeInfo.getExamineId());
					
					// 试卷ID
					paperInfoPara.setPaperId(bigQuestionList.get(j).getPaperId());
					
					// 试卷版本号
					paperInfoPara.setPaperVersionNo(bigQuestionList.get(j).getPaperVersionNo());
					
					// 试卷生成号
					paperInfoPara.setPaperCreateNo(newSeq);
					
					// 大题编号
					paperInfoPara.setBigquestionSerialNo(bigQuestionList.get(j).getBigquestionSerialNo());
					
					// 试题ID
					paperInfoPara.setQuestionId(examQuestionList.get(n).getQuestionId());
					
					// 大题内显示顺序
					paperInfoPara.setQuestionOrder(examQuestionList.get(n).getQuestionOrder());
					
					// 试题分数
					paperInfoPara.setPaperQuestionScore(examQuestionList.get(n).getQuestionScore());
					
					//插入考试试卷试题表
					k060151Dao.insertExamQuestionInfo(paperInfoPara);
				}
			}

		}
		
		examEmployeeInfo.setEmpExamStatus(TtConstants.R13.R13_4.value());
		examEmployeeInfo.setExamineId(examineInfo.getExamineId());
		examEmployeeInfo.setEmployeesId(TtCommonUtil.getLoginUserId());
		//examEmployeeInfo.setExamineJoinTimes(1);
		
		// 更新员工考试状态为考试中，如果是随时考试，则拷贝考试开始时间和结束时间
		k060021Dao.updateEmpExamineInfo(examEmployeeInfo);
	}

	/**
	* {@inheritDoc}
	*/
	@Override
	public void insertExamAgainBusiness(ExamineInfo examineInfo) {
		ExamEmployeeInfo examEmployeeInfo = this.getEmpExamineStatus(examineInfo.getExamineId());
		
		// 取得的考试标志=<随时考试>的情况下
		if( TtConstants.C08.C08_2.value() == examineInfo.getExamineFlg()){
			
			// 考试试卷信息取得
			List<K060151PaperInfo> paperInfos = k060151Dao.getPaperInfos(examineInfo.getExamineId());
			
			// 如果没有试卷，迁移错误画面
			if( paperInfos.size() == 0) {
				throw new TtException();
			}

			// 如果考试状态是考试中,则不需要生成试卷，不需要更新考试员工表。
			if(TtConstants.R13.R13_4.value() == examEmployeeInfo.getEmpExamStatus()){
				return;
			}
			
			// 重新插入考试员工信息表
			// 员工考试状态为"考试中"
			examEmployeeInfo.setEmpExamStatus(TtConstants.R13.R13_4.value());
			// 参加次数
			examEmployeeInfo.setExamineJoinTimes(examEmployeeInfo
					.getExamineJoinTimes() + 1);
			// 试卷生成号自动采番
			String newSeq = ttCommonService
					.getSequence(TtConstants.SEQID.PaperSerial);
			examEmployeeInfo.setPaperCreateNo(newSeq);

			Date currentTime = new Date();
			String strEndTime = DateUtil.dateAdd(DateUtil.getDateTime(),
					examineInfo.getExamineTime(), DateUtil.MINUTE);
			examEmployeeInfo.setExamineStartTime(currentTime);
			examEmployeeInfo.setExamineEndTime(DateUtil.parse(strEndTime));
			
			examEmployeeInfo.setPaperCreateTime(currentTime);

			// 插入考试员工信息表
			k060021Dao.insertExamEmployeeInfo(examEmployeeInfo);

			// 生成大题信息List
			List<PaperBigQuestionInfo> bigQuestionList = k060151Service
					.searchPapersDetails(paperInfos.get(0));

			// 按照试卷类型插入考试试卷试题表
			for (int j = 0; j < bigQuestionList.size(); j++) {
				// 考试具体试题List
				List<PaperStableQuestionInfo> examQuestionList = bigQuestionList
						.get(j).getStableQueInfoList();

				for (int n = 0; n < examQuestionList.size(); n++) {
					K060151PaperInfo paperInfoPara = new K060151PaperInfo();
					// 考试ID
					paperInfoPara.setExamineId(examEmployeeInfo.getExamineId());

					// 试卷ID
					paperInfoPara.setPaperId(bigQuestionList.get(j)
							.getPaperId());

					// 试卷版本号
					paperInfoPara.setPaperVersionNo(bigQuestionList.get(j)
							.getPaperVersionNo());

					// 试卷生成号
					paperInfoPara.setPaperCreateNo(newSeq);

					// 大题编号
					paperInfoPara.setBigquestionSerialNo(bigQuestionList.get(j)
							.getBigquestionSerialNo());

					// 试题ID
					paperInfoPara.setQuestionId(examQuestionList.get(n)
							.getQuestionId());

					// 大题内显示顺序
					paperInfoPara.setQuestionOrder(examQuestionList.get(n)
							.getQuestionOrder());

					// 试题分数
					paperInfoPara.setPaperQuestionScore(examQuestionList.get(n)
							.getQuestionScore());

					// 插入考试试卷试题表
					k060151Dao.insertExamQuestionInfo(paperInfoPara);
				}
			}
		}
	}

/*	@Override
	public List<K060021TestInfo> getExamingChild(K060021TestInfo testInfo) {
//		List<K060021TestInfo> getExamingChild = k060021Dao.getExamingChild(testInfo);
//		return getExamingChild;
		return null;
	}*/
	
	/**
	 * @param dao the k060021Dao to set
	 */
	public void setK060021Dao(K060021Dao dao) {
		k060021Dao = dao;
	}

	/**
	 * @param ttCommonService
	 *            the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}

	public void setK060151Dao(K060151Dao dao) {
		k060151Dao = dao;
	}

	public void setK060151Service(K060151Service service) {
		k060151Service = service;
	}
	
}
