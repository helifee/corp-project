/*
 * @(#) K040031Dao.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试系统
 *    SubSystem: 考试子系统
 */
package com.yds.tt.testing.action;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import net.sf.json.JSONObject;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.opensymphony.xwork2.Preparable;
import com.opensymphony.xwork2.interceptor.annotations.InputConfig;
import com.yds.base.action.AbstractBaseAction;
import com.yds.common.bean.SysCodeInfo;
import com.yds.common.service.SysCodeInfoService;
import com.yds.tt.manager.bean.TtCheckResult;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtCommonUtil;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.manager.service.TtExclusiveException;
import com.yds.tt.testing.bean.QuestionLibrary;
import com.yds.tt.testing.service.K040031Service;

/**
 * 试题批量修改
 * 
 * @author chenjunshuai
 * @version 1.00 2010/05/12
 */
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@Controller("k040031Action")
public class K040031Action extends AbstractBaseAction implements Preparable {

	private static final long serialVersionUID = -1285933337980947193L;
	private K040031Service k040031Service;
	private TtCommonService ttCommonService; 
	private SysCodeInfoService sysCodeInfoService;
	private QuestionLibrary questionLibrary;
	private String questionIdStrJson;// 接口试题ID参数
	private List<QuestionLibrary> questionLibraryInfoList;// 试题一览信息列表
	private List<SysCodeInfo> questionDifficultyNameList;// 试题难度名称列表
	private List<String> keywordList;// 关键字信息列表
	private String questionIdJson;// 从前台传过来的试题ID字符串
	private String errorMessage;// 错误信息
	private String updateTimeJson;// 选中时间的更新时间字符串
	private Integer checkBoxFlag;// 立即核对试题选中标识
	private Integer category1Id;// 一级分类ID
	private String allUpdateTimeJson;// 所有试题的更新时间
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public void prepare() throws Exception {
		
		// 取得试题难度名称
		this.questionDifficultyNameList = this.sysCodeInfoService.getSysCodeInfo(TtConstants.E01.getEnumName());

	}	
	
	/**
	 * 画面的初期显示
	 * 
	 * @return SUCCESS/ERROR
	 */
	@SuppressWarnings("unchecked")
	@Override
	@InputConfig(resultName = "error")
	public String execute() throws Exception {
		
		// 画面启动检查
		List<String> objectId = new ArrayList<String>();
		
		// 将接口参数传化成JSON格式
		JSONObject questionIdJsonObj = JSONObject.fromObject(questionIdStrJson);
		
		// 接口参数传化成List
		Iterator<String> iterator = questionIdJsonObj.keySet().iterator();
		while (iterator.hasNext()) {
			
			String qesId = iterator.next().trim();
			objectId.add(qesId);
		}
		
		// 权限检查
		TtCheckResult checkResult = ttCommonService.checkStartupAuthority(
				TtConstants.PageId.K040031.value(), "K040031",
				TtConstants.C43.C43_6.value(), objectId);

		if (!checkResult.getRetFlag()) {
			
			// 设置错误信息
			errorMessage = checkResult.getRetMessage();
			if ("GTE01".equals(checkResult.getErrLevel())) {
				
				// ErrLevel = "GTE01"时，返回LOGIN
				return LOGIN;		
			} else {
				return ERROR;	
			}
		}	
		
		
		
		// 取得试题一览信息
		this.questionLibraryInfoList = this.k040031Service.getQuestionLibraryInfoList(questionIdJsonObj);

		return SUCCESS;
	}
	
	/**
	 * 取出关键字信息
	 * 
	 * @return SUCCESS
	 */	
	public String obtainKeyWordInfo() throws Exception {
		
		// 获得关键字信息
		this.keywordList = this.k040031Service.getKeyWordInfo(category1Id);
		return SUCCESS;
	}
	
	/**
	 * 修改试题信息 
	 * 
	 * @return SUCCESS
	 */		
	@SuppressWarnings("unchecked")
	public String updateTestQuestions() throws Exception {
		

		// 画面启动检查
		List<String> objectId = new ArrayList<String>();
		
		// 将接口参数传化成JSON格式
		JSONObject questionIdJsonObj = JSONObject.fromObject(questionIdJson);
		
		// 接口参数传化成List
		Iterator iterator = questionIdJsonObj.keySet().iterator();
		while (iterator.hasNext()) {
			
			String qesId = iterator.next().toString().trim();
			objectId.add(qesId);
		}
		
		// 权限检查
		TtCheckResult checkResult = ttCommonService.checkStartupAuthority(
				TtConstants.PageId.K040031.value(), "K040031",
				TtConstants.C43.C43_6.value(), objectId);

		if (!checkResult.getRetFlag()) {
			
			// 设置错误信息
			errorMessage = checkResult.getRetMessage();
			if ("GTE01".equals(checkResult.getErrLevel())) {
				
				// ErrLevel = "GTE01"时，返回LOGIN
				return LOGIN;		
			} else {
				return ERROR;	
			}
		}	
		// 试题ID转化为JSON
		JSONObject questionJson =JSONObject.fromObject(questionIdJson);

		// 更新时间ID转化为JSON
		JSONObject updtTimeJson =JSONObject.fromObject(updateTimeJson);
		try {
			
			// 修改试题信息
			if (this.k040031Service.updateTestQuestions(questionLibrary, questionJson, updtTimeJson) < 0) {
				errorMessage = propMgr.getMessage("yds.tt.error.KSE13");
				return ERROR;
			}
			
		} catch (TtExclusiveException e) {
			errorMessage = propMgr.getMessage("yds.tt.error.KSE56");
			return ERROR;			
		}	
		
		// 立即核对试题选中
		if (1 == checkBoxFlag) {
			return NONE;
		}

		return SUCCESS;
	}

	/**
	 * 检查接口参数 
	 */	
	public void validateExecute() {
		if(null == questionIdStrJson || questionIdStrJson.isEmpty()){
			errorMessage = "接口试题ID参数未设定！";
			this.addActionError("error");
			return;			
		}
	}
	/**
	 * 检查试题分数 
	 */		
	public void validateUpdateTestQuestions() {
		
		// 设置更新时间
		addUpdateTime();
		if (1 == questionLibrary.getQuestionScoreFlag()) {
			if (null == questionLibrary.getQuestionScore()) {
				this.addFieldError("", propMgr.getMessage("yds.com.warning.0001","试题分数"));
				return;
			}
		}
		
		if (1 == questionLibrary.getCategoryIdFlag()) {
			
			// 分类整合性检查
			if (TtCommonUtil.isEquals(questionLibrary.getCategory1Id(), 0) == false &&
				ttCommonService.checkCategoryStatus(questionLibrary.getCategory1Id(), 0, 0) == false) {
				
				this.addFieldError("category1Id", propMgr.getMessage("yds.tt.error.JYE04", "试题"));	
			}

			if (TtCommonUtil.isEquals(questionLibrary.getCategory2Id(), 0) == false && 
				ttCommonService.checkCategoryStatus(questionLibrary.getCategory1Id(), 
						questionLibrary.getCategory2Id(), 0) == false) {
				
				this.addFieldError("category2Id", propMgr.getMessage("yds.tt.error.JYE04", "试题"));				
			}
			
			if (TtCommonUtil.isEquals(questionLibrary.getCategory3Id(), 0) == false && 
				ttCommonService.checkCategoryStatus(questionLibrary.getCategory1Id(), 
						questionLibrary.getCategory2Id(), 
						questionLibrary.getCategory3Id()) == false) {
				this.addFieldError("category3Id", propMgr.getMessage("yds.tt.error.JYE04", "试题"));						
			}
			return;			
		}
	}
	
	/**
	 * 设置更新时间 
	 */	  
	@SuppressWarnings("unchecked")
	public void addUpdateTime(){
		JSONObject allTimeJson = JSONObject.fromObject(allUpdateTimeJson);
		Iterator allUpdateTimeJsonIterator = allTimeJson.values().iterator();
		int i=0;
		while (allUpdateTimeJsonIterator.hasNext()) {
			DateFormat dateFormat= new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			try {
				questionLibraryInfoList.get(i).setUpdateTime(dateFormat.parse(allUpdateTimeJsonIterator.next().toString()));
			} catch (ParseException e) {
				e.printStackTrace();
			}
			i++;
		}		
	}
	
    /**
	 * @return the questionLibrary
	 */
	public QuestionLibrary getQuestionLibrary() {
		return questionLibrary;
	}

	/**
	 * @param questionLibrary the questionLibrary to set
	 */
	public void setQuestionLibrary(QuestionLibrary questionLibrary) {
		this.questionLibrary = questionLibrary;
	}

	/**
	 * @return the questionIdStrJson
	 */
	public String getQuestionIdStrJson() {
		return questionIdStrJson;
	}

	/**
	 * @param questionIdStrJson the questionIdStrJson to set
	 */
	public void setQuestionIdStrJson(String questionIdStrJson) {
		this.questionIdStrJson = questionIdStrJson;
	}

	/**
	 * @return the questionLibraryInfoList
	 */
	public List<QuestionLibrary> getQuestionLibraryInfoList() {
		return questionLibraryInfoList;
	}

	/**
	 * @param questionLibraryInfoList the questionLibraryInfoList to set
	 */
	public void setQuestionLibraryInfoList(
			List<QuestionLibrary> questionLibraryInfoList) {
		this.questionLibraryInfoList = questionLibraryInfoList;
	}

	/**
	 * @return the questionDifficultyNameList
	 */
	public List<SysCodeInfo> getQuestionDifficultyNameList() {
		return questionDifficultyNameList;
	}

	/**
	 * @param questionDifficultyNameList the questionDifficultyNameList to set
	 */
	public void setQuestionDifficultyNameList(
			List<SysCodeInfo> questionDifficultyNameList) {
		this.questionDifficultyNameList = questionDifficultyNameList;
	}

	/**
	 * @return the keywordList
	 */
	public List<String> getKeywordList() {
		return keywordList;
	}

	/**
	 * @param keywordList the keywordList to set
	 */
	public void setKeywordList(List<String> keywordList) {
		this.keywordList = keywordList;
	}

	/**
	 * @param service the k040031Service to set
	 */
	public void setK040031Service(K040031Service service) {
		k040031Service = service;
	}

	/**
	 * @param sysCodeInfoService the sysCodeInfoService to set
	 */
	public void setSysCodeInfoService(SysCodeInfoService sysCodeInfoService) {
		this.sysCodeInfoService = sysCodeInfoService;
	}

	/**
	 * @return the questionIdJson
	 */
	public String getQuestionIdJson() {
		return questionIdJson;
	}

	/**
	 * @param questionIdJson the questionIdJson to set
	 */
	public void setQuestionIdJson(String questionIdJson) {
		this.questionIdJson = questionIdJson;
	}

	/**
	 * @return the errorMessage
	 */
	public String getErrorMessage() {
		return errorMessage;
	}

	/**
	 * @param errorMessage the errorMessage to set
	 */
	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}

	/**
	 * @return the updateTimeJson
	 */
	public String getUpdateTimeJson() {
		return updateTimeJson;
	}

	/**
	 * @param updateTimeJson the updateTimeJson to set
	 */
	public void setUpdateTimeJson(String updateTimeJson) {
		this.updateTimeJson = updateTimeJson;
	}

	/**
	 * @return the checkBoxFlag
	 */
	public Integer getCheckBoxFlag() {
		return checkBoxFlag;
	}

	/**
	 * @param checkBoxFlag the checkBoxFlag to set
	 */
	public void setCheckBoxFlag(Integer checkBoxFlag) {
		this.checkBoxFlag = checkBoxFlag;
	}

	/**
	 * @return the category1Id
	 */
	public Integer getCategory1Id() {
		return category1Id;
	}

	/**
	 * @param category1Id the category1Id to set
	 */
	public void setCategory1Id(Integer category1Id) {
		this.category1Id = category1Id;
	}

	/**
	 * @param ttCommonService the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}

	/**
	 * @return the allUpdateTimeJson
	 */
	public String getAllUpdateTimeJson() {
		return allUpdateTimeJson;
	}

	/**
	 * @param allUpdateTimeJson the allUpdateTimeJson to set
	 */
	public void setAllUpdateTimeJson(String allUpdateTimeJson) {
		this.allUpdateTimeJson = allUpdateTimeJson;
	}
}
