/*
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 教育子系统
 */

package com.yds.tt.training.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.yds.common.service.SessionConstants;

import com.yds.tt.training.bean.BookInfo;
import com.yds.tt.training.bean.CourseInfo;
import com.yds.tt.training.service.J020031Service;
import com.yds.tt.manager.action.TtBasePagerAction;
import com.yds.tt.manager.bean.TtCheckResult;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.manager.service.TtExclusiveException;
import com.yds.util.service.Session;

import com.opensymphony.xwork2.Preparable;
import com.opensymphony.xwork2.interceptor.annotations.InputConfig;

/**
 * 课程详细(管理)
 * 
 * @author zhangaijun
 * @version 1.00 2010/03/15
 */
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@Controller("j020031Action")
public class J020031Action extends TtBasePagerAction implements Preparable {

	private static final long serialVersionUID = -7559754176332676128L;

	private static String onEdit = "编辑中";
	private static String courseInfoForMap = "MANA_COURSEINFO";

	/** 课程基本信息 */
	private CourseInfo manaCourseInfo;
	/** 所选教材一览信息 */
	private List<BookInfo> manaBookInfoList;
	/** 课程ID */
	private String paramCourseId;
	/** 课程审批状态名称 */
	private String confirmStatusNm;
	/** 教材ID */
	private String paramBookId;
	/** 操作模式 */
	private String operatMode;

	private String errorMessage;

	private J020031Service j020031Service;

	private TtCommonService ttCommonService;

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void prepare() throws Exception {
	}

	/**
	 * 画面（编辑模式）的初期显示 课程信息检索，所选教材信息检索
	 * 
	 * @return SUCCESS
	 */
	@SuppressWarnings("unchecked")
	// 方法校验失败时的返回值
	@InputConfig(resultName = "error")
	public String initEdit() throws Exception {

		TtCheckResult checkResult = checkAuthority(String
				.valueOf(TtConstants.C20.C20_2), this.getParamCourseId());
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			return ERROR;
		}
		// 如果画面项目session没有值，则再检索
		// 如果reloadFlg = 2，使用Session保存的信息给画面赋值
		if ("2".equals(getReloadFlg())) {

			HashMap<String, Object> pageInfo = (HashMap<String, Object>) Session
					.get(SessionConstants.TT_J020031_PAGEINFO);

			// session中读取画面信息
			manaCourseInfo = (CourseInfo) pageInfo.get(courseInfoForMap);
		} else {

			// 取得课程基本信息一览
			manaCourseInfo = j020031Service.getCourseInfo(this
					.getParamCourseId());

			// 如果检索结果为空，或为已开课返回错误画面
			if (null == manaCourseInfo
					|| manaCourseInfo.getCoursePublishStatus() == TtConstants.R05.R05_2
							.value()) {
				errorMessage = propMgr.getMessage("yds.tt.error.JYE12", this
						.getParamCourseId());
				return ERROR;
			}

			// 最新时间戳保存
			ttCommonService.setTimestamp(TtConstants.PageId.J020031,
					manaCourseInfo.getUpdateTime());

		}
		Session.delete(SessionConstants.TT_J020031_PAGEINFO);

		// 取得所选教材一览
		manaBookInfoList = j020031Service.getBookInfoList(this
				.getParamCourseId(), String.valueOf(TtConstants.C20.C20_2));

		// 编辑模式
		this.setOperatMode(String.valueOf(TtConstants.C20.C20_2));

		return SUCCESS;
	}

	/**
	 * 画面（审批模式）的初期显示 课程信息检索，所选教材信息检索
	 * 
	 * @return SUCCESS
	 */
	@InputConfig(resultName = "error")
	public String initApprove() throws Exception {

		TtCheckResult checkResult = checkAuthority(String
				.valueOf(TtConstants.C20.C20_3), this.getParamCourseId());
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			return ERROR;
		}

		// 取得课程基本信息一览
		manaCourseInfo = j020031Service.getCourseInfo(this.getParamCourseId());

		// 如果检索结果为空，返回错误画面
		if (null == manaCourseInfo) {
			errorMessage = propMgr.getMessage("yds.tt.error.JYE12", this
					.getParamCourseId());
			return ERROR;
		}
		// 最新时间戳保存
		ttCommonService.setTimestamp(TtConstants.PageId.J020031, manaCourseInfo
				.getUpdateTime());

		Session.delete(SessionConstants.TT_J020031_PAGEINFO);

		// 取得所选教材一览
		manaBookInfoList = j020031Service.getBookInfoList(this
				.getParamCourseId(), String.valueOf(TtConstants.C20.C20_3));

		// 审批模式
		this.setOperatMode(String.valueOf(TtConstants.C20.C20_3));

		return SUCCESS;
	}

	/**
	 * 画面（参与模式）的初期显示 课程信息检索，所选教材信息检索
	 * 
	 * @return SUCCESS
	 */
	@InputConfig(resultName = "error")
	public String initJoin() throws Exception {

		// 取得所选教材一览
		try {
			manaBookInfoList = j020031Service.getBookInfoList(this
					.getParamCourseId(), String.valueOf(TtConstants.C20.C20_7));
		} catch (TtExclusiveException e) {
			errorMessage = e.getMessage();
			return ERROR;
		}

		// 画面启动权限检查
		TtCheckResult checkResult = new TtCheckResult();
		// 教材一览编辑权限检查
		if (manaBookInfoList == null || manaBookInfoList.size() == 0) {
			checkResult.setRetFlag(false);
			checkResult.setRetMessage(propMgr.getMessage("yds.tt.error.GTE02"));
		} else {
			for (BookInfo checkObjectInfo : manaBookInfoList) {
				checkResult = checkAuthority(String
						.valueOf(TtConstants.C20.C20_7), checkObjectInfo
						.getBookId());
				// 至少有一本可编辑教材则有权限
				if (checkResult.getRetFlag()) {
					break;
				}
			}
		}
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			return ERROR;
		}

		// 取得课程基本信息一览
		manaCourseInfo = j020031Service.getCourseInfo(this.getParamCourseId());

		// 如果检索结果为空，返回错误画面
		if (null == manaCourseInfo) {
			errorMessage = propMgr.getMessage("yds.tt.error.JYE12", this
					.getParamCourseId());
			return ERROR;
		}

		// 最新时间戳保存
		ttCommonService.setTimestamp(TtConstants.PageId.J020031, manaCourseInfo
				.getUpdateTime());

		Session.delete(SessionConstants.TT_J020031_PAGEINFO);

		// 参与模式
		this.setOperatMode(String.valueOf(TtConstants.C20.C20_7));

		return SUCCESS;
	}

	/**
	 * 参数获取和判断
	 * 
	 */
	private boolean checkParameter() {
		// 课程ID参数的读取
		if (this.getParamCourseId() == null || paramCourseId.isEmpty()) {
			if (Session.get(SessionConstants.TT_J020031_PARAMETER) == null) {
				return false;
			}
			paramCourseId = (String) Session
					.get(SessionConstants.TT_J020031_PARAMETER);

		}
		// session.delete(SessionConstants.TT_J020031_PARAMETER);

		// 课程ID参数的判断
		if (null == paramCourseId || paramCourseId.isEmpty()) {
			return false;
		}

		return true;
	}

	/**
	 * 画面信息session保存
	 * 
	 */
	private void savePageToSession() {

		HashMap<String, Object> pageInfo = new HashMap<String, Object>();

		pageInfo.put(courseInfoForMap, manaCourseInfo);

		// 画面信息保存
		Session.set(SessionConstants.TT_J020031_PAGEINFO, pageInfo);
	}

	/**
	 * 更新课程基本信息
	 * 
	 * @return SUCCESS
	 */
	public String updateCourseInfo() throws Exception {

		TtCheckResult checkResult = checkAuthority(String
				.valueOf(TtConstants.C20.C20_2), this.getParamCourseId());
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			return ERROR;
		}

		try {
			// 更新课程信息
			j020031Service.updateCourseInfo(manaCourseInfo);

		} catch (TtExclusiveException e) {
			errorMessage = propMgr.getMessage("yds.tt.error.KSE56");
			return ERROR;
		}

		// 显示操作成功消息
		putOpTip(propMgr.getMessage("yds.tt.info.GTT02"));
		return SUCCESS;
	}

	/**
	 * 提交申请
	 * 
	 * @return SUCCESS
	 */
	public String updateApplyCourseInfo() throws Exception {

		TtCheckResult checkResult = checkAuthority(String
				.valueOf(TtConstants.C20.C20_2), this.getParamCourseId());
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			return ERROR;
		}

		try {
			// 提交申请课程信息
			j020031Service.updateApplyCourseInfo(manaCourseInfo);

		} catch (TtExclusiveException e) {
			errorMessage = propMgr.getMessage("yds.tt.error.KSE56");
			return ERROR;
		}

		// 显示操作成功消息
		putOpTip(propMgr.getMessage("yds.tt.info.GTT02"));
		return SUCCESS;
	}

	/**
	 * 批准课程
	 * 
	 * @return SUCCESS
	 */
	public String confirmCourse() throws Exception {

		TtCheckResult checkResult = checkAuthority(String
				.valueOf(TtConstants.C20.C20_3), this.getParamCourseId());
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			return ERROR;
		}

		try {
			manaCourseInfo
					.setCourseConfirmStatus(TtConstants.R06.R06_3.value());

			manaCourseInfo.setRefuseReason("");
			// 审批课程信息
			j020031Service.updateConfirmCourse(manaCourseInfo);

		} catch (TtExclusiveException e) {
			errorMessage = propMgr.getMessage("yds.tt.error.KSE56");
			return ERROR;
		}

		// 显示操作成功消息
		putOpTip(propMgr.getMessage("yds.tt.info.GTT02"));
		return SUCCESS;

	}

	/**
	 * 不批准课程
	 * 
	 * @return SUCCESS
	 */
	public String unConfirmCourse() throws Exception {

		TtCheckResult checkResult = checkAuthority(String
				.valueOf(TtConstants.C20.C20_3), this.getParamCourseId());
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			return ERROR;
		}

		try {
			manaCourseInfo
					.setCourseConfirmStatus(TtConstants.R06.R06_4.value());

			// 审批课程信息
			j020031Service.updateConfirmCourse(manaCourseInfo);

		} catch (TtExclusiveException e) {
			errorMessage = propMgr.getMessage("yds.tt.error.KSE56");
			return ERROR;
		}

		// 显示操作成功消息
		putOpTip(propMgr.getMessage("yds.tt.info.GTT02"));
		return SUCCESS;

	}

	/**
	 * 再编辑课程
	 * 
	 * @return SUCCESS
	 */
	public String reEditCourse() throws Exception {
		this.setParamCourseId(manaCourseInfo.getCourseId());

		TtCheckResult checkResult = checkAuthority(String
				.valueOf(TtConstants.C20.C20_2), manaCourseInfo.getCourseId());
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			return ERROR;
		}

		try {
			// 再编辑课程信息
			j020031Service.updateReEditCourse(manaCourseInfo);

			// 最新时间戳保存
			ttCommonService.setTimestamp(TtConstants.PageId.J020031,
					j020031Service.getTimeStamp(manaCourseInfo.getCourseId()));

			this.confirmStatusNm = onEdit;

		} catch (TtExclusiveException e) {
			errorMessage = propMgr.getMessage("yds.tt.error.KSE56");
			return ERROR;
		}

		return SUCCESS;
	}

	/**
	 * 追加教材按钮
	 * 
	 * @return SUCCESS
	 */
	public String addBook() throws Exception {
		// 保存画面信息
		savePageToSession();
		// 保存接口参数
		Session.set(SessionConstants.TT_J020031_PARAMETER, manaCourseInfo
				.getCourseId());
		return SUCCESS;
	}

	/**
	 * 创建新教材按钮
	 * 
	 * @return SUCCESS
	 */
	public String createBook() throws Exception {
		// 保存画面信息
		savePageToSession();
		// 保存接口参数
		Session.set(SessionConstants.TT_J020031_PARAMETER, manaCourseInfo
				.getCourseId());
		return SUCCESS;
	}

	/**
	 * 编辑教材链接
	 * 
	 * @return SUCCESS
	 */
	public String editBook() throws Exception {
		// 保存画面信息
		savePageToSession();
		// 保存接口参数
		Session.set(SessionConstants.TT_J020031_PARAMETER, manaCourseInfo
				.getCourseId());
		return SUCCESS;
	}

	/**
	 * 管理教材链接
	 * 
	 * @return SUCCESS
	 */
	public String managerBook() throws Exception {
		// 保存画面信息
		savePageToSession();
		// 保存接口参数
		Session.set(SessionConstants.TT_J020031_PARAMETER, manaCourseInfo
				.getCourseId());
		return SUCCESS;
	}

	/**
	 * 删除教材链接
	 * 
	 * @return SUCCESS
	 */
	public String deleteBook() throws Exception {

		// 保存画面信息
		savePageToSession();
		// 保存接口参数
		Session.set(SessionConstants.TT_J020031_PARAMETER, manaCourseInfo
				.getCourseId());
		return SUCCESS;
	}

	/**
	 * 移除教材链接
	 * 
	 * @return SUCCESS
	 */
	public String removeBook() throws Exception {
		this.setParamCourseId(manaCourseInfo.getCourseId());
		TtCheckResult checkResult = checkAuthority(String
				.valueOf(TtConstants.C20.C20_2), manaCourseInfo.getCourseId());
		if (!checkResult.getRetFlag()) {
			errorMessage = checkResult.getRetMessage();
			return ERROR;
		}

		j020031Service
				.deleteBookLink(paramBookId, manaCourseInfo.getCourseId());

		return SUCCESS;
	}

	/**
	 * 编辑模式初期化校验
	 */
	public void validateInitEdit() {
		if (!checkParameter()) {
			errorMessage = propMgr.getMessage("yds.tt.error.JYE07");
			this.addActionError("error");
		}
	}

	/**
	 * 审批模式初期化校验
	 */
	public void validateInitApprove() {
		if (!checkParameter()) {
			errorMessage = propMgr.getMessage("yds.tt.error.JYE07");
			this.addActionError("error");
		}
	}

	/**
	 * 参与模式初期化校验
	 */
	public void validateInitJoin() {
		if (!checkParameter()) {
			errorMessage = propMgr.getMessage("yds.tt.error.JYE07");
			this.addActionError("error");
		}
	}

	/**
	 * 更新校验
	 * 
	 */
	public void validateUpdateCourseInfo() {

	}

	/**
	 * 提交申请校验
	 * 
	 */
	public void validateUpdateApplyCourseInfo() {

		// 当所选教材没有一个编辑号的教材状态是<已发布>时，提示错误信息
		if (manaBookInfoList != null && manaBookInfoList.size() > 0) {
			for (int i = 0; i < manaBookInfoList.size(); i++) {
				// 检索教材ID有没有已发布的版本
				if (j020031Service.getPublishedBookCnt(manaBookInfoList.get(i)
						.getBookId()) <= 0) {
					this.addFieldError("", propMgr.getMessage(
							"yds.tt.info.JYT10", manaBookInfoList.get(i)
									.getBookId()));
					return;
				}
			}
		}

	}

	/**
	 * 画面启动控制检查
	 * 
	 * @param mode
	 *            画面启动模式
	 * 
	 */
	private TtCheckResult checkAuthority(String mode, String checkObjectId) {

		List<String> objectId = new ArrayList<String>();
		objectId.add(checkObjectId);
		TtCheckResult checkResult = new TtCheckResult();
		// 编辑模式
		if (String.valueOf(TtConstants.C20.C20_2).equals(mode)) {
			// 权限检查
			checkResult = ttCommonService.checkStartupAuthority(
					TtConstants.PageId.J020031.value(), "J020031_1", 0, 0, 0,
					TtConstants.C43.C43_1.value(), objectId);
		}

		// 审批模式
		else if (String.valueOf(TtConstants.C20.C20_3).equals(mode)) {
			// 权限检查
			checkResult = ttCommonService.checkStartupAuthority(
					TtConstants.PageId.J020031.value(), "J020031_2", 0, 0, 0,
					TtConstants.C43.C43_1.value(), objectId);
		}

		// 参与模式
		else if (String.valueOf(TtConstants.C20.C20_7).equals(mode)) {
			// 权限检查
			checkResult = ttCommonService.checkStartupAuthority(
					TtConstants.PageId.J020031.value(), "J020031_3", 0, 0, 0,
					TtConstants.C43.C43_2.value(), objectId);
		}

		return checkResult;
	}

	/**
	 * @return the manaCourseInfo
	 */
	public CourseInfo getManaCourseInfo() {
		return manaCourseInfo;
	}

	/**
	 * @param manaCourseInfo
	 *            the manaCourseInfo to set
	 */
	public void setManaCourseInfo(CourseInfo manaCourseInfo) {
		this.manaCourseInfo = manaCourseInfo;
	}

	/**
	 * @return the manaBookInfoList
	 */
	public List<BookInfo> getManaBookInfoList() {
		return manaBookInfoList;
	}

	/**
	 * @param manaBookInfoList
	 *            the manaBookInfoList to set
	 */
	public void setManaBookInfoList(List<BookInfo> manaBookInfoList) {
		this.manaBookInfoList = manaBookInfoList;
	}

	/**
	 * @return the paramCourseId
	 */
	public String getParamCourseId() {
		return paramCourseId;
	}

	/**
	 * @param paramCourseId
	 *            the paramCourseId to set
	 */
	public void setParamCourseId(String paramCourseId) {
		this.paramCourseId = paramCourseId;
	}

	/**
	 * @return the paramBookId
	 */
	public String getParamBookId() {
		return paramBookId;
	}

	/**
	 * @param paramBookId
	 *            the paramBookId to set
	 */
	public void setParamBookId(String paramBookId) {
		this.paramBookId = paramBookId;
	}

	/**
	 * @return the confirmStatusNm
	 */
	public String getConfirmStatusNm() {
		return confirmStatusNm;
	}

	/**
	 * @param confirmStatusNm
	 *            the confirmStatusNm to set
	 */
	public void setConfirmStatusNm(String confirmStatusNm) {
		this.confirmStatusNm = confirmStatusNm;
	}

	/**
	 * @return the operatMode
	 */
	public String getOperatMode() {
		return operatMode;
	}

	/**
	 * @param operatMode
	 *            the operatMode to set
	 */
	public void setOperatMode(String operatMode) {
		this.operatMode = operatMode;
	}

	/**
	 * @return the errorMessage
	 */
	public String getErrorMessage() {
		return errorMessage;
	}

	/**
	 * @param errorMessage
	 *            the errorMessage to set
	 */
	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}

	/**
	 * @return the j020031Service
	 */
	public J020031Service getJ020031Service() {
		return j020031Service;
	}

	/**
	 * @param service
	 *            the j020031Service to set
	 */
	public void setJ020031Service(J020031Service service) {
		j020031Service = service;
	}


	/**
	 * @return the ttCommonService
	 */
	public TtCommonService getTtCommonService() {
		return ttCommonService;
	}

	/**
	 * @param ttCommonService
	 *            the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}
}
