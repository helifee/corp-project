/*
 * @(#) J020011Action.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 教育子系统
 */
package com.yds.tt.training.action;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.opensymphony.xwork2.Preparable;
import com.yds.base.action.AbstractBaseAction;
import com.yds.common.bean.SysCodeInfo;
import com.yds.common.service.SysCodeInfoService;
import com.yds.tt.manager.bean.AuthorityInfo;
import com.yds.tt.manager.bean.EmpOrgInfo;
import com.yds.tt.manager.bean.TtCheckResult;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.manager.service.TtCommonUtil;
import com.yds.tt.manager.service.TtExclusiveException;
import com.yds.tt.training.bean.CourseInfo;
import com.yds.tt.training.service.J020011Service;
import com.yds.tt.training.service.TrainingCommonService;
import com.yds.util.service.StringUtil;

/**
 * 课程新建及权限管理
 * 
 * @author qianguorong
 * @version 1.00 2010/03/12
 */
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@Controller("j020011Action")
public class J020011Action extends AbstractBaseAction implements Preparable{

	private static final long serialVersionUID = 6215024884928576944L;
	private SysCodeInfoService sysCodeInfoService;
	private TtCommonService ttCommonService; 
	private TrainingCommonService trainingCommonService;
	private J020011Service j020011Service;
	
	private String mode; //模式
	private CourseInfo courseInfo; // 课程信息
	private AuthorityInfo approverInfo; // 审批者权限
	private List<AuthorityInfo> editorList;// 编辑人员一览
	private List<SysCodeInfo> joinYearList; // 工龄列表
	private List<SysCodeInfo> targetList; // 针对对象列表
	private List<EmpOrgInfo> orgList; // 项目组列表
	
	/** 针对对象人员ID*/
	private String strUserIdList;
	/** 针对对象人员名*/
	private String strUserNameList;
	private String objectValue2; // 针对对象值（项目组）
	private Boolean necessaryFlag; // 必修标志
	private String errorMessage;
	
	private Integer sltCategory1;//一级分类ID初期值
	private Integer sltCategory2;//二级分类ID初期值
	private Integer sltCategory3;//三级分类ID初期值
	private String sltCategory1Enable;//一级分类ID可用标识
	private String sltCategory2Enable;//二级分类ID可用标识
	private String sltCategory3Enable;//三级分类ID可用标识

	@Override
	public void prepare() throws Exception {
		// 针对对象选项取得
		this.targetList = sysCodeInfoService.getSysCodeInfo("C12");

		// 工龄选项取得
		this.joinYearList = sysCodeInfoService.getSysCodeInfo("R14");
		
		// 项目组选项取得
		this.orgList = ttCommonService.getOrgList();
	}
	
	/**
	 * 画面的初期显示 课程管理模式
	 * 
	 * @return SUCCESS
	 */
	@Override
	public String execute() throws Exception {
		
		// 参数.课程ID未设定
		if (this.courseInfo == null || null == this.courseInfo.getCourseId() || this.courseInfo.getCourseId().isEmpty()) {

			errorMessage = propMgr.getMessage("yds.com.warning.0001","课程ID");
			return ERROR;
		}
		String courseId = this.courseInfo.getCourseId();
		
		// 画面启动检查
		List<String> objectId = new ArrayList<String>();
		objectId.add(courseId);
		TtCheckResult result= ttCommonService.checkStartupAuthority(
				TtConstants.PageId.J020011.toString(),
				"J020011",
				TtConstants.C43.C43_1.value(), objectId);
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			return ERROR;	
		}

		// 课程基本信息取得
		this.courseInfo = j020011Service.getCourseInfo(courseId);
		
		// 针对对象一览取得 ： 课程针对对象区分为<4.针对个人>时
		if (TtCommonUtil.isEquals(courseInfo.getObjectType(),
		          TtConstants.C12.C12_4.value())) {
			String[] userList = trainingCommonService.getUserList(courseId);
			this.setStrUserIdList(userList[0]);
			this.setStrUserNameList(userList[1]);
		}

		// 编辑人员一览取得
		this.editorList = ttCommonService.getAuthorityInfoList(courseId, 
													TtConstants.C24.C24_6.toString());
		
		// 保存时间戳检查用的更新时间
		ttCommonService.setTimestamp(TtConstants.PageId.J020011, this.courseInfo.getUpdateTime());

		// 画面模式设定
		setMode(TtConstants.Mode.Update_Mode.value());
		
		// 画面审批者设定
		this.approverInfo= new AuthorityInfo();
		this.approverInfo.setUserId(StringUtil.leftTrimYd(courseInfo.getAppointedApproverUserId()));
		this.approverInfo.setUserName(courseInfo.getAppointedApproverUserName());
		
		// 必修选项设定
		if (TtCommonUtil.isEquals(courseInfo.getNecessaryFlag(),
						          TtConstants.C19.C19_1.value())) {
			this.necessaryFlag = true;			
		}
		
		// 项目组选项设定
		if (TtCommonUtil.isEquals(courseInfo.getObjectType(),
		          TtConstants.C12.C12_2.value())) {
			this.objectValue2 = courseInfo.getObjectValue();
		}

		// 画面分类设定
		sltCategory1 = this.courseInfo.getCategory1Id();
		sltCategory2 = this.courseInfo.getCategory2Id();
		sltCategory3 = this.courseInfo.getCategory3Id();

		// 分类设定可用设定
		if (TtCommonUtil.isEquals(courseInfo.getCoursePublishStatus(),
		          TtConstants.R05.R05_2.value())) {
			//开课状态下，禁用
			sltCategory1Enable = "0";
			sltCategory2Enable = "0";
			sltCategory3Enable = "0";
		} else {
			sltCategory1Enable = "1";
			sltCategory2Enable = "1";
			sltCategory3Enable = "1";
		}
			
		
		return SUCCESS;
	}

	/**
	 * 画面的初期显示 课程新建模式
	 * 
	 * @return SUCCESS
	 */
	public String newCourse() throws Exception {
		
		// 画面启动检查
		TtCheckResult result= ttCommonService.checkStartupAuthority(
				TtConstants.PageId.J020011.toString(),
				"J020011",
				 null, null);
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			return ERROR;	
		}
		
		// 默认不选中
		this.setNecessaryFlag(false);

		// 画面模式设定
		setMode(TtConstants.Mode.Insert_Mode.value());

		return SUCCESS;
	}

	/**
	 * 插入课程信息
	 * 
	 * @return SUCCESS
	 */
	public String insertCourse() throws Exception {
		
		// 画面启动检查
		TtCheckResult result= ttCommonService.checkStartupAuthority(
				TtConstants.PageId.J020011.toString(),
				"J020011",
				 null, null);
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			return ERROR;	
		}
		
		// 必修区分设定
		if (this.necessaryFlag == true) {
			courseInfo.setNecessaryFlag(TtConstants.C19.C19_1.value());
		} else {
			courseInfo.setNecessaryFlag(TtConstants.C19.C19_2.value());
		}
		
		// 项目组选项设定
		if (TtCommonUtil.isEquals(courseInfo.getObjectType(),
		          TtConstants.C12.C12_2.value())) {
			courseInfo.setObjectValue(this.objectValue2);
		}
		


		// 插入课程信息
		j020011Service.insertCourse(courseInfo,
									approverInfo,
									editorList,
									strUserIdList);
		
		// 显示操作成功消息
		putOpTip(propMgr.getMessage("yds.tt.info.GTT02"));

		return SUCCESS;
	}

	/**
	 * 更新课程信息
	 * 
	 * @return SUCCESS
	 */
	public String updateCourse() throws Exception {
	
		// 画面启动检查
		List<String> objectId = new ArrayList<String>();
		objectId.add(courseInfo.getCourseId());
		TtCheckResult result= ttCommonService.checkStartupAuthority(
				TtConstants.PageId.J020011.toString(),
				"J020011",
				TtConstants.C43.C43_1.value(), objectId);
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			return ERROR;	
		}
		
		// 必修区分设定
		if (this.necessaryFlag==true) {
			courseInfo.setNecessaryFlag(TtConstants.C19.C19_1.value());
		} else {
			courseInfo.setNecessaryFlag(TtConstants.C19.C19_2.value());
		}
		
		// 项目组选项设定
		if (TtCommonUtil.isEquals(courseInfo.getObjectType(),
		          TtConstants.C12.C12_2.value())) {
			courseInfo.setObjectValue(this.objectValue2);
		}

		try {
			
			// 更新课程信息
			j020011Service.updateCourse(courseInfo,
										approverInfo,
										editorList,
										strUserIdList);
		
		} catch (TtExclusiveException e){
			errorMessage = propMgr.getMessage("yds.tt.error.KSE56");
			return ERROR;			
		}

		// 显示操作成功消息
		putOpTip(propMgr.getMessage("yds.tt.info.GTT02"));
		
		return SUCCESS;
	}
	
	/**
	 * 开课处理
	 * 
	 * @return SUCCESS
	 */
	public String updateCourseStart() throws Exception {	
		
		// 画面启动检查
		List<String> objectId = new ArrayList<String>();
		objectId.add(courseInfo.getCourseId());
		TtCheckResult result= ttCommonService.checkStartupAuthority(
				TtConstants.PageId.J020011.toString(),
				"J020011",
				TtConstants.C43.C43_1.value(), objectId);
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			return ERROR;	
		}
		
		try {
			
			// 更新课程信息
			courseInfo.setCoursePublishStatus(TtConstants.R05.R05_2.value());
			j020011Service.updateCoursePublishStatus(courseInfo);
			
		} catch (TtExclusiveException e){
			errorMessage = propMgr.getMessage("yds.tt.error.KSE56");
			return ERROR;			
		}
		
		// 显示操作成功消息
		putOpTip(propMgr.getMessage("yds.tt.info.GTT02"));
		
		return SUCCESS;
	}
	
	/**
	 * 停课处理
	 * 
	 * @return SUCCESS
	 */
	public String updateCourseStop() throws Exception {
		
		// 画面启动检查
		List<String> objectId = new ArrayList<String>();
		objectId.add(courseInfo.getCourseId());
		TtCheckResult result= ttCommonService.checkStartupAuthority(
				TtConstants.PageId.J020011.toString(),
				"J020011",
				TtConstants.C43.C43_1.value(), objectId);
		if (!result.getRetFlag()) {
			errorMessage = result.getRetMessage();
			return ERROR;	
		}
		
		try{
			
			// 更新课程信息
			courseInfo.setCoursePublishStatus(TtConstants.R05.R05_3.value());
			j020011Service.updateCoursePublishStatus(courseInfo);
			
		} catch (TtExclusiveException e){
			errorMessage = propMgr.getMessage("yds.tt.error.KSE56");
			return ERROR;			
		}

		// 显示更新成功消息
		putOpTip(propMgr.getMessage("yds.tt.info.GTT02"));
		
		return SUCCESS;
	}
	
	/**
	 * 追加校验
	 * 
	 */
	public void validateInsertCourse(){

		// 关联check
		relativeCheck();
	}	
	
	/**
	 * 更新校验
	 * 
	 */
	public void validateUpdateCourse(){
		
		// 关联check
		relativeCheck();
	}	
	
	/**
	 * 校验
	 * 
	 */
	private void relativeCheck(){
	
		// 针对对象校验
		if (TtCommonUtil.isEquals(courseInfo.getObjectType(),
		          TtConstants.C12.C12_4.value())) {
			if (strUserIdList.isEmpty() || "".equals(strUserIdList.trim())) {
				this.addFieldError("courseInfo.objectType",propMgr.getMessage("yds.tt.error.JYE14"));
			}
		}
	 	
		// 开始时间与结束时间校验
		if (null != this.editorList) {
			for (int i = 0; i < this.editorList.size(); i++) {
				
				if (null != this.editorList.get(i).getStartTime()
						&& null != this.editorList.get(i).getEndTime()) {
					
					if (0 < this.editorList.get(i).getStartTime().compareTo(
							this.editorList.get(i).getEndTime())) {
						this.addFieldError("editorList[" + i +"].startTime",
								propMgr.getMessage("yds.tt.error.JYE05", this.editorList.get(i).getUserName()));
						this.addFieldError("editorList[" + i +"].endTime",
								propMgr.getMessage("yds.tt.error.JYE05", this.editorList.get(i).getUserName()));

					}
				}
			}
		}
		
		// 检查审批者是否存在
		if (ttCommonService.isExistUserId(StringUtil.leftPadYd(approverInfo.getUserId()) ) == false) {
			this.addFieldError("approverInfo.userId", propMgr.getMessage("yds.tt.error.JYE12", "审批者"));
		}
		
		// 分类整合性检查
		if (TtCommonUtil.isEquals(courseInfo.getCategory1Id(), 0) == false &&
			ttCommonService.checkCategoryStatus(courseInfo.getCategory1Id(), 0, 0) == false) {
			
			this.addFieldError("category1Id", propMgr.getMessage("yds.tt.error.JYE04", "课程"));			
		}

		if (TtCommonUtil.isEquals(courseInfo.getCategory2Id(), 0) == false && 
			ttCommonService.checkCategoryStatus(courseInfo.getCategory1Id(), 
												courseInfo.getCategory2Id(), 0) == false) {
			
			this.addFieldError("category2Id", propMgr.getMessage("yds.tt.error.JYE04", "课程"));			
		}
		
		if (TtCommonUtil.isEquals(courseInfo.getCategory3Id(), 0) == false && 
			ttCommonService.checkCategoryStatus(courseInfo.getCategory1Id(), 
												courseInfo.getCategory2Id(), 
												courseInfo.getCategory3Id()) == false) {
			this.addFieldError("category3Id", propMgr.getMessage("yds.tt.error.JYE04", "课程"));			
		}
		
		return ;
	}
	

	public void setJ020011Service(J020011Service service) {
		j020011Service = service;
	}

	/**
	 * @param courseInfo
	 *            the courseInfo to set
	 */
	public void setCourseInfo(CourseInfo courseInfo) {

		this.courseInfo = courseInfo;
	}

	/**
	 * @return the courseInfo
	 */
	public CourseInfo getCourseInfo() {
		return courseInfo;
	}

	/**
	 * @param sysCodeInfoService
	 *            the sysCodeInfoService to set
	 */
	public void setSysCodeInfoService(SysCodeInfoService sysCodeInfoService) {
		this.sysCodeInfoService = sysCodeInfoService;
	}

	/**
	 * @return the sysCodeInfoService
	 */
	public SysCodeInfoService getSysCodeInfoService() {
		return sysCodeInfoService;
	}

	/**
	 * @param joinYearList
	 *            the joinYearList to set
	 */
	public void setJoinYearList(List<SysCodeInfo> joinYearList) {
		this.joinYearList = joinYearList;
	}

	/**
	 * @return the joinYearList
	 */
	public List<SysCodeInfo> getJoinYearList() {
		return joinYearList;
	}

	/**
	 * @param targetList
	 *            the targetList to set
	 */
	public void setTargetList(List<SysCodeInfo> targetList) {
		this.targetList = targetList;
	}

	/**
	 * @return the targetList
	 */
	public List<SysCodeInfo> getTargetList() {
		return targetList;
	}

	/**
	 * @param errorMessage the errorMessage to set
	 */
	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}

	/**
	 * @return the errorMessage
	 */
	public String getErrorMessage() {
		return errorMessage;
	}

	/**
	 * @param sltCategory1 the sltCategory1 to set
	 */
	public void setSltCategory1(Integer sltCategory1) {
		this.sltCategory1 = sltCategory1;
	}

	/**
	 * @return the sltCategory1
	 */
	public Integer getSltCategory1() {
		return sltCategory1;
	}

	/**
	 * @param sltCategory2 the sltCategory2 to set
	 */
	public void setSltCategory2(Integer sltCategory2) {
		this.sltCategory2 = sltCategory2;
	}

	/**
	 * @return the sltCategory2
	 */
	public Integer getSltCategory2() {
		return sltCategory2;
	}

	/**
	 * @param sltCategory3 the sltCategory3 to set
	 */
	public void setSltCategory3(Integer sltCategory3) {
		this.sltCategory3 = sltCategory3;
	}

	/**
	 * @return the sltCategory3
	 */
	public Integer getSltCategory3() {
		return sltCategory3;
	}

	/**
	 * @param sltCategory1Enable the sltCategory1Enable to set
	 */
	public void setSltCategory1Enable(String sltCategory1Enable) {
		this.sltCategory1Enable = sltCategory1Enable;
	}

	/**
	 * @return the sltCategory1Enable
	 */
	public String getSltCategory1Enable() {
		return sltCategory1Enable;
	}

	/**
	 * @param sltCategory2Enable the sltCategory2Enable to set
	 */
	public void setSltCategory2Enable(String sltCategory2Enable) {
		this.sltCategory2Enable = sltCategory2Enable;
	}

	/**
	 * @return the sltCategory2Enable
	 */
	public String getSltCategory2Enable() {
		return sltCategory2Enable;
	}

	/**
	 * @param sltCategory3Enable the sltCategory3Enable to set
	 */
	public void setSltCategory3Enable(String sltCategory3Enable) {
		this.sltCategory3Enable = sltCategory3Enable;
	}

	/**
	 * @return the sltCategory3Enable
	 */
	public String getSltCategory3Enable() {
		return sltCategory3Enable;
	}

	/**
	 * @param approverInfo the approverInfo to set
	 */
	public void setApproverInfo(AuthorityInfo approverInfo) {
		this.approverInfo = approverInfo;
	}

	/**
	 * @return the approverInfo
	 */
	public AuthorityInfo getApproverInfo() {
		return approverInfo;
	}

	/**
	 * @param necessaryFlag the necessaryFlag to set
	 */
	public void setNecessaryFlag(Boolean necessaryFlag) {
		this.necessaryFlag = necessaryFlag;
	}

	/**
	 * @return the necessaryFlag
	 */
	public Boolean getNecessaryFlag() {
		return necessaryFlag;
	}

	/**
	 * @param objectValue2 the objectValue2 to set
	 */
	public void setObjectValue2(String objectValue2) {
		this.objectValue2 = objectValue2;
	}

	/**
	 * @return the objectValue2
	 */
	public String getObjectValue2() {
		return objectValue2;
	}
	
	/**
	 * @param ttCommonService the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}

	/**
	 * @param mode the mode to set
	 */
	public void setMode(String mode) {
		this.mode = mode;
	}

	/**
	 * @return the mode
	 */
	public String getMode() {
		return mode;
	}

	/**
	 * @param editorList the editorList to set
	 */
	public void setEditorList(List<AuthorityInfo> editorList) {
		this.editorList = editorList;
	}

	/**
	 * @return the editorList
	 */
	public List<AuthorityInfo> getEditorList() {
		return editorList;
	}

	/**
	 * @param strUserIdList the strUserIdList to set
	 */
	public void setStrUserIdList(String strUserIdList) {
		this.strUserIdList = strUserIdList;
	}

	/**
	 * @return the strUserIdList
	 */
	public String getStrUserIdList() {
		return strUserIdList;
	}

	/**
	 * @param strUserNameList the strUserNameList to set
	 */
	public void setStrUserNameList(String strUserNameList) {
		this.strUserNameList = strUserNameList;
	}

	/**
	 * @return the strUserNameList
	 */
	public String getStrUserNameList() {
		return strUserNameList;
	}

	/**
	 * @param trainingCommonService the trainingCommonService to set
	 */
	public void setTrainingCommonService(TrainingCommonService trainingCommonService) {
		this.trainingCommonService = trainingCommonService;
	}

	/**
	 * @return the trainingCommonService
	 */
	public TrainingCommonService getTrainingCommonService() {
		return trainingCommonService;
	}

	/**
	 * @param orgList the orgList to set
	 */
	public void setOrgList(List<EmpOrgInfo> orgList) {
		this.orgList = orgList;
	}

	/**
	 * @return the orgList
	 */
	public List<EmpOrgInfo> getOrgList() {
		return orgList;
	}


}
