/*
 * @(#) J030011Action.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 教育子系统
 */

package com.yds.tt.training.action;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.yds.base.action.AbstractBaseAction;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtCommonUtil;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.manager.service.TtExclusiveException;
import com.yds.tt.training.service.J030011Service;
import com.yds.tt.training.bean.BookInfo;
import com.yds.tt.manager.bean.AuthorityInfo;
import com.yds.tt.manager.bean.TtCheckResult;
import com.yds.util.service.StringUtil;

/**
 * 新建教材及权限分配
 * 
 * @author wanqiuhong
 * @version 1.00 2010/03/15
 */
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@Controller("j030011Action")
public class J030011Action extends AbstractBaseAction {

	private static final long serialVersionUID = 1712752245333164368L;

	// 接口参数
	/** 画面模式 */
	private String mode;
	/** 课程ID */
	private String courseId;
	/** 教材ID */
	private String bookId;
	/** 课程一级分类ID */
	private Integer category1;
	/** 课程二级分类ID */
	private Integer category2;
	/** 课程三级分类ID */
	private Integer category3;

	// 画面端用变量
	/** 课程一级分类IDFlag */
	private Integer category1Flag;
	/** 课程二级分类IDFlag */
	private Integer category2Flag;
	/** 课程三级分类IDFlag */
	private Integer category3Flag;
	/** 可否引用标识 */
	private Boolean quoteFlag;
	/** 编辑者列表 */
	private List<AuthorityInfo> editorList;

	// 业务端用变量
	/** 新建教材及权限分配业务 */
	private J030011Service j030011Service;
	/** 教材信息 */
	private BookInfo bookInfo;
	/** 时间戳 */
	private TtCommonService ttCommonService;
	/** 错误信息 */
	private String errorMessage;
	
	/**
	 * 画面的初期显示 教材一览（J030021）点击【新建教材】模式
	 * 
	 * @return SUCCESS
	 */
	public String initNewBookToBook() throws Exception {
		
		// 画面模式设定
		setMode(TtConstants.Mode.Insert_Book_Mode.value());
		
		// 可否引用标识
		this.quoteFlag = true;

		// 初始画面接口参数校验
		if (checkInitBookManage()) {
			return ERROR;
		}

		bookInfo = new BookInfo();

		// 教材状态
		bookInfo.setBookStatusName("编辑中");

		return SUCCESS;
	}

	/**
	 * 画面的初期显示 课程详细（管理）（J0200311）点击【创建新教材】模式
	 * 
	 * @return SUCCESS
	 */
	public String initNewBookToCourse() throws Exception {
		
		// 画面模式设定
		setMode(TtConstants.Mode.Insert_Course_Mode.value());
		
		// 可否引用标识
		this.quoteFlag = true;

		// 初始画面接口参数校验
		if (checkInitBookManage()) {
			return ERROR;
		}

		// 分类设置
		category1Flag = 0;
		if (0 == category1) {
			category1Flag = 1;
		}

		category2Flag = 0;
		if (0 == category2) {
			category2Flag = 1;
		}

		category3Flag = 0;
		if (0 == category3) {
			category3Flag = 1;
		}

		bookInfo = new BookInfo();

		// 教材状态
		bookInfo.setBookStatusName("编辑中");

		// 课程ID
		bookInfo.setBelongCourseId(courseId);

		return SUCCESS;
	}

	/**
	 * 画面的初期显示 教材一览（J030021）点击【管理】模式
	 * 
	 * @return SUCCESS
	 */
	public String initUpdateBookToBook() throws Exception {
		
		// 画面模式设定
		setMode(TtConstants.Mode.Update_Book_Mode.value());
		
		// 初始画面接口参数校验
		if (checkInitBookManage()) {
			return ERROR;
		}

		// 检索教材信息
		this.bookInfo = j030011Service.getBookInfo(bookId);

		if (null == this.bookInfo) {

			// 教材信息不存在
			errorMessage = propMgr.getMessage("yds.tt.error.JYE12", "教材");
			return ERROR;
		}
		
		// 设置审批者ID
		this.bookInfo.setApproverUserId(StringUtil.leftTrimYd(bookInfo.getApproverUserId()));
		
		// 设置审批者NAME
		this.bookInfo.setApproverUserName(StringUtil.leftTrimYd(bookInfo.getApproverUserName()));
		
		// 设置可否引用标识
		if (bookInfo.getQuoteFlag().equals(
				Integer.valueOf(TtConstants.R09.R09_1.toString()))) {
			this.quoteFlag = true;
		}

		// 保存时间戳检查用的更新时间
		ttCommonService.setTimestamp(TtConstants.PageId.J030011, this.bookInfo
				.getUpdateTime());

		// 检索编辑者信息
		this.editorList = ttCommonService.getAuthorityInfoList(bookId,
				TtConstants.C24.C24_7.toString());

		if (null != this.bookInfo.getBelongCourseId()
				|| !this.bookInfo.getBelongCourseId().isEmpty()) {

			// 检索创建课程所属分类
			if (null != j030011Service.getBelongCategory(this.bookInfo
					.getBelongCourseId())) {

				// 取得创建课程一级分类
				category1 = j030011Service.getBelongCategory(
						this.bookInfo.getBelongCourseId()).getCategory1Id();

				// 取得创建课程二级分类
				category2 = j030011Service.getBelongCategory(
						this.bookInfo.getBelongCourseId()).getCategory2Id();

				// 取得创建课程三级分类
				category3 = j030011Service.getBelongCategory(
						this.bookInfo.getBelongCourseId()).getCategory3Id();				
				
				// 分类设置
				category1Flag = 0;
				if (0 == category1) {
					category1Flag = 1;
				}

				category2Flag = 0;
				if (0 == category2) {
					category2Flag = 1;
				}

				category3Flag = 0;
				if (0 == category3) {
					category3Flag = 1;
				}
			}
			
		}
		
		// 取得教材一级分类
		category1 = bookInfo.getCategory1Id();
		
		// 取得教材二级分类
		category2 = bookInfo.getCategory2Id();
		
		// 取得教材三级分类
		category3 = bookInfo.getCategory3Id();		

		return SUCCESS;
	}

	/**
	 * 画面的初期显示 课程详细（管理）（J0200311）点击【管理】模式
	 * 
	 * @return SUCCESS
	 */
	public String initUpdateBookToCourse() throws Exception {
		
		// 画面模式设定
		setMode(TtConstants.Mode.Update_Course_Mode.value());
		
		// 初始画面接口参数校验
		if (checkInitBookManage()) {
			return ERROR;
		}

		// 检索教材信息
		this.bookInfo = j030011Service.getBookInfo(bookId);
		if (null == this.bookInfo) {

			// 教材信息不存在
			errorMessage = propMgr.getMessage("yds.tt.error.JYE12", "教材");
			return ERROR;
		}
		
		// 设置审批者ID
		this.bookInfo.setApproverUserId(StringUtil.leftTrimYd(bookInfo.getApproverUserId()));
		
		// 设置审批者NAME
		this.bookInfo.setApproverUserName(StringUtil.leftTrimYd(bookInfo.getApproverUserName()));
		
		// 设置可否引用标识
		if (bookInfo.getQuoteFlag().equals(
				Integer.valueOf(TtConstants.R09.R09_1.toString()))) {
			this.quoteFlag = true;
		}

		// 保存时间戳检查用的更新时间
		ttCommonService.setTimestamp(TtConstants.PageId.J030011, this.bookInfo
				.getUpdateTime());

		// 检索编辑者信息
		this.editorList = ttCommonService.getAuthorityInfoList(bookId,
				TtConstants.C24.C24_7.toString());

		// 教材ID
		bookInfo.setBelongCourseId(courseId);

		// 分类设置
		category1Flag = 0;
		if (0 == category1) {
			category1Flag = 1;
		}

		category2Flag = 0;
		if (0 == category2) {
			category2Flag = 1;
		}

		category3Flag = 0;
		if (0 == category3) {
			category3Flag = 1;
		}
		
		// 取得教材一级分类
		category1 = bookInfo.getCategory1Id();
		
		// 取得教材二级分类
		category2 = bookInfo.getCategory2Id();
		
		// 取得教材三级分类
		category3 = bookInfo.getCategory3Id();		
		
		return SUCCESS;
	}

	/**
	 * 新建教材信息到教材一览
	 * 
	 * @return SUCCESS
	 */
	public String newBookToBook() {
		
		// 编辑教材校验
		if (checkBookManage()) {
			return ERROR;
		}

		// 可否引用标记
		if (false == quoteFlag) {

			bookInfo.setQuoteFlag(Integer.valueOf(TtConstants.R09.R09_2
					.toString()));
		} else {

			bookInfo.setQuoteFlag(Integer.valueOf(TtConstants.R09.R09_1
					.toString()));
		}

		// 添加教材信息
		j030011Service.insertBook(bookInfo, editorList, "");
		
		// 显示操作成功消息
		putOpTip(propMgr.getMessage("yds.tt.info.GTT02"));
		
		return SUCCESS;
	}

	/**
	 * 新建教材信息到课程一览
	 * 
	 * @return SUCCESS
	 */
	public String newBookToCourse() {
		
		// 编辑教材校验
		if (checkBookManage()) {
			return ERROR;
		}

		// 可否引用标记
		if (false == quoteFlag) {

			bookInfo.setQuoteFlag(Integer.valueOf(TtConstants.R09.R09_2
					.toString()));
		} else {

			bookInfo.setQuoteFlag(Integer.valueOf(TtConstants.R09.R09_1
					.toString()));
		}

		// 添加教材信息
		j030011Service.insertBook(bookInfo, editorList, "1");
		
		// 显示操作成功消息
		putOpTip(propMgr.getMessage("yds.tt.info.GTT02"));
		
		return SUCCESS;
	}

	/**
	 * 编辑教材信息到教材一览
	 * 
	 * @return SUCCESS
	 */
	public String updateBookToBook() throws Exception {
		
		// 编辑教材校验
		if (checkBookManage()) {
			return ERROR;
		}

		// 可否引用标记
		if (false == quoteFlag) {

			bookInfo.setQuoteFlag(Integer.valueOf(TtConstants.R09.R09_2
					.toString()));
		} else {

			bookInfo.setQuoteFlag(Integer.valueOf(TtConstants.R09.R09_1
					.toString()));
		}

		try {

			// 修改教材信息
			j030011Service.updateBook(bookInfo, editorList);

		} catch (TtExclusiveException e) {

			errorMessage = propMgr.getMessage("yds.tt.error.KSE56");
			return ERROR;
		}
		
		// 显示操作成功消息
		putOpTip(propMgr.getMessage("yds.tt.info.GTT02"));
		
		return SUCCESS;
	}

	/**
	 * 编辑教材信息到课程一览
	 * 
	 * @return SUCCESS
	 */
	public String updateBookToCourse() throws Exception {
		
		// 编辑教材校验
		if (checkBookManage()) {
			return ERROR;
		}

		// 可否引用标记
		if (false == quoteFlag) {

			bookInfo.setQuoteFlag(Integer.valueOf(TtConstants.R09.R09_2
					.toString()));
		} else {

			bookInfo.setQuoteFlag(Integer.valueOf(TtConstants.R09.R09_1
					.toString()));
		}

		try {

			// 修改教材信息
			j030011Service.updateBook(bookInfo, editorList);

		} catch (TtExclusiveException e) {

			errorMessage = propMgr.getMessage("yds.tt.error.KSE56");
			return ERROR;
		}
		
		// 显示操作成功消息
		putOpTip(propMgr.getMessage("yds.tt.info.GTT02"));
		
		return SUCCESS;
	}

	/**
	 * 初始画面检查
	 */
	private boolean checkInitBookManage() {

		if (mode.equals(TtConstants.Mode.Insert_Book_Mode.value())) {

			// 权限检查
			TtCheckResult checkResult = ttCommonService.checkStartupAuthority(
					TtConstants.PageId.J030011.value(), "J030011_1", 0, 0, 0,
					null, null);

			if (checkResult.getRetFlag() == false) {
				
				errorMessage = checkResult.getRetMessage();
				this.addActionError(ERROR);
				super.validate();
				return true;
			}
			
		}

		if (mode.equals(TtConstants.Mode.Insert_Course_Mode.value())) {

			// 课程ID未传递
			if (null == courseId || courseId.isEmpty()) {

				errorMessage = propMgr.getMessage("yds.com.warning.0001", "课程ID");
				return true;
			}

			// 课程一级分类ID未传递
			if (null == category1) {

				errorMessage = propMgr.getMessage("yds.com.warning.0001",
						"课程一级分类ID");
				return true;
			}

			// 课程二级分类ID未传递
			if (null == category2) {

				errorMessage = propMgr.getMessage("yds.com.warning.0001",
						"课程二级分类ID");
				return true;
			}

			// 课程三级分类ID未传递
			if (null == category3) {

				errorMessage = propMgr.getMessage("yds.com.warning.0001",
						"课程三级分类ID");
				return true;
			}

			List<String> objectId = new ArrayList<String>();
			objectId.add(courseId);
			
			// 权限检查
			TtCheckResult checkResult = ttCommonService.checkStartupAuthority(
					TtConstants.PageId.J030011.value(), "J030011_2", 0, 0, 0, 
					TtConstants.C43.C43_1.value(), objectId);

			if (checkResult.getRetFlag() == false) {
				
				errorMessage = checkResult.getRetMessage();
				this.addActionError(ERROR);
				super.validate();
				return true;
			}

		}
		
		if (mode.equals(TtConstants.Mode.Update_Book_Mode.value())) {

			// 教材ID未传递
			if (null == bookId || bookId.isEmpty()) {

				errorMessage = propMgr.getMessage("yds.com.warning.0001", "教材ID");
				return true;
			}

			List<String> objectId = new ArrayList<String>();
			objectId.add(bookId);

			// 权限检查
			TtCheckResult checkResult = ttCommonService.checkStartupAuthority(
					TtConstants.PageId.J030011.value(), "J030011_2", 0, 0, 0,
					TtConstants.C43.C43_2.value(), objectId);
			
			if (checkResult.getRetFlag() == false) {
				
				errorMessage = checkResult.getRetMessage();
				this.addActionError(ERROR);
				super.validate();
				return true;
			}
			
		}
		
		if (mode.equals(TtConstants.Mode.Update_Course_Mode.value())) {

			// 教材ID未传递
			if (null == bookId || bookId.isEmpty()) {

				errorMessage = propMgr.getMessage("yds.com.warning.0001", "教材ID");
				return true;
			}

			// 课程ID未传递
			if (null == courseId || courseId.isEmpty()) {

				errorMessage = propMgr.getMessage("yds.com.warning.0001", "课程ID");
				return true;
			}

			// 课程一级分类ID未传递
			if (null == category1) {

				errorMessage = propMgr.getMessage("yds.com.warning.0001",
						"课程一级分类ID");
				return true;
			}

			// 课程二级分类ID未传递
			if (null == category2) {

				errorMessage = propMgr.getMessage("yds.com.warning.0001",
						"课程二级分类ID");
				return true;
			}

			// 课程三级分类ID未传递
			if (null == category3) {

				errorMessage = propMgr.getMessage("yds.com.warning.0001",
						"课程三级分类ID");
				return true;
			}
			
			List<String> objectId = new ArrayList<String>();
			objectId.add(bookId);

			// 权限检查
			TtCheckResult checkResult = ttCommonService.checkStartupAuthority(
					TtConstants.PageId.J030011.value(), "J030011_2",0, 0, 0,
					TtConstants.C43.C43_2.value(), objectId);

			if (checkResult.getRetFlag() == false) {
				
				errorMessage = checkResult.getRetMessage();
				this.addActionError(ERROR);
				super.validate();
				return true;
			}
			
		}
		
		return false;
	}

	/**
	 * 编辑教材权限校验
	 */
	private boolean checkBookManage() {

		if (mode.equals(TtConstants.Mode.Insert_Book_Mode.value())) {

			// 权限检查
			TtCheckResult checkResult = ttCommonService.checkStartupAuthority(
					TtConstants.PageId.J030011.value(), "J030011_1", 0, 0, 0,
					null, null);

			if (checkResult.getRetFlag() == false) {
				
				errorMessage = checkResult.getRetMessage();
				this.addActionError(ERROR);
				super.validate();
				return true;
			}
			
		} else if (mode.equals(TtConstants.Mode.Insert_Course_Mode.value())) {

			// 权限检查
			List<String> objectId = new ArrayList<String>();
			objectId.add(bookInfo.getBelongCourseId());
			
			// 权限检查
			TtCheckResult checkResult = ttCommonService.checkStartupAuthority(
					TtConstants.PageId.J030011.value(), "J030011_2",0, 0, 0,
					TtConstants.C43.C43_1.value(), objectId);

			if (checkResult.getRetFlag() == false) {
				
				errorMessage = checkResult.getRetMessage();
				this.addActionError(ERROR);
				super.validate();
				return true;
			}

		} else if (mode.equals(TtConstants.Mode.Update_Book_Mode.value()) || 
				mode.equals(TtConstants.Mode.Update_Course_Mode.value())) {

			List<String> objectId = new ArrayList<String>();
			objectId.add(bookInfo.getBookId());

			// 权限检查
			TtCheckResult checkResult = ttCommonService.checkStartupAuthority(
					TtConstants.PageId.J030011.value(), "J030011_2",0, 0, 0,
					TtConstants.C43.C43_2.value(), objectId);

			if (checkResult.getRetFlag() == false) {
				
				errorMessage = checkResult.getRetMessage();
				this.addActionError(ERROR);
				super.validate();
				return true;
			}
			
		}

		return false;
	}
	
	/**
	 * 新建教材到教材一览校验
	 */
	public void validateNewBookToBook() {
		
		// 登录共通校验
		commenCheck();
	}
	
	/**
	 * 新建教材到课程详细（管理）校验
	 */
	public void validateNewBookToCourse() {
		
		// 登录共通校验
		commenCheck();
	}	
	
	/**
	 * 更新教材到教材一览校验
	 */
	public void validateUpdateBookToBook() {
		
		// 登录共通校验
		commenCheck();
	}	
	
	/**
	 * 更新教材到课程详细（管理）校验
	 */
	public void validateUpdateBookToCourse() {

		// 登录共通校验
		commenCheck();
	}
	
	/**
	 * 登录共通校验
	 */
	private void commenCheck() {
		
		// 分类整合性检查
		if (TtCommonUtil.isEquals(bookInfo.getCategory1Id(), 0) == false &&
			ttCommonService.checkCategoryStatus(bookInfo.getCategory1Id(), 0, 0) == false) {
			
			this.addFieldError("category1Id", propMgr.getMessage("yds.tt.error.JYE04", "教材"));			
		}

		if (TtCommonUtil.isEquals(bookInfo.getCategory2Id(), 0) == false && 
			ttCommonService.checkCategoryStatus(bookInfo.getCategory1Id(), 
					bookInfo.getCategory2Id(), 0) == false) {
			
			this.addFieldError("category2Id", propMgr.getMessage("yds.tt.error.JYE04", "教材"));			
		}
		
		if (TtCommonUtil.isEquals(bookInfo.getCategory3Id(), 0) == false && 
			ttCommonService.checkCategoryStatus(bookInfo.getCategory1Id(), 
					bookInfo.getCategory2Id(), 
					bookInfo.getCategory3Id()) == false) {
			this.addFieldError("category3Id", propMgr.getMessage("yds.tt.error.JYE04", "教材"));			
		}
		
		// 检查审批者是否存在
		if (ttCommonService.isExistUserId(StringUtil.leftPadYd(bookInfo.getApproverUserId()) ) == false) {
			this.addFieldError("bookInfo.getApproverUserId()", propMgr.getMessage("yds.tt.error.JYE12", "审批者"));
		}		
		
		// 开始时间与结束时间入力判断
		if (null != this.editorList) {
			for (int i = 0; i < this.editorList.size(); i++) {
				
				if (null != this.editorList.get(i).getStartTime()
						&& null != this.editorList.get(i).getEndTime()) {
					
					if (0 < this.editorList.get(i).getStartTime().compareTo(
							this.editorList.get(i).getEndTime())) {
						this.addFieldError("editorList[" + i +"].startTime",
								propMgr.getMessage("yds.tt.error.JYE05", this.editorList.get(i).getUserName()));
						this.addFieldError("editorList[" + i +"].endTime",
								propMgr.getMessage("yds.tt.error.JYE05", this.editorList.get(i).getUserName()));
					}
				}
			}
		}
		
	}
	
	/**
	 * @return the mode
	 */
	public String getMode() {
		return mode;
	}

	/**
	 * @param mode the mode to set
	 */
	public void setMode(String mode) {
		this.mode = mode;
	}

	/**
	 * @return the quoteFlag
	 */
	public Boolean getQuoteFlag() {
		return quoteFlag;
	}

	/**
	 * @param quoteFlag the quoteFlag to set
	 */
	public void setQuoteFlag(Boolean quoteFlag) {
		this.quoteFlag = quoteFlag;
	}

	/**
	 * @return the courseId
	 */
	public String getCourseId() {
		return courseId;
	}

	/**
	 * @param courseId
	 *            the courseId to set
	 */
	public void setCourseId(String courseId) {
		this.courseId = courseId;
	}

	/**
	 * @return the bookId
	 */
	public String getBookId() {
		return bookId;
	}

	/**
	 * @param bookId
	 *            the bookId to set
	 */
	public void setBookId(String bookId) {
		this.bookId = bookId;
	}

	/**
	 * @return the category1
	 */
	public Integer getCategory1() {
		return category1;
	}

	/**
	 * @param category1
	 *            the category1 to set
	 */
	public void setCategory1(Integer category1) {
		this.category1 = category1;
	}

	/**
	 * @return the category2
	 */
	public Integer getCategory2() {
		return category2;
	}

	/**
	 * @param category2
	 *            the category2 to set
	 */
	public void setCategory2(Integer category2) {
		this.category2 = category2;
	}

	/**
	 * @return the category3
	 */
	public Integer getCategory3() {
		return category3;
	}

	/**
	 * @param category3
	 *            the category3 to set
	 */
	public void setCategory3(Integer category3) {
		this.category3 = category3;
	}

	/**
	 * @return the category1Flag
	 */
	public Integer getCategory1Flag() {
		return category1Flag;
	}

	/**
	 * @param category1Flag
	 *            the category1Flag to set
	 */
	public void setCategory1Flag(Integer category1Flag) {
		this.category1Flag = category1Flag;
	}

	/**
	 * @return the category2Flag
	 */
	public Integer getCategory2Flag() {
		return category2Flag;
	}

	/**
	 * @param category2Flag
	 *            the category2Flag to set
	 */
	public void setCategory2Flag(Integer category2Flag) {
		this.category2Flag = category2Flag;
	}

	/**
	 * @return the category3Flag
	 */
	public Integer getCategory3Flag() {
		return category3Flag;
	}

	/**
	 * @param category3Flag
	 *            the category3Flag to set
	 */
	public void setCategory3Flag(Integer category3Flag) {
		this.category3Flag = category3Flag;
	}

	/**
	 * @return the quoteFlag
	 */
	public boolean isQuoteFlag() {
		return quoteFlag;
	}

	/**
	 * @param quoteFlag
	 *            the quoteFlag to set
	 */
	public void setQuoteFlag(boolean quoteFlag) {
		this.quoteFlag = quoteFlag;
	}

	/**
	 * @return the j030011Service
	 */
	public J030011Service getJ030011Service() {
		return j030011Service;
	}

	/**
	 * @param service
	 *            the j030011Service to set
	 */
	public void setJ030011Service(J030011Service service) {
		j030011Service = service;
	}

	/**
	 * @return the bookInfo
	 */
	public BookInfo getBookInfo() {
		return bookInfo;
	}

	/**
	 * @param bookInfo
	 *            the bookInfo to set
	 */
	public void setBookInfo(BookInfo bookInfo) {
		this.bookInfo = bookInfo;
	}

	/**
	 * @return the editorList
	 */
	public List<AuthorityInfo> getEditorList() {
		return editorList;
	}

	/**
	 * @param editorList
	 *            the editorList to set
	 */
	public void setEditorList(List<AuthorityInfo> editorList) {
		this.editorList = editorList;
	}

	/**
	 * @return the errorMessage
	 */
	public String getErrorMessage() {
		return errorMessage;
	}

	/**
	 * @param errorMessage
	 *            the errorMessage to set
	 */
	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}

	/**
	 * @return the ttCommonService
	 */
	public TtCommonService getTtCommonService() {
		return ttCommonService;
	}

	/**
	 * @param ttCommonService
	 *            the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}



}
