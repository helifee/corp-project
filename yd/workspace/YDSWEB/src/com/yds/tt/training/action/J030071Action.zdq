/*
 * @(#)J030071Action.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 教育子系统
 */

package com.yds.tt.training.action;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.yds.base.action.AbstractBaseAction;
import com.yds.common.service.SessionConstants;
import com.yds.tt.manager.bean.TtCheckResult;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtCommonUtil;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.training.bean.BookContent;
import com.yds.tt.training.bean.Bookmark;
import com.yds.tt.training.service.J030071Service;
import com.yds.tt.training.service.TrainingCommonService;
import com.yds.util.service.Session;
/**
 * 教材内容浏览
 * 
 * @author yukunpeng
 * @version 1.00 2010/03/15
 */
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@Controller("j030071Action")
public class J030071Action extends AbstractBaseAction {
	private static final long serialVersionUID = -1676783598800123836L;

	private J030071Service j030071Service;
	private TrainingCommonService trainingCommonService;
	private TtCommonService ttCommonService; 
 	private Integer editNo;						//接口参数编辑号
 	private Integer chapterNo;					//接口参数章节编号
	private String bookId;						//接口参数教材ID
	private List<BookContent> bookMenuList; 	//画面章节目录
	private BookContent chapterInfo;			//画面教材内容信息
	private int totalPages;						//教材总页数
 	private String bookName;					//教材名称
	private int mode;							//启动模式
	private String errorMessage;				//错误信息
	private String openMode;					//画面打开方式， 普通用户浏览/管理用户编辑
	private boolean showBookMark;				//是否显示保存进度按钮



	/**
	 * 画面的初期显示(模式1） 
	 * 取得章节目录，章节内容
	 * 
	 * @return SUCCESS
	 */	
	public String pageLoadMode1(){
		//接口参数检查
		mode=1;
		if(checkInit()){
			return ERROR;
		}
		//默认情况下为普通用户浏览
		if(null == openMode || TtConstants.OPEN_MODE.VIEW.value().equals(openMode)){
			showBookMark = true;
		}else{
			showBookMark = false;
		}
		
		// 画面启动检查
		List<String> objectId = new ArrayList<String>();
		objectId.add(bookId);
		TtCheckResult result= ttCommonService.checkStartupAuthority(
				TtConstants.PageId.J030071.toString(),
				"J030071",
				TtConstants.C43.C43_2.value(), objectId);
		if (!result.getRetFlag()) {
			// 没有查看权限时:非课程针对对象
			if (0 == trainingCommonService.getBookViewPermission(bookId)) {
				errorMessage = propMgr.getMessage("yds.tt.error.JYE02");
				return ERROR;
			} 
		}
				
		//检索条件编辑
		chapterInfo = new BookContent();
		chapterInfo.setBookId(bookId);		//教材ID
		chapterInfo.setChapterNo(chapterNo);//章节编号
		chapterInfo.setEditNo(editNo);		//编辑号

		//------画面教材内容及信息------
		bookMenuList = j030071Service.getMenuList(chapterInfo); //章节目录取得
		if (null == bookMenuList || 0 ==bookMenuList.size()) {
			errorMessage = propMgr.getMessage("yds.tt.info.KST12");
			return ERROR;
		}
		bookName = j030071Service.getBookName(chapterInfo);	//教材名称
		if (null == bookName || bookName.isEmpty()) {
			errorMessage = propMgr.getMessage("yds.tt.info.KST12");
			return ERROR;
		}
		chapterInfo= j030071Service.getContentByChapter(chapterInfo); //当前章节内容取得（通过章节编号）
		if (null == chapterInfo) {
			errorMessage = propMgr.getMessage("yds.tt.info.KST12");
			return ERROR;
		}
		chapterInfo.setBookId(bookId);		//教材ID
		chapterInfo.setEditNo(editNo);		//编辑号
		totalPages = bookMenuList.size();   //总页数
		
	    return SUCCESS;
	}

	/**
	 * 画面的初期显示(模式2） 
	 * 取得章节目录，章节内容
	 * 
	 * @return SUCCESS
	 * @throws IOException 
	 */
	public String pageLoadMode2(){
		// 接口参数检查
		mode = 2;
		if(checkInit()){
			return ERROR;
		}
		
		// 默认情况下为普通用户浏览
		if(null == openMode || TtConstants.OPEN_MODE.VIEW.value().equals(openMode)){
			showBookMark = true;
		}else{
			showBookMark = false;
		}
		
		// 没有查看权限时:非课程针对对象
		if (0 == trainingCommonService.getBookViewPermission(bookId)) {
			errorMessage = propMgr.getMessage("yds.tt.error.JYE02");
			return ERROR;
		} 
		
		// 编辑号取得
		editNo=j030071Service.getEditNo(bookId); 
		if (null == editNo) {
			errorMessage = propMgr.getMessage("yds.tt.info.KST12");
			return ERROR;
		}
		
		//检索条件编辑
		chapterInfo = new BookContent();
		chapterInfo.setBookId(bookId);		 //教材ID
		chapterInfo.setChapterNo(j030071Service.getChapterNo(bookId, editNo));//章节编号
		chapterInfo.setEditNo(editNo);
		
		//------画面教材内容及信息------
		bookMenuList = j030071Service.getMenuList(chapterInfo); //章节目录取得
		if (null == bookMenuList || 0 == bookMenuList.size()) {
			errorMessage = propMgr.getMessage("yds.tt.info.KST12");
			return ERROR;
		}
		bookName = j030071Service.getBookName(chapterInfo); //教材名称
		if (null == bookName || bookName.isEmpty()) {
			errorMessage = propMgr.getMessage("yds.tt.info.KST12");
			return ERROR;
		}
		chapterInfo= j030071Service.getContentByChapter(chapterInfo); //当前章节内容取得（通过章节编号）
		if (null == chapterInfo) {
			errorMessage = propMgr.getMessage("yds.tt.info.KST12");
			return ERROR;
		}
		chapterInfo.setBookId(bookId);		//教材ID
		chapterInfo.setEditNo(editNo);		//编辑号
		totalPages = bookMenuList.size();	//总页数
		
	    return SUCCESS;
	}	

	/**
	 * 取得章节内容 通过章节号
	 * 
	 * @return SUCCESS
	 */
	public String searchCurrentContent(){
		//画面项目退避
		String bookId = chapterInfo.getBookId();
		int chapterNo = chapterInfo.getChapterNo();
		int editNo = chapterInfo.getEditNo();
	
		//章节内容取得
		chapterInfo = j030071Service.getContentByChapter(chapterInfo);
		if (null == chapterInfo) {
			errorMessage = propMgr.getMessage("yds.tt.info.KST12");
			return ERROR;
		}
		
		//画面项目设值		
		chapterInfo.setBookId(bookId);		//教材ID
		chapterInfo.setChapterNo(chapterNo);//章节编号
		chapterInfo.setEditNo(editNo);		//编辑号

		return SUCCESS;		
	}

	/**
	 * 取得内部链接 通过章节号
	 * 
	 * @return SUCCESS
	 */
	public String searchInnerIndex(){
		//画面项目退避
		String bookId = chapterInfo.getBookId();
		int chapterNo = chapterInfo.getChapterNo();
		int editNo = chapterInfo.getEditNo();
	
		//章节内容取得
		chapterInfo = j030071Service.getContentByChapter(chapterInfo);
		if (null == chapterInfo) {
			errorMessage = propMgr.getMessage("yds.tt.info.KST12");
			return ERROR;
		}

		//画面项目设值		
		chapterInfo.setBookId(bookId);		//教材ID
		chapterInfo.setChapterNo(chapterNo);//章节编号
		chapterInfo.setEditNo(editNo);		//编辑号

	
		return SUCCESS;		
	}
	
	/**
	 * 取得章节内容 显示顺序
	 * 
	 * @return SUCCESS
	 */
	public String searchContentByOrder(){
		//画面项目退避
		String bookId = chapterInfo.getBookId();
		int showOrder = chapterInfo.getShowOrder();
		int editNo = chapterInfo.getEditNo();

		//章节内容取得
		chapterInfo= j030071Service.getContentByOrder(chapterInfo);
		if (null == chapterInfo) {
			errorMessage = propMgr.getMessage("yds.tt.info.KST12");
			return ERROR;
		}

		//画面项目设值		
		chapterInfo.setBookId(bookId);		//教材ID
		chapterInfo.setShowOrder(showOrder);//章节编号
		chapterInfo.setEditNo(editNo);		//编辑号

		return SUCCESS;	
	}

	/**
	 * 编辑书签
	 * 
	 * @return SUCCESS
	 */
	public String editBookMark(){
		// 从session中得到登录者ID
		String userId = TtCommonUtil.getLoginUserId();		
		
		//书签内容编辑
		Bookmark bookmark = new Bookmark();
		bookmark.setBookId(chapterInfo.getBookId());
		bookmark.setEmployeesId(userId);
		bookmark.setChapterNo(chapterInfo.getChapterNo());
		bookmark.setBookmarkContent(bookName + "-" +chapterInfo.getChapterTitle());
		bookmark.setCreateUserId(userId);
		bookmark.setUpdateUserId(userId);

		//更新或创建书签
		if(!j030071Service.updateEditBookmark(bookmark)){
			return ERROR;
		}
		return SUCCESS;
	}
	/* 接口参数检查 */
	private boolean checkInit(){
		// 教材D参数的读取:未传递的话，从Session取得
		if (null == bookId || bookId.isEmpty()) {
			bookId =(String)Session.get(SessionConstants.TT_CURRENT_BOOKID);
		}
		
		// 参数检查
		if (null == bookId || bookId.isEmpty()) {
			errorMessage = propMgr.getMessage("yds.com.warning.0001","教材ID");
			return true;
		}
		if(mode==1){
			if (null == chapterNo) {
				errorMessage = propMgr.getMessage("yds.com.warning.0001","章节编号");
				return true;
			}
			if (null == editNo) {
				errorMessage = propMgr.getMessage("yds.com.warning.0001","编辑号");
				return true;
			}
		}
		
		// 当前课程ID保存
		Session.set(SessionConstants.TT_CURRENT_BOOKID, bookId);
		
		return false;
	}
	public J030071Service getJ030071Service() {
		return j030071Service;
	}

	public void setJ030071Service(J030071Service service) {
		j030071Service = service;
	}

	public void setBookId(String bookId) {
		this.bookId = bookId;
	}
	
	public void setChapterNo(Integer chapterNo) {
		this.chapterNo = chapterNo;
	}
	
	public void setEditNo(Integer editNo) {
		this.editNo = editNo;
	}
	
	public void setChapterInfo(BookContent chapterInfo) {
		this.chapterInfo = chapterInfo;
	}
	
	public BookContent getChapterInfo() {
		return chapterInfo;
	}
	
	public List<BookContent> getBookMenuList() {
		return bookMenuList;
	}
	
	public void setBookName(String bookName) {
		this.bookName = bookName;
	}
	
	public String getBookName() {
		return bookName;
	}
	
	public int getTotalPages() {
		return totalPages;
	}
	/**
	 * @return the errorMessage
	 */
	public String getErrorMessage() {
		return errorMessage;
	}

	/**
	 * @return the openMode
	 */
	public String getOpenMode() {
		return openMode;
	}

	/**
	 * @param openMode the openMode to set
	 */
	public void setOpenMode(String openMode) {
		this.openMode = openMode;
	}

	/**
	 * @return the showBookMark
	 */
	public boolean isShowBookMark() {
		return showBookMark;
	}

	/**
	 * @param showBookMark the showBookMark to set
	 */
	public void setShowBookMark(boolean showBookMark) {
		this.showBookMark = showBookMark;
	}

	/**
	 * @param trainingCommonService the trainingCommonService to set
	 */
	public void setTrainingCommonService(TrainingCommonService trainingCommonService) {
		this.trainingCommonService = trainingCommonService;
	}

	/**
	 * @return the trainingCommonService
	 */
	public TrainingCommonService getTrainingCommonService() {
		return trainingCommonService;
	}
	
	/**
	 * @param ttCommonService the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}
}

