/*
 * @(#)J020031ServiceImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 教育考试培训系统
 *    SubSystem: 教育子系统
 */

package com.yds.tt.training.service.impl;

import java.util.Date;
import java.util.List;

import org.springframework.stereotype.Service;

import com.yds.base.service.AbstractBaseService;
import com.yds.tt.manager.bean.AuthorityInfo;
import com.yds.tt.manager.bean.MessageReminding;
import com.yds.tt.manager.dao.TtCommonDao;
import com.yds.tt.manager.service.TtCommonService;
import com.yds.tt.manager.service.TtCommonUtil;
import com.yds.tt.manager.service.TtConstants;
import com.yds.tt.manager.service.TtExclusiveException;
import com.yds.tt.training.dao.J020031Dao;
import com.yds.tt.training.service.J020031Service;
import com.yds.tt.training.bean.BookInfo;
import com.yds.tt.training.bean.CourseBookRelation;
import com.yds.tt.training.bean.CourseInfo;

/**
 * @see J020031Service
 */
@Service("j020031Service")
public class J020031ServiceImpl extends AbstractBaseService implements J020031Service {

	private J020031Dao j020031Dao;
	private TtCommonDao ttCommonDao;
	private TtCommonService ttCommonService;

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CourseInfo getCourseInfo(String courseId){

		return j020031Dao.getCourseInfo(courseId);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<BookInfo> getBookInfoList(String courseId,String operateMode) {
		
		List<BookInfo> bookInfoList = j020031Dao.getBookInfoList(courseId);
		
		Boolean editAuthrity = false;
		
		// 如果是参与模式
		if(String.valueOf(TtConstants.C20.C20_7).equals(operateMode)){
			// 相关处理
			if(bookInfoList.size()>0){
				AuthorityInfo ttAuthorityInfo  = new AuthorityInfo();
				ttAuthorityInfo.setAuthorityId(TtConstants.C24.C24_7.value()); // 教材编辑
				ttAuthorityInfo.setUserId(TtCommonUtil.getLoginUserId()); // 用户
				for(int i=0;i<bookInfoList.size();i++){
					// 如果是此课程内创建的教材,不可以移除
					if(bookInfoList.get(i).getDeleteFlg()==0){
						// 如果该用户是此课程内创建的教材的编辑者
						ttAuthorityInfo.setRelatedobjectId(bookInfoList.get(i).getBookId());// 教材ID
						if(j020031Dao.getAuthority(ttAuthorityInfo) > 0){
							// 编辑按钮可用标识
							bookInfoList.get(i).setEditFlg(1);
							editAuthrity = true;
						}
					}
				}
			}else{
				// 没有教材,则不可能是参与者
				throw new TtExclusiveException(propMgr
						.getMessage("yds.tt.error.GTE02"));
			}
			
			// 如果所有教材都没有编辑权限
			if(editAuthrity == false){
				throw new TtExclusiveException(propMgr
						.getMessage("yds.tt.error.GTE02"));
			}
		}
		return bookInfoList;	
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public int updateCourseInfo(CourseInfo manaCourseInfo){
	
		// 给更新者赋值session用户ID
		manaCourseInfo.setUpdateUserId(TtCommonUtil.getLoginUserId());
		
		// 最新数据库更新时间取得
		Date compareTimeStamp =j020031Dao.getTimeStamp(manaCourseInfo.getCourseId());
		
		// 时间戳判断
		if(!ttCommonService.checkTimeStamp(TtConstants.PageId.J020031, compareTimeStamp)){
			throw new TtExclusiveException();
		}
		
		return j020031Dao.updateCourseInfo(manaCourseInfo);
			
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int updateApplyCourseInfo(CourseInfo manaCourseInfo){
						
		// 给更新者赋值session用户ID
		manaCourseInfo.setUpdateUserId(TtCommonUtil.getLoginUserId());
		
		//申请者ID
		manaCourseInfo.setApplyUserId(TtCommonUtil.getLoginUserId());
		
		//设成<待审批>
		manaCourseInfo.setCourseConfirmStatus(Integer.valueOf(String.valueOf(TtConstants.R06.R06_2)));

		// 最新数据库更新时间取得
		Date compareTimeStamp =j020031Dao.getTimeStamp(manaCourseInfo.getCourseId());
		
		// 时间戳判断
		if(!ttCommonService.checkTimeStamp(TtConstants.PageId.J020031, compareTimeStamp)){
			throw new TtExclusiveException();
		}
				
		// 插入提醒消息
		this.insertMessageReminding(manaCourseInfo, "yds.tt.remind.JYY02");
		
		return j020031Dao.updateApplyCourseInfo(manaCourseInfo);
	}	
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public int updateConfirmCourse(CourseInfo manaCourseInfo) {
		
		// 给更新者赋值session用户ID
		manaCourseInfo.setUpdateUserId(TtCommonUtil.getLoginUserId());
		
		//审批者ID
		manaCourseInfo.setApproverUserId(TtCommonUtil.getLoginUserId());
		
		// 最新数据库更新时间取得
		Date compareTimeStamp =j020031Dao.getTimeStamp(manaCourseInfo.getCourseId());
		
		// 时间戳判断
		if(!ttCommonService.checkTimeStamp(TtConstants.PageId.J020031, compareTimeStamp)){
			throw new TtExclusiveException();
		}
		
		return j020031Dao.updateConfirmCourse(manaCourseInfo);
		
	}

	/**
	 * {@inheritDoc}
	 */	
	@Override
	public int updateReEditCourse(CourseInfo manaCourseInfo) {
		
		// 给更新者赋值session用户ID
		manaCourseInfo.setUpdateUserId(TtCommonUtil.getLoginUserId());
		// 课程审批状态赋值为<1.编辑中>
		manaCourseInfo.setCourseConfirmStatus(1);

		// 最新数据库更新时间取得
		Date compareTimeStamp =j020031Dao.getTimeStamp(manaCourseInfo.getCourseId());
		
		// 时间戳判断
		if(!ttCommonService.checkTimeStamp(TtConstants.PageId.J020031, compareTimeStamp)){
			throw new TtExclusiveException();
		}
		
		// 提醒消息失效
		this.updateMessageReminding(manaCourseInfo.getCourseId());
		
		return j020031Dao.updateReEditCourse(manaCourseInfo);
		
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public int deleteBookLink(String bookId,String courseId) {

		CourseBookRelation courseBookRelation = new CourseBookRelation();
		
		courseBookRelation.setBookId(bookId);
		courseBookRelation.setCourseId(courseId);
		
		return j020031Dao.deleteBookLink(courseBookRelation);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Date getTimeStamp(String courseId){
		return j020031Dao.getTimeStamp(courseId);
	};
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer getPublishedBookCnt(String bookId) {
		return j020031Dao.getPublishedBookCnt(bookId);
	};
	
	/**
	 * 插入提醒消息
	 * 
	 * @param CourseInfo 课程信息
	 * @param messageCode 提醒消息的ID
	 */
	private void insertMessageReminding(CourseInfo manaCourseInfo, String messageCode) {

		MessageReminding message = new MessageReminding();

		// 提醒内容
		message.setContent(propMgr.getMessage(messageCode, manaCourseInfo.getCourseName()));

		// 消息模式
		message.setMode(TtConstants.REMIND_MODE.JYY02.value());
		
		// 消息参数
		StringBuffer param = new StringBuffer();
		param.append(manaCourseInfo.getCourseId());
		message.setParameter(param.toString());
		
		// 消息ID
		message.setInformationId(ttCommonService
				.getSequence(TtConstants.SEQID.Information));
		
		// 审批者
		message.setUserId(j020031Dao.getCourseApprover(manaCourseInfo.getCourseId()));
		
		// 消息flg
		message.setInformationFlg(TtConstants.REMIND_FLG.LEFT.value());
		
		// 失效时间
		message.setLosetime(TtCommonUtil.getMaxDate());
		
		

		ttCommonDao.insertMessageReminding(message);
	}

	/**
	 * 提醒消息失效
	 * 
	 * @param courseId 课程ID
	 */
	private void updateMessageReminding(String courseId) {

		MessageReminding message = new MessageReminding();

		// 消息模式
		message.setMode(TtConstants.REMIND_MODE.JYY02.value());
		
		// 消息参数
		StringBuffer param = new StringBuffer();
		param.append(courseId);
		message.setParameter(param.toString());

		// 审批者
		message.setUserId(j020031Dao.getCourseApprover(courseId));

		ttCommonDao.updateMessageReminding(message);
	}	
	
	/**
	 * @param ttCommonDao the ttCommonDao to set
	 */
	public void setTtCommonDao(TtCommonDao ttCommonDao) {
		this.ttCommonDao = ttCommonDao;
	}

	/**
	 * @param dao the j020031Dao to set
	 */
	public void setJ020031Dao(J020031Dao dao) {
		j020031Dao = dao;
	}

	/**
	 * @param ttCommonService the ttCommonService to set
	 */
	public void setTtCommonService(TtCommonService ttCommonService) {
		this.ttCommonService = ttCommonService;
	}
}
