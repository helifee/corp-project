/*
 * @(#)Ye0030ServiceImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 共通系统
 */
package com.yds.att.service.impl;

import java.util.*;

import org.springframework.stereotype.Service;

import com.yds.base.service.AbstractBaseService;
import com.yds.common.service.UserService;
import com.yds.util.service.DateUtil;
import com.yds.att.service.Ye0030Service;
import com.yds.att.service.AttConstants.AppCategory;
import com.yds.att.service.AttConstants.AppStatus;
import com.yds.att.bean.AttCorrect;
import com.yds.att.bean.AttExamin;
import com.yds.att.bean.AttInfo;
import com.yds.att.bean.OrgInfo;
import com.yds.att.bean.Ye0030AttCorrect;
import com.yds.att.dao.Ye0030Dao;
import com.yds.att.common.service.AttComService;
import com.yds.att.common.service.OrgRelationService;

/**
 * @see com.yds.att.service.Ye0030Service
 */
@Service("ye0030Service")
public class Ye0030ServiceImpl extends AbstractBaseService implements Ye0030Service{

	/** 注入Dao. */
	private Ye0030Dao ye0030Dao;
	private AttComService attComService;
	private OrgRelationService orgRelationService;
	private UserService userService;
	private static final String ERROR_MSG="未考勤日期";
	private static final String hhmmFormat="HH:mm";
	private static final String yyyyMMddhhmmFormat="yyyy-MM-dd HH:mm";

	/** 
	 *  {@inheritDoc}
	 */
	@Override
	public List<AttCorrect> getAttCorrectList(AttCorrect attCorrect) {

		return ye0030Dao.getAttCorrectList(attCorrect);
		
	}
	

	/** 
	 *  {@inheritDoc}
	 */
	@Override
	public Long getAttCorrectCount(AttCorrect attCorrect) {

		return ye0030Dao.getAttCorrectCount(attCorrect);
	}
	
	/** 
	 *  {@inheritDoc}
	 */
	@Override
	public Ye0030AttCorrect getAttCorrectByPk(String loginId, String attDate, String appId) {
		
		Ye0030AttCorrect ye0030AttCorrect = new Ye0030AttCorrect();
		
		//存在审批编号的情况下
		if (appId != null && !"".equals(appId)) {
			AttCorrect attCorrect = new AttCorrect();
			attCorrect.setAppId(appId);
			
			//取得考勤更正申请信息
			attCorrect = ye0030Dao.getAttCorrectByPk(attCorrect);
			
			AttInfo attInfo = new AttInfo();
			attInfo.setEmpId(attCorrect.getAppEmpId());
			attInfo.setYear(attCorrect.getYear());
			attInfo.setMonth(attCorrect.getMonth());
			attInfo.setDay(attCorrect.getDay());
			
			attInfo = getAttInfoByPk(attInfo);
			
			ye0030AttCorrect.setLoginId(attCorrect.getAppEmpId());
			ye0030AttCorrect.setLoginName(userService.getUserNm(attCorrect.getAppEmpId()));
			
			if (attInfo.getFirstTime() != null) {
				ye0030AttCorrect.setFirstTime(DateUtil.dateToString(attInfo.getFirstTime(), hhmmFormat));
			} else {
				ye0030AttCorrect.setFirstTime("");
			}

			if (attInfo.getLastTime() != null) {
				ye0030AttCorrect.setLastTime(DateUtil.dateToString(attInfo.getLastTime(), hhmmFormat));
			} else {
				ye0030AttCorrect.setLastTime("");
			}
			
			if (attCorrect.getBefStartTime() != null) {
				ye0030AttCorrect.setBefStarthhmm(attCorrect.getBefStartTime().substring(11, 16));
			} else {
				ye0030AttCorrect.setBefStarthhmm("");
			}
			
			if (attCorrect.getBefEndTime() != null) {
				ye0030AttCorrect.setBefEndhhmm(attCorrect.getBefEndTime().substring(11, 16));
			} else {
				ye0030AttCorrect.setBefEndhhmm("");
			}
			
			if (attCorrect.getAftStartTime() != null) {
				ye0030AttCorrect.setAftStartTime(attCorrect.getAftStartTime());
			} else {
				ye0030AttCorrect.setAftStartTime("");
			}
			
			if (attCorrect.getAftEndTime() != null) {
				ye0030AttCorrect.setAftEndTime(attCorrect.getAftEndTime());
			} else {
				ye0030AttCorrect.setAftEndTime("");
			}
			
			//取得申请理由
			ye0030AttCorrect.setCorrectReason(attCorrect.getCorrectReason());

			AttExamin attExamin = new AttExamin();
			attExamin.setAppId(attInfo.getAppIdCor());
			List<AttExamin> attExaminList = ye0030Dao.getAttExaminList(attExamin);

			//流程组织ID字符串
			StringBuffer strOrgSnm = new StringBuffer(""); 
			
			//审批意见
			String suggestion = "";
			
			//组织信息bean
			OrgInfo ofgInfoExamin;

			for(AttExamin attExaminE : attExaminList) {
				if (!"".equals(strOrgSnm.toString())) {
					strOrgSnm.append("-->");
				}
				
				//根据组织ID取得组织信息
				ofgInfoExamin = orgRelationService.getOrgInfoBy(attExaminE.getExaOrganizationId());
				
				//编辑审批流程组织略称
				if (attExaminE.getExaResult() != null) {
					strOrgSnm.append(userService.getUserNm(attExaminE.getExaId()) + "(" + ofgInfoExamin.getOrgSnm() + ")");
				} else {
					strOrgSnm.append(ofgInfoExamin.getOrgMngerName() + "(" + ofgInfoExamin.getOrgSnm() + ")");
				}
				
				//审批意见取得
				if (attExaminE.getExaSuggestion() != null && !"".equals(attExaminE.getExaSuggestion())) {
					suggestion = attExaminE.getExaSuggestion();
					break;
				}
			}
			
			//审批流程下拉框对应列表
			List<OrgInfo> orgInfoList = new ArrayList<OrgInfo>();

			//编辑用审批流程bean
			OrgInfo ofgInfoPage = new OrgInfo();
			
			//将取得的审批流程组织略称加入到审批流程下拉框对应列表
			ofgInfoPage.setOrgSnm(strOrgSnm.toString());
			ofgInfoPage.setOrgId("");
			orgInfoList.add(ofgInfoPage);

			//设置审批流程下拉框对应列表
			ye0030AttCorrect.setAttExamin(orgInfoList);
			
			//设置审批流程下拉框值
			ye0030AttCorrect.setStrOrgId("");
			
			//被否决时取得审批意见
			ye0030AttCorrect.setExaSuggestion(suggestion);
			
			//审批状态
			ye0030AttCorrect.setStatusCor(attCorrect.getAppStatus());
			
			//审批编号
			ye0030AttCorrect.setAppId(appId);
			
		} else {
			AttInfo attInfo = new AttInfo();
			attInfo.setEmpId(loginId);
			attInfo.setYear(attDate.substring(0, 4));
			attInfo.setMonth(attDate.substring(5, 7));
			attInfo.setDay(attDate.substring(8, 10));
			
			attInfo = getAttInfoByPk(attInfo);
			
			//考勤信息不存在
			if (attInfo == null) {
				
				ye0030AttCorrect.setErrMessage(ERROR_MSG);
			} else if (AppStatus.PENDING.value().equals(attInfo.getAttStatusCor()) || AppStatus.APP_ING.value().equals(attInfo.getAttStatusCor())) {
				
				//待审批和审批中时取得考勤更正申请信息
				AttCorrect attCorrect = new AttCorrect();
				attCorrect.setAppId(attInfo.getAppIdCor());
				attCorrect = ye0030Dao.getAttCorrectByPk(attCorrect);
				
				//设置登录用户Id
				ye0030AttCorrect.setLoginId(loginId);
				//设置登录用户名
				ye0030AttCorrect.setLoginName(userService.getUserNm(loginId));

				//首次打卡时间
				if (attInfo.getFirstTime() != null) {
					ye0030AttCorrect.setFirstTime(DateUtil.dateToString(attInfo.getFirstTime(), hhmmFormat));
				} else {
					ye0030AttCorrect.setFirstTime("");
				}

				//末次打卡时间
				if (attInfo.getLastTime() != null) {
					ye0030AttCorrect.setLastTime(DateUtil.dateToString(attInfo.getLastTime(), hhmmFormat));
				} else {
					ye0030AttCorrect.setLastTime("");
				}
				
				//变更前开始时间
				if (attCorrect.getBefStartTime() != null) {
					ye0030AttCorrect.setBefStarthhmm(attCorrect.getBefStartTime().substring(11, 16));
				} else {
					ye0030AttCorrect.setBefStarthhmm("");
				}
				
				//变更前结束时间
				if (attCorrect.getBefEndTime() != null) {
					ye0030AttCorrect.setBefEndhhmm(attCorrect.getBefEndTime().substring(11, 16));
				} else {
					ye0030AttCorrect.setBefEndhhmm("");
				}
				
				//变更后开始时间
				if (attCorrect.getAftStartTime() != null) {
					ye0030AttCorrect.setAftStartTime(attCorrect.getAftStartTime());
				} else {
					ye0030AttCorrect.setAftStartTime("");
				}
				
				//变更后结束时间
				if (attCorrect.getAftEndTime() != null) {
					ye0030AttCorrect.setAftEndTime(attCorrect.getAftEndTime());
				} else {
					ye0030AttCorrect.setAftEndTime("");
				}
				
				//取得申请理由
				ye0030AttCorrect.setCorrectReason(attCorrect.getCorrectReason());

				AttExamin attExamin = new AttExamin();
				attExamin.setAppId(attInfo.getAppIdCor());
				List<AttExamin> attExaminList = ye0030Dao.getAttExaminList(attExamin);

				//审批流程组织略称
				StringBuffer strOrgSnm = new StringBuffer(""); 
				
				//审批意见
				String suggestion = "";
				
				//组织信息bean
				OrgInfo ofgInfoExamin;

				for(AttExamin attExaminE : attExaminList) {
					if (!"".equals(strOrgSnm.toString())) {
						strOrgSnm.append("-->");
					}
					
					//根据组织ID取得组织信息
					ofgInfoExamin = orgRelationService.getOrgInfoBy(attExaminE.getExaOrganizationId());
					
					//编辑审批流程组织略称
					if (attExaminE.getExaResult() != null) {
						strOrgSnm.append(userService.getUserNm(attExaminE.getExaId()) + "(" + ofgInfoExamin.getOrgSnm() + ")");
					} else {
						strOrgSnm.append(ofgInfoExamin.getOrgMngerName() + "(" + ofgInfoExamin.getOrgSnm() + ")");
					}
					
					//审批意见取得
					if (attExaminE.getExaSuggestion() != null && !"".equals(attExaminE.getExaSuggestion())) {
						suggestion = attExaminE.getExaSuggestion();
						break;
					}
				}
				
				//审批流程下拉框对应列表
				List<OrgInfo> orgInfoList = new ArrayList<OrgInfo>();

				//编辑用审批流程bean
				OrgInfo ofgInfoPage = new OrgInfo();
				
				//将取得的审批流程组织略称加入到审批流程下拉框对应列表
				ofgInfoPage.setOrgSnm(strOrgSnm.toString());
				ofgInfoPage.setOrgId("");
				orgInfoList.add(ofgInfoPage);

				//设置审批流程下拉框对应列表
				ye0030AttCorrect.setAttExamin(orgInfoList);
				
				//设置审批流程下拉框值
				ye0030AttCorrect.setStrOrgId("");
				
				//被否决时取得审批意见
				ye0030AttCorrect.setExaSuggestion(suggestion);
				
				//审批状态
				ye0030AttCorrect.setStatusCor(attCorrect.getAppStatus());

			} else {
				//审批状态不为待审批和审批中时初始化考勤更正画面
				ye0030AttCorrect.setLoginId(loginId);
				ye0030AttCorrect.setLoginName(userService.getUserNm(loginId));
				ye0030AttCorrect.setAttExamin(getFlow(loginId, attDate));
				
				//首次打卡时间
				if (attInfo.getFirstTime() != null) {
					ye0030AttCorrect.setFirstTime(DateUtil.dateToString(attInfo.getFirstTime(), hhmmFormat));
				} else {
					ye0030AttCorrect.setFirstTime("");
				}

				//末次打卡时间
				if (attInfo.getLastTime() != null) {
					ye0030AttCorrect.setLastTime(DateUtil.dateToString(attInfo.getLastTime(), hhmmFormat));
				} else {
					ye0030AttCorrect.setLastTime("");
				}
				
				//变更前后开始时间
				if (attInfo.getRstartTime() != null) {
					ye0030AttCorrect.setBefStarthhmm(DateUtil.dateToString(attInfo.getRstartTime(), hhmmFormat));
					ye0030AttCorrect.setAftStartTime(DateUtil.dateToString(attInfo.getRstartTime(), yyyyMMddhhmmFormat));
				} else {
					ye0030AttCorrect.setBefStarthhmm("");
					ye0030AttCorrect.setAftStartTime("");
				}

				//变更前后结束时间
				if (attInfo.getRendTime() != null) {
					ye0030AttCorrect.setBefEndhhmm(DateUtil.dateToString(attInfo.getRendTime(), hhmmFormat));
					ye0030AttCorrect.setAftEndTime(DateUtil.dateToString(attInfo.getRendTime(), yyyyMMddhhmmFormat));
				} else {
					ye0030AttCorrect.setBefEndhhmm("");
					ye0030AttCorrect.setAftEndTime("");
				}
			}
		}

		return ye0030AttCorrect;
	}	
	
	/**
	 *  {@inheritDoc}
	 */
	@Override
	public void insertAttCorrect(Ye0030AttCorrect ye0030AttCorrect, String attDate, AttInfo attInfo) throws Exception {
		//审批过程的组织ID取得
		String[] orgIdList = ye0030AttCorrect.getStrOrgId().split("-");
		
		//申请编号
		String appId = "";
		
		//申请编号采番
		appId = attComService.getAppId(AppCategory.ATT_CORRECT);

		AttCorrect attCorrect = new AttCorrect();
		
		//考勤更正信息设置
		attCorrect.setAppId(appId);
		attCorrect.setAppEmpId(ye0030AttCorrect.getLoginId());
		attCorrect.setOrgId(orgIdList[0]);
		attCorrect.setYear(attInfo.getYear());
		attCorrect.setMonth(attInfo.getMonth());
		attCorrect.setDay(attInfo.getDay());
		if (attInfo.getRstartTime() != null) {
			attCorrect.setBefStartTime(DateUtil.dateToString(attInfo.getRstartTime(), yyyyMMddhhmmFormat));
		} else {
			attCorrect.setBefStartTime("0000-00-00 00:00:00");
		}
		
		if (attInfo.getRendTime() != null) {
			attCorrect.setBefEndTime(DateUtil.dateToString(attInfo.getRendTime(), yyyyMMddhhmmFormat));
		} else {
			attCorrect.setBefEndTime("0000-00-00 00:00:00");
		}
		
		attCorrect.setAftStartTime(ye0030AttCorrect.getAftStartTime());
		
		attCorrect.setAftEndTime(ye0030AttCorrect.getAftEndTime());
		
		attCorrect.setCorrectReason(ye0030AttCorrect.getCorrectReason());
		
		attCorrect.setAppStatus(AppStatus.PENDING.value());
		
		attCorrect.setUpdateUser(ye0030AttCorrect.getLoginId());

		ye0030Dao.insertAttCorrect(attCorrect);
		
		attInfo.setAttStatusCor(AppStatus.PENDING.value());
		attInfo.setAppIdCor(appId);
		ye0030Dao.updateAttInfo(attInfo);

		AttExamin attExamin;

		//插入审批过程表
		for (int i = 0; i < orgIdList.length; i++) {
			attExamin = new AttExamin();
			attExamin.setAppId(appId);
			attExamin.setExaAppOrder(i + 1);
			attExamin.setExaAppEnd(orgIdList.length);
			attExamin.setExaOrganizationId(orgIdList[i]);

			ye0030Dao.insertAttExamin(attExamin);
			
			attExamin = null;
		}
	}
	
	/**
	 *  {@inheritDoc}
	 */
	@Override
	public List<OrgInfo> getFlow(String loginId, String attDate) {
		
		//审批流程下拉框对应列表
		List<OrgInfo> attExamin=new ArrayList<OrgInfo>();
		
		//编辑用审批流程bean
		OrgInfo ofgInfoPage;
		
		//编辑用组织略称
		StringBuffer strOrgSnm = new StringBuffer("");
		
		//编辑用组织ID
		StringBuffer strOrgId = new StringBuffer("");
		
		//未选择考勤变更日期时
		if (attDate == null) {
			ofgInfoPage = new OrgInfo();
			ofgInfoPage.setOrgSnm("");
			ofgInfoPage.setOrgId(strOrgId.toString());
			attExamin.add(ofgInfoPage);
			return attExamin;
		}
		
		//取得审批流程
		List<List<OrgInfo>> attExaminList = orgRelationService.getFlowForAtt(loginId, DateUtil.parse(attDate));
		
		//当不只一个审批流程时，在下拉框中插入一个空值
		if (attExaminList.size() > 1) {
			ofgInfoPage = new OrgInfo();
			ofgInfoPage.setOrgSnm("");
			ofgInfoPage.setOrgId(strOrgId.toString());
			ofgInfoPage = null;
		}

		//审批流程转化为审批流程下拉框对应列表
		for (List<OrgInfo> orgInfoList : attExaminList) {
			ofgInfoPage = new OrgInfo();
			for (OrgInfo orgInfo : orgInfoList) {
				if (!"".equals(strOrgSnm.toString())) {
					strOrgSnm.append("-->");
					strOrgId.append("-");
				}
				strOrgSnm.append(orgInfo.getOrgMngerName() + "(" + orgInfo.getOrgSnm() + ")");
				strOrgId.append(orgInfo.getOrgId());
			}
			ofgInfoPage.setOrgSnm(strOrgSnm.toString());
			ofgInfoPage.setOrgId(strOrgId.toString());
			attExamin.add(ofgInfoPage);
			ofgInfoPage=null;
			strOrgSnm = new StringBuffer("");
			strOrgId = new StringBuffer("");
		}

		return attExamin;
	}
	
	/**
	 *  {@inheritDoc}
	 */
	@Override
	public int updateAttCorrect(AttCorrect attCorrect) {
		return ye0030Dao.updateAttCorrect(attCorrect);
	}

	/**
	 *  {@inheritDoc}
	 */
	@Override
	public void deleteAttCorrect(Ye0030AttCorrect ye0030AttCorrect, String attDate, AttInfo attInfo) throws Exception {
		//考勤申请待审批状态下
		if (AppStatus.PENDING.value().equals(attInfo.getAttStatusCor())) { 

			AttCorrect attCorrect = new AttCorrect();
			
			attCorrect.setAppId(attInfo.getAppIdCor());
			ye0030Dao.deleteAttCorrect(attCorrect);
			
			AttExamin attExamin = new AttExamin();
			attExamin.setAppId(attInfo.getAppIdCor());
			ye0030Dao.deleteAttExamin(attExamin);
			
			attInfo.setAttStatusCor("");
			attInfo.setAppIdCor("");
			ye0030Dao.updateAttInfo(attInfo);
			
		} 
		
		//考勤申请审批中状态下
		if (AppStatus.APP_ING.value().equals(attInfo.getAttStatusCor())) {
			AttCorrect attCorrect = new AttCorrect();
			
			attInfo.setAttStatusCor(AppStatus.REVOKEED.value());
			ye0030Dao.updateAttInfo(attInfo);
			
			attCorrect.setAppId(attInfo.getAppIdCor());
			attCorrect.setAppStatus(AppStatus.REVOKEED.value());
			ye0030Dao.updateAttCorrect(attCorrect);
		}
	}
	
	/**
	 * @param ye0030Dao
	 *            the ye0030Dao to set
	 */
	public void setYe0030Dao(Ye0030Dao dao) {
		this.ye0030Dao = dao;
	}
	
	/** 
	 *  {@inheritDoc}
	 */
	@Override
	public AttInfo getAttInfoByPk(AttInfo attInfo) {

		return ye0030Dao.getAttInfoByPk(attInfo);
	}
	
	/**
	 * @param ye0030Service
	 *            the ye0030Service to set
	 */
	public void setAttComService(AttComService attComService) {
		this.attComService = attComService;
	}	
	
	/**
	 *  {@inheritDoc}
	 */
	@Override
	public int updateAttInfo(AttInfo attInfo) {
		
		return ye0030Dao.updateAttInfo(attInfo);
	}
	
	/**
	 *  {@inheritDoc}
	 */
	@Override
	public String getUserNm(String loginId) {
		
		return userService.getUserNm(loginId);
	}
	
	/**
	 * @param ye0030Service
	 *            the ye0030Service to set
	 */
	public void setOrgRelationService(OrgRelationService orgRelationService) {
		this.orgRelationService = orgRelationService;
	}


	public void setUserService(UserService userService) {
		this.userService = userService;
	}


	public UserService getUserService() {
		return userService;
	}	

}
