/*
 * @(#)Ye0070ServiceImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 共通系统
 */
package com.yds.att.service.impl;

import java.util.*;

import org.springframework.stereotype.Service;

import com.yds.base.service.AbstractBaseService;
import com.yds.util.service.DateUtil;
import com.yds.util.service.StringUtil;
import com.yds.att.service.AttConstants;
import com.yds.att.service.Ye0070Service;
import com.yds.att.bean.OrgInfo;
import com.yds.att.bean.Ye0070CondA;
import com.yds.att.bean.Ye0071CondA;
import com.yds.att.bean.Ye0072CondA;
import com.yds.att.common.service.AttComService;
import com.yds.att.dao.Ye0070Dao;

/**
 * @see com.yds.att.service.Ye0070Service
 */
@Service("ye0070Service")
public class Ye0070ServiceImpl extends AbstractBaseService implements Ye0070Service{

	/** 注入Dao. */
	private Ye0070Dao ye0070Dao;
	
	/** 注入Service. */
	private AttComService attComService;

	/** 预计时间总计List. */
	private List<String> appOvertimeListSum;
	
	/** 实际时间总计List. */
	private List<String> realOvertimeListSum;
	/** 
	 *  {@inheritDoc}
	 */
	@Override
	public List<Ye0071CondA> getAttOvertimeMainList(Ye0070CondA ye0070CondA) {
				
		// 里层员工加班信息
		List<Ye0072CondA> overtimeDBInfo = ye0070Dao.getAttOvertimeList(ye0070CondA);

		// 外层员工加班信息
		List<Ye0071CondA> overtimeInfoOutside = new ArrayList<Ye0071CondA>();
		
		// 分组加班信息
		Ye0071CondA ye0071CondA = new Ye0071CondA();
		List<Ye0072CondA> overtimeInfoinside = new ArrayList<Ye0072CondA>();
		
		// 上一个编辑加班信息
		Ye0072CondA ye0072CondABefore = new Ye0072CondA();
		
		// 按项目统计方式
		if (STATISTIC_MODE_BYPRJ.equals(ye0070CondA.getStatisticMode())) {
		
			for (Ye0072CondA ye0072CondA : overtimeDBInfo)
			{
				// 编辑第一条数据时
				if (overtimeInfoinside.size() == 0) {
					overtimeInfoOutside.add(ye0071CondA);
					ye0072CondA.setAttStateFlg("0");
					//时间计算
					Ye0072CondA ye0072CondAfirst = firstOvertimeInfo(ye0072CondA);
					overtimeInfoinside.add(ye0072CondAfirst);
					ye0072CondABefore = ye0072CondAfirst;
					continue;
				}
				// 项目ID发生改变
				if (!ye0072CondABefore.getPrjSubId().equals(ye0072CondA.getPrjSubId())) {
					
					setValueOutside(ye0072CondABefore, ye0071CondA, ye0070CondA);
	
					ye0071CondA.setYe0072OvertimeList(overtimeInfoinside);
					
					// 初期化新组别相关信息	
					ye0071CondA = new Ye0071CondA();
					overtimeInfoOutside.add(ye0071CondA);
					overtimeInfoinside = new ArrayList<Ye0072CondA>();
					ye0072CondA.setAttStateFlg("0");
					Ye0072CondA ye0072CondAfirst = firstOvertimeInfo(ye0072CondA);
					overtimeInfoinside.add(ye0072CondAfirst);
					ye0072CondABefore = ye0072CondAfirst;
					
				} else {
					
					//同一项目ID内统计月发生改变
					if ((!ye0072CondABefore.getYear().equals(ye0072CondA.getYear())) || 
							(!ye0072CondABefore.getMonth().equals(ye0072CondA.getMonth()))) {	
						
						setValueInside(ye0072CondABefore, ye0072CondA, ye0071CondA);
						
						// 初期化新记录相关信息
						ye0072CondA.setAttStateFlg("0");
						Ye0072CondA ye0072CondAfirst = firstOvertimeInfo(ye0072CondA);
						overtimeInfoinside.add(ye0072CondAfirst);
						ye0072CondABefore = ye0072CondAfirst;	
						
					} else {

						Ye0072CondA ye0072CondAeach = eachOvertimeInfo(ye0072CondA, ye0072CondABefore);
						ye0072CondABefore = ye0072CondAeach;
					}
				}
			}
			
			
		//按年月
		} else if (STATISTIC_MODE_BYDATE.equals(ye0070CondA.getStatisticMode())) {
			for (Ye0072CondA ye0072CondA : overtimeDBInfo)
			{
				// 编辑每列第一条数据时
				if (overtimeInfoinside.size() == 0) {
					overtimeInfoOutside.add(ye0071CondA);	
					ye0072CondA.setAttStateFlg("0");
					//时间计算
					Ye0072CondA ye0072CondAfirst = firstOvertimeInfo(ye0072CondA);
					overtimeInfoinside.add(ye0072CondAfirst);
					ye0072CondABefore = ye0072CondAfirst;
					continue;
				}
				// 年月发生改变
				if ((!ye0072CondABefore.getYear().equals(ye0072CondA.getYear())) || 
						(!ye0072CondABefore.getMonth().equals(ye0072CondA.getMonth()))) {
					
					setValueOutside(ye0072CondABefore, ye0071CondA, ye0070CondA);
					
					ye0071CondA.setYe0072OvertimeList(overtimeInfoinside);
					// 初期化新组别相关信息	
					ye0071CondA = new Ye0071CondA();
					overtimeInfoOutside.add(ye0071CondA);
					overtimeInfoinside = new ArrayList<Ye0072CondA>();
					ye0072CondA.setAttStateFlg("0");
					Ye0072CondA ye0072CondAfirst = firstOvertimeInfo(ye0072CondA);
					overtimeInfoinside.add(ye0072CondAfirst);
					ye0072CondABefore = ye0072CondAfirst;
					
					
				} else {
					
					//同一年月中项目ID发生改变
					if (!ye0072CondABefore.getPrjSubId().equals(ye0072CondA.getPrjSubId())) {	
						
						setValueInside(ye0072CondABefore, ye0072CondA, ye0071CondA);
						
						// 初期化新记录相关信息
						ye0072CondA.setAttStateFlg("0");
						Ye0072CondA ye0072CondAfirst = firstOvertimeInfo(ye0072CondA);
						overtimeInfoinside.add(ye0072CondAfirst);
						ye0072CondABefore = ye0072CondAfirst;
						
					} else {
						Ye0072CondA ye0072CondAeach = eachOvertimeInfo(ye0072CondA, ye0072CondABefore);
						ye0072CondABefore = ye0072CondAeach;
					}
				}
			}
		}
		
		// 记录最后一个组别信息
		if (null != overtimeInfoinside
				&& overtimeInfoinside.size() > 0) {
			
			setValueOutside(ye0072CondABefore, ye0071CondA, ye0070CondA);
			ye0071CondA.setYe0072OvertimeList(overtimeInfoinside);
				
		}	
		
		return overtimeInfoOutside;
	}
	
	/**
	 * 一览每层第一条时间计算
	 * @return 
	 */
	private Ye0072CondA firstOvertimeInfo(Ye0072CondA ye0072CondA) {
		
		long applySecond = 0;
		long actualSecond = 0;
		//该当记录预计加班时间计算（秒计）
		if (AttConstants.DateTypeEnum.WORK.toString().equals(ye0072CondA.getDayFlg())){
			applySecond=DateUtil.dateDiff(ye0072CondA.getOverTimePFrom(),ye0072CondA.getOverTimePTo());
		} else {
			//出勤时间早于午休开始
			if (ye0072CondA.getOverTimePFrom().before(ye0072CondA.getLunchStart())){
				//退勤时间晚于晚休结束
				if (ye0072CondA.getOverTimePTo().after(ye0072CondA.getDinnerEnd())){
					
					applySecond=DateUtil.dateDiff(ye0072CondA.getOverTimePFrom(),ye0072CondA.getLunchStart())
							+ DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getDinnerStart())
							+ DateUtil.dateDiff(ye0072CondA.getDinnerEnd(),ye0072CondA.getOverTimePTo());
				//退勤时间在晚休开始与晚休结束之间
				} else if (ye0072CondA.getOverTimePTo().before(ye0072CondA.getDinnerEnd())
							&& ye0072CondA.getOverTimePTo().after(ye0072CondA.getDinnerStart())){
					
					applySecond=DateUtil.dateDiff(ye0072CondA.getOverTimePFrom(),ye0072CondA.getLunchStart())
							+ DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getDinnerStart());
				//退勤时间在午休结束与晚休开始之间
				} else if (ye0072CondA.getOverTimePTo().before(ye0072CondA.getDinnerStart())
						&& ye0072CondA.getOverTimePTo().after(ye0072CondA.getLunchEnd())){
					
					applySecond=DateUtil.dateDiff(ye0072CondA.getOverTimePFrom(),ye0072CondA.getLunchStart())
							+ DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getOverTimePTo());
				//退勤时间在午休开始与午休结束之间
				} else if (ye0072CondA.getOverTimePTo().before(ye0072CondA.getLunchEnd())
						&& ye0072CondA.getOverTimePTo().after(ye0072CondA.getLunchStart())){
					
					applySecond=DateUtil.dateDiff(ye0072CondA.getOverTimePFrom(),ye0072CondA.getLunchStart());
				//退勤时间在午休开始之前
				} else if (ye0072CondA.getOverTimePTo().before(ye0072CondA.getLunchStart())){
					
					applySecond=DateUtil.dateDiff(ye0072CondA.getOverTimePFrom(),ye0072CondA.getOverTimePTo());
				} else {
					
					applySecond=0;
				}
			//出勤时间在午休开始与午休结束之间
			} else if (ye0072CondA.getOverTimePFrom().before(ye0072CondA.getLunchEnd())
					&& ye0072CondA.getOverTimePFrom().after(ye0072CondA.getLunchStart())){
				//退勤时间晚于晚休结束
				if (ye0072CondA.getOverTimePTo().after(ye0072CondA.getDinnerEnd())){
					applySecond=DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getDinnerStart())
						+ DateUtil.dateDiff(ye0072CondA.getDinnerEnd(),ye0072CondA.getOverTimePTo());
				//退勤时间在晚休开始与晚休结束之间
				} else if (ye0072CondA.getOverTimePTo().before(ye0072CondA.getDinnerEnd())
						&& ye0072CondA.getOverTimePTo().after(ye0072CondA.getDinnerStart())){
					
					applySecond=DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getDinnerStart());	
				//退勤时间在午休结束与晚休开始之间
				} else if (ye0072CondA.getOverTimePTo().before(ye0072CondA.getDinnerStart())
						&& ye0072CondA.getOverTimePTo().after(ye0072CondA.getLunchEnd())){
					
					applySecond=DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getOverTimePTo());
				} else {
					
					applySecond=0;
				}
			//出勤时间在午休结束与晚休开始之间
			} else if (ye0072CondA.getOverTimePFrom().after(ye0072CondA.getLunchEnd())
					&& ye0072CondA.getOverTimePFrom().before(ye0072CondA.getDinnerStart())){
				//退勤时间晚于晚休结束
				if (ye0072CondA.getOverTimePTo().after(ye0072CondA.getDinnerEnd())){
					
					applySecond=DateUtil.dateDiff(ye0072CondA.getOverTimePFrom(),ye0072CondA.getDinnerStart())
						+ DateUtil.dateDiff(ye0072CondA.getDinnerEnd(),ye0072CondA.getOverTimePTo());
				//退勤时间在晚休开始与晚休结束之间
				} else if (ye0072CondA.getOverTimePTo().before(ye0072CondA.getDinnerEnd())
						&& ye0072CondA.getOverTimePTo().after(ye0072CondA.getDinnerStart())){
					
					applySecond=DateUtil.dateDiff(ye0072CondA.getOverTimePFrom(),ye0072CondA.getDinnerStart());
				//退勤时间在午休结束与晚休开始之间
				} else if (ye0072CondA.getOverTimePTo().before(ye0072CondA.getDinnerStart())
						&& ye0072CondA.getOverTimePTo().after(ye0072CondA.getLunchEnd())){
					
					applySecond=DateUtil.dateDiff(ye0072CondA.getOverTimePFrom(),ye0072CondA.getOverTimePTo());
				} else {
					
					applySecond=0;
				}
			//出勤时间在晚休结束与晚休开始之间
			} else if (ye0072CondA.getOverTimePFrom().after(ye0072CondA.getDinnerStart())
					&& ye0072CondA.getOverTimePFrom().before(ye0072CondA.getDinnerEnd())){
				//退勤时间晚于晚休结束
				if (ye0072CondA.getOverTimePTo().after(ye0072CondA.getDinnerEnd())){
					
					applySecond=DateUtil.dateDiff(ye0072CondA.getDinnerEnd(),ye0072CondA.getOverTimePTo());
				} else {
					applySecond=0;
				}
			//出勤时间在晚休结束之后
			} else if (ye0072CondA.getOverTimePFrom().after(ye0072CondA.getDinnerEnd())){
				applySecond=DateUtil.dateDiff(ye0072CondA.getOverTimePFrom(),ye0072CondA.getOverTimePTo());
			} else {
				applySecond=0;
			}
		}
		int applyMinutes = (int) (applySecond / 60 % 60);
		int applyHours = (int) (applySecond / 60 / 60 % 24);
		//受益区分分歧
		if ( AttConstants.BenefitFlagEnum.FOR_MONEY.toString().equals(ye0072CondA.getBenefitFlg())){
			ye0072CondA.setApplySecondCash(applySecond);
			ye0072CondA.setApplySecondRest(0);
			ye0072CondA.setOverTimePCash(new StringBuilder(String.valueOf(applyHours)).append(":")
					.append(StringUtil.addZero(applyMinutes, 2)).toString());
			ye0072CondA.setOverTimePRest("0:00");
		} else {
			ye0072CondA.setApplySecondRest(applySecond);
			ye0072CondA.setApplySecondCash(0);
			ye0072CondA.setOverTimePRest(new StringBuilder(String.valueOf(applyHours)).append(":")
					.append(StringUtil.addZero(applyMinutes, 2)).toString());
			ye0072CondA.setOverTimePCash("0:00");
		}
		
		
		
		//该当记录实际加班时间计算（秒计）
		if (AttConstants.DateTypeEnum.WORK.toString().equals(ye0072CondA.getDayFlg())){
			if(ye0072CondA.getOverTimeRTo()==null || ye0072CondA.getOverTimeRFrom()==null){
				actualSecond=0;
			}else{
				if(ye0072CondA.getOverTimeRTo().before(ye0072CondA.getDinnerEnd())){
					actualSecond=0;
				} else{
					actualSecond=DateUtil.dateDiff(ye0072CondA.getDinnerEnd(),ye0072CondA.getOverTimeRTo());
				}
			}
		} else {
			if(ye0072CondA.getOverTimeRTo()==null || ye0072CondA.getOverTimeRFrom()==null){
				actualSecond=0;
			}else{
				if(ye0072CondA.getOverTimeRFrom().before(ye0072CondA.getOverTimePFrom())){
					ye0072CondA.setOverTimeRFrom(ye0072CondA.getOverTimePFrom());
				}
				//出勤时间早于午休开始
				if (ye0072CondA.getOverTimeRFrom().before(ye0072CondA.getLunchStart())){
					//退勤时间晚于晚休结束
					if (ye0072CondA.getOverTimeRTo().after(ye0072CondA.getDinnerEnd())){
						
						actualSecond=DateUtil.dateDiff(ye0072CondA.getOverTimeRFrom(),ye0072CondA.getLunchStart())
								+ DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getDinnerStart())
								+ DateUtil.dateDiff(ye0072CondA.getDinnerEnd(),ye0072CondA.getOverTimeRTo());
					//退勤时间在晚休开始与晚休结束之间
					} else if (ye0072CondA.getOverTimeRTo().before(ye0072CondA.getDinnerEnd())
								&& ye0072CondA.getOverTimeRTo().after(ye0072CondA.getDinnerStart())){
						
						actualSecond=DateUtil.dateDiff(ye0072CondA.getOverTimeRFrom(),ye0072CondA.getLunchStart())
								+ DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getDinnerStart());
					//退勤时间在午休结束与晚休开始之间
					} else if (ye0072CondA.getOverTimeRTo().before(ye0072CondA.getDinnerStart())
							&& ye0072CondA.getOverTimeRTo().after(ye0072CondA.getLunchEnd())){
						
						actualSecond=DateUtil.dateDiff(ye0072CondA.getOverTimeRFrom(),ye0072CondA.getLunchStart())
								+ DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getOverTimeRTo());
					//退勤时间在午休开始与午休结束之间
					} else if (ye0072CondA.getOverTimeRTo().before(ye0072CondA.getLunchEnd())
							&& ye0072CondA.getOverTimeRTo().after(ye0072CondA.getLunchStart())){
						
						actualSecond=DateUtil.dateDiff(ye0072CondA.getOverTimeRFrom(),ye0072CondA.getLunchStart());
					//退勤时间在午休开始之前
					} else if (ye0072CondA.getOverTimeRTo().before(ye0072CondA.getLunchStart())){
						
						actualSecond=DateUtil.dateDiff(ye0072CondA.getOverTimeRFrom(),ye0072CondA.getOverTimeRTo());
					} else {
						
						actualSecond=0;
					}
				//出勤时间在午休开始与午休结束之间
				} else if (ye0072CondA.getOverTimeRFrom().before(ye0072CondA.getLunchEnd())
						&& ye0072CondA.getOverTimeRFrom().after(ye0072CondA.getLunchStart())){
					//退勤时间晚于晚休结束
					if (ye0072CondA.getOverTimeRTo().after(ye0072CondA.getDinnerEnd())){
						actualSecond=DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getDinnerStart())
							+ DateUtil.dateDiff(ye0072CondA.getDinnerEnd(),ye0072CondA.getOverTimeRTo());
					//退勤时间在晚休开始与晚休结束之间
					} else if (ye0072CondA.getOverTimeRTo().before(ye0072CondA.getDinnerEnd())
							&& ye0072CondA.getOverTimeRTo().after(ye0072CondA.getDinnerStart())){
						
						actualSecond=DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getDinnerStart());	
					//退勤时间在午休结束与晚休开始之间
					} else if (ye0072CondA.getOverTimeRTo().before(ye0072CondA.getDinnerStart())
							&& ye0072CondA.getOverTimeRTo().after(ye0072CondA.getLunchEnd())){
						
						actualSecond=DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getOverTimeRTo());
					} else {
						
						actualSecond=0;
					}
				//出勤时间在午休结束与晚休开始之间
				} else if (ye0072CondA.getOverTimeRFrom().after(ye0072CondA.getLunchEnd())
						&& ye0072CondA.getOverTimeRFrom().before(ye0072CondA.getDinnerStart())){
					//退勤时间晚于晚休结束
					if (ye0072CondA.getOverTimeRTo().after(ye0072CondA.getDinnerEnd())){
						
						actualSecond=DateUtil.dateDiff(ye0072CondA.getOverTimeRFrom(),ye0072CondA.getDinnerStart())
							+ DateUtil.dateDiff(ye0072CondA.getDinnerEnd(),ye0072CondA.getOverTimeRTo());
					//退勤时间在晚休开始与晚休结束之间
					} else if (ye0072CondA.getOverTimeRTo().before(ye0072CondA.getDinnerEnd())
							&& ye0072CondA.getOverTimeRTo().after(ye0072CondA.getDinnerStart())){
						
						actualSecond=DateUtil.dateDiff(ye0072CondA.getOverTimeRFrom(),ye0072CondA.getDinnerStart());
					//退勤时间在午休结束与晚休开始之间
					} else if (ye0072CondA.getOverTimeRTo().before(ye0072CondA.getDinnerStart())
							&& ye0072CondA.getOverTimeRTo().after(ye0072CondA.getLunchEnd())){
						
						actualSecond=DateUtil.dateDiff(ye0072CondA.getOverTimeRFrom(),ye0072CondA.getOverTimeRTo());
					} else {
						
						actualSecond=0;
					}
				//出勤时间在晚休结束与晚休开始之间
				} else if (ye0072CondA.getOverTimeRFrom().after(ye0072CondA.getDinnerStart())
						&& ye0072CondA.getOverTimeRFrom().before(ye0072CondA.getDinnerEnd())){
					//退勤时间晚于晚休结束
					if (ye0072CondA.getOverTimeRTo().after(ye0072CondA.getDinnerEnd())){
						
						actualSecond=DateUtil.dateDiff(ye0072CondA.getDinnerEnd(),ye0072CondA.getOverTimeRTo());
					} else {
						actualSecond=0;
					}
				//出勤时间在晚休结束之后
				} else if (ye0072CondA.getOverTimeRFrom().after(ye0072CondA.getDinnerEnd())){
					actualSecond=DateUtil.dateDiff(ye0072CondA.getOverTimeRFrom(),ye0072CondA.getOverTimeRTo());
				} else {
					actualSecond=0;
				}
			}
		}
		
		int actualMinutes = (int) (actualSecond / 60 % 60);
		int actualHours = (int) (actualSecond / 60 / 60 % 24);
		//受益区分分歧
		if ( AttConstants.BenefitFlagEnum.FOR_MONEY.toString().equals(ye0072CondA.getBenefitFlg())){
			ye0072CondA.setActualSecondCash(actualSecond);
			ye0072CondA.setActualSecondRest(0);
			ye0072CondA.setOverTimeRCash(new StringBuilder(String.valueOf(actualHours)).append(":")
					.append(StringUtil.addZero(actualMinutes, 2)).toString());
			ye0072CondA.setOverTimeRRest("0:00");
		} else {
			ye0072CondA.setActualSecondRest(actualSecond);
			ye0072CondA.setActualSecondCash(0);
			ye0072CondA.setOverTimeRRest(new StringBuilder(String.valueOf(actualHours)).append(":")
					.append(StringUtil.addZero(actualMinutes, 2)).toString());
			ye0072CondA.setOverTimeRCash("0:00");
		}
		
		
		//人次编辑
		if (ye0072CondA.getApplySecondCash()!= 0 || ye0072CondA.getApplySecondRest()!= 0){
			ye0072CondA.setApplyPerCnt(1);
		} else {
			ye0072CondA.setApplyPerCnt(0);
		}
		
		if (ye0072CondA.getActualSecondCash()!= 0 || ye0072CondA.getActualSecondRest()!= 0){
			ye0072CondA.setActualPerCnt(1);
		} else {
			ye0072CondA.setActualPerCnt(0);
		}
		//状态编辑
		if (!AttConstants.AppStatus.APPROVED.toString().equals(ye0072CondA.getAttStateId()) &&
				!AttConstants.AppStatus.REJECTED.toString().equals(ye0072CondA.getAttStateId())) {
			ye0072CondA.setAttStateFlg("1");
		}
		
		return ye0072CondA;
	}

	/**
	 * 一览每层每一条（第一条以外）时间计算
	 * @return 
	 */
	private Ye0072CondA eachOvertimeInfo(Ye0072CondA ye0072CondA, Ye0072CondA ye0072CondABefore) {
		
		long applySecond = 0;
		long actualSecond = 0;
		//该当记录预计加班时间计算（秒计） 
		if (AttConstants.DateTypeEnum.WORK.toString().equals(ye0072CondA.getDayFlg())){
			applySecond=DateUtil.dateDiff(ye0072CondA.getOverTimePFrom(),ye0072CondA.getOverTimePTo());
		} else {
			//出勤时间早于午休开始
			if (ye0072CondA.getOverTimePFrom().before(ye0072CondA.getLunchStart())){
				//退勤时间晚于晚休结束
				if (ye0072CondA.getOverTimePTo().after(ye0072CondA.getDinnerEnd())){
					
					applySecond=DateUtil.dateDiff(ye0072CondA.getOverTimePFrom(),ye0072CondA.getLunchStart())
							+ DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getDinnerStart())
							+ DateUtil.dateDiff(ye0072CondA.getDinnerEnd(),ye0072CondA.getOverTimePTo());
				//退勤时间在晚休开始与晚休结束之间
				} else if (ye0072CondA.getOverTimePTo().before(ye0072CondA.getDinnerEnd())
							&& ye0072CondA.getOverTimePTo().after(ye0072CondA.getDinnerStart())){
					
					applySecond=DateUtil.dateDiff(ye0072CondA.getOverTimePFrom(),ye0072CondA.getLunchStart())
							+ DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getDinnerStart());
				//退勤时间在午休结束与晚休开始之间
				} else if (ye0072CondA.getOverTimePTo().before(ye0072CondA.getDinnerStart())
						&& ye0072CondA.getOverTimePTo().after(ye0072CondA.getLunchEnd())){
					
					applySecond=DateUtil.dateDiff(ye0072CondA.getOverTimePFrom(),ye0072CondA.getLunchStart())
							+ DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getOverTimePTo());
				//退勤时间在午休开始与午休结束之间
				} else if (ye0072CondA.getOverTimePTo().before(ye0072CondA.getLunchEnd())
						&& ye0072CondA.getOverTimePTo().after(ye0072CondA.getLunchStart())){
					
					applySecond=DateUtil.dateDiff(ye0072CondA.getOverTimePFrom(),ye0072CondA.getLunchStart());
				//退勤时间在午休开始之前
				} else if (ye0072CondA.getOverTimePTo().before(ye0072CondA.getLunchStart())){
					
					applySecond=DateUtil.dateDiff(ye0072CondA.getOverTimePFrom(),ye0072CondA.getOverTimePTo());
				} else {
					
					applySecond=0;
				}
			//出勤时间在午休开始与午休结束之间
			} else if (ye0072CondA.getOverTimePFrom().before(ye0072CondA.getLunchEnd())
					&& ye0072CondA.getOverTimePFrom().after(ye0072CondA.getLunchStart())){
				//退勤时间晚于晚休结束
				if (ye0072CondA.getOverTimePTo().after(ye0072CondA.getDinnerEnd())){
					applySecond=DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getDinnerStart())
						+ DateUtil.dateDiff(ye0072CondA.getDinnerEnd(),ye0072CondA.getOverTimePTo());
				//退勤时间在晚休开始与晚休结束之间
				} else if (ye0072CondA.getOverTimePTo().before(ye0072CondA.getDinnerEnd())
						&& ye0072CondA.getOverTimePTo().after(ye0072CondA.getDinnerStart())){
					
					applySecond=DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getDinnerStart());	
				//退勤时间在午休结束与晚休开始之间
				} else if (ye0072CondA.getOverTimePTo().before(ye0072CondA.getDinnerStart())
						&& ye0072CondA.getOverTimePTo().after(ye0072CondA.getLunchEnd())){
					
					applySecond=DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getOverTimePTo());
				} else {
					
					applySecond=0;
				}
			//出勤时间在午休结束与晚休开始之间
			} else if (ye0072CondA.getOverTimePFrom().after(ye0072CondA.getLunchEnd())
					&& ye0072CondA.getOverTimePFrom().before(ye0072CondA.getDinnerStart())){
				//退勤时间晚于晚休结束
				if (ye0072CondA.getOverTimePTo().after(ye0072CondA.getDinnerEnd())){
					
					applySecond=DateUtil.dateDiff(ye0072CondA.getOverTimePFrom(),ye0072CondA.getDinnerStart())
						+ DateUtil.dateDiff(ye0072CondA.getDinnerEnd(),ye0072CondA.getOverTimePTo());
				//退勤时间在晚休开始与晚休结束之间
				} else if (ye0072CondA.getOverTimePTo().before(ye0072CondA.getDinnerEnd())
						&& ye0072CondA.getOverTimePTo().after(ye0072CondA.getDinnerStart())){
					
					applySecond=DateUtil.dateDiff(ye0072CondA.getOverTimePFrom(),ye0072CondA.getDinnerStart());
				//退勤时间在午休结束与晚休开始之间
				} else if (ye0072CondA.getOverTimePTo().before(ye0072CondA.getDinnerStart())
						&& ye0072CondA.getOverTimePTo().after(ye0072CondA.getLunchEnd())){
					
					applySecond=DateUtil.dateDiff(ye0072CondA.getOverTimePFrom(),ye0072CondA.getOverTimePTo());
				} else {
					
					applySecond=0;
				}
			//出勤时间在晚休结束与晚休开始之间
			} else if (ye0072CondA.getOverTimePFrom().after(ye0072CondA.getDinnerStart())
					&& ye0072CondA.getOverTimePFrom().before(ye0072CondA.getDinnerEnd())){
				//退勤时间晚于晚休结束
				if (ye0072CondA.getOverTimePTo().after(ye0072CondA.getDinnerEnd())){
					
					applySecond=DateUtil.dateDiff(ye0072CondA.getDinnerEnd(),ye0072CondA.getOverTimePTo());
				} else {
					applySecond=0;
				}
			//出勤时间在晚休结束之后
			} else if (ye0072CondA.getOverTimePFrom().after(ye0072CondA.getDinnerEnd())){
				applySecond=DateUtil.dateDiff(ye0072CondA.getOverTimePFrom(),ye0072CondA.getOverTimePTo());
			} else {
				applySecond=0;
			}
		}
		//受益区分分歧
		if ( AttConstants.BenefitFlagEnum.FOR_MONEY.toString().equals(ye0072CondA.getBenefitFlg())){
			ye0072CondA.setApplySecondCash(applySecond);
			ye0072CondABefore.setApplySecondCash(ye0072CondABefore.getApplySecondCash() + applySecond);
			int applyMinutes = (int) (ye0072CondABefore.getApplySecondCash() / 60 % 60);
			int applyHours = (int) (ye0072CondABefore.getApplySecondCash() / 60 / 60);
			ye0072CondABefore.setOverTimePCash(new StringBuilder(String.valueOf(applyHours)).append(":")
					.append(StringUtil.addZero(applyMinutes, 2)).toString());
			
		} else {
			ye0072CondA.setApplySecondRest(applySecond);
			ye0072CondABefore.setApplySecondRest(ye0072CondABefore.getApplySecondRest() + applySecond);
			int applyMinutes = (int) (ye0072CondABefore.getApplySecondRest() / 60 % 60);
			int applyHours = (int) (ye0072CondABefore.getApplySecondRest() / 60 / 60);
			ye0072CondABefore.setOverTimePRest(new StringBuilder(String.valueOf(applyHours)).append(":")
					.append(StringUtil.addZero(applyMinutes, 2)).toString());	
		}
		
		
		
		//该当记录实际加班时间计算（秒计）
		if (AttConstants.DateTypeEnum.WORK.toString().equals(ye0072CondA.getDayFlg())){
			if(ye0072CondA.getOverTimeRTo()==null || ye0072CondA.getOverTimeRFrom()==null){
				actualSecond=0;
			}else{
				if(ye0072CondA.getOverTimeRTo().before(ye0072CondA.getDinnerEnd())){
					actualSecond=0;
				} else{
					actualSecond=DateUtil.dateDiff(ye0072CondA.getDinnerEnd(),ye0072CondA.getOverTimeRTo());
				}
			}
		} else {
			if(ye0072CondA.getOverTimeRTo()==null || ye0072CondA.getOverTimeRFrom()==null){
				actualSecond=0;
			}else{
				if(ye0072CondA.getOverTimeRFrom().before(ye0072CondA.getOverTimePFrom())){
					ye0072CondA.setOverTimeRFrom(ye0072CondA.getOverTimePFrom());
				}
				//出勤时间早于午休开始
				if (ye0072CondA.getOverTimeRFrom().before(ye0072CondA.getLunchStart())){
					//退勤时间晚于晚休结束
					if (ye0072CondA.getOverTimeRTo().after(ye0072CondA.getDinnerEnd())){
						
						actualSecond=DateUtil.dateDiff(ye0072CondA.getOverTimeRFrom(),ye0072CondA.getLunchStart())
								+ DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getDinnerStart())
								+ DateUtil.dateDiff(ye0072CondA.getDinnerEnd(),ye0072CondA.getOverTimeRTo());
					//退勤时间在晚休开始与晚休结束之间
					} else if (ye0072CondA.getOverTimeRTo().before(ye0072CondA.getDinnerEnd())
								&& ye0072CondA.getOverTimeRTo().after(ye0072CondA.getDinnerStart())){
						
						actualSecond=DateUtil.dateDiff(ye0072CondA.getOverTimeRFrom(),ye0072CondA.getLunchStart())
								+ DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getDinnerStart());
					//退勤时间在午休结束与晚休开始之间
					} else if (ye0072CondA.getOverTimeRTo().before(ye0072CondA.getDinnerStart())
							&& ye0072CondA.getOverTimeRTo().after(ye0072CondA.getLunchEnd())){
						
						actualSecond=DateUtil.dateDiff(ye0072CondA.getOverTimeRFrom(),ye0072CondA.getLunchStart())
								+ DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getOverTimeRTo());
					//退勤时间在午休开始与午休结束之间
					} else if (ye0072CondA.getOverTimeRTo().before(ye0072CondA.getLunchEnd())
							&& ye0072CondA.getOverTimeRTo().after(ye0072CondA.getLunchStart())){
						
						actualSecond=DateUtil.dateDiff(ye0072CondA.getOverTimeRFrom(),ye0072CondA.getLunchStart());
					//退勤时间在午休开始之前
					} else if (ye0072CondA.getOverTimeRTo().before(ye0072CondA.getLunchStart())){
						
						actualSecond=DateUtil.dateDiff(ye0072CondA.getOverTimeRFrom(),ye0072CondA.getOverTimeRTo());
					} else {
						
						actualSecond=0;
					}
				//出勤时间在午休开始与午休结束之间
				} else if (ye0072CondA.getOverTimeRFrom().before(ye0072CondA.getLunchEnd())
						&& ye0072CondA.getOverTimeRFrom().after(ye0072CondA.getLunchStart())){
					//退勤时间晚于晚休结束
					if (ye0072CondA.getOverTimeRTo().after(ye0072CondA.getDinnerEnd())){
						
						actualSecond=DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getDinnerStart())
							+ DateUtil.dateDiff(ye0072CondA.getDinnerEnd(),ye0072CondA.getOverTimeRTo());
					//退勤时间在晚休开始与晚休结束之间
					} else if (ye0072CondA.getOverTimeRTo().before(ye0072CondA.getDinnerEnd())
							&& ye0072CondA.getOverTimeRTo().after(ye0072CondA.getDinnerStart())){
						
						actualSecond=DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getDinnerStart());	
					//退勤时间在午休结束与晚休开始之间
					} else if (ye0072CondA.getOverTimeRTo().before(ye0072CondA.getDinnerStart())
							&& ye0072CondA.getOverTimeRTo().after(ye0072CondA.getLunchEnd())){
						
						actualSecond=DateUtil.dateDiff(ye0072CondA.getLunchEnd(),ye0072CondA.getOverTimeRTo());
					} else {
						
						actualSecond=0;
					}
				//出勤时间在午休结束与晚休开始之间
				} else if (ye0072CondA.getOverTimeRFrom().after(ye0072CondA.getLunchEnd())
						&& ye0072CondA.getOverTimeRFrom().before(ye0072CondA.getDinnerStart())){
					//退勤时间晚于晚休结束
					if (ye0072CondA.getOverTimeRTo().after(ye0072CondA.getDinnerEnd())){
						
						actualSecond=DateUtil.dateDiff(ye0072CondA.getOverTimeRFrom(),ye0072CondA.getDinnerStart())
							+ DateUtil.dateDiff(ye0072CondA.getDinnerEnd(),ye0072CondA.getOverTimeRTo());
					//退勤时间在晚休开始与晚休结束之间
					} else if (ye0072CondA.getOverTimeRTo().before(ye0072CondA.getDinnerEnd())
							&& ye0072CondA.getOverTimeRTo().after(ye0072CondA.getDinnerStart())){
						
						actualSecond=DateUtil.dateDiff(ye0072CondA.getOverTimeRFrom(),ye0072CondA.getDinnerStart());
					//退勤时间在午休结束与晚休开始之间
					} else if (ye0072CondA.getOverTimeRTo().before(ye0072CondA.getDinnerStart())
							&& ye0072CondA.getOverTimeRTo().after(ye0072CondA.getLunchEnd())){
						
						actualSecond=DateUtil.dateDiff(ye0072CondA.getOverTimeRFrom(),ye0072CondA.getOverTimeRTo());
					} else {
						
						actualSecond=0;
					}
				//出勤时间在晚休结束与晚休开始之间
				} else if (ye0072CondA.getOverTimeRFrom().after(ye0072CondA.getDinnerStart())
						&& ye0072CondA.getOverTimeRFrom().before(ye0072CondA.getDinnerEnd())){
					//退勤时间晚于晚休结束
					if (ye0072CondA.getOverTimeRTo().after(ye0072CondA.getDinnerEnd())){
						
						actualSecond=DateUtil.dateDiff(ye0072CondA.getDinnerEnd(),ye0072CondA.getOverTimeRTo());
					} else {
						actualSecond=0;
					}
				//出勤时间在晚休结束之后
				} else if (ye0072CondA.getOverTimeRFrom().after(ye0072CondA.getDinnerEnd())){
					
					actualSecond=DateUtil.dateDiff(ye0072CondA.getOverTimeRFrom(),ye0072CondA.getOverTimeRTo());
				} else {	
					actualSecond=0;
				}	
			}
		}
		
		//受益区分分歧
		if ( AttConstants.BenefitFlagEnum.FOR_MONEY.toString().equals(ye0072CondA.getBenefitFlg())){
			ye0072CondA.setActualSecondCash(actualSecond);
			ye0072CondABefore.setActualSecondCash(ye0072CondABefore.getActualSecondCash() + actualSecond);
			int actualMinutes = (int) (ye0072CondABefore.getActualSecondCash() / 60 % 60);
			int actualHours = (int) (ye0072CondABefore.getActualSecondCash() / 60 / 60);
			ye0072CondABefore.setOverTimeRCash(new StringBuilder(String.valueOf(actualHours)).append(":")
					.append(StringUtil.addZero(actualMinutes, 2)).toString());
		} else {
			ye0072CondA.setActualSecondRest(actualSecond);
			ye0072CondABefore.setActualSecondRest(ye0072CondABefore.getActualSecondRest() + actualSecond);
			int actualMinutes = (int) (ye0072CondABefore.getActualSecondRest() / 60 % 60);
			int actualHours = (int) (ye0072CondABefore.getActualSecondRest() / 60 / 60);
			ye0072CondABefore.setOverTimeRRest(new StringBuilder(String.valueOf(actualHours)).append(":")
					.append(StringUtil.addZero(actualMinutes, 2)).toString());
		}
		
		//人次编辑
		if (ye0072CondA.getApplySecondCash()!= 0 || ye0072CondA.getApplySecondRest()!= 0){
			ye0072CondABefore.setApplyPerCnt(ye0072CondABefore.getApplyPerCnt() + 1);
		} else {
			ye0072CondABefore.setApplyPerCnt(ye0072CondABefore.getApplyPerCnt());
		}
		
		if (ye0072CondA.getActualSecondCash()!= 0 || ye0072CondA.getActualSecondRest()!= 0){
			ye0072CondABefore.setActualPerCnt(ye0072CondABefore.getActualPerCnt() + 1);
		} else {
			ye0072CondABefore.setActualPerCnt(ye0072CondABefore.getActualPerCnt());
		}
		//状态编辑
		if (!AttConstants.AppStatus.APPROVED.toString().equals(ye0072CondA.getAttStateId()) &&
				!AttConstants.AppStatus.REJECTED.toString().equals(ye0072CondA.getAttStateId())) {
			ye0072CondABefore.setAttStateFlg("1");
		}
		
		return ye0072CondABefore;
	}
	
	/**
	 * 外层设值
	 * @return 
	 */
	private void setValueOutside( Ye0072CondA ye0072CondABefore, Ye0071CondA ye0071CondA, Ye0070CondA ye0070CondA) {
		
		// 按项目统计方式
		if (STATISTIC_MODE_BYPRJ.equals(ye0070CondA.getStatisticMode())){
			/** 所属项目组ID. */
			ye0071CondA.setPrjId(ye0072CondABefore.getPrjSubId());
			ye0071CondA.setPrjName(ye0072CondABefore.getPrjSubName());

			/** 项目合计表示文字. */
			ye0071CondA.setAppEndRow("项目合计");
			
			//年月编辑
			ye0072CondABefore.setStartSubYearMonth(new StringBuilder(ye0072CondABefore.getYear())
										.append("-").append(ye0072CondABefore.getMonth()).toString());
			//按年月
		} else if (STATISTIC_MODE_BYDATE.equals(ye0070CondA.getStatisticMode())) {
			/** 第一层年月 */
			ye0071CondA.setStartYearMonth(new StringBuilder(ye0072CondABefore.getYear())
										.append("-").append(ye0072CondABefore.getMonth()).toString());
			//年月编辑
			ye0072CondABefore.setStartSubYearMonth(new StringBuilder(ye0072CondABefore.getYear())
										.append("-").append(ye0072CondABefore.getMonth()).toString());

			/** 项目合计表示文字. */
			ye0071CondA.setAppEndRow("本月合计");
		}
		ye0071CondA.setSumApplySecondCash(ye0071CondA.getSumApplySecondCash() 
				+ ye0072CondABefore.getApplySecondCash());
		ye0071CondA.setSumApplySecondRest(ye0071CondA.getSumApplySecondRest() 
				+ ye0072CondABefore.getApplySecondRest());
		ye0071CondA.setSumActualSecondCash(ye0071CondA.getSumActualSecondCash() 
				+ ye0072CondABefore.getActualSecondCash());
		ye0071CondA.setSumActualSecondRest(ye0071CondA.getSumActualSecondRest() 
				+ ye0072CondABefore.getActualSecondRest());
		ye0071CondA.setSumApplyPerCnt(ye0071CondA.getSumApplyPerCnt() 
				+ ye0072CondABefore.getApplyPerCnt());
		ye0071CondA.setSumActualPerCnt(ye0071CondA.getSumActualPerCnt() 
				+ ye0072CondABefore.getActualPerCnt());

		//状态编辑
		if (("1").equals(ye0072CondABefore.getAttStateFlg())) {
			ye0072CondABefore.setAttState(AttConstants.AppStatusText.PENDING.toString());
			
			//操作(未全部审批完)
			StringBuilder linkSb = new StringBuilder();
			linkSb.append("<a href='#' onclick='showYe0060(\"").append(
					ye0072CondABefore.getPrjSubId()).append("\",\"").append(ye0072CondABefore.getStartSubYearMonth())
					.append("\")'>查看</a>&nbsp;&nbsp;").append(
					"<a href='#' onclick='operateYe0060(\"").append(
							ye0072CondABefore.getPrjSubId()).append("\",\"").append(
									ye0072CondABefore.getStartSubYearMonth()).append("\")'>审批</a>");
			ye0072CondABefore.setLinkObject(linkSb.toString());
		} else {
			ye0072CondABefore.setAttState(AttConstants.AppStatusText.APPROVED.toString());
			
			//操作(已全部审批完)
			StringBuilder linkSb = new StringBuilder();
			linkSb.append("<a href='#' onclick='showYe0060(\"").append(
					ye0072CondABefore.getPrjSubId()).append("\",\"").append(ye0072CondABefore.getStartSubYearMonth())
					.append("\")'>查看</a>&nbsp;&nbsp;").append("审批");
			ye0072CondABefore.setLinkObject(linkSb.toString());
		}
		
		/** 项目合计加班预计时间（有料）. */
		int sumapplyMinutescash = (int) (ye0071CondA.getSumApplySecondCash() / 60 % 60);
		int sumapplyHourscash = (int) (ye0071CondA.getSumApplySecondCash() / 60 / 60);
		ye0071CondA.setPrjoverTimepcash(new StringBuilder(String.valueOf(sumapplyHourscash)).append(":")
				.append(StringUtil.addZero(sumapplyMinutescash, 2)).toString());
		
		/** 项目合计加班预计时间（换休）. */
		int sumapplyMinutesrest = (int) (ye0071CondA.getSumApplySecondRest() / 60 % 60);
		int sumapplyHoursrest = (int) (ye0071CondA.getSumApplySecondRest() / 60 / 60);
		ye0071CondA.setPrjOverTimePRest(new StringBuilder(String.valueOf(sumapplyHoursrest)).append(":")
				.append(StringUtil.addZero(sumapplyMinutesrest, 2)).toString());
		
		/** 项目合计加班实际时间（有料）. */
		int sumactualMinutescash = (int) (ye0071CondA.getSumActualSecondCash() / 60 % 60);
		int sumactualHourscash = (int) (ye0071CondA.getSumActualSecondCash() / 60 / 60);
		ye0071CondA.setPrjOverTimeRCash(new StringBuilder(String.valueOf(sumactualHourscash)).append(":")
				.append(StringUtil.addZero(sumactualMinutescash, 2)).toString());
		
		/** 项目合计加班实际时间（换休）. */
		int sumactualMinutesrest = (int) (ye0071CondA.getSumActualSecondRest() / 60 % 60);
		int sumactualHoursrest = (int) (ye0071CondA.getSumActualSecondRest() / 60 / 60);
		ye0071CondA.setPrjOverTimeRRest(new StringBuilder(String.valueOf(sumactualHoursrest)).append(":")
				.append(StringUtil.addZero(sumactualMinutesrest, 2)).toString());
		
	}
	
	/**
	 * 内层设值
	 * @return 
	 */
	private void setValueInside( Ye0072CondA ye0072CondABefore, Ye0072CondA ye0072CondA, Ye0071CondA ye0071CondA ) {
		
		ye0071CondA.setSumApplySecondCash(ye0071CondA.getSumApplySecondCash() 
				+ ye0072CondABefore.getApplySecondCash());
		ye0071CondA.setSumApplySecondRest(ye0071CondA.getSumApplySecondRest() 
				+ ye0072CondABefore.getApplySecondRest());
		ye0071CondA.setSumActualSecondCash(ye0071CondA.getSumActualSecondCash() 
				+ ye0072CondABefore.getActualSecondCash());
		ye0071CondA.setSumActualSecondRest(ye0071CondA.getSumActualSecondRest() 
				+ ye0072CondABefore.getActualSecondRest());
		ye0071CondA.setSumApplyPerCnt(ye0071CondA.getSumApplyPerCnt() 
				+ ye0072CondABefore.getApplyPerCnt());
		ye0071CondA.setSumActualPerCnt(ye0071CondA.getSumActualPerCnt() 
				+ ye0072CondABefore.getActualPerCnt());
		
		//年月编辑
		ye0072CondABefore.setStartSubYearMonth(new StringBuilder(ye0072CondABefore.getYear())
									.append("-").append(ye0072CondABefore.getMonth()).toString());
		//状态编辑
		if (("1").equals(ye0072CondABefore.getAttStateFlg())) {
			ye0072CondABefore.setAttState(AttConstants.AppStatusText.PENDING.toString());
			
			//操作(未全部审批完)
			StringBuilder linkSb = new StringBuilder();
			linkSb.append("<a href='#' onclick='showYe0060(\"").append(
					ye0072CondABefore.getPrjSubId()).append("\",\"").append(ye0072CondABefore.getStartSubYearMonth())
					.append("\")'>查看</a>&nbsp;&nbsp;").append(
					"<a href='#' onclick='operateYe0060(\"").append(
							ye0072CondABefore.getPrjSubId()).append("\",\"").append(
									ye0072CondABefore.getStartSubYearMonth()).append("\")'>审批</a>");
			ye0072CondABefore.setLinkObject(linkSb.toString());
		} else {
			ye0072CondABefore.setAttState(AttConstants.AppStatusText.APPROVED.toString());
			
			//操作(已全部审批完)
			StringBuilder linkSb = new StringBuilder();
			linkSb.append("<a href='#' onclick='showYe0060(\"").append(
					ye0072CondABefore.getPrjSubId()).append("\",\"").append(ye0072CondABefore.getStartSubYearMonth())
					.append("\")'>查看</a>&nbsp;&nbsp;").append("审批");
			ye0072CondABefore.setLinkObject(linkSb.toString());
		}
	}
	
	/** 
	 *  {@inheritDoc}
	 */
	@Override
	public List<OrgInfo> getDepartInfo(String userId){
		List<OrgInfo> getDepartInfo = ye0070Dao.getDepartInfo(userId);
		return getDepartInfo;
	}
	/**
	 * @param ye0070Dao
	 *            the ye0070Dao to set
	 */
	public void setYe0070Dao(Ye0070Dao dao) {
		this.ye0070Dao = dao;
	}

	public void setAppOvertimeListSum(List<String> appOvertimeListSum) {
		this.appOvertimeListSum = appOvertimeListSum;
	}

	public List<String> getAppOvertimeListSum() {
		return appOvertimeListSum;
	}


	public void setRealOvertimeListSum(List<String> realOvertimeListSum) {
		this.realOvertimeListSum = realOvertimeListSum;
	}


	public List<String> getRealOvertimeListSum() {
		return realOvertimeListSum;
	}

	public void setAttComService(AttComService attComService) {
		this.attComService = attComService;
	}

	public AttComService getAttComService() {
		return attComService;
	}


}
