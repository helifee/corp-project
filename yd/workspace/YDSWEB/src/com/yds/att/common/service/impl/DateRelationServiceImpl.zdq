package com.yds.att.common.service.impl;

import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.yds.att.bean.AttEmpType;
import com.yds.att.bean.AttExrestInfo;
import com.yds.att.bean.AttInfo;
import com.yds.att.bean.AttMonReport;
import com.yds.att.bean.AttRestApp;
import com.yds.att.bean.AttYearRest;
import com.yds.att.common.service.DateRelationService;
import com.yds.att.common.dao.DateRelationDao;
import com.yds.att.service.AttConstants.AppStatus;
import com.yds.att.service.AttConstants.CycleFlagEnum;
import com.yds.att.service.AttConstants.DateTypeEnum;
import com.yds.att.service.AttConstants.PtoAddFlg;
import com.yds.att.service.AttConstants.VacationType;
import com.yds.att.service.AttConstants.WorkType;
import com.yds.gadget.bean.CalendarGadgetInfo;
import com.yds.util.service.DateUtil;
import com.yds.util.service.NumberUtil;

@Service("dateRelationService")
public class DateRelationServiceImpl implements DateRelationService {

	/** 注入Dao. */
	private DateRelationDao dateRelationDao;
	// 考勤特殊阳历日期
	private static List<CalendarGadgetInfo> gadgetInfo;
	// 考勤特殊阴历日期
	private static List<CalendarGadgetInfo> gadgetInfoLunar;
	// 阴历阳历转换
	private final static int MONTH_DAYS[] = { 29, 30 };
	private final static int DAYS_MONTH[][] = {
		{ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 },
		{ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 }
		};
	private final static int DATAS[][] = {
		{ 23, 3, 2, 17, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0 },
		{ 41, 0, 4, 23, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1 },
		{ 30, 7, 5, 28, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1 },
		{ 49, 0, 6, 33, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
		{ 38, 0, 0, 38, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1 },
		{ 26, 6, 2, 44, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0 },
		{ 45, 0, 3, 49, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 },
		{ 35, 0, 4, 54, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1 },
		{ 24, 4, 5, 59, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1 },
		{ 43, 0, 0, 5, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1 },
		{ 32, 0, 1, 10, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1 },
		{ 21, 2, 2, 15, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
		{ 40, 0, 3, 20, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
		{ 28, 7, 5, 26, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1 },
		{ 47, 0, 6, 31, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1 },
		{ 36, 0, 0, 36, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 },
		{ 26, 5, 1, 41, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1 },
		{ 44, 0, 3, 47, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1 },
		{ 33, 0, 4, 52, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0 },
		{ 23, 3, 5, 57, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1 },
		{ 42, 0, 6, 2, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1 },
		{ 30, 8, 1, 8, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0 },
		{ 48, 0, 2, 13, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0 },
		{ 38, 0, 3, 18, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
		{ 27, 6, 4, 23, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0 },
		{ 45, 0, 6, 29, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0 },
		{ 35, 0, 0, 34, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1 },
		{ 24, 4, 1, 39, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0 },
		{ 43, 0, 2, 44, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0 },
		{ 32, 0, 4, 50, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1 },
		{ 20, 3, 5, 55, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0 },
		{ 39, 0, 6, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0 },
		{ 29, 7, 0, 5, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
		{ 47, 0, 2, 11, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1 },
		{ 36, 0, 3, 16, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0 },
		{ 26, 5, 4, 21, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1 },
		{ 45, 0, 5, 26, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1 },
		{ 33, 0, 0, 32, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1 },
		{ 22, 4, 1, 37, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1 },
		{ 41, 0, 2, 42, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1 },
		{ 30, 8, 3, 47, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1 },
		{ 48, 0, 5, 53, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1 },
		{ 37, 0, 6, 58, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1 },
		{ 27, 6, 0, 3, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0 },
		{ 46, 0, 1, 8, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0 },
		{ 35, 0, 3, 14, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1 },
		{ 24, 4, 4, 19, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1 },
		{ 43, 0, 5, 24, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1 },
		{ 32, 10, 6, 29, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1 },
		{ 50, 0, 1, 35, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0 },
		{ 39, 0, 2, 40, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1 },
		{ 28, 6, 3, 45, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0 },
		{ 47, 0, 4, 50, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1 },
		{ 36, 0, 6, 56, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0 },
		{ 26, 5, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1 },
		{ 45, 0, 1, 6, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0 },
		{ 34, 0, 2, 11, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0 },
		{ 22, 3, 4, 17, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0 },
		{ 40, 0, 5, 22, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0 },
		{ 30, 8, 6, 27, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1 },
		{ 49, 0, 0, 32, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1 },
		{ 37, 0, 2, 38, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1 },
		{ 27, 5, 3, 43, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1 },
		{ 46, 0, 4, 48, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1 },
		{ 35, 0, 5, 53, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1 },
		{ 23, 4, 0, 59, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1 },
		{ 42, 0, 1, 4, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1 },
		{ 31, 0, 2, 9, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0 },
		{ 21, 2, 3, 14, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
		{ 39, 0, 5, 20, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1 },
		{ 28, 7, 6, 25, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1 },
		{ 48, 0, 0, 30, 0, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1 },
		{ 37, 0, 1, 35, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1 },
		{ 25, 5, 3, 41, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
		{ 44, 0, 4, 46, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1 },
		{ 33, 0, 5, 51, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1 },
		{ 22, 4, 6, 56, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 },
		{ 40, 0, 1, 2, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 },
		{ 30, 9, 2, 7, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1 },
		{ 49, 0, 3, 12, 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1 },
		{ 38, 0, 4, 17, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0 },
		{ 27, 6, 6, 23, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1 },
		{ 46, 0, 0, 28, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0 },
		{ 35, 0, 1, 33, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0 },
		{ 24, 4, 2, 38, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1 },
		{ 42, 0, 4, 44, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1 },
		{ 31, 0, 5, 49, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0 },
		{ 21, 2, 6, 54, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1 },
		{ 40, 0, 0, 59, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1 },
		{ 28, 6, 2, 5, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0 },
		{ 47, 0, 3, 10, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1 },
		{ 36, 0, 4, 15, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1 },
		{ 25, 5, 5, 20, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0 },
		{ 43, 0, 0, 26, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1 },
		{ 32, 0, 1, 31, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0 },
		{ 22, 3, 2, 36, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0 }
		};

	/**
	 * @param dateRelationDao the dateRelationDao to set
	 */
	public void setDateRelationDao(DateRelationDao dateRelationDao) {
		this.dateRelationDao = dateRelationDao;
	}

	/**
	 * @return the dateRelationDao
	 */
	public DateRelationDao getDateRelationDao() {
		return dateRelationDao;
	}

	/**
	 * {@inheritDoc}
	 */
	public Map<String, Object> getLeaveTime(Date leaveDateFrom, Date leaveDateTo, String restType, String empId) throws Exception {
		// 返回值初始化
		Map<String, Object> mapResult = new HashMap<String, Object>();

		// 参数检查
		if (null == leaveDateFrom
				|| null == leaveDateTo
				|| null == restType || "".equals(restType)
				|| null == empId || "".equals(empId)) {
			return mapResult;
		}

		// 换休请假时间
		int leaveTime = 0;
		// 请假天数
		double leaveDays = 0;

		// 日期差计算
		long ss = DateUtil.dateDiff(leaveDateFrom, leaveDateTo);
		int day = (int)(ss / 60 / 60 / 24);

		// 日期格式化
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		SimpleDateFormat sdfTime = new SimpleDateFormat("HHmm");
		// 请假日（判断用）
		String tempDate = sdf.format(leaveDateFrom);

		// 对每个请假日处理
		for (int i = 0; i <= day; i++) {
			if (i != 0) {
				// 日期的下一天
				tempDate = DateUtil.dateAdd(tempDate, 1, 2);
			}

			// 判断是否是休日
			DateTypeEnum workEnum = getDateType(DateUtil.parse(tempDate));

			// 非休日时，检索出员工考勤信息
			if (null != workEnum && (DateTypeEnum.WORK.toString()).equals(workEnum.toString())) {
				// 应出勤日时
				String pStartTime = "";
				// 应退勤日时
				String pEndTime = "";
				// 午休开始日时
				String lunchStartTime = "";
				// 午休结束日时
				String lunchEndTime = "";

				// 请假日期的年
				String leaveDateYear = tempDate.substring(0, 4);
				// 请假日期的月
				String leaveDateMonth = tempDate.substring(5, 7);
				// 请假日期的日
				String leaveDateDay = tempDate.substring(8, 10);

				// 从考勤信息表取得员工应出勤信息
				AttInfo attInfo = dateRelationDao.selectEmpWorkInfo(empId, leaveDateYear, leaveDateMonth, leaveDateDay);

				// 如果考勤信息表无数据，则再从员工班型表取得
				if (null == attInfo) {
					AttEmpType attEmpType = dateRelationDao.selectEmpWorkInfo(empId, tempDate);

					if (null != attEmpType) {
						// 如果员工班型表有数据就设置各属性
						// 设定【应出勤日时】
						pStartTime = attEmpType.getAttendTime().substring(0, 4);
						// 设定【应退勤日时】
						pEndTime = attEmpType.getAbsentTime().substring(0, 4);
						// 设定【午休开始日时】
						lunchStartTime = attEmpType.getLunchTimeSt().substring(0, 4);
						// 设定【午休结束日时】
						lunchEndTime = attEmpType.getLunchTimeEnd().substring(0, 4);
					} else {
						throw new Exception("员工班型表无该员工数据。");
					}
				} else {
					// 设定【应出勤日时】
					pStartTime = sdfTime.format(attInfo.getPstartTime());
					// 设定【应退勤日时】
					pEndTime = sdfTime.format(attInfo.getPendTime());
					// 设定【午休开始日时】
					lunchStartTime = sdfTime.format(attInfo.getLunchTimeSt());
					// 设定【午休结束日时】
					lunchEndTime = sdfTime.format(attInfo.getLunchTimeEnd());
				}

				// 判断请假类型
				if (restType.length() == 1) {
					// 全天请假
					leaveDays += 1;
				} else if (restType.length() == 2){
					// 半天请假
					leaveDays += 0.5;
				}

				// 请假类型是换休时
				if (restType.equals(VacationType.FOR_HUGH.toString())) {
					// 整天时，【午休开始日时】-【应出勤日时】+【应退勤日时】-【午休结束日时】
					leaveTime = leaveTime + computeMinute(pStartTime, lunchStartTime) + computeMinute(lunchEndTime, pEndTime);
				} else if (restType.equals(VacationType.FOR_HUGH_S.toString())) {
					// 上午时，【午休开始日时】-【应出勤日时】
					leaveTime = leaveTime + computeMinute(pStartTime, lunchStartTime);
				} else if (restType.equals(VacationType.FOR_HUGH_X.toString())) {
					// 下午时，【应退勤日时】-【午休结束日时】
					leaveTime = leaveTime + computeMinute(lunchEndTime, pEndTime);
				}
			}
		}

		// 设定返回值
		mapResult.put("leaveTime", leaveTime);
		mapResult.put("leaveDays", leaveDays);

		return mapResult;
	}

	/**
	 * {@inheritDoc}
	 */
	public synchronized DateTypeEnum getDateType(Date aDate) {
		// 返回值定义
		DateTypeEnum returnDateType = null;

		// 参数检查
		if (null == aDate) {
			return returnDateType;
		}

		// 取出特殊阳历日期
		if (null == gadgetInfo || gadgetInfo.size() == 0) {
			gadgetInfo = dateRelationDao.selectHolInfoAll();
		}
		// 取出特殊阴历日期
		if (null == gadgetInfoLunar || gadgetInfoLunar.size() == 0) {
			gadgetInfoLunar = dateRelationDao.selectHolInfoLunarAll();
		}

		// 日期格式化
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
		SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy/MM/dd");
		String tempDate = sdf.format(aDate);
		String tempDate2 = sdf2.format(aDate);

		// 取出指定日期的年
		String dateYear = tempDate.substring(0,4);
		// 取出指定日期的月日
		String dateMonthDay = tempDate.substring(4);
		// 取出指定日期的类型
		String dateType = "";
		// 取出优先级最高的一条（远东上班>法定假日>远东休假）
		if (null != gadgetInfo && gadgetInfo.size() > 0) {
			for (int i = 0; i < gadgetInfo.size(); i++) {
				if (CycleFlagEnum.NO_CYCLE.toString().equals(gadgetInfo.get(i).getCycleFlg())) {
					if (dateYear.equals(gadgetInfo.get(i).getHolYear()) 
							&& dateMonthDay.equals(gadgetInfo.get(i).getHolDate())) {
						dateType = gadgetInfo.get(i).getHolFlg();
						break;
					}
				} else {
					if (dateMonthDay.equals(gadgetInfo.get(i).getHolDate())) {
						dateType = gadgetInfo.get(i).getHolFlg();
						break;
					}
				}
			}
		}

		// 假日表中也没有该日期时（阳历）
		if ("".equals(dateType)) {
			// 将日期转换为农历（YYMM）
			String dateLunar = getLunarCalendar(tempDate2);

			// 查找假日表，农历是否存在该日期
			// 取出优先级最高的一条（远东上班>法定假日>远东休假）
			if (null != gadgetInfoLunar && gadgetInfoLunar.size() > 0) {
				for (int i = 0; i < gadgetInfoLunar.size(); i++) {
					if (dateLunar.equals(gadgetInfoLunar.get(i).getHolDate())) {
						dateType = gadgetInfoLunar.get(i).getHolFlg();
						break;
					}
				}
			}

			// 假日表中也没有该日期时（阴历）
			if ("".equals(dateType)) {
				// 假日表无任何农历数据时，判断当前日期是否是周末
				if (isWeekend(tempDate)) {
					// 当前日期是周末,返回【远东休假】
					returnDateType = DateTypeEnum.HOLIDAY;
				} else {
					// 当前日期不是周末，返回【远东上班】
					returnDateType = DateTypeEnum.WORK;
				}
			} else {
				// 假日表中有数据时（阴历），判定该日期类型
				if (WorkType.YDS_WORK.toString().equals(dateType)) {
					// 返回【远东上班】
					returnDateType = DateTypeEnum.WORK;
				} else if (WorkType.YDS_HOL.toString().equals(dateType) || WorkType.WE_REST.toString().equals(dateType)) {
					// 返回【远东休假】
					returnDateType = DateTypeEnum.HOLIDAY;
				} else if (WorkType.CHN_REST.toString().equals(dateType)) {
					// 返回【法定假日】
					returnDateType = DateTypeEnum.REST;
				}
			}
		} else {
			// 假日表中有数据时（阳历），判定该日期类型
			if (WorkType.YDS_WORK.toString().equals(dateType)) {
				// 返回【远东上班】
				returnDateType = DateTypeEnum.WORK;
			} else if (WorkType.YDS_HOL.toString().equals(dateType) || WorkType.WE_REST.toString().equals(dateType)) {
				// 返回【远东休假】
				returnDateType = DateTypeEnum.HOLIDAY;
			} else if (WorkType.CHN_REST.toString().equals(dateType)) {
				// 返回【法定假日】
				returnDateType = DateTypeEnum.REST;
			}
		}

		// 返回值设定
		return returnDateType;
	}

	/**
	 * 判断是否是周末
	 * @param date 日期的字符串(YYYYMMDD)
	 * @return boolean ture:周末 false：非周末
	 */
	private boolean isWeekend(String date) {
		// 参数检查
		if ("".equals(date) || null == date){
			return false;
		}

		// 临时日期
		Date tempDate = DateUtil.parse(date);

		// 取得该日期时周几
		Calendar cal = Calendar.getInstance();
		cal.setTime(tempDate);
		int day = cal.get(Calendar.DAY_OF_WEEK);

		// 判断该天是否是周六或者周日
		if (day == Calendar.SATURDAY || day == Calendar.SUNDAY)
		{
			return true;
		}
		else
		{
			return false;
		}
	}

	/**
	 * 时刻的分钟差
	 * @param String 开始日时（HHmm）
	 * @param String 结束日时（HHmm）
	 * @return int 相差分钟
	 * @throws Exception
	 */
	private int computeMinute(String startTime, String endTime) throws Exception {
		// 参数检查
		if ("".equals(startTime)
				|| null == startTime
				|| startTime.length() != 4
				|| "".equals(endTime)
				|| null == endTime
				|| endTime.length() != 4){
			return 0;
		}

		// 将日时转换为分钟
		// 分钟数（计算用）
		int tempHourToMinute = 0;
		int tempMinute = 0;
		// 开始日时转为分钟
		tempHourToMinute = Integer.parseInt(startTime.substring(0, 2));
		tempMinute = Integer.parseInt(startTime.substring(2));
		int startTimeMinute = tempHourToMinute*60 + tempMinute;
		// 结束日时转为分钟
		tempHourToMinute = Integer.parseInt(endTime.substring(0, 2));
		tempMinute = Integer.parseInt(endTime.substring(2));
		int endTimeMinute = tempHourToMinute*60 + tempMinute;

		// 计算时间差
		int computeTime = endTimeMinute - startTimeMinute;

		// 设定返回值
		return computeTime;
	}

	@Override
	public int getExrestTime(String empId) throws Exception {
		// 返回值初始化
		int exrestTime = 0;

		// 参数检查
		if ("".equals(empId) || null == empId) {
			return exrestTime;
		}

		// 计算有效时间
		Date nowTime = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
		String validDate = sdf.format(nowTime);
		int validDateYear = Integer.parseInt(validDate.substring(0, 4)) - 1;
		String validTime = validDateYear + "-" + validDate.substring(4, 6) + "-" + validDate.substring(6, 8);

		// 有效可用换休时间
		AttExrestInfo attExrestInfo = dateRelationDao.selectExrestTimeApply(empId, validTime);
		int timeY = 0;
		if (null != attExrestInfo) {
			timeY = attExrestInfo.getHappenTime();
		}

		// 已申请但尚未使用的休假
		int timeX = 0;
		List<AttRestApp> attRestApp = dateRelationDao.selectExrestTime(empId);
		if (null != attRestApp && attRestApp.size() > 0) {
			for (int i = 0; i < attRestApp.size(); i++) {
				Map<String, Object> resultMap = getLeaveTime(attRestApp.get(i).getRestStartDate(),
						attRestApp.get(i).getRestEndDate(),
						attRestApp.get(i).getRestType(),
						empId);
				if (null != resultMap) {
					timeX += (Integer)resultMap.get("leaveTime");
				}
			}
		}

		// 计算剩余换休时间
		exrestTime = timeY - timeX;

		// 返回值
		return exrestTime;
	}

	@Override
	public int getExrestTime(String empId, Date leaveDateFrom) throws Exception {
		// 返回值初始化
		int exrestTime = 0;

		// 参数检查
		if ("".equals(empId) || null == empId) {
			return exrestTime;
		}

		// 计算有效时间
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
		String validDate = sdf.format(leaveDateFrom);
		int validDateYear = Integer.parseInt(validDate.substring(0, 4)) - 1;
		String validTime = validDateYear + "-" + validDate.substring(4, 6) + "-" + validDate.substring(6, 8);

		// 有效可用换休时间
		AttExrestInfo attExrestInfo = dateRelationDao.selectExrestTimeApply(empId, validTime);
		int timeY = 0;
		if (null != attExrestInfo) {
			timeY = attExrestInfo.getHappenTime();
		}

		// 已申请但尚未使用的休假
		int timeX = 0;
		List<AttRestApp> attRestApp = dateRelationDao.selectExrestTime(empId);
		if (null != attRestApp && attRestApp.size() > 0) {
			for (int i = 0; i < attRestApp.size(); i++) {
				Map<String, Object> resultMap = getLeaveTime(attRestApp.get(i).getRestStartDate(),
						attRestApp.get(i).getRestEndDate(),
						attRestApp.get(i).getRestType(),
						empId);
				if (null != resultMap) {
					timeX += (Integer)resultMap.get("leaveTime");
				}
			}
		}

		// 计算剩余换休时间
		exrestTime = timeY - timeX;

		return exrestTime;
	}

	@Override
	public double getPtoDays(String ptoYear, String empId) throws Exception {
		// 返回值初始化
		double ptoDays = 0;

		// 参数检查
		if ("".equals(empId) || null == empId || "".equals(ptoYear) || null == ptoYear) {
			return ptoDays;
		}

		// 取出当年可用年休天数
		AttYearRest attYearRest = dateRelationDao.selectPtoValidTime(empId, ptoYear);

		// 计算剩余年休
		ptoDays = comPtodays(empId, ptoYear, attYearRest);

		// 返回值
		return ptoDays;
	}

	@Override
	public double getPtoDays(String empId, Date leaveDateFrom, Date leaveDateTo)
			throws Exception {
		// 返回值初始化
		double ptoDays = 0;

		// 参数检查
		if ("".equals(empId) || null == empId || null == leaveDateFrom || null == leaveDateTo) {
			return ptoDays;
		}

		// 时间格式转换
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
		String ptoYear = sdf.format(leaveDateFrom).substring(0, 4);

		// 取出当年可用年休天数
		AttYearRest attYearRest = dateRelationDao.selectPtoValidTime(empId, ptoYear, leaveDateFrom, leaveDateTo);

		// 计算剩余年休
		ptoDays = comPtodays(empId, ptoYear, attYearRest);

		// 返回值
		return ptoDays;
	}

	/**
	 * 计算剩余年休
	 * @param empId 员工ID
	 * @param ptoYear 申请年
	 * @param attYearRest 年休天数信息
	 * @return double 剩余年休天数
	 * @throws Exception
	 */
	private double comPtodays(String empId, String ptoYear, AttYearRest attYearRest) throws Exception {
		// 返回值初始化
		double ptoDays = 0;

		// 当年可用年休计算
		double ptoValidDaysW = 0;
		if (null != attYearRest) {
			if (PtoAddFlg.ZHUANJIEKEYONG.toString().equals(attYearRest.getPtoAddDaysFlg())) {
				ptoValidDaysW = attYearRest.getPtoDays() + attYearRest.getPtoAddDays();
			} else if (PtoAddFlg.ZHUANJIEBUKE.toString().equals(attYearRest.getPtoAddDaysFlg())) {
				ptoValidDaysW = attYearRest.getPtoDays();
			}
		}

		// 取出本年欠勤天数
		AttMonReport attMonReport = dateRelationDao.selectReportTime(empId, ptoYear);
		double reportDays = 0;
		if (null != attMonReport) {
			reportDays = attMonReport.getSickMinDay() + attMonReport.getPerMinDay()
			+ attMonReport.getBelateMinDay() + attMonReport.getLveEarlyMinDay();
		}

		// 取出对象年内的年休
		double restDays = 0;
		List<AttRestApp> attRestApp = dateRelationDao.selectRestApp(empId, ptoYear);

		if (null != attRestApp && attRestApp.size() != 0) {
			for (int i = 0; i < attRestApp.size(); i++) {
				// 取出所请年休天数
				Map<String, Object> mapResult = getLeaveTime(attRestApp.get(i).getRestStartDate(),
						attRestApp.get(i).getRestEndDate(), VacationType.ANNUAL_LEAVE.toString(), empId);
				restDays = restDays + (Double)mapResult.get("leaveDays");
			}
		}

		// 个人剩余年休计算
		ptoDays = ptoValidDaysW - reportDays - restDays;

		// 返回值
		return ptoDays;
	}

	@Override
	public Map<String, Object> getExactLeaveTime(AttInfo attInfo) throws Exception {
		// 返回值初始化
		Map<String, Object> mapResult = new HashMap<String, Object>();

		// 参数检查
		if (null == attInfo) {
			return mapResult;
		}

		// 请假时间（分钟）
		int leaveTime = 0;
		// 请假天数（天）
		double leaveDays = 0;
		// 请假时间补充（分钟）
		int leaveTimeAddi = 0;
		// 请假天数补充（天）
		double leaveDaysAddi = 0;

		// 第一请假时间
		// 请假审批状态为待审批，审批中，已批准，直接改时
		if (AppStatus.PENDING.toString().equals(attInfo.getAppStatus()) ||
				AppStatus.APP_ING.toString().equals(attInfo.getAppStatus()) ||
				AppStatus.APPROVED.toString().equals(attInfo.getAppStatus()) ||
				AppStatus.EDIAT_DIRECT.toString().equals(attInfo.getAppStatus())) {
			// 上午换休，上午病假，上午事假，上午公出的场合
			if (VacationType.FOR_HUGH_S.toString().equals(attInfo.getRestType()) ||
					VacationType.SICK_LEAVE_S.toString().equals(attInfo.getRestType()) ||
					VacationType.LEAVE_S.toString().equals(attInfo.getRestType()) ||
					VacationType.BUSINESS_TRIP_S.toString().equals(attInfo.getRestType())) {
				// 【实际出勤日时】为空
				if (null == attInfo.getRstartTime()) {
					leaveTime = (int)(DateUtil.dateDiff(attInfo.getPstartTime(), attInfo.getLunchTimeSt()) / 60);
				// 【实际出勤日时】大于【午休开始日时】
				} else if (attInfo.getRstartTime().compareTo(attInfo.getLunchTimeSt()) > 0) {
					leaveTime = (int)(DateUtil.dateDiff(attInfo.getPstartTime(), attInfo.getLunchTimeSt()) / 60);
				// 【实际出勤日时】小于等于【午休开始日时】
				} else if (attInfo.getRstartTime().compareTo(attInfo.getLunchTimeSt()) <= 0) {
					leaveTime = (int)(DateUtil.dateDiff(attInfo.getPstartTime(), attInfo.getRstartTime()) / 60);
				}
			// 下午换休，下午病假，下午事假，下午公出的场合
			} else if (VacationType.FOR_HUGH_X.toString().equals(attInfo.getRestType()) ||
					VacationType.SICK_LEAVE_X.toString().equals(attInfo.getRestType()) ||
					VacationType.LEAVE_X.toString().equals(attInfo.getRestType()) ||
					VacationType.BUSINESS_TRIP_X.toString().equals(attInfo.getRestType())) {
				// 【实际退勤日时】为空
				if (null == attInfo.getRendTime()) {
					leaveTime = (int)(DateUtil.dateDiff(attInfo.getLunchTimeEnd(), attInfo.getPendTime()) / 60);
				// 【实际退勤日时】小于等于【午休结束日时】
				} else if (attInfo.getRendTime().compareTo(attInfo.getLunchTimeEnd()) <= 0) {
					leaveTime = (int)(DateUtil.dateDiff(attInfo.getLunchTimeEnd(), attInfo.getPendTime()) / 60);
				// 【实际退勤日时】大于【午休结束日时】
				} else if (attInfo.getRendTime().compareTo(attInfo.getLunchTimeEnd()) > 0) {
					leaveTime = (int)(DateUtil.dateDiff(attInfo.getRendTime(), attInfo.getPendTime()) / 60);
				}
			}

			// 请假时间为负值则记为零
			if (leaveTime < 0 ) {
				leaveTime = 0;
			}
		// 请假审批状态为空，否决或者撤销时
		} else if ("".equals(attInfo.getAppStatus()) ||
				AppStatus.REJECTED.toString().equals(attInfo.getAppStatus()) ||
				AppStatus.REVOKEED.toString().equals(attInfo.getAppStatus())) {
			leaveTime = 0;
		}

		// 当日应出勤时间（分钟）
		long pWorkTimeFirst = (DateUtil.dateDiff(attInfo.getPstartTime(), attInfo.getLunchTimeSt()) +
				DateUtil.dateDiff(attInfo.getLunchTimeEnd(), attInfo.getPendTime())) / 60;
		// 请假天数设定
		leaveDays = NumberUtil.round((double)leaveTime / pWorkTimeFirst, 3, BigDecimal.ROUND_HALF_UP);

		// 第二请假时间
		// 请假审批状态为待审批，审批中，已批准，直接改时
		if (AppStatus.PENDING.toString().equals(attInfo.getAppStatusAddi()) ||
				AppStatus.APP_ING.toString().equals(attInfo.getAppStatusAddi()) ||
				AppStatus.APPROVED.toString().equals(attInfo.getAppStatusAddi()) ||
				AppStatus.EDIAT_DIRECT.toString().equals(attInfo.getAppStatusAddi())) {
			// 上午换休，上午病假，上午事假，上午公出的场合
			if (VacationType.FOR_HUGH_S.toString().equals(attInfo.getRestTypeAddi()) ||
					VacationType.SICK_LEAVE_S.toString().equals(attInfo.getRestTypeAddi()) ||
					VacationType.LEAVE_S.toString().equals(attInfo.getRestTypeAddi()) ||
					VacationType.BUSINESS_TRIP_S.toString().equals(attInfo.getRestTypeAddi())) {
				// 【实际出勤日时】为空
				if (null == attInfo.getRstartTime()) {
					leaveTimeAddi = (int)(DateUtil.dateDiff(attInfo.getPstartTime(), attInfo.getLunchTimeSt()) / 60);
				// 【实际出勤日时】大于【午休开始日时】
				} else if (attInfo.getRstartTime().compareTo(attInfo.getLunchTimeSt()) > 0) {
					leaveTimeAddi = (int)(DateUtil.dateDiff(attInfo.getPstartTime(), attInfo.getLunchTimeSt()) / 60);
				// 【实际出勤日时】小于等于【午休开始日时】
				} else if (attInfo.getRstartTime().compareTo(attInfo.getLunchTimeSt()) <= 0) {
					leaveTimeAddi = (int)(DateUtil.dateDiff(attInfo.getPstartTime(), attInfo.getRstartTime()) / 60);
				}
			// 下午换休，下午病假，下午事假，下午公出的场合
			} else if (VacationType.FOR_HUGH_X.toString().equals(attInfo.getRestTypeAddi()) ||
					VacationType.SICK_LEAVE_X.toString().equals(attInfo.getRestTypeAddi()) ||
					VacationType.LEAVE_X.toString().equals(attInfo.getRestTypeAddi()) ||
					VacationType.BUSINESS_TRIP_X.toString().equals(attInfo.getRestTypeAddi())) {
				// 【实际退勤日时】为空
				if (null == attInfo.getRendTime()) {
					leaveTimeAddi = (int)(DateUtil.dateDiff(attInfo.getLunchTimeEnd(), attInfo.getPendTime()) / 60);
				// 【实际退勤日时】小于等于【午休结束日时】
				} else if (attInfo.getRendTime().compareTo(attInfo.getLunchTimeEnd()) <= 0) {
					leaveTimeAddi = (int)(DateUtil.dateDiff(attInfo.getLunchTimeEnd(), attInfo.getPendTime()) / 60);
				// 【实际退勤日时】大于【午休结束日时】
				} else if (attInfo.getRendTime().compareTo(attInfo.getLunchTimeEnd()) > 0) {
					leaveTimeAddi = (int)(DateUtil.dateDiff(attInfo.getRendTime(), attInfo.getPendTime()) / 60);
				}
			}

			// 请假时间为负值则记为零
			if (leaveTimeAddi < 0 ) {
				leaveTimeAddi = 0;
			}
		// 请假审批状态为空，否决或者撤销时
		} else if ("".equals(attInfo.getAppStatusAddi()) ||
				AppStatus.REJECTED.toString().equals(attInfo.getAppStatusAddi()) ||
				AppStatus.REVOKEED.toString().equals(attInfo.getAppStatusAddi())) {
			leaveTimeAddi = 0;
		}

		// 当日应出勤时间（分钟）
		long pWorkTimeSecond = ((DateUtil.dateDiff(attInfo.getPstartTime(), attInfo.getLunchTimeSt()) +
				DateUtil.dateDiff(attInfo.getLunchTimeEnd(), attInfo.getPendTime())) / 60);
		// 请假天数设定
		leaveDaysAddi = NumberUtil.round((double)leaveTimeAddi / pWorkTimeSecond, 3, BigDecimal.ROUND_HALF_UP);

		// Map值设定
		mapResult.put("leaveTime", leaveTime);
		mapResult.put("leaveDays", leaveDays);
		mapResult.put("leaveTimeAddi", leaveTimeAddi);
		mapResult.put("leaveDaysAddi", leaveDaysAddi);

		// 返回值
		return mapResult;
	}

	/**
	 * 根据阴历取得对应的阳历日期（该日期必须在1936—2028年之间）
	 * @param String date  阴历日期（字符串）
	 * @return String 返回对应的阳历日期
	 * @throws Exception
	 */
	public static String getGregorianCalendar(String date) {
		Calendar c = getCalendar(date);
		int year = c.get(Calendar.YEAR);
		int month = c.get(Calendar.MONTH) + 1;
		int day = c.get(Calendar.DAY_OF_MONTH);
		int index = year - 1936;
		int endIndex = month;

		if ((DATAS[index][1] != 0) && (month > DATAS[index][1])) {
			endIndex++;
		}

		int dayNum = 0;

		for (int i = 0; i < (endIndex - 1); i++) {
			dayNum += MONTH_DAYS[DATAS[index][4 + i]];
		}

		dayNum += day;
		dayNum += DATAS[index][0];

		int year_days = 365;

		if (isLeapYear(year)) {
			year_days = 366;
		}

		if (dayNum > year_days) {
			year++;
			dayNum -= year_days;
		}

		month = 1;

		int dayOfMonth[] = DAYS_MONTH[0];

		if (isLeapYear(year)) {
			dayOfMonth = DAYS_MONTH[1];
		}

		int i = 0;

		for (; i < 12; i++) {
			dayNum -= dayOfMonth[i];

			if (dayNum <= 0) {
				break;
			}

			month++;
		}

		day = dayOfMonth[i] + dayNum;

		String rtnMonth;
		String rtnDay;
		if (month < 10) {
			rtnMonth = "0" + month;
		} else {
			rtnMonth = month + "";
		}
		if (day < 10) {
			rtnDay = "0" + day;
		} else {
			rtnDay = day + "";
		}

		return (year + "/" + rtnMonth + "/" + rtnDay);
	}

	/**
	 * 根据阳历取得对应的阴历日期（该日期必须在1936—2028年之间）
	 * @param String date 阳历日期（字符串）
	 * @return String 返回阴历日期（MMDD）
	 * @throws Exception
	 */
	public static String getLunarCalendar(String date) {
		Calendar calendar = getCalendar(date);
		int year = calendar.get(Calendar.YEAR);
		int month = 1;
		int day;

		if ((year < 1936) || (year > 2028)) {
			return "";
		}

		int index = year - 1936;
		int l_days = DATAS[index][0];
		int day_year = calendar.get(Calendar.DAY_OF_YEAR);
		int days;

		if (day_year >= l_days) {
			days = day_year - l_days;
		} else {
			index--;
			year--;

			Calendar c = getCalendar(year + "/12/31");
			days = (c.get((Calendar.DAY_OF_YEAR)) + day_year) - DATAS[index][0];
		}

		int i = 0;
		int day_num = 0;

		for (; i < 13; i++) {
			day_num += MONTH_DAYS[DATAS[index][i + 4]];

			if (day_num >= days) {
				break;
			}

			month++;
		}

		day = MONTH_DAYS[DATAS[index][i + 4]] - (day_num - days);

		if ((DATAS[index][1] != 0) && (month > DATAS[index][1])) {
			month--;
		}

		String rtnMonth;
		String rtnDay;
		if (month < 10) {
			rtnMonth = "0" + month;
		} else {
			rtnMonth = month + "";
		}
		if (day < 10) {
			rtnDay = "0" + day;
		} else {
			rtnDay = day + "";
		}
		return (rtnMonth + rtnDay);
	}

	/**
	 * 字符型转为日历型
	 * @param date 日期（YYYY/MM/DD）
	 * @return Calendar 日历型日期
	 */
	private static Calendar getCalendar(String date) {
		Date dd = getDate(date);
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(dd);

		return calendar;
	}

	/**
	 * 字符型转为日期型
	 * @param date 日期（YYYY/MM/DD）
	 * @return Calendar 日历型日期
	 */
	private static Date getDate(String date) {
		DateFormat format = new SimpleDateFormat("yyyy/MM/dd");
		Date dd = null;

		try {
			dd = format.parse(date);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return dd;
	}

	/**
	 * 判断是否是阳历闰年
	 * @param year 年份
	 * @return boolean 返回是否是闰年
	 */
	private static boolean isLeapYear(int year) {
		if ((year % 400) == 0) {
			return true;
		} else if ((year % 100) == 0) {
			return false;
		} else if ((year % 4) == 0) {
			return true;
		}

		return false;
	}
}
