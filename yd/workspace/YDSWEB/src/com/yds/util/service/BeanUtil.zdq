/*
 * @(#)BeanUtil.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 共通测试系统
 */
package com.yds.util.service;

import java.beans.BeanInfo;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.util.List;
import com.yds.base.bean.BaseBean;

/**
 * 处理Bean的工具类
 * 
 * @author tianjian
 * @version 1.00 2010/06/12
 */
public class BeanUtil {

	public static void copyBean(Object orig, Object dest) throws Exception {
		copyBean(orig, dest, null, null);
	}

	public static void copyBean(Object orig, Object dest,
			List<String> excludeProperties) throws Exception {
		copyBean(orig, dest, excludeProperties, null);
	}

	/**
	 * 得到Bean的信息.
	 * 
	 * @param orig
	 *            拷贝元Bean.
	 * @param dest
	 *            拷贝目标Bean
	 * @param excludeProperties
	 *            不需要拷贝的属性List
	 * @param includeProperties
	 *            需要拷贝的属性List
	 */
	public static void copyBean(Object orig, Object dest,
			List<String> excludeProperties, List<String> includeProperties)
			throws Exception {
		if (dest == null) {
			throw new IllegalArgumentException("No destination bean specified");
		}
		if (orig == null) {
			throw new IllegalArgumentException("No origin bean specified");
		}
		
		if(! (orig instanceof BaseBean) ){
			throw new IllegalArgumentException("没有继承BaseBean");
		}
		
		if(! (dest instanceof BaseBean) ){
			throw new IllegalArgumentException("没有继承BaseBean");
		}
		// 得到传入的两个Bean信息
		PropertyDescriptor[] destProps = getPropertyDescriptors(dest);
		PropertyDescriptor[] origProps = getPropertyDescriptors(orig);

		for (PropertyDescriptor origPd : origProps) {
			if (!isInclude(origPd.getDisplayName(), excludeProperties,
					includeProperties)) {
				continue;
			}
			// 把相同属性的值从元Bean拷到目标Bean
			for (PropertyDescriptor destPd : destProps) {
				if (origPd.getPropertyType() == destPd.getPropertyType()
						&& origPd.getDisplayName().equals(
								destPd.getDisplayName())) {
					destPd.getWriteMethod().invoke(dest,
							origPd.getReadMethod().invoke(orig));
				}
			}
		}
	}

	/**
	 * 得到Bean的信息.
	 * 
	 * @param bean
	 *            对象Bean.
	 * @return PropertyDescriptor[]
	 */
	public static PropertyDescriptor[] getPropertyDescriptors(Object bean)
			throws Exception {
		BeanInfo beanInfo = Introspector.getBeanInfo(bean.getClass(),
				Object.class);
		return beanInfo.getPropertyDescriptors();
	}

	/**
	 * 判断属性值是否需要拷贝.
	 * 
	 * @param property
	 *            Bean属性.
	 * @param excludeProperties
	 *            Bean不需要拷贝的属性List.
	 * @param includeProperties
	 *            Bean需要拷贝的属性List. excludeProperties里属性设置优先
	 * @return PropertyDescriptor[]
	 */
	private static boolean isInclude(String property,
			List<String> excludeProperties, List<String> includeProperties) {
		// 没有限制的时候
		if (excludeProperties == null 
				&& includeProperties == null) {
			return true;
		}

		if (excludeProperties != null && 0 != excludeProperties.size()) {
			// 如果有不包含的属性返回false
			if (excludeProperties.contains(property)) {
				return false;
			} else {
				if (includeProperties != null && 0 != includeProperties.size()) {
					// 如果当包含List里有这个属性时返回true
					if (includeProperties.contains(property)) {
						return true;
					} else {
						return false;
					}
				} else {
					return true;
				}
			}
		} else {
			// 如果当包含List里有这个属性时返回true
			if (includeProperties.contains(property)) {
				return true;
			} else {
				return false;
			}

		}
	}
}
