/*
 * @(#)SessionStoreManager.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 共通系统
 */

package com.yds.util.service;

import java.util.ArrayList;
import java.util.List;

import com.yds.common.service.SessionConstants;
import com.yds.common.service.SessionService;
import com.yds.util.bean.SessionStoreBean;

/**
 * 管理session中存储条件对象和数据对象
 * 
 * @author wangduo
 * @version 1.00 2010/06/24
 */
class SessionStoreManager {

	/**
	 * 利用指定的key设置条件对象
	 * 
	 * @param key
	 * 
	 * @param condition
	 *            条件对象
	 */
	public void setCondition(String key, Object condition) {
		getStore(key).setCondition(condition);
	}

	/**
	 * 利用指定的key取得条件对象
	 * 
	 * @param key
	 * 
	 * @return 条件对象
	 */
	public Object getCondition(String key) {
		return getStore(key).getCondition();
	}

	/**
	 * 利用指定的key设置数据对象
	 * 
	 * @param key
	 * 
	 * @param data
	 *            数据对象
	 */
	public void setData(String key, Object data) {
		getStore(key).setData(data);
	}

	/**
	 * 利用指定的key取得数据对象
	 * 
	 * @param key
	 * 
	 * @return 数据对象
	 */
	public Object getData(String key) {
		return getStore(key).getData();
	}

	/**
	 * 销毁存储列表
	 */
	public void destroy() {
		SessionService.delete(SessionConstants.STORELIST);
	}

	/**
	 * 判断参数key是否在storeList中
	 * @param key
	 * 
	 * @return boolean值
	 */
	public boolean isStore(String key) {
		List<SessionStoreBean> stores = getStoreList();

		for (SessionStoreBean store : stores) {

			if (store.getKey().equals(key)) {

				return true;
			}
		}
		return false;
	}

	/**
	 * 得到存储列表
	 * 
	 * @return 存储列表
	 */
	@SuppressWarnings("unchecked")
	private List<SessionStoreBean> getStoreList() {

		if (null == SessionService.get(SessionConstants.STORELIST)) {
			List<SessionStoreBean> datas = new ArrayList<SessionStoreBean>();
			SessionService.set(SessionConstants.STORELIST, datas);
			return datas;
		}

		return (List<SessionStoreBean>) SessionService
				.get(SessionConstants.STORELIST);

	}

	/**
	 * 得到key对应的存储对象
	 * 
	 * @param key
	 * 
	 * @return 存储对象
	 */
	private SessionStoreBean getStore(String key) {

		List<SessionStoreBean> stores = getStoreList();

		for (SessionStoreBean store : stores) {

			if (store.getKey().equals(key)) {

				// 删除其后的数据
				removeFrom(stores.indexOf(store), stores);

				return store;
			}
		}

		// 没有找到指定key的对象，生成一个新对象
		SessionStoreBean newStore = new SessionStoreBean();
		newStore.setKey(key);
		stores.add(newStore);

		return newStore;

	}

	/**
	 * 删除指定索引后的存储对象
	 * 
	 * @param index
	 *            索引
	 * @param datas
	 *            存储列表
	 */
	private void removeFrom(int index, List<SessionStoreBean> datas) {

		for (int i = datas.size() - 1; i > index; i--) {
			datas.remove(i);
		}

	}
}
