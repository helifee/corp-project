/*
 * @(#)StringUtil.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 共通系统
 */

package com.yds.util.service;

import java.text.NumberFormat;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.yds.common.service.CommonConstants;
import com.yds.common.service.CommonConstants.StrTypeEnum;



/**
 * 字符工具类.
 * 
 * @author qianguogrong
 * @version 1.00 2010/05/14
 */
public class StringUtil {


	/**
	 * 员工ID前加YD前缀.
	 * 
	 * @param inStr 不带YD的员工ID
	 * @return String 带YD的员工ID
	 */
	public static String leftPadYd(String inStr) {
		
		StringBuffer ret = new StringBuffer();
		if (inStr == null || "".equals(inStr)){
			return "";
		} else if (inStr.length() < 2){
			ret.append(CommonConstants.YD);
			ret.append(inStr);
		} else {
			if (CommonConstants.YD.equals(inStr.substring(0, 2)) ){
				return inStr;
			} else {
				ret.append(CommonConstants.YD);
				ret.append(inStr);
			}
		}

		return ret.toString();
	}
	
	/**
	 * 员工ID去除YD前缀.
	 * 
	 * @param inStr 带YD的员工ID
	 * @return String 不带YD的员工ID
	 */
	public static String leftTrimYd(String inStr) {

		if (inStr != null && inStr.length() >= 2) {
			
			if (CommonConstants.YD.equals(inStr.substring(0, 2)) ){
				return inStr.substring(2);
			} else {
				return inStr;
			}
		}
		return inStr;
	}
	
	/**
	 * 判断字符串的类型.
	 * 
	 * @param inStr 需要判断的字符串
	 * @return Integer 字符串的类型（数字类型，字符类型，汉字类型）
	 *  
	 */
	public static StrTypeEnum checkType(String inStr) {

		// 字符串的类型
		StrTypeEnum strType;
		if (inStr == null || "".equals(inStr)) {
			// 其他类型的设定
			strType = CommonConstants.StrTypeEnum.Other_Type;
		} else {
			
			// 判断是否为数字类型
			Pattern pattern = Pattern.compile("[0-9]*");
			Matcher isPattern = pattern.matcher(inStr);
			if(isPattern.matches() ) {
				// 数字类型设定
				strType = CommonConstants.StrTypeEnum.Num_Type;
			} else {
				// 判断是否为字母类型
				pattern = Pattern.compile("[a-zA-Z]*");
				isPattern = pattern.matcher(inStr);
				if(isPattern.matches() ){
					// 字母类型设定
					strType = CommonConstants.StrTypeEnum.Letter_Type;
				} else {
					pattern = Pattern.compile("[^0-9a-zA-Z]+");
					isPattern = pattern.matcher(inStr);
					// 判断是否为汉字类型
					if(isPattern.matches() ){
						// 汉字类型设定
						strType = CommonConstants.StrTypeEnum.Chinese_Type;
					} else {
						// 其他类型的设定
						strType = CommonConstants.StrTypeEnum.Other_Type;
					}
				}
			}
		}

		return strType;
	}
	
	/**
	 * 去掉指定所有字符（前，后，前后）
	 * 
	 * @param  inStr  被处理的字符串
	 * @param  unit   指定的字符单元
	 * @param  iFlg   -1：前，0：前后，1后 
	 * @return 去掉指定字符后的字符串
	 */
	public static String trimUnit(String inStr, String unit, int... iFlg){
		if(null == inStr) return null;
		if(null == unit) return inStr;
		int i=0;
		String outStr = "";
		if(iFlg.length != 0) i=iFlg[0];
		switch(i){
			case -1:
				outStr = inStr.replaceAll("^(" + unit + ")*", "");
				break;
			case 0:
				outStr = inStr.replaceAll("^(" + unit + ")*|(" + unit + ")*$", "");
				break;
			case 1:
				outStr = inStr.replaceAll("(" + unit + ")*$", "");
				break;
			default:
				outStr = inStr;
				break;
		}
		return outStr;
	}
	
	/**
	 * 取得指定位数的以"0"表示的字符串
	 * 
	 * @param bitNumber 位数
	 * @param str 指定的字符
	 * @return
	 */
	public static String getUnit(int bitNumber, String... str) {
		StringBuffer unit = new StringBuffer();
		String s = "0";
		if(str.length !=0){
			s = str[0];
		}

		for(int i = 0; i < bitNumber; i++) {
			unit.append(s);
		}
		return unit.toString();
	}
	
	/**
	 * 根据位数把int值补零
	 * 
	 * @param value
	 *            需要补零的值
	 * @param size
	 *            值要求是几位数
	 * @return String 补零后的值(把1变为‘001’用法：addZero(1,3) )
	 */
	public static String addZero(int value,int size){
		//得到一个NumberFormat的实例
        NumberFormat nf = NumberFormat.getInstance();
        //设置是否使用分组
        nf.setGroupingUsed(false);
        //设置最大整数位数
        nf.setMaximumIntegerDigits(size);
        //设置最小整数位数   
        nf.setMinimumIntegerDigits(size);
        
        return nf.format(value);
	}
	
	/**
	 * 去除指定字符串右侧的指定字符串
	 * @param str： 待处理的字符串
	 * @param remStr： 要去除的字符串
	 * @return 
	 */
	public static String rTrim(String str, String remStr) {
		if(null == str || "".equals(str)) {
			return "";
		}
		StringBuffer buf = new StringBuffer(str);
		int index = buf.lastIndexOf(remStr);
		while(index != -1) {
			buf.delete(index, buf.length());
			index = buf.lastIndexOf(remStr);
		}
		
		return buf.toString();
	}
}
