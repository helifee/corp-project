/*
 * @(#)Download.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 共通系统
 */
package com.yds.util.service;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.yds.common.service.CommonConstants;


/**
 * 取得一个URL的内容
 */

public class Download {
	/** 日志 */
	private static final Log LOG = LogFactory.getLog(Download.class);

	/** 读取文件缓冲大小  */
	private static final int BUFFER_SIZE = 4096;

	/**
	 * 将url的内容保存为文件（此方法只能用户HTTP协议）
	 * @param fileurl URL
	 * @param fileName 文件的路径
	 * @return 是否成功
	 */
	public static boolean saveUrlAs(String fileurl, String fileName) {
		// IO流
		DataInputStream in = null;
		DataOutputStream out = null;
		try {
			URL url = new URL(fileurl);
			HttpURLConnection connection = (HttpURLConnection) url.openConnection();
			// 模拟浏览器的User-Agent，防止站点屏蔽
			connection.setRequestProperty("User-Agent", CommonConstants.USER_AGENT);
			in = new DataInputStream(connection.getInputStream());
			out = new DataOutputStream(new FileOutputStream(fileName));
			byte[] buffer = new byte[BUFFER_SIZE];
			int count = 0;
			// 读取内容
			while ((count = in.read(buffer)) > 0) {
				out.write(buffer, 0, count);
			}
			return true;
		//异常处理
		} catch (MalformedURLException e) {
			LOG.error("Unable to connect to URL: " + fileurl, e);
			return false;
		} catch (IOException e) {
			LOG.error("IOException when connecting to URL:", e);
			return false;
		} finally {
			// 关闭读写的文件流
			try {
				in.close();
			} catch (IOException e) {
				LOG.error("IOException when connecting to URL:", e);
				return false;
			} finally {
				try {
					out.close();
				} catch (IOException e) {
					LOG.error("IOException when connecting to URL:", e);
					return false;
				}
			}

		}
	}

	/**
	 * 取得一个url的内容（此方法兼容HTTP和FTP协议）
	 * @param urlString URL
	 * @return url对应的内容
	 * @throws Exception 任何取得的错误异常
	 */
	public static String getDocumentAt(String urlString) throws Exception {
		// 临时结果存储
		StringBuffer document = new StringBuffer();
		BufferedReader reader = null;
		try {
			URL url = new URL(urlString);
			URLConnection conn = url.openConnection();
			// 模拟浏览器的User-Agent，防止站点屏蔽
			conn.setRequestProperty("User-Agent", CommonConstants.USER_AGENT);
			reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
			String line = null;
			// 读取内容
			while ((line = reader.readLine()) != null) {
				document.append(line + "\n");
			}
		//异常处理
		} catch (MalformedURLException e) {
			LOG.error("Unable to connect to URL: " + urlString, e);
			throw e;
		} catch (IOException e) {
			LOG.error("IOException when connecting to URL:", e);
			throw e;
		} finally {
			// 关闭读取的文件流
			try {
				reader.close();
			} catch (IOException e) {
				LOG.error("IOException when connecting to URL:", e);
				throw e;
			}			
		}
		return document.toString();
	}
}
