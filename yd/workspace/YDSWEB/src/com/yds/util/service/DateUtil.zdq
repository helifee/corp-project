/*
 * @(#)DateUtil.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 共通系统
 */

package com.yds.util.service;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import com.yds.batch.service.BatchConstants;
import com.yds.common.service.CommonConstants;
import com.yds.common.service.CommonConstants.TIME_FLG;


/**
 * 日期时间工具类.
 * 
 * @author songshu
 * @version 1.00 2010/03/03
 */
public class DateUtil {

	// 日期时间定数（ 0:年，1:月，2:日，3:时，4:分，5:秒）
	public static final int YEAR = 0;
	public static final int MONTH = 1;
	public static final int DAY = 2;
	public static final int HOUR = 3;
	public static final int MINUTE = 4;
	public static final int SECOND = 5;

	// 日期格式
	private static final SimpleDateFormat yyyyMMddFormat = new SimpleDateFormat("yyyy-MM-dd");
	private static final SimpleDateFormat yyyyMMddhhmmssFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

	// 定数
	private static final String weekName = "星期";
	private static final String[] weekDayName = { "日", "一", "二", "三", "四", "五", "六" };
	private static final String[] dateStr = { "天", "时", "分", "秒" };

	// 支持的日期格式
	private static final DateFormat[] DATE_FORMATS = { new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"),
			new SimpleDateFormat("yyyy/MM/dd HH:mm:ss"), new SimpleDateFormat("yyyy.MM.dd HH:mm:ss"),
			new SimpleDateFormat("yyyyMMdd HH:mm:ss"), new SimpleDateFormat("yyyy-MM-dd"),
			new SimpleDateFormat("yyyy/MM/dd"), new SimpleDateFormat("yyyy.MM.dd"), new SimpleDateFormat("yyyyMMdd"),
			new SimpleDateFormat(BatchConstants.MINUTE_FORMAT)};

	/**
	 * 指定日期字符串类型转换成日期型.
	 * 
	 * @param value 日期时间（String）
	 * @return Date 日期时间（Date）
	 */
	public static Date parse(String value) {
		// 遍历日期格式
		for (int i = 0; i < DATE_FORMATS.length; i++) {
			try {
				// value转化成指定格式
				return DATE_FORMATS[i].parse(value);
			} catch (ParseException e) {
				// 全部格式遍历 无法转换
				if (i == DATE_FORMATS.length - 1) {
					e.printStackTrace();
				} else {
					continue;
				}
			}
		}

		return null;
	}

	/**
	 * 指定日期字符串类型转换为日历型.
	 * 
	 * @param baseDate 指定日期
	 * @return Calendar
	 */
	public static Calendar parseDateTime(String baseDate) {
		Calendar cal = null;
		cal = new GregorianCalendar();

		// 设置 Calendar时间
		cal.setTime(parse(baseDate));
		return cal;
	}

	/**
	 * 日期加减.
	 * 
	 * @param strDate 指定日期
	 * @param icount （正数为加，负数为减）
	 * @param itype （加减类型 0:年，1:月，2:日，3:时，4:分，5:秒）
	 * @return String
	 */
	public static synchronized String dateAdd(String strDate, int icount, int itype) {
		Calendar cal = parseDateTime(strDate);

		// 加减类型
		int ptype = 0;
		if (itype == YEAR) {
			ptype = Calendar.YEAR;
		} else if (itype == MONTH) {
			ptype = Calendar.MONTH;
		} else if (itype == DAY) {
			ptype = Calendar.DAY_OF_MONTH;
		} else if (itype == HOUR) {
			ptype = Calendar.HOUR_OF_DAY;
		} else if (itype == MINUTE) {
			ptype = Calendar.MINUTE;
		} else if (itype == SECOND) {
			ptype = Calendar.SECOND;
		}
		cal.add(ptype, icount);

		String sdate = null;
		if (itype <= 2) {
			// 日期
			sdate = yyyyMMddFormat.format(cal.getTime());
		} else {
			// 日期时间
			sdate = yyyyMMddhhmmssFormat.format(cal.getTime());
		}

		return sdate;
	}

	/**
	 * 日期加减.
	 * 
	 * @param baseDate 指定日期
	 * @param field （加减类型 1:年，2:月，5:日，10:时，12:分，13:秒）
	 * @param num （正数为加，负数为减）
	 * @see java.util.Calendar
	 * @return Date 计算后的日期
	 */
	public static Date dateAdd(Date baseDate, int field, int num) throws ParseException {
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		
		Calendar cal = Calendar.getInstance();
		
		cal.setTime(baseDate);
		
		cal.add(field, num);
			
		return dateFormat.parse(dateFormat.format(cal.getTime()));
	}
	
	/**
	 * ymd加减运算
	 * 
	 * @return 日期
	 * 
	 * @throws ParseException
	 */
	public static Date ymdDateAdd(int field, int num) throws ParseException {
		
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
		
		Calendar cal = Calendar.getInstance();
		
		cal.add(field, num);
			
		return dateFormat.parse(dateFormat.format(cal.getTime()));
	}
	
	/**
	 * 两个日期比较.
	 * 
	 * @param strDateBegin 开始日期
	 * @param strDateEnd 结束日期
	 * @return String
	 */
	public static String dateDiff(String strDateBegin, String strDateEnd) {
		// 转换为日历类型
		Calendar calBegin = parseDateTime(strDateBegin);
		Calendar calEnd = parseDateTime(strDateEnd);

		// 转换为毫秒
		long lbegin = calBegin.getTimeInMillis();
		long lend = calEnd.getTimeInMillis();

		// 求差值
		long ss = Math.abs(((lbegin - lend) / 1000L));

		// 差值转换
		int sec = (int)(ss % 60);
		int min = (int)(ss / 60 % 60);
		int hour = (int)(ss / 60 / 60 % 24);
		int day = (int)(ss / 60 / 60 / 24);

		return day + dateStr[0] + hour + dateStr[1] + min + dateStr[2] + sec + dateStr[3];
	}
	
	/**
	 * 计算两个字符串日期之间的天数.
	 * 
	 * @param strDateBegin 开始日期
	 * @param strDateEnd 结束日期
	 * @return 两日期之间的天数
	 */
	public static int dateBetween(String strDateBegin, String strDateEnd) {
		// 转换为日历类型
		Calendar calBegin = parseDateTime(strDateBegin);
		Calendar calEnd = parseDateTime(strDateEnd);

		// 转换为毫秒
		long lbegin = calBegin.getTimeInMillis();
		long lend = calEnd.getTimeInMillis();

		// 求差值
		long ss = Math.abs(((lbegin - lend) / 1000L));

		// 差值转换
		int day = (int)(ss / 60 / 60 / 24);

		return day;
	}
	
	/**
	 * 
	 * 取得两个日期的时间差
	 * @param startDate 开始时间
	 * @param endDate 结束时间
	 * @return 时间差（秒）
	 */
	public static long dateDiff(Date startDate, Date endDate){
		// 转换为日历类型
		Calendar calBegin =new GregorianCalendar();
		Calendar calEnd =new GregorianCalendar();;
		calBegin.setTime(startDate);
		calEnd.setTime(endDate);

		// 转换为毫秒
		long lbegin = calBegin.getTimeInMillis();
		long lend = calEnd.getTimeInMillis();

		// 求差值
		long ss = Math.abs((long) ((lbegin - lend) / 1000L));
		
		return ss;
		
	}


	/**
	 * 判断某年是否为闰年.
	 * 
	 * @param 指定年份
	 * @return boolean
	 * @throws ParseException
	 */
	public static boolean isLeapYear(int yearNum) {
		boolean isLeep = false;
		// 判断是否为闰年
		if ((yearNum % 4 == 0) && (yearNum % 100 != 0)) {
			isLeep = true;
		} else if (yearNum % 400 == 0) {
			isLeep = true;
		} else {
			isLeep = false;
		}
		return isLeep;
	}

	/**
	 * 取得当前日期（格式为：yyyy-MM-dd）.
	 * 
	 * @return String 日期
	 */
	public static synchronized String getDate() {
		String sdate = yyyyMMddFormat.format(new Date());
		return sdate;
	}

	/**
	 * 取得当前时间（格式为：yyy-MM-dd HH:mm:ss）.
	 * 
	 * @return String 时间
	 */
	public static synchronized String getDateTime() {
		String sdate = yyyyMMddhhmmssFormat.format(new Date());
		return sdate;
	}

	/**
	 * 按指定格式取得当前时间
	 * 
	 * @param strFormat 指定格式
	 * @return String 时间
	 */
	public static String getTimeFormat(String strFormat) {
		SimpleDateFormat sdf = new SimpleDateFormat(strFormat);
		String sdate = sdf.format(new Date());
		return sdate;
	}

	/**
	 * 取得指定格式的指定时间
	 * 
	 * @param myDate 指定时间
	 * @param strFormat 指定格式
	 * @return String 时间
	 * @throws ParseException
	 */
	public static String setDateFormat(Date myDate, String strFormat) throws ParseException {
		SimpleDateFormat sdf = new SimpleDateFormat(strFormat);
		String sdate = sdf.format(myDate);

		return sdate;
	}

	public static String setDateFormat(Date myDate, SimpleDateFormat sdf) {

		if (myDate == null) {
			return null;
		}
		return sdf.format(myDate);
	}

	/**
	 * 取得指定日期是月中的某天
	 * 
	 * @param strDate 指定日期
	 * @return int
	 */
	public static int getDay(String strDate) {
		Calendar cal = parseDateTime(strDate);
		return cal.get(Calendar.DATE);
	}
	public static int getDay(Date date) {
		Calendar cal = new GregorianCalendar();
		cal.setTime(date);
		return cal.get(Calendar.DATE);
	}

	/**
	 * 取得指定日期是年中的某天.
	 * 
	 * @param strDate 指定日期
	 * @return int
	 */
	public static int getDayOfYear(String strDate) {
		Calendar cal = parseDateTime(strDate);
		return cal.get(Calendar.DAY_OF_YEAR);
	}

	/**
	 * 取得指定日期的月份.
	 * 
	 * @param strDate 指定日期
	 * @return int
	 */
	public static int getMonth(String strDate) {
		Calendar cal = parseDateTime(strDate);
		return cal.get(Calendar.MONTH) + 1;
	}
	public static int getMonth(Date date) {
		Calendar cal = new GregorianCalendar();
		cal.setTime(date);
		return cal.get(Calendar.MONTH) + 1;
	}

	/**
	 * 取得指定日期是星期中的某天.
	 * 
	 * @param strDate 指定日期
	 * @return String
	 */
	public static String getWeekDay(String strDate) {
		Calendar cal = parseDateTime(strDate);
		int iweek = cal.get(Calendar.DAY_OF_WEEK);
		iweek = iweek - 1;
		return weekName + weekDayName[iweek];
	}

	/**
	 * 取得指定日期的年份.
	 * 
	 * @param strDate 指定日期
	 * @return int
	 */
	public static int getYear(String strDate) {
		Calendar cal = parseDateTime(strDate);
		return cal.get(Calendar.YEAR);
	}
	public static int getYear(Date date) {
		Calendar cal = new GregorianCalendar();
		cal.setTime(date);
		return cal.get(Calendar.YEAR);
	}

	/**
	 * 计算当前日期某年的第几周.
	 * 
	 * @return interger
	 * @throws ParseException
	 */
	public static int getWeekNumOfYear() {
		Calendar calendar = Calendar.getInstance();
		int iweekNum = calendar.get(Calendar.WEEK_OF_YEAR);
		return iweekNum;
	}

	/**
	 * 计算指定日期某年的第几周.
	 * 
	 * @param 指定日期
	 * @return interger
	 * @throws ParseException
	 */
	public static int getWeekNumOfYearDay(String strDate) {
		Calendar calendar = parseDateTime(strDate);
		return calendar.get(Calendar.WEEK_OF_YEAR);
	}
	
	/**
	 * 从Date->String  将日期类型数据转换为String型数据.
	 * 
	 * @param date
	 *            the date to be converted
	 * @param sFormat
	 *            the DateFormat eg.:"yyyy-MM-dd"
	 * @return the converted String
	 */
	public static String dateToString(Date date, String... sFormat ) {

		if (date == null){
			return "0000-00-00";
		}
		
		if (sFormat.length == 0){
			sFormat = new String[]{"yyyy-MM-dd"};
		}
		
		if (sFormat[0] == null || sFormat[0].length()==0) {
			sFormat[0] = "yyyy-MM-dd";
		}
		SimpleDateFormat formatter = new SimpleDateFormat(sFormat[0]);
		try {

			// date转换为String
			return formatter.format(date);
		} catch (Exception e) {

			// 不明错误
			e.printStackTrace();
			return "0000-00-00";
		}
	}
	
	/**
	 * 取的时间的小时和或者分钟
	 * 
	 * @param intime
	 *            要转化的时间
	 * @param hhmmflg
	 *            取得小时和分的flg
	 * @return String 时间的小时或者分钟
	 */
	public static String getSplitTime(String inTime, TIME_FLG timeFlg) {
		String outTime = null;
		if (inTime != null && inTime.length() == 8) {
			if (timeFlg == CommonConstants.TIME_FLG.HH) {
				outTime = inTime.substring(0, 2);
			} else if(timeFlg == CommonConstants.TIME_FLG.MM){
				outTime = inTime.substring(3, 5);
			}else{
				outTime = inTime.substring(6);
			}
		}
		return outTime;
	}
	
	/**
	 * 清除指定日期对象的时分秒
	 * @param srcDate 源日期对象
	 * @return 清除时分秒的日期对象
	 */
	public static Date clearTime(Date srcDate) {
		Calendar cal = Calendar.getInstance();
		cal.setTime(srcDate);
		cal.set(Calendar.HOUR_OF_DAY, 0);
		cal.clear(Calendar.MINUTE);
		cal.clear(Calendar.SECOND);
		return cal.getTime();
	}

}
