/*
 * @(#)BaseBean.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 共通系统
 */

package com.yds.base.bean;

import java.beans.BeanInfo;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.io.Serializable;
import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * Bean基类.
 * 
 * @author zhaodong
 * @version 1.00 2010/03/05
 */
public class BaseBean implements Serializable {
	private static final long serialVersionUID = -214137397713914634L;
	/** LOG factory. */
	private static final Log LOG = LogFactory.getLog(BaseBean.class);

	/**
	 * 复写toString方法，打印Bean信息. 格式：csv(以tab键区分).
	 * 
	 * @param clazz bean的Class对象
	 * @return String
	 */
	@Override
	public String toString() {
		String beanToString = "";
		try {
			// 得到BeanInfo信息
			BeanInfo beanInfo = Introspector.getBeanInfo(getClass(), Object.class);
			beanToString = printBeanInfo(beanInfo);
		} catch (Exception e) {
			LOG.debug(getClass().getSimpleName() + " 打印数据有误！");
			e.printStackTrace();
		}
		return beanToString;
	}

	/**
	 * 得到Bean的属性信息.
	 * 
	 * @param beanInfo BeanInfo对象
	 * @return String
	 */
	private String printBeanInfo(BeanInfo beanInfo) throws Exception {
		StringBuffer sb = new StringBuffer();
		Map<String, Method> methodMap = new HashMap<String, Method>();
		// 得到bean中属性的信息
		PropertyDescriptor[] beanDesp = beanInfo.getPropertyDescriptors();

		// 打印属性名
		for (PropertyDescriptor element : beanDesp) {
			sb.append(element.getDisplayName() + "\t");
		}
		sb.append("\n");

		// 打印属性值
		for (PropertyDescriptor element : beanDesp) {
			Method em = element.getReadMethod();
			if (Date.class == element.getPropertyType()) {
				// 如果Bean里属性是Date型，打印格式为yyyy-MM-dd HH:mm:ss
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				if (null != em.invoke(this)) {
					sb.append(sdf.format(em.invoke(this)) + "\t");
				} else {
					sb.append(em.invoke(this) + "\t");
				}
			} else if (BaseBean.class == element.getPropertyType().getSuperclass()
					|| List.class == element.getPropertyType() || element.getPropertyType().isArray()) {
				// 如果Bean里属性也是Bean保存到Map中，下一行再打印值
				sb.append("\t");
				methodMap.put(element.getDisplayName(), em);
			} else {
				// 如果属性是普通类型，正常打印值
				sb.append(em.invoke(this) + "\t");
			}
		}

		// 打印Bean中为Bean属性值
		sb.append("\n");
		sb.append(printNestedBean(methodMap));
		return sb.toString();
	}

	/**
	 * 得到Bean中嵌套Bean，List，Map，数组属性的数据信息.
	 * 
	 * @param methodMap 属性为Bean或List或数组set方法
	 * @return String
	 */
	@SuppressWarnings("unchecked")
	private String printNestedBean(Map<String, Method> methodMap) throws Exception {
		StringBuffer sb = new StringBuffer();
		for (Map.Entry<String, Method> entry : methodMap.entrySet()) {
			Method method = (entry.getValue());
			sb.append(entry.getKey() + "\n");
			if (method.getReturnType().isArray()) {
				sb.append(printArray((Object[]) method.invoke(this)) + "\n");
			} else if (List.class == method.getReturnType()) {
				sb.append(printList((List<? extends Object>) method.invoke(this)) + "\n");
			} else {
				sb.append(method.invoke(this) + "\n");
			}
		}
		sb.append("\n");
		return sb.toString();
	}

	/**
	 * 打印数组数据信息.
	 * 
	 * @param array 对象数组
	 * @return String
	 */
	private String printArray(Object[] array) {
		StringBuffer arrayValue = new StringBuffer();
		for (Object o : array) {
			arrayValue.append(o.toString() + "\n");
		}
		return arrayValue.toString();
	}

	private <T> String printList(List<T> list) {
		StringBuffer listValue = new StringBuffer();
		if (null == list) {
			return null;
		}
		for (T t : list) {
			listValue.append(t.toString());
		}
		return listValue.toString();
	}
}
