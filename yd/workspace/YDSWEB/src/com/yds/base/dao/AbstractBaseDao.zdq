/*
 * @(#)AbstractBaseDao.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 共通系统
 */

package com.yds.base.dao;

import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.orm.ibatis.SqlMapClientTemplate;
import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

/**
 * 数据库访问基类.
 *
 * @author zhaodong
 * @version 1.00 2009/10/21
 */
public abstract class AbstractBaseDao extends SqlMapClientDaoSupport {

	/**
	 * 日志.
	 */
	protected static final Log LOG = LogFactory.getLog(AbstractBaseDao.class);
	/**
	 * spring包装后的SqlMapClientTemplate.
	 * @see org.springframework.orm.ibatis.SqlMapClientTemplate
	 */
	protected SqlMapClientTemplate smcTemplate = this.getSqlMapClientTemplate();

	/**
	 * Executes a mapped SQL INSERT statement. Insert is a bit different from other update methods, as it
	 * provides facilities for returning the primary key of the newly inserted row (rather than the effected
	 * rows). This functionality is of course optional. The parameter object is generally used to supply the
	 * input data for the INSERT values.
	 *
	 * @param key
	 *            The name of the statement to execute.
	 * @param bean
	 *            The parameter object (e.g. JavaBean, Map, XML etc.).
	 * @return The primary key of the newly inserted row. This might be automatically generated by the RDBMS, or
	 *         selected from a sequence table or other source.
	 * @throws RuntimeException
	 *             If an error occurs.
	 */
	protected Object insert(String key, Object bean) throws RuntimeException {
		try {

			Object result;
			long beforetime = System.currentTimeMillis();
			result = smcTemplate.insert(key, bean);
			if (LOG.isDebugEnabled()) {
				LOG.debug("Insert sql execute completed! " + String.valueOf(System.currentTimeMillis() - beforetime)
						+ " Millisecond");
			}

			return result;
		} catch (Throwable e) {
			LOG.debug("insert异常", e);
			throw new RuntimeException(null, e);

		}
	}

	/**
	 * Executes a mapped SQL UPDATE statement. Update can also be used for any other update statement type, such
	 * as inserts and deletes. Update returns the number of rows effected. The parameter object is generally
	 * used to supply the input data for the UPDATE values as well as the WHERE clause parameter(s).
	 *
	 * @param key
	 *            The name of the statement to execute.
	 * @param bean
	 *            The parameter object (e.g. JavaBean, Map, XML etc.).
	 * @return The number of rows effected.
	 * @throws RuntimeException
	 *             If an error occurs.
	 */
	protected int update(String key, Object bean) throws RuntimeException {
		try {

			int result;
			long beforetime = System.currentTimeMillis();
			result = smcTemplate.update(key, bean);
			if (LOG.isDebugEnabled()) {
				LOG.debug("Update sql execute completed! " + String.valueOf(System.currentTimeMillis() - beforetime)
						+ " Millisecond");
			}
			return result;
		} catch (Throwable e) {
			LOG.debug("update异常", e);
			throw new RuntimeException(null, e);
		}
	}

	/**
	 * Executes a mapped SQL DELETE statement. Delete returns the number of rows effected. The parameter object
	 * is generally used to supply the input data for the WHERE clause parameter(s) of the DELETE statement.
	 *
	 * @param key
	 *            The name of the statement to execute.
	 * @param bean
	 *            The parameter object (e.g. JavaBean, Map, XML etc.).
	 * @return The number of rows effected.
	 * @throws RuntimeException
	 *             If an error occurs.
	 */

	protected int delete(String key, Object bean) throws RuntimeException {
		try {

			int result;
			long beforetime = System.currentTimeMillis();
			result = smcTemplate.delete(key, bean);
			if (LOG.isDebugEnabled()) {
				LOG.debug("Delete sql execute completed! " + String.valueOf(System.currentTimeMillis() - beforetime)
						+ " Millisecond");
			}
			return result;
		} catch (Throwable e) {
			LOG.debug("delete异常", e);
			throw new RuntimeException(null, e);
		}
	}

	/**
	 * Executes a mapped SQL DELETE statement. Delete returns the number of rows effected. The parameter object
	 * is generally used to supply the input data for the WHERE clause parameter(s) of the DELETE statement.
	 *
	 * @param key
	 *            The name of the statement to execute.
	 * @return The number of rows effected.
	 * @throws RuntimeException
	 *             If an error occurs.
	 */
	protected int delete(String key) throws RuntimeException {
		return this.delete(key, "");
	}
	/**
	 * Executes a mapped SQL SELECT statement that returns data to populate a number of result objects. The
	 * parameter object is generally used to supply the input data for the WHERE clause parameter(s) of the
	 * SELECT statement.
	 *
	 * @param key
	 *            The name of the statement to execute.
	 * @return A List of result objects.
	 * @throws RuntimeException
	 *             If an error occurs.
	 */
	@SuppressWarnings("unchecked")
	protected List queryForList(String key) throws RuntimeException {
		return this.queryForList(key, null);
	}

	/**
	 * Executes a mapped SQL SELECT statement that returns data to populate a number of result objects. The
	 * parameter object is generally used to supply the input data for the WHERE clause parameter(s) of the
	 * SELECT statement.
	 *
	 * @param key
	 *            The name of the statement to execute.
	 * @param bean
	 *            The parameter object (e.g. JavaBean, Map, XML etc.).
	 * @return A List of result objects.
	 * @throws RuntimeException
	 *             If an error occurs.
	 */
	@SuppressWarnings("unchecked")
	protected List queryForList(String key, Object bean) throws RuntimeException {
		try {

			List result;
			long beforetime = System.currentTimeMillis();
			result = smcTemplate.queryForList(key, bean);
			if (LOG.isDebugEnabled()) {
				LOG.debug("Select sql execute completed! " + String.valueOf(System.currentTimeMillis() - beforetime)
						+ " Millisecond");
			}
			return result;
		} catch (Throwable e) {
			LOG.debug("queryForList异常", e);
			throw new RuntimeException(null, e);
		}
	}

	/**
	 * Executes a mapped SQL SELECT statement that returns data to populate a number of result objects within a
	 * certain range. The parameter object is generally used to supply the input data for the WHERE clause
	 * parameter(s) of the SELECT statement.
	 *
	 * @param key
	 *            The name of the statement to execute.
	 * @param bean
	 *            The parameter object (e.g. JavaBean, Map, XML etc.).
	 * @param firstRow
	 *            The number of results to ignore.
	 * @param totalRows
	 *            The maximum number of results to return.
	 * @return A List of result objects.
	 * @throws RuntimeException
	 *             If an error occurs.
	 */
	@SuppressWarnings("unchecked")
	protected List queryForList(String key, Object bean, int firstRow, int totalRows) throws RuntimeException {
		try {

			List result;
			long beforetime = System.currentTimeMillis();
			result = smcTemplate.queryForList(key, bean, firstRow, totalRows);
			if (LOG.isDebugEnabled()) {
				LOG.debug("Select sql execute completed! " + String.valueOf(System.currentTimeMillis() - beforetime)
						+ " Millisecond");
			}
			return result;
		} catch (Throwable e) {
			LOG.debug("queryForList异常", e);
			throw new RuntimeException(null, e);
		}
	}

	/**
	 * Executes a mapped SQL SELECT statement that returns data to populate a single object instance.
	 *
	 * @param key
	 *            The name of the statement to execute.
	 * @return The single result object populated with the result set data, or null if no result was found
	 * @throws RuntimeException
	 *             If more than one result was found, or if any other error occurs.
	 */
	protected Object queryForObject(String key) throws RuntimeException {
		return this.queryForObject(key, null);
	}

	/**
	 * Executes a mapped SQL SELECT statement that returns data to populate a single object instance. The
	 * parameter object is generally used to supply the input data for the WHERE clause parameter(s) of the
	 * SELECT statement.
	 *
	 * @param key
	 *            The name of the statement to execute.
	 * @param bean
	 *            The parameter object (e.g. JavaBean, Map, XML etc.).
	 * @return The single result object populated with the result set data, or null if no result was found
	 * @throws RuntimeException
	 *             If more than one result was found, or if any other error occurs.
	 */
	protected Object queryForObject(String key, Object bean) throws RuntimeException {
		try {

			Object result;
			long beforetime = System.currentTimeMillis();
			result = smcTemplate.queryForObject(key, bean);
			if (LOG.isDebugEnabled()) {
				LOG.debug("Select sql execute completed! " + String.valueOf(System.currentTimeMillis() - beforetime)
						+ " Millisecond");
			}
			return result;
		} catch (Throwable e) {
			LOG.debug("queryForObject异常", e);
			throw new RuntimeException(null, e);
		}
	}

	/**
	 * Executes a mapped SQL SELECT statement that returns data to populate a number of result objects that will
	 * be keyed into a Map. The parameter object is generally used to supply the input data for the WHERE clause
	 * parameter(s) of the SELECT statement.
	 *
	 * @param key
	 *            The name of the statement to execute.
	 * @param bean
	 *            The parameter object (e.g. JavaBean, Map, XML etc.).
	 * @param mapKey
	 *            The property to be used as the key in the Map.
	 * @return A Map keyed by keyProp with values being the result object instance.
	 * @throws RuntimeException
	 *             If an error occurs.
	 */
	@SuppressWarnings("unchecked")
	protected Map queryForMap(String key, Object bean, String mapKey) throws RuntimeException {
		try {

			Map result;
			long beforetime = System.currentTimeMillis();
			result = smcTemplate.queryForMap(key, bean, mapKey);
			if (LOG.isDebugEnabled()) {
				LOG.debug("Select sql execute completed! " + String.valueOf(System.currentTimeMillis() - beforetime)
						+ " Millisecond");
			}
			return result;
		} catch (Throwable e) {
			LOG.debug("queryForMap异常", e);
			throw new RuntimeException(null, e);
		}
	}

	/**
	 * Executes a mapped SQL SELECT statement that returns data to populate a number of result objects from
	 * which one property will be keyed into a Map. The parameter object is generally used to supply the input
	 * data for the WHERE clause parameter(s) of the SELECT statement.
	 *
	 * @param key
	 *            The name of the statement to execute.
	 * @param bean
	 *            The parameter object (e.g. JavaBean, Map, XML etc.).
	 * @param keyProperty
	 *            The property to be used as the key in the Map.
	 * @param valueProperty
	 *            The property to be used as the value in the Map.
	 * @return A Map keyed by keyProp with values being the result object instance.
	 * @throws RuntimeException
	 *             If an error occurs.
	 */
	@SuppressWarnings("unchecked")
	protected Map queryForMap(String key, Object bean, String keyProperty, String valueProperty)
			throws RuntimeException {
		try {

			Map result;
			long beforetime = System.currentTimeMillis();
			result = smcTemplate.queryForMap(key, bean, keyProperty, valueProperty);
			if (LOG.isDebugEnabled()) {
				LOG.debug("Select sql execute completed! " + String.valueOf(System.currentTimeMillis() - beforetime)
						+ " Millisecond");
			}
			return result;
		} catch (Throwable e) {
			LOG.debug("queryForMap异常", e);
			throw new RuntimeException(null, e);
		}
	}

}
