/*
 * @(#) Yb0050ServiceImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东计算机社内网
 *    SubSystem: 人员管理
 */

package com.yds.employee.service.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

import org.springframework.stereotype.Service;

import com.yds.base.service.AbstractBaseService;
import com.yds.common.bean.OrgMapInfo;
import com.yds.employee.dao.Yb0050Dao;
import com.yds.employee.service.Yb0050Service;

/**
 * @see com.yds.employee.service.Yb0050Service
 * 
 */
@Service("yb0050Service")
public class Yb0050ServiceImpl extends AbstractBaseService implements
	Yb0050Service {

	private static final String bar1 = "<span class=\"org_info cur_pointer\" title=\"查看部门信息\" onclick=\"watchDeptInfo();\"></span>";
	private static final String bar2 = "<span class=\"org_add cur_pointer\" title=\"增加下属部门\" onclick=\"addSubDept();\"></span>";
	//private static final String bar3 = "<span class=\"org_list cur_pointer\" title=\"查看部门组织\" onclick=\"watchDeptOrg();\"></span>";
	private Yb0050Dao yb0050Dao;

	/**
	 * {@inheritDoc}
	 */
	@Override
	public OrgMapInfo getOrgInfoRoot(boolean hasPermitFlg, String... orgInfo) {
		
		String orgId = "";
		// 组织ID处理
		if (orgInfo.length != 0) {
			orgId = orgInfo[0];
		} 
		// 取得组织信息
		List<OrgMapInfo> orgMapInfos = yb0050Dao.getOrgMapInfoList(orgId);
		// 最上层名字显示全称
		//orgMapInfos.get(0).setName(orgMapInfos.get(0).getBufferName());
		// 组织信息转化为树形结构
		Stack<OrgMapInfo> stack = new Stack<OrgMapInfo>();
		for (OrgMapInfo node : orgMapInfos) {
			node.setChilds(new ArrayList<OrgMapInfo>());
			node.setOrgLev(trimZero(node.getOrgLev()));
			while (true) {
				// 初期时在栈中添加值
				if (stack.empty()) {
					stack.push(node);
					break;
				} else {
					// 如果是从属关系添加到子节点
					if (node.getOrgLev().startsWith(stack.peek().getOrgLev())) {
						node.setParentId(stack.peek().getId());
						stack.peek().getChilds().add(node);
						stack.push(node);
						break;
					} else {
						// 完成一个节点为子节点排序，从栈内弹出数据
						List<OrgMapInfo> childs = stack.peek().getChilds();
						sort(childs);
						stack.pop();
					}
				}
			}
		}
		// 剩余节点排序
		while (!stack.empty()) {
			List<OrgMapInfo> childs = stack.peek().getChilds();
			sort(childs);
			stack.pop();
		}
		
		// 节点信息及按钮的设置
		for (OrgMapInfo node : orgMapInfos) {
			// 节点信息的设置
			if ("comp".equals(node.getPro1()) && "1".equals(node.getPro2())) {
				node.setType("0");
			} else if ("comp".equals(node.getPro1()) && "2".equals(node.getPro2())) {
				node.setType("1");
			} else if ("dept".equals(node.getPro1()) && "1".equals(node.getPro2())) {
				node.setType("2");
			} else if ("dept".equals(node.getPro1()) && "2".equals(node.getPro2())) {
				node.setType("3");
			} else if ("prjt".equals(node.getPro1()) && "1".equals(node.getPro2())) {
				node.setType("4");
			} else if ("prjt".equals(node.getPro1()) && "2".equals(node.getPro2())) {
				node.setType("5");
			}

			// 初期化时按钮信息的设置
			if (orgInfo.length == 0) {
				//if (!("comp".equals(node.getPro1()) && "1".equals(node.getPro2()))) {
					// 取得下属组织的个数
					int subCount = yb0050Dao.getSubCount(node.getId());
					// 没有下属组织时，查看部门组织不显示
					if (subCount == 1) {
						if(hasPermitFlg){
							node.setBar1(bar1);
							node.setBar2(bar2);
						}
						node.setSubCountFlg("0");
					} else {
						if(hasPermitFlg){
							node.setBar1(bar1);
							node.setBar2(bar2);
						}
						node.setSubCountFlg("1");
					}
				//}
			}
		}
		
		return orgMapInfos.get(0);
	}
	
	/**
	 * 除去末尾的零（5个一组）
	 * 
	 * @return String 除去零之后的字符串
	 */
	public String trimZero(String key) {
		while (key.endsWith("00000")) {
			key = key.substring(0, key.length() - 5);
		}
		return key;
	}
	
	/**
	 * 为子节点排序
	 * 
	 * @param childs 子节点信息
	 */
	public void sort(List<OrgMapInfo> childs) {

		for (int i = 0; i < childs.size(); i ++) {
			for(int j = i; j < childs.size(); j++){
				// 表示顺序排序
	        	if(childs.get(i).getDispSeq().compareTo(childs.get(j).getDispSeq()) > 0){
	        		OrgMapInfo childTemp = childs.get(i);
	        		childs.set(i, childs.get(j));
	        		childs.set(j, childTemp);
	            }else if (childs.get(i).getDispSeq().compareTo(childs.get(j).getDispSeq()) == 0){
	            	// 相同的表示顺序按子节点个数排序
	            	//if (childs.get(i).getChilds().size() > childs.get(j).getChilds().size()) {
	            	// 相同的表示顺序按子节点阶层排序
	            	if (childs.get(i).getOrgLev().compareTo(childs.get(j).getOrgLev()) >0  ) {
	                	OrgMapInfo childTemp = childs.get(i);
	            		childs.set(i, childs.get(j));
	            		childs.set(j, childTemp);
	            	}
	            }
	        }
		}
	}

	/**
	 * @param yb0050Dao the yb0050Dao to set
	 */
	public void setYb0050Dao(Yb0050Dao yb0050Dao) {
		this.yb0050Dao = yb0050Dao;
	}

}
