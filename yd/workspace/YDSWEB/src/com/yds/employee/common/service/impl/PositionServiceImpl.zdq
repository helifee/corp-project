/*
 * @(#)PositionServiceImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东计算机社内网
 *    SubSystem: 员工管理
 */

package com.yds.employee.common.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;

import com.yds.base.service.AbstractBaseService;
import com.yds.common.bean.EmpPos;
import com.yds.common.bean.PositionTreeInfo;
import com.yds.common.bean.Tree;
import com.yds.common.bean.TreeListInfo;
import com.yds.common.dao.PositionDao;
import com.yds.common.service.PositionService;
import com.yds.util.service.ListToTreeCMB;

/**
 * @see com.yds.common.service.PositionService
 */
@Service("positionService")
public class PositionServiceImpl extends AbstractBaseService implements
		PositionService {
	
	private PositionDao positionDao;

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<Tree> getPositionTree() {
		
		//待返回的职位树List
		List<Tree> posTree = new ArrayList<Tree>();
		
		//查询的全部职位信息
		List<PositionTreeInfo> pos = positionDao.getAllPositions();
		
		//遍历职位信息时，职位区分No变更，前一个区分树的items.
		List<Tree> items = null;
		String preNo = "";
		
		for(int i = 0; i < pos.size(); i++) {
			//当前区分No.
			String currentNo = pos.get(i).getDiffNo();
			//如果两个No.相等，则将当前No.对应的分支添加到前一区分No.的items中
			if(currentNo.equals(preNo)) {
				items.add(new Tree(pos.get(i).getPosId(), pos.get(i).getPosName()));
			}else{
				//生成区分树
				Tree tree = new Tree();
				tree.setId(pos.get(i).getDiffNo());
				tree.setTxt(pos.get(i).getDiffName());
				
				//生成该树的items
				if(null != pos.get(i).getPosId()) {
					items = new ArrayList<Tree>();
					items.add(new Tree(pos.get(i).getPosId(), pos.get(i).getPosName()));
					tree.setItems(items);
				}
				
				//添加到返回List中
				posTree.add(tree);
			}
			//储存当前DiffNo
			preNo = pos.get(i).getDiffNo();
			
//			//第一条职位信息
//			if(i == 0) {
//				//生成区分树
//				Tree tree = new Tree();
//				tree.setId(pos.get(i).getDiffNo());
//				tree.setTxt(pos.get(i).getDiffName());
//				
//				//生成该树的items
//				if(null != pos.get(i).getPosId()) {
//					items = new ArrayList<Tree>();
//					items.add(new Tree(pos.get(i).getPosId(), pos.get(i).getPosName()));
//					tree.setItems(items);
//				}
//				
//				//添加到返回List中
//				posTree.add(tree);
//				
//			//非第一条职位信息
//			} else {
//				
//				//前一个区分No.
//				String preNo = pos.get(i - 1).getDiffNo();
//				
//				//当前区分No.
//				String currentNo = pos.get(i).getDiffNo();
//				
//				//如果两个No.相等，则将当前No.对应的分支添加到前一区分No.的items中
//				if(currentNo.equals(preNo)) {
//					items.add(new Tree(pos.get(i).getPosId(), pos.get(i).getPosName()));
//					
//				//如果不相等，则生成新的分支树。同i==0的情况
//				} else {
//					Tree tree = new Tree();
//					tree.setId(pos.get(i).getDiffNo());
//					tree.setTxt(pos.get(i).getDiffName());
//					
//					if(null != pos.get(i).getPosId()) {
//						items = new ArrayList<Tree>();
//						items.add(new Tree(pos.get(i).getPosId(), pos.get(i).getPosName()));
//						tree.setItems(items);
//					}
//					
//					posTree.add(tree);
//				}
//			}
		}
		
		return posTree;
	}


	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<EmpPos> getEmpPosList(String posTypeId, String... posName) {

		List<EmpPos> empPosList = new ArrayList<EmpPos>();
		
		// 职位类别ID
		if (!"".equals(posTypeId)) {
			empPosList = positionDao.getPosList(posTypeId);
		}
		// 如果传入其他参数，并且数据库中存在数据，则在list首位添加一条新记录
		if (0 != posName.length) {
			EmpPos empPos = new EmpPos();
			empPos.setPosId("");
			empPos.setPosName(posName[0]);
			empPosList.add(0, empPos);
		}
		return empPosList;
	}
	
	public List<TreeListInfo> getPosTreeInfoList(String... diff) {		
		//将数据库内检索出的分类列表转化成树形分类结构
		return ListToTreeCMB.convert(positionDao.getPosTreeInfoList(),diff);					
	}
		
	public void setPositionDao(PositionDao positionDao) {
		this.positionDao = positionDao;
	}		
}
