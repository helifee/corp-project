/*
 * @(#)EmpGrpHis.java
 * Copyright (c) 2010-2011 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 图书管理
 */
package com.yds.library.action;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.yds.base.action.AbstractBaseAction;
import com.yds.common.bean.UserInfo;
import com.yds.common.bean.UserResult;
import com.yds.common.service.UserPermitService;
import com.yds.library.service.LibrarypermService;
import com.yds.library.service.LogonService;
import com.yds.library.util.SessionConstants;
import com.yds.library.util.CommonConstants.DataSourceEnum;
import com.yds.util.service.DbContextHolder;
import com.yds.util.service.Session;
import com.yds.util.service.StringUtil;

/**
 * 主画面处理
 * 
 * @author zhangchi
 * @version 1.00 2010/11/26
 */
@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@Controller("logonAction")
public class LogonAction extends AbstractBaseAction {
	
	private static final long serialVersionUID = -5351592376179997048L;
	private LogonService logonService;
	private UserPermitService userPermitService;
	private String userId;
	private String userName;
	private String password;
	private String errormsg;
	private LibrarypermService librarypermService;
	private String destUrl;
	private static final Log LOG = LogFactory.getLog(LogonAction.class);
	
	
	/**
	 * 注销，清空session，重定向到重登录页面
	 * 
	 * @return SUCCESS
	 */
	public String logout() throws Exception {

		Session.destroy();

		return SUCCESS;

	}

	/**
	 * 登录处理
	 * 
	 * @return SUCCESS:登录成功 ERROR:登录不成功(用户名、密码错误或无权限)
	 */
	public String login() throws Exception {
		
		Session.destroy();

		this.setErrormsg("");
		String userIdYd = StringUtil.leftPadYd(userId);

		// 检查用户名、密码、权限(主处理)(旧系统数据库)
		UserResult userResult = null;
		// 检查新数据库中的密码版本
		if ("0".equals(this.logonService.verCheck(userIdYd))) {
			try {
				
				// 使用旧数据库源
				DbContextHolder.setDbType(DataSourceEnum.OLD.toString());
				
				// 验证密码(旧数据库)
				userResult = this.logonService.oldLogin(userIdYd, password);
			} catch (Exception e) {
				LOG.error("login error!", e);
			} finally {
				
				// 切换到默认数据库源
				DbContextHolder.clearDbType();
			}

			if (userResult == null) {
				return loginFail();
			} else {
				
				// 更改新数据库的密码版本及密码
				if (!this.logonService.updatePWInfo(userResult, password)) {
					return loginError();
				}
			}

		} else {
			
			// 检查用户名、密码、权限(主处理)（新系统数据库）
			if (!(this.logonService.login(userIdYd, password, false))) {
				return loginFail();
			}
		}
		
		UserInfo userInfo = (UserInfo) Session.get(SessionConstants.USERINFO);
		userName = userInfo.getUserName();
			
		// 用户权限取得
	    this.librarypermService.getLibraryPerm(userIdYd);
	    
		this.userPermitService.getUserPerm(userIdYd);

		return SUCCESS;
	}

	public LogonService getLogonService() {
		return logonService;
	}

	public void setLogonService(LogonService logonService) {
		this.logonService = logonService;
	}

	private String loginError(){
		setErrormsg(propMgr.getMessage("yds.com.error.0001"));
		return ERROR;
	}
	
	private String loginFail(){
		setErrormsg(propMgr.getMessage("yds.com.error.0002"));
		return ERROR;
	}
	
	public String getUserId() {
		return userId;
	}

	public void setUserId(String userId) {
		this.userId = userId;
	}

	/**
	 * @return the userPermitService
	 */
	public UserPermitService getUserPermitService() {
		return userPermitService;
	}

	/**
	 * @param userPermitService the userPermitService to set
	 */
	public void setUserPermitService(UserPermitService userPermitService) {
		this.userPermitService = userPermitService;
	}

	public String getUserName() {
		return userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public LibrarypermService getLibrarypermService() {
		return librarypermService;
	}

	public void setLibrarypermService(LibrarypermService librarypermService) {
		this.librarypermService = librarypermService;
	}

	public static Log getLOG() {
		return LOG;
	}
	public String getErrormsg() {
		return errormsg;
	}

	public void setErrormsg(String errormsg) {
		this.errormsg = errormsg;
	}

	public String getDestUrl() {
		return destUrl;
	}

	public void setDestUrl(String destUrl) {
		this.destUrl = destUrl;
	}
}
