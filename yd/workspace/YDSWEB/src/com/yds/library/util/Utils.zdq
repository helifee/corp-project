/*
 * @(#) BookSercthwebinfoMethod.java
 * Copyright (c) 2010-2011 大连远东计算机系统有限公司
 * All rights reserved.
 * Project: 远东公司内部网 工会图书管理系统
 * SubSystem: 
 */
package com.yds.library.util;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.SocketAddress;
import java.net.URL;
import java.net.URLConnection;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.Attribute;

import com.yds.library.bean.Bookinfo;

/**
 * 工具类
 * 
 */
public class Utils {
	/**
	 * 从根据isbn号从豆瓣获取数据。已经申请apikey，每分钟最多40次请求，足够用。
	 * 
	 * @param String
	 *            ：isbn
	 * @return sercthbean
	 */
	@SuppressWarnings("unchecked")
	public static Bookinfo getBookInfoByIsbn(String isbn) throws Exception {
		Bookinfo bookinfo = new Bookinfo();
		try {
			String apikey = "09c72190e1b75ed51d5564b2a5261c7f";
			String isbnUrl = "http://api.douban.com/book/subject/isbn/";
			String requestUrl = isbnUrl + isbn + "?apikey=" + apikey;
			URL url = new URL(requestUrl);
			SocketAddress addr = new InetSocketAddress("192.168.80.168", 8080);
			Proxy typeProxy = new Proxy(Proxy.Type.HTTP, addr);
			URLConnection urlConn = url.openConnection(typeProxy);
			InputStream is = urlConn.getInputStream();
			InputStreamReader isr = new InputStreamReader(is, "utf-8");
			BufferedReader br = null;
			StringBuilder sb;
			sb = new StringBuilder();
			try {
				br = new BufferedReader(isr);

				String line = null;
				while ((line = br.readLine()) != null) {
					sb.append(line);
				}
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				if (null != br) {
					br.close();
				}

			}

			Document doc = null;
			try {
				doc = DocumentHelper.parseText(sb.toString());
			} catch (DocumentException e2) {
				// TODO 自动生成 catch 块
				e2.printStackTrace();
			}
			// isbn号绑定
			bookinfo.setIsbn(isbn);
			// 指向根节点
			Element root;
			if (null != doc) {
				root = doc.getRootElement();

				// bookname书名解析
				if (root.element("title") != null) {
					Element title = root.element("title");
					bookinfo.setBookname(title.getTextTrim());
				}
				// author作者解析
				if (root.element("author") != null) {
					Element author = root.element("author");
					List authorlist = author.elements("name");// 所有的Item节点
					for (int i = 0; i < authorlist.size(); i++) {
						Element name = (Element) authorlist.get(i);
						bookinfo.setBookauthor(name.getTextTrim());
					}
				}

				// summary图书概要解析
				if (root.element("summary") != null) {
					Element summary = root.element("summary");
					String summarystr = summary.getTextTrim();
					if (summarystr.length() > 2000) {
						bookinfo.setBookoverdays("1");
						summarystr = summarystr.substring(0, 2000);
						System.out.print(summarystr.length());
					}
					bookinfo.setBooksummary(summarystr);
					// bookinfo.setBooksummary(summary.getTextTrim());
				}
				for (Iterator ie = root.elementIterator(); ie.hasNext();) {
					Element element = (Element) ie.next();

					// 枚举属性
					for (Iterator ia = element.attributeIterator(); ia
							.hasNext();) {
						Attribute attribute = (Attribute) ia.next();
						if ("href".equals(attribute.getName())) {
							// picadd图片地址解析
							bookinfo.setBookpicadd(attribute.getData()
									.toString());
						}

						if ("publisher".equals(attribute.getData())) {
							// 出版社解析
							bookinfo.setBookpublisher(element.getText());
						}
						if ("pubdate".equals(attribute.getData())) {
							// 出版日期解析
							String webdate = element.getText();
							if (element.getText().length() == 10) {
								// 日期转换成字符串
								SimpleDateFormat dateFormat = new SimpleDateFormat(
										"yyyy-MM-dd");
								Date date;
								date = dateFormat.parse(webdate);
								bookinfo.setBookpublishdate(dateFormat
										.format(date));
							} else {
								bookinfo
										.setBookpublishdate(plusDateFormat(webdate));
							}

						}
						// 打印出元素中的内容
						// System.out.println("all:" + element.getText());

					}
					// 枚举当前节点下所有子节点
					for (Iterator ieson = element.elementIterator(); ieson
							.hasNext();) {
						Element elementSon = (Element) ieson.next();
						System.out.println(elementSon.getName() + ":"
								+ elementSon.getText());
					}
				}
			}
		} catch (IOException e) {
			bookinfo = null;
			
		} catch (ParseException e) {
			bookinfo = null;
			
		}

		return bookinfo;
	}

	/**
	 * 将类似 YYYYMMDD 转化为 YYYY-MM-DD
	 */

	public static String plusDateFormat(String strDate) {

		String resultDate = null;
		if (strDate.length() > 4) {
			// 例如2008.5或2008.12的情况
			if (".".equals((String) strDate.subSequence(4, 5))) {
				if (strDate.length() == 6) {
					strDate = strDate.replace(".", "");

					String resultYear = (String) strDate.subSequence(0, 4);

					String resultMonth = (String) strDate.subSequence(4, 5);

					resultDate = resultYear + "-0" + resultMonth;
				}
				if (strDate.length() == 7) {
					strDate = strDate.replace(".", "");

					String resultYear = (String) strDate.subSequence(0, 4);

					String resultMonth = (String) strDate.subSequence(4, 6);

					resultDate = resultYear + "-" + resultMonth;
				}
				if (strDate.length() == 8) {
					strDate = strDate.replace(".", "");

					String resultYear = (String) strDate.subSequence(0, 4);

					String resultMonth = (String) strDate.subSequence(4, 5);

					String resultDay = (String) strDate.subSequence(5, 6);

					resultDate = resultYear + "-0" + resultMonth + "-0"
							+ resultDay;
				}
				if (strDate.length() == 9) {
					// 例如2010.1.13的情况
					if (".".equals((String) strDate.subSequence(6, 7))) {
						strDate = strDate.replace(".", "");

						String resultYear = (String) strDate.subSequence(0, 4);

						String resultMonth = (String) strDate.subSequence(4, 5);

						String resultDay = (String) strDate.subSequence(6, 8);

						resultDate = resultYear + "-0" + resultMonth + "-"
								+ resultDay;
					}
					// 例如2010.11.3的情况
					else {
						strDate = strDate.replace(".", "");

						String resultYear = (String) strDate.subSequence(0, 4);

						String resultMonth = (String) strDate.subSequence(4, 6);

						String resultDay = (String) strDate.subSequence(7, 8);

						resultDate = resultYear + "-" + resultMonth + "-0"
								+ resultDay;
					}
				}
			}
			// 例如2008-5或2008-12或2008-5-1或2008-12-1或2008-2-13的情况
			if ("-".equals((String) strDate.subSequence(4, 5))) {
				if (strDate.length() == 6) {
					strDate = strDate.replace("-", "");

					String resultYear = (String) strDate.subSequence(0, 4);

					String resultMonth = (String) strDate.subSequence(4, 5);

					resultDate = resultYear + "-0" + resultMonth;
				}
				if (strDate.length() == 7) {
					strDate = strDate.replace("-", "");

					String resultYear = (String) strDate.subSequence(0, 4);

					String resultMonth = (String) strDate.subSequence(4, 6);

					resultDate = resultYear + "-" + resultMonth;
				}
				if (strDate.length() == 8) {
					strDate = strDate.replace("-", "");

					String resultYear = (String) strDate.subSequence(0, 4);

					String resultMonth = (String) strDate.subSequence(4, 5);

					String resultDay = (String) strDate.subSequence(5, 6);

					resultDate = resultYear + "-0" + resultMonth + "-0"
							+ resultDay;
				}
				if (strDate.length() == 9) {
					// 例如2010-1-13的情况
					if ("-".equals((String) strDate.subSequence(6, 7))) {
						strDate = strDate.replace("-", "");

						String resultYear = (String) strDate.subSequence(0, 4);

						String resultMonth = (String) strDate.subSequence(4, 5);

						String resultDay = (String) strDate.subSequence(6, 8);

						resultDate = resultYear + "-0" + resultMonth + "-"
								+ resultDay;
					}
					// 例如2010-11-3的情况
					else {
						strDate = strDate.replace("-", "");

						String resultYear = (String) strDate.subSequence(0, 4);

						String resultMonth = (String) strDate.subSequence(4, 6);

						String resultDay = (String) strDate.subSequence(7, 8);

						resultDate = resultYear + "-" + resultMonth + "-0"
								+ resultDay;
					}
				}
			}
		}

		return resultDate;
	}
}