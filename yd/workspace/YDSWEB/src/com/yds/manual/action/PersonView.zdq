package com.yds.manual.action;

import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.yds.base.action.AbstractBaseAction;
import com.yds.common.service.CommonConstants;
import com.yds.manual.bean.Group;
import com.yds.manual.bean.Person;
import com.yds.manual.service.SessionStoreSampleService;
import com.yds.util.service.SessionStore;

@Scope(BeanDefinition.SCOPE_PROTOTYPE)
@Controller("personView")
public class PersonView extends AbstractBaseAction {

	private static final long serialVersionUID = -5194909305073803518L;
	
	/*Session中保存画面检索条件的Key*/
	private static final String PAGE_ID = "personInfo";
	private SessionStoreSampleService sessionStoreSampleService;

	private Person personInfo;
	
	private Group group;
	

	/**
	 * 得到指定ID的人员
	 */
	public String initSearchPerson() {
			//如果是别的页面返回或导航的时候
			// 从session里取得员工ID获得检索条件
			if(CommonConstants.ActionReloadFlg.Reload_Condition.value()
					.equals(super.getReloadFlg())){
				personInfo = (Person) SessionStore.getCondition(PAGE_ID);
				personInfo = sessionStoreSampleService.getPersons(personInfo).get(0);
			}else{
				
				//如果是人员检索页面迁移的时候
				if("personSearch".equals(super.getFromId())){
					
				}else{
					//如果是组增加页面迁移的时候 
					personInfo = new Person();
					personInfo.setId(group.getId());
				}
				if(sessionStoreSampleService.getPersons(personInfo) != null && sessionStoreSampleService.getPersons(personInfo).size()!= 0){
					personInfo = sessionStoreSampleService.getPersons(personInfo).get(0);
				}else{
					super.putOpTip("没有数据");
				}
				
				//为别的页面返回在session中保存检索条件
				//如果条件比较多，可以用Map来存
				//map.put("id",personInfo.getId();
				//map.put("mode","3");
				//SessionStore.setCondition(actionkey, map);
				Person backPerson = new Person();
				backPerson.setId(personInfo.getId());
				SessionStore.setCondition(PAGE_ID, backPerson);
			}
		return SUCCESS;
	}
	
	/**
	 * 删除指定人员
	 */
	public String deletePerson() {
		sessionStoreSampleService.deletePerson(personInfo);
		return SUCCESS;
	}
	
	/**
	 * @param sessionStoreSampleService the sessionStoreSampleService to set
	 */
	public void setSessionStoreSampleService(
			SessionStoreSampleService sessionStoreSampleService) {
		this.sessionStoreSampleService = sessionStoreSampleService;
	}

	/**
	 * @return the personInfo
	 */
	public Person getPersonInfo() {
		return personInfo;
	}

	/**
	 * @param personInfo the personInfo to set
	 */
	public void setPersonInfo(Person personInfo) {
		this.personInfo = personInfo;
	}
	
	/**
	 * @return the group
	 */
	public Group getGroup() {
		return group;
	}

	/**
	 * @param group the group to set
	 */
	public void setGroup(Group group) {
		this.group = group;
	}
}
