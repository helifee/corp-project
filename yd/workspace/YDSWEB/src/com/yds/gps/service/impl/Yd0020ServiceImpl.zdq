package com.yds.gps.service.impl;

import java.util.List;

import org.springframework.stereotype.Service;

import com.yds.base.service.AbstractBaseService;
import com.yds.common.service.SessionConstants;
import com.yds.common.service.SessionService;
import com.yds.common.service.CommonConstants.MsgTypeEnum;
import com.yds.common.service.CommonConstants.SparkMsgIDEnum;
import com.yds.common.service.CommonConstants.SparkSysIDEnum;
import com.yds.gps.bean.GpsAccount;
import com.yds.gps.bean.GpsExchangeHis;
import com.yds.gps.bean.GpsExchangeSum;
import com.yds.gps.bean.TansferCondA;
import com.yds.gps.bean.Yd0020CondA;
import com.yds.gps.common.service.EnmService;
import com.yds.gps.common.service.TansferService;
import com.yds.gps.dao.Yd0020Dao;
import com.yds.gps.service.GpsConstants;
import com.yds.gps.service.Yd0020Service;
import com.yds.util.bean.SparkMessagerBean;
import com.yds.util.service.SendMessage;
import com.yds.util.service.ServerInfo;
import com.yds.util.service.StringUtil;

/**
 * @see com.yds.employee.service.Yd0020Service
 */
@Service("yd0020Service")
public class Yd0020ServiceImpl extends AbstractBaseService implements
		Yd0020Service {

	private Yd0020Dao yd0020Dao;
	private EnmService enmService;
	private TansferService tansferService;

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<GpsExchangeHis> getExchangeHisList(Yd0020CondA param,
			int offset, int perCounts) {
		List<GpsExchangeHis> exChangeHisInfo = (List<GpsExchangeHis>) yd0020Dao
				.getExchangeHisList(param, offset, perCounts);
		return exChangeHisInfo;
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @throws Exception
	 */
	@Override
	public Long getTotalCount(Yd0020CondA yd0020CondA) throws Exception {
		return yd0020Dao.getTotalCount(yd0020CondA);

	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String getComRemain() {

		return yd0020Dao.getComRemain();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String getPesonRemain(String pesAccId) {

		return yd0020Dao.getPesonRemain(pesAccId);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public GpsAccount getCafeAccount() {

		return yd0020Dao.getCafeAccount();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public GpsAccount getGpsAccount() {

		return yd0020Dao.getGpsAccount();
	}

	/**
	 * {@inheritDoc}
	 * 
	 * @throws Exception
	 */
	@Override
	public GpsExchangeSum getExchangeHisSum(Yd0020CondA yd0020CondA)
			throws Exception {
		return yd0020Dao.getExchangeHisSum(yd0020CondA);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void updateAccountInfo(TansferCondA tansferCondA, String comAccId,
			String pesAccId) throws Exception {
		// Spark信息的发送
		SparkMessagerBean sparkMessagerBean = new SparkMessagerBean();
		// 消息的链接
		sparkMessagerBean.setMsg_url(ServerInfo.getURLPath()
				+ GpsConstants.SYSTEM_NAME + "/yd0010Init?"
				+ SessionConstants.REQUESTTARGET + "=1");
		// 发送消息的系统ID
		sparkMessagerBean.setSystem_id(SparkSysIDEnum.GP);
		// 发送消息的消息类型ID
		sparkMessagerBean.setMsg_id(SparkMsgIDEnum.GP_CK);
		// spark 消息类型
		sparkMessagerBean.setStatus(MsgTypeEnum.INSERT);
		// 设置交易类型为现金
		tansferCondA.setExType(GpsConstants.EX_CASH);
		if (tansferCondA.getIoFlag().equals(GpsConstants.INCOME)) {

			// 公司账户选中
			if (GpsConstants.ACC_COMPANY.equals(tansferCondA.getAccFlag())) {
				// 设置转入账户ID
				tansferCondA.setInId(comAccId);
			}
			// 个人账户
			else {
				tansferCondA.setInId(StringUtil.leftPadYd(pesAccId));
			}
			// 设置备注
			tansferCondA.setExRemarksI(propMgr.getMessage("yds.gps.info.0005",
					enmService.getEmpName(SessionService.getLoginUserId()),
					tansferCondA.getExMoney()));
			// 要发送的人员一览
			sparkMessagerBean.setEmpid(new String[] { tansferCondA.getInId() });
			// 消息的内容
			sparkMessagerBean.setMsg_content(propMgr.getMessage(
					"yds.gps.info.0005",
					enmService.getEmpName(SessionService.getLoginUserId()),
					tansferCondA.getExMoney()));
			SendMessage.asyncSend(sparkMessagerBean);

		} else {
			// 公司账户选中
			if (GpsConstants.ACC_COMPANY.equals(tansferCondA.getAccFlag())) {

				// 设置转出账户ID
				tansferCondA.setOutId(comAccId);
			} else {

				tansferCondA.setOutId(StringUtil.leftPadYd(pesAccId));
			}
			// 设置备注
			tansferCondA.setExRemarksO(propMgr.getMessage("yds.gps.info.0004",
					enmService.getEmpName(SessionService.getLoginUserId()),
					tansferCondA.getExMoney()));

			// 要发送的人员一览
			sparkMessagerBean
					.setEmpid(new String[] { tansferCondA.getOutId() });
			// 消息的内容
			sparkMessagerBean.setMsg_content(propMgr.getMessage(
					"yds.gps.info.0004",
					enmService.getEmpName(SessionService.getLoginUserId()),
					tansferCondA.getExMoney()));
			SendMessage.asyncSend(sparkMessagerBean);
		}
		// 进行转账处理
		tansferService.tansfer(tansferCondA);
	}

	/**
	 * @return the yd0020Dao
	 */
	public Yd0020Dao getYd0020Dao() {
		return yd0020Dao;
	}

	/**
	 * @param yd0020Dao
	 *            the yd0020Dao to set
	 */
	public void setYd0020Dao(Yd0020Dao yd0020Dao) {
		this.yd0020Dao = yd0020Dao;
	}

	/**
	 * @return the enmService
	 */
	public EnmService getEnmService() {
		return enmService;
	}

	/**
	 * @param enmService
	 *            the enmService to set
	 */
	public void setEnmService(EnmService enmService) {
		this.enmService = enmService;
	}

	/**
	 * @return the tansferService
	 */
	public TansferService getTansferService() {
		return tansferService;
	}

	/**
	 * @param tansferService
	 *            the tansferService to set
	 */
	public void setTansferService(TansferService tansferService) {
		this.tansferService = tansferService;
	}
}
