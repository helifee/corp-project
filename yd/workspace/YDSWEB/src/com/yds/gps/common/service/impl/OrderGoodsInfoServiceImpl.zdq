/*
 * @(#) OrderGoodsInfoServiceImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 社内团购
 */

package com.yds.gps.common.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.yds.base.service.AbstractBaseService;
import com.yds.gps.bean.GpsOrderDetail;
import com.yds.gps.bean.GpsOrderGoods;
import com.yds.gps.bean.TansferCondA;
import com.yds.gps.common.bean.GpsOrderInfo;
import com.yds.gps.common.dao.OrderGoodsInfoDao;
import com.yds.gps.common.service.OrderGoodsInfoService;
import com.yds.gps.common.service.TansferService;
import com.yds.gps.service.GpsConstants;
import com.yds.gps.service.TansferException;

/**
 * @see com.yds.OrderGoodsInfoService.service.OrderGoodsInfoService
 */
@Service("orderGoodsInfoService")
public class OrderGoodsInfoServiceImpl extends AbstractBaseService implements OrderGoodsInfoService {

	private OrderGoodsInfoDao orderGoodsInfoDao;
	private TansferService tansferService;

	/**
	 * @param orderGoodsInfoDao the orderGoodsInfoDao to set
	 */
	public void setOrderGoodsInfoDao(OrderGoodsInfoDao orderGoodsInfoDao) {
		this.orderGoodsInfoDao = orderGoodsInfoDao;
	}

	public void updateOrderGoodsInfo(List<GpsOrderDetail> gpsOrderDetailList, TansferCondA tansferCondA)  throws TansferException{
		
		// 更新订单商品的订购数量
		int length = gpsOrderDetailList.size();
		int allCnt = 0;
		for(int i = 0; i < length; i++){
			
			GpsOrderGoods gpsOrderGoods = new GpsOrderGoods();
			gpsOrderGoods.setOrderId(gpsOrderDetailList.get(i).getOrderId());
			gpsOrderGoods.setGoodsId(gpsOrderDetailList.get(i).getGoodsId());
			gpsOrderGoods.setOrderCnt(gpsOrderDetailList.get(i).getOrderCnt());
			allCnt = allCnt + gpsOrderDetailList.get(i).getOrderCnt();
			orderGoodsInfoDao.updateGpsOrderGoodsCnt(gpsOrderGoods);
		}
		
		// 更新订单详细的订购数量
		GpsOrderInfo gpsOrderInfo = new GpsOrderInfo();
		gpsOrderInfo.setOrderId(gpsOrderDetailList.get(0).getOrderId());
		gpsOrderInfo.setOrderCnt(allCnt);
		orderGoodsInfoDao.updateGpsOrderInfoCnt(gpsOrderInfo);
		
		// 判断是否为账户结算
		String orderId = tansferCondA.getOrderId();
		if (isAccountPay(orderId)) {
			// 转账处理（共通）
			tansferService.tansfer(tansferCondA, tansferCondA.isLessFlag());
		}
		
	}

	@Override
	public boolean isAccountPay(String orderId) {
		String payFlag = orderGoodsInfoDao.getPayFlag(orderId);
		if (GpsConstants.PAY_ACCOUNT.equals(payFlag)) {
			return true;
		} else {
			return false;
		}
		
	}

	@Override
	public boolean isManager(String userId, String orderId, boolean managerFlg) {

		Map<String, String> orderUserInfo = new HashMap<String,String>();
		orderUserInfo.put("userId", userId);
		orderUserInfo.put("orderId", orderId);
		orderUserInfo.put("managerFlg", (managerFlg?"1":"0"));
		int cnt = orderGoodsInfoDao.getMngOrder(orderUserInfo);
		return cnt>0 ? true:false;
	}
	
	/**
	 * @param tansferService the tansferService to set
	 */
	public void setTansferService(TansferService tansferService) {
		this.tansferService = tansferService;
	}

	public TansferService getTansferService() {
		return tansferService;
	}



}