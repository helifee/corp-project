/*
 * @(#)Yc0030ServiceImpl.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东计算机社内网
 *    SubSystem: 会议室管理
 */

package com.yds.meet.service.impl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.springframework.stereotype.Service;

import com.yds.base.service.AbstractBaseService;
import com.yds.common.service.ComSequenceService;
import com.yds.util.bean.SparkMessagerBean;
import com.yds.util.service.SendMessage;
import com.yds.util.service.ServerInfo;
import com.yds.common.service.SessionConstants;
import com.yds.common.service.SessionService;
import com.yds.common.service.CommonConstants.MsgTypeEnum;
import com.yds.common.service.CommonConstants.SparkMsgIDEnum;
import com.yds.common.service.CommonConstants.SparkSysIDEnum;
import com.yds.common.service.CommonConstants.TIME_FLG;

import com.yds.meet.bean.MetCyclemetInfo;
import com.yds.meet.bean.MetCyclemetUser;
import com.yds.meet.bean.MetDaymetInfo;
import com.yds.meet.bean.MetDaymetUser;
import com.yds.meet.bean.MetRoomInfo;
import com.yds.meet.bean.Yc0030MetInfo;
import com.yds.meet.dao.Yc0030Dao;
import com.yds.meet.service.MeetConstants;
import com.yds.meet.service.Yc0030Service;
import com.yds.meet.service.MeetConstants.CYCLEMET_DELETE;
import com.yds.meet.service.MeetConstants.CYCLEMET_MODIFY;
import com.yds.meet.service.MeetConstants.CYCLE_FLG;
import com.yds.meet.service.MeetConstants.DELAY_FLG;
import com.yds.meet.service.MeetConstants.RESERVE_FLG;
import com.yds.meet.service.MeetConstants.USER_PERMISSION;
import com.yds.util.service.DateUtil;

/**
 * @see com.yds.meet.service.Yc0030Service
 */
@Service("yc0030Service")
public class Yc0030ServiceImpl extends AbstractBaseService implements
	Yc0030Service {
	
	private Yc0030Dao yc0030Dao;
	private ComSequenceService comSequenceService;
	private static final String MEET = "meet";
	private static final String INSERT = "insert";
	private static final String DELETE = "delete";
	private static final String UPDATE = "update";
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public Yc0030MetInfo getYc0030MetInfo(Yc0030MetInfo yc0030MetInfo) throws Exception{
		
		MetDaymetInfo metDaymetInfo;
		MetCyclemetInfo metCyclemetInfo;
		List<MetCyclemetUser> metCyclemetUserLst;
		List<MetDaymetUser> metDaymetUserLst;
		StringBuffer userIdLst = new StringBuffer();
		StringBuffer userNmLst = new StringBuffer();
		String permission;
		
		// 预约类型为单日
		if(RESERVE_FLG.DAILY.value().equals(yc0030MetInfo.getReserveType())){
			
			// 会议ID
			Integer metId;
			// 会议开始日期
			Date metDate;
			// 初期化时
			if (yc0030MetInfo.getMetIdOld() == null) {
				
				// 会议ID
				metId = yc0030MetInfo.getMetId();
				yc0030MetInfo.setMetIdOld(metId);
				// 会议开始日期
				metDate = yc0030MetInfo.getStartDate();
				yc0030MetInfo.setStartDateOld(metDate);
				// 会议开始时间
				yc0030MetInfo.setStartTime(yc0030MetInfo.getStartHour() + ":" + yc0030MetInfo.getStartMinute() + ":00");
				yc0030MetInfo.setStartTimeOld(yc0030MetInfo.getStartTime());
				// 从周期切换到单日时
			} else {
				
				// 会议ID
				metId = yc0030MetInfo.getMetIdOld();
				// 会议开始日期
				metDate = yc0030MetInfo.getStartDateOld();
				// 会议开始时间
				yc0030MetInfo.setStartTime(yc0030MetInfo.getStartTimeOld());

			}
			
			metDaymetInfo = new MetDaymetInfo();
			metDaymetInfo.setMetId(metId);
			metDaymetInfo.setMetDate(metDate);
			metDaymetInfo.setMetStaTime(yc0030MetInfo.getStartTime());
			// 取得单日会议信息
			metDaymetInfo = yc0030Dao.getMetDaymetInfo(metDaymetInfo);
			if (metDaymetInfo == null ) {
				return null;
			} else {
				// 设置可选预约类型Flg
				yc0030MetInfo.setCanGetCycleInfo(canGetCycleInfo(metDaymetInfo));
				// 设置周期会议区分
				yc0030MetInfo.setCycleMetKb(metDaymetInfo.getCycleMetKb());
				// 设置会议开始日期
				yc0030MetInfo.setStartDate(metDaymetInfo.getMetDate());
				// 设置会议开始日期（json转换用）
				yc0030MetInfo.setStartDateS(DateUtil.setDateFormat(metDaymetInfo.getMetDate(),"yyyy-MM-dd"));
				// 设置会议开始时间
				yc0030MetInfo.setStartHour(DateUtil.getSplitTime(metDaymetInfo.getMetStaTime(),TIME_FLG.HH));
				yc0030MetInfo.setStartMinute(DateUtil.getSplitTime(metDaymetInfo.getMetStaTime(),TIME_FLG.MM));
				// 设置会议结束时间
				yc0030MetInfo.setEndHour(DateUtil.getSplitTime(metDaymetInfo.getMetEndTime(),TIME_FLG.HH));
				yc0030MetInfo.setEndMinute(DateUtil.getSplitTime(metDaymetInfo.getMetEndTime(),TIME_FLG.MM));
				yc0030MetInfo.setEndTime(metDaymetInfo.getMetEndTime());
				yc0030MetInfo.setEndTimeOld(yc0030MetInfo.getEndTime());
				// 设置会议主题公开标识
				yc0030MetInfo.setPublicFlg(metDaymetInfo.getPublicFlg().toString());
				yc0030MetInfo.setPublicFlg(metDaymetInfo.getPublicFlg().toString());
				// 设置会议主题
				yc0030MetInfo.setMetTopic(metDaymetInfo.getMetTopic());
				// 设置申请人名称
				yc0030MetInfo.setReserverNm(metDaymetInfo.getApplyUserNm());
				// 设置申请人ID
				yc0030MetInfo.setReserverId(metDaymetInfo.getApplyUserId());
				// 设置修改权限Flg
				if(metDaymetInfo.getApplyUserId().equals(SessionService.getLoginUserId())){
					yc0030MetInfo.setEditable(true);
				}
				// 设置循环会议ID
				yc0030MetInfo.setCycleMetId(metDaymetInfo.getCycleMetId());
				// 设置SPARK信息id
				yc0030MetInfo.setSignId(metDaymetInfo.getSignId());
				// 设置参加者人数
				yc0030MetInfo.setMetUserCnt(metDaymetInfo.getJoinUserCnt());
				// 取得参加人员信息
				metDaymetUserLst = yc0030Dao.getMetDaymetUserLst(metDaymetInfo);
				// 设置参加人员名称及ID
				if(metDaymetUserLst.size() > 0){
					userIdLst.append(metDaymetUserLst.get(0).getJoinUserId());
					userNmLst.append(metDaymetUserLst.get(0).getJoinUserNm());
					for (int i = 1; i < metDaymetUserLst.size(); i++) {
						userIdLst.append("," + metDaymetUserLst.get(i).getJoinUserId());
						userNmLst.append("," + metDaymetUserLst.get(i).getJoinUserNm());
					}
					yc0030MetInfo.setMetUserNm(userNmLst.toString());
					yc0030MetInfo.setMetUserId(userIdLst.toString());
				} else {
					yc0030MetInfo.setMetUserNm("");
					yc0030MetInfo.setMetUserId("");
				}
				// 设置备注
				yc0030MetInfo.setMetNotes(metDaymetInfo.getMetRemarks());
				// 通知参加者设置
				yc0030MetInfo.setContactUser(metDaymetInfo.getContactUser());
				// 设置申请人名称
				yc0030MetInfo.setReserverNm(metDaymetInfo.getApplyUserNm());
			}
				
		// 预约类型为周期
		} else {	

			// 取得周期会议信息
			metCyclemetInfo = yc0030Dao.getMetCyclemetInfo(yc0030MetInfo.getCycleMetId());
			if (metCyclemetInfo == null ) {
				return null;
			} else {
				// 设置SPARK信息Id
				yc0030MetInfo.setSignId(metCyclemetInfo.getSignId());
				// 设置周期会议更改标志
				yc0030MetInfo.setUpdateFlg(metCyclemetInfo.getUpdateFlg());
				// 设置周期会议预约类型
				yc0030MetInfo.setCycleType(metCyclemetInfo.getCycleType().toString());
				// 设置周期会议会议室ID
				yc0030MetInfo.setMetId(metCyclemetInfo.getMetId());
				// 设置开始日期
				yc0030MetInfo.setStartDate(metCyclemetInfo.getMetStaDate());
				// 设置会议开始日期（json转换用）
				yc0030MetInfo.setStartDateS(DateUtil.setDateFormat(metCyclemetInfo.getMetStaDate(),"yyyy-MM-dd"));
				// 设置会议开始时间
				yc0030MetInfo.setStartHour(DateUtil.getSplitTime(metCyclemetInfo.getMetStaTime(),TIME_FLG.HH));
				yc0030MetInfo.setStartMinute(DateUtil.getSplitTime(metCyclemetInfo.getMetStaTime(),TIME_FLG.MM));
				yc0030MetInfo.setStartTime(metCyclemetInfo.getMetStaTime());
				// 设置结束日期
				yc0030MetInfo.setEndDate(metCyclemetInfo.getMetEndDate());
				yc0030MetInfo.setEndDateOldS(DateUtil.setDateFormat(metCyclemetInfo.getMetEndDate(),"yyyy-MM-dd"));
				// 设置会议结束日期（json转换用）
				yc0030MetInfo.setEndDateS(DateUtil.setDateFormat(metCyclemetInfo.getMetEndDate(),"yyyy-MM-dd"));
				// 设置会议结束时间
				yc0030MetInfo.setEndHour(DateUtil.getSplitTime(metCyclemetInfo.getMetEndTime(),TIME_FLG.HH));
				yc0030MetInfo.setEndMinute(DateUtil.getSplitTime(metCyclemetInfo.getMetEndTime(),TIME_FLG.MM));
				yc0030MetInfo.setEndTime(metCyclemetInfo.getMetEndTime());
				// 设置会议主题公开标识
				yc0030MetInfo.setPublicFlg(metCyclemetInfo.getPublicFlg().toString());
				// 设置会议主题
				yc0030MetInfo.setMetTopic(metCyclemetInfo.getCycleMetTopic());
				// 设置申请者
				yc0030MetInfo.setReserverNm(metCyclemetInfo.getApplyUserNm());
				// 设置参加者人数
				yc0030MetInfo.setMetUserCnt(metCyclemetInfo.getJoinUserCnt());
				// 设置备注
				yc0030MetInfo.setMetNotes(metCyclemetInfo.getMetRemarks());
				// 通知参加者设置
				yc0030MetInfo.setContactUser(metCyclemetInfo.getContactUser());

				// 设置申请人名称
				yc0030MetInfo.setReserverNm(metCyclemetInfo.getApplyUserNm());
				// 设置申请人ID
				yc0030MetInfo.setReserverId(metCyclemetInfo.getApplyUserId());
				// 当周期类型为每周时，设置选取星期数
				if(metCyclemetInfo.getCycleType().equals(CYCLE_FLG.WEEKLY.value())){
					List<String> tempList = Arrays.asList(metCyclemetInfo.getCycleMetDays().split(","));
					yc0030MetInfo.setWorkDay(tempList);
				// 当周期类型为每月时，设置选取天数
				}else if(metCyclemetInfo.getCycleType().equals(CYCLE_FLG.MONTHLY.value())){
					yc0030MetInfo.setDay(metCyclemetInfo.getCycleMetDays());
					yc0030MetInfo.setDelayedFlg(metCyclemetInfo.getDelayedFlg().toString());
				}
				// 取得参加人员信息
				metCyclemetUserLst = yc0030Dao.getMetCyclemetUserLst(yc0030MetInfo.getCycleMetId());
				// 设置参加人员信息
				if(metCyclemetUserLst.size() > 0){
					userIdLst.append(metCyclemetUserLst.get(0).getJoinUserId());
					userNmLst.append(metCyclemetUserLst.get(0).getJoinUserNm());
					for (int i = 1; i < metCyclemetUserLst.size(); i++) {
						userIdLst.append("," + metCyclemetUserLst.get(i).getJoinUserId());
						userNmLst.append("," + metCyclemetUserLst.get(i).getJoinUserNm());
					}
					yc0030MetInfo.setMetUserNm(userNmLst.toString());
					yc0030MetInfo.setMetUserId(userIdLst.toString());
				} else {
					yc0030MetInfo.setMetUserNm("");
					yc0030MetInfo.setMetUserId("");
				}
				// 设置修改权限Flg
				if(metCyclemetInfo.getApplyUserId().equals(SessionService.getLoginUserId())){
					yc0030MetInfo.setEditable(true);
				}
			}
			
		}
		// 设置用户权限
		permission = getUserPermission(yc0030MetInfo.getReserverId(),userIdLst.toString());
		yc0030MetInfo.setUserPermission(permission);
		SessionService.set(SessionConstants.YC0030METINFO, yc0030MetInfo);
		return yc0030MetInfo;
	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<MetRoomInfo> getMetRoomInfoLst(){
		return yc0030Dao.getMetRoomInfoLst();
	};
	
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer getMetDayNum(Yc0030MetInfo... yc0030MetInfoLst){
		
		// 检索条件的赋值
		MetDaymetInfo metDaymetInfo = new MetDaymetInfo();
		if (yc0030MetInfoLst.length == 2) {

			metDaymetInfo.setMetIdOld(Integer.valueOf(yc0030MetInfoLst[1].getMetId()));
			metDaymetInfo.setMetDateOld(yc0030MetInfoLst[1].getStartDateOld());
			metDaymetInfo.setMetStaTimeOld(yc0030MetInfoLst[1].getStartTime());
		}

		metDaymetInfo.setMetId(yc0030MetInfoLst[0].getMetId());
		metDaymetInfo.setMetDate(yc0030MetInfoLst[0].getStartDate());
		metDaymetInfo.setMetStaTime(yc0030MetInfoLst[0].getStartTime());
		metDaymetInfo.setMetEndTime(yc0030MetInfoLst[0].getEndTime());

		
		// 已存在的会议预约数查询
		return yc0030Dao.getMetDayNum(metDaymetInfo);
	};
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer getMetDaysNum(Yc0030MetInfo... yc0030MetInfoLst){

		// 新建检索对象
		MetCyclemetInfo metCyclemetInfo = new MetCyclemetInfo();
		// 检索条件的赋值
		setMetCyclemetInfo(metCyclemetInfo, yc0030MetInfoLst);
		// 已存在的会议预约数查询
		return yc0030Dao.getMetDaysNum(metCyclemetInfo);
	};
	
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<Date> getMetDaysDate(Yc0030MetInfo... yc0030MetInfoLst){
		// 新建检索对象
		MetCyclemetInfo metCyclemetInfo = new MetCyclemetInfo();
		// 检索条件的赋值
		setMetCyclemetInfo(metCyclemetInfo, yc0030MetInfoLst);
		// 已存在的会议预约日期查询
		return yc0030Dao.getMetDaysDate(metCyclemetInfo);
	};

	/**
	 * 检索条件的赋值.
	 * @param metCyclemetInfo
	 *            周期会议室预约信息（DB用）.
	 * @param yc0030MetInfoLst
	 *            周期会议室预约信息（画面用，修改时包括旧的信息）.
	 */
	private void setMetCyclemetInfo(MetCyclemetInfo metCyclemetInfo, Yc0030MetInfo[] yc0030MetInfoLst) {
		
		// 检索条件的赋值
		if (yc0030MetInfoLst.length == 2) {

			metCyclemetInfo.setCycleMetIdOld(yc0030MetInfoLst[1].getCycleMetId());
		}

		metCyclemetInfo.setMetId(yc0030MetInfoLst[0].getMetId());
		metCyclemetInfo.setMetStaDate(yc0030MetInfoLst[0].getStartDateReal());
		metCyclemetInfo.setMetEndDate(yc0030MetInfoLst[0].getEndDateReal());
		metCyclemetInfo.setMetStaTime(yc0030MetInfoLst[0].getStartTime());
		metCyclemetInfo.setMetEndTime(yc0030MetInfoLst[0].getEndTime());

	}
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public String getMetRoomSize(){
		// 取得会议室信息
		List<MetRoomInfo> metInfoLst = yc0030Dao.getMetRoomInfoLst();
		// 
		StringBuffer metRoomSize = new StringBuffer();
		if(metInfoLst.size() > 0){
			metRoomSize.append(metInfoLst.get(0).getContainCnt());
			for(int i=1;i<metInfoLst.size();i++){
				metRoomSize.append("," + metInfoLst.get(i).getContainCnt());
			}
		}
		return metRoomSize.toString();
	};
	
	/**
	 * {@inheritDoc}
	 */
	@Override
	public synchronized void saveReserveData(Yc0030MetInfo yc0030MetInfo) throws Exception{
		// 会议室名称取得
		yc0030MetInfo.setMetNm(yc0030Dao.getMetNm(yc0030MetInfo.getMetId()));
		// 开始时间结束时间
		yc0030MetInfo.setStartTime(yc0030MetInfo.getStartHour() 
				+ ":" + yc0030MetInfo.getStartMinute() + ":00");
		yc0030MetInfo.setEndTime(yc0030MetInfo.getEndHour() 
				+ ":" + yc0030MetInfo.getEndMinute() + ":00");
		// SPARK信息Id设定
		yc0030MetInfo.setSignId((Long.parseLong(
				comSequenceService.getNextSequence("met_cyclemet_info", "SIGN_ID", 0))));
		// 单日预约
		if(RESERVE_FLG.DAILY.value().equals(yc0030MetInfo.getReserveType())){
			// 插入单日预约信息
			saveDailyMetInfo(yc0030MetInfo,
					MeetConstants.DEFAULT_CYCLEMET_ID, yc0030MetInfo.getStartDate());
		}
		// 周期预约
		if(RESERVE_FLG.CYCLE.value().equals(yc0030MetInfo.getReserveType())){
			int cycleMetType = Integer.parseInt(yc0030MetInfo.getCycleType());
			// 每日周期会议保存
			if(CYCLE_FLG.DAILY.value() == cycleMetType){
				saveDailyCycleMet(yc0030MetInfo, Long.parseLong("-1"));
			}
			// 每周周期会议保存
			if(CYCLE_FLG.WEEKLY.value() == cycleMetType){
				saveWeeklyCycleMet(yc0030MetInfo, Long.parseLong("-1"));
			}
			// 每月周期会议保存
			if(CYCLE_FLG.MONTHLY.value() == cycleMetType){
				saveMonthlyCycleMet(yc0030MetInfo, Long.parseLong("-1"));
			}
		}
		informUser (yc0030MetInfo,INSERT);
	}
	
	/**
	 * {@inheritDoc}
	 * 
	 * @throws Exception 
	 */
	@Override
	public void updateReserveData(Yc0030MetInfo yc0030MetInfo) throws Exception{
		// 会议室名称取得
		yc0030MetInfo.setMetNm(yc0030Dao.getMetNm(yc0030MetInfo.getMetId()));
		// 开始时间结束时间
		yc0030MetInfo.setStartTime(yc0030MetInfo.getStartHour() 
				+ ":" + yc0030MetInfo.getStartMinute() + ":00");
		yc0030MetInfo.setEndTime(yc0030MetInfo.getEndHour() 
				+ ":" + yc0030MetInfo.getEndMinute() + ":00");
		// session取出先前预约信息
		Yc0030MetInfo yc0030MetInfoOld = (Yc0030MetInfo) SessionService.get(SessionConstants.YC0030METINFO);
		// 如果修改的是周期会议，修改前后周期会议ID, 周期会议区分要保持一致
		yc0030MetInfo.setCycleMetKb(yc0030MetInfoOld.getCycleMetKb());
		yc0030MetInfo.setSignId(yc0030MetInfoOld.getSignId());
		long cycleMetIdOld = yc0030MetInfoOld.getCycleMetId();

		// 单日修改
		if (RESERVE_FLG.DAILY.value().equals(yc0030MetInfo.getReserveType())) {

			deleteDayMet(yc0030MetInfoOld);
			saveDailyMetInfo(yc0030MetInfo, cycleMetIdOld, yc0030MetInfo.getStartDate());
			if (!MeetConstants.DEFAULT_CYCLEMET_ID.equals(cycleMetIdOld)) {
				yc0030Dao.updateUpdateFlgCycleMetInfo(cycleMetIdOld);
			}
		}
		// 周期修改
		if (RESERVE_FLG.CYCLE.value().equals(yc0030MetInfo.getReserveType())) {

			// 取得每日会议信息一览
			List<MetDaymetInfo> metDaymetInfoList 
				= yc0030Dao.getMetDaymetInfoList(cycleMetIdOld);

			// 今天删除FLG判断 结束时间>系统时间,但由于开始时间不合理，不能删除（修改删除时）
			yc0030MetInfoOld.setDelToday(this.getDelToday(metDaymetInfoList));
			yc0030MetInfo.setDelToday(this.getDelToday(metDaymetInfoList));
			// 取得周期类型
			int cycleType = Integer.parseInt(yc0030MetInfoOld.getCycleType());

			// 每天
			if (CYCLE_FLG.DAILY.value() == cycleType) {

				deleteCycle(yc0030MetInfoOld, 0);
				saveDailyCycleMet(yc0030MetInfo, cycleMetIdOld);

				// 每周
			} else if (CYCLE_FLG.WEEKLY.value() == cycleType) {

				deleteCycle(yc0030MetInfoOld, 0);
				this.saveWeeklyCycleMet(yc0030MetInfo, cycleMetIdOld);

				// 每月
			} else if (CYCLE_FLG.MONTHLY.value() == cycleType) {

				deleteCycle(yc0030MetInfoOld, 0);
				this.saveMonthlyCycleMet(yc0030MetInfo, cycleMetIdOld);

			}
		}
		informUser (yc0030MetInfo,UPDATE);
	}
	
	/**
	 * {@inheritDoc}
	 * 
	 * @throws Exception 
	 */
	@Override
	public void deleteReserveData(Yc0030MetInfo yc0030MetInfo) throws Exception {

		// 开始时间结束时间
		yc0030MetInfo.setStartTime(yc0030MetInfo.getStartHour() + ":" + yc0030MetInfo.getStartMinute() + ":00");
		yc0030MetInfo.setEndTime(yc0030MetInfo.getEndHour() + ":" + yc0030MetInfo.getEndMinute() + ":00");
		// session取出先前预约信息
		Yc0030MetInfo yc0030MetInfoOld = (Yc0030MetInfo) SessionService.get(SessionConstants.YC0030METINFO);

		// 单日删除
		if (RESERVE_FLG.DAILY.value().equals(yc0030MetInfo.getReserveType())) {

			deleteDayMet(yc0030MetInfoOld);

			// 周期删除
		} else if (RESERVE_FLG.CYCLE.value().equals(yc0030MetInfo.getReserveType())) {

			// 取得每日会议信息一览
			List<MetDaymetInfo> metDaymetInfoList 
				= yc0030Dao.getMetDaymetInfoList(yc0030MetInfoOld.getCycleMetId());
			// 今天删除FLG判断 结束时间>系统时间,但由于开始时间不合理，不能删除（修改删除时）
			yc0030MetInfoOld.setDelToday(this.getDelToday(metDaymetInfoList));
			yc0030MetInfo.setDelToday(this.getDelToday(metDaymetInfoList));

			deleteCycle(yc0030MetInfoOld, 1);

		}

		// 会议室名称取得
		yc0030MetInfoOld.setMetNm(yc0030Dao.getMetNm(yc0030MetInfo.getMetId()));
		// 删除单日还是周期的
		yc0030MetInfoOld.setReserveType(yc0030MetInfo.getReserveType());
		yc0030MetInfoOld.setStartDateReal(yc0030MetInfoOld.getStartDate());
		informUser(yc0030MetInfoOld,DELETE);
	}

	/**
	 * 单日会议保存.
	 * 
	 * @param Yc0030MetInfo
	 *            画面项目的预约信息bean
	 *        cycleMetId
	 *        	  周期会议Id    
	 * @throws Exception 
	 * @throws NumberFormatException 
	 */
	private void saveDailyMetInfo(Yc0030MetInfo yc0030MetInfo, Long cycleMetId, Date startDate) throws NumberFormatException, Exception{

		MetDaymetInfo metDaymetInfo = new MetDaymetInfo();

		// 设置会议日期
		metDaymetInfo.setMetDate(startDate);
		// 设置会议开始时间
		metDaymetInfo.setMetStaTime(yc0030MetInfo.getStartTime());
		// 设置会议结束时间
		metDaymetInfo.setMetEndTime(yc0030MetInfo.getEndTime());
		// 设置会议主题
		metDaymetInfo.setMetTopic(yc0030MetInfo.getMetTopic());
		// 设置会议室ID
		metDaymetInfo.setMetId(yc0030MetInfo.getMetId());
		// 设置预约人ID
		metDaymetInfo.setApplyUserId(SessionService.getLoginUserId());
		// 设置公开标志
		if ("false".equals(yc0030MetInfo.getPublicFlg())) {
			metDaymetInfo.setPublicFlg(0);
		} else {
			metDaymetInfo.setPublicFlg(Integer.parseInt(yc0030MetInfo.getPublicFlg()));
		}
		// 设置参加者人数
		metDaymetInfo.setJoinUserCnt(yc0030MetInfo.getMetUserCnt());
		
		// 如果为单日会议
		if(MeetConstants.DEFAULT_CYCLEMET_ID.equals(cycleMetId)){
			// 设置周期会议区分
			metDaymetInfo.setCycleMetKb(Integer.parseInt(RESERVE_FLG.DAILY.value()));
		// 如果为周期会议	
		}else{
			// 设置周期会议区分
			metDaymetInfo.setCycleMetKb(Integer.parseInt(RESERVE_FLG.CYCLE.value()));
		}

		// 设置周期会议ID
		metDaymetInfo.setCycleMetId(cycleMetId);
		// SPARK信息Id设定
		metDaymetInfo.setSignId(yc0030MetInfo.getSignId());
		// 设置备注
		metDaymetInfo.setMetRemarks(yc0030MetInfo.getMetNotes());
		// 通知参加者
		if ("1".equals(yc0030MetInfo.getContactUser())) {
			metDaymetInfo.setContactUser(MeetConstants.CONTACT_USER.TRUE.value());
		} else {
			metDaymetInfo.setContactUser(MeetConstants.CONTACT_USER.FALSE.value());
		}
		// 保存单日会议预约
		yc0030Dao.insertMetDaymetInfo(metDaymetInfo);
		// 保存单日会议参加者
		if (yc0030MetInfo.getMetUserId() != null && !"".equals(yc0030MetInfo.getMetUserId())) {
			String usersId = yc0030MetInfo.getMetUserId();
			String[] idArray = usersId.split(",");
			for(String userId : idArray){
				MetDaymetUser metDaymetUser = new MetDaymetUser();
				// 设置会议日期
				metDaymetUser.setMetDate(metDaymetInfo.getMetDate());
				// 设置会议开始时间
				metDaymetUser.setMetStaTime(yc0030MetInfo.getStartTime());
				// 设置会议ID
				metDaymetUser.setMetId(yc0030MetInfo.getMetId());
				// 设置参加者ID
				metDaymetUser.setJoinUserId(userId);
				// 保存单日会议参加者信息
				yc0030Dao.insertMetDaymetUser(metDaymetUser);
			}
		}

	}
	
	/**
	 * 设置周期会议公共数据.
	 * 
	 * @param yc0030MetInfo
	 *            画面项目的预约信息bean
	 * @param cycleMetIdOld
	 *            修改前周期会议ID      
	 * @return MetCyclemetInfo 每日会议信息
	 */
	private MetCyclemetInfo setCommonCycleMetInfo(Yc0030MetInfo yc0030MetInfo, Long cycleMetIdOld) throws Exception{
		
		// 开始日期设定
		Date metStartDate = yc0030MetInfo.getStartDate();

		MetCyclemetInfo metCyclemetInfo = new MetCyclemetInfo();	
		
		// 设置周期会议ID
		if (cycleMetIdOld == -1) {
			metCyclemetInfo.setCycleMetId(Long.parseLong(
					comSequenceService.getNextSequence("met_cyclemet_info", "CYCLE_MET_ID", 0)));
		} else {
			metCyclemetInfo.setCycleMetId(cycleMetIdOld);
		}

		metCyclemetInfo.setSignId(yc0030MetInfo.getSignId());
		// 设置周期类型
		if(CYCLE_FLG.DAILY.value().toString().equals(yc0030MetInfo.getCycleType())){
			metCyclemetInfo.setCycleType(CYCLE_FLG.DAILY.value());
			// 设置周期内会议天数
			metCyclemetInfo.setCycleMetDays(MeetConstants.EACH_DAY);
		}else if(CYCLE_FLG.WEEKLY.value().toString().equals(yc0030MetInfo.getCycleType())){
			metCyclemetInfo.setCycleType(CYCLE_FLG.WEEKLY.value());
			// 设置周期内会议天数
			List<String> workDay = yc0030MetInfo.getWorkDay();
			StringBuilder cycleMetDaysBuilder = new StringBuilder();
			for (String day :workDay) {
				cycleMetDaysBuilder.append(day);
				cycleMetDaysBuilder.append(",");
			}
			String cycleMetDays = cycleMetDaysBuilder.toString();
			cycleMetDays = cycleMetDays.substring(0,cycleMetDays.length()-1);
			metCyclemetInfo.setCycleMetDays(cycleMetDays);
		}else if(CYCLE_FLG.MONTHLY.value().toString().equals(yc0030MetInfo.getCycleType())){
			metCyclemetInfo.setCycleType(CYCLE_FLG.MONTHLY.value());
			// 设置周期内会议天数
			metCyclemetInfo.setCycleMetDays(yc0030MetInfo.getDay());
			// 设置后延标识
			metCyclemetInfo.setDelayedFlg(Integer.parseInt(yc0030MetInfo.getDelayedFlg()));
		}	

		// 设置周期会议主题
		metCyclemetInfo.setCycleMetTopic(yc0030MetInfo.getMetTopic());
		// 设置公开标志
		if ("false".equals(yc0030MetInfo.getPublicFlg())) {
			metCyclemetInfo.setPublicFlg(0);
		} else {
			metCyclemetInfo.setPublicFlg(Integer.parseInt(yc0030MetInfo.getPublicFlg()));
		}
		// 设置会议室ID
		metCyclemetInfo.setMetId(yc0030MetInfo.getMetId());
		// 设置会议开始日期
		metCyclemetInfo.setMetStaDate(metStartDate);
		// 设置会议结束日期
		metCyclemetInfo.setMetEndDate(yc0030MetInfo.getEndDate());
		// 设置会议开始时间
		metCyclemetInfo.setMetStaTime(yc0030MetInfo.getStartTime());
		// 设置会议结束时间
		metCyclemetInfo.setMetEndTime(yc0030MetInfo.getEndTime());
		// 设置预约人ID
		metCyclemetInfo.setApplyUserId(yc0030MetInfo.getReserverId());
		// 设置参加人数
		metCyclemetInfo.setJoinUserCnt(yc0030MetInfo.getMetUserCnt());
		// 设置更改标志
		metCyclemetInfo.setUpdateFlg(CYCLEMET_MODIFY.FALSE.value());
		// 设置备注
		metCyclemetInfo.setMetRemarks(yc0030MetInfo.getMetNotes());
		// 设置删除标志
		metCyclemetInfo.setDelFlg(CYCLEMET_DELETE.FALSE.value());
		// 通知参加者
		if ("1".equals(yc0030MetInfo.getContactUser())) {
			metCyclemetInfo.setContactUser(MeetConstants.CONTACT_USER.TRUE.value());
		} else {
			metCyclemetInfo.setContactUser(MeetConstants.CONTACT_USER.FALSE.value());
		}
		return metCyclemetInfo;
	}
	
	/**
	 * 每日周期会议保存.
	 * 
	 * @param Yc0030MetInfo
	 *            画面项目的预约信息bean
	 * @param cycleMetIdOld
	 *            修改前周期会议ID
	 * @throws Exception 
	 */
	private void saveDailyCycleMet(Yc0030MetInfo yc0030MetInfo, Long cycleMetIdOld) throws Exception{
		
		// 设置会议室预约的公共信息
		MetCyclemetInfo metCyclemetInfo = setCommonCycleMetInfo(yc0030MetInfo, cycleMetIdOld);

		// 周期预约插入
		yc0030Dao.insertMetCyclemetInfo(metCyclemetInfo);
		// 插入会议的真实开始时间
		Date metStartDate = metCyclemetInfo.getMetStaDate();
		if (cycleMetIdOld != -1) {
			Yc0030MetInfo yc0030MetInfoOld = (Yc0030MetInfo) SessionService.get(SessionConstants.YC0030METINFO);
			// 如果在周期中的时候
			if (!yc0030MetInfoOld.getStartDate().after(this.getDay())) {
				
				// 根据是否删除今天判断开始日期
				if (yc0030MetInfo.isDelToday()) {
					// 今天可删除从今天开始
					metStartDate = this.getDay();
				} else {
					// 今天不可删除从明天开始
					metStartDate = this.getNextDate(this.getDay());
				}
			}

		}
		// 参加者ID String
		if (yc0030MetInfo.getMetUserId() != null && !"".equals(yc0030MetInfo.getMetUserId())) {
			String metUserId = yc0030MetInfo.getMetUserId();
			String[] idArray = metUserId.split(",");
			// 保存周期会议参加者信息
			saveCycleMetJoiner(idArray,metCyclemetInfo);
		}
		// 取得预约的天数
		Calendar cal = Calendar.getInstance();
		cal.setTime(metStartDate);
		int days = (int) ((metCyclemetInfo.getMetEndDate().getTime() - metStartDate.getTime()) / (1000 * 60 * 60 * 24)) + 1;
		yc0030MetInfo.setStartDateReal(metStartDate);
		// 保存单日会议信息
		for(int loopDay = 0; loopDay < days; loopDay++){
			Date startDate = cal.getTime();
//			yc0030MetInfo.setStartDateReal(startDate);
			saveDailyMetInfo(yc0030MetInfo,metCyclemetInfo.getCycleMetId(),startDate);
			// 会议日期加1
			cal.add(Calendar.DAY_OF_MONTH, 1);
		}

	}

	/**
	 * 每周周期会议保存.
	 * 
	 * @param Yc0030MetInfo
	 *            画面项目的预约信息bean
	 * @param cycleMetIdOld
	 *            修改前周期会议ID
	 * @throws Exception 
	 */
	private void saveWeeklyCycleMet(Yc0030MetInfo yc0030MetInfo, Long cycleMetIdOld) throws Exception{

		// 设置会议室预约的公共信息
		MetCyclemetInfo metCyclemetInfo = setCommonCycleMetInfo(yc0030MetInfo, cycleMetIdOld);
		// 取得画面端选择的星期List
		List<String> workDay = yc0030MetInfo.getWorkDay();
		Date startDate = yc0030MetInfo.getStartDate();
		Date endDate = yc0030MetInfo.getEndDate();

		if (cycleMetIdOld != -1) {
			Yc0030MetInfo yc0030MetInfoOld = (Yc0030MetInfo) SessionService.get(SessionConstants.YC0030METINFO);
			// 如果在周期中的时候
			if (!yc0030MetInfoOld.getStartDate().after(this.getDay())) {
				// 根据是否删除今天判断开始日期
				if (yc0030MetInfo.isDelToday()) {
					// 今天可删除从今天开始
					startDate = this.getDay();
				} else {
					// 今天不可删除从明天开始
					startDate = this.getNextDate(this.getDay());
				}
			}

		}
		List<Date> days = new ArrayList<Date>();
		for(String day : workDay){
			Integer tempDay = Integer.parseInt(day) + 1;

			// 加上之前的日期集合
			days = connectDays(days,this.getDays(startDate, endDate, tempDay.toString()));

		}
		yc0030MetInfo.setStartDateReal(days.get(0));
		// 保存单日会议信息
		for(int i=0; i<days.size();i++){
			
//			yc0030MetInfo.setStartDateReal(days.get(i));
			saveDailyMetInfo(yc0030MetInfo,metCyclemetInfo.getCycleMetId(), days.get(i));
		}
		// 保存每周周期会议信息
		yc0030Dao.insertMetCyclemetInfo(metCyclemetInfo);
		// 保存周期会议参加者信息
		if (yc0030MetInfo.getMetUserId() != null && !"".equals(yc0030MetInfo.getMetUserId())) {
			// 参加者ID String
			String metUserId = yc0030MetInfo.getMetUserId();
			String[] idArray = metUserId.split(",");
			saveCycleMetJoiner(idArray,metCyclemetInfo);
		}

	}
	
	/**
	 * 每个星期的数组拼接在一起第一个最小.
	 * @param days
	 *            某个星期几的日期数组
	 * @param nextDays
	 *            下个星期几的日期数组
	 * @return List<Date> 拼接后的日期数组
	 */
	private List<Date> connectDays(List<Date> days, List<Date> nextDays) {

		if (nextDays == null || nextDays.isEmpty() ) {
			return days;
		} else {
			if (days == null || days.isEmpty() ) {
				return nextDays;
			} else {
				if (days.get(days.size() - 1).before(nextDays.get(nextDays.size() - 1))) {
					days.addAll(nextDays);
					return days;
				} else {
					nextDays.addAll(days);
					return nextDays;
				}				
			}
		}
	}
	
	/**
	 * 每月周期会议保存.
	 * 
	 * @param Yc0030MetInfo
	 *            画面项目的预约信息bean
	 * @param cycleMetIdOld
	 *            修改前周期会议ID
	 * @return int 返回检查标志
	 * @throws Exception 
	 */
	private void saveMonthlyCycleMet(Yc0030MetInfo yc0030MetInfo, Long cycleMetIdOld) throws Exception{
		
		// 设置会议室预约的公共信息
		MetCyclemetInfo metCyclemetInfo = setCommonCycleMetInfo(yc0030MetInfo, cycleMetIdOld);
		int day = Integer.parseInt(metCyclemetInfo.getCycleMetDays());
		Date metStartDate = metCyclemetInfo.getMetStaDate();
		if (cycleMetIdOld != -1) {
			Yc0030MetInfo yc0030MetInfoOld = (Yc0030MetInfo) SessionService.get(SessionConstants.YC0030METINFO);
			// 如果在周期中的时候
			if (!yc0030MetInfoOld.getStartDate().after(this.getDay())) {
				
				// 根据是否删除今天判断开始日期
				if (yc0030MetInfo.isDelToday()) {
					// 今天可删除从今天开始
					metStartDate = this.getDay();
				} else {
					// 今天不可删除从明天开始
					metStartDate = this.getNextDate(this.getDay());
				}
			}

		}

		// 取得需要保存的会议信息里日期的list
		List<Date> days = getDays(metStartDate, 
				metCyclemetInfo.getMetEndDate(), day, metCyclemetInfo.getDelayedFlg().toString());

		// 保存每月周期会议信息
		yc0030Dao.insertMetCyclemetInfo(metCyclemetInfo);

		// 参加者ID String
		if (yc0030MetInfo.getMetUserId() != null && !"".equals(yc0030MetInfo.getMetUserId())) {
			String metUserId = yc0030MetInfo.getMetUserId();
			String[] idArray = metUserId.split(",");
			// 保存周期会议参加者信息
			saveCycleMetJoiner(idArray,metCyclemetInfo);

		}
		yc0030MetInfo.setStartDateReal(days.get(0));
		// 保存单日会议信息
		for(Date saveDate : days){
//			yc0030MetInfo.setStartDateReal(saveDate);
			saveDailyMetInfo(yc0030MetInfo,metCyclemetInfo.getCycleMetId(), saveDate);
		}

	}

	/**
	 * 周期会议参加者保存：每日, 每月
	 * 
	 * @param idArray
	 *            参加者ID(字符串数组)
	 * @param metCyclemetInfo           
	 *            周期会议信息
	 */
	private void saveCycleMetJoiner(String[] idArray, MetCyclemetInfo metCyclemetInfo) {
		
		for(String id : idArray){
			MetCyclemetUser metCyclemetUser = new MetCyclemetUser();
			metCyclemetUser.setCycleMetId(metCyclemetInfo.getCycleMetId());
			metCyclemetUser.setJoinUserId(id);
			// 保存周期会议参加者信息
			yc0030Dao.insertMetCyclemetUser(metCyclemetUser);
		}
		
	}

	/**
	 * 判断用户是否可以查看周期会议信息
	 * 
	 * @param metDaymetInfo
	 *            单日会议信息
	 * @return Boolean 是否可以查看周期会议信息
	 */
	private String canGetCycleInfo(MetDaymetInfo metDaymetInfo){
		if(0 != metDaymetInfo.getCycleMetId()){
			// 取得参加人员信息
			List<MetCyclemetUser> metCyclemetUserLst 
				= yc0030Dao.getMetCyclemetUserLst(metDaymetInfo.getCycleMetId());
			// 取得周期会议信息
			MetCyclemetInfo metCyclemetInfo 
				= yc0030Dao.getMetCyclemetInfo(metDaymetInfo.getCycleMetId());
			// 设置修改权限Flg
			String loginUserId = SessionService.getLoginUserId();
			for (int i = 1; i < metCyclemetUserLst.size(); i++) {
				if (loginUserId.equals(metCyclemetUserLst.get(i).getJoinUserId())) {
					return RESERVE_FLG.CYCLE.value();
				}
			}
			if (loginUserId.equals(metCyclemetInfo.getApplyUserId())) {
				return RESERVE_FLG.CYCLE.value();
			} else {
				return RESERVE_FLG.DAILY.value();
			}

		} else {
			return RESERVE_FLG.DAILY.value();
		}

	}
	
	/**
	 * 判断用户查看会议信息权限
	 * 
	 * @param applyUserId 会议申请者Id
	 *        joinUserId  会议参加者Id
	 * @return String 0：无权限 1：查看权限 2：修改权限.
	 */
	private String getUserPermission(String applyUserId, String joinUserId){
		// 判断登录者是否与会议申请者相同
		if(null!=applyUserId && SessionService.getLoginUserId().equals(applyUserId)){
			return USER_PERMISSION.WRITE.value();
		}else{
			// 判断登录者是否在会议参加者中
			if(null!=joinUserId && joinUserId.length() > 0){
				String[] userIdLst = joinUserId.split(",");
				for(String userId : userIdLst){
					if(SessionService.getLoginUserId().equals(userId)){
						return USER_PERMISSION.READ_ONLY.value();
					}
				}
			}
			return USER_PERMISSION.NOT_READ.value();
		}
	}
	
	/**
	 * 取得年月日表示的当前Date
	 * 
	 * @return Date
	 */
	private Date getDay() {

		// 取得当前日历
		Calendar cal = Calendar.getInstance();

		// clear
		cal.clear(Calendar.HOUR);
		cal.clear(Calendar.HOUR_OF_DAY); 
		cal.clear(Calendar.MINUTE);
		cal.clear(Calendar.SECOND);
		cal.clear(Calendar.MILLISECOND);
		cal.set(Calendar.HOUR_OF_DAY, 0);

		// 取得年月日的Date
		Date now = cal.getTime();

		return now;
	}

	/**
	 * 取得当前时间 忽略年月日
	 * 
	 * @return 返回当前时间
	 */
	private Date getTime() {

		Calendar cal = Calendar.getInstance();
		cal.set(1970, 0, 1);

		return cal.getTime();
	}

	/**
	 * 取得一段日期内某一号的所有日期 每月用
	 * 
	 * @param from
	 *            开始日期
	 * @param to
	 *            结束日期
	 * @param day
	 *            所选日期
	 * @param delayFlg
	 * 			  提前后延标识
	 * @return List<Date>
	 */
	private List<Date> getDays(Date from, Date to, int day, String delayFlg) {
		List<Date> days = new ArrayList<Date>();
		// set日历
		Calendar cal_start = Calendar.getInstance();
		Calendar cal_end = Calendar.getInstance();
		cal_start.setTime(from);
		cal_end.setTime(to);
		// 开始年
		int start_year = cal_start.get(Calendar.YEAR);
		// 取得页面开始月份
		int start_month = cal_start.get(Calendar.MONTH);
		// 结束年
		int end_year = cal_end.get(Calendar.YEAR); 
		// 取得页面结束月份
		int end_month = cal_end.get(Calendar.MONTH); 
		// 带上当前时间
		Calendar cal = Calendar.getInstance(); 
		// 重置cal的时间为0
		cal.setTime(from); 
		// 预约开始月份
		int sm; 
		cal.set(start_year, start_month, day);
		boolean isBeforeStart = cal.before(cal_start);
		if (isBeforeStart) {
			sm = start_month + 1;
		} else {
			sm = start_month;
		}
		// 预约结束月份
		int em; 
		cal.set(end_year, end_month, day);
		boolean isAfterEnd = cal.after(cal_end);
		if (isAfterEnd) {
			em = end_month - 1;
		} else {
			em = end_month;
		}
		// 开始年
		int i = start_year; 
		// 开始月
		int j = sm; 

		while (i <= end_year) {
			// 跨年处理
			if (j > 11) { 
				i++;
				// 当年相等时，j=12时，i++跨过后面年的检查
				if (i > end_year) { 
					break;
				}
				j = j - 12;
			}
			// 结束月份临近时处理
			if (i == end_year) { 
				if (j > em) {
					break;
				}
			}

			// 处理所选日期在实际中不存在的情况
			cal.set(i, j, 1);
			int maxDate = cal.getActualMaximum(Calendar.DATE);
			if (day > maxDate) {
				// 提前
				if (DELAY_FLG.BEFORE.value().equals(delayFlg)) { 
					cal.set(i, j, maxDate);
				}
				// 后延
				if (DELAY_FLG.AFTER.value().equals(delayFlg)) { 
					cal.set(i, j, maxDate);
					cal.add(Calendar.DAY_OF_MONTH, 1);
				}
			} else {
				cal.set(i, j, day);
			}

			// 提前后延处理 周末与31号重复，按周末处理
			int day_of_week = cal.get(Calendar.DAY_OF_WEEK);
			// 星期天
			if (day_of_week == 1) { 
				// 提前
				if (DELAY_FLG.BEFORE.value().equals(delayFlg)) { 
					cal.add(Calendar.DAY_OF_MONTH, -2);
				}
				// 后延
				if (DELAY_FLG.AFTER.value().equals(delayFlg)) { 
					cal.add(Calendar.DAY_OF_MONTH, 1);
				}
			}
			// 星期六
			if (day_of_week == 7) { 
				// 提前
				if (DELAY_FLG.BEFORE.value().equals(delayFlg)) { 
					cal.add(Calendar.DAY_OF_MONTH, -1);
				}
				// 后延
				if (DELAY_FLG.AFTER.value().equals(delayFlg)) { 
					cal.add(Calendar.DAY_OF_MONTH, 2);
				}
			}

			days.add(cal.getTime());

			j++;

		}

		return days;
	}
	
	/**
	 * 取得一段日期内星期几的所有日期 每周用
	 * 
	 * @param from
	 *            开始日期
	 * @param to
	 *            结束日期
	 * @param weekday
	 *            所选星期
	 * 
	 * @return List<Date>
	 */
	private List<Date> getDays(Date from, Date to, String weekday) {

		List<Date> days = new ArrayList<Date>();

		// set日历
		Calendar cal_start = Calendar.getInstance();
		Calendar cal_end = Calendar.getInstance();
		cal_start.setTime(from);
		cal_end.setTime(to);

		// 取得时间段内第一个所选星期几
		int day_of_week = cal_start.get(Calendar.DAY_OF_WEEK);
		int weekday_chosen = 0;
		if (null != weekday) {
			weekday_chosen = Integer.parseInt(weekday);
		}

		// 开始日期所在的星期几在所选星期几的前面或相等
		if (day_of_week <= weekday_chosen) {
			cal_start.add(Calendar.DAY_OF_MONTH, weekday_chosen - day_of_week);
		} else {
			cal_start.add(Calendar.DAY_OF_MONTH, weekday_chosen - day_of_week
					+ 7);
		}

		// 取出日期并save
		while (!cal_start.after(cal_end)) {
			days.add(cal_start.getTime());
			cal_start.add(Calendar.DAY_OF_MONTH, 7);
		}
		return days;
	}

	/**
	 * 单日预约信息删除（每日会议信息和会议参加者）.
	 * 
	 * @param yc0030MetInfoOld
	 *            所删除的预约信息
	 */
	private void deleteDayMet(Yc0030MetInfo yc0030MetInfoOld) {
		
		// 删除key每日会议信息赋值
		MetDaymetInfo metDaymetInfo = new MetDaymetInfo();
		metDaymetInfo.setMetId(Integer.valueOf(yc0030MetInfoOld.getMetId()));
		metDaymetInfo.setMetDate(yc0030MetInfoOld.getStartDateOld());
		metDaymetInfo.setMetStaTime(yc0030MetInfoOld.getStartTime());
		// 删除每日会议信息
		yc0030Dao.deleteDayMetInfo(metDaymetInfo);
		// 删除key每日会议参加者赋值
		MetDaymetUser metDaymetUser = new MetDaymetUser();
		metDaymetUser.setMetId(Integer.valueOf(yc0030MetInfoOld.getMetId()));
		metDaymetUser.setMetDate(yc0030MetInfoOld.getStartDate());
		metDaymetUser.setMetStaTime(yc0030MetInfoOld.getStartTime());
		// 删除每日会议信息
		yc0030Dao.deleteDayMetUser(metDaymetUser);
	}

	/**
	 * 取得delToday FLG.
	 * 
	 * @param metDaymetInfoList
	 *            同一周期内每日会议信息一览
	 * 
	 * @return boolean 返回今天数据是否可以删除
	 */
	private boolean getDelToday(List<MetDaymetInfo> metDaymetInfoList) {

		boolean delTodayFlg = true;

		Date nowDate = this.getDay();
		Date nowTime = this.getTime();

		// 每一天都要分别判断
		for (int i = 0; i < metDaymetInfoList.size(); i++) {

			Date startdate = metDaymetInfoList.get(i).getMetDate();
			Date starttime = DateUtil.parse(metDaymetInfoList.get(i).getMetStaTime());

			int length = (int) ((nowTime.getTime() - starttime.getTime()) / (1000 * 60));
			if (nowDate.equals(startdate)) {

				if (length > MeetConstants.OUTTIME_LENGTH) {
					delTodayFlg = false;
				}

				break;
			}
		}

		return delTodayFlg;
	}

	/**
	 * delete cycle: 每天,周,月.
	 * 
	 * @param yc0030MetInfoOld
	 *            所删除的预约信息
	 * @param sign
	 *            修改/删除调用标志：0--修改调用；1--删除调用
	 */
	private void deleteCycle(Yc0030MetInfo yc0030MetInfoOld, int sign) {

		// 取得系统日期、时间
		Date date = this.getDay();
		String time = new SimpleDateFormat("HH:mm:ss").format(new Date());

		MetDaymetInfo metDaymetInfo = new MetDaymetInfo();
		metDaymetInfo.setSystemDate(date);
		metDaymetInfo.setSystemTime(time);
		metDaymetInfo.setCycleMetId(yc0030MetInfoOld.getCycleMetId());
		metDaymetInfo.setDelToday(yc0030MetInfoOld.isDelToday());
		// 删除未过期的所有会议信息参加者
		yc0030Dao.deleteDayMetUserLst(metDaymetInfo);
		// 删除未过期的所有会议信息
		yc0030Dao.deleteDaymetInfoLst(metDaymetInfo);
		// 0表示修改用
		if (0 == sign) { 
			// 周期表相应数据删除
			yc0030Dao.deleteCycleMetInfo(yc0030MetInfoOld.getCycleMetId());
			// 1表示删除用
		} else if (1 == sign) { 
			
			// 周期表相应数据删除（删除flg变成1）
			yc0030Dao.updateDelFlgCycleMetInfo(yc0030MetInfoOld.getCycleMetId());
		}
		
		yc0030Dao.deleteCycleMetUserLst(yc0030MetInfoOld.getCycleMetId());

	}
	
	/**
	 * 取得当前日期的下一天
	 * 
	 * @param date
	 *            当前日期
	 * @return Date 下一天
	 */
	private Date getNextDate(Date date) {

		Calendar cal = Calendar.getInstance();
		cal.setTime(date);

		cal.add(Calendar.DAY_OF_MONTH, 1);
		cal.set(Calendar.HOUR_OF_DAY, 0);
		cal.clear(Calendar.MINUTE);
		cal.clear(Calendar.SECOND);

		return cal.getTime();
	}
	
	/**
	 * 通知参加者
	 * 
	 * @param Yc0030MetInfo
	 *            画面项目的预约信息bean
	 * @param mode 会议的模式（预约，删除，修改）
	 * 
	 * @return boolean true spark消息发送成功 false spark消息发送失败
	 * @throws Exception 
	 */
	private void informUser(Yc0030MetInfo yc0030MetInfo, String mode) throws Exception {

		if ("1".equals(yc0030MetInfo.getContactUser())) {
			yc0030MetInfo.setStartDateS(DateUtil.setDateFormat(yc0030MetInfo.getStartDate(),"yyyy-MM-dd"));
			// Spark信息的发送
			SparkMessagerBean sparkMessagerBean = new SparkMessagerBean();
			if (RESERVE_FLG.CYCLE.value().equals(yc0030MetInfo.getReserveType())) {
				yc0030MetInfo.setEndDateS(DateUtil.setDateFormat(yc0030MetInfo.getEndDate(),"yyyy-MM-dd"));
				// 消息的链接
				if (DELETE.equals(mode)) {
					sparkMessagerBean.setMsg_url("");
				} else {
					sparkMessagerBean.setMsg_url(ServerInfo.getURLPath() + MEET + "/yc0020SystemTimeinit?metDate=" 
							+ DateUtil.setDateFormat(yc0030MetInfo.getStartDateReal(), "yyyy-MM-dd") 
							+ "&sparkPopUpMsg=yc0030MetInfo.startDate=" 
							+ DateUtil.setDateFormat(yc0030MetInfo.getStartDateReal(), "yyyy-MM-dd")
							+ "*yc0030MetInfo.metId=" + yc0030MetInfo.getMetId() 
							+ "*yc0030MetInfo.startHour=" + yc0030MetInfo.getStartHour()
							+ "*yc0030MetInfo.startMinute=" + yc0030MetInfo.getStartMinute()
							+ "*viewMode=1*yc0030MetInfo.reserveType=0&" + SessionConstants.REQUESTTARGET + "=1");
				}

			} else {
				// 消息的链接
				if (DELETE.equals(mode)) {
					sparkMessagerBean.setMsg_url("");
				} else {
					sparkMessagerBean.setMsg_url(ServerInfo.getURLPath() + MEET + "/yc0020SystemTimeinit?metDate=" 
							+ yc0030MetInfo.getStartDateS()
							+ "&sparkPopUpMsg=yc0030MetInfo.startDate=" 
							+ yc0030MetInfo.getStartDateS()
							+ "*yc0030MetInfo.metId=" + yc0030MetInfo.getMetId() 
							+ "*yc0030MetInfo.startHour=" + yc0030MetInfo.getStartHour()
							+ "*yc0030MetInfo.startMinute=" + yc0030MetInfo.getStartMinute()
							+ "*viewMode=1*yc0030MetInfo.reserveType=0&" + SessionConstants.REQUESTTARGET + "=1");
				}
			}

			// 发送消息的系统ID
			sparkMessagerBean.setSystem_id(SparkSysIDEnum.HY);
			// 发送消息的消息类型ID
			sparkMessagerBean.setMsg_id(SparkMsgIDEnum.HY);
			// 会议参加者
			String usersId = yc0030MetInfo.getMetUserId();
			String[] idArray = usersId.split(",");
			// 消息内部用ID
			sparkMessagerBean.setSign(yc0030MetInfo.getSignId().toString());
			if (INSERT.equals(mode)) {
				if (yc0030MetInfo.getMetUserId() != null && !"".equals(yc0030MetInfo.getMetUserId())) {
					// spark 消息类型
					sparkMessagerBean.setStatus(MsgTypeEnum.INSERT);
					// 要发送的人员一览
					sparkMessagerBean.setEmpid(idArray);
					// 预约会议的消息的内容
					if (RESERVE_FLG.DAILY.value().equals(yc0030MetInfo.getReserveType())){
						sparkMessagerBean.setMsg_content("会议预约：" 
								+ yc0030MetInfo.getStartDateS().substring(5, 7) + "/" 
								+ yc0030MetInfo.getStartDateS().substring(8, 10) + " "
								+ yc0030MetInfo.getStartTime().substring(0, 5) + " "
								+ yc0030MetInfo.getMetNm() + " " + yc0030MetInfo.getMetTopic());
					} else {
						sparkMessagerBean.setMsg_content("会议预约：" 
								+ yc0030MetInfo.getStartDateS().substring(5, 7) + "/" 
								+ yc0030MetInfo.getStartDateS().substring(8, 10) + "到"
								+ yc0030MetInfo.getEndDateS().substring(5, 7) + "/" 
								+ yc0030MetInfo.getEndDateS().substring(8, 10) + " "
								+ yc0030MetInfo.getStartTime().substring(0, 5) + " "
								+ yc0030MetInfo.getMetNm() + " " + yc0030MetInfo.getMetTopic());

					}
					if (yc0030MetInfo.getMetNotes() != null && !"".equals(yc0030MetInfo.getMetNotes())) {
						sparkMessagerBean.setMsg_content(
								sparkMessagerBean.getMsg_content() + " (" + yc0030MetInfo.getMetNotes() + ")");
					}
					SendMessage.asyncSend(sparkMessagerBean);
				}
			} else if (UPDATE.equals(mode)) {
				// spark 消息类型
				sparkMessagerBean.setStatus(MsgTypeEnum.UPDATE);
				// 修改前会议信息
				Yc0030MetInfo yc0030MetInfoOld = (Yc0030MetInfo) SessionService.get(SessionConstants.YC0030METINFO);
				// 修改前会议参加者
				String usersIdOld = yc0030MetInfoOld.getMetUserId();
				String[] idArrayOld = usersIdOld.split(",");
				// 被删除的会议参加者flg设置
				Map<String, String> idArrayDelMap = new HashMap<String, String>();
				for (String userIdOld:idArrayOld) {
					idArrayDelMap.put(userIdOld, "");
				}
				// 原有的会议参加者
				List<String> uptIdList = new ArrayList<String>();
				// 新建的会议参加者
				List<String> insIdList = new ArrayList<String>();
				// 被删除的会议参加者
				List<String> delIdList = new ArrayList<String>();
				// 新建的会议参加者和原有的会议参加者
				for (String userId:idArray) {
					// 是否存在一样的参加者
					boolean eqFlg = false;
					for (String userIdOld:idArrayOld) {
						if (userId.equals(userIdOld)) {
							eqFlg = true;
							break;
						}
					}
					if (eqFlg) {
						uptIdList.add(userId);
						idArrayDelMap.put(userId, "equal");
					} else {
						insIdList.add(userId);
					}
				}
				// 删除的会议参加者
				for(Entry<String, String> entry: idArrayDelMap.entrySet()){   

					if ("".equals(entry.getValue())) {
						delIdList.add(entry.getKey());
					}
				} 
				// 修改会议的消息的内容
				if (uptIdList != null && uptIdList.size() != 0) {
					String[] idArrayUpt = uptIdList.toArray(new String[uptIdList.size()]);
					sparkMessagerBean.setEmpid(idArrayUpt);
					
					if (RESERVE_FLG.DAILY.value().equals(yc0030MetInfo.getReserveType())){
						
						sparkMessagerBean.setMsg_content("会议修改：" 
								+ yc0030MetInfo.getStartDateS().substring(5, 7) + "/" 
								+ yc0030MetInfo.getStartDateS().substring(8, 10) + " "
								+ yc0030MetInfo.getStartTime().substring(0, 5) + " "
								+ yc0030MetInfo.getMetNm() + " " + yc0030MetInfo.getMetTopic());
					} else {
						
						sparkMessagerBean.setMsg_content("会议修改：" 
								+ yc0030MetInfo.getStartDateS().substring(5, 7) + "/" 
								+ yc0030MetInfo.getStartDateS().substring(8, 10) + "到"
								+ yc0030MetInfo.getEndDateS().substring(5, 7) + "/" 
								+ yc0030MetInfo.getEndDateS().substring(8, 10) + " "
								+ yc0030MetInfo.getStartTime().substring(0, 5) + " "
								+ yc0030MetInfo.getMetNm() + " " + yc0030MetInfo.getMetTopic());
					}
					if (yc0030MetInfo.getMetNotes() != null && !"".equals(yc0030MetInfo.getMetNotes())) {
						sparkMessagerBean.setMsg_content(
								sparkMessagerBean.getMsg_content() + " (" + yc0030MetInfo.getMetNotes() + ")");
					}
					SendMessage.asyncSend(sparkMessagerBean);
					
				}
				// 取消会议的消息的内容
				if (delIdList != null && delIdList.size() != 0) {
					String[] idArrayDel = (String[]) delIdList.toArray(new String[delIdList.size()]);
					sparkMessagerBean.setEmpid(idArrayDel);
					sparkMessagerBean.setMsg_url("");
					if (RESERVE_FLG.DAILY.value().equals(yc0030MetInfo.getReserveType())){
						
						sparkMessagerBean.setMsg_content("会议取消：" 
								+ yc0030MetInfo.getStartDateS().substring(5, 7) + "/" 
								+ yc0030MetInfo.getStartDateS().substring(8, 10) + " "
								+ yc0030MetInfo.getStartTime().substring(0, 5) + " "
								+ yc0030MetInfo.getMetNm() + " " + yc0030MetInfo.getMetTopic());
					} else {
						
						sparkMessagerBean.setMsg_content("会议取消：" 
								+ yc0030MetInfo.getStartDateS().substring(5, 7) + "/" 
								+ yc0030MetInfo.getStartDateS().substring(8, 10) + "到"
								+ yc0030MetInfo.getEndDateS().substring(5, 7) + "/" 
								+ yc0030MetInfo.getEndDateS().substring(8, 10) + " "
								+ yc0030MetInfo.getStartTime().substring(0, 5) + " "
								+ yc0030MetInfo.getMetNm() + " " + yc0030MetInfo.getMetTopic());
					}
					SendMessage.asyncSend(sparkMessagerBean);
					
				}
				// 预约会议的消息的内容
				if (insIdList != null && insIdList.size() != 0) {
					String[] idArrayIns = (String[]) insIdList.toArray(new String[insIdList.size()]);
					sparkMessagerBean.setEmpid(idArrayIns);
					
					if (RESERVE_FLG.DAILY.value().equals(yc0030MetInfo.getReserveType())){
						
						sparkMessagerBean.setMsg_content("会议预约：" 
								+ yc0030MetInfo.getStartDateS().substring(5, 7) + "/" 
								+ yc0030MetInfo.getStartDateS().substring(8, 10) + " "
								+ yc0030MetInfo.getStartTime().substring(0, 5) + " "
								+ yc0030MetInfo.getMetNm() + " " + yc0030MetInfo.getMetTopic());
					} else {
						
						sparkMessagerBean.setMsg_content("会议预约：" 
								+ yc0030MetInfo.getStartDateS().substring(5, 7) + "/" 
								+ yc0030MetInfo.getStartDateS().substring(8, 10) + "到"
								+ yc0030MetInfo.getEndDateS().substring(5, 7) + "/" 
								+ yc0030MetInfo.getEndDateS().substring(8, 10) + " "
								+ yc0030MetInfo.getStartTime().substring(0, 5) + " "
								+ yc0030MetInfo.getMetNm() + " " + yc0030MetInfo.getMetTopic());
					}
					if (yc0030MetInfo.getMetNotes() != null && !"".equals(yc0030MetInfo.getMetNotes())) {
						sparkMessagerBean.setMsg_content(
								sparkMessagerBean.getMsg_content() + " (" + yc0030MetInfo.getMetNotes() + ")");
					}
					SendMessage.asyncSend(sparkMessagerBean);
				}
				
			} else {
				// 取消会议的消息的内容
				if (yc0030MetInfo.getMetUserId() != null && !"".equals(yc0030MetInfo.getMetUserId())) {
					sparkMessagerBean.setStatus(MsgTypeEnum.DELETE);
					sparkMessagerBean.setEmpid(idArray);
					if (RESERVE_FLG.DAILY.value().equals(yc0030MetInfo.getReserveType())){
						
						sparkMessagerBean.setMsg_content("会议取消：" 
								+ yc0030MetInfo.getStartDateS().substring(5, 7) + "/" 
								+ yc0030MetInfo.getStartDateS().substring(8, 10) + " "
								+ yc0030MetInfo.getStartTime().substring(0, 5) + " "
								+ yc0030MetInfo.getMetNm() + " " + yc0030MetInfo.getMetTopic());
					} else {
						
						sparkMessagerBean.setMsg_content("会议取消：" 
								+ yc0030MetInfo.getStartDateS().substring(5, 7) + "/" 
								+ yc0030MetInfo.getStartDateS().substring(8, 10) + "到"
								+ yc0030MetInfo.getEndDateS().substring(5, 7) + "/" 
								+ yc0030MetInfo.getEndDateS().substring(8, 10) + " "
								+ yc0030MetInfo.getStartTime().substring(0, 5) + " "
								+ yc0030MetInfo.getMetNm() + " " + yc0030MetInfo.getMetTopic());
					}

					SendMessage.asyncSend(sparkMessagerBean);
				}
			}
		}
	}

	/**
	 * @param yc0030Dao the yc0030Dao to set
	 */
	public void setYc0030Dao(Yc0030Dao yc0030Dao) {
		this.yc0030Dao = yc0030Dao;
	}

	/**
	 * @param comSequenceService the comSequenceService to set
	 */
	public void setComSequenceService(ComSequenceService comSequenceService) {
		this.comSequenceService = comSequenceService;
	}

}
