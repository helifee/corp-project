/*
 * @(#)DepartmentTest.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 共通系统
 */
package com.yds.perm.ft;

import static com.yds.base.test.BeanAssert.assertBeanLenientEquals;
import static org.junit.Assert.assertNull;

import com.yds.base.test.AbstractSeleniumTestCase;
import com.yds.sample.bean.DepartmentInfo;

public class DepartmentFtTest extends AbstractSeleniumTestCase {
	/**
	 *构造函数用来设定需要备份的表和程序中修改过数据的表
	 */
	public DepartmentFtTest() {
		setTables("PER_DEPARTMENT");

		// 自定义每个动作需要的停顿时间，默认是500ms
		// 一般在ajax动作，或是页面请求的时候，需要有等待时间时候设置
		// setWaitTime(300);
	}

	/**
	 *初始化数据库，往PER_DEPARTMENT表插入数据
	 */
	@Override
	public void init() throws Exception {
		initCommonData(this.getClass(), "init.xls");
	}

	/**
	 *部门管理画面个功能测试
	 */
	@Override
	public void run() throws Exception {
		// 登录
		login("200615", "111111");
		// 打开测试页面
		selenium.open("/YDSWEB/perm/getDeptInfosAction.action");
		// 初始化excel对象
		initCommonData(this.getClass());
		initData("", "result01.xls");
		// 测试新建部门
		testInsertDepartment();
		testInsertDepartmentDB();
		// 测试修改部门
		testUpdateDepartment();
		testUpdateDepartmentDB();
		// 测试删除部门
		testDeleteDepartment();
		testDeleteDepartmentDB();
	}

	/**
	 *测试新建部门功能
	 */
	public void testInsertDepartment() throws Exception {
		selenium.click("createBtn");
		// 测试部门id为空的时候，是否出警告
		selenium.click("refer");
		assertEquals("部门ID不能为空！", selenium.getAlert());
		// 入力已经存在部门ID
		selenium.type("deptId", "001");
		// 测试部门名称为空的时候，是否出警告
		selenium.click("refer");
		assertEquals("部门名称不能为空！", selenium.getAlert());
		// 入力正确部门名称
		selenium.type("deptNm", "部门二");

		// 测试部门略称为空的时候，是否出警告
		selenium.click("refer");
		assertEquals("部门略称不能为空！", selenium.getAlert());
		// 入力正确部门略称
		selenium.type("deptSnm", "部门二");

		// 测试上级部门ID位数不够的时候，是否出警告
		selenium.type("parentDeptId", "23");
		assertEquals("上级部门ID长度应为3位！", selenium.getAlert());
		// 入力正确上级部门ID
		selenium.type("parentDeptId", "001");
		waitForCondition("selenium.getText('parentDeptNm') == '第一部门'");
		// pause();

		// 测试上级部门ID入力后，上级部门名是否正确
		assertEquals("第一部门", selenium.getText("parentDeptNm"));

		// 测试部门主管ID位数不够的时候，是否出警告
		selenium.type("leaderId", "23");
		assertEquals("部门主管ID长度应为6位！", selenium.getAlert());
		// 测试部门主管ID格式不正确的时候，是否出警告
		selenium.type("leaderId", "YD2006");
		assertEquals("部门主管ID输入格式错误！", selenium.getAlert());
		// 入力正确部门主管ID
		selenium.type("leaderId", "200615");
		pause();
		// 测试部门主管ID入力后，主管姓名是否正确
		assertEquals("田健", selenium.getText("leaderNm"));

		selenium.type("deptDesc", "部门二二");

		// 测试登录已经存在部门ID是否出警告
		selenium.click("refer");
		pause();
		assertEquals("是否登录该条记录？", selenium.getConfirmation());
		pause();
		assertEquals("该部门已存在！", selenium.getAlert());

		// 入力正确部门ID，登录部门信息，测试登录画面的数据是否正确
		selenium.type("deptId", "002");
		selenium.click("refer");
		assertEquals("是否登录该条记录？", selenium.getConfirmation());
		pause();

		assertEquals("2", selenium.getText("deptInfosCnt"));
		assertEquals("002", selenium.getText("xpath=//table[@id='table_deptList']//tr[3]/td[1]"));
		assertEquals("部门二", selenium.getText("xpath=//table[@id='table_deptList']//tr[3]/td[2]"));
		assertEquals("部门二", selenium.getText("xpath=//table[@id='table_deptList']//tr[3]/td[3]"));
		assertEquals("YD200615", selenium.getText("xpath=//table[@id='table_deptList']//tr[3]/td[4]"));
		assertEquals("田健", selenium.getText("xpath=//table[@id='table_deptList']//tr[3]/td[5]"));
		assertEquals("第一部门", selenium.getText("xpath=//table[@id='table_deptList']//tr[3]/td[6]"));
		assertEquals("部门二二", selenium.getText("xpath=//table[@id='table_deptList']//tr[3]/td[7]"));
		pause();
	}

	/**
	 *测试修改部门功能
	 */
	public void testUpdateDepartment() throws Exception {
		selenium.click("//a[@onclick=\"modifyDeptInfo('002')\"]");
		pause();
		selenium.type("deptNm", "部门二修正");
		selenium.type("deptSnm", "部门二略称修正");
		selenium.type("leaderId", "199804");
		pause();
		assertEquals("刘祎", selenium.getText("leaderNm"));
		selenium.type("deptDesc", "部门二描述修正");

		// 提交修改
		selenium.click("refer");
		assertEquals("是否修改该条记录?", selenium.getConfirmation());
		pause();

		assertEquals("部门二修正", selenium.getText("xpath=//table[@id='table_deptList']//tr[3]/td[2]"));
		assertEquals("部门二略称修正", selenium.getText("xpath=//table[@id='table_deptList']//tr[3]/td[3]"));
		assertEquals("YD199804", selenium.getText("xpath=//table[@id='table_deptList']//tr[3]/td[4]"));
		assertEquals("刘祎", selenium.getText("xpath=//table[@id='table_deptList']//tr[3]/td[5]"));
		assertEquals("第一部门", selenium.getText("xpath=//table[@id='table_deptList']//tr[3]/td[6]"));
		assertEquals("部门二描述修正", selenium.getText("xpath=//table[@id='table_deptList']//tr[3]/td[7]"));
		pause();
	}

	/**
	 *测试删除部门功能
	 */
	public void testDeleteDepartment() throws Exception {
		selenium.click("//a[@onclick=\"deleteDeptInfo('002')\"]");
		assertEquals("是否删除该条记录?", selenium.getConfirmation());
		pause();
		assertEquals("1", selenium.getText("deptInfosCnt"));
		pause();
	}

	/**
	 *测试新建部门信息是否登录到数据库中
	 */
	public void testInsertDepartmentDB() throws Exception {
		// 从数据库中检索刚刚插入的数据
		DepartmentInfo actualInfo = findBeanByCondition(DepartmentInfo.class, "expect1_PER_DEPARTMENT");
		// 得到期望数据
		DepartmentInfo expectInfo = getExpectObject(DepartmentInfo.class, "expect1_PER_DEPARTMENT");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectInfo, actualInfo);
	}

	/**
	 *测试修正部门信息是否更新到数据库中
	 */
	public void testUpdateDepartmentDB() throws Exception {
		// 从数据库中检索刚刚插入的数据
		DepartmentInfo actualInfo = findBeanByCondition(DepartmentInfo.class, "expect2_PER_DEPARTMENT");
		// 得到期望数据
		DepartmentInfo expectInfo = getExpectObject(DepartmentInfo.class, "expect2_PER_DEPARTMENT");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectInfo, actualInfo);
	}

	/**
	 *测试删除部门信息是否在数据库中删除
	 */
	public void testDeleteDepartmentDB() throws Exception {
		// 得到期望数据
		DepartmentInfo expectInfo = findBeanByCondition(DepartmentInfo.class, "expect3_PER_DEPARTMENT");
		// 断言检索结果和预期是否一致
		assertNull(expectInfo);
	}
}
