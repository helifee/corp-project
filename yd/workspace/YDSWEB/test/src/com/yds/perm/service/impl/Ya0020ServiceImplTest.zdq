/*
 * @(#)Ya0020ServiceImplTest.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 共通系统
 */

package com.yds.perm.service.impl;

import static com.yds.base.test.BeanAssert.assertBeanEquals;
import static com.yds.base.test.BeanAssert.assertBeanLenientEquals;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;

import com.yds.base.test.AbstractSpringTransTest;
import com.yds.base.test.ExcelUtil;
import com.yds.common.bean.UserInfo;
import com.yds.common.service.SessionConstants;
import com.yds.perm.bean.PerRoleInfo;
import com.yds.perm.bean.PerRolePermitInfo;
import com.yds.perm.service.Ya0020Service;

//@TransactionConfiguration(defaultRollback = false)
public class Ya0020ServiceImplTest extends AbstractSpringTransTest {
	/** 自动注入. */
	@Resource
	private Ya0020Service ya0020Service;

	/**
	 * @throws java.lang.Exception
	 */
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		// 模拟Session设值
		UserInfo userInfo = new UserInfo();
		userInfo.setUserId("YD200615");
		String ip = "192.168.81.22";
		Map<String, Object> session = ExcelUtil.getSession();
		session.put(SessionConstants.USERINFO, userInfo);
		session.put(SessionConstants.IPADDR, ip);
	}

	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {

		// 如果没有共通数据插入数据库，可以不用第一个参数
		initCommonData(Ya0020ServiceImpl.class);

		// 删除表中数据(避免和测试数据冲突)
		this.deleteFromTables("PER_ROLE", "PER_PERMIT", "PER_ROLE_PERMIT");
	}

	/**
	 * Test method for {@link com.yds.perm.service.impl.Ya0020ServiceImpl#getPerRoleInfo(String)}.
	 */
	@Test
	@Ignore
	// 取得角色信息方法测试
	public void testGetPerRoleInfo() throws Exception {

		// 检索PER_ROLE有数据的时候
		// 初始化数据库
		initData("input01.xls", "result01.xls");
		// 初始化测试方法参数
		String roleId = getParamObject(String.class);
		// 调用被测试方法
		PerRoleInfo actualInfo = ya0020Service.getPerRoleInfo(roleId);
		// 得到期望值
		PerRoleInfo expectInfo = getExpectObject(PerRoleInfo.class);
		// 断言检索结果和期望值是否一致，需要忽略的行，在expect Sheet里对应属性不设值
		assertBeanLenientEquals(expectInfo, actualInfo);

		// 检索PER_ROLE没有数据的时候
		roleId = getParamObject(String.class, "param2");
		actualInfo = ya0020Service.getPerRoleInfo(roleId);
		expectInfo = getExpectObject(PerRoleInfo.class, "expect2");
		assertBeanEquals(expectInfo, actualInfo);
	}

	/**
	 * Test method for {@link com.yds.perm.service.impl.Ya0020ServiceImpl#getMaxRoleId()}.
	 */
	@Test
	@Ignore
	// 取得PER_ROLE最大角色ID方法测试
	public void testGetMaxRoleId() throws Exception {
		// 检索PER_ROLE有数据的时候
		// 初始化数据库
		initData("input01.xls", "result02.xls");
		// 调用被测试方法
		PerRoleInfo actualInfo = ya0020Service.updateMaxRoleId();
		// 得到预期值
		PerRoleInfo expectInfo = getExpectObject(PerRoleInfo.class);
		// 断言检索结果和期望值是否一致
		assertBeanLenientEquals(expectInfo, actualInfo);

		// 检索PER_ROLE没有数据的时候
		deleteFromTables("PER_ROLE");
		// 调用被测试方法
		actualInfo = ya0020Service.updateMaxRoleId();
		expectInfo = getExpectObject(PerRoleInfo.class, "expect2");
		assertBeanLenientEquals(expectInfo, actualInfo);
	}

	/**
	 * Test method for
	 * {@link com.yds.perm.service.impl.Ya0020ServiceImpl
	 * #insertRoleAndRolePerMgr(String, com.yds.perm.bean.PerRoleInfo)}
	 * .
	 */
	@Test
	@Ignore
	// 添加角色信息和角色授权信息一览方法测试
	public void testInsertRoleAndRolePerMgr() throws Exception {
		// 初始化数据库
		initData("", "result03.xls");
		// 初始化测试方法参数
		String jsonStr = getJsonString("param1");
		PerRoleInfo perRoleInfo = getParamObject(PerRoleInfo.class, "param2_PER_ROLE");
		// 调用被测试方法
		ya0020Service.insertRoleAndRolePerMgr(jsonStr, perRoleInfo);

		// 检索PER_ROLE插入的数据
		PerRoleInfo actualPerRoleInfo = findBeanByCondition(PerRoleInfo.class, "param2_PER_ROLE");
		// 得到PER_ROLE期望值
		PerRoleInfo expectPerRoleInfo = getExpectObject(PerRoleInfo.class, "expect1");
		// 断言检索结果和预期是不是一致
		assertBeanLenientEquals(expectPerRoleInfo, actualPerRoleInfo);

		// 检索PER_ROLE_PERMIT插入的数据
		List<PerRolePermitInfo> actualPerRolePermitInfo = findListBeanByCondition(PerRolePermitInfo.class,
				"expect2_PER_ROLE_PERMIT");
		List<PerRolePermitInfo> expectPerRolePermitInfo = getExpectList(PerRolePermitInfo.class,
				"expect2_PER_ROLE_PERMIT");
		// 断言检索结果和预期是不是一致
		assertBeanLenientEquals(actualPerRolePermitInfo, expectPerRolePermitInfo);
	}

	/**
	 * Test method for
	 * {@link com.yds.perm.service.impl.Ya0020ServiceImpl
	 * #updateRoleAndRolePerMgr(String, com.yds.perm.bean.PerRoleInfo, String, String)}
	 * .
	 */
	@Test
	@Ignore
	// 更新角色信息和角色授权信息一览方法测试
	public void testUpdateRoleAndRolePerMgr() throws Exception {
		// 初始化数据库
		initData("input02.xls", "result04.xls");
		// 初始化测试方法参数
		String jsonStr = getJsonString("param1");
		String jsonStrC = getJsonString("param4");
		PerRoleInfo perRoleInfo = getParamObject(PerRoleInfo.class, "param2_PER_ROLE");
		String updateRoleFlg = getParamObject(String.class, "param3");
		// 调用被测试方法
		ya0020Service.updateRoleAndRolePerMgr(updateRoleFlg, perRoleInfo, jsonStr, jsonStrC, "");

		// 检索PER_ROLE插入的数据
		PerRoleInfo actualPerRoleInfo = findBeanByCondition(PerRoleInfo.class, "param2_PER_ROLE");
		// 得到PER_ROLE期望值
		PerRoleInfo expectPerRoleInfo = getExpectObject(PerRoleInfo.class, "expect1");
		// 断言检索结果和预期是不是一致
		assertBeanLenientEquals(expectPerRoleInfo, actualPerRoleInfo);

		// 检索PER_ROLE_PERMIT插入的数据
		List<PerRolePermitInfo> actualPerRolePermitInfo = findListBeanByCondition(PerRolePermitInfo.class,
				"expect2_PER_ROLE_PERMIT");
		List<PerRolePermitInfo> expectPerRolePermitInfo = getExpectList(PerRolePermitInfo.class,
				"expect2_PER_ROLE_PERMIT");
		// 断言检索结果和预期是不是一致
		assertBeanLenientEquals(actualPerRolePermitInfo, expectPerRolePermitInfo);
	}

	/**
	 * Test method for
	 * {@link com.yds.perm.service.impl.Ya0020ServiceImpl
	 * #deleteRolePerMgrInfo(String, String)} .
	 */
	@Test
	@Ignore
	public void testDeleteRolePerMgrInfo() {

	}
}
