/*
 * @(#)Ya0020DaoImplTest.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 权限管理
 */
package com.yds.perm.dao.impl;

import static com.yds.base.test.BeanAssert.assertBeanLenientEquals;
import static com.yds.base.test.BeanAssert.assertListEquals;
import static com.yds.base.test.BeanAssert.assertListLenientEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import com.yds.base.test.AbstractSpringTransTest;
import com.yds.perm.bean.PerRoleInfo;
import com.yds.perm.bean.PerRolePermitInfo;
import com.yds.perm.bean.RolePerMgrInfo;
import com.yds.perm.dao.Ya0020Dao;

/**
 * @author caoxiaodong
 * @version 1.00 2010/03/24
 */
public class Ya0020DaoImplTest extends AbstractSpringTransTest {
	/** 注入Dao */
	@Resource
	private Ya0020Dao ya0020Dao;

	/**
	 * 初始化测试信息
	 * 
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		// 删除表中数据(避免和测试数据冲突)
		deleteFromTables("PER_ROLE", "PER_PERMIT", "PER_ROLE_PERMIT");
		
		initCommonData(Ya0020DaoImpl.class);
	}

	/**
	 * Test method for
	 * {@link com.yds.perm.dao.impl.Ya0020DaoImpl#getPerRoleInfo(java.lang.String)}
	 * .
	 * 
	 * @throws java.lang.Exception
	 */
	@Test
	@Ignore
	public void testGetPerRoleInfo() throws Exception {
		// 初始化数据库
		initData("input01.xls", "result01.xls");

		// 初始化测试方法参数
		String roleId = getParamObject(String.class);

		// 调用被测试方法
		PerRoleInfo actualInfo = ya0020Dao.getPerRoleInfo(roleId);

		// 得到预期值
		PerRoleInfo expectInfo = getExpectObject(PerRoleInfo.class);

		// 断言检索结果和预期是不是一致
		assertBeanLenientEquals(expectInfo, actualInfo);
	}

	/**
	 * Test method for
	 * {@link com.yds.perm.dao.impl.Ya0020DaoImpl#getMaxRoleId()}.
	 * 
	 * @throws java.lang.Exception
	 */
	@Test
	@Ignore
	public void testGetMaxRoleId() throws Exception {
		// 初始化数据库
		initData("input02.xls", "result02.xls");

		// 调用被测试方法
		PerRoleInfo actualInfo = ya0020Dao.getMaxRoleId();

		// 得到预期值
		PerRoleInfo expectInfo = getExpectObject(PerRoleInfo.class);

		// 断言检索结果和预期是不是一致
		assertEquals(expectInfo.getRoleId(), actualInfo.getRoleId());
	}

	/**
	 * Test method for
	 * {@link com.yds.perm.dao.impl.Ya0020DaoImpl#getRolePerMgrList()}.
	 * 
	 * @throws java.lang.Exception
	 */
	@Test
	@Ignore
	public void testGetRolePerMgrList() throws Exception {
		// 拥有部分权限的测试
		commonGetRolePerMgrList("input03.xls", "result03.xls");

		// 拥有全部权限的测试
		commonGetRolePerMgrList("input031.xls", "result031.xls");

		// 不拥有任何权限的测试
		commonGetRolePerMgrList("input032.xls", "result032.xls");
	}

	/**
	 * testGetRolePerMgrList的共通测试方法
	 * 
	 * @param input
	 *            入力excel名
	 * @param result
	 *            期望excel名
	 * @throws java.lang.Exception
	 */
	private void commonGetRolePerMgrList(String input, String result)
			throws Exception {
		// 删除表中数据(避免和测试数据冲突)
		deleteFromTables("PER_PERMIT", "PER_ROLE_PERMIT");

		// 初始化数据库
		initData(input, result);

		// 初始化测试方法参数
		String roleId = getParamObject(String.class);

		// 调用被测试方法
		List<RolePerMgrInfo> actualListInfo = ya0020Dao
				.getRolePerMgrListChecked(roleId);
		// 得到预期值
		List<RolePerMgrInfo> expectListInfo = getExpectList(
				RolePerMgrInfo.class);

		// 断言检索结果和预期是不是一致
		assertListEquals(expectListInfo, actualListInfo);
	}

	/**
	 * Test method for
	 * {@link com.yds.perm.dao.impl.Ya0020DaoImpl#getRolePerMgrListChecked(java.lang.String)}
	 * .
	 * @throws java.lang.Exception
	 */
	@Test
	public void testGetRolePerMgrListChecked() throws Exception {

		// 初始化数据库
		initData("input04.xls", "result04.xls");

		// 调用被测试方法
		List<RolePerMgrInfo> actualListInfo = ya0020Dao.getRolePerMgrList();

		// 得到预期值
		List<RolePerMgrInfo> expectListInfo = getExpectList(
				RolePerMgrInfo.class);

		// 断言检索结果和预期是不是一致
		assertListLenientEquals(expectListInfo, actualListInfo);
	}

	/**
	 * Test method for
	 * {@link com.yds.perm.dao.impl.Ya0020DaoImpl#insertPerRoleInfo(com.yds.perm.bean.PerRoleInfo)}
	 * .
	 * @throws java.lang.Exception
	 */
	@Test
	public void testInsertPerRoleInfo() throws Exception {
		// 初始化数据库(不需要准备数据，input05不准备，第一个参数设为空)
		initData("", "result05.xls");

		// 从param_PER_ROLE的sheet里得到需要插入的数据
		PerRoleInfo perRoleInfo =getParamObject(
				PerRoleInfo.class, "param_PER_ROLE");

		// 调用被测试方法
		ya0020Dao.insertPerRoleInfo(perRoleInfo);

		// 检索插入对象
		PerRoleInfo actualInfo = findBeanByCondition(
				PerRoleInfo.class, "param_PER_ROLE");

		// 得到预期值
		PerRoleInfo expectInfo = getExpectObject(PerRoleInfo.class);

		// 断言检索结果和预期是不是一致
		assertBeanLenientEquals(expectInfo, actualInfo);
	}

	/**
	 * Test method for
	 * {@link com.yds.perm.dao.impl.Ya0020DaoImpl#insertPerRolePermitInfo(com.yds.perm.bean.PerRolePermitInfo)}
	 * .
	 * @throws java.lang.Exception
	 */
	@Test
	public void testInsertPerRolePermitInfo() throws Exception {
		// 初始化数据库(不需要准备数据，input06不准备，第一个参数设为空)
		initData("", "result06.xls");

		// 从param_PER_ROLE_PERMIT的sheet里得到需要插入的数据
		PerRolePermitInfo perRolePermitInfo = getParamObject(
				PerRolePermitInfo.class, "param_PER_ROLE_PERMIT");

		// 调用被测试方法
		ya0020Dao.insertPerRolePermitInfo(perRolePermitInfo);

		// 检索插入对象
		PerRolePermitInfo actualInfo =findBeanByCondition(
				PerRolePermitInfo.class, "param_PER_ROLE_PERMIT");

		// 得到预期值
		PerRolePermitInfo expectInfo =getExpectObject(PerRolePermitInfo.class);

		// 断言检索结果和预期是不是一致
		assertBeanLenientEquals(expectInfo, actualInfo);
	}

	/**
	 * Test method for
	 * {@link com.yds.perm.dao.impl.Ya0020DaoImpl#updatePerRoleInfo(com.yds.perm.bean.PerRoleInfo)}
	 * .
	 * @throws java.lang.Exception
	 */
	@Test
	public void testUpdatePerRoleInfo() throws Exception {
		// 初始化数据库
		initData("input07.xls", "result07.xls");

		// 初始化测试方法参数
		PerRoleInfo perRoleInfo = getParamObject(
				PerRoleInfo.class, "param_PER_ROLE");

		// 调用被测试方法
		ya0020Dao.updatePerRoleInfo(perRoleInfo);

		// 实际检索对象
		PerRoleInfo actualInfo = findBeanByCondition(
				PerRoleInfo.class, "param_PER_ROLE");

		// 得到预期值
		PerRoleInfo expectInfo = getExpectObject(PerRoleInfo.class);

		// 断言检索结果和预期是不是一致
		assertBeanLenientEquals(expectInfo, actualInfo);
	}

	/**
	 * Test method for
	 * {@link com.yds.perm.dao.impl.Ya0020DaoImpl#deleteRolePermitInfo(com.yds.perm.bean.PerRolePermitInfo)}
	 * .
	 * @throws java.lang.Exception
	 */
	@Test
	public void testDeleteRolePermitInfo() throws Exception {
		// 初始化数据库
		initData("input08.xls", "result08.xls");

		// 初始化测试方法参数
		PerRolePermitInfo perRolePermitInfoDel = (PerRolePermitInfo) getParamObject(
				PerRolePermitInfo.class, "param_PER_ROLE_PERMIT");

		// 调用被测试方法
		ya0020Dao.deleteRolePermitInfo(perRolePermitInfoDel);

		// 实际检索对象
		PerRolePermitInfo actualInfo = (PerRolePermitInfo) findBeanByCondition(
				PerRolePermitInfo.class, "param_PER_ROLE_PERMIT");

		// 断言检索结果是否为空
		assertNull(actualInfo);
	}

	/**
	 * Test method for
	 * {@link com.yds.perm.dao.impl.Ya0020DaoImpl#deletePerRolePosition(java.lang.String)}
	 * . Test method for
	 * {@link com.yds.perm.dao.impl.Ya0020DaoImpl#deletePerRole(java.lang.String)}
	 * . Test method for
	 * {@link com.yds.perm.dao.impl.Ya0020DaoImpl#deletePerRolePermit(java.lang.String)}
	 * . Test method for
	 * {@link com.yds.perm.dao.impl.Ya0020DaoImpl#deletePerPermitTime(java.lang.String)}
	 * . Test method for
	 * {@link com.yds.perm.dao.impl.Ya0020DaoImpl#deletePerUserPermit(java.lang.String)}
	 * .
	 * 
	 * @throws java.lang.Exception
	 */
	@Test
	@Ignore(value="PER_PERMIT_TIME表已经删除")
	public void testDeleteRolePerMgrInfo() throws Exception {
		// 删除表中数据(避免和测试数据冲突)
		deleteFromTables("PER_ROLE_POSTION", "PER_PERMIT_TIME",
				"PER_USER_PERMIT");

		// 初始化数据库
		initData("input09.xls", "result09.xls");

		// 初始化测试方法参数
		String roleId = (String) getParamObject(String.class);

		// 调用被测试方法
		ya0020Dao.deletePerRole(roleId);
		ya0020Dao.deletePerRolePermit(roleId);
	//	ya0020Dao.deletePerPermitTime(roleId);
		ya0020Dao.deletePerRolePosition(roleId);
		ya0020Dao.deletePerUserPermit(roleId);

		// 实际检索对象
		PerRolePermitInfo actualPerRolePermitInfo = (PerRolePermitInfo) findBeanByCondition(
				PerRolePermitInfo.class, "param_PER_ROLE_PERMIT");
		PerRoleInfo actualPerRoleInfo = (PerRoleInfo) findBeanByCondition(
				PerRoleInfo.class, "param_PER_ROLE");
		List<Map<String, Object>> actualPerRolePostion = findListByCondition("param_PER_ROLE_POSTION");

		// 查询需要删除的数据(PERM_FLAG=0)
		List<Map<String, Object>> actualPerUserPermit = findListByCondition("param_PER_USER_PERMIT");
		List<Map<String, Object>> actualPerPermitTime = findListByCondition("param_PER_PERMIT_TIME");

		// 查询不需要删除的数据(PERM_FLAG=1)
		List<Map<String, Object>> actualPerUserPermit2 = findListByCondition("param2_PER_USER_PERMIT");
		List<Map<String, Object>> actualPerPermitTime2 = findListByCondition("param2_PER_PERMIT_TIME");

		// 断言检索结果是否为空
		assertNull(actualPerRolePermitInfo);
		assertNull(actualPerRoleInfo);

		// 断言检索的List（PERM_FLAG=0）是否不存在数据
		assertEquals(0, actualPerRolePostion.size());
		assertEquals(0, actualPerUserPermit.size());
		assertEquals(0, actualPerPermitTime.size());

		// PERM_FLAG=1的数据仍然存在，没有被删除
		assertTrue(0 < actualPerUserPermit2.size());
		assertTrue(0 < actualPerPermitTime2.size());
	}
}
