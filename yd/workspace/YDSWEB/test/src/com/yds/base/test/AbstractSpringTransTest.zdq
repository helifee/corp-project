/*
 * @(#)AbstractSpringTransTest.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 共通系统
 */

package com.yds.base.test;

import static com.yds.base.test.ExcelUtil.*;
import java.beans.PropertyDescriptor;
import java.io.File;
import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import net.sf.json.JSONObject;

import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.AbstractTransactionalJUnit4SpringContextTests;

import com.yds.util.service.DateUtil;

/**
 * 利用基于注解的spring TestContext 测试框架测试基类，支持事务.<br>
 * 
 * @author tianjian
 * 
 */
@ContextConfiguration(locations = { "classpath:applicationContext-*.xml" })
public abstract class AbstractSpringTransTest extends
		AbstractTransactionalJUnit4SpringContextTests {
	public static final String KEY = "key";
	/** *_init和*_input*文件名key. */
	private static final String INSERT = "insert";
	/** *_result*文件名key. */
	private static final String RESULT = "result";
	/** 默认sheet名param. */
	private static final String PARAMSHEET = "param";
	/** 默认sheet名expect. */
	private static final String EXPECTSHEET = "expect";
	/** excel的sheet中有数据的行数. */
	private static final int ROW_NUMBER_FOR = 3;
	/** 测试类Class对象. */
	private Class<? extends Object> clazz;
	/** *_result*数据excel对象. */
	private HSSFWorkbook fileResultWb;
	/** 储存文件名Map. */
	private Map<String, String> fileMap;

	/**
	 * 取得当前类路径.
	 * 
	 * @param clazz
	 *            测试类对象
	 */
	public void initCommonData(Class<? extends Object> clazz) throws Exception {
		initCommonData(clazz,"");
	}

	/**
	 * 初始化被测试类共通excel文件对象，插入数据库表中,取得当前类路径.
	 * 
	 * @param initCommonFile
	 *            初始化数据excel名. 如文件为：init.xls<br>
	 *            对应参数为：init.xls
	 * @param clazz
	 *            测试类对象
	 */
	public void initCommonData(Class<? extends Object> clazz,
			String initCommonFile) throws Exception {
		this.clazz = clazz;
		this.fileMap = new HashMap<String,String>();
		initInsertData(initCommonFile);
	}
	


	/**
	 * 初始化input.xls把测试方法准备数据插入到数据库,初始化result.xlsExcel对象
	 * 
	 * @param inputFileName
	 *            input.xls文件名
	 * @param resultFileName
	 *            result.xls文件名           
	 */
	public void initData(String inputFileName,String resultFileName) throws Exception{
		String[] fileNames = {inputFileName,resultFileName};
		initInsertData(fileNames);
		String resultFile = fileMap.get(RESULT);
		if(null != resultFile && !"".equals(resultFile)){
			File file = new File(resultFile);
			if (file.exists()) {
				// 从init,input文件读取数据插入表中
				setResultWb(fileMap.get(RESULT));
			} else {
				throw new Exception(resultFile + "不存在");
			}
		}
	}

	/**
	 * 从*_result*.xls的sheet名为param中读取数据，初始化对象.
	 * 
	 * @param clazz
	 *            测试方法参数类的Class
	 * @return Object 测试方法参数类对象
	 */
	public <T> T getParamObject(Class<T> clazz) throws Exception {
		return getObjectInstance(fileResultWb, PARAMSHEET, clazz, false, "1");
	}

	/**
	 * @param clazz
	 *            测试方法参数类的Class
	 * @param sheetName
	 *            根绝自定义sheet返回对象
	 * @return Object 测试方法参数类对象
	 */
	public <T> T getParamObject(Class<T> clazz, String sheetName)
			throws Exception {
		return getObjectInstance(fileResultWb, sheetName, clazz, false, "1");
	}

	/**
	 * @param clazz
	 *            测试方法参数类的Class
	 * @return Object 测试方法参数类对象List
	 */
	@SuppressWarnings("unchecked")
	public <T> List<T> getParamList(Class<T> clazz) throws Exception {
		return (List<T>) getObjectInstance(fileResultWb, PARAMSHEET, clazz, true,
				"1");
	}

	/**
	 * @param clazz
	 *            测试方法参数类的Class
	 * @param sheetName
	 *            根绝自定义sheet返回对象
	 * @return List 测试方法参数类对象List
	 */
	@SuppressWarnings("unchecked")
	public <T> List<T> getParamList(Class<T> clazz, String sheetName)
			throws Exception {
		return (List<T>) getObjectInstance(fileResultWb, sheetName, clazz, true,
				"1");
	}

	/**
	 * 从*_result*.xls的sheet名为expect中读取数据，初始化对象.
	 * 
	 * @param clazz
	 *            测试方法预期值类的Class
	 * @return Object 测试方法预期值类对象
	 */
	public <T> T getExpectObject(Class<T> clazz) throws Exception {
		return getObjectInstance(fileResultWb, EXPECTSHEET, clazz, false, "1");
	}

	/**
	 * @param clazz
	 *            期盼数据对象类的Class
	 * @param sheetName
	 *            sheet名
	 * @return Object 测试方法预期值类对象
	 */
	public <T> T getExpectObject(Class<T> clazz, String sheetName)
			throws Exception {
		return getObjectInstance(fileResultWb, sheetName, clazz, false, "1");
	}

	/**
	 * @param clazz
	 *            测试方法预期值类的Class
	 * @return List 测试方法预期值类对象List
	 */
	@SuppressWarnings("unchecked")
	public <T> List<T> getExpectList(Class<T> clazz) throws Exception {
		return (List<T>) getObjectInstance(fileResultWb, EXPECTSHEET, clazz,
				true, "1");
	}

	/**
	 * @param clazz
	 *            测试方法预期值类的Class
	 * @param sheetName
	 *            sheet名
	 * @return List 测试方法预期值类对象象List
	 */
	@SuppressWarnings("unchecked")
	public <T> List<T> getExpectList(Class<T> clazz, String sheetName)
			throws Exception {
		return (List<T>) getObjectInstance(fileResultWb, sheetName, clazz, true,
				"1");
	}

	/**
	 * 把excel中数据转化成json字符串.
	 * 
	 * @return String 返回json字符串
	 */
	public String getJsonString() throws Exception {
		return getObjectInstance(fileResultWb, PARAMSHEET, null, false, "3")
				.toString();
	}

	/**
	 * 把excel中数据转化成json字符串.
	 * 
	 * @param sheetName
	 *            根据自定义sheet返回json字符串
	 * @return String 返回json字符串
	 */
	public String getJsonString(String sheetName) throws Exception {
		return getObjectInstance(fileResultWb, sheetName, null, false, "3")
				.toString();
	}

	/**
	 * 把excel中数据转化成json对象.
	 * 
	 * @return String 返回JSONObject对象
	 */

	public JSONObject getJsonObject() throws Exception {
		return JSONObject.fromObject(getObjectInstance(fileResultWb, PARAMSHEET,
				null, false, "3").toString());
	}

	/**
	 * 把excel中数据转化成json对象.
	 * 
	 * @param sheetName
	 *            根据自定义sheet返回json对象
	 * @return String 返回JSONObject对象
	 */
	public JSONObject getJsonObject(String sheetName) throws Exception {
		return JSONObject.fromObject(getObjectInstance(fileResultWb, sheetName,
				null, false, "3").toString());
	}

	/**
	 * 得到条件检索Map对象.
	 * 
	 * @param sheetName
	 *            Sheet名
	 * @return Map 条件检索Map对象
	 */
	@SuppressWarnings("unchecked")
	public Map<String, Object> findMapByCondition(String sheetName)
			throws Exception {
		return (Map<String, Object>) getObjectInstance(fileResultWb, sheetName,
				null, false, "2");
	}

	/**
	 * 得到条件检索List<Map>对象.
	 * 
	 * @param sheetName
	 *            Sheet名
	 * @return List 条件检索List<Map>对象
	 */
	@SuppressWarnings("unchecked")
	public List<Map<String, Object>> findListByCondition(String sheetName)
			throws Exception {
		return (List<Map<String, Object>>) getObjectInstance(fileResultWb,
				sheetName, null, true, "2");
	}

	/**
	 * 得到条件检索Bean对象.
	 * 
	 * @param sheetName
	 *            Sheet名
	 * @param clazz
	 *            测试方法参数类的Class
	 * @return Object 条件检索Bean对象
	 */
	public <T> T findBeanByCondition(Class<T> clazz, String sheetName)
			throws Exception {
		return getObjectInstance(fileResultWb, sheetName, clazz, false, "2");
	}

	/**
	 * 得到条件检索List<Bean>对象.
	 * 
	 * @param sheetName
	 *            Sheet名
	 * @param clazz
	 *            测试方法参数类的Class
	 * @return Object 条件检索List<Bean>对象
	 */
	@SuppressWarnings("unchecked")
	public <T> List<T> findListBeanByCondition(Class<T> clazz, String sheetName)
			throws Exception {
		return (List<T>) getObjectInstance(fileResultWb, sheetName, clazz, true,
				"2");
	}

	/**
	 * 从sheet中每列读数据，得到不需要比较的属性List.
	 * 
	 * @param sheetName
	 *            需要处理的sheet名
	 * @return List
	 */
	@Deprecated
	public List<String> getExcludePropertyList(String sheetName)
			throws Exception {
		// 生成excel文档对象
		HSSFWorkbook wb = fileResultWb;
		HSSFSheet sheet = wb.getSheet(sheetName);
		List<String> exPropertyList = new ArrayList<String>();
		for (Cell cell : sheet.getRow(2)) {
			Cell cellRow0 = sheet.getRow(0).getCell(cell.getColumnIndex());
			if (null != cellRow0
					&& EXCLUDE_PROPERTY.equals(cellRow0.getStringCellValue()
							.trim())) {
				exPropertyList.add(cell.getStringCellValue().trim());
			}
		}
		return exPropertyList;
	}
	
	/**
	 * 初始化excel文件对象，插入数据库表中.
	 * 
	 * @param initFileNames
	 *            含有插入数据的excel名. 
	 *            如果是文件名数组长度为1，是init文件名
	 *            如文件为：DepartmentDaoImpl_init.xls<br>
	 *            如果是文件名数组长度为2，是init文件名
	 *            第一个文件是input文件：DepartmentDaoImpl_input01.xls<br>
	 */
	private void initInsertData(String ...initFileNames) throws Exception {
		// 得到储存excel文件名的map
		fileMap.clear();
		this.setFileNames(clazz, initFileNames);
		// 用initdata.xls文件读取数据插入数据库
		String insertFile = fileMap.get(INSERT);
		if (!"".equals(insertFile)) {
			// 检查文件是否存在
			File file = new File(insertFile);
			if (file.exists()) {
				// 从init,input文件读取数据插入表中
				insertDataFromExcel(insertFile);
			} else {
				throw new Exception(insertFile + "不存在");
			}
		}
	}
	
	/**
	 * 设定result.xls文件对象
	 * 
	 * @param path
	 *            result.xls文件路径
	 */
	private void setResultWb(String path) throws Exception{
		fileResultWb = ExcelSheetToTable.getHSSFWorkbook(path);
	}
	
	/**
	 * 得到测试excel文件路径Map对象.
	 * 
	 * @param excelprefix
	 *            excel文件名前缀. 如果测试类为DepartmentDaoImpl.java<br>
	 *            前缀名为：DepartmentDaoImpl
	 * @param testfilepath
	 *            被测试类所在路径
	 * @param fileName
	 *            excel文件后缀名数组
	 * @return Map 含有excel文件路径的map对象
	 */
	private void setFileNames(Class<? extends Object> clazz, String... fileName) {
		String testfilepath = clazz.getResource(".").getPath();
		String excelprefix = clazz.getSimpleName();
		String insertFilePath = "";
		String testFilePath = "";
		// 如果fileName有第一个，往Map里插入init*.excel或input*.excel的文件路径
		if (!"".equals(fileName[0])) {
			insertFilePath = testfilepath + "/" + excelprefix + "_" + fileName[0];
		}
		this.fileMap.put(INSERT, insertFilePath);
		
		// 如果fileName有两个，第二个为result*.excel文件名插入到Map里
		if (2 == fileName.length) {
			if (!"".equals(fileName[1])) {
				testFilePath = testfilepath + "/" + excelprefix + "_"
						+ fileName[1];
			}
			this.fileMap.put(RESULT, testFilePath);
		}
	}

	/**
	 * 从*_result*.xls，*_param*.xls文件读取数据，初始化对象.
	 * 
	 * @param testFile
	 *            测试Excel文件对象
	 * @param sheetName
	 *            测试Excel文件Sheet名
	 * @param clazz
	 *            对象class
	 * @param isList
	 *            是否是List
	 * @param flg
	 *            参数Bean为"1",条件检索Bean"2"，生成json格式字符串为"3"
	 */
	@SuppressWarnings("unchecked")
	private <T> T getObjectInstance(HSSFWorkbook excelFileWb,
			String sheetName, Class<T> clazz, boolean isList, String flg)
			throws Exception {
		// 生成excel文档对象
		HSSFWorkbook wb = excelFileWb;
		// 判断excel文件中Sheet是否存在
		if (null == wb.getSheet(sheetName)) {
			throw new Exception("名为" + sheetName + "的Sheet不存在");
		}
		HSSFSheet sheet = wb.getSheet(sheetName);

		// 得到sheet里数据行数
		int rowCount = sheet.getLastRowNum() + 1;
		// 如果Sheet中没有数据返回Null
		if (rowCount <= ROW_NUMBER_FOR && !"2".equals(flg)) {
			return null;
		}

		// 通过Sheet中返回参数或期望值Bean
		if ("1".equals(flg)) {
			return getObject(sheet, clazz, isList);
		} else if ("2".equals(flg)) {
			// 通过Sheet中检索对象Bean
			return findListByCondition(sheet, clazz, isList);
		} else {
			// 通过Sheet中数据生成json字符串
			return (T) getJsonStr(sheet);
		}
	}

	/**
	 * 条件检索数据，返回List对象.
	 * 
	 * @param sheet
	 *            Sheet对象
	 * @param clazz
	 *            Bean对象
	 * @param isList
	 *            是否是List
	 * @return List 返回检索数据Object或List
	 */
	@SuppressWarnings("unchecked")
	private <T> T getObject(HSSFSheet sheet, Class<T> clazz, boolean isList)
			throws Exception {
		List<T> list = null;
		// 如果测试方法参数或预期结果是List，实例化一个List
		if (isList) {
			list = new ArrayList<T>();
		}
		// 得到sheet里字段名row
		HSSFRow rowTitle = sheet.getRow(2);

		// 把每行中cell数据注入到Bean的属性里
		// 得到sheet里数据行数
		int rowCount = sheet.getLastRowNum() + 1;
		for (int i = ROW_NUMBER_FOR; i < rowCount; i++) {
			if (null == sheet.getRow(i)) {
				break;
			}
			HSSFRow row = sheet.getRow(i);

			// 被测试方法参数或预期结果Bean或基本数据对象实例
			T newObject = null;
			if (!("Integer".equals(clazz.getSimpleName()))
					&& !("Long".equals(clazz.getSimpleName()))
					&& !("Double".equals(clazz.getSimpleName()))
					&& !("int".equals(clazz.getSimpleName()))
					&& !("double".equals(clazz.getSimpleName()))
					&& !("long".equals(clazz.getSimpleName()))
					&& !("Boolean".equals(clazz.getSimpleName()))
					&& !("boolean".equals(clazz.getSimpleName()))) {
				newObject = clazz.newInstance();
			}
			Object propertyValue = null;
			String propertyName = "";
			//当前行数据个数
			int oneRowCellCount = 0;
			//如果是Map数据个数为Key项数目
			if (newObject instanceof Map){
				oneRowCellCount = rowTitle.getLastCellNum();
			}else{
				oneRowCellCount = row.getLastCellNum();
			}
			// 结果集为List时，是否插入null对象
			boolean nullObject = true;
			for (int j = 0; j < oneRowCellCount; j++) {
				// 如果属性是空，属性值也是空就跳出循环
				if (null == rowTitle.getCell(j) && null == row.getCell(j)) {
					break;
				}
				// 如果不是Map类型并且没有属性值继续循环
				if (!(newObject instanceof Map)){
					if (null == row.getCell(j)) {
						continue;
					}
				}
				// 如果没有对应的属性
				if (null != rowTitle.getCell(j)) {
					propertyName = rowTitle.getCell(j).getStringCellValue();
				} else {
					propertyName = "";
				}
				// 被测试方法参数为基本数据类型的时候
				if (null != propertyName && !"".equals(propertyName)) {
					propertyValue = getCellValue(row.getCell(j));
					if (null != propertyValue) {
						nullObject = false;
					}
					// clazz是String类型的时候
					if ("String".equals(clazz.getSimpleName())) {
						newObject = clazz.newInstance();
						// 如果是空字符串
						if (BLANK.equals(propertyValue.toString())) {
							newObject = (T) "";
						} else {
							newObject = (T) propertyValue.toString();
						}
						// clazz是基本数据类型的时候
					} else if ("Integer".equals(clazz.getSimpleName())
							|| "Long".equals(clazz.getSimpleName())
							|| "Double".equals(clazz.getSimpleName())
							|| "int".equals(clazz.getSimpleName())
							|| "double".equals(clazz.getSimpleName())
							|| "long".equals(clazz.getSimpleName())
							|| "Boolean".equals(clazz.getSimpleName())
							|| "boolean".equals(clazz.getSimpleName())) {
						newObject = clazz.getConstructor(
								new Class[] { String.class }).newInstance(
								propertyValue.toString());
					} else if (newObject instanceof Date) {
						// 被测试方法参数为Date型的时候
						SimpleDateFormat yyyyMMddhhmmssFormat = new SimpleDateFormat(
								"yyyy-MM-dd HH:mm:ss");
						newObject = (T) yyyyMMddhhmmssFormat
								.parse(propertyValue.toString());
					} else if (newObject instanceof Map) {
						// 被测试方法参数为Map的时候
						((Map<String, Object>) newObject).put(propertyName,
								propertyValue);
					} else {
						// 被测试方法参数为Bean的时候
						setProperty(newObject, propertyName, propertyValue);
					}
				}
			}
			if (isList) {
				if (nullObject) {
					list.add(null);
				} else {
					list.add(newObject);
				}
			} else {
				// 被测试方法参数或预期结果不是List,返回Bean或基本数据实例
				return newObject;
			}
		}
		// 如果是List，返回List实例
		return (T) list;
	}

	/**
	 * 条件检索数据，返回List对象.
	 * 
	 * @param sheet
	 *            Sheet对象
	 * @param clazz
	 *            Bean对象
	 * @param isList
	 *            是否是List
	 * @return Object 返回检索数据Object或List
	 */
	@SuppressWarnings("unchecked")
	private <T> T findListByCondition(HSSFSheet sheet, Class<T> clazz,
			boolean isList) throws Exception {
		T result = null;
		List tempList;
		// 列对象List
		// 数据储存方式model(1:数据存在Map中,2:数据存在Bean中
		int model = 0;
		// sheet中数据存在Map中
		if (null == clazz) {
			model = 1;
		} else {
			// sheet中数据存在clazz对应的Bean中
			model = 2;
		}
		List<ExcelColumn> colList = getColumnList(sheet, model);
		// sheet名
		String sheetName = sheet.getSheetName();
		String sql = findByConditionSql(colList, getTableName(sheetName));
		logger.debug("检索Sql: " + sql);
		Object[] condition = getkeyArray(colList);
		List<Map<String, Object>> resultList;
		List<T> resultBeanList = new ArrayList<T>();

		resultList = this.simpleJdbcTemplate.queryForList(sql, condition);

		if (null != clazz) {
			// 检索结果放到对应的Bean中
			for (Map<String, Object> resultMap : resultList) {
				T bean = clazz.newInstance();
				for (ExcelColumn col : colList) {
					setProperty(bean, col.getProperty(), resultMap.get(col
							.getColunm()));
				}
				resultBeanList.add(bean);
			}
			tempList = resultBeanList;
		} else {
			// 如果检索结果没有对应的Bean存放，将存在Map中
			tempList = resultList;
		}
		if (!isList) {
			if (0 != tempList.size()) {
				result = (T) tempList.get(0);
			}
			return result;
		} else {
			return (T) tempList;
		}

	}

	/**
	 * 把excel数据中sheet对象转化成json字符串.
	 * 
	 * @param sheet
	 *            excel中sheet对象
	 * @return String 返回json字符串
	 */
	private String getJsonStr(HSSFSheet sheet) {
		// json字符串
		StringBuffer jsonStr = new StringBuffer();
		jsonStr.append("{");
		// 得到sheet里字段名row
		HSSFRow rowTitle = sheet.getRow(2);
		// 得到sheet里数据行数
		int rowCount = sheet.getLastRowNum() + 1;
		// 把每行中cell数据注入到Bean的属性里
		for (int i = 3; i < rowCount; i++) {
			if (null == sheet.getRow(i)) {
				break;
			}
			HSSFRow row = sheet.getRow(i);

			int oneRowCellCount = row.getLastCellNum();
			// 设定每行Key值
			if (null == row.getCell(0)
					|| row.getCell(0).getStringCellValue().isEmpty()) {
				break;
			}
			jsonStr.append("\"" + row.getCell(0).getStringCellValue() + "\":");

			// 如果json对象是一层结构
			if (null == rowTitle.getCell(2)
					|| "".equals(rowTitle.getCell(2).getStringCellValue()
							.trim())) {
				jsonStr.append("\"" + row.getCell(1).getStringCellValue()
						+ "\",");
			} else {
				// 如果json对象是嵌套一层结果
				jsonStr.append("{");
				for (int j = 1; j < oneRowCellCount; j++) {
					jsonStr.append("\""
							+ rowTitle.getCell(j).getStringCellValue() + "\":");
					if (null == row.getCell(j)) {
						jsonStr.append("\"\",");
					} else {
						jsonStr.append("\""
								+ row.getCell(j).getStringCellValue() + "\",");
					}
				}
				jsonStr.deleteCharAt(jsonStr.length() - 1);
				jsonStr.append("},");
			}
		}
		jsonStr.deleteCharAt(jsonStr.length() - 1);
		jsonStr.append("}");
		return jsonStr.toString();
	}

	/**
	 * 从param_* sheet中每列读数据，得到ColumnList.
	 * 
	 * @param sheet
	 * @param model
	 *            1.如果sheet数据不需要存在Bean里，在sheet中用表的字段进行遍历
	 *            2.如果sheet数据存在Bean里，在sheet中用属性名进行遍历
	 */
	private List<ExcelColumn> getColumnList(HSSFSheet sheet, int model)
			throws Exception {
		List<ExcelColumn> colList = new ArrayList<ExcelColumn>();
		HSSFRow row = null;
		if (1 == model) {
			row = sheet.getRow(1);
		} else {
			row = sheet.getRow(2);
		}
		// 以Sheet中属性名一行遍历
		for (int i = 0; i < row.getLastCellNum(); i++) {
			ExcelColumn col = new ExcelColumn();
			Cell cell = row.getCell(i);
			Cell cellRow0 = null;
			Cell cellRow1 = null;
			Cell cellRow3 = null;
			if (null != sheet.getRow(0)) {
				cellRow0 = sheet.getRow(0).getCell(i);
			}
			if (null != sheet.getRow(1)) {
				cellRow1 = sheet.getRow(1).getCell(i);
			}
			if (null != sheet.getRow(3)) {
				cellRow3 = sheet.getRow(3).getCell(i);
			}
			// 判断是否为检索条件
			if (null != cellRow0
					&& !"".equals(cellRow0.getStringCellValue().trim())) {
				//设置是否为检索条件
				col.setKey(true);
				// 设置检索模式
				col.setSearchMode(cellRow0.getStringCellValue().trim());
				col.setColunm(cellRow1.getStringCellValue().trim());
				if (2 == model && cell != null
						&& !"".equals(cell.getStringCellValue().trim())) {
					col.setProperty(cell.getStringCellValue().trim());
				}
				col.setValue(cellRow3.getStringCellValue().trim());
				colList.add(col);
			} else {
				if (null != cellRow1
						&& !"".equals(cellRow1.getStringCellValue())) {
					col.setKey(false);
					col.setColunm(cellRow1.getStringCellValue().trim());
					if (2 == model && cell != null
							&& !"".equals(cell.getStringCellValue().trim())) {
						col.setProperty(cell.getStringCellValue().trim());
					}
					// 如果Cell中值为空，属性值设定为""
					if (null == cellRow3) {
						col.setValue("");
					} else {
						col.setValue(cellRow3.getStringCellValue().trim());
					}
					colList.add(col);
				}
			}
		}
		return colList;
	}

	/**
	 * 得到表的主键检索Sql.
	 * 
	 * @param colList
	 *            数据列List
	 * @param tableName
	 *            表名
	 * @return String 返回检索语句
	 */
	private String findByConditionSql(List<ExcelColumn> colList,
			String tableName) {
		StringBuffer sqlSelect = new StringBuffer("SELECT ");
		StringBuffer sqlWhere = new StringBuffer("");
		String sql = "";
		for (int i = 0; i < colList.size(); i++) {
			sqlSelect.append(colList.get(i).getColunm() + ",");
			if (colList.get(i).isKey()) {
				String searchMode = colList.get(i).getSearchMode();
				//如果检索模式 是key，代表=，如果不是Key，就用Cell中填的的模式
				if(KEY.equalsIgnoreCase(searchMode)){
					sqlWhere.append(colList.get(i).getColunm() + "=? AND ");
				}else if(IN.equalsIgnoreCase(searchMode)){
					sqlWhere.append(colList.get(i).getColunm() + " in(?) AND ");
				}else{
					sqlWhere.append(colList.get(i).getColunm() + searchMode +"? AND ");
				}
			}
		}
		sqlSelect.deleteCharAt(sqlSelect.length() - 1);
		sql = sqlSelect.toString() + " FROM " + tableName;
		if (0 != sqlWhere.length()) {
			sql += " WHERE "
					+ sqlWhere.substring(0, sqlWhere.length()
							- " AND ".length());
		}
		return sql;
	}

	/**
	 * 得到表名.
	 * 
	 * @param sheetName
	 *            Sheet名字 如果sheet名为param_PER_DEPARTMENT，返回PER_DEPARTMENT
	 * @return String 表名
	 */
	private String getTableName(String sheetName) {
		int index = sheetName.indexOf("_");
		String tableName = "";
		if (index != -1) {
			tableName = sheetName.substring(index + 1);
		}
		return tableName;
	}

	// 
	/**
	 * 得到主键值数组.
	 * 
	 * @param colList
	 *            列List
	 * @return Object[] 主键数组
	 */
	private Object[] getkeyArray(List<ExcelColumn> colList) {
		List<Object> keyList = new ArrayList<Object>();
		for (ExcelColumn col : colList) {
			if (col.isKey()) {
				keyList.add(col.getValue());
			}
		}
		return keyList.toArray(new Object[keyList.size()]);
	}

	/**
	 * 往数据库插入数据.
	 * 
	 * @param sheetTable
	 *            数据表对象
	 * @param msimpleJdbcTemplate
	 *            jdbc数据检索模板类
	 */
	private void insertDataFromExcel(String path) throws Exception {
		ExcelSheetToTable[] sheetTables = ExcelSheetToTable.getSheetTables(path);
		for (ExcelSheetToTable st : sheetTables) {
			List<String> insertSqlList;
			List<Map<String, Object>> paramsMapList;
			insertSqlList = st.get_insertSqlList();
			paramsMapList = st.get_paramsMapList();
			for (int i = 0; i < insertSqlList.size(); i++) {
				Map<String, Object> paramMap = paramsMapList.get(i);
				String sql = insertSqlList.get(i);
				// 出力插入语句
				logger.debug("插入语句：" + sql);
				simpleJdbcTemplate.update(sql, paramMap);
			}
		}
	}

	/**
	 * 给javabean中的属性设值.
	 * 
	 * @param bean
	 *            bean实类
	 * @param propertyName
	 *            bean中属性名
	 * @param newValue
	 *            设置属性的值
	 */
	private void setProperty(Object bean, String propertyName, Object newValue)
			throws Exception {
		if (null == propertyName || "".equals(propertyName)) {
			return;
		}
		PropertyDescriptor pd = new PropertyDescriptor(propertyName, bean
				.getClass());
		Method setMethod = pd.getWriteMethod();
		// Bean属性set方法参数是int型，需要把excel中取得数据类型转换成int型
		if (int.class == (setMethod.getParameterTypes())[0]) {
			if (null == newValue) {
				// 如果数字型cell没有值，默认用0
				setMethod.invoke(bean, 0);
			} else {
				setMethod.invoke(bean, Integer.parseInt(newValue.toString()));
			}
			// Bean属性set方法参数是Integer型，需要把excel中取得数据类型转换成Integer型
		} else if (Integer.class == (setMethod.getParameterTypes())[0]) {
			if (null == newValue) {
				// 如果数字型cell没有值，默认用0
				setMethod.invoke(bean);
			} else {
				setMethod.invoke(bean, new Integer(newValue.toString()));
			}
			// Bean属性set方法参数是Long型，需要把excel中取得数据类型转换成Long型
		} else if (Long.class == (setMethod.getParameterTypes())[0]) {
			if (null == newValue) {
				// 如果数字型cell没有值，默认用0
				setMethod.invoke(bean, 0);
			} else {
				setMethod.invoke(bean, new Long(newValue.toString()));
			}
			// Bean属性set方法参数是Double型，需要把excel中取得数据类型转换成Double型
		} else if (Double.class == (setMethod.getParameterTypes())[0]) {
			if (null == newValue) {
				// 如果数字型cell没有值，默认用0
				setMethod.invoke(bean, 0);
			} else {
				setMethod.invoke(bean, new Double(newValue.toString()));
			}
			// Bean属性set方法参数是double型，需要把excel中取得数据类型转换成double型
		} else if (double.class == (setMethod.getParameterTypes())[0]) {
			if (null == newValue) {
				// 如果数字型cell没有值，默认用0
				setMethod.invoke(bean, 0);
			} else {
				setMethod.invoke(bean, Double.parseDouble(newValue.toString()));
			}
			// Bean属性set方法参数是long型，需要把excel中取得数据类型转换成long型
		} else if (long.class == (setMethod.getParameterTypes())[0]) {
			if (null == newValue) {
				// 如果数字型cell没有值，默认用0
				setMethod.invoke(bean, 0);
			} else {
				setMethod.invoke(bean, Long.parseLong(newValue.toString()));
			}
			// Bean属性set方法参数是Date型，需要把excel中取得数据类型转换成Date型
		} else if (Date.class == (setMethod.getParameterTypes())[0]) {
			if (null != newValue) {
				setMethod.invoke(bean, DateUtil.parse(newValue.toString()));
			}
			// Bean属性set方法参数是Boolean型，如果excel中数据为空，Bean中设为false
		} else if (boolean.class == (setMethod.getParameterTypes())[0]) {
			if (null == newValue) {
				setMethod.invoke(bean, false);
			} else {
				setMethod.invoke(bean, newValue);
			}
		} else if (Boolean.class == (setMethod.getParameterTypes())[0]) {
			if (null == newValue) {
				setMethod.invoke(bean, false);
			} else {
				setMethod.invoke(bean, Boolean.valueOf(newValue.toString()));
			}
		} else if (String[].class == (setMethod.getParameterTypes())[0]) {
			if (null != newValue) {
				String[] valueArray = newValue.toString().split(COMMA);
				Object[] object = new Object[1];
				object[0] = valueArray;
				setMethod.invoke(bean, object);
			}
		} else {
			if (BLANK.equals(newValue)) {
				setMethod.invoke(bean, "");
			} else if (null != newValue) {
				setMethod.invoke(bean, newValue.toString());
			}
		}
	}
}
