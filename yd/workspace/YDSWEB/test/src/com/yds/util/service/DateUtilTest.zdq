package com.yds.util.service;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;

import com.yds.common.service.CommonConstants.TIME_FLG;


/**
 * @author yaokai
 * @version 1.00 2010/06/03
 */
public class DateUtilTest {
	/** LOG factory. */
	private static final Log LOG = LogFactory.getLog(DateUtilTest.class);

	/** 支持的日期格式. */
	private SimpleDateFormat[] dateFormats = {
			new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"),
			new SimpleDateFormat("yyyy/MM/dd HH:mm:ss"),
			new SimpleDateFormat("yyyy.MM.dd HH:mm:ss"),
			new SimpleDateFormat("yyyyMMdd HH:mm:ss"),
			new SimpleDateFormat("yyyy-MM-dd"),
			new SimpleDateFormat("yyyy/MM/dd"),
			new SimpleDateFormat("yyyy.MM.dd"),
			new SimpleDateFormat("yyyyMMdd") };


	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
	}

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public void testParse() {

		Date nowTime = new Date();
		String[] dateStrs = new String[dateFormats.length];

		for (int i = 0; i < dateFormats.length; i++) {
			dateStrs[i] = dateFormats[i].format(nowTime);
		}

		for (int j = 0; j < dateStrs.length; j++) {
			LOG.debug("输入参数：" + dateStrs[j]);
			Date expectDate = null;
			try {
				expectDate = dateFormats[j].parse(dateStrs[j]);
			} catch (ParseException e) {
				e.printStackTrace();
			}
			Date actualDate = DateUtil.parse(dateStrs[j]);
			LOG.debug("期望时间：" + expectDate);
			LOG.debug("实际时间：" + actualDate);

			assertEquals(expectDate, actualDate);
		}
	}

	@Test
	public void testParseDateTime() {
		Date nowTime = new Date();
		String[] dateStrs = new String[dateFormats.length];

		for (int i = 0; i < dateFormats.length; i++) {
			dateStrs[i] = dateFormats[i].format(nowTime);
		}

		for (int j = 0; j < dateStrs.length; j++) {
			LOG.debug("输入参数：" + dateStrs[j]);
			Calendar expectCal = null;
			try {
				expectCal = new GregorianCalendar();
				expectCal.setTime(dateFormats[j].parse(dateStrs[j]));
			} catch (ParseException e) {
				e.printStackTrace();
			}
			Calendar actualCal = new GregorianCalendar();
			actualCal.setTime(DateUtil.parse(dateStrs[j]));
			LOG.debug("期望时间：" + expectCal);
			LOG.debug("实际时间：" + actualCal);

			assertEquals(expectCal, actualCal);
		}
	}

	@Test
	public void testDateAdd() {

		String actualDate = "";
		String expectDate = "";
		String strDate = "2010-01-01";
		int icount = 5;
		int itype = 0;

		// itype = 0 （加减类型 0:年，1:月，2:日，3:时，4:分，5:秒）
		LOG.debug("输入参数：" + strDate + "," + icount + "," + itype);
		actualDate = DateUtil.dateAdd(strDate, icount, itype);
		expectDate = "2015-01-01";
		LOG.debug("期望时间：" + expectDate);
		LOG.debug("实际时间：" + actualDate);
		assertEquals(expectDate, actualDate);

		icount = -5;
		LOG.debug("输入参数：" + strDate + "," + icount + "," + itype);
		actualDate = DateUtil.dateAdd(strDate, icount, itype);
		expectDate = "2005-01-01";
		LOG.debug("期望时间：" + expectDate);
		LOG.debug("实际时间：" + actualDate);
		assertEquals(expectDate, actualDate);

		// itype = 1
		icount = 5;
		itype = 1;
		LOG.debug("输入参数：" + strDate + "," + icount + "," + itype);
		actualDate = DateUtil.dateAdd(strDate, icount, itype);
		expectDate = "2010-06-01";
		LOG.debug("期望时间：" + expectDate);
		LOG.debug("实际时间：" + actualDate);
		assertEquals(expectDate, actualDate);

		icount = 15;
		LOG.debug("输入参数：" + strDate + "," + icount + "," + itype);
		actualDate = DateUtil.dateAdd(strDate, icount, itype);
		expectDate = "2011-04-01";
		LOG.debug("期望时间：" + expectDate);
		LOG.debug("实际时间：" + actualDate);
		assertEquals(expectDate, actualDate);

		icount = -5;
		LOG.debug("输入参数：" + strDate + "," + icount + "," + itype);
		actualDate = DateUtil.dateAdd(strDate, icount, itype);
		expectDate = "2009-08-01";
		LOG.debug("期望时间：" + expectDate);
		LOG.debug("实际时间：" + actualDate);
		assertEquals(expectDate, actualDate);

		// itype = 2
		icount = 5;
		itype = 2;
		LOG.debug("输入参数：" + strDate + "," + icount + "," + itype);
		actualDate = DateUtil.dateAdd(strDate, icount, itype);
		expectDate = "2010-01-06";
		LOG.debug("期望时间：" + expectDate);
		LOG.debug("实际时间：" + actualDate);
		assertEquals(expectDate, actualDate);

		icount = 31;
		LOG.debug("输入参数：" + strDate + "," + icount + "," + itype);
		actualDate = DateUtil.dateAdd(strDate, icount, itype);
		expectDate = "2010-02-01";
		LOG.debug("期望时间：" + expectDate);
		LOG.debug("实际时间：" + actualDate);
		assertEquals(expectDate, actualDate);

		icount = -5;
		LOG.debug("输入参数：" + strDate + "," + icount + "," + itype);
		actualDate = DateUtil.dateAdd(strDate, icount, itype);
		expectDate = "2009-12-27";
		LOG.debug("期望时间：" + expectDate);
		LOG.debug("实际时间：" + actualDate);
		assertEquals(expectDate, actualDate);

		icount = 365;
		LOG.debug("输入参数：" + strDate + "," + icount + "," + itype);
		actualDate = DateUtil.dateAdd(strDate, icount, itype);
		expectDate = "2011-01-01";
		LOG.debug("期望时间：" + expectDate);
		LOG.debug("实际时间：" + actualDate);
		assertEquals(expectDate, actualDate);

		icount = 28;
		strDate = "2000-02-01";
		LOG.debug("输入参数：" + strDate + "," + icount + "," + itype);
		actualDate = DateUtil.dateAdd(strDate, icount, itype);
		expectDate = "2000-02-29";
		LOG.debug("期望时间：" + expectDate);
		LOG.debug("实际时间：" + actualDate);
		assertEquals(expectDate, actualDate);

		icount = -32;
		strDate = "2000-02-01";
		LOG.debug("输入参数：" + strDate + "," + icount + "," + itype);
		actualDate = DateUtil.dateAdd(strDate, icount, itype);
		expectDate = "1999-12-31";
		LOG.debug("期望时间：" + expectDate);
		LOG.debug("实际时间：" + actualDate);
		assertEquals(expectDate, actualDate);

		// itype = 3
		icount = 5;
		itype = 3;
		strDate = "2010-01-01 12:02:01";
		LOG.debug("输入参数：" + strDate + "," + icount + "," + itype);
		actualDate = DateUtil.dateAdd(strDate, icount, itype);
		expectDate = "2010-01-01 17:02:01";
		LOG.debug("期望时间：" + expectDate);
		LOG.debug("实际时间：" + actualDate);
		assertEquals(expectDate, actualDate);

		icount = 15;
		LOG.debug("输入参数：" + strDate + "," + icount + "," + itype);
		actualDate = DateUtil.dateAdd(strDate, icount, itype);
		expectDate = "2010-01-02 03:02:01";
		LOG.debug("期望时间：" + expectDate);
		LOG.debug("实际时间：" + actualDate);
		assertEquals(expectDate, actualDate);

		icount = -15;
		LOG.debug("输入参数：" + strDate + "," + icount + "," + itype);
		actualDate = DateUtil.dateAdd(strDate, icount, itype);
		expectDate = "2009-12-31 21:02:01";
		LOG.debug("期望时间：" + expectDate);
		LOG.debug("实际时间：" + actualDate);
		assertEquals(expectDate, actualDate);

		// itype = 4
		icount = 5;
		itype = 4;
		strDate = "2010-01-01 12:02:01";
		LOG.debug("输入参数：" + strDate + "," + icount + "," + itype);
		actualDate = DateUtil.dateAdd(strDate, icount, itype);
		expectDate = "2010-01-01 12:07:01";
		LOG.debug("期望时间：" + expectDate);
		LOG.debug("实际时间：" + actualDate);
		assertEquals(expectDate, actualDate);

		icount = 60;
		LOG.debug("输入参数：" + strDate + "," + icount + "," + itype);
		actualDate = DateUtil.dateAdd(strDate, icount, itype);
		expectDate = "2010-01-01 13:02:01";
		LOG.debug("期望时间：" + expectDate);
		LOG.debug("实际时间：" + actualDate);
		assertEquals(expectDate, actualDate);

		icount = -60;
		LOG.debug("输入参数：" + strDate + "," + icount + "," + itype);
		actualDate = DateUtil.dateAdd(strDate, icount, itype);
		expectDate = "2010-01-01 11:02:01";
		LOG.debug("期望时间：" + expectDate);
		LOG.debug("实际时间：" + actualDate);
		assertEquals(expectDate, actualDate);

		icount = 1440;
		LOG.debug("输入参数：" + strDate + "," + icount + "," + itype);
		actualDate = DateUtil.dateAdd(strDate, icount, itype);
		expectDate = "2010-01-02 12:02:01";
		LOG.debug("期望时间：" + expectDate);
		LOG.debug("实际时间：" + actualDate);
		assertEquals(expectDate, actualDate);

		// itype = 5
		icount = 5;
		itype = 5;
		strDate = "2010-01-01 12:02:01";
		LOG.debug("输入参数：" + strDate + "," + icount + "," + itype);
		actualDate = DateUtil.dateAdd(strDate, icount, itype);
		expectDate = "2010-01-01 12:02:06";
		LOG.debug("期望时间：" + expectDate);
		LOG.debug("实际时间：" + actualDate);
		assertEquals(expectDate, actualDate);

		icount = 60;
		LOG.debug("输入参数：" + strDate + "," + icount + "," + itype);
		actualDate = DateUtil.dateAdd(strDate, icount, itype);
		expectDate = "2010-01-01 12:03:01";
		LOG.debug("期望时间：" + expectDate);
		LOG.debug("实际时间：" + actualDate);
		assertEquals(expectDate, actualDate);

		icount = -122;
		LOG.debug("输入参数：" + strDate + "," + icount + "," + itype);
		actualDate = DateUtil.dateAdd(strDate, icount, itype);
		expectDate = "2010-01-01 11:59:59";
		LOG.debug("期望时间：" + expectDate);
		LOG.debug("实际时间：" + actualDate);
		assertEquals(expectDate, actualDate);

	}

	@Test
	public void testDateDiff() {

		String[] strDateBegin = { "2009-01-05 12:02:03", "2009-01-05 12:02:03" };
		String[] strDateEnd = { "2010-01-06 15:52:36", "2008-11-06 00:01:02" };
		String[] actualDateDiff = new String[strDateBegin.length];
		String[] expectDateDiff = { "366天3时50分33秒", "60天12时1分1秒" };

		for (int i = 0; i < strDateBegin.length; i++) {
			LOG.debug("输入参数：" + strDateBegin[i]);
			actualDateDiff[i] = DateUtil.dateDiff(strDateBegin[i], strDateEnd[i]);
			LOG.debug("期望时间间隔：" + expectDateDiff[i]);
			LOG.debug("实际时间间隔：" + actualDateDiff[i]);

			assertEquals(expectDateDiff[i], actualDateDiff[i]);
		}
	}

	@Test
	public void testIsLeapYear() {

		int[] yearNum = { 2004, 2000, 2100, 1991 };
		boolean[] expectIsLeapYear = { true, true, false, false };
		boolean[] actualIsLeapYear = new boolean[yearNum.length];

		for (int i = 0; i < yearNum.length; i++) {
			LOG.debug("输入参数：" + yearNum[i]);
			actualIsLeapYear[i] = DateUtil.isLeapYear(yearNum[i]);
			LOG.debug("期望值：" + expectIsLeapYear[i]);
			LOG.debug("实际值：" + actualIsLeapYear[i]);

			assertEquals(expectIsLeapYear[i], actualIsLeapYear[i]);
		}
	}

	@Test
	@Ignore
	public void testGetDate() {
		fail("Not yet implemented");
		// String expectDate = "2010-06-02";
		// String actualDate = DateUtil.getDate();
		//		
		// LOG.debug("期望日期：" + expectDate);
		// LOG.debug("实际日期：" + actualDate);
		//
		// assertEquals(expectDate, actualDate);
	}

	@Test
	@Ignore
	public void testGetDateTime() {
		fail("Not yet implemented");
	}

	@Test
	@Ignore
	public void testGetTimeFormat() {
		fail("Not yet implemented");
	}

	@Test
	public void testSetDateFormat() {
		Date nowTime = new Date();
		String[] dateFormatStr = { "yyyy-MM-dd HH:mm:ss", "yyyy/MM/dd HH:mm:ss", "yyyy.MM.dd HH:mm:ss",
				"yyyyMMdd HH:mm:ss", "yyyy-MM-dd", "yyyy/MM/dd", "yyyy.MM.dd", "yyyyMMdd" };

		String expectDate = null;
		String actualDate = null;

		for (int i = 0; i < dateFormatStr.length; i++) {
			try {
				actualDate = DateUtil.setDateFormat(nowTime, dateFormatStr[i]);
			} catch (ParseException e) {
				e.printStackTrace();
			}
			expectDate = dateFormats[i].format(nowTime);
			LOG.debug("期望时间格式：" + expectDate);
			LOG.debug("实际时间格式：" + actualDate);

			assertEquals(expectDate, actualDate);
		}

		for (int i = 0; i < dateFormats.length; i++) {
			actualDate = DateUtil.setDateFormat(nowTime, dateFormats[i]);
			expectDate = dateFormats[i].format(nowTime);

			LOG.debug("期望时间格式：" + expectDate);
			LOG.debug("实际时间格式：" + actualDate);
			assertEquals(expectDate, actualDate);
		}
	}

	@Test
	public void testGetDay() {

		String strDate = "2010-05-02";
		int expectDate = 2;
		LOG.debug("输入参数：" + strDate);
		int actualDate = DateUtil.getDay(strDate);

		LOG.debug("期望天数：" + expectDate);
		LOG.debug("实际天数：" + actualDate);
		assertEquals(expectDate, actualDate);
	}

	@Test
	public void testGetDayOfYear() {

		String strDate = "2011-05-22";
		int expectDate = 142;
		LOG.debug("输入参数：" + strDate);
		int actualDate = DateUtil.getDayOfYear(strDate);

		LOG.debug("期望天数：" + expectDate);
		LOG.debug("实际天数：" + actualDate);
		assertEquals(expectDate, actualDate);
	}

	@Test
	public void testGetMonth() {

		String strDate = "2011-06-22";
		int expectDate = 6;
		LOG.debug("输入参数：" + strDate);
		int actualDate = DateUtil.getMonth(strDate);

		LOG.debug("期望月份：" + expectDate);
		LOG.debug("实际月份：" + actualDate);
		assertEquals(expectDate, actualDate);
	}

	@Test
	public void testGetWeekDay() {

		String strDate = "2011-06-22";
		String expectDate = "星期三";
		LOG.debug("输入参数：" + strDate);
		String actualDate = DateUtil.getWeekDay(strDate);

		LOG.debug("期望星期：" + expectDate);
		LOG.debug("实际星期：" + actualDate);
		assertEquals(expectDate, actualDate);
	}

	@Test
	public void testGetYear() {

		String strDate = "2011-07-22";
		int expectDate = 2011;
		LOG.debug("输入参数：" + strDate);
		int actualDate = DateUtil.getYear(strDate);

		LOG.debug("期望年份：" + expectDate);
		LOG.debug("实际年份：" + actualDate);
		assertEquals(expectDate, actualDate);
	}

	@Test
	@Ignore
	public void testGetWeekNumOfYear() {
		fail("Not yet implemented");
	}

	@Test
	public void testGetWeekNumOfYearDay() {

		String strDate = "2010-02-22";
		int expectDate = 9;
		LOG.debug("输入参数：" + strDate);
		int actualDate = DateUtil.getWeekNumOfYearDay(strDate);

		LOG.debug("期望周数：" + expectDate);
		LOG.debug("实际周数：" + actualDate);
		assertEquals(expectDate, actualDate);
	}

	@Test
	public void testGetHhmmTime(){
		String inTime = "12:22:30";
		assertEquals("12", DateUtil.getSplitTime(inTime,TIME_FLG.HH));
		assertEquals("22", DateUtil.getSplitTime(inTime,TIME_FLG.MM));
		assertEquals("30", DateUtil.getSplitTime(inTime,TIME_FLG.SS));
		
	}
}
