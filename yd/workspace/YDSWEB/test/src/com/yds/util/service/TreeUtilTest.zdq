/**
 * 
 */
package com.yds.util.service;

import static com.yds.base.test.BeanAssert.assertBeanLenientEquals;

import java.util.ArrayList;
import java.util.List;

import net.sf.json.JSONObject;

import org.junit.Before;
import org.junit.Test;

import com.yds.base.test.AbstractSpringTransTest;
import com.yds.common.bean.Node;
import com.yds.common.bean.Tree;


/**
 * @author chenyuer
 * @version 1.00 2010/06/03
 */
public class TreeUtilTest extends AbstractSpringTransTest{



	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		initCommonData(TreeUtil.class);
	}


	/**
	 * Test method for {@link com.yds.util.service.TreeUtil#getTree(java.util.List)}.
	 * @throws Exception 
	 */
	@Test
	public void testGetTreeOneParam() throws Exception {
		
		// 初始化测试数据
		initData("", "result01.xls");
		// 初始化参数
		List<Node> paramList = getParamList(Node.class);
		// 调用被测试函数
		Tree actual = TreeUtil.getTree(paramList);
		// 获取预期值
		List<Tree> treeList = getExpectList(Tree.class);
		// 初始化2级节点的子结点列表
		List<Tree> leafList1 = new ArrayList<Tree>();
		// 初始化1级节点的子结点列表
		List<Tree> leafList = new ArrayList<Tree>();
		// 初始化根节点的子结点列表
		List<Tree> rootList = new ArrayList<Tree>();
		// 为2级结点列表添加叶子节点
		leafList1.add(treeList.get(2));
		leafList1.add(treeList.get(3));
		// 初始化2级结点
		Tree leaf = treeList.get(1);
		leaf.setItems(leafList1);
		// 为1级结点列表添加子节点
		leafList.add(leaf);
		leafList.add(treeList.get(4));
		// 初始化根节点
		Tree root = treeList.get(0);
		root.setItems(leafList);
		// 设置根节点列表
		rootList.add(root);
		// 设置预期值
		Tree expect = new Tree();
		expect.setItems(rootList);
		
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expect, actual);
		
	}

	/**
	 * Test method for {@link com.yds.util.service.TreeUtil#getTreeList(java.util.List)}.
	 */
	@Test
	public void testGetTreeListOneParam() throws Exception{
		
		// 初始化测试数据
		initData("", "result01.xls");
		// 初始化参数
		List<Node> paramList = getParamList(Node.class);
		// 调用被测试函数
		List<Tree> actualList = TreeUtil.getTreeList(paramList);
		// 获取预期值
		List<Tree> treeList = getExpectList(Tree.class);
		// 初始化2级节点的子结点列表
		List<Tree> leafList1 = new ArrayList<Tree>();
		// 初始化1级节点的子结点列表
		List<Tree> leafList = new ArrayList<Tree>();
		// 初始化根节点的子结点列表
		List<Tree> expectList = new ArrayList<Tree>();
		// 为2级结点列表添加叶子节点
		leafList1.add(treeList.get(2));
		leafList1.add(treeList.get(3));
		// 初始化2级结点
		Tree leaf = treeList.get(1);
		leaf.setItems(leafList1);
		// 为1级结点列表添加子节点
		leafList.add(leaf);
		leafList.add(treeList.get(4));
		// 设置预期值
		Tree expect = treeList.get(0);
		expect.setItems(leafList);
		// 设置根节点列表
		expectList.add(expect);
		
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectList, actualList);
		
	}

	/**
	 * Test method for {@link com.yds.util.service.TreeUtil#getTree(java.util.List, int)}.
	 */
	@Test
	public void testGetTreeTwoParam() throws Exception{
		
		// 初始化测试数据
		initData("", "result02.xls");
		// 初始化参数
		List<Node> paramList = getParamList(Node.class);
		// 调用被测试函数(默认顺序为3位）
		Tree actual = TreeUtil.getTree(paramList,3);
		
		// 获取预期值
		List<Tree> treeList = getExpectList(Tree.class);
		// 初始化2级节点的子结点列表
		List<Tree> leafList1 = new ArrayList<Tree>();
		// 初始化1级节点的子结点列表
		List<Tree> leafList = new ArrayList<Tree>();
		// 初始化根节点的子结点列表
		List<Tree> rootList = new ArrayList<Tree>();
		// 为2级结点列表添加叶子节点
		leafList1.add(treeList.get(2));
		leafList1.add(treeList.get(3));
		// 初始化2级结点
		Tree leaf = treeList.get(1);
		leaf.setItems(leafList1);
		// 为1级结点列表添加子节点
		leafList.add(leaf);
		leafList.add(treeList.get(4));
		// 初始化根节点
		Tree root = treeList.get(0);
		root.setItems(leafList);
		// 设置根节点列表
		rootList.add(root);
		// 设置预期值
		Tree expect = new Tree();
		expect.setItems(rootList);
		
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expect, actual);
		
	}

	/**
	 * Test method for {@link com.yds.util.service.TreeUtil#getTreeList(java.util.List, int)}.
	 */
	@Test
	public void testGetTreeListTwoParam() throws Exception{
		
		// 初始化测试数据
		initData("", "result03.xls");
		// 初始化参数
		List<Node> paramList = getParamList(Node.class);
		// 调用被测试函数
		List<Tree> actualList = TreeUtil.getTreeList(paramList,3);
		// 获取预期值
		List<Tree> treeList = getExpectList(Tree.class);
		// 初始化2级节点的子结点列表
		List<Tree> leafListLv2_1 = new ArrayList<Tree>();
		// 初始化1级节点的子结点列表
		List<Tree> leafListLv1_1 = new ArrayList<Tree>();
		List<Tree> leafListLv1_2 = new ArrayList<Tree>();
		// 初始化根节点的子结点列表
		List<Tree> expectList = new ArrayList<Tree>();
		// 初始化2级节点
		Tree leafLv2_1 = treeList.get(1);
		leafLv2_1.setItems(leafListLv2_1);
		// 为2级结点列表添加叶子节点
		leafListLv2_1.add(treeList.get(2));
		leafListLv2_1.add(treeList.get(3));
		//初始化1级节点
		Tree leafLv1_2 = treeList.get(6);
		// 为1级结点列表添加子节点
		leafListLv1_1.add(leafLv2_1);
		leafListLv1_1.add(treeList.get(4));
		leafListLv1_2.add(leafLv1_2);
		// 设置预期值
		Tree root1 = treeList.get(0);
		root1.setItems(leafListLv1_1);
		Tree root2 = treeList.get(5);
		root2.setItems(leafListLv1_2);
		// 设置根节点列表
		expectList.add(root1);
		expectList.add(root2);
		
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectList, actualList);
	}

	/**
	 * Test method for {@link com.yds.util.service.TreeUtil#getNodes(net.sf.json.JSONObject, int)}.
	 */
	@Test
	public void testGetNodesTwoParam() throws Exception{
		// 初始化测试数据
		initData("", "result04.xls");
		// 初始化参数
		String json = getParamObject(String.class);
		JSONObject paramJsonObj = JSONObject.fromObject(json);
		// 调用被测试函数
		List<Node> actualList = TreeUtil.getNodes(paramJsonObj, 10);
		// 获取预期值
		List<Node> expectList = getExpectList(Node.class);
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectList, actualList);
	}

	/**
	 * Test method for {@link com.yds.util.service.TreeUtil#getNodes(net.sf.json.JSONObject, int, int)}.
	 */
	@Test
	public void testGetNodesThreeParam() throws Exception{
		// 初始化测试数据
		initData("", "result05.xls");
		// 初始化参数
		String json = getParamObject(String.class);
		JSONObject paramJsonObj = JSONObject.fromObject(json);
		// 调用被测试函数
		List<Node> actualList = TreeUtil.getNodes(paramJsonObj, 15 ,3);
		// 获取预期值
		List<Node> expectList = getExpectList(Node.class);
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectList, actualList);
	}

}
