/**
 * 
 */
package com.yds.util.service;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.yds.common.service.CommonConstants;
import com.yds.common.service.CommonConstants.StrTypeEnum;

/**
 * @author xieyujun
 * 
 */
public class StringUtilTest {
	private static int runOrder = 0;
	private static final Log LOG = LogFactory.getLog(StringUtilTest.class);

	/**
	 * @throws java.lang.Exception
	 */
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		LOG.debug("==== JUnit Run Order=" + (runOrder++) + " @BeforeClass setUpBeforeClass() ===");

	}

	/**
	 * @throws java.lang.Exception
	 */
	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		LOG.debug("==== JUnit Run Order=" + (runOrder++) + " @AfterClass tearDownAfterClass() ===");
	}

	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		LOG.debug("==== JUnit Run Order=" + (runOrder++) + "   @Before setUp() ===");
	}

	/**
	 * @throws java.lang.Exception
	 */
	@After
	public void tearDown() throws Exception {
		LOG.debug("==== JUnit Run Order=" + (runOrder++) + "   @After tearDown() ===");
	}

	/**
	 * 测试员工ID前加YD前缀. Test method for {@link com.yds.util.service.StringUtil#leftPadYd(java.lang.String)}.
	 */
	@Test
	public final void testLeftPadYd() {
		LOG.debug("==== JUnit Run Order=" + (runOrder++) + "    testLeftPadYd() ===");
		// 输入参数
		String[] inStrList = { "198902", "200615", "YD200712", null, "1", "12", "123", };
		// 期望值
		String[] expectList = { "YD198902", "YD200615", "YD200712", "", "YD1", "YD12", "YD123" };
		// 调用测试方法
		for (int i = 0; i < expectList.length; i++) {
			// 实际得到值
			String actual = StringUtil.leftPadYd(inStrList[i]);
			Assert.assertEquals("i = " + i, expectList[i], actual);
		}
	}

	/**
	 * 测试员工ID去除YD前缀. Test method for {@link com.yds.util.service.StringUtil#leftTrimYd(java.lang.String)}.
	 */
	@Test
	public final void testLeftTrimYd() {
		LOG.debug("==== JUnit Run Order=" + (runOrder++) + "    testLeftTrimYd() ===");
		// 输入参数
		String[] inStrList = { "YD198902", "YD200615", "YD200712", "YDYD2001", "999999", null, "1", "12", "123",
				"YD456", "YD7", "YD78", "YD789" ,"YD"};
		// 期望值
		String[] expectList = { "198902", "200615", "200712", "YD2001", "999999", null, "1", "12", "123", "456", "7",
				"78", "789" ,""};
		// 调用测试方法
		for (int i = 0; i < expectList.length; i++) {
			// 实际得到值
			String actual = StringUtil.leftTrimYd(inStrList[i]);
			Assert.assertEquals("i = " + i, expectList[i], actual);
		}
	}
	
	/**
	 * 判断字符串的类型. Test method for {@link com.yds.util.service.StringUtil#checkType(java.lang.String)}.
	 */
	@Test
	public void testCheckType() {
		
		// 输入参数
		String[] inStrList = { "0123", "0x123", "0我", "123", "aNbb", "", null, "a我", "我0",
				"我a", "你我他" };
		// 期望值
		StrTypeEnum[] expectList = { CommonConstants.StrTypeEnum.Num_Type, CommonConstants.StrTypeEnum.Other_Type,
				CommonConstants.StrTypeEnum.Other_Type, CommonConstants.StrTypeEnum.Num_Type,
				CommonConstants.StrTypeEnum.Letter_Type, CommonConstants.StrTypeEnum.Other_Type, 
				CommonConstants.StrTypeEnum.Other_Type, CommonConstants.StrTypeEnum.Other_Type,
				CommonConstants.StrTypeEnum.Other_Type, CommonConstants.StrTypeEnum.Other_Type, 
				CommonConstants.StrTypeEnum.Chinese_Type};
		// 调用测试方法
		for (int i = 0; i < expectList.length; i++) {
			// 实际得到值
			StrTypeEnum actual = StringUtil.checkType(inStrList[i]);
			Assert.assertEquals("i = " + i, expectList[i], actual);
		}
	}
	
	/**
	 * 测试去掉指定所有字符（前，后，前后）. Test method for {@link com.yds.util.service.StringUtil#trimUnit(java.lang.String)}.
	 */
	@Test
	public final void testTrimUnit() {
		// null和""的测试
		String[] inStrList1 = {"", null,"zh"};
		String[] unit1 = {"", null, "00", "中国"};
		String[] expectList1= {"", "", "", "", null, null,null,null,"zh", "zh", "zh", "zh"};
		int l1 =inStrList1.length;
		int l2 = unit1.length;
		for(int i=0; i<l1; i++){
			for(int j=0; j<l2; j++){
				String actual = StringUtil.trimUnit(inStrList1[i], unit1[j], 0);
				Assert.assertEquals("i = " + i*l1 + j, expectList1[i*l2 + j], actual);
				actual = StringUtil.trimUnit(inStrList1[i], unit1[j], -1);
				Assert.assertEquals("i = " + i*l1 + j, expectList1[i*l2 + j], actual);
				actual = StringUtil.trimUnit(inStrList1[i], unit1[j], 1);
				Assert.assertEquals("i = " + i*l1 + j, expectList1[i*l2 + j], actual);
			}
		}
		
		//实际的测试
		
		String[] inStrList2 = {"00101000", "1k1k1k1k1k1k1k","中国中国中国人中国中国人中国中中国", };
		String[] unit2 = {"00", "1k", "中国"};
		
		//三个数组分别表示以-1,0,1的参数进行调用的结果
		String[][] expectList2= {{"101000", "", "人中国中国人中国中中国"}, {"1010", "", "人中国中国人中国中"}, {"001010", "", "中国中国中国人中国中国人中国中"}};
		
		int l3 = inStrList2.length;
		for(int i=0; i<l3; i++){
			String actual = StringUtil.trimUnit(inStrList2[i], unit2[i], -1);
//			String aa = expectList2[0][i] + ".."+actual;
			Assert.assertEquals("k = " + i, expectList2[0][i], actual);
		}
	}
	
	/**
	 * 取得指定位数的以"0"表示的字符串. Test method for {@link com.yds.util.service.StringUtil#testGetUnit(java.lang.String)}.
	 */
	@Test
	public final void testGetUnit() {
		// null和""的测试
		int[] intPara = {0, 10, 100};
		String[] expectList = {"", "0000000000", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"};
		String[] expectList2 = {"", "kkkkkkkkkk", "kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk"};
		for(int i=0; i<intPara.length; i++){
			String actual = StringUtil.getUnit(intPara[i]);
			Assert.assertEquals("i = " + i, expectList[i], actual);
			actual = StringUtil.getUnit(intPara[i], "k");
			Assert.assertEquals("k = " + i, expectList2[i], actual);
		}
	}

}
