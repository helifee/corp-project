/**
 * 
 */
package com.yds.att.common.service.impl;

import static com.yds.base.test.BeanAssert.assertBeanLenientEquals;

import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.yds.base.test.AbstractSpringTransTest;
import com.yds.base.test.ExcelUtil;
import com.yds.common.bean.UserInfo;
import com.yds.common.service.SessionConstants;
import com.yds.att.bean.AttExrestInfo;
import com.yds.att.bean.AttInfo;
import com.yds.att.bean.AttInfoCondA;
import com.yds.att.bean.AttInfoCondB;
import com.yds.att.bean.AttInfoCondC;
import com.yds.att.common.service.AttInfoService;

/**
 * @author pengchuan
 *
 */
public class AttInfoServiceImplTest extends AbstractSpringTransTest {
	/** @Resource，自动注入Service */
	@Resource
	private AttInfoService attInfoService;

	/**
	 * @throws java.lang.Exception
	 */
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		// 模拟Session设值
		UserInfo userInfo = new UserInfo();
		userInfo.setUserId("YD200901");
		String ip = "192.168.81.22";
		Map<String, Object> session = ExcelUtil.getSession();
		session.put(SessionConstants.USERINFO, userInfo);
		session.put(SessionConstants.IPADDR, ip);
	}

	/**
	 * @throws java.lang.Exception
	 */
	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		initCommonData(AttInfoServiceImpl.class);
		
		// 删除表中数据(避免和测试数据冲突)
		deleteFromTables( "att_info","att_type","att_emp_type","com_holiday","att_exrest_info");
	}

	/**
	 * @throws java.lang.Exception
	 */
	@After
	public void tearDown() throws Exception {
	}
    /**
     * 夜间批处理生成第二天考勤数据
     * @throws Exception
     */
	@Test
	public final void testUpdateAttInfo() throws Exception {
		// 初始化数据库
		initData("input.xls", "result.xls");
		// 初始化测试方法参数-数据库存在
      	String empId = getParamObject(String.class,"param1");
      	Date attYmd=getParamObject(Date.class,"param2");
		// 调用被测试方法
      	attInfoService.updateAttInfo(empId,attYmd);
         // 初始化测试方法参数-数据库存在
      	String empId2 = getParamObject(String.class,"param3");
      	Date attYmd2=getParamObject(Date.class,"param4");
		// 调用被测试方法
      	attInfoService.updateAttInfo(empId2,attYmd2);
         //插入检索的数据
	    AttInfo actualAttInfo = findBeanByCondition(AttInfo.class, "param_ATT_INFO");
		// 得到预期值
	 	AttInfo expectAttInfo = getExpectObject(AttInfo.class, "expect_ATT_INFO");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectAttInfo, actualAttInfo);
		// 插入检索的数据
	     AttInfo actualAttInfo2 = findBeanByCondition(AttInfo.class, "param2_ATT_INFO");
		// 得到预期值
	 	AttInfo expectAttInfo2 = getExpectObject(AttInfo.class, "expect2_ATT_INFO");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectAttInfo2, actualAttInfo2);
	}
	/**
	 * 请假申请处理考勤信息表数据
	 * @throws Exception
	 */
	@Test
	public final void testUpdateAttInfo2() throws Exception {
		// 初始化数据库
		initData("input.xls", "result05.xls");
		// 初始化测试方法参数-数据库存在
		AttInfoCondA attInfoCondA = getParamObject(AttInfoCondA.class,"param");
		// 调用被测试方法
		attInfoService.updateAttInfo(attInfoCondA);
		 //插入检索的数据
	    AttInfo actualAttInfo = findBeanByCondition(AttInfo.class, "param_ATT_INFO");
		// 得到预期值
	 	AttInfo expectAttInfo = getExpectObject(AttInfo.class, "expect_ATT_INFO");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectAttInfo, actualAttInfo);
		// 初始化测试方法参数-数据库存在
		AttInfoCondA attInfoCondA2 = getParamObject(AttInfoCondA.class,"param2");
		// 调用被测试方法
		attInfoService.updateAttInfo(attInfoCondA2);
		 //插入检索的数据
	    AttInfo actualAttInfo2 = findBeanByCondition(AttInfo.class, "param2_ATT_INFO");
		// 得到预期值
	 	AttInfo expectAttInfo2 = getExpectObject(AttInfo.class, "expect2_ATT_INFO");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectAttInfo2, actualAttInfo2);
	}
	/**
	 * 加班申请处理考勤信息表数据
	 * @throws Exception
	 */
	@Test
	public final void testUpdateAttInfo3() throws Exception {
		// 初始化数据库
		initData("input.xls", "result04.xls");
		// 初始化测试方法参数-数据库存在
		AttInfoCondB attInfoCondB = getParamObject(AttInfoCondB.class,"param");
		// 调用被测试方法
		attInfoService.updateAttInfo(attInfoCondB);
		 //插入检索的数据
	    AttInfo actualAttInfo = findBeanByCondition(AttInfo.class, "param_ATT_INFO");
		// 得到预期值
	 	AttInfo expectAttInfo = getExpectObject(AttInfo.class, "expect_ATT_INFO");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectAttInfo, actualAttInfo);
		// 初始化测试方法参数-数据库存在
		AttInfoCondB attInfoCondB2 = getParamObject(AttInfoCondB.class,"param2");
		// 调用被测试方法
		attInfoService.updateAttInfo(attInfoCondB2);
		 //插入检索的数据
	    AttInfo actualAttInfo2 = findBeanByCondition(AttInfo.class, "param2_ATT_INFO");
		// 得到预期值
	 	AttInfo expectAttInfo2 = getExpectObject(AttInfo.class, "expect2_ATT_INFO");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectAttInfo2, actualAttInfo2);
	}
	/**
	 * 打卡时处理考勤信息表数据
	 * @throws Exception
	 */
	@Test
	public final void testUpdateAttInfo4() throws Exception {
		// 初始化数据库
		initData("input03.xls", "result03.xls");
		// 初始化测试方法参数-数据库存在
		AttInfoCondC attInfoCondC = getParamObject(AttInfoCondC.class,"param");
		// 调用被测试方法
		attInfoService.updateAttInfo(attInfoCondC);
		 //插入检索的数据
	    AttInfo actualAttInfo = findBeanByCondition(AttInfo.class, "param_ATT_INFO");
		// 得到预期值
	 	AttInfo expectAttInfo = getExpectObject(AttInfo.class, "expect_ATT_INFO");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectAttInfo, actualAttInfo);
		// 初始化测试方法参数-数据库存在
		AttInfoCondC attInfoCondC2 = getParamObject(AttInfoCondC.class,"param2");
		// 调用被测试方法
		attInfoService.updateAttInfo(attInfoCondC2);
		 //插入检索的数据
	    AttInfo actualAttInfo2 = findBeanByCondition(AttInfo.class, "param2_ATT_INFO");
		// 得到预期值
	 	AttInfo expectAttInfo2 = getExpectObject(AttInfo.class, "expect2_ATT_INFO");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectAttInfo2, actualAttInfo2);
	}
	/**
	 * 请假批准换休明细插入数据test
	 */
	@Test
	public final void testInsertExrestInfo() throws Exception {
		
		// 初始化数据库
		initData("input01.xls", "result01.xls");
		// 初始化测试方法参数-数据库存在
      	String empId = getParamObject(String.class,"param1_1");
      	Date leaveDateFrom = getParamObject(Date.class,"param1_2");
      	Date leaveDateTo = getParamObject(Date.class,"param1_3");
      	String restType = getParamObject(String.class,"param1_4");
      	String appId = getParamObject(String.class,"param1_5");
        
      	// 调用被测试方法
      	attInfoService.insertExrestInfo(empId,leaveDateFrom,leaveDateTo,restType,appId);
		
      	// 检索PER_ROLE插入的数据
      	List<AttExrestInfo> actualAttExrestInfoList = findListBeanByCondition(AttExrestInfo.class, "param6_ATT_EXREST_INFO");
		// 得到PER_ROLE期望值
      	List<AttExrestInfo> expectAttExrestInfoList = super.getExpectList(AttExrestInfo.class, "expect1");
		for (int i=0; i< actualAttExrestInfoList.size();i++){
      	// 断言检索结果和预期是不是一致
			assertBeanLenientEquals(actualAttExrestInfoList.get(i), expectAttExrestInfoList.get(i));	
		}
	}	

	/**
	 * 夜间批处理再计算换休明细插入数据test
	 */
	@Test
	public final void testInsertExrestInfoByKey() throws Exception {
		
		// 初始化数据库
		initData("input02.xls", "result02.xls");
		// 初始化测试方法参数-数据库存在
		AttInfo attInfo = super.getExpectObject(AttInfo.class,"param1_ATT_INFO");
        
      	// 调用被测试方法
      	attInfoService.insertExrestInfo(attInfo);
		
      	// 检索PER_ROLE插入的数据
      	List<AttExrestInfo> actualAttExrestInfoList = findListBeanByCondition(AttExrestInfo.class, "param2_ATT_EXREST_INFO");
		// 得到PER_ROLE期望值
      	List<AttExrestInfo> expectAttExrestInfoList = super.getExpectList(AttExrestInfo.class, "expect1");
		for (int i=0; i< actualAttExrestInfoList.size();i++){
      	// 断言检索结果和预期是不是一致
			assertBeanLenientEquals(actualAttExrestInfoList.get(i), expectAttExrestInfoList.get(i));	
		}
	}		

	
}
