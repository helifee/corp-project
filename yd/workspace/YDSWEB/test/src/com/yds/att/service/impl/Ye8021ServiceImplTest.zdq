package com.yds.att.service.impl;

import static com.yds.base.test.BeanAssert.assertBeanLenientEquals;
import static com.yds.base.test.BeanAssert.assertListEquals;
import static com.yds.base.test.BeanAssert.assertListLenientEquals;
import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.yds.att.bean.AttInfo;
import com.yds.att.bean.AttInfoUncor;
import com.yds.att.bean.AttMonReport;
import com.yds.att.bean.Ye8021AttInfo;
import com.yds.att.bean.Ye8021CondA;
import com.yds.att.service.Ye8021Service;
import com.yds.base.test.AbstractSpringTransTest;
import com.yds.util.service.DateUtil;

//@TransactionConfiguration(defaultRollback = false)
public class Ye8021ServiceImplTest extends AbstractSpringTransTest {
	
	@Resource
	private Ye8021Service ye8021Service;

	@Before
	public void setUp() throws Exception {
		initCommonData(Ye8021ServiceImpl.class);
	
		// 删除表中数据(避免和测试数据冲突)
		deleteFromTables("ATT_INFO", "ATT_EMP_TYPE");
	}

	@After
	public void tearDown() throws Exception {
	}

	/**
	 * 测试考勤数据选择
	 * 
	 * @throws Exception
	 */
	@Test
	public final void testGetAttInfos() throws Exception {
		Ye8021CondA ye8021CondA = new Ye8021CondA();
		// 初始化数据库
		initData("input.xls", "result.xls");
		
		/* 测试1*/
		// 初始化测试方法参数
		List<String> empIDList = super.getParamList(String.class, "param1_1");
		ye8021CondA.setStYmd(super.getParamObject(String.class, "param1_2"));
		ye8021CondA.setEdYmd(super.getParamObject(String.class, "param1_3"));
		ye8021CondA.setEmpIdList(empIDList);
		
		// 调用被测试方法
		List<AttInfo>  actualInfo = this.ye8021Service.getAttInfos(ye8021CondA);
		
		//取得预计数据
		List<AttInfo> expectInfo = getExpectList(AttInfo.class, "expect1");
		//断言检索结果
		assertListEquals(expectInfo, actualInfo);
		
		/* 测试2 */
		// 初始化测试方法参数
		empIDList = super.getParamList(String.class, "param1_1");
		ye8021CondA.setStYmd(super.getParamObject(String.class, "param1_2"));
		ye8021CondA.setEdYmd(super.getParamObject(String.class, "param1_3"));
		ye8021CondA.setRestFlg("1");
		ye8021CondA.setEmpIdList(empIDList);
		
		// 调用被测试方法
		actualInfo = this.ye8021Service.getAttInfos(ye8021CondA);
		
		//取得预计数据
		expectInfo = getExpectList(AttInfo.class, "expect2");
		//断言检索结果
		assertListEquals(expectInfo, actualInfo);
		
		/* 测试3 人员无条件*/
		// 初始化测试方法参数
		ye8021CondA.setStYmd(super.getParamObject(String.class, "param1_2"));
		ye8021CondA.setEdYmd(super.getParamObject(String.class, "param1_3"));
		ye8021CondA.setRestFlg("");
		ye8021CondA.setEmpIdList(null);
		
		// 调用被测试方法
		actualInfo = this.ye8021Service.getAttInfos(ye8021CondA);
		
		//取得预计数据
		expectInfo = getExpectList(AttInfo.class, "expect3");
		//断言检索结果
		assertListEquals(expectInfo, actualInfo);
	}
	/**
	 * 测试考勤信息检查（实出退勤单个null）
	 * 
	 * @throws Exception
	 */
	@Test
	public final void testChkAttInfos() throws Exception {
		Ye8021CondA ye8021CondA = new Ye8021CondA();
		// 初始化数据库
		initData("input.xls", "result.xls");
		
		/* 测试1*/
		// 初始化测试方法参数
		AttInfo attInfo = super.getParamObject(AttInfo.class, "param2_1"); 

		// 调用被测试方法
		boolean  actualRes = this.ye8021Service.chkAttInfos(attInfo);
		
		ye8021CondA.setStYmd(attInfo.getYear()+attInfo.getMonth()+attInfo.getDay());
		ye8021CondA.setEdYmd(attInfo.getYear()+attInfo.getMonth()+attInfo.getDay());
		ye8021CondA.setRestFlg("");
		List<String> al = new ArrayList<String>();
		al.add(attInfo.getEmpId());  
		ye8021CondA.setEmpIdList(al);
		
		List<AttInfo> actAttInfo = ye8021Service.getAttInfos(ye8021CondA);
		
		//取得预计数据
		AttInfo expectInfo = getParamObject(AttInfo.class, "expect4");
		//断言检索结果
		assertBeanLenientEquals(expectInfo, actAttInfo.get(0));
		assertEquals(true ,actualRes);
		
		/* 测试2 */
		// 初始化测试方法参数
		attInfo = super.getParamObject(AttInfo.class, "param2_2"); 

		// 调用被测试方法
		actualRes = this.ye8021Service.chkAttInfos(attInfo);
		
		ye8021CondA.setStYmd(attInfo.getYear()+attInfo.getMonth()+attInfo.getDay());
		ye8021CondA.setEdYmd(attInfo.getYear()+attInfo.getMonth()+attInfo.getDay());
		ye8021CondA.setRestFlg("");
		al = new ArrayList<String>();
		al.add(attInfo.getEmpId());  
		ye8021CondA.setEmpIdList(al);
		
		actAttInfo = ye8021Service.getAttInfos(ye8021CondA);
		
		//取得预计数据
		expectInfo = getParamObject(AttInfo.class, "expect5");
		//断言检索结果
		assertBeanLenientEquals(expectInfo, actAttInfo.get(0));
		assertEquals(true ,actualRes);
		
	}
	/**
	 * 测试检索加班的考勤信息
	 * 
	 * @throws Exception
	 */
	@Test
	public final void testGetYe8021AttInfo() throws Exception {
		// 初始化数据库
		initData("input01.xls", "result01.xls");
		
		Ye8021CondA ye8021CondA = new Ye8021CondA();
		// 初始化测试方法参数
		AttInfo attInfo = super.getParamObject(AttInfo.class, "param1_1"); 
		ye8021CondA.setStYmd(attInfo.getYear()+attInfo.getMonth()+attInfo.getDay());
		ye8021CondA.setEdYmd(attInfo.getYear()+attInfo.getMonth()+"20");
		ye8021CondA.setRestFlg("");
		List<String> al = new ArrayList<String>();
		ye8021CondA.setEmpIdList(al);
		
		//取得实际数据
		List<Ye8021AttInfo> actAttInfo = ye8021Service.getYe8021AttInfo(ye8021CondA);
		
		//取得预计数据
		List<Ye8021AttInfo> expectInfo = getExpectList(Ye8021AttInfo.class, "expect1");
		//断言检索结果
		assertListEquals(expectInfo, actAttInfo);
		
	}
	
	/**
	 * 测试换休信息检查（换休加班）不整合的换休加班重新生成
	 * 
	 * @throws Exception
	 */
	@Test
	public final void testChkAttExrestInfos() throws Exception {
		// 初始化数据库
		initData("input01.xls", "result01.xls");
		
		Ye8021CondA ye8021CondA = new Ye8021CondA();
		
		/* 测试1*/
		// 初始化测试方法参数
		Ye8021AttInfo ye8021AttInfo = super.getParamObject(Ye8021AttInfo.class, "param2_1"); 
		
		ye8021CondA.setStYmd(ye8021AttInfo.getYear()+ye8021AttInfo.getMonth()+ye8021AttInfo.getDay());
		ye8021CondA.setEdYmd(ye8021AttInfo.getYear()+ye8021AttInfo.getMonth()+ye8021AttInfo.getDay());
		ye8021CondA.setRestFlg("");
		List<String> al = new ArrayList<String>();
		al.add(ye8021AttInfo.getEmpId());
		ye8021CondA.setEmpIdList(al);
		
		//取得实际执行结果
		boolean actRunResult = ye8021Service.chkAttExrestInfos(ye8021AttInfo);
		List<Ye8021AttInfo> actInfo = ye8021Service.getYe8021AttInfo(ye8021CondA);
		
		//取得预计数据
		List<Ye8021AttInfo> expectInfo = getExpectList(Ye8021AttInfo.class, "expect2");
		//断言检索结果
		assertEquals(true, actRunResult);
		assertListEquals(expectInfo, actInfo);
		
		/* 测试2*/
		// 初始化测试方法参数
		ye8021AttInfo = super.getParamObject(Ye8021AttInfo.class, "param3_1"); 
		
		ye8021CondA.setStYmd(ye8021AttInfo.getYear()+ye8021AttInfo.getMonth()+ye8021AttInfo.getDay());
		ye8021CondA.setEdYmd(ye8021AttInfo.getYear()+ye8021AttInfo.getMonth()+ye8021AttInfo.getDay());
		ye8021CondA.setRestFlg("");
		al = new ArrayList<String>();
		al.add(ye8021AttInfo.getEmpId());
		ye8021CondA.setEmpIdList(al);
		
		//取得实际执行结果
		actRunResult = ye8021Service.chkAttExrestInfos(ye8021AttInfo);
		actInfo = ye8021Service.getYe8021AttInfo(ye8021CondA);
		
		//取得预计数据
		expectInfo = getExpectList(Ye8021AttInfo.class, "expect3");
		//断言检索结果
		assertEquals(true, actRunResult);
		assertListEquals(expectInfo, actInfo);
		
		/* 测试3*/
		// 初始化测试方法参数
		ye8021AttInfo = super.getParamObject(Ye8021AttInfo.class, "param4_1"); 
		
		ye8021CondA.setStYmd(ye8021AttInfo.getYear()+ye8021AttInfo.getMonth()+ye8021AttInfo.getDay());
		ye8021CondA.setEdYmd(ye8021AttInfo.getYear()+ye8021AttInfo.getMonth()+ye8021AttInfo.getDay());
		ye8021CondA.setRestFlg("");
		al = new ArrayList<String>();
		al.add(ye8021AttInfo.getEmpId());
		ye8021CondA.setEmpIdList(al);
		
		//取得实际执行结果
		actRunResult = ye8021Service.chkAttExrestInfos(ye8021AttInfo);
		actInfo = ye8021Service.getYe8021AttInfo(ye8021CondA);
		
		//取得预计数据
		expectInfo = getExpectList(Ye8021AttInfo.class, "expect4");
		//断言检索结果
		assertEquals(true, actRunResult);
		assertListEquals(expectInfo, actInfo);
		
		/* 测试4*/
		// 初始化测试方法参数
		ye8021AttInfo = super.getParamObject(Ye8021AttInfo.class, "param5_1"); 
		
		ye8021CondA.setStYmd(ye8021AttInfo.getYear()+ye8021AttInfo.getMonth()+ye8021AttInfo.getDay());
		ye8021CondA.setEdYmd(ye8021AttInfo.getYear()+ye8021AttInfo.getMonth()+ye8021AttInfo.getDay());
		ye8021CondA.setRestFlg("");
		al = new ArrayList<String>();
		al.add(ye8021AttInfo.getEmpId());
		ye8021CondA.setEmpIdList(al);
		
		//取得实际执行结果
		actRunResult = ye8021Service.chkAttExrestInfos(ye8021AttInfo);
		actInfo = ye8021Service.getYe8021AttInfo(ye8021CondA);
		
		//取得预计数据
		expectInfo = getExpectList(Ye8021AttInfo.class, "expect5");
		//断言检索结果
		assertEquals(true, actRunResult);
		assertListEquals(expectInfo, actInfo);
		
		/* 测试5*/
		// 初始化测试方法参数
		ye8021AttInfo = super.getParamObject(Ye8021AttInfo.class, "param6_1"); 
		
		ye8021CondA.setStYmd(ye8021AttInfo.getYear()+ye8021AttInfo.getMonth()+ye8021AttInfo.getDay());
		ye8021CondA.setEdYmd(ye8021AttInfo.getYear()+ye8021AttInfo.getMonth()+ye8021AttInfo.getDay());
		ye8021CondA.setRestFlg("");
		al = new ArrayList<String>();
		al.add(ye8021AttInfo.getEmpId());
		ye8021CondA.setEmpIdList(al);
		
		//取得实际执行结果
		actRunResult = ye8021Service.chkAttExrestInfos(ye8021AttInfo);
		actInfo = ye8021Service.getYe8021AttInfo(ye8021CondA);
		
		//取得预计数据
		expectInfo = getExpectList(Ye8021AttInfo.class, "expect6");
		//断言检索结果
		assertEquals(true, actRunResult);
		assertListLenientEquals(expectInfo, actInfo);
		
		/* 测试6*/
		// 初始化测试方法参数
		ye8021AttInfo = super.getParamObject(Ye8021AttInfo.class, "param7_1"); 
		
		ye8021CondA.setStYmd(ye8021AttInfo.getYear()+ye8021AttInfo.getMonth()+ye8021AttInfo.getDay());
		ye8021CondA.setEdYmd(ye8021AttInfo.getYear()+ye8021AttInfo.getMonth()+ye8021AttInfo.getDay());
		ye8021CondA.setRestFlg("");
		al = new ArrayList<String>();
		al.add(ye8021AttInfo.getEmpId());
		ye8021CondA.setEmpIdList(al);
		
		//取得实际执行结果
		actRunResult = ye8021Service.chkAttExrestInfos(ye8021AttInfo);
		actInfo = ye8021Service.getYe8021AttInfo(ye8021CondA);
		
		//取得预计数据
		expectInfo = getExpectList(Ye8021AttInfo.class, "expect7");
		//断言检索结果
		assertEquals(true, actRunResult);
		assertListLenientEquals(expectInfo, actInfo);
		/* 测试7*/
		// 初始化测试方法参数
		ye8021AttInfo = super.getParamObject(Ye8021AttInfo.class, "param8_1"); 
		
		ye8021CondA.setStYmd(ye8021AttInfo.getYear()+ye8021AttInfo.getMonth()+ye8021AttInfo.getDay());
		ye8021CondA.setEdYmd(ye8021AttInfo.getYear()+ye8021AttInfo.getMonth()+ye8021AttInfo.getDay());
		ye8021CondA.setRestFlg("");
		al = new ArrayList<String>();
		al.add(ye8021AttInfo.getEmpId());
		ye8021CondA.setEmpIdList(al);
		
		//取得实际执行结果
		actRunResult = ye8021Service.chkAttExrestInfos(ye8021AttInfo);
		actInfo = ye8021Service.getYe8021AttInfo(ye8021CondA);
		
		//取得预计数据
		expectInfo = getExpectList(Ye8021AttInfo.class, "expect8");
		//断言检索结果
		assertEquals(true, actRunResult);
		assertListLenientEquals(expectInfo, actInfo);
		
		/* 测试8*/
		// 初始化测试方法参数
		ye8021AttInfo = super.getParamObject(Ye8021AttInfo.class, "param9_1"); 
		
		ye8021CondA.setStYmd(ye8021AttInfo.getYear()+ye8021AttInfo.getMonth()+ye8021AttInfo.getDay());
		ye8021CondA.setEdYmd(ye8021AttInfo.getYear()+ye8021AttInfo.getMonth()+ye8021AttInfo.getDay());
		ye8021CondA.setRestFlg("");
		al = new ArrayList<String>();
		al.add(ye8021AttInfo.getEmpId());
		ye8021CondA.setEmpIdList(al);
		
		//取得实际执行结果
		actRunResult = ye8021Service.chkAttExrestInfos(ye8021AttInfo);
		actInfo = ye8021Service.getYe8021AttInfo(ye8021CondA);
		
		//取得预计数据
		expectInfo = getExpectList(Ye8021AttInfo.class, "expect9");
		//断言检索结果
		assertEquals(true, actRunResult);
		assertListLenientEquals(expectInfo, actInfo);
		
		/* 测试9*/
		// 初始化测试方法参数
		ye8021AttInfo = super.getParamObject(Ye8021AttInfo.class, "param10_1"); 
		
		ye8021CondA.setStYmd(ye8021AttInfo.getYear()+ye8021AttInfo.getMonth()+ye8021AttInfo.getDay());
		ye8021CondA.setEdYmd(ye8021AttInfo.getYear()+ye8021AttInfo.getMonth()+ye8021AttInfo.getDay());
		ye8021CondA.setRestFlg("");
		al = new ArrayList<String>();
		al.add(ye8021AttInfo.getEmpId());
		ye8021CondA.setEmpIdList(al);
		
		//取得实际执行结果
		actRunResult = ye8021Service.chkAttExrestInfos(ye8021AttInfo);
		actInfo = ye8021Service.getYe8021AttInfo(ye8021CondA);
		
		//取得预计数据
		expectInfo = getExpectList(Ye8021AttInfo.class, "expect10");
		//断言检索结果
		assertEquals(true, actRunResult);
		assertListLenientEquals(expectInfo, actInfo);
	}	
	/**
	 * 测试不整合数据检查结果生成
	 * 
	 * @throws Exception
	 */
	@Test
	public final void testChkUnCorAtt() throws Exception {
		// 初始化数据库
		this.deleteFromTables("att_examin");
		this.deleteFromTables("com_holiday");
		this.deleteFromTables("emp_org_info");
		this.deleteFromTables("att_info_uncor");
		initData("input02.xls", "result02.xls");
		
		/* 测试1*/
		// 初始化测试方法参数
		AttInfo ye8021AttInfo = super.getParamObject(AttInfo.class, "param1_1"); 
		
		Ye8021CondA ye8021CondA = new Ye8021CondA();
		ye8021CondA.setStYmd(ye8021AttInfo.getYear()+ye8021AttInfo.getMonth()+ "01");
		ye8021CondA.setEdYmd(ye8021AttInfo.getYear()+ye8021AttInfo.getMonth()+ye8021AttInfo.getDay());
		ye8021CondA.setRestFlg("");
		ArrayList<String> al = new ArrayList<String>();
		ye8021CondA.setEmpIdList(al);
		
		//取得实际执行结果
		boolean actRunResult = ye8021Service.chkUnCorAtt(ye8021CondA);
		List<AttInfoUncor> actInfo = ye8021Service.getUncor();
		
		//取得预计数据
		List<AttInfoUncor> expectInfo = getExpectList(AttInfoUncor.class, "expect1");
		//断言检索结果
		assertEquals(true, actRunResult);
		assertListLenientEquals(expectInfo, actInfo);
	}		
	/**
	 * 测试考勤生成
	 * 
	 * @throws Exception
	 */
//	@Test
//	public final void testCrtAttInfo() throws Exception {
//		// 初始化数据库
//		this.deleteFromTables("att_examin");
//		this.deleteFromTables("com_holiday");
//		this.deleteFromTables("emp_org_info");
//		this.deleteFromTables("att_info");
//		this.deleteFromTables("ATT_INFO_UNCOR");
//		this.deleteFromTables("ATT_OVERTIME");
//		
//		initData("input02.xls", "result02.xls");
//		
//		/* 测试1*/
//		// 初始化测试方法参数
//		List<AttInfo> ye8021AttInfo = super.getParamList(AttInfo.class, "param2_1"); 
//		String now = super.getParamObject(String.class,"param2_2");
//		
//		List<AttInfo> ye8021AttInfo2 = super.getParamList(AttInfo.class, "param2_3"); 
//		
//		Ye8021CondA ye8021CondA = new Ye8021CondA();
//		ye8021CondA.setStYmd(ye8021AttInfo.get(0).getYear()+ye8021AttInfo.get(0).getMonth()+ ye8021AttInfo.get(0).getDay());
//		ye8021CondA.setEdYmd(ye8021AttInfo.get(1).getYear()+ye8021AttInfo.get(1).getMonth()+ ye8021AttInfo.get(1).getDay());
//		ye8021CondA.setRestFlg("");
//		ArrayList<String> al = new ArrayList<String>();
//		ye8021CondA.setEmpIdList(al);
//		
//		// 执行被测函数
//		boolean actRunResult = ye8021Service.crtAttInfo(DateUtil.parse(now));
//		
//		//取得实际执行结果
//		List<AttInfo> actInfo = ye8021Service.getAttInfos(ye8021CondA);
//		Ye8021CondA ye8021CondA2 = new Ye8021CondA();
//		ye8021CondA2.setStYmd(ye8021AttInfo2.get(0).getYear()+ye8021AttInfo2.get(0).getMonth()+ ye8021AttInfo2.get(0).getDay());
//		ye8021CondA2.setEdYmd(ye8021AttInfo2.get(1).getYear()+ye8021AttInfo2.get(1).getMonth()+ ye8021AttInfo2.get(1).getDay());
//		ye8021CondA2.setRestFlg("");
//		ArrayList<String> al2 = new ArrayList<String>();
//		ye8021CondA2.setEmpIdList(al2);
//		
//		List<AttInfo> actInfo2 =  ye8021Service.getAttInfos(ye8021CondA2);
//
//		for(AttInfo ai:actInfo2){
//			actInfo.add(ai);
//		}
//		
//		//取得预计数据
//		List<AttInfo> expectInfo = getExpectList(AttInfo.class, "expect2");
//		//断言检索结果
//		assertEquals(true, actRunResult);
//		assertListLenientEquals(expectInfo, actInfo);
//		
//		
//		/* 测试2*/
//		// 初始化测试方法参数
//		this.deleteFromTables("att_info");
//		ye8021AttInfo = super.getParamList(AttInfo.class, "param3_1"); 
//		now = super.getParamObject(String.class,"param3_2");
//		
//		ye8021CondA = new Ye8021CondA();
//		ye8021CondA.setStYmd(ye8021AttInfo.get(0).getYear()+ye8021AttInfo.get(0).getMonth()+ ye8021AttInfo.get(0).getDay());
//		ye8021CondA.setEdYmd(ye8021AttInfo.get(1).getYear()+ye8021AttInfo.get(1).getMonth()+ ye8021AttInfo.get(1).getDay());
//		ye8021CondA.setRestFlg("");
//		al = new ArrayList<String>();
//		ye8021CondA.setEmpIdList(al);
//		
//		// 执行被测函数
//		actRunResult = ye8021Service.crtAttInfo(DateUtil.parse(now));
//		
//		//取得实际执行结果
//		actInfo = ye8021Service.getAttInfos(ye8021CondA);
//				
//		//取得预计数据
//		expectInfo = getExpectList(AttInfo.class, "expect3");
//		//断言检索结果
//		assertEquals(true, actRunResult);
//		assertListLenientEquals(expectInfo, actInfo);
//		
//		/* 测试3*/
//		// 初始化测试方法参数
//		this.deleteFromTables("att_info");
//		ye8021AttInfo = super.getParamList(AttInfo.class, "param4_1"); 
//		now = super.getParamObject(String.class,"param4_2");
//		
//		ye8021AttInfo2 = super.getParamList(AttInfo.class, "param4_3"); 
//		
//		ye8021CondA = new Ye8021CondA();
//		ye8021CondA.setStYmd(ye8021AttInfo.get(0).getYear()+ye8021AttInfo.get(0).getMonth()+ ye8021AttInfo.get(0).getDay());
//		ye8021CondA.setEdYmd(ye8021AttInfo.get(1).getYear()+ye8021AttInfo.get(1).getMonth()+ ye8021AttInfo.get(1).getDay());
//		ye8021CondA.setRestFlg("");
//		al = new ArrayList<String>();
//		ye8021CondA.setEmpIdList(al);
//		
//		// 执行被测函数
//		actRunResult = ye8021Service.crtAttInfo(DateUtil.parse(now));
//		
//		//取得实际执行结果
//		actInfo = ye8021Service.getAttInfos(ye8021CondA);
//		
//		ye8021CondA2 = new Ye8021CondA();
//		ye8021CondA2.setStYmd(ye8021AttInfo2.get(0).getYear()+ye8021AttInfo2.get(0).getMonth()+ ye8021AttInfo2.get(0).getDay());
//		ye8021CondA2.setEdYmd(ye8021AttInfo2.get(1).getYear()+ye8021AttInfo2.get(1).getMonth()+ ye8021AttInfo2.get(1).getDay());
//		ye8021CondA2.setRestFlg("");
//		al2 = new ArrayList<String>();
//		ye8021CondA2.setEmpIdList(al2);
//		
//		actInfo2 =  ye8021Service.getAttInfos(ye8021CondA2);
//
//		for(AttInfo ai:actInfo2){
//			actInfo.add(ai);
//		}
//		
//		//取得预计数据
//		expectInfo = getExpectList(AttInfo.class, "expect4");
//		//断言检索结果
//		assertEquals(true, actRunResult);
//		assertListLenientEquals(expectInfo, actInfo);
//	}		
		
	/**
	 * 测试考勤信息统计
	 * 
	 * @throws Exception
	 */
	@Test
	public final void testAccAttInfo() throws Exception {
		this.deleteFromTables("att_mon_report");
		// 初始化数据库
		initData("input03.xls", "result03.xls");
		
		/* 测试1*/
		// 初始化测试方法参数
		List<AttInfo> ye8021AttInfo = super.getParamList(AttInfo.class, "param1_1"); 
		AttMonReport amr = new AttMonReport();
		
		Ye8021CondA ye8021CondA = new Ye8021CondA();
		ye8021CondA.setStYmd(ye8021AttInfo.get(0).getYear()+ye8021AttInfo.get(0).getMonth()+ "01");
		ye8021CondA.setEdYmd(ye8021AttInfo.get(0).getYear()+ye8021AttInfo.get(0).getMonth()+ ye8021AttInfo.get(0).getDay());
		ye8021CondA.setRestFlg("");
		ArrayList<String> al = new ArrayList<String>();
		ye8021CondA.setEmpIdList(al);
		
		//取得实际执行结果
		boolean actRunResult = ye8021Service.accAttInfo(ye8021CondA);
		
		List<AttMonReport> actInfo = new ArrayList<AttMonReport>();
		for(AttInfo ai : ye8021AttInfo){
			amr.setEmpId(ai.getEmpId());
			amr.setYear(ai.getYear());
			amr.setMonth(ai.getMonth());
			AttMonReport act1Info = ye8021Service.getMonthRep(amr);
			actInfo.add(act1Info);
			
			amr.setEmpId(ai.getEmpId());
			amr.setYear(ai.getYear());
			amr.setMonth("00");
			act1Info = ye8021Service.getMonthRep(amr);
			actInfo.add(act1Info);
		}
		
		//取得预计数据
		List<AttMonReport> expectInfo = getExpectList(AttMonReport.class, "expect1");
		//断言检索结果
		assertEquals(true, actRunResult);
		assertListEquals(expectInfo, actInfo);
		
	}		
//	
//	//--------------------------------------
//	@SuppressWarnings("deprecation")
//	@Test
//	public final void testTmp() throws Exception {
//		Map<String,Object> hm = new HashMap<String, Object>(); ;
//		hm.put("leaveTime", 34);
//		int zz = (Integer)hm.get("leaveTime");
//		System.out.print(zz);
//		AttExrestInfo ai = new AttExrestInfo();
//		Date p = new Date(2010, 11, 31);
//		ai.setHappenDate(p);
////		
////		String a = ai.getHappenDate().toLocaleString();
////		a = "22";
////		a = ai.getHappenDate().toGMTString();
////		a = ai.getHappenDate().toString();
//		
//	}
}
