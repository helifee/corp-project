/**
 * @(#)PageArrangesServiceImplTest.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 共通系统
 */

package com.yds.common.service.impl;

import static com.yds.base.test.BeanAssert.assertBeanLenientEquals;
import static org.junit.Assert.*;

import java.util.Map;

import javax.annotation.Resource;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.yds.base.test.AbstractSpringTransTest;
import com.yds.base.test.ExcelUtil;
import com.yds.common.bean.CheckAndLockInfo;
import com.yds.common.bean.UserInfo;
import com.yds.common.service.PageArrangesService;
import com.yds.common.service.SessionConstants;

/**
 * 页面排他SERVICE调试
 *
 * @author fengliang
 * 
 */
public class PageArrangesServiceImplTest extends AbstractSpringTransTest{

	/** @Resource，自动注入Service */
	@Resource
	private PageArrangesService pageArrangesService;
	private static Map<String, Object> session;
	
	/**
	 * @throws java.lang.Exception
	 */
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		// 模拟Session设值
		UserInfo userInfo = new UserInfo();
		userInfo.setUserId("YD200818");
		session = ExcelUtil.getSession();
		session.put(SessionConstants.USERINFO, userInfo);
		session.put(SessionConstants.IPADDR, "192.168.81.34");		
	}

	@Before
	public void setUp() throws Exception {		
	    initCommonData(PageArrangesServiceImpl.class);		
	}

	@Test
	public void testUpdateArranges() throws Exception{
		
		CheckAndLockInfo updateCheckAndLockInfo;
		CheckAndLockInfo checkAndLockInfoBefore;
		String actualResult;
		String expectResult;
		String actualUserName;
		String expectUserName;
		 //流程控制：initCheck;updateCheck;autoCheck
		/*
		 * checkAndLockInfoBefore为空，数据库记录为空
		 */		
		// 删除表中数据
		this.deleteFromTables("COM_PAGE_LOCK");
		
		// 初始化数据库
		initData("", "result01.xls");
		
		// 初始化测试方法参数
		// 参数
		String lockId = getParamObject(String.class,"param_LockId");
		String proType = getParamObject(String.class,"param_ProType");
		String pageName = getParamObject(String.class,"param_PageName");
		
		// 实际检索对象
		actualResult = pageArrangesService.updateArranges(lockId, proType, pageName, null);
		
		// 得到预期值
	    expectResult = 	getExpectObject(String.class, "expect1");
		
		// 实际检索对象
	    updateCheckAndLockInfo = findBeanByCondition(
				CheckAndLockInfo.class, "param_COM_PAGE_LOCK");
				
		assertBeanLenientEquals(expectResult, actualResult);
		
		assertNotNull(updateCheckAndLockInfo);
				
		/*
		 * checkAndLockInfoBefore为空，数据库记录不为空，且是当前用户登陆记录
		 */	
		// 删除表中数据
		this.deleteFromTables("COM_PAGE_LOCK");
		
		// 初始化数据库
		initData("input02.xls", "result02.xls");
		
		// 实际检索对象
		actualResult = pageArrangesService.updateArranges(lockId, proType, pageName, null);
		
		// 得到预期值
		expectResult = 	getExpectObject(String.class);
		
		assertBeanLenientEquals(expectResult, actualResult);
		
		
		/*
		 * checkAndLockInfoBefore为空，数据库记录不为空，但不是当前用户登陆记录
		 */
		// 删除表中数据
		this.deleteFromTables("COM_PAGE_LOCK","COM_USER");
		
		// 初始化数据库
		initData("input03.xls", "result03.xls");
		
		// 实际检索对象		
		actualUserName = pageArrangesService.updateArranges(lockId, proType, pageName, null);
		
		// 得到预期值
		expectUserName = getExpectObject(String.class, "expect_USER");
		
		assertBeanLenientEquals(expectUserName, actualUserName);
		
			
		/*
		 * checkAndLockInfoBefore不为空，数据库记录为空
		 */
		// 删除表中数据
		this.deleteFromTables("COM_PAGE_LOCK");
		
		// 初始化数据库
		initData("", "result04.xls");
		
		checkAndLockInfoBefore = getParamObject(CheckAndLockInfo.class,"param_Session");
	
		// 实际检索对象		
		actualResult = pageArrangesService.updateArranges(lockId, proType, pageName, checkAndLockInfoBefore);
		
		// 得到预期值
		expectResult = getExpectObject(String.class);
		
		// 实际检索对象
		updateCheckAndLockInfo = findBeanByCondition(
				CheckAndLockInfo.class, "param_COM_PAGE_LOCK");
		
		assertBeanLenientEquals(expectResult, actualResult);
		assertNotNull(updateCheckAndLockInfo);
		
		/*
		 * checkAndLockInfoBefore不为空，数据库记录不为空，是前一次用户记录
		 */
		// 删除表中数据
		this.deleteFromTables("COM_PAGE_LOCK");
		
		// 初始化数据库
		initData("input05.xls", "result05.xls");
		
		checkAndLockInfoBefore = getParamObject(CheckAndLockInfo.class,"param_Session");
		
		// 实际检索对象		
		actualResult = pageArrangesService.updateArranges(lockId, proType, pageName, checkAndLockInfoBefore);
		
		// 得到预期值
		expectResult = getExpectObject(String.class);
		
		assertBeanLenientEquals(expectResult, actualResult);
		
		/*
		 * checkAndLockInfoBefore不为空，数据库记录不为空，不是前一次用户记录
		 */
		// 删除表中数据
		this.deleteFromTables("COM_PAGE_LOCK");
		
		// 初始化数据库
		initData("input06.xls", "result06.xls");
		
		checkAndLockInfoBefore = getParamObject(CheckAndLockInfo.class,"param_Session");
		
		// 实际检索对象		
		actualResult = pageArrangesService.updateArranges(lockId, proType, pageName, checkAndLockInfoBefore);
		
		// 得到预期值
		expectResult = getExpectObject(String.class, "expect");
		
		assertBeanLenientEquals(expectResult, actualResult);
	}

}
