/*
 * @(#)LogInsertImplTest.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 共通系统
 */

package com.yds.common.dao.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import javax.annotation.Resource;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.test.annotation.Repeat;

import com.yds.base.test.AbstractSpringTransTest;
import com.yds.base.test.BeanAssert;
import com.yds.common.bean.LogInfo;
import com.yds.common.dao.LogMstDao;
import com.yds.common.service.CommonConstants.LoglevelEnum;

/**
 * 日志Dao测试.
 *
 * @author xieyujun
 *
 */
public class LogInsertImplTest extends AbstractSpringTransTest {

	/** @Resource，自动注入Dao */
	@Resource
	private LogMstDao logMstDao;

	/**
	 * @throws java.lang.Exception
	 */
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
	}

	/**
	 * @throws java.lang.Exception
	 */
	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
	}

	/**
	 * @throws java.lang.Exception
	 */
	@After
	public void tearDown() throws Exception {
	}

	/**
	 * Test method for {@link com.yds.common.dao.impl.LogInsertImpl#insertLog(com.yds.common.bean.LogInfo)} .
	 *
	 * @throws Exception
	 */
	@Test
	// 性能测试
	@Repeat(2)
	public final void testInsertLog() throws Exception {
		long beforetime = System.currentTimeMillis();
		int cnt = 3;

		for (int i = 0; i < cnt; i++) {
			LogInfo logInfo = new LogInfo();
			/** 日志ID. */
			// 由ibatis xml设定
			// logInfo.setLogId(i);
			/** 日志等级. */
			logInfo.setLogLevel(LoglevelEnum.Every_Week_Delete.toString());
			/** 子系统ID. */
			logInfo.setSubId("1000");
			/** 被操作者ID. */
			logInfo.setUserId("YD200101");
			/** 日志信息. */
			logInfo.setLogMsg("测试日志信息" + i);
			/** 操作者登录IP. */
			logInfo.setLogIp("192.168.0.1");
			/** 备注. */
			logInfo.setRefer("日志备注" + i);
			/** 操作者ID. */
			logInfo.setOpId("YD200102");
			/** 操作者时间. */
			// 由xml设定
			// logInfo.setOpTime(new Date());
			logMstDao.insertLog(logInfo);

			String sql = "SELECT * FROM com_log_mst WHERE log_id = LAST_INSERT_ID();";
			LogInfo actual = this.simpleJdbcTemplate.queryForObject(sql, new BeanPropertyRowMapper<LogInfo>(
					LogInfo.class));
			assertNotNull(actual);
			// 自只有
			assertLogInfoEquals(logInfo, actual);

			// 使用共通方法继续断言
			BeanAssert.assertBeanLenientEquals(logInfo, actual);
		}
		logger.debug("insert " + cnt + "records: " + String.valueOf(System.currentTimeMillis() - beforetime)
				+ " Millisecond");

	}

	/**
	 * 部门信息bean之间比较.
	 *
	 * @param expected
	 *            预想数据
	 * @param actual
	 *            实际数据
	 */
	private void assertLogInfoEquals(LogInfo expected, LogInfo actual) {
		assertNotNull("expected LogInfo is null", expected);
		assertNotNull("actual LogInfo is null", actual);
		assertNotNull(actual.getLogId());
		// 由DB生成，忽略比较
		// assertEquals(expected.getLogId(), actual.getLogId());
		assertEquals(expected.getLogLevel(), actual.getLogLevel());
		assertEquals(expected.getSubId(), actual.getSubId());
		assertEquals(expected.getUserId(), actual.getUserId());
		assertEquals(expected.getLogMsg(), actual.getLogMsg());
		assertEquals(expected.getLogIp(), actual.getLogIp());
		assertEquals(expected.getRefer(), actual.getRefer());
		assertEquals(expected.getOpId(), actual.getOpId());
		// 由DB生成，忽略比较
		assertNotNull(actual.getOpTime());
		// assertEquals(expected.getOpTime(), actual.getOpTime());
	}

}
