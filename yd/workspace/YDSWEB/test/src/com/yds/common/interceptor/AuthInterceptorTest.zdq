/*
 * @(#)AuthInterceptorTest.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东公司内部网
 *    SubSystem: 共通系统
 */
package com.yds.common.interceptor;

import static org.junit.Assert.*;

import java.util.HashMap;

import java.util.Map;

import javax.annotation.Resource;

import org.apache.struts2.StrutsStatics;
import org.junit.BeforeClass;
import org.junit.Test;
import org.springframework.mock.web.MockHttpServletRequest;

import com.opensymphony.xwork2.Action;
import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.mock.MockActionInvocation;
import com.opensymphony.xwork2.mock.MockActionProxy;
import com.yds.base.test.AbstractSpringTransTest;
import com.yds.common.bean.UserInfo;
import com.yds.common.service.SessionConstants;

/**
 * @author tianjian
 * 
 */
public class AuthInterceptorTest extends AbstractSpringTransTest{
	/** @Resource，自动注入 */
	@Resource
	private AuthInterceptor authInterceptor;
	
	//模拟Session对象
	private static Map<String, Object> session;
	// 模拟ActionInvocation对象
	private static MockActionInvocation invocation;
	// 模拟ActionProxy对象
	private static MockActionProxy actionProxy;
	private static MockHttpServletRequest request;
	private static ActionContext actionContext;
	/**
	 * @throws java.lang.Exception
	 */
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		// 模拟Session设值
		invocation = new MockActionInvocation();
		actionProxy = new MockActionProxy();
		request = new MockHttpServletRequest();
		Map<String, Object> context = new HashMap<String, Object>();
		actionContext = new ActionContext(context);
		ActionContext.setContext(actionContext);
		session = new HashMap<String, Object>();
		actionContext.setSession(session);
	}
	
	@Test
	public void testInterceptActionInvocation() throws Exception {
		UserInfo userInfo = new UserInfo();
		userInfo.setUserId("YD200615");
		Map<String, Map<String,Boolean>> userPermMap = new HashMap<String, Map<String,Boolean>>();
		
		// 未登录的时候
		request.setServletPath("/employee/yb0010FindPosTypeLst.action");
		request.setQueryString("mode=1");
		ActionContext.getContext().put(StrutsStatics.HTTP_REQUEST, request);
		String result = authInterceptor.intercept(invocation);
		assertEquals("/employee/yb0010FindPosTypeLst.action?mode=1",session.get(SessionConstants.REQUESTURL));
		assertEquals(Action.LOGIN, result);

		// 用户登录时，检查用户没有当前URL的访问权限的时候(Session里对应权限的属性是空)
		session.put(SessionConstants.USERINFO, userInfo);
		session.put(SessionConstants.USERPERM, userPermMap);
		String result2 = authInterceptor.intercept(invocation);
		assertEquals(Action.NONE, result2);

		// 用户登录时，检查用户没有当前URL的访问权限的时候（Session里没有对应的权限）
		Map<String,Boolean> permMap = new HashMap<String,Boolean>();
		permMap.put("J020011Action",true);
		userPermMap.put("tt/training", permMap);
		
		//模拟ActionInvocation对象中注入模拟的ActionProxy对象（由父类方法提供)
		actionProxy.setNamespace("/tt/training");
		actionProxy.setActionName("getEditableCourseInfoAction");
		invocation.setProxy(actionProxy);
		String result3 = authInterceptor.intercept(invocation);
		assertEquals(Action.NONE, result3);
		
		// 用户登录成功，并且有相应的权限
		permMap.put("getEditableCourseInfoAction",true);
		invocation.setResultCode(Action.SUCCESS);
		String result4 = authInterceptor.intercept(invocation);
		assertEquals(Action.SUCCESS, result4);
	}

}
