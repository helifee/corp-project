/*
 * @(#) EmpInfoListAdvServiceImplTest.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东计算机社内网
 *    SubSystem: 员工管理
 */

package com.yds.employee.service.impl;

import static com.yds.base.test.BeanAssert.assertBeanLenientEquals;
import static com.yds.base.test.BeanAssert.assertListEquals;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.yds.base.test.AbstractSpringTransTest;
import com.yds.base.test.ExcelUtil;
import com.yds.employee.bean.Yb0051CondA;
import com.yds.common.bean.EmpInfo;
import com.yds.common.bean.EmpOrgInfo;
import com.yds.common.bean.UserInfo;
import com.yds.common.service.SessionConstants;
import com.yds.employee.service.Yb0051Service;

/**
 * 职位信息维护测试
 * 
 * @author 远东 pengchuan
 * @version 1.00 2010/07/30
 */
public class Yb0051ServiceImplTest extends AbstractSpringTransTest {

	/** @Resource，自动注入 */
	@Resource
	private Yb0051Service yb0051Service;
	
	/**
	 * @throws java.lang.Exception
	 */
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		// 模拟Session设值
		UserInfo userInfo = new UserInfo();
		userInfo.setUserId("YD200615");
		String ip = "192.168.81.22";
		Map<String, Object> session = ExcelUtil.getSession();
		session.put(SessionConstants.USERINFO, userInfo);
		session.put(SessionConstants.IPADDR, ip);
	}

	/**
	 * @throws java.lang.Exception
	 */
	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		// 删除表中数据(避免和测试数据冲突)
		deleteFromTables( "EMP_INFO","SYS_CODE_MST","EMP_ORG_INFO","com_seq");

		initCommonData(Yb0051ServiceImpl.class);
	}
	
	/**
	 * @throws java.lang.Exception
	 */
	@After
	public void tearDown() throws Exception {
	}
	
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0051ServiceImpl#getOrgMnger(com.yds.employee.bean.Yb0051CondA)}.
	 * @throws Exception 
	 */
	@Test
	public void testGetOrgMnger() throws Exception {
		
		// 初始化数据库
		initData("input.xls", "result01.xls");
		
		// 初始化测试方法参数
	
		String diffNo=getParamObject(String.class,"param");
		// 调用被测试方法
	     Yb0051CondA actual = yb0051Service.getOrgMnger(diffNo);
		// 得到预期值
	     Yb0051CondA expect= getExpectObject(Yb0051CondA.class, "expect");
		// 断言检索结果和预期是否一致
	 	assertBeanLenientEquals(expect, actual);
		
	}

	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0051ServiceImpl#getOrgMngerList(com.yds.employee.bean.Yb0051CondA)}.
	 * @throws Exception 
	 */
	@Test
	public void testGetOrgMngerList() throws Exception {
		
		// 初始化数据库
		initData("input.xls", "result02.xls");
		
		// 初始化测试方法参数
	
		String subSys=getParamObject(String.class,"param");
		String typeId=getParamObject(String.class,"param1");
		// 调用被测试方法
		List<Yb0051CondA> actual = yb0051Service.getOrgMngerList(subSys,typeId);
		// 得到预期值
		List<Yb0051CondA> expect= getExpectList(Yb0051CondA.class, "expect");
		// 断言检索结果和预期是否一致
		assertListEquals(expect, actual);
		
	}
	
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0051ServiceImpl#getOrgInfo(com.yds.common.bean.EmpOrgInfo)}.
	 * @throws Exception 
	 */
	@Test
	public void testGetOrgInfo() throws Exception {
		
		// 初始化数据库
		initData("input.xls", "result03.xls");
		
		// 初始化测试方法参数
	
		String orgId=getParamObject(String.class,"param");
		// 调用被测试方法
		EmpOrgInfo actual = yb0051Service.getOrgInfo(orgId);
		// 得到预期值
		EmpOrgInfo expect= getExpectObject(EmpOrgInfo.class, "expect");
		// 断言检索结果和预期是否一致
	 	assertBeanLenientEquals(expect, actual);
		
	}

	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0051ServiceImpl#getOrgSName(com.yds.common.bean.EmpOrgInfo)}.
	 * @throws Exception 
	 */
	@Test
	public void testGetOrgSName() throws Exception {
		
		// 初始化数据库
		initData("input.xls", "result04.xls");
		
		// 初始化测试方法参数
	
		String orgId=getParamObject(String.class,"param");
		// 调用被测试方法
		EmpOrgInfo actual = yb0051Service.getOrgSName(orgId);
		// 得到预期值
		EmpOrgInfo expect= getExpectObject(EmpOrgInfo.class, "expect");
		// 断言检索结果和预期是否一致
	 	assertBeanLenientEquals(expect, actual);
		
	}
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0051ServiceImpl#getEmpCnm(com.yds.common.bean.EmpOrgInfo)}.
	 * @throws Exception 
	 */
	@Test
	public void testGetEmpCnm() throws Exception {
		
		// 初始化数据库
		initData("input.xls", "result05.xls");
		
		// 初始化测试方法参数
	
		String empId=getParamObject(String.class,"param");
		// 调用被测试方法
		EmpInfo actual = yb0051Service.getEmpCnm(empId);
		// 得到预期值
		EmpInfo expect= getExpectObject(EmpInfo.class, "expect");
		// 断言检索结果和预期是否一致
	 	assertBeanLenientEquals(expect, actual);
		
	}

    /**
	 * Test method for {@link com.yds.employee.service.impl.Yb0051ServiceImpl#updateOrgInfo(com.yds.common.bean.EmpOrgInfo)}.
	 * @throws Exception 
	 */
	@Test
	public void testUpdateOrgInfo() throws Exception {
		
		// 初始化数据库
		initData("input.xls", "result06.xls");
		
		// 初始化测试方法参数
		EmpOrgInfo empOrgInfo = getParamObject(EmpOrgInfo.class, "param1_EMP_ORG_INFO");
		//调用被测试方法
		yb0051Service.updateOrgInfo(empOrgInfo);
		// 插入检索的数据
		EmpOrgInfo actualEmpOrgInfo = findBeanByCondition(EmpOrgInfo.class, "param2_EMP_ORG_INFO");
		// 得到预期值
		EmpOrgInfo expectEmpOrgInfo = getExpectObject(EmpOrgInfo.class, "expect2_EMP_ORG_INFO");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(actualEmpOrgInfo, expectEmpOrgInfo);
		
	}
	
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0051ServiceImpl#insertOrgInfo(com.yds.common.bean.EmpOrgInfo)}.
	 * @throws Exception 
	 */
	@Test
	public void testInsertOrgInfo() throws Exception {
		
		// 初始化数据库
		initData("input.xls", "result07.xls");
		
		// 初始化测试方法参数
		EmpOrgInfo empOrgInfo = getParamObject(EmpOrgInfo.class, "param1_EMP_ORG_INFO");
		Yb0051CondA orgState=getParamObject(Yb0051CondA.class, "param_EMP_ORG_INFO");
		String orgId=getParamObject(String.class, "param3");
		//调用被测试方法
		yb0051Service.insertOrgInfo(empOrgInfo,orgState,orgId);
		// 插入检索的数据
		EmpOrgInfo actualEmpOrgInfo = findBeanByCondition(EmpOrgInfo.class, "param2_EMP_ORG_INFO");
		// 得到预期值
		EmpOrgInfo expectEmpOrgInfo = getExpectObject(EmpOrgInfo.class, "expect2_EMP_ORG_INFO");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectEmpOrgInfo, actualEmpOrgInfo);
		
	}
	
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0051ServiceImpl#getEmpCnm(com.yds.common.bean.EmpOrgInfo)}.
	 * @throws Exception 
	 */
	@Test
	public void testGetDispSeq() throws Exception {
		
		// 初始化数据库
		initData("input.xls", "result08.xls");
		
		// 初始化测试方法参数
	
		String orgId=getParamObject(String.class,"param");
		// 调用被测试方法
		String actual = yb0051Service.getDispSeq(orgId);
		// 得到预期值
		String expect= getExpectObject(String.class, "expect");
		// 断言检索结果和预期是否一致
	 	assertBeanLenientEquals(expect, actual);
		
	}
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0051ServiceImpl#getEmpCnm(com.yds.common.bean.EmpOrgInfo)}.
	 * @throws Exception 
	 */
	@Test
	public void testGetEmpInfoList() throws Exception {
		
		// 初始化数据库
		initData("input.xls", "result09.xls");
		
		// 初始化测试方法参数
	
		// 调用被测试方法
		List<EmpInfo> actual = yb0051Service.getEmpInfoList();
		// 得到预期值
		List<EmpInfo> expect= getExpectList(EmpInfo.class, "expect");
		// 断言检索结果和预期是否一致
	 	assertBeanLenientEquals(expect, actual);
		
	}




}
