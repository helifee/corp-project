package com.yds.employee.service.impl;

import static com.yds.base.test.BeanAssert.assertListEquals;
import static com.yds.base.test.BeanAssert.assertListLenientEquals;
import static com.yds.base.test.BeanAssert.assertBeanLenientEquals;

import static org.junit.Assert.*;

import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.yds.base.test.AbstractSpringTransTest;
import com.yds.base.test.ExcelUtil;
import com.yds.common.bean.UserInfo;
import com.yds.common.service.SessionConstants;
import com.yds.common.bean.EmpInfo;
import com.yds.employee.bean.EmpStateInfo;
import com.yds.employee.dao.Yb0030Dao;
import com.yds.employee.service.Yb0030Service;

/**
 * 员工状态设定（业务逻辑访问测试）
 * 
 * @author 远东)mengqingyang
 * @version 1.00 2010/06/30
 */

public class Yb0030ServiceImplTest extends AbstractSpringTransTest {

	/** @Resource，自动注入Dao */
	@Resource
	private Yb0030Service yb0030Service;
	@Resource
	private Yb0030Dao yb0030Dao ;
	/**	
	 * @throws java.lang.Exception	
	 */	
	@BeforeClass	
	public static void setUpBeforeClass() throws Exception {	
		// 模拟Session设值
		UserInfo userInfo = new UserInfo();
		userInfo.setUserId("YD200615");
		String ip = "192.168.81.22";
		Map<String, Object> session = ExcelUtil.getSession();
		session.put(SessionConstants.USERINFO, userInfo);
		session.put(SessionConstants.IPADDR, ip);
	}	

	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		
		initCommonData(Yb0030ServiceImpl.class);
		
		// 删除表中数据(避免和测试数据冲突)
		deleteFromTables("EMP_STATE_INFO","SYS_CODE_MST", "EMP_INFO");

	}
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0030ServiceImpl#getEmpStateList(java.lang.String)}.
	 */
	@Test
	public void testGetEmpStateList() throws Exception {

		// 初始化数据库
		initData("input.xls", "result.xls");
		// 初始化测试方法参数
		String empId = getParamObject(String.class, "param1");
		// 调用被测试方法
		List<EmpStateInfo> actualInfo = yb0030Service.getEmpStateList(empId);
		// 得到预期值
		List<EmpStateInfo> expectInfo = getExpectList(EmpStateInfo.class,"expect1");
		// 断言检索结果和预期是否一致
		assertListEquals(expectInfo, actualInfo);
	}
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0030ServiceImpl#empIdCheck(java.util.List, java.lang.String)}.
	 */
	@Test
	public void testEmpIdCheck()throws Exception {
		// 初始化数据库
		initData("input.xls", "result.xls");
		// 参数1
		List<EmpStateInfo> les = getParamList(EmpStateInfo.class, "param2_1");
		// 参数2
		String empId = getParamObject(String.class, "param2_2");
		// 调用被测试方法
		boolean actualInfo = yb0030Service.empIdCheck(les, empId);
	
		boolean expectInfo = false;
		// 断言检索结果和预期是否一致
		assertEquals(expectInfo, actualInfo);
		
		les = getParamList(EmpStateInfo.class, "param3_1");
		// 参数2
		empId = getParamObject(String.class, "param3_2");
		// 调用被测试方法
		actualInfo = yb0030Service.empIdCheck(les, empId);
	
		expectInfo = true;
		// 断言检索结果和预期是否一致
		assertEquals(expectInfo, actualInfo);
	}
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0030ServiceImpl#empStatesDateCheck(java.util.List)}.
	 */
	@Test
	public void testEmpStatesDateCheck() throws Exception{
		// 初始化数据库
		initData("input.xls", "result.xls");
		// 测试1
		// 参数1
		List<EmpStateInfo> les = getParamList(EmpStateInfo.class, "param4");
		// 调用被测试方法
		String actualInfo = yb0030Service.empStatesDateCheck(les);
		// 正常 0
		String expectInfo = "0";
		assertEquals(expectInfo ,actualInfo);
		
		// 测试2
		// 参数1
		les = getParamList(EmpStateInfo.class, "param5");
		// 调用被测试方法
		actualInfo = yb0030Service.empStatesDateCheck(les);
		// 状态的日期有为空的数据
		expectInfo = "1";
		assertEquals(expectInfo ,actualInfo);
		
		// 测试3
		// 参数1
		les = getParamList(EmpStateInfo.class, "param6");
		// 调用被测试方法
		actualInfo = yb0030Service.empStatesDateCheck(les);
		// 状态的日期不是连续的
		expectInfo = "2";
		assertEquals(expectInfo ,actualInfo);
		
		// 测试4
		// 参数1
		les = getParamList(EmpStateInfo.class, "param7");
		// 调用被测试方法
		actualInfo = yb0030Service.empStatesDateCheck(les);
		// 未来的最后一个状态的结束时间不正确
		expectInfo = "3";
		assertEquals(expectInfo ,actualInfo);
	}
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0030ServiceImpl#updateEmpStates(java.lang.String,java.util.Date,java.util.List)}.
	 */
	@Test
	public void testUpdateEmpStates() throws Exception{
		// 初始化数据库
		initData("input.xls", "result.xls");
		// 参数
		List<EmpStateInfo> les = getParamList(EmpStateInfo.class, "param8_1");
		String modeFlg = getParamObject(String.class ,"param8_2");
		Date empInfoUpdTime = getParamObject(Date.class, "param8_3");
		
		// 实际执行
		yb0030Service.updateEmpStates(modeFlg, String.valueOf(empInfoUpdTime.getTime()), les);
		
		String empId = getParamObject(String.class, "param8_4");
		List<EmpStateInfo> actualInfo1 = yb0030Service.getEmpStateList(empId);
		EmpInfo actualInfo2 = yb0030Dao.getEmpInfo(empId);
		// 预期值
		List<EmpStateInfo> expectInfo1 = getParamList(EmpStateInfo.class, "expect8");
		
		// 断言检索结果和预期是否一致
		assertListLenientEquals(expectInfo1, actualInfo1);
		for(EmpStateInfo es:expectInfo1){
			if("现在".equals(es.getPrescription())){
				assertEquals(es.getEmpState(),actualInfo2.getEmpState());
				break;
			}
		}
		
	}
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0030ServiceImpl#empStateListEmptyCheck(java.util.List)}.
	 * @throws Exception 
	 */
	@Test
	public void testEmpStateListEmptyCheck() throws Exception{
		// 初始化数据库
		initData("input.xls", "result.xls");
		// 参数1
		List<EmpStateInfo> les = getParamList(EmpStateInfo.class, "param9");
		// 调用被测试方法
		boolean actualInfo = yb0030Service.empStateListEmptyCheck(les);
	
		boolean expectInfo = false;
		// 断言检索结果和预期是否一致
		assertEquals(expectInfo, actualInfo);
		
		// 
		actualInfo = yb0030Service.empStateListEmptyCheck(null);
		expectInfo = false;
		assertEquals(expectInfo, actualInfo);
		
		// 参数2
		les = getParamList(EmpStateInfo.class, "param10");
		// 调用被测试方法
		actualInfo = yb0030Service.empStateListEmptyCheck(les);
	
		expectInfo = true;
		// 断言检索结果和预期是否一致
		assertEquals(expectInfo, actualInfo);

	}
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0030ServiceImpl#getEmpInfo(java.lang.String)}.
	 */
	@Test
	public void testGetEmpInfo() throws Exception {
		// 初始化数据库
		initData("input.xls", "result.xls");
		
		String empId =getParamObject(String.class,"param11");
		EmpInfo actualInfo = yb0030Service.getEmpInfo(empId);
		
		EmpInfo expectInfo = getParamObject(EmpInfo.class,"expect11");
	
		assertBeanLenientEquals(expectInfo, actualInfo);
		
	}
}
