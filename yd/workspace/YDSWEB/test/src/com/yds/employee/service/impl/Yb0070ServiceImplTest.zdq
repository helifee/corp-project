/*
 * @(#) Yb0070ServiceImplTest.java
 * Copyright (c) 2009-2010 大连远东计算机系统有限公司
 * All rights reserved.
 *      Project: 远东计算机社内网
 *    SubSystem: 人员管理
 */

package com.yds.employee.service.impl;

import static com.yds.base.test.BeanAssert.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;
import junit.framework.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import com.yds.base.test.AbstractSpringTransTest;
import com.yds.base.test.ExcelUtil;
import com.yds.common.bean.UserInfo;
import com.yds.common.service.SessionConstants;
import com.yds.employee.bean.Yb0070CondA;
import com.yds.employee.bean.Yb0071CondA;
import com.yds.employee.service.Yb0070Service;

/**
 * 组信息一览（业务逻辑处理测试）
 * 
 * @author 远东)fangjiayuan
 * @version 1.00 2010/08/05
 */
public class Yb0070ServiceImplTest extends AbstractSpringTransTest {

	/** @Resource，自动注入 */
	@Resource
	private Yb0070Service yb0070Service;
	
	/**
	 * @throws java.lang.Exception
	 */
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		// 模拟Session设值
		UserInfo userInfo = new UserInfo();
		userInfo.setUserId("YD200710");
		Map<String, Object> session = ExcelUtil.getSession();
		session.put(SessionConstants.USERINFO, userInfo);

	}

	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		// 删除表中数据(避免和测试数据冲突)
		deleteFromTables("EMP_INFO", "EMP_TEAM", "EMP_TEAM_USER",
				"SYS_CODE_MST","COM_SEQ","COM_USER");

		initCommonData(Yb0070ServiceImpl.class);
	}

	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0070ServiceImpl#getTeamInfoList(com.yds.employee.bean.Yb0070CondA)}.
	 * @throws Exception 
	 */
	@Test
	public void testGetTeamInfoList1() throws Exception {
		
		// 初始化数据库
		initData("input01.xls", "result01.xls");
		// 初始化测试方法参数-数据库存在
		Boolean hasPermitFlg = getParamObject(Boolean.class,"param_false");		
		// 调用被测试方法
		List<Yb0070CondA> actualInfo = yb0070Service.getTeamInfoList(hasPermitFlg);
		// 得到预期值
		List<Yb0070CondA> expectInfo = getExpectList(Yb0070CondA.class, "expect_false");
		// 断言检索结果和预期是否一致
		assertListLenientEquals(expectInfo, actualInfo);
		
	}
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0070ServiceImpl#getTeamInfoList(com.yds.employee.bean.Yb0070CondA)}.
	 * @throws Exception 
	 */
	@Test
	public void testGetTeamInfoList2() throws Exception {
		
		// 初始化数据库
		initData("input01.xls", "result01.xls");
		// 初始化测试方法参数-数据库存在
		Boolean hasPermitFlg = getParamObject(Boolean.class,"param_true");		
		// 调用被测试方法
		List<Yb0070CondA> actualInfo = yb0070Service.getTeamInfoList(hasPermitFlg);
		// 得到预期值
		List<Yb0070CondA> expectInfo = getExpectList(Yb0070CondA.class, "expect_true");
		// 断言检索结果和预期是否一致
		assertListLenientEquals(expectInfo, actualInfo);
		
	}

	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0070ServiceImpl#getApplayInfoList(com.yds.employee.bean.Yb0071CondA)}.
	 * @throws Exception 
	 */
	@SuppressWarnings("unchecked")
	@Test
	public void testGetApplayInfoList() throws Exception {
		
		// 初始化数据库
		initData("input02.xls", "result02.xls");		
		// 调用被测试方法
		Map<String,String> actualInfo = yb0070Service.getApplayInfoList();
		// 得到预期值
		Map<String,String> expectInfo = getExpectObject(HashMap.class, "expect");		
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectInfo, actualInfo);
		
	}
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0070ServiceImpl#getTeamInfo(com.yds.employee.bean.Yb0070CondA)}.
	 * @throws Exception 
	 */
	@Test
	public void testGetTeamInfo1() throws Exception {
		
		// 初始化数据库
		initData("input03.xls", "result03.xls");
		// 初始化测试方法参数-数据库存在
		String teamId = getParamObject(String.class,"param1");
		// 初始化测试方法参数-数据库存在
		Boolean hasPermitFlg = getParamObject(Boolean.class,"param_false");		
		// 调用被测试方法
		Yb0070CondA actualInfo = yb0070Service.getTeamInfo(teamId,hasPermitFlg);
		// 得到预期值
		Yb0070CondA expectInfo = getExpectObject(Yb0070CondA.class, "expect_1");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectInfo, actualInfo);
		
	}
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0070ServiceImpl#getTeamInfo(com.yds.employee.bean.Yb0070CondA)}.
	 * @throws Exception 
	 */
	@Test
	public void testGetTeamInfo2() throws Exception {
		
		// 初始化数据库
		initData("input03.xls", "result03.xls");
		// 初始化测试方法参数-数据库存在
		String teamId = getParamObject(String.class,"param2");
		// 初始化测试方法参数-数据库存在
		Boolean hasPermitFlg = getParamObject(Boolean.class,"param_true");		
		// 调用被测试方法
		Yb0070CondA actualInfo = yb0070Service.getTeamInfo(teamId,hasPermitFlg);
		// 得到预期值
		Yb0070CondA expectInfo = getExpectObject(Yb0070CondA.class, "expect_2");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectInfo, actualInfo);
		
	}

	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0070ServiceImpl#insertTeamInfo(com.yds.employee.bean.Yb0070CondA)}.
	 * @throws Exception 
	 */
	@Test
	public void testInsertTeamInfo() throws Exception {
		
		// 初始化数据库
		initData("input01.xls", "result04.xls");
		// 初始化测试方法参数-数据库存在
		Yb0070CondA yb0070CondA = getParamObject(Yb0070CondA.class, "param1");	
		// 调用被测试方法
		yb0070Service.insertTeamInfo(yb0070CondA);
		// 检索插入的数据（组别信息表）
		Yb0070CondA actualEmpTeamInfo = findBeanByCondition(Yb0070CondA.class, "param1_EMP_TEAM");
		// 得到预期值
		Yb0070CondA expectEmpTeamInfo = getExpectObject(Yb0070CondA.class, "expect1_EMP_TEAM");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectEmpTeamInfo, actualEmpTeamInfo);
		// 检索插入的数据（组别成员信息表）
		Yb0070CondA actualEmpTeamUserInfo = findBeanByCondition(Yb0070CondA.class, "param1_EMP_TEAM_USER");
		// 得到预期值
		Yb0070CondA expectEmpTeamUserInfo = getExpectObject(Yb0070CondA.class, "expect1_EMP_TEAM_USER");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectEmpTeamUserInfo, actualEmpTeamUserInfo);

	}
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0070ServiceImpl#updateTeamInfo(com.yds.employee.bean.Yb0070CondA)}.
	 * @throws Exception 
	 */
	@Test
	public void testUpdateTeamInfo() throws Exception {
		
		// 初始化数据库
		initData("input01.xls", "result04.xls");
		// 初始化测试方法参数-数据库存在
		Yb0070CondA yb0070CondA = getParamObject(Yb0070CondA.class, "param2");	
		// 调用被测试方法
		yb0070Service.updateTeamInfo(yb0070CondA);
		// 检索插入的数据（组别信息表）
		Yb0070CondA actualEmpTeamInfo = findBeanByCondition(Yb0070CondA.class, "param2_EMP_TEAM");
		// 得到预期值
		Yb0070CondA expectEmpTeamInfo = getExpectObject(Yb0070CondA.class, "expect2_EMP_TEAM");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectEmpTeamInfo, actualEmpTeamInfo);
		// 检索插入的数据（组别成员信息表）
		Yb0070CondA actualEmpTeamUserInfo = findBeanByCondition(Yb0070CondA.class, "param2_EMP_TEAM_USER");
		// 得到预期值
		Yb0070CondA expectEmpTeamUserInfo = getExpectObject(Yb0070CondA.class, "expect2_EMP_TEAM_USER");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectEmpTeamUserInfo, actualEmpTeamUserInfo);
		

	}

	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0070ServiceImpl#deleteTeamInfo(com.yds.employee.bean.Yb0070CondA)}.
	 * @throws Exception 
	 */
	@Test
	public void testDeleteTeamInfo() throws Exception {
		
		// 初始化数据库
		initData("input01.xls", "result04.xls");
		// 初始化测试方法参数-数据库存在
		String teamId = getParamObject(String.class, "param3");	
		// 调用被测试方法
		yb0070Service.deleteTeamInfo(teamId);
		// 检索删除的数据（组别信息表）
		Yb0070CondA actualEmpTeamInfo = findBeanByCondition(Yb0070CondA.class, "param3_EMP_TEAM");
		// 检索删除的数据（组别成员信息表）
		Yb0070CondA actualEmpTeamUserInfo = findBeanByCondition(Yb0070CondA.class, "param3_EMP_TEAM_USER");
		// 判断组别信息表是否为空
		Assert.assertNull(actualEmpTeamInfo);
		// 判断组别成员信息表是否为空
		Assert.assertNull(actualEmpTeamUserInfo);

	}
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0070ServiceImpl#deleteTeamUserInfo(com.yds.employee.bean.Yb0070CondA)}.
	 * @throws Exception 
	 */
	@Test
	public void testDeleteTeamUserInfo1() throws Exception {
		
		// 初始化数据库
		initData("input01.xls", "result05.xls");
		// 初始化测试方法参数-数据库存在
		String teamId = getParamObject(String.class, "param1_teamId");
		// 初始化测试方法参数-数据库存在(是否需要申请区分=1)
		String joinApplyFlg1 = getParamObject(String.class, "param1_joinApplyFlg");	
		// 调用被测试方法(是否需要申请区分=1)
		yb0070Service.deleteTeamUserInfo(teamId,joinApplyFlg1);
		// 检索更新的数据（组别成员信息表）
		Yb0070CondA actualEmpTeamUserInfo = findBeanByCondition(Yb0070CondA.class, "param1_EMP_TEAM_USER");
		// 得到预期值
		Yb0070CondA expectEmpTeamUserInfo = getExpectObject(Yb0070CondA.class, "expect1_EMP_TEAM_USER");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectEmpTeamUserInfo, actualEmpTeamUserInfo);
	}
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0070ServiceImpl#deleteTeamUserInfo(com.yds.employee.bean.Yb0070CondA)}.
	 * @throws Exception 
	 */
	@Test
	public void testDeleteTeamUserInfo2() throws Exception {
		
		// 初始化数据库
		initData("input01.xls", "result05.xls");
		// 初始化测试方法参数-数据库存在
		String teamId = getParamObject(String.class, "param1_teamId");
		// 初始化测试方法参数-数据库存在(是否需要申请区分=0)
		String joinApplyFlg0 = getParamObject(String.class, "param2_joinApplyFlg");	
		// 调用被测试方法(是否需要申请区分=0)
		yb0070Service.deleteTeamUserInfo(teamId,joinApplyFlg0);
		// 检索删除的数据（组别成员信息表）
		Yb0070CondA actualEmpTeamInfo = findBeanByCondition(Yb0070CondA.class, "param1_EMP_TEAM_USER");
		// 判断组别信息表是否为空
		Assert.assertNull(actualEmpTeamInfo);

	}
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0070ServiceImpl#insertTeamUserInfo(com.yds.employee.bean.Yb0070CondA)}.
	 * @throws Exception 
	 */
	@Test
	public void testInsertTeamUserInfo1() throws Exception {
		
		// 初始化数据库
		initData("input01.xls", "result05.xls");
		// 初始化测试方法参数-数据库存在
		String teamId = getParamObject(String.class, "param2_teamId");
		// 初始化测试方法参数-数据库存在(是否需要申请区分=1)
		String joinApplyFlg1 = getParamObject(String.class, "param1_joinApplyFlg");		
		// 调用被测试方法(是否需要申请区分=1)
		yb0070Service.insertTeamUserInfo(teamId,joinApplyFlg1);

		// 检索更新的数据（组别成员信息表）
		Yb0070CondA actualEmpTeamUserInfo = findBeanByCondition(Yb0070CondA.class, "param2_EMP_TEAM_USER");
		// 得到预期值
		Yb0070CondA expectEmpTeamUserInfo = getExpectObject(Yb0070CondA.class, "expect2_EMP_TEAM_USER");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectEmpTeamUserInfo, actualEmpTeamUserInfo);
	}
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0070ServiceImpl#insertTeamUserInfo(com.yds.employee.bean.Yb0070CondA)}.
	 * @throws Exception 
	 */
	@Test
	public void testInsertTeamUserInfo2() throws Exception {
		
		// 初始化数据库
		initData("input01.xls", "result05.xls");
		// 初始化测试方法参数-数据库存在
		String teamId = getParamObject(String.class, "param2_teamId");
		// 初始化测试方法参数-数据库存在(是否需要申请区分=0)
		String joinApplyFlg1 = getParamObject(String.class, "param2_joinApplyFlg");	
		// 调用被测试方法(是否需要申请区分=0)
		yb0070Service.insertTeamUserInfo(teamId,joinApplyFlg1);

		// 检索更新的数据（组别成员信息表）
		Yb0070CondA actualEmpTeamUserInfo = findBeanByCondition(Yb0070CondA.class, "param2_EMP_TEAM_USER");
		// 得到预期值
		Yb0070CondA expectEmpTeamUserInfo = getExpectObject(Yb0070CondA.class, "expect3_EMP_TEAM_USER");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectEmpTeamUserInfo, actualEmpTeamUserInfo);
	}
	
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0070ServiceImpl#updateAgreeTeamUserFlg(com.yds.employee.bean.Yb0071CondA)}.
	 * @throws Exception 
	 */
	@Test
	public void testUpdateAgreeTeamUserFlg1() throws Exception {
		
		// 初始化数据库
		initData("input02.xls", "result06.xls");
		// 初始化测试方法参数-数据库存在
		List<String> applayInfosList = getExpectList(String.class, "param");
		Yb0071CondA yb0071CondA = new Yb0071CondA();
		yb0071CondA.setApplayInfosList(applayInfosList);
		// 调用被测试方法(同意加入)
		yb0070Service.updateAgreeTeamUserFlg(yb0071CondA);
		// 检索更新的数据（组别成员信息表）
		Yb0071CondA actualEmpTeamUserInfo = findBeanByCondition(Yb0071CondA.class, "param2_EMP_TEAM_USER");
		// 得到预期值
		Yb0071CondA expectEmpTeamUserInfo = getExpectObject(Yb0071CondA.class, "expect2_EMP_TEAM_USER");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectEmpTeamUserInfo, actualEmpTeamUserInfo);
	}
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0070ServiceImpl#updateAgreeTeamUserFlg(com.yds.employee.bean.Yb0071CondA)}.
	 * @throws Exception 
	 */
	@Test
	public void testUpdateAgreeTeamUserFlg2() throws Exception {
		
		// 初始化数据库
		initData("input02.xls", "result06.xls");
		// 初始化测试方法参数-数据库存在
		List<String> applayInfosList = getExpectList(String.class, "param");
		Yb0071CondA yb0071CondA = new Yb0071CondA();
		yb0071CondA.setApplayInfosList(applayInfosList);
		// 调用被测试方法(同意退出)
		yb0070Service.updateAgreeTeamUserFlg(yb0071CondA);
		// 检索更新的数据（组别成员信息表）
		Yb0071CondA actualEmpTeamUserInfo = findBeanByCondition(Yb0071CondA.class, "param1_EMP_TEAM_USER");
		// 断言检索结果和预期是否一致
		Assert.assertNull(actualEmpTeamUserInfo);
	}
	
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0070ServiceImpl#updateDisAgreeTeamUserFlg(com.yds.employee.bean.Yb0071CondA)}.
	 * @throws Exception 
	 */
	@Test
	public void testUpdateDisAgreeTeamUserFlg1() throws Exception {
		
		// 初始化数据库
		initData("input02.xls", "result06.xls");
		// 初始化测试方法参数-数据库存在
		List<String> applayInfosList = getExpectList(String.class, "param");
		Yb0071CondA yb0071CondA = new Yb0071CondA();
		yb0071CondA.setApplayInfosList(applayInfosList);
		// 调用被测试方法(不同意退出)
		yb0070Service.updateDisAgreeTeamUserFlg(yb0071CondA);
		// 检索更新的数据（组别成员信息表）
		Yb0071CondA actualEmpTeamUserInfo = findBeanByCondition(Yb0071CondA.class, "param1_EMP_TEAM_USER");
		// 得到预期值
		Yb0071CondA expectEmpTeamUserInfo = getExpectObject(Yb0071CondA.class, "expect1_EMP_TEAM_USER");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectEmpTeamUserInfo, actualEmpTeamUserInfo);
	}
	
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0070ServiceImpl#updateDisAgreeTeamUserFlg(com.yds.employee.bean.Yb0071CondA)}.
	 * @throws Exception 
	 */
	@Test
	public void testUpdateDisAgreeTeamUserFlg2() throws Exception {
		
		// 初始化数据库
		initData("input02.xls", "result06.xls");
		// 初始化测试方法参数-数据库存在
		List<String> applayInfosList = getExpectList(String.class, "param");
		Yb0071CondA yb0071CondA = new Yb0071CondA();
		yb0071CondA.setApplayInfosList(applayInfosList);
		// 调用被测试方法(不同意加入)
		yb0070Service.updateDisAgreeTeamUserFlg(yb0071CondA);
		// 检索更新的数据（组别成员信息表）
		Yb0071CondA actualEmpTeamUserInfo = findBeanByCondition(Yb0071CondA.class, "param2_EMP_TEAM_USER");
		// 断言检索结果和预期是否一致
		Assert.assertNull(actualEmpTeamUserInfo);
	}

}
