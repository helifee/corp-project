/**
 * 
 */
package com.yds.employee.service.impl;

import static com.yds.base.test.BeanAssert.assertBeanEquals;
import static com.yds.base.test.BeanAssert.assertBeanLenientEquals;
import static com.yds.base.test.BeanAssert.assertListEquals;
import static org.junit.Assert.*;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.yds.base.test.AbstractSpringTransTest;
import com.yds.base.test.ExcelUtil;
//import com.yds.employee.bean.EmpGrpHis;
//import com.yds.employee.bean.EmpStaffOrgRelation;
//import com.yds.employee.bean.EmpPosHis;
//import com.yds.employee.bean.EmpStaffPos;
import com.yds.common.bean.EmpInfo;
import com.yds.common.bean.EmpPos;
import com.yds.common.bean.UserInfo;
import com.yds.common.service.SessionConstants;
//import com.yds.employee.bean.EmpStateInfo;
import com.yds.employee.service.Yb0020Service;

/**
 * @author gaoweiwei
 *
 */
public class Yb0020ServiceImplTest extends AbstractSpringTransTest {
	/** @Resource，自动注入Service */
	@Resource
	private Yb0020Service yb0020Service;

	/**
	 * @throws java.lang.Exception
	 */
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		// 模拟Session设值
		UserInfo userInfo = new UserInfo();
		userInfo.setUserId("YD200615");
		String ip = "192.168.81.22";
		Map<String, Object> session = ExcelUtil.getSession();
		session.put(SessionConstants.USERINFO, userInfo);
		session.put(SessionConstants.IPADDR, ip);
	}

	/**
	 * @throws java.lang.Exception
	 */
	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		initCommonData(Yb0020ServiceImpl.class);
		
		// 删除表中数据(避免和测试数据冲突)
		deleteFromTables("EMP_INFO", "EMP_STAFF_POS", "EMP_POS_HIS", "EMP_ORG_INFO", "EMP_POS",
				"EMP_GRP_HIS", "EMP_STATE_INFO","EMP_STAFF_ORG_RELATION","SYS_CODE_MST","com_user");
	}

	/**
	 * @throws java.lang.Exception
	 */
	@After
	public void tearDown() throws Exception {
	}

	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0020ServiceImpl#getEmpInfo(java.lang.String)}.
	 */
	@Test
	public final void testGetEmpInfo() throws Exception {
		// 初始化数据库
		initData("input.xls", "result01.xls");
		
		// 初始化测试方法参数-数据库存在
		String empId1 = getParamObject(String.class,"param1");
		// 调用被测试方法
		EmpInfo actual1 = yb0020Service.getEmpInfo(empId1);
		// 得到预期值
	EmpInfo expect1 = getExpectObject(EmpInfo.class,"expect_EMP_INFO");
		// 断言检索结果和预期是否一致
		assertBeanEquals(expect1, actual1);
		
		// 初始化测试方法参数-数据库不存在
		String empId2 = getParamObject(String.class,"param2");
		// 调用被测试方法
		EmpInfo actual2 = yb0020Service.getEmpInfo(empId2);
		// 断言检索结果和预期是否一致
		assertNull(actual2);
	}

	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0020ServiceImpl#getEmpPos(java.lang.String)}.
	 */
//	@Test
//	public final void testGetEmpPos() throws Exception {
//		// 初始化数据库
//		initData("input.xls", "result01.xls");
//		
//		// 初始化测试方法参数-数据库存在
//		String empId1 = getParamObject(String.class,"param3");
//		// 调用被测试方法
//		List<EmpStaffPos> actual1 = yb0020Service.getEmpPos(empId1);
//		// 得到预期值
//		List<EmpStaffPos> expect1 = getExpectList(EmpStaffPos.class,"expect_EMP_POS");
//		// 断言检索结果和预期是否一致
//		assertListEquals(expect1, actual1);
//	}

	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0020ServiceImpl#insertEmpInfo(com.yds.employee.bean.EmpInfo, java.util.List)}.
	 */
//	@Test
//	public final void testInsertEmpInfo() throws Exception {
//		// 初始化数据库
//		initData("input.xls", "result01.xls");
//		
//		// 初始化测试方法参数
//		EmpInfo empInfo = getParamObject(EmpInfo.class, "param_EMP_INFO");
//		String posId = getParamObject(String.class, "param5");
//		String empState = getParamObject(String.class, "param4");
//		// 调用被测试方法
//		yb0020Service.insertEmpInfo(empInfo,posId,empState);
//		
//		// 检索插入的数据（员工基本信息表）
//		EmpInfo actualEmpInfo = findBeanByCondition(EmpInfo.class, "param4_EMP_INFO");
//		// 得到预期值
//		EmpInfo expectEmpInfo = getExpectObject(EmpInfo.class, "expect4_EMP_INFO");
//		// 断言检索结果和预期是否一致
//		assertBeanLenientEquals(expectEmpInfo, actualEmpInfo);
//		
//		// 检索插入的数据（员工职位表）
//		EmpStaffPos actualEmpStaffPos = findBeanByCondition(EmpStaffPos.class, "param4_EMP_STAFF_POS");
//		// 得到预期值
//		EmpStaffPos expectEmpStaffPos = getExpectObject(EmpStaffPos.class, "expect4_EMP_STAFF_POS");
//		// 断言检索结果和预期是否一致
//		assertBeanLenientEquals(expectEmpStaffPos, actualEmpStaffPos);
//		
//		// 检索插入的数据（员工历史职位表）
//		EmpPosHis actualEmpPosHis = findBeanByCondition(EmpPosHis.class, "param4_EMP_POS_HIS");
//		// 得到预期值
//		EmpPosHis expectEmpPosHis = getExpectObject(EmpPosHis.class, "expect4_EMP_POS_HIS");
//		// 断言检索结果和预期是否一致
//		assertBeanLenientEquals(expectEmpPosHis, actualEmpPosHis);
//		
//		// 检索插入的数据（员工组织关系表）
//		EmpStaffOrgRelation actualEmpStaffOrgRelation = findBeanByCondition(EmpStaffOrgRelation.class, "param4_EMP_STAFF_ORG_RELATION");
//		// 得到预期值
//		EmpStaffOrgRelation expectEmpStaffOrgRelation = getExpectObject(EmpStaffOrgRelation.class, "expect4_EMP_STAFF_ORG_RELATION");
//		// 断言检索结果和预期是否一致
//		assertBeanEquals(expectEmpStaffOrgRelation, actualEmpStaffOrgRelation);
//		
//		// 检索插入的数据（员工历史组织表）
//		EmpGrpHis actualEmpGrpHis = findBeanByCondition(EmpGrpHis.class, "param4_EMP_GRP_HIS");
//		// 得到预期值
//		EmpGrpHis expectEmpGrpHis = getExpectObject(EmpGrpHis.class, "expect4_EMP_GRP_HIS");
//		// 断言检索结果和预期是否一致
//		assertBeanLenientEquals(expectEmpGrpHis, actualEmpGrpHis);
//		
//		// 检索插入的数据（员工状态信息表）
//		EmpStateInfo actualEmpStateInfo = findBeanByCondition(EmpStateInfo.class, "param4_EMP_STATE_INFO");
//		// 得到预期值
//		EmpStateInfo expectEmpStateInfo = getExpectObject(EmpStateInfo.class, "expect4_EMP_STATE_INFO");
//		// 断言检索结果和预期是否一致
//		assertBeanLenientEquals(expectEmpStateInfo, actualEmpStateInfo);
//	}

	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0020ServiceImpl#updateEmpInfo(com.yds.employee.bean.EmpInfo, java.util.List)}.
	 */
	@Test
	public final void testUpdateEmpInfo() throws Exception {
		// 初始化数据库
		initData("input.xls", "result02.xls");
		
		// 初始化测试方法参数
		EmpInfo empInfo = getParamObject(EmpInfo.class, "param2_EMP_INFO");
		Integer mode=getParamObject(Integer.class, "param2");
		// 调用被测试方法
		yb0020Service.updateEmpInfo(empInfo,mode);
		
		// 检索插入的数据（员工基本信息表）
		EmpInfo actualEmpInfo = findBeanByCondition(EmpInfo.class, "param5_EMP_INFO");
		// 得到预期值
		EmpInfo expectEmpInfo = getExpectObject(EmpInfo.class, "expect5_EMP_INFO");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectEmpInfo, actualEmpInfo);
		
//		// 检索插入的数据（员工职位表）
//		EmpStaffPos actualEmpStaffPos = findBeanByCondition(EmpStaffPos.class, "param5_EMP_STAFF_POS");
//		// 得到预期值
//		EmpStaffPos expectEmpStaffPos = getExpectObject(EmpStaffPos.class, "expect5_EMP_STAFF_POS");
//		// 断言检索结果和预期是否一致
//		assertBeanLenientEquals(expectEmpStaffPos, actualEmpStaffPos);
//		
//		// 检索插入的数据（员工历史职位表）
//		List<EmpPosHis> actualEmpPosHis = findListBeanByCondition(EmpPosHis.class, "param5_EMP_POS_HIS");
//		// 得到预期值
//		List<EmpPosHis> expectEmpPosHis = getExpectList(EmpPosHis.class, "expect5_EMP_POS_HIS");
//		// 断言检索结果和预期是否一致
//		assertBeanLenientEquals(expectEmpPosHis, actualEmpPosHis);
//		
//		// 检索插入的数据（员工组织关系表）
//		EmpStaffOrgRelation actualEmpStaffOrgRelation = findBeanByCondition(EmpStaffOrgRelation.class, "param5_EMP_STAFF_ORG_RELATION");
//		// 得到预期值
//		EmpStaffOrgRelation expectEmpStaffOrgRelation = getExpectObject(EmpStaffOrgRelation.class, "expect5_EMP_STAFF_ORG_RELATION");
//		// 断言检索结果和预期是否一致
//		assertBeanEquals(expectEmpStaffOrgRelation, actualEmpStaffOrgRelation);
//		
//		// 检索插入的数据（员工历史组织表）
//		EmpGrpHis actualEmpGrpHis = findBeanByCondition(EmpGrpHis.class, "param5_EMP_GRP_HIS");
//		// 得到预期值
//		EmpGrpHis expectEmpGrpHis = getExpectObject(EmpGrpHis.class, "expect5_EMP_GRP_HIS");
//		// 断言检索结果和预期是否一致
//		assertBeanLenientEquals(expectEmpGrpHis, actualEmpGrpHis);
	}

	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0020ServiceImpl#empDmnmExitCheck(java.lang.String, java.lang.String)}.
	 */
	@Test
	public final void testEmpDmnmExitCheck() throws Exception {
		// 初始化数据
		initData("input.xls", "result03.xls");

		// 初始化测试方法参数-(员工ID自身)数据库存在
		String empId1 = getParamObject(String.class,"param1");
		String empDmnm1 = getParamObject(String.class,"param2");
		// 调用被测试方法得到返回值
		Boolean actual1 = yb0020Service.empDmnmExitCheck(empDmnm1, empId1);
		// 断言检索结果和预期是否一致
		assertFalse(actual1);

		// 初始化测试方法参数-(员工ID非自身)数据库存在
		String empId2 = getParamObject(String.class,"param3");
		String empDmnm2 = getParamObject(String.class,"param2");
		// 调用被测试方法得到返回值
		Boolean actual2 = yb0020Service.empDmnmExitCheck(empDmnm2, empId2);
		// 断言检索结果和预期是否一致
		assertTrue(actual2);

		// 初始化测试方法参数-数据库不存在
		String empId3 = getParamObject(String.class,"param3");
		String empDmnm3 = getParamObject(String.class,"param4");
		// 调用被测试方法得到返回值
		Boolean actual3 = yb0020Service.empDmnmExitCheck(empDmnm3, empId3);
		// 断言检索结果和预期是否一致
		assertFalse(actual3);
	}

	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0020ServiceImpl#empEmailCompExitCheck(java.lang.String, java.lang.String)}.
	 */
	@Test
	public final void testEmpEmailCompExitCheck() throws Exception {
		// 初始化数据
		initData("input.xls", "result03.xls");

		// 初始化测试方法参数-(员工ID自身)数据库存在
		String empId1 = getParamObject(String.class,"param1");
		String empEmailComp1 = getParamObject(String.class,"param5");
		// 调用被测试方法得到返回值
		Boolean actual1 = yb0020Service.empEmailCompExitCheck(empEmailComp1, empId1);
		// 断言检索结果和预期是否一致
		assertFalse(actual1);

		// 初始化测试方法参数-(员工ID非自身)数据库存在
		String empId2 = getParamObject(String.class,"param3");
		String empEmailComp2 = getParamObject(String.class,"param5");
		// 调用被测试方法得到返回值
		Boolean actual2 = yb0020Service.empEmailCompExitCheck(empEmailComp2, empId2);
		// 断言检索结果和预期是否一致
		assertTrue(actual2);

		// 初始化测试方法参数-数据库不存在
		String empId3 = getParamObject(String.class,"param3");
		String empEmailComp3 = getParamObject(String.class,"param6");
		// 调用被测试方法得到返回值
		Boolean actual3 = yb0020Service.empDmnmExitCheck(empEmailComp3, empId3);
		// 断言检索结果和预期是否一致
		assertFalse(actual3);
	}

	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0020ServiceImpl#empIdExitCheckIns(java.lang.String)}.
	 */
	@Test
	public final void testEmpIdExitCheckIns() throws Exception {
		// 初始化数据
		initData("input.xls", "result03.xls");

		// 初始化测试方法参数-数据库存在
		String empId1 = getParamObject(String.class,"param1");
		// 调用被测试方法得到返回值
		Boolean actual1 = yb0020Service.empIdExitCheckIns(empId1);
		// 断言检索结果和预期是否一致
		assertTrue(actual1);

		// 初始化测试方法参数-数据库不存在
		String empId2 = getParamObject(String.class,"param7");
		// 调用被测试方法得到返回值
		Boolean actual2 = yb0020Service.empIdExitCheckIns(empId2);
		// 断言检索结果和预期是否一致
		assertFalse(actual2);
	}

	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0020ServiceImpl#empDmnmExitCheckIns(java.lang.String)}.
	 */
	@Test
	public final void testEmpDmnmExitCheckIns() throws Exception {
		// 初始化数据
		initData("input.xls", "result03.xls");

		// 初始化测试方法参数-数据库存在
		String empDmnm1 = getParamObject(String.class,"param2");
		// 调用被测试方法得到返回值
		Boolean actual1 = yb0020Service.empDmnmExitCheckIns(empDmnm1);
		// 断言检索结果和预期是否一致
		assertTrue(actual1);

		// 初始化测试方法参数-数据库不存在
		String empDmnm2 = getParamObject(String.class,"param4");
		// 调用被测试方法得到返回值
		Boolean actual2 = yb0020Service.empDmnmExitCheckIns(empDmnm2);
		// 断言检索结果和预期是否一致
		assertFalse(actual2);
	}

	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0020ServiceImpl#empEmailCompExitCheckIns(java.lang.String)}.
	 */
	@Test
	public final void testEmpEmailCompExitCheckIns() throws Exception {
		// 初始化数据
		initData("input.xls", "result03.xls");

		// 初始化测试方法参数-数据库存在
		String empEmailComp1 = getParamObject(String.class,"param5");
		// 调用被测试方法得到返回值
		Boolean actual1 = yb0020Service.empEmailCompExitCheckIns(empEmailComp1);
		// 断言检索结果和预期是否一致
		assertTrue(actual1);

		// 初始化测试方法参数-数据库不存在
		String empEmailComp2 = getParamObject(String.class,"param6");
		// 调用被测试方法得到返回值
		Boolean actual2 = yb0020Service.empEmailCompExitCheckIns(empEmailComp2);
		// 断言检索结果和预期是否一致
		assertFalse(actual2);
	}

	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0020ServiceImpl#getGraduatedList()}.
	 */
	@Test
	public final void testGetGraduatedList() throws Exception {
		// 初始化数据库
		initData("input.xls", "result03.xls");
		
		// 调用被测试方法
		List<String> actual1 = yb0020Service.getGraduatedList();
		// 得到预期值
		List<String> expect1 = getExpectList(String.class,"expect_graduatedList");
		// 断言检索结果和预期是否一致
		assertListEquals(expect1, actual1);
	}

	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0020ServiceImpl#getMajorList()}.
	 */
	@Test
	public final void testGetMajorList() throws Exception {
		// 初始化数据库
		initData("input.xls", "result03.xls");
		
		// 调用被测试方法
		List<String> actual1 = yb0020Service.getMajorList();
		// 得到预期值
		List<String> expect1 = getExpectList(String.class,"expect_majorList");
		// 断言检索结果和预期是否一致
		assertListEquals(expect1, actual1);
	}

//	/**
//	 * Test method for {@link com.yds.employee.service.impl.Yb0020ServiceImpl#getPosSname(java.lang.String)}.
//	 */
//	@Test
//	public final void testGetPosSname() throws Exception {
//		// 初始化数据库
//		initData("input.xls", "result03.xls");
//		
//		// 初始化测试方法参数
//		String posId = getParamObject(String.class,"param8");
//		// 调用被测试方法
//		String actual1 = yb0020Service.getPosSname(posId);
//		// 得到预期值
//		String expect1 = getExpectObject(String.class,"expect_posSname");
//		// 断言检索结果和预期是否一致
//		assertBeanEquals(expect1, actual1);
//	}
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0020ServiceImpl#getPosSname(java.lang.String)}.
	 */
	@Test
	public final void testGetDiffName() throws Exception {
		// 初始化数据库
		initData("input.xls", "result04.xls");
		
		// 初始化测试方法参数
		String empState = getParamObject(String.class,"param");
		// 调用被测试方法
		String actual = yb0020Service.getDiffName(empState);
		// 得到预期值
		String expect = getExpectObject(String.class,"expect");
		// 断言检索结果和预期是否一致
		assertBeanEquals(expect, actual);
	}
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0020ServiceImpl#getPosSname(java.lang.String)}.
	 */
	@Test
	public final void testGetPosId() throws Exception {
		// 初始化数据库
		initData("input.xls", "result04.xls");
		
		// 初始化测试方法参数
		String empId = getParamObject(String.class,"param2");
		// 调用被测试方法
		String actual = yb0020Service.getPosId(empId);
		// 得到预期值
		String expect = getExpectObject(String.class,"expect2");
		// 断言检索结果和预期是否一致
		assertBeanEquals(expect, actual);
	}
	
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0020ServiceImpl#getPosSname(java.lang.String)}.
	 */
	@Test
	public final void testGetPosName() throws Exception {
		// 初始化数据库
		initData("input.xls", "result04.xls");
		
		// 初始化测试方法参数
		String posTypeId = getParamObject(String.class,"param3");
		// 调用被测试方法
		String actual = yb0020Service.getPosName(posTypeId);
		// 得到预期值
		String expect = getExpectObject(String.class,"expect3");
		// 断言检索结果和预期是否一致
		assertBeanEquals(expect, actual);
	}
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0020ServiceImpl#getPosSname(java.lang.String)}.
	 */
	@Test
	public final void testGetPos() throws Exception {
		// 初始化数据库
		initData("input.xls", "result04.xls");
		
		// 初始化测试方法参数
		String posId = getParamObject(String.class,"param_empPos");
		// 调用被测试方法
		EmpPos actual = yb0020Service.getPos(posId);
		// 得到预期值
		EmpPos expect = getExpectObject(EmpPos.class,"expect_empPos");
		// 断言检索结果和预期是否一致
		assertBeanEquals(expect, actual);
	}
	
	/**
	 * Test method for {@link com.yds.employee.service.impl.Yb0020ServiceImpl#getPosSname(java.lang.String)}.
	 */
	@Test
	public final void testGetQuitDate() throws Exception {
		// 初始化数据库
		initData("input.xls", "result04.xls");
		
		// 初始化测试方法参数
		String empId = getParamObject(String.class,"param_empInfo");
		// 调用被测试方法
		EmpInfo actual = yb0020Service.getQuitDate(empId);
		// 得到预期值
		EmpInfo expect = getExpectObject(EmpInfo.class,"expect_empInfo");
		// 断言检索结果和预期是否一致
		assertBeanEquals(expect, actual);
	}
	
	
	

}
