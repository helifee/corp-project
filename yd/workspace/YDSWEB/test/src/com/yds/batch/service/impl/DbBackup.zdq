package com.yds.batch.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;

import javax.annotation.Resource;
import javax.sql.DataSource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.dbunit.database.DatabaseConfig;
import org.dbunit.database.DatabaseConnection;
import org.dbunit.database.IDatabaseConnection;
import org.dbunit.database.QueryDataSet;
import org.dbunit.dataset.IDataSet;
import org.dbunit.dataset.xml.FlatXmlDataSet;
import org.dbunit.dataset.xml.FlatXmlDataSetBuilder;
import org.dbunit.ext.mysql.MySqlDataTypeFactory;
import org.dbunit.operation.DatabaseOperation;
import org.springframework.jdbc.datasource.DataSourceUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

@Service("dbBackup")
public class DbBackup {

	private static final Log LOG = LogFactory.getLog(DbBackup.class);
	
//	private static final String DB_BACKUP_PATH = DbBackup.class.getResource(".").getPath() + "dbBackup.xml";
	
	private static final String DB_BACKUP_PATH = "test\\src\\com\\yds\\batch\\service\\impl\\dbBackup.xml";
	
	/** 需要备份的表名. */
	private String[] tables;

	@Resource
	private DataSource dataSource;

	private IDatabaseConnection conn;
	
	/**
	 * 测试前备份数据库.
	 */
	@Transactional(propagation=Propagation.REQUIRES_NEW)
	public void backupTables() throws Exception {
		
		connectDb();
		
		QueryDataSet dataSet = new QueryDataSet(conn);
		
		// 将整个表里的数据导出到 dbBack.xml文件里
		for (String table : tables) {
			dataSet.addTable(table);
		}

		FileOutputStream fos = null;
		
		try{
			fos = new FileOutputStream(DB_BACKUP_PATH);
			FlatXmlDataSet.write(dataSet, fos);
			DatabaseOperation.DELETE_ALL.execute(conn, dataSet);
		} finally {
			if (fos != null) {
				fos.close();
			}
		}

	}

	/**
	 * 结束时还原数据库.
	 */
	@Transactional(propagation=Propagation.REQUIRES_NEW)
	public void restoreTables() throws Exception {
	
		connectDb();
	
		// 从dbBack.xml文件中把备份的表还原到数据库中
		FileInputStream fis = null;
		
		try {
			fis = new FileInputStream(DB_BACKUP_PATH);
			IDataSet dataSet = new FlatXmlDataSetBuilder().build(fis);
			DatabaseOperation.CLEAN_INSERT.execute(conn, dataSet);
		} finally {
			if (fis != null) {
				fis.close();
			}
		
			File file = new File(DB_BACKUP_PATH);
			
			// 删除数据库备份文件
			if (file.exists()) {
				if (!file.delete()) {
					LOG.info("数据库备份文件删除失败。");
				}
			}
		}
	}
	
	/**
	 * 连接数据库
	 * 
	 * @throws Exception
	 */
	private void connectDb() throws Exception {
		conn = new DatabaseConnection(DataSourceUtils.getConnection(dataSource));
		conn.getConfig().setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY, new MySqlDataTypeFactory());
	}
	
	/**
	 * @param tables the tables to set
	 */
	public void setTables(String... tables) {
		this.tables = tables;
	}
}
