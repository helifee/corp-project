/*
 * @(#) Yd0020ServiceImplTest.java
 */
package com.yds.gps.service.impl;

import static com.yds.base.test.BeanAssert.assertListEquals;
import static com.yds.base.test.BeanAssert.assertBeanLenientEquals;
import static org.junit.Assert.*;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.yds.base.test.AbstractSpringTransTest;
import com.yds.base.test.ExcelUtil;
import com.yds.common.bean.UserInfo;
import com.yds.common.service.SessionConstants;
import com.yds.gps.bean.GpsAccount;
import com.yds.gps.bean.GpsExchangeHis;
import com.yds.gps.bean.GpsExchangeSum;
import com.yds.gps.bean.TansferCondA;
import com.yds.gps.bean.Yd0020CondA;
import com.yds.gps.service.Yd0020Service;

/**
 * @author pengchuan
 *
 */
public class Yd0020ServiceImplTest extends AbstractSpringTransTest {
	/** @Resource，自动注入Service */
	@Resource
	private Yd0020Service yd0020Service;
	/**
	 * @throws java.lang.Exception
	 */
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		// 模拟Session设值
		UserInfo userInfo = new UserInfo();
		userInfo.setUserId("YD201001");
		String ip = "192.168.81.22";
		Map<String, Object> session = ExcelUtil.getSession();
		session.put(SessionConstants.USERINFO, userInfo);
		session.put(SessionConstants.IPADDR, ip);
	}

	/**
	 * @throws java.lang.Exception
	 */
	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		initCommonData(Yd0020ServiceImpl.class);
		
		// 删除表中数据(避免和测试数据冲突)
		deleteFromTables("GPS_ACCOUNT", "GPS_EXCHANGE_HIS","sys_code_mst");
	}

	/**
	 * @throws java.lang.Exception
	 */
	@After
	public void tearDown() throws Exception {
	}

	/**
	 * Test method for {@link com.yds.gps.service.impl.Yd0010ServiceImpl#getAccRemain(java.lang.String)}.
	 */
	@Test
	public final void testGetComRemain() throws Exception {
		// 初始化数据库
		initData("input.xls", "result.xls");
		// 调用被测试方法
      	String actual = yd0020Service.getComRemain();
		//得到预期结果
      	String expect= getExpectObject(String.class, "expect");
		// 断言检索结果和预期是否一致
      	assertEquals(expect, actual);
	}
	
	/**
	 * Test method for {@link com.yds.gps.service.impl.Yd0010ServiceImpl#getTotalCount(java.lang.String)}.
	 */
	@Test
	public final void testGetCafeAccount() throws Exception {
		// 初始化数据库
		initData("input.xls", "result.xls");
		// 调用被测试方法
		GpsAccount actual = yd0020Service.getCafeAccount();
		//得到预期结果
		GpsAccount expect= getExpectObject(GpsAccount.class, "expect1");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expect, actual);
	}
	/**
	 * Test method for {@link com.yds.gps.service.impl.Yd0010ServiceImpl#getTotalCount(java.lang.String)}.
	 */
	@Test
	public final void testGetGpsAccount() throws Exception {
		// 初始化数据库
		initData("input.xls", "result.xls");
		// 调用被测试方法
		GpsAccount actual = yd0020Service.getGpsAccount();
		//得到预期结果
		GpsAccount expect= getExpectObject(GpsAccount.class, "expect2");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expect, actual);
	}
	
	
    /**
	 * Test method for {@link com.yds.gps.service.impl.Yd0010ServiceImpl#getExchangeHisList(java.lang.String)}.
	 */
	@Test
	public final void testGetExchangeHisList() throws Exception {
		// 初始化数据库
		initData("input.xls", "result.xls");
		// 初始化测试方法参数-数据库存在
		Yd0020CondA yd0020CondA = getParamObject(Yd0020CondA.class,"param3");
		// 调用被测试方法
		List<GpsExchangeHis> actual = yd0020Service.getExchangeHisList(yd0020CondA,0,2);
		//得到预期结果
		List<GpsExchangeHis> expect= getExpectList(GpsExchangeHis.class, "expect3");
		// 断言检索结果和预期是否一致
		assertListEquals(expect, actual);
	}
	
	/**
	 * Test method for {@link com.yds.gps.service.impl.Yd0010ServiceImpl#getTotalCount(java.lang.String)}.
	 */
	@Test
	public final void testGetTotalCount() throws Exception {
		// 初始化数据库
		initData("input.xls", "result.xls");
		// 初始化测试方法参数-数据库存在
		Yd0020CondA yd0020CondA = getParamObject(Yd0020CondA.class,"param4");
		// 调用被测试方法
      	Long actual = yd0020Service.getTotalCount(yd0020CondA);
		//得到预期结果
      	Long expect= getExpectObject(Long.class, "expect4");
		// 断言检索结果和预期是否一致
      	assertEquals(expect, actual);
	}
	
	@Test
	public final void testGetExchangeHisSum() throws Exception {
		// 初始化数据库
		initData("input.xls", "result01.xls");

		// 初始化测试方法参数
		Yd0020CondA yd0020CondA= getParamObject(Yd0020CondA.class, "param");
		// 调用被测试方法
		GpsExchangeSum actualGpsExchangeSum = yd0020Service.getExchangeHisSum(yd0020CondA);
		// 得到预期值
		GpsExchangeSum expectGpsExchangeSum= getExpectObject(GpsExchangeSum.class, "expect");
		// 断言检索结果和预期是否一致
		 assertBeanLenientEquals(expectGpsExchangeSum, actualGpsExchangeSum);
	}
	
	@Test
	public final void testGetPesonRemain() throws Exception {
		// 初始化数据库
		initData("input.xls", "result01.xls");
		String pesAccId=getParamObject(String.class, "param2");
		// 调用被测试方法
      	String actual = yd0020Service.getPesonRemain(pesAccId);
		//得到预期结果
      	String expect= getExpectObject(String.class, "expect2");
		// 断言检索结果和预期是否一致
      	assertEquals(expect, actual);
	}
	
	@Test
	public final void testUpdateAccountInfo() throws Exception {
		// 初始化数据库
		initData("input.xls", "result01.xls");

		// 初始化测试方法参数
		String pesAccId=getParamObject(String.class, "param3");
		String comAccId=getParamObject(String.class, "param4");
		TansferCondA tansferCondA=getParamObject(TansferCondA.class, "param5");
		// 调用被测试方法
		yd0020Service.updateAccountInfo(tansferCondA,comAccId,pesAccId);
		// 插入检索的数据
		 GpsAccount actualGpsAccount = findBeanByCondition(GpsAccount.class, "param_GPS_ACCOUNT");
		// 得到预期值
		 GpsAccount expectGpsAccount= getExpectObject(GpsAccount.class, "expect_GPS_ACCOUNT");
		// 断言检索结果和预期是否一致
		 assertBeanLenientEquals(expectGpsAccount, actualGpsAccount);
	}
}


