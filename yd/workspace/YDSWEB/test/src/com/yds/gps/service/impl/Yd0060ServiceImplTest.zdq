/*
 * @(#) Yd0060ServiceImplTest.java
 */
package com.yds.gps.service.impl;

import static com.yds.base.test.BeanAssert.assertBeanLenientEquals;
import static org.junit.Assert.*;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import junit.framework.Assert;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.yds.base.test.AbstractSpringTransTest;
import com.yds.base.test.ExcelUtil;
import com.yds.common.bean.UserInfo;
import com.yds.common.service.SessionConstants;
import com.yds.gps.bean.GpsAccount;
import com.yds.gps.bean.GpsOrderDetail;
import com.yds.gps.bean.GpsOrderGoods;
import com.yds.gps.bean.TansferCondA;
import com.yds.gps.bean.Yd0060OrderInfo;
import com.yds.gps.common.bean.GpsOrderInfo;
import com.yds.gps.service.Yd0060Service;

/**
 * @author pengchuan
 *
 */
public class Yd0060ServiceImplTest extends AbstractSpringTransTest {
	/** @Resource，自动注入Service */
	@Resource
	private Yd0060Service yd0060Service;
	/**
	 * @throws java.lang.Exception
	 */
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		// 模拟Session设值
		UserInfo userInfo = new UserInfo();
		userInfo.setUserId("YD201001");
		String ip = "192.168.81.22";
		Map<String, Object> session = ExcelUtil.getSession();
		session.put(SessionConstants.USERINFO, userInfo);
		session.put(SessionConstants.IPADDR, ip);
	}

	/**
	 * @throws java.lang.Exception
	 */
	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		initCommonData(Yd0060ServiceImpl.class);
		
		// 删除表中数据(避免和测试数据冲突)
		deleteFromTables("GPS_ORDER_INFO", "GPS_ORDER_DETAIL","GPS_ORDER_GOODS",
				"GPS_GOODS_CATE","GPS_GOODS_INFO","GPS_EXCHANGE_HIS","GPS_ACCOUNT","sys_code_mst");
	}

	/**
	 * @throws java.lang.Exception
	 */
	@After
	public void tearDown() throws Exception {
	}

	/**
	 * Test method for {@link com.yds.gps.service.impl.Yd0060ServiceImpl#updateOrderInfo(java.lang.String)}.
	 */
	@Test
	public final void testUpdateOrderInfo() throws Exception {
		// 初始化数据库
		initData("input.xls", "result03.xls");
		// 初始化测试方法参数-数据库存在
		GpsOrderInfo gpsOrderInfo=getParamObject(GpsOrderInfo.class,"param2");
		// 调用被测试方法
     	yd0060Service.updateOrderInfo(gpsOrderInfo);
        // 检索数据
     	GpsOrderInfo gpsOrderInfoactual = findBeanByCondition(GpsOrderInfo.class, "param_GPS_ORDER_INFO");
		//得到预期结果
     	GpsOrderInfo gpsOrderInfoexpect= getExpectObject(GpsOrderInfo.class, "expect_GPS_ORDER_INFO");
     	// 断言检索结果和预期是否一致
		assertBeanLenientEquals(gpsOrderInfoexpect, gpsOrderInfoactual);
	}
	
	/**
	 * Test method for {@link com.yds.gps.service.impl.Yd0060ServiceImpl#updateAndDeleOrder(java.lang.String)}.
	 */
	@Test
	public final void testUpdateAndDeleOrder() throws Exception {
		// 初始化数据库
		initData("input.xls", "result01.xls");
		// 初始化测试方法参数-数据库存在
		String  orderId=getParamObject(String.class,"param1");
		String  orderContent=getParamObject(String.class,"param2");
		String  goodsCateId=getParamObject(String.class,"param3");
		TansferCondA tansferCondA=getParamObject(TansferCondA.class,"param4");
		// 初始化测试方法参数-数据库存在
		// 调用被测试方法
      	yd0060Service.updateAndDeleOrder(orderId,orderContent,tansferCondA,goodsCateId);
         // 检索数据
      	GpsOrderDetail gpsOrderDetailactual = findBeanByCondition(GpsOrderDetail.class, "param_GPS_ORDER_DETAIL");
      	GpsOrderInfo gpsOrderInfoactual=findBeanByCondition(GpsOrderInfo.class, "param_GPS_ORDER_INFO");
      	GpsOrderGoods gpsOrderGoodsactual=findBeanByCondition(GpsOrderGoods.class, "param_GPS_ORDER_GOODS");
      	GpsAccount gpsAccountactual=findBeanByCondition(GpsAccount.class, "param_GPS_ACCOUNT");
      	GpsAccount gpsAccountexpect=getExpectObject(GpsAccount.class, "expect_GPS_ACCOUNT");
      	// 断言检索结果和预期是否一致
      	Assert.assertNull(gpsOrderDetailactual);
      	Assert.assertNull(gpsOrderInfoactual);
      	Assert.assertNull(gpsOrderGoodsactual);
      	assertBeanLenientEquals(gpsAccountexpect, gpsAccountactual);
	}
	/**
	 * Test method for {@link com.yds.gps.service.impl.Yd0060ServiceImpl#getOrderInfo(java.lang.String)}.
	 */
	@Test
	public final void testGetOrderInfo() throws Exception {
		// 初始化数据库
		initData("input.xls", "result03.xls");
		// 初始化测试方法参数-数据库存在
		String orderId=getParamObject(String.class,"param");
		// 调用被测试方法
		GpsOrderInfo gpsOrderInfoactual=yd0060Service.getOrderInfo(orderId);
		//得到预期结果
    	GpsOrderInfo gpsOrderInfoexpect= getExpectObject(GpsOrderInfo.class, "expect");
    	// 断言检索结果和预期是否一致
		assertBeanLenientEquals(gpsOrderInfoexpect, gpsOrderInfoactual);
	}
	
	/**
	 * Test method for {@link com.yds.gps.service.impl.Yd0060ServiceImpl#deleteOrder(java.lang.String)}.
	 */
	@Test
	public final void testDeleteOrder() throws Exception {
		// 初始化数据库
		initData("input.xls", "result02.xls");
		// 初始化测试方法参数-数据库存在
		String orderId=getParamObject(String.class,"param");
		// 调用被测试方法
    	yd0060Service.deleteOrder(orderId);
    	// 检索数据
  	GpsOrderDetail gpsOrderDetailactual = findBeanByCondition(GpsOrderDetail.class, "param_GPS_ORDER_DETAIL");
  	GpsOrderInfo gpsOrderInfoactual=findBeanByCondition(GpsOrderInfo.class, "param_GPS_ORDER_INFO");
  	GpsOrderGoods gpsOrderGoodsactual=findBeanByCondition(GpsOrderGoods.class, "param_GPS_ORDER_GOODS");
  	// 断言检索结果和预期是否一致
  	Assert.assertNull(gpsOrderDetailactual);
  	Assert.assertNull(gpsOrderInfoactual);
  	Assert.assertNull(gpsOrderGoodsactual);
  	GpsAccount gpsAccount1actual=findBeanByCondition(GpsAccount.class, "param1_GPS_ACCOUNT");
  	GpsAccount gpsAccount2actual=findBeanByCondition(GpsAccount.class, "param2_GPS_ACCOUNT");
  	GpsAccount gpsAccount3actual=findBeanByCondition(GpsAccount.class, "param3_GPS_ACCOUNT");
  	GpsAccount gpsAccount1expect=getExpectObject(GpsAccount.class, "expect1_GPS_ACCOUNT");
  	GpsAccount gpsAccount2expect=getExpectObject(GpsAccount.class, "expect2_GPS_ACCOUNT");
  	GpsAccount gpsAccount3expect=getExpectObject(GpsAccount.class, "expect3_GPS_ACCOUNT");
  	assertBeanLenientEquals(gpsAccount1expect, gpsAccount1actual);
  	assertBeanLenientEquals(gpsAccount2expect, gpsAccount2actual);
  	assertBeanLenientEquals(gpsAccount3expect, gpsAccount3actual);
	}
	
	/**
	 * Test method for {@link com.yds.gps.service.impl.Yd0060ServiceImpl#updateEndOrder(java.lang.String)}.
	 */
	@Test
	public final void testUpdateEndOrder() throws Exception {
		// 初始化数据库
		initData("input.xls", "result06.xls");
		// 初始化测试方法参数-数据库存在
		String  orderId=getParamObject(String.class,"param1");
		String  orderContent=getParamObject(String.class,"param2");
		String  goodsCateId=getParamObject(String.class,"param3");
		TansferCondA tansferCondA=getParamObject(TansferCondA.class,"param4");
		Boolean isSendMsg=getParamObject(Boolean.class,"param5");
		// 调用被测试方法
    	yd0060Service.updateEndOrder(orderId,orderContent,tansferCondA,goodsCateId,isSendMsg);
    	GpsAccount gpsAccountactual=findBeanByCondition(GpsAccount.class, "param_GPS_ACCOUNT");
    	GpsAccount gpsAccountexpect=getExpectObject(GpsAccount.class, "expect_GPS_ACCOUNT");
    	GpsOrderInfo gpsOrderInfoactual=findBeanByCondition(GpsOrderInfo.class, "param_GPS_ORDER_INFO");
    	GpsOrderInfo gpsOrderInfoexpect=getExpectObject(GpsOrderInfo.class, "expect_GPS_ORDER_INFO");
    	
    	// 断言检索结果和预期是否一致
		assertBeanLenientEquals(gpsAccountexpect, gpsAccountactual);
		assertBeanLenientEquals(gpsOrderInfoexpect, gpsOrderInfoactual);
	}
	
	/**
	 * Test method for {@link com.yds.gps.service.impl.Yd0060ServiceImpl#deleteGoodsOrder(java.lang.String)}.
	 */
	@Test
	public final void testDeleteGoodsOrder() throws Exception {
		// 初始化数据库
		initData("input.xls", "result07.xls");
		// 初始化测试方法参数-数据库存在
		GpsOrderDetail gpsOrderDetail=getParamObject(GpsOrderDetail.class,"param1");
		String goodsCateId=getParamObject(String.class,"param3");
		List<String> orderList=getParamList(String.class,"param4");
		String[] orderString=(String[]) orderList.toArray(new String[orderList.size()]);
		// 调用被测试方法
    	yd0060Service.deleteGoodsOrder(gpsOrderDetail,goodsCateId,orderString);
    	// 检索数据
	  	GpsOrderDetail gpsOrderDetailactual = findBeanByCondition(GpsOrderDetail.class, "param_GPS_ORDER_DETAIL");
	  	GpsOrderInfo gpsOrderInfoactual=findBeanByCondition(GpsOrderInfo.class, "param_GPS_ORDER_INFO");
	  	GpsOrderGoods gpsOrderGoodsactual=findBeanByCondition(GpsOrderGoods.class, "param_GPS_ORDER_GOODS");
	  	GpsOrderDetail gpsOrderDetailexpect = getExpectObject(GpsOrderDetail.class, "expect_GPS_ORDER_DETAIL");
	  	GpsOrderInfo gpsOrderInfoexpect=getExpectObject(GpsOrderInfo.class, "expect_GPS_ORDER_INFO");
	  	GpsOrderGoods gpsOrderGoodsexpect=getExpectObject(GpsOrderGoods.class, "expect_GPS_ORDER_GOODS");
	  	assertBeanLenientEquals(gpsOrderInfoexpect, gpsOrderInfoactual);
	  	assertBeanLenientEquals(gpsOrderDetailexpect, gpsOrderDetailactual);
	  	assertBeanLenientEquals(gpsOrderGoodsexpect, gpsOrderGoodsactual);
	  	GpsAccount gpsAccount1actual=findBeanByCondition(GpsAccount.class, "param1_GPS_ACCOUNT");
	  	GpsAccount gpsAccount1expect=getExpectObject(GpsAccount.class, "expect1_GPS_ACCOUNT");
	  	GpsAccount gpsAccount2actual=findBeanByCondition(GpsAccount.class, "param2_GPS_ACCOUNT");
	  	GpsAccount gpsAccount2expect=getExpectObject(GpsAccount.class, "expect2_GPS_ACCOUNT");
	  	GpsAccount gpsAccount3actual=findBeanByCondition(GpsAccount.class, "param3_GPS_ACCOUNT");
	  	GpsAccount gpsAccount3expect=getExpectObject(GpsAccount.class, "expect3_GPS_ACCOUNT");
	  	assertBeanLenientEquals(gpsAccount1expect, gpsAccount1actual);
	  	assertBeanLenientEquals(gpsAccount2expect, gpsAccount2actual);
	  	assertBeanLenientEquals(gpsAccount3expect, gpsAccount3actual);
	}
	
	/**
	 * Test method for {@link com.yds.gps.service.impl.Yd0060ServiceImpl#updateOrderDetail(java.lang.String)}.
	 */
	@Test
	public final void testUpdateOrderDetail() throws Exception {
		// 初始化数据库
		initData("input.xls", "result05.xls");
		// 初始化测试方法参数-数据库存在
		GpsOrderDetail gpsOrderDetail=getParamObject(GpsOrderDetail.class,"param1");
		String goodsCateId=getParamObject(String.class,"param3");
		// 调用被测试方法
		yd0060Service.updateOrderDetail(gpsOrderDetail,goodsCateId);
		// 检索数据
		GpsOrderDetail gpsOrderDetailactual = findBeanByCondition(GpsOrderDetail.class, "param_GPS_ORDER_DETAIL");
	  	GpsOrderInfo gpsOrderInfoactual=findBeanByCondition(GpsOrderInfo.class, "param_GPS_ORDER_INFO");
	  	GpsOrderGoods gpsOrderGoodsactual=findBeanByCondition(GpsOrderGoods.class, "param_GPS_ORDER_GOODS");
	  	GpsOrderDetail gpsOrderDetailexpect = getExpectObject(GpsOrderDetail.class, "expect_GPS_ORDER_DETAIL");
	  	GpsOrderInfo gpsOrderInfoexpect=getExpectObject(GpsOrderInfo.class, "expect_GPS_ORDER_INFO");
	  	GpsOrderGoods gpsOrderGoodsexpect=getExpectObject(GpsOrderGoods.class, "expect_GPS_ORDER_GOODS");
	  	assertBeanLenientEquals(gpsOrderInfoexpect, gpsOrderInfoactual);
	  	assertBeanLenientEquals(gpsOrderDetailexpect, gpsOrderDetailactual);
	  	assertBeanLenientEquals(gpsOrderGoodsexpect, gpsOrderGoodsactual);
	  	GpsAccount gpsAccount1actual=findBeanByCondition(GpsAccount.class, "param1_GPS_ACCOUNT");
	  	GpsAccount gpsAccount1expect=getExpectObject(GpsAccount.class, "expect1_GPS_ACCOUNT");
	  	GpsAccount gpsAccount2actual=findBeanByCondition(GpsAccount.class, "param2_GPS_ACCOUNT");
	  	GpsAccount gpsAccount2expect=getExpectObject(GpsAccount.class, "expect2_GPS_ACCOUNT");
	  	assertBeanLenientEquals(gpsAccount1expect, gpsAccount1actual);
	  	assertBeanLenientEquals(gpsAccount2expect, gpsAccount2actual);
	}
	
	/**
	 * Test method for {@link com.yds.gps.service.impl.Yd0060ServiceImpl#insertOrder(java.lang.String)}.
	 */
	@Test
	public final void testInsertOrder() throws Exception {
		// 初始化数据库
		initData("input.xls", "result04.xls");
		// 初始化测试方法参数-数据库存在
		GpsOrderDetail gpsOrderDetail=getParamObject(GpsOrderDetail.class,"param1");
		String goodsCateId=getParamObject(String.class,"param3");
		// 调用被测试方法
		yd0060Service.insertOrder(gpsOrderDetail,goodsCateId);
		// 检索数据
	  	GpsOrderDetail gpsOrderDetailactual = findBeanByCondition(GpsOrderDetail.class, "param_GPS_ORDER_DETAIL");
	  	GpsOrderInfo gpsOrderInfoactual=findBeanByCondition(GpsOrderInfo.class, "param_GPS_ORDER_INFO");
	  	GpsOrderGoods gpsOrderGoodsactual=findBeanByCondition(GpsOrderGoods.class, "param_GPS_ORDER_GOODS");
	  	GpsOrderDetail gpsOrderDetailexpect = getExpectObject(GpsOrderDetail.class, "expect_GPS_ORDER_DETAIL");
	  	GpsOrderInfo gpsOrderInfoexpect=getExpectObject(GpsOrderInfo.class, "expect_GPS_ORDER_INFO");
	  	GpsOrderGoods gpsOrderGoodsexpect=getExpectObject(GpsOrderGoods.class, "expect_GPS_ORDER_GOODS");
	  	assertBeanLenientEquals(gpsOrderInfoexpect, gpsOrderInfoactual);
	  	assertBeanLenientEquals(gpsOrderDetailexpect, gpsOrderDetailactual);
	  	assertBeanLenientEquals(gpsOrderGoodsexpect, gpsOrderGoodsactual);
	  	GpsAccount gpsAccount1actual=findBeanByCondition(GpsAccount.class, "param1_GPS_ACCOUNT");
	  	GpsAccount gpsAccount1expect=getExpectObject(GpsAccount.class, "expect1_GPS_ACCOUNT");
	  	GpsAccount gpsAccount2actual=findBeanByCondition(GpsAccount.class, "param2_GPS_ACCOUNT");
	  	GpsAccount gpsAccount2expect=getExpectObject(GpsAccount.class, "expect2_GPS_ACCOUNT");
	  	assertBeanLenientEquals(gpsAccount1expect, gpsAccount1actual);
	  	assertBeanLenientEquals(gpsAccount2expect, gpsAccount2actual);
	}
	
	/**
	 * Test method for {@link com.yds.gps.service.impl.Yd0060ServiceImpl#getPesonRemain(java.lang.String)}.
	 */
	@Test
	public final void testGetPesonRemain() throws Exception {
		// 初始化数据库
		initData("input.xls", "result03.xls");
		// 初始化测试方法参数-数据库存在
		String accId=getParamObject(String.class,"param3");
		// 调用被测试方法
		String accSumactual=yd0060Service.getPesonRemain(accId);
		String accSumexpect=getExpectObject(String.class, "expect3");
		assertEquals(accSumexpect,accSumactual);
	}
	
	/**
	 * Test method for {@link com.yds.gps.service.impl.Yd0060ServiceImpl#getGpsOrderInfo(java.lang.String)}.
	 */
	@Test
	public final void testGetGpsOrderInfo() throws Exception {
		// 初始化数据库
		initData("input.xls", "result08.xls");
		// 初始化测试方法参数-数据库存在
		String orderId=getParamObject(String.class,"param");
		// 调用被测试方法
		Yd0060OrderInfo yd0060OrderInfoactual=yd0060Service.getGpsOrderInfo(orderId);
		//得到预期结果
     	Yd0060OrderInfo yd0060OrderInfoexpect= getExpectObject(Yd0060OrderInfo.class, "expect");
     	// 断言检索结果和预期是否一致
		assertBeanLenientEquals(yd0060OrderInfoexpect, yd0060OrderInfoactual);
	}
}

