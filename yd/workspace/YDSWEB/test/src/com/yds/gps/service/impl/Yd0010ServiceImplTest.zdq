/*
 * @(#) Yd0010ServiceImplTest.java
 */
package com.yds.gps.service.impl;

import static com.yds.base.test.BeanAssert.assertBeanLenientEquals;
import static com.yds.base.test.BeanAssert.assertListEquals;
import static org.junit.Assert.*;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.yds.base.test.AbstractSpringTransTest;
import com.yds.base.test.ExcelUtil;
import com.yds.common.bean.UserInfo;
import com.yds.common.service.SessionConstants;
import com.yds.gps.bean.GpsAccount;
import com.yds.gps.bean.GpsExchangeHis;
import com.yds.gps.bean.GpsExchangeSum;
import com.yds.gps.bean.TansferCondA;
import com.yds.gps.bean.Yd0010CondA;
import com.yds.gps.service.Yd0010Service;

/**
 * @author pengchuan
 *
 */
public class Yd0010ServiceImplTest extends AbstractSpringTransTest {
	/** @Resource，自动注入Service */
	@Resource
	private Yd0010Service yd0010Service;
	/**
	 * @throws java.lang.Exception
	 */
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		// 模拟Session设值
		UserInfo userInfo = new UserInfo();
		userInfo.setUserId("YD201001");
		String ip = "192.168.81.22";
		Map<String, Object> session = ExcelUtil.getSession();
		session.put(SessionConstants.USERINFO, userInfo);
		session.put(SessionConstants.IPADDR, ip);
	}

	/**
	 * @throws java.lang.Exception
	 */
	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		initCommonData(Yd0010ServiceImpl.class);
		
		// 删除表中数据(避免和测试数据冲突)
		deleteFromTables("GPS_ACCOUNT", "GPS_EXCHANGE_HIS","sys_code_mst");
	}

	/**
	 * @throws java.lang.Exception
	 */
	@After
	public void tearDown() throws Exception {
	}

	@Test
	public final void testGetAccRemain() throws Exception {
		// 初始化数据库
		initData("input.xls", "result.xls");
		// 初始化测试方法参数-数据库存在
      	String accId = getParamObject(String.class,"param");
		// 调用被测试方法
      	String actual = yd0010Service.getAccRemain(accId);
		//得到预期结果
      	String expect= getExpectObject(String.class, "expect");
		// 断言检索结果和预期是否一致
      	assertEquals(expect, actual);
	}	

	@Test
	public final void testGetTotalCount() throws Exception {
		// 初始化数据库
		initData("input.xls", "result.xls");
		// 初始化测试方法参数-数据库存在
		Yd0010CondA yd0010CondA = getParamObject(Yd0010CondA.class,"param1");
		// 调用被测试方法
      	Long actual = yd0010Service.getTotalCount(yd0010CondA);
		//得到预期结果
      	Long expect= getExpectObject(Long.class, "expect1");
		// 断言检索结果和预期是否一致
      	assertEquals(expect, actual);
	}
	
	@Test
	public final void testGetExchangeHisList() throws Exception {
		// 初始化数据库
		initData("input.xls", "result.xls");
		// 初始化测试方法参数-数据库存在
		Yd0010CondA yd0010CondA = getParamObject(Yd0010CondA.class,"param2");
		// 调用被测试方法
		List<GpsExchangeHis> actual = yd0010Service.getExchangeHisList(yd0010CondA,0,4);
		//得到预期结果
		List<GpsExchangeHis> expect= getExpectList(GpsExchangeHis.class, "expect2");
		// 断言检索结果和预期是否一致
		assertListEquals(expect, actual);
	}
	
	@Test
	public final void testUpdateACCInfo() throws Exception {
		// 初始化数据库
		initData("input.xls", "result01.xls");
		deleteFromTables("GPS_EXCHANGE_HIS");

		// 初始化测试方法参数
		TansferCondA tansferCondA = getParamObject(TansferCondA.class, "param");
		// 调用被测试方法
		 yd0010Service.updateACCInfo(tansferCondA);
		// 插入检索的数据
		 GpsAccount actualGpsAccount1 = findBeanByCondition(GpsAccount.class, "param1_GPS_ACCOUNT");
		// 得到预期值
		 GpsAccount expectGpsAccount1= getExpectObject(GpsAccount.class, "expect1_GPS_ACCOUNT");
		// 断言检索结果和预期是否一致
		 assertBeanLenientEquals(expectGpsAccount1, actualGpsAccount1);
		// 插入检索的数据
		 GpsAccount actualGpsAccount2 = findBeanByCondition(GpsAccount.class, "param2_GPS_ACCOUNT");
		// 得到预期值
		 GpsAccount expectGpsAccount2= getExpectObject(GpsAccount.class, "expect2_GPS_ACCOUNT");
		// 断言检索结果和预期是否一致
		 assertBeanLenientEquals(expectGpsAccount2, actualGpsAccount2);
	}
	
	@Test
	public final void testGetExchangeHisSum() throws Exception {
		// 初始化数据库
		initData("input.xls", "result02.xls");

		// 初始化测试方法参数
		Yd0010CondA yd0010CondA= getParamObject(Yd0010CondA.class, "param");
		// 调用被测试方法
		GpsExchangeSum actualGpsExchangeSum = yd0010Service.getExchangeHisSum(yd0010CondA);
		// 得到预期值
		GpsExchangeSum expectGpsExchangeSum= getExpectObject(GpsExchangeSum.class, "expect");
		// 断言检索结果和预期是否一致
		 assertBeanLenientEquals(expectGpsExchangeSum, actualGpsExchangeSum);
	}
}
