/**
 * 
 */
package com.yds.gps.service.impl;

import static com.yds.base.test.BeanAssert.assertBeanLenientEquals;
import static com.yds.base.test.BeanAssert.assertListEquals;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.yds.base.test.AbstractSpringTransTest;
import com.yds.base.test.ExcelUtil;
import com.yds.gps.bean.GpsGoodsInfo;
import com.yds.gps.bean.GpsGoodsCate;
import com.yds.common.bean.UserInfo;
import com.yds.common.service.SessionConstants;
import com.yds.gps.service.Yd0040Service;

/**
 * @author pengchuan
 *
 */
public class Yd0040ServiceImplTest extends AbstractSpringTransTest {
	/** @Resource，自动注入Service */
	@Resource
	private Yd0040Service yd0040Service;

	/**
	 * @throws java.lang.Exception
	 */
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		// 模拟Session设值
		UserInfo userInfo = new UserInfo();
		userInfo.setUserId("YD201001");
		String ip = "192.168.81.22";
		Map<String, Object> session = ExcelUtil.getSession();
		session.put(SessionConstants.USERINFO, userInfo);
		session.put(SessionConstants.IPADDR, ip);
	}

	/**
	 * @throws java.lang.Exception
	 */
	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		initCommonData(Yd0040ServiceImpl.class);
		
		// 删除表中数据(避免和测试数据冲突)
		deleteFromTables("GPS_GOODS_CATE", "GPS_GOODS_INFO","COM_SEQ");
	}

	/**
	 * @throws java.lang.Exception
	 */
	@After
	public void tearDown() throws Exception {
	}

	@Test
	public final void testGetGoodsList() throws Exception {
		// 初始化数据库
		initData("input.xls", "result.xls");
		// 初始化测试方法参数-数据库存在
      	String goodsCateId = getParamObject(String.class,"param1");
		// 调用被测试方法
		List<GpsGoodsInfo> actual = yd0040Service.getGoodsList(goodsCateId);
		//得到预期结果
		List<GpsGoodsInfo> expect= getExpectList(GpsGoodsInfo.class, "expect1");
		// 断言检索结果和预期是否一致
		assertListEquals(expect, actual);
	}

	@Test
	public final void testGetGoodsSortList() throws Exception {
		// 初始化数据库
		initData("input.xls", "result.xls");
		// 初始化测试方法参数-数据库存在
     	String goodsCateId = getParamObject(String.class,"param2");
		// 调用被测试方法
		List<GpsGoodsInfo> actual = yd0040Service.getGoodsSortList(goodsCateId);
		//得到预期结果
		List<GpsGoodsInfo> expect= getExpectList(GpsGoodsInfo.class, "expect2");
		// 断言检索结果和预期是否一致
		assertListEquals(expect, actual);
	}

	@Test
	public final void testGetGoodsInfo() throws Exception {
		// 初始化数据库
		initData("input.xls", "result.xls");
		// 初始化测试方法参数-数据库存在
     	String goodsId = getParamObject(String.class,"param3");
		// 调用被测试方法
		GpsGoodsInfo actual = yd0040Service.getGoodsInfo(goodsId);
		//得到预期结果
		GpsGoodsInfo expect= getExpectObject(GpsGoodsInfo.class, "expect3");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expect, actual);
	}

	@Test
	public final void testGetGoodsCateName() throws Exception {
		// 初始化数据库
		initData("input.xls", "result.xls");
		// 初始化测试方法参数-数据库存在
     	String goodsCateId = getParamObject(String.class,"param4");
		// 调用被测试方法
		String actual = yd0040Service.getGoodsCateName(goodsCateId);
		//得到预期结果
		String expect= getExpectObject(String.class, "expect4");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expect, actual);
	}

	@Test
	public final void testInsertGoodsCate() throws Exception {
		// 初始化数据库
		initData("input.xls", "result01.xls");

		// 初始化测试方法参数
		GpsGoodsCate gpsGoodsCate = getParamObject(GpsGoodsCate.class, "param1_GPS_GOODS_CATE");
		// 调用被测试方法
		 yd0040Service.insertGoodsCate(gpsGoodsCate);
		// 插入检索的数据
		 GpsGoodsCate actualGpsGoodsCate = findBeanByCondition(GpsGoodsCate.class, "param2_GPS_GOODS_CATE");
		// 得到预期值
		 GpsGoodsCate expectGpsGoodsCate= getExpectObject(GpsGoodsCate.class, "expect2_GPS_GOODS_CATE");
		// 断言检索结果和预期是否一致
		 assertBeanLenientEquals(expectGpsGoodsCate, actualGpsGoodsCate);
	}
	@Test
	public final void testInsertGoodsInfo() throws Exception {
		// 初始化数据库
		initData("input.xls", "result01.xls");

		// 初始化测试方法参数
		GpsGoodsInfo gpsGoodsInfo = getParamObject(GpsGoodsInfo.class, "param1_GPS_GOODS_INFO");
		// 调用被测试方法
		 yd0040Service.insertGoodsInfo(gpsGoodsInfo);
		// 插入检索的数据
		 GpsGoodsInfo actualGpsGoodsInfo = findBeanByCondition(GpsGoodsInfo.class, "param2_GPS_GOODS_INFO");
		// 得到预期值
		 GpsGoodsInfo expectGpsGoodsInfo= getExpectObject(GpsGoodsInfo.class, "expect2_GPS_GOODS_INFO");
		// 断言检索结果和预期是否一致
		 assertBeanLenientEquals(expectGpsGoodsInfo, actualGpsGoodsInfo);
	}
	
	@Test
	public final void testUpdateGoodsInfo() throws Exception {
		// 初始化数据库
		initData("input.xls", "result02.xls");

		// 初始化测试方法参数
		GpsGoodsInfo gpsGoodsInfo = getParamObject(GpsGoodsInfo.class, "param1_GPS_GOODS_INFO");
		// 调用被测试方法
		 yd0040Service.updateGoodsInfo(gpsGoodsInfo);
		// 插入检索的数据
		 GpsGoodsInfo actualGpsGoodsInfo = findBeanByCondition(GpsGoodsInfo.class, "param2_GPS_GOODS_INFO");
		// 得到预期值
		 GpsGoodsInfo expectGpsGoodsInfo= getExpectObject(GpsGoodsInfo.class, "expect2_GPS_GOODS_INFO");
		// 断言检索结果和预期是否一致
		 assertBeanLenientEquals(expectGpsGoodsInfo, actualGpsGoodsInfo);
	}
	@Test
	public final void testUpdateGoodsSort() throws Exception {
		// 初始化数据库
		initData("input.xls", "result02.xls");

		// 初始化测试方法参数
		String goodsId = getParamObject(String.class, "param2");
		// 调用被测试方法
		 yd0040Service.updateGoodsSort(goodsId);
		// 插入检索的数据
		 GpsGoodsInfo actualGpsGoodsInfo = findBeanByCondition(GpsGoodsInfo.class, "param3_GPS_GOODS_INFO");
		// 得到预期值
		 GpsGoodsInfo expectGpsGoodsInfo= getExpectObject(GpsGoodsInfo.class, "expect3_GPS_GOODS_INFO");
		// 断言检索结果和预期是否一致
		 assertBeanLenientEquals(expectGpsGoodsInfo, actualGpsGoodsInfo);
	}
	@Test
	public final void testGetPubFlag() throws Exception {
		// 初始化数据库
		initData("input.xls", "result.xls");

		// 初始化测试方法参数
		String goodsCateId = getParamObject(String.class, "param5");
		// 调用被测试方法
		 GpsGoodsCate gpsGoodsCateactual =yd0040Service.getPubFlag(goodsCateId);
		// 得到预期值
		 GpsGoodsCate gpsGoodsCateexpect= getExpectObject(GpsGoodsCate.class, "expect5");
		// 断言检索结果和预期是否一致
		 assertBeanLenientEquals(gpsGoodsCateexpect, gpsGoodsCateactual);
	}
	
	@Test
	public final void testGetStoreList() throws Exception {
		// 初始化数据库
		initData("input.xls", "result.xls");

		// 初始化测试方法参数
		String goodsCateId = getParamObject(String.class, "param6");
		// 调用被测试方法
		 List<String> actualStoreList=yd0040Service.getStoreList(goodsCateId);
		// 得到预期值
		 List<String> expectStoreList= getExpectList(String.class, "expect6");
		// 断言检索结果和预期是否一致
		 assertBeanLenientEquals(expectStoreList, actualStoreList);
	}
}
