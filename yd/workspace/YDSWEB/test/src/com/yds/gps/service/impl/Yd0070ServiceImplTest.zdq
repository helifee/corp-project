/**
 * 
 */
package com.yds.gps.service.impl;

import static com.yds.base.test.BeanAssert.assertListEquals;
import static com.yds.base.test.BeanAssert.assertBeanLenientEquals;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import junit.framework.Assert;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.yds.base.test.AbstractSpringTransTest;
import com.yds.base.test.ExcelUtil;
import com.yds.common.bean.UserInfo;
import com.yds.common.service.SessionConstants;
import com.yds.gps.bean.GpsAccount;
import com.yds.gps.bean.GpsExchangeHis;
import com.yds.gps.bean.GpsOrderDetail;
import com.yds.gps.bean.GpsOrderGoods;
import com.yds.gps.common.bean.GpsOrderInfo;
import com.yds.gps.service.Yd0070Service;

/**
 * @author gaoweiwei
 *
 */
public class Yd0070ServiceImplTest extends AbstractSpringTransTest {

	@Resource
	private Yd0070Service yd0070Service;
	
	/**
	 * @throws java.lang.Exception
	 */
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		
		// 模拟Session设值
		UserInfo userInfo = new UserInfo();
		userInfo.setUserId("YD200610");
		Map<String, Object> session = ExcelUtil.getSession();
		session.put(SessionConstants.USERINFO, userInfo);
	}

	/**
	 * @throws java.lang.Exception
	 */
	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		
		initCommonData(Yd0070ServiceImpl.class);
		
		// 删除表中数据(避免和测试数据冲突)
		deleteFromTables("gps_account", "gps_exchange_his", "gps_goods_cate", "gps_goods_info", "gps_order_detail",
						"gps_order_goods", "gps_order_info", "sys_code_mst", "com_seq");
	}

	/**
	 * @throws java.lang.Exception
	 */
	@After
	public void tearDown() throws Exception {
	}

	/**
	 * Test method for {@link com.yds.gps.service.impl.Yd0070ServiceImpl#getGpsOrderInfo(java.lang.String)}.
	 * @throws Exception 
	 */
	@Test
	public final void testGetGpsOrderInfo() throws Exception {
		
		// 初始化数据库
		initData("input.xls", "result1.xls");

		// 初始化测试方法参数
		String orderId = getParamObject(String.class,"param1");
		// 调用被测试方法
		GpsOrderInfo actual = yd0070Service.getGpsOrderInfo(orderId);
		// 得到预期值
		GpsOrderInfo expect = getExpectObject(GpsOrderInfo.class,"expect1");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expect, actual);
	}

	/**
	 * Test method for {@link com.yds.gps.service.impl.Yd0070ServiceImpl#getGpsAccountSum(java.lang.String)}.
	 */
	@Test
	public final void testGetGpsAccountSum() throws Exception {
		
		// 初始化数据库
		initData("input.xls", "result1.xls");

		// 初始化测试方法参数
		String accId = getParamObject(String.class,"param2");
		// 调用被测试方法
		GpsAccount actual = yd0070Service.getGpsAccountSum(accId);
		// 得到预期值
		GpsAccount expect = getExpectObject(GpsAccount.class,"expect2");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expect, actual);
	}

	/**
	 * Test method for {@link com.yds.gps.service.impl.Yd0070ServiceImpl#getDetailNowList(java.lang.String, java.lang.String)}.
	 */
	@Test
	public final void testGetDetailNowList() throws Exception {
		
		// 初始化数据库
		initData("input.xls", "result1.xls");
		
		// 初始化测试方法参数
		String orderId = getParamObject(String.class,"param1");
		String customerId = getParamObject(String.class,"param2");
		// 调用被测试方法
		List<GpsOrderDetail> actualInfo = yd0070Service.getDetailNowList(orderId, customerId);
		// 得到预期值
		List<GpsOrderDetail> expectInfo = getExpectList(GpsOrderDetail.class, "expect3");
		// 断言检索结果和预期是否一致
		assertListEquals(expectInfo, actualInfo);
	}

	/**
	 * Test method for {@link com.yds.gps.service.impl.Yd0070ServiceImpl#getDetailAllList(java.lang.String)}.
	 */
	@Test
	public final void testGetDetailAllList() throws Exception {
		
		// 初始化数据库
		initData("input.xls", "result1.xls");
		
		// 初始化测试方法参数
		String orderId = getParamObject(String.class,"param1");
		// 调用被测试方法
		List<GpsOrderGoods> actualInfo = yd0070Service.getDetailAllList(orderId);
		// 得到预期值
		List<GpsOrderGoods> expectInfo = getExpectList(GpsOrderGoods.class, "expect4");
		// 断言检索结果和预期是否一致
		assertListEquals(expectInfo, actualInfo);
	}

	/**
	 * Test method for {@link com.yds.gps.service.impl.Yd0070ServiceImpl#deleteNowInfo(java.lang.String, java.lang.String, java.lang.String)}.
	 */
	@Test
	public final void testDeleteNowInfo() throws Exception {
		
		// 初始化数据库
		initData("input.xls", "result2.xls");
		
		// 初始化测试方法参数
		String orderId = getParamObject(String.class,"param1");
		String customerId = getParamObject(String.class,"param2");
		String goodsId = getParamObject(String.class,"param3");
		// 调用被测试方法
		yd0070Service.deleteNowInfo(orderId, customerId, goodsId);

		// 检索删除的数据（订购详细表）
		GpsOrderDetail actualGpsOrderDetail = findBeanByCondition(GpsOrderDetail.class, "param_GPS_ORDER_DETAIL");
		// 判断订购详细表是否为空
		Assert.assertNull(actualGpsOrderDetail);
		
		// 以下为测试调用的共通方法
		// 检索更新的数据（订单信息表）
		GpsOrderInfo actualGpsOrderInfo = findBeanByCondition(GpsOrderInfo.class, "param_GPS_ORDER_INFO");
		// 得到预期值
		GpsOrderInfo expectGpsOrderInfo = getExpectObject(GpsOrderInfo.class, "expect_GPS_ORDER_INFO");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsOrderInfo, actualGpsOrderInfo);
		
		// 检索更新的数据（订单商品表）
		GpsOrderGoods actualGpsOrderGoods = findBeanByCondition(GpsOrderGoods.class, "param_GPS_ORDER_GOODS");
		// 得到预期值
		GpsOrderGoods expectGpsOrderGoods= getExpectObject(GpsOrderGoods.class, "expect_GPS_ORDER_GOODS");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsOrderGoods, actualGpsOrderGoods);
		
		// 检索更新的数据（团购账户表-个人）
		GpsAccount actualGpsAccount1 = findBeanByCondition(GpsAccount.class, "param1_GPS_ACCOUNT");
		// 得到预期值
		GpsAccount expectGpsAccount1 = getExpectObject(GpsAccount.class, "expect1_GPS_ACCOUNT");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsAccount1, actualGpsAccount1);
		
		// 检索更新的数据（团购账户表-订饭系统）
		GpsAccount actualGpsAccount2 = findBeanByCondition(GpsAccount.class, "param2_GPS_ACCOUNT");
		// 得到预期值
		GpsAccount expectGpsAccount2 = getExpectObject(GpsAccount.class, "expect2_GPS_ACCOUNT");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsAccount2, actualGpsAccount2);
		
		// 检索更新的数据（交易履历表-个人）
		GpsExchangeHis actualGpsExchangeHis1 = findBeanByCondition(GpsExchangeHis.class, "param1_GPS_EXCHANGE_HIS");
		// 得到预期值
		GpsExchangeHis expectGpsExchangeHis1 = getExpectObject(GpsExchangeHis.class, "expect1_GPS_EXCHANGE_HIS");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsExchangeHis1, actualGpsExchangeHis1);
		
		// 检索更新的数据（交易履历表-订饭系统）
		GpsExchangeHis actualGpsExchangeHis2 = findBeanByCondition(GpsExchangeHis.class, "param2_GPS_EXCHANGE_HIS");
		// 得到预期值
		GpsExchangeHis expectGpsExchangeHis2 = getExpectObject(GpsExchangeHis.class, "expect2_GPS_EXCHANGE_HIS");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsExchangeHis2, actualGpsExchangeHis2);
	}

	/**
	 * Test method for {@link com.yds.gps.service.impl.Yd0070ServiceImpl#saveNowInfo(java.lang.String, java.lang.String, java.lang.String, int, double)}.
	 */
	@Test
	public final void testSaveNowInfo() throws Exception {
		
		// 初始化数据库
		initData("input.xls", "result3.xls");
		
		// 初始化测试方法参数
		String orderId = getParamObject(String.class,"param1");
		String customerId = getParamObject(String.class,"param2");
		String goodsId = getParamObject(String.class,"param3");
		int buyCnt = getParamObject(Integer.class,"param4");
		double gpsPrice = getParamObject(Double.class,"param5");
		// 调用被测试方法
		yd0070Service.saveNowInfo(orderId, customerId, goodsId, buyCnt, gpsPrice);

		// 检索删除的数据（订购详细表）
		GpsOrderDetail actualGpsOrderDetail1 = findBeanByCondition(GpsOrderDetail.class, "param1_GPS_ORDER_DETAIL");
		// 判断订购详细表是否为空
		Assert.assertNull(actualGpsOrderDetail1);
		
		// 以下为测试调用的共通方法
		// 检索更新的数据（订购详细表）
		GpsOrderDetail actualGpsOrderDetail2 = findBeanByCondition(GpsOrderDetail.class, "param2_GPS_ORDER_DETAIL");
		// 得到预期值
		GpsOrderDetail expectGpsOrderDetail2 = getExpectObject(GpsOrderDetail.class, "expect2_GPS_ORDER_DETAIL");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsOrderDetail2, actualGpsOrderDetail2);
		
		// 以下为测试调用的共通方法
		// 检索更新的数据（订单信息表）
		GpsOrderInfo actualGpsOrderInfo = findBeanByCondition(GpsOrderInfo.class, "param_GPS_ORDER_INFO");
		// 得到预期值
		GpsOrderInfo expectGpsOrderInfo = getExpectObject(GpsOrderInfo.class, "expect_GPS_ORDER_INFO");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsOrderInfo, actualGpsOrderInfo);
		
		// 检索更新的数据（订单商品表(2种商品中的一种)）
		GpsOrderGoods actualGpsOrderGoods1 = findBeanByCondition(GpsOrderGoods.class, "param1_GPS_ORDER_GOODS");
		// 得到预期值
		GpsOrderGoods expectGpsOrderGoods1= getExpectObject(GpsOrderGoods.class, "expect1_GPS_ORDER_GOODS");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsOrderGoods1, actualGpsOrderGoods1);
		
		// 检索更新的数据（订单商品表(2种商品中的另一种)）
		GpsOrderGoods actualGpsOrderGoods2 = findBeanByCondition(GpsOrderGoods.class, "param2_GPS_ORDER_GOODS");
		// 得到预期值
		GpsOrderGoods expectGpsOrderGoods2= getExpectObject(GpsOrderGoods.class, "expect2_GPS_ORDER_GOODS");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsOrderGoods2, actualGpsOrderGoods2);
		
		// 检索更新的数据（团购账户表-个人）
		GpsAccount actualGpsAccount1 = findBeanByCondition(GpsAccount.class, "param1_GPS_ACCOUNT");
		// 得到预期值
		GpsAccount expectGpsAccount1 = getExpectObject(GpsAccount.class, "expect1_GPS_ACCOUNT");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsAccount1, actualGpsAccount1);
		
		// 检索更新的数据（团购账户表-订饭系统）
		GpsAccount actualGpsAccount2 = findBeanByCondition(GpsAccount.class, "param2_GPS_ACCOUNT");
		// 得到预期值
		GpsAccount expectGpsAccount2 = getExpectObject(GpsAccount.class, "expect2_GPS_ACCOUNT");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsAccount2, actualGpsAccount2);
		
		// 检索更新的数据（交易履历表-个人1）
		GpsExchangeHis actualGpsExchangeHis1 = findBeanByCondition(GpsExchangeHis.class, "param1_GPS_EXCHANGE_HIS");
		// 得到预期值
		GpsExchangeHis expectGpsExchangeHis1 = getExpectObject(GpsExchangeHis.class, "expect1_GPS_EXCHANGE_HIS");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsExchangeHis1, actualGpsExchangeHis1);
		
		// 检索更新的数据（交易履历表-订饭系统1）
		GpsExchangeHis actualGpsExchangeHis1_2 = findBeanByCondition(GpsExchangeHis.class, "param2_GPS_EXCHANGE_HIS");
		// 得到预期值
		GpsExchangeHis expectGpsExchangeHis1_2 = getExpectObject(GpsExchangeHis.class, "expect2_GPS_EXCHANGE_HIS");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsExchangeHis1_2, actualGpsExchangeHis1_2);
		
		// 检索更新的数据（交易履历表-个人2）
		GpsExchangeHis actualGpsExchangeHis2_1 = findBeanByCondition(GpsExchangeHis.class, "param3_GPS_EXCHANGE_HIS");
		// 得到预期值
		GpsExchangeHis expectGpsExchangeHis2_1 = getExpectObject(GpsExchangeHis.class, "expect3_GPS_EXCHANGE_HIS");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsExchangeHis2_1, actualGpsExchangeHis2_1);
		
		// 检索更新的数据（交易履历表-订饭系统2）
		GpsExchangeHis actualGpsExchangeHis2_2 = findBeanByCondition(GpsExchangeHis.class, "param4_GPS_EXCHANGE_HIS");
		// 得到预期值
		GpsExchangeHis expectGpsExchangeHis2_2 = getExpectObject(GpsExchangeHis.class, "expect4_GPS_EXCHANGE_HIS");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsExchangeHis2_2, actualGpsExchangeHis2_2);
		
		// 检索更新的数据（交易履历表-个人3）
		GpsExchangeHis actualGpsExchangeHis3_1 = findBeanByCondition(GpsExchangeHis.class, "param5_GPS_EXCHANGE_HIS");
		// 得到预期值
		GpsExchangeHis expectGpsExchangeHis3_1 = getExpectObject(GpsExchangeHis.class, "expect5_GPS_EXCHANGE_HIS");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsExchangeHis3_1, actualGpsExchangeHis3_1);
		
		// 检索更新的数据（交易履历表-订饭系统2）
		GpsExchangeHis actualGpsExchangeHis4_2 = findBeanByCondition(GpsExchangeHis.class, "param6_GPS_EXCHANGE_HIS");
		// 得到预期值
		GpsExchangeHis expectGpsExchangeHis4_2 = getExpectObject(GpsExchangeHis.class, "expect6_GPS_EXCHANGE_HIS");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsExchangeHis4_2, actualGpsExchangeHis4_2);
	}

	/**
	 * Test method for {@link com.yds.gps.service.impl.Yd0070ServiceImpl#addNowInfo(java.lang.String, java.lang.String, java.lang.String, int, double)}.
	 */
	@Test
	public final void testAddNowInfo() throws Exception {
		
		// 初始化数据库
		initData("input.xls", "result4.xls");
		
		// 情况一：商品已存在
		// 初始化测试方法参数
		String orderId = getParamObject(String.class,"param1");
		String customerId = getParamObject(String.class,"param2");
		String goodsId = getParamObject(String.class,"param3");
		int buyCnt = getParamObject(Integer.class,"param4");
		double gpsPrice = getParamObject(Double.class,"param5");
		// 调用被测试方法
		yd0070Service.addNowInfo(orderId, customerId, goodsId, buyCnt, gpsPrice);
		
		// 检索更新的数据（订单信息表）
		GpsOrderDetail actualGpsOrderDetail2 = findBeanByCondition(GpsOrderDetail.class, "param1_GPS_ORDER_DETAIL");
		// 得到预期值
		GpsOrderDetail expectGpsOrderDetail2 = getExpectObject(GpsOrderDetail.class, "expect1_GPS_ORDER_DETAIL");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsOrderDetail2, actualGpsOrderDetail2);
		
		// 以下为测试调用的共通方法
		// 检索更新的数据（订单信息表）
		GpsOrderInfo actualGpsOrderInfo = findBeanByCondition(GpsOrderInfo.class, "param_GPS_ORDER_INFO");
		// 得到预期值
		GpsOrderInfo expectGpsOrderInfo = getExpectObject(GpsOrderInfo.class, "expect_GPS_ORDER_INFO");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsOrderInfo, actualGpsOrderInfo);
		
		// 检索更新的数据（订单商品表(2种商品中的一种)）
		GpsOrderGoods actualGpsOrderGoods1 = findBeanByCondition(GpsOrderGoods.class, "param1_GPS_ORDER_GOODS");
		// 得到预期值
		GpsOrderGoods expectGpsOrderGoods1= getExpectObject(GpsOrderGoods.class, "expect1_GPS_ORDER_GOODS");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsOrderGoods1, actualGpsOrderGoods1);
		
		// 检索更新的数据（订单商品表(2种商品中的另一种)）
		GpsOrderGoods actualGpsOrderGoods2 = findBeanByCondition(GpsOrderGoods.class, "param2_GPS_ORDER_GOODS");
		// 得到预期值
		GpsOrderGoods expectGpsOrderGoods2= getExpectObject(GpsOrderGoods.class, "expect2_GPS_ORDER_GOODS");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsOrderGoods2, actualGpsOrderGoods2);
		
		// 检索更新的数据（团购账户表-个人）
		GpsAccount actualGpsAccount1 = findBeanByCondition(GpsAccount.class, "param1_GPS_ACCOUNT");
		// 得到预期值
		GpsAccount expectGpsAccount1 = getExpectObject(GpsAccount.class, "expect1_GPS_ACCOUNT");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsAccount1, actualGpsAccount1);
		
		// 检索更新的数据（团购账户表-订饭系统）
		GpsAccount actualGpsAccount2 = findBeanByCondition(GpsAccount.class, "param2_GPS_ACCOUNT");
		// 得到预期值
		GpsAccount expectGpsAccount2 = getExpectObject(GpsAccount.class, "expect2_GPS_ACCOUNT");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsAccount2, actualGpsAccount2);
		
		// 检索更新的数据（交易履历表-个人）
		GpsExchangeHis actualGpsExchangeHis1 = findBeanByCondition(GpsExchangeHis.class, "param1_GPS_EXCHANGE_HIS");
		// 得到预期值
		GpsExchangeHis expectGpsExchangeHis1 = getExpectObject(GpsExchangeHis.class, "expect1_GPS_EXCHANGE_HIS");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsExchangeHis1, actualGpsExchangeHis1);
		
		// 检索更新的数据（交易履历表-订饭系统）
		GpsExchangeHis actualGpsExchangeHis1_2 = findBeanByCondition(GpsExchangeHis.class, "param2_GPS_EXCHANGE_HIS");
		// 得到预期值
		GpsExchangeHis expectGpsExchangeHis1_2 = getExpectObject(GpsExchangeHis.class, "expect2_GPS_EXCHANGE_HIS");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsExchangeHis1_2, actualGpsExchangeHis1_2);
		
		// 情况二：商品未存在
		// 初始化测试方法参数
		String orderId2 = getParamObject(String.class,"param1");
		String customerId2 = getParamObject(String.class,"param2");
		String goodsId2 = getParamObject(String.class,"param6");
		int buyCnt2 = getParamObject(Integer.class,"param4");
		double gpsPrice2 = getParamObject(Double.class,"param7");
		// 调用被测试方法
		yd0070Service.addNowInfo(orderId2, customerId2, goodsId2, buyCnt2, gpsPrice2);
		
		// 检索更新的数据（订单信息表）
		GpsOrderDetail actualGpsOrderDetail12 = findBeanByCondition(GpsOrderDetail.class, "param12_GPS_ORDER_DETAIL");
		// 得到预期值
		GpsOrderDetail expectGpsOrderDetail12 = getExpectObject(GpsOrderDetail.class, "expect12_GPS_ORDER_DETAIL");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsOrderDetail12, actualGpsOrderDetail12);
		
		// 以下为测试调用的共通方法
		// 检索更新的数据（订单信息表）
		GpsOrderInfo actualGpsOrderInfo2 = findBeanByCondition(GpsOrderInfo.class, "param12_GPS_ORDER_INFO");
		// 得到预期值
		GpsOrderInfo expectGpsOrderInfo2 = getExpectObject(GpsOrderInfo.class, "expect12_GPS_ORDER_INFO");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsOrderInfo2, actualGpsOrderInfo2);
		
		// 检索更新的数据（订单商品表）
		GpsOrderGoods actualGpsOrderGoods12 = findBeanByCondition(GpsOrderGoods.class, "param12_GPS_ORDER_GOODS");
		// 得到预期值
		GpsOrderGoods expectGpsOrderGoods12= getExpectObject(GpsOrderGoods.class, "expect12_GPS_ORDER_GOODS");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsOrderGoods12, actualGpsOrderGoods12);
		
		// 检索更新的数据（团购账户表-个人）
		GpsAccount actualGpsAccount12 = findBeanByCondition(GpsAccount.class, "param1_GPS_ACCOUNT");
		// 得到预期值
		GpsAccount expectGpsAccount12 = getExpectObject(GpsAccount.class, "expect12_GPS_ACCOUNT");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsAccount12, actualGpsAccount12);
		
		// 检索更新的数据（团购账户表-订饭系统）
		GpsAccount actualGpsAccount13 = findBeanByCondition(GpsAccount.class, "param2_GPS_ACCOUNT");
		// 得到预期值
		GpsAccount expectGpsAccount13 = getExpectObject(GpsAccount.class, "expect13_GPS_ACCOUNT");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsAccount13, actualGpsAccount13);
		
		// 检索更新的数据（交易履历表-个人）
		GpsExchangeHis actualGpsExchangeHis12 = findBeanByCondition(GpsExchangeHis.class, "param12_GPS_EXCHANGE_HIS");
		// 得到预期值
		GpsExchangeHis expectGpsExchangeHis12 = getExpectObject(GpsExchangeHis.class, "expect12_GPS_EXCHANGE_HIS");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsExchangeHis12, actualGpsExchangeHis12);
		
		// 检索更新的数据（交易履历表-订饭系统）
		GpsExchangeHis actualGpsExchangeHis13 = findBeanByCondition(GpsExchangeHis.class, "param13_GPS_EXCHANGE_HIS");
		// 得到预期值
		GpsExchangeHis expectGpsExchangeHis13 = getExpectObject(GpsExchangeHis.class, "expect13_GPS_EXCHANGE_HIS");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectGpsExchangeHis13, actualGpsExchangeHis13);
	}

}
