package com.yds.gps.common.service.impl;

import static com.yds.base.test.BeanAssert.assertBeanLenientEquals;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import com.yds.base.test.AbstractSpringTransTest;
import com.yds.base.test.ExcelUtil;
import com.yds.common.bean.UserInfo;
import com.yds.common.service.SessionConstants;
import com.yds.gps.bean.GpsAccount;
import com.yds.gps.bean.GpsExchangeHis;
import com.yds.gps.bean.TansferCondA;
import com.yds.gps.common.service.TansferService;

public class TansferServiceImplTest extends AbstractSpringTransTest {

	@Resource
	private TansferService tansferService;
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		// 模拟Session设值
		UserInfo userInfo = new UserInfo();
		userInfo.setUserId("YD200903");
		Map<String, Object> session = ExcelUtil.getSession();
		session.put(SessionConstants.USERINFO, userInfo);
	}

	@AfterClass
	public static void tearDownAfterClass() throws Exception {
	}

	@Before
	public void setUp() throws Exception {
		initCommonData(TansferServiceImpl.class);
		
		// 删除表中数据(避免和测试数据冲突)
		deleteFromTables("gps_account", "gps_exchange_his", "gps_goods_cate", "gps_goods_info", "gps_order_detail",
						"gps_order_goods", "gps_order_info", "sys_code_mst", "com_seq");
	}

	@After
	public void tearDown() throws Exception {
	}

	@Test
	public final void testTansfer0() throws Exception {
		// 初始化数据库
		initData("input.xls", "result.xls");
		
		// 现金交易时
		// 取款
		// 初始化测试方法转账参数
		TansferCondA tansferCondA0 = getParamObject(TansferCondA.class,"param0_TansferCondA");
		// 调用被测试方法
		tansferService.tansfer(tansferCondA0, true);
		// 查询处理结果（取款账户）
		GpsAccount actualInfoAcc0 = findBeanByCondition(GpsAccount.class, "param0_GPS_ACCOUNT");
		// 得到预期值
		GpsAccount expectInfoAcc0 = getExpectObject(GpsAccount.class, "expect0_GPS_ACCOUNT");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectInfoAcc0, actualInfoAcc0);
		
		// 查询处理结果（交易履历）
		List<GpsExchangeHis> actualInfoAccHis0 = findListBeanByCondition(GpsExchangeHis.class, "param0_GPS_EXCHANGE_HIS");
		// 得到预期值
		List<GpsExchangeHis> expectInfoAccHis0 = getExpectList(GpsExchangeHis.class, "expect0_GPS_EXCHANGE_HIS");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectInfoAccHis0, actualInfoAccHis0);

	}
	
	@Test
	public final void testTansfer1() throws Exception {
		
		// 初始化数据库
		initData("input.xls", "result.xls");
		// 存款
		// 初始化测试方法转账参数
		TansferCondA tansferCondA1 = getParamObject(TansferCondA.class,"param1_TansferCondA");
		// 调用被测试方法
		tansferService.tansfer(tansferCondA1);
		// 查询处理结果（存款账户）
		GpsAccount actualInfoAcc1 = findBeanByCondition(GpsAccount.class, "param1_GPS_ACCOUNT");
		// 得到预期值
		GpsAccount expectInfoAcc1 = getExpectObject(GpsAccount.class, "expect1_GPS_ACCOUNT");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectInfoAcc1, actualInfoAcc1);
		
		// 查询处理结果（交易履历）
		List<GpsExchangeHis> actualInfoAccHis1 = findListBeanByCondition(GpsExchangeHis.class, "param1_GPS_EXCHANGE_HIS");
		// 得到预期值
		List<GpsExchangeHis> expectInfoAccHis1 = getExpectList(GpsExchangeHis.class, "expect1_GPS_EXCHANGE_HIS");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectInfoAccHis1, actualInfoAccHis1);
		
	}
	
	@Test
	public final void testTansfer2() throws Exception {

		// 初始化数据库
		initData("input.xls", "result.xls");
		// 转账，团购时
		// 初始化测试方法转账参数
		TansferCondA tansferCondA = getParamObject(TansferCondA.class,"param2_TansferCondA");
		// 调用被测试方法
		tansferService.tansfer(tansferCondA);
		// 查询处理结果（转出账户）
		GpsAccount actualInfoAccO = findBeanByCondition(GpsAccount.class, "param2_GPS_ACCOUNT");
		// 得到预期值
		GpsAccount expectInfoAccO = getExpectObject(GpsAccount.class, "expect2_GPS_ACCOUNT");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectInfoAccO, actualInfoAccO);
		
		// 查询处理结果（转入账户）
		GpsAccount actualInfoAccI = findBeanByCondition(GpsAccount.class, "param3_GPS_ACCOUNT");
		// 得到预期值
		GpsAccount expectInfoAccI = getExpectObject(GpsAccount.class, "expect3_GPS_ACCOUNT");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectInfoAccI, actualInfoAccI);
		
		// 查询处理结果（交易履历）
		List<GpsExchangeHis> actualInfoAccHis = findListBeanByCondition(GpsExchangeHis.class, "param2_GPS_EXCHANGE_HIS");
		// 得到预期值
		List<GpsExchangeHis> expectInfoAccHis = getExpectList(GpsExchangeHis.class, "expect2_GPS_EXCHANGE_HIS");
		// 断言检索结果和预期是否一致
		assertBeanLenientEquals(expectInfoAccHis, actualInfoAccHis);
		
	}

}
