<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTDSQLMap2.0//EN"
 "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="k040051Dao">
	<typeAlias alias="k040051questionLibrary" type="com.yds.tt.testing.bean.QuestionLibrary"/>
	<typeAlias alias="k040051AnswerInfo" type="com.yds.tt.testing.bean.AnswerInfo"/>
	<typeAlias alias="k040051AnswerPointInfo" type="com.yds.tt.testing.bean.AnswerPointInfo"/>
	<typeAlias alias="k040051QuestionAttachments" type="com.yds.tt.testing.bean.QuestionAttachments"/>
	<typeAlias alias="k040051Keyword" type="com.yds.tt.manager.bean.KeywordInfo"/>

	<!--删除处理，版本号共通-->
	<sql id="getQueVerNo">
		AND QUESTION_VERSION_NO = #questionVersionNo#
	</sql>
	
	<!--分类名称取得-->
	<select id="getCategoryName" parameterClass="com.yds.tt.manager.bean.CategoryInfo" resultClass="String">
		SELECT 
			CONCAT(CASE #category1Id#
			WHEN 0 THEN "" ELSE 
			(SELECT CATEGORY_NAME FROM tt_fenlei
				WHERE CATEGORY1_ID = #category1Id#
				AND CATEGORY_LEVEL = 1)
			END,
			CASE #category2Id#
			WHEN 0 THEN "" ELSE CONCAT("-",
			(SELECT CATEGORY_NAME FROM tt_fenlei
				WHERE CATEGORY1_ID = #category1Id#
				AND CATEGORY2_ID = #category2Id#
				AND CATEGORY_LEVEL = 2))
			END ,
			CASE #category3Id#
			WHEN 0 THEN "" ELSE CONCAT("-",
			(SELECT CATEGORY_NAME FROM tt_fenlei 
				WHERE CATEGORY1_ID = #category1Id#
				AND CATEGORY2_ID = #category2Id#
				AND CATEGORY3_ID = #category3Id#
				AND CATEGORY_LEVEL = 3))
			END) AS categoryName
		FROM DUAL 
	</select>
	
	<!--检索试题-->
	<select id="getQuestionLibrary" parameterClass="java.util.List" resultClass="k040051questionLibrary">
		SELECT 
			tk.QUESTION_ID AS questionId,
			QUESTION_SOURCE AS questionSource, 
			tk.CATEGORY1_ID AS category1Id,
			REF_QUESTION_ID AS refQuestionId,
			CONCAT(CASE tk.CATEGORY1_ID 
			WHEN 0 THEN "" ELSE 
			(SELECT CATEGORY_NAME FROM tt_fenlei
				WHERE CATEGORY1_ID = tk.CATEGORY1_ID 
				AND CATEGORY_LEVEL = 1)
			END,
			CASE CATEGORY2_ID
			WHEN 0 THEN "" ELSE CONCAT("-",
			(SELECT CATEGORY_NAME FROM tt_fenlei
				WHERE CATEGORY1_ID = tk.CATEGORY1_ID 
				AND CATEGORY2_ID = tk.CATEGORY2_ID 
				AND CATEGORY_LEVEL = 2))
			END ,
			CASE CATEGORY3_ID
			WHEN 0 THEN "" ELSE CONCAT("-",
			(SELECT CATEGORY_NAME FROM tt_fenlei 
				WHERE CATEGORY1_ID = tk.CATEGORY1_ID 
				AND CATEGORY2_ID = tk.CATEGORY2_ID 
				AND CATEGORY3_ID = tk.CATEGORY3_ID 
				AND CATEGORY_LEVEL = 3))
			END) AS categoryName,
			
			(select DIFF_NAME 
			 from  com_code_mst 
			 where TYPE_ID ='R04' 
				AND DIFF_NO = tk.CHECK_FLG
			) AS checkFlagName,
			KEYWORD AS keyword,
			QUESTION_TYPE AS questionType,
			(select DIFF_NAME 
			 from  com_code_mst 
			 where TYPE_ID ='R02' 
				AND DIFF_NO = tk.QUESTION_TYPE
			) AS questionTypeName,
			(select DIFF_NAME 
			 from  com_code_mst 
			 where TYPE_ID ='E01' 
				AND DIFF_NO = tk.QUESTION_DIFFICULTY
			) AS questionDifficultyName,
			QUESTION_SCORE AS questionScore,
			QUESTION_TIMES AS questionTimes,
			(select USER_CNM 
			 from v_tt_user 
			 where tk.CREATE_USER_ID = v_tt_user.USER_ID
			) AS createUserName,
			CREATE_TIME AS createTime,
			(select USER_CNM 
			 from v_tt_user 
			 where tk.UPDATE_USER_ID = v_tt_user.USER_ID
			)AS updateUserName,
			tk.UPDATE_TIME AS updateTime,
			QUESTION_CONTENT AS questionContent,
			QUESTION_COMMENT AS questionComment,
			NEW_FLG AS newFlg,
			
			ta.QUESTION_VERSION_NO AS questionVersionNo,
			ta.ANSWER_SERIAL_NO AS answerSerialNo,
			ta.ANSWER_QUES_NO AS answerQuesNo,
			ANSWER_CONTENT AS answerContent,
			ANSWER_CONTENT AS answerContentView,
			ANSWER_SCORE AS answerScore,
			ta.ANSWER_TYPE As answerType,
			(select DIFF_NAME 
			 from  com_code_mst 
			 where TYPE_ID ='R03' 
				AND DIFF_NO = ta.ANSWER_TYPE
			) AS answerTypeName,
			OPTION_NUMBER AS optionNumber,
			BLANK_NUMBER AS blankNumber,
			ta.OPTION_TYPE AS optionType,
			(select DIFF_NAME 
			 from com_code_mst 
			 where 
				(TYPE_ID = ta.OPTION_TYPE_ID 
				 AND DIFF_NO = ta.OPTION_TYPE ) 
				OR 
				(TYPE_ID = ta.OPTION_TYPE_ID
				 AND DIFF_NO = ta.OPTION_TYPE )
			) AS optionTypeName,
				
			POINT_SERIAL_NO AS pointSerialNo,
			POINT_CONTENT AS pointContent,
			POINT_SCORE AS pointScore,
		
			CHECK_FLG AS checkFlg,
			ta.ATTACH_FILE_PATH as attachFilePath
		FROM tt_tiku tk,tt_daan ta
		LEFT JOIN 
			tt_defendian tde
			ON (ta.QUESTION_ID = tde.QUESTION_ID 
			AND ta.QUESTION_VERSION_NO = tde.QUESTION_VERSION_NO
			AND ta.ANSWER_SERIAL_NO =  tde.ANSWER_SERIAL_NO)
		WHERE 
			NEW_FLG = '2' 
			AND (
				<iterate conjunction="or" open="(" close=")">
					tk.QUESTION_ID = #queIdlist[]# 
					AND ta.QUESTION_ID = tk.QUESTION_ID
					AND ta.QUESTION_VERSION_NO = tk.QUESTION_VERSION_NO
				</iterate>
			)
	</select>

	<!--关键字表排他处理-->
	<select id="selKeyWordTable" parameterClass="k040051Keyword" resultClass="k040051Keyword">
		SELECT 
			KEYWORD_NAME AS  keywordName
		FROM tt_guanjianzi 
		WHERE 
			CATEGORY_ID = #gateGroupId# 
			AND KEYWORD_NAME = #keywordName#
	</select>

	<!--排他检查-->
	<select id="getUpdateTime" parameterClass="k040051questionLibrary" resultClass="java.util.Date">
		SELECT 
			UPDATE_TIME  
		FROM tt_tiku 
		WHERE 
			QUESTION_ID = #questionId# 
			AND QUESTION_VERSION_NO = #questionVersionNo#
	</select>

	<!--批量排他检查-->
	<select id="getUpdateTimeList" parameterClass="java.util.List" resultClass="java.util.Date">
		SELECT 
			UPDATE_TIME  
		FROM tt_tiku 
		WHERE 
			0 = 0 
			AND (
				<iterate  conjunction="or">
					(QUESTION_ID = #questionList[].questionId#	
					AND QUESTION_VERSION_NO = #questionList[].oldQuestionVersionNo#)
				</iterate>
			)
	</select>

	<!--当前版本试题更新处理-->
	<update id="newVersionUpdate" parameterClass="k040051questionLibrary">
		UPDATE 
			tt_tiku 
		SET 
			CHECK_FLG = 2 ,
			VERSION_START_TIME = NOW(),
			VERSION_END_TIME ='9999-12-31 23:59:59' ,
			UPDATE_USER_ID = #updateUserId#,
			UPDATE_TIME = NOW()
		WHERE NEW_FLG =2 
			AND QUESTION_ID = #questionId#
	</update>

	<!--前一版本试题失效处理-->
	<update id="oldVersionUpdate" parameterClass="k040051questionLibrary">
		UPDATE 
			tt_tiku 
		SET 
			VERSION_START_TIME = NOW(),
			UPDATE_USER_ID = #updateUserId#,
			UPDATE_TIME = NOW()
		WHERE 
			NEW_FLG =1 
			AND QUESTION_ID = #questionId#
			ORDER BY QUESTION_VERSION_NO DESC LIMIT 1
	</update>
	
	<!--未核对时删除处理-->
	<delete id="deleteTiku">
		DELETE FROM tt_tiku 
		WHERE QUESTION_ID = #questionId#  
	</delete>
	<delete id="deleteDaan">
		DELETE FROM tt_daan 
		WHERE QUESTION_ID = #questionId# 
	</delete>
	<delete id="deleteDaandefen">
		DELETE FROM tt_defendian 
		WHERE QUESTION_ID = #questionId# 
	</delete>
	<delete id="deleteTikuziliao">
		DELETE FROM tt_tk_ziliao 
		WHERE QUESTION_ID = #questionId# 
	</delete>

	<!--需要删除=====》出题次数不为0时的未核对删除处理-->
	<delete id="deleteTikuUncheck">
		DELETE FROM (
			SELECT 
				QUESTION_ID ,
				QUESTION_VERSION_NO 
			FROM TT_TIKU
			WHERE 
				QUESTION_ID = #questionId# 
				AND NEW_FLG = 2
				) AS T1  
		WHERE T1.QUESTION_ID = #questionId#  
		AND T1.QUESTION_VERSION_NO = #questionVersionNo#
	</delete>
	<delete id="deleteDaanUncheck">
		DELETE FROM tt_daan 
		WHERE QUESTION_ID = #questionId# 
		<include refid="getQueVerNo"/>
	</delete>
	<delete id="deleteDaandefenUncheck">
		DELETE FROM tt_defendian 
		WHERE QUESTION_ID = #questionId#  
		<include refid="getQueVerNo"/>
	</delete>
	<delete id="deleteTikuziliaoUncheck">
		DELETE FROM tt_tk_ziliao 
		WHERE QUESTION_ID = #questionId#  
		<include refid="getQueVerNo"/>
	</delete>

	<!--已核对删除处理-->
	<update id="updateCheckDelete">
		UPDATE 
			TT_TIKU 
		SET 
			VERSION_END_TIME = NOW(),
			NEW_FLG =1,
			UPDATE_USER_ID = #updateUserId#,
			UPDATE_TIME = NOW()
		WHERE NEW_FLG = 2 
			AND QUESTION_ID = #questionId#
	</update>
	
	<!--题库表登录头部共通-->
	<sql id="editTiku">
		INSERT INTO tt_tiku (
			QUESTION_ID, 
			QUESTION_VERSION_NO, 
			VERSION_START_TIME, 
			VERSION_END_TIME, 
			REF_QUESTION_ID, 
			NEW_FLG, 
			QUESTION_TYPE, 
			QUESTION_NUMBER,
			ATUO_MARK_FLG, 
			CATEGORY1_ID, 
			CATEGORY2_ID, 
			CATEGORY3_ID, 
			KEYWORD,
			QUESTION_KIND, 
			QUESTION_DIFFICULTY, 
			CHECK_FLG, 
			QUESTION_SCORE, 
			QUESTION_TIMES,
			ERROR_TIMES, 
			RIGHT_TIMES, 
			QUESTION_SOURCE, 
			QUESTION_CONTENT, 
			PICTURE_FLG, 
			MEDIA_FLG, 
			ATTACH_FLG, 
			QUESTION_COMMENT, 
			CREATE_USER_ID, 
			CREATE_TIME,
			UPDATE_USER_ID, 
			UPDATE_TIME
		) VALUES 
	</sql>
	
	<!--题库表登录共通1-->
	<sql id="editTiku1">
		#atuoMarkFlg#,
		#category1Id#,
		#category2Id#,
		#category3Id#,
		#keyword#,
		#questionKind#,
		#questionDifficulty#,
	</sql>
	
	<!--题库表登录共通2-->
	<sql id="editTiku2">
		#questionSource#,
		#questionContent#,
	</sql>
	
	<!--题库表登录共通3-->
	<sql id="editTiku3">
		#questionType#,
		#questionNumber#,
	</sql>
	
	<!--题库表登录共通4-->
	<sql id="editTiku4">
		#pictureFlg#,
		#mediaFlg#,
		#attachFlg#,
		#questionComment#,
	</sql>
	
	<!--答案表登录共通1-->
	<sql id="editDaan1">
		INSERT INTO tt_daan (
			QUESTION_ID,
			QUESTION_VERSION_NO,
			ANSWER_SERIAL_NO,
			ANSWER_TYPE,
			ANSWER_SCORE,
			ANSWER_QUES_NO,
			OPTION_TYPE_ID,
			OPTION_TYPE,
			OPTION_NUMBER,
			BLANK_NUMBER,
			ANSWER_CONTENT,
			WORD_LIMITS,
			ATTACH_FILE_PATH
		) VALUES (
			#questionId#,
			#questionVersionNo#,
			#answerSerialNo#,
			#answerType#,
			#answerScore#,
	</sql>

	<!--答案表登录共通2-->
	<sql id="editDaan2">
		#optionTypeId#,
		#optionType#,
		#optionNumber#,
		#blankNumber#,
		#answerContent#,
		#wordLimits#,
	</sql>

	<!--得分点表登录共通-->
	<sql id="editDefendian">
		INSERT  INTO tt_defendian (
			QUESTION_ID,
			QUESTION_VERSION_NO,
			ANSWER_SERIAL_NO,
			POINT_SERIAL_NO,
			POINT_CONTENT,
			POINT_SCORE
		) VALUES (
			#questionId#,
			#questionVersionNo#,
			#answerSerialNo#,
			#pointSerialNo#,
			#pointContent#,
			#pointScore#
			);
	</sql>

	<!--关键字表登录共通-->
	<sql id="editGuanjianzi">
		INSERT INTO tt_guanjianzi (
			CATEGORY_ID,
			KEYWORD_NAME
		) VALUES (
			#gateGroupId#,
			#keywordName#
		)
	</sql>

	<!--资料表登录共通-->
	<sql id="editTiKuZiliao">
		INSERT  INTO tt_tk_ziliao (
			QUESTION_ID,
			FILE_ID,
			FILE_NAME,
			COMMENT,
			FILE_TYPE,
			FILE_SIZE,
			CREATE_USER_ID,
			CREATE_TIME
		) VALUES (
			#questionId#,
			#fileId#,
			#fileName#,
			#comment#,
			#fileType#,
			#fileSize#,
			#createUserId#,
			NOW(),
		);
	</sql>
	
	<!--模式为<题库确认>或<无修改模式>时,题库表登陆-->
	<insert id="setTikuTableNoModifyMode" parameterClass="k040051questionLibrary">
		<include refid="editTiku"/>
		(#questionId#,
		 1,
		 #versionStartTime#,
		#versionEndTime#,
		'',
		2,
		#questionType#,
		1,
		<include refid="editTiku1"/>
		#checkFlg#,
		#questionScore#,
		0,0,0,
		<include refid="editTiku2"/>
		1,
		1,
		1,
		'',
		#createUserId#,
		NOW(),
		#updateUserId#,
		NOW());
	</insert>

	<!--模式为<题库确认>或<无修改模式>时，登录答案表-->
	<insert id="setDaanTableNoModifyMode" parameterClass="k040051AnswerInfo">
		<include refid="editDaan1"/>
		'',
		<include refid="editDaan2"/>
		'');
	</insert>

	<!--模式为<考试卷新建确认>或<联系卷新建确认>时，以试题个数作循环登录题库表-->
	<insert id="setTikuTableConfirmMode" parameterClass="k040051questionLibrary">
		<include refid="editTiku"/>
		(#questionId#,
		 #questionVersionNo#,
		 #versionStartTime#,
		 #versionEndTime#,
		#refQuestionId#,
		2,
		<include refid="editTiku3"/>
		<include refid="editTiku1"/>
		2,
		#questionScore#,
		0,0,0,
		<include refid="editTiku2"/>
		<include refid="editTiku4"/>
		#createUserId#,
		NOW(),
		#updateUserId#,
		NOW());
	</insert>

	<!--模式为<考试卷新建确认>或<联系卷新建确认>时，登录答案表-->
	<insert id="setDaanTableConfirmMode" parameterClass="k040051AnswerInfo">
		<include refid="editDaan1"/>
		#answerQuesNo#,
		<include refid="editDaan2"/>
		#attachFilePath#
		);
	</insert>

	<!--模式为<考试卷新建确认>或<联系卷新建确认>时，同一答案下，以得分点个数作循环登录答案得分点表-->
	<insert id="setDefendianTableConfirmMode" parameterClass="k040051AnswerPointInfo">
		<include refid="editDefendian"/>
	</insert>

	<!--模式为<考试卷新建确认>或<联系卷新建确认>时，同一答案下，以题库资料个数作循环登录题库资料表-->
	<insert id="setTkziliaoTableConfirmMode" parameterClass="k040051QuestionAttachments">
		<include refid="editTiKuZiliao"/>
	</insert>

	<!--模式为<考试卷新建确认>或<练习卷新建确认>时，登录关键字表-->
	<insert id="setKeyWordTableConfirmMode" parameterClass="k040051Keyword">
		<include refid="editGuanjianzi"/>
	</insert>

	<!--模式为<考试卷修改确认>或<练习卷修改确认>时，登录题库表-->
	<insert id="setTikuTableModifyConfirmMode" parameterClass="k040051questionLibrary">
		<include refid="editTiku"/>
		(#questionId#,
		 #questionVersionNo#,
		 #versionStartTime#,
		 #versionEndTime#,
		 #refQuestionId#,
		2,
		<include refid="editTiku3"/>
		<include refid="editTiku1"/>	
		2,
		#questionScore#,
		0,
		0,
		0,
		#questionSource#,
		#questionContent#,
		<include refid="editTiku4"/>
		#createUserId#,
		NOW(),
		#updateUserId#,
		NOW());
	</insert>

	<!--模式为<考试卷修改确认>或<联系卷修改确认>时，以答案个数作循环登录答案表-->
	<insert id="setDaanTableModifyConfirmMode" parameterClass="k040051AnswerInfo">
		<include refid="editDaan1"/>
		#answerQuesNo#,
		<include refid="editDaan2"/>
		#attachFilePath#
		);
	</insert>

	<!--模式为<考试卷修改确认>或<联系卷修改确认>时，同一答案下，以得分点个数作循环登录答案得分点表-->
	<insert id="setDefendianTableModifyConfirmMode" parameterClass="k040051AnswerPointInfo">
		<include refid="editDefendian"/>
	</insert>

	<!--模式为<考试卷修改确认>或<联系卷修改确认>时，以题库资料个数作循环登录题库资料表-->
	<insert id="setTkziliaoTableModifyConfirmMode" parameterClass="k040051QuestionAttachments">
		<include refid="editTiKuZiliao"/>
	</insert>

	<!--模式为<考试卷修改确认>或<联系卷修改确认>时，登录关键字表-->
	<insert id="setKeyWordTableModifyConfirmMode" parameterClass="k040051Keyword">
		<include refid="editGuanjianzi"/>
	</insert>

	<!--模式为<考试卷修改确认>或<联系卷修改确认>时，题库表更新-->
	<update id="updateTikuTable" parameterClass="k040051questionLibrary">
		UPDATE 
			tt_tiku 
		SET NEW_FLG = 1, 
			VERSION_END_TIME = NOW(),
			UPDATE_USER_ID = #updateUserId#,
			UPDATE_TIME = NOW()
		WHERE QUESTION_ID = #questionId# 
			AND QUESTION_VERSION_NO =#oldQuestionVersionNo#
	</update>
</sqlMap>