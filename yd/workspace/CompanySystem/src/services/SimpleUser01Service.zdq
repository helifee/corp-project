/**
 * プログラム名：プロジェクトの検索のサービス
 * 機能概要：プロジェクトの情報は関連している各種の機能を検索して検索します
 * 作成者：李化娟
 * 作成日：2008/9/25
 * バージョン：1.0
 * 修正履歴：
 */

package services;

import pojo.Pjinfo;
import pojo.Pjpginfo;
import pojo.Userkindmst;
import pojo.Usermst;
import pojo.dao.PjinfoDAO;
import pojo.dao.PjpginfoDAO;
import pojo.dao.UsermstDAO;

import java.util.ArrayList;
import java.util.List;

import org.hibernate.Hibernate;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.springframework.orm.hibernate3.HibernateCallback;


import pojo.Busyomst;
import pojo.dao.BusyomstDAO;
import pojo.dao.UserkindmstDAO;

public class SimpleUser01Service {

	
	private PjinfoDAO pjinfoDAO; 
	private PjpginfoDAO pjpginfoDAO; 
	private UsermstDAO usermstDAO; 
	private BusyomstDAO busyomstDAO;
	private UserkindmstDAO userkindmstDAO;

	public BusyomstDAO getBusyomstDAO() {
		return busyomstDAO;
	} 

	public void setBusyomstDAO(BusyomstDAO busyomstDAO) {
		this.busyomstDAO = busyomstDAO;
	}

	public PjinfoDAO getPjinfoDAO() {
		return pjinfoDAO;
	} 
	public void setPjpginfoDAO(PjpginfoDAO pjpginfoDAO) {
		this.pjpginfoDAO = pjpginfoDAO;
	}
	public PjpginfoDAO getPjpginfoDAO() {
		return pjpginfoDAO;
	} 
	public void setPjinfoDAO(PjinfoDAO pjinfoDAO) {
		this.pjinfoDAO = pjinfoDAO;
	}

	public UsermstDAO getUsermstDAO() {
		return usermstDAO;
	} 
	
	public void setUsermstDAO(UsermstDAO usermstDAO) {
		this.usermstDAO = usermstDAO;
	}
	public UsermstDAO getUserkindmstDAO() {
		return usermstDAO;
	} 
	
	public void setUserkindmstDAO(UserkindmstDAO userkindmstDAO) {
		this.userkindmstDAO = userkindmstDAO;
	}
	

	/**
	 * 機能概要:ユーザーIDを通じてユーザーの情報を探します
	 * @param userid ユーザーID
	 * @return ユーザーの情報
	 */
	public List<Usermst> findByid(String userid){

		String queryString = "from Usermst u where trim(u.userid)=?";
		System.out.println(userid+":userid");
		List<Usermst> temp0=(List<Usermst>)usermstDAO.getHibernateTemplate().find(queryString,userid.trim());

		return temp0;
	}

	/**
	 * プロジェクトを通じて開始時間は参与のプロジェクトを探します
	 * @param startdate プロジェクトの開始時間
	 * @return 条件に合うプロジェクト
	 */
	public List<Pjinfo> findBydate(String startdate){

		String queryString = "from Pjinfo u where trim(u.startdate)=?";
		List<Pjinfo> temp1=(List<Pjinfo>) pjinfoDAO.getHibernateTemplate().find(queryString,startdate);
	
		return temp1;
	}

	/**
	 * プロジェクト開始時間とユーザーIDを通じてプロジェクトを探します
	 * @param startdate プロジェクト開始時間
	 * @param muserid ユーザーID
	 * @return 条件に合うプロジェクト
	 */
	public List<Pjinfo> findBytime(String startdate,List onelist1 ){
		String str="";
		for(int i=0;i<onelist1.size()-1;i++){
			str="'"+onelist1.get(i)+"'"+","+str;
		}
		str=str+"'"+onelist1.get(onelist1.size()-1)+"'";
		System.out.println(str+"str");
		
		System.out.println(onelist1.get(0)+"projectid.get(i)");
		String hql="from Pjinfo u where SUBSTR(u.startdate,1,4) ="+startdate+" and u.projectid in ("+str+")";

		return (List<Pjinfo>) pjinfoDAO.getHibernateTemplate().find(hql);
	}
	
	/**
	 * ユーザーIDを通じてユーザーの参与のプロジェクトIDを探します
	 * @param userid ユーザーID
	 * @return 条件に合うプロジェクトIDなど
	 */
	public List<String> findByuserid(String userid){
	
		String queryString = "from Pjpginfo u where trim(u.id.userid)=?";
		List<Pjpginfo> temp2=(List<Pjpginfo>) pjpginfoDAO.getHibernateTemplate().find(queryString,userid.trim());
		int n=temp2.size();
		List<String> pid=new ArrayList<String>();
		for(int i=0;i<n;i++){
			pid.   add(temp2.get(i).getId().getProjectid());
		}
		return pid;
	}

	/**
	 * 部門IDを通じて部門の情報を探します
	 * @param busyoid 部門ID
	 * @return 部門の情報
	 */
	public List<Busyomst> findByBusyoid(String busyoid){
		String queryString = "from Busyomst u where trim(u.busyoid)=?";
		List<Busyomst> temp2=(List<Busyomst>) busyomstDAO.getHibernateTemplate().find(queryString,busyoid);
		return temp2;
		
	}
	
	/**
	 * ユーザーの種類IDを通じてユーザーの種類の情報を探します
	 * @param userkindid ユーザーの種類ID
	 * @return ユーザーの種類の情報
	 */
	public String findBykindid(String userkindid){
	
		String queryString = " from Userkindmst u where trim(u.userkindid)=?";
		
		List<Userkindmst> result= (List<Userkindmst>) userkindmstDAO.getHibernateTemplate().find(queryString,userkindid.trim());
	
		if(!result.isEmpty()){
			
			return ((Userkindmst)result.get(0)).getUserkindname().toString();
			
		}else{
			
			return "";
		}
	}
	
	public List findAllByPage1(final String nd,final List<String> projectid,final int pageNum, final int pageSize) {
		
		List list = (List) pjinfoDAO.getHibernateTemplate().execute(
				new HibernateCallback() {
					
					
				
					int numBegin = 0;
					{if(pageNum<1)
					{
						numBegin = 0;
					}
					else
					{
						numBegin = (pageNum - 1)*pageSize;
					}
					}
					public Object doInHibernate(Session session)
							throws HibernateException {
						
						List cats =new ArrayList();
						List<String> useridList = new ArrayList<String>();

						int n=projectid.size();
						String str="";
						for(int i=0;i<projectid.size()-1;i++){
							str="'"+projectid.get(i)+"'"+","+str;
						}
						str=str+"'"+projectid.get(projectid.size()-1)+"'";
						System.out.println(str+"str");
						Query q = session
						.createQuery("from Pjinfo u where SUBSTR(u.startdate,1,4) ="+nd+" and trim(u.projectid) in ("+str+")");
						
						q.setFirstResult(numBegin);
	
						 q.setMaxResults(pageSize);
						 cats = q.list();
	
						System.out.println("★☆彡★cats.size()☆彡★☆彡"+cats.size()+"★☆q.list().size()★☆彡★☆彡"); 
						System.out.println("★☆彡★☆彡★☆彡"+useridList+"★☆彡★☆彡★☆彡"); 
						
						return cats;
						
					}
					
				});
		return list;
	}

	
}
