package services;


import java.util.List;


import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.springframework.orm.hibernate3.HibernateCallback;



import pager.Pager;
import pojo.Pjinfo;
import pojo.Pjpginfo;
import pojo.Usermst;
import pojo.dao.PjinfoDAO;

public class PjService {
	private PjinfoDAO pjinfoDAO;

	public PjinfoDAO getPjinfoDAO() {
		return pjinfoDAO;
	}

	public void setPjinfoDAO(PjinfoDAO pjinfoDAO) {
		this.pjinfoDAO = pjinfoDAO;
	}
	/**
	 * PjinfoテーブルのプログラムIDを探す
	 * @param projectid
	 * @return
	 */
	public List<Pjinfo> findByid(String id) {

		String queryString = "FROM Pjinfo u where trim(u.projectid)";
		return (List<Pjinfo>) pjinfoDAO.getHibernateTemplate()
				.find(queryString);
	}
	/**
	 * Usermstテープルで管理者情報を検索する
	 * @return
	 */
	public List<Usermst> findums() {

		String queryString = "FROM Usermst u where trim(u.userkindid)=1";
		return (List<Usermst>) pjinfoDAO.getHibernateTemplate()
				.find(queryString);
	}
	/**
	 * Usermstテープルで一般ユーザー情報を検索する
	 * @return
	 */
	public List<Usermst> findums1() {

		String queryString = "FROM Usermst u where trim(u.userkindid)=2";
		return (List<Usermst>) pjinfoDAO.getHibernateTemplate()
				.find(queryString);
	}
	/**
	 * Pjinfoテーブルを探す
	 * @return
	 */
	public Pager getPager(String currentPage,String pagerMethod,int totalRows) {

		Pager pager = new Pager(totalRows);
		if (currentPage != null) {
			pager.refresh(Integer.parseInt(currentPage));
		}

		if (pagerMethod != null) {
			if (pagerMethod.equals("first")) {
				pager.first();
			} else if (pagerMethod.equals("previous")) {
				pager.previous();
			} else if (pagerMethod.equals("next")) {
				pager.next();
			} else if (pagerMethod.equals("last")) {
				pager.last();
			}
		}
		return pager;
	}
	public List<Pjinfo> findAll() {

		String queryString = "FROM Pjinfo";
		return (List<Pjinfo>) pjinfoDAO.getHibernateTemplate()
				.find(queryString);
	}
	public int getRows() {

		String queryString = "FROM Pjinfo";
		List list=pjinfoDAO.getHibernateTemplate().find(queryString);
		return list.size();
	}
	/**
	 *  Pjinfoテーブルを探してそしてページを分けます
	 * @param pageNum
	 * @param pageSize
	 */
	public List findAllByPage(final int pageNum, final int pageSize) {
		
		List list = (List) pjinfoDAO.getHibernateTemplate().execute(
				new HibernateCallback() {
					int numBegin = 0;
					{if(pageNum<1)
					{
						numBegin = 0;
					}
					else
					{
						numBegin = (pageNum - 1)*pageSize;
					}
					}
					public Object doInHibernate(Session session)
							throws HibernateException {
						Query q = session
								.createQuery("FROM Pjinfo ORDER BY startdate DESC");
						System.out.println("★☆彡★☆彡★☆彡"+pageSize+"★☆彡★☆彡★☆彡"); 
						q.setFirstResult(numBegin);
						q.setMaxResults(pageSize);
						List cats = q.list();
						return cats;
						
					}
					
				});
		return list;
	}
	/**
	 * 検索時間によって、Pjinfoテーブルを探す
	 * @param startdate
	 * @return
	 */
	public List<Pjinfo> findBynd(String nd) {
		String hql = "from Pjinfo u where SUBSTR(u.startdate,1,4)=?";
		return (List<Pjinfo>) pjinfoDAO.getHibernateTemplate().find(hql,nd);

	}
	/**
	 *  Pjinfoテーブルを探してそしてページを分けます
	 * @param pageNum
	 * @param pageSize
	 * @param nd
	 */
public List findAllByPage1(final String nd,final int pageNum, final int pageSize) {
	
		List list = (List) pjinfoDAO.getHibernateTemplate().execute(
				new HibernateCallback() {
					int numBegin = 0;
					{if(pageNum<1)
					{
						numBegin = 0;
					}
					else
					{
						numBegin = (pageNum - 1)*pageSize;
					}
					}
					public Object doInHibernate(Session session)
							throws HibernateException {
						System.out.println("★☆彡★☆彡★☆彡"+nd+"★☆彡★☆彡★☆彡"); 
						Query q = session
								.createQuery("from Pjinfo u where substring(u.startdate,1,4)="+nd);
						System.out.println("★☆彡★pageSize☆彡★☆彡"+pageSize+"★☆彡★pageSize☆彡★☆彡"); 
						q.setFirstResult(numBegin);
						q.setMaxResults(pageSize);
					    List cats = q.list();
						int a=cats.size();
						System.out.println("★☆彡★☆cats.size()★☆彡"+a+"★☆彡cats.size()★☆彡★☆彡");
						return cats;
						
					}
					
				});
		return list;
	}
/**
 * 削除します
 * @param deleteDate
 * @return
 */
	public void delectByid(Pjinfo deleteDate) {

		deleteDate.setCancelflag(" ");
		deleteDate.setIntimestp(" ");
		deleteDate.setUptimestp(" ");
		pjinfoDAO.getHibernateTemplate().delete(deleteDate);
		
	}
	/**
	 * 保存（Pjinfo）します
	 * @param deleteDate
	 * @return
	 */
	public void savePjinfo(Pjinfo pjinfo) {
		
		pjinfoDAO.savePjinfo(pjinfo);

	}
	/**
	 *保存（Pjpginfo）します
	 * @param deleteDate
	 * @return
	 */
	public void savePjpginfo(Pjpginfo pjpginfo) {
		pjinfoDAO.savePjpginfo(pjpginfo);

	}
	/**
	 *更新（Pjinfo）します
	 * @param deleteDate
	 * @return
	 */
     public void updatePjinfo(Pjinfo pjinfo) {
    	 pjinfo.setCancelflag(" ");
		pjinfo.setIntimestp(" ");
		pjinfo.setUptimestp(" ");
		pjinfoDAO.updataPjinfo(pjinfo);

	}

     /**
		 * Pjinfoテーブルのprojectidを探す
		 * @param getKey_hidden
		 * @return
		 */
	  public  List<Pjinfo> getPjinfo(String getKey_hidden)   {
		  String hql = "from Pjinfo u where trim(u.projectid)=?";

			return (List<Pjinfo>) pjinfoDAO.getHibernateTemplate().find(hql,getKey_hidden);
	    } 
	  /**
		 * Usermstテーブルのidを探す
		 * @param id
		 * @return
		 */
		public List<Usermst> findbyid(String id) {

			String queryString = "FROM Usermst u where trim(u.userid)=?";
			return (List<Usermst>) pjinfoDAO.getHibernateTemplate()
					.find(queryString,id);
		}
		/**
		 * Pjpginfoテーブルのidを探す
		 * @param id
		 * @return
		 */
		public List<Pjpginfo> findpjbyid(String id) {

			String queryString = "FROM Pjpginfo u where trim(u.id.projectid)=?";
			return (List<Pjpginfo>) pjinfoDAO.getHibernateTemplate()
					.find(queryString,id);
		}
		/**
		 * Usermstテーブルのuseridを探す
		 * @param userid
		 * @return
		 */
		public List<Usermst> getbyid(String userid) {

			String queryString = "FROM Usermst u where trim(u.userid)=?";
			return (List<Usermst>) pjinfoDAO.getHibernateTemplate()
					.find(queryString,userid.trim());
		}
		/**
		 * Usermstテーブルのnameを探す
		 * @param name
		 * @return
		 */
		public List<Usermst> findByname(String name) {

			String queryString = "FROM Usermst u where trim(u.username)=?";
			return (List<Usermst>) pjinfoDAO.getHibernateTemplate()
					.find(queryString,name);
		}
		/**
		 * Usermstテープルで一般ユーザー情報を検索する
		 * @return
		 */
		public List<Usermst> getUserByUserid(){
			   String queryString="from Usermst u where u.userkindid='2'";
			
				return (List<Usermst>)pjinfoDAO.getHibernateTemplate().find(queryString);

				
			}

	
			
}
