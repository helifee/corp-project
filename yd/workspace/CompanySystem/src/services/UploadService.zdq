/**
 * プログラム名：ファイルのアップロードのサービス
 * 機能概要：ファイルのアップロードの関連している各種の機能は検索します
 * 作成者：李化娟
 * 作成日：2008/10/19
 * バージョン：1.0
 * 修正履歴：
 */
package services;

import java.util.ArrayList;
import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;
import org.springframework.orm.hibernate3.HibernateCallback;

import pojo.Upload;
import pojo.dao.UploadDAO;

public class UploadService {
	private UploadDAO uploadDAO;
  
	public void sUpload(Upload upload) {
		
		uploadDAO.saveUpload(upload);

	}
	public UploadDAO getUploadDAO() {
		return uploadDAO;
	}

	public void setUploadDAO(UploadDAO uploadDAO) {
		this.uploadDAO = uploadDAO;
	} 
	
	/**
	 * 全てを探してすでにファイルの情報をアップロードしました
	 * @return 全てはすでにファイルの情報をアップロードしました
	 */
	public List<Upload> findall(){
		String queryString = "from Upload u where u.filename is not null order by u.id desc";
		List<Upload> temp1=(List<Upload>) uploadDAO.getHibernateTemplate().find(queryString);
		return temp1;
		
	}
public List findAllByPage1(final int pageNum, final int pageSize) {
		
		List list = (List) uploadDAO.getHibernateTemplate().execute(
				new HibernateCallback() {
					
					
				
					int numBegin = 0;
					{if(pageNum<1)
					{
						numBegin = 0;
					}
					else
					{
						numBegin = (pageNum - 1)*pageSize;
					}
					}
					public Object doInHibernate(Session session)
							throws HibernateException {
						
						List cats =new ArrayList();
						
						Query q = session
						.createQuery("from Upload u ");
						
						q.setFirstResult(numBegin);
	
						 q.setMaxResults(pageSize);
						 cats = q.list();
	
						System.out.println("★☆彡★cats.size()☆彡★☆彡"+cats.size()+"★☆q.list().size()★☆彡★☆彡"); 
					
						
						return cats;
						
					}
					
				});
		return list;
	}





	

}
