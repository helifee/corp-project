package pageAction;

import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.StringTokenizer;
import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import parameter.popupPara;
import pojo.Emailaddress;
import services.ManageUser03Service;
import com.opensymphony.xwork2.ActionSupport;
import com.parameter.ParaManager;

public class EmailAction extends ActionSupport{
	//受信者のアドレス
	private String raddress_b; 
	//送信者のアドレス
	private String from;    
	//メールの題名
	private String subject; 
	//メールの内容
	private String text;   
	//メールの添付ファイルのパス
    private   String   file1   =   null;     
 	public String username;
 	private List<List_user> users;
	public String getFrom() {
		return from;
	}

	public void setFrom(String from) {
		this.from = from;
	}
	public String getSubject() {
		return subject;
	}

	public void setSubject(String subject) {
		this.subject = subject;
	}
	public String getText() {
		return text;
	}

	public void setText(String text) {
		this.text = text;
	}
	public List<List_user> getUsers() {
		return users;
	}
	public void setUsers(List<List_user> users) {
		this.users = users;
	}
	public String getRaddress_b() {
		return raddress_b;
	}

	public void setRaddress_b(String raddress_b) {
		this.raddress_b = raddress_b;
	}
     /** 受信者のアドレスを取得する */ 
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	
       
     /**  メールの添付ファイルのパスを設定する   */   
     
     public   void   setFile1(String   file1){
    	 this.file1   =   file1;
     }   
     public   String   getFile1()   {
    	 return   file1;
     }   


	public class List_user{
		private String userid_a;
		public String raddress_a;
		public String getUserid_a() {
			return userid_a;
		}
		public void setUserid_a(String userid_a) {
			this.userid_a = userid_a;
		}
		public String getRaddress_a() {
			return raddress_a;
		}
		public void setRaddress_a(String raddress_a) {
			this.raddress_a = raddress_a;
		}
	}
		
	private ManageUser03Service os;

	public void setOs(ManageUser03Service os){
		
		this.os=os;
	}
    /**  
     * email.jspスを入力して,受信者のアドレス空に設定する
 　　　 */  
	public String email(){
		setRaddress_b("");
		System.out.println("hehheheheehhehe&&&&&&&&");
		return SUCCESS;
	}
	/** 
	 * 受信者のアドレスを検索する 
	  */  
	public String find(){
	    List<Emailaddress> result=null;
	    //Emailaddressで情報を選択する
		result = os.finduserinfo();
		int cnt = result.size();
		System.out.println("cnt="+cnt);
		List<List_user> temp=new ArrayList<List_user>();
		for (int i = 0; i < cnt; i++) {
		List_user one_list=new List_user();
		one_list.setRaddress_a(result.get(i).getEmailaddress().trim());
		temp.add(one_list);
		}
		this.setUsers(temp);
        return SUCCESS;
		
	}
	/** 
	 * 受信者値をページに添付
	 * @return
	 */
	public String setvalue(){
		System.out.println("★★★★★★★★★★★ ★★★");
		System.out.println(this.getUsername());
		popupPara sendPara=new popupPara();
		ParaManager ParaGm =new ParaManager("alter");
		//受信者のアドレスが空の場合を判断て、値は空の場合でok復帰する
		if(this.getUsername().trim()==null||this.getUsername().trim().equals("")){
			return "ok";
         }
		String userid[] = this.getUsername().trim().split(";");
		System.out.println(userid.length);
		System.out.println("@@@@@@@@@@@"+this.getRaddress_b().trim());
		//題名が空の場合を判断て、値は空ないの場合でページの題名が添付する
		if(this.getSubject().trim()!=null&&this.getSubject().trim()!=""){
			setSubject(this.getSubject().trim());
		}else{
			setSubject("");
		}
		//内容が空の場合を判断て、値は空ないの場合でページの内容が添付する
		if(this.getText().trim()!=null&&this.getText().trim()!=""){
			setText(this.getText().trim());
		}else{
			setText("");
		}
		//ページの受信者のアドレスが空の場合を判断て、値は空の場合受信者のでアドレスが直接添付する
		if(this.getRaddress_b().trim().equals("")||this.getRaddress_b().trim()==null){
			setRaddress_b(this.getUsername().trim());
			System.out.println("★★★★★★★★setRaddress_b★★★ ★★★"+this.getRaddress_b());
			return "ok";
		}
		else if (this.getRaddress_b().trim().split(";")!=null){
			String address[]=getRaddress_b().trim().split(";");
			for(int i=0;i<userid.length;i++){ 
				System.out.println("★★★★★★★★for1====★★★ ★★★");
				for(int j=0;j<address.length;j++){
					System.out.println("★★★★★★★★LOOP2====★★★ ★★★");
					System.out.println("userid[i]"+userid[i]);
					System.out.println("address[j]"+address[j]);
					if(address[j].equals(userid[i]))
					{
						System.out.println("★★★★★★★★LOOP1====★★★ ★★★");
						break;
					}else if(j==address.length-1&&address[j]!=userid[i]){
						System.out.println("★★★★★★★★LOOP★★★ ★★★");
						sendPara.setEmailaddress(this.getRaddress_b().trim().concat(";").concat(userid[i]));
						//選択を繰り返してはいけない受信者のアドレスとページの受信者のアドレス;によって接続する
						ParaGm.saveParameter(sendPara);
						System.out.println(sendPara.getEmailaddress());
						setRaddress_b(sendPara.getEmailaddress().trim());

					}
					
					}
			
				
				}
			setRaddress_b(this.getRaddress_b().trim());
			return "ok";
			
		}
		return "ok";
		
	}

	/**
	 * ページの空をする
	 * @return
	 */
	public String reset(){
		System.out.println("reset");
		System.out.println("************");  
		setRaddress_b("");
		setSubject("");
		setText("");
		return SUCCESS;
	}
	
	/** 
	 * メールを送信する
	  */ 
   public String send()throws Exception
   {
	   
	   System.out.println("************"); 
       Properties props=new Properties();
       props.put("mail.transport.protocol","smtp");
       props.put("mail.smtp.host","192.168.80.160");
       props.put("mail.smtp.port","25");
       Session mailSession=Session.getDefaultInstance(props, null);
       Message msg=new MimeMessage(mailSession);
    
       try
       {   //送信者のアドレスを設置する          
           msg.setFrom(new InternetAddress("yuyu@test.com"));
           //受信者のアドレス を設置する  
           msg.setRecipients(Message.RecipientType.TO,parse(this.getRaddress_b()));
           if(msg.getAllRecipients()==null){
        	   return "put";
           }
           //コピーの受信者のアドレスを設置する 
           // msg.setRecipients(Message.RecipientType.CC,parse(this.getRaddress_b()));
           //暗闇の受信者のアドレスを設置する 
           //msg.setRecipients(Message.RecipientType.BCC,parse(this.getRaddress_b()));
           System.out.println(this.getRaddress_b());  
           //送信の時間を設定する
           msg.setSentDate(new java.util.Date());
           //メールのタイトルを設定する
           msg.setSubject(this.getSubject());
           //メールの内容を設定する
           MimeBodyPart   part   =   new   MimeBodyPart(); 
           part.setText(text == null ? "" :text,"UTF-8");   
           Multipart   multipart = new   MimeMultipart();  
           //Multipartで メールの内容を添付する
           multipart.addBodyPart(part);                  
           System.out.println(javax.mail.internet.MimeMessage.class.getResource("")); 
           if (file1 != null||file1!="")               
           {      ArrayList  parts = parsePath(file1);   
                   for   (int i= 0;i< parts.size();i ++)   
                   { 
                	 //Multipartで 附属書コンテンツを添付する 
                     multipart.addBodyPart((MimeBodyPart)parts.get(i));   
                   }   
           }  
           msg.setContent(multipart);                       
           Transport transport=mailSession.getTransport("smtp"); 
           Transport.send(msg);                            
           System.out.println("************");  
          }
         catch(Exception e)
         {
        	 throw e;
         }
         return SUCCESS;
   }
   /**  
    * 附属書のパスを文字列を分析
    * @param affixPath
    * @return
    * @throws MessagingException
    */ 
   private ArrayList parsePath(String   affixPath) throws   MessagingException 
   { 
	   System.out.println("*########");
	   ArrayList list   =   new   ArrayList(); 
       StringTokenizer   tokens   =   new   StringTokenizer(affixPath,   ",");
       System.out.println("%%%%%%%%%"); 
       while   (tokens.hasMoreTokens())
       { 
    	   MimeBodyPart   part   =   new   MimeBodyPart(); 
    	   FileDataSource   source   =   new   FileDataSource(tokens.nextToken().trim());
    	   System.out.println("★★source★★"+source.getName());
    	   if (source.getName() == null || source.getName().equals("")){
    		   continue;
    	   }
    	   part.setDataHandler(new   DataHandler(source));   
    	   part.setFileName(source.getName()); 
    	   System.out.println(part.getFileName());  
           list.add(part);   
       } 
       return   list; 
   }   
   /**  文字列のアドレスを収集分析 
    * 
    * @param addressSet
    * @return
    * @throws AddressException
    */

   private   InternetAddress[]   parse(String   addressSet) throws   AddressException  
   
   {      
	   System.out.println("$$$$$$$$$");  
	   ArrayList list   =   new   ArrayList(); 
	   StringTokenizer   tokens   =   new   StringTokenizer(addressSet,";");   
	   while   (tokens.hasMoreTokens())   
	   { 
		   list.add(new   InternetAddress(tokens.nextToken().trim()));   
	   } 
	   InternetAddress[]   addressArray = new  InternetAddress[list.size()];   
	   list.toArray(addressArray);   
	   return   addressArray;  
   }  
}

