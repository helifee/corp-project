/**
 * プログラム名：ファイルのアップロードのプログラム
 * 機能概要：ファイルのアップロード
 * 作成者：李化娟
 * 作成日：2008/10/20
 * バージョン：1.0
 * 修正履歴：
 */

package pageAction;

import com.opensymphony.xwork2.ActionSupport;
import com.parameter.ParaManager;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.struts2.ServletActionContext;

import parameter.OnlineUserPara;
import pojo.Upload;
import services.UploadService;


public class UploadAction extends ActionSupport {

 private static final long serialVersionUID = 1L;
 
 //ファイル最大サイズ
 private static final int FILE_SIZE=2097152;
 
 //アップロードファイル
 private File upFile;
 
 //アップロードファイルのタイプ
 private String upFileContentType;
 
 //アップロードファイル名
 private String upFileFileName;
 
 //アップロードファイルの正式名称
 private String title;
 
 //アップロードファイルの保存パス
 private String savePath;
 
 //ユーザID
 int id=0;
 
 //当日日付（日付フォルダため）
 private String pathByDate;
 
 private String key_hidden;
 //開始のparamの指定するファイルの属性を通じて
 private String fileName;

 // ダウンロードされるファイルのパスを指定します 
 private String inputPath;
 
 //ページごとの表示する情報数
 int pageSize = 5;
	
 //当面のページ数
 int pageNum = 1;
	
 //総括的なページ数
 int ss = 0;
	
 //総計を記録します
 int cntu=0;
 
 //アップロードファイルリスト
 public class List_upload{
	 
	 //アップロードファイル名
	 private String filename_p;
	 
	 //アッブロードファイルの時間
	 private String upfiledate_p;
	 
	 //アップロードファイルのバス
	 private String upfiledir_p;
	 
	 //アップロードファイルのユーザID
	 private String upfileuser_p;
	 
	
	 /**
	  * アッブロードファイルの名のset方法
	  * @param filename_p　アッブロードファイルの名
	  */
	 public void setFilename_p(String filename_p){
		 this.filename_p=filename_p;
	 }
	 
	 /**
	  * アッブロードファイルの名のget方法
	  * @return　this.filename_p　アッブロードファイルの名
	  */
	 public String getFilename_p(){
		 return this.filename_p;
	 }
	 
	 /**
	  *アッブロードファイルの時間のset方法
	  * @param date　アッブロードファイルの時間
	  */
	 public void setUpfiledate_p(java.lang.String date){
		 this.upfiledate_p= date;
	 }
	 
	 /**
	  * アッブロードファイルの時間のget方法
	  * @return　this.upfiledate_p　アッブロードファイルの時間
	  */
	 public java.lang.String getUpfiledate_p(){
		 return this.upfiledate_p;
	 }
	 
	 /**
	  * アッブロードファイルのバスのset方法
	  * @param upfiledir_p　アッブロードファイルのバス
	  */
	 public void setUpfiledir_p(String upfiledir_p){
		 this.upfiledir_p=upfiledir_p;
	 }
	 
	 /**
	  * アッブロードファイルのバスのget方法
	  * @return　this.upfiledir_p　アッブロードファイルのバス
	  */
	 public String getUpfiledir_p(){
		 return this.upfiledir_p;
	 }
	 
	 /**
	  * アッブロードファイルのユーザのset方法
	  * @param upfileuser_p　アッブロードファイルのユーザ
	  */
	 public void setUpfileuser_p(String upfileuser_p){
		 this.upfileuser_p=upfileuser_p;
	 }
	 
	 /**
	  * アッブロードファイルのユーザのget方法
	  * @return　this.upfileuser_p　アッブロードファイルのユーザ
	  */
	 public String getUpfileuser_p(){
		 return this.upfileuser_p;
	 }
 }
 
 //アッブロードファイルのリスト
 List<List_upload> uploadlist;
 
 /**
  *アッブロードファイルのリストの set方法
  */
 public void setUploadlist(List<List_upload> uploadlist){
	 this.uploadlist=uploadlist;
	 
 }
 
 /**
  * アッブロードファイルのリストのget方法
  */
 public List<List_upload> getUploadlist(){
	 return this.uploadlist;
 }
 
 
 /**
  * アッブロードファイルのバスのset方法
  * @param value　アッブロードファイルのバス
  */
 public void setSavePath(String value){
	 this.savePath=value;
 }
 
 /**
  * アッブロードファイルのバスのget方法
  * @return　savePath　アッブロードファイルのバス
  * @throws Exception
  */
 private String getSavePath()throws Exception{
	 return savePath;
 }
 
 /**
  * アッブロードファイルのget方法
  * @return　this.upFile　アッブロードファイル
  */
 public File getUpFile() {
  return this.upFile;
 }
 
 /**
  * アッブロードファイルの set方法
  * @param upFile　アッブロードファイル
  */
 public void setUpFile(File upFile) {
  this.upFile = upFile;
 }
 
 /**
  * アッブロードファイルの正式め名称のget方法
  * @return　this.title　アッブロードファイルの正式名称
  */
 public String getTitle() {
  return this.title;
 }
 
 /**
  * アッブロードファイルの正式名称のset方法
  * @param title　アッブロードファイルの正式名称
  */
 public void setTitle(String title) {
  this.title = title;
 }
 
 /**
  * アッブロードファイルのタイブのset方法
  * @param upFileContentType　アッブロードファイルのタイブ
  */
 public void setUpFileContentType(String upFileContentType) {
  this.upFileContentType = upFileContentType;
 }
 
 /**
  * アッブロードファイルのタイブのget方法
  * @return　this.upFileContentType　アッブロードファイルのタイブ
  */
 public String getUpFileContentType() {
	  return (this.upFileContentType);
}
 
 /**
  * アッブロードファイルの名のset方法
  * @param upFileFileName　アッブロードファイルの名
  */
 public void setUpFileFileName(String upFileFileName) {
  this.upFileFileName = upFileFileName;
 }
 
 /**
  * アッブロードファイルの名のget方法
  * @return　this.upFileFileName　アッブロードファイルの名
  */
 public String getUpFileFileName(){
	  return (this.upFileFileName);
}
 
 /**
  * 期日プォルダのset方法
  * @param pathByDate　アッブロードファイルの期日
  */
 public void setPathByDate(String pathByDate){
	 this.pathByDate=pathByDate;
 }
 
 /**
  * 期日フォルダのget方法
  * @return　this.pathByDate　アッブロードファイルの期日
  */
 public String getPathByDate(){
	 return this.pathByDate;
 }
 

	public String getKey_hidden () {
		return this.key_hidden;
	}
	public void setKey_hidden(String key_hidden) {
		this.key_hidden = key_hidden;
	}
	
 
 // アッブロードファイルのService
private UploadService msup;

/**
 * アッブロードファイルのServiceのset方法
 * @param msup　アッブロードファイルのService
 */
 public void setMsup(UploadService msup){
		
		this.msup=msup;
}
 
// @Override
 /**
  * 機能概要：DBからアップロードファイルリストを取得する。
  */
 public String upfile() throws Exception {
  // TODO Auto-generated method stub
	 
	 
	 if(getUpFile()==null||getUpFile().equals("")){
			this.addFieldError("upFile", "アップロードファイル選択ください!");
			return INPUT;
		}
	 
	 //ファイルの入力は流れます
	 FileInputStream fis=new FileInputStream(getUpFile());
	
	 //バイトのバッファ
	 byte[] buffer=new byte[1024];
	 
	 //ファイルの長さを読みました
	 int len=0;
	 
	 //ファイルの長さ
  	 int size=0;
  	 
  	 //ファイルを読みました、もし長さは最大の値を上回るならば、ファイルの長さを取って、もし最大の値より大きいならば、循環から跳び出します。
  	 while((len=fis.read(buffer))>0){
  		 size=len+size;
  		 if(size>FILE_SIZE){
  			len=0;
 			fis.close();
 			break;
  		 }
  	 }
  	 
  	//もし長さは最大の値を上回るならば、"wp"に戻ります
  	  if(size>FILE_SIZE){
  		this.addFieldError("upFile", "アップロード2メガ以下ファイル選択ください!");
		return INPUT;
	  }
  	  
  	//ファイルの入力は流れます 
  	fis=new FileInputStream(getUpFile());
  	
  	//ファイルの実際的なメモリーのパスをアップロードします
  	File dirFile;
  	
  	//ファイルは存在するかどうか
  	boolean bFile;

  	bFile = false;
  	
  	//formatdateを回転してyyyyMMddフォーマットに替えます
  	SimpleDateFormat formatdate = new SimpleDateFormat("yyyyMMdd"); 
  	
  	//システムの時間を取ります
	Date currentDate = new Date();
	
	//系統的な時間のフォーマットはyyyyMMdd形式に変わります
	String str_date = formatdate.format(currentDate);
	
	//系統的な時間は文字列のフォーマットになります
	String pathByDate_page= str_date.toString();
	
	//期日プォルダを設置します
	setPathByDate(pathByDate_page);
	
	//パスがフォルダを開けることを指定しています
  	dirFile = new File(this.getSavePath()+pathByDate_page);

  	bFile = dirFile.exists();

	//もしフォルダは存在しませんならば、フォルダを新たに作ります
  	if(bFile == false){
	  	bFile = dirFile.mkdir();
  	}
  	
  //ファイルの総計をアップロードするのは作ります初めて0のため値します
	 int cnt=0;
	 
	 //合格できてファイルの総計を伝えます
	 cnt=msup.findall().size();
	 
	 //ファイルid最大の値をアップロードするのは作ります初めて0のため値します
	 int idp=0;
	 
	 //ってファイルid最大の値をアップロードします
	 if(cnt!=0){
		 idp=msup.findall().get(0).getId();
	 }
	 

	 //もしファイルはすでに存在するならば、ファイルをアップロードして再び命名するべきです
	 if(cnt!=0){
		 for(int i=0;i<cnt;i++){
			 if(msup.findall().get(i).getFilename().equals(this.getPathByDate()+this.getUpFileFileName())){
				 SimpleDateFormat formattime = new SimpleDateFormat("yyyymmddhhmmss");
				 Date time = new Date();
				 String time_current = formattime.format(time);
				 
				 this.setUpFileFileName("("+time_current+")"+this.getUpFileFileName());
			 }	 
		 } 		
	 }
  	
  	//開けてパスのファイルが書くことを行って入ることを指定します
  	FileOutputStream fos=new FileOutputStream(this.getSavePath()+this.getPathByDate()+"\\"+this.getUpFileFileName());

  	//バッファの長さで循環して書いて入ります
	 while((len=fis.read(buffer))>0){
		  fos.write(buffer,0,len);
	  }
	 
	 //出力は流れる を閉鎖します
	 fos.close();
	 
	//入力は流れる を閉鎖します
	 fis.close();
	 
	 //定義Upload対象upload_p
	 Upload upload_p =new Upload();
	 
	 //取ってファイル名をアップロードします
	 String filename=this.getUpFileFileName();
	 
	 //sessionの中からユーザーidを得ます
	 OnlineUserPara myPara=new OnlineUserPara();
	 ParaManager ParaGm =new ParaManager("onlineuser1");
	 myPara=(OnlineUserPara)ParaGm.getParameter();
	 String userid_page;	
	 userid_page=myPara.getUser().getUserid_a();
	 
	 //ユーザーidに値を作ります
	 upload_p.setUpfileuser(userid_page);
	
	 //ファイルidに値を作ります
	 upload_p.setId(idp+1);
	 
	 //ファイルの名に値を作ります
	 upload_p.setFilename(this.getPathByDate()+this.getUpFileFileName());
	 
	 //ファイルのパスに値を作ります
	 upload_p.setUpfiledir(this.getSavePath()+this.getPathByDate()+"\\"+this.getUpFileFileName());
	 
	 //時間を置くフォーマットはyyyy-MM-dd HH:mm:ssです
	 SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); 

	//当面システムの時間を得ます 
	 Date currentTime = new Date();

	//期日の時間のフォーマットを します
	 String str_date1 = formatter.format(currentTime); 

	 //ファイルのアップロードの時間を置きます
	 upload_p.setUpfiledate(str_date1);
	 
	 
//	 upload_p.setDownfiledir_p(this.getSavePath()+"\\"+this.getPathByDate()+"\\"+this.getUpFileFileName());
	 //データベースの中でに値を貯蓄します
	 msup.sUpload(upload_p);
	
	 //successupに戻ります
	return "successup";
}
 
 /**
  * 機能概要：ファイルはみごとなページをアップロードして初期化します
  * @return　inituploadpage
  */
 public String initUploadPage(){
	 
	 //定義Upload型はリストします
	 List<Upload> result = new ArrayList<Upload>();
	 
	 List result2 = new ArrayList<Upload>();
	 
	 //すべてのを探してファイルをアップロードします
	 result=msup.findall();
	 
	 result2=msup.findAllByPage1(pageNum, pageSize);
	 
	 int i=0;
//	 int cnt=0;
	 int cnt2=result2.size();
	 
	 //取ってファイルの総計をアップロードします
	
	 
	 //定義List_upload型はリストします
	 List<List_upload> temp=new ArrayList<List_upload>();
	 
	 //List_upload循環を表しますに値を作ります
	 for(i=0;i<cnt2;i++){
		 
		 //定義List_upload型の対象onelist
		 List_upload onelist=new List_upload();
		 
		 //onelistのファイル名に値を作ります
		 onelist.setFilename_p(((Upload) result2.get(i)).getFilename());
		 
		 //onelistのファイルのアップロードに時間は値を作ります
		 onelist.setUpfiledate_p(((Upload) result2.get(i)).getUpfiledate());
		 
		 //onelistのファイルのアップロードにバースは値を作ります
		 onelist.setUpfiledir_p(((Upload) result2.get(i)).getUpfiledir());
		 
		 //onelistのファイルにユーザーidをアップロードして値を作ります
		 onelist.setUpfileuser_p(((Upload) result2.get(i)).getUpfileuser());
		 
		 //onelistをリストtempに参加します
		 temp.add(onelist);
	 }
	 
	 //ファイルの見出しに値を作ります
	 this.setTitle(result.get(0).getFilename());
	 
	 //ファイルに表のuploadlistをアップロードして値を作ります
	 this.setUploadlist(temp);
	 cntu=result.size();
	 ss=((double)cntu/(double)pageSize)>(cntu/pageSize)?cntu/pageSize+1:cntu/pageSize;
	 
	 //inituploadpageに戻ります
	 return"inituploadpage";
 }

 	
/**
 *InputStreamに戻って流れます 
 * @return  
 * @throws Exception
 */
	public InputStream getInputStream() throws Exception { 

		//取ってキー・ワードに隠れます
		String sub=this.getKey_hidden();

		//ファイルの上層のパスを取ります
		String sub1=sub.substring(0,8).trim();
		
		//ファイル名を取ります
		String sub2=sub.substring(8).trim();
		this.setFileName(sub2);
		
		//通ります ServletContext，application がですデータを読み取りにきます 
		return ServletActionContext.getServletContext().getResourceAsStream(inputPath+"/"+sub1+"/"+sub2); 

	} 

	/**
	 * ファイルのダウンロードのset方法
	 * @return
	 * @throws Exception
	 */
	public String download() throws Exception { 

	return "success"; 

	} 
	
	/**
	 * ダウンロードされるファイルのパスのset方法
	 * @param value
	 */
	public void setInputPath(String value){
		this.inputPath=value;
	}

	/**
	 * ファイルのファイル名set方法をダウンロードします
	 * @param fileName
	 */
	public void setFileName(String fileName) { 

	this.fileName = fileName; 

	} 

	/**
	 * 転換にコードを提供した後はダウンロードの使うファイル名を供えます
	 * @return
	 */
	public String getDownloadFileName() { 

	String downFileName = fileName; 

	try { 

	downFileName = new String(downFileName.getBytes(), "ISO8859-1"); 

	} catch (UnsupportedEncodingException e) { 

	e.printStackTrace(); 

	} 

	return downFileName; 

	}

	public int getPageSize() {
		return pageSize;
	}

	public void setPageSize(int pageSize) {
		this.pageSize = pageSize;
	}

	public int getPageNum() {
		return pageNum;
	}

	public void setPageNum(int pageNum) {
		this.pageNum = pageNum;
	}

	public int getSs() {
		return ss;
	}

	public void setSs(int ss) {
		this.ss = ss;
	}

	public int getCntu() {
		return cntu;
	}

	public void setCntu(int cntu) {
		this.cntu = cntu;
	}

		

}



