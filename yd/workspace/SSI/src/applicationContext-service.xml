<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	 http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

	<!-- 所有Bean共享一个代理基类 -->
	<bean id="transactionBase" 
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" 
		abstract="true" lazy-init="true">
		<property name="transactionManager">
			<ref bean="transactionManager"/>
		</property>
		<!-- 配置事务属性 -->
		<property name="transactionAttributes">
			<props>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="save*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="delete*">PROPAGATION_REQUIRED</prop>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>
	<!-- ServiceTarget配置 -->
	<bean id="loginServiceTarget" 
		class="com.ysys.www.hy.service.Impl.LoginServiceImpl">
		<property name="loginDao">
			<ref bean="loginDao"/>
		</property>
	</bean>
	<bean id="loginService" parent="transactionBase">
		<property name="target">
			<ref bean="loginServiceTarget"/>
		</property>
	</bean>
	
	<bean id="yuyueServiceTarget" 
		class="com.ysys.www.hy.service.Impl.YuyueServiceImpl">
		<property name="yuyueDao">
			<ref bean="yuyueDao"/>
		</property>
	</bean>
	<bean id="yuyueService" parent="transactionBase">
		<property name="target">
			<ref bean="yuyueServiceTarget"/>
		</property>
	</bean>
	
	<!--scope="prototype" 会在该类型的对象被请求时创建一个新的action对象。
		如果没有配置scope=prototype则添加的时候不会新建一个action，仍然会保留上次访问的过记录的信息。 
        如果scope=prototype，每次从spring容器中获取bookAction的实例的时候就会new一个新对象，
		即我们所说的原型，spring中scope默认的是单态（singleton），针对web应用程序，还可以配置为request、session等范围。
		至于什么时候使用什么权限范围就要看应用程序的使用了-->
	<!-- Action配置 -->
	<bean id="loginAction" scope="prototype" 
		class="com.ysys.www.hy.action.LoginAction">
		<property name="loginService">
			<ref bean="loginService"/>
		</property>
	</bean>
	<bean id="AuthInterceptor" scope="prototype" 
		class="com.ysys.www.hy.interceptor.AuthInterceptor">
	</bean>
	<bean id="UrlCatch" scope="prototype" 
		class="com.ysys.www.hy.interceptor.UrlCatch">
	</bean>
	<bean id="reloginAction" scope="prototype" 
		class="com.ysys.www.hy.action.LoginAction">
	</bean>
	<bean id="logoutAction" scope="prototype" 
		class="com.ysys.www.hy.action.LoginAction">
	</bean>
	
	<bean id="yuyueAction" scope="prototype" 
		class="com.ysys.www.hy.action.YuyueAction">
		<property name="yuyueService">
			<ref bean="yuyueService"/>
		</property>
	</bean>
	
</beans>