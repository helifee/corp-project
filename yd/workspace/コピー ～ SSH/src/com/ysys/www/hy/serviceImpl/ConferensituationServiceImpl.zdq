package com.ysys.www.hy.serviceImpl;

import java.util.ArrayList;
import java.util.Date;
import java.util.Calendar;
import java.text.SimpleDateFormat;
import java.util.Iterator;
import java.util.List;
import com.ysys.www.hy.dao.ConferensituationDAO;
import com.ysys.www.hy.service.ConferensituationService;
import com.ysys.www.hy.service.condition.SituationInfo;

/* 类名：会议室预约信息查询服务类
 * 类别：接口实现类，实现了接口类ConferensituationService的 getcsName方法。
 * 功能：为会议室预约信息页面提供满足查询条件的数据集合。
 * 作成者：冯亮
 * 作成日期：2009年7月16日
 */
public class ConferensituationServiceImpl implements ConferensituationService{
   
	private ConferensituationDAO conferensituationDAO;
    
	public void setConferensituationDAO(ConferensituationDAO conferensituationDAO) {
		this.conferensituationDAO = conferensituationDAO;
	}

	/* 名称:会议室预约情况信息取得。
	 * 功能：根据查询条件作成满足条件的会议室预约信息表。	 * 
	 * 参数： 1.查询条件类别：radiobuttonString. 
	 *       2.当查询条件类别为日期查询时的开始日期：startDateString 
	 *       3.当查询条件类别为日期查询时的结束日期：endDateString
	 * 作成者：冯亮
	 * 作成日期：2009年7月16日      
	 * @see com.ysys.www.hy.service.ConferensituationService#getcsName(java.lang.String, java.lang.String, java.lang.String)
	 */
	@SuppressWarnings("unchecked")         
	@Override                           
    public List<SituationInfo> getcsName(String radiobuttonString , Date startInputDate , Date endInputDate , String conferensituationId) {
		
		List tabMrhyylList = null;

		//取得查询条件为当日查询时的记录。
		if (radiobuttonString.equals("dr")) {
			 tabMrhyylList = conferensituationDAO.findTabMrhyylByDr(conferensituationId  );
		}
		//取得查询条件为当周查询时的记录。
        if (radiobuttonString.equals("dz")) {
    		 tabMrhyylList = conferensituationDAO.findTabMrhyylByDz(conferensituationId );
		}
        //取得查询条件为当月查询时的记录。
        if (radiobuttonString.equals("dy")) {
    		 tabMrhyylList = conferensituationDAO.findTabMrhyylByDy(conferensituationId  );
		}
        //取得查询条件为日期查询时的记录。
        if (radiobuttonString.equals("rq")) {
    		 tabMrhyylList = conferensituationDAO.findTabMrhyylByRq(conferensituationId  , startInputDate , endInputDate);
		}
       		
		//取得与每一个预约记录对应的所有还未回执的参加人名单
		List tabMrhycjzList = conferensituationDAO.findTabMrhycjz(conferensituationId , radiobuttonString , startInputDate , endInputDate);		
		
		//取得与每一个预约记录对应的已经回执的参加人数。
		List sumHzqrList = conferensituationDAO.findSumHzqr(conferensituationId , radiobuttonString , startInputDate , endInputDate);
		
		//自定义列表SituationInfo的定义 ， 用于存储由以上三个查询组合后的满足条件的记录。
        List <SituationInfo> result_info = new ArrayList();
        
        /*----------------------记录的组合--------------------------*/
        Integer  jiluInteger = 0; //变量定义：满足条件的记录数累加器。
	    for (Iterator iter = tabMrhyylList.iterator() ;  iter.hasNext();) {	 //循环取得当前会议室的所有预约记录。      	
           
	    	//取得当前记录的日期，并分解成年、月、日、周，并用于条件比较。
	    	Object[] record = (Object[]) iter.next();	             	        
            SituationInfo hyslist =new SituationInfo();	             
	        java.util.Date tabMrhyylhyqrDate = (java.util.Date)record[0];            	
	        java.util.Date tabMrhyylHykssjDate = (java.util.Date)record[1];

        	//存储满足条件的记录的记录数、会议日期、会议开始时间、结束时间、会议室ID、会议主题、预约人姓名、参加者人数、周期会议区分。
            jiluInteger++;
            String divString = "div";
            divString = divString + String.valueOf(jiluInteger);
            hyslist.setHysm(divString);
            
            hyslist.setHyrq ( (java.util.Date)(record[0])); 
           
            
            String hykssjString = String.valueOf(record[1]);
            String hyksshour = hykssjString.substring(0, 2);
    		String hykssjminute= hykssjString.substring(3, 5);
    		hyslist.setHykssj(hykssjString); 
            hyslist.setHykssjhour(hyksshour);
            hyslist.setHykssjminute(hykssjminute);
    		
    		
    		String hyjssjString = String.valueOf(record[2]);
    		String hyjssjhour= hyjssjString.substring(0 , 2);
    	    String hyjssjminute= hyjssjString.substring(3 , 5);
            hyslist.setHyjssj(hyjssjString); 
            hyslist.setHyjssjhour(hyjssjhour);
            hyslist.setHyjssjminute(hyjssjminute);
            
           
            hyslist.setHysid(( java.lang.Integer)record[3]);         	            	         	 
            hyslist.setHyzt(( java.lang.String)record[4]);         	 
            hyslist.setUserName(( java.lang.String)record[5]);         	 
            hyslist.setCjzrs(( java.lang.Integer)record[6]);        	 
            hyslist.setZqhyqf(( java.lang.Integer)record[7]);         	 
            
            //存储当前记录的参加者回执人数。
            for (Iterator iter1 = sumHzqrList.iterator();  iter1.hasNext();) {             		 
                Object[] record1 = (Object[]) iter1.next();            		
             	java.util.Date sumHyqrDate = (java.util.Date)record1[0];
             	java.util.Date sumHykssjDate = (java.util.Date)record1[1];
            	java.lang.Long sumLong = (java.lang.Long)record1[2];             		            		
             	if((( tabMrhyylhyqrDate.compareTo(sumHyqrDate))==0) && (( tabMrhyylHykssjDate.compareTo(sumHykssjDate))==0)){            			
             		hyslist.setSumHZ(sumLong);
             	}
             }
            
            //存储当前记录的参加者未回执人的姓名列表。
            java.lang.String  wcrmString ="";             	 
            for (Iterator iter2 = tabMrhycjzList.iterator();  iter2.hasNext();) {             		 
                Object[] record2 = (Object[]) iter2.next();             		
             	java.util.Date tabMrhycjzDate = (java.util.Date)record2[0];
            	java.util.Date tabMrhycjzHykssjDate = (java.util.Date)record2[1];
             	java.lang.String tabMrhycjzString = (java.lang.String)record2[4];             		
             	if((( tabMrhyylhyqrDate.compareTo(tabMrhycjzDate))==0) && (( tabMrhyylHykssjDate.compareTo(tabMrhycjzHykssjDate))==0)){             			
             		wcrmString = wcrmString + tabMrhycjzString + "  " ;             			
             	}            		
             }	 
             hyslist.setWcjrs(wcrmString);
            
             //将当前满足条件的记录添加到自定义列表中。
             result_info.add(hyslist);              
	        }	
	    //返回自定义列表。
        return result_info;
	}
	@SuppressWarnings("unchecked")
	@Override
	public String  getconferensituationName(String conferensituationId){
		
		//变量定义，存储会议室名称。
		String conferensituationName = null;
		//取得记录集。
		List conferensituationNameList = conferensituationDAO.findHysName(conferensituationId);
		//遍历conferensituationNameList
			
		//取得会议室名 
		Iterator iter2 = conferensituationNameList.iterator();
		while(iter2.hasNext()){			
			 Object record2 = (Object) iter2.next();			 
			 conferensituationName =(String)record2;
		}
		
		//返回获得的记录。
		return conferensituationName;
	}
}
