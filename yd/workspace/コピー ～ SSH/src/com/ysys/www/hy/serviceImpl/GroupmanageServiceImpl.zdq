package com.ysys.www.hy.serviceImpl;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import com.ysys.www.hy.dao.GpmanageDAO;
import com.ysys.www.hy.dao.condition.BookCondition;
import com.ysys.www.hy.dao.condition.TabZbyl;
import com.ysys.www.hy.dao.condition.Tempinfo;
import com.ysys.www.hy.service.GroupmanageService;
import com.ysys.www.hy.service.common.CommonConstants;
import com.ysys.www.hy.service.common.SessionManager;
import com.ysys.www.hy.service.common.UserInfo;
import com.ysys.www.hy.service.condition.Groupinfo;
import com.ysys.www.hy.service.condition.Groupshow;
import com.ysys.www.hy.service.condition.Pinfo;

public class GroupmanageServiceImpl implements GroupmanageService {

	private GpmanageDAO gpmanageDAO;

	public void setGpmanageDAO(GpmanageDAO gpmanageDAO) {
		this.gpmanageDAO = gpmanageDAO;
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<Groupinfo> getmanage() {

		// 登录者
		SessionManager session = new SessionManager();
		String jlzid = ((UserInfo) session.get(CommonConstants.USERINFO)).getUserID();
		String glyid = ((UserInfo)session.get(CommonConstants.USERINFO)).getJobId();
		Integer adflg = 0;
		//判断是否是管理员
		if (glyid.equals(CommonConstants.ADMINISTRATOR)){
			adflg = CommonConstants.ADMINISTRATOR;
		}
		List zbylllist = gpmanageDAO.getzbyl(jlzid, adflg);
		Iterator iter = zbylllist.iterator();
		List<Groupinfo> result_base = new ArrayList();

		Integer zbid = 0;		// 组别ID
		String zzwmc = null;	// 组名字
		Integer zbqf = 0;		// 组别区分
		Integer oldzbid = 0;	// 存放旧的组别ID
		String oldzzwmc = null;	// 存放旧的组名字
		Integer oldzbqf = 0;	// 存放旧的组别区分

		Integer cjrys = 0;		// 参加人数
		String cymingzi = "";	// 成员名字(连接用)
		String zcymz = null;	// 组成员名字
		String zbqfmz = null;	// 组别区分名字
		try {

			Object[] record = null;
			int ksflg = 0; // 是否是第一条数据0：是，1：不是
			for (; iter.hasNext();) {
				record = (Object[]) iter.next();

				zbid = (Integer) record[0];
				zzwmc = (String) record[1];
				zbqf = (Integer) record[2];
				zcymz = (String) record[4];

				// 当前组别ID和上一条组别ID不同时，向组信息List里插入一条数据
				if ((zbid.compareTo(oldzbid) != 0) && ksflg != 0) {
					
					Groupinfo roupinfo = new Groupinfo();
					roupinfo.setZbid(oldzbid);
					roupinfo.setZzwmc(oldzzwmc);
					roupinfo.setCygs(cjrys);
					// 去掉"，"号
					cymingzi = cymingzi.substring(0, cymingzi.length() - 1);

					// 当人数大于最大显示人数时，只显示最大显示人数。
					if (cjrys > CommonConstants.MAXCYSL) {
						cymingzi = cymingzi.concat(CommonConstants.DENGDENG);
					}

					roupinfo.setCymingzi(cymingzi);
					// 根据组别区分，设置不同的组别名字
					switch (oldzbqf) {
					case CommonConstants.PRIVATE_GROUP:
						zbqfmz = CommonConstants.PRIVATE_GROUP_NM;
						break;
					case CommonConstants.SHARE_GROUP:
						zbqfmz = CommonConstants.SHARE_GROUP_NM;
						break;
					case CommonConstants.PUBLIC_GROUP:
						zbqfmz = CommonConstants.PUBLIC_GROUP_NM;
						break;
					default:
						zbqfmz = "";
					}
					roupinfo.setZbqfmz(zbqfmz);
					result_base.add(roupinfo);
					cjrys = 0;
					cymingzi = "";
				}
				// 计算成员的数量
				cjrys++;
				// 成员之间用"，"号分开
				if (cjrys <= CommonConstants.MAXCYSL) {
					cymingzi = cymingzi.concat(zcymz);
					cymingzi = cymingzi + ",";
				}
				ksflg = 1;
				oldzbid = zbid;
				oldzzwmc = zzwmc;
				oldzbqf = zbqf;
			}
			// 对最后一条数据处理
			Groupinfo roupinfo = new Groupinfo();
			roupinfo.setZbid(zbid);
			roupinfo.setZzwmc(zzwmc);
			roupinfo.setCygs(cjrys);
			cymingzi = cymingzi.substring(0, cymingzi.length() - 1);
			if (cjrys > CommonConstants.MAXCYSL) {
				cymingzi = cymingzi.concat(CommonConstants.DENGDENG);
			}
			roupinfo.setCymingzi(cymingzi);

			switch (zbqf) {
			case CommonConstants.PRIVATE_GROUP:
				zbqfmz = CommonConstants.PRIVATE_GROUP_NM;
				break;
			case CommonConstants.SHARE_GROUP:
				zbqfmz = CommonConstants.SHARE_GROUP_NM;
				break;
			case CommonConstants.PUBLIC_GROUP:
				zbqfmz = CommonConstants.PUBLIC_GROUP_NM;
				break;
			default:
				zbqfmz = "";
			}
			roupinfo.setZbqfmz(zbqfmz);
			result_base.add(roupinfo);
		} catch (Exception ex) {
			System.out.println("数据中取出的数据有错，画面不能正确的显示");
		}
		return result_base;
	}
	/*
	 * 取得登录者自己建的组和自己所在的组
	 * @see com.ysys.www.hy.service.GroupmanageService#getzuname()
	 */
	@SuppressWarnings("unchecked")
	public List<Groupshow> getzuname() {
		
		// 日期格式
		SimpleDateFormat sdfs = new SimpleDateFormat("yyyy-MM-dd");
		// 登录者
		SessionManager session = new SessionManager();
		String jlzid = ((UserInfo) session.get(CommonConstants.USERINFO)).getUserID();
		// 管理员Id的取得
		String glyid = ((UserInfo)session.get(CommonConstants.USERINFO)).getJobId();
		Integer adflg = 0;
		// 判断是否是管理员
		if (glyid.equals(CommonConstants.ADMINISTRATOR)){
			adflg = CommonConstants.ADMINISTRATOR;
		}
		
		// 当前日期
		Date nowdate = new Date();
		String nownyr = sdfs.format(nowdate);
		
		// 项目组的取得
		List pjzulist = gpmanageDAO.getpjzu(jlzid, nownyr, adflg);
		
		// 全体组员的取得
		List<Tempinfo> quanyuanlist = gpmanageDAO.getqunyuan();
		List<Groupshow> result_groupshow = new ArrayList();
		// 自己建的组的取得
		List zjlist = gpmanageDAO.getzbyl(jlzid, 0);


		Iterator iterqu = quanyuanlist.iterator();
		Groupshow qugroupshowsqu = new Groupshow();
		qugroupshowsqu.setZuid("9999999");
		qugroupshowsqu.setZumc("全员");
		Tempinfo tempinfo = new Tempinfo();
		
		List<Pinfo> quresult_pinfo = new ArrayList();
		for(;iterqu.hasNext();){
			Pinfo qupinfos = new Pinfo();
			tempinfo = (Tempinfo) iterqu.next();
			qupinfos.setEmpid(tempinfo.getId());
			qupinfos.setEmpmc(tempinfo.getEmpName());
			quresult_pinfo.add(qupinfos);			
		}
		qugroupshowsqu.setPinfos(quresult_pinfo);
		result_groupshow.add(qugroupshowsqu);
		
		// 自己建的组的取得
		Integer ksflg = 0;


		Integer zjoldzubid = 0;
		String zjoldzumc = "";
		Integer zjzubid = 0;
		String zjzumc = "";
		String zjzyid = "";
		String zjzymc = "";
		Iterator zjiter = zjlist.iterator();
		List<Pinfo> zjresult_pinfo = new ArrayList();
		Object[] zjrecord = null;
		for (;zjiter.hasNext();){
			zjrecord = (Object[]) zjiter.next();
			Pinfo pinfos = new Pinfo();
			zjzubid = (Integer)zjrecord[0];
			zjzumc = (String)zjrecord[1];
			zjzyid = (String)zjrecord[3];
			zjzymc = (String)zjrecord[4];
			
			if ((zjzubid.compareTo(zjoldzubid) != 0) && ksflg != 0) {
				Groupshow zjgroupshows = new Groupshow();
				zjgroupshows.setZuid(String.valueOf(zjoldzubid));
				zjgroupshows.setZumc(zjoldzumc);
				zjgroupshows.setPinfos(zjresult_pinfo);
				result_groupshow.add(zjgroupshows);
				//zjresult_pinfo.clear();
				zjresult_pinfo = new ArrayList();
			}
			ksflg = 1;
			pinfos.setEmpid(zjzyid);
			pinfos.setEmpmc(zjzymc);
			zjresult_pinfo.add(pinfos);
			zjoldzubid = zjzubid;
			zjoldzumc = zjzumc;
		}
		// 对最后一条数据处理
		Groupshow zjgroupshows = new Groupshow();
		zjgroupshows.setZuid(String.valueOf(zjzubid));
		zjgroupshows.setZumc(zjzumc);
		zjgroupshows.setPinfos(zjresult_pinfo);
		result_groupshow.add(zjgroupshows);
		
		// 项目组的取得
		String oldzuid = "";
		String oldzumc = "";
		String zuid = "";
		String zumc = "";
		String zyid = "";
		String zymc = "";
		ksflg = 0;
		Iterator iter = pjzulist.iterator();

		List<Pinfo> result_pinfo = new ArrayList();
		Object[] record = null;

		for (;iter.hasNext();){
			record = (Object[]) iter.next();
			Pinfo pinfos = new Pinfo();
			zuid = (String)record[0];
			zumc = (String)record[1];
			zyid = (String)record[2];
			zymc = (String)record[3];
			
			if ((zuid.compareTo(oldzuid) != 0) && ksflg != 0) {
				Groupshow groupshows = new Groupshow();
				groupshows.setZuid(oldzuid);
				groupshows.setZumc(oldzumc);
				groupshows.setPinfos(result_pinfo);
				result_groupshow.add(groupshows);
				result_pinfo = new ArrayList();
			}
			pinfos.setEmpid(zyid);
			pinfos.setEmpmc(zymc);
			result_pinfo.add(pinfos);
			oldzuid = zuid;
			oldzumc = zumc;
		}
		// 对最后一条数据处理
		Groupshow groupshows = new Groupshow();
		groupshows.setZuid(zuid);
		groupshows.setZumc(zumc);
		groupshows.setPinfos(result_pinfo);
		result_groupshow.add(groupshows);
		return result_groupshow;
	}
	@SuppressWarnings("unchecked")
	public List<Pinfo> getinfo(List zmlist, String zuid) {
		String zmzuid = null;
		Groupshow zuminglsit = new Groupshow();
		List<Pinfo> pinfolist = null;
		List<Pinfo> pinfolist1 = new ArrayList();
		Iterator<Groupshow> iterator1 = zmlist.iterator();
		if(zuid.equals("")){
			//初始组List， 组员列表的显示
			Integer i = 0;
			if(i == 0){
				zuminglsit = iterator1.next();
				i++;
				Pinfo pinfolt = new Pinfo();
				pinfolt.setEmpid("");
				pinfolt.setEmpmc("");
				
				pinfolist1.add(pinfolt);
				//pinfolist =  zuminglsit.getPinfos();
				pinfolist = pinfolist1;
			}
		}
		else{
			//组改变时， 组员列表的显示
			for(;iterator1.hasNext();){
				zuminglsit = iterator1.next();
				zmzuid = zuminglsit.getZuid();
				if(zuid.equals(zmzuid)){
					pinfolist = zuminglsit.getPinfos();
				}
			}
		}
		return pinfolist;
	}
	
	@Override
	public void updateZbyl(String zbid) {
		TabZbyl tabzbyl = gpmanageDAO.findById(zbid);
		gpmanageDAO.updateZbyl(tabzbyl);
	}

	@Override
	public void deleteZbyl(String zbid) {
		TabZbyl tabzbyl = gpmanageDAO.findById(zbid);
		gpmanageDAO.deleteZbyl(tabzbyl);
	}
}
